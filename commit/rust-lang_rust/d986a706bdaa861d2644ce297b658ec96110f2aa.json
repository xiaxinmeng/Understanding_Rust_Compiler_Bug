{"sha": "d986a706bdaa861d2644ce297b658ec96110f2aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5ODZhNzA2YmRhYTg2MWQyNjQ0Y2UyOTdiNjU4ZWM5NjExMGYyYWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-15T14:40:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-15T14:40:10Z"}, "message": "Rollup merge of #70006 - petrochenkov:fresh, r=Centril\n\nresolve: Fix two issues in fresh binding disambiguation\n\nPrevent fresh bindings from shadowing ambiguity items.\nFixes https://github.com/rust-lang/rust/issues/46079\n\nCorrectly treat const generic parameters in fresh binding disambiguation.\nFixes https://github.com/rust-lang/rust/issues/68853", "tree": {"sha": "9281e3bbf92f206c25a3f36a0232ff55db298a79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9281e3bbf92f206c25a3f36a0232ff55db298a79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d986a706bdaa861d2644ce297b658ec96110f2aa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJebj5KCRBK7hj4Ov3rIwAAdHIIAItcoayjlxNTxY1jxNPRaMxT\nogKnIovemFmRWRE1xykn0lU3qfY7TxCl3uvVLn1s8zfR8xT36sXryDdzCqSZbx2S\n355ZtPW4GRXRjQfQThm6k8uZu9WZcp2BhX8PRW1AwpQmw3rGr406qvZKe2UW5p0N\np9tEOUTvz7/dkZr/kB7pnODah7rpJDPj+yfEmAYreD4nqsTzV1PYLvlMZchTCdDW\nzgqgmkszzHHifNmfJzvjIVky4nmCsA2lLOBWhxLiu8o5iiBsLREJysEHdfOpR3zM\nf1ouA2FRk5L3AypUhvUnErjKDIyMIlDqgcZ3ATXBRXnWcC/qx++DIEdnDY3O2QE=\n=5xLr\n-----END PGP SIGNATURE-----\n", "payload": "tree 9281e3bbf92f206c25a3f36a0232ff55db298a79\nparent 8bca839fdfd654581468019a3a69cc6987b585ea\nparent 78f01eca3f4d6843125199578d3f2186655ddf62\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584283210 +0100\ncommitter GitHub <noreply@github.com> 1584283210 +0100\n\nRollup merge of #70006 - petrochenkov:fresh, r=Centril\n\nresolve: Fix two issues in fresh binding disambiguation\n\nPrevent fresh bindings from shadowing ambiguity items.\nFixes https://github.com/rust-lang/rust/issues/46079\n\nCorrectly treat const generic parameters in fresh binding disambiguation.\nFixes https://github.com/rust-lang/rust/issues/68853\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d986a706bdaa861d2644ce297b658ec96110f2aa", "html_url": "https://github.com/rust-lang/rust/commit/d986a706bdaa861d2644ce297b658ec96110f2aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d986a706bdaa861d2644ce297b658ec96110f2aa/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bca839fdfd654581468019a3a69cc6987b585ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bca839fdfd654581468019a3a69cc6987b585ea", "html_url": "https://github.com/rust-lang/rust/commit/8bca839fdfd654581468019a3a69cc6987b585ea"}, {"sha": "78f01eca3f4d6843125199578d3f2186655ddf62", "url": "https://api.github.com/repos/rust-lang/rust/commits/78f01eca3f4d6843125199578d3f2186655ddf62", "html_url": "https://github.com/rust-lang/rust/commit/78f01eca3f4d6843125199578d3f2186655ddf62"}], "stats": {"total": 147, "additions": 123, "deletions": 24}, "files": [{"sha": "b817470b4c30f9e0cdfa8a4c55b7170ee6fb460b", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=d986a706bdaa861d2644ce297b658ec96110f2aa", "patch": "@@ -87,6 +87,9 @@ impl PatCtxt<'_, '_> {\n                 PatternError::AssocConstInPattern(span) => {\n                     self.span_e0158(span, \"associated consts cannot be referenced in patterns\")\n                 }\n+                PatternError::ConstParamInPattern(span) => {\n+                    self.span_e0158(span, \"const parameters cannot be referenced in patterns\")\n+                }\n                 PatternError::FloatBug => {\n                     // FIXME(#31407) this is only necessary because float parsing is buggy\n                     ::rustc::mir::interpret::struct_error("}, {"sha": "6786c3562930840d5411ce940d0e90393ec96439", "filename": "src/librustc_mir_build/hair/pattern/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fmod.rs?ref=d986a706bdaa861d2644ce297b658ec96110f2aa", "patch": "@@ -31,6 +31,7 @@ use std::fmt;\n #[derive(Clone, Debug)]\n crate enum PatternError {\n     AssocConstInPattern(Span),\n+    ConstParamInPattern(Span),\n     StaticInPattern(Span),\n     FloatBug,\n     NonConstPath(Span),\n@@ -727,7 +728,11 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n             | Res::SelfCtor(..) => PatKind::Leaf { subpatterns },\n \n             _ => {\n-                self.errors.push(PatternError::NonConstPath(span));\n+                let pattern_error = match res {\n+                    Res::Def(DefKind::ConstParam, _) => PatternError::ConstParamInPattern(span),\n+                    _ => PatternError::NonConstPath(span),\n+                };\n+                self.errors.push(pattern_error);\n                 PatKind::Wild\n             }\n         };"}, {"sha": "7efd9e90cebb9e2585e45b4bb4789427a69f6c11", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=d986a706bdaa861d2644ce297b658ec96110f2aa", "patch": "@@ -1517,21 +1517,33 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         ident: Ident,\n         has_sub: bool,\n     ) -> Option<Res> {\n-        let binding =\n-            self.resolve_ident_in_lexical_scope(ident, ValueNS, None, pat.span)?.item()?;\n-        let res = binding.res();\n+        let ls_binding = self.resolve_ident_in_lexical_scope(ident, ValueNS, None, pat.span)?;\n+        let (res, binding) = match ls_binding {\n+            LexicalScopeBinding::Item(binding) if binding.is_ambiguity() => {\n+                // For ambiguous bindings we don't know all their definitions and cannot check\n+                // whether they can be shadowed by fresh bindings or not, so force an error.\n+                self.r.record_use(ident, ValueNS, binding, false);\n+                return None;\n+            }\n+            LexicalScopeBinding::Item(binding) => (binding.res(), Some(binding)),\n+            LexicalScopeBinding::Res(res) => (res, None),\n+        };\n \n         // An immutable (no `mut`) by-value (no `ref`) binding pattern without\n         // a sub pattern (no `@ $pat`) is syntactically ambiguous as it could\n         // also be interpreted as a path to e.g. a constant, variant, etc.\n         let is_syntactic_ambiguity = !has_sub && bm == BindingMode::ByValue(Mutability::Not);\n \n         match res {\n-            Res::Def(DefKind::Ctor(_, CtorKind::Const), _) | Res::Def(DefKind::Const, _)\n+            Res::Def(DefKind::Ctor(_, CtorKind::Const), _)\n+            | Res::Def(DefKind::Const, _)\n+            | Res::Def(DefKind::ConstParam, _)\n                 if is_syntactic_ambiguity =>\n             {\n                 // Disambiguate in favor of a unit struct/variant or constant pattern.\n-                self.r.record_use(ident, ValueNS, binding, false);\n+                if let Some(binding) = binding {\n+                    self.r.record_use(ident, ValueNS, binding, false);\n+                }\n                 Some(res)\n             }\n             Res::Def(DefKind::Ctor(..), _)\n@@ -1547,23 +1559,20 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                     ResolutionError::BindingShadowsSomethingUnacceptable(\n                         pat_src.descr(),\n                         ident.name,\n-                        binding,\n+                        binding.expect(\"no binding for a ctor or static\"),\n                     ),\n                 );\n                 None\n             }\n-            Res::Def(DefKind::Fn, _) | Res::Err => {\n+            Res::Def(DefKind::Fn, _) | Res::Local(..) | Res::Err => {\n                 // These entities are explicitly allowed to be shadowed by fresh bindings.\n                 None\n             }\n-            res => {\n-                span_bug!(\n-                    ident.span,\n-                    \"unexpected resolution for an \\\n-                                        identifier in pattern: {:?}\",\n-                    res\n-                );\n-            }\n+            _ => span_bug!(\n+                ident.span,\n+                \"unexpected resolution for an identifier in pattern: {:?}\",\n+                res\n+            ),\n         }\n     }\n "}, {"sha": "37a800a0b7bdb20a8c7a0c9db557777b4c26f5e9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d986a706bdaa861d2644ce297b658ec96110f2aa", "patch": "@@ -323,13 +323,6 @@ enum LexicalScopeBinding<'a> {\n }\n \n impl<'a> LexicalScopeBinding<'a> {\n-    fn item(self) -> Option<&'a NameBinding<'a>> {\n-        match self {\n-            LexicalScopeBinding::Item(binding) => Some(binding),\n-            _ => None,\n-        }\n-    }\n-\n     fn res(self) -> Res {\n         match self {\n             LexicalScopeBinding::Item(binding) => binding.res(),"}, {"sha": "fabf3dd1153b7db9c84390cf09a6c2008f43a18b", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=d986a706bdaa861d2644ce297b658ec96110f2aa", "patch": "@@ -716,7 +716,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Res::Def(DefKind::Ctor(_, CtorKind::Const), _)\n             | Res::SelfCtor(..)\n             | Res::Def(DefKind::Const, _)\n-            | Res::Def(DefKind::AssocConst, _) => {} // OK\n+            | Res::Def(DefKind::AssocConst, _)\n+            | Res::Def(DefKind::ConstParam, _) => {} // OK\n             _ => bug!(\"unexpected pattern resolution: {:?}\", res),\n         }\n "}, {"sha": "10613cc616413074db5211b2f1ec688621474104", "filename": "src/test/ui/binding/ambiguity-item.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Ftest%2Fui%2Fbinding%2Fambiguity-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Ftest%2Fui%2Fbinding%2Fambiguity-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fambiguity-item.rs?ref=d986a706bdaa861d2644ce297b658ec96110f2aa", "patch": "@@ -0,0 +1,18 @@\n+// Identifier pattern referring to an ambiguity item is an error (issue #46079).\n+\n+mod m {\n+    pub fn f() {}\n+}\n+use m::*;\n+\n+mod n {\n+    pub fn f() {}\n+}\n+use n::*; // OK, no conflict with `use m::*;`\n+\n+fn main() {\n+    let v = f; //~ ERROR `f` is ambiguous\n+    match v {\n+        f => {} //~ ERROR `f` is ambiguous\n+    }\n+}"}, {"sha": "615193c0d02db929e18188c2603fdca40a6d501a", "filename": "src/test/ui/binding/ambiguity-item.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Ftest%2Fui%2Fbinding%2Fambiguity-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Ftest%2Fui%2Fbinding%2Fambiguity-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fambiguity-item.stderr?ref=d986a706bdaa861d2644ce297b658ec96110f2aa", "patch": "@@ -0,0 +1,41 @@\n+error[E0659]: `f` is ambiguous (glob import vs glob import in the same module)\n+  --> $DIR/ambiguity-item.rs:14:13\n+   |\n+LL |     let v = f;\n+   |             ^ ambiguous name\n+   |\n+note: `f` could refer to the function imported here\n+  --> $DIR/ambiguity-item.rs:6:5\n+   |\n+LL | use m::*;\n+   |     ^^^^\n+   = help: consider adding an explicit import of `f` to disambiguate\n+note: `f` could also refer to the function imported here\n+  --> $DIR/ambiguity-item.rs:11:5\n+   |\n+LL | use n::*; // OK, no conflict with `use m::*;`\n+   |     ^^^^\n+   = help: consider adding an explicit import of `f` to disambiguate\n+\n+error[E0659]: `f` is ambiguous (glob import vs glob import in the same module)\n+  --> $DIR/ambiguity-item.rs:16:9\n+   |\n+LL |         f => {}\n+   |         ^ ambiguous name\n+   |\n+note: `f` could refer to the function imported here\n+  --> $DIR/ambiguity-item.rs:6:5\n+   |\n+LL | use m::*;\n+   |     ^^^^\n+   = help: consider adding an explicit import of `f` to disambiguate\n+note: `f` could also refer to the function imported here\n+  --> $DIR/ambiguity-item.rs:11:5\n+   |\n+LL | use n::*; // OK, no conflict with `use m::*;`\n+   |     ^^^^\n+   = help: consider adding an explicit import of `f` to disambiguate\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0659`."}, {"sha": "3c7f4d071f6945bec39a26998f92b697b0843c08", "filename": "src/test/ui/binding/const-param.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Ftest%2Fui%2Fbinding%2Fconst-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Ftest%2Fui%2Fbinding%2Fconst-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fconst-param.rs?ref=d986a706bdaa861d2644ce297b658ec96110f2aa", "patch": "@@ -0,0 +1,12 @@\n+// Identifier pattern referring to a const generic parameter is an error (issue #68853).\n+\n+#![feature(const_generics)] //~ WARN the feature `const_generics` is incomplete\n+\n+fn check<const N: usize>() {\n+    match 1 {\n+        N => {} //~ ERROR const parameters cannot be referenced in patterns\n+        _ => {}\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "25b1c75c9a0045e6f44b1f0496f32489420bbdc7", "filename": "src/test/ui/binding/const-param.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d986a706bdaa861d2644ce297b658ec96110f2aa/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbinding%2Fconst-param.stderr?ref=d986a706bdaa861d2644ce297b658ec96110f2aa", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-param.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0158]: const parameters cannot be referenced in patterns\n+  --> $DIR/const-param.rs:7:9\n+   |\n+LL |         N => {}\n+   |         ^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0158`."}]}