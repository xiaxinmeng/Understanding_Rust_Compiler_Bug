{"sha": "b6b00578dbd6ef6724b104160744339e9736fb1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2YjAwNTc4ZGJkNmVmNjcyNGIxMDQxNjA3NDQzMzllOTczNmZiMWU=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-08T14:42:53Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-10T11:13:54Z"}, "message": "librustc_middle: return LocalDefId instead of DefId in get_parent_did", "tree": {"sha": "75ea84f4041236e17640ae92e5dcbb27b918fca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75ea84f4041236e17640ae92e5dcbb27b918fca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6b00578dbd6ef6724b104160744339e9736fb1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6b00578dbd6ef6724b104160744339e9736fb1e", "html_url": "https://github.com/rust-lang/rust/commit/b6b00578dbd6ef6724b104160744339e9736fb1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6b00578dbd6ef6724b104160744339e9736fb1e/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "555e024abcd8073d00939575a361417f24374443", "url": "https://api.github.com/repos/rust-lang/rust/commits/555e024abcd8073d00939575a361417f24374443", "html_url": "https://github.com/rust-lang/rust/commit/555e024abcd8073d00939575a361417f24374443"}], "stats": {"total": 49, "additions": 26, "deletions": 23}, "files": [{"sha": "3eaacb54d5b42cb0b0761a502c2972a704e7bd62", "filename": "src/librustc_middle/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6b00578dbd6ef6724b104160744339e9736fb1e/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b00578dbd6ef6724b104160744339e9736fb1e/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fhir%2Fmap%2Fmod.rs?ref=b6b00578dbd6ef6724b104160744339e9736fb1e", "patch": "@@ -720,9 +720,8 @@ impl<'hir> Map<'hir> {\n         scope\n     }\n \n-    // FIXME(eddyb) this function can and should return `LocalDefId`.\n-    pub fn get_parent_did(&self, id: HirId) -> DefId {\n-        self.local_def_id(self.get_parent_item(id))\n+    pub fn get_parent_did(&self, id: HirId) -> LocalDefId {\n+        self.local_def_id(self.get_parent_item(id)).expect_local()\n     }\n \n     pub fn get_foreign_abi(&self, hir_id: HirId) -> Abi {"}, {"sha": "f1dff4fceb498e9f3118d58a94116a7f0db52db9", "filename": "src/librustc_mir/const_eval/fn_queries.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b6b00578dbd6ef6724b104160744339e9736fb1e/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b00578dbd6ef6724b104160744339e9736fb1e/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Ffn_queries.rs?ref=b6b00578dbd6ef6724b104160744339e9736fb1e", "patch": "@@ -84,11 +84,7 @@ pub fn is_min_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n \n pub fn is_parent_const_impl_raw(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n     let parent_id = tcx.hir().get_parent_did(hir_id);\n-    if !parent_id.is_top_level_module() {\n-        is_const_impl_raw(tcx, parent_id.expect_local())\n-    } else {\n-        false\n-    }\n+    if !parent_id.is_top_level_module() { is_const_impl_raw(tcx, parent_id) } else { false }\n }\n \n /// Checks whether the function has a `const` modifier or, in case it is an intrinsic, whether"}, {"sha": "dcf50d7c0899012866743d10848fe2d849c7865a", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b6b00578dbd6ef6724b104160744339e9736fb1e/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b00578dbd6ef6724b104160744339e9736fb1e/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=b6b00578dbd6ef6724b104160744339e9736fb1e", "patch": "@@ -10,7 +10,7 @@ use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::LOCAL_CRATE;\n-use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirIdSet, Node};\n@@ -42,7 +42,7 @@ fn item_might_be_inlined(tcx: TyCtxt<'tcx>, item: &hir::Item<'_>, attrs: Codegen\n fn method_might_be_inlined(\n     tcx: TyCtxt<'_>,\n     impl_item: &hir::ImplItem<'_>,\n-    impl_src: DefId,\n+    impl_src: LocalDefId,\n ) -> bool {\n     let codegen_fn_attrs = tcx.codegen_fn_attrs(impl_item.hir_id.owner.to_def_id());\n     let generics = tcx.generics_of(tcx.hir().local_def_id(impl_item.hir_id));\n@@ -54,7 +54,7 @@ fn method_might_be_inlined(\n             return true;\n         }\n     }\n-    if let Some(impl_hir_id) = tcx.hir().as_local_hir_id(impl_src) {\n+    if let Some(impl_hir_id) = tcx.hir().as_local_hir_id(impl_src.to_def_id()) {\n         match tcx.hir().find(impl_hir_id) {\n             Some(Node::Item(item)) => item_might_be_inlined(tcx, &item, codegen_fn_attrs),\n             Some(..) | None => span_bug!(impl_item.span, \"impl did is not an item\"),\n@@ -171,7 +171,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                         if generics.requires_monomorphization(self.tcx) || attrs.requests_inline() {\n                             true\n                         } else {\n-                            let impl_did = self.tcx.hir().get_parent_did(hir_id);\n+                            let impl_did = self.tcx.hir().get_parent_did(hir_id).to_def_id();\n                             // Check the impl. If the generics on the self\n                             // type of the impl require inlining, this method\n                             // does too."}, {"sha": "a6d880667adf22f0576c3b81e8140f112e1e17b3", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b6b00578dbd6ef6724b104160744339e9736fb1e/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b00578dbd6ef6724b104160744339e9736fb1e/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=b6b00578dbd6ef6724b104160744339e9736fb1e", "patch": "@@ -248,7 +248,7 @@ fn def_id_visibility<'tcx>(\n                     }\n                 }\n                 Node::TraitItem(..) | Node::Variant(..) => {\n-                    return def_id_visibility(tcx, tcx.hir().get_parent_did(hir_id));\n+                    return def_id_visibility(tcx, tcx.hir().get_parent_did(hir_id).to_def_id());\n                 }\n                 Node::ImplItem(impl_item) => {\n                     match tcx.hir().get(tcx.hir().get_parent_item(hir_id)) {\n@@ -270,7 +270,7 @@ fn def_id_visibility<'tcx>(\n                             let (mut ctor_vis, mut span, mut descr) =\n                                 def_id_visibility(tcx, parent_did);\n \n-                            let adt_def = tcx.adt_def(tcx.hir().get_parent_did(hir_id));\n+                            let adt_def = tcx.adt_def(tcx.hir().get_parent_did(hir_id).to_def_id());\n                             let ctor_did = tcx.hir().local_def_id(vdata.ctor_hir_id().unwrap());\n                             let variant = adt_def.variant_with_ctor_id(ctor_did);\n \n@@ -309,7 +309,8 @@ fn def_id_visibility<'tcx>(\n                             // If the structure is marked as non_exhaustive then lower the\n                             // visibility to within the crate.\n                             if ctor_vis == ty::Visibility::Public {\n-                                let adt_def = tcx.adt_def(tcx.hir().get_parent_did(hir_id));\n+                                let adt_def =\n+                                    tcx.adt_def(tcx.hir().get_parent_did(hir_id).to_def_id());\n                                 if adt_def.non_enum_variant().is_field_list_non_exhaustive() {\n                                     ctor_vis =\n                                         ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));"}, {"sha": "fad9f2f613012db8ac9e00610a75911865b41c5f", "filename": "src/librustc_span/def_id.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b6b00578dbd6ef6724b104160744339e9736fb1e/src%2Flibrustc_span%2Fdef_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b00578dbd6ef6724b104160744339e9736fb1e/src%2Flibrustc_span%2Fdef_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fdef_id.rs?ref=b6b00578dbd6ef6724b104160744339e9736fb1e", "patch": "@@ -224,6 +224,11 @@ impl LocalDefId {\n     pub fn to_def_id(self) -> DefId {\n         DefId { krate: LOCAL_CRATE, index: self.local_def_index }\n     }\n+\n+    #[inline]\n+    pub fn is_top_level_module(self) -> bool {\n+        self.local_def_index == CRATE_DEF_INDEX\n+    }\n }\n \n impl fmt::Debug for LocalDefId {"}, {"sha": "83e56e3c96a96efe738e92d6bd0129a8ca1f567e", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6b00578dbd6ef6724b104160744339e9736fb1e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b00578dbd6ef6724b104160744339e9736fb1e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=b6b00578dbd6ef6724b104160744339e9736fb1e", "patch": "@@ -2371,7 +2371,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n             let parent_def_id = def_id\n                 .and_then(|def_id| tcx.hir().as_local_hir_id(def_id))\n-                .map(|hir_id| tcx.hir().get_parent_did(hir_id));\n+                .map(|hir_id| tcx.hir().get_parent_did(hir_id).to_def_id());\n \n             debug!(\"qpath_to_ty: parent_def_id={:?}\", parent_def_id);\n "}, {"sha": "5414a343c68e1bf86d9052bbd1f6348435e580a5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b6b00578dbd6ef6724b104160744339e9736fb1e/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b00578dbd6ef6724b104160744339e9736fb1e/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b6b00578dbd6ef6724b104160744339e9736fb1e", "patch": "@@ -1513,7 +1513,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n         }\n \n         Ctor(data) | Variant(hir::Variant { data, .. }) if data.ctor_hir_id().is_some() => {\n-            let ty = tcx.type_of(tcx.hir().get_parent_did(hir_id));\n+            let ty = tcx.type_of(tcx.hir().get_parent_did(hir_id).to_def_id());\n             let inputs =\n                 data.fields().iter().map(|f| tcx.type_of(tcx.hir().local_def_id(f.hir_id)));\n             ty::Binder::bind(tcx.mk_fn_sig("}, {"sha": "985f66694b671d2e231fbd37203117a8b86bbc6a", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b6b00578dbd6ef6724b104160744339e9736fb1e/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6b00578dbd6ef6724b104160744339e9736fb1e/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=b6b00578dbd6ef6724b104160744339e9736fb1e", "patch": "@@ -59,14 +59,14 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 }\n             }\n             ImplItemKind::OpaqueTy(_) => {\n-                if tcx.impl_trait_ref(tcx.hir().get_parent_did(hir_id)).is_none() {\n+                if tcx.impl_trait_ref(tcx.hir().get_parent_did(hir_id).to_def_id()).is_none() {\n                     report_assoc_ty_on_inherent_impl(tcx, item.span);\n                 }\n \n                 find_opaque_ty_constraints(tcx, def_id)\n             }\n             ImplItemKind::TyAlias(ref ty) => {\n-                if tcx.impl_trait_ref(tcx.hir().get_parent_did(hir_id)).is_none() {\n+                if tcx.impl_trait_ref(tcx.hir().get_parent_did(hir_id).to_def_id()).is_none() {\n                     report_assoc_ty_on_inherent_impl(tcx, item.span);\n                 }\n \n@@ -177,7 +177,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n         Node::Ctor(&ref def) | Node::Variant(Variant { data: ref def, .. }) => match *def {\n             VariantData::Unit(..) | VariantData::Struct(..) => {\n-                tcx.type_of(tcx.hir().get_parent_did(hir_id))\n+                tcx.type_of(tcx.hir().get_parent_did(hir_id).to_def_id())\n             }\n             VariantData::Tuple(..) => {\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n@@ -207,9 +207,11 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                     tcx.types.usize\n                 }\n \n-                Node::Variant(Variant { disr_expr: Some(ref e), .. }) if e.hir_id == hir_id => {\n-                    tcx.adt_def(tcx.hir().get_parent_did(hir_id)).repr.discr_type().to_ty(tcx)\n-                }\n+                Node::Variant(Variant { disr_expr: Some(ref e), .. }) if e.hir_id == hir_id => tcx\n+                    .adt_def(tcx.hir().get_parent_did(hir_id).to_def_id())\n+                    .repr\n+                    .discr_type()\n+                    .to_ty(tcx),\n \n                 Node::Ty(&Ty { kind: TyKind::Path(_), .. })\n                 | Node::Expr(&Expr { kind: ExprKind::Struct(..), .. })"}]}