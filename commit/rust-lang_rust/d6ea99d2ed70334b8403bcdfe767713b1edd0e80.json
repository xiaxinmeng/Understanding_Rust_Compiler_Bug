{"sha": "d6ea99d2ed70334b8403bcdfe767713b1edd0e80", "node_id": "C_kwDOAAsO6NoAKGQ2ZWE5OWQyZWQ3MDMzNGI4NDAzYmNkZmU3Njc3MTNiMWVkZDBlODA", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-01-18T10:25:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-18T10:25:36Z"}, "message": "Rollup merge of #103702 - WaffleLapkin:lift-sized-bounds-from-pointer-methods-where-applicable, r=m-ou-se\n\nLift `T: Sized` bounds from some `strict_provenance` pointer methods\n\nThis PR removes requirement for `T` (pointee type) to be `Sized` to call `pointer::{addr, expose_addr, with_addr, map_addr}`. These functions don't use `T`'s size, so there is no reason for them to require this. Updated public API:\n\ncc ``@Gankra,`` #95228\nr? libs-api", "tree": {"sha": "2464598d1455d853868018659f5326d49da515bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2464598d1455d853868018659f5326d49da515bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6ea99d2ed70334b8403bcdfe767713b1edd0e80", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjx8kgCRBK7hj4Ov3rIwAAy9oIAAyFsL7eXr35t/gdh9rA5N+7\nrFikcCeQWyc9XWC+FBDVYRxAN1JpI/1jOISablb1FyrQSLT1YipzYmaLC/K0FGry\n8a2DlCf0FUe8Kik8jlt6iDYxWKUXZW6gX8zBNPYG3ryfjqQtXmgsIhQdU8YQo3+R\nKe5Iz4r6mkEsK6W49Gs3muAIod7ADgPzQE+5Hr0WQ9R7IVpAqoJNYGDMlufIpPG1\nsUytQkXw+PGu12/dfvURNMsQ9PWCaaWpTGTlg6ZYpk7j0M2rwCK15pLf34Loxw/G\nmH+vmo3LILhm502KrtxtRR2BwafaeirLqi9xBQFrfGAbOB/oYCrKEoh3wNOYiI4=\n=O04d\n-----END PGP SIGNATURE-----\n", "payload": "tree 2464598d1455d853868018659f5326d49da515bf\nparent 74c1ad5d35c7fbdb834c42144d966279fdff3679\nparent 662f1f20e4497cdd1459d15686706fe27d56d335\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1674037536 +0530\ncommitter GitHub <noreply@github.com> 1674037536 +0530\n\nRollup merge of #103702 - WaffleLapkin:lift-sized-bounds-from-pointer-methods-where-applicable, r=m-ou-se\n\nLift `T: Sized` bounds from some `strict_provenance` pointer methods\n\nThis PR removes requirement for `T` (pointee type) to be `Sized` to call `pointer::{addr, expose_addr, with_addr, map_addr}`. These functions don't use `T`'s size, so there is no reason for them to require this. Updated public API:\n\ncc ``@Gankra,`` #95228\nr? libs-api\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6ea99d2ed70334b8403bcdfe767713b1edd0e80", "html_url": "https://github.com/rust-lang/rust/commit/d6ea99d2ed70334b8403bcdfe767713b1edd0e80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6ea99d2ed70334b8403bcdfe767713b1edd0e80/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74c1ad5d35c7fbdb834c42144d966279fdff3679", "url": "https://api.github.com/repos/rust-lang/rust/commits/74c1ad5d35c7fbdb834c42144d966279fdff3679", "html_url": "https://github.com/rust-lang/rust/commit/74c1ad5d35c7fbdb834c42144d966279fdff3679"}, {"sha": "662f1f20e4497cdd1459d15686706fe27d56d335", "url": "https://api.github.com/repos/rust-lang/rust/commits/662f1f20e4497cdd1459d15686706fe27d56d335", "html_url": "https://github.com/rust-lang/rust/commit/662f1f20e4497cdd1459d15686706fe27d56d335"}], "stats": {"total": 63, "additions": 15, "deletions": 48}, "files": [{"sha": "7b1cb5488bcac650871b9ee38de84fb536bef4e7", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d6ea99d2ed70334b8403bcdfe767713b1edd0e80/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ea99d2ed70334b8403bcdfe767713b1edd0e80/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=d6ea99d2ed70334b8403bcdfe767713b1edd0e80", "patch": "@@ -202,14 +202,11 @@ impl<T: ?Sized> *const T {\n     #[must_use]\n     #[inline(always)]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn addr(self) -> usize\n-    where\n-        T: Sized,\n-    {\n+    pub fn addr(self) -> usize {\n         // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n         // SAFETY: Pointer-to-integer transmutes are valid (if you are okay with losing the\n         // provenance).\n-        unsafe { mem::transmute(self) }\n+        unsafe { mem::transmute(self.cast::<()>()) }\n     }\n \n     /// Gets the \"address\" portion of the pointer, and 'exposes' the \"provenance\" part for future\n@@ -239,12 +236,9 @@ impl<T: ?Sized> *const T {\n     #[must_use]\n     #[inline(always)]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn expose_addr(self) -> usize\n-    where\n-        T: Sized,\n-    {\n+    pub fn expose_addr(self) -> usize {\n         // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n-        self as usize\n+        self.cast::<()>() as usize\n     }\n \n     /// Creates a new pointer with the given address.\n@@ -262,10 +256,7 @@ impl<T: ?Sized> *const T {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn with_addr(self, addr: usize) -> Self\n-    where\n-        T: Sized,\n-    {\n+    pub fn with_addr(self, addr: usize) -> Self {\n         // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n         //\n         // In the mean-time, this operation is defined to be \"as if\" it was\n@@ -288,10 +279,7 @@ impl<T: ?Sized> *const T {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn map_addr(self, f: impl FnOnce(usize) -> usize) -> Self\n-    where\n-        T: Sized,\n-    {\n+    pub fn map_addr(self, f: impl FnOnce(usize) -> usize) -> Self {\n         self.with_addr(f(self.addr()))\n     }\n "}, {"sha": "ed1e3bd48122761607f22a10f0bfb11608c0d892", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d6ea99d2ed70334b8403bcdfe767713b1edd0e80/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ea99d2ed70334b8403bcdfe767713b1edd0e80/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=d6ea99d2ed70334b8403bcdfe767713b1edd0e80", "patch": "@@ -208,14 +208,11 @@ impl<T: ?Sized> *mut T {\n     #[must_use]\n     #[inline(always)]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn addr(self) -> usize\n-    where\n-        T: Sized,\n-    {\n+    pub fn addr(self) -> usize {\n         // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n         // SAFETY: Pointer-to-integer transmutes are valid (if you are okay with losing the\n         // provenance).\n-        unsafe { mem::transmute(self) }\n+        unsafe { mem::transmute(self.cast::<()>()) }\n     }\n \n     /// Gets the \"address\" portion of the pointer, and 'exposes' the \"provenance\" part for future\n@@ -245,12 +242,9 @@ impl<T: ?Sized> *mut T {\n     #[must_use]\n     #[inline(always)]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn expose_addr(self) -> usize\n-    where\n-        T: Sized,\n-    {\n+    pub fn expose_addr(self) -> usize {\n         // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n-        self as usize\n+        self.cast::<()>() as usize\n     }\n \n     /// Creates a new pointer with the given address.\n@@ -268,10 +262,7 @@ impl<T: ?Sized> *mut T {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn with_addr(self, addr: usize) -> Self\n-    where\n-        T: Sized,\n-    {\n+    pub fn with_addr(self, addr: usize) -> Self {\n         // FIXME(strict_provenance_magic): I am magic and should be a compiler intrinsic.\n         //\n         // In the mean-time, this operation is defined to be \"as if\" it was\n@@ -294,10 +285,7 @@ impl<T: ?Sized> *mut T {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn map_addr(self, f: impl FnOnce(usize) -> usize) -> Self\n-    where\n-        T: Sized,\n-    {\n+    pub fn map_addr(self, f: impl FnOnce(usize) -> usize) -> Self {\n         self.with_addr(f(self.addr()))\n     }\n "}, {"sha": "8c1a648860555bacacf1d8b9d7cce1e621f08cc0", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d6ea99d2ed70334b8403bcdfe767713b1edd0e80/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6ea99d2ed70334b8403bcdfe767713b1edd0e80/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=d6ea99d2ed70334b8403bcdfe767713b1edd0e80", "patch": "@@ -268,10 +268,7 @@ impl<T: ?Sized> NonNull<T> {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn addr(self) -> NonZeroUsize\n-    where\n-        T: Sized,\n-    {\n+    pub fn addr(self) -> NonZeroUsize {\n         // SAFETY: The pointer is guaranteed by the type to be non-null,\n         // meaning that the address will be non-zero.\n         unsafe { NonZeroUsize::new_unchecked(self.pointer.addr()) }\n@@ -286,10 +283,7 @@ impl<T: ?Sized> NonNull<T> {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn with_addr(self, addr: NonZeroUsize) -> Self\n-    where\n-        T: Sized,\n-    {\n+    pub fn with_addr(self, addr: NonZeroUsize) -> Self {\n         // SAFETY: The result of `ptr::from::with_addr` is non-null because `addr` is guaranteed to be non-zero.\n         unsafe { NonNull::new_unchecked(self.pointer.with_addr(addr.get()) as *mut _) }\n     }\n@@ -303,10 +297,7 @@ impl<T: ?Sized> NonNull<T> {\n     #[must_use]\n     #[inline]\n     #[unstable(feature = \"strict_provenance\", issue = \"95228\")]\n-    pub fn map_addr(self, f: impl FnOnce(NonZeroUsize) -> NonZeroUsize) -> Self\n-    where\n-        T: Sized,\n-    {\n+    pub fn map_addr(self, f: impl FnOnce(NonZeroUsize) -> NonZeroUsize) -> Self {\n         self.with_addr(f(self.addr()))\n     }\n "}]}