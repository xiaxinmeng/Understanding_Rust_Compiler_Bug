{"sha": "547d86307c6acd10520af96f8e2974522c50ac1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0N2Q4NjMwN2M2YWNkMTA1MjBhZjk2ZjhlMjk3NDUyMmM1MGFjMWU=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-06-20T03:19:19Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-06-24T21:53:30Z"}, "message": "Improve GeneratorLayout debug output", "tree": {"sha": "91d08a35206b307c9f169d82b226231820d91b61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91d08a35206b307c9f169d82b226231820d91b61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/547d86307c6acd10520af96f8e2974522c50ac1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/547d86307c6acd10520af96f8e2974522c50ac1e", "html_url": "https://github.com/rust-lang/rust/commit/547d86307c6acd10520af96f8e2974522c50ac1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/547d86307c6acd10520af96f8e2974522c50ac1e/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "242a5cd4c673c02d817fb5cbadd5bd3ff08f10eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/242a5cd4c673c02d817fb5cbadd5bd3ff08f10eb", "html_url": "https://github.com/rust-lang/rust/commit/242a5cd4c673c02d817fb5cbadd5bd3ff08f10eb"}], "stats": {"total": 111, "additions": 105, "deletions": 6}, "files": [{"sha": "cb8b30830c5dec905b7b672804bf1d6837a9b043", "filename": "src/librustc_index/bit_set.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/547d86307c6acd10520af96f8e2974522c50ac1e/src%2Flibrustc_index%2Fbit_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547d86307c6acd10520af96f8e2974522c50ac1e/src%2Flibrustc_index%2Fbit_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_index%2Fbit_set.rs?ref=547d86307c6acd10520af96f8e2974522c50ac1e", "patch": "@@ -700,7 +700,7 @@ impl<T: Idx> GrowableBitSet<T> {\n ///\n /// All operations that involve a row and/or column index will panic if the\n /// index exceeds the relevant bound.\n-#[derive(Clone, Debug, Eq, PartialEq, RustcDecodable, RustcEncodable)]\n+#[derive(Clone, Eq, PartialEq, RustcDecodable, RustcEncodable)]\n pub struct BitMatrix<R: Idx, C: Idx> {\n     num_rows: usize,\n     num_columns: usize,\n@@ -876,6 +876,22 @@ impl<R: Idx, C: Idx> BitMatrix<R, C> {\n     }\n }\n \n+impl<R: Idx, C: Idx> fmt::Debug for BitMatrix<R, C> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        /// Forces its contents to print in regular mode instead of alternate mode.\n+        struct OneLinePrinter<T>(T);\n+        impl<T: fmt::Debug> fmt::Debug for OneLinePrinter<T> {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                write!(fmt, \"{:?}\", self.0)\n+            }\n+        }\n+\n+        write!(fmt, \"BitMatrix({}x{}) \", self.num_rows, self.num_columns)?;\n+        let items = self.rows().flat_map(|r| self.iter(r).map(move |c| (r, c)));\n+        fmt.debug_set().entries(items.map(OneLinePrinter)).finish()\n+    }\n+}\n+\n /// A fixed-column-size, variable-row-size 2D bit matrix with a moderately\n /// sparse representation.\n ///"}, {"sha": "9ad79230a4f6d73851be217cd7ac4f9d87f054ad", "filename": "src/librustc_middle/mir/query.rs", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/547d86307c6acd10520af96f8e2974522c50ac1e/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547d86307c6acd10520af96f8e2974522c50ac1e/src%2Flibrustc_middle%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fquery.rs?ref=547d86307c6acd10520af96f8e2974522c50ac1e", "patch": "@@ -10,6 +10,8 @@ use rustc_index::vec::IndexVec;\n use rustc_span::{Span, Symbol};\n use rustc_target::abi::VariantIdx;\n use smallvec::SmallVec;\n+use std::cell::Cell;\n+use std::fmt::{self, Debug};\n \n use super::{Field, SourceInfo};\n \n@@ -58,7 +60,7 @@ rustc_index::newtype_index! {\n }\n \n /// The layout of generator state.\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct GeneratorLayout<'tcx> {\n     /// The type of every local stored inside the generator.\n     pub field_tys: IndexVec<GeneratorSavedLocal, Ty<'tcx>>,\n@@ -77,6 +79,62 @@ pub struct GeneratorLayout<'tcx> {\n     pub storage_conflicts: BitMatrix<GeneratorSavedLocal, GeneratorSavedLocal>,\n }\n \n+impl Debug for GeneratorLayout<'_> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        /// Prints an iterator of (key, value) tuples as a map.\n+        struct MapPrinter<'a, K, V>(Cell<Option<Box<dyn Iterator<Item = (K, V)> + 'a>>>);\n+        impl<'a, K, V> MapPrinter<'a, K, V> {\n+            fn new(iter: impl Iterator<Item = (K, V)> + 'a) -> Self {\n+                Self(Cell::new(Some(Box::new(iter))))\n+            }\n+        }\n+        impl<'a, K: Debug, V: Debug> Debug for MapPrinter<'a, K, V> {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                fmt.debug_map().entries(self.0.take().unwrap()).finish()\n+            }\n+        }\n+\n+        /// Prints the generator variant name.\n+        struct GenVariantPrinter(VariantIdx);\n+        impl From<VariantIdx> for GenVariantPrinter {\n+            fn from(idx: VariantIdx) -> Self {\n+                GenVariantPrinter(idx)\n+            }\n+        }\n+        impl Debug for GenVariantPrinter {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                let variant_name = ty::GeneratorSubsts::variant_name(self.0);\n+                if fmt.alternate() {\n+                    write!(fmt, \"{:9}({:?})\", variant_name, self.0)\n+                } else {\n+                    write!(fmt, \"{}\", variant_name)\n+                }\n+            }\n+        }\n+\n+        /// Forces its contents to print in regular mode instead of alternate mode.\n+        struct OneLinePrinter<T>(T);\n+        impl<T: Debug> Debug for OneLinePrinter<T> {\n+            fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n+                write!(fmt, \"{:?}\", self.0)\n+            }\n+        }\n+\n+        fmt.debug_struct(\"GeneratorLayout\")\n+            .field(\"field_tys\", &MapPrinter::new(self.field_tys.iter_enumerated()))\n+            .field(\n+                \"variant_fields\",\n+                &MapPrinter::new(\n+                    self.variant_fields\n+                        .iter_enumerated()\n+                        .map(|(k, v)| (GenVariantPrinter(k), OneLinePrinter(v))),\n+                ),\n+            )\n+            .field(\"storage_conflicts\", &self.storage_conflicts)\n+            .finish()\n+    }\n+}\n+\n #[derive(Debug, RustcEncodable, RustcDecodable, HashStable)]\n pub struct BorrowCheckResult<'tcx> {\n     /// All the opaque types that are restricted to concrete types"}, {"sha": "8f86d2ef522d33a82b4fed5511578e03799a289a", "filename": "src/librustc_middle/ty/sty.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/547d86307c6acd10520af96f8e2974522c50ac1e/src%2Flibrustc_middle%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547d86307c6acd10520af96f8e2974522c50ac1e/src%2Flibrustc_middle%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fsty.rs?ref=547d86307c6acd10520af96f8e2974522c50ac1e", "patch": "@@ -522,7 +522,6 @@ impl<'tcx> GeneratorSubsts<'tcx> {\n \n     /// Calls `f` with a reference to the name of the enumerator for the given\n     /// variant `v`.\n-    #[inline]\n     pub fn variant_name(v: VariantIdx) -> Cow<'static, str> {\n         match v.as_usize() {\n             Self::UNRESUMED => Cow::from(Self::UNRESUMED_NAME),"}, {"sha": "db45481e4fd259acbd6114f6fb9768aba7727d7f", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/547d86307c6acd10520af96f8e2974522c50ac1e/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/547d86307c6acd10520af96f8e2974522c50ac1e/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=547d86307c6acd10520af96f8e2974522c50ac1e", "patch": "@@ -131,7 +131,7 @@ fn dump_matched_mir_node<'tcx, F>(\n         }\n         writeln!(file, \" {} {}\", disambiguator, pass_name)?;\n         if let Some(ref layout) = body.generator_layout {\n-            writeln!(file, \"// generator_layout = {:?}\", layout)?;\n+            writeln!(file, \"/* generator_layout = {:#?} */\", layout)?;\n         }\n         writeln!(file)?;\n         extra_data(PassWhere::BeforeCFG, &mut file)?;"}, {"sha": "3c77995eea8931f5040eab4e5a14b575609c56d1", "filename": "src/test/mir-opt/generator-drop-cleanup/rustc.main-{{closure}}.generator_drop.0.mir", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/547d86307c6acd10520af96f8e2974522c50ac1e/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/547d86307c6acd10520af96f8e2974522c50ac1e/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-drop-cleanup%2Frustc.main-%7B%7Bclosure%7D%7D.generator_drop.0.mir?ref=547d86307c6acd10520af96f8e2974522c50ac1e", "patch": "@@ -1,5 +1,18 @@\n // MIR for `main::{{closure}}#0` 0 generator_drop\n-// generator_layout = GeneratorLayout { field_tys: [std::string::String], variant_fields: [[], [], [], [_0]], variant_source_info: [SourceInfo { span: $DIR/generator-drop-cleanup.rs:10:15: 10:15 (#0), scope: scope[0] }, SourceInfo { span: $DIR/generator-drop-cleanup.rs:13:6: 13:6 (#0), scope: scope[0] }, SourceInfo { span: $DIR/generator-drop-cleanup.rs:13:6: 13:6 (#0), scope: scope[0] }, SourceInfo { span: $DIR/generator-drop-cleanup.rs:12:9: 12:14 (#0), scope: scope[1] }], storage_conflicts: BitMatrix { num_rows: 1, num_columns: 1, words: [1], marker: PhantomData } }\n+/* generator_layout = GeneratorLayout {\n+    field_tys: {\n+        _0: std::string::String,\n+    },\n+    variant_fields: {\n+        Unresumed(0): [],\n+        Returned (1): [],\n+        Panicked (2): [],\n+        Suspend0 (3): [_0],\n+    },\n+    storage_conflicts: BitMatrix(1x1) {\n+        (_0, _0),\n+    },\n+} */\n \n fn main::{{closure}}#0(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 13:6 {std::string::String, ()}]) -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/generator-drop-cleanup.rs:10:15: 13:6"}, {"sha": "bd6db11a7e73e2e84213c422507d88d8d7b23d10", "filename": "src/test/mir-opt/generator-tiny/rustc.main-{{closure}}.generator_resume.0.mir", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/547d86307c6acd10520af96f8e2974522c50ac1e/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/547d86307c6acd10520af96f8e2974522c50ac1e/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator-tiny%2Frustc.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir?ref=547d86307c6acd10520af96f8e2974522c50ac1e", "patch": "@@ -1,5 +1,18 @@\n // MIR for `main::{{closure}}#0` 0 generator_resume\n-// generator_layout = GeneratorLayout { field_tys: [HasDrop], variant_fields: [[], [], [], [_0]], variant_source_info: [SourceInfo { span: $DIR/generator-tiny.rs:19:16: 19:16 (#0), scope: scope[0] }, SourceInfo { span: $DIR/generator-tiny.rs:25:6: 25:6 (#0), scope: scope[0] }, SourceInfo { span: $DIR/generator-tiny.rs:25:6: 25:6 (#0), scope: scope[0] }, SourceInfo { span: $DIR/generator-tiny.rs:22:13: 22:18 (#0), scope: scope[1] }], storage_conflicts: BitMatrix { num_rows: 1, num_columns: 1, words: [1], marker: PhantomData } }\n+/* generator_layout = GeneratorLayout {\n+    field_tys: {\n+        _0: HasDrop,\n+    },\n+    variant_fields: {\n+        Unresumed(0): [],\n+        Returned (1): [],\n+        Panicked (2): [],\n+        Suspend0 (3): [_0],\n+    },\n+    storage_conflicts: BitMatrix(1x1) {\n+        (_0, _0),\n+    },\n+} */\n \n fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}]>, _2: u8) -> std::ops::GeneratorState<(), ()> {\n     debug _x => _10;                     // in scope 0 at $DIR/generator-tiny.rs:19:17: 19:19"}]}