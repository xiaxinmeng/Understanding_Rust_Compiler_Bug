{"sha": "900a9d3f4e80315b1fccd909336febede92503ed", "node_id": "C_kwDOAAsO6NoAKDkwMGE5ZDNmNGU4MDMxNWIxZmNjZDkwOTMzNmZlYmVkZTkyNTAzZWQ", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-07-31T21:22:27Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-08-12T04:56:33Z"}, "message": "Update clippy for introduction of Node::ExprField", "tree": {"sha": "9090dfd46164426ef56a85ad9e4a769ea81186cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9090dfd46164426ef56a85ad9e4a769ea81186cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/900a9d3f4e80315b1fccd909336febede92503ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/900a9d3f4e80315b1fccd909336febede92503ed", "html_url": "https://github.com/rust-lang/rust/commit/900a9d3f4e80315b1fccd909336febede92503ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/900a9d3f4e80315b1fccd909336febede92503ed/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1c70b8669ad728313049dd5548ab892f8e21cde7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1c70b8669ad728313049dd5548ab892f8e21cde7", "html_url": "https://github.com/rust-lang/rust/commit/1c70b8669ad728313049dd5548ab892f8e21cde7"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "59f10247a11d4c98ea4821a3746ee2479c37aff9", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/900a9d3f4e80315b1fccd909336febede92503ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/900a9d3f4e80315b1fccd909336febede92503ed/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=900a9d3f4e80315b1fccd909336febede92503ed", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_hir_and_then};\n use clippy_utils::source::{snippet_with_applicability, snippet_with_context};\n use clippy_utils::sugg::has_enclosing_paren;\n use clippy_utils::ty::{expr_sig, peel_mid_ty_refs, ty_sig, variant_of_res};\n-use clippy_utils::{get_parent_expr, is_lint_allowed, path_to_local, walk_to_expr_usage};\n+use clippy_utils::{get_parent_expr, get_parent_expr_for_hir, is_lint_allowed, path_to_local, walk_to_expr_usage};\n use rustc_ast::util::parser::{PREC_POSTFIX, PREC_PREFIX};\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::Applicability;\n@@ -699,6 +699,19 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n                 Some(ty_auto_deref_stability(cx, output, precedence).position_for_result(cx))\n             },\n \n+            Node::ExprField(field) if field.span.ctxt() == ctxt => match get_parent_expr_for_hir(cx, field.hir_id) {\n+                Some(Expr {\n+                    hir_id,\n+                    kind: ExprKind::Struct(path, ..),\n+                    ..\n+                }) => variant_of_res(cx, cx.qpath_res(path, *hir_id))\n+                    .and_then(|variant| variant.fields.iter().find(|f| f.name == field.ident.name))\n+                    .map(|field_def| {\n+                        ty_auto_deref_stability(cx, cx.tcx.type_of(field_def.did), precedence).position_for_arg()\n+                    }),\n+                _ => None,\n+            },\n+\n             Node::Expr(parent) if parent.span.ctxt() == ctxt => match parent.kind {\n                 ExprKind::Ret(_) => {\n                     let owner_id = cx.tcx.hir().body_owner(cx.enclosing_body.unwrap());\n@@ -788,17 +801,6 @@ fn walk_parents<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> (Position, &\n                         }\n                     })\n                 },\n-                ExprKind::Struct(path, fields, _) => {\n-                    let variant = variant_of_res(cx, cx.qpath_res(path, parent.hir_id));\n-                    fields\n-                        .iter()\n-                        .find(|f| f.expr.hir_id == child_id)\n-                        .zip(variant)\n-                        .and_then(|(field, variant)| variant.fields.iter().find(|f| f.name == field.ident.name))\n-                        .map(|field| {\n-                            ty_auto_deref_stability(cx, cx.tcx.type_of(field.did), precedence).position_for_arg()\n-                        })\n-                },\n                 ExprKind::Field(child, name) if child.hir_id == e.hir_id => Some(Position::FieldAccess(name.name)),\n                 ExprKind::Unary(UnOp::Deref, child) if child.hir_id == e.hir_id => Some(Position::Deref),\n                 ExprKind::Match(child, _, MatchSource::TryDesugar | MatchSource::AwaitDesugar)"}]}