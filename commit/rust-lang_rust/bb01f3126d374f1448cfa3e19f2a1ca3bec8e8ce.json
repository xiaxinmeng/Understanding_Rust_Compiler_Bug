{"sha": "bb01f3126d374f1448cfa3e19f2a1ca3bec8e8ce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMDFmMzEyNmQzNzRmMTQ0OGNmYTNlMTlmMmExY2EzYmVjOGU4Y2U=", "commit": {"author": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-02-28T22:28:30Z"}, "committer": {"name": "Mark Mansi", "email": "markm@cs.wisc.edu", "date": "2018-03-05T20:43:44Z"}, "message": "Do check the deps of path deps", "tree": {"sha": "0e06dc2ac2e1c7fe744eb43ea95dc58641106bbe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e06dc2ac2e1c7fe744eb43ea95dc58641106bbe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb01f3126d374f1448cfa3e19f2a1ca3bec8e8ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb01f3126d374f1448cfa3e19f2a1ca3bec8e8ce", "html_url": "https://github.com/rust-lang/rust/commit/bb01f3126d374f1448cfa3e19f2a1ca3bec8e8ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb01f3126d374f1448cfa3e19f2a1ca3bec8e8ce/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6180a3f7da1fa8693344e96049f7400cd0d04088", "url": "https://api.github.com/repos/rust-lang/rust/commits/6180a3f7da1fa8693344e96049f7400cd0d04088", "html_url": "https://github.com/rust-lang/rust/commit/6180a3f7da1fa8693344e96049f7400cd0d04088"}], "stats": {"total": 76, "additions": 44, "deletions": 32}, "files": [{"sha": "0f3b09c29780a846e3b9faab3e636645b31c65be", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 44, "deletions": 32, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/bb01f3126d374f1448cfa3e19f2a1ca3bec8e8ce/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb01f3126d374f1448cfa3e19f2a1ca3bec8e8ce/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=bb01f3126d374f1448cfa3e19f2a1ca3bec8e8ce", "patch": "@@ -56,29 +56,40 @@ static WHITELIST_CRATES: &'static [CrateVersion] = &[\n \n /// Whitelist of crates rustc is allowed to depend on. Avoid adding to the list if possible.\n static WHITELIST: &'static [Crate] = &[\n-    Crate(\"backtrace\"),\n-    Crate(\"backtrace-sys\"),\n-    Crate(\"bitflags\"),\n-    Crate(\"byteorder\"),\n-    Crate(\"cc\"),\n-    Crate(\"cfg-if\"),\n-    Crate(\"flate2\"),\n-    Crate(\"fuchsia-zircon\"),\n-    Crate(\"fuchsia-zircon-sys\"),\n-    Crate(\"jobserver\"),\n-    Crate(\"lazy_static\"),\n-    Crate(\"libc\"),\n-    Crate(\"log\"),\n-    Crate(\"miniz-sys\"),\n-    Crate(\"num_cpus\"),\n-    Crate(\"rand\"),\n-    Crate(\"rustc\"),\n-    Crate(\"rustc-demangle\"),\n-    Crate(\"rustc_trans\"),\n-    Crate(\"tempdir\"),\n-    Crate(\"winapi\"),\n-    Crate(\"winapi-i686-pc-windows-gnu\"),\n-    Crate(\"winapi-x86_64-pc-windows-gnu\"),\n+//    Crate(\"ar\"),\n+//    Crate(\"backtrace\"),\n+//    Crate(\"backtrace-sys\"),\n+//    Crate(\"bitflags\"),\n+//    Crate(\"byteorder\"),\n+//    Crate(\"cc\"),\n+//    Crate(\"cfg-if\"),\n+//    Crate(\"cmake\"),\n+//    Crate(\"filetime\"),\n+//    Crate(\"flate2\"),\n+//    Crate(\"fuchsia-zircon\"),\n+//    Crate(\"fuchsia-zircon-sys\"),\n+//    Crate(\"jobserver\"),\n+//    Crate(\"kernel32-sys\"),\n+//    Crate(\"lazy_static\"),\n+//    Crate(\"libc\"),\n+//    Crate(\"log\"),\n+//    Crate(\"log_settings\"),\n+//    Crate(\"miniz-sys\"),\n+//    Crate(\"num_cpus\"),\n+//    Crate(\"owning_ref\"),\n+//    Crate(\"parking_lot\"),\n+//    Crate(\"parking_lot_core\"),\n+//    Crate(\"rand\"),\n+//    Crate(\"redox_syscall\"),\n+//    Crate(\"rustc-demangle\"),\n+//    Crate(\"smallvec\"),\n+//    Crate(\"stable_deref_trait\"),\n+//    Crate(\"tempdir\"),\n+//    Crate(\"unicode-width\"),\n+//    Crate(\"winapi\"),\n+//    Crate(\"winapi-build\"),\n+//    Crate(\"winapi-i686-pc-windows-gnu\"),\n+//    Crate(\"winapi-x86_64-pc-windows-gnu\"),\n ];\n \n // Some types for Serde to deserialize the output of `cargo metadata` to...\n@@ -179,7 +190,7 @@ pub fn check_whitelist(path: &Path, cargo: &Path, bad: &mut bool) {\n     let mut visited = BTreeSet::new();\n     let mut unapproved = BTreeSet::new();\n     for &krate in WHITELIST_CRATES.iter() {\n-        let mut bad = check_crate_whitelist(&whitelist, &resolve, &mut visited, krate);\n+        let mut bad = check_crate_whitelist(&whitelist, &resolve, &mut visited, krate, false);\n         unapproved.append(&mut bad);\n     }\n \n@@ -256,6 +267,7 @@ fn check_crate_whitelist<'a, 'b>(\n     resolve: &'a Resolve,\n     visited: &'b mut BTreeSet<CrateVersion<'a>>,\n     krate: CrateVersion<'a>,\n+    must_be_on_whitelist: bool,\n ) -> BTreeSet<Crate<'a>> {\n     // Will contain bad deps\n     let mut unapproved = BTreeSet::new();\n@@ -267,9 +279,12 @@ fn check_crate_whitelist<'a, 'b>(\n \n     visited.insert(krate);\n \n-    // If this dependency is not on the WHITELIST, add to bad set\n-    if !whitelist.contains(&krate.into()) {\n-        unapproved.insert(krate.into());\n+    // If this path is in-tree, we don't require it to be on the whitelist\n+    if must_be_on_whitelist {\n+        // If this dependency is not on the WHITELIST, add to bad set\n+        if !whitelist.contains(&krate.into()) {\n+            unapproved.insert(krate.into());\n+        }\n     }\n \n     // Do a DFS in the crate graph (it's a DAG, so we know we have no cycles!)\n@@ -282,11 +297,8 @@ fn check_crate_whitelist<'a, 'b>(\n     for dep in to_check.dependencies.iter() {\n         let (krate, is_path_dep) = CrateVersion::from_str(dep);\n \n-        // We don't check in-tree deps\n-        if !is_path_dep {\n-            let mut bad = check_crate_whitelist(whitelist, resolve, visited, krate);\n-            unapproved.append(&mut bad);\n-        }\n+        let mut bad = check_crate_whitelist(whitelist, resolve, visited, krate, !is_path_dep);\n+        unapproved.append(&mut bad);\n     }\n \n     unapproved"}]}