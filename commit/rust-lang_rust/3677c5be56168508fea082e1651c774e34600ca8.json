{"sha": "3677c5be56168508fea082e1651c774e34600ca8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NzdjNWJlNTYxNjg1MDhmZWEwODJlMTY1MWM3NzRlMzQ2MDBjYTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-28T10:29:20Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-28T10:29:20Z"}, "message": "the alignment checks on access can no longer fail now", "tree": {"sha": "e61b2ee4009225b7c7b6d398046f57daafa9434a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e61b2ee4009225b7c7b6d398046f57daafa9434a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3677c5be56168508fea082e1651c774e34600ca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3677c5be56168508fea082e1651c774e34600ca8", "html_url": "https://github.com/rust-lang/rust/commit/3677c5be56168508fea082e1651c774e34600ca8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3677c5be56168508fea082e1651c774e34600ca8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5800bec22363615fe7a3b55b8e15a28dc51f687b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5800bec22363615fe7a3b55b8e15a28dc51f687b", "html_url": "https://github.com/rust-lang/rust/commit/5800bec22363615fe7a3b55b8e15a28dc51f687b"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "974481a993c67bae2c8665732adf468c17870051", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3677c5be56168508fea082e1651c774e34600ca8/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3677c5be56168508fea082e1651c774e34600ca8/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=3677c5be56168508fea082e1651c774e34600ca8", "patch": "@@ -238,7 +238,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             return Ok(None);\n         }\n \n-        let ptr = match self.check_mplace_access(mplace, None)? {\n+        let ptr = match self.check_mplace_access(mplace, None)\n+            .expect(\"places should be checked on creation\")\n+        {\n             Some(ptr) => ptr,\n             None => return Ok(Some(ImmTy { // zero-sized type\n                 imm: Immediate::Scalar(Scalar::zst().into()),"}, {"sha": "1588ed35b13f2bbb7ee5a73363e5b29ecf090a81", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3677c5be56168508fea082e1651c774e34600ca8/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3677c5be56168508fea082e1651c774e34600ca8/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=3677c5be56168508fea082e1651c774e34600ca8", "patch": "@@ -763,7 +763,9 @@ where\n         // to handle padding properly, which is only correct if we never look at this data with the\n         // wrong type.\n \n-        let ptr = match self.check_mplace_access(dest, None)? {\n+        let ptr = match self.check_mplace_access(dest, None)\n+            .expect(\"places should be checked on creation\")\n+        {\n             Some(ptr) => ptr,\n             None => return Ok(()), // zero-sized access\n         };\n@@ -866,8 +868,10 @@ where\n         });\n         assert_eq!(src.meta, dest.meta, \"Can only copy between equally-sized instances\");\n \n-        let src = self.check_mplace_access(src, Some(size))?;\n-        let dest = self.check_mplace_access(dest, Some(size))?;\n+        let src = self.check_mplace_access(src, Some(size))\n+            .expect(\"places should be checked on creation\");\n+        let dest = self.check_mplace_access(dest, Some(size))\n+            .expect(\"places should be checked on creation\");\n         let (src_ptr, dest_ptr) = match (src, dest) {\n             (Some(src_ptr), Some(dest_ptr)) => (src_ptr, dest_ptr),\n             (None, None) => return Ok(()), // zero-sized copy"}]}