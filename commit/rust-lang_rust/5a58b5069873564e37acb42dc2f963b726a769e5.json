{"sha": "5a58b5069873564e37acb42dc2f963b726a769e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNThiNTA2OTg3MzU2NGUzN2FjYjQyZGMyZjk2M2I3MjZhNzY5ZTU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-11-19T15:26:19Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-19T15:26:19Z"}, "message": "Rollup merge of #78961 - CraftSpider:22565, r=oli-obk\n\nMake bad \"rust-call\" arguments no longer ICE\n\nThe simplest of bad rust-call definitions will no longer cause an ICE. There is a FIXME added for future work, as I wanted to get this easy fix in before trying to either add a hack or mess with the whole obligation system\n\nfixes #22565", "tree": {"sha": "ae96f2809e9fc01589001aacc106f7cb7d0f0581", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae96f2809e9fc01589001aacc106f7cb7d0f0581"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a58b5069873564e37acb42dc2f963b726a769e5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfto6cCRBK7hj4Ov3rIwAAdHIIAE1ejg7YYrmmgR8Nacgm02EQ\nK66/+6Q2dpbiTN32dFYoyZVgMTCG4mMBUzNq7/wv0LVbe4eBnHgIkDLp1rl/5FrC\nEs/fxklQFIl1OlRcr4Rh3h06YOUUypN3qTrjMbkPbkaHjBz/eBrkqLdg82xWqQzH\nY3+zleQVAJj/SYPEUpvSlvojqbMRIBvfvYA8n+MBOSiFsfAh2CoHRzVizP3wehAJ\ngn2xRfZpKdUuvWUOUOLSokIIXB41yP1nWAoZRe4RaimVTNMDnQ+oEKuVpMmfpdjN\na/wM1OmX16mjn71uSCNpRrnKRqvHGYI6HTmeWUhgFY+eFdP4asYE9oFwt7LCW8Y=\n=vADN\n-----END PGP SIGNATURE-----\n", "payload": "tree ae96f2809e9fc01589001aacc106f7cb7d0f0581\nparent 7e2032390cf34f3ffa726b7bd890141e2684ba63\nparent e8426a617b87af7b8254e732ca85951cbae0a6b9\nauthor Dylan DPC <dylan.dpc@gmail.com> 1605799579 +0100\ncommitter GitHub <noreply@github.com> 1605799579 +0100\n\nRollup merge of #78961 - CraftSpider:22565, r=oli-obk\n\nMake bad \"rust-call\" arguments no longer ICE\n\nThe simplest of bad rust-call definitions will no longer cause an ICE. There is a FIXME added for future work, as I wanted to get this easy fix in before trying to either add a hack or mess with the whole obligation system\n\nfixes #22565\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a58b5069873564e37acb42dc2f963b726a769e5", "html_url": "https://github.com/rust-lang/rust/commit/5a58b5069873564e37acb42dc2f963b726a769e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a58b5069873564e37acb42dc2f963b726a769e5/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e2032390cf34f3ffa726b7bd890141e2684ba63", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e2032390cf34f3ffa726b7bd890141e2684ba63", "html_url": "https://github.com/rust-lang/rust/commit/7e2032390cf34f3ffa726b7bd890141e2684ba63"}, {"sha": "e8426a617b87af7b8254e732ca85951cbae0a6b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8426a617b87af7b8254e732ca85951cbae0a6b9", "html_url": "https://github.com/rust-lang/rust/commit/e8426a617b87af7b8254e732ca85951cbae0a6b9"}], "stats": {"total": 100, "additions": 85, "deletions": 15}, "files": [{"sha": "d5518dfc15a1b19321efebae913e86a8ab0c095b", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5a58b5069873564e37acb42dc2f963b726a769e5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a58b5069873564e37acb42dc2f963b726a769e5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=5a58b5069873564e37acb42dc2f963b726a769e5", "patch": "@@ -94,6 +94,37 @@ pub(super) fn check_fn<'a, 'tcx>(\n \n     fn_maybe_err(tcx, span, fn_sig.abi);\n \n+    if fn_sig.abi == Abi::RustCall {\n+        let expected_args = if let ImplicitSelfKind::None = decl.implicit_self { 1 } else { 2 };\n+\n+        let err = || {\n+            let item = match tcx.hir().get(fn_id) {\n+                Node::Item(hir::Item { kind: ItemKind::Fn(header, ..), .. }) => Some(header),\n+                Node::ImplItem(hir::ImplItem {\n+                    kind: hir::ImplItemKind::Fn(header, ..), ..\n+                }) => Some(header),\n+                // Closures are RustCall, but they tuple their arguments, so shouldn't be checked\n+                Node::Expr(hir::Expr { kind: hir::ExprKind::Closure(..), .. }) => None,\n+                node => bug!(\"Item being checked wasn't a function/closure: {:?}\", node),\n+            };\n+\n+            if let Some(header) = item {\n+                tcx.sess.span_err(header.span, \"A function with the \\\"rust-call\\\" ABI must take a single non-self argument that is a tuple\")\n+            }\n+        };\n+\n+        if fn_sig.inputs().len() != expected_args {\n+            err()\n+        } else {\n+            // FIXME(CraftSpider) Add a check on parameter expansion, so we don't just make the ICE happen later on\n+            //   This will probably require wide-scale changes to support a TupleKind obligation\n+            //   We can't resolve this without knowing the type of the param\n+            if !matches!(fn_sig.inputs()[expected_args - 1].kind(), ty::Tuple(_) | ty::Param(_)) {\n+                err()\n+            }\n+        }\n+    }\n+\n     if body.generator_kind.is_some() && can_be_generator.is_some() {\n         let yield_ty = fcx\n             .next_ty_var(TypeVariableOrigin { kind: TypeVariableOriginKind::TypeInference, span });"}, {"sha": "1479eadf1b067fd6983ff6eff2de07a9a5099cb7", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a58b5069873564e37acb42dc2f963b726a769e5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a58b5069873564e37acb42dc2f963b726a769e5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=5a58b5069873564e37acb42dc2f963b726a769e5", "patch": "@@ -108,7 +108,7 @@ use rustc_hir::def::Res;\n use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::Visitor;\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_hir::{HirIdMap, Node};\n+use rustc_hir::{HirIdMap, ImplicitSelfKind, Node};\n use rustc_index::bit_set::BitSet;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};"}, {"sha": "055d959b46e10288eb5d39a3a1bb1399cacf3bfc", "filename": "src/test/ui/abi/issues/issue-22565-rust-call.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a58b5069873564e37acb42dc2f963b726a769e5/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a58b5069873564e37acb42dc2f963b726a769e5/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.rs?ref=5a58b5069873564e37acb42dc2f963b726a769e5", "patch": "@@ -0,0 +1,8 @@\n+#![feature(unboxed_closures)]\n+\n+extern \"rust-call\" fn b(_i: i32) {}\n+//~^ ERROR A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+\n+fn main () {\n+    b(10);\n+}"}, {"sha": "31fb035eb99afb87a66717805f6aa65c896cf683", "filename": "src/test/ui/abi/issues/issue-22565-rust-call.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5a58b5069873564e37acb42dc2f963b726a769e5/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a58b5069873564e37acb42dc2f963b726a769e5/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fissues%2Fissue-22565-rust-call.stderr?ref=5a58b5069873564e37acb42dc2f963b726a769e5", "patch": "@@ -0,0 +1,8 @@\n+error: A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+  --> $DIR/issue-22565-rust-call.rs:3:1\n+   |\n+LL | extern \"rust-call\" fn b(_i: i32) {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "2fa41a7e35a74b563f87d28316ae894a8096a718", "filename": "src/test/ui/abi/rustcall-generic.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5a58b5069873564e37acb42dc2f963b726a769e5/src%2Ftest%2Fui%2Fabi%2Frustcall-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a58b5069873564e37acb42dc2f963b726a769e5/src%2Ftest%2Fui%2Fabi%2Frustcall-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Frustcall-generic.rs?ref=5a58b5069873564e37acb42dc2f963b726a769e5", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+#![feature(unboxed_closures)]\n+\n+extern \"rust-call\" fn foo<T>(_: T) {}\n+\n+fn main() {\n+    foo(());\n+    foo((1, 2));\n+}"}, {"sha": "31f09cc61f9ac5faa6f6428229c0e098bd6ab351", "filename": "src/test/ui/feature-gates/feature-gate-abi.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a58b5069873564e37acb42dc2f963b726a769e5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a58b5069873564e37acb42dc2f963b726a769e5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.rs?ref=5a58b5069873564e37acb42dc2f963b726a769e5", "patch": "@@ -15,7 +15,7 @@ extern \"rust-intrinsic\" fn f1() {} //~ ERROR intrinsics are subject to change\n extern \"platform-intrinsic\" fn f2() {} //~ ERROR platform intrinsics are experimental\n //~^ ERROR intrinsic must be in\n extern \"vectorcall\" fn f3() {} //~ ERROR vectorcall is experimental and subject to change\n-extern \"rust-call\" fn f4() {} //~ ERROR rust-call ABI is subject to change\n+extern \"rust-call\" fn f4(_: ()) {} //~ ERROR rust-call ABI is subject to change\n extern \"msp430-interrupt\" fn f5() {} //~ ERROR msp430-interrupt ABI is experimental\n extern \"ptx-kernel\" fn f6() {} //~ ERROR PTX ABIs are experimental and subject to change\n extern \"x86-interrupt\" fn f7() {} //~ ERROR x86-interrupt ABI is experimental\n@@ -30,7 +30,7 @@ trait Tr {\n     extern \"platform-intrinsic\" fn m2(); //~ ERROR platform intrinsics are experimental\n     //~^ ERROR intrinsic must be in\n     extern \"vectorcall\" fn m3(); //~ ERROR vectorcall is experimental and subject to change\n-    extern \"rust-call\" fn m4(); //~ ERROR rust-call ABI is subject to change\n+    extern \"rust-call\" fn m4(_: ()); //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn m5(); //~ ERROR msp430-interrupt ABI is experimental\n     extern \"ptx-kernel\" fn m6(); //~ ERROR PTX ABIs are experimental and subject to change\n     extern \"x86-interrupt\" fn m7(); //~ ERROR x86-interrupt ABI is experimental\n@@ -39,7 +39,7 @@ trait Tr {\n     extern \"efiapi\" fn m10(); //~ ERROR efiapi ABI is experimental and subject to change\n \n     extern \"vectorcall\" fn dm3() {} //~ ERROR vectorcall is experimental and subject to change\n-    extern \"rust-call\" fn dm4() {} //~ ERROR rust-call ABI is subject to change\n+    extern \"rust-call\" fn dm4(_: ()) {} //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn dm5() {} //~ ERROR msp430-interrupt ABI is experimental\n     extern \"ptx-kernel\" fn dm6() {} //~ ERROR PTX ABIs are experimental and subject to change\n     extern \"x86-interrupt\" fn dm7() {} //~ ERROR x86-interrupt ABI is experimental\n@@ -57,7 +57,7 @@ impl Tr for S {\n     extern \"platform-intrinsic\" fn m2() {} //~ ERROR platform intrinsics are experimental\n     //~^ ERROR intrinsic must be in\n     extern \"vectorcall\" fn m3() {} //~ ERROR vectorcall is experimental and subject to change\n-    extern \"rust-call\" fn m4() {} //~ ERROR rust-call ABI is subject to change\n+    extern \"rust-call\" fn m4(_: ()) {} //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn m5() {} //~ ERROR msp430-interrupt ABI is experimental\n     extern \"ptx-kernel\" fn m6() {} //~ ERROR PTX ABIs are experimental and subject to change\n     extern \"x86-interrupt\" fn m7() {} //~ ERROR x86-interrupt ABI is experimental\n@@ -73,7 +73,7 @@ impl S {\n     extern \"platform-intrinsic\" fn im2() {} //~ ERROR platform intrinsics are experimental\n     //~^ ERROR intrinsic must be in\n     extern \"vectorcall\" fn im3() {} //~ ERROR vectorcall is experimental and subject to change\n-    extern \"rust-call\" fn im4() {} //~ ERROR rust-call ABI is subject to change\n+    extern \"rust-call\" fn im4(_: ()) {} //~ ERROR rust-call ABI is subject to change\n     extern \"msp430-interrupt\" fn im5() {} //~ ERROR msp430-interrupt ABI is experimental\n     extern \"ptx-kernel\" fn im6() {} //~ ERROR PTX ABIs are experimental and subject to change\n     extern \"x86-interrupt\" fn im7() {} //~ ERROR x86-interrupt ABI is experimental\n@@ -86,7 +86,7 @@ impl S {\n type A1 = extern \"rust-intrinsic\" fn(); //~ ERROR intrinsics are subject to change\n type A2 = extern \"platform-intrinsic\" fn(); //~ ERROR platform intrinsics are experimental\n type A3 = extern \"vectorcall\" fn(); //~ ERROR vectorcall is experimental and subject to change\n-type A4 = extern \"rust-call\" fn(); //~ ERROR rust-call ABI is subject to change\n+type A4 = extern \"rust-call\" fn(_: ()); //~ ERROR rust-call ABI is subject to change\n type A5 = extern \"msp430-interrupt\" fn(); //~ ERROR msp430-interrupt ABI is experimental\n type A6 = extern \"ptx-kernel\" fn (); //~ ERROR PTX ABIs are experimental and subject to change\n type A7 = extern \"x86-interrupt\" fn(); //~ ERROR x86-interrupt ABI is experimental"}, {"sha": "25f0c259d111cb9cdf6c1c9a7daf68132c616fd1", "filename": "src/test/ui/feature-gates/feature-gate-abi.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5a58b5069873564e37acb42dc2f963b726a769e5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a58b5069873564e37acb42dc2f963b726a769e5/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-abi.stderr?ref=5a58b5069873564e37acb42dc2f963b726a769e5", "patch": "@@ -26,7 +26,7 @@ LL | extern \"vectorcall\" fn f3() {}\n error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:18:8\n    |\n-LL | extern \"rust-call\" fn f4() {}\n+LL | extern \"rust-call\" fn f4(_: ()) {}\n    |        ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n@@ -113,7 +113,7 @@ LL |     extern \"vectorcall\" fn m3();\n error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:33:12\n    |\n-LL |     extern \"rust-call\" fn m4();\n+LL |     extern \"rust-call\" fn m4(_: ());\n    |            ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n@@ -183,7 +183,7 @@ LL |     extern \"vectorcall\" fn dm3() {}\n error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:42:12\n    |\n-LL |     extern \"rust-call\" fn dm4() {}\n+LL |     extern \"rust-call\" fn dm4(_: ()) {}\n    |            ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n@@ -270,7 +270,7 @@ LL |     extern \"vectorcall\" fn m3() {}\n error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:60:12\n    |\n-LL |     extern \"rust-call\" fn m4() {}\n+LL |     extern \"rust-call\" fn m4(_: ()) {}\n    |            ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n@@ -357,7 +357,7 @@ LL |     extern \"vectorcall\" fn im3() {}\n error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:76:12\n    |\n-LL |     extern \"rust-call\" fn im4() {}\n+LL |     extern \"rust-call\" fn im4(_: ()) {}\n    |            ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information\n@@ -444,7 +444,7 @@ LL | type A3 = extern \"vectorcall\" fn();\n error[E0658]: rust-call ABI is subject to change\n   --> $DIR/feature-gate-abi.rs:89:18\n    |\n-LL | type A4 = extern \"rust-call\" fn();\n+LL | type A4 = extern \"rust-call\" fn(_: ());\n    |                  ^^^^^^^^^^^\n    |\n    = note: see issue #29625 <https://github.com/rust-lang/rust/issues/29625> for more information"}, {"sha": "76b114c55925b7f215bb6529465e61d09349b9c6", "filename": "src/test/ui/overloaded-calls-nontuple.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5a58b5069873564e37acb42dc2f963b726a769e5/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a58b5069873564e37acb42dc2f963b726a769e5/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.rs?ref=5a58b5069873564e37acb42dc2f963b726a769e5", "patch": "@@ -11,11 +11,13 @@ impl FnMut<isize> for S {\n     extern \"rust-call\" fn call_mut(&mut self, z: isize) -> isize {\n         self.x + self.y + z\n     }\n+    //~^^^ ERROR A function with the \"rust-call\" ABI must take a single non-self argument\n }\n \n impl FnOnce<isize> for S {\n     type Output = isize;\n     extern \"rust-call\" fn call_once(mut self, z: isize) -> isize { self.call_mut(z) }\n+    //~^ ERROR A function with the \"rust-call\" ABI must take a single non-self argument\n }\n \n fn main() {"}, {"sha": "bdadb95db29477eb784f1290d951b65e3b384f4b", "filename": "src/test/ui/overloaded-calls-nontuple.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5a58b5069873564e37acb42dc2f963b726a769e5/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5a58b5069873564e37acb42dc2f963b726a769e5/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Foverloaded-calls-nontuple.stderr?ref=5a58b5069873564e37acb42dc2f963b726a769e5", "patch": "@@ -1,9 +1,21 @@\n+error: A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+  --> $DIR/overloaded-calls-nontuple.rs:11:5\n+   |\n+LL |     extern \"rust-call\" fn call_mut(&mut self, z: isize) -> isize {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: A function with the \"rust-call\" ABI must take a single non-self argument that is a tuple\n+  --> $DIR/overloaded-calls-nontuple.rs:19:5\n+   |\n+LL |     extern \"rust-call\" fn call_once(mut self, z: isize) -> isize { self.call_mut(z) }\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0059]: cannot use call notation; the first type parameter for the function trait is neither a tuple nor unit\n-  --> $DIR/overloaded-calls-nontuple.rs:26:10\n+  --> $DIR/overloaded-calls-nontuple.rs:28:10\n    |\n LL |     drop(s(3))\n    |          ^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0059`."}]}