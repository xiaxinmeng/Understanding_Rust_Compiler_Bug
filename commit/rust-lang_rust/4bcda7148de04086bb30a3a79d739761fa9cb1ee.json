{"sha": "4bcda7148de04086bb30a3a79d739761fa9cb1ee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiY2RhNzE0OGRlMDQwODZiYjMwYTNhNzlkNzM5NzYxZmE5Y2IxZWU=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-17T19:31:20Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2013-07-20T09:12:04Z"}, "message": "Fix warnings in src/test/bench tests. Nobody will ever care.", "tree": {"sha": "48fd2b5a2690352c2c3fe7e7e0b0c26bb7b04ee5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48fd2b5a2690352c2c3fe7e7e0b0c26bb7b04ee5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bcda7148de04086bb30a3a79d739761fa9cb1ee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bcda7148de04086bb30a3a79d739761fa9cb1ee", "html_url": "https://github.com/rust-lang/rust/commit/4bcda7148de04086bb30a3a79d739761fa9cb1ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bcda7148de04086bb30a3a79d739761fa9cb1ee/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7ad7911222f0395dd2babaf12410fb15c9aa938f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ad7911222f0395dd2babaf12410fb15c9aa938f", "html_url": "https://github.com/rust-lang/rust/commit/7ad7911222f0395dd2babaf12410fb15c9aa938f"}], "stats": {"total": 138, "additions": 60, "deletions": 78}, "files": [{"sha": "ea5aa309dc6c916bf898bc41b3386fd4d2a97413", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -30,7 +30,7 @@ macro_rules! bench (\n \n fn main() {\n     let argv = os::args();\n-    let tests = argv.slice(1, argv.len());\n+    let _tests = argv.slice(1, argv.len());\n \n     bench!(shift_push);\n     bench!(read_line);\n@@ -44,7 +44,7 @@ fn main() {\n fn maybe_run_test(argv: &[~str], name: ~str, test: &fn()) {\n     let mut run_test = false;\n \n-    if os::getenv(~\"RUST_BENCH\").is_some() {\n+    if os::getenv(\"RUST_BENCH\").is_some() {\n         run_test = true\n     } else if argv.len() > 0 {\n         run_test = argv.iter().any(|x| x == &~\"all\") || argv.iter().any(|x| x == &name)"}, {"sha": "2c5cb5d1347727c4bbb1359da71d64855f25a361", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -13,7 +13,7 @@ use std::uint;\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"10000000\"]\n     } else if args.len() <= 1u {\n         ~[~\"\", ~\"100000\"]"}, {"sha": "f17b6658f9dcd8b5b3a2251c96012822fdefcf72", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -410,7 +410,7 @@ fn validate(edges: ~[(node_id, node_id)],\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"15\", ~\"48\"]\n     } else if args.len() <= 1 {\n         ~[~\"\", ~\"10\", ~\"16\"]\n@@ -447,7 +447,7 @@ fn main() {\n     let graph_arc = arc::ARC(graph.clone());\n \n     do gen_search_keys(graph, num_keys).map() |root| {\n-        io::stdout().write_line(~\"\");\n+        io::stdout().write_line(\"\");\n         io::stdout().write_line(fmt!(\"Search key: %?\", root));\n \n         if do_sequential {\n@@ -511,7 +511,7 @@ fn main() {\n         }\n     };\n \n-    io::stdout().write_line(~\"\");\n+    io::stdout().write_line(\"\");\n     io::stdout().write_line(\n         fmt!(\"Total sequential: %? \\t Total Parallel: %? \\t Speedup: %?x\",\n              total_seq, total_par, total_seq / total_par));"}, {"sha": "9b0fd23d9cb420a2b59d0662ed1ada3c074af8d0", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -22,23 +22,20 @@ extern mod extra;\n \n use std::comm::{Port, Chan, SharedChan};\n use std::comm;\n-use std::io::{Writer, WriterUtil};\n use std::io;\n use std::os;\n use std::task;\n-use std::ptr;\n use std::uint;\n-use std::vec;\n \n-fn move_out<T>(x: T) {}\n+fn move_out<T>(_x: T) {}\n \n enum request {\n     get_count,\n     bytes(uint),\n     stop\n }\n \n-fn server(requests: &Port<request>, responses: &comm::Chan<uint>) {\n+fn server(requests: &Port<request>, responses: &Chan<uint>) {\n     let mut count = 0u;\n     let mut done = false;\n     while !done {\n@@ -102,7 +99,7 @@ fn run(args: &[~str]) {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"1000000\", ~\"10000\"]\n     } else if args.len() <= 1u {\n         ~[~\"\", ~\"10000\", ~\"4\"]"}, {"sha": "5ce5e902ed1ef309d28b99c14f9b7db87c1a9a3d", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -16,16 +16,13 @@\n \n extern mod extra;\n \n-use std::comm::{Port, PortSet, Chan, stream};\n-use std::io::{Writer, WriterUtil};\n+use std::comm::{PortSet, Chan, stream};\n use std::io;\n use std::os;\n-use std::ptr;\n use std::task;\n use std::uint;\n-use std::vec;\n \n-fn move_out<T>(x: T) {}\n+fn move_out<T>(_x: T) {}\n \n enum request {\n     get_count,\n@@ -98,7 +95,7 @@ fn run(args: &[~str]) {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"1000000\", ~\"8\"]\n     } else if args.len() <= 1u {\n         ~[~\"\", ~\"10000\", ~\"4\"]"}, {"sha": "86784c0b7d3bc2714f1add8dbd9f003ca2055ff6", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -24,7 +24,6 @@ use std::cell::Cell;\n use std::io;\n use std::os;\n use std::uint;\n-use std::vec;\n \n // A poor man's pipe.\n type pipe = arc::MutexARC<~[uint]>;\n@@ -60,8 +59,8 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n     // Send/Receive lots of messages.\n     for uint::range(0u, count) |j| {\n         //error!(\"task %?, iter %?\", i, j);\n-        let mut num_chan2 = num_chan.take_unwrap();\n-        let mut num_port2 = num_port.take_unwrap();\n+        let num_chan2 = num_chan.take_unwrap();\n+        let num_port2 = num_port.take_unwrap();\n         send(&num_chan2, i * j);\n         num_chan = Some(num_chan2);\n         let _n = recv(&num_port2);\n@@ -72,7 +71,7 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100\", ~\"10000\"]\n     } else if args.len() <= 1u {\n         ~[~\"\", ~\"10\", ~\"100\"]\n@@ -84,7 +83,7 @@ fn main() {\n     let msg_per_task = uint::from_str(args[2]).get();\n \n     let (num_chan, num_port) = init();\n-    let mut num_chan = Cell::new(num_chan);\n+    let num_chan = Cell::new(num_chan);\n \n     let start = time::precise_time_s();\n "}, {"sha": "b79f171147aa04225315f0f601960b5dbad6ef4d", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -24,7 +24,6 @@ use std::cell::Cell;\n use std::io;\n use std::os;\n use std::pipes::recv;\n-use std::ptr;\n use std::uint;\n use std::util;\n \n@@ -58,7 +57,7 @@ fn thread_ring(i: uint,\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100\", ~\"10000\"]\n     } else if args.len() <= 1u {\n         ~[~\"\", ~\"100\", ~\"1000\"]\n@@ -70,7 +69,7 @@ fn main() {\n     let msg_per_task = uint::from_str(args[2]).get();\n \n     let (num_port, num_chan) = ring::init();\n-    let mut num_chan = Cell::new(num_chan);\n+    let num_chan = Cell::new(num_chan);\n \n     let start = time::precise_time_s();\n "}, {"sha": "b4037d866a010e32f2bc2f5c7ba259cdadd11630", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -24,7 +24,6 @@ use std::cell::Cell;\n use std::io;\n use std::os;\n use std::uint;\n-use std::vec;\n \n // A poor man's pipe.\n type pipe = arc::RWARC<~[uint]>;\n@@ -56,8 +55,8 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n     // Send/Receive lots of messages.\n     for uint::range(0u, count) |j| {\n         //error!(\"task %?, iter %?\", i, j);\n-        let mut num_chan2 = num_chan.take_unwrap();\n-        let mut num_port2 = num_port.take_unwrap();\n+        let num_chan2 = num_chan.take_unwrap();\n+        let num_port2 = num_port.take_unwrap();\n         send(&num_chan2, i * j);\n         num_chan = Some(num_chan2);\n         let _n = recv(&num_port2);\n@@ -68,7 +67,7 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100\", ~\"10000\"]\n     } else if args.len() <= 1u {\n         ~[~\"\", ~\"10\", ~\"100\"]\n@@ -80,7 +79,7 @@ fn main() {\n     let msg_per_task = uint::from_str(args[2]).get();\n \n     let (num_chan, num_port) = init();\n-    let mut num_chan = Cell::new(num_chan);\n+    let num_chan = Cell::new(num_chan);\n \n     let start = time::precise_time_s();\n "}, {"sha": "2eb274378900a3ca95f0cfcfc6199c236ff4336e", "filename": "src/test/bench/pingpong.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fpingpong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fpingpong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fpingpong.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -190,7 +190,7 @@ fn timeit(f: &fn()) -> float {\n }\n \n fn main() {\n-    let count = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let count = if os::getenv(\"RUST_BENCH\").is_some() {\n         250000\n     } else {\n         100"}, {"sha": "ff806c8b5d44d6aa7003358ab38f1721d7304ab2", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -28,7 +28,7 @@ fn ack(m: int, n: int) -> int {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"12\"]\n     } else if args.len() <= 1u {\n         ~[~\"\", ~\"8\"]"}, {"sha": "d88843e11804537ffc5e2ce6115e09404f5a4fdc", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -40,7 +40,7 @@ fn main() {\n     use std::os;\n     use std::int;\n     let args = std::os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"17\"]\n     } else if args.len() <= 1u {\n         ~[~\"\", ~\"8\"]"}, {"sha": "f218b963aaa31e3461dcf15b844a0d37c7d59176", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -12,15 +12,13 @@\n \n extern mod extra;\n \n-use extra::sort;\n use std::cell::Cell;\n use std::comm::*;\n use std::io;\n use std::option;\n use std::os;\n use std::task;\n use std::uint;\n-use std::vec;\n \n fn print_complements() {\n     let all = [Blue, Red, Yellow];\n@@ -206,7 +204,7 @@ fn rendezvous(nn: uint, set: ~[color]) {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"200000\"]\n     } else if args.len() <= 1u {\n         ~[~\"\", ~\"600\"]\n@@ -217,10 +215,10 @@ fn main() {\n     let nn = uint::from_str(args[1]).get();\n \n     print_complements();\n-    io::println(~\"\");\n+    io::println(\"\");\n \n     rendezvous(nn, ~[Blue, Red, Yellow]);\n-    io::println(~\"\");\n+    io::println(\"\");\n \n     rendezvous(nn,\n         ~[Blue, Red, Yellow, Red, Yellow, Blue, Red, Yellow, Red, Blue]);"}, {"sha": "cc23c0018331596924e414306a541853e86d1128", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -2,7 +2,6 @@ use std::cast::transmute;\n use std::from_str::FromStr;\n use std::libc::{FILE, STDOUT_FILENO, c_int, fdopen, fputc, fputs, fwrite, size_t};\n use std::os;\n-use std::str;\n use std::uint::{min, range};\n use std::vec::bytes::copy_memory;\n use std::vec;"}, {"sha": "de36a59dd6507d59fd1582defc39efd65a7747db", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -24,7 +24,7 @@ fn fib(n: int) -> int {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"40\"]\n     } else if args.len() <= 1u {\n         ~[~\"\", ~\"30\"]"}, {"sha": "46b882f7b82534873d0c07b1df05c62f4a00a510", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -121,8 +121,8 @@ fn windows_with_carry(bb: &[u8], nn: uint,\n }\n \n fn make_sequence_processor(sz: uint,\n-                           from_parent: &comm::Port<~[u8]>,\n-                           to_parent: &comm::Chan<~str>) {\n+                           from_parent: &Port<~[u8]>,\n+                           to_parent: &Chan<~str>) {\n    let mut freqs: HashMap<~[u8], uint> = HashMap::new();\n    let mut carry: ~[u8] = ~[];\n    let mut total: uint = 0u;\n@@ -143,11 +143,11 @@ fn make_sequence_processor(sz: uint,\n    let buffer = match sz {\n        1u => { sort_and_fmt(&freqs, total) }\n        2u => { sort_and_fmt(&freqs, total) }\n-       3u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGT\"), ~\"GGT\") }\n-       4u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGTA\"), ~\"GGTA\") }\n-       6u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGTATT\"), ~\"GGTATT\") }\n-      12u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGTATTTTAATT\"), ~\"GGTATTTTAATT\") }\n-      18u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGTATTTTAATTTATAGT\"), ~\"GGTATTTTAATTTATAGT\") }\n+       3u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGT\"), \"GGT\") }\n+       4u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGTA\"), \"GGTA\") }\n+       6u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGTATT\"), \"GGTATT\") }\n+      12u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGTATTTTAATT\"), \"GGTATTTTAATT\") }\n+      18u => { fmt!(\"%u\\t%s\", find(&freqs, ~\"GGTATTTTAATTTATAGT\"), \"GGTATTTTAATTTATAGT\") }\n         _ => { ~\"\" }\n    };\n \n@@ -156,8 +156,7 @@ fn make_sequence_processor(sz: uint,\n \n // given a FASTA file on stdin, process sequence THREE\n fn main() {\n-    let args = os::args();\n-    let rdr = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let rdr = if os::getenv(\"RUST_BENCH\").is_some() {\n        // FIXME: Using this compile-time env variable is a crummy way to\n        // get to this massive data set, but include_bin! chokes on it (#2598)\n        let path = Path(env!(\"CFG_SRC_DIR\"))\n@@ -203,7 +202,7 @@ fn main() {\n \n          // start processing if this is the one\n          ('>', false) => {\n-            match line.slice_from(1).find_str(~\"THREE\") {\n+            match line.slice_from(1).find_str(\"THREE\") {\n                option::Some(_) => { proc_mode = true; }\n                option::None    => { }\n             }\n@@ -217,7 +216,7 @@ fn main() {\n             let line_bytes = line.as_bytes();\n \n            for sizes.iter().enumerate().advance |(ii, _sz)| {\n-               let mut lb = line_bytes.to_owned();\n+               let lb = line_bytes.to_owned();\n                to_child[ii].send(lb);\n             }\n          }"}, {"sha": "1fab646fb37a7c9caf98d8cd3d3b1e92331ce847", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -1,7 +1,6 @@\n use std::from_str::FromStr;\n use std::os;\n use std::uint::range;\n-use std::vec;\n \n static PI: f64 = 3.141592653589793;\n static SOLAR_MASS: f64 = 4.0 * PI * PI;"}, {"sha": "6ea22715750c5f1aba4b1cdd05e8b60f6db3f308", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -28,7 +28,6 @@ use std::io::WriterUtil;\n use std::io;\n use std::os;\n use std::result::{Ok, Err};\n-use std::str;\n use std::task;\n use std::u64;\n use std::uint;\n@@ -59,13 +58,13 @@ struct Config {\n }\n \n fn parse_opts(argv: ~[~str]) -> Config {\n-    let opts = ~[getopts::optflag(~\"stress\")];\n+    let opts = ~[getopts::optflag(\"stress\")];\n \n     let opt_args = argv.slice(1, argv.len());\n \n     match getopts::getopts(opt_args, opts) {\n       Ok(ref m) => {\n-          return Config {stress: getopts::opt_present(m, ~\"stress\")}\n+          return Config {stress: getopts::opt_present(m, \"stress\")}\n       }\n       Err(_) => { fail!(); }\n     }\n@@ -97,7 +96,7 @@ fn stress(num_tasks: int) {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"20\"]\n     } else if args.len() <= 1u {\n         ~[~\"\", ~\"8\"]"}, {"sha": "6ce62ccd1271453e82faaf46031b172321db38c3", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -5,7 +5,6 @@ use std::cast::transmute;\n use std::libc::{STDOUT_FILENO, c_int, fdopen, fgets, fopen, fputc, fwrite};\n use std::libc::{size_t};\n use std::ptr::null;\n-use std::vec::raw::set_len;\n \n static LINE_LEN: u32 = 80;\n "}, {"sha": "7e75ac858485574ee87400d0a6aeddc6544af323", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -15,7 +15,7 @@ use std::os;\n fn start(n_tasks: int, token: int) {\n     let (p, ch1) = stream();\n     let mut p = p;\n-    let mut ch1 = ch1;\n+    let ch1 = ch1;\n     ch1.send(token);\n     //  XXX could not get this to work with a range closure\n     let mut i = 2;\n@@ -55,7 +55,7 @@ fn roundtrip(id: int, n_tasks: int, p: &Port<int>, ch: &Chan<int>) {\n }\n \n fn main() {\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"2000000\", ~\"503\"]\n     }\n     else {"}, {"sha": "7f2accb6f0ea911fb6a54f39cd356d3a5ebebe64", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -32,7 +32,7 @@ fn check_sequential(min: uint, max: uint, map: &SmallIntMap<uint>) {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100000\", ~\"100\"]\n     } else if args.len() <= 1u {\n         ~[~\"\", ~\"10000\", ~\"50\"]"}, {"sha": "f4ddc090c21609a9ecfa3e05cb6dd4ad095be8de", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 10, "deletions": 11, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -15,7 +15,6 @@ extern mod extra;\n use std::io::{ReaderUtil, WriterUtil};\n use std::io;\n use std::os;\n-use std::str;\n use std::u8;\n use std::uint;\n use std::unstable::intrinsics::cttz16;\n@@ -50,7 +49,7 @@ impl Sudoku {\n     }\n \n     pub fn from_vec(vec: &[[u8, ..9], ..9]) -> Sudoku {\n-        let mut g = do vec::from_fn(9u) |i| {\n+        let g = do vec::from_fn(9u) |i| {\n             do vec::from_fn(9u) |j| { vec[i][j] }\n         };\n         return Sudoku::new(g)\n@@ -161,17 +160,17 @@ impl Sudoku {\n // Stores available colors as simple bitfield, bit 0 is always unset\n struct Colors(u16);\n \n-static heads: u16 = (1u16 << 10) - 1; /* bits 9..0 */\n+static HEADS: u16 = (1u16 << 10) - 1; /* bits 9..0 */\n \n impl Colors {\n     fn new(start_color: u8) -> Colors {\n         // Sets bits 9..start_color\n         let tails = !0u16 << start_color;\n-        return Colors(heads & tails);\n+        return Colors(HEADS & tails);\n     }\n \n     fn next(&self) -> u8 {\n-        let val = **self & heads;\n+        let val = **self & HEADS;\n         if (0u16 == val) {\n             return 0u8;\n         } else {\n@@ -190,7 +189,7 @@ impl Colors {\n     }\n }\n \n-static default_sudoku: [[u8, ..9], ..9] = [\n+static DEFAULT_SUDOKU: [[u8, ..9], ..9] = [\n          /* 0    1    2    3    4    5    6    7    8    */\n   /* 0 */  [0u8, 4u8, 0u8, 6u8, 0u8, 0u8, 0u8, 3u8, 2u8],\n   /* 1 */  [0u8, 0u8, 8u8, 0u8, 2u8, 0u8, 0u8, 0u8, 0u8],\n@@ -204,7 +203,7 @@ static default_sudoku: [[u8, ..9], ..9] = [\n ];\n \n #[cfg(test)]\n-static default_solution: [[u8, ..9], ..9] = [\n+static DEFAULT_SOLUTION: [[u8, ..9], ..9] = [\n          /* 0    1    2    3    4    5    6    7    8    */\n   /* 0 */  [1u8, 4u8, 9u8, 6u8, 7u8, 5u8, 8u8, 3u8, 2u8],\n   /* 1 */  [5u8, 3u8, 8u8, 1u8, 2u8, 9u8, 7u8, 4u8, 6u8],\n@@ -258,10 +257,10 @@ fn colors_remove_works() {\n }\n \n #[test]\n-fn check_default_sudoku_solution() {\n+fn check_DEFAULT_SUDOKU_solution() {\n     // GIVEN\n-    let mut sudoku = Sudoku::from_vec(&default_sudoku);\n-    let solution   = Sudoku::from_vec(&default_solution);\n+    let mut sudoku = Sudoku::from_vec(&DEFAULT_SUDOKU);\n+    let solution   = Sudoku::from_vec(&DEFAULT_SOLUTION);\n \n     // WHEN\n     sudoku.solve();\n@@ -274,7 +273,7 @@ fn main() {\n     let args        = os::args();\n     let use_default = args.len() == 1u;\n     let mut sudoku = if use_default {\n-        Sudoku::from_vec(&default_sudoku)\n+        Sudoku::from_vec(&DEFAULT_SUDOKU)\n     } else {\n         Sudoku::read(io::stdin())\n     };"}, {"sha": "3470cc9274578e806ead9aaf2f58843651735b46", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -22,7 +22,7 @@ enum UniqueList {\n }\n \n fn main() {\n-    let (repeat, depth) = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let (repeat, depth) = if os::getenv(\"RUST_BENCH\").is_some() {\n         (50, 1000)\n     } else {\n         (10, 10)"}, {"sha": "4e27841a748505b9ca0b58c0a8c470cf9aa23748", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -43,7 +43,7 @@ fn child_generation(gens_left: uint, c: comm::Chan<()>) {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100000\"]\n     } else if args.len() <= 1 {\n         ~[~\"\", ~\"100\"]"}, {"sha": "7eb138e99a0865fb98362f45c698849e301f114a", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -63,7 +63,7 @@ fn spawn_supervised_blocking(myname: &str, f: ~fn()) {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100000\"]\n     } else if args.len() <= 1u {\n         ~[~\"\", ~\"100\"]"}, {"sha": "7f986eab7893880e5da06bcca47a0245d1caaf11", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -12,7 +12,6 @@\n \n // xfail-test OOM on linux-32 without opts\n \n-use std::comm::*;\n use std::os;\n use std::task;\n use std::uint;\n@@ -49,7 +48,7 @@ fn calc(children: uint, parent_wait_chan: &Chan<Chan<Chan<int>>>) {\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"30\"]\n     } else if args.len() <= 1u {\n         ~[~\"\", ~\"10\"]"}, {"sha": "a152c3021331841ab19f83fa8760e5f2a1c7f914", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bcda7148de04086bb30a3a79d739761fa9cb1ee/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=4bcda7148de04086bb30a3a79d739761fa9cb1ee", "patch": "@@ -24,7 +24,7 @@ fn g() { }\n \n fn main() {\n     let args = os::args();\n-    let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n+    let args = if os::getenv(\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"400\"]\n     } else if args.len() <= 1u {\n         ~[~\"\", ~\"10\"]"}]}