{"sha": "2bff9e2193917f1bd53ab3851555ea53dac1cdfe", "node_id": "C_kwDOAAsO6NoAKDJiZmY5ZTIxOTM5MTdmMWJkNTNhYjM4NTE1NTVlYTUzZGFjMWNkZmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-10-29T22:09:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-29T22:09:26Z"}, "message": "Rollup merge of #103726 - TaKO8Ki:avoid-&str-to-string-conversions, r=compiler-errors\n\nAvoid unnecessary `&str` to `String` conversions", "tree": {"sha": "cd61df07d5d9de1bc15d2ed2f8b00762921069f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd61df07d5d9de1bc15d2ed2f8b00762921069f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bff9e2193917f1bd53ab3851555ea53dac1cdfe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjXaSWCRBK7hj4Ov3rIwAATXAIACzjpM/AMhh3im2Vf+hs+Jp3\nwxenQv892psOM39wzkhlDWZL1dillJzefr1VvweaDbYpwpnvQJx4Q5gH7Qdl9sqx\nKjR1NoX9pR1urfz4U+f7B4j4dHDL90r4g+J/3LDbDu3vkNK4z2WvQlzbIzGB+Z1i\nKagPYWgzSPRsL7HwdnVQGEqBkrpZhDbh2aKgnXz3XcCTQJ/qj+kaNovYNo0h862l\nPHZqhnA67M2bJvZvrpyYUINQeMw/hWLqylH+2n1G0Cfy1clHBNfIs0PXrKq2u9Wg\nj6Xa4lYPqD7ptmaalEwrM4nnz4B4QAe1HzzhoXqhxDmeovMFD7zt5tWLVGYF1RM=\n=9pXs\n-----END PGP SIGNATURE-----\n", "payload": "tree cd61df07d5d9de1bc15d2ed2f8b00762921069f5\nparent 6e20768e9d8b508bfd2551393f178fda1aea410e\nparent a3a3f4d8400069325bd35064cf1a2c7bf22d6991\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1667081366 +0200\ncommitter GitHub <noreply@github.com> 1667081366 +0200\n\nRollup merge of #103726 - TaKO8Ki:avoid-&str-to-string-conversions, r=compiler-errors\n\nAvoid unnecessary `&str` to `String` conversions\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bff9e2193917f1bd53ab3851555ea53dac1cdfe", "html_url": "https://github.com/rust-lang/rust/commit/2bff9e2193917f1bd53ab3851555ea53dac1cdfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bff9e2193917f1bd53ab3851555ea53dac1cdfe/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e20768e9d8b508bfd2551393f178fda1aea410e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e20768e9d8b508bfd2551393f178fda1aea410e", "html_url": "https://github.com/rust-lang/rust/commit/6e20768e9d8b508bfd2551393f178fda1aea410e"}, {"sha": "a3a3f4d8400069325bd35064cf1a2c7bf22d6991", "url": "https://api.github.com/repos/rust-lang/rust/commits/a3a3f4d8400069325bd35064cf1a2c7bf22d6991", "html_url": "https://github.com/rust-lang/rust/commit/a3a3f4d8400069325bd35064cf1a2c7bf22d6991"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "a9e5e438cf5f5c808e4e5fa6395d17df17fbb9ac", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bff9e2193917f1bd53ab3851555ea53dac1cdfe/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bff9e2193917f1bd53ab3851555ea53dac1cdfe/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=2bff9e2193917f1bd53ab3851555ea53dac1cdfe", "patch": "@@ -507,7 +507,7 @@ impl<'p, 'tcx> MatchVisitor<'_, 'p, 'tcx> {\n                                 _ => \"aren't\",\n                             },\n                         ),\n-                        \" else { todo!() }\".to_string(),\n+                        \" else { todo!() }\",\n                         Applicability::HasPlaceholders,\n                     );\n                 }"}, {"sha": "7d5fe32ee2864a916cebf65a4557d49a0c7e4858", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2bff9e2193917f1bd53ab3851555ea53dac1cdfe/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bff9e2193917f1bd53ab3851555ea53dac1cdfe/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=2bff9e2193917f1bd53ab3851555ea53dac1cdfe", "patch": "@@ -784,10 +784,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             return false;\n         }\n         err.code(rustc_errors::error_code!(E0411));\n-        err.span_label(\n-            span,\n-            \"`Self` is only available in impls, traits, and type definitions\".to_string(),\n-        );\n+        err.span_label(span, \"`Self` is only available in impls, traits, and type definitions\");\n         if let Some(item_kind) = self.diagnostic_metadata.current_item {\n             err.span_label(\n                 item_kind.ident.span,"}, {"sha": "1de85e2f288be7f82b5cd1bca7ae9dd4debaab7a", "filename": "compiler/rustc_trait_selection/src/traits/const_evaluatable.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2bff9e2193917f1bd53ab3851555ea53dac1cdfe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bff9e2193917f1bd53ab3851555ea53dac1cdfe/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fconst_evaluatable.rs?ref=2bff9e2193917f1bd53ab3851555ea53dac1cdfe", "patch": "@@ -192,12 +192,12 @@ pub fn is_const_evaluatable<'tcx>(\n         }\n         let concrete = infcx.const_eval_resolve(param_env, uv, Some(span));\n         match concrete {\n-            Err(ErrorHandled::TooGeneric) => {\n-                Err(NotConstEvaluatable::Error(infcx.tcx.sess.delay_span_bug(\n-                    span,\n-                    format!(\"Missing value for constant, but no error reported?\"),\n-                )))\n-            }\n+            Err(ErrorHandled::TooGeneric) => Err(NotConstEvaluatable::Error(\n+                infcx\n+                    .tcx\n+                    .sess\n+                    .delay_span_bug(span, \"Missing value for constant, but no error reported?\"),\n+            )),\n             Err(ErrorHandled::Linted) => {\n                 let reported = infcx\n                     .tcx"}]}