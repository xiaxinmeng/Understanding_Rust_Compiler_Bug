{"sha": "4ced272780321c597df740dd904fac59b0bff608", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjZWQyNzI3ODAzMjFjNTk3ZGY3NDBkZDkwNGZhYzU5YjBiZmY2MDg=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-19T12:43:50Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T09:54:32Z"}, "message": "Move macro_resolve() into a function", "tree": {"sha": "2753d921a0071b58bcf03a5a26606040d4fc9f1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2753d921a0071b58bcf03a5a26606040d4fc9f1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ced272780321c597df740dd904fac59b0bff608", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ced272780321c597df740dd904fac59b0bff608", "html_url": "https://github.com/rust-lang/rust/commit/4ced272780321c597df740dd904fac59b0bff608", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ced272780321c597df740dd904fac59b0bff608/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7739bb2d3520fbbd2ae26efc9fd1bf4657a35d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7739bb2d3520fbbd2ae26efc9fd1bf4657a35d9b", "html_url": "https://github.com/rust-lang/rust/commit/7739bb2d3520fbbd2ae26efc9fd1bf4657a35d9b"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "fb1d21d6527af87296a59bf4ce0b527aaa1f7422", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 29, "deletions": 27, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4ced272780321c597df740dd904fac59b0bff608/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ced272780321c597df740dd904fac59b0bff608/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4ced272780321c597df740dd904fac59b0bff608", "patch": "@@ -910,6 +910,33 @@ fn resolve(cx: &DocContext, path_str: &str, is_val: bool) -> Result<hir::Path, (\n     }\n }\n \n+/// Resolve a string as a macro\n+fn macro_resolve(cx: &DocContext, path_str: &str) -> Option<Def> {\n+    use syntax::ext::base::MacroKind;\n+    use syntax::ext::hygiene::Mark;\n+    let segment = ast::PathSegment {\n+        identifier: ast::Ident::from_str(path_str),\n+        span: DUMMY_SP,\n+        parameters: None,\n+    };\n+    let path = ast::Path {\n+        span: DUMMY_SP,\n+        segments: vec![segment],\n+    };\n+\n+    let mut resolver = cx.resolver.borrow_mut();\n+    let mark = Mark::root();\n+    let res = resolver\n+        .resolve_macro_to_def_inner(mark, &path, MacroKind::Bang, false);\n+    if let Ok(def) = res {\n+        Some(def)\n+    } else if let Some(def) = resolver.all_macros.get(&path_str.into()) {\n+        Some(*def)\n+    } else {\n+        None\n+    }\n+}\n+\n enum PathKind {\n     /// can be either value or type, not a macro\n     Unknown,\n@@ -963,31 +990,6 @@ impl Clean<Attributes> for [ast::Attribute] {\n                         continue;\n                     }\n \n-                    let macro_resolve = || {\n-                            use syntax::ext::base::MacroKind;\n-                            use syntax::ext::hygiene::Mark;\n-                            let segment = ast::PathSegment {\n-                                identifier: ast::Ident::from_str(path_str),\n-                                span: DUMMY_SP,\n-                                parameters: None,\n-                            };\n-                            let path = ast::Path {\n-                                span: DUMMY_SP,\n-                                segments: vec![segment],\n-                            };\n-\n-                            let mut resolver = cx.resolver.borrow_mut();\n-                            let mark = Mark::root();\n-                            let res = resolver\n-                                .resolve_macro_to_def_inner(mark, &path, MacroKind::Bang, false);\n-                            if let Ok(def) = res {\n-                                Some(def)\n-                            } else if let Some(def) = resolver.all_macros.get(&path_str.into()) {\n-                                Some(*def)\n-                            } else {\n-                                None\n-                            }\n-                    };\n \n                     match kind {\n                         PathKind::Value => {\n@@ -1010,7 +1012,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                         }\n                         PathKind::Unknown => {\n                             // try everything!\n-                            if let Some(macro_def) = macro_resolve() {\n+                            if let Some(macro_def) = macro_resolve(cx, path_str) {\n                                 if let Ok(type_path) = resolve(cx, path_str, false) {\n                                     let (type_kind, article, type_disambig)\n                                         = type_ns_kind(type_path.def, path_str);\n@@ -1053,7 +1055,7 @@ impl Clean<Attributes> for [ast::Attribute] {\n                             }\n                         }\n                         PathKind::Macro => {\n-                            if let Some(def) = macro_resolve() {\n+                            if let Some(def) = macro_resolve(cx, path_str) {\n                                 def\n                             } else {\n                                 continue"}]}