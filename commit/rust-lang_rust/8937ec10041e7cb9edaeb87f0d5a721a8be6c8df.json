{"sha": "8937ec10041e7cb9edaeb87f0d5a721a8be6c8df", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MzdlYzEwMDQxZTdjYjllZGFlYjg3ZjBkNWE3MjFhOGJlNmM4ZGY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-15T00:24:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-15T00:24:31Z"}, "message": "Auto merge of #26265 - retep998:heapalloc, r=alexcrichton\n\nThis removes our dependency on the CRT for memory allocation.", "tree": {"sha": "65d6abd5ac26a6e339e265f552c256d523219fd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65d6abd5ac26a6e339e265f552c256d523219fd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8937ec10041e7cb9edaeb87f0d5a721a8be6c8df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8937ec10041e7cb9edaeb87f0d5a721a8be6c8df", "html_url": "https://github.com/rust-lang/rust/commit/8937ec10041e7cb9edaeb87f0d5a721a8be6c8df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8937ec10041e7cb9edaeb87f0d5a721a8be6c8df/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f3c19f547d62c3c2824979ea453a6558d6c873e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f3c19f547d62c3c2824979ea453a6558d6c873e", "html_url": "https://github.com/rust-lang/rust/commit/4f3c19f547d62c3c2824979ea453a6558d6c873e"}, {"sha": "ebbd90d28f148ec29004c340eeb05e0aa989f9a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ebbd90d28f148ec29004c340eeb05e0aa989f9a5", "html_url": "https://github.com/rust-lang/rust/commit/ebbd90d28f148ec29004c340eeb05e0aa989f9a5"}], "stats": {"total": 119, "additions": 102, "deletions": 17}, "files": [{"sha": "1cc63588fddffdefa0dce9da062b7492db4489fa", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 102, "deletions": 17, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/8937ec10041e7cb9edaeb87f0d5a721a8be6c8df/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8937ec10041e7cb9edaeb87f0d5a721a8be6c8df/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=8937ec10041e7cb9edaeb87f0d5a721a8be6c8df", "patch": "@@ -345,47 +345,94 @@ mod imp {\n           not(jemalloc),\n           windows))]\n mod imp {\n-    use libc::{c_void, size_t};\n-    use libc;\n+    use core::mem::size_of;\n+    use libc::{BOOL, DWORD, HANDLE, LPVOID, SIZE_T, INVALID_HANDLE_VALUE};\n+    use libc::{WriteFile};\n     use super::MIN_ALIGN;\n \n-    extern {\n-        fn _aligned_malloc(size: size_t, align: size_t) -> *mut c_void;\n-        fn _aligned_realloc(block: *mut c_void, size: size_t,\n-                            align: size_t) -> *mut c_void;\n-        fn _aligned_free(ptr: *mut c_void);\n+    extern \"system\" {\n+        fn GetProcessHeap() -> HANDLE;\n+        fn GetStdHandle(nStdHandle: DWORD) -> HANDLE;\n+        fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T) -> LPVOID;\n+        fn HeapReAlloc(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID, dwBytes: SIZE_T) -> LPVOID;\n+        fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: LPVOID) -> BOOL;\n+        fn HeapSummary(hHeap: HANDLE, dwFlags: DWORD, lpSummary: LPHEAP_SUMMARY) -> BOOL;\n+    }\n+\n+    #[repr(C)] #[allow(non_snake_case)]\n+    struct HEAP_SUMMARY {\n+        cb: DWORD,\n+        cbAllocated: SIZE_T,\n+        cbCommitted: SIZE_T,\n+        cbReserved: SIZE_T,\n+        cbMaxReserve: SIZE_T,\n+    }\n+    #[allow(non_camel_case_types)]\n+    type LPHEAP_SUMMARY = *mut HEAP_SUMMARY;\n+\n+    #[repr(C)]\n+    struct Header(*mut u8);\n+\n+    const HEAP_REALLOC_IN_PLACE_ONLY: DWORD = 0x00000010;\n+    const STD_OUTPUT_HANDLE: DWORD = -11i32 as u32;\n+\n+    #[inline]\n+    unsafe fn get_header<'a>(ptr: *mut u8) -> &'a mut Header {\n+        &mut *(ptr as *mut Header).offset(-1)\n+    }\n+\n+    #[inline]\n+    unsafe fn align_ptr(ptr: *mut u8, align: usize) -> *mut u8 {\n+        let aligned = ptr.offset((align - (ptr as usize & (align - 1))) as isize);\n+        *get_header(aligned) = Header(ptr);\n+        aligned\n     }\n \n     #[inline]\n     pub unsafe fn allocate(size: usize, align: usize) -> *mut u8 {\n         if align <= MIN_ALIGN {\n-            libc::malloc(size as size_t) as *mut u8\n+            HeapAlloc(GetProcessHeap(), 0, size as SIZE_T) as *mut u8\n         } else {\n-            _aligned_malloc(size as size_t, align as size_t) as *mut u8\n+            let ptr = HeapAlloc(GetProcessHeap(), 0, (size + align) as SIZE_T) as *mut u8;\n+            if ptr.is_null() { return ptr }\n+            align_ptr(ptr, align)\n         }\n     }\n \n     #[inline]\n     pub unsafe fn reallocate(ptr: *mut u8, _old_size: usize, size: usize, align: usize) -> *mut u8 {\n         if align <= MIN_ALIGN {\n-            libc::realloc(ptr as *mut c_void, size as size_t) as *mut u8\n+            HeapReAlloc(GetProcessHeap(), 0, ptr as LPVOID, size as SIZE_T) as *mut u8\n         } else {\n-            _aligned_realloc(ptr as *mut c_void, size as size_t, align as size_t) as *mut u8\n+            let header = get_header(ptr);\n+            let new = HeapReAlloc(GetProcessHeap(), 0, header.0 as LPVOID,\n+                                  (size + align) as SIZE_T) as *mut u8;\n+            if new.is_null() { return new }\n+            align_ptr(new, align)\n         }\n     }\n \n     #[inline]\n-    pub unsafe fn reallocate_inplace(_ptr: *mut u8, old_size: usize, _size: usize,\n-                                     _align: usize) -> usize {\n-        old_size\n+    pub unsafe fn reallocate_inplace(ptr: *mut u8, old_size: usize, size: usize,\n+                                     align: usize) -> usize {\n+        if align <= MIN_ALIGN {\n+            let new = HeapReAlloc(GetProcessHeap(), HEAP_REALLOC_IN_PLACE_ONLY, ptr as LPVOID,\n+                                  size as SIZE_T) as *mut u8;\n+            if new.is_null() { old_size } else { size }\n+        } else {\n+            old_size\n+        }\n     }\n \n     #[inline]\n     pub unsafe fn deallocate(ptr: *mut u8, _old_size: usize, align: usize) {\n         if align <= MIN_ALIGN {\n-            libc::free(ptr as *mut libc::c_void)\n+            let err = HeapFree(GetProcessHeap(), 0, ptr as LPVOID);\n+            debug_assert!(err != 0);\n         } else {\n-            _aligned_free(ptr as *mut c_void)\n+            let header = get_header(ptr);\n+            let err = HeapFree(GetProcessHeap(), 0, header.0 as LPVOID);\n+            debug_assert!(err != 0);\n         }\n     }\n \n@@ -394,7 +441,45 @@ mod imp {\n         size\n     }\n \n-    pub fn stats_print() {}\n+    pub fn stats_print() {\n+        use core::fmt::{Error, Result, Write};\n+        use core::ptr::null_mut;\n+        use core::raw::Repr;\n+        use core::result::Result::{Ok, Err};\n+        struct Console(HANDLE);\n+        impl Write for Console {\n+            fn write_str(&mut self, s: &str) -> Result {\n+                let repr = s.repr();\n+                let mut written = 0;\n+                let err = unsafe { WriteFile(self.0, repr.data as LPVOID, repr.len as DWORD,\n+                                             &mut written, null_mut()) };\n+                if written as usize != repr.len { return Err(Error) }\n+                if err == 0 { return Err(Error) }\n+                Ok(())\n+            }\n+        }\n+        let mut hs = HEAP_SUMMARY {\n+            cb: size_of::<HEAP_SUMMARY>() as DWORD,\n+            cbAllocated: 0,\n+            cbCommitted: 0,\n+            cbReserved: 0,\n+            cbMaxReserve: 0,\n+        };\n+        let err = unsafe { HeapSummary(GetProcessHeap(), 0, &mut hs) };\n+        assert!(err != 0);\n+        let handle = unsafe { GetStdHandle(STD_OUTPUT_HANDLE) };\n+        if handle.is_null() || handle == INVALID_HANDLE_VALUE { panic!(\"Failed to open stdout\") }\n+        let mut out = Console(handle);\n+        writeln!(&mut out, \"Allocated: {}\", hs.cbAllocated).unwrap();\n+        writeln!(&mut out, \"Committed: {}\", hs.cbCommitted).unwrap();\n+        writeln!(&mut out, \"Reserved: {}\", hs.cbReserved).unwrap();\n+        writeln!(&mut out, \"MaxReserve: {}\", hs.cbMaxReserve).unwrap();\n+    }\n+\n+    #[test]\n+    fn alignment_header_size() {\n+        assert!(size_of::<Header>() <= MIN_ALIGN);\n+    }\n }\n \n #[cfg(test)]"}]}