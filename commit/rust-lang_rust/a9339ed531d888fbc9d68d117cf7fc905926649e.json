{"sha": "a9339ed531d888fbc9d68d117cf7fc905926649e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5MzM5ZWQ1MzFkODg4ZmJjOWQ2OGQxMTdjZjdmYzkwNTkyNjY0OWU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-03-02T12:23:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-02T12:23:13Z"}, "message": "Rollup merge of #80874 - jyn514:intra-doc-docs, r=Manishearth\n\nUpdate intra-doc link documentation to match the implementation\n\nr? `@Manishearth`\ncc `@camelid` `@m-ou-se`\n\nRelevant PRs:\n- https://github.com/rust-lang/rust/pull/74489\n- https://github.com/rust-lang/rust/pull/80181\n- https://github.com/rust-lang/rust/pull/76078\n- https://github.com/rust-lang/rust/pull/77519\n- https://github.com/rust-lang/rust/pull/73101\n\nRelevant issues:\n- https://github.com/rust-lang/rust/issues/78800\n- https://github.com/rust-lang/rust/issues/77200\n- https://github.com/rust-lang/rust/issues/77199 / https://github.com/rust-lang/rust/issues/54191/\n\nI haven't documented things that I consider 'just bugs', like https://github.com/rust-lang/rust/issues/77732, but I have documented features that aren't implemented, like https://github.com/rust-lang/rust/issues/78800.", "tree": {"sha": "1b9906a792dae95608244167fc84c7961e979c5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b9906a792dae95608244167fc84c7961e979c5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9339ed531d888fbc9d68d117cf7fc905926649e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgPi4xCRBK7hj4Ov3rIwAAdHIIAH1Rb9hK4G/uMwhftSuiRmwL\npkQESOSEOccaPTTYt9+NHxEJMYmbtllhspTOGye/d1v0QpGPK29HEieKJhOECgql\nZ7nbKgunszsJI025qvt8tC7OZ21PPpRumQUOHb6AIUy8RFAZKUyZJZhBBDaWDb+i\nkyzBvKeINNSxHHyocUT2pFqUsi4Gas6GzpFqhP/lQKnaQkzlmilcsgaRaXw/VKrk\ngQX0EFCMsTElO42lVbf3ItWvIp/h7YpZxN/g7dh9sSYo4RiEkpOyJGSYE13Z+fJL\nAR7SBUXNgJ8ufEi+8bWV+aur4Le6muupbvmZjy4KyfmtdxmMVz0IzrGhGt8eKxU=\n=vAjz\n-----END PGP SIGNATURE-----\n", "payload": "tree 1b9906a792dae95608244167fc84c7961e979c5b\nparent bc5669eef8c1d747e82694547fd57a1400a5afec\nparent c2694f15d05acd825883a992b390f54eda6f3696\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1614687793 +0900\ncommitter GitHub <noreply@github.com> 1614687793 +0900\n\nRollup merge of #80874 - jyn514:intra-doc-docs, r=Manishearth\n\nUpdate intra-doc link documentation to match the implementation\n\nr? `@Manishearth`\ncc `@camelid` `@m-ou-se`\n\nRelevant PRs:\n- https://github.com/rust-lang/rust/pull/74489\n- https://github.com/rust-lang/rust/pull/80181\n- https://github.com/rust-lang/rust/pull/76078\n- https://github.com/rust-lang/rust/pull/77519\n- https://github.com/rust-lang/rust/pull/73101\n\nRelevant issues:\n- https://github.com/rust-lang/rust/issues/78800\n- https://github.com/rust-lang/rust/issues/77200\n- https://github.com/rust-lang/rust/issues/77199 / https://github.com/rust-lang/rust/issues/54191/\n\nI haven't documented things that I consider 'just bugs', like https://github.com/rust-lang/rust/issues/77732, but I have documented features that aren't implemented, like https://github.com/rust-lang/rust/issues/78800.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9339ed531d888fbc9d68d117cf7fc905926649e", "html_url": "https://github.com/rust-lang/rust/commit/a9339ed531d888fbc9d68d117cf7fc905926649e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9339ed531d888fbc9d68d117cf7fc905926649e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc5669eef8c1d747e82694547fd57a1400a5afec", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc5669eef8c1d747e82694547fd57a1400a5afec", "html_url": "https://github.com/rust-lang/rust/commit/bc5669eef8c1d747e82694547fd57a1400a5afec"}, {"sha": "c2694f15d05acd825883a992b390f54eda6f3696", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2694f15d05acd825883a992b390f54eda6f3696", "html_url": "https://github.com/rust-lang/rust/commit/c2694f15d05acd825883a992b390f54eda6f3696"}], "stats": {"total": 75, "additions": 62, "deletions": 13}, "files": [{"sha": "6ca1d1153b4942924f44e1fb2c089d54a0044074", "filename": "src/doc/rustdoc/src/linking-to-items-by-name.md", "status": "modified", "additions": 62, "deletions": 13, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/a9339ed531d888fbc9d68d117cf7fc905926649e/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md", "raw_url": "https://github.com/rust-lang/rust/raw/a9339ed531d888fbc9d68d117cf7fc905926649e/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flinking-to-items-by-name.md?ref=a9339ed531d888fbc9d68d117cf7fc905926649e", "patch": "@@ -1,7 +1,7 @@\n # Linking to items by name\n \n Rustdoc is capable of directly linking to other rustdoc pages using the path of\n-the item as a link.\n+the item as a link. This is referred to as an 'intra-doc link'.\n \n For example, in the following code all of the links will link to the rustdoc page for `Bar`:\n \n@@ -24,11 +24,20 @@ pub struct Foo4;\n pub struct Bar;\n ```\n \n+Unlike normal Markdown, `[bar][Bar]` syntax is also supported without needing a\n+`[Bar]: ...` reference link.\n+\n Backticks around the link will be stripped, so ``[`Option`]`` will correctly\n link to `Option`.\n \n-You can refer to anything in scope, and use paths, including `Self`, `self`,\n-`super`, and `crate`. You may also use `foo()` and `foo!()` to refer to methods/functions and macros, respectively.\n+## Valid links\n+\n+You can refer to anything in scope, and use paths, including `Self`, `self`, `super`, and\n+`crate`. Associated items (functions, types, and constants) are supported, but [not for blanket\n+trait implementations][#79682]. Rustdoc also supports linking to all primitives listed in\n+[the standard library documentation](../std/index.html#primitives).\n+\n+[#79682]: https://github.com/rust-lang/rust/pull/79682\n \n You can also refer to items with generic parameters like `Vec<T>`. The link will\n resolve as if you had written ``[`Vec<T>`](Vec)``. Fully-qualified syntax (for example,\n@@ -53,7 +62,7 @@ impl<T> AsyncReceiver<T> {\n }\n ```\n \n-You can also link to sections using URL fragment specifiers:\n+Rustdoc allows using URL fragment specifiers, just like a normal link:\n \n ```rust\n /// This is a special implementation of [positional parameters].\n@@ -62,9 +71,11 @@ You can also link to sections using URL fragment specifiers:\n struct MySpecialFormatter;\n ```\n \n-Paths in Rust have three namespaces: type, value, and macro. Item names must be\n-unique within their namespace, but can overlap with items outside of their\n-namespace. In case of ambiguity, rustdoc will warn about the ambiguity and ask you to disambiguate, which can be done by using a prefix like `struct@`, `enum@`, `type@`, `trait@`, `union@`, `const@`, `static@`, `value@`, `fn@`, `function@`, `mod@`, `module@`, `method@`, `prim@`, `primitive@`, `macro@`, or `derive@`:\n+## Namespaces and Disambiguators\n+\n+Paths in Rust have three namespaces: type, value, and macro. Item names must be unique within\n+their namespace, but can overlap with items in other namespaces. In case of ambiguity,\n+rustdoc will warn about the ambiguity and suggest a disambiguator.\n \n ```rust\n /// See also: [`Foo`](struct@Foo)\n@@ -76,19 +87,57 @@ struct Foo {}\n fn Foo() {}\n ```\n \n+These prefixes will be stripped when displayed in the documentation, so `[struct@Foo]` will be\n+rendered as `Foo`.\n+\n You can also disambiguate for functions by adding `()` after the function name,\n or for macros by adding `!` after the macro name:\n \n ```rust\n-/// See also: [`Foo`](struct@Foo)\n-struct Bar;\n+/// This is different from [`foo!`]\n+fn foo() {}\n \n-/// This is different from [`Foo()`]\n-struct Foo {}\n+/// This is different from [`foo()`]\n+macro_rules! foo {\n+  () => {}\n+}\n+```\n \n-fn Foo() {}\n+## Warnings, re-exports, and scoping\n+\n+Links are resolved in the scope of the module where the item is defined, even\n+when the item is re-exported. If a link from another crate fails to resolve, no\n+warning is given.\n+\n+```rust,edition2018\n+mod inner {\n+    /// Link to [f()]\n+    pub struct S;\n+    pub fn f() {}\n+}\n+pub use inner::S; // the link to `f` will still resolve correctly\n ```\n \n-Note: Because of how `macro_rules!` macros are scoped in Rust, the intra-doc links of a `macro_rules!` macro will be resolved [relative to the crate root][#72243], as opposed to the module it is defined in.\n+When re-exporting an item, rustdoc allows adding additional documentation to it.\n+That additional documentation will be resolved in the scope of the re-export, not\n+the original, allowing you to link to items in the new crate. The new links\n+will still give a warning if they fail to resolve.\n+\n+```rust\n+/// See also [foo()]\n+pub use std::process::Command;\n+\n+pub fn foo() {}\n+```\n+\n+This is especially useful for proc-macros, which must always be defined in their own dedicated crate.\n+\n+Note: Because of how `macro_rules!` macros are scoped in Rust, the intra-doc links of a\n+`macro_rules!` macro will be resolved [relative to the crate root][#72243], as opposed to the\n+module it is defined in.\n+\n+If links do not look 'sufficiently like' an intra-doc link, they will be ignored and no warning\n+will be given, even if the link fails to resolve. For example, any link containing `/` or `[]`\n+characters will be ignored.\n \n [#72243]: https://github.com/rust-lang/rust/issues/72243"}]}