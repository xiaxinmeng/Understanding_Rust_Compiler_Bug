{"sha": "0183b4109a04ad78722b919366005df84878cf5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxODNiNDEwOWEwNGFkNzg3MjJiOTE5MzY2MDA1ZGY4NDg3OGNmNWQ=", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2020-11-30T00:49:41Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2020-11-30T01:08:00Z"}, "message": "Pass arguments up to 2*usize by value", "tree": {"sha": "769902d593fdc4f65d30df6cc5e402fa1e85bc8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/769902d593fdc4f65d30df6cc5e402fa1e85bc8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0183b4109a04ad78722b919366005df84878cf5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0183b4109a04ad78722b919366005df84878cf5d", "html_url": "https://github.com/rust-lang/rust/commit/0183b4109a04ad78722b919366005df84878cf5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0183b4109a04ad78722b919366005df84878cf5d/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88b81970ba7a989a728b32039dd075dc206f1360", "url": "https://api.github.com/repos/rust-lang/rust/commits/88b81970ba7a989a728b32039dd075dc206f1360", "html_url": "https://github.com/rust-lang/rust/commit/88b81970ba7a989a728b32039dd075dc206f1360"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "ffc24aef579265f84c6ccdd6d9e33b136e55d335", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0183b4109a04ad78722b919366005df84878cf5d/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0183b4109a04ad78722b919366005df84878cf5d/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=0183b4109a04ad78722b919366005df84878cf5d", "patch": "@@ -2818,7 +2818,7 @@ where\n             || abi == SpecAbi::RustIntrinsic\n             || abi == SpecAbi::PlatformIntrinsic\n         {\n-            let fixup = |arg: &mut ArgAbi<'tcx, Ty<'tcx>>, is_ret: bool| {\n+            let fixup = |arg: &mut ArgAbi<'tcx, Ty<'tcx>>| {\n                 if arg.is_ignore() {\n                     return;\n                 }\n@@ -2856,9 +2856,9 @@ where\n                     _ => return,\n                 }\n \n-                // Return structures up to 2 pointers in size by value, matching `ScalarPair`. LLVM\n-                // will usually return these in 2 registers, which is more efficient than by-ref.\n-                let max_by_val_size = if is_ret { Pointer.size(cx) * 2 } else { Pointer.size(cx) };\n+                // Pass and return structures up to 2 pointers in size by value, matching `ScalarPair`.\n+                // LLVM will usually pass these in 2 registers, which is more efficient than by-ref.\n+                let max_by_val_size = Pointer.size(cx) * 2;\n                 let size = arg.layout.size;\n \n                 if arg.layout.is_unsized() || size > max_by_val_size {\n@@ -2870,9 +2870,9 @@ where\n                     arg.cast_to(Reg { kind: RegKind::Integer, size });\n                 }\n             };\n-            fixup(&mut self.ret, true);\n+            fixup(&mut self.ret);\n             for arg in &mut self.args {\n-                fixup(arg, false);\n+                fixup(arg);\n             }\n             return;\n         }"}, {"sha": "a1815e37cf232988ae54e62817fb77ca8a45e684", "filename": "src/test/codegen/arg-return-value-in-reg.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0183b4109a04ad78722b919366005df84878cf5d/src%2Ftest%2Fcodegen%2Farg-return-value-in-reg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0183b4109a04ad78722b919366005df84878cf5d/src%2Ftest%2Fcodegen%2Farg-return-value-in-reg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Farg-return-value-in-reg.rs?ref=0183b4109a04ad78722b919366005df84878cf5d", "patch": "@@ -1,4 +1,4 @@\n-//! This test checks that types of up to 128 bits are returned by-value instead of via out-pointer.\n+//! Check that types of up to 128 bits are passed and returned by-value instead of via pointer.\n \n // compile-flags: -C no-prepopulate-passes -O\n // only-x86_64\n@@ -11,7 +11,7 @@ pub struct S {\n     c: u32,\n }\n \n-// CHECK: define i128 @modify(%S* noalias nocapture dereferenceable(16) %s)\n+// CHECK: define i128 @modify(i128 %0)\n #[no_mangle]\n pub fn modify(s: S) -> S {\n     S { a: s.a + s.a, b: s.b + s.b, c: s.c + s.c }", "previous_filename": "src/test/codegen/return-value-in-reg.rs"}, {"sha": "f282fd237054c48e881048e25b3db786c352b696", "filename": "src/test/codegen/union-abi.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0183b4109a04ad78722b919366005df84878cf5d/src%2Ftest%2Fcodegen%2Funion-abi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0183b4109a04ad78722b919366005df84878cf5d/src%2Ftest%2Fcodegen%2Funion-abi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Funion-abi.rs?ref=0183b4109a04ad78722b919366005df84878cf5d", "patch": "@@ -63,11 +63,16 @@ pub union UnionU128{a:u128}\n #[no_mangle]\n pub fn test_UnionU128(_: UnionU128) -> UnionU128 { loop {} }\n \n+pub union UnionU128x2{a:(u128, u128)}\n+// CHECK: define void @test_UnionU128x2(i128 %_1.0, i128 %_1.1)\n+#[no_mangle]\n+pub fn test_UnionU128x2(_: UnionU128x2) { loop {} }\n+\n #[repr(C)]\n-pub union CUnionU128{a:u128}\n-// CHECK: define void @test_CUnionU128(%CUnionU128* {{.*}} %_1)\n+pub union CUnionU128x2{a:(u128, u128)}\n+// CHECK: define void @test_CUnionU128x2(%CUnionU128x2* {{.*}} %_1)\n #[no_mangle]\n-pub fn test_CUnionU128(_: CUnionU128) { loop {} }\n+pub fn test_CUnionU128x2(_: CUnionU128x2) { loop {} }\n \n pub union UnionBool { b:bool }\n // CHECK: define zeroext i1 @test_UnionBool(i8 %b)"}]}