{"sha": "a1f48047bf99b0cdc423924c9a09b0759193f9a0", "node_id": "C_kwDOAAsO6NoAKGExZjQ4MDQ3YmY5OWIwY2RjNDIzOTI0YzlhMDliMDc1OTE5M2Y5YTA", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-26T03:06:26Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-25T00:30:36Z"}, "message": "Use Rayon's TLV directly", "tree": {"sha": "259af367c1b7c46b49b9fa7739f2e35e797d5e6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/259af367c1b7c46b49b9fa7739f2e35e797d5e6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1f48047bf99b0cdc423924c9a09b0759193f9a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1f48047bf99b0cdc423924c9a09b0759193f9a0", "html_url": "https://github.com/rust-lang/rust/commit/a1f48047bf99b0cdc423924c9a09b0759193f9a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1f48047bf99b0cdc423924c9a09b0759193f9a0/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8be3c2bda6b683f87b24714ba595e8b04faef54c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8be3c2bda6b683f87b24714ba595e8b04faef54c", "html_url": "https://github.com/rust-lang/rust/commit/8be3c2bda6b683f87b24714ba595e8b04faef54c"}], "stats": {"total": 59, "additions": 14, "deletions": 45}, "files": [{"sha": "47e6b08cc995ab23dc1663a294a9e9fcd14c8949", "filename": "compiler/rustc_middle/src/ty/context/tls.rs", "status": "modified", "additions": 14, "deletions": 45, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a1f48047bf99b0cdc423924c9a09b0759193f9a0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1f48047bf99b0cdc423924c9a09b0759193f9a0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext%2Ftls.rs?ref=a1f48047bf99b0cdc423924c9a09b0759193f9a0", "patch": "@@ -4,6 +4,8 @@ use crate::dep_graph::TaskDepsRef;\n use crate::ty::query;\n use rustc_data_structures::sync::{self, Lock};\n use rustc_errors::Diagnostic;\n+#[cfg(not(parallel_compiler))]\n+use std::cell::Cell;\n use std::mem;\n use std::ptr;\n use thin_vec::ThinVec;\n@@ -47,52 +49,15 @@ impl<'a, 'tcx> ImplicitCtxt<'a, 'tcx> {\n     }\n }\n \n+// Import the thread-local variable from Rayon, which is preserved for Rayon jobs.\n #[cfg(parallel_compiler)]\n-mod tlv {\n-    use rustc_rayon_core as rayon_core;\n-    use std::ptr;\n-\n-    /// Gets Rayon's thread-local variable, which is preserved for Rayon jobs.\n-    /// This is used to get the pointer to the current `ImplicitCtxt`.\n-    #[inline]\n-    pub(super) fn get_tlv() -> *const () {\n-        ptr::from_exposed_addr(rayon_core::tlv::get())\n-    }\n-\n-    /// Sets Rayon's thread-local variable, which is preserved for Rayon jobs\n-    /// to `value` during the call to `f`. It is restored to its previous value after.\n-    /// This is used to set the pointer to the new `ImplicitCtxt`.\n-    #[inline]\n-    pub(super) fn with_tlv<F: FnOnce() -> R, R>(value: *const (), f: F) -> R {\n-        rayon_core::tlv::with(value.expose_addr(), f)\n-    }\n-}\n+use rustc_rayon_core::tlv::TLV;\n \n+// Otherwise define our own\n #[cfg(not(parallel_compiler))]\n-mod tlv {\n-    use std::cell::Cell;\n-    use std::ptr;\n-\n-    thread_local! {\n-        /// A thread local variable that stores a pointer to the current `ImplicitCtxt`.\n-        static TLV: Cell<*const ()> = const { Cell::new(ptr::null()) };\n-    }\n-\n-    /// Gets the pointer to the current `ImplicitCtxt`.\n-    #[inline]\n-    pub(super) fn get_tlv() -> *const () {\n-        TLV.with(|tlv| tlv.get())\n-    }\n-\n-    /// Sets TLV to `value` during the call to `f`.\n-    /// It is restored to its previous value after.\n-    /// This is used to set the pointer to the new `ImplicitCtxt`.\n-    #[inline]\n-    pub(super) fn with_tlv<F: FnOnce() -> R, R>(value: *const (), f: F) -> R {\n-        let old = TLV.replace(value);\n-        let _reset = rustc_data_structures::OnDrop(move || TLV.set(old));\n-        f()\n-    }\n+thread_local! {\n+    /// A thread local variable that stores a pointer to the current `ImplicitCtxt`.\n+    static TLV: Cell<*const ()> = const { Cell::new(ptr::null()) };\n }\n \n #[inline]\n@@ -111,7 +76,11 @@ pub fn enter_context<'a, 'tcx, F, R>(context: &ImplicitCtxt<'a, 'tcx>, f: F) ->\n where\n     F: FnOnce() -> R,\n {\n-    tlv::with_tlv(erase(context), f)\n+    TLV.with(|tlv| {\n+        let old = tlv.replace(erase(context));\n+        let _reset = rustc_data_structures::OnDrop(move || tlv.set(old));\n+        f()\n+    })\n }\n \n /// Allows access to the current `ImplicitCtxt` in a closure if one is available.\n@@ -120,7 +89,7 @@ pub fn with_context_opt<F, R>(f: F) -> R\n where\n     F: for<'a, 'tcx> FnOnce(Option<&ImplicitCtxt<'a, 'tcx>>) -> R,\n {\n-    let context = tlv::get_tlv();\n+    let context = TLV.get();\n     if context.is_null() {\n         f(None)\n     } else {"}]}