{"sha": "4b132eefb48880a7a3781efe844d13845b070c07", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMTMyZWVmYjQ4ODgwYTdhMzc4MWVmZTg0NGQxMzg0NWIwNzBjMDc=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-22T03:32:07Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-09-03T16:02:56Z"}, "message": "Initial commit", "tree": {"sha": "da88ef76cfa33fe859b1a1be912144c60e5f9450", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da88ef76cfa33fe859b1a1be912144c60e5f9450"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b132eefb48880a7a3781efe844d13845b070c07", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b132eefb48880a7a3781efe844d13845b070c07", "html_url": "https://github.com/rust-lang/rust/commit/4b132eefb48880a7a3781efe844d13845b070c07", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b132eefb48880a7a3781efe844d13845b070c07/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08deb863bdebfcbbb71c18acf903eca84f1df4e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/08deb863bdebfcbbb71c18acf903eca84f1df4e7", "html_url": "https://github.com/rust-lang/rust/commit/08deb863bdebfcbbb71c18acf903eca84f1df4e7"}], "stats": {"total": 104, "additions": 90, "deletions": 14}, "files": [{"sha": "43c7b30b78887e4c749132609286dde04186d718", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/4b132eefb48880a7a3781efe844d13845b070c07/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b132eefb48880a7a3781efe844d13845b070c07/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=4b132eefb48880a7a3781efe844d13845b070c07", "patch": "@@ -367,7 +367,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n \n         if position != GenericArgPosition::Type && !args.bindings.is_empty() {\n-            Self::prohibit_assoc_ty_binding(tcx, args.bindings[0].span);\n+            AstConv::prohibit_assoc_ty_binding(tcx, args.bindings[0].span);\n         }\n \n         let explicit_late_bound =\n@@ -392,7 +392,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n \n             if silent {\n-                return Err(true);\n+                return Err((0i32, None));\n             }\n \n             // Unfortunately lifetime and type parameter mismatches are typically styled\n@@ -441,54 +441,84 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             for span in spans {\n                 err.span_label(span, label.as_str());\n             }\n-            err.emit();\n \n-            Err(true)\n+            assert_ne!(bound, provided);\n+            Err((bound as i32 - provided as i32, Some(err)))\n         };\n+        let emit_correct =\n+            |correct: Result<(), (_, Option<rustc_errors::DiagnosticBuilder<'_>>)>| match correct {\n+                Ok(()) => Ok(()),\n+                Err((v, None)) => Err(v == 0),\n+                Err((v, Some(mut err))) => {\n+                    err.emit();\n+                    Err(v == 0)\n+                }\n+            };\n \n-        let mut arg_count_correct = Ok(());\n         let mut unexpected_spans = vec![];\n \n+        let mut lifetime_count_correct = Ok(());\n         if !infer_lifetimes || arg_counts.lifetimes > param_counts.lifetimes {\n-            arg_count_correct = check_kind_count(\n+            lifetime_count_correct = check_kind_count(\n                 \"lifetime\",\n                 param_counts.lifetimes,\n                 param_counts.lifetimes,\n                 arg_counts.lifetimes,\n                 0,\n                 &mut unexpected_spans,\n                 explicit_late_bound == ExplicitLateBound::Yes,\n-            )\n-            .and(arg_count_correct);\n+            );\n         }\n+\n         // FIXME(const_generics:defaults)\n+        let mut const_count_correct = Ok(());\n         if !infer_args || arg_counts.consts > param_counts.consts {\n-            arg_count_correct = check_kind_count(\n+            const_count_correct = check_kind_count(\n                 \"const\",\n                 param_counts.consts,\n                 param_counts.consts,\n                 arg_counts.consts,\n                 arg_counts.lifetimes + arg_counts.types,\n                 &mut unexpected_spans,\n                 false,\n-            )\n-            .and(arg_count_correct);\n+            );\n         }\n+\n         // Note that type errors are currently be emitted *after* const errors.\n+        let mut type_count_correct = Ok(());\n         if !infer_args || arg_counts.types > param_counts.types - defaults.types - has_self as usize\n         {\n-            arg_count_correct = check_kind_count(\n+            type_count_correct = check_kind_count(\n                 \"type\",\n                 param_counts.types - defaults.types - has_self as usize,\n                 param_counts.types - has_self as usize,\n                 arg_counts.types,\n                 arg_counts.lifetimes,\n                 &mut unexpected_spans,\n                 false,\n-            )\n-            .and(arg_count_correct);\n+            );\n         }\n \n+        // Emit a help message if it's possible that a type could be surrounded in braces\n+        if let Err((c_mismatch, Some(ref mut _const_err))) = &mut const_count_correct {\n+            if let Err((t_mismatch, Some(ref mut type_err))) = &mut type_count_correct {\n+                if *c_mismatch == -*t_mismatch && *t_mismatch < 0 {\n+                    for i in 0..*c_mismatch as usize {\n+                        // let t_span = unexpected_type_spans[i].clone();\n+                        let ident = args.args[arg_counts.lifetimes + i].id();\n+                        type_err.help(&format!(\n+                            \"For more complex types, surround with braces: `{{ {} }}`\",\n+                            ident,\n+                        ));\n+                    }\n+                }\n+            }\n+        }\n+\n+        let arg_count_correct = emit_correct(lifetime_count_correct)\n+            .and(emit_correct(const_count_correct))\n+            .and(emit_correct(type_count_correct));\n+\n         GenericArgCountResult {\n             explicit_late_bound,\n             correct: arg_count_correct.map_err(|reported_err| GenericArgCountMismatch {"}, {"sha": "05c13e8fe0c882c69f4351c95db119175779b3d5", "filename": "src/test/ui/const-generics/invalid-enum.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4b132eefb48880a7a3781efe844d13845b070c07/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b132eefb48880a7a3781efe844d13845b070c07/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.rs?ref=4b132eefb48880a7a3781efe844d13845b070c07", "patch": "@@ -0,0 +1,17 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+#[derive(PartialEq, Eq)]\n+enum CompileFlag {\n+  A,\n+  B,\n+}\n+\n+pub fn test<const CF: CompileFlag>() {}\n+\n+pub fn main() {\n+  test::<CompileFlag::A>();\n+  //~^ ERROR: expected type, found variant\n+  //~| ERROR: wrong number of const arguments\n+  //~| ERROR: wrong number of type arguments\n+}"}, {"sha": "096e478d4abb0e33f939fc82fc4db4ca56f37feb", "filename": "src/test/ui/const-generics/invalid-enum.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/4b132eefb48880a7a3781efe844d13845b070c07/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b132eefb48880a7a3781efe844d13845b070c07/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr?ref=4b132eefb48880a7a3781efe844d13845b070c07", "patch": "@@ -0,0 +1,27 @@\n+error[E0573]: expected type, found variant `CompileFlag::A`\n+  --> $DIR/invalid-enum.rs:13:10\n+   |\n+LL |   test::<CompileFlag::A>();\n+   |          ^^^^^^^^^^^^^^\n+   |          |\n+   |          not a type\n+   |          help: try using the variant's enum: `CompileFlag`\n+\n+error[E0107]: wrong number of const arguments: expected 1, found 0\n+  --> $DIR/invalid-enum.rs:13:3\n+   |\n+LL |   test::<CompileFlag::A>();\n+   |   ^^^^^^^^^^^^^^^^^^^^^^ expected 1 const argument\n+\n+error[E0107]: wrong number of type arguments: expected 0, found 1\n+  --> $DIR/invalid-enum.rs:13:10\n+   |\n+LL |   test::<CompileFlag::A>();\n+   |          ^^^^^^^^^^^^^^ unexpected type argument\n+   |\n+   = help: For more complex types, surround with braces: `{ HirId { owner: DefId(0:5 ~ invalid_enum[317d]::main[0]), local_id: 1 } }`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0107, E0573.\n+For more information about an error, try `rustc --explain E0107`."}, {"sha": "702fbfe84de624e6704134dce39dbfaab4e30095", "filename": "src/test/ui/const-generics/issues/issue-62878.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b132eefb48880a7a3781efe844d13845b070c07/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b132eefb48880a7a3781efe844d13845b070c07/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.stderr?ref=4b132eefb48880a7a3781efe844d13845b070c07", "patch": "@@ -24,6 +24,8 @@ error[E0107]: wrong number of type arguments: expected 0, found 1\n    |\n LL |     foo::<_, {[1]}>();\n    |           ^ unexpected type argument\n+   |\n+   = help: For more complex types, surround with braces: `{ HirId { owner: DefId(0:7 ~ issue_62878[317d]::main[0]), local_id: 1 } }`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-62878.rs:7:15"}]}