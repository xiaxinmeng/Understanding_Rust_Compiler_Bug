{"sha": "0c2bf6fe2a0257712ea52a17e396b00cfd92b25c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjMmJmNmZlMmEwMjU3NzEyZWE1MmExN2UzOTZiMDBjZmQ5MmIyNWM=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-26T10:47:56Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-29T20:10:33Z"}, "message": "Add an ensure() method to TyCtxt used to ensure queries are run", "tree": {"sha": "2b2d3b2aea0ef02709394750f68825c98c48765d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b2d3b2aea0ef02709394750f68825c98c48765d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c", "html_url": "https://github.com/rust-lang/rust/commit/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74256630117fedf479edbd1145cac47c88036aec", "url": "https://api.github.com/repos/rust-lang/rust/commits/74256630117fedf479edbd1145cac47c88036aec", "html_url": "https://github.com/rust-lang/rust/commit/74256630117fedf479edbd1145cac47c88036aec"}], "stats": {"total": 72, "additions": 38, "deletions": 34}, "files": [{"sha": "a2947fa0d8c1ff32a8a298106697d4f1c112330d", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=0c2bf6fe2a0257712ea52a17e396b00cfd92b25c", "patch": "@@ -7,7 +7,6 @@\n \n use ty::TyCtxt;\n use ty::query::Providers;\n-use ty::query::queries;\n \n use hir;\n use hir::def_id::DefId;\n@@ -355,7 +354,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CheckAttrVisitor<'a, 'tcx> {\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &module in tcx.hir().krate().modules.keys() {\n-        queries::check_mod_attrs::ensure(tcx, tcx.hir().local_def_id(module));\n+        tcx.ensure().check_mod_attrs(tcx.hir().local_def_id(module));\n     }\n }\n "}, {"sha": "29d3713900ad9ea9e8259d9d37ec7eaecc218cd0", "filename": "src/librustc/middle/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fintrinsicck.rs?ref=0c2bf6fe2a0257712ea52a17e396b00cfd92b25c", "patch": "@@ -2,7 +2,7 @@ use hir::def::Def;\n use hir::def_id::DefId;\n use ty::{self, Ty, TyCtxt};\n use ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n-use ty::query::{Providers, queries};\n+use ty::query::Providers;\n \n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use rustc_data_structures::indexed_vec::Idx;\n@@ -12,7 +12,7 @@ use hir;\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &module in tcx.hir().krate().modules.keys() {\n-        queries::check_mod_intrinsics::ensure(tcx, tcx.hir().local_def_id(module));\n+        tcx.ensure().check_mod_intrinsics(tcx.hir().local_def_id(module));\n     }\n }\n "}, {"sha": "0724d3a262d2812ee6079d94617ed8d23f6c0f5c", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=0c2bf6fe2a0257712ea52a17e396b00cfd92b25c", "patch": "@@ -100,7 +100,7 @@ use self::VarKind::*;\n use hir::def::*;\n use hir::Node;\n use ty::{self, TyCtxt};\n-use ty::query::{Providers, queries};\n+use ty::query::Providers;\n use lint;\n use errors::Applicability;\n use util::nodemap::{NodeMap, HirIdMap, HirIdSet};\n@@ -187,7 +187,7 @@ fn check_mod_liveness<'tcx>(tcx: TyCtxt<'_, 'tcx, 'tcx>, module_def_id: DefId) {\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &module in tcx.hir().krate().modules.keys() {\n-        queries::check_mod_liveness::ensure(tcx, tcx.hir().local_def_id(module));\n+        tcx.ensure().check_mod_liveness(tcx.hir().local_def_id(module));\n     }\n     tcx.sess.abort_if_errors();\n }"}, {"sha": "8b8318db20597bd3e67736a67340a5917556dbf2", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=0c2bf6fe2a0257712ea52a17e396b00cfd92b25c", "patch": "@@ -9,7 +9,6 @@ use hir::def::Def;\n use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, LOCAL_CRATE};\n use hir::intravisit::{self, Visitor, NestedVisitorMap};\n use ty::query::Providers;\n-use ty::query::queries;\n use middle::privacy::AccessLevels;\n use session::{DiagnosticMessageId, Session};\n use syntax::symbol::Symbol;\n@@ -458,7 +457,7 @@ impl<'a, 'tcx> Index<'tcx> {\n \n pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &module in tcx.hir().krate().modules.keys() {\n-        queries::check_mod_unstable_api_usage::ensure(tcx, tcx.hir().local_def_id(module));\n+        tcx.ensure().check_mod_unstable_api_usage(tcx.hir().local_def_id(module));\n     }\n }\n "}, {"sha": "783a4646540a01ba51f71e46744a1edaa51a30ac", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=0c2bf6fe2a0257712ea52a17e396b00cfd92b25c", "patch": "@@ -969,20 +969,20 @@ macro_rules! define_queries_inner {\n             fn handle_cycle_error(tcx: TyCtxt<'_, 'tcx, '_>) -> Self::Value {\n                 handle_cycle_error!([$($modifiers)*][tcx])\n             }\n+        })*\n+\n+        #[derive(Copy, Clone)]\n+        pub struct TyCtxtEnsure<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n+            pub tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         }\n \n-        impl<'a, $tcx, 'lcx> queries::$name<$tcx> {\n-            /// Ensure that either this query has all green inputs or been executed.\n-            /// Executing query::ensure(D) is considered a read of the dep-node D.\n-            ///\n-            /// This function is particularly useful when executing passes for their\n-            /// side-effects -- e.g., in order to report errors for erroneous programs.\n-            ///\n-            /// Note: The optimization is only available during incr. comp.\n-            pub fn ensure(tcx: TyCtxt<'a, $tcx, 'lcx>, key: $K) -> () {\n-                tcx.ensure_query::<queries::$name<'_>>(key);\n-            }\n-        })*\n+        impl<'a, $tcx, 'lcx> TyCtxtEnsure<'a, $tcx, 'lcx> {\n+            $($(#[$attr])*\n+            #[inline(always)]\n+            pub fn $name(self, key: $K) {\n+                self.tcx.ensure_query::<queries::$name<'_>>(key)\n+            })*\n+        }\n \n         #[derive(Copy, Clone)]\n         pub struct TyCtxtAt<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n@@ -999,6 +999,15 @@ macro_rules! define_queries_inner {\n         }\n \n         impl<'a, $tcx, 'lcx> TyCtxt<'a, $tcx, 'lcx> {\n+            /// Return a transparent wrapper for `TyCtxt` which ensures queries\n+            /// are executed instead of returing their result\n+            #[inline(always)]\n+            pub fn ensure(self) -> TyCtxtEnsure<'a, $tcx, 'lcx> {\n+                TyCtxtEnsure {\n+                    tcx: self,\n+                }\n+            }\n+\n             /// Return a transparent wrapper for `TyCtxt` which uses\n             /// `span` as the location of queries performed through it.\n             #[inline(always)]"}, {"sha": "2fe47b2f032f87aab4107521d4dfbaf7af95105f", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=0c2bf6fe2a0257712ea52a17e396b00cfd92b25c", "patch": "@@ -402,7 +402,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             return None;\n         };\n \n-        ty::query::queries::coherent_trait::ensure(self, drop_trait);\n+        self.ensure().coherent_trait(drop_trait);\n \n         let mut dtor_did = None;\n         let ty = self.type_of(adt_did);"}, {"sha": "f177f3661accbe4e06348cf6c20cec4aef14a5b3", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=0c2bf6fe2a0257712ea52a17e396b00cfd92b25c", "patch": "@@ -121,7 +121,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n     // Note that `mir_validated` is a \"stealable\" result; the\n     // thief, `optimized_mir()`, forces borrowck, so we know that\n     // is not yet stolen.\n-    ty::query::queries::mir_validated::ensure(tcx, owner_def_id);\n+    tcx.ensure().mir_validated(owner_def_id);\n \n     // option dance because you can't capture an uninitialized variable\n     // by mut-ref."}, {"sha": "f05a7be7d75137c52a99c4158be99c0c9c6a7608", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=0c2bf6fe2a0257712ea52a17e396b00cfd92b25c", "patch": "@@ -3,7 +3,6 @@ use self::Context::*;\n use rustc::session::Session;\n \n use rustc::ty::query::Providers;\n-use rustc::ty::query::queries;\n use rustc::ty::TyCtxt;\n use rustc::hir::def_id::DefId;\n use rustc::hir::map::Map;\n@@ -48,7 +47,7 @@ struct CheckLoopVisitor<'a, 'hir: 'a> {\n \n pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &module in tcx.hir().krate().modules.keys() {\n-        queries::check_mod_loops::ensure(tcx, tcx.hir().local_def_id(module));\n+        tcx.ensure().check_mod_loops(tcx.hir().local_def_id(module));\n     }\n }\n "}, {"sha": "7f2b82f7e0155d217ffb6d6d0ebadcdd16d83f48", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=0c2bf6fe2a0257712ea52a17e396b00cfd92b25c", "patch": "@@ -22,7 +22,7 @@ use rustc::lint;\n use rustc::middle::privacy::{AccessLevel, AccessLevels};\n use rustc::ty::{self, TyCtxt, Ty, TraitRef, TypeFoldable, GenericParamDefKind};\n use rustc::ty::fold::TypeVisitor;\n-use rustc::ty::query::{Providers, queries};\n+use rustc::ty::query::Providers;\n use rustc::ty::subst::Substs;\n use rustc::util::nodemap::NodeSet;\n use rustc_data_structures::fx::FxHashSet;\n@@ -1722,7 +1722,7 @@ fn privacy_access_levels<'tcx>(\n     let krate = tcx.hir().krate();\n \n     for &module in krate.modules.keys() {\n-        queries::check_mod_privacy::ensure(tcx, tcx.hir().local_def_id(module));\n+        tcx.ensure().check_mod_privacy(tcx.hir().local_def_id(module));\n     }\n \n     // Build up a set of all exported items in the AST. This is a set of all"}, {"sha": "85bed301d1be85a094ea615bc07454eba475aa67", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0c2bf6fe2a0257712ea52a17e396b00cfd92b25c", "patch": "@@ -109,7 +109,6 @@ use rustc::ty::{\n use rustc::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability};\n use rustc::ty::fold::TypeFoldable;\n use rustc::ty::query::Providers;\n-use rustc::ty::query::queries;\n use rustc::ty::subst::{UnpackedKind, Subst, Substs, UserSelfTy, UserSubsts};\n use rustc::ty::util::{Representability, IntTypeExt, Discr};\n use rustc::ty::layout::VariantIdx;\n@@ -703,7 +702,7 @@ pub fn check_wf_new<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), ErrorRe\n pub fn check_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Result<(), ErrorReported> {\n     tcx.sess.track_errors(|| {\n         for &module in tcx.hir().krate().modules.keys() {\n-            queries::check_mod_item_types::ensure(tcx, tcx.hir().local_def_id(module));\n+            tcx.ensure().check_mod_item_types(tcx.hir().local_def_id(module));\n         }\n     })\n }\n@@ -722,7 +721,7 @@ fn typeck_item_bodies<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum\n     debug_assert!(crate_num == LOCAL_CRATE);\n     Ok(tcx.sess.track_errors(|| {\n         tcx.par_body_owners(|body_owner_def_id| {\n-            ty::query::queries::typeck_tables_of::ensure(tcx, body_owner_def_id);\n+            tcx.ensure().typeck_tables_of(body_owner_def_id);\n         });\n     })?)\n }"}, {"sha": "13d24026ba3bcad486e142dbbc606416da59fd05", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=0c2bf6fe2a0257712ea52a17e396b00cfd92b25c", "patch": "@@ -137,15 +137,15 @@ fn coherent_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n \n pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &trait_def_id in tcx.hir().krate().trait_impls.keys() {\n-        ty::query::queries::coherent_trait::ensure(tcx, trait_def_id);\n+        tcx.ensure().coherent_trait(trait_def_id);\n     }\n \n     unsafety::check(tcx);\n     orphan::check(tcx);\n \n     // these queries are executed for side-effects (error reporting):\n-    ty::query::queries::crate_inherent_impls::ensure(tcx, LOCAL_CRATE);\n-    ty::query::queries::crate_inherent_impls_overlap_check::ensure(tcx, LOCAL_CRATE);\n+    tcx.ensure().crate_inherent_impls(LOCAL_CRATE);\n+    tcx.ensure().crate_inherent_impls_overlap_check(LOCAL_CRATE);\n }\n \n /// Overlap: No two impls for the same trait are implemented for the"}, {"sha": "6cfb1ceaa12ae12eeee374fdab07525018913c84", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c2bf6fe2a0257712ea52a17e396b00cfd92b25c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=0c2bf6fe2a0257712ea52a17e396b00cfd92b25c", "patch": "@@ -23,7 +23,6 @@ use middle::resolve_lifetime as rl;\n use middle::weak_lang_items;\n use rustc::mir::mono::Linkage;\n use rustc::ty::query::Providers;\n-use rustc::ty::query::queries;\n use rustc::ty::subst::Substs;\n use rustc::ty::util::Discr;\n use rustc::ty::util::IntTypeExt;\n@@ -58,7 +57,7 @@ struct OnlySelfBounds(bool);\n \n pub fn collect_item_types<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     for &module in tcx.hir().krate().modules.keys() {\n-        queries::collect_mod_item_types::ensure(tcx, tcx.hir().local_def_id(module));\n+        tcx.ensure().collect_mod_item_types(tcx.hir().local_def_id(module));\n     }\n }\n "}]}