{"sha": "6df00f8495e2c8aa5e7312a6e293dee169be137b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkZjAwZjg0OTVlMmM4YWE1ZTczMTJhNmUyOTNkZWUxNjliZTEzN2I=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-14T14:01:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-08-14T14:01:28Z"}, "message": "internal: make naming consistent", "tree": {"sha": "4d6962e7e512c75cb997e1c9f0fdd560fa6dbbcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d6962e7e512c75cb997e1c9f0fdd560fa6dbbcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6df00f8495e2c8aa5e7312a6e293dee169be137b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6df00f8495e2c8aa5e7312a6e293dee169be137b", "html_url": "https://github.com/rust-lang/rust/commit/6df00f8495e2c8aa5e7312a6e293dee169be137b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6df00f8495e2c8aa5e7312a6e293dee169be137b/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "faa420fc32566bd9de81d5d14445dd25bb3694a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/faa420fc32566bd9de81d5d14445dd25bb3694a3", "html_url": "https://github.com/rust-lang/rust/commit/faa420fc32566bd9de81d5d14445dd25bb3694a3"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "f1e66d9f685f3f54862649cfe45de19d2d83837f", "filename": "crates/hir_def/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fhir_def%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fexpr.rs?ref=6df00f8495e2c8aa5e7312a6e293dee169be137b", "patch": "@@ -219,7 +219,7 @@ pub enum ArithOp {\n     BitAnd,\n }\n \n-pub use syntax::ast::PrefixOp as UnaryOp;\n+pub use syntax::ast::UnaryOp;\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub enum Array {\n     ElementList(Vec<ExprId>),"}, {"sha": "f82566d978e5d4c0df74355de9168beba6fd1f43", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=6df00f8495e2c8aa5e7312a6e293dee169be137b", "patch": "@@ -126,7 +126,7 @@ pub(super) fn element(\n                 let ty = sema.type_of_expr(&expr)?.original;\n                 if ty.is_raw_ptr() {\n                     HlTag::Operator(HlOperator::Other) | HlMod::Unsafe\n-                } else if let Some(ast::PrefixOp::Deref) = prefix_expr.op_kind() {\n+                } else if let Some(ast::UnaryOp::Deref) = prefix_expr.op_kind() {\n                     HlOperator::Other.into()\n                 } else {\n                     HlPunct::Other.into()"}, {"sha": "b8822595d42c408b3128ce6fc018ff3c7f465e84", "filename": "crates/ide_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=6df00f8495e2c8aa5e7312a6e293dee169be137b", "patch": "@@ -85,7 +85,7 @@ pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n                 .and_then(|paren_expr| paren_expr.syntax().parent())\n                 .and_then(ast::PrefixExpr::cast)\n                 .and_then(|prefix_expr| {\n-                    if prefix_expr.op_kind().unwrap() == ast::PrefixOp::Not {\n+                    if prefix_expr.op_kind().unwrap() == ast::UnaryOp::Not {\n                         Some(prefix_expr)\n                     } else {\n                         None"}, {"sha": "4d0041e424d93e1a94159cd8fa2c74c054ab8940", "filename": "crates/ide_assists/src/handlers/pull_assignment_up.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fpull_assignment_up.rs?ref=6df00f8495e2c8aa5e7312a6e293dee169be137b", "patch": "@@ -173,8 +173,8 @@ fn is_equivalent(\n             }\n         }\n         (ast::Expr::PrefixExpr(prefix0), ast::Expr::PrefixExpr(prefix1))\n-            if prefix0.op_kind() == Some(ast::PrefixOp::Deref)\n-                && prefix1.op_kind() == Some(ast::PrefixOp::Deref) =>\n+            if prefix0.op_kind() == Some(ast::UnaryOp::Deref)\n+                && prefix1.op_kind() == Some(ast::UnaryOp::Deref) =>\n         {\n             cov_mark::hit!(test_pull_assignment_up_deref);\n             if let (Some(prefix0), Some(prefix1)) = (prefix0.expr(), prefix1.expr()) {"}, {"sha": "476525d1be8e4930495807aef6382f76bee8766a", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=6df00f8495e2c8aa5e7312a6e293dee169be137b", "patch": "@@ -233,7 +233,7 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n             };\n             Some(make::expr_method_call(receiver, make::name_ref(method), arg_list))\n         }\n-        ast::Expr::PrefixExpr(pe) if pe.op_kind()? == ast::PrefixOp::Not => {\n+        ast::Expr::PrefixExpr(pe) if pe.op_kind()? == ast::UnaryOp::Not => {\n             if let ast::Expr::ParenExpr(parexpr) = pe.expr()? {\n                 parexpr.expr()\n             } else {"}, {"sha": "17db6d3c19dedd1acd0531bfbcd9263f99ac0f05", "filename": "crates/ide_assists/src/utils/suggest_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fsuggest_name.rs?ref=6df00f8495e2c8aa5e7312a6e293dee169be137b", "patch": "@@ -110,7 +110,7 @@ pub(crate) fn for_variable(expr: &ast::Expr, sema: &Semantics<'_, RootDatabase>)\n             }\n             ast::Expr::ParenExpr(inner) => next_expr = inner.expr(),\n             ast::Expr::TryExpr(inner) => next_expr = inner.expr(),\n-            ast::Expr::PrefixExpr(prefix) if prefix.op_kind() == Some(ast::PrefixOp::Deref) => {\n+            ast::Expr::PrefixExpr(prefix) if prefix.op_kind() == Some(ast::UnaryOp::Deref) => {\n                 next_expr = prefix.expr()\n             }\n             _ => break,"}, {"sha": "2dcbcccc10678c33e79abe9508293f936c07ef69", "filename": "crates/syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fsyntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fsyntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast.rs?ref=6df00f8495e2c8aa5e7312a6e293dee169be137b", "patch": "@@ -24,7 +24,7 @@ pub use self::{\n         AttrKind, AttrsOwnerNode, FieldKind, Macro, NameLike, NameOrNameRef, PathSegmentKind,\n         SelfParamKind, SlicePatComponents, StructKind, TypeBoundKind, VisibilityKind,\n     },\n-    operators::{PrefixOp, RangeOp},\n+    operators::{RangeOp, UnaryOp},\n     token_ext::{\n         CommentKind, CommentPlacement, CommentShape, HasFormatSpecifier, IsString, QuoteOffsets,\n         Radix,"}, {"sha": "3ebb85fc8308ec9f3dd856ff87b82d4e42226093", "filename": "crates/syntax/src/ast/expr_ext.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fexpr_ext.rs?ref=6df00f8495e2c8aa5e7312a6e293dee169be137b", "patch": "@@ -5,7 +5,7 @@ use rowan::WalkEvent;\n use crate::{\n     ast::{\n         self,\n-        operators::{PrefixOp, RangeOp},\n+        operators::{RangeOp, UnaryOp},\n         support, AstChildren, AstNode,\n     },\n     AstToken,\n@@ -198,11 +198,11 @@ impl ast::IfExpr {\n }\n \n impl ast::PrefixExpr {\n-    pub fn op_kind(&self) -> Option<PrefixOp> {\n+    pub fn op_kind(&self) -> Option<UnaryOp> {\n         let res = match self.op_token()?.kind() {\n-            T![*] => PrefixOp::Deref,\n-            T![!] => PrefixOp::Not,\n-            T![-] => PrefixOp::Neg,\n+            T![*] => UnaryOp::Deref,\n+            T![!] => UnaryOp::Not,\n+            T![-] => UnaryOp::Neg,\n             _ => return None,\n         };\n         Some(res)"}, {"sha": "e8eaf743ba2517bb70bf5d8c6db5769086518af5", "filename": "crates/syntax/src/ast/operators.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fsyntax%2Fsrc%2Fast%2Foperators.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6df00f8495e2c8aa5e7312a6e293dee169be137b/crates%2Fsyntax%2Fsrc%2Fast%2Foperators.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Foperators.rs?ref=6df00f8495e2c8aa5e7312a6e293dee169be137b", "patch": "@@ -1,5 +1,5 @@\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n-pub enum PrefixOp {\n+pub enum UnaryOp {\n     /// The `*` operator for dereferencing\n     Deref,\n     /// The `!` operator for logical inversion"}]}