{"sha": "9d0ca3806ff5a3faee2299b6a1a2248d180aae4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkMGNhMzgwNmZmNWEzZmFlZTIyOTliNmExYTIyNDhkMTgwYWFlNGU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-04T00:17:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-04T00:17:01Z"}, "message": "Rollup merge of #73925 - eduardosm:improve-pr72617-comments, r=RalfJung\n\nImprove comments from #72617, as suggested by RalfJung\n\nr? @RalfJung", "tree": {"sha": "f4f9136c11ebcffc942c3a2230cbcf3f3ba7f602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4f9136c11ebcffc942c3a2230cbcf3f3ba7f602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d0ca3806ff5a3faee2299b6a1a2248d180aae4e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/8p+CRBK7hj4Ov3rIwAAdHIIAKXXRbx+ilD8rxW7XDsjYfkx\nKUZfE7VwtAZcBDw6sedQkOjjZdjXlqxCDntv28rNyVv/5iyKCn+muaOH6VfPQGJ4\nNzv62uLjU+v73XmSoHGgjU9oiv8Nsgdj09pJ54Jmn5BFqJYhvJaETJ9Yv0uh7C/P\nODDHWRYkyvt1X6+Ig131+9sHWI6X1/j2DaEqIfoA7Oq/eW5Y1rac5gzepzOKj0kj\nfCIyMlZO3u84fw3d0YOJXGlySk6BB2qe2bfKmoSCs0IvknZk/gTmlQylDI1lDewX\nJmswluhQrojVmpoEzqjGXPOzfJEPH9wRmFS65CZMCbE/F+fziqiDM/NLXUapPE8=\n=fi5U\n-----END PGP SIGNATURE-----\n", "payload": "tree f4f9136c11ebcffc942c3a2230cbcf3f3ba7f602\nparent d46de1052d3edcc6538adf6d5fc8f87ab6fcf209\nparent 0f1adc8ec812df494df33640c1be147f35e5f6ac\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593821821 -0700\ncommitter GitHub <noreply@github.com> 1593821821 -0700\n\nRollup merge of #73925 - eduardosm:improve-pr72617-comments, r=RalfJung\n\nImprove comments from #72617, as suggested by RalfJung\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d0ca3806ff5a3faee2299b6a1a2248d180aae4e", "html_url": "https://github.com/rust-lang/rust/commit/9d0ca3806ff5a3faee2299b6a1a2248d180aae4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d0ca3806ff5a3faee2299b6a1a2248d180aae4e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d46de1052d3edcc6538adf6d5fc8f87ab6fcf209", "url": "https://api.github.com/repos/rust-lang/rust/commits/d46de1052d3edcc6538adf6d5fc8f87ab6fcf209", "html_url": "https://github.com/rust-lang/rust/commit/d46de1052d3edcc6538adf6d5fc8f87ab6fcf209"}, {"sha": "0f1adc8ec812df494df33640c1be147f35e5f6ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f1adc8ec812df494df33640c1be147f35e5f6ac", "html_url": "https://github.com/rust-lang/rust/commit/0f1adc8ec812df494df33640c1be147f35e5f6ac"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "9542e7209b4cf168347e18b00cc3253c349fb020", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9d0ca3806ff5a3faee2299b6a1a2248d180aae4e/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d0ca3806ff5a3faee2299b6a1a2248d180aae4e/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=9d0ca3806ff5a3faee2299b6a1a2248d180aae4e", "patch": "@@ -229,10 +229,10 @@ pub mod panic_count {\n     thread_local! { static LOCAL_PANIC_COUNT: Cell<usize> = Cell::new(0) }\n \n     // Sum of panic counts from all threads. The purpose of this is to have\n-    // a fast path in `is_zero` (which is used by `panicking`). Access to\n-    // this variable can be always be done with relaxed ordering because\n-    // it is always guaranteed that, if `GLOBAL_PANIC_COUNT` is zero,\n-    // `LOCAL_PANIC_COUNT` will be zero.\n+    // a fast path in `is_zero` (which is used by `panicking`). In any particular\n+    // thread, if that thread currently views `GLOBAL_PANIC_COUNT` as being zero,\n+    // then `LOCAL_PANIC_COUNT` in that thread is zero. This invariant holds before\n+    // and after increase and decrease, but not necessarily during their execution.\n     static GLOBAL_PANIC_COUNT: AtomicUsize = AtomicUsize::new(0);\n \n     pub fn increase() -> usize {\n@@ -263,6 +263,12 @@ pub mod panic_count {\n             // Fast path: if `GLOBAL_PANIC_COUNT` is zero, all threads\n             // (including the current one) will have `LOCAL_PANIC_COUNT`\n             // equal to zero, so TLS access can be avoided.\n+            //\n+            // In terms of performance, a relaxed atomic load is similar to a normal\n+            // aligned memory read (e.g., a mov instruction in x86), but with some\n+            // compiler optimization restrictions. On the other hand, a TLS access\n+            // might require calling a non-inlinable function (such as `__tls_get_addr`\n+            // when using the GD TLS model).\n             true\n         } else {\n             is_zero_slow_path()"}]}