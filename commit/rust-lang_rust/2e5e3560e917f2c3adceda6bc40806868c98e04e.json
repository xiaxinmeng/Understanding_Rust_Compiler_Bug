{"sha": "2e5e3560e917f2c3adceda6bc40806868c98e04e", "node_id": "C_kwDOAAsO6NoAKDJlNWUzNTYwZTkxN2YyYzNhZGNlZGE2YmM0MDgwNjg2OGM5OGUwNGU", "commit": {"author": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-10-01T08:56:55Z"}, "committer": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-10-15T11:03:29Z"}, "message": "Fix adjacent code", "tree": {"sha": "4d762ab97218c7e0cfd006ff73382ff3fc9b5d3b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d762ab97218c7e0cfd006ff73382ff3fc9b5d3b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e5e3560e917f2c3adceda6bc40806868c98e04e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e5e3560e917f2c3adceda6bc40806868c98e04e", "html_url": "https://github.com/rust-lang/rust/commit/2e5e3560e917f2c3adceda6bc40806868c98e04e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e5e3560e917f2c3adceda6bc40806868c98e04e/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8611a0bb5cc401f90162449eaa82295ef5f70d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/8611a0bb5cc401f90162449eaa82295ef5f70d68", "html_url": "https://github.com/rust-lang/rust/commit/8611a0bb5cc401f90162449eaa82295ef5f70d68"}], "stats": {"total": 206, "additions": 108, "deletions": 98}, "files": [{"sha": "08164c0b654e2a0daa18737dfc44e0134603dca0", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_hir_and_then};\n+use clippy_utils::eq_expr_value;\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n-use clippy_utils::{eq_expr_value, get_trait_def_id, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -483,7 +483,9 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n \n fn implements_ord<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'_>) -> bool {\n     let ty = cx.typeck_results().expr_ty(expr);\n-    get_trait_def_id(cx, &paths::ORD).map_or(false, |id| implements_trait(cx, ty, id, &[]))\n+    cx.tcx\n+        .get_diagnostic_item(sym::Ord)\n+        .map_or(false, |id| implements_trait(cx, ty, id, &[]))\n }\n \n struct NotSimplificationVisitor<'a, 'tcx> {"}, {"sha": "0fe973b49a3550235520ab0f87a55139f46fd18f", "filename": "clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -1,9 +1,10 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::ty::implements_trait;\n-use clippy_utils::{get_trait_def_id, if_sequence, in_constant, is_else_clause, paths, SpanlessEq};\n+use clippy_utils::{if_sequence, in_constant, is_else_clause, SpanlessEq};\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -106,7 +107,10 @@ impl<'tcx> LateLintPass<'tcx> for ComparisonChain {\n \n                 // Check that the type being compared implements `core::cmp::Ord`\n                 let ty = cx.typeck_results().expr_ty(lhs1);\n-                let is_ord = get_trait_def_id(cx, &paths::ORD).map_or(false, |id| implements_trait(cx, ty, id, &[]));\n+                let is_ord = cx\n+                    .tcx\n+                    .get_diagnostic_item(sym::Ord)\n+                    .map_or(false, |id| implements_trait(cx, ty, id, &[]));\n \n                 if !is_ord {\n                     return;"}, {"sha": "3064b6c9d22f808f6593660db86a0f6adf589e2f", "filename": "clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -7,14 +7,14 @@ use rustc_middle::{\n     lint::in_external_macro,\n     ty::{self, Ty},\n };\n-use rustc_span::{sym, Span};\n+use rustc_span::{sym, Span, Symbol};\n \n use clippy_utils::attrs::is_proc_macro;\n use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_then};\n use clippy_utils::source::snippet_opt;\n use clippy_utils::ty::is_must_use_ty;\n use clippy_utils::visitors::for_each_expr;\n-use clippy_utils::{match_def_path, return_ty, trait_ref_of_method};\n+use clippy_utils::{return_ty, trait_ref_of_method};\n \n use core::ops::ControlFlow;\n \n@@ -181,15 +181,17 @@ fn is_mutable_pat(cx: &LateContext<'_>, pat: &hir::Pat<'_>, tys: &mut DefIdSet)\n     }\n }\n \n-static KNOWN_WRAPPER_TYS: &[&[&str]] = &[&[\"alloc\", \"rc\", \"Rc\"], &[\"std\", \"sync\", \"Arc\"]];\n+static KNOWN_WRAPPER_TYS: &[Symbol] = &[sym::Rc, sym::Arc];\n \n fn is_mutable_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>, span: Span, tys: &mut DefIdSet) -> bool {\n     match *ty.kind() {\n         // primitive types are never mutable\n         ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_) | ty::Str => false,\n         ty::Adt(adt, substs) => {\n             tys.insert(adt.did()) && !ty.is_freeze(cx.tcx.at(span), cx.param_env)\n-                || KNOWN_WRAPPER_TYS.iter().any(|path| match_def_path(cx, adt.did(), path))\n+                || KNOWN_WRAPPER_TYS\n+                    .iter()\n+                    .any(|&sym| cx.tcx.is_diagnostic_item(sym, adt.did()))\n                     && substs.types().any(|ty| is_mutable_ty(cx, ty, span, tys))\n         },\n         ty::Tuple(substs) => substs.iter().any(|ty| is_mutable_ty(cx, ty, span, tys)),"}, {"sha": "6d50dcc8806910b819b5083a80fe15cbfb815001", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -1,12 +1,13 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::ty::{is_must_use_ty, match_type};\n+use clippy_utils::ty::{is_must_use_ty, is_type_diagnostic_item, match_type};\n use clippy_utils::{is_must_use_func_call, paths};\n use if_chain::if_chain;\n use rustc_hir::{Local, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{sym, Symbol};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -99,10 +100,9 @@ declare_clippy_lint! {\n \n declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE, LET_UNDERSCORE_LOCK, LET_UNDERSCORE_DROP]);\n \n-const SYNC_GUARD_PATHS: [&[&str]; 6] = [\n-    &paths::MUTEX_GUARD,\n-    &paths::RWLOCK_READ_GUARD,\n-    &paths::RWLOCK_WRITE_GUARD,\n+const SYNC_GUARD_SYMS: [Symbol; 3] = [sym::MutexGuard, sym::RwLockReadGuard, sym::RwLockWriteGuard];\n+\n+const SYNC_GUARD_PATHS: [&[&str]; 3] = [\n     &paths::PARKING_LOT_MUTEX_GUARD,\n     &paths::PARKING_LOT_RWLOCK_READ_GUARD,\n     &paths::PARKING_LOT_RWLOCK_WRITE_GUARD,\n@@ -121,7 +121,10 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                 let init_ty = cx.typeck_results().expr_ty(init);\n                 let contains_sync_guard = init_ty.walk().any(|inner| match inner.unpack() {\n                     GenericArgKind::Type(inner_ty) => {\n-                        SYNC_GUARD_PATHS.iter().any(|path| match_type(cx, inner_ty, path))\n+                        SYNC_GUARD_SYMS\n+                            .iter()\n+                            .any(|&sym| is_type_diagnostic_item(cx, inner_ty, sym))\n+                            || SYNC_GUARD_PATHS.iter().any(|path| match_type(cx, inner_ty, path))\n                     },\n \n                     GenericArgKind::Lifetime(_) | GenericArgKind::Const(_) => false,"}, {"sha": "2b1c5688e820d3f26167c8e86fbbdd1af0d1807e", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -3,7 +3,7 @@ use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n use clippy_utils::source::snippet;\n use clippy_utils::ty::has_iter_method;\n use clippy_utils::visitors::is_local_used;\n-use clippy_utils::{contains_name, higher, is_integer_const, match_trait_method, paths, sugg, SpanlessEq};\n+use clippy_utils::{contains_name, higher, is_integer_const, sugg, SpanlessEq};\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -302,8 +302,13 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n         if_chain! {\n             // a range index op\n             if let ExprKind::MethodCall(meth, args_0, [args_1, ..], _) = &expr.kind;\n-            if (meth.ident.name == sym::index && match_trait_method(self.cx, expr, &paths::INDEX))\n-                || (meth.ident.name == sym::index_mut && match_trait_method(self.cx, expr, &paths::INDEX_MUT));\n+            if let Some(trait_id) = self\n+                .cx\n+                .typeck_results()\n+                .type_dependent_def_id(expr.hir_id)\n+                .and_then(|def_id| self.cx.tcx.trait_of_item(def_id));\n+            if (meth.ident.name == sym::index && self.cx.tcx.lang_items().index_trait() == Some(trait_id))\n+                || (meth.ident.name == sym::index_mut && self.cx.tcx.lang_items().index_mut_trait() == Some(trait_id));\n             if !self.check(args_1, args_0, expr);\n             then { return }\n         }"}, {"sha": "570d83c7ea82d786b4c2213f44173e1a2721d5ed", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -1,6 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::match_function_call;\n-use clippy_utils::paths::FUTURE_FROM_GENERATOR;\n+use clippy_utils::match_function_call_with_def_id;\n use clippy_utils::source::{position_before_rarrow, snippet_block, snippet_opt};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -175,7 +174,11 @@ fn captures_all_lifetimes(inputs: &[Ty<'_>], output_lifetimes: &[LifetimeName])\n fn desugared_async_block<'tcx>(cx: &LateContext<'tcx>, block: &'tcx Block<'tcx>) -> Option<&'tcx Body<'tcx>> {\n     if_chain! {\n         if let Some(block_expr) = block.expr;\n-        if let Some(args) = match_function_call(cx, block_expr, &FUTURE_FROM_GENERATOR);\n+        if let Some(args) = cx\n+            .tcx\n+            .lang_items()\n+            .from_generator_fn()\n+            .and_then(|def_id| match_function_call_with_def_id(cx, block_expr, def_id));\n         if args.len() == 1;\n         if let Expr{kind: ExprKind::Closure(&Closure { body, .. }), ..} = args[0];\n         let closure_body = cx.tcx.hir().body(body);"}, {"sha": "02dc8755dd61c9e86f23bbe209066680d964d5f0", "filename": "clippy_lints/src/manual_clamp.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fmanual_clamp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fmanual_clamp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_clamp.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -12,9 +12,9 @@ use std::ops::Deref;\n \n use clippy_utils::{\n     diagnostics::{span_lint_and_then, span_lint_hir_and_then},\n-    eq_expr_value, get_trait_def_id,\n+    eq_expr_value,\n     higher::If,\n-    is_diag_trait_item, is_trait_method, meets_msrv, msrvs, path_res, path_to_local_id, paths, peel_blocks,\n+    is_diag_trait_item, is_trait_method, meets_msrv, msrvs, path_res, path_to_local_id, peel_blocks,\n     peel_blocks_with_stmt,\n     sugg::Sugg,\n     ty::implements_trait,\n@@ -190,7 +190,11 @@ impl TypeClampability {\n     fn is_clampable<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<TypeClampability> {\n         if ty.is_floating_point() {\n             Some(TypeClampability::Float)\n-        } else if get_trait_def_id(cx, &paths::ORD).map_or(false, |id| implements_trait(cx, ty, id, &[])) {\n+        } else if cx\n+            .tcx\n+            .get_diagnostic_item(sym::Ord)\n+            .map_or(false, |id| implements_trait(cx, ty, id, &[]))\n+        {\n             Some(TypeClampability::Ord)\n         } else {\n             None"}, {"sha": "e5a15b2e1a1d2b454a8a5f488f6dfa1f7aa654fb", "filename": "clippy_lints/src/matches/single_match.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -1,14 +1,13 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::{expr_block, snippet};\n-use clippy_utils::ty::{implements_trait, match_type, peel_mid_ty_refs};\n-use clippy_utils::{\n-    is_lint_allowed, is_unit_expr, is_wild, paths, peel_blocks, peel_hir_pat_refs, peel_n_hir_expr_refs,\n-};\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, peel_mid_ty_refs};\n+use clippy_utils::{is_lint_allowed, is_unit_expr, is_wild, peel_blocks, peel_hir_pat_refs, peel_n_hir_expr_refs};\n use core::cmp::max;\n use rustc_errors::Applicability;\n use rustc_hir::{Arm, BindingAnnotation, Block, Expr, ExprKind, Pat, PatKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n+use rustc_span::sym;\n \n use super::{MATCH_BOOL, SINGLE_MATCH, SINGLE_MATCH_ELSE};\n \n@@ -156,10 +155,10 @@ fn pat_in_candidate_enum<'a>(cx: &LateContext<'a>, ty: Ty<'a>, pat: &Pat<'_>) ->\n /// Returns `true` if the given type is an enum we know won't be expanded in the future\n fn in_candidate_enum<'a>(cx: &LateContext<'a>, ty: Ty<'_>) -> bool {\n     // list of candidate `Enum`s we know will never get any more members\n-    let candidates = [&paths::COW, &paths::OPTION, &paths::RESULT];\n+    let candidates = [sym::Cow, sym::Option, sym::Result];\n \n     for candidate_ty in candidates {\n-        if match_type(cx, ty, candidate_ty) {\n+        if is_type_diagnostic_item(cx, ty, candidate_ty) {\n             return true;\n         }\n     }"}, {"sha": "b0677d1a3ae3974d128d6693c5d188a3717451d0", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -102,9 +102,7 @@ use bind_instead_of_map::BindInsteadOfMap;\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n use clippy_utils::ty::{contains_adt_constructor, implements_trait, is_copy, is_type_diagnostic_item};\n-use clippy_utils::{\n-    contains_return, get_trait_def_id, is_trait_method, iter_input_pats, meets_msrv, msrvs, paths, return_ty,\n-};\n+use clippy_utils::{contains_return, is_trait_method, iter_input_pats, meets_msrv, msrvs, return_ty};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_hir::def::Res;\n@@ -3846,12 +3844,12 @@ impl SelfKind {\n                 return m == mutability && t == parent_ty;\n             }\n \n-            let trait_path = match mutability {\n-                hir::Mutability::Not => &paths::ASREF_TRAIT,\n-                hir::Mutability::Mut => &paths::ASMUT_TRAIT,\n+            let trait_sym = match mutability {\n+                hir::Mutability::Not => sym::AsRef,\n+                hir::Mutability::Mut => sym::AsMut,\n             };\n \n-            let Some(trait_def_id) = get_trait_def_id(cx, trait_path) else {\n+            let Some(trait_def_id) = cx.tcx.get_diagnostic_item(trait_sym) else {\n                 return false\n             };\n             implements_trait(cx, ty, trait_def_id, &[parent_ty.into()])"}, {"sha": "742483e6b2e5545274adf08081f1db58953eb8c5", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -32,8 +32,7 @@ pub(super) fn check<'tcx>(\n         return;\n     }\n \n-    let deref_aliases: [&[&str]; 9] = [\n-        &paths::DEREF_TRAIT_METHOD,\n+    let deref_aliases: [&[&str]; 8] = [\n         &paths::DEREF_MUT_TRAIT_METHOD,\n         &paths::CSTRING_AS_C_STR,\n         &paths::OS_STRING_AS_OS_STR,\n@@ -45,12 +44,14 @@ pub(super) fn check<'tcx>(\n     ];\n \n     let is_deref = match map_arg.kind {\n-        hir::ExprKind::Path(ref expr_qpath) => cx\n-            .qpath_res(expr_qpath, map_arg.hir_id)\n-            .opt_def_id()\n-            .map_or(false, |fun_def_id| {\n-                deref_aliases.iter().any(|path| match_def_path(cx, fun_def_id, path))\n-            }),\n+        hir::ExprKind::Path(ref expr_qpath) => {\n+            cx.qpath_res(expr_qpath, map_arg.hir_id)\n+                .opt_def_id()\n+                .map_or(false, |fun_def_id| {\n+                    cx.tcx.is_diagnostic_item(sym::deref_method, fun_def_id)\n+                        || deref_aliases.iter().any(|path| match_def_path(cx, fun_def_id, path))\n+                })\n+        },\n         hir::ExprKind::Closure(&hir::Closure { body, .. }) => {\n             let closure_body = cx.tcx.hir().body(body);\n             let closure_expr = peel_blocks(closure_body.value);\n@@ -68,7 +69,8 @@ pub(super) fn check<'tcx>(\n                         if let [ty::adjustment::Adjust::Deref(None), ty::adjustment::Adjust::Borrow(_)] = *adj;\n                         then {\n                             let method_did = cx.typeck_results().type_dependent_def_id(closure_expr.hir_id).unwrap();\n-                            deref_aliases.iter().any(|path| match_def_path(cx, method_did, path))\n+                            cx.tcx.is_diagnostic_item(sym::deref_method, method_did)\n+                                || deref_aliases.iter().any(|path| match_def_path(cx, method_did, path))\n                         } else {\n                             false\n                         }"}, {"sha": "6e10445659ef2352afa8785b95d79ed8a909585a", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -1,14 +1,14 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::eager_or_lazy::switch_to_lazy_eval;\n use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n-use clippy_utils::ty::{implements_trait, match_type};\n-use clippy_utils::{contains_return, is_trait_item, last_path_segment, paths};\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n+use clippy_utils::{contains_return, is_trait_item, last_path_segment};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::{kw, sym};\n+use rustc_span::symbol::{kw, sym, Symbol};\n use std::borrow::Cow;\n \n use super::OR_FUN_CALL;\n@@ -88,11 +88,11 @@ pub(super) fn check<'tcx>(\n         fun_span: Option<Span>,\n     ) {\n         // (path, fn_has_argument, methods, suffix)\n-        const KNOW_TYPES: [(&[&str], bool, &[&str], &str); 4] = [\n-            (&paths::BTREEMAP_ENTRY, false, &[\"or_insert\"], \"with\"),\n-            (&paths::HASHMAP_ENTRY, false, &[\"or_insert\"], \"with\"),\n-            (&paths::OPTION, false, &[\"map_or\", \"ok_or\", \"or\", \"unwrap_or\"], \"else\"),\n-            (&paths::RESULT, true, &[\"or\", \"unwrap_or\"], \"else\"),\n+        const KNOW_TYPES: [(Symbol, bool, &[&str], &str); 4] = [\n+            (sym::BTreeEntry, false, &[\"or_insert\"], \"with\"),\n+            (sym::HashMapEntry, false, &[\"or_insert\"], \"with\"),\n+            (sym::Option, false, &[\"map_or\", \"ok_or\", \"or\", \"unwrap_or\"], \"else\"),\n+            (sym::Result, true, &[\"or\", \"unwrap_or\"], \"else\"),\n         ];\n \n         if_chain! {\n@@ -104,7 +104,7 @@ pub(super) fn check<'tcx>(\n             let self_ty = cx.typeck_results().expr_ty(self_expr);\n \n             if let Some(&(_, fn_has_arguments, poss, suffix)) =\n-                KNOW_TYPES.iter().find(|&&i| match_type(cx, self_ty, i.0));\n+                KNOW_TYPES.iter().find(|&&i| is_type_diagnostic_item(cx, self_ty, i.0));\n \n             if poss.contains(&name);\n "}, {"sha": "c949cede8e10a1d6ae6f103cfb26bad875901ae7", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -1,11 +1,11 @@\n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::ty::implements_trait;\n-use clippy_utils::{self, get_trait_def_id, paths};\n use if_chain::if_chain;\n use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -58,7 +58,7 @@ impl<'tcx> LateLintPass<'tcx> for NoNegCompOpForPartialOrd {\n                 let ty = cx.typeck_results().expr_ty(left);\n \n                 let implements_ord = {\n-                    if let Some(id) = get_trait_def_id(cx, &paths::ORD) {\n+                    if let Some(id) = cx.tcx.get_diagnostic_item(sym::Ord) {\n                         implements_trait(cx, ty, id, &[])\n                     } else {\n                         return;"}, {"sha": "24aeb82a37f3107095a9944ca1b5fb9738a0c51b", "filename": "clippy_lints/src/operators/cmp_owned.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Foperators%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Foperators%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fcmp_owned.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::{implements_trait, is_copy};\n-use clippy_utils::{match_any_def_paths, path_def_id, paths};\n+use clippy_utils::{match_def_path, path_def_id, paths};\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n use rustc_lint::LateContext;\n@@ -49,13 +49,15 @@ fn check_op(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left: bool)\n             (arg, arg.span)\n         },\n         ExprKind::Call(path, [arg])\n-            if path_def_id(cx, path)\n-                .and_then(|id| match_any_def_paths(cx, id, &[&paths::FROM_STR_METHOD, &paths::FROM_FROM]))\n-                .map_or(false, |idx| match idx {\n-                    0 => true,\n-                    1 => !is_copy(cx, typeck.expr_ty(expr)),\n-                    _ => false,\n-                }) =>\n+            if path_def_id(cx, path).map_or(false, |id| {\n+                if match_def_path(cx, id, &paths::FROM_STR_METHOD) {\n+                    true\n+                } else if cx.tcx.lang_items().from_fn() == Some(id) {\n+                    !is_copy(cx, typeck.expr_ty(expr))\n+                } else {\n+                    false\n+                }\n+            }) =>\n         {\n             (arg, arg.span)\n         },"}, {"sha": "fc2ee9e5a4db25d52207afef410c7be66035c8cc", "filename": "clippy_lints/src/unit_return_expecting_ord.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_return_expecting_ord.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -1,13 +1,12 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n-use clippy_utils::{get_trait_def_id, paths};\n use if_chain::if_chain;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{Closure, Expr, ExprKind, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_middle::ty::{GenericPredicates, PredicateKind, ProjectionPredicate, TraitPredicate};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{BytePos, Span};\n+use rustc_span::{sym, BytePos, Span};\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -80,7 +79,7 @@ fn get_args_to_check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -> Ve\n         let fn_sig = cx.tcx.fn_sig(def_id);\n         let generics = cx.tcx.predicates_of(def_id);\n         let fn_mut_preds = get_trait_predicates_for_trait_id(cx, generics, cx.tcx.lang_items().fn_mut_trait());\n-        let ord_preds = get_trait_predicates_for_trait_id(cx, generics, get_trait_def_id(cx, &paths::ORD));\n+        let ord_preds = get_trait_predicates_for_trait_id(cx, generics, cx.tcx.get_diagnostic_item(sym::Ord));\n         let partial_ord_preds =\n             get_trait_predicates_for_trait_id(cx, generics, cx.tcx.lang_items().partial_ord_trait());\n         // Trying to call erase_late_bound_regions on fn_sig.inputs() gives the following error"}, {"sha": "cbc2fde69d1244d6fa2086269705d61924a2ee53", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -1766,6 +1766,7 @@ pub fn any_parent_is_automatically_derived(tcx: TyCtxt<'_>, node: HirId) -> bool\n /// ```rust,ignore\n /// if let Some(args) = match_function_call(cx, cmp_max_call, &paths::CMP_MAX);\n /// ```\n+/// This function is deprecated. Use [`match_function_call_with_def_id`].\n pub fn match_function_call<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx Expr<'_>,\n@@ -1783,6 +1784,22 @@ pub fn match_function_call<'tcx>(\n     None\n }\n \n+pub fn match_function_call_with_def_id<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    fun_def_id: DefId,\n+) -> Option<&'tcx [Expr<'tcx>]> {\n+    if_chain! {\n+        if let ExprKind::Call(fun, args) = expr.kind;\n+        if let ExprKind::Path(ref qpath) = fun.kind;\n+        if cx.qpath_res(qpath, fun.hir_id).opt_def_id() == Some(fun_def_id);\n+        then {\n+            return Some(args);\n+        }\n+    };\n+    None\n+}\n+\n /// Checks if the given `DefId` matches any of the paths. Returns the index of matching path, if\n /// any.\n ///"}, {"sha": "bc851473430454d8b1dc0f4bdf7dece213606e4c", "filename": "clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/clippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fpaths.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -16,56 +16,40 @@ pub const APPLICABILITY_VALUES: [[&str; 3]; 4] = [\n #[cfg(feature = \"internal\")]\n pub const DIAGNOSTIC_BUILDER: [&str; 3] = [\"rustc_errors\", \"diagnostic_builder\", \"DiagnosticBuilder\"];\n pub const ARC_PTR_EQ: [&str; 4] = [\"alloc\", \"sync\", \"Arc\", \"ptr_eq\"];\n-pub const ASMUT_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsMut\"];\n-pub const ASREF_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsRef\"];\n pub const BTREEMAP_CONTAINS_KEY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"contains_key\"];\n-pub const BTREEMAP_ENTRY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"entry\", \"Entry\"];\n pub const BTREEMAP_INSERT: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"insert\"];\n pub const BTREESET_ITER: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"set\", \"BTreeSet\", \"iter\"];\n pub const CLONE_TRAIT_METHOD: [&str; 4] = [\"core\", \"clone\", \"Clone\", \"clone\"];\n-pub const COW: [&str; 3] = [\"alloc\", \"borrow\", \"Cow\"];\n pub const CORE_ITER_COLLECT: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"collect\"];\n pub const CORE_ITER_CLONED: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"cloned\"];\n pub const CORE_ITER_COPIED: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"copied\"];\n pub const CORE_ITER_FILTER: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"filter\"];\n-pub const CORE_ITER_INTO_ITER: [&str; 6] = [\"core\", \"iter\", \"traits\", \"collect\", \"IntoIterator\", \"into_iter\"];\n pub const CSTRING_AS_C_STR: [&str; 5] = [\"alloc\", \"ffi\", \"c_str\", \"CString\", \"as_c_str\"];\n pub const DEFAULT_TRAIT_METHOD: [&str; 4] = [\"core\", \"default\", \"Default\", \"default\"];\n pub const DEREF_MUT_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"DerefMut\", \"deref_mut\"];\n-/// Preferably use the diagnostic item `sym::deref_method` where possible\n-pub const DEREF_TRAIT_METHOD: [&str; 5] = [\"core\", \"ops\", \"deref\", \"Deref\", \"deref\"];\n-pub const DISPLAY_TRAIT: [&str; 3] = [\"core\", \"fmt\", \"Display\"];\n #[cfg(feature = \"internal\")]\n pub const EARLY_CONTEXT: [&str; 2] = [\"rustc_lint\", \"EarlyContext\"];\n #[cfg(feature = \"internal\")]\n pub const EARLY_LINT_PASS: [&str; 3] = [\"rustc_lint\", \"passes\", \"EarlyLintPass\"];\n pub const EXIT: [&str; 3] = [\"std\", \"process\", \"exit\"];\n pub const F32_EPSILON: [&str; 4] = [\"core\", \"f32\", \"<impl f32>\", \"EPSILON\"];\n pub const F64_EPSILON: [&str; 4] = [\"core\", \"f64\", \"<impl f64>\", \"EPSILON\"];\n-pub const FILE: [&str; 3] = [\"std\", \"fs\", \"File\"];\n-pub const FILE_TYPE: [&str; 3] = [\"std\", \"fs\", \"FileType\"];\n-pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_ITERATOR_METHOD: [&str; 6] = [\"core\", \"iter\", \"traits\", \"collect\", \"FromIterator\", \"from_iter\"];\n pub const FROM_STR_METHOD: [&str; 5] = [\"core\", \"str\", \"traits\", \"FromStr\", \"from_str\"];\n-pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];\n #[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const FUTURES_IO_ASYNCREADEXT: [&str; 3] = [\"futures_util\", \"io\", \"AsyncReadExt\"];\n #[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const FUTURES_IO_ASYNCWRITEEXT: [&str; 3] = [\"futures_util\", \"io\", \"AsyncWriteExt\"];\n pub const HASHMAP_CONTAINS_KEY: [&str; 6] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\", \"contains_key\"];\n-pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n pub const HASHMAP_INSERT: [&str; 6] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\", \"insert\"];\n pub const HASHSET_ITER: [&str; 6] = [\"std\", \"collections\", \"hash\", \"set\", \"HashSet\", \"iter\"];\n #[cfg(feature = \"internal\")]\n pub const IDENT: [&str; 3] = [\"rustc_span\", \"symbol\", \"Ident\"];\n #[cfg(feature = \"internal\")]\n pub const IDENT_AS_STR: [&str; 4] = [\"rustc_span\", \"symbol\", \"Ident\", \"as_str\"];\n-pub const INDEX: [&str; 3] = [\"core\", \"ops\", \"Index\"];\n-pub const INDEX_MUT: [&str; 3] = [\"core\", \"ops\", \"IndexMut\"];\n pub const INSERT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"insert_str\"];\n pub const ITER_COUNT: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"count\"];\n pub const ITER_EMPTY: [&str; 5] = [\"core\", \"iter\", \"sources\", \"empty\", \"Empty\"];\n-pub const ITER_REPEAT: [&str; 5] = [\"core\", \"iter\", \"sources\", \"repeat\", \"repeat\"];\n pub const ITERTOOLS_NEXT_TUPLE: [&str; 3] = [\"itertools\", \"Itertools\", \"next_tuple\"];\n #[cfg(feature = \"internal\")]\n pub const KW_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"kw\"];\n@@ -76,13 +60,7 @@ pub const LATE_LINT_PASS: [&str; 3] = [\"rustc_lint\", \"passes\", \"LateLintPass\"];\n #[cfg(feature = \"internal\")]\n pub const LINT: [&str; 2] = [\"rustc_lint_defs\", \"Lint\"];\n pub const MEM_SWAP: [&str; 3] = [\"core\", \"mem\", \"swap\"];\n-pub const MUTEX_GUARD: [&str; 4] = [\"std\", \"sync\", \"mutex\", \"MutexGuard\"];\n pub const OPEN_OPTIONS: [&str; 3] = [\"std\", \"fs\", \"OpenOptions\"];\n-/// Preferably use the diagnostic item `sym::Option` where possible\n-pub const OPTION: [&str; 3] = [\"core\", \"option\", \"Option\"];\n-pub const OPTION_NONE: [&str; 4] = [\"core\", \"option\", \"Option\", \"None\"];\n-pub const OPTION_SOME: [&str; 4] = [\"core\", \"option\", \"Option\", \"Some\"];\n-pub const ORD: [&str; 3] = [\"core\", \"cmp\", \"Ord\"];\n pub const OS_STRING_AS_OS_STR: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsString\", \"as_os_str\"];\n pub const OS_STR_TO_OS_STRING: [&str; 5] = [\"std\", \"ffi\", \"os_str\", \"OsStr\", \"to_os_string\"];\n pub const PARKING_LOT_MUTEX_GUARD: [&str; 3] = [\"lock_api\", \"mutex\", \"MutexGuard\"];\n@@ -95,8 +73,6 @@ pub const PERMISSIONS: [&str; 3] = [\"std\", \"fs\", \"Permissions\"];\n #[cfg_attr(not(unix), allow(clippy::invalid_paths))]\n pub const PERMISSIONS_FROM_MODE: [&str; 6] = [\"std\", \"os\", \"unix\", \"fs\", \"PermissionsExt\", \"from_mode\"];\n pub const POLL: [&str; 4] = [\"core\", \"task\", \"poll\", \"Poll\"];\n-pub const POLL_PENDING: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Pending\"];\n-pub const POLL_READY: [&str; 5] = [\"core\", \"task\", \"poll\", \"Poll\", \"Ready\"];\n pub const PTR_COPY: [&str; 3] = [\"core\", \"intrinsics\", \"copy\"];\n pub const PTR_COPY_NONOVERLAPPING: [&str; 3] = [\"core\", \"intrinsics\", \"copy_nonoverlapping\"];\n pub const PTR_EQ: [&str; 3] = [\"core\", \"ptr\", \"eq\"];\n@@ -125,14 +101,8 @@ pub const REGEX_BYTES_NEW: [&str; 4] = [\"regex\", \"re_bytes\", \"Regex\", \"new\"];\n pub const REGEX_BYTES_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"bytes\", \"RegexSet\", \"new\"];\n pub const REGEX_NEW: [&str; 4] = [\"regex\", \"re_unicode\", \"Regex\", \"new\"];\n pub const REGEX_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"unicode\", \"RegexSet\", \"new\"];\n-/// Preferably use the diagnostic item `sym::Result` where possible\n-pub const RESULT: [&str; 3] = [\"core\", \"result\", \"Result\"];\n-pub const RESULT_ERR: [&str; 4] = [\"core\", \"result\", \"Result\", \"Err\"];\n-pub const RESULT_OK: [&str; 4] = [\"core\", \"result\", \"Result\", \"Ok\"];\n #[cfg(feature = \"internal\")]\n pub const RUSTC_VERSION: [&str; 2] = [\"rustc_semver\", \"RustcVersion\"];\n-pub const RWLOCK_READ_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockReadGuard\"];\n-pub const RWLOCK_WRITE_GUARD: [&str; 4] = [\"std\", \"sync\", \"rwlock\", \"RwLockWriteGuard\"];\n pub const SERDE_DESERIALIZE: [&str; 3] = [\"serde\", \"de\", \"Deserialize\"];\n pub const SERDE_DE_VISITOR: [&str; 3] = [\"serde\", \"de\", \"Visitor\"];\n pub const SLICE_FROM_RAW_PARTS: [&str; 4] = [\"core\", \"slice\", \"raw\", \"from_raw_parts\"];"}, {"sha": "9a9790a4bae51ec7c99447c4a4ddfa46f1080e77", "filename": "tests/ui-internal/invalid_paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2e5e3560e917f2c3adceda6bc40806868c98e04e/tests%2Fui-internal%2Finvalid_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e5e3560e917f2c3adceda6bc40806868c98e04e/tests%2Fui-internal%2Finvalid_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-internal%2Finvalid_paths.rs?ref=2e5e3560e917f2c3adceda6bc40806868c98e04e", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::internal)]\n-#![allow(clippy::missing_clippy_version_attribute)]\n+#![allow(clippy::missing_clippy_version_attribute, clippy::unnecessary_def_path)]\n \n mod paths {\n     // Good path"}]}