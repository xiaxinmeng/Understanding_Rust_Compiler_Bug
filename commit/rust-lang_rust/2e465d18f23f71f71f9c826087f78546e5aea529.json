{"sha": "2e465d18f23f71f71f9c826087f78546e5aea529", "node_id": "C_kwDOAAsO6NoAKDJlNDY1ZDE4ZjIzZjcxZjcxZjljODI2MDg3Zjc4NTQ2ZTVhZWE1Mjk", "commit": {"author": {"name": "Pascal Kuthe", "email": "pascal.kuthe@semimod.de", "date": "2023-03-04T01:05:09Z"}, "committer": {"name": "Pascal Kuthe", "email": "pascal.kuthe@semimod.de", "date": "2023-03-04T01:05:09Z"}, "message": "generate correct completion edits for missing macro arguments\n\nrust-analyzer used the token at the cursor after macro expansion\nto decide whether to replace the token at the cursor before macro\nexpansion. In most cases these two are the same but in some cases these\ncan mismatch which can lead to incorrect replacements.\n\nFor example if an ident/expr macro argument is missing rust-analyzer\ngenerates a \"missing\" identifier as a placeholder, there is only a\nbrace at the cursor. Therefore, rust-analyzer will incorrectly replace\nthe macro brace with the completion in that case leading to #14246.\n\nUsing the expanded token type was intentional. However, this doesn't\nseem to ever be desirable (this is supported by the fact that there\nwere no tests that relied on this behavior) since the type of edit to\nperform should always be determined by the token it's actually applied\nto.", "tree": {"sha": "f7de617eeef1bb9112a3253077cb6ec971aff216", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7de617eeef1bb9112a3253077cb6ec971aff216"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e465d18f23f71f71f9c826087f78546e5aea529", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQS5wclZezai/JCN+3HXFehlWuFmpgUCZAKgwgAKCRDXFehlWuFm\npiR3AQDaVIAY/CXjriQrYP86w6he8Qft1KbgDcCKCtz5Mfq48QD/QDlgwMOOUS4D\nXikrtCzVwGkYNiUGOs6lRmG7Z618twk=\n=4Pr3\n-----END PGP SIGNATURE-----", "payload": "tree f7de617eeef1bb9112a3253077cb6ec971aff216\nparent 73e2505cfa8be6838f5151b272f1d24869b2a3d6\nauthor Pascal Kuthe <pascal.kuthe@semimod.de> 1677891909 +0100\ncommitter Pascal Kuthe <pascal.kuthe@semimod.de> 1677891909 +0100\n\ngenerate correct completion edits for missing macro arguments\n\nrust-analyzer used the token at the cursor after macro expansion\nto decide whether to replace the token at the cursor before macro\nexpansion. In most cases these two are the same but in some cases these\ncan mismatch which can lead to incorrect replacements.\n\nFor example if an ident/expr macro argument is missing rust-analyzer\ngenerates a \"missing\" identifier as a placeholder, there is only a\nbrace at the cursor. Therefore, rust-analyzer will incorrectly replace\nthe macro brace with the completion in that case leading to #14246.\n\nUsing the expanded token type was intentional. However, this doesn't\nseem to ever be desirable (this is supported by the fact that there\nwere no tests that relied on this behavior) since the type of edit to\nperform should always be determined by the token it's actually applied\nto.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e465d18f23f71f71f9c826087f78546e5aea529", "html_url": "https://github.com/rust-lang/rust/commit/2e465d18f23f71f71f9c826087f78546e5aea529", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e465d18f23f71f71f9c826087f78546e5aea529/comments", "author": {"login": "pascalkuthe", "id": 61850714, "node_id": "MDQ6VXNlcjYxODUwNzE0", "avatar_url": "https://avatars.githubusercontent.com/u/61850714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pascalkuthe", "html_url": "https://github.com/pascalkuthe", "followers_url": "https://api.github.com/users/pascalkuthe/followers", "following_url": "https://api.github.com/users/pascalkuthe/following{/other_user}", "gists_url": "https://api.github.com/users/pascalkuthe/gists{/gist_id}", "starred_url": "https://api.github.com/users/pascalkuthe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pascalkuthe/subscriptions", "organizations_url": "https://api.github.com/users/pascalkuthe/orgs", "repos_url": "https://api.github.com/users/pascalkuthe/repos", "events_url": "https://api.github.com/users/pascalkuthe/events{/privacy}", "received_events_url": "https://api.github.com/users/pascalkuthe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pascalkuthe", "id": 61850714, "node_id": "MDQ6VXNlcjYxODUwNzE0", "avatar_url": "https://avatars.githubusercontent.com/u/61850714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pascalkuthe", "html_url": "https://github.com/pascalkuthe", "followers_url": "https://api.github.com/users/pascalkuthe/followers", "following_url": "https://api.github.com/users/pascalkuthe/following{/other_user}", "gists_url": "https://api.github.com/users/pascalkuthe/gists{/gist_id}", "starred_url": "https://api.github.com/users/pascalkuthe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pascalkuthe/subscriptions", "organizations_url": "https://api.github.com/users/pascalkuthe/orgs", "repos_url": "https://api.github.com/users/pascalkuthe/repos", "events_url": "https://api.github.com/users/pascalkuthe/events{/privacy}", "received_events_url": "https://api.github.com/users/pascalkuthe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73e2505cfa8be6838f5151b272f1d24869b2a3d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/73e2505cfa8be6838f5151b272f1d24869b2a3d6", "html_url": "https://github.com/rust-lang/rust/commit/73e2505cfa8be6838f5151b272f1d24869b2a3d6"}], "stats": {"total": 62, "additions": 60, "deletions": 2}, "files": [{"sha": "7dc29c3d5acad7d5358645088e79dae996486184", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2e465d18f23f71f71f9c826087f78546e5aea529/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e465d18f23f71f71f9c826087f78546e5aea529/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=2e465d18f23f71f71f9c826087f78546e5aea529", "patch": "@@ -387,8 +387,7 @@ pub(crate) struct CompletionContext<'a> {\n impl<'a> CompletionContext<'a> {\n     /// The range of the identifier that is being completed.\n     pub(crate) fn source_range(&self) -> TextRange {\n-        // check kind of macro-expanded token, but use range of original token\n-        let kind = self.token.kind();\n+        let kind = self.original_token.kind();\n         match kind {\n             CHAR => {\n                 // assume we are completing a lifetime but the user has only typed the '"}, {"sha": "44e8860763329abd27997f1c726ab443171db2a3", "filename": "crates/ide-completion/src/render/macro_.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/2e465d18f23f71f71f9c826087f78546e5aea529/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e465d18f23f71f71f9c826087f78546e5aea529/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fmacro_.rs?ref=2e465d18f23f71f71f9c826087f78546e5aea529", "patch": "@@ -264,6 +264,65 @@ macro_rules! foo {\n fn main() {\n     foo!($0)\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn complete_missing_macro_arg() {\n+        // Regression test for https://github.com/rust-lang/rust-analyzer/issues/14246\n+        check_edit(\n+            \"BAR\",\n+            r#\"\n+macro_rules! foo {\n+    ($val:ident,  $val2: ident) => {\n+        $val $val2\n+    };\n+}\n+\n+const BAR: u32 = 9;\n+fn main() {\n+    foo!(BAR, $0)\n+}\n+\"#,\n+            r#\"\n+macro_rules! foo {\n+    ($val:ident,  $val2: ident) => {\n+        $val $val2\n+    };\n+}\n+\n+const BAR: u32 = 9;\n+fn main() {\n+    foo!(BAR, BAR)\n+}\n+\"#,\n+        );\n+        check_edit(\n+            \"BAR\",\n+            r#\"\n+macro_rules! foo {\n+    ($val:ident,  $val2: ident) => {\n+        $val $val2\n+    };\n+}\n+\n+const BAR: u32 = 9;\n+fn main() {\n+    foo!($0)\n+}\n+\"#,\n+            r#\"\n+macro_rules! foo {\n+    ($val:ident,  $val2: ident) => {\n+        $val $val2\n+    };\n+}\n+\n+const BAR: u32 = 9;\n+fn main() {\n+    foo!(BAR)\n+}\n \"#,\n         );\n     }"}]}