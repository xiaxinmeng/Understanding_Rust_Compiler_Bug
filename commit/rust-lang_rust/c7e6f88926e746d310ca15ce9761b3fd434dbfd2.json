{"sha": "c7e6f88926e746d310ca15ce9761b3fd434dbfd2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZTZmODg5MjZlNzQ2ZDMxMGNhMTVjZTk3NjFiM2ZkNDM0ZGJmZDI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-27T18:11:20Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-02-03T19:42:15Z"}, "message": "Add more tests for or-patterns", "tree": {"sha": "1210207aad7df05c0dba9044d2bebf03e6f27073", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1210207aad7df05c0dba9044d2bebf03e6f27073"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7e6f88926e746d310ca15ce9761b3fd434dbfd2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e6f88926e746d310ca15ce9761b3fd434dbfd2", "html_url": "https://github.com/rust-lang/rust/commit/c7e6f88926e746d310ca15ce9761b3fd434dbfd2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b1ff27cd8968454771d419703873e3f98caf2eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b1ff27cd8968454771d419703873e3f98caf2eb", "html_url": "https://github.com/rust-lang/rust/commit/0b1ff27cd8968454771d419703873e3f98caf2eb"}], "stats": {"total": 474, "additions": 474, "deletions": 0}, "files": [{"sha": "4c23582e1f8949498a5943a2fb68541b33a868a9", "filename": "src/test/mir-opt/exponential-or.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fmir-opt%2Fexponential-or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fmir-opt%2Fexponential-or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fexponential-or.rs?ref=c7e6f88926e746d310ca15ce9761b3fd434dbfd2", "patch": "@@ -0,0 +1,76 @@\n+// Test that simple or-patterns don't get expanded to exponentially large CFGs\n+\n+// ignore-tidy-linelength\n+\n+#![feature(or_patterns)]\n+\n+fn match_tuple(x: (u32, bool, Option<i32>, u32)) -> u32 {\n+    match x {\n+        (y @ (1 | 4), true | false, Some(1 | 8) | None, z @ (6..=9 | 13..=16)) => y ^ z,\n+        _ => 0,\n+    }\n+}\n+\n+fn main() {}\n+\n+// END RUST SOURCE\n+\n+// START rustc.match_tuple.SimplifyCfg-initial.after.mir\n+// scope 1 {\n+//     debug y => _7;\n+//     debug z => _8;\n+// }\n+// bb0: {\n+//     FakeRead(ForMatchedPlace, _1);\n+//     switchInt((_1.0: u32)) -> [1u32: bb2, 4u32: bb2, otherwise: bb1];\n+// }\n+// bb1: {\n+//     _0 = const 0u32;\n+//     goto -> bb10;\n+// }\n+// bb2: {\n+//     _2 = discriminant((_1.2: std::option::Option<i32>));\n+//     switchInt(move _2) -> [0isize: bb4, 1isize: bb3, otherwise: bb1];\n+// }\n+// bb3: {\n+//     switchInt((((_1.2: std::option::Option<i32>) as Some).0: i32)) -> [1i32: bb4, 8i32: bb4, otherwise: bb1];\n+// }\n+// bb4: {\n+//     _5 = Le(const 6u32, (_1.3: u32));\n+//     switchInt(move _5) -> [false: bb6, otherwise: bb5];\n+// }\n+// bb5: {\n+//     _6 = Le((_1.3: u32), const 9u32);\n+//     switchInt(move _6) -> [false: bb6, otherwise: bb8];\n+// }\n+// bb6: {\n+//     _3 = Le(const 13u32, (_1.3: u32));\n+//     switchInt(move _3) -> [false: bb1, otherwise: bb7];\n+// }\n+// bb7: {\n+//     _4 = Le((_1.3: u32), const 16u32);\n+//     switchInt(move _4) -> [false: bb1, otherwise: bb8];\n+// }\n+// bb8: {\n+//     falseEdges -> [real: bb9, imaginary: bb1];\n+// }\n+// bb9: {\n+//     StorageLive(_7);\n+//     _7 = (_1.0: u32);\n+//     StorageLive(_8);\n+//     _8 = (_1.3: u32);\n+//     StorageLive(_9);\n+//     _9 = _7;\n+//     StorageLive(_10);\n+//     _10 = _8;\n+//     _0 = BitXor(move _9, move _10);\n+//     StorageDead(_10);\n+//     StorageDead(_9);\n+//     StorageDead(_8);\n+//     StorageDead(_7);\n+//     goto -> bb10;\n+// }\n+// bb10: {\n+//     return;\n+// }\n+// END rustc.match_tuple.SimplifyCfg-initial.after.mir"}, {"sha": "5b31e2d76a05b8c11e771b882a71cc9a880c4c0e", "filename": "src/test/ui/borrowck/or-patterns.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2Fborrowck%2For-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2Fborrowck%2For-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2For-patterns.rs?ref=c7e6f88926e746d310ca15ce9761b3fd434dbfd2", "patch": "@@ -0,0 +1,64 @@\n+// Test that borrow check considers all choices in an or pattern, even the\n+// unreachable ones.\n+\n+#![feature(or_patterns)]\n+\n+fn or_pattern_moves_all(x: ((String, String),)) {\n+    match x {\n+        ((y, _) | (_, y),) => (),\n+    }\n+    &x.0 .0;\n+    //~^ ERROR borrow of moved value\n+    &x.0 .1;\n+    //~^ ERROR borrow of moved value\n+}\n+\n+fn or_pattern_borrows_all(mut x: ((String, String),)) {\n+    let r = match x {\n+        ((ref y, _) | (_, ref y),) => y,\n+    };\n+    &mut x.0 .0;\n+    //~^ ERROR cannot borrow\n+    &mut x.0 .1;\n+    //~^ ERROR cannot borrow\n+    drop(r);\n+}\n+\n+fn or_pattern_borrows_all_mut(mut x: ((String, String),)) {\n+    let r = match x {\n+        ((ref mut y, _) | (_, ref mut y),) => y,\n+    };\n+    &x.0 .0;\n+    //~^ ERROR cannot borrow\n+    &x.0 .1;\n+    //~^ ERROR cannot borrow\n+    drop(r);\n+}\n+\n+fn let_or_pattern_moves_all(x: ((String, String),)) {\n+    let ((y, _) | (_, y),) = x;\n+    &x.0 .0;\n+    //~^ ERROR borrow of moved value\n+    &x.0 .1;\n+    //~^ ERROR borrow of moved value\n+}\n+\n+fn let_or_pattern_borrows_all(mut x: ((String, String),)) {\n+    let ((ref r, _) | (_, ref r),) = x;\n+    &mut x.0 .0;\n+    //~^ ERROR cannot borrow\n+    &mut x.0 .1;\n+    //~^ ERROR cannot borrow\n+    drop(r);\n+}\n+\n+fn let_or_pattern_borrows_all_mut(mut x: ((String, String),)) {\n+    let ((ref mut r, _) | (_, ref mut r),) = x;\n+    &x.0 .0;\n+    //~^ ERROR cannot borrow\n+    &x.0 .1;\n+    //~^ ERROR cannot borrow\n+    drop(r);\n+}\n+\n+fn main() {}"}, {"sha": "d3f3544426aade1192c47f064079a28d1533420f", "filename": "src/test/ui/borrowck/or-patterns.stderr", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2Fborrowck%2For-patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2Fborrowck%2For-patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2For-patterns.stderr?ref=c7e6f88926e746d310ca15ce9761b3fd434dbfd2", "patch": "@@ -0,0 +1,141 @@\n+error[E0382]: borrow of moved value: `x.0.0`\n+  --> $DIR/or-patterns.rs:10:5\n+   |\n+LL |         ((y, _) | (_, y),) => (),\n+   |           - value moved here\n+LL |     }\n+LL |     &x.0 .0;\n+   |     ^^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `x.0.0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `x.0.1`\n+  --> $DIR/or-patterns.rs:12:5\n+   |\n+LL |         ((y, _) | (_, y),) => (),\n+   |                       - value moved here\n+...\n+LL |     &x.0 .1;\n+   |     ^^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `x.0.1` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0502]: cannot borrow `x.0.0` as mutable because it is also borrowed as immutable\n+  --> $DIR/or-patterns.rs:20:5\n+   |\n+LL |         ((ref y, _) | (_, ref y),) => y,\n+   |           ----- immutable borrow occurs here\n+LL |     };\n+LL |     &mut x.0 .0;\n+   |     ^^^^^^^^^^^ mutable borrow occurs here\n+...\n+LL |     drop(r);\n+   |          - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `x.0.1` as mutable because it is also borrowed as immutable\n+  --> $DIR/or-patterns.rs:22:5\n+   |\n+LL |         ((ref y, _) | (_, ref y),) => y,\n+   |                           ----- immutable borrow occurs here\n+...\n+LL |     &mut x.0 .1;\n+   |     ^^^^^^^^^^^ mutable borrow occurs here\n+LL |\n+LL |     drop(r);\n+   |          - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `x.0.0` as immutable because it is also borrowed as mutable\n+  --> $DIR/or-patterns.rs:31:5\n+   |\n+LL |         ((ref mut y, _) | (_, ref mut y),) => y,\n+   |           --------- mutable borrow occurs here\n+LL |     };\n+LL |     &x.0 .0;\n+   |     ^^^^^^^ immutable borrow occurs here\n+...\n+LL |     drop(r);\n+   |          - mutable borrow later used here\n+\n+error[E0502]: cannot borrow `x.0.1` as immutable because it is also borrowed as mutable\n+  --> $DIR/or-patterns.rs:33:5\n+   |\n+LL |         ((ref mut y, _) | (_, ref mut y),) => y,\n+   |                               --------- mutable borrow occurs here\n+...\n+LL |     &x.0 .1;\n+   |     ^^^^^^^ immutable borrow occurs here\n+LL |\n+LL |     drop(r);\n+   |          - mutable borrow later used here\n+\n+error[E0382]: borrow of moved value: `x.0.0`\n+  --> $DIR/or-patterns.rs:40:5\n+   |\n+LL |     let ((y, _) | (_, y),) = x;\n+   |           - value moved here\n+LL |     &x.0 .0;\n+   |     ^^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `x.0.0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `x.0.1`\n+  --> $DIR/or-patterns.rs:42:5\n+   |\n+LL |     let ((y, _) | (_, y),) = x;\n+   |                       - value moved here\n+...\n+LL |     &x.0 .1;\n+   |     ^^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `x.0.1` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0502]: cannot borrow `x.0.0` as mutable because it is also borrowed as immutable\n+  --> $DIR/or-patterns.rs:48:5\n+   |\n+LL |     let ((ref r, _) | (_, ref r),) = x;\n+   |           ----- immutable borrow occurs here\n+LL |     &mut x.0 .0;\n+   |     ^^^^^^^^^^^ mutable borrow occurs here\n+...\n+LL |     drop(r);\n+   |          - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `x.0.1` as mutable because it is also borrowed as immutable\n+  --> $DIR/or-patterns.rs:50:5\n+   |\n+LL |     let ((ref r, _) | (_, ref r),) = x;\n+   |                           ----- immutable borrow occurs here\n+...\n+LL |     &mut x.0 .1;\n+   |     ^^^^^^^^^^^ mutable borrow occurs here\n+LL |\n+LL |     drop(r);\n+   |          - immutable borrow later used here\n+\n+error[E0502]: cannot borrow `x.0.0` as immutable because it is also borrowed as mutable\n+  --> $DIR/or-patterns.rs:57:5\n+   |\n+LL |     let ((ref mut r, _) | (_, ref mut r),) = x;\n+   |           --------- mutable borrow occurs here\n+LL |     &x.0 .0;\n+   |     ^^^^^^^ immutable borrow occurs here\n+...\n+LL |     drop(r);\n+   |          - mutable borrow later used here\n+\n+error[E0502]: cannot borrow `x.0.1` as immutable because it is also borrowed as mutable\n+  --> $DIR/or-patterns.rs:59:5\n+   |\n+LL |     let ((ref mut r, _) | (_, ref mut r),) = x;\n+   |                               --------- mutable borrow occurs here\n+...\n+LL |     &x.0 .1;\n+   |     ^^^^^^^ immutable borrow occurs here\n+LL |\n+LL |     drop(r);\n+   |          - mutable borrow later used here\n+\n+error: aborting due to 12 previous errors\n+\n+Some errors have detailed explanations: E0382, E0502.\n+For more information about an error, try `rustc --explain E0382`."}, {"sha": "0087167af7eccd1ed0ddf8370b7dd327de96a710", "filename": "src/test/ui/or-patterns/bindings-runpass-1.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2For-patterns%2Fbindings-runpass-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2For-patterns%2Fbindings-runpass-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fbindings-runpass-1.rs?ref=c7e6f88926e746d310ca15ce9761b3fd434dbfd2", "patch": "@@ -0,0 +1,25 @@\n+// run-pass\n+\n+#![feature(or_patterns)]\n+\n+fn two_bindings(x: &((bool, bool), u8)) -> u8 {\n+    match x {\n+        &((true, y) | (y, true), z @ (0 | 4)) => (y as u8) + z,\n+        _ => 20,\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(two_bindings(&((false, false), 0)), 20);\n+    assert_eq!(two_bindings(&((false, true), 0)), 0);\n+    assert_eq!(two_bindings(&((true, false), 0)), 0);\n+    assert_eq!(two_bindings(&((true, true), 0)), 1);\n+    assert_eq!(two_bindings(&((false, false), 4)), 20);\n+    assert_eq!(two_bindings(&((false, true), 4)), 4);\n+    assert_eq!(two_bindings(&((true, false), 4)), 4);\n+    assert_eq!(two_bindings(&((true, true), 4)), 5);\n+    assert_eq!(two_bindings(&((false, false), 3)), 20);\n+    assert_eq!(two_bindings(&((false, true), 3)), 20);\n+    assert_eq!(two_bindings(&((true, false), 3)), 20);\n+    assert_eq!(two_bindings(&((true, true), 3)), 20);\n+}"}, {"sha": "0e1eb7b2e030bd9022e27aa6b5721ed719d14a94", "filename": "src/test/ui/or-patterns/bindings-runpass-2.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2For-patterns%2Fbindings-runpass-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2For-patterns%2Fbindings-runpass-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fbindings-runpass-2.rs?ref=c7e6f88926e746d310ca15ce9761b3fd434dbfd2", "patch": "@@ -0,0 +1,32 @@\n+// run-pass\n+\n+#![feature(or_patterns)]\n+\n+fn or_at(x: Result<u32, u32>) -> u32 {\n+    match x {\n+        Ok(x @ 4) | Err(x @ (6 | 8)) => x,\n+        Ok(x @ 1 | x @ 2) => x,\n+        Err(x @ (0..=10 | 30..=40)) if x % 2 == 0 => x + 100,\n+        Err(x @ 0..=40) => x + 200,\n+        _ => 500,\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(or_at(Ok(1)), 1);\n+    assert_eq!(or_at(Ok(2)), 2);\n+    assert_eq!(or_at(Ok(3)), 500);\n+    assert_eq!(or_at(Ok(4)), 4);\n+    assert_eq!(or_at(Ok(5)), 500);\n+    assert_eq!(or_at(Ok(6)), 500);\n+    assert_eq!(or_at(Err(1)), 201);\n+    assert_eq!(or_at(Err(2)), 102);\n+    assert_eq!(or_at(Err(3)), 203);\n+    assert_eq!(or_at(Err(4)), 104);\n+    assert_eq!(or_at(Err(5)), 205);\n+    assert_eq!(or_at(Err(6)), 6);\n+    assert_eq!(or_at(Err(7)), 207);\n+    assert_eq!(or_at(Err(8)), 8);\n+    assert_eq!(or_at(Err(20)), 220);\n+    assert_eq!(or_at(Err(50)), 500);\n+}"}, {"sha": "b79af6c402ec5a6c90d8a44e9dfd7b3c135e35e0", "filename": "src/test/ui/or-patterns/for-loop.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2For-patterns%2Ffor-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2For-patterns%2Ffor-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Ffor-loop.rs?ref=c7e6f88926e746d310ca15ce9761b3fd434dbfd2", "patch": "@@ -0,0 +1,18 @@\n+// Check that or patterns are lowered correctly in `for` loops.\n+// run-pass\n+\n+#![feature(or_patterns)]\n+\n+fn main() {\n+    let v = vec![Ok(2), Err(3), Ok(5)];\n+    let mut w = Vec::new();\n+    for &(Ok(i) | Err(i)) in &v {\n+        w.push(i);\n+    }\n+    let mut u = Vec::new();\n+    for Ok(i) | Err(i) in v {\n+        u.push(i);\n+    }\n+    assert_eq!(w, [2, 3, 5]);\n+    assert_eq!(u, [2, 3, 5]);\n+}"}, {"sha": "9256360b29db93290c36b5bdc264d2a388ebdba6", "filename": "src/test/ui/or-patterns/if-let-while-let.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2For-patterns%2Fif-let-while-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2For-patterns%2Fif-let-while-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fif-let-while-let.rs?ref=c7e6f88926e746d310ca15ce9761b3fd434dbfd2", "patch": "@@ -0,0 +1,22 @@\n+// Check that or patterns are lowered correctly in `if let` and `while let` expressions.\n+// run-pass\n+\n+#![feature(or_patterns)]\n+\n+fn main() {\n+    let mut opt = Some(3);\n+    let mut w = Vec::new();\n+    while let Some(ref mut val @ (3 | 4 | 6)) = opt {\n+        w.push(*val);\n+        *val += 1;\n+    }\n+    assert_eq!(w, [3, 4]);\n+    if let &(None | Some(6 | 7)) = &opt {\n+        unreachable!();\n+    }\n+    if let Some(x @ (4 | 5 | 6)) = opt {\n+        assert_eq!(x, 5);\n+    } else {\n+        unreachable!();\n+    }\n+}"}, {"sha": "0c2ae44e546d9b9b89ce822566172117f412ab83", "filename": "src/test/ui/or-patterns/issue-67514-irrefutable-param.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2For-patterns%2Fissue-67514-irrefutable-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2For-patterns%2Fissue-67514-irrefutable-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fissue-67514-irrefutable-param.rs?ref=c7e6f88926e746d310ca15ce9761b3fd434dbfd2", "patch": "@@ -0,0 +1,11 @@\n+// Check that we don't ICE for irrefutable or-patterns in function parameters\n+\n+// check-pass\n+\n+#![feature(or_patterns)]\n+\n+fn foo((Some(_) | None): Option<u32>) {}\n+\n+fn main() {\n+    foo(None);\n+}"}, {"sha": "07e37412ce842173b4d4545b744455045e81babb", "filename": "src/test/ui/or-patterns/let-pattern.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2For-patterns%2Flet-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2For-patterns%2Flet-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Flet-pattern.rs?ref=c7e6f88926e746d310ca15ce9761b3fd434dbfd2", "patch": "@@ -0,0 +1,19 @@\n+#![feature(or_patterns)]\n+\n+// run-pass\n+\n+fn or_pat_let(x: Result<u32, u32>) -> u32 {\n+    let Ok(y) | Err(y) = x;\n+    y\n+}\n+\n+fn or_pat_arg((Ok(y) | Err(y)): Result<u32, u32>) -> u32 {\n+    y\n+}\n+\n+fn main() {\n+    assert_eq!(or_pat_let(Ok(3)), 3);\n+    assert_eq!(or_pat_let(Err(5)), 5);\n+    assert_eq!(or_pat_arg(Ok(7)), 7);\n+    assert_eq!(or_pat_arg(Err(9)), 9);\n+}"}, {"sha": "eb127b881cd37832f17b0906ba96bb3cb86f1a48", "filename": "src/test/ui/or-patterns/search-via-bindings.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2For-patterns%2Fsearch-via-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e6f88926e746d310ca15ce9761b3fd434dbfd2/src%2Ftest%2Fui%2For-patterns%2Fsearch-via-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2Fsearch-via-bindings.rs?ref=c7e6f88926e746d310ca15ce9761b3fd434dbfd2", "patch": "@@ -0,0 +1,66 @@\n+// Check that we expand multiple or-patterns from left to right.\n+\n+// run-pass\n+\n+#![feature(or_patterns)]\n+#![allow(unreachable_patterns)] // FIXME(or-patterns) this shouldn't trigger\n+\n+fn search(target: (bool, bool, bool)) -> u32 {\n+    let x = ((false, true), (false, true), (false, true));\n+    let mut guard_count = 0;\n+    match x {\n+        ((a, _) | (_, a), (b @ _, _) | (_, b @ _), (c @ false, _) | (_, c @ true))\n+            if {\n+                guard_count += 1;\n+                (a, b, c) == target\n+            } =>\n+        {\n+            guard_count\n+        }\n+        _ => unreachable!(),\n+    }\n+}\n+\n+// Equivalent to the above code, but hopefully easier to understand.\n+fn search_old_style(target: (bool, bool, bool)) -> u32 {\n+    let x = ((false, true), (false, true), (false, true));\n+    let mut guard_count = 0;\n+    match x {\n+        ((a, _), (b @ _, _), (c @ false, _))\n+        | ((a, _), (b @ _, _), (_, c @ true))\n+        | ((a, _), (_, b @ _), (c @ false, _))\n+        | ((a, _), (_, b @ _), (_, c @ true))\n+        | ((_, a), (b @ _, _), (c @ false, _))\n+        | ((_, a), (b @ _, _), (_, c @ true))\n+        | ((_, a), (_, b @ _), (c @ false, _))\n+        | ((_, a), (_, b @ _), (_, c @ true))\n+            if {\n+                guard_count += 1;\n+                (a, b, c) == target\n+            } =>\n+        {\n+            guard_count\n+        }\n+        _ => unreachable!(),\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(search((false, false, false)), 1);\n+    assert_eq!(search((false, false, true)), 2);\n+    assert_eq!(search((false, true, false)), 3);\n+    assert_eq!(search((false, true, true)), 4);\n+    assert_eq!(search((true, false, false)), 5);\n+    assert_eq!(search((true, false, true)), 6);\n+    assert_eq!(search((true, true, false)), 7);\n+    assert_eq!(search((true, true, true)), 8);\n+\n+    assert_eq!(search_old_style((false, false, false)), 1);\n+    assert_eq!(search_old_style((false, false, true)), 2);\n+    assert_eq!(search_old_style((false, true, false)), 3);\n+    assert_eq!(search_old_style((false, true, true)), 4);\n+    assert_eq!(search_old_style((true, false, false)), 5);\n+    assert_eq!(search_old_style((true, false, true)), 6);\n+    assert_eq!(search_old_style((true, true, false)), 7);\n+    assert_eq!(search_old_style((true, true, true)), 8);\n+}"}]}