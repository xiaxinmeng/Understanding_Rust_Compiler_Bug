{"sha": "eb7f429ea54db7111b9c1570ce08c3851727d2e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViN2Y0MjllYTU0ZGI3MTExYjljMTU3MGNlMDhjMzg1MTcyN2QyZTU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-17T08:16:08Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-07-17T08:16:08Z"}, "message": "Move resolve diagnostic instability to compile-fail\n\nThe produced paths aren't stable between builds, since\nreporting paths inside resolve, before resolve is finished\nmight produce paths resolved to type aliases instead of\nthe concrete type.\n\nCompile-fail tests can match just parts of messages, so they\ndon't \"suffer\" from this issue.\n\nThis is just a workaround, the instability should be fixed\nin the future.", "tree": {"sha": "66ecab94f0adedc56737ab4442405b7af739a5d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66ecab94f0adedc56737ab4442405b7af739a5d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb7f429ea54db7111b9c1570ce08c3851727d2e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb7f429ea54db7111b9c1570ce08c3851727d2e5", "html_url": "https://github.com/rust-lang/rust/commit/eb7f429ea54db7111b9c1570ce08c3851727d2e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb7f429ea54db7111b9c1570ce08c3851727d2e5/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9d9a4aab4f6c51d16c2f13e69abcbe8f6c76725", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9d9a4aab4f6c51d16c2f13e69abcbe8f6c76725", "html_url": "https://github.com/rust-lang/rust/commit/a9d9a4aab4f6c51d16c2f13e69abcbe8f6c76725"}], "stats": {"total": 107, "additions": 70, "deletions": 37}, "files": [{"sha": "c09e56cbc5bcaeeaf15e7238b45e82bc8cd55e33", "filename": "src/test/compile-fail/issue-35675.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f429ea54db7111b9c1570ce08c3851727d2e5/src%2Ftest%2Fcompile-fail%2Fissue-35675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f429ea54db7111b9c1570ce08c3851727d2e5/src%2Ftest%2Fcompile-fail%2Fissue-35675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-35675.rs?ref=eb7f429ea54db7111b9c1570ce08c3851727d2e5", "patch": "@@ -0,0 +1,67 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// these two HELPs are actually in a new line between this line and the `enum Fruit` line\n+enum Fruit { //~ HELP possible candidate is found in another module, you can import it into scope\n+    //~^ HELP possible candidate is found in another module, you can import it into scope\n+    Apple(i64),\n+    Orange(i64),\n+}\n+\n+fn should_return_fruit() -> Apple {\n+    //~^ ERROR cannot find type `Apple` in this scope\n+    //~| NOTE not found in this scope\n+    //~| HELP you can try using the variant's enum\n+    Apple(5)\n+    //~^ ERROR cannot find function `Apple` in this scope\n+    //~| NOTE not found in this scope\n+}\n+\n+fn should_return_fruit_too() -> Fruit::Apple {\n+    //~^ ERROR expected type, found variant `Fruit::Apple`\n+    //~| HELP you can try using the variant's enum\n+    //~| NOTE not a type\n+    Apple(5)\n+    //~^ ERROR cannot find function `Apple` in this scope\n+    //~| NOTE not found in this scope\n+}\n+\n+fn foo() -> Ok {\n+    //~^ ERROR expected type, found variant `Ok`\n+    //~| NOTE not a type\n+    //~| HELP there is an enum variant\n+    //~| HELP there is an enum variant\n+    Ok(())\n+}\n+\n+fn bar() -> Variant3 {\n+    //~^ ERROR cannot find type `Variant3` in this scope\n+    //~| HELP you can try using the variant's enum\n+    //~| NOTE not found in this scope\n+}\n+\n+fn qux() -> Some {\n+    //~^ ERROR expected type, found variant `Some`\n+    //~| NOTE not a type\n+    //~| HELP there is an enum variant\n+    //~| HELP there is an enum variant\n+    Some(1)\n+}\n+\n+fn main() {}\n+\n+mod x {\n+    enum Enum {\n+        Variant1,\n+        Variant2(),\n+        Variant3(usize),\n+        Variant4 {},\n+    }\n+}"}, {"sha": "391e1f2db5c021d293c5cb77578020abc4066e86", "filename": "src/test/ui/issue-35675.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f429ea54db7111b9c1570ce08c3851727d2e5/src%2Ftest%2Fui%2Fissue-35675.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f429ea54db7111b9c1570ce08c3851727d2e5/src%2Ftest%2Fui%2Fissue-35675.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35675.rs?ref=eb7f429ea54db7111b9c1570ce08c3851727d2e5", "patch": "@@ -33,27 +33,11 @@ fn should_return_fruit_too() -> Fruit::Apple {\n     //~| NOTE not found in this scope\n }\n \n-fn foo() -> Ok {\n-    //~^ ERROR expected type, found variant `Ok`\n-    //~| NOTE not a type\n-    //~| HELP there is an enum variant\n-    //~| HELP there is an enum variant\n-    Ok(())\n-}\n-\n fn bar() -> Variant3 {\n     //~^ ERROR cannot find type `Variant3` in this scope\n     //~| NOTE not found in this scope\n }\n \n-fn qux() -> Some {\n-    //~^ ERROR expected type, found variant `Some`\n-    //~| NOTE not a type\n-    //~| HELP there is an enum variant\n-    //~| HELP there is an enum variant\n-    Some(1)\n-}\n-\n fn main() {}\n \n mod x {"}, {"sha": "c2c10724646efdbb9de0a4702f6848e7c54c9b76", "filename": "src/test/ui/issue-35675.stderr", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eb7f429ea54db7111b9c1570ce08c3851727d2e5/src%2Ftest%2Fui%2Fissue-35675.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eb7f429ea54db7111b9c1570ce08c3851727d2e5/src%2Ftest%2Fui%2Fissue-35675.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-35675.stderr?ref=eb7f429ea54db7111b9c1570ce08c3851727d2e5", "patch": "@@ -38,32 +38,14 @@ help: possible candidate is found in another module, you can import it into scop\n 12 | use Fruit::Apple;\n    |\n \n-error[E0573]: expected type, found variant `Ok`\n-  --> $DIR/issue-35675.rs:36:13\n-   |\n-36 | fn foo() -> Ok {\n-   |             ^^ not a type\n-   |\n-   = help: there is an enum variant `std::prelude::v1::Ok`, try using `std::prelude::v1`?\n-   = help: there is an enum variant `std::result::Result::Ok`, try using `std::result::Result`?\n-\n error[E0412]: cannot find type `Variant3` in this scope\n-  --> $DIR/issue-35675.rs:44:13\n+  --> $DIR/issue-35675.rs:36:13\n    |\n-44 | fn bar() -> Variant3 {\n+36 | fn bar() -> Variant3 {\n    |             ^^^^^^^^\n    |             |\n    |             not found in this scope\n    |             help: you can try using the variant's enum: `x::Enum`\n \n-error[E0573]: expected type, found variant `Some`\n-  --> $DIR/issue-35675.rs:49:13\n-   |\n-49 | fn qux() -> Some {\n-   |             ^^^^ not a type\n-   |\n-   = help: there is an enum variant `std::option::Option::Some`, try using `std::option::Option`?\n-   = help: there is an enum variant `std::prelude::v1::Some`, try using `std::prelude::v1`?\n-\n-error: aborting due to 7 previous errors\n+error: aborting due to 5 previous errors\n "}]}