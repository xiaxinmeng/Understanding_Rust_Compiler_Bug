{"sha": "a98ddb6de1723a30777c68983c74bcb45ec52580", "node_id": "C_kwDOAAsO6NoAKGE5OGRkYjZkZTE3MjNhMzA3NzdjNjg5ODNjNzRiY2I0NWVjNTI1ODA", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-02-24T21:33:22Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-03-18T18:29:13Z"}, "message": "Enable inlining of diverging functions", "tree": {"sha": "4bd90af22f174b82ccd7257e917fd7de3bb93394", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bd90af22f174b82ccd7257e917fd7de3bb93394"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a98ddb6de1723a30777c68983c74bcb45ec52580", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a98ddb6de1723a30777c68983c74bcb45ec52580", "html_url": "https://github.com/rust-lang/rust/commit/a98ddb6de1723a30777c68983c74bcb45ec52580", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a98ddb6de1723a30777c68983c74bcb45ec52580/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a628bd99c39b69e88b24c622e3d246dd5573353", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a628bd99c39b69e88b24c622e3d246dd5573353", "html_url": "https://github.com/rust-lang/rust/commit/2a628bd99c39b69e88b24c622e3d246dd5573353"}], "stats": {"total": 564, "additions": 557, "deletions": 7}, "files": [{"sha": "27fad8a655ed51f5390d5bfc95abf9ff928b4fd9", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a98ddb6de1723a30777c68983c74bcb45ec52580/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98ddb6de1723a30777c68983c74bcb45ec52580/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=a98ddb6de1723a30777c68983c74bcb45ec52580", "patch": "@@ -424,13 +424,6 @@ impl<'tcx> Inliner<'tcx> {\n         debug!(\"    final inline threshold = {}\", threshold);\n \n         // FIXME: Give a bonus to functions with only a single caller\n-        let diverges = matches!(\n-            callee_body.basic_blocks[START_BLOCK].terminator().kind,\n-            TerminatorKind::Unreachable | TerminatorKind::Call { target: None, .. }\n-        );\n-        if diverges && !matches!(callee_attrs.inline, InlineAttr::Always) {\n-            return Err(\"callee diverges unconditionally\");\n-        }\n \n         let mut checker = CostChecker {\n             tcx: self.tcx,"}, {"sha": "e55fa745abce83d021311724f9b92e020953951d", "filename": "tests/mir-opt/inline/unchecked_shifts.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a98ddb6de1723a30777c68983c74bcb45ec52580/tests%2Fmir-opt%2Finline%2Funchecked_shifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98ddb6de1723a30777c68983c74bcb45ec52580/tests%2Fmir-opt%2Finline%2Funchecked_shifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.rs?ref=a98ddb6de1723a30777c68983c74bcb45ec52580", "patch": "@@ -0,0 +1,17 @@\n+#![crate_type = \"lib\"]\n+#![feature(unchecked_math)]\n+\n+// ignore-debug: the debug assertions prevent the inlining we are testing for\n+// compile-flags: -Zmir-opt-level=2 -Zinline-mir\n+\n+// EMIT_MIR unchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff\n+// EMIT_MIR unchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir\n+pub unsafe fn unchecked_shl_unsigned_smaller(a: u16, b: u32) -> u16 {\n+    a.unchecked_shl(b)\n+}\n+\n+// EMIT_MIR unchecked_shifts.unchecked_shr_signed_smaller.Inline.diff\n+// EMIT_MIR unchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir\n+pub unsafe fn unchecked_shr_signed_smaller(a: i16, b: u32) -> i16 {\n+    a.unchecked_shr(b)\n+}"}, {"sha": "5fd918b3aa535bfaa6ed56c263c4cf263f801dcb", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/a98ddb6de1723a30777c68983c74bcb45ec52580/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a98ddb6de1723a30777c68983c74bcb45ec52580/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.Inline.diff?ref=a98ddb6de1723a30777c68983c74bcb45ec52580", "patch": "@@ -0,0 +1,115 @@\n+- // MIR for `unchecked_shl_unsigned_smaller` before Inline\n++ // MIR for `unchecked_shl_unsigned_smaller` after Inline\n+  \n+  fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n+      debug a => _1;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:46: +0:47\n+      debug b => _2;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:54: +0:55\n+      let mut _0: u16;                     // return place in scope 0 at $DIR/unchecked_shifts.rs:+0:65: +0:68\n+      let mut _3: u16;                     // in scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:6\n+      let mut _4: u32;                     // in scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n++     scope 1 (inlined core::num::<impl u16>::unchecked_shl) { // at $DIR/unchecked_shifts.rs:10:7: 10:23\n++         debug self => _3;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         debug rhs => _4;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         let mut _5: u16;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         let mut _6: std::option::Option<u16>; // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         let mut _7: std::result::Result<u16, std::num::TryFromIntError>; // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         scope 2 {\n++             scope 3 (inlined Result::<u16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                 debug self => _7;        // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 let mut _8: isize;       // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 let _9: u16;             // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 scope 4 {\n++                     debug x => _9;       // in scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 }\n++                 scope 5 {\n++                     scope 6 {\n++                         debug x => const TryFromIntError(()); // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n++                     }\n++                 }\n++             }\n++             scope 7 (inlined #[track_caller] Option::<u16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                 debug self => _6;        // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 let mut _10: &std::option::Option<u16>; // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 let mut _11: isize;      // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 scope 8 {\n++                     debug val => _5;     // in scope 8 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 }\n++                 scope 9 {\n++                     scope 11 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                         scope 12 {\n++                             scope 13 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n++                             }\n++                         }\n++                     }\n++                 }\n++                 scope 10 (inlined Option::<u16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                     debug self => _10;   // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 }\n++             }\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:6\n+          _3 = _1;                         // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:6\n+          StorageLive(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n+          _4 = _2;                         // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n+-         _0 = core::num::<impl u16>::unchecked_shl(move _3, move _4) -> bb1; // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:23\n++         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         _7 = <u32 as TryInto<u16>>::try_into(_4) -> bb1; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                           // mir::Constant\n+-                                          // + span: $DIR/unchecked_shifts.rs:10:7: 10:20\n+-                                          // + literal: Const { ty: unsafe fn(u16, u32) -> u16 {core::num::<impl u16>::unchecked_shl}, val: Value(<ZST>) }\n++                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                                          // + literal: Const { ty: fn(u32) -> Result<u16, <u32 as TryInto<u16>>::Error> {<u32 as TryInto<u16>>::try_into}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n++         StorageLive(_9);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         _8 = discriminant(_7);           // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++         switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb2: {\n++         StorageDead(_9);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         StorageDead(_7);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         StorageLive(_10);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         _11 = discriminant(_6);          // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++         switchInt(move _11) -> [1: bb7, otherwise: bb5]; // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++     }\n++ \n++     bb3: {\n++         StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+          StorageDead(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n+          StorageDead(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n+          return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n++     }\n++ \n++     bb4: {\n++         _6 = Option::<u16>::None;        // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n++         goto -> bb2;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb5: {\n++         unreachable;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb6: {\n++         _9 = move ((_7 as Ok).0: u16);   // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++         _6 = Option::<u16>::Some(move _9); // scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n++         goto -> bb2;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb7: {\n++         _5 = move ((_6 as Some).0: u16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++         StorageDead(_10);                // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++         _0 = unchecked_shl::<u16>(_3, move _5) -> bb3; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n++                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }\n+      }\n+  }\n+  "}, {"sha": "c5501cef743e0ffbc7fa213f1f2df1d161ca63a3", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/a98ddb6de1723a30777c68983c74bcb45ec52580/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a98ddb6de1723a30777c68983c74bcb45ec52580/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shl_unsigned_smaller.PreCodegen.after.mir?ref=a98ddb6de1723a30777c68983c74bcb45ec52580", "patch": "@@ -0,0 +1,102 @@\n+// MIR for `unchecked_shl_unsigned_smaller` after PreCodegen\n+\n+fn unchecked_shl_unsigned_smaller(_1: u16, _2: u32) -> u16 {\n+    debug a => _1;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:46: +0:47\n+    debug b => _2;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:54: +0:55\n+    let mut _0: u16;                     // return place in scope 0 at $DIR/unchecked_shifts.rs:+0:65: +0:68\n+    scope 1 (inlined core::num::<impl u16>::unchecked_shl) { // at $DIR/unchecked_shifts.rs:10:7: 10:23\n+        debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let mut _3: u16;                 // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let mut _4: std::option::Option<u16>; // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        let mut _5: std::result::Result<u16, std::num::TryFromIntError>; // in scope 1 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        scope 2 {\n+            scope 3 (inlined Result::<u16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                debug self => _5;        // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let mut _6: isize;       // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let _7: u16;             // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+                scope 4 {\n+                    debug x => _7;       // in scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n+                }\n+                scope 5 {\n+                    scope 6 {\n+                        debug x => const TryFromIntError(()); // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+                    }\n+                }\n+            }\n+            scope 7 (inlined #[track_caller] Option::<u16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                debug self => _4;        // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+                let mut _8: &std::option::Option<u16>; // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+                let mut _9: isize;       // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+                scope 8 {\n+                    debug val => _3;     // in scope 8 at $SRC_DIR/core/src/option.rs:LL:COL\n+                }\n+                scope 9 {\n+                    scope 11 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                        scope 12 {\n+                            scope 13 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            }\n+                        }\n+                    }\n+                }\n+                scope 10 (inlined Option::<u16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                    debug self => _8;    // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n+                }\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _5 = <u32 as TryInto<u16>>::try_into(_2) -> bb1; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // + literal: Const { ty: fn(u32) -> Result<u16, <u32 as TryInto<u16>>::Error> {<u32 as TryInto<u16>>::try_into}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _6 = discriminant(_5);           // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb2: {\n+        StorageDead(_7);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageLive(_8);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _9 = discriminant(_4);           // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _9) -> [1: bb7, otherwise: bb5]; // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n+    }\n+\n+    bb4: {\n+        _4 = Option::<u16>::None;        // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb2;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb5: {\n+        unreachable;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb6: {\n+        _7 = move ((_5 as Ok).0: u16);   // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _4 = Option::<u16>::Some(move _7); // scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb2;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb7: {\n+        _3 = move ((_4 as Some).0: u16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_8);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+        _0 = unchecked_shl::<u16>(_1, move _3) -> bb3; // scope 2 at $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/uint_macros.rs:LL:COL\n+                                         // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(u16, u16) -> u16 {unchecked_shl::<u16>}, val: Value(<ZST>) }\n+    }\n+}"}, {"sha": "68d3b21fc2a4c1aa7840f4158771a91235f155bf", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/a98ddb6de1723a30777c68983c74bcb45ec52580/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a98ddb6de1723a30777c68983c74bcb45ec52580/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.Inline.diff?ref=a98ddb6de1723a30777c68983c74bcb45ec52580", "patch": "@@ -0,0 +1,115 @@\n+- // MIR for `unchecked_shr_signed_smaller` before Inline\n++ // MIR for `unchecked_shr_signed_smaller` after Inline\n+  \n+  fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n+      debug a => _1;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:44: +0:45\n+      debug b => _2;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:52: +0:53\n+      let mut _0: i16;                     // return place in scope 0 at $DIR/unchecked_shifts.rs:+0:63: +0:66\n+      let mut _3: i16;                     // in scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:6\n+      let mut _4: u32;                     // in scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n++     scope 1 (inlined core::num::<impl i16>::unchecked_shr) { // at $DIR/unchecked_shifts.rs:16:7: 16:23\n++         debug self => _3;                // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         debug rhs => _4;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         let mut _5: i16;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         let mut _6: std::option::Option<i16>; // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         let mut _7: std::result::Result<i16, std::num::TryFromIntError>; // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         scope 2 {\n++             scope 3 (inlined Result::<i16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                 debug self => _7;        // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 let mut _8: isize;       // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 let _9: i16;             // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 scope 4 {\n++                     debug x => _9;       // in scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n++                 }\n++                 scope 5 {\n++                     scope 6 {\n++                         debug x => const TryFromIntError(()); // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n++                     }\n++                 }\n++             }\n++             scope 7 (inlined #[track_caller] Option::<i16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                 debug self => _6;        // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 let mut _10: &std::option::Option<i16>; // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 let mut _11: isize;      // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 scope 8 {\n++                     debug val => _5;     // in scope 8 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 }\n++                 scope 9 {\n++                     scope 11 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                         scope 12 {\n++                             scope 13 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n++                             }\n++                         }\n++                     }\n++                 }\n++                 scope 10 (inlined Option::<i16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                     debug self => _10;   // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n++                 }\n++             }\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:6\n+          _3 = _1;                         // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:6\n+          StorageLive(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n+          _4 = _2;                         // scope 0 at $DIR/unchecked_shifts.rs:+1:21: +1:22\n+-         _0 = core::num::<impl i16>::unchecked_shr(move _3, move _4) -> bb1; // scope 0 at $DIR/unchecked_shifts.rs:+1:5: +1:23\n++         StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         StorageLive(_6);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         _7 = <u32 as TryInto<i16>>::try_into(_4) -> bb1; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                                           // mir::Constant\n+-                                          // + span: $DIR/unchecked_shifts.rs:16:7: 16:20\n+-                                          // + literal: Const { ty: unsafe fn(i16, u32) -> i16 {core::num::<impl i16>::unchecked_shr}, val: Value(<ZST>) }\n++                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                                          // + literal: Const { ty: fn(u32) -> Result<i16, <u32 as TryInto<i16>>::Error> {<u32 as TryInto<i16>>::try_into}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n++         StorageLive(_9);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         _8 = discriminant(_7);           // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++         switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb2: {\n++         StorageDead(_9);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         StorageDead(_7);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         StorageLive(_10);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         _11 = discriminant(_6);          // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++         switchInt(move _11) -> [1: bb7, otherwise: bb5]; // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++     }\n++ \n++     bb3: {\n++         StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+          StorageDead(_4);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n+          StorageDead(_3);                 // scope 0 at $DIR/unchecked_shifts.rs:+1:22: +1:23\n+          return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n++     }\n++ \n++     bb4: {\n++         _6 = Option::<i16>::None;        // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n++         goto -> bb2;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb5: {\n++         unreachable;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb6: {\n++         _9 = move ((_7 as Ok).0: i16);   // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++         _6 = Option::<i16>::Some(move _9); // scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n++         goto -> bb2;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n++     }\n++ \n++     bb7: {\n++         _5 = move ((_6 as Some).0: i16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n++         StorageDead(_10);                // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         StorageDead(_6);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++         _0 = unchecked_shr::<i16>(_3, move _5) -> bb3; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                                          // mir::Constant\n++                                          // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n++                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }\n+      }\n+  }\n+  "}, {"sha": "ed3a89ceace1c1208d9118252e28b00b81346dc7", "filename": "tests/mir-opt/inline/unchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/a98ddb6de1723a30777c68983c74bcb45ec52580/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a98ddb6de1723a30777c68983c74bcb45ec52580/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funchecked_shifts.unchecked_shr_signed_smaller.PreCodegen.after.mir?ref=a98ddb6de1723a30777c68983c74bcb45ec52580", "patch": "@@ -0,0 +1,102 @@\n+// MIR for `unchecked_shr_signed_smaller` after PreCodegen\n+\n+fn unchecked_shr_signed_smaller(_1: i16, _2: u32) -> i16 {\n+    debug a => _1;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:44: +0:45\n+    debug b => _2;                       // in scope 0 at $DIR/unchecked_shifts.rs:+0:52: +0:53\n+    let mut _0: i16;                     // return place in scope 0 at $DIR/unchecked_shifts.rs:+0:63: +0:66\n+    scope 1 (inlined core::num::<impl i16>::unchecked_shr) { // at $DIR/unchecked_shifts.rs:16:7: 16:23\n+        debug self => _1;                // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        debug rhs => _2;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        let mut _3: i16;                 // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        let mut _4: std::option::Option<i16>; // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        let mut _5: std::result::Result<i16, std::num::TryFromIntError>; // in scope 1 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        scope 2 {\n+            scope 3 (inlined Result::<i16, TryFromIntError>::ok) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                debug self => _5;        // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let mut _6: isize;       // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+                let _7: i16;             // in scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+                scope 4 {\n+                    debug x => _7;       // in scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n+                }\n+                scope 5 {\n+                    scope 6 {\n+                        debug x => const TryFromIntError(()); // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+                    }\n+                }\n+            }\n+            scope 7 (inlined #[track_caller] Option::<i16>::unwrap_unchecked) { // at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                debug self => _4;        // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+                let mut _8: &std::option::Option<i16>; // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+                let mut _9: isize;       // in scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+                scope 8 {\n+                    debug val => _3;     // in scope 8 at $SRC_DIR/core/src/option.rs:LL:COL\n+                }\n+                scope 9 {\n+                    scope 11 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                        scope 12 {\n+                            scope 13 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                            }\n+                        }\n+                    }\n+                }\n+                scope 10 (inlined Option::<i16>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                    debug self => _8;    // in scope 10 at $SRC_DIR/core/src/option.rs:LL:COL\n+                }\n+            }\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_3);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        _5 = <u32 as TryInto<i16>>::try_into(_2) -> bb1; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                                         // + literal: Const { ty: fn(u32) -> Result<i16, <u32 as TryInto<i16>>::Error> {<u32 as TryInto<i16>>::try_into}, val: Value(<ZST>) }\n+    }\n+\n+    bb1: {\n+        StorageLive(_7);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        _6 = discriminant(_5);           // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb2: {\n+        StorageDead(_7);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        StorageLive(_8);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        _9 = discriminant(_4);           // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _9) -> [1: bb7, otherwise: bb5]; // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+    }\n+\n+    bb3: {\n+        StorageDead(_3);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        return;                          // scope 0 at $DIR/unchecked_shifts.rs:+2:2: +2:2\n+    }\n+\n+    bb4: {\n+        _4 = Option::<i16>::None;        // scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb2;                     // scope 5 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb5: {\n+        unreachable;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb6: {\n+        _7 = move ((_5 as Ok).0: i16);   // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+        _4 = Option::<i16>::Some(move _7); // scope 4 at $SRC_DIR/core/src/result.rs:LL:COL\n+        goto -> bb2;                     // scope 3 at $SRC_DIR/core/src/result.rs:LL:COL\n+    }\n+\n+    bb7: {\n+        _3 = move ((_4 as Some).0: i16); // scope 7 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_8);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+        _0 = unchecked_shr::<i16>(_1, move _3) -> bb3; // scope 2 at $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                                         // mir::Constant\n+                                         // + span: $SRC_DIR/core/src/num/int_macros.rs:LL:COL\n+                                         // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i16, i16) -> i16 {unchecked_shr::<i16>}, val: Value(<ZST>) }\n+    }\n+}"}, {"sha": "c3581093f668870e76bf7f2212bf252e93de1370", "filename": "tests/mir-opt/inline/unwrap_unchecked.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a98ddb6de1723a30777c68983c74bcb45ec52580/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a98ddb6de1723a30777c68983c74bcb45ec52580/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.rs?ref=a98ddb6de1723a30777c68983c74bcb45ec52580", "patch": "@@ -0,0 +1,10 @@\n+#![crate_type = \"lib\"]\n+\n+// ignore-debug: the debug assertions prevent the inlining we are testing for\n+// compile-flags: -Zmir-opt-level=2 -Zinline-mir\n+\n+// EMIT_MIR unwrap_unchecked.unwrap_unchecked.Inline.diff\n+// EMIT_MIR unwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir\n+pub unsafe fn unwrap_unchecked<T>(slf: Option<T>) -> T {\n+    slf.unwrap_unchecked()\n+}"}, {"sha": "7f73306a825525be3b740b835bf1cd16ea8a7d4a", "filename": "tests/mir-opt/inline/unwrap_unchecked.unwrap_unchecked.Inline.diff", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a98ddb6de1723a30777c68983c74bcb45ec52580/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/a98ddb6de1723a30777c68983c74bcb45ec52580/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.Inline.diff?ref=a98ddb6de1723a30777c68983c74bcb45ec52580", "patch": "@@ -0,0 +1,55 @@\n+- // MIR for `unwrap_unchecked` before Inline\n++ // MIR for `unwrap_unchecked` after Inline\n+  \n+  fn unwrap_unchecked(_1: Option<T>) -> T {\n+      debug slf => _1;                     // in scope 0 at $DIR/unwrap_unchecked.rs:+0:35: +0:38\n+      let mut _0: T;                       // return place in scope 0 at $DIR/unwrap_unchecked.rs:+0:54: +0:55\n+      let mut _2: std::option::Option<T>;  // in scope 0 at $DIR/unwrap_unchecked.rs:+1:5: +1:8\n++     scope 1 (inlined #[track_caller] Option::<T>::unwrap_unchecked) { // at $DIR/unwrap_unchecked.rs:9:9: 9:27\n++         debug self => _2;                // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n++         let mut _3: &std::option::Option<T>; // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n++         let mut _4: isize;               // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n++         scope 2 {\n++             debug val => _0;             // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n++         }\n++         scope 3 {\n++             scope 5 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++                 scope 6 {\n++                     scope 7 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n++                     }\n++                 }\n++             }\n++         }\n++         scope 4 (inlined Option::<T>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n++             debug self => _3;            // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n++         }\n++     }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:5: +1:8\n+          _2 = move _1;                    // scope 0 at $DIR/unwrap_unchecked.rs:+1:5: +1:8\n+-         _0 = Option::<T>::unwrap_unchecked(move _2) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/unwrap_unchecked.rs:+1:5: +1:27\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/unwrap_unchecked.rs:9:9: 9:25\n+-                                          // + literal: Const { ty: unsafe fn(Option<T>) -> T {Option::<T>::unwrap_unchecked}, val: Value(<ZST>) }\n++         StorageLive(_3);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:9: +1:27\n++         _4 = discriminant(_2);           // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n++         switchInt(move _4) -> [0: bb1, 1: bb2, otherwise: bb1]; // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+      }\n+  \n+      bb1: {\n+-         StorageDead(_2);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:26: +1:27\n+-         return;                          // scope 0 at $DIR/unwrap_unchecked.rs:+2:2: +2:2\n++         unreachable;                     // scope 6 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+      }\n+  \n+-     bb2 (cleanup): {\n+-         resume;                          // scope 0 at $DIR/unwrap_unchecked.rs:+0:1: +2:2\n++     bb2: {\n++         _0 = move ((_2 as Some).0: T);   // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n++         StorageDead(_3);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:9: +1:27\n++         StorageDead(_2);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:26: +1:27\n++         return;                          // scope 0 at $DIR/unwrap_unchecked.rs:+2:2: +2:2\n+      }\n+  }\n+  "}, {"sha": "33cd3785336f28c791335b87e1fe01e836ffd9b0", "filename": "tests/mir-opt/inline/unwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a98ddb6de1723a30777c68983c74bcb45ec52580/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/a98ddb6de1723a30777c68983c74bcb45ec52580/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finline%2Funwrap_unchecked.unwrap_unchecked.PreCodegen.after.mir?ref=a98ddb6de1723a30777c68983c74bcb45ec52580", "patch": "@@ -0,0 +1,41 @@\n+// MIR for `unwrap_unchecked` after PreCodegen\n+\n+fn unwrap_unchecked(_1: Option<T>) -> T {\n+    debug slf => _1;                     // in scope 0 at $DIR/unwrap_unchecked.rs:+0:35: +0:38\n+    let mut _0: T;                       // return place in scope 0 at $DIR/unwrap_unchecked.rs:+0:54: +0:55\n+    scope 1 (inlined #[track_caller] Option::<T>::unwrap_unchecked) { // at $DIR/unwrap_unchecked.rs:9:9: 9:27\n+        debug self => _1;                // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+        let mut _2: &std::option::Option<T>; // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+        let mut _3: isize;               // in scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+        scope 2 {\n+            debug val => _0;             // in scope 2 at $SRC_DIR/core/src/option.rs:LL:COL\n+        }\n+        scope 3 {\n+            scope 5 (inlined unreachable_unchecked) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+                scope 6 {\n+                    scope 7 (inlined unreachable_unchecked::runtime) { // at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+                    }\n+                }\n+            }\n+        }\n+        scope 4 (inlined Option::<T>::is_some) { // at $SRC_DIR/core/src/option.rs:LL:COL\n+            debug self => _2;            // in scope 4 at $SRC_DIR/core/src/option.rs:LL:COL\n+        }\n+    }\n+\n+    bb0: {\n+        StorageLive(_2);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:9: +1:27\n+        _3 = discriminant(_1);           // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+        switchInt(move _3) -> [1: bb2, otherwise: bb1]; // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+    }\n+\n+    bb1: {\n+        unreachable;                     // scope 6 at $SRC_DIR/core/src/intrinsics.rs:LL:COL\n+    }\n+\n+    bb2: {\n+        _0 = move ((_1 as Some).0: T);   // scope 1 at $SRC_DIR/core/src/option.rs:LL:COL\n+        StorageDead(_2);                 // scope 0 at $DIR/unwrap_unchecked.rs:+1:9: +1:27\n+        return;                          // scope 0 at $DIR/unwrap_unchecked.rs:+2:2: +2:2\n+    }\n+}"}]}