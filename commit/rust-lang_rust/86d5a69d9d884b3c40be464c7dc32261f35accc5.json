{"sha": "86d5a69d9d884b3c40be464c7dc32261f35accc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2ZDVhNjlkOWQ4ODRiM2M0MGJlNDY0YzdkYzMyMjYxZjM1YWNjYzU=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-25T22:26:37Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-27T09:44:55Z"}, "message": "Use Vec instead of FxHashMap", "tree": {"sha": "ef199a4b6a27c65f3d57d1f49bd5191fb48eb124", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef199a4b6a27c65f3d57d1f49bd5191fb48eb124"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86d5a69d9d884b3c40be464c7dc32261f35accc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86d5a69d9d884b3c40be464c7dc32261f35accc5", "html_url": "https://github.com/rust-lang/rust/commit/86d5a69d9d884b3c40be464c7dc32261f35accc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86d5a69d9d884b3c40be464c7dc32261f35accc5/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "688cbad9b89fb79d651f62480bb65fdb5d2c6e02", "url": "https://api.github.com/repos/rust-lang/rust/commits/688cbad9b89fb79d651f62480bb65fdb5d2c6e02", "html_url": "https://github.com/rust-lang/rust/commit/688cbad9b89fb79d651f62480bb65fdb5d2c6e02"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "7788ae2b88f21d3cc8310301f8b2690ae7ca3a44", "filename": "src/librustc/infer/fudge.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/86d5a69d9d884b3c40be464c7dc32261f35accc5/src%2Flibrustc%2Finfer%2Ffudge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d5a69d9d884b3c40be464c7dc32261f35accc5/src%2Flibrustc%2Finfer%2Ffudge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ffudge.rs?ref=86d5a69d9d884b3c40be464c7dc32261f35accc5", "patch": "@@ -6,7 +6,6 @@ use super::RegionVariableOrigin;\n use super::type_variable::TypeVariableOrigin;\n \n use std::ops::Range;\n-use rustc_data_structures::fx::FxHashMap;\n \n impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     /// This rather funky routine is used while processing expected\n@@ -102,10 +101,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         // Micro-optimization: if no variables have been created, then\n         // `value` can't refer to any of them. =) So we can just return it.\n-        if fudger.type_vars.is_empty() &&\n+        if fudger.type_vars.0.is_empty() &&\n             fudger.int_vars.is_empty() &&\n             fudger.float_vars.is_empty() &&\n-            fudger.region_vars.is_empty() {\n+            fudger.region_vars.0.is_empty() {\n             Ok(value)\n         } else {\n             Ok(value.fold_with(&mut fudger))\n@@ -115,10 +114,10 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n pub struct InferenceFudger<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     infcx: &'a InferCtxt<'a, 'gcx, 'tcx>,\n-    type_vars: FxHashMap<TyVid, TypeVariableOrigin>,\n+    type_vars: (Range<TyVid>, Vec<TypeVariableOrigin>),\n     int_vars: Range<IntVid>,\n     float_vars: Range<FloatVid>,\n-    region_vars: FxHashMap<RegionVid, RegionVariableOrigin>,\n+    region_vars: (Range<RegionVid>, Vec<RegionVariableOrigin>),\n }\n \n impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for InferenceFudger<'a, 'gcx, 'tcx> {\n@@ -129,9 +128,11 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for InferenceFudger<'a, 'gcx, 'tcx>\n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         match ty.sty {\n             ty::Infer(ty::InferTy::TyVar(vid)) => {\n-                if let Some(&origin) = self.type_vars.get(&vid) {\n+                if self.type_vars.0.contains(&vid) {\n                     // This variable was created during the fudging.\n                     // Recreate it with a fresh variable here.\n+                    let idx = (vid.index - self.type_vars.0.start.index) as usize;\n+                    let origin = self.type_vars.1[idx];\n                     self.infcx.next_ty_var(origin)\n                 } else {\n                     // This variable was created before the\n@@ -165,7 +166,9 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for InferenceFudger<'a, 'gcx, 'tcx>\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         if let ty::ReVar(vid) = r {\n-            if let Some(&origin) = self.region_vars.get(&vid) {\n+            if self.region_vars.0.contains(&vid) {\n+                let idx = (vid.index() - self.region_vars.0.start.index()) as usize;\n+                let origin = self.region_vars.1[idx];\n                 return self.infcx.next_region_var(origin);\n             }\n         }"}, {"sha": "6a20d95cc3ad349bb687d73f4a57ebf316fc6507", "filename": "src/librustc/infer/region_constraints/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86d5a69d9d884b3c40be464c7dc32261f35accc5/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d5a69d9d884b3c40be464c7dc32261f35accc5/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=86d5a69d9d884b3c40be464c7dc32261f35accc5", "patch": "@@ -16,6 +16,7 @@ use crate::ty::{Region, RegionVid};\n \n use std::collections::BTreeMap;\n use std::{cmp, fmt, mem, u32};\n+use std::ops::Range;\n \n mod leak_check;\n \n@@ -843,13 +844,11 @@ impl<'tcx> RegionConstraintCollector<'tcx> {\n     pub fn vars_since_snapshot(\n         &self,\n         mark: &RegionSnapshot,\n-    ) -> FxHashMap<RegionVid, RegionVariableOrigin> {\n+    ) -> (Range<RegionVid>, Vec<RegionVariableOrigin>) {\n         let range = self.unification_table.vars_since_snapshot(&mark.region_snapshot);\n-        (range.start.index()..range.end.index()).map(|index| {\n-            let vid = ty::RegionVid::from(index);\n-            let origin = self.var_infos[vid].origin.clone();\n-            (vid, origin)\n-        }).collect()\n+        (range.clone(), (range.start.index()..range.end.index()).map(|index| {\n+            self.var_infos[ty::RegionVid::from(index)].origin.clone()\n+        }).collect())\n     }\n \n     /// See [`RegionInference::region_constraints_added_in_snapshot`]."}, {"sha": "8a719ff2bf31c2f4b306b565888f278b53c5f6f7", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/86d5a69d9d884b3c40be464c7dc32261f35accc5/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86d5a69d9d884b3c40be464c7dc32261f35accc5/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=86d5a69d9d884b3c40be464c7dc32261f35accc5", "patch": "@@ -5,7 +5,7 @@ use crate::ty::{self, Ty, TyVid};\n use std::cmp;\n use std::marker::PhantomData;\n use std::u32;\n-use rustc_data_structures::fx::FxHashMap;\n+use std::ops::Range;\n use rustc_data_structures::snapshot_vec as sv;\n use rustc_data_structures::unify as ut;\n \n@@ -294,12 +294,11 @@ impl<'tcx> TypeVariableTable<'tcx> {\n     pub fn vars_since_snapshot(\n         &mut self,\n         s: &Snapshot<'tcx>,\n-    ) -> FxHashMap<TyVid, TypeVariableOrigin> {\n+    ) -> (Range<TyVid>, Vec<TypeVariableOrigin>) {\n         let range = self.eq_relations.vars_since_snapshot(&s.eq_snapshot);\n-        (range.start.vid.index..range.end.vid.index).map(|index| {\n-            let origin = self.values.get(index as usize).origin.clone();\n-            (TyVid { index }, origin)\n-        }).collect()\n+        (range.start.vid..range.end.vid, (range.start.vid.index..range.end.vid.index).map(|index| {\n+            self.values.get(index as usize).origin.clone()\n+        }).collect())\n     }\n \n     /// Finds the set of type variables that existed *before* `s`"}]}