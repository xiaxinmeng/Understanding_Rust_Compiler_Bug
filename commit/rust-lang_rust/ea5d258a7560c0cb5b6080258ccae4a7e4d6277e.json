{"sha": "ea5d258a7560c0cb5b6080258ccae4a7e4d6277e", "node_id": "C_kwDOAAsO6NoAKGVhNWQyNThhNzU2MGMwY2I1YjYwODAyNThjY2FlNGE3ZTRkNjI3N2U", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-14T12:11:21Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-17T08:54:24Z"}, "message": "ast_passes: use derive more\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "17860ba1b45f8ac5036f9995a62c3a77391897d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17860ba1b45f8ac5036f9995a62c3a77391897d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea5d258a7560c0cb5b6080258ccae4a7e4d6277e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea5d258a7560c0cb5b6080258ccae4a7e4d6277e", "html_url": "https://github.com/rust-lang/rust/commit/ea5d258a7560c0cb5b6080258ccae4a7e4d6277e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea5d258a7560c0cb5b6080258ccae4a7e4d6277e/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2a4b587a68e6fef52b478b516d18be4621c4b64b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a4b587a68e6fef52b478b516d18be4621c4b64b", "html_url": "https://github.com/rust-lang/rust/commit/2a4b587a68e6fef52b478b516d18be4621c4b64b"}], "stats": {"total": 26, "additions": 6, "deletions": 20}, "files": [{"sha": "1dc8b85d7e6e770e7f52d8fcfb865b6e6a2bfd88", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ea5d258a7560c0cb5b6080258ccae4a7e4d6277e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5d258a7560c0cb5b6080258ccae4a7e4d6277e/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=ea5d258a7560c0cb5b6080258ccae4a7e4d6277e", "patch": "@@ -14,6 +14,7 @@ use rustc_ast::*;\n use rustc_ast_pretty::pprust::{self, State};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{error_code, fluent, pluralize, struct_span_err, Applicability};\n+use rustc_macros::Subdiagnostic;\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::{\n     DEPRECATED_WHERE_CLAUSE_LOCATION, MISSING_ABI, PATTERNS_IN_FNS_WITHOUT_BODY,\n@@ -1782,15 +1783,17 @@ pub fn check_crate(session: &Session, krate: &Crate, lints: &mut LintBuffer) ->\n }\n \n /// Used to forbid `let` expressions in certain syntactic locations.\n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Subdiagnostic)]\n pub(crate) enum ForbiddenLetReason {\n     /// `let` is not valid and the source environment is not important\n     GenericForbidden,\n     /// A let chain with the `||` operator\n-    NotSupportedOr(Span),\n+    #[note(ast_passes::not_supported_or)]\n+    NotSupportedOr(#[primary_span] Span),\n     /// A let chain with invalid parentheses\n     ///\n     /// For example, `let 1 = 1 && (expr && expr)` is allowed\n     /// but `(let 1 = 1 && (let 1 = 1 && (let 1 = 1))) && let a = 1` is not\n-    NotSupportedParentheses(Span),\n+    #[note(ast_passes::not_supported_parentheses)]\n+    NotSupportedParentheses(#[primary_span] Span),\n }"}, {"sha": "8319352bd24bdd1491653a4e51d5dfa475ca412e", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ea5d258a7560c0cb5b6080258ccae4a7e4d6277e/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5d258a7560c0cb5b6080258ccae4a7e4d6277e/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=ea5d258a7560c0cb5b6080258ccae4a7e4d6277e", "patch": "@@ -16,23 +16,6 @@ pub struct ForbiddenLet {\n     pub(crate) reason: ForbiddenLetReason,\n }\n \n-impl AddToDiagnostic for ForbiddenLetReason {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        match self {\n-            Self::GenericForbidden => {}\n-            Self::NotSupportedOr(span) => {\n-                diag.span_note(span, fluent::ast_passes::not_supported_or);\n-            }\n-            Self::NotSupportedParentheses(span) => {\n-                diag.span_note(span, fluent::ast_passes::not_supported_parentheses);\n-            }\n-        }\n-    }\n-}\n-\n #[derive(Diagnostic)]\n #[diag(ast_passes::forbidden_let_stable)]\n #[note]"}]}