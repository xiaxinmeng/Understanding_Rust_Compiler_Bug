{"sha": "7acfb99adc013d4b77c611cfc51bade551205f5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhY2ZiOTlhZGMwMTNkNGI3N2M2MTFjZmM1MWJhZGU1NTEyMDVmNWE=", "commit": {"author": {"name": "tyler", "email": "tyler@brainiumstudios.com", "date": "2019-05-01T01:24:38Z"}, "committer": {"name": "tyler", "email": "tyler@brainiumstudios.com", "date": "2019-05-15T14:30:33Z"}, "message": "Revert \"ensure fast thread local lookups occur once per access on macos\"\n\nThis reverts commit d252f3b77f3b7d4cd59620588f9d026633c05816.", "tree": {"sha": "59461cea814349005ab153ae4ebb218f0b9441eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59461cea814349005ab153ae4ebb218f0b9441eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7acfb99adc013d4b77c611cfc51bade551205f5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7acfb99adc013d4b77c611cfc51bade551205f5a", "html_url": "https://github.com/rust-lang/rust/commit/7acfb99adc013d4b77c611cfc51bade551205f5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7acfb99adc013d4b77c611cfc51bade551205f5a/comments", "author": {"login": "mtak-", "id": 6643140, "node_id": "MDQ6VXNlcjY2NDMxNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6643140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mtak-", "html_url": "https://github.com/mtak-", "followers_url": "https://api.github.com/users/mtak-/followers", "following_url": "https://api.github.com/users/mtak-/following{/other_user}", "gists_url": "https://api.github.com/users/mtak-/gists{/gist_id}", "starred_url": "https://api.github.com/users/mtak-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mtak-/subscriptions", "organizations_url": "https://api.github.com/users/mtak-/orgs", "repos_url": "https://api.github.com/users/mtak-/repos", "events_url": "https://api.github.com/users/mtak-/events{/privacy}", "received_events_url": "https://api.github.com/users/mtak-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mtak-", "id": 6643140, "node_id": "MDQ6VXNlcjY2NDMxNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6643140?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mtak-", "html_url": "https://github.com/mtak-", "followers_url": "https://api.github.com/users/mtak-/followers", "following_url": "https://api.github.com/users/mtak-/following{/other_user}", "gists_url": "https://api.github.com/users/mtak-/gists{/gist_id}", "starred_url": "https://api.github.com/users/mtak-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mtak-/subscriptions", "organizations_url": "https://api.github.com/users/mtak-/orgs", "repos_url": "https://api.github.com/users/mtak-/repos", "events_url": "https://api.github.com/users/mtak-/events{/privacy}", "received_events_url": "https://api.github.com/users/mtak-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "430a091cd80c0e4b6bf44f6a19463a832e566f97", "url": "https://api.github.com/repos/rust-lang/rust/commits/430a091cd80c0e4b6bf44f6a19463a832e566f97", "html_url": "https://github.com/rust-lang/rust/commit/430a091cd80c0e4b6bf44f6a19463a832e566f97"}], "stats": {"total": 38, "additions": 6, "deletions": 32}, "files": [{"sha": "67b92d490b2345d7b95c500dc9c533cc1a84b441", "filename": "src/libstd/sys/redox/fast_thread_local.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7acfb99adc013d4b77c611cfc51bade551205f5a/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acfb99adc013d4b77c611cfc51bade551205f5a/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs?ref=7acfb99adc013d4b77c611cfc51bade551205f5a", "patch": "@@ -1,8 +1,4 @@\n #![cfg(target_thread_local)]\n #![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n \n-pub use crate::sys_common::thread_local::register_dtor_fallback as register_dtor;\n-\n-pub unsafe fn lookup_once<T>(ptr: *const &T) -> &T {\n-    *ptr\n-}\n+pub use crate::sys_common::thread_local::register_dtor_fallback as register_dtor;\n\\ No newline at end of file"}, {"sha": "c34c2e6e786ec5bf38b09baa16524ff1a9636dc0", "filename": "src/libstd/sys/unix/fast_thread_local.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7acfb99adc013d4b77c611cfc51bade551205f5a/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acfb99adc013d4b77c611cfc51bade551205f5a/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs?ref=7acfb99adc013d4b77c611cfc51bade551205f5a", "patch": "@@ -82,20 +82,3 @@ pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n         }\n     }\n }\n-\n-#[cfg(not(target_os = \"macos\"))]\n-pub unsafe fn lookup_once<T>(ptr: *const &T) -> &T {\n-    *ptr\n-}\n-\n-#[cfg(target_os = \"macos\")]\n-pub unsafe fn lookup_once<T>(ptr: *const &T) -> &T {\n-    // On macos, thread_local lookups can result in terrible code due to\n-    // aggressive rerunning of the macos equivalent of `__tls_get_addr` - four\n-    // lookups per actual reference in user code.\n-    //\n-    // Using a read_volatile on a value holding fast Key's address tricks the\n-    // optimizer into only calling the macos get_addr equivalent once per time\n-    // requested by the user.\n-    crate::ptr::read_volatile(ptr)\n-}"}, {"sha": "31d0bd1e72ed2056806846c362a4e98b1d3a1307", "filename": "src/libstd/sys/windows/fast_thread_local.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7acfb99adc013d4b77c611cfc51bade551205f5a/src%2Flibstd%2Fsys%2Fwindows%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acfb99adc013d4b77c611cfc51bade551205f5a/src%2Flibstd%2Fsys%2Fwindows%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffast_thread_local.rs?ref=7acfb99adc013d4b77c611cfc51bade551205f5a", "patch": "@@ -2,7 +2,3 @@\n #![cfg(target_thread_local)]\n \n pub use crate::sys_common::thread_local::register_dtor_fallback as register_dtor;\n-\n-pub unsafe fn lookup_once<T>(ptr: *const &T) -> &T {\n-    *ptr\n-}"}, {"sha": "0d5e1f2af38a69035951b8dfbe778aa2b4632586", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7acfb99adc013d4b77c611cfc51bade551205f5a/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acfb99adc013d4b77c611cfc51bade551205f5a/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=7acfb99adc013d4b77c611cfc51bade551205f5a", "patch": "@@ -344,7 +344,7 @@ pub mod fast {\n     use crate::fmt;\n     use crate::mem;\n     use crate::ptr;\n-    use crate::sys::fast_thread_local::{lookup_once, register_dtor};\n+    use crate::sys::fast_thread_local::register_dtor;\n \n     pub struct Key<T> {\n         inner: UnsafeCell<Option<T>>,\n@@ -371,12 +371,11 @@ pub mod fast {\n         }\n \n         pub unsafe fn get(&self) -> Option<&'static UnsafeCell<Option<T>>> {\n-            let this = lookup_once(&self);\n-            if mem::needs_drop::<T>() && this.dtor_running.get() {\n+            if mem::needs_drop::<T>() && self.dtor_running.get() {\n                 return None\n             }\n-            this.register_dtor();\n-            Some(&*(&this.inner as *const _))\n+            self.register_dtor();\n+            Some(&*(&self.inner as *const _))\n         }\n \n         unsafe fn register_dtor(&self) {\n@@ -396,7 +395,7 @@ pub mod fast {\n         // destructor as running for this thread so calls to `get` will return\n         // `None`.\n         (*ptr).dtor_running.set(true);\n-\n+        \n         ptr::drop_in_place((*ptr).inner.get());\n     }\n }"}]}