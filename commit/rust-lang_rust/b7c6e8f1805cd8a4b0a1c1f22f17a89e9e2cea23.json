{"sha": "b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YzZlOGYxODA1Y2Q4YTRiMGExYzFmMjJmMTdhODllOWUyY2VhMjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-25T17:22:12Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-25T17:22:12Z"}, "message": "Auto merge of #51728 - bradjc:llvm-tools2, r=kennytm\n\nbuild: add llvm-tools to manifest\n\nThis commit expands on a previous commit to build llvm-tools as a rustup component. It causes the llvm-tools component to be built if the extended step is active. It also adds llvm-tools to the build manifest so rustup can find it.\n\nI tested this as far as I could, but had to hack `build-manifest/src/main.rs` a bit as it is not supported on MacOS. The main change I am not sure about is this line:\n\n```rust\nself.package(\"llvm-tools\", &mut manifest.pkg, TARGETS);\n```\n\nThere are numerous calls to `self.package()`, and I'm not sure if `TARGETS`, `HOSTS`, or `[\"*\"]` is appropriate for llvm-tools.\n\nOtherwise I mostly copied the example set by `rustfmt-preview`.", "tree": {"sha": "900d5440d16c5ad7a996e07958fcefcf0113dc14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/900d5440d16c5ad7a996e07958fcefcf0113dc14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23", "html_url": "https://github.com/rust-lang/rust/commit/b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4", "html_url": "https://github.com/rust-lang/rust/commit/8acec1f9d0b40dde142e6c26d7358b9ab232d2b4"}, {"sha": "f10da5fdb9f08a70d2917aadf51c1e7952b9027b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f10da5fdb9f08a70d2917aadf51c1e7952b9027b", "html_url": "https://github.com/rust-lang/rust/commit/f10da5fdb9f08a70d2917aadf51c1e7952b9027b"}], "stats": {"total": 69, "additions": 39, "deletions": 30}, "files": [{"sha": "4fd6c81e5978682ec19ea71b65387362bfe3cabd", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23", "patch": "@@ -44,7 +44,7 @@ pub fn pkgname(builder: &Builder, component: &str) -> String {\n     } else if component == \"rustfmt\" {\n         format!(\"{}-{}\", component, builder.rustfmt_package_vers())\n     } else if component == \"llvm-tools\" {\n-        format!(\"{}-{}\", component, builder.llvm_tools_vers())\n+        format!(\"{}-{}\", component, builder.llvm_tools_package_vers())\n     } else {\n         assert!(component.starts_with(\"rust\"));\n         format!(\"{}-{}\", component, builder.rust_package_vers())\n@@ -1303,6 +1303,7 @@ impl Step for Extended {\n         let cargo_installer = builder.ensure(Cargo { stage, target });\n         let rustfmt_installer = builder.ensure(Rustfmt { stage, target });\n         let rls_installer = builder.ensure(Rls { stage, target });\n+        let llvm_tools_installer = builder.ensure(LlvmTools { stage, target });\n         let mingw_installer = builder.ensure(Mingw { host: target });\n         let analysis_installer = builder.ensure(Analysis {\n             compiler: builder.compiler(stage, self.host),\n@@ -1340,6 +1341,7 @@ impl Step for Extended {\n         tarballs.push(cargo_installer);\n         tarballs.extend(rls_installer.clone());\n         tarballs.extend(rustfmt_installer.clone());\n+        tarballs.extend(llvm_tools_installer.clone());\n         tarballs.push(analysis_installer);\n         tarballs.push(std_installer);\n         if builder.config.docs {\n@@ -1740,7 +1742,7 @@ impl Step for HashSign {\n         cmd.arg(builder.package_vers(&builder.release_num(\"cargo\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"rls\")));\n         cmd.arg(builder.package_vers(&builder.release_num(\"rustfmt\")));\n-        cmd.arg(builder.llvm_tools_vers());\n+        cmd.arg(builder.llvm_tools_package_vers());\n         cmd.arg(addr);\n \n         builder.create_dir(&distdir(builder));\n@@ -1755,7 +1757,6 @@ impl Step for HashSign {\n #[derive(Clone, Debug, Eq, Hash, PartialEq)]\n pub struct LlvmTools {\n     pub stage: u32,\n-    pub compiler: Compiler,\n     pub target: Interned<String>,\n }\n \n@@ -1770,19 +1771,16 @@ impl Step for LlvmTools {\n     fn make_run(run: RunConfig) {\n         run.builder.ensure(LlvmTools {\n             stage: run.builder.top_stage,\n-            compiler: run.builder.compiler(run.builder.top_stage, run.target),\n             target: run.target,\n         });\n     }\n \n     fn run(self, builder: &Builder) -> Option<PathBuf> {\n-        let compiler = self.compiler;\n-        let host = compiler.host;\n-\n         let stage = self.stage;\n+        let target = self.target;\n         assert!(builder.config.extended);\n \n-        builder.info(&format!(\"Dist LlvmTools stage{} ({})\", stage, host));\n+        builder.info(&format!(\"Dist LlvmTools stage{} ({})\", stage, target));\n         let src = builder.src.join(\"src/llvm\");\n         let name = pkgname(builder, \"llvm-tools\");\n \n@@ -1794,9 +1792,9 @@ impl Step for LlvmTools {\n         // Prepare the image directory\n         for tool in LLVM_TOOLS {\n             let exe = builder\n-                .llvm_out(host)\n+                .llvm_out(target)\n                 .join(\"bin\")\n-                .join(exe(tool, &compiler.host));\n+                .join(exe(tool, &target));\n             builder.install(&exe, &image.join(\"bin\"), 0o755);\n         }\n \n@@ -1806,6 +1804,7 @@ impl Step for LlvmTools {\n         builder.create_dir(&overlay);\n         builder.install(&src.join(\"README.txt\"), &overlay, 0o644);\n         builder.install(&src.join(\"LICENSE.TXT\"), &overlay, 0o644);\n+        builder.create(&overlay.join(\"version\"), &builder.llvm_tools_vers());\n \n         // Generate the installer tarball\n         let mut cmd = rust_installer(builder);\n@@ -1817,12 +1816,12 @@ impl Step for LlvmTools {\n             .arg(\"--work-dir\").arg(&tmpdir(builder))\n             .arg(\"--output-dir\").arg(&distdir(builder))\n             .arg(\"--non-installed-overlay\").arg(&overlay)\n-            .arg(format!(\"--package-name={}-{}\", name, host))\n+            .arg(format!(\"--package-name={}-{}\", name, target))\n             .arg(\"--legacy-manifest-dirs=rustlib,cargo\")\n             .arg(\"--component-name=llvm-tools\");\n \n \n         builder.run(&mut cmd);\n-        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, host)))\n+        Some(distdir(builder).join(format!(\"{}-{}.tar.gz\", name, target)))\n     }\n }"}, {"sha": "b5d450b88392d0d8bd1c575f72bd4fe0cbc5f5bd", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23", "patch": "@@ -973,24 +973,11 @@ impl Build {\n         self.package_vers(&self.release_num(\"rustfmt\"))\n     }\n \n-    fn llvm_tools_vers(&self) -> String {\n-        // japaric: should we use LLVM version here?\n-        // let stdout = build_helper::output(\n-        //     Command::new(self.llvm_out(self.config.build).join(\"build/bin/llvm-size\"))\n-        //         .arg(\"--version\"),\n-        // );\n-\n-        // for line in stdout.lines() {\n-        //     if line.contains(\"LLVM version\") {\n-        //         if let Some(vers) = line.split_whitespace().nth(2) {\n-        //             return vers.to_string();\n-        //         }\n-        //     }\n-        // }\n-\n-        // panic!(\"The output of $LLVM_TOOL has changed; \\\n-        //         please fix `bootstrap::Build.llvm_tools_vers`\");\n+    fn llvm_tools_package_vers(&self) -> String {\n+        self.package_vers(&self.rust_version())\n+    }\n \n+    fn llvm_tools_vers(&self) -> String {\n         self.rust_version()\n     }\n "}, {"sha": "35fc2182313c95de4b4a65076a3741f4e7473038", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=b7c6e8f1805cd8a4b0a1c1f22f17a89e9e2cea23", "patch": "@@ -184,6 +184,7 @@ struct Builder {\n     cargo_release: String,\n     rls_release: String,\n     rustfmt_release: String,\n+    llvm_tools_release: String,\n \n     input: PathBuf,\n     output: PathBuf,\n@@ -196,11 +197,13 @@ struct Builder {\n     cargo_version: Option<String>,\n     rls_version: Option<String>,\n     rustfmt_version: Option<String>,\n+    llvm_tools_version: Option<String>,\n \n     rust_git_commit_hash: Option<String>,\n     cargo_git_commit_hash: Option<String>,\n     rls_git_commit_hash: Option<String>,\n     rustfmt_git_commit_hash: Option<String>,\n+    llvm_tools_git_commit_hash: Option<String>,\n }\n \n fn main() {\n@@ -212,7 +215,7 @@ fn main() {\n     let cargo_release = args.next().unwrap();\n     let rls_release = args.next().unwrap();\n     let rustfmt_release = args.next().unwrap();\n-    let _llvm_tools_vers = args.next().unwrap(); // FIXME do something with it?\n+    let llvm_tools_release = args.next().unwrap();\n     let s3_address = args.next().unwrap();\n     let mut passphrase = String::new();\n     t!(io::stdin().read_to_string(&mut passphrase));\n@@ -222,6 +225,7 @@ fn main() {\n         cargo_release,\n         rls_release,\n         rustfmt_release,\n+        llvm_tools_release,\n \n         input,\n         output,\n@@ -234,11 +238,13 @@ fn main() {\n         cargo_version: None,\n         rls_version: None,\n         rustfmt_version: None,\n+        llvm_tools_version: None,\n \n         rust_git_commit_hash: None,\n         cargo_git_commit_hash: None,\n         rls_git_commit_hash: None,\n         rustfmt_git_commit_hash: None,\n+        llvm_tools_git_commit_hash: None,\n     }.build();\n }\n \n@@ -248,11 +254,14 @@ impl Builder {\n         self.cargo_version = self.version(\"cargo\", \"x86_64-unknown-linux-gnu\");\n         self.rls_version = self.version(\"rls\", \"x86_64-unknown-linux-gnu\");\n         self.rustfmt_version = self.version(\"rustfmt\", \"x86_64-unknown-linux-gnu\");\n+        self.llvm_tools_version = self.version(\"llvm-tools\", \"x86_64-unknown-linux-gnu\");\n \n         self.rust_git_commit_hash = self.git_commit_hash(\"rust\", \"x86_64-unknown-linux-gnu\");\n         self.cargo_git_commit_hash = self.git_commit_hash(\"cargo\", \"x86_64-unknown-linux-gnu\");\n         self.rls_git_commit_hash = self.git_commit_hash(\"rls\", \"x86_64-unknown-linux-gnu\");\n         self.rustfmt_git_commit_hash = self.git_commit_hash(\"rustfmt\", \"x86_64-unknown-linux-gnu\");\n+        self.llvm_tools_git_commit_hash = self.git_commit_hash(\"llvm-tools\",\n+                                                               \"x86_64-unknown-linux-gnu\");\n \n         self.digest_and_sign();\n         let manifest = self.build_manifest();\n@@ -289,9 +298,11 @@ impl Builder {\n         self.package(\"rls-preview\", &mut manifest.pkg, HOSTS);\n         self.package(\"rustfmt-preview\", &mut manifest.pkg, HOSTS);\n         self.package(\"rust-analysis\", &mut manifest.pkg, TARGETS);\n+        self.package(\"llvm-tools\", &mut manifest.pkg, TARGETS);\n \n         let rls_present = manifest.pkg.contains_key(\"rls-preview\");\n         let rustfmt_present = manifest.pkg.contains_key(\"rustfmt-preview\");\n+        let llvm_tools_present = manifest.pkg.contains_key(\"llvm-tools\");\n \n         if rls_present {\n             manifest.renames.insert(\"rls\".to_owned(), Rename { to: \"rls-preview\".to_owned() });\n@@ -346,6 +357,12 @@ impl Builder {\n                     target: host.to_string(),\n                 });\n             }\n+            if llvm_tools_present {\n+                extensions.push(Component {\n+                    pkg: \"llvm-tools\".to_string(),\n+                    target: host.to_string(),\n+                });\n+            }\n             extensions.push(Component {\n                 pkg: \"rust-analysis\".to_string(),\n                 target: host.to_string(),\n@@ -455,6 +472,8 @@ impl Builder {\n             format!(\"rls-{}-{}.tar.gz\", self.rls_release, target)\n         } else if component == \"rustfmt\" || component == \"rustfmt-preview\" {\n             format!(\"rustfmt-{}-{}.tar.gz\", self.rustfmt_release, target)\n+        } else if component == \"llvm_tools\" {\n+            format!(\"llvm-tools-{}-{}.tar.gz\", self.llvm_tools_release, target)\n         } else {\n             format!(\"{}-{}-{}.tar.gz\", component, self.rust_release, target)\n         }\n@@ -467,6 +486,8 @@ impl Builder {\n             &self.rls_version\n         } else if component == \"rustfmt\" || component == \"rustfmt-preview\" {\n             &self.rustfmt_version\n+        } else if component == \"llvm-tools\" {\n+            &self.llvm_tools_version\n         } else {\n             &self.rust_version\n         }\n@@ -479,6 +500,8 @@ impl Builder {\n             &self.rls_git_commit_hash\n         } else if component == \"rustfmt\" || component == \"rustfmt-preview\" {\n             &self.rustfmt_git_commit_hash\n+        } else if component == \"llvm-tools\" {\n+            &self.llvm_tools_git_commit_hash\n         } else {\n             &self.rust_git_commit_hash\n         }"}]}