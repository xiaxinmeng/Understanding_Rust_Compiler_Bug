{"sha": "9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNzk2OWQzZGY2Y2UxY2Q1MzcwZWVhMzJmMThhMDhkYzFmMDg1MGQ=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-12-06T18:50:55Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2017-12-10T01:22:07Z"}, "message": "Use hygiene to access the injected crate (`core` or `std`) from builtin macros.", "tree": {"sha": "cb7d5f2d7ed8deaba3a2320a0ea8a4cc1000b600", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb7d5f2d7ed8deaba3a2320a0ea8a4cc1000b600"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "html_url": "https://github.com/rust-lang/rust/commit/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8db163e53dab4f188a60bf24b4d6ebeb1ea5cab1", "url": "https://api.github.com/repos/rust-lang/rust/commits/8db163e53dab4f188a60bf24b4d6ebeb1ea5cab1", "html_url": "https://github.com/rust-lang/rust/commit/8db163e53dab4f188a60bf24b4d6ebeb1ea5cab1"}], "stats": {"total": 201, "additions": 99, "deletions": 102}, "files": [{"sha": "cc5ed59ac6ad958526b0d8b606ab3c3c3c35dea3", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -262,6 +262,10 @@ impl<'a> Resolver<'a> {\n                 let module =\n                     self.get_module(DefId { krate: crate_id, index: CRATE_DEF_INDEX });\n                 self.populate_module_if_necessary(module);\n+                if self.injected_crate_name.map_or(false, |name| item.ident.name == name) {\n+                    self.injected_crate = Some(module);\n+                }\n+\n                 let used = self.process_legacy_macro_imports(item, module, expansion);\n                 let binding =\n                     (module, ty::Visibility::Public, sp, expansion).to_name_binding(self.arenas);\n@@ -561,8 +565,7 @@ impl<'a> Resolver<'a> {\n         if let Some(id) = self.definitions.as_local_node_id(def_id) {\n             self.local_macro_def_scopes[&id]\n         } else if def_id.krate == BUILTIN_MACROS_CRATE {\n-            // FIXME(jseyfried): This happens when `include!()`ing a `$crate::` path, c.f, #40469.\n-            self.graph_root\n+            self.injected_crate.unwrap_or(self.graph_root)\n         } else {\n             let module_def_id = ty::DefIdTree::parent(&*self, def_id).unwrap();\n             self.get_module(module_def_id)"}, {"sha": "6de61df16b2d2f49d2d523a99a4b9b93acc7605b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -58,6 +58,7 @@ use syntax::ast::{Item, ItemKind, ImplItem, ImplItemKind};\n use syntax::ast::{Local, Mutability, Pat, PatKind, Path};\n use syntax::ast::{QSelf, TraitItemKind, TraitRef, Ty, TyKind};\n use syntax::feature_gate::{feature_err, emit_feature_err, GateIssue};\n+use syntax::std_inject::injected_crate_name;\n \n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use errors::{DiagnosticBuilder, DiagnosticId};\n@@ -1333,6 +1334,9 @@ pub struct Resolver<'a> {\n \n     // Only used for better errors on `fn(): fn()`\n     current_type_ascription: Vec<Span>,\n+\n+    injected_crate_name: Option<&'static str>,\n+    injected_crate: Option<Module<'a>>,\n }\n \n pub struct ResolverArenas<'a> {\n@@ -1532,6 +1536,8 @@ impl<'a> Resolver<'a> {\n             found_unresolved_macro: false,\n             unused_macros: FxHashSet(),\n             current_type_ascription: Vec::new(),\n+            injected_crate_name: injected_crate_name(krate),\n+            injected_crate: None,\n         }\n     }\n "}, {"sha": "bb1b7da7dbab2c4f9d2a0628b2c277325adb4c36", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -21,10 +21,11 @@ use fold::{self, Folder};\n use parse::{self, parser, DirectoryOwnership};\n use parse::token;\n use ptr::P;\n-use symbol::Symbol;\n+use symbol::{keywords, Ident, Symbol};\n use util::small_vector::SmallVector;\n \n use std::collections::HashMap;\n+use std::iter;\n use std::path::PathBuf;\n use std::rc::Rc;\n use std::default::Default;\n@@ -664,7 +665,6 @@ pub struct ExpansionData {\n pub struct ExtCtxt<'a> {\n     pub parse_sess: &'a parse::ParseSess,\n     pub ecfg: expand::ExpansionConfig<'a>,\n-    pub crate_root: Option<&'static str>,\n     pub root_path: PathBuf,\n     pub resolver: &'a mut Resolver,\n     pub resolve_err_count: usize,\n@@ -680,7 +680,6 @@ impl<'a> ExtCtxt<'a> {\n         ExtCtxt {\n             parse_sess,\n             ecfg,\n-            crate_root: None,\n             root_path: PathBuf::new(),\n             resolver,\n             resolve_err_count: 0,\n@@ -822,12 +821,10 @@ impl<'a> ExtCtxt<'a> {\n         ast::Ident::from_str(st)\n     }\n     pub fn std_path(&self, components: &[&str]) -> Vec<ast::Ident> {\n-        let mut v = Vec::new();\n-        if let Some(s) = self.crate_root {\n-            v.push(self.ident_of(s));\n-        }\n-        v.extend(components.iter().map(|s| self.ident_of(s)));\n-        v\n+        let def_site = SyntaxContext::empty().apply_mark(self.current_expansion.mark);\n+        iter::once(Ident { ctxt: def_site, ..keywords::DollarCrate.ident() })\n+            .chain(components.iter().map(|s| self.ident_of(s)))\n+            .collect()\n     }\n     pub fn name_of(&self, st: &str) -> ast::Name {\n         Symbol::intern(st)"}, {"sha": "82e7747b014618485bbc00cebbf1c2cf559d5207", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -319,9 +319,12 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n                 types: Vec<P<ast::Ty>>,\n                 bindings: Vec<ast::TypeBinding> )\n                 -> ast::Path {\n+        use syntax::parse::token;\n+\n         let last_identifier = idents.pop().unwrap();\n         let mut segments: Vec<ast::PathSegment> = Vec::new();\n-        if global {\n+        if global &&\n+           !idents.first().map_or(false, |&ident| token::Ident(ident).is_path_segment_keyword()) {\n             segments.push(ast::PathSegment::crate_root(span));\n         }\n "}, {"sha": "ecb396f259f7386e9ab89a4cfbf16da99229fada", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -25,7 +25,6 @@ use parse::{DirectoryOwnership, PResult};\n use parse::token::{self, Token};\n use parse::parser::Parser;\n use ptr::P;\n-use std_inject;\n use symbol::Symbol;\n use symbol::keywords;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -219,7 +218,6 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n     }\n \n     pub fn expand_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n-        self.cx.crate_root = std_inject::injected_crate_name(&krate);\n         let mut module = ModuleData {\n             mod_path: vec![Ident::from_str(&self.cx.ecfg.crate_name)],\n             directory: self.cx.codemap().span_to_unmapped_path(krate.span),"}, {"sha": "9f097169d973e6ef9aeaa58e06a6bb61435a1dc3", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -272,7 +272,7 @@ fn generate_test_harness(sess: &ParseSess,\n \n     let mark = Mark::fresh(Mark::root());\n \n-    let mut cx: TestCtxt = TestCtxt {\n+    let cx = TestCtxt {\n         span_diagnostic: sd,\n         ext_cx: ExtCtxt::new(sess, ExpansionConfig::default(\"test\".to_string()), resolver),\n         path: Vec::new(),\n@@ -283,7 +283,6 @@ fn generate_test_harness(sess: &ParseSess,\n         toplevel_reexport: None,\n         ctxt: SyntaxContext::empty().apply_mark(mark),\n     };\n-    cx.ext_cx.crate_root = Some(\"std\");\n \n     mark.set_expn_info(ExpnInfo {\n         call_site: DUMMY_SP,"}, {"sha": "7f03001d9c6ebf92259aba08c3211a2a95560d7d", "filename": "src/libsyntax_ext/deriving/bounds.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fbounds.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use deriving::path_std;\n use deriving::generic::*;\n use deriving::generic::ty::*;\n-\n use syntax::ast::MetaItem;\n use syntax::ext::base::{Annotatable, ExtCtxt};\n use syntax_pos::Span;\n@@ -28,15 +28,10 @@ pub fn expand_deriving_copy(cx: &mut ExtCtxt,\n                             mitem: &MetaItem,\n                             item: &Annotatable,\n                             push: &mut FnMut(Annotatable)) {\n-    let mut v = cx.crate_root.map(|s| vec![s]).unwrap_or(Vec::new());\n-    v.push(\"marker\");\n-    v.push(\"Copy\");\n-    let path = Path::new(v);\n-\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),\n-        path,\n+        path: path_std!(cx, marker::Copy),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,"}, {"sha": "35def632fc1883ba2ca6ffab1310f0f0b0cd0532", "filename": "src/libsyntax_ext/deriving/clone.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fclone.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use deriving::path_std;\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n@@ -55,7 +56,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                     }));\n                 }\n                 ItemKind::Union(..) => {\n-                    bounds = vec![Literal(path_std!(cx, core::marker::Copy))];\n+                    bounds = vec![Literal(path_std!(cx, marker::Copy))];\n                     is_shallow = true;\n                     substructure = combine_substructure(Box::new(|c, s, sub| {\n                         cs_clone_shallow(\"Clone\", c, s, sub, true)\n@@ -79,7 +80,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),\n-        path: path_std!(cx, core::clone::Clone),\n+        path: path_std!(cx, clone::Clone),\n         additional_bounds: bounds,\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,"}, {"sha": "237c8654edf6ea127ca5873be4afba2b6ba6243d", "filename": "src/libsyntax_ext/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Feq.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use deriving::path_std;\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n@@ -30,7 +31,7 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),\n-        path: path_std!(cx, core::cmp::Eq),\n+        path: path_std!(cx, cmp::Eq),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,"}, {"sha": "1a392ac376537b40aba9cd413d6fd02c3ac5c125", "filename": "src/libsyntax_ext/deriving/cmp/ord.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Ford.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use deriving::path_std;\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n@@ -28,7 +29,7 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),\n-        path: path_std!(cx, core::cmp::Ord),\n+        path: path_std!(cx, cmp::Ord),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,\n@@ -38,7 +39,7 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n                           generics: LifetimeBounds::empty(),\n                           explicit_self: borrowed_explicit_self(),\n                           args: vec![borrowed_self()],\n-                          ret_ty: Literal(path_std!(cx, core::cmp::Ordering)),\n+                          ret_ty: Literal(path_std!(cx, cmp::Ordering)),\n                           attributes: attrs,\n                           is_unsafe: false,\n                           unify_fieldless_variants: true,"}, {"sha": "75db7cc1e4c074ab2143adb7496d58985e40fcd2", "filename": "src/libsyntax_ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use deriving::{path_local, path_std};\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n@@ -93,7 +94,7 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),\n-        path: path_std!(cx, core::cmp::PartialEq),\n+        path: path_std!(cx, cmp::PartialEq),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,"}, {"sha": "92183c58eb269673bd2e053735d956a37a34793d", "filename": "src/libsyntax_ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -10,6 +10,7 @@\n \n pub use self::OrderingOp::*;\n \n+use deriving::{path_local, pathvec_std, path_std};\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n@@ -45,11 +46,11 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n         } }\n     }\n \n-    let ordering_ty = Literal(path_std!(cx, core::cmp::Ordering));\n-    let ret_ty = Literal(Path::new_(pathvec_std!(cx, core::option::Option),\n+    let ordering_ty = Literal(path_std!(cx, cmp::Ordering));\n+    let ret_ty = Literal(Path::new_(pathvec_std!(cx, option::Option),\n                                     None,\n                                     vec![Box::new(ordering_ty)],\n-                                    true));\n+                                    PathKind::Std));\n \n     let inline = cx.meta_word(span, Symbol::intern(\"inline\"));\n     let attrs = vec![cx.attribute(span, inline)];\n@@ -84,7 +85,7 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span,\n         attributes: vec![],\n-        path: path_std!(cx, core::cmp::PartialOrd),\n+        path: path_std!(cx, cmp::PartialOrd),\n         additional_bounds: vec![],\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,"}, {"sha": "82fc09fca69af733767c1e2e9a4cb7a2e598fa0c", "filename": "src/libsyntax_ext/deriving/debug.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdebug.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use deriving::path_std;\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n@@ -24,13 +25,13 @@ pub fn expand_deriving_debug(cx: &mut ExtCtxt,\n                              item: &Annotatable,\n                              push: &mut FnMut(Annotatable)) {\n     // &mut ::std::fmt::Formatter\n-    let fmtr = Ptr(Box::new(Literal(path_std!(cx, core::fmt::Formatter))),\n+    let fmtr = Ptr(Box::new(Literal(path_std!(cx, fmt::Formatter))),\n                    Borrowed(None, ast::Mutability::Mutable));\n \n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),\n-        path: path_std!(cx, core::fmt::Debug),\n+        path: path_std!(cx, fmt::Debug),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,\n@@ -40,7 +41,7 @@ pub fn expand_deriving_debug(cx: &mut ExtCtxt,\n                           generics: LifetimeBounds::empty(),\n                           explicit_self: borrowed_explicit_self(),\n                           args: vec![fmtr],\n-                          ret_ty: Literal(path_std!(cx, core::fmt::Result)),\n+                          ret_ty: Literal(path_std!(cx, fmt::Result)),\n                           attributes: Vec::new(),\n                           is_unsafe: false,\n                           unify_fieldless_variants: false,"}, {"sha": "46dada256b8208c7d1f5bf2ef9f7277068e0b204", "filename": "src/libsyntax_ext/deriving/decodable.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdecodable.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -10,7 +10,7 @@\n \n //! The compiler code necessary for `#[derive(Decodable)]`. See encodable.rs for more.\n \n-use deriving;\n+use deriving::{self, pathvec_std};\n use deriving::generic::*;\n use deriving::generic::ty::*;\n use deriving::warn_if_deprecated;\n@@ -46,20 +46,12 @@ fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n                                  item: &Annotatable,\n                                  push: &mut FnMut(Annotatable),\n                                  krate: &'static str) {\n-    if cx.crate_root != Some(\"std\") {\n-        // FIXME(#21880): lift this requirement.\n-        cx.span_err(span,\n-                    \"this trait cannot be derived with #![no_std] \\\n-                           or #![no_core]\");\n-        return;\n-    }\n-\n     let typaram = &*deriving::hygienic_type_parameter(item, \"__D\");\n \n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),\n-        path: Path::new_(vec![krate, \"Decodable\"], None, vec![], true),\n+        path: Path::new_(vec![krate, \"Decodable\"], None, vec![], PathKind::Global),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,\n@@ -72,18 +64,18 @@ fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n                                             vec![Path::new_(vec![krate, \"Decoder\"],\n                                                             None,\n                                                             vec![],\n-                                                            true)])],\n+                                                            PathKind::Global)])],\n                           },\n                           explicit_self: None,\n                           args: vec![Ptr(Box::new(Literal(Path::new_local(typaram))),\n                                          Borrowed(None, Mutability::Mutable))],\n                           ret_ty:\n-                              Literal(Path::new_(pathvec_std!(cx, core::result::Result),\n+                              Literal(Path::new_(pathvec_std!(cx, result::Result),\n                                                  None,\n                                                  vec![Box::new(Self_), Box::new(Literal(Path::new_(\n-                        vec![typaram, \"Error\"], None, vec![], false\n+                        vec![typaram, \"Error\"], None, vec![], PathKind::Local\n                     )))],\n-                                                 true)),\n+                                                 PathKind::Std)),\n                           attributes: Vec::new(),\n                           is_unsafe: false,\n                           unify_fieldless_variants: false,"}, {"sha": "99e7bb4baeff4bf23dbea2f05179ca36525ef588", "filename": "src/libsyntax_ext/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fdefault.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use deriving::path_std;\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n@@ -28,7 +29,7 @@ pub fn expand_deriving_default(cx: &mut ExtCtxt,\n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),\n-        path: path_std!(cx, core::default::Default),\n+        path: path_std!(cx, default::Default),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,"}, {"sha": "0e6e96438d8176ffc16065ee9fc21d3d5c41ae1c", "filename": "src/libsyntax_ext/deriving/encodable.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fencodable.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -92,7 +92,7 @@\n //! }\n //! ```\n \n-use deriving;\n+use deriving::{self, pathvec_std};\n use deriving::generic::*;\n use deriving::generic::ty::*;\n use deriving::warn_if_deprecated;\n@@ -127,20 +127,12 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n                                  item: &Annotatable,\n                                  push: &mut FnMut(Annotatable),\n                                  krate: &'static str) {\n-    if cx.crate_root != Some(\"std\") {\n-        // FIXME(#21880): lift this requirement.\n-        cx.span_err(span,\n-                    \"this trait cannot be derived with #![no_std] \\\n-                           or #![no_core]\");\n-        return;\n-    }\n-\n     let typaram = &*deriving::hygienic_type_parameter(item, \"__S\");\n \n     let trait_def = TraitDef {\n         span,\n         attributes: Vec::new(),\n-        path: Path::new_(vec![krate, \"Encodable\"], None, vec![], true),\n+        path: Path::new_(vec![krate, \"Encodable\"], None, vec![], PathKind::Global),\n         additional_bounds: Vec::new(),\n         generics: LifetimeBounds::empty(),\n         is_unsafe: false,\n@@ -150,19 +142,21 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n                 name: \"encode\",\n                 generics: LifetimeBounds {\n                     lifetimes: Vec::new(),\n-                    bounds: vec![(typaram,\n-                                  vec![Path::new_(vec![krate, \"Encoder\"], None, vec![], true)])]\n+                    bounds: vec![\n+                        (typaram,\n+                         vec![Path::new_(vec![krate, \"Encoder\"], None, vec![], PathKind::Global)])\n+                    ],\n                 },\n                 explicit_self: borrowed_explicit_self(),\n                 args: vec![Ptr(Box::new(Literal(Path::new_local(typaram))),\n                            Borrowed(None, Mutability::Mutable))],\n                 ret_ty: Literal(Path::new_(\n-                    pathvec_std!(cx, core::result::Result),\n+                    pathvec_std!(cx, result::Result),\n                     None,\n                     vec![Box::new(Tuple(Vec::new())), Box::new(Literal(Path::new_(\n-                        vec![typaram, \"Error\"], None, vec![], false\n+                        vec![typaram, \"Error\"], None, vec![], PathKind::Local\n                     )))],\n-                    true\n+                    PathKind::Std\n                 )),\n                 attributes: Vec::new(),\n                 is_unsafe: false,"}, {"sha": "e4faf652389a019245660a93a98259e10f55e110", "filename": "src/libsyntax_ext/deriving/generic/ty.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fty.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -21,6 +21,8 @@ use syntax::ext::build::AstBuilder;\n use syntax::codemap::respan;\n use syntax::ptr::P;\n use syntax_pos::Span;\n+use syntax_pos::hygiene::SyntaxContext;\n+use syntax_pos::symbol::keywords;\n \n /// The types of pointers\n #[derive(Clone, Eq, PartialEq)]\n@@ -36,29 +38,36 @@ pub enum PtrTy<'a> {\n /// for type parameters and a lifetime.\n #[derive(Clone, Eq, PartialEq)]\n pub struct Path<'a> {\n-    pub path: Vec<&'a str>,\n-    pub lifetime: Option<&'a str>,\n-    pub params: Vec<Box<Ty<'a>>>,\n-    pub global: bool,\n+    path: Vec<&'a str>,\n+    lifetime: Option<&'a str>,\n+    params: Vec<Box<Ty<'a>>>,\n+    kind: PathKind,\n+}\n+\n+#[derive(Clone, Eq, PartialEq)]\n+pub enum PathKind {\n+    Local,\n+    Global,\n+    Std,\n }\n \n impl<'a> Path<'a> {\n     pub fn new<'r>(path: Vec<&'r str>) -> Path<'r> {\n-        Path::new_(path, None, Vec::new(), true)\n+        Path::new_(path, None, Vec::new(), PathKind::Std)\n     }\n     pub fn new_local<'r>(path: &'r str) -> Path<'r> {\n-        Path::new_(vec![path], None, Vec::new(), false)\n+        Path::new_(vec![path], None, Vec::new(), PathKind::Local)\n     }\n     pub fn new_<'r>(path: Vec<&'r str>,\n                     lifetime: Option<&'r str>,\n                     params: Vec<Box<Ty<'r>>>,\n-                    global: bool)\n+                    kind: PathKind)\n                     -> Path<'r> {\n         Path {\n             path,\n             lifetime,\n             params,\n-            global,\n+            kind,\n         }\n     }\n \n@@ -76,11 +85,20 @@ impl<'a> Path<'a> {\n                    self_ty: Ident,\n                    self_generics: &Generics)\n                    -> ast::Path {\n-        let idents = self.path.iter().map(|s| cx.ident_of(*s)).collect();\n+        let mut idents = self.path.iter().map(|s| cx.ident_of(*s)).collect();\n         let lt = mk_lifetimes(cx, span, &self.lifetime);\n         let tys = self.params.iter().map(|t| t.to_ty(cx, span, self_ty, self_generics)).collect();\n \n-        cx.path_all(span, self.global, idents, lt, tys, Vec::new())\n+        match self.kind {\n+            PathKind::Global => cx.path_all(span, true, idents, lt, tys, Vec::new()),\n+            PathKind::Local => cx.path_all(span, false, idents, lt, tys, Vec::new()),\n+            PathKind::Std => {\n+                let def_site = SyntaxContext::empty().apply_mark(cx.current_expansion.mark);\n+                idents.insert(0, Ident { ctxt: def_site, ..keywords::DollarCrate.ident() });\n+                cx.path_all(span, false, idents, lt, tys, Vec::new())\n+            }\n+        }\n+\n     }\n }\n "}, {"sha": "b192ab2527e4b8f04319cfb6e006f3665bff8643", "filename": "src/libsyntax_ext/deriving/hash.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fhash.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use deriving;\n+use deriving::{self, pathvec_std, path_std};\n use deriving::generic::*;\n use deriving::generic::ty::*;\n \n@@ -24,7 +24,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                             item: &Annotatable,\n                             push: &mut FnMut(Annotatable)) {\n \n-    let path = Path::new_(pathvec_std!(cx, core::hash::Hash), None, vec![], true);\n+    let path = Path::new_(pathvec_std!(cx, hash::Hash), None, vec![], PathKind::Std);\n \n     let typaram = &*deriving::hygienic_type_parameter(item, \"__H\");\n \n@@ -41,7 +41,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                           name: \"hash\",\n                           generics: LifetimeBounds {\n                               lifetimes: Vec::new(),\n-                              bounds: vec![(typaram, vec![path_std!(cx, core::hash::Hasher)])],\n+                              bounds: vec![(typaram, vec![path_std!(cx, hash::Hasher)])],\n                           },\n                           explicit_self: borrowed_explicit_self(),\n                           args: vec![Ptr(Box::new(Literal(arg)),"}, {"sha": "a6696b533694e9680946442030ac98389f73d741", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 7, "deletions": 23, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -19,32 +19,16 @@ use syntax::ptr::P;\n use syntax::symbol::Symbol;\n use syntax_pos::Span;\n \n-macro_rules! pathvec {\n-    ($($x:ident)::+) => (\n-        vec![ $( stringify!($x) ),+ ]\n-    )\n+macro path_local($x:ident) {\n+    generic::ty::Path::new_local(stringify!($x))\n }\n \n-macro_rules! path_local {\n-    ($x:ident) => (\n-        ::deriving::generic::ty::Path::new_local(stringify!($x))\n-    )\n-}\n-\n-macro_rules! pathvec_std {\n-    ($cx:expr, $first:ident :: $($rest:ident)::+) => ({\n-        let mut v = pathvec![$($rest)::+];\n-        if let Some(s) = $cx.crate_root {\n-            v.insert(0, s);\n-        }\n-        v\n-    })\n-}\n+macro pathvec_std($cx:expr, $($rest:ident)::+) {{\n+    vec![ $( stringify!($rest) ),+ ]\n+}}\n \n-macro_rules! path_std {\n-    ($($x:tt)*) => (\n-        ::deriving::generic::ty::Path::new( pathvec_std!( $($x)* ) )\n-    )\n+macro path_std($($x:tt)*) {\n+    generic::ty::Path::new( pathvec_std!( $($x)* ) )\n }\n \n pub mod bounds;"}, {"sha": "82d6ee5afa05b4aa23b5e8f4c18cdecda47e5a73", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7969d3df6ce1cd5370eea32f18a08dc1f0850d/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=9c7969d3df6ce1cd5370eea32f18a08dc1f0850d", "patch": "@@ -16,6 +16,7 @@\n #![deny(warnings)]\n \n #![feature(proc_macro_internals)]\n+#![feature(decl_macro)]\n \n extern crate fmt_macros;\n #[macro_use]"}]}