{"sha": "1ed7d41d8849d930f0622eaf54049f66fff0ca2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZDdkNDFkODg0OWQ5MzBmMDYyMmVhZjU0MDQ5ZjY2ZmZmMGNhMmE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-24T15:41:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-24T15:41:13Z"}, "message": "Auto merge of #44743 - arielb1:size-rollback, r=eddyb\n\ntypeck::check::coercion - roll back failed unsizing type vars\n\nThis wraps unsizing coercions within an additional level of\n`commit_if_ok`, which rolls back type variables if the unsizing coercion\nfails. This prevents a large amount of type-variables from accumulating\nwhile type-checking a large function, e.g. shaving 2GB off one of the\n4GB peaks in #36799.\n\nThis is a performance-sensitive PR so please don't roll it up.\n\nr? @eddyb\ncc @nikomatsakis", "tree": {"sha": "9c7a836c7396376c382ed8aa8c672114b8a65c78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c7a836c7396376c382ed8aa8c672114b8a65c78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ed7d41d8849d930f0622eaf54049f66fff0ca2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ed7d41d8849d930f0622eaf54049f66fff0ca2a", "html_url": "https://github.com/rust-lang/rust/commit/1ed7d41d8849d930f0622eaf54049f66fff0ca2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ed7d41d8849d930f0622eaf54049f66fff0ca2a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "647aecc281f0defdd96bc807f2b98ec3090857a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/647aecc281f0defdd96bc807f2b98ec3090857a2", "html_url": "https://github.com/rust-lang/rust/commit/647aecc281f0defdd96bc807f2b98ec3090857a2"}, {"sha": "b6bce56ac718a6343e44b37110e6c273ab9b6189", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6bce56ac718a6343e44b37110e6c273ab9b6189", "html_url": "https://github.com/rust-lang/rust/commit/b6bce56ac718a6343e44b37110e6c273ab9b6189"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "b24c9690a46187748b347da1d50fb22b6b804c2f", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1ed7d41d8849d930f0622eaf54049f66fff0ca2a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed7d41d8849d930f0622eaf54049f66fff0ca2a/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=1ed7d41d8849d930f0622eaf54049f66fff0ca2a", "patch": "@@ -333,11 +333,20 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             GenericBoundFailure(..) => true,\n         };\n \n-        if errors.iter().all(|e| is_bound_failure(e)) {\n+\n+        let mut errors = if errors.iter().all(|e| is_bound_failure(e)) {\n             errors.clone()\n         } else {\n             errors.iter().filter(|&e| !is_bound_failure(e)).cloned().collect()\n-        }\n+        };\n+\n+        // sort the errors by span, for better error message stability.\n+        errors.sort_by_key(|u| match *u {\n+            ConcreteFailure(ref sro, _, _) => sro.span(),\n+            GenericBoundFailure(ref sro, _, _) => sro.span(),\n+            SubSupConflict(ref rvo, _, _, _, _) => rvo.span(),\n+        });\n+        errors\n     }\n \n     /// Adds a note if the types come from similarly named crates"}, {"sha": "94422f93e5922fd7dd09308120aa397a94cd1bc7", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ed7d41d8849d930f0622eaf54049f66fff0ca2a/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ed7d41d8849d930f0622eaf54049f66fff0ca2a/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=1ed7d41d8849d930f0622eaf54049f66fff0ca2a", "patch": "@@ -187,7 +187,11 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n         }\n \n         // Consider coercing the subtype to a DST\n-        let unsize = self.coerce_unsized(a, b);\n+        //\n+        // NOTE: this is wrapped in a `commit_if_ok` because it creates\n+        // a \"spurious\" type variable, and we don't want to have that\n+        // type variable in memory if the coercion fails.\n+        let unsize = self.commit_if_ok(|_| self.coerce_unsized(a, b));\n         if unsize.is_ok() {\n             debug!(\"coerce: unsize successful\");\n             return unsize;"}]}