{"sha": "565492083ffd4e52da5aa14fc520dd9606598ac4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NTQ5MjA4M2ZmZDRlNTJkYTVhYTE0ZmM1MjBkZDk2MDY1OThhYzQ=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-08-27T21:06:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-27T21:06:54Z"}, "message": "Merge pull request #1918 from topecongiro/issue-1917\n\nIgnore empty lines inside arguments of macro with brace", "tree": {"sha": "963705945e11de27a98a877a902d0a3effce42f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/963705945e11de27a98a877a902d0a3effce42f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/565492083ffd4e52da5aa14fc520dd9606598ac4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/565492083ffd4e52da5aa14fc520dd9606598ac4", "html_url": "https://github.com/rust-lang/rust/commit/565492083ffd4e52da5aa14fc520dd9606598ac4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/565492083ffd4e52da5aa14fc520dd9606598ac4/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6554e7c20653b6e77fbbdc54ec27c40959dd0446", "url": "https://api.github.com/repos/rust-lang/rust/commits/6554e7c20653b6e77fbbdc54ec27c40959dd0446", "html_url": "https://github.com/rust-lang/rust/commit/6554e7c20653b6e77fbbdc54ec27c40959dd0446"}, {"sha": "343b3158304ef8af111e1e4923c598b99e7dc3b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/343b3158304ef8af111e1e4923c598b99e7dc3b4", "html_url": "https://github.com/rust-lang/rust/commit/343b3158304ef8af111e1e4923c598b99e7dc3b4"}], "stats": {"total": 144, "additions": 123, "deletions": 21}, "files": [{"sha": "97f603294212cafea962a86ded232440b042948e", "filename": "src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/565492083ffd4e52da5aa14fc520dd9606598ac4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565492083ffd4e52da5aa14fc520dd9606598ac4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=565492083ffd4e52da5aa14fc520dd9606598ac4", "patch": "@@ -231,6 +231,16 @@ impl Indent {\n         }\n     }\n \n+    pub fn from_width(config: &Config, width: usize) -> Indent {\n+        if config.hard_tabs() {\n+            let tab_num = width / config.tab_spaces();\n+            let alignment = width % config.tab_spaces();\n+            Indent::new(config.tab_spaces() * tab_num, alignment)\n+        } else {\n+            Indent::new(width, 0)\n+        }\n+    }\n+\n     pub fn empty() -> Indent {\n         Indent::new(0, 0)\n     }"}, {"sha": "12965b615600df08fa7c0763e7b810b44a7cad1b", "filename": "src/macros.rs", "status": "modified", "additions": 53, "deletions": 21, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/565492083ffd4e52da5aa14fc520dd9606598ac4/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565492083ffd4e52da5aa14fc520dd9606598ac4/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=565492083ffd4e52da5aa14fc520dd9606598ac4", "patch": "@@ -19,8 +19,6 @@\n // List-like invocations with parentheses will be formatted as function calls,\n // and those with brackets will be formatted as array literals.\n \n-use std::iter::repeat;\n-\n use syntax::ast;\n use syntax::codemap::BytePos;\n use syntax::parse::new_parser_from_tts;\n@@ -118,14 +116,18 @@ pub fn rewrite_macro(\n                 Ok(expr) => {\n                     // Recovered errors.\n                     if context.parse_session.span_diagnostic.has_errors() {\n-                        return indent_macro_snippet(&context.snippet(mac.span), shape.indent);\n+                        return indent_macro_snippet(\n+                            context,\n+                            &context.snippet(mac.span),\n+                            shape.indent,\n+                        );\n                     }\n \n                     expr\n                 }\n                 Err(mut e) => {\n                     e.cancel();\n-                    return indent_macro_snippet(&context.snippet(mac.span), shape.indent);\n+                    return indent_macro_snippet(context, &context.snippet(mac.span), shape.indent);\n                 }\n             };\n \n@@ -244,7 +246,7 @@ pub fn rewrite_macro(\n         }\n         MacroStyle::Braces => {\n             // Skip macro invocations with braces, for now.\n-            indent_macro_snippet(&context.snippet(mac.span), shape.indent)\n+            indent_macro_snippet(context, &context.snippet(mac.span), shape.indent)\n         }\n     }\n }\n@@ -308,32 +310,62 @@ fn macro_style(mac: &ast::Mac, context: &RewriteContext) -> MacroStyle {\n //      ),\n /// }\n /// ```\n-fn indent_macro_snippet(macro_str: &str, indent: Indent) -> Option<String> {\n-    let min_prefix_space_width =\n-        try_opt!(macro_str.lines().skip(1).map(get_prefix_space_width).min());\n-\n+fn indent_macro_snippet(\n+    context: &RewriteContext,\n+    macro_str: &str,\n+    indent: Indent,\n+) -> Option<String> {\n     let mut lines = macro_str.lines();\n-    let first_line = try_opt!(lines.next());\n+    let first_line = try_opt!(lines.next().map(|s| s.trim_right()));\n+    let mut trimmed_lines = Vec::with_capacity(16);\n+\n+    let min_prefix_space_width = try_opt!(\n+        lines\n+            .filter_map(|line| {\n+                let prefix_space_width = if is_empty_line(line) {\n+                    None\n+                } else {\n+                    Some(get_prefix_space_width(context, line))\n+                };\n+                trimmed_lines.push((line.trim(), prefix_space_width));\n+                prefix_space_width\n+            })\n+            .min()\n+    );\n \n     Some(\n         String::from(first_line) + \"\\n\" +\n-            &lines\n-                .map(|line| {\n-                    let new_indent_width = indent.width() +\n-                        get_prefix_space_width(line)\n-                            .checked_sub(min_prefix_space_width)\n-                            .unwrap_or(0);\n-                    repeat_white_space(new_indent_width) + line.trim()\n+            &trimmed_lines\n+                .iter()\n+                .map(|&(line, prefix_space_width)| match prefix_space_width {\n+                    Some(original_indent_width) => {\n+                        let new_indent_width = indent.width() +\n+                            original_indent_width\n+                                .checked_sub(min_prefix_space_width)\n+                                .unwrap_or(0);\n+                        let new_indent = Indent::from_width(context.config, new_indent_width);\n+                        new_indent.to_string(context.config) + line.trim()\n+                    }\n+                    None => String::new(),\n                 })\n                 .collect::<Vec<_>>()\n                 .join(\"\\n\"),\n     )\n }\n \n-fn get_prefix_space_width(s: &str) -> usize {\n-    s.chars().position(|c| c != ' ').unwrap_or(0)\n+fn get_prefix_space_width(context: &RewriteContext, s: &str) -> usize {\n+    let mut width = 0;\n+    let mut iter = s.chars();\n+    while let Some(c) = iter.next() {\n+        match c {\n+            ' ' => width += 1,\n+            '\\t' => width += context.config.tab_spaces(),\n+            _ => return width,\n+        }\n+    }\n+    width\n }\n \n-fn repeat_white_space(ws_count: usize) -> String {\n-    repeat(\" \").take(ws_count).collect::<String>()\n+fn is_empty_line(s: &str) -> bool {\n+    s.is_empty() || s.chars().all(char::is_whitespace)\n }"}, {"sha": "caccd75a700a2ada7d4d0eb778575c3bbd12e734", "filename": "tests/source/macros.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/565492083ffd4e52da5aa14fc520dd9606598ac4/tests%2Fsource%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565492083ffd4e52da5aa14fc520dd9606598ac4/tests%2Fsource%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacros.rs?ref=565492083ffd4e52da5aa14fc520dd9606598ac4", "patch": "@@ -134,6 +134,36 @@ fn issue_1885() {\n     }).collect::<Vec<_>>();\n }\n \n+fn issue_1917() {\n+    mod x {\n+        quickcheck! {\n+            fn test(a: String, s: String, b: String) -> TestResult {\n+                if a.find(&s).is_none() {\n+\n+                    TestResult::from_bool(true)\n+                } else {\n+                    TestResult::discard()\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn issue_1921() {\n+    // Macro with tabs.\n+    lazy_static! {\n+\tstatic ref ONE: u32 = 1;\n+\tstatic ref TWO: u32 = 2;\n+\tstatic ref THREE: u32 = 3;\n+\tstatic ref FOUR: u32 = {\n+\t\tlet mut acc = 1;\n+\t\tacc += 1;\n+\t\tacc += 2;\n+\t\tacc\n+\t}\n+}\n+}\n+\n // Put the following tests with macro invocations whose arguments cannot be parsed as expressioins\n // at the end of the file for now.\n "}, {"sha": "0b651cc5445e9d2be0e59e97505e4c062263755c", "filename": "tests/target/macros.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/565492083ffd4e52da5aa14fc520dd9606598ac4/tests%2Ftarget%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/565492083ffd4e52da5aa14fc520dd9606598ac4/tests%2Ftarget%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacros.rs?ref=565492083ffd4e52da5aa14fc520dd9606598ac4", "patch": "@@ -178,6 +178,36 @@ fn issue_1885() {\n         .collect::<Vec<_>>();\n }\n \n+fn issue_1917() {\n+    mod x {\n+        quickcheck! {\n+            fn test(a: String, s: String, b: String) -> TestResult {\n+                if a.find(&s).is_none() {\n+\n+                    TestResult::from_bool(true)\n+                } else {\n+                    TestResult::discard()\n+                }\n+            }\n+        }\n+    }\n+}\n+\n+fn issue_1921() {\n+    // Macro with tabs.\n+    lazy_static! {\n+        static ref ONE: u32 = 1;\n+        static ref TWO: u32 = 2;\n+        static ref THREE: u32 = 3;\n+        static ref FOUR: u32 = {\n+            let mut acc = 1;\n+            acc += 1;\n+            acc += 2;\n+            acc\n+        }\n+    }\n+}\n+\n // Put the following tests with macro invocations whose arguments cannot be parsed as expressioins\n // at the end of the file for now.\n "}]}