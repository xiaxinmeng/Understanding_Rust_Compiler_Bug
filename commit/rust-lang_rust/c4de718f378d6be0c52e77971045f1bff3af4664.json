{"sha": "c4de718f378d6be0c52e77971045f1bff3af4664", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZGU3MThmMzc4ZDZiZTBjNTJlNzc5NzEwNDVmMWJmZjNhZjQ2NjQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-16T23:33:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T05:12:34Z"}, "message": "rustdoc: Add tystr_pass module for extracting type strings", "tree": {"sha": "128bb0c9bb1c56d078aa37db159a2f63581d241c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/128bb0c9bb1c56d078aa37db159a2f63581d241c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4de718f378d6be0c52e77971045f1bff3af4664", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4de718f378d6be0c52e77971045f1bff3af4664", "html_url": "https://github.com/rust-lang/rust/commit/c4de718f378d6be0c52e77971045f1bff3af4664", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4de718f378d6be0c52e77971045f1bff3af4664/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "497814642f2ce491baa79f310932f358757ad2fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/497814642f2ce491baa79f310932f358757ad2fc", "html_url": "https://github.com/rust-lang/rust/commit/497814642f2ce491baa79f310932f358757ad2fc"}], "stats": {"total": 72, "additions": 71, "deletions": 1}, "files": [{"sha": "5be7a7d343274893e065e47a50b5b8ba49a7d154", "filename": "src/rustdoc/rustdoc.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4de718f378d6be0c52e77971045f1bff3af4664/src%2Frustdoc%2Frustdoc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/c4de718f378d6be0c52e77971045f1bff3af4664/src%2Frustdoc%2Frustdoc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rc?ref=c4de718f378d6be0c52e77971045f1bff3af4664", "patch": "@@ -12,4 +12,5 @@ mod extract;\n mod attr_parser;\n mod doc;\n mod gen;\n-mod fold;\n\\ No newline at end of file\n+mod fold;\n+mod tystr_pass;\n\\ No newline at end of file"}, {"sha": "8894fe88ca8f13d160c09b74decd360bad8274d5", "filename": "src/rustdoc/tystr_pass.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/c4de718f378d6be0c52e77971045f1bff3af4664/src%2Frustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4de718f378d6be0c52e77971045f1bff3af4664/src%2Frustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Ftystr_pass.rs?ref=c4de718f378d6be0c52e77971045f1bff3af4664", "patch": "@@ -0,0 +1,69 @@\n+import rustc::syntax::ast;\n+\n+export run;\n+\n+fn run(doc: doc::cratedoc, crate: @ast::crate) -> doc::cratedoc {\n+    let fold = fold::fold({\n+        fold_fn: fn~(\n+            f: fold::fold<@ast::crate>,\n+            d: doc::fndoc\n+        ) -> doc::fndoc {\n+            fold_fn(f, d)\n+        }\n+        with *fold::default_seq_fold(crate)\n+    });\n+    fold.fold_crate(fold, doc)\n+}\n+\n+fn fold_fn(\n+    fold: fold::fold<@ast::crate>,\n+    doc: doc::fndoc\n+) -> doc::fndoc {\n+    import rustc::middle::ast_map;\n+    import rustc::syntax::print::pprust;\n+\n+    let crate = fold.ctxt;\n+\n+    let map = ast_map::map_crate(*crate);\n+\n+    fn add_ret_ty(\n+        doc: option<doc::retdoc>,\n+        tystr: str\n+    ) -> option<doc::retdoc> {\n+        alt doc {\n+          some(doc) {\n+            fail \"unimplemented\";\n+          }\n+          none. {\n+            some({\n+                desc: none,\n+                ty: some(tystr)\n+            })\n+          }\n+        }\n+    }\n+\n+    ~{\n+        return: alt map.get(doc.id) {\n+          ast_map::node_item(@{\n+            node: ast::item_fn(decl, _, _), _\n+          }) {\n+            add_ret_ty(doc.return, pprust::ty_to_str(decl.output))\n+          }\n+        }\n+        with *doc\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+\n+    #[test]\n+    fn should_add_fn_ret_types() {\n+        let source = \"fn a() -> int { }\";\n+        let ast = parse::from_str(source);\n+        let doc = extract::extract(ast, \"\");\n+        let doc = run(doc, ast);\n+        assert option::get(doc.topmod.fns[0].return).ty == some(\"int\");\n+    }\n+}"}]}