{"sha": "7448f4861a8ee41b0a6d62b6bdaf623b3eeba453", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NDhmNDg2MWE4ZWU0MWIwYTZkNjJiNmJkYWY2MjNiM2VlYmE0NTM=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "github@kazlauskas.me", "date": "2015-12-31T15:28:57Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-12-31T16:52:20Z"}, "message": "Rollup merge of #30630 - tsion:mir-closure-args, r=nagisa\n\nPreviously, all references to closure arguments went to the argument before the one they should (e.g. to `arg1` when it was supposed to go to `arg2`). This was because the MIR builder did not account for the implicit arguments that come before the explicit arguments, and closures have one implicit argument - the struct containing the captures.\n\nThis is my test code and a diff of the MIR generated for the closure:\n\n```rust\nlet a = 2i32;\nlet _f = |b: i32| -> i32 { a + b }:\n```\n\n```diff\n--- old\t2015-12-29 23:16:32.027926372 -0600\n+++ new\t2015-12-29 23:16:42.975400757 -0600\n@@ -1,22 +1,22 @@\n fn(arg0: &[closure@closure-args.rs:8:14: 8:39 a:&i32], arg1: i32) -> i32 {\n     let var0: i32; // b\n     let tmp0: ();\n     let tmp1: i32;\n     let tmp2: i32;\n\n     bb0: {\n-        var0 = arg0;\n+        var0 = arg1;\n         tmp1 = (*(*arg0).0);\n         tmp2 = var0;\n         ReturnPointer = Add(tmp1, tmp2);\n         goto -> bb1;\n     }\n\n     bb1: {\n         return;\n     }\n\n     bb2: {\n         diverge;\n     }\n }\n```\n\n(If you're wondering where this text MIR output comes from, it's from another branch of mine waiting on https://github.com/rust-lang/rust/pull/30602 to get merged.)", "tree": {"sha": "e897e9492882c3f2633b0bfd30a4c7433707b684", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e897e9492882c3f2633b0bfd30a4c7433707b684"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7448f4861a8ee41b0a6d62b6bdaf623b3eeba453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7448f4861a8ee41b0a6d62b6bdaf623b3eeba453", "html_url": "https://github.com/rust-lang/rust/commit/7448f4861a8ee41b0a6d62b6bdaf623b3eeba453", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7448f4861a8ee41b0a6d62b6bdaf623b3eeba453/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aa4abdb3bef48e706605650a60a43146bb3998f", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa4abdb3bef48e706605650a60a43146bb3998f", "html_url": "https://github.com/rust-lang/rust/commit/1aa4abdb3bef48e706605650a60a43146bb3998f"}, {"sha": "f8b61340e33bbb24709a862fd834ec10c871413c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b61340e33bbb24709a862fd834ec10c871413c", "html_url": "https://github.com/rust-lang/rust/commit/f8b61340e33bbb24709a862fd834ec10c871413c"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "8347a03cda6f72318b879e8daae6dab3c2567c0c", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7448f4861a8ee41b0a6d62b6bdaf623b3eeba453/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7448f4861a8ee41b0a6d62b6bdaf623b3eeba453/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=7448f4861a8ee41b0a6d62b6bdaf623b3eeba453", "patch": "@@ -138,28 +138,25 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                      -> BlockAnd<Vec<ArgDecl<'tcx>>>\n     {\n         self.in_scope(argument_extent, block, |this| {\n-            let arg_decls = {\n-                let implicit_arg_decls = implicit_arguments.into_iter()\n-                                                           .map(|ty| ArgDecl { ty: ty });\n-\n-                // to start, translate the argument patterns and collect the\n-                // argument types.\n-                let explicit_arg_decls =\n-                    explicit_arguments\n-                    .into_iter()\n-                    .enumerate()\n-                    .map(|(index, (ty, pattern))| {\n+            // to start, translate the argument patterns and collect the argument types.\n+            let implicits = implicit_arguments.into_iter().map(|ty| (ty, None));\n+            let explicits = explicit_arguments.into_iter().map(|(ty, pat)| (ty, Some(pat)));\n+            let arg_decls =\n+                implicits\n+                .chain(explicits)\n+                .enumerate()\n+                .map(|(index, (ty, pattern))| {\n+                    if let Some(pattern) = pattern {\n                         let lvalue = Lvalue::Arg(index as u32);\n                         let pattern = this.hir.irrefutable_pat(pattern);\n                         unpack!(block = this.lvalue_into_pattern(block,\n                                                                  argument_extent,\n                                                                  pattern,\n                                                                  &lvalue));\n-                        ArgDecl { ty: ty }\n-                    });\n-\n-                implicit_arg_decls.chain(explicit_arg_decls).collect()\n-            };\n+                    }\n+                    ArgDecl { ty: ty }\n+                })\n+                .collect();\n \n             // start the first basic block and translate the body\n             unpack!(block = this.ast_block(&Lvalue::ReturnPointer, block, ast_block));"}]}