{"sha": "9bdc273f038dfa573d8fbd377c063f330922a048", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZGMyNzNmMDM4ZGZhNTczZDhmYmQzNzdjMDYzZjMzMDkyMmEwNDg=", "commit": {"author": {"name": "Andrea Nall", "email": "anall@andreanall.com", "date": "2021-03-07T23:58:39Z"}, "committer": {"name": "Andrea Nall", "email": "anall@andreanall.com", "date": "2021-03-07T23:58:39Z"}, "message": "relocate functions from `clippy_lints::types`\n\nrelocate `is_ty_param_lang_item` and `is_ty_param_diagnostic_item` to `clippy_utils`", "tree": {"sha": "98fd16da4446641124d2a1b74bd8b079a0362bea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98fd16da4446641124d2a1b74bd8b079a0362bea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bdc273f038dfa573d8fbd377c063f330922a048", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bdc273f038dfa573d8fbd377c063f330922a048", "html_url": "https://github.com/rust-lang/rust/commit/9bdc273f038dfa573d8fbd377c063f330922a048", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bdc273f038dfa573d8fbd377c063f330922a048/comments", "author": {"login": "anall", "id": 12371, "node_id": "MDQ6VXNlcjEyMzcx", "avatar_url": "https://avatars.githubusercontent.com/u/12371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anall", "html_url": "https://github.com/anall", "followers_url": "https://api.github.com/users/anall/followers", "following_url": "https://api.github.com/users/anall/following{/other_user}", "gists_url": "https://api.github.com/users/anall/gists{/gist_id}", "starred_url": "https://api.github.com/users/anall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anall/subscriptions", "organizations_url": "https://api.github.com/users/anall/orgs", "repos_url": "https://api.github.com/users/anall/repos", "events_url": "https://api.github.com/users/anall/events{/privacy}", "received_events_url": "https://api.github.com/users/anall/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anall", "id": 12371, "node_id": "MDQ6VXNlcjEyMzcx", "avatar_url": "https://avatars.githubusercontent.com/u/12371?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anall", "html_url": "https://github.com/anall", "followers_url": "https://api.github.com/users/anall/followers", "following_url": "https://api.github.com/users/anall/following{/other_user}", "gists_url": "https://api.github.com/users/anall/gists{/gist_id}", "starred_url": "https://api.github.com/users/anall/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anall/subscriptions", "organizations_url": "https://api.github.com/users/anall/orgs", "repos_url": "https://api.github.com/users/anall/repos", "events_url": "https://api.github.com/users/anall/events{/privacy}", "received_events_url": "https://api.github.com/users/anall/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3877a410beac040c0cea3dfa5402d7a2da19df40", "url": "https://api.github.com/repos/rust-lang/rust/commits/3877a410beac040c0cea3dfa5402d7a2da19df40", "html_url": "https://github.com/rust-lang/rust/commit/3877a410beac040c0cea3dfa5402d7a2da19df40"}], "stats": {"total": 70, "additions": 37, "deletions": 33}, "files": [{"sha": "ce201b956d83d83cceeaf97fb9e26983a11346fe", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 5, "deletions": 31, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9bdc273f038dfa573d8fbd377c063f330922a048/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdc273f038dfa573d8fbd377c063f330922a048/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=9bdc273f038dfa573d8fbd377c063f330922a048", "patch": "@@ -23,7 +23,7 @@ use rustc_semver::RustcVersion;\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::sym;\n use rustc_target::abi::LayoutOf;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::hir_ty_to_ty;\n@@ -33,10 +33,10 @@ use crate::utils::paths;\n use crate::utils::sugg::Sugg;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, get_qpath_generic_tys, higher, in_constant, indent_of, int_bits,\n-    is_hir_ty_cfg_dependant, is_type_diagnostic_item, last_path_segment, match_def_path, match_path, meets_msrv,\n-    method_chain_args, multispan_sugg, numeric_literal::NumericLiteral, reindent_multiline, sext, snippet, snippet_opt,\n-    snippet_with_applicability, snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg,\n-    span_lint_and_then, unsext,\n+    is_hir_ty_cfg_dependant, is_ty_param_diagnostic_item, is_ty_param_lang_item, is_type_diagnostic_item,\n+    last_path_segment, match_def_path, match_path, meets_msrv, method_chain_args, multispan_sugg,\n+    numeric_literal::NumericLiteral, reindent_multiline, sext, snippet, snippet_opt, snippet_with_applicability,\n+    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then, unsext,\n };\n \n declare_clippy_lint! {\n@@ -287,32 +287,6 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     }\n }\n \n-/// Checks if the first type parameter is a lang item.\n-fn is_ty_param_lang_item(cx: &LateContext<'_>, qpath: &QPath<'tcx>, item: LangItem) -> Option<&'tcx hir::Ty<'tcx>> {\n-    let ty = get_qpath_generic_tys(qpath).next()?;\n-\n-    if let TyKind::Path(qpath) = &ty.kind {\n-        cx.qpath_res(qpath, ty.hir_id)\n-            .opt_def_id()\n-            .and_then(|id| (cx.tcx.lang_items().require(item) == Ok(id)).then(|| ty))\n-    } else {\n-        None\n-    }\n-}\n-\n-/// Checks if the first type parameter is a diagnostic item.\n-fn is_ty_param_diagnostic_item(cx: &LateContext<'_>, qpath: &QPath<'tcx>, item: Symbol) -> Option<&'tcx hir::Ty<'tcx>> {\n-    let ty = get_qpath_generic_tys(qpath).next()?;\n-\n-    if let TyKind::Path(qpath) = &ty.kind {\n-        cx.qpath_res(qpath, ty.hir_id)\n-            .opt_def_id()\n-            .and_then(|id| cx.tcx.is_diagnostic_item(item, id).then(|| ty))\n-    } else {\n-        None\n-    }\n-}\n-\n fn match_buffer_type(cx: &LateContext<'_>, qpath: &QPath<'_>) -> Option<&'static str> {\n     if is_ty_param_diagnostic_item(cx, qpath, sym::string_type).is_some() {\n         Some(\"str\")"}, {"sha": "3845667802d80bde97e047185ea3a56d34a0eb63", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9bdc273f038dfa573d8fbd377c063f330922a048/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bdc273f038dfa573d8fbd377c063f330922a048/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=9bdc273f038dfa573d8fbd377c063f330922a048", "patch": "@@ -64,8 +64,8 @@ use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::Node;\n use rustc_hir::{\n     def, Arm, Block, Body, Constness, Crate, Expr, ExprKind, FnDecl, GenericArgs, HirId, Impl, ImplItem, ImplItemKind,\n-    Item, ItemKind, MatchSource, Param, Pat, PatKind, Path, PathSegment, QPath, TraitItem, TraitItemKind, TraitRef,\n-    TyKind, Unsafety,\n+    Item, ItemKind, LangItem, MatchSource, Param, Pat, PatKind, Path, PathSegment, QPath, TraitItem, TraitItemKind,\n+    TraitRef, TyKind, Unsafety,\n };\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n@@ -232,6 +232,36 @@ pub fn is_type_lang_item(cx: &LateContext<'_>, ty: Ty<'_>, lang_item: hir::LangI\n     }\n }\n \n+/// Checks if the first type parameter is a lang item.\n+pub fn is_ty_param_lang_item(cx: &LateContext<'_>, qpath: &QPath<'tcx>, item: LangItem) -> Option<&'tcx hir::Ty<'tcx>> {\n+    let ty = get_qpath_generic_tys(qpath).next()?;\n+\n+    if let TyKind::Path(qpath) = &ty.kind {\n+        cx.qpath_res(qpath, ty.hir_id)\n+            .opt_def_id()\n+            .and_then(|id| (cx.tcx.lang_items().require(item) == Ok(id)).then(|| ty))\n+    } else {\n+        None\n+    }\n+}\n+\n+/// Checks if the first type parameter is a diagnostic item.\n+pub fn is_ty_param_diagnostic_item(\n+    cx: &LateContext<'_>,\n+    qpath: &QPath<'tcx>,\n+    item: Symbol,\n+) -> Option<&'tcx hir::Ty<'tcx>> {\n+    let ty = get_qpath_generic_tys(qpath).next()?;\n+\n+    if let TyKind::Path(qpath) = &ty.kind {\n+        cx.qpath_res(qpath, ty.hir_id)\n+            .opt_def_id()\n+            .and_then(|id| cx.tcx.is_diagnostic_item(item, id).then(|| ty))\n+    } else {\n+        None\n+    }\n+}\n+\n /// Checks if the method call given in `expr` belongs to the given trait.\n pub fn match_trait_method(cx: &LateContext<'_>, expr: &Expr<'_>, path: &[&str]) -> bool {\n     let def_id = cx.typeck_results().type_dependent_def_id(expr.hir_id).unwrap();"}]}