{"sha": "3c4abb5b800dc5884e0d39bdf07b61a94b0361ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNGFiYjViODAwZGM1ODg0ZTBkMzliZGYwN2I2MWE5NGIwMzYxYWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-28T20:32:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-12-28T20:32:42Z"}, "message": "Auto merge of #3561 - fuerstenau:master, r=oli-obk\n\nSuggest `.as_ref()?` instead of `?` in certain circumstances.", "tree": {"sha": "17a8d73183881b301e105002bd8153daf1a4767e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17a8d73183881b301e105002bd8153daf1a4767e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c4abb5b800dc5884e0d39bdf07b61a94b0361ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4abb5b800dc5884e0d39bdf07b61a94b0361ad", "html_url": "https://github.com/rust-lang/rust/commit/3c4abb5b800dc5884e0d39bdf07b61a94b0361ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c4abb5b800dc5884e0d39bdf07b61a94b0361ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7bdf500d93895b6c02f8ae6a73002207f85e523", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7bdf500d93895b6c02f8ae6a73002207f85e523", "html_url": "https://github.com/rust-lang/rust/commit/f7bdf500d93895b6c02f8ae6a73002207f85e523"}, {"sha": "8be7050b740c0e48a921e01446d5ec0e9a35881d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8be7050b740c0e48a921e01446d5ec0e9a35881d", "html_url": "https://github.com/rust-lang/rust/commit/8be7050b740c0e48a921e01446d5ec0e9a35881d"}], "stats": {"total": 146, "additions": 107, "deletions": 39}, "files": [{"sha": "76fb63506818510b9dd76c53d3c2aaab89235b0a", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/3c4abb5b800dc5884e0d39bdf07b61a94b0361ad/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c4abb5b800dc5884e0d39bdf07b61a94b0361ad/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=3c4abb5b800dc5884e0d39bdf07b61a94b0361ad", "patch": "@@ -72,52 +72,50 @@ impl Pass {\n             if Self::is_option(cx, subject);\n \n             then {\n+                let receiver_str = &Sugg::hir(cx, subject, \"..\");\n+                let mut replacement: Option<String> = None;\n                 if let Some(else_) = else_ {\n                     if_chain! {\n                         if let ExprKind::Block(block, None) = &else_.node;\n                         if block.stmts.len() == 0;\n                         if let Some(block_expr) = &block.expr;\n                         if SpanlessEq::new(cx).ignore_fn().eq_expr(subject, block_expr);\n                         then {\n-                            span_lint_and_then(\n-                                cx,\n-                                QUESTION_MARK,\n-                                expr.span,\n-                                \"this block may be rewritten with the `?` operator\",\n-                                |db| {\n-                                    db.span_suggestion_with_applicability(\n-                                        expr.span,\n-                                        \"replace_it_with\",\n-                                        format!(\"Some({}?)\", Sugg::hir(cx, subject, \"..\")),\n-                                        Applicability::MaybeIncorrect, // snippet\n-                                    );\n-                                }\n-                            )\n+                            replacement = Some(format!(\"Some({}?)\", receiver_str));\n                         }\n                     }\n-                    return;\n+                } else if Self::moves_by_default(cx, subject) {\n+                        replacement = Some(format!(\"{}.as_ref()?;\", receiver_str));\n+                } else {\n+                        replacement = Some(format!(\"{}?;\", receiver_str));\n                 }\n \n-                span_lint_and_then(\n-                    cx,\n-                    QUESTION_MARK,\n-                    expr.span,\n-                    \"this block may be rewritten with the `?` operator\",\n-                    |db| {\n-                        let receiver_str = &Sugg::hir(cx, subject, \"..\");\n-\n-                        db.span_suggestion_with_applicability(\n-                            expr.span,\n-                            \"replace_it_with\",\n-                            format!(\"{}?;\", receiver_str),\n-                            Applicability::MaybeIncorrect, // snippet\n-                        );\n-                    }\n-                )\n+                if let Some(replacement_str) = replacement {\n+                    span_lint_and_then(\n+                        cx,\n+                        QUESTION_MARK,\n+                        expr.span,\n+                        \"this block may be rewritten with the `?` operator\",\n+                        |db| {\n+                            db.span_suggestion_with_applicability(\n+                                expr.span,\n+                                \"replace_it_with\",\n+                                replacement_str,\n+                                Applicability::MaybeIncorrect, // snippet\n+                            );\n+                        }\n+                    )\n+               }\n             }\n         }\n     }\n \n+    fn moves_by_default(cx: &LateContext<'_, '_>, expression: &Expr) -> bool {\n+        let expr_ty = cx.tables.expr_ty(expression);\n+\n+        expr_ty.moves_by_default(cx.tcx, cx.param_env, expression.span)\n+    }\n+\n     fn is_option(cx: &LateContext<'_, '_>, expression: &Expr) -> bool {\n         let expr_ty = cx.tables.expr_ty(expression);\n "}, {"sha": "7e749d164ca8502d1cf4b2c596d4902c4b672ba5", "filename": "tests/ui/question_mark.rs", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/3c4abb5b800dc5884e0d39bdf07b61a94b0361ad/tests%2Fui%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c4abb5b800dc5884e0d39bdf07b61a94b0361ad/tests%2Fui%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.rs?ref=3c4abb5b800dc5884e0d39bdf07b61a94b0361ad", "patch": "@@ -15,6 +15,15 @@ fn some_func(a: Option<u32>) -> Option<u32> {\n     a\n }\n \n+fn some_other_func(a: Option<u32>) -> Option<u32> {\n+    if a.is_none() {\n+        return None;\n+    } else {\n+        return Some(0);\n+    }\n+    unreachable!()\n+}\n+\n pub enum SeemsOption<T> {\n     Some(T),\n     None,\n@@ -37,11 +46,11 @@ fn returns_something_similar_to_option(a: SeemsOption<u32>) -> SeemsOption<u32>\n     a\n }\n \n-pub struct SomeStruct {\n+pub struct CopyStruct {\n     pub opt: Option<u32>,\n }\n \n-impl SomeStruct {\n+impl CopyStruct {\n     #[rustfmt::skip]\n     pub fn func(&self) -> Option<u32> {\n         if (self.opt).is_none() {\n@@ -62,12 +71,49 @@ impl SomeStruct {\n     }\n }\n \n+#[derive(Clone)]\n+pub struct MoveStruct {\n+    pub opt: Option<Vec<u32>>,\n+}\n+\n+impl MoveStruct {\n+    pub fn ref_func(&self) -> Option<Vec<u32>> {\n+        if self.opt.is_none() {\n+            return None;\n+        }\n+\n+        self.opt.clone()\n+    }\n+\n+    pub fn mov_func_reuse(self) -> Option<Vec<u32>> {\n+        if self.opt.is_none() {\n+            return None;\n+        }\n+\n+        self.opt\n+    }\n+\n+    pub fn mov_func_no_use(self) -> Option<Vec<u32>> {\n+        if self.opt.is_none() {\n+            return None;\n+        }\n+        Some(Vec::new())\n+    }\n+}\n+\n fn main() {\n     some_func(Some(42));\n     some_func(None);\n \n-    let some_struct = SomeStruct { opt: Some(54) };\n-    some_struct.func();\n+    let copy_struct = CopyStruct { opt: Some(54) };\n+    copy_struct.func();\n+\n+    let move_struct = MoveStruct {\n+        opt: Some(vec![42, 1337]),\n+    };\n+    move_struct.ref_func();\n+    move_struct.clone().mov_func_reuse();\n+    move_struct.clone().mov_func_no_use();\n \n     let so = SeemsOption::Some(45);\n     returns_something_similar_to_option(so);"}, {"sha": "a0b8781377048ef2c9d374bde6832f0e7fe44e80", "filename": "tests/ui/question_mark.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3c4abb5b800dc5884e0d39bdf07b61a94b0361ad/tests%2Fui%2Fquestion_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c4abb5b800dc5884e0d39bdf07b61a94b0361ad/tests%2Fui%2Fquestion_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fquestion_mark.stderr?ref=3c4abb5b800dc5884e0d39bdf07b61a94b0361ad", "patch": "@@ -9,23 +9,23 @@ LL | |     }\n    = note: `-D clippy::question-mark` implied by `-D warnings`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:47:9\n+  --> $DIR/question_mark.rs:56:9\n    |\n LL | /         if (self.opt).is_none() {\n LL | |             return None;\n LL | |         }\n    | |_________^ help: replace_it_with: `(self.opt)?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:51:9\n+  --> $DIR/question_mark.rs:60:9\n    |\n LL | /         if self.opt.is_none() {\n LL | |             return None\n LL | |         }\n    | |_________^ help: replace_it_with: `self.opt?;`\n \n error: this block may be rewritten with the `?` operator\n-  --> $DIR/question_mark.rs:55:17\n+  --> $DIR/question_mark.rs:64:17\n    |\n LL |           let _ = if self.opt.is_none() {\n    |  _________________^\n@@ -35,5 +35,29 @@ LL | |             self.opt\n LL | |         };\n    | |_________^ help: replace_it_with: `Some(self.opt?)`\n \n-error: aborting due to 4 previous errors\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:81:9\n+   |\n+LL | /         if self.opt.is_none() {\n+LL | |             return None;\n+LL | |         }\n+   | |_________^ help: replace_it_with: `self.opt.as_ref()?;`\n+\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:89:9\n+   |\n+LL | /         if self.opt.is_none() {\n+LL | |             return None;\n+LL | |         }\n+   | |_________^ help: replace_it_with: `self.opt.as_ref()?;`\n+\n+error: this block may be rewritten with the `?` operator\n+  --> $DIR/question_mark.rs:97:9\n+   |\n+LL | /         if self.opt.is_none() {\n+LL | |             return None;\n+LL | |         }\n+   | |_________^ help: replace_it_with: `self.opt.as_ref()?;`\n+\n+error: aborting due to 7 previous errors\n "}]}