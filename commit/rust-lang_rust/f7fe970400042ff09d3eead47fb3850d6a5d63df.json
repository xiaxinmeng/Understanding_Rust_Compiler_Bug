{"sha": "f7fe970400042ff09d3eead47fb3850d6a5d63df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3ZmU5NzA0MDAwNDJmZjA5ZDNlZWFkNDdmYjM4NTBkNmE1ZDYzZGY=", "commit": {"author": {"name": "Garrett Berg", "email": "googberg@gmail.com", "date": "2017-10-06T22:15:29Z"}, "committer": {"name": "Garrett Berg", "email": "googberg@gmail.com", "date": "2017-10-13T04:32:45Z"}, "message": "incr comp: rustc_clean/dirty auto assert\n\nThis adds auto-assertion to `rustc_clean/dirty` and also implements\nmore comprehensive testing for\n\n - src/test/incremental/hashes/enum_constructors.rs\n - src/test/incremental/hashes/enum_defs.rs\n - src/test/incremental/hashes/extern_mods.rs\n - src/test/incremental/hashes/inherent_impls.rs\n - src/test/incremental/hashes/statics.rs\n - src/test/incremental/hashes/struct_constructors.rs\n - src/test/incremental/hashes/type_defs.rs\n\ntrait_defs.rs and trait_impl.rs are blocked on a hard to triage\ncompiler ICE (at least hard for a newbie like me) having to do\nwith some DepNodes not getting computed for traits.\nA FIXME has been added in the source to reflect this continued\nwork.", "tree": {"sha": "077eadfd2c12e43c85e93ab58711e505b6cf842e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/077eadfd2c12e43c85e93ab58711e505b6cf842e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7fe970400042ff09d3eead47fb3850d6a5d63df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7fe970400042ff09d3eead47fb3850d6a5d63df", "html_url": "https://github.com/rust-lang/rust/commit/f7fe970400042ff09d3eead47fb3850d6a5d63df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7fe970400042ff09d3eead47fb3850d6a5d63df/comments", "author": {"login": "vitiral", "id": 5587659, "node_id": "MDQ6VXNlcjU1ODc2NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5587659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vitiral", "html_url": "https://github.com/vitiral", "followers_url": "https://api.github.com/users/vitiral/followers", "following_url": "https://api.github.com/users/vitiral/following{/other_user}", "gists_url": "https://api.github.com/users/vitiral/gists{/gist_id}", "starred_url": "https://api.github.com/users/vitiral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vitiral/subscriptions", "organizations_url": "https://api.github.com/users/vitiral/orgs", "repos_url": "https://api.github.com/users/vitiral/repos", "events_url": "https://api.github.com/users/vitiral/events{/privacy}", "received_events_url": "https://api.github.com/users/vitiral/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vitiral", "id": 5587659, "node_id": "MDQ6VXNlcjU1ODc2NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/5587659?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vitiral", "html_url": "https://github.com/vitiral", "followers_url": "https://api.github.com/users/vitiral/followers", "following_url": "https://api.github.com/users/vitiral/following{/other_user}", "gists_url": "https://api.github.com/users/vitiral/gists{/gist_id}", "starred_url": "https://api.github.com/users/vitiral/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vitiral/subscriptions", "organizations_url": "https://api.github.com/users/vitiral/orgs", "repos_url": "https://api.github.com/users/vitiral/repos", "events_url": "https://api.github.com/users/vitiral/events{/privacy}", "received_events_url": "https://api.github.com/users/vitiral/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff8e264950b070578c8c8187241f4ca55ebf28fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff8e264950b070578c8c8187241f4ca55ebf28fe", "html_url": "https://github.com/rust-lang/rust/commit/ff8e264950b070578c8c8187241f4ca55ebf28fe"}], "stats": {"total": 1239, "additions": 774, "deletions": 465}, "files": [{"sha": "690db8a552248ddf10d175e0b070a2a311bbef3f", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=f7fe970400042ff09d3eead47fb3850d6a5d63df", "patch": "@@ -19,7 +19,7 @@ mod safe;\n mod serialized;\n \n pub use self::dep_tracking_map::{DepTrackingMap, DepTrackingMapConfig};\n-pub use self::dep_node::{DepNode, DepKind, DepConstructor, WorkProductId};\n+pub use self::dep_node::{DepNode, DepKind, DepConstructor, WorkProductId, label_strs};\n pub use self::graph::{DepGraph, WorkProduct, DepNodeIndex, DepNodeColor};\n pub use self::prev::PreviousDepGraph;\n pub use self::query::DepGraphQuery;"}, {"sha": "5f97eaf21d20bb5edb625ff6e62b9155d9f80564", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 394, "deletions": 28, "changes": 422, "blob_url": "https://github.com/rust-lang/rust/blob/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=f7fe970400042ff09d3eead47fb3850d6a5d63df", "patch": "@@ -13,12 +13,12 @@\n //! we will compare the fingerprint from the current and from the previous\n //! compilation session as appropriate:\n //!\n-//! - `#[rustc_dirty(label=\"TypeckTables\", cfg=\"rev2\")]` if we are\n+//! - `#[rustc_clean(cfg=\"rev2\", except=\"TypeckTables\")]` if we are\n //!   in `#[cfg(rev2)]`, then the fingerprints associated with\n //!   `DepNode::TypeckTables(X)` must be DIFFERENT (`X` is the def-id of the\n //!   current node).\n-//! - `#[rustc_clean(label=\"TypeckTables\", cfg=\"rev2\")]` same as above,\n-//!   except that the fingerprints must be the SAME.\n+//! - `#[rustc_clean(cfg=\"rev2\")]` same as above, except that the\n+//!   fingerprints must be the SAME (along with all other fingerprints).\n //!\n //! Errors are reported if we are in the suitable configuration but\n //! the required condition is not met.\n@@ -39,10 +39,15 @@\n //! previous revision to compare things to.\n //!\n \n+#![allow(dead_code)]\n+\n use std::collections::HashSet;\n+use std::iter::FromIterator;\n use std::vec::Vec;\n-use rustc::dep_graph::DepNode;\n+use rustc::dep_graph::{DepNode, label_strs};\n use rustc::hir;\n+use rustc::hir::{Item_ as HirItem, ImplItemKind, TraitItemKind};\n+use rustc::hir::map::Node as HirNode;\n use rustc::hir::def_id::DefId;\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n use rustc::hir::intravisit;\n@@ -53,11 +58,182 @@ use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use syntax_pos::Span;\n use rustc::ty::TyCtxt;\n \n-const LABEL: &'static str = \"label\";\n-const CFG: &'static str = \"cfg\";\n+const EXCEPT: &str = \"except\";\n+const LABEL: &str = \"label\";\n+const CFG: &str = \"cfg\";\n+\n+// Base and Extra labels to build up the labels\n+\n+/// For typedef, constants, and statics\n+const BASE_CONST: &[&str] = &[\n+    label_strs::TypeOfItem,\n+];\n+\n+/// DepNodes for functions + methods\n+const BASE_FN: &[&str] = &[\n+    // Callers will depend on the signature of these items, so we better test\n+    label_strs::FnSignature,\n+    label_strs::GenericsOfItem,\n+    label_strs::PredicatesOfItem,\n+    label_strs::TypeOfItem,\n+\n+    // And a big part of compilation (that we eventually want to cache) is type inference\n+    // information:\n+    label_strs::TypeckTables,\n+];\n+\n+/// DepNodes for Hir, which is pretty much everything\n+const BASE_HIR: &[&str] = &[\n+    // Hir and HirBody should be computed for all nodes\n+    label_strs::Hir,\n+    label_strs::HirBody,\n+];\n+\n+/// `impl` implementation of struct/trait\n+const BASE_IMPL: &[&str] = &[\n+    label_strs::AssociatedItemDefIds,\n+    label_strs::GenericsOfItem,\n+    label_strs::ImplTraitRef,\n+];\n+\n+/// DepNodes for MirValidated/Optimized, which is relevant in \"executable\"\n+/// code, i.e. functions+methods\n+const BASE_MIR: &[&str] = &[\n+    label_strs::MirOptimized,\n+    label_strs::MirValidated,\n+];\n+\n+/// Struct, Enum and Union DepNodes\n+///\n+/// Note that changing the type of a field does not change the type of the struct or enum, but\n+/// adding/removing fields or changing a fields name or visibility does.\n+const BASE_STRUCT: &[&str] = &[\n+    label_strs::GenericsOfItem,\n+    label_strs::PredicatesOfItem,\n+    label_strs::TypeOfItem,\n+];\n+\n+/// Trait Definition DepNodes\n+const BASE_TRAIT_DEF: &[&str] = &[\n+    label_strs::AssociatedItemDefIds,\n+    label_strs::GenericsOfItem,\n+    label_strs::ObjectSafety,\n+    label_strs::PredicatesOfItem,\n+    label_strs::SpecializationGraph,\n+    label_strs::TraitDefOfItem,\n+    label_strs::TraitImpls,\n+];\n+\n+/// extra DepNodes for methods (+fn)\n+const EXTRA_ASSOCIATED: &[&str] = &[\n+    label_strs::AssociatedItems,\n+];\n+\n+const EXTRA_TRAIT: &[&str] = &[\n+    label_strs::TraitOfItem,\n+];\n+\n+// Fully Built Labels\n+\n+const LABELS_CONST: &[&[&str]] = &[\n+    BASE_HIR,\n+    BASE_CONST,\n+];\n+\n+/// Constant/Typedef in an impl\n+const LABELS_CONST_ASSOCIATED: &[&[&str]] = &[\n+    BASE_HIR,\n+    BASE_CONST,\n+    EXTRA_ASSOCIATED,\n+];\n+\n+/// Trait-Const/Typedef DepNodes\n+const LABELS_CONST_TRAIT: &[&[&str]] = &[\n+    BASE_HIR,\n+    BASE_CONST,\n+    EXTRA_ASSOCIATED,\n+    EXTRA_TRAIT,\n+];\n+\n+/// Function DepNode\n+const LABELS_FN: &[&[&str]] = &[\n+    BASE_HIR,\n+    BASE_MIR,\n+    BASE_FN,\n+];\n+\n+/// Method DepNodes\n+const LABELS_FN_ASSOCIATED: &[&[&str]] = &[\n+    BASE_HIR,\n+    BASE_MIR,\n+    BASE_FN,\n+    EXTRA_ASSOCIATED,\n+];\n+\n+/// Trait-Method DepNodes\n+const LABELS_FN_TRAIT: &[&[&str]] = &[\n+    BASE_HIR,\n+    BASE_MIR,\n+    BASE_FN,\n+    EXTRA_ASSOCIATED,\n+    EXTRA_TRAIT,\n+];\n+\n+/// For generic cases like inline-assemply/mod/etc\n+const LABELS_HIR_ONLY: &[&[&str]] = &[\n+    BASE_HIR,\n+];\n+\n+/// Impl DepNodes\n+const LABELS_IMPL: &[&[&str]] = &[\n+    BASE_HIR,\n+    BASE_IMPL,\n+];\n+\n+/// Struct DepNodes\n+const LABELS_STRUCT: &[&[&str]] = &[\n+    BASE_HIR,\n+    BASE_STRUCT,\n+];\n+\n+/// Trait Definition DepNodes\n+const LABELS_TRAIT: &[&[&str]] = &[\n+    BASE_HIR,\n+    BASE_TRAIT_DEF,\n+];\n+\n+\n+// FIXME: Struct/Enum/Unions Fields (there is currently no way to attach these)\n+//\n+// Fields are kind of separate from their containers, as they can change independently from\n+// them. We should at least check\n+//\n+//     TypeOfItem for these.\n \n type Labels = HashSet<String>;\n \n+/// Represents the requested configuration by rustc_clean/dirty\n+struct Assertion {\n+    clean: Labels,\n+    dirty: Labels,\n+}\n+\n+impl Assertion {\n+    fn from_clean_labels(labels: Labels) -> Assertion {\n+        Assertion {\n+            clean: labels,\n+            dirty: Labels::new(),\n+        }\n+    }\n+\n+    fn from_dirty_labels(labels: Labels) -> Assertion {\n+        Assertion {\n+            clean: Labels::new(),\n+            dirty: labels,\n+        }\n+    }\n+}\n+\n pub fn check_dirty_clean_annotations<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     // can't add `#[rustc_dirty]` etc without opting in to this feature\n     if !tcx.sess.features.borrow().rustc_attrs {\n@@ -91,14 +267,189 @@ pub struct DirtyCleanVisitor<'a, 'tcx:'a> {\n }\n \n impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n-    fn labels(&self, attr: &Attribute) -> Labels {\n+\n+    /// Possibly \"deserialize\" the attribute into a clean/dirty assertion\n+    fn assertion_maybe(&mut self, item_id: ast::NodeId, attr: &Attribute)\n+        -> Option<Assertion>\n+    {\n+        let is_clean = if attr.check_name(ATTR_DIRTY) {\n+            false\n+        } else if attr.check_name(ATTR_CLEAN) {\n+            true\n+        } else {\n+            // skip: not rustc_clean/dirty\n+            return None\n+        };\n+        if !check_config(self.tcx, attr) {\n+            // skip: not the correct `cfg=`\n+            return None;\n+        }\n+        let assertion = if let Some(labels) = self.labels(attr) {\n+            if is_clean {\n+                Assertion::from_clean_labels(labels)\n+            } else {\n+                Assertion::from_dirty_labels(labels)\n+            }\n+        } else {\n+            self.assertion_auto(item_id, attr, is_clean)\n+        };\n+        Some(assertion)\n+    }\n+\n+    /// Get the \"auto\" assertion on pre-validated attr, along with the `except` labels\n+    fn assertion_auto(&mut self, item_id: ast::NodeId, attr: &Attribute, is_clean: bool)\n+        -> Assertion\n+    {\n+        let (name, mut auto) = self.auto_labels(item_id, attr);\n+        let except = self.except(attr);\n+        for e in except.iter() {\n+            if !auto.remove(e) {\n+                let msg = format!(\n+                    \"`except` specified DepNodes that can not be affected for \\\"{}\\\": \\\"{}\\\"\",\n+                    name,\n+                    e\n+                );\n+                self.tcx.sess.span_fatal(attr.span, &msg);\n+            }\n+        }\n+        if is_clean {\n+            Assertion {\n+                clean: auto,\n+                dirty: except,\n+            }\n+        } else {\n+            Assertion {\n+                clean: except,\n+                dirty: auto,\n+            }\n+        }\n+    }\n+\n+    fn labels(&self, attr: &Attribute) -> Option<Labels> {\n         for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n             if item.check_name(LABEL) {\n+                let value = expect_associated_value(self.tcx, &item);\n+                return Some(self.resolve_labels(&item, value.as_str().as_ref()));\n+            }\n+        }\n+        None\n+    }\n+\n+    /// `except=` attribute value\n+    fn except(&self, attr: &Attribute) -> Labels {\n+        for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n+            if item.check_name(EXCEPT) {\n                 let value = expect_associated_value(self.tcx, &item);\n                 return self.resolve_labels(&item, value.as_str().as_ref());\n             }\n         }\n-        self.tcx.sess.span_fatal(attr.span, \"no `label` found\");\n+        // if no `label` or `except` is given, only the node's group are asserted\n+        Labels::new()\n+    }\n+\n+    /// Return all DepNode labels that should be asserted for this item.\n+    /// index=0 is the \"name\" used for error messages\n+    fn auto_labels(&mut self, item_id: ast::NodeId, attr: &Attribute) -> (&'static str, Labels) {\n+        let node = self.tcx.hir.get(item_id);\n+        let (name, labels) = match node {\n+            HirNode::NodeItem(item) => {\n+                match item.node {\n+                    // note: these are in the same order as hir::Item_;\n+                    // FIXME(michaelwoerister): do commented out ones\n+\n+                    // // An `extern crate` item, with optional original crate name,\n+                    // HirItem::ItemExternCrate(..),  // intentionally no assertions\n+\n+                    // // `use foo::bar::*;` or `use foo::bar::baz as quux;`\n+                    // HirItem::ItemUse(..),  // intentionally no assertions\n+\n+                    // A `static` item\n+                    HirItem::ItemStatic(..) => (\"ItemStatic\", LABELS_CONST),\n+\n+                    // A `const` item\n+                    HirItem::ItemConst(..) => (\"ItemConst\", LABELS_CONST),\n+\n+                    // A function declaration\n+                    HirItem::ItemFn(..) => (\"ItemFn\", LABELS_FN),\n+\n+                    // // A module\n+                    HirItem::ItemMod(..) =>(\"ItemMod\", LABELS_HIR_ONLY),\n+\n+                    // // An external module\n+                    HirItem::ItemForeignMod(..) => (\"ItemForeignMod\", LABELS_HIR_ONLY),\n+\n+                    // Module-level inline assembly (from global_asm!)\n+                    HirItem::ItemGlobalAsm(..) => (\"ItemGlobalAsm\", LABELS_HIR_ONLY),\n+\n+                    // A type alias, e.g. `type Foo = Bar<u8>`\n+                    HirItem::ItemTy(..) => (\"ItemTy\", LABELS_CONST),\n+\n+                    // An enum definition, e.g. `enum Foo<A, B> {C<A>, D<B>}`\n+                    HirItem::ItemEnum(..) => (\"ItemEnum\", LABELS_STRUCT),\n+\n+                    // A struct definition, e.g. `struct Foo<A> {x: A}`\n+                    HirItem::ItemStruct(..) => (\"ItemStruct\", LABELS_STRUCT),\n+\n+                    // A union definition, e.g. `union Foo<A, B> {x: A, y: B}`\n+                    HirItem::ItemUnion(..) => (\"ItemUnion\", LABELS_STRUCT),\n+\n+                    // Represents a Trait Declaration\n+                    // FIXME(michaelwoerister): trait declaration is buggy because sometimes some of\n+                    // the depnodes don't exist (because they legitametely didn't need to be\n+                    // calculated)\n+                    //\n+                    // michaelwoerister and vitiral came up with a possible solution,\n+                    // to just do this before every query\n+                    // ```\n+                    // ::rustc::ty::maps::plumbing::force_from_dep_node(tcx, dep_node)\n+                    // ```\n+                    //\n+                    // However, this did not seem to work effectively and more bugs were hit.\n+                    // Nebie @vitiral gave up :)\n+                    //\n+                    //HirItem::ItemTrait(..) => (\"ItemTrait\", LABELS_TRAIT),\n+\n+                    // `impl Trait for .. {}`\n+                    HirItem::ItemDefaultImpl(..) => (\"ItemDefaultImpl\", LABELS_IMPL),\n+\n+                    // An implementation, eg `impl<A> Trait for Foo { .. }`\n+                    HirItem::ItemImpl(..) => (\"ItemImpl\", LABELS_IMPL),\n+\n+                    _ => self.tcx.sess.span_fatal(\n+                        attr.span,\n+                        &format!(\n+                            \"clean/dirty auto-assertions not yet defined for NodeItem.node={:?}\",\n+                            item.node\n+                        )\n+                    ),\n+                }\n+            },\n+            HirNode::NodeTraitItem(item) => {\n+                match item.node {\n+                    TraitItemKind::Method(..) => (\"NodeTraitItem\", LABELS_FN_TRAIT),\n+                    TraitItemKind::Const(..) => (\"NodeTraitConst\", LABELS_CONST_TRAIT),\n+                    TraitItemKind::Type(..) => (\"NodeTraitType\", LABELS_CONST_TRAIT),\n+                }\n+            },\n+            HirNode::NodeImplItem(item) => {\n+                match item.node {\n+                    ImplItemKind::Method(..) => (\"NodeImplItem\", LABELS_FN_ASSOCIATED),\n+                    ImplItemKind::Const(..) => (\"NodeImplConst\", LABELS_CONST_ASSOCIATED),\n+                    ImplItemKind::Type(..) => (\"NodeImplType\", LABELS_CONST_ASSOCIATED),\n+                }\n+            },\n+            _ => self.tcx.sess.span_fatal(\n+                attr.span,\n+                &format!(\n+                    \"clean/dirty auto-assertions not yet defined for {:?}\",\n+                    node\n+                )\n+            ),\n+        };\n+        let labels = Labels::from_iter(\n+            labels.iter().flat_map(|s| s.iter().map(|l| l.to_string()))\n+        );\n+        (name, labels)\n     }\n \n     fn resolve_labels(&self, item: &NestedMetaItem, value: &str) -> Labels {\n@@ -174,22 +525,16 @@ impl<'a, 'tcx> DirtyCleanVisitor<'a, 'tcx> {\n     fn check_item(&mut self, item_id: ast::NodeId, item_span: Span) {\n         let def_id = self.tcx.hir.local_def_id(item_id);\n         for attr in self.tcx.get_attrs(def_id).iter() {\n-            if attr.check_name(ATTR_DIRTY) {\n-                if check_config(self.tcx, attr) {\n-                    self.checked_attrs.insert(attr.id);\n-                    let labels = self.labels(attr);\n-                    for dep_node in self.dep_nodes(&labels, def_id) {\n-                        self.assert_dirty(item_span, dep_node);\n-                    }\n-                }\n-            } else if attr.check_name(ATTR_CLEAN) {\n-                if check_config(self.tcx, attr) {\n-                    self.checked_attrs.insert(attr.id);\n-                    let labels = self.labels(attr);\n-                    for dep_node in self.dep_nodes(&labels, def_id) {\n-                        self.assert_clean(item_span, dep_node);\n-                    }\n-                }\n+            let assertion = match self.assertion_maybe(item_id, attr) {\n+                Some(a) => a,\n+                None => continue,\n+            };\n+            self.checked_attrs.insert(attr.id);\n+            for dep_node in self.dep_nodes(&assertion.clean, def_id) {\n+                self.assert_clean(item_span, dep_node);\n+            }\n+            for dep_node in self.dep_nodes(&assertion.dirty, def_id) {\n+                self.assert_dirty(item_span, dep_node);\n             }\n         }\n     }\n@@ -363,21 +708,42 @@ impl<'a, 'tcx, 'm> DirtyCleanMetadataVisitor<'a, 'tcx, 'm> {\n /// Given a `#[rustc_dirty]` or `#[rustc_clean]` attribute, scan\n /// for a `cfg=\"foo\"` attribute and check whether we have a cfg\n /// flag called `foo`.\n+///\n+/// Also make sure that the `label` and `except` fields do not\n+/// both exist.\n fn check_config(tcx: TyCtxt, attr: &Attribute) -> bool {\n     debug!(\"check_config(attr={:?})\", attr);\n     let config = &tcx.sess.parse_sess.config;\n     debug!(\"check_config: config={:?}\", config);\n+    let (mut cfg, mut except, mut label) = (None, false, false);\n     for item in attr.meta_item_list().unwrap_or_else(Vec::new) {\n         if item.check_name(CFG) {\n             let value = expect_associated_value(tcx, &item);\n             debug!(\"check_config: searching for cfg {:?}\", value);\n-            return config.contains(&(value, None));\n+            cfg = Some(config.contains(&(value, None)));\n+        }\n+        if item.check_name(LABEL) {\n+            label = true;\n+        }\n+        if item.check_name(EXCEPT) {\n+            except = true;\n         }\n     }\n \n-    tcx.sess.span_fatal(\n-        attr.span,\n-        \"no cfg attribute\");\n+    if label && except {\n+        tcx.sess.span_fatal(\n+            attr.span,\n+            \"must specify only one of: `label`, `except`\"\n+        );\n+    }\n+\n+    match cfg {\n+        None => tcx.sess.span_fatal(\n+            attr.span,\n+            \"no cfg attribute\"\n+        ),\n+        Some(c) => c,\n+    }\n }\n \n fn expect_associated_value(tcx: TyCtxt, item: &NestedMetaItem) -> ast::Name {"}, {"sha": "6e1014b573ad80065bcbd476f3333be97b335cbd", "filename": "src/test/incremental/hashes/call_expressions.rs", "status": "modified", "additions": 18, "deletions": 32, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fcall_expressions.rs?ref=f7fe970400042ff09d3eead47fb3850d6a5d63df", "patch": "@@ -36,10 +36,8 @@ pub fn change_callee_function() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_callee_function() {\n@@ -55,10 +53,8 @@ pub fn change_argument_function() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_argument_function() {\n@@ -100,10 +96,8 @@ pub fn change_callee_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_callee_method() {\n@@ -121,10 +115,8 @@ pub fn change_argument_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_argument_method() {\n@@ -142,10 +134,8 @@ pub fn change_ufcs_callee_method() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_ufcs_callee_method() {\n@@ -163,10 +153,8 @@ pub fn change_argument_method_ufcs() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_argument_method_ufcs() {\n@@ -183,11 +171,11 @@ pub fn change_to_ufcs() {\n     s.method1('x', true);\n }\n \n+// FIXME(vitiral): why would this change anything, doesn't the Mir/Hir expand this\n+// sort of stuff?\n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub fn change_to_ufcs() {\n@@ -208,10 +196,8 @@ mod change_ufcs_callee_indirectly {\n     #[cfg(not(cfail1))]\n     use super::Struct2 as Struct;\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirValidated,MirOptimized,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_ufcs_callee_indirectly() {"}, {"sha": "35641e978b7fdf7a76d65cd008f8639d1ec624a1", "filename": "src/test/incremental/hashes/consts.rs", "status": "modified", "additions": 18, "deletions": 27, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fconsts.rs?ref=f7fe970400042ff09d3eead47fb3850d6a5d63df", "patch": "@@ -30,8 +30,8 @@\n const CONST_VISIBILITY: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub const CONST_VISIBILITY: u8 = 0;\n@@ -42,8 +42,8 @@ pub const CONST_VISIBILITY: u8 = 0;\n const CONST_CHANGE_TYPE_1: i32 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_TYPE_1: u32 = 0;\n@@ -54,8 +54,8 @@ const CONST_CHANGE_TYPE_1: u32 = 0;\n const CONST_CHANGE_TYPE_2: Option<u32> = None;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_TYPE_2: Option<u64> = None;\n@@ -66,11 +66,8 @@ const CONST_CHANGE_TYPE_2: Option<u64> = None;\n const CONST_CHANGE_VALUE_1: i16 = 1;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_1: i16 = 2;\n \n@@ -80,10 +77,8 @@ const CONST_CHANGE_VALUE_1: i16 = 2;\n const CONST_CHANGE_VALUE_2: i16 = 1 + 1;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_2: i16 = 1 + 2;\n@@ -93,10 +88,8 @@ const CONST_CHANGE_VALUE_2: i16 = 1 + 2;\n const CONST_CHANGE_VALUE_3: i16 = 2 + 3;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_3: i16 = 2 * 3;\n@@ -106,10 +99,8 @@ const CONST_CHANGE_VALUE_3: i16 = 2 * 3;\n const CONST_CHANGE_VALUE_4: i16 = 1 + 2 * 3;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n const CONST_CHANGE_VALUE_4: i16 = 1 + 2 * 4;\n@@ -126,14 +117,14 @@ mod const_change_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as Type;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     const CONST_CHANGE_TYPE_INDIRECTLY_1: Type = Type;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     const CONST_CHANGE_TYPE_INDIRECTLY_2: Option<Type> = None;"}, {"sha": "ffb62f7f7a048ca3d5dfaebe4a7c8b9f47cb3604", "filename": "src/test/incremental/hashes/enum_constructors.rs", "status": "modified", "additions": 39, "deletions": 61, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_constructors.rs?ref=f7fe970400042ff09d3eead47fb3850d6a5d63df", "patch": "@@ -45,10 +45,8 @@ fn change_field_value_struct_like() -> Enum {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_field_value_struct_like() -> Enum {\n@@ -72,10 +70,8 @@ fn change_field_order_struct_like() -> Enum {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_field_order_struct_like() -> Enum {\n@@ -113,10 +109,8 @@ fn change_constructor_path_struct_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_constructor_path_struct_like() {\n@@ -140,10 +134,8 @@ fn change_constructor_variant_struct_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_constructor_variant_struct_like() {\n@@ -162,10 +154,11 @@ mod change_constructor_path_indirectly_struct_like {\n     #[cfg(not(cfail1))]\n     use super::Enum2 as TheEnum;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,TypeckTables\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn function() -> TheEnum {\n@@ -186,10 +179,8 @@ mod change_constructor_variant_indirectly_struct_like {\n     #[cfg(not(cfail1))]\n     use super::Enum2::Struct2 as Variant;\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn function() -> Enum2 {\n@@ -209,10 +200,8 @@ fn change_field_value_tuple_like() -> Enum {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_field_value_tuple_like() -> Enum {\n@@ -228,10 +217,8 @@ fn change_constructor_path_tuple_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_constructor_path_tuple_like() {\n@@ -247,10 +234,8 @@ fn change_constructor_variant_tuple_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_constructor_variant_tuple_like() {\n@@ -265,10 +250,11 @@ mod change_constructor_path_indirectly_tuple_like {\n     #[cfg(not(cfail1))]\n     use super::Enum2 as TheEnum;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,TypeckTables\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn function() -> TheEnum {\n@@ -286,10 +272,8 @@ mod change_constructor_variant_indirectly_tuple_like {\n     #[cfg(not(cfail1))]\n     use super::Enum2::Tuple2 as Variant;\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn function() -> Enum2 {\n@@ -317,11 +301,8 @@ fn change_constructor_path_c_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n-#[rustc_metadata_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_constructor_path_c_like() {\n     let _ = Clike2::B;\n@@ -336,10 +317,8 @@ fn change_constructor_variant_c_like() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_constructor_variant_c_like() {\n@@ -354,10 +333,11 @@ mod change_constructor_path_indirectly_c_like {\n     #[cfg(not(cfail1))]\n     use super::Clike2 as TheEnum;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,TypeckTables\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn function() -> TheEnum {\n@@ -375,10 +355,8 @@ mod change_constructor_variant_indirectly_c_like {\n     #[cfg(not(cfail1))]\n     use super::Clike::B as Variant;\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn function() -> Clike {"}, {"sha": "3aaa1f307c7b715a3c3246307fbfd9154cff5258", "filename": "src/test/incremental/hashes/enum_defs.rs", "status": "modified", "additions": 74, "deletions": 78, "changes": 152, "blob_url": "https://github.com/rust-lang/rust/blob/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fenum_defs.rs?ref=f7fe970400042ff09d3eead47fb3850d6a5d63df", "patch": "@@ -37,8 +37,8 @@\n enum EnumVisibility { A }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub enum EnumVisibility {\n@@ -57,8 +57,8 @@ enum EnumChangeNameCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeNameCStyleVariant {\n@@ -79,8 +79,8 @@ enum EnumChangeNameTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeNameTupleStyleVariant {\n@@ -98,8 +98,8 @@ enum EnumChangeNameStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeNameStructStyleVariant {\n@@ -117,10 +117,8 @@ enum EnumChangeValueCStyleVariant0 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeValueCStyleVariant0 {\n@@ -141,10 +139,8 @@ enum EnumChangeValueCStyleVariant1 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeValueCStyleVariant1 {\n@@ -161,8 +157,8 @@ enum EnumAddCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddCStyleVariant {\n@@ -180,8 +176,8 @@ enum EnumRemoveCStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumRemoveCStyleVariant {\n@@ -197,8 +193,8 @@ enum EnumAddTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddTupleStyleVariant {\n@@ -216,8 +212,8 @@ enum EnumRemoveTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumRemoveTupleStyleVariant {\n@@ -233,8 +229,8 @@ enum EnumAddStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddStructStyleVariant {\n@@ -252,8 +248,8 @@ enum EnumRemoveStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumRemoveStructStyleVariant {\n@@ -269,8 +265,8 @@ enum EnumChangeFieldTypeTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldTypeTupleStyleVariant {\n@@ -290,8 +286,8 @@ enum EnumChangeFieldTypeStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldTypeStructStyleVariant {\n@@ -313,8 +309,8 @@ enum EnumChangeFieldNameStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldNameStructStyleVariant {\n@@ -330,8 +326,8 @@ enum EnumChangeOrderTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeOrderTupleStyleVariant {\n@@ -353,8 +349,8 @@ enum EnumChangeFieldOrderStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumChangeFieldOrderStructStyleVariant {\n@@ -370,8 +366,8 @@ enum EnumAddFieldTupleStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddFieldTupleStyleVariant {\n@@ -387,8 +383,8 @@ enum EnumAddFieldStructStyleVariant {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumAddFieldStructStyleVariant {\n@@ -405,8 +401,8 @@ enum EnumAddMustUse {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[must_use]\n@@ -425,8 +421,8 @@ enum EnumAddReprC {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[repr(C)]\n@@ -444,8 +440,8 @@ enum EnumChangeNameOfTypeParameter<S> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[repr(C)]\n@@ -463,8 +459,8 @@ enum EnumAddTypeParameter<S> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[repr(C)]\n@@ -482,8 +478,8 @@ enum EnumChangeNameOfLifetimeParameter<'a> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"PredicatesOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[repr(C)]\n@@ -501,8 +497,8 @@ enum EnumAddLifetimeParameter<'a> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"PredicatesOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[repr(C)]\n@@ -521,8 +517,8 @@ enum EnumAddLifetimeParameterBound<'a, 'b> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"GenericsOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[repr(C)]\n@@ -539,8 +535,8 @@ enum EnumAddLifetimeBoundToParameter<'a, T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[repr(C)]\n@@ -558,8 +554,8 @@ enum EnumAddTraitBound<S> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[repr(C)]\n@@ -577,8 +573,8 @@ enum EnumAddLifetimeParameterBoundWhere<'a, 'b> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\", except=\"GenericsOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[repr(C)]\n@@ -597,8 +593,8 @@ enum EnumAddLifetimeBoundToParameterWhere<'a, T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[repr(C)]\n@@ -616,8 +612,8 @@ enum EnumAddTraitBoundWhere<S> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[repr(C)]\n@@ -635,8 +631,8 @@ enum EnumSwapUsageTypeParameters<A, B> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumSwapUsageTypeParameters<A, B> {\n@@ -666,8 +662,8 @@ enum EnumSwapUsageLifetimeParameters<'a, 'b> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n enum EnumSwapUsageLifetimeParameters<'a, 'b> {\n@@ -701,8 +697,8 @@ mod change_field_type_indirectly_tuple_style {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as FieldType;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     enum TupleStyle {\n@@ -725,8 +721,8 @@ mod change_field_type_indirectly_struct_style {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as FieldType;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     enum StructStyle {\n@@ -754,8 +750,8 @@ mod change_trait_bound_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,PredicatesOfItem\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     enum Enum<T: Trait> {\n@@ -772,8 +768,8 @@ mod change_trait_bound_indirectly_where {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,PredicatesOfItem\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     enum Enum<T> where T: Trait {"}, {"sha": "ec5e088088c9b7b7b23aed7a6a26fa362ce931da", "filename": "src/test/incremental/hashes/extern_mods.rs", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fextern_mods.rs?ref=f7fe970400042ff09d3eead47fb3850d6a5d63df", "patch": "@@ -34,8 +34,8 @@ extern {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n@@ -51,8 +51,8 @@ extern {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n@@ -70,8 +70,8 @@ extern {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n@@ -89,8 +89,8 @@ extern {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n@@ -108,8 +108,8 @@ extern {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n@@ -127,8 +127,8 @@ extern {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n@@ -146,8 +146,8 @@ extern {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n@@ -165,8 +165,8 @@ extern \"C\" {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern \"rust-call\" {\n@@ -184,8 +184,8 @@ extern {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n@@ -203,8 +203,8 @@ extern {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n extern {\n@@ -222,8 +222,8 @@ extern {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[link_args = \"-foo -bar -baz\"]\n@@ -241,8 +241,8 @@ extern {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_dirty(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[link(name = \"bar\")]\n@@ -260,8 +260,8 @@ mod indirectly_change_parameter_type {\n     #[cfg(not(cfail1))]\n     use super::c_i64 as c_int;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     extern {\n@@ -280,8 +280,8 @@ mod indirectly_change_return_type {\n     #[cfg(not(cfail1))]\n     use super::c_i64 as c_int;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     extern {"}, {"sha": "0460d046099f1e6643af649cd6b34b26d72e9f11", "filename": "src/test/incremental/hashes/inherent_impls.rs", "status": "modified", "additions": 120, "deletions": 108, "changes": 228, "blob_url": "https://github.com/rust-lang/rust/blob/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Finherent_impls.rs?ref=f7fe970400042ff09d3eead47fb3850d6a5d63df", "patch": "@@ -34,12 +34,12 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,AssociatedItemDefIds\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn method_name2() { }\n }\n@@ -53,15 +53,13 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn method_body() {\n@@ -80,15 +78,13 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     #[inline]\n@@ -105,13 +101,13 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"AssociatedItems,Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn method_privacy() { }\n@@ -124,13 +120,13 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_dirty(cfg=\"cfail2\", except=\"TypeOfItem,PredicatesOfItem\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn method_selfness(&self) { }\n@@ -143,13 +139,16 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"Hir,HirBody,FnSignature,TypeckTables,MirOptimized,MirValidated\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn method_selfmutness(&mut self) { }\n@@ -164,18 +163,18 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,AssociatedItemDefIds\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_method_to_impl1(&self) { }\n \n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_method_to_impl2(&self) { }\n }\n@@ -189,13 +188,16 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"Hir,HirBody,FnSignature,TypeckTables,MirOptimized,MirValidated\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_method_parameter(&self, _: i32) { }\n@@ -210,15 +212,13 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_method_parameter_name(&self, b: i64) { }\n@@ -233,13 +233,15 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"Hir,HirBody,FnSignature,MirOptimized,MirValidated,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_method_return_type(&self) -> u8 { 0 }\n@@ -254,13 +256,13 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     #[inline]\n@@ -276,15 +278,13 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_method_parameter_order(&self, b: i64, a: i64) { }\n@@ -299,13 +299,16 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"Hir,HirBody,FnSignature,TypeckTables,MirOptimized,MirValidated\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub unsafe fn make_method_unsafe(&self) { }\n@@ -320,13 +323,13 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,FnSignature,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub extern fn make_method_extern(&self) { }\n@@ -341,13 +344,13 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,FnSignature,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub extern \"system\" fn change_method_calling_convention(&self) { }\n@@ -362,13 +365,13 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_parameter_to_method<'a>(&self) { }\n@@ -383,13 +386,16 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,TypeOfItem\",\n+    )]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_type_parameter_to_method<T>(&self) { }\n@@ -404,13 +410,16 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,TypeOfItem,TypeckTables\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_lifetime_param_of_method<'a, 'b: 'a>(&self) { }\n@@ -425,13 +434,13 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,GenericsOfItem,PredicatesOfItem,TypeOfItem\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_type_param_of_method<'a, T: 'a>(&self) { }\n@@ -446,13 +455,13 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,PredicatesOfItem\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_trait_bound_to_type_param_of_method<T: Clone>(&self) { }\n@@ -467,13 +476,13 @@ impl Foo {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Foo {\n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     #[no_mangle]\n@@ -491,13 +500,16 @@ impl Bar<u32> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,GenericsOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl<T> Bar<T> {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"GenericsOfItem,FnSignature,TypeckTables,TypeOfItem,MirOptimized,MirValidated\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_type_parameter_to_impl(&self) { }\n@@ -512,13 +524,13 @@ impl Bar<u32> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl Bar<u64> {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"FnSignature,MirOptimized,MirValidated,TypeckTables\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn change_impl_self_type(&self) { }\n@@ -533,13 +545,13 @@ impl<T> Bar<T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl<T: 'static> Bar<T> {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_lifetime_bound_to_impl_parameter(&self) { }\n@@ -554,13 +566,13 @@ impl<T> Bar<T> {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n impl<T: Clone> Bar<T> {\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_clean(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     pub fn add_trait_bound_to_impl_parameter(&self) { }"}, {"sha": "4ff80ead89d4569b475e32c6b6782078dea20d79", "filename": "src/test/incremental/hashes/statics.rs", "status": "modified", "additions": 26, "deletions": 34, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstatics.rs?ref=f7fe970400042ff09d3eead47fb3850d6a5d63df", "patch": "@@ -32,8 +32,8 @@\n static STATIC_VISIBILITY: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n pub static STATIC_VISIBILITY: u8 = 0;\n@@ -44,8 +44,8 @@ pub static STATIC_VISIBILITY: u8 = 0;\n static STATIC_MUTABILITY: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n static mut STATIC_MUTABILITY: u8 = 0;\n@@ -56,8 +56,8 @@ static mut STATIC_MUTABILITY: u8 = 0;\n static STATIC_LINKAGE: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[linkage=\"weak_odr\"]\n@@ -69,8 +69,8 @@ static STATIC_LINKAGE: u8 = 0;\n static STATIC_NO_MANGLE: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[no_mangle]\n@@ -82,8 +82,8 @@ static STATIC_NO_MANGLE: u8 = 0;\n static STATIC_THREAD_LOCAL: u8 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n #[thread_local]\n@@ -95,8 +95,8 @@ static STATIC_THREAD_LOCAL: u8 = 0;\n static STATIC_CHANGE_TYPE_1: i16 = 0;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_TYPE_1: u64 = 0;\n@@ -107,8 +107,8 @@ static STATIC_CHANGE_TYPE_1: u64 = 0;\n static STATIC_CHANGE_TYPE_2: Option<i8> = None;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_dirty(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_TYPE_2: Option<u16> = None;\n@@ -119,10 +119,8 @@ static STATIC_CHANGE_TYPE_2: Option<u16> = None;\n static STATIC_CHANGE_VALUE_1: i16 = 1;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_1: i16 = 2;\n@@ -133,10 +131,8 @@ static STATIC_CHANGE_VALUE_1: i16 = 2;\n static STATIC_CHANGE_VALUE_2: i16 = 1 + 1;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_2: i16 = 1 + 2;\n@@ -146,10 +142,8 @@ static STATIC_CHANGE_VALUE_2: i16 = 1 + 2;\n static STATIC_CHANGE_VALUE_3: i16 = 2 + 3;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_3: i16 = 2 * 3;\n@@ -159,10 +153,8 @@ static STATIC_CHANGE_VALUE_3: i16 = 2 * 3;\n static STATIC_CHANGE_VALUE_4: i16 = 1 + 2 * 3;\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n static STATIC_CHANGE_VALUE_4: i16 = 1 + 2 * 4;\n@@ -179,14 +171,14 @@ mod static_change_type_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedType2 as Type;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     static STATIC_CHANGE_TYPE_INDIRECTLY_1: Type = Type;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     static STATIC_CHANGE_TYPE_INDIRECTLY_2: Option<Type> = None;"}, {"sha": "231e29b79c41dc0c8d1f3668ff0e0d5864c990b6", "filename": "src/test/incremental/hashes/struct_constructors.rs", "status": "modified", "additions": 24, "deletions": 36, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fstruct_constructors.rs?ref=f7fe970400042ff09d3eead47fb3850d6a5d63df", "patch": "@@ -42,10 +42,8 @@ fn change_field_value_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_field_value_regular_struct() -> RegularStruct {\n@@ -69,10 +67,8 @@ fn change_field_order_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_field_order_regular_struct() -> RegularStruct {\n@@ -101,10 +97,8 @@ fn add_field_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn add_field_regular_struct() -> RegularStruct {\n@@ -140,10 +134,8 @@ fn change_field_label_regular_struct() -> RegularStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_field_label_regular_struct() -> RegularStruct {\n@@ -179,10 +171,8 @@ fn change_constructor_path_regular_struct() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_constructor_path_regular_struct() {\n@@ -202,10 +192,11 @@ mod change_constructor_path_indirectly_regular_struct {\n     #[cfg(not(cfail1))]\n     use super::RegularStruct2 as Struct;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,TypeckTables\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn function() -> Struct {\n@@ -228,10 +219,8 @@ fn change_field_value_tuple_struct() -> TupleStruct {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_field_value_tuple_struct() -> TupleStruct {\n@@ -249,10 +238,8 @@ fn change_constructor_path_tuple_struct() {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-#[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,MirOptimized,MirValidated,TypeckTables\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail2\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n fn change_constructor_path_tuple_struct() {\n@@ -268,10 +255,11 @@ mod change_constructor_path_indirectly_tuple_struct {\n     #[cfg(not(cfail1))]\n     use super::TupleStruct2 as Struct;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n-    #[rustc_dirty(label=\"HirBody\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"HirBody\", cfg=\"cfail3\")]\n+    #[rustc_clean(\n+        cfg=\"cfail2\",\n+        except=\"FnSignature,Hir,HirBody,MirOptimized,MirValidated,TypeckTables\"\n+    )]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     fn function() -> Struct {"}, {"sha": "33bef5d05b783d6e2cda42073d3bcd0277014be9", "filename": "src/test/incremental/hashes/type_defs.rs", "status": "modified", "additions": 32, "deletions": 32, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fe970400042ff09d3eead47fb3850d6a5d63df/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Ftype_defs.rs?ref=f7fe970400042ff09d3eead47fb3850d6a5d63df", "patch": "@@ -35,8 +35,8 @@\n type ChangePrimitiveType = i32;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangePrimitiveType = i64;\n \n@@ -47,8 +47,8 @@ type ChangePrimitiveType = i64;\n type ChangeMutability = &'static i32;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeMutability = &'static mut i32;\n \n@@ -59,8 +59,8 @@ type ChangeMutability = &'static mut i32;\n type ChangeLifetime<'a> = (&'static i32, &'a i32);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeLifetime<'a> = (&'a i32, &'a i32);\n \n@@ -74,8 +74,8 @@ struct Struct2;\n type ChangeTypeStruct = Struct1;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeTypeStruct = Struct2;\n \n@@ -86,8 +86,8 @@ type ChangeTypeStruct = Struct2;\n type ChangeTypeTuple = (u32, u64);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeTypeTuple = (u32, i64);\n \n@@ -107,8 +107,8 @@ enum Enum2 {\n type ChangeTypeEnum = Enum1;\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeTypeEnum = Enum2;\n \n@@ -119,8 +119,8 @@ type ChangeTypeEnum = Enum2;\n type AddTupleField = (i32, i64);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddTupleField = (i32, i64, i16);\n \n@@ -131,8 +131,8 @@ type AddTupleField = (i32, i64, i16);\n type ChangeNestedTupleField = (i32, (i64, i16));\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type ChangeNestedTupleField = (i32, (i64, i8));\n \n@@ -143,8 +143,8 @@ type ChangeNestedTupleField = (i32, (i64, i8));\n type AddTypeParam<T1> = (T1, T1);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddTypeParam<T1, T2> = (T1, T2);\n \n@@ -155,8 +155,8 @@ type AddTypeParam<T1, T2> = (T1, T2);\n type AddTypeParamBound<T1> = (T1, u32);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddTypeParamBound<T1: Clone> = (T1, u32);\n \n@@ -167,8 +167,8 @@ type AddTypeParamBound<T1: Clone> = (T1, u32);\n type AddTypeParamBoundWhereClause<T1> where T1: Clone = (T1, u32);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddTypeParamBoundWhereClause<T1> where T1: Clone+Copy = (T1, u32);\n \n@@ -179,8 +179,8 @@ type AddTypeParamBoundWhereClause<T1> where T1: Clone+Copy = (T1, u32);\n type AddLifetimeParam<'a> = (&'a u32, &'a u32);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody,TypeOfItem\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddLifetimeParam<'a, 'b> = (&'a u32, &'b u32);\n \n@@ -191,8 +191,8 @@ type AddLifetimeParam<'a, 'b> = (&'a u32, &'b u32);\n type AddLifetimeParamBound<'a, 'b> = (&'a u32, &'b u32);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddLifetimeParamBound<'a, 'b: 'a> = (&'a u32, &'b u32);\n \n@@ -205,8 +205,8 @@ where 'b: 'a\n     = (&'a u32, &'b u32, &'c u32);\n \n #[cfg(not(cfail1))]\n-#[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-#[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+#[rustc_clean(cfg=\"cfail3\")]\n #[rustc_metadata_clean(cfg=\"cfail3\")]\n type AddLifetimeParamBoundWhereClause<'a, 'b, 'c>\n where 'b: 'a,\n@@ -225,8 +225,8 @@ mod change_trait_bound_indirectly {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     type ChangeTraitBoundIndirectly<T: Trait> = (T, u32);\n@@ -241,8 +241,8 @@ mod change_trait_bound_indirectly_in_where_clause {\n     #[cfg(not(cfail1))]\n     use super::ReferencedTrait2 as Trait;\n \n-    #[rustc_dirty(label=\"Hir\", cfg=\"cfail2\")]\n-    #[rustc_clean(label=\"Hir\", cfg=\"cfail3\")]\n+    #[rustc_clean(cfg=\"cfail2\", except=\"Hir,HirBody\")]\n+    #[rustc_clean(cfg=\"cfail3\")]\n     #[rustc_metadata_dirty(cfg=\"cfail2\")]\n     #[rustc_metadata_clean(cfg=\"cfail3\")]\n     type ChangeTraitBoundIndirectly<T> where T : Trait = (T, u32);"}]}