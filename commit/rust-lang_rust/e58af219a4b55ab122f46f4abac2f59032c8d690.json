{"sha": "e58af219a4b55ab122f46f4abac2f59032c8d690", "node_id": "C_kwDOAAsO6NoAKGU1OGFmMjE5YTRiNTVhYjEyMmY0NmY0YWJhYzJmNTkwMzJjOGQ2OTA", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-03T15:32:14Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-03T15:32:17Z"}, "message": "feat: Resolve builtin-attr and tools in ide layer", "tree": {"sha": "d8deae5365aabc5bea5152e04208c1ce0a736ef5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8deae5365aabc5bea5152e04208c1ce0a736ef5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e58af219a4b55ab122f46f4abac2f59032c8d690", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e58af219a4b55ab122f46f4abac2f59032c8d690", "html_url": "https://github.com/rust-lang/rust/commit/e58af219a4b55ab122f46f4abac2f59032c8d690", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e58af219a4b55ab122f46f4abac2f59032c8d690/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4691a0647b2c96cc475d8bbe7c31fe194d1443e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/4691a0647b2c96cc475d8bbe7c31fe194d1443e7", "html_url": "https://github.com/rust-lang/rust/commit/4691a0647b2c96cc475d8bbe7c31fe194d1443e7"}], "stats": {"total": 306, "additions": 208, "deletions": 98}, "files": [{"sha": "c0c2cc78182b1427731a2b1ace85e2c422b0c986", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=e58af219a4b55ab122f46f4abac2f59032c8d690", "patch": "@@ -2023,6 +2023,26 @@ impl Local {\n     }\n }\n \n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub struct BuiltinAttr(usize);\n+\n+impl BuiltinAttr {\n+    pub(crate) fn by_name(name: &str) -> Option<Self> {\n+        // TODO: def maps registered attrs?\n+        hir_def::builtin_attr::find_builtin_attr_idx(name).map(Self)\n+    }\n+}\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub struct Tool(usize);\n+\n+impl Tool {\n+    pub(crate) fn by_name(name: &str) -> Option<Self> {\n+        // TODO: def maps registered tools\n+        hir_def::builtin_attr::TOOL_MODULES.iter().position(|&tool| tool == name).map(Self)\n+    }\n+}\n+\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct Label {\n     pub(crate) parent: DefWithBodyId,"}, {"sha": "c48bd1b053815b526b448aae6ed729487e7784df", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=e58af219a4b55ab122f46f4abac2f59032c8d690", "patch": "@@ -25,9 +25,9 @@ use crate::{\n     db::HirDatabase,\n     semantics::source_to_def::{ChildContainer, SourceToDefCache, SourceToDefCtx},\n     source_analyzer::{resolve_hir_path, resolve_hir_path_as_macro, SourceAnalyzer},\n-    Access, AssocItem, Callable, ConstParam, Crate, Field, Function, HasSource, HirFileId, Impl,\n-    InFile, Label, LifetimeParam, Local, MacroDef, Module, ModuleDef, Name, Path, ScopeDef, Trait,\n-    Type, TypeAlias, TypeParam, VariantDef,\n+    Access, AssocItem, BuiltinAttr, Callable, ConstParam, Crate, Field, Function, HasSource,\n+    HirFileId, Impl, InFile, Label, LifetimeParam, Local, MacroDef, Module, ModuleDef, Name, Path,\n+    ScopeDef, Tool, Trait, Type, TypeAlias, TypeParam, VariantDef,\n };\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -43,6 +43,8 @@ pub enum PathResolution {\n     SelfType(Impl),\n     Macro(MacroDef),\n     AssocItem(AssocItem),\n+    BuiltinAttr(BuiltinAttr),\n+    Tool(Tool),\n }\n \n impl PathResolution {\n@@ -63,9 +65,11 @@ impl PathResolution {\n             PathResolution::Def(ModuleDef::TypeAlias(alias)) => {\n                 Some(TypeNs::TypeAliasId((*alias).into()))\n             }\n-            PathResolution::Local(_) | PathResolution::Macro(_) | PathResolution::ConstParam(_) => {\n-                None\n-            }\n+            PathResolution::BuiltinAttr(_)\n+            | PathResolution::Tool(_)\n+            | PathResolution::Local(_)\n+            | PathResolution::Macro(_)\n+            | PathResolution::ConstParam(_) => None,\n             PathResolution::TypeParam(param) => Some(TypeNs::GenericParam((*param).into())),\n             PathResolution::SelfType(impl_def) => Some(TypeNs::SelfType((*impl_def).into())),\n             PathResolution::AssocItem(AssocItem::Const(_) | AssocItem::Function(_)) => None,\n@@ -334,10 +338,6 @@ impl<'db, DB: HirDatabase> Semantics<'db, DB> {\n         self.imp.resolve_path(path)\n     }\n \n-    pub fn resolve_path_as_macro(&self, path: &ast::Path) -> Option<MacroDef> {\n-        self.imp.resolve_path_as_macro(path)\n-    }\n-\n     pub fn resolve_extern_crate(&self, extern_crate: &ast::ExternCrate) -> Option<Crate> {\n         self.imp.resolve_extern_crate(extern_crate)\n     }\n@@ -860,12 +860,6 @@ impl<'db> SemanticsImpl<'db> {\n         self.analyze(path.syntax()).resolve_path(self.db, path)\n     }\n \n-    // FIXME: This shouldn't exist, but is currently required to always resolve attribute paths in\n-    // the IDE layer due to namespace collisions\n-    fn resolve_path_as_macro(&self, path: &ast::Path) -> Option<MacroDef> {\n-        self.analyze(path.syntax()).resolve_path_as_macro(self.db, path)\n-    }\n-\n     fn resolve_extern_crate(&self, extern_crate: &ast::ExternCrate) -> Option<Crate> {\n         let krate = self.scope(extern_crate.syntax()).krate()?;\n         krate.dependencies(self.db).into_iter().find_map(|dep| {"}, {"sha": "8f6c3d995facd7c612a8ab0adce53291ff00eac4", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 43, "deletions": 23, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=e58af219a4b55ab122f46f4abac2f59032c8d690", "patch": "@@ -29,8 +29,9 @@ use syntax::{\n };\n \n use crate::{\n-    db::HirDatabase, semantics::PathResolution, Adt, BuiltinType, Const, Field, Function, Local,\n-    MacroDef, ModuleDef, Static, Struct, Trait, Type, TypeAlias, TypeParam, Variant,\n+    db::HirDatabase, semantics::PathResolution, Adt, BuiltinAttr, BuiltinType, Const, Field,\n+    Function, Local, MacroDef, ModuleDef, Static, Struct, Tool, Trait, Type, TypeAlias, TypeParam,\n+    Variant,\n };\n use base_db::CrateId;\n \n@@ -246,18 +247,6 @@ impl SourceAnalyzer {\n         }\n     }\n \n-    pub(crate) fn resolve_path_as_macro(\n-        &self,\n-        db: &dyn HirDatabase,\n-        path: &ast::Path,\n-    ) -> Option<MacroDef> {\n-        // This must be a normal source file rather than macro file.\n-        let hygiene = Hygiene::new(db.upcast(), self.file_id);\n-        let ctx = body::LowerCtx::with_hygiene(db.upcast(), &hygiene);\n-        let hir_path = Path::from_src(path.clone(), &ctx)?;\n-        resolve_hir_path_as_macro(db, &self.resolver, &hir_path)\n-    }\n-\n     pub(crate) fn resolve_path(\n         &self,\n         db: &dyn HirDatabase,\n@@ -318,29 +307,60 @@ impl SourceAnalyzer {\n         let ctx = body::LowerCtx::with_hygiene(db.upcast(), &hygiene);\n         let hir_path = Path::from_src(path.clone(), &ctx)?;\n \n-        // Case where path is a qualifier of another path, e.g. foo::bar::Baz where we are\n+        // Case where path is a qualifier of a use tree, e.g. foo::bar::{Baz, Qux} where we are\n         // trying to resolve foo::bar.\n-        if let Some(outer_path) = parent().and_then(ast::Path::cast) {\n-            if let Some(qualifier) = outer_path.qualifier() {\n-                if path == &qualifier {\n+        if let Some(use_tree) = parent().and_then(ast::UseTree::cast) {\n+            if let Some(qualifier) = use_tree.path() {\n+                if path == &qualifier && use_tree.coloncolon_token().is_some() {\n                     return resolve_hir_path_qualifier(db, &self.resolver, &hir_path);\n                 }\n             }\n         }\n-        // Case where path is a qualifier of a use tree, e.g. foo::bar::{Baz, Qux} where we are\n+\n+        let is_path_of_attr = path\n+            .top_path()\n+            .syntax()\n+            .ancestors()\n+            .nth(2) // Path -> Meta -> Attr\n+            .map_or(false, |it| ast::Attr::can_cast(it.kind()));\n+\n+        // Case where path is a qualifier of another path, e.g. foo::bar::Baz where we are\n         // trying to resolve foo::bar.\n-        if let Some(use_tree) = parent().and_then(ast::UseTree::cast) {\n-            if let Some(qualifier) = use_tree.path() {\n-                if path == &qualifier && use_tree.coloncolon_token().is_some() {\n+        if let Some(outer_path) = path.parent_path() {\n+            if let Some(qualifier) = outer_path.qualifier() {\n+                if path == &qualifier {\n                     return resolve_hir_path_qualifier(db, &self.resolver, &hir_path);\n                 }\n             }\n+        } else if is_path_of_attr {\n+            let res = resolve_hir_path_as_macro(db, &self.resolver, &hir_path);\n+            return match res {\n+                Some(_) => res.map(PathResolution::Macro),\n+                None => path.as_single_name_ref().and_then(|name_ref| {\n+                    if let Some(builtin) = BuiltinAttr::by_name(&name_ref.text()) {\n+                        Some(PathResolution::BuiltinAttr(builtin))\n+                    } else if let Some(tool) = Tool::by_name(&name_ref.text()) {\n+                        Some(PathResolution::Tool(tool))\n+                    } else {\n+                        None\n+                    }\n+                }),\n+            };\n         }\n \n-        if parent().map_or(false, |it| ast::Visibility::can_cast(it.kind())) {\n+        let res = if parent().map_or(false, |it| ast::Visibility::can_cast(it.kind())) {\n             resolve_hir_path_qualifier(db, &self.resolver, &hir_path)\n         } else {\n             resolve_hir_path_(db, &self.resolver, &hir_path, prefer_value_ns)\n+        };\n+        match res {\n+            Some(_) => res,\n+            None if is_path_of_attr => path\n+                .first_segment()\n+                .and_then(|seg| seg.name_ref())\n+                .and_then(|name_ref| Tool::by_name(&name_ref.text()))\n+                .map(PathResolution::Tool),\n+            None => None,\n         }\n     }\n "}, {"sha": "cd3a8a8605d6c0f753a20f39b7ac1bd687ddce4f", "filename": "crates/hir_def/src/builtin_attr.rs", "status": "modified", "additions": 87, "deletions": 17, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fhir_def%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fhir_def%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbuiltin_attr.rs?ref=e58af219a4b55ab122f46f4abac2f59032c8d690", "patch": "@@ -2,35 +2,98 @@\n //!\n //! The actual definitions were copied from rustc's `compiler/rustc_feature/src/builtin_attrs.rs`.\n //!\n-//! It was last synchronized with upstream commit 835150e70288535bc57bb624792229b9dc94991d.\n+//! It was last synchronized with upstream commit ae90dcf0207c57c3034f00b07048d63f8b2363c8.\n //!\n //! The macros were adjusted to only expand to the attribute name, since that is all we need to do\n //! name resolution, and `BUILTIN_ATTRIBUTES` is almost entirely unchanged from the original, to\n //! ease updating.\n \n+use once_cell::sync::OnceCell;\n+use rustc_hash::FxHashMap;\n+\n /// Ignored attribute namespaces used by tools.\n pub const TOOL_MODULES: &[&str] = &[\"rustfmt\", \"clippy\"];\n \n-type BuiltinAttribute = &'static str;\n+pub struct BuiltinAttribute {\n+    pub name: &'static str,\n+    pub template: AttributeTemplate,\n+}\n+\n+/// A template that the attribute input must match.\n+/// Only top-level shape (`#[attr]` vs `#[attr(...)]` vs `#[attr = ...]`) is considered now.\n+pub struct AttributeTemplate {\n+    pub word: bool,\n+    pub list: Option<&'static str>,\n+    pub name_value_str: Option<&'static str>,\n+}\n+\n+static BUILTIN_LOOKUP_TABLE: OnceCell<FxHashMap<&'static str, usize>> = OnceCell::new();\n+\n+pub fn find_builtin_attr_idx(name: &str) -> Option<usize> {\n+    BUILTIN_LOOKUP_TABLE\n+        .get_or_init(|| {\n+            INERT_ATTRIBUTES.iter().map(|attr| attr.name).enumerate().map(|(a, b)| (b, a)).collect()\n+        })\n+        .get(name)\n+        .copied()\n+}\n+\n+// impl AttributeTemplate {\n+//     const DEFAULT: AttributeTemplate =\n+//         AttributeTemplate { word: false, list: None, name_value_str: None };\n+// }\n+\n+/// A convenience macro for constructing attribute templates.\n+/// E.g., `template!(Word, List: \"description\")` means that the attribute\n+/// supports forms `#[attr]` and `#[attr(description)]`.\n+macro_rules! template {\n+    (Word) => { template!(@ true, None, None) };\n+    (List: $descr: expr) => { template!(@ false, Some($descr), None) };\n+    (NameValueStr: $descr: expr) => { template!(@ false, None, Some($descr)) };\n+    (Word, List: $descr: expr) => { template!(@ true, Some($descr), None) };\n+    (Word, NameValueStr: $descr: expr) => { template!(@ true, None, Some($descr)) };\n+    (List: $descr1: expr, NameValueStr: $descr2: expr) => {\n+        template!(@ false, Some($descr1), Some($descr2))\n+    };\n+    (Word, List: $descr1: expr, NameValueStr: $descr2: expr) => {\n+        template!(@ true, Some($descr1), Some($descr2))\n+    };\n+    (@ $word: expr, $list: expr, $name_value_str: expr) => { AttributeTemplate {\n+        word: $word, list: $list, name_value_str: $name_value_str\n+    } };\n+}\n \n macro_rules! ungated {\n     ($attr:ident, $typ:expr, $tpl:expr $(,)?) => {\n-        stringify!($attr)\n+        BuiltinAttribute { name: stringify!($attr), template: $tpl }\n     };\n }\n \n macro_rules! gated {\n-    ($attr:ident $($rest:tt)*) => {\n-        stringify!($attr)\n+    ($attr:ident, $typ:expr, $tpl:expr, $gate:ident, $msg:expr $(,)?) => {\n+        BuiltinAttribute { name: stringify!($attr), template: $tpl }\n+    };\n+    ($attr:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n+        BuiltinAttribute { name: stringify!($attr), template: $tpl }\n     };\n }\n \n macro_rules! rustc_attr {\n-    (TEST, $attr:ident $($rest:tt)*) => {\n-        stringify!($attr)\n+    (TEST, $attr:ident, $typ:expr, $tpl:expr $(,)?) => {\n+        rustc_attr!(\n+            $attr,\n+            $typ,\n+            $tpl,\n+            concat!(\n+                \"the `#[\",\n+                stringify!($attr),\n+                \"]` attribute is just used for rustc unit tests \\\n+                and will never be stable\",\n+            ),\n+        )\n     };\n-    ($attr:ident $($rest:tt)*) => {\n-        stringify!($attr)\n+    ($attr:ident, $typ:expr, $tpl:expr, $msg:expr $(,)?) => {\n+        BuiltinAttribute { name: stringify!($attr), template: $tpl }\n     };\n }\n \n@@ -158,8 +221,8 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     // Plugins:\n     // XXX Modified for use in rust-analyzer\n-    gated!(plugin_registrar),\n-    gated!(plugin),\n+    gated!(plugin_registrar, Normal, template!(Word), experimental!()),\n+    gated!(plugin, CrateLevel, template!(Word), experimental!()),\n \n     // Testing:\n     gated!(allow_fail, Normal, template!(Word), experimental!(allow_fail)),\n@@ -195,6 +258,12 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n \n     gated!(cmse_nonsecure_entry, AssumedUsed, template!(Word), experimental!(cmse_nonsecure_entry)),\n+    // RFC 2632\n+    gated!(\n+        default_method_body_is_const, AssumedUsed, template!(Word), const_trait_impl,\n+        \"`default_method_body_is_const` is a temporary placeholder for declaring default bodies \\\n+        as `const`, which may be removed or renamed in the future.\"\n+    ),\n \n     // ==========================================================================\n     // Internal attributes: Stability, deprecation, and unsafe:\n@@ -258,10 +327,6 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     ),\n     gated!(panic_runtime, AssumedUsed, template!(Word), experimental!(panic_runtime)),\n     gated!(needs_panic_runtime, AssumedUsed, template!(Word), experimental!(needs_panic_runtime)),\n-    gated!(\n-        unwind, AssumedUsed, template!(List: \"allowed|aborts\"), unwind_attributes,\n-        experimental!(unwind),\n-    ),\n     gated!(\n         compiler_builtins, AssumedUsed, template!(Word),\n         \"the `#[compiler_builtins]` attribute is used to identify the `compiler_builtins` crate \\\n@@ -287,7 +352,11 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Internal attributes, Macro related:\n     // ==========================================================================\n \n-    rustc_attr!(rustc_builtin_macro, AssumedUsed, template!(Word, NameValueStr: \"name\"), IMPL_DETAIL),\n+    rustc_attr!(\n+        rustc_builtin_macro, AssumedUsed,\n+        template!(Word, List: \"name, /*opt*/ attributes(name1, name2, ...)\"),\n+        IMPL_DETAIL,\n+    ),\n     rustc_attr!(rustc_proc_macro_decls, Normal, template!(Word), INTERNAL_UNSTABLE),\n     rustc_attr!(\n         rustc_macro_transparency, AssumedUsed,\n@@ -344,7 +413,7 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n         lang, Normal, template!(NameValueStr: \"name\"), lang_items,\n         \"language items are subject to change\",\n     ),\n-    gated!(rustc_diagnostic_item), // XXX modified in rust-analyzer\n+    gated!(rustc_diagnostic_item, Normal, template!(NameValueStr: \"name\"), experimental!()), // XXX Modified for use in rust-analyzer\n     gated!(\n         // Used in resolve:\n         prelude_import, AssumedUsed, template!(Word),\n@@ -428,6 +497,7 @@ pub const INERT_ATTRIBUTES: &[BuiltinAttribute] = &[\n     rustc_attr!(TEST, rustc_dump_program_clauses, AssumedUsed, template!(Word)),\n     rustc_attr!(TEST, rustc_dump_env_program_clauses, AssumedUsed, template!(Word)),\n     rustc_attr!(TEST, rustc_object_lifetime_default, AssumedUsed, template!(Word)),\n+    rustc_attr!(TEST, rustc_dump_vtable, AssumedUsed, template!(Word)),\n     rustc_attr!(TEST, rustc_dummy, Normal, template!(Word /* doesn't matter*/)),\n     gated!(\n         omit_gdb_pretty_printer_section, AssumedUsed, template!(Word),"}, {"sha": "ad4a4aa752b37e4d4bb320448c9f50f50ba22840", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=e58af219a4b55ab122f46f4abac2f59032c8d690", "patch": "@@ -1798,14 +1798,18 @@ impl ModCollector<'_, '_> {\n \n             let registered = self.def_collector.registered_tools.iter().map(SmolStr::as_str);\n             let is_tool = builtin_attr::TOOL_MODULES.iter().copied().chain(registered).any(pred);\n+            // FIXME: tool modules can be shadowed by actual modules\n             if is_tool {\n                 return true;\n             }\n \n             if segments.len() == 1 {\n                 let registered = self.def_collector.registered_attrs.iter().map(SmolStr::as_str);\n-                let is_inert =\n-                    builtin_attr::INERT_ATTRIBUTES.iter().copied().chain(registered).any(pred);\n+                let is_inert = builtin_attr::INERT_ATTRIBUTES\n+                    .iter()\n+                    .map(|it| it.name)\n+                    .chain(registered)\n+                    .any(pred);\n                 return is_inert;\n             }\n         }"}, {"sha": "edcea7aace78bae039ba011984b34f21a6cf1d6f", "filename": "crates/ide/src/doc_links.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fdoc_links.rs?ref=e58af219a4b55ab122f46f4abac2f59032c8d690", "patch": "@@ -181,7 +181,9 @@ pub(crate) fn resolve_doc_path_for_def(\n         Definition::TypeAlias(it) => it.resolve_doc_path(db, link, ns),\n         Definition::Macro(it) => it.resolve_doc_path(db, link, ns),\n         Definition::Field(it) => it.resolve_doc_path(db, link, ns),\n-        Definition::BuiltinType(_)\n+        Definition::BuiltinAttr(_)\n+        | Definition::Tool(_)\n+        | Definition::BuiltinType(_)\n         | Definition::SelfType(_)\n         | Definition::Local(_)\n         | Definition::GenericParam(_)\n@@ -492,9 +494,11 @@ fn filename_and_frag_for_def(\n             // FIXME fragment numbering\n             return Some((adt, file, Some(String::from(\"impl\"))));\n         }\n-        Definition::Local(_) => return None,\n-        Definition::GenericParam(_) => return None,\n-        Definition::Label(_) => return None,\n+        Definition::Local(_)\n+        | Definition::GenericParam(_)\n+        | Definition::Label(_)\n+        | Definition::BuiltinAttr(_)\n+        | Definition::Tool(_) => return None,\n     };\n \n     Some((def, res, None))"}, {"sha": "e72ed8c2b286a7d3e50a15b9edee23b315be7671", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=e58af219a4b55ab122f46f4abac2f59032c8d690", "patch": "@@ -369,6 +369,8 @@ pub(super) fn definition(\n         }\n         Definition::GenericParam(it) => label_and_docs(db, it),\n         Definition::Label(it) => return Some(Markup::fenced_block(&it.name(db))),\n+        Definition::BuiltinAttr(_) => return None, // FIXME\n+        Definition::Tool(_) => return None,        // FIXME\n     };\n \n     markup(docs.filter(|_| config.documentation.is_some()).map(Into::into), label, mod_path)"}, {"sha": "4187e9ca361bd3dd4db8b6f08104007bb6cdf2d4", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=e58af219a4b55ab122f46f4abac2f59032c8d690", "patch": "@@ -3678,7 +3678,6 @@ fn hover_clippy_lint() {\n \n #[test]\n fn hover_attr_path_qualifier() {\n-    cov_mark::check!(name_ref_classify_attr_path_qualifier);\n     check(\n         r#\"\n //- /foo.rs crate:foo"}, {"sha": "aa865ddc21d6ed46af5cf4ff01bb474cf0c70456", "filename": "crates/ide/src/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide%2Fsrc%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fnavigation_target.rs?ref=e58af219a4b55ab122f46f4abac2f59032c8d690", "patch": "@@ -214,6 +214,8 @@ impl TryToNav for Definition {\n             Definition::Trait(it) => it.try_to_nav(db),\n             Definition::TypeAlias(it) => it.try_to_nav(db),\n             Definition::BuiltinType(_) => None,\n+            Definition::Tool(_) => None,\n+            Definition::BuiltinAttr(_) => None,\n         }\n     }\n }"}, {"sha": "77d202cc39c5774998cbaae6fe25221036d55b7f", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=e58af219a4b55ab122f46f4abac2f59032c8d690", "patch": "@@ -299,6 +299,7 @@ pub func() {\n             r#\"\n //- minicore:derive\n #[rustc_builtin_macro]\n+//^^^^^^^^^^^^^^^^^^^\n pub macro Copy {}\n         //^^^^\n #[derive(Copy)]"}, {"sha": "52e729ee68c43452289b89df771dffe745b6cb4f", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=e58af219a4b55ab122f46f4abac2f59032c8d690", "patch": "@@ -542,6 +542,8 @@ fn highlight_def(\n             h\n         }\n         Definition::Label(_) => Highlight::new(HlTag::Symbol(SymbolKind::Label)),\n+        Definition::BuiltinAttr(_) => Highlight::new(HlTag::Symbol(SymbolKind::Label)), // FIXME\n+        Definition::Tool(_) => Highlight::new(HlTag::Symbol(SymbolKind::Label)),        // FIXME\n     };\n \n     let famous_defs = FamousDefs(sema, krate);"}, {"sha": "d4dba5083441281325339cff79811cbd5fd16167", "filename": "crates/ide/src/syntax_highlighting/inject.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Finject.rs?ref=e58af219a4b55ab122f46f4abac2f59032c8d690", "patch": "@@ -263,6 +263,8 @@ fn module_def_to_hl_tag(def: Definition) -> HlTag {\n             hir::GenericParam::ConstParam(_) => SymbolKind::ConstParam,\n         },\n         Definition::Label(_) => SymbolKind::Label,\n+        Definition::BuiltinAttr(_) => SymbolKind::Label, // FIXME\n+        Definition::Tool(_) => SymbolKind::Label,        // FIXME\n     };\n     HlTag::Symbol(symbol)\n }"}, {"sha": "26cdaa1ac14516ff55d9ce01af4355bbbd4eeeea", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 18, "deletions": 32, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=e58af219a4b55ab122f46f4abac2f59032c8d690", "patch": "@@ -7,9 +7,9 @@\n \n use arrayvec::ArrayVec;\n use hir::{\n-    Adt, AsAssocItem, AssocItem, BuiltinType, Const, Field, Function, GenericParam, HasVisibility,\n-    Impl, ItemInNs, Label, Local, MacroDef, Module, ModuleDef, Name, PathResolution, Semantics,\n-    Static, Trait, TypeAlias, Variant, Visibility,\n+    Adt, AsAssocItem, AssocItem, BuiltinAttr, BuiltinType, Const, Field, Function, GenericParam,\n+    HasVisibility, Impl, ItemInNs, Label, Local, MacroDef, Module, ModuleDef, Name, PathResolution,\n+    Semantics, Static, Tool, Trait, TypeAlias, Variant, Visibility,\n };\n use stdx::impl_from;\n use syntax::{\n@@ -37,6 +37,8 @@ pub enum Definition {\n     Local(Local),\n     GenericParam(GenericParam),\n     Label(Label),\n+    BuiltinAttr(BuiltinAttr),\n+    Tool(Tool),\n }\n \n impl Definition {\n@@ -48,10 +50,9 @@ impl Definition {\n             Some(parent) => parent,\n             None => return Default::default(),\n         };\n+        // resolve derives if possible\n         if let Some(ident) = ast::Ident::cast(token.clone()) {\n-            let attr = parent\n-                .ancestors()\n-                .find_map(ast::TokenTree::cast)\n+            let attr = ast::TokenTree::cast(parent.clone())\n                 .and_then(|tt| tt.parent_meta())\n                 .and_then(|meta| meta.parent_attr());\n             if let Some(attr) = attr {\n@@ -128,7 +129,9 @@ impl Definition {\n             Definition::Local(it) => it.module(db),\n             Definition::GenericParam(it) => it.module(db),\n             Definition::Label(it) => it.module(db),\n-            Definition::BuiltinType(_) => return None,\n+            Definition::BuiltinAttr(_) | Definition::BuiltinType(_) | Definition::Tool(_) => {\n+                return None\n+            }\n         };\n         Some(module)\n     }\n@@ -146,7 +149,9 @@ impl Definition {\n             Definition::Variant(it) => it.visibility(db),\n             Definition::BuiltinType(_) => Visibility::Public,\n             Definition::Macro(_) => return None,\n-            Definition::SelfType(_)\n+            Definition::BuiltinAttr(_)\n+            | Definition::Tool(_)\n+            | Definition::SelfType(_)\n             | Definition::Local(_)\n             | Definition::GenericParam(_)\n             | Definition::Label(_) => return None,\n@@ -171,6 +176,8 @@ impl Definition {\n             Definition::Local(it) => it.name(db)?,\n             Definition::GenericParam(it) => it.name(db),\n             Definition::Label(it) => it.name(db),\n+            Definition::BuiltinAttr(_) => return None, // FIXME\n+            Definition::Tool(_) => return None,        // FIXME\n         };\n         Some(name)\n     }\n@@ -450,30 +457,7 @@ impl NameRefClass {\n                     }\n                 }\n             }\n-            let top_path = path.top_path();\n-            let is_attribute_path = top_path\n-                .syntax()\n-                .ancestors()\n-                .find_map(ast::Attr::cast)\n-                .map(|attr| attr.path().as_ref() == Some(&top_path));\n-            return match is_attribute_path {\n-                Some(true) if path == top_path => sema\n-                    .resolve_path_as_macro(&path)\n-                    .filter(|mac| mac.kind() == hir::MacroKind::Attr)\n-                    .map(Definition::Macro)\n-                    .map(NameRefClass::Definition),\n-                // in case of the path being a qualifier, don't resolve to anything but a module\n-                Some(true) => match sema.resolve_path(&path)? {\n-                    PathResolution::Def(ModuleDef::Module(module)) => {\n-                        cov_mark::hit!(name_ref_classify_attr_path_qualifier);\n-                        Some(NameRefClass::Definition(Definition::Module(module)))\n-                    }\n-                    _ => None,\n-                },\n-                // inside attribute, but our path isn't part of the attribute's path(might be in its expression only)\n-                Some(false) => None,\n-                None => sema.resolve_path(&path).map(Into::into).map(NameRefClass::Definition),\n-            };\n+            return sema.resolve_path(&path).map(Into::into).map(NameRefClass::Definition);\n         }\n \n         let extern_crate = ast::ExternCrate::cast(parent)?;\n@@ -566,6 +550,8 @@ impl From<PathResolution> for Definition {\n             PathResolution::Macro(def) => Definition::Macro(def),\n             PathResolution::SelfType(impl_def) => Definition::SelfType(impl_def),\n             PathResolution::ConstParam(par) => Definition::GenericParam(par.into()),\n+            PathResolution::BuiltinAttr(attr) => Definition::BuiltinAttr(attr),\n+            PathResolution::Tool(tool) => Definition::Tool(tool),\n         }\n     }\n }"}, {"sha": "a4db8b3848ba46a6117c8a338861ea4450260c8a", "filename": "crates/ide_db/src/path_transform.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide_db%2Fsrc%2Fpath_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide_db%2Fsrc%2Fpath_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fpath_transform.rs?ref=e58af219a4b55ab122f46f4abac2f59032c8d690", "patch": "@@ -164,7 +164,9 @@ impl<'a> Ctx<'a> {\n             | hir::PathResolution::ConstParam(_)\n             | hir::PathResolution::SelfType(_)\n             | hir::PathResolution::Macro(_)\n-            | hir::PathResolution::AssocItem(_) => (),\n+            | hir::PathResolution::AssocItem(_)\n+            | hir::PathResolution::BuiltinAttr(_)\n+            | hir::PathResolution::Tool(_) => (),\n         }\n         Some(())\n     }"}, {"sha": "35bd4d02a634ae2cacc3c45fab6fda979746e138", "filename": "crates/ide_db/src/rename.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide_db%2Fsrc%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e58af219a4b55ab122f46f4abac2f59032c8d690/crates%2Fide_db%2Fsrc%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Frename.rs?ref=e58af219a4b55ab122f46f4abac2f59032c8d690", "patch": "@@ -115,8 +115,6 @@ impl Definition {\n             Definition::Static(it) => name_range(it, sema),\n             Definition::Trait(it) => name_range(it, sema),\n             Definition::TypeAlias(it) => name_range(it, sema),\n-            Definition::BuiltinType(_) => return None,\n-            Definition::SelfType(_) => return None,\n             Definition::Local(local) => {\n                 let src = local.source(sema.db);\n                 let name = match &src.value {\n@@ -146,6 +144,10 @@ impl Definition {\n                 let lifetime = src.value.lifetime()?;\n                 src.with_value(lifetime.syntax()).original_file_range_opt(sema.db)\n             }\n+            Definition::BuiltinType(_) => return None,\n+            Definition::SelfType(_) => return None,\n+            Definition::BuiltinAttr(_) => return None,\n+            Definition::Tool(_) => return None,\n         };\n         return res;\n "}]}