{"sha": "a6136d8b8324afbbed8fc7e4c3533d3e509a91fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2MTM2ZDhiODMyNGFmYmJlZDhmYzdlNGMzNTMzZDNlNTA5YTkxZmM=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-25T15:49:48Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2020-11-27T14:23:53Z"}, "message": "Simplify super_traits_of", "tree": {"sha": "9de4e9d82364784ccf559bc6f03629f167a4fa74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9de4e9d82364784ccf559bc6f03629f167a4fa74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6136d8b8324afbbed8fc7e4c3533d3e509a91fc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAl/BC/kACgkQgTGiTgx5\n768+rhAAvWYqumG3QDHimFTYBeIwuh7rm9SKPJfeQfKYLrgwubFDFDd+PodQWEbf\nz5uu9NbUk3CaX+mbjqBD3o7cQU0KwYx8zrXc6UgX5YjX8ObYgK8DEc8hcX6kvXEk\n211yB8AY1KseVDW0EI6WXGUakV/ca7NeLNteu5GA6el4IYfZRbH5wcyVOXMIKXK4\n/mbGWpSzQA06xz60tXOlvLJq85w5k5QqS85zBmsFpeKTtoe/cZagVFmpIaVLMqVw\n5+GmHP7R01G27yGX7QrQIKrgj+Pl/HCuHtyuXvVwUZ1vDT6m81NcsUfQCHKC9KpP\n/i1kJXWwlrqILpAsbd04BCc3MwQ16+CxqCbSQJHTCRT6LoQXukIK729XeYYpljxY\n6yRjvv8dmm0ZCLWjkBhG5l2beFxW+xEsCFUlP73k5vSCTg+7NJ0FdZiy8DINYVQh\nndri8P05k7DBUEC6qjV7Fl6zJNawxDEa4mqyoELjLd7a38sxMvY3d+u8Le/4/Yly\njF9HGmtdzgifqXWVeaKXNz9cQ+dowNdsPvZJM6wewIEKS8oOViIrIK44N2DfyRCF\nEg5v523W4rm2oQieYzhVQuvFKiqQaFV9RB/097+2LEs9rHfbL16FBzoQpyHKgxKC\n+/dS1Y79u6yyb/18cruYnsWlN08EppKZqdQ21sTvY7H30sdfapQ=\n=489C\n-----END PGP SIGNATURE-----", "payload": "tree 9de4e9d82364784ccf559bc6f03629f167a4fa74\nparent b02a905d93cc1f0134dd3390d1b69991c8e82814\nauthor Santiago Pastorino <spastorino@gmail.com> 1606319388 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1606487033 -0300\n\nSimplify super_traits_of\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6136d8b8324afbbed8fc7e4c3533d3e509a91fc", "html_url": "https://github.com/rust-lang/rust/commit/a6136d8b8324afbbed8fc7e4c3533d3e509a91fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6136d8b8324afbbed8fc7e4c3533d3e509a91fc/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b02a905d93cc1f0134dd3390d1b69991c8e82814", "url": "https://api.github.com/repos/rust-lang/rust/commits/b02a905d93cc1f0134dd3390d1b69991c8e82814", "html_url": "https://github.com/rust-lang/rust/commit/b02a905d93cc1f0134dd3390d1b69991c8e82814"}], "stats": {"total": 52, "additions": 4, "deletions": 48}, "files": [{"sha": "316e88b53840bb05bf4b8d5cf90b756a32a15de2", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 4, "deletions": 48, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a6136d8b8324afbbed8fc7e4c3533d3e509a91fc/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6136d8b8324afbbed8fc7e4c3533d3e509a91fc/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=a6136d8b8324afbbed8fc7e4c3533d3e509a91fc", "patch": "@@ -1128,54 +1128,10 @@ fn super_traits_of(tcx: TyCtxt<'_>, trait_def_id: DefId) -> Lrc<FxHashSet<DefId>\n             continue;\n         }\n \n-        if trait_did.is_local() {\n-            let trait_hir_id = tcx.hir().local_def_id_to_hir_id(trait_did.expect_local());\n-\n-            let item = match tcx.hir().get(trait_hir_id) {\n-                Node::Item(item) => item,\n-                _ => bug!(\"super_trait_of {} is not an item\", trait_hir_id),\n-            };\n-\n-            let (generics, supertraits) = match item.kind {\n-                hir::ItemKind::Trait(.., ref generics, ref supertraits, _) => {\n-                    (generics, supertraits)\n-                }\n-                hir::ItemKind::TraitAlias(ref generics, ref supertraits) => (generics, supertraits),\n-                _ => span_bug!(item.span, \"super_predicates invoked on non-trait\"),\n-            };\n-\n-            for supertrait in supertraits.iter() {\n-                let trait_ref = supertrait.trait_ref();\n-                if let Some(trait_did) = trait_ref.and_then(|trait_ref| trait_ref.trait_def_id()) {\n-                    stack.push(trait_did);\n-                }\n-            }\n-\n-            let icx = ItemCtxt::new(tcx, trait_did);\n-            // Convert any explicit superbounds in the where-clause,\n-            // e.g., `trait Foo where Self: Bar`.\n-            // In the case of trait aliases, however, we include all bounds in the where-clause,\n-            // so e.g., `trait Foo = where u32: PartialEq<Self>` would include `u32: PartialEq<Self>`\n-            // as one of its \"superpredicates\".\n-            let is_trait_alias = tcx.is_trait_alias(trait_did);\n-            let self_param_ty = tcx.types.self_param;\n-            for (predicate, _) in icx.type_parameter_bounds_in_generics(\n-                generics,\n-                item.hir_id,\n-                self_param_ty,\n-                OnlySelfBounds(!is_trait_alias),\n-                None,\n-            ) {\n-                if let ty::PredicateAtom::Trait(data, _) = predicate.skip_binders() {\n-                    stack.push(data.def_id());\n-                }\n-            }\n-        } else {\n-            let generic_predicates = tcx.super_predicates_of(trait_did);\n-            for (predicate, _) in generic_predicates.predicates {\n-                if let ty::PredicateAtom::Trait(data, _) = predicate.skip_binders() {\n-                    stack.push(data.def_id());\n-                }\n+        let generic_predicates = tcx.super_predicates_of(trait_did);\n+        for (predicate, _) in generic_predicates.predicates {\n+            if let ty::PredicateAtom::Trait(data, _) = predicate.skip_binders() {\n+                stack.push(data.def_id());\n             }\n         }\n     }"}]}