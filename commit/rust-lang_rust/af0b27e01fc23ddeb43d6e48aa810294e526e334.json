{"sha": "af0b27e01fc23ddeb43d6e48aa810294e526e334", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmMGIyN2UwMWZjMjNkZGViNDNkNmU0OGFhODEwMjk0ZTUyNmUzMzQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2016-10-26T22:06:31Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2016-11-02T03:17:36Z"}, "message": "Don't hash span filenames twice in IchHasher.\n\nThis significantly reduces the number of bytes hashed by IchHasher.", "tree": {"sha": "379656f6bba8734f3702db052b563ea297014f07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/379656f6bba8734f3702db052b563ea297014f07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af0b27e01fc23ddeb43d6e48aa810294e526e334", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af0b27e01fc23ddeb43d6e48aa810294e526e334", "html_url": "https://github.com/rust-lang/rust/commit/af0b27e01fc23ddeb43d6e48aa810294e526e334", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af0b27e01fc23ddeb43d6e48aa810294e526e334/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4497196ba56e5839bf4ef674851fd06d942c5544", "url": "https://api.github.com/repos/rust-lang/rust/commits/4497196ba56e5839bf4ef674851fd06d942c5544", "html_url": "https://github.com/rust-lang/rust/commit/4497196ba56e5839bf4ef674851fd06d942c5544"}], "stats": {"total": 42, "additions": 31, "deletions": 11}, "files": [{"sha": "09f12d1a7381a908f883ed522fbfc8f372f61ec7", "filename": "src/librustc_incremental/calculate_svh/svh_visitor.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/af0b27e01fc23ddeb43d6e48aa810294e526e334/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af0b27e01fc23ddeb43d6e48aa810294e526e334/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh%2Fsvh_visitor.rs?ref=af0b27e01fc23ddeb43d6e48aa810294e526e334", "patch": "@@ -82,6 +82,8 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n     // within the CodeMap.\n     // Also note that we are hashing byte offsets for the column, not unicode\n     // codepoint offsets. For the purpose of the hash that's sufficient.\n+    // Also, hashing filenames is expensive so we avoid doing it twice when the\n+    // span starts and ends in the same file, which is almost always the case.\n     fn hash_span(&mut self, span: Span) {\n         debug_assert!(self.hash_spans);\n         debug!(\"hash_span: st={:?}\", self.st);\n@@ -98,21 +100,35 @@ impl<'a, 'hash, 'tcx> StrictVersionHashVisitor<'a, 'hash, 'tcx> {\n             span.hi\n         };\n \n-        let loc1 = self.codemap.byte_pos_to_line_and_col(span.lo);\n-        let loc2 = self.codemap.byte_pos_to_line_and_col(span_hi);\n-\n-        let expansion_kind = match span.expn_id {\n+        let expn_kind = match span.expn_id {\n             NO_EXPANSION => SawSpanExpnKind::NoExpansion,\n             COMMAND_LINE_EXPN => SawSpanExpnKind::CommandLine,\n             _ => SawSpanExpnKind::SomeExpansion,\n         };\n \n-        SawSpan(loc1.as_ref().map(|&(ref fm, line, col)| (&fm.name[..], line, col)),\n-                loc2.as_ref().map(|&(ref fm, line, col)| (&fm.name[..], line, col)),\n-                expansion_kind)\n-            .hash(self.st);\n+        let loc1 = self.codemap.byte_pos_to_line_and_col(span.lo);\n+        let loc1 = loc1.as_ref()\n+                       .map(|&(ref fm, line, col)| (&fm.name[..], line, col))\n+                       .unwrap_or((\"???\", 0, BytePos(0)));\n+\n+        let loc2 = self.codemap.byte_pos_to_line_and_col(span_hi);\n+        let loc2 = loc2.as_ref()\n+                       .map(|&(ref fm, line, col)| (&fm.name[..], line, col))\n+                       .unwrap_or((\"???\", 0, BytePos(0)));\n+\n+        let saw = if loc1.0 == loc2.0 {\n+            SawSpan(loc1.0,\n+                    loc1.1, loc1.2,\n+                    loc2.1, loc2.2,\n+                    expn_kind)\n+        } else {\n+            SawSpanTwoFiles(loc1.0, loc1.1, loc1.2,\n+                            loc2.0, loc2.1, loc2.2,\n+                            expn_kind)\n+        };\n+        saw.hash(self.st);\n \n-        if expansion_kind == SawSpanExpnKind::SomeExpansion {\n+        if expn_kind == SawSpanExpnKind::SomeExpansion {\n             let call_site = self.codemap.codemap().source_callsite(span);\n             self.hash_span(call_site);\n         }\n@@ -184,9 +200,13 @@ enum SawAbiComponent<'a> {\n     SawAssocTypeBinding,\n     SawAttribute(ast::AttrStyle),\n     SawMacroDef,\n-    SawSpan(Option<(&'a str, usize, BytePos)>,\n-            Option<(&'a str, usize, BytePos)>,\n+    SawSpan(&'a str,\n+            usize, BytePos,\n+            usize, BytePos,\n             SawSpanExpnKind),\n+    SawSpanTwoFiles(&'a str, usize, BytePos,\n+                    &'a str, usize, BytePos,\n+                    SawSpanExpnKind),\n }\n \n /// SawExprComponent carries all of the information that we want"}]}