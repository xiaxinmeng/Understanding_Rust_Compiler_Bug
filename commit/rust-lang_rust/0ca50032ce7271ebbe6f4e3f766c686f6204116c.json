{"sha": "0ca50032ce7271ebbe6f4e3f766c686f6204116c", "node_id": "C_kwDOAAsO6NoAKDBjYTUwMDMyY2U3MjcxZWJiZTZmNGUzZjc2NmM2ODZmNjIwNDExNmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-27T07:31:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-27T07:31:42Z"}, "message": "Auto merge of #106095 - estebank:pin-mut-reborrow, r=compiler-errors\n\nSuggest `Pin::as_mut` when encountering borrow error\n\nFix #65409 for `Pin<&mut T>`.", "tree": {"sha": "e9e5f95818ca272756e9ed22ba24a61b3727d75b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9e5f95818ca272756e9ed22ba24a61b3727d75b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ca50032ce7271ebbe6f4e3f766c686f6204116c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ca50032ce7271ebbe6f4e3f766c686f6204116c", "html_url": "https://github.com/rust-lang/rust/commit/0ca50032ce7271ebbe6f4e3f766c686f6204116c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ca50032ce7271ebbe6f4e3f766c686f6204116c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3961864075eaa9e855e5eec6b4f148029684539", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3961864075eaa9e855e5eec6b4f148029684539", "html_url": "https://github.com/rust-lang/rust/commit/e3961864075eaa9e855e5eec6b4f148029684539"}, {"sha": "8a13a7c14874147621e5344e3f31aaed39d390f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a13a7c14874147621e5344e3f31aaed39d390f5", "html_url": "https://github.com/rust-lang/rust/commit/8a13a7c14874147621e5344e3f31aaed39d390f5"}], "stats": {"total": 228, "additions": 205, "deletions": 23}, "files": [{"sha": "26212dd384c0204f3b81a4e92b1544a2859a5f03", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -194,7 +194,13 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n                 if !seen_spans.contains(&move_span) {\n                     if !closure {\n-                        self.suggest_ref_or_clone(mpi, move_span, &mut err, &mut in_pattern);\n+                        self.suggest_ref_or_clone(\n+                            mpi,\n+                            move_span,\n+                            &mut err,\n+                            &mut in_pattern,\n+                            move_spans,\n+                        );\n                     }\n \n                     self.explain_captures(\n@@ -312,6 +318,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         move_span: Span,\n         err: &mut DiagnosticBuilder<'_, ErrorGuaranteed>,\n         in_pattern: &mut bool,\n+        move_spans: UseSpans<'_>,\n     ) {\n         struct ExpressionFinder<'hir> {\n             expr_span: Span,\n@@ -440,6 +447,11 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                         ) = call_expr.kind\n                     {\n                         // Do not suggest `.clone()` in a `for` loop, we already suggest borrowing.\n+                    } else if let UseSpans::FnSelfUse {\n+                        kind: CallKind::Normal { .. },\n+                        ..\n+                    } = move_spans {\n+                        // We already suggest cloning for these cases in `explain_captures`.\n                     } else {\n                         self.suggest_cloning(err, ty, move_span);\n                     }"}, {"sha": "63b16aa95a6a5d4b333ba255063685d37104e292", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 46, "deletions": 9, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::{Applicability, Diagnostic};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, Namespace};\n use rustc_hir::GeneratorKind;\n-use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_infer::infer::{LateBoundRegionConversionTime, TyCtxtInferExt};\n use rustc_middle::mir::tcx::PlaceTy;\n use rustc_middle::mir::{\n     AggregateKind, Constant, FakeReadCause, Field, Local, LocalInfo, LocalKind, Location, Operand,\n@@ -18,7 +18,10 @@ use rustc_mir_dataflow::move_paths::{InitLocation, LookupResult};\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{symbol::sym, Span, Symbol, DUMMY_SP};\n use rustc_target::abi::VariantIdx;\n-use rustc_trait_selection::traits::type_known_to_meet_bound_modulo_regions;\n+use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n+use rustc_trait_selection::traits::{\n+    type_known_to_meet_bound_modulo_regions, Obligation, ObligationCause,\n+};\n \n use super::borrow_set::BorrowData;\n use super::MirBorrowckCtxt;\n@@ -1066,18 +1069,16 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 }\n                 CallKind::Normal { self_arg, desugaring, method_did } => {\n                     let self_arg = self_arg.unwrap();\n+                    let tcx = self.infcx.tcx;\n                     if let Some((CallDesugaringKind::ForLoopIntoIter, _)) = desugaring {\n-                        let ty = moved_place.ty(self.body, self.infcx.tcx).ty;\n-                        let suggest = match self.infcx.tcx.get_diagnostic_item(sym::IntoIterator) {\n+                        let ty = moved_place.ty(self.body, tcx).ty;\n+                        let suggest = match tcx.get_diagnostic_item(sym::IntoIterator) {\n                             Some(def_id) => {\n                                 let infcx = self.infcx.tcx.infer_ctxt().build();\n                                 type_known_to_meet_bound_modulo_regions(\n                                     &infcx,\n                                     self.param_env,\n-                                    infcx.tcx.mk_imm_ref(\n-                                        infcx.tcx.lifetimes.re_erased,\n-                                        infcx.tcx.erase_regions(ty),\n-                                    ),\n+                                    tcx.mk_imm_ref(tcx.lifetimes.re_erased, tcx.erase_regions(ty)),\n                                     def_id,\n                                     DUMMY_SP,\n                                 )\n@@ -1133,8 +1134,44 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                                 place_name, partially_str, loop_message\n                             ),\n                         );\n+                        let infcx = tcx.infer_ctxt().build();\n+                        let ty = tcx.erase_regions(moved_place.ty(self.body, tcx).ty);\n+                        if let ty::Adt(def, substs) = ty.kind()\n+                            && Some(def.did()) == tcx.lang_items().pin_type()\n+                            && let ty::Ref(_, _, hir::Mutability::Mut) = substs.type_at(0).kind()\n+                            && let self_ty = infcx.replace_bound_vars_with_fresh_vars(\n+                                fn_call_span,\n+                                LateBoundRegionConversionTime::FnCall,\n+                                tcx.fn_sig(method_did).input(0),\n+                            )\n+                            && infcx.can_eq(self.param_env, ty, self_ty).is_ok()\n+                        {\n+                            err.span_suggestion_verbose(\n+                                fn_call_span.shrink_to_lo(),\n+                                \"consider reborrowing the `Pin` instead of moving it\",\n+                                \"as_mut().\".to_string(),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n+                        if let Some(clone_trait) = tcx.lang_items().clone_trait()\n+                            && let trait_ref = tcx.mk_trait_ref(clone_trait, [ty])\n+                            && let o = Obligation::new(\n+                                tcx,\n+                                ObligationCause::dummy(),\n+                                self.param_env,\n+                                ty::Binder::dummy(trait_ref),\n+                            )\n+                            && infcx.predicate_must_hold_modulo_regions(&o)\n+                        {\n+                            err.span_suggestion_verbose(\n+                                fn_call_span.shrink_to_lo(),\n+                                \"you can `clone` the value and consume it, but this might not be \\\n+                                 your desired behavior\",\n+                                \"clone().\".to_string(),\n+                                Applicability::MaybeIncorrect,\n+                            );\n+                        }\n                     }\n-                    let tcx = self.infcx.tcx;\n                     // Avoid pointing to the same function in multiple different\n                     // error messages.\n                     if span != DUMMY_SP && self.fn_self_span_reported.insert(self_arg.span) {"}, {"sha": "87135f0bb438fee1a9997c45c7c3179b0a8a8c68", "filename": "src/test/ui/borrowck/borrowck-move-out-of-overloaded-auto-deref.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-of-overloaded-auto-deref.stderr?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -9,6 +9,10 @@ LL |     let _x = Rc::new(vec![1, 2]).into_iter();\n    |\n note: `into_iter` takes ownership of the receiver `self`, which moves value\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |     let _x = Rc::new(vec![1, 2]).clone().into_iter();\n+   |                                  ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "b0c5376105b2890cf6acb39cd050af8f62c59896", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.fixed?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+// Test that a by-ref `FnMut` closure gets an error when it tries to\n+// consume a value.\n+\n+fn call<F>(f: F) where F : Fn() {\n+    f();\n+}\n+\n+fn main() {\n+    let y = vec![format!(\"World\")];\n+    call(|| {\n+        y.clone().into_iter();\n+        //~^ ERROR cannot move out of `y`, a captured variable in an `Fn` closure\n+    });\n+}"}, {"sha": "4666b8a3373531f1f4794a9165970d895d204186", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.rs?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -1,3 +1,4 @@\n+// run-rustfix\n // Test that a by-ref `FnMut` closure gets an error when it tries to\n // consume a value.\n "}, {"sha": "f033d53bf8e482a99eff20d9af2dcd2bc07c2ade", "filename": "src/test/ui/borrowck/unboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Funboxed-closures-move-upvar-from-non-once-ref-closure.stderr?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -1,5 +1,5 @@\n error[E0507]: cannot move out of `y`, a captured variable in an `Fn` closure\n-  --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:11:9\n+  --> $DIR/unboxed-closures-move-upvar-from-non-once-ref-closure.rs:12:9\n    |\n LL |     let y = vec![format!(\"World\")];\n    |         - captured outer variable\n@@ -12,6 +12,10 @@ LL |         y.into_iter();\n    |\n note: `into_iter` takes ownership of the receiver `self`, which moves `y`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |         y.clone().into_iter();\n+   |           ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "17bea2f366fa02bef3e48b32f6844ab712f77be9", "filename": "src/test/ui/codemap_tests/tab_3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcodemap_tests%2Ftab_3.stderr?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -12,10 +12,10 @@ LL |         println!(\"{:?}\", some_vec);\n note: `into_iter` takes ownership of the receiver `self`, which moves `some_vec`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    = note: this error originates in the macro `$crate::format_args_nl` which comes from the expansion of the macro `println` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: consider cloning the value if the performance cost is acceptable\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n    |\n LL |     some_vec.clone().into_iter();\n-   |             ++++++++\n+   |              ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "7f69e5dcfb784db1ea80cf0b567fe483007f5bc6", "filename": "src/test/ui/moves/move-fn-self-receiver.stderr", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmove-fn-self-receiver.stderr?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -9,6 +9,10 @@ LL |     val.0;\n note: `into_iter` takes ownership of the receiver `self`, which moves `val.0`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n    = note: move occurs because `val.0` has type `Vec<bool>`, which does not implement the `Copy` trait\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |     val.0.clone().into_iter().next();\n+   |           ++++++++\n \n error[E0382]: use of moved value: `foo`\n   --> $DIR/move-fn-self-receiver.rs:34:5\n@@ -93,10 +97,10 @@ note: `Foo::use_rc_self` takes ownership of the receiver `self`, which moves `rc\n    |\n LL |     fn use_rc_self(self: Rc<Self>) {}\n    |                    ^^^^\n-help: consider cloning the value if the performance cost is acceptable\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n    |\n LL |     rc_foo.clone().use_rc_self();\n-   |           ++++++++\n+   |            ++++++++\n \n error[E0382]: use of moved value: `foo_add`\n   --> $DIR/move-fn-self-receiver.rs:59:5\n@@ -136,10 +140,10 @@ LL |     for _val in explicit_into_iter.into_iter() {}\n LL |     explicit_into_iter;\n    |     ^^^^^^^^^^^^^^^^^^ value used here after move\n    |\n-help: consider cloning the value if the performance cost is acceptable\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n    |\n LL |     for _val in explicit_into_iter.clone().into_iter() {}\n-   |                                   ++++++++\n+   |                                    ++++++++\n \n error[E0382]: use of moved value: `container`\n   --> $DIR/move-fn-self-receiver.rs:71:5"}, {"sha": "a28f324aafac9ab17f0719b627b20ebedd96a0aa", "filename": "src/test/ui/moves/moves-based-on-type-access-to-field.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-access-to-field.stderr?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -10,10 +10,10 @@ LL |     touch(&x[0]);\n    |\n note: `into_iter` takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-help: consider cloning the value if the performance cost is acceptable\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n    |\n LL |     consume(x.clone().into_iter().next().unwrap());\n-   |              ++++++++\n+   |               ++++++++\n \n error: aborting due to previous error\n "}, {"sha": "ab7c27456882fdbcaaf79ba1b686a0ce7da46485", "filename": "src/test/ui/moves/moves-based-on-type-exprs.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-exprs.stderr?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -162,10 +162,10 @@ LL |     touch(&x);\n    |\n note: `into_iter` takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-help: consider cloning the value if the performance cost is acceptable\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n    |\n LL |     let _y = x.clone().into_iter().next().unwrap();\n-   |               ++++++++\n+   |                ++++++++\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/moves-based-on-type-exprs.rs:83:11\n@@ -179,10 +179,10 @@ LL |     touch(&x);\n    |\n note: `into_iter` takes ownership of the receiver `self`, which moves `x`\n   --> $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-help: consider cloning the value if the performance cost is acceptable\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n    |\n LL |     let _y = [x.clone().into_iter().next().unwrap(); 1];\n-   |                ++++++++\n+   |                 ++++++++\n \n error: aborting due to 11 previous errors\n "}, {"sha": "e808186d7d445a057e649d0a55de0b318a5c2988", "filename": "src/test/ui/moves/pin-mut-reborrow.fixed", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fpin-mut-reborrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fpin-mut-reborrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fpin-mut-reborrow.fixed?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+use std::pin::Pin;\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn foo(self: Pin<&mut Self>) {}\n+}\n+\n+fn main() {\n+    let mut foo = Foo;\n+    let mut foo = Pin::new(&mut foo);\n+    foo.as_mut().foo();\n+    foo.foo(); //~ ERROR use of moved value\n+}"}, {"sha": "fee6236ebb4db1adafe17703d850304fac18a721", "filename": "src/test/ui/moves/pin-mut-reborrow.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fpin-mut-reborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fpin-mut-reborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fpin-mut-reborrow.rs?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -0,0 +1,15 @@\n+// run-rustfix\n+use std::pin::Pin;\n+\n+struct Foo;\n+\n+impl Foo {\n+    fn foo(self: Pin<&mut Self>) {}\n+}\n+\n+fn main() {\n+    let mut foo = Foo;\n+    let mut foo = Pin::new(&mut foo);\n+    foo.foo();\n+    foo.foo(); //~ ERROR use of moved value\n+}"}, {"sha": "16fa4bacc2d85e2b5861163c5271247b34b07208", "filename": "src/test/ui/moves/pin-mut-reborrow.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fpin-mut-reborrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fpin-mut-reborrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fpin-mut-reborrow.stderr?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -0,0 +1,23 @@\n+error[E0382]: use of moved value: `foo`\n+  --> $DIR/pin-mut-reborrow.rs:14:5\n+   |\n+LL |     let mut foo = Pin::new(&mut foo);\n+   |         ------- move occurs because `foo` has type `Pin<&mut Foo>`, which does not implement the `Copy` trait\n+LL |     foo.foo();\n+   |         ----- `foo` moved due to this method call\n+LL |     foo.foo();\n+   |     ^^^ value used here after move\n+   |\n+note: `Foo::foo` takes ownership of the receiver `self`, which moves `foo`\n+  --> $DIR/pin-mut-reborrow.rs:7:12\n+   |\n+LL |     fn foo(self: Pin<&mut Self>) {}\n+   |            ^^^^\n+help: consider reborrowing the `Pin` instead of moving it\n+   |\n+LL |     foo.as_mut().foo();\n+   |         +++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "204bfdb10b0b30b46a9f03eebfb0400fb4efbf08", "filename": "src/test/ui/moves/suggest-clone.fixed", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.fixed?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#[derive(Clone)]\n+struct Foo;\n+impl Foo {\n+    fn foo(self) {}\n+}\n+fn main() {\n+    let foo = &Foo;\n+    foo.clone().foo(); //~ ERROR cannot move out\n+}"}, {"sha": "25dd9f006f9eaefe39f0507a3c41b37a203190f5", "filename": "src/test/ui/moves/suggest-clone.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.rs?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -0,0 +1,11 @@\n+// run-rustfix\n+\n+#[derive(Clone)]\n+struct Foo;\n+impl Foo {\n+    fn foo(self) {}\n+}\n+fn main() {\n+    let foo = &Foo;\n+    foo.foo(); //~ ERROR cannot move out\n+}"}, {"sha": "cbb3dfea3ba9e5008bcfbc7240035e72969c4a9f", "filename": "src/test/ui/moves/suggest-clone.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fsuggest-clone.stderr?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -0,0 +1,22 @@\n+error[E0507]: cannot move out of `*foo` which is behind a shared reference\n+  --> $DIR/suggest-clone.rs:10:5\n+   |\n+LL |     foo.foo();\n+   |     ^^^^-----\n+   |     |   |\n+   |     |   `*foo` moved due to this method call\n+   |     move occurs because `*foo` has type `Foo`, which does not implement the `Copy` trait\n+   |\n+note: `Foo::foo` takes ownership of the receiver `self`, which moves `*foo`\n+  --> $DIR/suggest-clone.rs:6:12\n+   |\n+LL |     fn foo(self) {}\n+   |            ^^^^\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |     foo.clone().foo();\n+   |         ++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0507`."}, {"sha": "474a72093c631eee83a3b62f36fdeedd09b62b02", "filename": "src/test/ui/suggestions/option-content-move.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0ca50032ce7271ebbe6f4e3f766c686f6204116c/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Foption-content-move.stderr?ref=0ca50032ce7271ebbe6f4e3f766c686f6204116c", "patch": "@@ -9,6 +9,10 @@ LL |                 if selection.1.unwrap().contains(selection.0) {\n    |\n note: `Option::<T>::unwrap` takes ownership of the receiver `self`, which moves `selection.1`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |                 if selection.1.clone().unwrap().contains(selection.0) {\n+   |                                ++++++++\n \n error[E0507]: cannot move out of `selection.1` which is behind a shared reference\n   --> $DIR/option-content-move.rs:27:20\n@@ -21,6 +25,10 @@ LL |                 if selection.1.unwrap().contains(selection.0) {\n    |\n note: `Result::<T, E>::unwrap` takes ownership of the receiver `self`, which moves `selection.1`\n   --> $SRC_DIR/core/src/result.rs:LL:COL\n+help: you can `clone` the value and consume it, but this might not be your desired behavior\n+   |\n+LL |                 if selection.1.clone().unwrap().contains(selection.0) {\n+   |                                ++++++++\n \n error: aborting due to 2 previous errors\n "}]}