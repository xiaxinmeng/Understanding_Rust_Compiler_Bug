{"sha": "e4573286a685e478fc14b4a4399c092e0bc553c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NTczMjg2YTY4NWU0NzhmYzE0YjRhNDM5OWMwOTJlMGJjNTUzYzc=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-02-02T18:25:44Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-02-22T13:26:49Z"}, "message": "Eliminate more excessive null-checks from slice iterators\n\nThis adds the assume() calls back that got lost when rebasing #21886.", "tree": {"sha": "2db36aee53d82e174000fb2f906f73a45ec756dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2db36aee53d82e174000fb2f906f73a45ec756dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4573286a685e478fc14b4a4399c092e0bc553c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4573286a685e478fc14b4a4399c092e0bc553c7", "html_url": "https://github.com/rust-lang/rust/commit/e4573286a685e478fc14b4a4399c092e0bc553c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4573286a685e478fc14b4a4399c092e0bc553c7/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb1b500a9a69b149295c37c2fe2c9409f406f9ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb1b500a9a69b149295c37c2fe2c9409f406f9ea", "html_url": "https://github.com/rust-lang/rust/commit/eb1b500a9a69b149295c37c2fe2c9409f406f9ea"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "404c2fc8e8f3fe555968ee023b0226e935806bfb", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e4573286a685e478fc14b4a4399c092e0bc553c7/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4573286a685e478fc14b4a4399c092e0bc553c7/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=e4573286a685e478fc14b4a4399c092e0bc553c7", "patch": "@@ -433,8 +433,10 @@ impl<T> Vec<T> {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn as_mut_slice(&mut self) -> &mut [T] {\n         unsafe {\n+            let ptr = *self.ptr;\n+            assume(!ptr.is_null());\n             mem::transmute(RawSlice {\n-                data: *self.ptr,\n+                data: ptr,\n                 len: self.len,\n             })\n         }\n@@ -458,6 +460,7 @@ impl<T> Vec<T> {\n     pub fn into_iter(self) -> IntoIter<T> {\n         unsafe {\n             let ptr = *self.ptr;\n+            assume(!ptr.is_null());\n             let cap = self.cap;\n             let begin = ptr as *const T;\n             let end = if mem::size_of::<T>() == 0 {"}, {"sha": "6774906516ad01f8db7f6c96766397e04e9ea2e5", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e4573286a685e478fc14b4a4399c092e0bc553c7/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4573286a685e478fc14b4a4399c092e0bc553c7/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=e4573286a685e478fc14b4a4399c092e0bc553c7", "patch": "@@ -40,6 +40,7 @@ use cmp::{Ordering, PartialEq, PartialOrd, Eq, Ord};\n use cmp::Ordering::{Less, Equal, Greater};\n use cmp;\n use default::Default;\n+use intrinsics::assume;\n use iter::*;\n use ops::{FnMut, self, Index};\n use ops::RangeFull;\n@@ -137,6 +138,7 @@ impl<T> SliceExt for [T] {\n     fn iter<'a>(&'a self) -> Iter<'a, T> {\n         unsafe {\n             let p = self.as_ptr();\n+            assume(!p.is_null());\n             if mem::size_of::<T>() == 0 {\n                 Iter {ptr: p,\n                       end: (p as usize + self.len()) as *const T,\n@@ -276,6 +278,7 @@ impl<T> SliceExt for [T] {\n     fn iter_mut<'a>(&'a mut self) -> IterMut<'a, T> {\n         unsafe {\n             let p = self.as_mut_ptr();\n+            assume(!p.is_null());\n             if mem::size_of::<T>() == 0 {\n                 IterMut {ptr: p,\n                          end: (p as usize + self.len()) as *mut T,"}]}