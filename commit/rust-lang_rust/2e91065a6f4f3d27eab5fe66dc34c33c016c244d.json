{"sha": "2e91065a6f4f3d27eab5fe66dc34c33c016c244d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJlOTEwNjVhNmY0ZjNkMjdlYWI1ZmU2NmRjMzRjMzNjMDE2YzI0NGQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-02-26T18:36:10Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-11T08:10:50Z"}, "message": "Generalize typed value printing and use for undef printing", "tree": {"sha": "df419a8f6a3689fdbd4a027ebabcf04489fb6d1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df419a8f6a3689fdbd4a027ebabcf04489fb6d1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2e91065a6f4f3d27eab5fe66dc34c33c016c244d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2e91065a6f4f3d27eab5fe66dc34c33c016c244d", "html_url": "https://github.com/rust-lang/rust/commit/2e91065a6f4f3d27eab5fe66dc34c33c016c244d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2e91065a6f4f3d27eab5fe66dc34c33c016c244d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc9ca640c2a402f620a6b664a25b4417e8d3615a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9ca640c2a402f620a6b664a25b4417e8d3615a", "html_url": "https://github.com/rust-lang/rust/commit/cc9ca640c2a402f620a6b664a25b4417e8d3615a"}], "stats": {"total": 42, "additions": 18, "deletions": 24}, "files": [{"sha": "f1d17c872489e5df57fd60a1005b9f9a6c2702ce", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/2e91065a6f4f3d27eab5fe66dc34c33c016c244d/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e91065a6f4f3d27eab5fe66dc34c33c016c244d/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=2e91065a6f4f3d27eab5fe66dc34c33c016c244d", "patch": "@@ -216,15 +216,11 @@ pub trait PrettyPrinter<'tcx>:\n         mut self,\n         f: impl FnOnce(Self) -> Result<Self, Self::Error>,\n         t: impl FnOnce(Self) -> Result<Self, Self::Error>,\n-        cast: bool,\n+        conversion: &str,\n     ) -> Result<Self::Const, Self::Error> {\n         self.write_str(\"{\")?;\n         self = f(self)?;\n-        if cast {\n-            self.write_str(\" as \")?;\n-        } else {\n-            self.write_str(\": \")?;\n-        }\n+        self.write_str(conversion)?;\n         self = t(self)?;\n         self.write_str(\"}\")?;\n         Ok(self)\n@@ -1008,7 +1004,7 @@ pub trait PrettyPrinter<'tcx>:\n                         Ok(this)\n                     },\n                     |this| this.print_type(ty),\n-                    true,\n+                    \" as \",\n                 )?;\n             }\n             (Scalar::Ptr(ptr), ty::FnPtr(_)) => {\n@@ -1019,7 +1015,7 @@ pub trait PrettyPrinter<'tcx>:\n                 self = self.typed_value(\n                     |this| this.print_value_path(instance.def_id(), instance.substs),\n                     |this| this.print_type(ty),\n-                    true,\n+                    \" as \",\n                 )?;\n             }\n             // For function type zsts just printing the type is enough\n@@ -1048,7 +1044,7 @@ pub trait PrettyPrinter<'tcx>:\n                     Ok(this)\n                 };\n                 self = if print_ty {\n-                    self.typed_value(print, |this| this.print_type(ty), false)?\n+                    self.typed_value(print, |this| this.print_type(ty), \": \")?\n                 } else {\n                     print(self)?\n                 };\n@@ -1076,7 +1072,7 @@ pub trait PrettyPrinter<'tcx>:\n                     Ok(this)\n                 },\n                 |this| this.print_type(ty),\n-                false,\n+                \": \",\n             )\n         } else {\n             self.write_str(\"&_\")?;\n@@ -1477,15 +1473,11 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n         mut self,\n         f: impl FnOnce(Self) -> Result<Self, Self::Error>,\n         t: impl FnOnce(Self) -> Result<Self, Self::Error>,\n-        cast: bool,\n+        conversion: &str,\n     ) -> Result<Self::Const, Self::Error> {\n         self.write_str(\"{\")?;\n         self = f(self)?;\n-        if cast {\n-            self.write_str(\" as \")?;\n-        } else {\n-            self.write_str(\": \")?;\n-        }\n+        self.write_str(conversion)?;\n         let was_in_value = std::mem::replace(&mut self.in_value, false);\n         self = t(self)?;\n         self.in_value = was_in_value;\n@@ -1566,7 +1558,7 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n             Ok(this)\n         };\n         if print_ty {\n-            self.typed_value(print, |this| this.print_type(ty), false)\n+            self.typed_value(print, |this| this.print_type(ty), \": \")\n         } else {\n             print(self)\n         }"}, {"sha": "75452b9395b50b213d954588f81969b5e7200dcc", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2e91065a6f4f3d27eab5fe66dc34c33c016c244d/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2e91065a6f4f3d27eab5fe66dc34c33c016c244d/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=2e91065a6f4f3d27eab5fe66dc34c33c016c244d", "patch": "@@ -98,20 +98,22 @@ impl<Tag: Copy> std::fmt::Display for ImmTy<'tcx, Tag> {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         /// Helper function for printing a scalar to a FmtPrinter\n         fn p<'a, 'tcx, F: std::fmt::Write, Tag>(\n-            mut cx: FmtPrinter<'a, 'tcx, F>,\n+            cx: FmtPrinter<'a, 'tcx, F>,\n             s: ScalarMaybeUndef<Tag>,\n             ty: Ty<'tcx>,\n         ) -> Result<FmtPrinter<'a, 'tcx, F>, std::fmt::Error> {\n             match s {\n                 ScalarMaybeUndef::Scalar(s) => {\n                     cx.pretty_print_const_scalar(s.erase_tag(), ty, true)\n                 }\n-                ScalarMaybeUndef::Undef => {\n-                    cx.write_str(\"{undef \")?;\n-                    cx = cx.print_type(ty)?;\n-                    cx.write_str(\"}\")?;\n-                    Ok(cx)\n-                }\n+                ScalarMaybeUndef::Undef => cx.typed_value(\n+                    |mut this| {\n+                        this.write_str(\"{undef \")?;\n+                        Ok(this)\n+                    },\n+                    |this| this.print_type(ty),\n+                    \" \",\n+                ),\n             }\n         }\n         ty::tls::with(|tcx| {"}]}