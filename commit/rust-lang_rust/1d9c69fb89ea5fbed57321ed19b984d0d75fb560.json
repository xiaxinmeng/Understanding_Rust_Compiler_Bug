{"sha": "1d9c69fb89ea5fbed57321ed19b984d0d75fb560", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkOWM2OWZiODllYTVmYmVkNTczMjFlZDE5Yjk4NGQwZDc1ZmI1NjA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-01-12T02:27:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-12T02:27:56Z"}, "message": "Rollup merge of #67867 - matthewjasper:opaque-assoc-lookup, r=oli-obk\n\nCorrectly check for opaque types in `assoc_ty_def`\n\nCloses #67856", "tree": {"sha": "e0aba3e23d0acf8541234c4c0a45c3cf3ea84097", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0aba3e23d0acf8541234c4c0a45c3cf3ea84097"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d9c69fb89ea5fbed57321ed19b984d0d75fb560", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeGoQsCRBK7hj4Ov3rIwAAdHIIAAYjyZ9u61wSvtIEqQUoZRvc\n1Pz0VncRFcLizejTXnPKXBIrCtaESYA4UL9RItK8dDNnE8JWNO0yQKW79oBAjUi8\np3dLXdtlTKAdBC3XP5XrNBA8hq9+9ppiA4qmK2/suGB8iWPZdiYLINTzlle8sDbT\nlKN3XPMAAdr95hwbuiNRbzSB/A4Vrz2wHaMxpNvdf+4K9UTO2ZGbR6amqrC6tSLX\nulsj49gsoovEnsSDOKXHs6hG9KVt+/khg9Iou3+Fyxv6bJlxz0zsGgsLSvbWb+Ec\n1MoPleMBF6T/jBPyVdChUoxYjLIzQQtn4DtF6pJyHTXg9ECngIsQKbCYFLv+iBA=\n=9ToI\n-----END PGP SIGNATURE-----\n", "payload": "tree e0aba3e23d0acf8541234c4c0a45c3cf3ea84097\nparent 019790c72a079fd9f695290322985bd693e06037\nparent 5e92625004546005c3bc59351dd6c5132312f0f7\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1578796076 +0100\ncommitter GitHub <noreply@github.com> 1578796076 +0100\n\nRollup merge of #67867 - matthewjasper:opaque-assoc-lookup, r=oli-obk\n\nCorrectly check for opaque types in `assoc_ty_def`\n\nCloses #67856\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d9c69fb89ea5fbed57321ed19b984d0d75fb560", "html_url": "https://github.com/rust-lang/rust/commit/1d9c69fb89ea5fbed57321ed19b984d0d75fb560", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d9c69fb89ea5fbed57321ed19b984d0d75fb560/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "019790c72a079fd9f695290322985bd693e06037", "url": "https://api.github.com/repos/rust-lang/rust/commits/019790c72a079fd9f695290322985bd693e06037", "html_url": "https://github.com/rust-lang/rust/commit/019790c72a079fd9f695290322985bd693e06037"}, {"sha": "5e92625004546005c3bc59351dd6c5132312f0f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e92625004546005c3bc59351dd6c5132312f0f7", "html_url": "https://github.com/rust-lang/rust/commit/5e92625004546005c3bc59351dd6c5132312f0f7"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "5bc211ade40ad1d6fd5d5175b8031cf572f26cee", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d9c69fb89ea5fbed57321ed19b984d0d75fb560/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9c69fb89ea5fbed57321ed19b984d0d75fb560/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=1d9c69fb89ea5fbed57321ed19b984d0d75fb560", "patch": "@@ -1467,7 +1467,7 @@ fn assoc_ty_def(\n     // cycle error if the specialization graph is currently being built.\n     let impl_node = specialization_graph::Node::Impl(impl_def_id);\n     for item in impl_node.items(tcx) {\n-        if item.kind == ty::AssocKind::Type\n+        if matches!(item.kind, ty::AssocKind::Type | ty::AssocKind::OpaqueTy)\n             && tcx.hygienic_eq(item.ident, assoc_ty_name, trait_def_id)\n         {\n             return specialization_graph::NodeItem {"}, {"sha": "c46c4715924e59439ba11f562da9504b1d4e606f", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1d9c69fb89ea5fbed57321ed19b984d0d75fb560/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d9c69fb89ea5fbed57321ed19b984d0d75fb560/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.rs?ref=1d9c69fb89ea5fbed57321ed19b984d0d75fb560", "patch": "@@ -0,0 +1,16 @@\n+// Regression test for issue 67856\n+\n+#![feature(unboxed_closures)]\n+#![feature(type_alias_impl_trait)]\n+#![feature(fn_traits)]\n+\n+trait MyTrait {}\n+impl MyTrait for () {}\n+\n+impl<F> FnOnce<()> for &F {\n+    //~^ ERROR conflicting implementations\n+    //~| ERROR type parameter `F` must be used\n+    type Output = impl MyTrait;\n+    extern \"rust-call\" fn call_once(self, _: ()) -> Self::Output {}\n+}\n+fn main() {}"}, {"sha": "f8e1e55f23f9a38cb99f3b4e0ea55f7f67936d9d", "filename": "src/test/ui/type-alias-impl-trait/incoherent-assoc-imp-trait.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1d9c69fb89ea5fbed57321ed19b984d0d75fb560/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1d9c69fb89ea5fbed57321ed19b984d0d75fb560/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fincoherent-assoc-imp-trait.stderr?ref=1d9c69fb89ea5fbed57321ed19b984d0d75fb560", "patch": "@@ -0,0 +1,23 @@\n+error[E0119]: conflicting implementations of trait `std::ops::FnOnce<()>` for type `&_`:\n+  --> $DIR/incoherent-assoc-imp-trait.rs:10:1\n+   |\n+LL | impl<F> FnOnce<()> for &F {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: conflicting implementation in crate `core`:\n+           - impl<A, F> std::ops::FnOnce<A> for &F\n+             where F: std::ops::Fn<A>, F: ?Sized;\n+\n+error[E0210]: type parameter `F` must be used as the type parameter for some local type (e.g., `MyStruct<F>`)\n+  --> $DIR/incoherent-assoc-imp-trait.rs:10:6\n+   |\n+LL | impl<F> FnOnce<()> for &F {\n+   |      ^ type parameter `F` must be used as the type parameter for some local type\n+   |\n+   = note: implementing a foreign trait is only possible if at least one of the types for which is it implemented is local\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0119, E0210.\n+For more information about an error, try `rustc --explain E0119`."}]}