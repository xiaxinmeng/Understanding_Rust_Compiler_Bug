{"sha": "24757a82f183363c00c51de726a39126a45091ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0NzU3YTgyZjE4MzM2M2MwMGM1MWRlNzI2YTM5MTI2YTQ1MDkxY2E=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-08T10:51:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-08T10:51:09Z"}, "message": "Rollup merge of #69548 - LeSeulArtichaut:assert-errors, r=petrochenkov\n\nTurn trailing tokens in `assert!()` into hard errors\n\nI didn't have time to build the compiler and thus edited the tests manually, I hope it will still pass.\n\nCloses #69531\nr? @Centril do you want to queue the Crater experiment?", "tree": {"sha": "d4fc598e734358d5f076e45208138177da2a9929", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4fc598e734358d5f076e45208138177da2a9929"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24757a82f183363c00c51de726a39126a45091ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeZM4eCRBK7hj4Ov3rIwAAdHIIALMqrQMwRlEiBKLZbgPXFYci\ncOIupCu9ZS6vsT0D2MONm2IkGK61Ngn0CQhU8CXqDJSAsC31joQMGue4ZLwRGBFF\nws0ADMs3OxdAluRAob3H6jL4cCIDS9M4zu7/eL0OJjKWRtOHlf6ZIkjOMrAVRTIS\n5hGr/Yw3Ybcp0CgWH2X9D75a+I3GxAmVYsZYsI40vcZa2DcDex6w+c8zAXwSX4TT\nIl18LCkDOYVGgcfmR8afrynaIydxy7VCxVNRr7SWkCFzBwymu3nNeQl3zbAtFV4y\n/h0sJ5qrXxfJ7g1fcfj+ZfH86FPUOvXng5XpDaICvrWnSP5mryzUTUpDn57MBzc=\n=b+XD\n-----END PGP SIGNATURE-----\n", "payload": "tree d4fc598e734358d5f076e45208138177da2a9929\nparent f459d2ed99f446a95dff044b980582895bd8782a\nparent 33ebc20513c692691216ee1924d5cd29aca6f6aa\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1583664669 +0100\ncommitter GitHub <noreply@github.com> 1583664669 +0100\n\nRollup merge of #69548 - LeSeulArtichaut:assert-errors, r=petrochenkov\n\nTurn trailing tokens in `assert!()` into hard errors\n\nI didn't have time to build the compiler and thus edited the tests manually, I hope it will still pass.\n\nCloses #69531\nr? @Centril do you want to queue the Crater experiment?\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24757a82f183363c00c51de726a39126a45091ca", "html_url": "https://github.com/rust-lang/rust/commit/24757a82f183363c00c51de726a39126a45091ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24757a82f183363c00c51de726a39126a45091ca/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f459d2ed99f446a95dff044b980582895bd8782a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f459d2ed99f446a95dff044b980582895bd8782a", "html_url": "https://github.com/rust-lang/rust/commit/f459d2ed99f446a95dff044b980582895bd8782a"}, {"sha": "33ebc20513c692691216ee1924d5cd29aca6f6aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/33ebc20513c692691216ee1924d5cd29aca6f6aa", "html_url": "https://github.com/rust-lang/rust/commit/33ebc20513c692691216ee1924d5cd29aca6f6aa"}], "stats": {"total": 32, "additions": 11, "deletions": 21}, "files": [{"sha": "09ff770e87b59276e8654a678c4a67e00b8d38c9", "filename": "src/librustc_builtin_macros/assert.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24757a82f183363c00c51de726a39126a45091ca/src%2Flibrustc_builtin_macros%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24757a82f183363c00c51de726a39126a45091ca/src%2Flibrustc_builtin_macros%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fassert.rs?ref=24757a82f183363c00c51de726a39126a45091ca", "patch": "@@ -80,17 +80,15 @@ fn parse_assert<'a>(\n     //     my_function();\n     // );\n     //\n-    // Warn about semicolon and suggest removing it. Eventually, this should be turned into an\n-    // error.\n+    // Emit an error about semicolon and suggest removing it.\n     if parser.token == token::Semi {\n-        let mut err = cx.struct_span_warn(sp, \"macro requires an expression as an argument\");\n+        let mut err = cx.struct_span_err(sp, \"macro requires an expression as an argument\");\n         err.span_suggestion(\n             parser.token.span,\n             \"try removing semicolon\",\n             String::new(),\n             Applicability::MaybeIncorrect,\n         );\n-        err.note(\"this is going to be an error in the future\");\n         err.emit();\n \n         parser.bump();\n@@ -101,19 +99,17 @@ fn parse_assert<'a>(\n     //\n     // assert!(true \"error message\");\n     //\n-    // Parse this as an actual message, and suggest inserting a comma. Eventually, this should be\n-    // turned into an error.\n+    // Emit an error and suggest inserting a comma.\n     let custom_message =\n         if let token::Literal(token::Lit { kind: token::Str, .. }) = parser.token.kind {\n-            let mut err = cx.struct_span_warn(parser.token.span, \"unexpected string literal\");\n+            let mut err = cx.struct_span_err(parser.token.span, \"unexpected string literal\");\n             let comma_span = parser.prev_token.span.shrink_to_hi();\n             err.span_suggestion_short(\n                 comma_span,\n                 \"try adding a comma\",\n                 \", \".to_string(),\n                 Applicability::MaybeIncorrect,\n             );\n-            err.note(\"this is going to be an error in the future\");\n             err.emit();\n \n             parse_custom_message(&mut parser)"}, {"sha": "cd7faf9bf8bfb056a8ed983dbdc1f8c54a009434", "filename": "src/test/ui/macros/assert-trailing-junk.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24757a82f183363c00c51de726a39126a45091ca/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24757a82f183363c00c51de726a39126a45091ca/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.rs?ref=24757a82f183363c00c51de726a39126a45091ca", "patch": "@@ -13,12 +13,12 @@ fn main() {\n     //~^ ERROR no rules expected\n \n     assert!(true \"whatever\" blah);\n-    //~^ WARN unexpected string literal\n+    //~^ ERROR unexpected string literal\n     //~^^ ERROR no rules expected\n \n     assert!(true;);\n-    //~^ WARN macro requires an expression\n+    //~^ ERROR macro requires an expression\n \n     assert!(false || true \"error message\");\n-    //~^ WARN unexpected string literal\n+    //~^ ERROR unexpected string literal\n }"}, {"sha": "84a6768b3f453cde932ed520909c8f88d9b189f8", "filename": "src/test/ui/macros/assert-trailing-junk.stderr", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/24757a82f183363c00c51de726a39126a45091ca/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/24757a82f183363c00c51de726a39126a45091ca/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.stderr?ref=24757a82f183363c00c51de726a39126a45091ca", "patch": "@@ -18,15 +18,13 @@ LL |     assert!(true, \"whatever\" blah);\n    |                             |\n    |                             help: missing comma here\n \n-warning: unexpected string literal\n+error: unexpected string literal\n   --> $DIR/assert-trailing-junk.rs:15:18\n    |\n LL |     assert!(true \"whatever\" blah);\n    |                 -^^^^^^^^^^\n    |                 |\n    |                 help: try adding a comma\n-   |\n-   = note: this is going to be an error in the future\n \n error: no rules expected the token `blah`\n   --> $DIR/assert-trailing-junk.rs:15:29\n@@ -36,25 +34,21 @@ LL |     assert!(true \"whatever\" blah);\n    |                            |\n    |                            help: missing comma here\n \n-warning: macro requires an expression as an argument\n+error: macro requires an expression as an argument\n   --> $DIR/assert-trailing-junk.rs:19:5\n    |\n LL |     assert!(true;);\n    |     ^^^^^^^^^^^^-^^\n    |                 |\n    |                 help: try removing semicolon\n-   |\n-   = note: this is going to be an error in the future\n \n-warning: unexpected string literal\n+error: unexpected string literal\n   --> $DIR/assert-trailing-junk.rs:22:27\n    |\n LL |     assert!(false || true \"error message\");\n    |                          -^^^^^^^^^^^^^^^\n    |                          |\n    |                          help: try adding a comma\n-   |\n-   = note: this is going to be an error in the future\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 7 previous errors\n "}]}