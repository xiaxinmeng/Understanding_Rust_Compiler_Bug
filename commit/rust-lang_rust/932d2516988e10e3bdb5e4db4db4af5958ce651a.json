{"sha": "932d2516988e10e3bdb5e4db4db4af5958ce651a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMmQyNTE2OTg4ZTEwZTNiZGI1ZTRkYjRkYjRhZjU5NThjZTY1MWE=", "commit": {"author": {"name": "achernyak", "email": "artemchernyak@gmail.com", "date": "2017-04-28T15:59:57Z"}, "committer": {"name": "achernyak", "email": "artemchernyak@gmail.com", "date": "2017-04-28T15:59:57Z"}, "message": "query for def_span", "tree": {"sha": "99693c873a8750f3b23d88c1d0dea3dfda682e3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99693c873a8750f3b23d88c1d0dea3dfda682e3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/932d2516988e10e3bdb5e4db4db4af5958ce651a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/932d2516988e10e3bdb5e4db4db4af5958ce651a", "html_url": "https://github.com/rust-lang/rust/commit/932d2516988e10e3bdb5e4db4db4af5958ce651a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/932d2516988e10e3bdb5e4db4db4af5958ce651a/comments", "author": {"login": "hackeryarn", "id": 827709, "node_id": "MDQ6VXNlcjgyNzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/827709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackeryarn", "html_url": "https://github.com/hackeryarn", "followers_url": "https://api.github.com/users/hackeryarn/followers", "following_url": "https://api.github.com/users/hackeryarn/following{/other_user}", "gists_url": "https://api.github.com/users/hackeryarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackeryarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackeryarn/subscriptions", "organizations_url": "https://api.github.com/users/hackeryarn/orgs", "repos_url": "https://api.github.com/users/hackeryarn/repos", "events_url": "https://api.github.com/users/hackeryarn/events{/privacy}", "received_events_url": "https://api.github.com/users/hackeryarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hackeryarn", "id": 827709, "node_id": "MDQ6VXNlcjgyNzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/827709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hackeryarn", "html_url": "https://github.com/hackeryarn", "followers_url": "https://api.github.com/users/hackeryarn/followers", "following_url": "https://api.github.com/users/hackeryarn/following{/other_user}", "gists_url": "https://api.github.com/users/hackeryarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/hackeryarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hackeryarn/subscriptions", "organizations_url": "https://api.github.com/users/hackeryarn/orgs", "repos_url": "https://api.github.com/users/hackeryarn/repos", "events_url": "https://api.github.com/users/hackeryarn/events{/privacy}", "received_events_url": "https://api.github.com/users/hackeryarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ace517da0d1e356aa5b42f4cdee6854538591ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ace517da0d1e356aa5b42f4cdee6854538591ef2", "html_url": "https://github.com/rust-lang/rust/commit/ace517da0d1e356aa5b42f4cdee6854538591ef2"}], "stats": {"total": 36, "additions": 20, "deletions": 16}, "files": [{"sha": "0b43e65ddbf82cc74b932acdb88ea6a023d2d844", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/932d2516988e10e3bdb5e4db4db4af5958ce651a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932d2516988e10e3bdb5e4db4db4af5958ce651a/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=932d2516988e10e3bdb5e4db4db4af5958ce651a", "patch": "@@ -181,7 +181,6 @@ pub trait CrateStore {\n     fn crate_data_as_rc_any(&self, krate: CrateNum) -> Rc<Any>;\n \n     // item info\n-    fn def_span(&self, sess: &Session, def: DefId) -> Span;\n     fn stability(&self, def: DefId) -> Option<attr::Stability>;\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation>;\n     fn visibility(&self, def: DefId) -> ty::Visibility;\n@@ -312,7 +311,6 @@ impl CrateStore for DummyCrateStore {\n     fn crate_data_as_rc_any(&self, krate: CrateNum) -> Rc<Any>\n         { bug!(\"crate_data_as_rc_any\") }\n     // item info\n-    fn def_span(&self, sess: &Session, def: DefId) -> Span { bug!(\"def_span\") }\n     fn stability(&self, def: DefId) -> Option<attr::Stability> { bug!(\"stability\") }\n     fn deprecation(&self, def: DefId) -> Option<attr::Deprecation> { bug!(\"deprecation\") }\n     fn visibility(&self, def: DefId) -> ty::Visibility { bug!(\"visibility\") }"}, {"sha": "f2659e88afb011a583fe6947dc232b22a6fbd558", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/932d2516988e10e3bdb5e4db4db4af5958ce651a/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932d2516988e10e3bdb5e4db4db4af5958ce651a/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=932d2516988e10e3bdb5e4db4db4af5958ce651a", "patch": "@@ -271,6 +271,12 @@ impl<'tcx> QueryDescription for queries::describe_def<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::def_span<'tcx> {\n+    fn describe(_: TyCtxt, _: DefId) -> String {\n+        bug!(\"def_span\")\n+    }\n+}\n+\n macro_rules! define_maps {\n     (<$tcx:tt>\n      $($(#[$attr:meta])*\n@@ -547,7 +553,8 @@ define_maps! { <'tcx>\n     pub def_symbol_name: SymbolName(DefId) -> ty::SymbolName,\n     pub symbol_name: symbol_name_dep_node(ty::Instance<'tcx>) -> ty::SymbolName,\n \n-    pub describe_def: meta_data_node(DefId) -> Option<Def>\n+    pub describe_def: meta_data_node(DefId) -> Option<Def>,\n+    pub def_span: meta_data_node(DefId) -> Span\n }\n \n fn coherent_trait_dep_node((_, def_id): (CrateNum, DefId)) -> DepNode<DefId> {"}, {"sha": "2c3871cec8d8109ddadbfca12fcead071ee006f6", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/932d2516988e10e3bdb5e4db4db4af5958ce651a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932d2516988e10e3bdb5e4db4db4af5958ce651a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=932d2516988e10e3bdb5e4db4db4af5958ce651a", "patch": "@@ -2265,14 +2265,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    pub fn def_span(self, def_id: DefId) -> Span {\n-        if let Some(id) = self.hir.as_local_node_id(def_id) {\n-            self.hir.span(id)\n-        } else {\n-            self.sess.cstore.def_span(&self.sess, def_id)\n-        }\n-    }\n-\n     pub fn vis_is_accessible_from(self, vis: Visibility, block: NodeId) -> bool {\n         vis.is_accessible_from(self.hir.local_def_id(self.hir.get_module_parent(block)), self)\n     }\n@@ -2675,12 +2667,23 @@ fn associated_item_def_ids<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     Rc::new(vec)\n }\n \n+fn def_span<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Span {\n+    match tcx.hir.span_if_local(def_id) {\n+        Some(span) => span,\n+        None => {\n+            let node_id = tcx.sess.cstore.item_body(tcx, def_id).id().node_id;\n+            tcx.hir.span(node_id)\n+        },\n+    }\n+}\n+\n pub fn provide(providers: &mut ty::maps::Providers) {\n     *providers = ty::maps::Providers {\n         associated_item,\n         associated_item_def_ids,\n         adt_sized_constraint,\n         adt_dtorck_constraint,\n+        def_span,\n         ..*providers\n     };\n }"}, {"sha": "b060f97ab9ac2b7b74a208c9475538bbe33e4862", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/932d2516988e10e3bdb5e4db4db4af5958ce651a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932d2516988e10e3bdb5e4db4db4af5958ce651a/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=932d2516988e10e3bdb5e4db4db4af5958ce651a", "patch": "@@ -114,18 +114,14 @@ provide! { <'tcx> tcx, def_id, cdata\n     inherent_impls => { Rc::new(cdata.get_inherent_implementations_for_type(def_id.index)) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n     describe_def => { cdata.get_def(def_id.index) }\n+    def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n }\n \n impl CrateStore for cstore::CStore {\n     fn crate_data_as_rc_any(&self, krate: CrateNum) -> Rc<Any> {\n         self.get_crate_data(krate)\n     }\n \n-    fn def_span(&self, sess: &Session, def: DefId) -> Span {\n-        self.dep_graph.read(DepNode::MetaData(def));\n-        self.get_crate_data(def.krate).get_span(def.index, sess)\n-    }\n-\n     fn stability(&self, def: DefId) -> Option<attr::Stability> {\n         self.dep_graph.read(DepNode::MetaData(def));\n         self.get_crate_data(def.krate).get_stability(def.index)"}]}