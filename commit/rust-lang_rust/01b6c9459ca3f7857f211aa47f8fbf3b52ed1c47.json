{"sha": "01b6c9459ca3f7857f211aa47f8fbf3b52ed1c47", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxYjZjOTQ1OWNhM2Y3ODU3ZjIxMWFhNDdmOGZiZjNiNTJlZDFjNDc=", "commit": {"author": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2017-07-01T23:41:39Z"}, "committer": {"name": "Masaki Hara", "email": "ackie.h.gmai@gmail.com", "date": "2017-07-01T23:41:39Z"}, "message": "Implement Eq/Hash/Debug etc. for unsized tuples.", "tree": {"sha": "dbd55660eaf71e3df291dbe597677966ca0bc9f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbd55660eaf71e3df291dbe597677966ca0bc9f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01b6c9459ca3f7857f211aa47f8fbf3b52ed1c47", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJZWDMzAAoJEHynqF4EmoLodFoP/jXuTEP4gjjdCPRqQ/uqZuzJ\nJj3z1fT8IjmcJO1vg/WKKfWiqfKaCDKXU2stC81GK4r9xImIUAAwQ1erTlC9Jeqp\nME8Nq/+4JsB2GXqNXqCAqfHWCbsJ5s15oIT0twTFrKMc5cVILJe2pmzPSoM0OILm\nCNeHMveRPqogmHQh3+ISqu555p4AvTyxT4V1A4/GmB8kEqMD8D1tIl6BZ2W6mVMj\nzbQ2GkrXzyBfvBRcz77kn8h5RH4hpuH20rUag3my2D04HdzBR0kLFtd0FL49AeOY\ngYwgVsktRP7DBGw4zYrW4eK64bhSh7ZqfLJ6JXmk+0M71ONek6NW8o1kcyZY9q6U\nxqZc1FtFbU7gvUjU4ddVjM8qYH2WhX0VNQsow0xKRB20eMhGosoXtiXvQgQvKBQz\nHtrqxf2Pp5tL21lnvLsLnYxOiJ7wvR+cbJ6hzBITaUWiuAT3nVL0jyAerpsaoERk\nesDjT9hGmzjnr/u5SHpGCRptgZVfmwEUxaEBUqBikkbHYceKV00XOj31Nh+/5DHU\nr1oiujm6GiZg5VJe3Wk3yl09V4rEDK8Wc7bdvJxDkgxqkMtAEe4tdjsWfAAgpXYu\nHCZzsw3eUMDKgwK6yjoIs1Rx803d5VjtMGBOv5ddItoInvuj7x45S5X/K2ZLzAza\no+jeW8W0M4jiZ8ps53Sd\n=t0Ns\n-----END PGP SIGNATURE-----", "payload": "tree dbd55660eaf71e3df291dbe597677966ca0bc9f0\nparent 7a2c09b6f5282335fc0000f5504fbed2f70e89c8\nauthor Masaki Hara <ackie.h.gmai@gmail.com> 1498952499 +0900\ncommitter Masaki Hara <ackie.h.gmai@gmail.com> 1498952499 +0900\n\nImplement Eq/Hash/Debug etc. for unsized tuples.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01b6c9459ca3f7857f211aa47f8fbf3b52ed1c47", "html_url": "https://github.com/rust-lang/rust/commit/01b6c9459ca3f7857f211aa47f8fbf3b52ed1c47", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01b6c9459ca3f7857f211aa47f8fbf3b52ed1c47/comments", "author": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qnighy", "id": 41755, "node_id": "MDQ6VXNlcjQxNzU1", "avatar_url": "https://avatars.githubusercontent.com/u/41755?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qnighy", "html_url": "https://github.com/qnighy", "followers_url": "https://api.github.com/users/qnighy/followers", "following_url": "https://api.github.com/users/qnighy/following{/other_user}", "gists_url": "https://api.github.com/users/qnighy/gists{/gist_id}", "starred_url": "https://api.github.com/users/qnighy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qnighy/subscriptions", "organizations_url": "https://api.github.com/users/qnighy/orgs", "repos_url": "https://api.github.com/users/qnighy/repos", "events_url": "https://api.github.com/users/qnighy/events{/privacy}", "received_events_url": "https://api.github.com/users/qnighy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a2c09b6f5282335fc0000f5504fbed2f70e89c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a2c09b6f5282335fc0000f5504fbed2f70e89c8", "html_url": "https://github.com/rust-lang/rust/commit/7a2c09b6f5282335fc0000f5504fbed2f70e89c8"}], "stats": {"total": 30, "additions": 23, "deletions": 7}, "files": [{"sha": "750e86114c4bb057446f1024dcaff0a22d7b066d", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01b6c9459ca3f7857f211aa47f8fbf3b52ed1c47/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b6c9459ca3f7857f211aa47f8fbf3b52ed1c47/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=01b6c9459ca3f7857f211aa47f8fbf3b52ed1c47", "patch": "@@ -1627,13 +1627,13 @@ macro_rules! tuple {\n     () => ();\n     ( $($name:ident,)+ ) => (\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<$($name:Debug),*> Debug for ($($name,)*) {\n+        impl<$($name:Debug),*> Debug for ($($name,)*) where last_type!($($name,)+): ?Sized {\n             #[allow(non_snake_case, unused_assignments, deprecated)]\n             fn fmt(&self, f: &mut Formatter) -> Result {\n                 let mut builder = f.debug_tuple(\"\");\n                 let ($(ref $name,)*) = *self;\n                 $(\n-                    builder.field($name);\n+                    builder.field(&$name);\n                 )*\n \n                 builder.finish()\n@@ -1643,6 +1643,11 @@ macro_rules! tuple {\n     )\n }\n \n+macro_rules! last_type {\n+    ($a:ident,) => { $a };\n+    ($a:ident, $($rest_a:ident,)+) => { last_type!($($rest_a,)+) };\n+}\n+\n tuple! { T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "2000ba91460292347aa9c04930347f4a907a17b4", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/01b6c9459ca3f7857f211aa47f8fbf3b52ed1c47/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b6c9459ca3f7857f211aa47f8fbf3b52ed1c47/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=01b6c9459ca3f7857f211aa47f8fbf3b52ed1c47", "patch": "@@ -559,7 +559,7 @@ mod impls {\n \n         ( $($name:ident)+) => (\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($name: Hash),*> Hash for ($($name,)*) {\n+            impl<$($name: Hash),*> Hash for ($($name,)*) where last_type!($($name,)+): ?Sized {\n                 #[allow(non_snake_case)]\n                 fn hash<S: Hasher>(&self, state: &mut S) {\n                     let ($(ref $name,)*) = *self;\n@@ -569,6 +569,11 @@ mod impls {\n         );\n     }\n \n+    macro_rules! last_type {\n+        ($a:ident,) => { $a };\n+        ($a:ident, $($rest_a:ident,)+) => { last_type!($($rest_a,)+) };\n+    }\n+\n     impl_hash_tuple! {}\n     impl_hash_tuple! { A }\n     impl_hash_tuple! { A B }"}, {"sha": "47e9c7c903880ca053555e1a91731551077e6160", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/01b6c9459ca3f7857f211aa47f8fbf3b52ed1c47/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01b6c9459ca3f7857f211aa47f8fbf3b52ed1c47/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=01b6c9459ca3f7857f211aa47f8fbf3b52ed1c47", "patch": "@@ -29,7 +29,7 @@ macro_rules! tuple_impls {\n             }\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:PartialEq),+> PartialEq for ($($T,)+) {\n+            impl<$($T:PartialEq),+> PartialEq for ($($T,)+) where last_type!($($T,)+): ?Sized {\n                 #[inline]\n                 fn eq(&self, other: &($($T,)+)) -> bool {\n                     $(self.$idx == other.$idx)&&+\n@@ -41,10 +41,11 @@ macro_rules! tuple_impls {\n             }\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:Eq),+> Eq for ($($T,)+) {}\n+            impl<$($T:Eq),+> Eq for ($($T,)+) where last_type!($($T,)+): ?Sized {}\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:PartialOrd + PartialEq),+> PartialOrd for ($($T,)+) {\n+            impl<$($T:PartialOrd + PartialEq),+> PartialOrd for ($($T,)+)\n+                    where last_type!($($T,)+): ?Sized {\n                 #[inline]\n                 fn partial_cmp(&self, other: &($($T,)+)) -> Option<Ordering> {\n                     lexical_partial_cmp!($(self.$idx, other.$idx),+)\n@@ -68,7 +69,7 @@ macro_rules! tuple_impls {\n             }\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:Ord),+> Ord for ($($T,)+) {\n+            impl<$($T:Ord),+> Ord for ($($T,)+) where last_type!($($T,)+): ?Sized {\n                 #[inline]\n                 fn cmp(&self, other: &($($T,)+)) -> Ordering {\n                     lexical_cmp!($(self.$idx, other.$idx),+)\n@@ -118,6 +119,11 @@ macro_rules! lexical_cmp {\n     ($a:expr, $b:expr) => { ($a).cmp(&$b) };\n }\n \n+macro_rules! last_type {\n+    ($a:ident,) => { $a };\n+    ($a:ident, $($rest_a:ident,)+) => { last_type!($($rest_a,)+) };\n+}\n+\n tuple_impls! {\n     Tuple1 {\n         (0) -> A"}]}