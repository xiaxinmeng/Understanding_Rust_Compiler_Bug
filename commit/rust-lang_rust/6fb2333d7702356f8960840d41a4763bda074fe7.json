{"sha": "6fb2333d7702356f8960840d41a4763bda074fe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmYjIzMzNkNzcwMjM1NmY4OTYwODQwZDQxYTQ3NjNiZGEwNzRmZTc=", "commit": {"author": {"name": "Toby Scrace", "email": "toby.scrace@gmail.com", "date": "2015-11-04T07:42:54Z"}, "committer": {"name": "Toby Scrace", "email": "toby.scrace@gmail.com", "date": "2015-11-04T07:42:54Z"}, "message": "Fix #29542\n\nReword \"Writing the logic\" paragraph to prevent `unwrap` being confused\r\nfor a macro.", "tree": {"sha": "6cc04d1fa11988bbbf05f3818e13ee9faa8f1747", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cc04d1fa11988bbbf05f3818e13ee9faa8f1747"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fb2333d7702356f8960840d41a4763bda074fe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fb2333d7702356f8960840d41a4763bda074fe7", "html_url": "https://github.com/rust-lang/rust/commit/6fb2333d7702356f8960840d41a4763bda074fe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fb2333d7702356f8960840d41a4763bda074fe7/comments", "author": null, "committer": null, "parents": [{"sha": "a216e847272ddbd3033037b606eaf2d801c250b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a216e847272ddbd3033037b606eaf2d801c250b9", "html_url": "https://github.com/rust-lang/rust/commit/a216e847272ddbd3033037b606eaf2d801c250b9"}], "stats": {"total": 13, "additions": 5, "deletions": 8}, "files": [{"sha": "c693cceeac4824455e05a26aa6940be8ffdc7e10", "filename": "src/doc/trpl/error-handling.md", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6fb2333d7702356f8960840d41a4763bda074fe7/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "raw_url": "https://github.com/rust-lang/rust/raw/6fb2333d7702356f8960840d41a4763bda074fe7/src%2Fdoc%2Ftrpl%2Ferror-handling.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Ferror-handling.md?ref=6fb2333d7702356f8960840d41a4763bda074fe7", "patch": "@@ -1605,14 +1605,11 @@ arguments.\n \n ## Writing the logic\n \n-We're all different in how we write code, but error handling is\n-usually the last thing we want to think about. This isn't very good\n-practice for good design, but it can be useful for rapidly\n-prototyping. In our case, because Rust forces us to be explicit about\n-error handling, it will also make it obvious what parts of our program\n-can cause errors. Why? Because Rust will make us call `unwrap`! This\n-can give us a nice bird's eye view of how we need to approach error\n-handling.\n+We all write code differently, but error handling is usually the last thing we\n+want to think about. This isn't great for the overall design of a program, but\n+it can be useful for rapid prototyping. Because Rust forces us to be explicit\n+about error handling (by making us call `unwrap`), it is easy to see which\n+parts of our program can cause errors.\n \n In this case study, the logic is really simple. All we need to do is parse the\n CSV data given to us and print out a field in matching rows. Let's do it. (Make"}]}