{"sha": "69a19bfd4345a73836194f28e35c620d9005a825", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YTE5YmZkNDM0NWE3MzgzNjE5NGYyOGUzNWM2MjBkOTAwNWE4MjU=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-05-27T17:19:39Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-05-28T16:19:59Z"}, "message": "Initial support for force-warns", "tree": {"sha": "daec418a165197cc431228a4e5893e87d663bf83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/daec418a165197cc431228a4e5893e87d663bf83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69a19bfd4345a73836194f28e35c620d9005a825", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69a19bfd4345a73836194f28e35c620d9005a825", "html_url": "https://github.com/rust-lang/rust/commit/69a19bfd4345a73836194f28e35c620d9005a825", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69a19bfd4345a73836194f28e35c620d9005a825/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce0d64e03ef9875e0935bb60e989542b7ec29579", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce0d64e03ef9875e0935bb60e989542b7ec29579", "html_url": "https://github.com/rust-lang/rust/commit/ce0d64e03ef9875e0935bb60e989542b7ec29579"}], "stats": {"total": 153, "additions": 146, "deletions": 7}, "files": [{"sha": "482ec58fd1afdb9eeae05fd4b9d94e1d3571c9db", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69a19bfd4345a73836194f28e35c620d9005a825/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a19bfd4345a73836194f28e35c620d9005a825/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=69a19bfd4345a73836194f28e35c620d9005a825", "patch": "@@ -109,6 +109,11 @@ impl<'s> LintLevelsBuilder<'s> {\n             }\n         }\n \n+        for lint_name in &sess.opts.force_warns {\n+            store.check_lint_name_cmdline(sess, &lint_name, Level::Allow); // FIXME level is wrong\n+            self.sets.force_warns.insert(lint_name.to_uppercase());\n+        }\n+\n         self.sets.list.push(LintSet::CommandLine { specs });\n     }\n \n@@ -142,6 +147,9 @@ impl<'s> LintLevelsBuilder<'s> {\n                     LintLevelSource::Default => false,\n                     LintLevelSource::Node(symbol, _, _) => self.store.is_lint_group(symbol),\n                     LintLevelSource::CommandLine(symbol, _) => self.store.is_lint_group(symbol),\n+                    LintLevelSource::ForceWarn(symbol) => {\n+                        bug!(\"forced warn lint returned a forbid lint level\")\n+                    }\n                 };\n                 debug!(\n                     \"fcw_warning={:?}, specs.get(&id) = {:?}, old_src={:?}, id_name={:?}\",\n@@ -166,6 +174,7 @@ impl<'s> LintLevelsBuilder<'s> {\n                         LintLevelSource::CommandLine(_, _) => {\n                             diag_builder.note(\"`forbid` lint level was set on command line\");\n                         }\n+                        _ => bug!(\"forced warn lint returned a forbid lint level\"),\n                     }\n                     diag_builder.emit();\n                 };"}, {"sha": "af9bc5ebe707322022fd97a4ac4b542fa378bfdb", "filename": "compiler/rustc_middle/src/lint.rs", "status": "modified", "additions": 27, "deletions": 4, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/69a19bfd4345a73836194f28e35c620d9005a825/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a19bfd4345a73836194f28e35c620d9005a825/compiler%2Frustc_middle%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flint.rs?ref=69a19bfd4345a73836194f28e35c620d9005a825", "patch": "@@ -1,7 +1,8 @@\n use std::cmp;\n \n use crate::ich::StableHashingContext;\n-use rustc_data_structures::fx::FxHashMap;\n+use chalk_ir::Substitution;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_errors::{DiagnosticBuilder, DiagnosticId};\n use rustc_hir::HirId;\n@@ -28,6 +29,9 @@ pub enum LintLevelSource {\n     /// The provided `Level` is the level specified on the command line.\n     /// (The actual level may be lower due to `--cap-lints`.)\n     CommandLine(Symbol, Level),\n+\n+    /// Lint is being forced to warn no matter what.\n+    ForceWarn(Symbol),\n }\n \n impl LintLevelSource {\n@@ -36,6 +40,7 @@ impl LintLevelSource {\n             LintLevelSource::Default => symbol::kw::Default,\n             LintLevelSource::Node(name, _, _) => name,\n             LintLevelSource::CommandLine(name, _) => name,\n+            LintLevelSource::ForceWarn(name) => name,\n         }\n     }\n \n@@ -44,6 +49,7 @@ impl LintLevelSource {\n             LintLevelSource::Default => DUMMY_SP,\n             LintLevelSource::Node(_, span, _) => span,\n             LintLevelSource::CommandLine(_, _) => DUMMY_SP,\n+            LintLevelSource::ForceWarn(_) => DUMMY_SP,\n         }\n     }\n }\n@@ -55,6 +61,7 @@ pub type LevelAndSource = (Level, LintLevelSource);\n pub struct LintLevelSets {\n     pub list: Vec<LintSet>,\n     pub lint_cap: Level,\n+    pub force_warns: FxHashSet<String>,\n }\n \n #[derive(Debug)]\n@@ -73,7 +80,11 @@ pub enum LintSet {\n \n impl LintLevelSets {\n     pub fn new() -> Self {\n-        LintLevelSets { list: Vec::new(), lint_cap: Level::Forbid }\n+        LintLevelSets {\n+            list: Vec::new(),\n+            lint_cap: Level::Forbid,\n+            force_warns: FxHashSet::default(),\n+        }\n     }\n \n     pub fn get_lint_level(\n@@ -83,6 +94,11 @@ impl LintLevelSets {\n         aux: Option<&FxHashMap<LintId, LevelAndSource>>,\n         sess: &Session,\n     ) -> LevelAndSource {\n+        // Check whether we should always warn\n+        if self.force_warns.contains(lint.name) {\n+            return (Level::Warn, LintLevelSource::ForceWarn(Symbol::intern(lint.name)));\n+        }\n+\n         let (level, mut src) = self.get_lint_id_level(LintId::of(lint), idx, aux);\n \n         // If `level` is none then we actually assume the default level for this\n@@ -176,11 +192,11 @@ impl LintLevelMap {\n impl<'a> HashStable<StableHashingContext<'a>> for LintLevelMap {\n     #[inline]\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n-        let LintLevelMap { ref sets, ref id_to_set } = *self;\n+        let LintLevelMap { ref sets, ref id_to_set, .. } = *self;\n \n         id_to_set.hash_stable(hcx, hasher);\n \n-        let LintLevelSets { ref list, lint_cap } = *sets;\n+        let LintLevelSets { ref list, lint_cap, .. } = *sets;\n \n         lint_cap.hash_stable(hcx, hasher);\n \n@@ -346,6 +362,13 @@ pub fn struct_lint_level<'s, 'd>(\n                     );\n                 }\n             }\n+            LintLevelSource::ForceWarn(_) => {\n+                sess.diag_note_once(\n+                    &mut err,\n+                    DiagnosticMessageId::from(lint),\n+                    \"Warning forced by `force-warns` commandline option\",\n+                );\n+            }\n         }\n \n         err.code(DiagnosticId::Lint { name, has_future_breakage });"}, {"sha": "5a9da2f2590e6a906a8690ed1f83617d27825f1a", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/69a19bfd4345a73836194f28e35c620d9005a825/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a19bfd4345a73836194f28e35c620d9005a825/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=69a19bfd4345a73836194f28e35c620d9005a825", "patch": "@@ -677,6 +677,7 @@ impl Default for Options {\n             optimize: OptLevel::No,\n             debuginfo: DebugInfo::None,\n             lint_opts: Vec::new(),\n+            force_warns: Vec::new(),\n             lint_cap: None,\n             describe_lints: false,\n             output_types: OutputTypes(BTreeMap::new()),\n@@ -1092,6 +1093,13 @@ pub fn rustc_short_optgroups() -> Vec<RustcOptGroup> {\n              level\",\n             \"LEVEL\",\n         ),\n+        opt::multi_s(\n+            \"\",\n+            \"force-warns\",\n+            \"Specifiy lints that should warn even if \\\n+             they are allowed somewhere else\",\n+            \"LINT\",\n+        ),\n         opt::multi_s(\"C\", \"codegen\", \"Set a codegen option\", \"OPT[=VALUE]\"),\n         opt::flag_s(\"V\", \"version\", \"Print version info and exit\"),\n         opt::flag_s(\"v\", \"verbose\", \"Use verbose output\"),\n@@ -1156,7 +1164,7 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n pub fn get_cmd_lint_options(\n     matches: &getopts::Matches,\n     error_format: ErrorOutputType,\n-) -> (Vec<(String, lint::Level)>, bool, Option<lint::Level>) {\n+) -> (Vec<(String, lint::Level)>, bool, Option<lint::Level>, Vec<String>) {\n     let mut lint_opts_with_position = vec![];\n     let mut describe_lints = false;\n \n@@ -1189,7 +1197,10 @@ pub fn get_cmd_lint_options(\n         lint::Level::from_str(&cap)\n             .unwrap_or_else(|| early_error(error_format, &format!(\"unknown lint level: `{}`\", cap)))\n     });\n-    (lint_opts, describe_lints, lint_cap)\n+\n+    let force_warns = matches.opt_strs(\"force-warns\");\n+\n+    (lint_opts, describe_lints, lint_cap, force_warns)\n }\n \n /// Parses the `--color` flag.\n@@ -1926,7 +1937,8 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n     let crate_types = parse_crate_types_from_list(unparsed_crate_types)\n         .unwrap_or_else(|e| early_error(error_format, &e[..]));\n \n-    let (lint_opts, describe_lints, lint_cap) = get_cmd_lint_options(matches, error_format);\n+    let (lint_opts, describe_lints, lint_cap, force_warns) =\n+        get_cmd_lint_options(matches, error_format);\n \n     let mut debugging_opts = DebuggingOptions::build(matches, error_format);\n     check_debug_option_stability(&debugging_opts, error_format, json_rendered);\n@@ -2100,6 +2112,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         optimize: opt_level,\n         debuginfo,\n         lint_opts,\n+        force_warns,\n         lint_cap,\n         describe_lints,\n         output_types,"}, {"sha": "1d4bb55a22c2f405e69ccfdfa45fa291129c9306", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/69a19bfd4345a73836194f28e35c620d9005a825/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a19bfd4345a73836194f28e35c620d9005a825/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=69a19bfd4345a73836194f28e35c620d9005a825", "patch": "@@ -130,6 +130,7 @@ top_level_options!(\n         debuginfo: DebugInfo [TRACKED],\n         lint_opts: Vec<(String, lint::Level)> [TRACKED],\n         lint_cap: Option<lint::Level> [TRACKED],\n+        force_warns: Vec<String> [TRACKED],\n         describe_lints: bool [UNTRACKED],\n         output_types: OutputTypes [TRACKED],\n         search_paths: Vec<SearchPath> [UNTRACKED],"}, {"sha": "5501faa437aaea7bfcfabc56ed873d034b726bf4", "filename": "src/test/ui/lint/force-warn/force-allow-all-warnings.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allow-all-warnings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allow-all-warnings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allow-all-warnings.rs?ref=69a19bfd4345a73836194f28e35c620d9005a825", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: --force-warns dead_code\n+// check-pass\n+\n+#![allow(warnings)]\n+\n+fn dead_function() {}\n+//~^ WARN function is never used\n+\n+fn main() {}"}, {"sha": "c19f1fe780fb6e6b954e4ec2da1c14f755f74d8e", "filename": "src/test/ui/lint/force-warn/force-allow-all-warnings.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allow-all-warnings.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allow-all-warnings.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allow-all-warnings.stderr?ref=69a19bfd4345a73836194f28e35c620d9005a825", "patch": "@@ -0,0 +1,10 @@\n+warning: function is never used: `dead_function`\n+  --> $DIR/force-allow-all-warnings.rs:6:4\n+   |\n+LL | fn dead_function() {}\n+   |    ^^^^^^^^^^^^^\n+   |\n+   = note: Warning forced by `force-warns` commandline option\n+\n+warning: 1 warning emitted\n+"}, {"sha": "d4a5056ddf3db8f7ea12d29669c671acf988aa12", "filename": "src/test/ui/lint/force-warn/force-allow-by-default.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allow-by-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allow-by-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allow-by-default.rs?ref=69a19bfd4345a73836194f28e35c620d9005a825", "patch": "@@ -0,0 +1,11 @@\n+// compile-flags: --force-warns elided_lifetimes_in_paths\n+// check-pass\n+\n+struct Foo<'a> {\n+    x: &'a u32,\n+}\n+\n+fn foo(x: &Foo) {}\n+//~^ WARN hidden lifetime parameters in types are deprecated\n+\n+fn main() {}"}, {"sha": "9f62e85e545278a521456e0c895012e6184b69dc", "filename": "src/test/ui/lint/force-warn/force-allow-by-default.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allow-by-default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allow-by-default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allow-by-default.stderr?ref=69a19bfd4345a73836194f28e35c620d9005a825", "patch": "@@ -0,0 +1,10 @@\n+warning: hidden lifetime parameters in types are deprecated\n+  --> $DIR/force-allow-by-default.rs:8:12\n+   |\n+LL | fn foo(x: &Foo) {}\n+   |            ^^^- help: indicate the anonymous lifetime: `<'_>`\n+   |\n+   = note: Warning forced by `force-warns` commandline option\n+\n+warning: 1 warning emitted\n+"}, {"sha": "b34fb5d8b8453643bcda0620f9b7ed86b04333c3", "filename": "src/test/ui/lint/force-warn/force-allowed-deny.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-deny.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-deny.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-deny.rs?ref=69a19bfd4345a73836194f28e35c620d9005a825", "patch": "@@ -0,0 +1,10 @@\n+// ignore-test\n+// compile-flags: --force-warns arithmetic_overflow\n+// check-pass\n+\n+#![allow(arithmetic_overflow)]\n+\n+fn main() {\n+    1_i32 << 32;\n+    //~^ WARN this arithmetic operation will overflow\n+}"}, {"sha": "fe8b106a0860bd667f80a9eb2ec70383ee32c271", "filename": "src/test/ui/lint/force-warn/force-allowed-group.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-group.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-group.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-group.rs?ref=69a19bfd4345a73836194f28e35c620d9005a825", "patch": "@@ -0,0 +1,12 @@\n+// compile-flags: --force-warns bare_trait_objects\n+// check-pass\n+\n+#![allow(rust_2018_compatibility)]\n+\n+pub trait SomeTrait {}\n+\n+pub fn function(_x: Box<SomeTrait>) {}\n+//~^ WARN trait objects without an explicit `dyn` are deprecated\n+//~| WARN this was previously accepted by the compiler\n+\n+fn main() {}"}, {"sha": "9fdd998ebf41dd39c9b73c794e355f3e17064aea", "filename": "src/test/ui/lint/force-warn/force-allowed-group.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-group.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-group.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-group.stderr?ref=69a19bfd4345a73836194f28e35c620d9005a825", "patch": "@@ -0,0 +1,12 @@\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/force-allowed-group.rs:8:25\n+   |\n+LL | pub fn function(_x: Box<SomeTrait>) {}\n+   |                         ^^^^^^^^^ help: use `dyn`: `dyn SomeTrait`\n+   |\n+   = note: Warning forced by `force-warns` commandline option\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2021 edition!\n+   = note: for more information, see issue #80165 <https://github.com/rust-lang/rust/issues/80165>\n+\n+warning: 1 warning emitted\n+"}, {"sha": "5c83c525e38b5ddf6f55144f235347183b942a01", "filename": "src/test/ui/lint/force-warn/force-allowed-warning.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-warning.rs?ref=69a19bfd4345a73836194f28e35c620d9005a825", "patch": "@@ -0,0 +1,9 @@\n+// compile-flags: --force-warns dead_code\n+// check-pass\n+\n+#![allow(dead_code)]\n+\n+fn dead_function() {}\n+//~^ WARN function is never used\n+\n+fn main() {}"}, {"sha": "9ae32e89a98d2ad2900e67d3a177a957fcb7192a", "filename": "src/test/ui/lint/force-warn/force-allowed-warning.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69a19bfd4345a73836194f28e35c620d9005a825/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fforce-warn%2Fforce-allowed-warning.stderr?ref=69a19bfd4345a73836194f28e35c620d9005a825", "patch": "@@ -0,0 +1,10 @@\n+warning: function is never used: `dead_function`\n+  --> $DIR/force-allowed-warning.rs:6:4\n+   |\n+LL | fn dead_function() {}\n+   |    ^^^^^^^^^^^^^\n+   |\n+   = note: Warning forced by `force-warns` commandline option\n+\n+warning: 1 warning emitted\n+"}]}