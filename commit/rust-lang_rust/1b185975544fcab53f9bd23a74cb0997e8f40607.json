{"sha": "1b185975544fcab53f9bd23a74cb0997e8f40607", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMTg1OTc1NTQ0ZmNhYjUzZjliZDIzYTc0Y2IwOTk3ZThmNDA2MDc=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-08-25T13:44:22Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-08-29T06:07:41Z"}, "message": "Fix missing_const_for_fn false positive\n\nWe don't want to lint if any of the input parameters implement drop.\n\n(constant functions cannot evaluate destructors)", "tree": {"sha": "a63c78c580c45c76c1b0c3236202d6d8a27264fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a63c78c580c45c76c1b0c3236202d6d8a27264fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b185975544fcab53f9bd23a74cb0997e8f40607", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJEBAABCgAuFiEEj4U0bmbiMSg/mWqvgqphyqETl+YFAl1na8kQHGRldkBwaGFu\nc2NoLm5ldAAKCRCCqmHKoROX5mv3EACoxztTK52UtZfPfJ2bhnt2je9HsT5vrBVl\notK7esRIdv6FwlBJDto0XR71caYFV9PIrCmDwogvlUUq8CwgCTJhJGGBziHknrKb\nDYM4MRQPCgMKftlu4JC16WNBOmytOHYyhtbrrgzeJ8G3f4npa52xtxTawRCM1pud\nCZJrrMxTmuHIXh+KKyWdVdDZjkcvNLiwxQRYs9ZhCxq+204rSiSCROx3WF6A4fj0\nKNoNIfhB9u7ek5AT17OHxTrVu2FVC0G33IU7TO+YFYAzklWhhjHxMe650y41bP8a\nJpSw4Tv4LGP+/0iUjlNBPUp5RR0FXBn4HNKhPz5rn49SyKWb7vwH4W3BreTPaqdn\nKeKSIarOqvvTdlQ/REHwXkEdjnSW7rdw+ro8ipH7Pyi4EQmUMEKfPqtBKLUXz2RF\nsSqbX2s/48xHirdxof9CrY6k4kjtziZ4TiCMfxmvZ4UdQN5LDs0Wd1OFRMLIKLF9\n72TO/sKG8/omJBoK0BO9+iDAW3xKJ7C7zYjTIkk7SCq16isx/Bb3MsBCZjpcL7Iy\nOZ+QX6vwOYlIVpWzp/+k753aZZagdneO2owJn6dtd4ENtrv2kKH26CbJ8tSmYYOW\nK2Rrjl009wzp4c1uBvbupGyjdNPVtLnOL1cfWMhpu+HprP6QyYF/mGqh2xXlaPjq\ntkRIL2X6KA==\n=TLuG\n-----END PGP SIGNATURE-----", "payload": "tree a63c78c580c45c76c1b0c3236202d6d8a27264fc\nparent 4c8a941dafff56a2485258b85b33ba33e66f6258\nauthor Philipp Hansch <dev@phansch.net> 1566740662 +0200\ncommitter Philipp Hansch <dev@phansch.net> 1567058861 +0200\n\nFix missing_const_for_fn false positive\n\nWe don't want to lint if any of the input parameters implement drop.\n\n(constant functions cannot evaluate destructors)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b185975544fcab53f9bd23a74cb0997e8f40607", "html_url": "https://github.com/rust-lang/rust/commit/1b185975544fcab53f9bd23a74cb0997e8f40607", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b185975544fcab53f9bd23a74cb0997e8f40607/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c8a941dafff56a2485258b85b33ba33e66f6258", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c8a941dafff56a2485258b85b33ba33e66f6258", "html_url": "https://github.com/rust-lang/rust/commit/4c8a941dafff56a2485258b85b33ba33e66f6258"}], "stats": {"total": 57, "additions": 54, "deletions": 3}, "files": [{"sha": "2f20aa9c683c4e166c15d3fbfe77b8467d818891", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 17, "deletions": 3, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1b185975544fcab53f9bd23a74cb0997e8f40607/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b185975544fcab53f9bd23a74cb0997e8f40607/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=1b185975544fcab53f9bd23a74cb0997e8f40607", "patch": "@@ -1,10 +1,11 @@\n-use crate::utils::{is_entrypoint_fn, span_lint, trait_ref_of_method};\n+use crate::utils::{has_drop, is_entrypoint_fn, span_lint, trait_ref_of_method};\n use rustc::hir;\n use rustc::hir::intravisit::FnKind;\n-use rustc::hir::{Body, Constness, FnDecl, HirId};\n+use rustc::hir::{Body, Constness, FnDecl, HirId, HirVec};\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_mir::transform::qualify_min_const_fn::is_min_const_fn;\n+use rustc_typeck::hir_ty_to_ty;\n use syntax_pos::Span;\n \n declare_clippy_lint! {\n@@ -94,7 +95,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n                 }\n             },\n             FnKind::Method(_, sig, ..) => {\n-                if trait_ref_of_method(cx, hir_id).is_some() || already_const(sig.header) {\n+                if trait_ref_of_method(cx, hir_id).is_some()\n+                    || already_const(sig.header)\n+                    || method_accepts_dropable(cx, &sig.decl.inputs)\n+                {\n                     return;\n                 }\n             },\n@@ -113,6 +117,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n     }\n }\n \n+/// Returns true if any of the method parameters is a type that implements `Drop`. The method\n+/// can't be made const then, because `drop` can't be const-evaluated.\n+fn method_accepts_dropable(cx: &LateContext<'_, '_>, param_tys: &HirVec<hir::Ty>) -> bool {\n+    // If any of the params are dropable, return true\n+    param_tys.iter().any(|hir_ty| {\n+        let ty_ty = hir_ty_to_ty(cx.tcx, hir_ty);\n+        has_drop(cx, ty_ty)\n+    })\n+}\n+\n // We don't have to lint on something that's already `const`\n fn already_const(header: hir::FnHeader) -> bool {\n     header.constness == Constness::Const"}, {"sha": "f367279906fda13f992c8bd3bb715f556da6e7d6", "filename": "tests/ui/missing_const_for_fn/cant_be_const.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1b185975544fcab53f9bd23a74cb0997e8f40607/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b185975544fcab53f9bd23a74cb0997e8f40607/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcant_be_const.rs?ref=1b185975544fcab53f9bd23a74cb0997e8f40607", "patch": "@@ -68,3 +68,25 @@ impl std::ops::Add for Point {\n         Point(self.0 + other.0, self.1 + other.1)\n     }\n }\n+\n+mod with_drop {\n+    pub struct A;\n+    pub struct B;\n+    impl Drop for A {\n+        fn drop(&mut self) {}\n+    }\n+\n+    impl A {\n+        // This can not be const because the type implements `Drop`.\n+        pub fn a(self) -> B {\n+            B\n+        }\n+    }\n+\n+    impl B {\n+        // This can not be const because `a` implements `Drop`.\n+        pub fn a(self, a: A) -> B {\n+            B\n+        }\n+    }\n+}"}, {"sha": "9109d255ca789cc2758f80b1bea67ef3e6e27829", "filename": "tests/ui/missing_const_for_fn/could_be_const.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1b185975544fcab53f9bd23a74cb0997e8f40607/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b185975544fcab53f9bd23a74cb0997e8f40607/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmissing_const_for_fn%2Fcould_be_const.rs?ref=1b185975544fcab53f9bd23a74cb0997e8f40607", "patch": "@@ -53,5 +53,20 @@ fn generic_arr<T: Copy>(t: [T; 1]) -> T {\n     t[0]\n }\n \n+mod with_drop {\n+    pub struct A;\n+    pub struct B;\n+    impl Drop for A {\n+        fn drop(&mut self) {}\n+    }\n+\n+    impl B {\n+        // This can be const, because `a` is passed by reference\n+        pub fn b(self, a: &A) -> B {\n+            B\n+        }\n+    }\n+}\n+\n // Should not be const\n fn main() {}"}]}