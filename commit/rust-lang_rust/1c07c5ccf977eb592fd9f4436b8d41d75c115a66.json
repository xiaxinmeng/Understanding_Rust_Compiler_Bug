{"sha": "1c07c5ccf977eb592fd9f4436b8d41d75c115a66", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFjMDdjNWNjZjk3N2ViNTkyZmQ5ZjQ0MzZiOGQ0MWQ3NWMxMTVhNjY=", "commit": {"author": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-06T22:45:11Z"}, "committer": {"name": "Igor Matuszewski", "email": "Xanewok@gmail.com", "date": "2019-03-16T21:41:13Z"}, "message": "Calculate missing functions from impl body", "tree": {"sha": "72cc141cb66d4dd49e20c84ded1556d9426529e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72cc141cb66d4dd49e20c84ded1556d9426529e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c07c5ccf977eb592fd9f4436b8d41d75c115a66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c07c5ccf977eb592fd9f4436b8d41d75c115a66", "html_url": "https://github.com/rust-lang/rust/commit/1c07c5ccf977eb592fd9f4436b8d41d75c115a66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c07c5ccf977eb592fd9f4436b8d41d75c115a66/comments", "author": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Xanewok", "id": 3093213, "node_id": "MDQ6VXNlcjMwOTMyMTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3093213?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Xanewok", "html_url": "https://github.com/Xanewok", "followers_url": "https://api.github.com/users/Xanewok/followers", "following_url": "https://api.github.com/users/Xanewok/following{/other_user}", "gists_url": "https://api.github.com/users/Xanewok/gists{/gist_id}", "starred_url": "https://api.github.com/users/Xanewok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Xanewok/subscriptions", "organizations_url": "https://api.github.com/users/Xanewok/orgs", "repos_url": "https://api.github.com/users/Xanewok/repos", "events_url": "https://api.github.com/users/Xanewok/events{/privacy}", "received_events_url": "https://api.github.com/users/Xanewok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc060573f9374af3b3a44343d303ef6e26f116a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc060573f9374af3b3a44343d303ef6e26f116a8", "html_url": "https://github.com/rust-lang/rust/commit/fc060573f9374af3b3a44343d303ef6e26f116a8"}], "stats": {"total": 63, "additions": 62, "deletions": 1}, "files": [{"sha": "120109d4b7ca522d406276784207a7e0910a3c5c", "filename": "crates/ra_assists/src/add_missing_impl_members.rs", "status": "modified", "additions": 62, "deletions": 1, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/1c07c5ccf977eb592fd9f4436b8d41d75c115a66/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c07c5ccf977eb592fd9f4436b8d41d75c115a66/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_missing_impl_members.rs?ref=1c07c5ccf977eb592fd9f4436b8d41d75c115a66", "patch": "@@ -1,7 +1,68 @@\n+use std::collections::HashSet;\n+\n use crate::assist_ctx::{Assist, AssistCtx};\n+\n+use hir::Resolver;\n use hir::db::HirDatabase;\n+use ra_syntax::{SmolStr, SyntaxKind, SyntaxNode, TreeArc};\n+use ra_syntax::ast::{self, AstNode, FnDef, ImplItem, ImplItemKind, NameOwner};\n+use ra_db::FilePosition;\n+\n+/// Given an `ast::ImplBlock`, resolves the target trait (the one being\n+/// implemented) to a `ast::TraitDef`.\n+pub(crate) fn resolve_target_trait_def(\n+    db: &impl HirDatabase,\n+    resolver: &Resolver,\n+    impl_block: &ast::ImplBlock,\n+) -> Option<TreeArc<ast::TraitDef>> {\n+    let ast_path = impl_block.target_trait().map(AstNode::syntax).and_then(ast::PathType::cast)?;\n+    let hir_path = ast_path.path().and_then(hir::Path::from_ast)?;\n+\n+    match resolver.resolve_path(db, &hir_path).take_types() {\n+        Some(hir::Resolution::Def(hir::ModuleDef::Trait(def))) => Some(def.source(db).1),\n+        _ => None,\n+    }\n+}\n+\n+pub(crate) fn add_missing_impl_members(ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    use SyntaxKind::{IMPL_BLOCK, ITEM_LIST, WHITESPACE};\n+\n+    let node = ctx.covering_node();\n+    let kinds = node.ancestors().take(3).map(SyntaxNode::kind);\n+    // Only suggest this in `impl Foo for S { [Item...] <|> }` cursor position\n+    if !Iterator::eq(kinds, [WHITESPACE, ITEM_LIST, IMPL_BLOCK].iter().cloned()) {\n+        return None;\n+    }\n+\n+    let impl_node = node.ancestors().find_map(ast::ImplBlock::cast)?;\n+\n+    let trait_def = {\n+        let db = ctx.db;\n+        // TODO: Can we get the position of cursor itself rather than supplied range?\n+        let range = ctx.frange;\n+        let position = FilePosition { file_id: range.file_id, offset: range.range.start() };\n+        let resolver = hir::source_binder::resolver_for_position(db, position);\n+\n+        resolve_target_trait_def(db, &resolver, impl_node)?\n+    };\n+\n+    let fn_def_opt = |kind| if let ImplItemKind::FnDef(def) = kind { Some(def) } else { None };\n+    let def_name = |&def| -> Option<&SmolStr> { FnDef::name(def).map(ast::Name::text) };\n+\n+    let trait_items = trait_def.syntax().descendants().find_map(ast::ItemList::cast)?.impl_items();\n+    let impl_items = impl_node.item_list()?.impl_items();\n+\n+    let trait_fns = trait_items.map(ImplItem::kind).filter_map(fn_def_opt).collect::<Vec<_>>();\n+    let impl_fns = impl_items.map(ImplItem::kind).filter_map(fn_def_opt).collect::<Vec<_>>();\n+\n+    let trait_fn_names = trait_fns.iter().filter_map(def_name).collect::<HashSet<_>>();\n+    let impl_fn_names = impl_fns.iter().filter_map(def_name).collect::<HashSet<_>>();\n+\n+    let missing_fn_names = trait_fn_names.difference(&impl_fn_names).collect::<HashSet<_>>();\n+    let missing_fns = trait_fns\n+        .iter()\n+        .filter(|&t| def_name(t).map(|n| missing_fn_names.contains(&n)).unwrap_or(false));\n \n-pub(crate) fn add_missing_impl_members(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     unimplemented!()\n }\n "}]}