{"sha": "fcd4b0176f1544b389c9b028c547a1dfc92f9a56", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZDRiMDE3NmYxNTQ0YjM4OWM5YjAyOGM1NDdhMWRmYzkyZjlhNTY=", "commit": {"author": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-12T11:08:55Z"}, "committer": {"name": "Igor Aleksanov", "email": "popzxc@yandex.ru", "date": "2020-08-12T11:08:55Z"}, "message": "Revert style preference-related fixes", "tree": {"sha": "bcca1afb725766cdf1eeb75aed3618c3e517345d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcca1afb725766cdf1eeb75aed3618c3e517345d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcd4b0176f1544b389c9b028c547a1dfc92f9a56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcd4b0176f1544b389c9b028c547a1dfc92f9a56", "html_url": "https://github.com/rust-lang/rust/commit/fcd4b0176f1544b389c9b028c547a1dfc92f9a56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcd4b0176f1544b389c9b028c547a1dfc92f9a56/comments", "author": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "popzxc", "id": 12111581, "node_id": "MDQ6VXNlcjEyMTExNTgx", "avatar_url": "https://avatars.githubusercontent.com/u/12111581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/popzxc", "html_url": "https://github.com/popzxc", "followers_url": "https://api.github.com/users/popzxc/followers", "following_url": "https://api.github.com/users/popzxc/following{/other_user}", "gists_url": "https://api.github.com/users/popzxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/popzxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/popzxc/subscriptions", "organizations_url": "https://api.github.com/users/popzxc/orgs", "repos_url": "https://api.github.com/users/popzxc/repos", "events_url": "https://api.github.com/users/popzxc/events{/privacy}", "received_events_url": "https://api.github.com/users/popzxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d180b8bbe8c9e31953069bae387b5214fbb51d64", "url": "https://api.github.com/repos/rust-lang/rust/commits/d180b8bbe8c9e31953069bae387b5214fbb51d64", "html_url": "https://github.com/rust-lang/rust/commit/d180b8bbe8c9e31953069bae387b5214fbb51d64"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "7c38f5ef9d5381ece6f62fea0fc796a0b1d6859e", "filename": "crates/flycheck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fcd4b0176f1544b389c9b028c547a1dfc92f9a56/crates%2Fflycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd4b0176f1544b389c9b028c547a1dfc92f9a56/crates%2Fflycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fflycheck%2Fsrc%2Flib.rs?ref=fcd4b0176f1544b389c9b028c547a1dfc92f9a56", "patch": "@@ -106,7 +106,6 @@ struct FlycheckActor {\n     cargo_handle: Option<CargoHandle>,\n }\n \n-#[allow(clippy::large_enum_variant)]\n enum Event {\n     Restart(Restart),\n     CheckEvent(Option<cargo_metadata::Message>),"}, {"sha": "0f33907c0aee2572d17c571ae2d0a0672be0f752", "filename": "crates/ra_arena/src/map.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcd4b0176f1544b389c9b028c547a1dfc92f9a56/crates%2Fra_arena%2Fsrc%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd4b0176f1544b389c9b028c547a1dfc92f9a56/crates%2Fra_arena%2Fsrc%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_arena%2Fsrc%2Fmap.rs?ref=fcd4b0176f1544b389c9b028c547a1dfc92f9a56", "patch": "@@ -13,18 +13,18 @@ pub struct ArenaMap<ID, V> {\n \n impl<T, V> ArenaMap<Idx<T>, V> {\n     pub fn insert(&mut self, id: Idx<T>, t: V) {\n-        let idx = Self::into_idx(id);\n+        let idx = Self::to_idx(id);\n \n         self.v.resize_with((idx + 1).max(self.v.len()), || None);\n         self.v[idx] = Some(t);\n     }\n \n     pub fn get(&self, id: Idx<T>) -> Option<&V> {\n-        self.v.get(Self::into_idx(id)).and_then(|it| it.as_ref())\n+        self.v.get(Self::to_idx(id)).and_then(|it| it.as_ref())\n     }\n \n     pub fn get_mut(&mut self, id: Idx<T>) -> Option<&mut V> {\n-        self.v.get_mut(Self::into_idx(id)).and_then(|it| it.as_mut())\n+        self.v.get_mut(Self::to_idx(id)).and_then(|it| it.as_mut())\n     }\n \n     pub fn values(&self) -> impl Iterator<Item = &V> {\n@@ -39,7 +39,7 @@ impl<T, V> ArenaMap<Idx<T>, V> {\n         self.v.iter().enumerate().filter_map(|(idx, o)| Some((Self::from_idx(idx), o.as_ref()?)))\n     }\n \n-    fn into_idx(id: Idx<T>) -> usize {\n+    fn to_idx(id: Idx<T>) -> usize {\n         u32::from(id.into_raw()) as usize\n     }\n \n@@ -51,7 +51,7 @@ impl<T, V> ArenaMap<Idx<T>, V> {\n impl<T, V> std::ops::Index<Idx<V>> for ArenaMap<Idx<V>, T> {\n     type Output = T;\n     fn index(&self, id: Idx<V>) -> &T {\n-        self.v[Self::into_idx(id)].as_ref().unwrap()\n+        self.v[Self::to_idx(id)].as_ref().unwrap()\n     }\n }\n "}, {"sha": "0b01d3bc64640f4d3e6aeb69ce3262757a7676cd", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcd4b0176f1544b389c9b028c547a1dfc92f9a56/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd4b0176f1544b389c9b028c547a1dfc92f9a56/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=fcd4b0176f1544b389c9b028c547a1dfc92f9a56", "patch": "@@ -243,10 +243,12 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n         // test lambda_ret_block\n         // fn main() { || -> i32 { 92 }(); }\n         block_expr(p);\n-    } else if p.at_ts(EXPR_FIRST) {\n-        expr(p);\n     } else {\n-        p.error(\"expected expression\");\n+        if p.at_ts(EXPR_FIRST) {\n+            expr(p);\n+        } else {\n+            p.error(\"expected expression\");\n+        }\n     }\n     m.complete(p, CLOSURE_EXPR)\n }"}, {"sha": "e9196fcd2f9441772a003f0db074c8dcafee736e", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/fcd4b0176f1544b389c9b028c547a1dfc92f9a56/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd4b0176f1544b389c9b028c547a1dfc92f9a56/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=fcd4b0176f1544b389c9b028c547a1dfc92f9a56", "patch": "@@ -19,9 +19,6 @@ impl FileSet {\n     pub fn len(&self) -> usize {\n         self.files.len()\n     }\n-    pub fn is_empty(&self) -> bool {\n-        self.len() == 0\n-    }\n     pub fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n         let mut base = self.paths[&anchor].clone();\n         base.pop();"}, {"sha": "cafad8070d28f17e1adb5c6594e7e1ab0a7feeb4", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fcd4b0176f1544b389c9b028c547a1dfc92f9a56/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcd4b0176f1544b389c9b028c547a1dfc92f9a56/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=fcd4b0176f1544b389c9b028c547a1dfc92f9a56", "patch": "@@ -91,16 +91,18 @@ fn generate_nodes(kinds: KindsSrc<'_>, grammar: &AstSrc) -> Result<String> {\n                             support::children(&self.syntax)\n                         }\n                     }\n-                } else if let Some(token_kind) = field.token_kind() {\n-                    quote! {\n-                        pub fn #method_name(&self) -> Option<#ty> {\n-                            support::token(&self.syntax, #token_kind)\n-                        }\n-                    }\n                 } else {\n-                    quote! {\n-                        pub fn #method_name(&self) -> Option<#ty> {\n-                            support::child(&self.syntax)\n+                    if let Some(token_kind) = field.token_kind() {\n+                        quote! {\n+                            pub fn #method_name(&self) -> Option<#ty> {\n+                                support::token(&self.syntax, #token_kind)\n+                            }\n+                        }\n+                    } else {\n+                        quote! {\n+                            pub fn #method_name(&self) -> Option<#ty> {\n+                                support::child(&self.syntax)\n+                            }\n                         }\n                     }\n                 }"}]}