{"sha": "672e071a42f565c6d0611784c2f913f6dc9287d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MmUwNzFhNDJmNTY1YzZkMDYxMTc4NGMyZjkxM2Y2ZGM5Mjg3ZDY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-12T21:28:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T13:30:54Z"}, "message": "change `RegionObligation` to store a `SubregionOrigin`", "tree": {"sha": "e08e24522cafac693dce98425255d90dacbedf19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e08e24522cafac693dce98425255d90dacbedf19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/672e071a42f565c6d0611784c2f913f6dc9287d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/672e071a42f565c6d0611784c2f913f6dc9287d6", "html_url": "https://github.com/rust-lang/rust/commit/672e071a42f565c6d0611784c2f913f6dc9287d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/672e071a42f565c6d0611784c2f913f6dc9287d6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1830c9e8f946f20c9c81f46f8b5de29de24d58a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1830c9e8f946f20c9c81f46f8b5de29de24d58a3", "html_url": "https://github.com/rust-lang/rust/commit/1830c9e8f946f20c9c81f46f8b5de29de24d58a3"}], "stats": {"total": 107, "additions": 57, "deletions": 50}, "files": [{"sha": "bd8c49620518f0fac07af46241f71d4bc4857049", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/672e071a42f565c6d0611784c2f913f6dc9287d6/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672e071a42f565c6d0611784c2f913f6dc9287d6/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=672e071a42f565c6d0611784c2f913f6dc9287d6", "patch": "@@ -418,7 +418,7 @@ pub enum FixupError {\n pub struct RegionObligation<'tcx> {\n     pub sub_region: ty::Region<'tcx>,\n     pub sup_type: Ty<'tcx>,\n-    pub cause: ObligationCause<'tcx>,\n+    pub origin: SubregionOrigin<'tcx>,\n }\n \n impl fmt::Display for FixupError {"}, {"sha": "700881ea5329fefc625dc21fe42380fd471b5fa8", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 36, "deletions": 19, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/672e071a42f565c6d0611784c2f913f6dc9287d6/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672e071a42f565c6d0611784c2f913f6dc9287d6/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=672e071a42f565c6d0611784c2f913f6dc9287d6", "patch": "@@ -72,10 +72,10 @@\n use hir::def_id::DefId;\n use infer::{self, GenericKind, InferCtxt, RegionObligation, SubregionOrigin, VerifyBound};\n use syntax::ast;\n-use traits;\n+use traits::{self, ObligationCause};\n use ty::outlives::Component;\n use ty::subst::{Subst, Substs};\n-use ty::{self, Ty, TyCtxt, TypeFoldable};\n+use ty::{self, Region, Ty, TyCtxt, TypeFoldable};\n \n impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// Registers that the given region obligation must be resolved\n@@ -98,6 +98,26 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             .push((body_id, obligation));\n     }\n \n+    pub fn register_region_obligation_with_cause(\n+        &self,\n+        sup_type: Ty<'tcx>,\n+        sub_region: Region<'tcx>,\n+        cause: &ObligationCause<'tcx>,\n+    ) {\n+        let origin = SubregionOrigin::from_obligation_cause(cause, || {\n+            infer::RelateParamBound(cause.span, sup_type)\n+        });\n+\n+        self.register_region_obligation(\n+            cause.body_id,\n+            RegionObligation {\n+                sup_type,\n+                sub_region,\n+                origin,\n+            },\n+        );\n+    }\n+\n     /// Trait queries just want to pass back type obligations \"as is\"\n     pub fn take_registered_region_obligations(&self) -> Vec<(ast::NodeId, RegionObligation<'tcx>)> {\n         ::std::mem::replace(&mut *self.region_obligations.borrow_mut(), vec![])\n@@ -154,10 +174,9 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         let mut my_region_obligations = Vec::with_capacity(self.region_obligations.borrow().len());\n         {\n             let mut r_o = self.region_obligations.borrow_mut();\n-            my_region_obligations.extend(\n-                r_o.drain_filter(|(ro_body_id, _)| *ro_body_id == body_id)\n-                   .map(|(_, obligation)| obligation)\n-            );\n+            my_region_obligations.extend(r_o.drain_filter(|(ro_body_id, _)| {\n+                *ro_body_id == body_id\n+            }).map(|(_, obligation)| obligation));\n         }\n \n         let outlives = &mut TypeOutlives::new(\n@@ -171,18 +190,14 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         for RegionObligation {\n             sup_type,\n             sub_region,\n-            cause,\n+            origin,\n         } in my_region_obligations\n         {\n             debug!(\n-                \"process_registered_region_obligations: sup_type={:?} sub_region={:?} cause={:?}\",\n-                sup_type, sub_region, cause\n+                \"process_registered_region_obligations: sup_type={:?} sub_region={:?} origin={:?}\",\n+                sup_type, sub_region, origin\n             );\n \n-            let origin = SubregionOrigin::from_obligation_cause(&cause, || {\n-                infer::RelateParamBound(cause.span, sup_type)\n-            });\n-\n             let sup_type = self.resolve_type_vars_if_possible(&sup_type);\n             outlives.type_must_outlive(origin, sup_type, sub_region);\n         }\n@@ -302,7 +317,8 @@ where\n             let origin = origin.clone();\n             match component {\n                 Component::Region(region1) => {\n-                    self.delegate.push_sub_region_constraint(origin, region, region1);\n+                    self.delegate\n+                        .push_sub_region_constraint(origin, region, region1);\n                 }\n                 Component::Param(param_ty) => {\n                     self.param_ty_must_outlive(origin, region, param_ty);\n@@ -405,7 +421,8 @@ where\n             }\n \n             for r in projection_ty.substs.regions() {\n-                self.delegate.push_sub_region_constraint(origin.clone(), region, r);\n+                self.delegate\n+                    .push_sub_region_constraint(origin.clone(), region, r);\n             }\n \n             return;\n@@ -497,16 +514,17 @@ where\n         );\n \n         // see the extensive comment in projection_must_outlive\n-        let ty = self\n-            .tcx\n+        let ty = self.tcx\n             .mk_projection(projection_ty.item_def_id, projection_ty.substs);\n         let recursive_bound = self.recursive_type_bound(ty);\n \n         VerifyBound::AnyRegion(declared_bounds).or(recursive_bound)\n     }\n \n     fn recursive_type_bound(&self, ty: Ty<'tcx>) -> VerifyBound<'tcx> {\n-        let mut bounds = ty.walk_shallow().map(|subty| self.type_bound(subty)).collect::<Vec<_>>();\n+        let mut bounds = ty.walk_shallow()\n+            .map(|subty| self.type_bound(subty))\n+            .collect::<Vec<_>>();\n \n         let mut regions = ty.regions();\n         regions.retain(|r| !r.is_late_bound()); // ignore late-bound regions\n@@ -674,4 +692,3 @@ impl<'cx, 'gcx, 'tcx> TypeOutlivesDelegate<'tcx> for &'cx InferCtxt<'cx, 'gcx, '\n         self.verify_generic_bound(origin, kind, a, bound)\n     }\n }\n-"}, {"sha": "aa9230a06e0ce029caba379bf3130dd47ba6ec27", "filename": "src/librustc/traits/auto_trait.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/672e071a42f565c6d0611784c2f913f6dc9287d6/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672e071a42f565c6d0611784c2f913f6dc9287d6/src%2Flibrustc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fauto_trait.rs?ref=672e071a42f565c6d0611784c2f913f6dc9287d6", "patch": "@@ -19,7 +19,7 @@ use std::collections::VecDeque;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n \n use infer::region_constraints::{Constraint, RegionConstraintData};\n-use infer::{InferCtxt, RegionObligation};\n+use infer::InferCtxt;\n \n use ty::fold::TypeFolder;\n use ty::{Region, RegionVid};\n@@ -693,23 +693,17 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                         binder.map_bound_ref(|pred| pred.0).no_late_bound_regions(),\n                     ) {\n                         (None, Some(t_a)) => {\n-                            select.infcx().register_region_obligation(\n-                                ast::DUMMY_NODE_ID,\n-                                RegionObligation {\n-                                    sup_type: t_a,\n-                                    sub_region: select.infcx().tcx.types.re_static,\n-                                    cause: dummy_cause.clone(),\n-                                },\n+                            select.infcx().register_region_obligation_with_cause(\n+                                t_a,\n+                                select.infcx().tcx.types.re_static,\n+                                &dummy_cause,\n                             );\n                         }\n                         (Some(ty::OutlivesPredicate(t_a, r_b)), _) => {\n-                            select.infcx().register_region_obligation(\n-                                ast::DUMMY_NODE_ID,\n-                                RegionObligation {\n-                                    sup_type: t_a,\n-                                    sub_region: r_b,\n-                                    cause: dummy_cause.clone(),\n-                                },\n+                            select.infcx().register_region_obligation_with_cause(\n+                                t_a,\n+                                r_b,\n+                                &dummy_cause,\n                             );\n                         }\n                         _ => {}"}, {"sha": "19ee2c1aabfa47c8c0e9bd10b4f21b0a9ea920bd", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/672e071a42f565c6d0611784c2f913f6dc9287d6/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/672e071a42f565c6d0611784c2f913f6dc9287d6/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=672e071a42f565c6d0611784c2f913f6dc9287d6", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use infer::{RegionObligation, InferCtxt};\n+use infer::InferCtxt;\n use mir::interpret::GlobalId;\n use ty::{self, Ty, TypeFoldable, ToPolyTraitRef, ToPredicate};\n use ty::error::ExpectedFound;\n@@ -372,13 +372,11 @@ impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx,\n                             Some(t_a) => {\n                                 let r_static = self.selcx.tcx().types.re_static;\n                                 if self.register_region_obligations {\n-                                    self.selcx.infcx().register_region_obligation(\n-                                        obligation.cause.body_id,\n-                                        RegionObligation {\n-                                            sup_type: t_a,\n-                                            sub_region: r_static,\n-                                            cause: obligation.cause.clone(),\n-                                        });\n+                                    self.selcx.infcx().register_region_obligation_with_cause(\n+                                        t_a,\n+                                        r_static,\n+                                        &obligation.cause,\n+                                    );\n                                 }\n                                 ProcessResult::Changed(vec![])\n                             }\n@@ -387,13 +385,11 @@ impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx,\n                     // If there aren't, register the obligation.\n                     Some(ty::OutlivesPredicate(t_a, r_b)) => {\n                         if self.register_region_obligations {\n-                            self.selcx.infcx().register_region_obligation(\n-                                obligation.cause.body_id,\n-                                RegionObligation {\n-                                    sup_type: t_a,\n-                                    sub_region: r_b,\n-                                    cause: obligation.cause.clone()\n-                                });\n+                            self.selcx.infcx().register_region_obligation_with_cause(\n+                                t_a,\n+                                r_b,\n+                                &obligation.cause,\n+                            );\n                         }\n                         ProcessResult::Changed(vec![])\n                     }"}]}