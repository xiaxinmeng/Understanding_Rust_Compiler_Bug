{"sha": "e534b565e6f101f6ec544f821dec116fed286f3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MzRiNTY1ZTZmMTAxZjZlYzU0NGY4MjFkZWMxMTZmZWQyODZmM2I=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2014-01-31T23:17:42Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-01T14:44:49Z"}, "message": "librustc: Remove uses of `token::ident_to_str()` from librustc", "tree": {"sha": "4bfeb605e5ee41226a6b9f758bf3d89a3939dfc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bfeb605e5ee41226a6b9f758bf3d89a3939dfc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e534b565e6f101f6ec544f821dec116fed286f3b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e534b565e6f101f6ec544f821dec116fed286f3b", "html_url": "https://github.com/rust-lang/rust/commit/e534b565e6f101f6ec544f821dec116fed286f3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e534b565e6f101f6ec544f821dec116fed286f3b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "344040d470262bef014f3db8d634f2cec4ddfed1", "url": "https://api.github.com/repos/rust-lang/rust/commits/344040d470262bef014f3db8d634f2cec4ddfed1", "html_url": "https://github.com/rust-lang/rust/commit/344040d470262bef014f3db8d634f2cec4ddfed1"}], "stats": {"total": 62, "additions": 42, "deletions": 20}, "files": [{"sha": "de5a7b7fd889feca77322479b79911f9a24ec55a", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e534b565e6f101f6ec544f821dec116fed286f3b/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e534b565e6f101f6ec544f821dec116fed286f3b/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=e534b565e6f101f6ec544f821dec116fed286f3b", "patch": "@@ -98,7 +98,8 @@ impl Context {\n \n impl Visitor<()> for Context {\n     fn visit_ident(&mut self, sp: Span, id: ast::Ident, _: ()) {\n-        let s = token::ident_to_str(&id);\n+        let string = token::get_ident(id.name);\n+        let s = string.get();\n \n         if !s.is_ascii() {\n             self.gate_feature(\"non_ascii_idents\", sp,"}, {"sha": "7e866b326319bc2eceabf41a8096c7c3ce9e5928", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e534b565e6f101f6ec544f821dec116fed286f3b/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e534b565e6f101f6ec544f821dec116fed286f3b/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=e534b565e6f101f6ec544f821dec116fed286f3b", "patch": "@@ -1142,8 +1142,13 @@ fn list_crate_deps(data: &[u8], out: &mut io::Writer) {\n \n     let r = get_crate_deps(data);\n     for dep in r.iter() {\n-        write!(out, \"{} {}-{}-{}\\n\",\n-                 dep.cnum, token::ident_to_str(&dep.name), dep.hash, dep.vers);\n+        let string = token::get_ident(dep.name.name);\n+        write!(out,\n+               \"{} {}-{}-{}\\n\",\n+               dep.cnum,\n+               string.get(),\n+               dep.hash,\n+               dep.vers);\n     }\n \n     write!(out, \"\\n\");"}, {"sha": "c7ba3ab01e965438d43b2523c137f6b2a09e10e0", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e534b565e6f101f6ec544f821dec116fed286f3b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e534b565e6f101f6ec544f821dec116fed286f3b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=e534b565e6f101f6ec544f821dec116fed286f3b", "patch": "@@ -1350,11 +1350,10 @@ fn my_visit_foreign_item(ni: &ForeignItem,\n                          index: @RefCell<~[entry<i64>]>) {\n     match items.get(ni.id) {\n         ast_map::NodeForeignItem(_, abi, _, pt) => {\n+            let string = token::get_ident(ni.ident.name);\n             debug!(\"writing foreign item {}::{}\",\n-                   ast_map::path_to_str(\n-                       *pt,\n-                       token::get_ident_interner()),\n-                   token::ident_to_str(&ni.ident));\n+                   ast_map::path_to_str(*pt, token::get_ident_interner()),\n+                   string.get());\n \n             let mut ebml_w = unsafe {\n                 ebml_w.unsafe_clone()"}, {"sha": "c34f5c2f56b04d9e688a8d05497f44379c878497", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e534b565e6f101f6ec544f821dec116fed286f3b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e534b565e6f101f6ec544f821dec116fed286f3b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=e534b565e6f101f6ec544f821dec116fed286f3b", "patch": "@@ -774,7 +774,8 @@ impl BorrowckCtxt {\n                         match pat.node {\n                             ast::PatIdent(_, ref path, _) => {\n                                 let ident = ast_util::path_to_ident(path);\n-                                out.push_str(token::ident_to_str(&ident));\n+                                let string = token::get_ident(ident.name);\n+                                out.push_str(string.get());\n                             }\n                             _ => {\n                                 self.tcx.sess.bug("}, {"sha": "08ab8edf750caf93130348b3ae428325b5cb8cb9", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e534b565e6f101f6ec544f821dec116fed286f3b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e534b565e6f101f6ec544f821dec116fed286f3b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=e534b565e6f101f6ec544f821dec116fed286f3b", "patch": "@@ -360,9 +360,10 @@ impl DeadVisitor {\n \n     fn warn_dead_code(&mut self, id: ast::NodeId,\n                       span: codemap::Span, ident: &ast::Ident) {\n+        let string = token::get_ident(ident.name);\n         self.tcx.sess.add_lint(DeadCode, id, span,\n                                format!(\"code is never used: `{}`\",\n-                                       token::ident_to_str(ident)));\n+                                       string.get()));\n     }\n }\n "}, {"sha": "ae1b71f5ccad193be87fae4c60785bc8f712a912", "filename": "src/librustc/middle/privacy.rs", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/e534b565e6f101f6ec544f821dec116fed286f3b/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e534b565e6f101f6ec544f821dec116fed286f3b/src%2Flibrustc%2Fmiddle%2Fprivacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fprivacy.rs?ref=e534b565e6f101f6ec544f821dec116fed286f3b", "patch": "@@ -530,8 +530,10 @@ impl<'a> PrivacyVisitor<'a> {\n                             ast::ItemTrait(..) => \"trait\",\n                             _ => return false,\n                         };\n-                        let msg = format!(\"{} `{}` is private\", desc,\n-                                          token::ident_to_str(&item.ident));\n+                        let string = token::get_ident(item.ident.name);\n+                        let msg = format!(\"{} `{}` is private\",\n+                                          desc,\n+                                          string.get());\n                         self.tcx.sess.span_note(span, msg);\n                     }\n                     Some(..) | None => {}\n@@ -588,8 +590,10 @@ impl<'a> PrivacyVisitor<'a> {\n             if struct_vis != ast::Public && field.vis == ast::Public { break }\n             if !is_local(field.id) ||\n                !self.private_accessible(field.id.node) {\n-                self.tcx.sess.span_err(span, format!(\"field `{}` is private\",\n-                                             token::ident_to_str(&ident)));\n+                let string = token::get_ident(ident.name);\n+                self.tcx.sess.span_err(span,\n+                                       format!(\"field `{}` is private\",\n+                                               string.get()))\n             }\n             break;\n         }\n@@ -603,8 +607,11 @@ impl<'a> PrivacyVisitor<'a> {\n         let method_id = ty::method(self.tcx, method_id).provided_source\n                                                        .unwrap_or(method_id);\n \n-        self.ensure_public(span, method_id, None,\n-                           format!(\"method `{}`\", token::ident_to_str(name)));\n+        let string = token::get_ident(name.name);\n+        self.ensure_public(span,\n+                           method_id,\n+                           None,\n+                           format!(\"method `{}`\", string.get()));\n     }\n \n     // Checks that a path is in scope.\n@@ -617,10 +624,17 @@ impl<'a> PrivacyVisitor<'a> {\n             match *self.last_private_map.get(&path_id) {\n                 resolve::AllPublic => {},\n                 resolve::DependsOn(def) => {\n-                    let name = token::ident_to_str(&path.segments.last().unwrap()\n-                                                        .identifier);\n-                    self.ensure_public(span, def, Some(origdid),\n-                                       format!(\"{} `{}`\", tyname, name));\n+                    let name = token::get_ident(path.segments\n+                                                    .last()\n+                                                    .unwrap()\n+                                                    .identifier\n+                                                    .name);\n+                    self.ensure_public(span,\n+                                       def,\n+                                       Some(origdid),\n+                                       format!(\"{} `{}`\",\n+                                               tyname,\n+                                               name.get()));\n                 }\n             }\n         };"}, {"sha": "8b6cfe88f41105789688c37f2cd4319a4d62016c", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e534b565e6f101f6ec544f821dec116fed286f3b/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e534b565e6f101f6ec544f821dec116fed286f3b/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=e534b565e6f101f6ec544f821dec116fed286f3b", "patch": "@@ -824,7 +824,8 @@ impl Repr for ty::Method {\n \n impl Repr for ast::Ident {\n     fn repr(&self, _tcx: ctxt) -> ~str {\n-        token::ident_to_str(self).to_owned()\n+        let string = token::get_ident(self.name);\n+        string.get().to_str()\n     }\n }\n "}]}