{"sha": "91bd783273477d5709ea4bb891355e9aa9a7cdfe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxYmQ3ODMyNzM0NzdkNTcwOWVhNGJiODkxMzU1ZTlhYTlhN2NkZmU=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-25T10:48:47Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-05-25T10:48:47Z"}, "message": "Merge #1327\n\n1327: Colorize Rust code as HTML r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "606a17d688e931e35fe45eefd6c13c0baf7bd5bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/606a17d688e931e35fe45eefd6c13c0baf7bd5bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91bd783273477d5709ea4bb891355e9aa9a7cdfe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91bd783273477d5709ea4bb891355e9aa9a7cdfe", "html_url": "https://github.com/rust-lang/rust/commit/91bd783273477d5709ea4bb891355e9aa9a7cdfe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91bd783273477d5709ea4bb891355e9aa9a7cdfe/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "9800699bab04e97996f0aebec528714165a2619b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9800699bab04e97996f0aebec528714165a2619b", "html_url": "https://github.com/rust-lang/rust/commit/9800699bab04e97996f0aebec528714165a2619b"}, {"sha": "c6e905a79f7ba083b3f97728aa3a74fb0e03661b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e905a79f7ba083b3f97728aa3a74fb0e03661b", "html_url": "https://github.com/rust-lang/rust/commit/c6e905a79f7ba083b3f97728aa3a74fb0e03661b"}], "stats": {"total": 291, "additions": 138, "deletions": 153}, "files": [{"sha": "93aba4c704bb6cbee78473c88d4f402841d58793", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/91bd783273477d5709ea4bb891355e9aa9a7cdfe/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91bd783273477d5709ea4bb891355e9aa9a7cdfe/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=91bd783273477d5709ea4bb891355e9aa9a7cdfe", "patch": "@@ -3,7 +3,7 @@ mod analysis_stats;\n use std::io::Read;\n \n use clap::{App, Arg, SubCommand};\n-use ra_ide_api::file_structure;\n+use ra_ide_api::{file_structure, Analysis};\n use ra_syntax::{SourceFile, TreeArc, AstNode};\n use flexi_logger::Logger;\n use ra_prof::profile;\n@@ -16,6 +16,7 @@ fn main() -> Result<()> {\n         .setting(clap::AppSettings::SubcommandRequiredElseHelp)\n         .subcommand(SubCommand::with_name(\"parse\").arg(Arg::with_name(\"no-dump\").long(\"--no-dump\")))\n         .subcommand(SubCommand::with_name(\"symbols\"))\n+        .subcommand(SubCommand::with_name(\"highlight\"))\n         .subcommand(\n             SubCommand::with_name(\"analysis-stats\")\n                 .arg(Arg::with_name(\"verbose\").short(\"v\").long(\"verbose\"))\n@@ -38,6 +39,11 @@ fn main() -> Result<()> {\n                 println!(\"{:?}\", s);\n             }\n         }\n+        (\"highlight\", _) => {\n+            let (analysis, file_id) = Analysis::from_single_file(read_stdin()?);\n+            let html = analysis.highlight_as_html(file_id).unwrap();\n+            println!(\"{}\", html);\n+        }\n         (\"analysis-stats\", Some(matches)) => {\n             let verbose = matches.is_present(\"verbose\");\n             let path = matches.value_of(\"path\").unwrap_or(\"\");"}, {"sha": "d3456d5b25a54a927adae85ebb279c8a5d88f6cd", "filename": "crates/ra_ide_api/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/91bd783273477d5709ea4bb891355e9aa9a7cdfe/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91bd783273477d5709ea4bb891355e9aa9a7cdfe/crates%2Fra_ide_api%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Flib.rs?ref=91bd783273477d5709ea4bb891355e9aa9a7cdfe", "patch": "@@ -462,6 +462,11 @@ impl Analysis {\n         self.with_db(|db| syntax_highlighting::highlight(db, file_id))\n     }\n \n+    /// Computes syntax highlighting for the given file.\n+    pub fn highlight_as_html(&self, file_id: FileId) -> Cancelable<String> {\n+        self.with_db(|db| syntax_highlighting::highlight_as_html(db, file_id))\n+    }\n+\n     /// Computes completions at the given position.\n     pub fn completions(&self, position: FilePosition) -> Cancelable<Option<Vec<CompletionItem>>> {\n         self.with_db(|db| completion::completions(db, position).map(Into::into))"}, {"sha": "bfc0a67b11531d04c42c58e03090d5b512146fc8", "filename": "crates/ra_ide_api/src/snapshots/highlighting.html", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/91bd783273477d5709ea4bb891355e9aa9a7cdfe/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/91bd783273477d5709ea4bb891355e9aa9a7cdfe/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Fhighlighting.html?ref=91bd783273477d5709ea4bb891355e9aa9a7cdfe", "patch": "@@ -0,0 +1,45 @@\n+\n+<style>\n+pre {\n+    color: #DCDCCC;\n+    background-color: #3F3F3F;\n+    font-size: 22px;\n+}\n+\n+.comment   { color: #7F9F7F; }\n+.string    { color: #CC9393; }\n+.function  { color: #93E0E3; }\n+.parameter { color: #94BFF3; }\n+.builtin   { color: #DD6718; }\n+.text      { color: #DCDCCC; }\n+.attribute { color: #BFEBBF; }\n+.literal   { color: #DFAF8F; }\n+.macro     { color: #DFAF8F; }\n+\n+.keyword           { color: #F0DFAF; }\n+.keyword\\.unsafe  { color: #F0DFAF; font-weight: bold; }\n+.keyword\\.control { color: #DC8CC3; }\n+\n+</style>\n+<pre><code>\n+<span class=\"attribute\">#</span><span class=\"attribute\">[</span><span class=\"attribute\">derive</span><span class=\"attribute\">(</span><span class=\"attribute\">Clone</span><span class=\"attribute\">,</span><span class=\"attribute\"> </span><span class=\"attribute\">Debug</span><span class=\"attribute\">)</span><span class=\"attribute\">]</span>\n+<span class=\"keyword\">struct</span> <span class=\"function\">Foo</span> {\n+    <span class=\"keyword\">pub</span> <span class=\"function\">x</span>: <span class=\"text\">i32</span>,\n+    <span class=\"keyword\">pub</span> <span class=\"function\">y</span>: <span class=\"text\">i32</span>,\n+}\n+\n+<span class=\"keyword\">fn</span> <span class=\"function\">foo</span>&lt;<span class=\"type function\">T</span>&gt;() -&gt; <span class=\"type\">T</span> {\n+    <span class=\"macro\">unimplemented</span><span class=\"macro\">!</span>();\n+}\n+\n+<span class=\"comment\">// comment</span>\n+<span class=\"keyword\">fn</span> <span class=\"function\">main</span>() {\n+    <span class=\"macro\">println</span><span class=\"macro\">!</span>(<span class=\"string\">\"Hello, {}!\"</span>, <span class=\"literal\">92</span>);\n+\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"function\">vec</span> = <span class=\"text\">Vec</span>::<span class=\"text\">new</span>();\n+    <span class=\"keyword.control\">if</span> <span class=\"keyword\">true</span> {\n+        <span class=\"text\">vec</span>.<span class=\"text\">push</span>(<span class=\"type\">Foo</span> { <span class=\"field\">x</span>: <span class=\"literal\">0</span>, <span class=\"field\">y</span>: <span class=\"literal\">1</span> });\n+    }\n+    <span class=\"keyword.unsafe\">unsafe</span> { <span class=\"text\">vec</span>.<span class=\"text\">set_len</span>(<span class=\"literal\">0</span>); }\n+}\n+</code></pre>\n\\ No newline at end of file"}, {"sha": "9c60aed2abf8074388dccfa0842533a7ee48fbcd", "filename": "crates/ra_ide_api/src/snapshots/tests__highlighting.snap", "status": "removed", "additions": 0, "deletions": 146, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/9800699bab04e97996f0aebec528714165a2619b/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__highlighting.snap", "raw_url": "https://github.com/rust-lang/rust/raw/9800699bab04e97996f0aebec528714165a2619b/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__highlighting.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Ftests__highlighting.snap?ref=9800699bab04e97996f0aebec528714165a2619b", "patch": "@@ -1,146 +0,0 @@\n----\n-created: \"2019-05-23T22:23:35.242742395Z\"\n-creator: insta@0.8.1\n-source: crates/ra_ide_api/src/syntax_highlighting.rs\n-expression: result\n----\n-Ok(\n-    [\n-        HighlightedRange {\n-            range: [1; 24),\n-            tag: \"attribute\",\n-        },\n-        HighlightedRange {\n-            range: [25; 31),\n-            tag: \"keyword\",\n-        },\n-        HighlightedRange {\n-            range: [32; 35),\n-            tag: \"function\",\n-        },\n-        HighlightedRange {\n-            range: [42; 45),\n-            tag: \"keyword\",\n-        },\n-        HighlightedRange {\n-            range: [46; 47),\n-            tag: \"function\",\n-        },\n-        HighlightedRange {\n-            range: [49; 52),\n-            tag: \"text\",\n-        },\n-        HighlightedRange {\n-            range: [58; 61),\n-            tag: \"keyword\",\n-        },\n-        HighlightedRange {\n-            range: [62; 63),\n-            tag: \"function\",\n-        },\n-        HighlightedRange {\n-            range: [65; 68),\n-            tag: \"text\",\n-        },\n-        HighlightedRange {\n-            range: [73; 75),\n-            tag: \"keyword\",\n-        },\n-        HighlightedRange {\n-            range: [76; 79),\n-            tag: \"function\",\n-        },\n-        HighlightedRange {\n-            range: [80; 81),\n-            tag: \"type\",\n-        },\n-        HighlightedRange {\n-            range: [80; 81),\n-            tag: \"function\",\n-        },\n-        HighlightedRange {\n-            range: [88; 89),\n-            tag: \"type\",\n-        },\n-        HighlightedRange {\n-            range: [96; 110),\n-            tag: \"macro\",\n-        },\n-        HighlightedRange {\n-            range: [117; 127),\n-            tag: \"comment\",\n-        },\n-        HighlightedRange {\n-            range: [128; 130),\n-            tag: \"keyword\",\n-        },\n-        HighlightedRange {\n-            range: [131; 135),\n-            tag: \"function\",\n-        },\n-        HighlightedRange {\n-            range: [145; 153),\n-            tag: \"macro\",\n-        },\n-        HighlightedRange {\n-            range: [154; 166),\n-            tag: \"string\",\n-        },\n-        HighlightedRange {\n-            range: [168; 170),\n-            tag: \"literal\",\n-        },\n-        HighlightedRange {\n-            range: [178; 181),\n-            tag: \"keyword\",\n-        },\n-        HighlightedRange {\n-            range: [182; 185),\n-            tag: \"keyword\",\n-        },\n-        HighlightedRange {\n-            range: [186; 189),\n-            tag: \"macro\",\n-        },\n-        HighlightedRange {\n-            range: [197; 200),\n-            tag: \"macro\",\n-        },\n-        HighlightedRange {\n-            range: [192; 195),\n-            tag: \"text\",\n-        },\n-        HighlightedRange {\n-            range: [208; 211),\n-            tag: \"macro\",\n-        },\n-        HighlightedRange {\n-            range: [212; 216),\n-            tag: \"macro\",\n-        },\n-        HighlightedRange {\n-            range: [226; 227),\n-            tag: \"literal\",\n-        },\n-        HighlightedRange {\n-            range: [232; 233),\n-            tag: \"literal\",\n-        },\n-        HighlightedRange {\n-            range: [242; 248),\n-            tag: \"keyword.unsafe\",\n-        },\n-        HighlightedRange {\n-            range: [251; 254),\n-            tag: \"text\",\n-        },\n-        HighlightedRange {\n-            range: [255; 262),\n-            tag: \"text\",\n-        },\n-        HighlightedRange {\n-            range: [263; 264),\n-            tag: \"literal\",\n-        },\n-    ],\n-)"}, {"sha": "87e053364cc77d92d58fd44d65135aa4cbada730", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 81, "deletions": 6, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/91bd783273477d5709ea4bb891355e9aa9a7cdfe/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91bd783273477d5709ea4bb891355e9aa9a7cdfe/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=91bd783273477d5709ea4bb891355e9aa9a7cdfe", "patch": "@@ -114,10 +114,79 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n     res\n }\n \n+pub(crate) fn highlight_as_html(db: &RootDatabase, file_id: FileId) -> String {\n+    let source_file = db.parse(file_id);\n+\n+    let mut ranges = highlight(db, file_id);\n+    ranges.sort_by_key(|it| it.range.start());\n+    // quick non-optimal heuristic to intersect token ranges and highlighted ranges\n+    let mut frontier = 0;\n+    let mut could_intersect: Vec<&HighlightedRange> = Vec::new();\n+\n+    let mut buf = String::new();\n+    buf.push_str(&STYLE);\n+    buf.push_str(\"<pre><code>\");\n+    let tokens = source_file.syntax().descendants_with_tokens().filter_map(|it| it.as_token());\n+    for token in tokens {\n+        could_intersect.retain(|it| token.range().start() <= it.range.end());\n+        while let Some(r) = ranges.get(frontier) {\n+            if r.range.start() <= token.range().end() {\n+                could_intersect.push(r);\n+                frontier += 1;\n+            } else {\n+                break;\n+            }\n+        }\n+        let text = html_escape(&token.text());\n+        let classes = could_intersect\n+            .iter()\n+            .filter(|it| token.range().is_subrange(&it.range))\n+            .map(|it| it.tag)\n+            .collect::<Vec<_>>();\n+        if classes.is_empty() {\n+            buf.push_str(&text);\n+        } else {\n+            let classes = classes.join(\" \");\n+            buf.push_str(&format!(\"<span class=\\\"{}\\\">{}</span>\", classes, text));\n+        }\n+    }\n+    buf.push_str(\"</code></pre>\");\n+    buf\n+}\n+\n+//FIXME: like, real html escaping\n+fn html_escape(text: &str) -> String {\n+    text.replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\")\n+}\n+\n+const STYLE: &str = \"\n+<style>\n+pre {\n+    color: #DCDCCC;\n+    background-color: #3F3F3F;\n+    font-size: 22px;\n+}\n+\n+.comment   { color: #7F9F7F; }\n+.string    { color: #CC9393; }\n+.function  { color: #93E0E3; }\n+.parameter { color: #94BFF3; }\n+.builtin   { color: #DD6718; }\n+.text      { color: #DCDCCC; }\n+.attribute { color: #BFEBBF; }\n+.literal   { color: #DFAF8F; }\n+.macro     { color: #DFAF8F; }\n+\n+.keyword           { color: #F0DFAF; }\n+.keyword\\\\.unsafe  { color: #F0DFAF; font-weight: bold; }\n+.keyword\\\\.control { color: #DC8CC3; }\n+\n+</style>\n+\";\n+\n #[cfg(test)]\n mod tests {\n-    use insta::assert_debug_snapshot_matches;\n-\n+    use test_utils::{project_dir, read_text, assert_eq_text};\n     use crate::mock_analysis::single_file;\n \n     #[test]\n@@ -135,15 +204,21 @@ fn foo<T>() -> T {\n }\n \n // comment\n-fn main() {}\n+fn main() {\n     println!(\"Hello, {}!\", 92);\n \n     let mut vec = Vec::new();\n-    vec.push(Foo { x: 0, y: 1 });\n+    if true {\n+        vec.push(Foo { x: 0, y: 1 });\n+    }\n     unsafe { vec.set_len(0); }\n+}\n \"#,\n         );\n-        let result = analysis.highlight(file_id);\n-        assert_debug_snapshot_matches!(\"highlighting\", result);\n+        let dst_file = project_dir().join(\"crates/ra_ide_api/src/snapshots/highlighting.html\");\n+        let actual_html = &analysis.highlight_as_html(file_id).unwrap();\n+        let expected_html = &read_text(&dst_file);\n+        // std::fs::write(dst_file, &actual_html).unwrap();\n+        assert_eq_text!(expected_html, actual_html);\n     }\n }"}]}