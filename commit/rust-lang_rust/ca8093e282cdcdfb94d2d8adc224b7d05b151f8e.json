{"sha": "ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "node_id": "C_kwDOAAsO6NoAKGNhODA5M2UyODJjZGNkZmI5NGQyZDhhZGMyMjRiN2QwNWIxNTFmOGU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-25T19:08:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-25T19:08:57Z"}, "message": "Auto merge of #13116 - Veykril:nohash, r=Veykril\n\nMake use of NoHash hashing for FileId and CrateId\n\nBoth of these are mere integers so there is nothing to hash here.\n\nIdeally we would use this for `la_arena::Idx` too, but that doesn't work due to the orphan rule, and `la_arena` is unfortunately a public library so we can't really do much here... Unless we remove the trait restriction but I'd like not to", "tree": {"sha": "5cb232ef92d640ece9f02a261641fc83b23082b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cb232ef92d640ece9f02a261641fc83b23082b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "html_url": "https://github.com/rust-lang/rust/commit/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eb76899217658921605db9d1d50fbfac6c15284", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb76899217658921605db9d1d50fbfac6c15284", "html_url": "https://github.com/rust-lang/rust/commit/6eb76899217658921605db9d1d50fbfac6c15284"}, {"sha": "5b6aefe56532b1766e5fde76deeabf79e1ceb94e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b6aefe56532b1766e5fde76deeabf79e1ceb94e", "html_url": "https://github.com/rust-lang/rust/commit/5b6aefe56532b1766e5fde76deeabf79e1ceb94e"}], "stats": {"total": 968, "additions": 539, "deletions": 429}, "files": [{"sha": "9f10d92c4e3ab0dc90c60ff09287ade92fbdff6d", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -704,6 +704,7 @@ dependencies = [\n  \"ide-db\",\n  \"itertools\",\n  \"parser\",\n+ \"stdx\",\n  \"syntax\",\n  \"test-utils\",\n  \"text-edit\",\n@@ -1921,6 +1922,7 @@ dependencies = [\n  \"indexmap\",\n  \"paths\",\n  \"rustc-hash\",\n+ \"stdx\",\n ]\n \n [[package]]"}, {"sha": "b388e47dee6e4ecd4411158467ca7e39a4da34f5", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 28, "deletions": 12, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -9,10 +9,11 @@\n use std::{fmt, ops, panic::RefUnwindSafe, str::FromStr, sync::Arc};\n \n use cfg::CfgOptions;\n-use rustc_hash::{FxHashMap, FxHashSet};\n+use rustc_hash::FxHashMap;\n+use stdx::hash::{NoHashHashMap, NoHashHashSet};\n use syntax::SmolStr;\n use tt::Subtree;\n-use vfs::{file_set::FileSet, FileId, VfsPath};\n+use vfs::{file_set::FileSet, AnchoredPath, FileId, VfsPath};\n \n /// Files are grouped into source roots. A source root is a directory on the\n /// file systems which is watched for changes. Typically it corresponds to a\n@@ -31,22 +32,30 @@ pub struct SourceRoot {\n     /// Libraries are considered mostly immutable, this assumption is used to\n     /// optimize salsa's query structure\n     pub is_library: bool,\n-    pub(crate) file_set: FileSet,\n+    file_set: FileSet,\n }\n \n impl SourceRoot {\n     pub fn new_local(file_set: FileSet) -> SourceRoot {\n         SourceRoot { is_library: false, file_set }\n     }\n+\n     pub fn new_library(file_set: FileSet) -> SourceRoot {\n         SourceRoot { is_library: true, file_set }\n     }\n+\n     pub fn path_for_file(&self, file: &FileId) -> Option<&VfsPath> {\n         self.file_set.path_for_file(file)\n     }\n+\n     pub fn file_for_path(&self, path: &VfsPath) -> Option<&FileId> {\n         self.file_set.file_for_path(path)\n     }\n+\n+    pub fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {\n+        self.file_set.resolve_path(path)\n+    }\n+\n     pub fn iter(&self) -> impl Iterator<Item = FileId> + '_ {\n         self.file_set.iter()\n     }\n@@ -72,12 +81,19 @@ impl SourceRoot {\n /// <https://github.com/rust-lang/rust-analyzer/blob/master/docs/dev/architecture.md#serialization>\n #[derive(Debug, Clone, Default /* Serialize, Deserialize */)]\n pub struct CrateGraph {\n-    arena: FxHashMap<CrateId, CrateData>,\n+    arena: NoHashHashMap<CrateId, CrateData>,\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n+#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n pub struct CrateId(pub u32);\n \n+impl stdx::hash::NoHashHashable for CrateId {}\n+impl std::hash::Hash for CrateId {\n+    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {\n+        self.0.hash(state);\n+    }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct CrateName(SmolStr);\n \n@@ -342,7 +358,7 @@ impl CrateGraph {\n         // Check if adding a dep from `from` to `to` creates a cycle. To figure\n         // that out, look for a  path in the *opposite* direction, from `to` to\n         // `from`.\n-        if let Some(path) = self.find_path(&mut FxHashSet::default(), dep.crate_id, from) {\n+        if let Some(path) = self.find_path(&mut NoHashHashSet::default(), dep.crate_id, from) {\n             let path = path.into_iter().map(|it| (it, self[it].display_name.clone())).collect();\n             let err = CyclicDependenciesError { path };\n             assert!(err.from().0 == from && err.to().0 == dep.crate_id);\n@@ -365,7 +381,7 @@ impl CrateGraph {\n     /// including the crate itself.\n     pub fn transitive_deps(&self, of: CrateId) -> impl Iterator<Item = CrateId> {\n         let mut worklist = vec![of];\n-        let mut deps = FxHashSet::default();\n+        let mut deps = NoHashHashSet::default();\n \n         while let Some(krate) = worklist.pop() {\n             if !deps.insert(krate) {\n@@ -382,10 +398,10 @@ impl CrateGraph {\n     /// including the crate itself.\n     pub fn transitive_rev_deps(&self, of: CrateId) -> impl Iterator<Item = CrateId> {\n         let mut worklist = vec![of];\n-        let mut rev_deps = FxHashSet::default();\n+        let mut rev_deps = NoHashHashSet::default();\n         rev_deps.insert(of);\n \n-        let mut inverted_graph = FxHashMap::<_, Vec<_>>::default();\n+        let mut inverted_graph = NoHashHashMap::<_, Vec<_>>::default();\n         self.arena.iter().for_each(|(&krate, data)| {\n             data.dependencies\n                 .iter()\n@@ -409,7 +425,7 @@ impl CrateGraph {\n     /// come before the crate itself).\n     pub fn crates_in_topological_order(&self) -> Vec<CrateId> {\n         let mut res = Vec::new();\n-        let mut visited = FxHashSet::default();\n+        let mut visited = NoHashHashSet::default();\n \n         for krate in self.arena.keys().copied() {\n             go(self, &mut visited, &mut res, krate);\n@@ -419,7 +435,7 @@ impl CrateGraph {\n \n         fn go(\n             graph: &CrateGraph,\n-            visited: &mut FxHashSet<CrateId>,\n+            visited: &mut NoHashHashSet<CrateId>,\n             res: &mut Vec<CrateId>,\n             source: CrateId,\n         ) {\n@@ -459,7 +475,7 @@ impl CrateGraph {\n \n     fn find_path(\n         &self,\n-        visited: &mut FxHashSet<CrateId>,\n+        visited: &mut NoHashHashSet<CrateId>,\n         from: CrateId,\n         to: CrateId,\n     ) -> Option<Vec<CrateId>> {"}, {"sha": "da11e4ae7bb96f36b2532b79423407e93786cfcf", "filename": "crates/base-db/src/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fbase-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fbase-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Flib.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -8,7 +8,7 @@ pub mod fixture;\n \n use std::{panic, sync::Arc};\n \n-use rustc_hash::FxHashSet;\n+use stdx::hash::NoHashHashSet;\n use syntax::{ast, Parse, SourceFile, TextRange, TextSize};\n \n pub use crate::{\n@@ -58,7 +58,7 @@ pub trait FileLoader {\n     /// Text of the file.\n     fn file_text(&self, file_id: FileId) -> Arc<String>;\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId>;\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>>;\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<NoHashHashSet<CrateId>>;\n }\n \n /// Database which stores all significant input facts: source code and project\n@@ -94,10 +94,10 @@ pub trait SourceDatabaseExt: SourceDatabase {\n     #[salsa::input]\n     fn source_root(&self, id: SourceRootId) -> Arc<SourceRoot>;\n \n-    fn source_root_crates(&self, id: SourceRootId) -> Arc<FxHashSet<CrateId>>;\n+    fn source_root_crates(&self, id: SourceRootId) -> Arc<NoHashHashSet<CrateId>>;\n }\n \n-fn source_root_crates(db: &dyn SourceDatabaseExt, id: SourceRootId) -> Arc<FxHashSet<CrateId>> {\n+fn source_root_crates(db: &dyn SourceDatabaseExt, id: SourceRootId) -> Arc<NoHashHashSet<CrateId>> {\n     let graph = db.crate_graph();\n     let res = graph\n         .iter()\n@@ -120,10 +120,10 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n         // FIXME: this *somehow* should be platform agnostic...\n         let source_root = self.0.file_source_root(path.anchor);\n         let source_root = self.0.source_root(source_root);\n-        source_root.file_set.resolve_path(path)\n+        source_root.resolve_path(path)\n     }\n \n-    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<NoHashHashSet<CrateId>> {\n         let _p = profile::span(\"relevant_crates\");\n         let source_root = self.0.file_source_root(file_id);\n         self.0.source_root_crates(source_root)"}, {"sha": "b7908bddaa1cf785d392cf1e7f4449eee0f64e82", "filename": "crates/hir-def/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fhir-def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Ftest_db.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -10,7 +10,7 @@ use base_db::{\n     SourceDatabase, Upcast,\n };\n use hir_expand::{db::AstDatabase, InFile};\n-use rustc_hash::FxHashSet;\n+use stdx::hash::NoHashHashSet;\n use syntax::{algo, ast, AstNode};\n \n use crate::{\n@@ -76,7 +76,7 @@ impl FileLoader for TestDB {\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {\n         FileLoaderDelegate(self).resolve_path(path)\n     }\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<NoHashHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }"}, {"sha": "118e5311e9a6414ebf6ab084762257883bb2d4dd", "filename": "crates/hir-ty/src/test_db.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftest_db.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -10,7 +10,7 @@ use base_db::{\n };\n use hir_def::{db::DefDatabase, ModuleId};\n use hir_expand::db::AstDatabase;\n-use rustc_hash::{FxHashMap, FxHashSet};\n+use stdx::hash::{NoHashHashMap, NoHashHashSet};\n use syntax::TextRange;\n use test_utils::extract_annotations;\n \n@@ -80,7 +80,7 @@ impl FileLoader for TestDB {\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {\n         FileLoaderDelegate(self).resolve_path(path)\n     }\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<NoHashHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }\n@@ -102,7 +102,7 @@ impl TestDB {\n         self.module_for_file_opt(file_id).unwrap()\n     }\n \n-    pub(crate) fn extract_annotations(&self) -> FxHashMap<FileId, Vec<(TextRange, String)>> {\n+    pub(crate) fn extract_annotations(&self) -> NoHashHashMap<FileId, Vec<(TextRange, String)>> {\n         let mut files = Vec::new();\n         let crate_graph = self.crate_graph();\n         for krate in crate_graph.iter() {"}, {"sha": "1ec62a8425a39b3fcb5f1fb6287047e7cf1b4002", "filename": "crates/ide-db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Flib.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -52,6 +52,7 @@ use hir::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     symbols::FileSymbolKind,\n };\n+use stdx::hash::NoHashHashSet;\n \n use crate::{line_index::LineIndex, symbol_index::SymbolsDatabase};\n pub use rustc_hash::{FxHashMap, FxHashSet, FxHasher};\n@@ -118,7 +119,7 @@ impl FileLoader for RootDatabase {\n     fn resolve_path(&self, path: AnchoredPath<'_>) -> Option<FileId> {\n         FileLoaderDelegate(self).resolve_path(path)\n     }\n-    fn relevant_crates(&self, file_id: FileId) -> Arc<FxHashSet<CrateId>> {\n+    fn relevant_crates(&self, file_id: FileId) -> Arc<NoHashHashSet<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n }"}, {"sha": "75d49ff2fd77fc040779ee51238811c3b4348777", "filename": "crates/ide-db/src/line_index.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide-db%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide-db%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fline_index.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -2,15 +2,15 @@\n //! representation.\n use std::{iter, mem};\n \n-use rustc_hash::FxHashMap;\n+use stdx::hash::NoHashHashMap;\n use syntax::{TextRange, TextSize};\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct LineIndex {\n     /// Offset the the beginning of each line, zero-based\n     pub(crate) newlines: Vec<TextSize>,\n     /// List of non-ASCII characters on each line\n-    pub(crate) utf16_lines: FxHashMap<u32, Vec<Utf16Char>>,\n+    pub(crate) utf16_lines: NoHashHashMap<u32, Vec<Utf16Char>>,\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n@@ -55,7 +55,7 @@ impl Utf16Char {\n \n impl LineIndex {\n     pub fn new(text: &str) -> LineIndex {\n-        let mut utf16_lines = FxHashMap::default();\n+        let mut utf16_lines = NoHashHashMap::default();\n         let mut utf16_chars = Vec::new();\n \n         let mut newlines = vec![0.into()];"}, {"sha": "7deffe8e0f637917c2ab05cac45ee069037caf69", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -9,7 +9,7 @@ use std::{mem, sync::Arc};\n use base_db::{FileId, FileRange, SourceDatabase, SourceDatabaseExt};\n use hir::{DefWithBody, HasAttrs, HasSource, InFile, ModuleSource, Semantics, Visibility};\n use once_cell::unsync::Lazy;\n-use rustc_hash::FxHashMap;\n+use stdx::hash::NoHashHashMap;\n use syntax::{ast, match_ast, AstNode, TextRange, TextSize};\n \n use crate::{\n@@ -20,7 +20,7 @@ use crate::{\n \n #[derive(Debug, Default, Clone)]\n pub struct UsageSearchResult {\n-    pub references: FxHashMap<FileId, Vec<FileReference>>,\n+    pub references: NoHashHashMap<FileId, Vec<FileReference>>,\n }\n \n impl UsageSearchResult {\n@@ -45,7 +45,7 @@ impl UsageSearchResult {\n \n impl IntoIterator for UsageSearchResult {\n     type Item = (FileId, Vec<FileReference>);\n-    type IntoIter = <FxHashMap<FileId, Vec<FileReference>> as IntoIterator>::IntoIter;\n+    type IntoIter = <NoHashHashMap<FileId, Vec<FileReference>> as IntoIterator>::IntoIter;\n \n     fn into_iter(self) -> Self::IntoIter {\n         self.references.into_iter()\n@@ -78,17 +78,17 @@ pub enum ReferenceCategory {\n /// e.g. for things like local variables.\n #[derive(Clone, Debug)]\n pub struct SearchScope {\n-    entries: FxHashMap<FileId, Option<TextRange>>,\n+    entries: NoHashHashMap<FileId, Option<TextRange>>,\n }\n \n impl SearchScope {\n-    fn new(entries: FxHashMap<FileId, Option<TextRange>>) -> SearchScope {\n+    fn new(entries: NoHashHashMap<FileId, Option<TextRange>>) -> SearchScope {\n         SearchScope { entries }\n     }\n \n     /// Build a search scope spanning the entire crate graph of files.\n     fn crate_graph(db: &RootDatabase) -> SearchScope {\n-        let mut entries = FxHashMap::default();\n+        let mut entries = NoHashHashMap::default();\n \n         let graph = db.crate_graph();\n         for krate in graph.iter() {\n@@ -102,7 +102,7 @@ impl SearchScope {\n \n     /// Build a search scope spanning all the reverse dependencies of the given crate.\n     fn reverse_dependencies(db: &RootDatabase, of: hir::Crate) -> SearchScope {\n-        let mut entries = FxHashMap::default();\n+        let mut entries = NoHashHashMap::default();\n         for rev_dep in of.transitive_reverse_dependencies(db) {\n             let root_file = rev_dep.root_file(db);\n             let source_root_id = db.file_source_root(root_file);\n@@ -117,14 +117,12 @@ impl SearchScope {\n         let root_file = of.root_file(db);\n         let source_root_id = db.file_source_root(root_file);\n         let source_root = db.source_root(source_root_id);\n-        SearchScope {\n-            entries: source_root.iter().map(|id| (id, None)).collect::<FxHashMap<_, _>>(),\n-        }\n+        SearchScope { entries: source_root.iter().map(|id| (id, None)).collect() }\n     }\n \n     /// Build a search scope spanning the given module and all its submodules.\n     fn module_and_children(db: &RootDatabase, module: hir::Module) -> SearchScope {\n-        let mut entries = FxHashMap::default();\n+        let mut entries = NoHashHashMap::default();\n \n         let (file_id, range) = {\n             let InFile { file_id, value } = module.definition_source(db);\n@@ -157,7 +155,7 @@ impl SearchScope {\n \n     /// Build an empty search scope.\n     pub fn empty() -> SearchScope {\n-        SearchScope::new(FxHashMap::default())\n+        SearchScope::new(NoHashHashMap::default())\n     }\n \n     /// Build a empty search scope spanning the given file."}, {"sha": "8e338061df43345c6d18b2cd6eb1d7fefb41a707", "filename": "crates/ide-db/src/source_change.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide-db%2Fsrc%2Fsource_change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide-db%2Fsrc%2Fsource_change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsource_change.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -6,16 +6,15 @@\n use std::{collections::hash_map::Entry, iter, mem};\n \n use base_db::{AnchoredPathBuf, FileId};\n-use rustc_hash::FxHashMap;\n-use stdx::never;\n+use stdx::{hash::NoHashHashMap, never};\n use syntax::{algo, AstNode, SyntaxNode, SyntaxNodePtr, TextRange, TextSize};\n use text_edit::{TextEdit, TextEditBuilder};\n \n use crate::SnippetCap;\n \n #[derive(Default, Debug, Clone)]\n pub struct SourceChange {\n-    pub source_file_edits: FxHashMap<FileId, TextEdit>,\n+    pub source_file_edits: NoHashHashMap<FileId, TextEdit>,\n     pub file_system_edits: Vec<FileSystemEdit>,\n     pub is_snippet: bool,\n }\n@@ -24,7 +23,7 @@ impl SourceChange {\n     /// Creates a new SourceChange with the given label\n     /// from the edits.\n     pub fn from_edits(\n-        source_file_edits: FxHashMap<FileId, TextEdit>,\n+        source_file_edits: NoHashHashMap<FileId, TextEdit>,\n         file_system_edits: Vec<FileSystemEdit>,\n     ) -> Self {\n         SourceChange { source_file_edits, file_system_edits, is_snippet: false }\n@@ -78,8 +77,8 @@ impl Extend<FileSystemEdit> for SourceChange {\n     }\n }\n \n-impl From<FxHashMap<FileId, TextEdit>> for SourceChange {\n-    fn from(source_file_edits: FxHashMap<FileId, TextEdit>) -> SourceChange {\n+impl From<NoHashHashMap<FileId, TextEdit>> for SourceChange {\n+    fn from(source_file_edits: NoHashHashMap<FileId, TextEdit>) -> SourceChange {\n         SourceChange { source_file_edits, file_system_edits: Vec::new(), is_snippet: false }\n     }\n }"}, {"sha": "73314e0f330bc67a30b291e55bdb588ff30bdde7", "filename": "crates/ide-ssr/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide-ssr%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide-ssr%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-ssr%2FCargo.toml?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -20,6 +20,7 @@ parser = { path = \"../parser\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }\n ide-db = { path = \"../ide-db\", version = \"0.0.0\" }\n hir = { path = \"../hir\", version = \"0.0.0\" }\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }\n \n [dev-dependencies]\n test-utils = { path = \"../test-utils\" }"}, {"sha": "d9834ee63adccf1368681f8397672e93ef0c3e66", "filename": "crates/ide-ssr/src/lib.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide-ssr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide-ssr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-ssr%2Fsrc%2Flib.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -86,11 +86,9 @@ pub use crate::{errors::SsrError, from_comment::ssr_from_comment, matching::Matc\n \n use crate::{errors::bail, matching::MatchFailureReason};\n use hir::Semantics;\n-use ide_db::{\n-    base_db::{FileId, FilePosition, FileRange},\n-    FxHashMap,\n-};\n+use ide_db::base_db::{FileId, FilePosition, FileRange};\n use resolving::ResolvedRule;\n+use stdx::hash::NoHashHashMap;\n use syntax::{ast, AstNode, SyntaxNode, TextRange};\n use text_edit::TextEdit;\n \n@@ -170,9 +168,9 @@ impl<'db> MatchFinder<'db> {\n     }\n \n     /// Finds matches for all added rules and returns edits for all found matches.\n-    pub fn edits(&self) -> FxHashMap<FileId, TextEdit> {\n+    pub fn edits(&self) -> NoHashHashMap<FileId, TextEdit> {\n         use ide_db::base_db::SourceDatabaseExt;\n-        let mut matches_by_file = FxHashMap::default();\n+        let mut matches_by_file = NoHashHashMap::default();\n         for m in self.matches().matches {\n             matches_by_file\n                 .entry(m.range.file_id)"}, {"sha": "87b3ef380c5943e0986ea4521be48591c74c9317", "filename": "crates/ide/src/prime_caches.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide%2Fsrc%2Fprime_caches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide%2Fsrc%2Fprime_caches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fprime_caches.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -12,8 +12,9 @@ use ide_db::{\n         salsa::{Database, ParallelDatabase, Snapshot},\n         Cancelled, CrateGraph, CrateId, SourceDatabase, SourceDatabaseExt,\n     },\n-    FxHashSet, FxIndexMap,\n+    FxIndexMap,\n };\n+use stdx::hash::NoHashHashSet;\n \n use crate::RootDatabase;\n \n@@ -141,7 +142,7 @@ pub(crate) fn parallel_prime_caches(\n     }\n }\n \n-fn compute_crates_to_prime(db: &RootDatabase, graph: &CrateGraph) -> FxHashSet<CrateId> {\n+fn compute_crates_to_prime(db: &RootDatabase, graph: &CrateGraph) -> NoHashHashSet<CrateId> {\n     // We're only interested in the workspace crates and the `ImportMap`s of their direct\n     // dependencies, though in practice the latter also compute the `DefMap`s.\n     // We don't prime transitive dependencies because they're generally not visible in"}, {"sha": "99614b645e48ff02160b38fcf377f12bf01b4705", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -14,8 +14,9 @@ use ide_db::{\n     base_db::FileId,\n     defs::{Definition, NameClass, NameRefClass},\n     search::{ReferenceCategory, SearchScope, UsageSearchResult},\n-    FxHashMap, RootDatabase,\n+    RootDatabase,\n };\n+use stdx::hash::NoHashHashMap;\n use syntax::{\n     algo::find_node_at_offset,\n     ast::{self, HasName},\n@@ -29,7 +30,7 @@ use crate::{FilePosition, NavigationTarget, TryToNav};\n #[derive(Debug, Clone)]\n pub struct ReferenceSearchResult {\n     pub declaration: Option<Declaration>,\n-    pub references: FxHashMap<FileId, Vec<(TextRange, Option<ReferenceCategory>)>>,\n+    pub references: NoHashHashMap<FileId, Vec<(TextRange, Option<ReferenceCategory>)>>,\n }\n \n #[derive(Debug, Clone)]"}, {"sha": "17a1e385b77248b4ed974d271745a3ffeddf5919", "filename": "crates/ide/src/view_crate_graph.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide%2Fsrc%2Fview_crate_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fide%2Fsrc%2Fview_crate_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fview_crate_graph.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -3,8 +3,9 @@ use std::sync::Arc;\n use dot::{Id, LabelText};\n use ide_db::{\n     base_db::{CrateGraph, CrateId, Dependency, SourceDatabase, SourceDatabaseExt},\n-    FxHashSet, RootDatabase,\n+    RootDatabase,\n };\n+use stdx::hash::NoHashHashSet;\n \n // Feature: View Crate Graph\n //\n@@ -41,7 +42,7 @@ pub(crate) fn view_crate_graph(db: &RootDatabase, full: bool) -> Result<String,\n \n struct DotCrateGraph {\n     graph: Arc<CrateGraph>,\n-    crates_to_render: FxHashSet<CrateId>,\n+    crates_to_render: NoHashHashSet<CrateId>,\n }\n \n type Edge<'a> = (CrateId, &'a Dependency);"}, {"sha": "9ccb6e9101ef440c4604350b1901060375df66ae", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 357, "deletions": 357, "changes": 714, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -185,10 +185,10 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        2,\n+                        1,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            3,\n+                            2,\n                         ),\n                         edition: Edition2018,\n                         version: Some(\n@@ -197,9 +197,9 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"an_example\",\n+                                    \"hello_world\",\n                                 ),\n-                                canonical_name: \"an-example\",\n+                                canonical_name: \"hello-world\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n@@ -260,77 +260,85 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        4,\n+                        2,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            5,\n+                            3,\n                         ),\n-                        edition: Edition2015,\n+                        edition: Edition2018,\n                         version: Some(\n-                            \"0.2.98\",\n+                            \"0.1.0\",\n                         ),\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"libc\",\n+                                    \"an_example\",\n                                 ),\n-                                canonical_name: \"libc\",\n+                                canonical_name: \"an-example\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n                             [\n                                 \"debug_assertions\",\n-                                \"feature=default\",\n-                                \"feature=std\",\n                             ],\n                         ),\n                         potential_cfg_options: CfgOptions(\n                             [\n                                 \"debug_assertions\",\n-                                \"feature=align\",\n-                                \"feature=const-extern-fn\",\n-                                \"feature=default\",\n-                                \"feature=extra_traits\",\n-                                \"feature=rustc-dep-of-std\",\n-                                \"feature=std\",\n-                                \"feature=use_std\",\n                             ],\n                         ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n                                 \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n-                                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98\",\n-                                \"CARGO_PKG_VERSION\": \"0.2.98\",\n+                                \"CARGO_MANIFEST_DIR\": \"$ROOT$hello-world\",\n+                                \"CARGO_PKG_VERSION\": \"0.1.0\",\n                                 \"CARGO_PKG_AUTHORS\": \"\",\n-                                \"CARGO_CRATE_NAME\": \"libc\",\n+                                \"CARGO_CRATE_NAME\": \"hello_world\",\n                                 \"CARGO_PKG_LICENSE_FILE\": \"\",\n                                 \"CARGO_PKG_HOMEPAGE\": \"\",\n                                 \"CARGO_PKG_DESCRIPTION\": \"\",\n-                                \"CARGO_PKG_NAME\": \"libc\",\n-                                \"CARGO_PKG_VERSION_PATCH\": \"98\",\n+                                \"CARGO_PKG_NAME\": \"hello-world\",\n+                                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n                                 \"CARGO\": \"cargo\",\n                                 \"CARGO_PKG_REPOSITORY\": \"\",\n-                                \"CARGO_PKG_VERSION_MINOR\": \"2\",\n+                                \"CARGO_PKG_VERSION_MINOR\": \"1\",\n                                 \"CARGO_PKG_VERSION_PRE\": \"\",\n                             },\n                         },\n-                        dependencies: [],\n+                        dependencies: [\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    0,\n+                                ),\n+                                name: CrateName(\n+                                    \"hello_world\",\n+                                ),\n+                                prelude: true,\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    4,\n+                                ),\n+                                name: CrateName(\n+                                    \"libc\",\n+                                ),\n+                                prelude: true,\n+                            },\n+                        ],\n                         proc_macro: Err(\n                             \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n-                            repo: Some(\n-                                \"https://github.com/rust-lang/libc\",\n-                            ),\n+                            repo: None,\n                         },\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        1,\n+                        3,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            2,\n+                            4,\n                         ),\n                         edition: Edition2018,\n                         version: Some(\n@@ -339,9 +347,9 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"hello_world\",\n+                                    \"it\",\n                                 ),\n-                                canonical_name: \"hello-world\",\n+                                canonical_name: \"it\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n@@ -402,77 +410,69 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        3,\n+                        4,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            4,\n+                            5,\n                         ),\n-                        edition: Edition2018,\n+                        edition: Edition2015,\n                         version: Some(\n-                            \"0.1.0\",\n+                            \"0.2.98\",\n                         ),\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"it\",\n+                                    \"libc\",\n                                 ),\n-                                canonical_name: \"it\",\n+                                canonical_name: \"libc\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n                             [\n                                 \"debug_assertions\",\n+                                \"feature=default\",\n+                                \"feature=std\",\n                             ],\n                         ),\n                         potential_cfg_options: CfgOptions(\n                             [\n                                 \"debug_assertions\",\n+                                \"feature=align\",\n+                                \"feature=const-extern-fn\",\n+                                \"feature=default\",\n+                                \"feature=extra_traits\",\n+                                \"feature=rustc-dep-of-std\",\n+                                \"feature=std\",\n+                                \"feature=use_std\",\n                             ],\n                         ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n                                 \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n-                                \"CARGO_MANIFEST_DIR\": \"$ROOT$hello-world\",\n-                                \"CARGO_PKG_VERSION\": \"0.1.0\",\n+                                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98\",\n+                                \"CARGO_PKG_VERSION\": \"0.2.98\",\n                                 \"CARGO_PKG_AUTHORS\": \"\",\n-                                \"CARGO_CRATE_NAME\": \"hello_world\",\n+                                \"CARGO_CRATE_NAME\": \"libc\",\n                                 \"CARGO_PKG_LICENSE_FILE\": \"\",\n                                 \"CARGO_PKG_HOMEPAGE\": \"\",\n                                 \"CARGO_PKG_DESCRIPTION\": \"\",\n-                                \"CARGO_PKG_NAME\": \"hello-world\",\n-                                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n+                                \"CARGO_PKG_NAME\": \"libc\",\n+                                \"CARGO_PKG_VERSION_PATCH\": \"98\",\n                                 \"CARGO\": \"cargo\",\n                                 \"CARGO_PKG_REPOSITORY\": \"\",\n-                                \"CARGO_PKG_VERSION_MINOR\": \"1\",\n+                                \"CARGO_PKG_VERSION_MINOR\": \"2\",\n                                 \"CARGO_PKG_VERSION_PRE\": \"\",\n                             },\n                         },\n-                        dependencies: [\n-                            Dependency {\n-                                crate_id: CrateId(\n-                                    0,\n-                                ),\n-                                name: CrateName(\n-                                    \"hello_world\",\n-                                ),\n-                                prelude: true,\n-                            },\n-                            Dependency {\n-                                crate_id: CrateId(\n-                                    4,\n-                                ),\n-                                name: CrateName(\n-                                    \"libc\",\n-                                ),\n-                                prelude: true,\n-                            },\n-                        ],\n+                        dependencies: [],\n                         proc_macro: Err(\n                             \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n-                            repo: None,\n+                            repo: Some(\n+                                \"https://github.com/rust-lang/libc\",\n+                            ),\n                         },\n                         is_proc_macro: false,\n                     },\n@@ -567,10 +567,10 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        2,\n+                        1,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            3,\n+                            2,\n                         ),\n                         edition: Edition2018,\n                         version: Some(\n@@ -579,9 +579,9 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"an_example\",\n+                                    \"hello_world\",\n                                 ),\n-                                canonical_name: \"an-example\",\n+                                canonical_name: \"hello-world\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n@@ -644,77 +644,10 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        4,\n-                    ): CrateData {\n-                        root_file_id: FileId(\n-                            5,\n-                        ),\n-                        edition: Edition2015,\n-                        version: Some(\n-                            \"0.2.98\",\n-                        ),\n-                        display_name: Some(\n-                            CrateDisplayName {\n-                                crate_name: CrateName(\n-                                    \"libc\",\n-                                ),\n-                                canonical_name: \"libc\",\n-                            },\n-                        ),\n-                        cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                                \"feature=default\",\n-                                \"feature=std\",\n-                            ],\n-                        ),\n-                        potential_cfg_options: CfgOptions(\n-                            [\n-                                \"debug_assertions\",\n-                                \"feature=align\",\n-                                \"feature=const-extern-fn\",\n-                                \"feature=default\",\n-                                \"feature=extra_traits\",\n-                                \"feature=rustc-dep-of-std\",\n-                                \"feature=std\",\n-                                \"feature=use_std\",\n-                            ],\n-                        ),\n-                        env: Env {\n-                            entries: {\n-                                \"CARGO_PKG_LICENSE\": \"\",\n-                                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n-                                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98\",\n-                                \"CARGO_PKG_VERSION\": \"0.2.98\",\n-                                \"CARGO_PKG_AUTHORS\": \"\",\n-                                \"CARGO_CRATE_NAME\": \"libc\",\n-                                \"CARGO_PKG_LICENSE_FILE\": \"\",\n-                                \"CARGO_PKG_HOMEPAGE\": \"\",\n-                                \"CARGO_PKG_DESCRIPTION\": \"\",\n-                                \"CARGO_PKG_NAME\": \"libc\",\n-                                \"CARGO_PKG_VERSION_PATCH\": \"98\",\n-                                \"CARGO\": \"cargo\",\n-                                \"CARGO_PKG_REPOSITORY\": \"\",\n-                                \"CARGO_PKG_VERSION_MINOR\": \"2\",\n-                                \"CARGO_PKG_VERSION_PRE\": \"\",\n-                            },\n-                        },\n-                        dependencies: [],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n-                        origin: CratesIo {\n-                            repo: Some(\n-                                \"https://github.com/rust-lang/libc\",\n-                            ),\n-                        },\n-                        is_proc_macro: false,\n-                    },\n-                    CrateId(\n-                        1,\n+                        2,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            2,\n+                            3,\n                         ),\n                         edition: Edition2018,\n                         version: Some(\n@@ -723,9 +656,9 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"hello_world\",\n+                                    \"an_example\",\n                                 ),\n-                                canonical_name: \"hello-world\",\n+                                canonical_name: \"an-example\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n@@ -864,92 +797,91 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                         },\n                         is_proc_macro: false,\n                     },\n-                },\n-            }\"#]],\n-    )\n-}\n-\n-#[test]\n-fn cargo_hello_world_project_model() {\n-    let crate_graph = load_cargo(\"hello-world-metadata.json\");\n-    check_crate_graph(\n-        crate_graph,\n-        expect![[r#\"\n-            CrateGraph {\n-                arena: {\n                     CrateId(\n-                        0,\n+                        4,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            1,\n+                            5,\n                         ),\n-                        edition: Edition2018,\n+                        edition: Edition2015,\n                         version: Some(\n-                            \"0.1.0\",\n+                            \"0.2.98\",\n                         ),\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"hello_world\",\n+                                    \"libc\",\n                                 ),\n-                                canonical_name: \"hello-world\",\n+                                canonical_name: \"libc\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n                             [\n                                 \"debug_assertions\",\n-                                \"test\",\n+                                \"feature=default\",\n+                                \"feature=std\",\n                             ],\n                         ),\n                         potential_cfg_options: CfgOptions(\n                             [\n                                 \"debug_assertions\",\n-                                \"test\",\n+                                \"feature=align\",\n+                                \"feature=const-extern-fn\",\n+                                \"feature=default\",\n+                                \"feature=extra_traits\",\n+                                \"feature=rustc-dep-of-std\",\n+                                \"feature=std\",\n+                                \"feature=use_std\",\n                             ],\n                         ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n                                 \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n-                                \"CARGO_MANIFEST_DIR\": \"$ROOT$hello-world\",\n-                                \"CARGO_PKG_VERSION\": \"0.1.0\",\n+                                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98\",\n+                                \"CARGO_PKG_VERSION\": \"0.2.98\",\n                                 \"CARGO_PKG_AUTHORS\": \"\",\n-                                \"CARGO_CRATE_NAME\": \"hello_world\",\n+                                \"CARGO_CRATE_NAME\": \"libc\",\n                                 \"CARGO_PKG_LICENSE_FILE\": \"\",\n                                 \"CARGO_PKG_HOMEPAGE\": \"\",\n                                 \"CARGO_PKG_DESCRIPTION\": \"\",\n-                                \"CARGO_PKG_NAME\": \"hello-world\",\n-                                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n+                                \"CARGO_PKG_NAME\": \"libc\",\n+                                \"CARGO_PKG_VERSION_PATCH\": \"98\",\n                                 \"CARGO\": \"cargo\",\n                                 \"CARGO_PKG_REPOSITORY\": \"\",\n-                                \"CARGO_PKG_VERSION_MINOR\": \"1\",\n+                                \"CARGO_PKG_VERSION_MINOR\": \"2\",\n                                 \"CARGO_PKG_VERSION_PRE\": \"\",\n                             },\n                         },\n-                        dependencies: [\n-                            Dependency {\n-                                crate_id: CrateId(\n-                                    4,\n-                                ),\n-                                name: CrateName(\n-                                    \"libc\",\n-                                ),\n-                                prelude: true,\n-                            },\n-                        ],\n+                        dependencies: [],\n                         proc_macro: Err(\n                             \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n-                            repo: None,\n+                            repo: Some(\n+                                \"https://github.com/rust-lang/libc\",\n+                            ),\n                         },\n                         is_proc_macro: false,\n                     },\n+                },\n+            }\"#]],\n+    )\n+}\n+\n+#[test]\n+fn cargo_hello_world_project_model() {\n+    let crate_graph = load_cargo(\"hello-world-metadata.json\");\n+    check_crate_graph(\n+        crate_graph,\n+        expect![[r#\"\n+            CrateGraph {\n+                arena: {\n                     CrateId(\n-                        2,\n+                        0,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            3,\n+                            1,\n                         ),\n                         edition: Edition2018,\n                         version: Some(\n@@ -958,9 +890,9 @@ fn cargo_hello_world_project_model() {\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"an_example\",\n+                                    \"hello_world\",\n                                 ),\n-                                canonical_name: \"an-example\",\n+                                canonical_name: \"hello-world\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n@@ -995,15 +927,6 @@ fn cargo_hello_world_project_model() {\n                             },\n                         },\n                         dependencies: [\n-                            Dependency {\n-                                crate_id: CrateId(\n-                                    0,\n-                                ),\n-                                name: CrateName(\n-                                    \"hello_world\",\n-                                ),\n-                                prelude: true,\n-                            },\n                             Dependency {\n                                 crate_id: CrateId(\n                                     4,\n@@ -1023,77 +946,87 @@ fn cargo_hello_world_project_model() {\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        4,\n+                        1,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            5,\n+                            2,\n                         ),\n-                        edition: Edition2015,\n+                        edition: Edition2018,\n                         version: Some(\n-                            \"0.2.98\",\n+                            \"0.1.0\",\n                         ),\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"libc\",\n+                                    \"hello_world\",\n                                 ),\n-                                canonical_name: \"libc\",\n+                                canonical_name: \"hello-world\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n                             [\n                                 \"debug_assertions\",\n-                                \"feature=default\",\n-                                \"feature=std\",\n+                                \"test\",\n                             ],\n                         ),\n                         potential_cfg_options: CfgOptions(\n                             [\n                                 \"debug_assertions\",\n-                                \"feature=align\",\n-                                \"feature=const-extern-fn\",\n-                                \"feature=default\",\n-                                \"feature=extra_traits\",\n-                                \"feature=rustc-dep-of-std\",\n-                                \"feature=std\",\n-                                \"feature=use_std\",\n+                                \"test\",\n                             ],\n                         ),\n                         env: Env {\n                             entries: {\n                                 \"CARGO_PKG_LICENSE\": \"\",\n                                 \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n-                                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98\",\n-                                \"CARGO_PKG_VERSION\": \"0.2.98\",\n+                                \"CARGO_MANIFEST_DIR\": \"$ROOT$hello-world\",\n+                                \"CARGO_PKG_VERSION\": \"0.1.0\",\n                                 \"CARGO_PKG_AUTHORS\": \"\",\n-                                \"CARGO_CRATE_NAME\": \"libc\",\n+                                \"CARGO_CRATE_NAME\": \"hello_world\",\n                                 \"CARGO_PKG_LICENSE_FILE\": \"\",\n                                 \"CARGO_PKG_HOMEPAGE\": \"\",\n                                 \"CARGO_PKG_DESCRIPTION\": \"\",\n-                                \"CARGO_PKG_NAME\": \"libc\",\n-                                \"CARGO_PKG_VERSION_PATCH\": \"98\",\n+                                \"CARGO_PKG_NAME\": \"hello-world\",\n+                                \"CARGO_PKG_VERSION_PATCH\": \"0\",\n                                 \"CARGO\": \"cargo\",\n                                 \"CARGO_PKG_REPOSITORY\": \"\",\n-                                \"CARGO_PKG_VERSION_MINOR\": \"2\",\n+                                \"CARGO_PKG_VERSION_MINOR\": \"1\",\n                                 \"CARGO_PKG_VERSION_PRE\": \"\",\n                             },\n                         },\n-                        dependencies: [],\n+                        dependencies: [\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    0,\n+                                ),\n+                                name: CrateName(\n+                                    \"hello_world\",\n+                                ),\n+                                prelude: true,\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    4,\n+                                ),\n+                                name: CrateName(\n+                                    \"libc\",\n+                                ),\n+                                prelude: true,\n+                            },\n+                        ],\n                         proc_macro: Err(\n                             \"crate has not (yet) been built\",\n                         ),\n                         origin: CratesIo {\n-                            repo: Some(\n-                                \"https://github.com/rust-lang/libc\",\n-                            ),\n+                            repo: None,\n                         },\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        1,\n+                        2,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            2,\n+                            3,\n                         ),\n                         edition: Edition2018,\n                         version: Some(\n@@ -1102,9 +1035,9 @@ fn cargo_hello_world_project_model() {\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"hello_world\",\n+                                    \"an_example\",\n                                 ),\n-                                canonical_name: \"hello-world\",\n+                                canonical_name: \"an-example\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n@@ -1243,6 +1176,73 @@ fn cargo_hello_world_project_model() {\n                         },\n                         is_proc_macro: false,\n                     },\n+                    CrateId(\n+                        4,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            5,\n+                        ),\n+                        edition: Edition2015,\n+                        version: Some(\n+                            \"0.2.98\",\n+                        ),\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"libc\",\n+                                ),\n+                                canonical_name: \"libc\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [\n+                                \"debug_assertions\",\n+                                \"feature=default\",\n+                                \"feature=std\",\n+                            ],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [\n+                                \"debug_assertions\",\n+                                \"feature=align\",\n+                                \"feature=const-extern-fn\",\n+                                \"feature=default\",\n+                                \"feature=extra_traits\",\n+                                \"feature=rustc-dep-of-std\",\n+                                \"feature=std\",\n+                                \"feature=use_std\",\n+                            ],\n+                        ),\n+                        env: Env {\n+                            entries: {\n+                                \"CARGO_PKG_LICENSE\": \"\",\n+                                \"CARGO_PKG_VERSION_MAJOR\": \"0\",\n+                                \"CARGO_MANIFEST_DIR\": \"$ROOT$.cargo/registry/src/github.com-1ecc6299db9ec823/libc-0.2.98\",\n+                                \"CARGO_PKG_VERSION\": \"0.2.98\",\n+                                \"CARGO_PKG_AUTHORS\": \"\",\n+                                \"CARGO_CRATE_NAME\": \"libc\",\n+                                \"CARGO_PKG_LICENSE_FILE\": \"\",\n+                                \"CARGO_PKG_HOMEPAGE\": \"\",\n+                                \"CARGO_PKG_DESCRIPTION\": \"\",\n+                                \"CARGO_PKG_NAME\": \"libc\",\n+                                \"CARGO_PKG_VERSION_PATCH\": \"98\",\n+                                \"CARGO\": \"cargo\",\n+                                \"CARGO_PKG_REPOSITORY\": \"\",\n+                                \"CARGO_PKG_VERSION_MINOR\": \"2\",\n+                                \"CARGO_PKG_VERSION_PRE\": \"\",\n+                            },\n+                        },\n+                        dependencies: [],\n+                        proc_macro: Err(\n+                            \"crate has not (yet) been built\",\n+                        ),\n+                        origin: CratesIo {\n+                            repo: Some(\n+                                \"https://github.com/rust-lang/libc\",\n+                            ),\n+                        },\n+                        is_proc_macro: false,\n+                    },\n                 },\n             }\"#]],\n     )\n@@ -1301,19 +1301,53 @@ fn rust_project_hello_world_project_model() {\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        10,\n+                        1,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            11,\n+                            2,\n                         ),\n                         edition: Edition2018,\n                         version: None,\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"unwind\",\n+                                    \"core\",\n                                 ),\n-                                canonical_name: \"unwind\",\n+                                canonical_name: \"core\",\n+                            },\n+                        ),\n+                        cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        potential_cfg_options: CfgOptions(\n+                            [],\n+                        ),\n+                        env: Env {\n+                            entries: {},\n+                        },\n+                        dependencies: [],\n+                        proc_macro: Err(\n+                            \"no proc macro loaded for sysroot crate\",\n+                        ),\n+                        origin: Lang(\n+                            Core,\n+                        ),\n+                        is_proc_macro: false,\n+                    },\n+                    CrateId(\n+                        2,\n+                    ): CrateData {\n+                        root_file_id: FileId(\n+                            3,\n+                        ),\n+                        edition: Edition2018,\n+                        version: None,\n+                        display_name: Some(\n+                            CrateDisplayName {\n+                                crate_name: CrateName(\n+                                    \"panic_abort\",\n+                                ),\n+                                canonical_name: \"panic_abort\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n@@ -1335,19 +1369,19 @@ fn rust_project_hello_world_project_model() {\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        7,\n+                        3,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            8,\n+                            4,\n                         ),\n                         edition: Edition2018,\n                         version: None,\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"std_detect\",\n+                                    \"panic_unwind\",\n                                 ),\n-                                canonical_name: \"std_detect\",\n+                                canonical_name: \"panic_unwind\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n@@ -1413,19 +1447,19 @@ fn rust_project_hello_world_project_model() {\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        1,\n+                        5,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            2,\n+                            6,\n                         ),\n                         edition: Edition2018,\n                         version: None,\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"core\",\n+                                    \"profiler_builtins\",\n                                 ),\n-                                canonical_name: \"core\",\n+                                canonical_name: \"profiler_builtins\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n@@ -1442,24 +1476,24 @@ fn rust_project_hello_world_project_model() {\n                             \"no proc macro loaded for sysroot crate\",\n                         ),\n                         origin: Lang(\n-                            Core,\n+                            Other,\n                         ),\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        11,\n+                        6,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            12,\n+                            7,\n                         ),\n                         edition: Edition2018,\n                         version: None,\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"hello_world\",\n+                                    \"std\",\n                                 ),\n-                                canonical_name: \"hello_world\",\n+                                canonical_name: \"std\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n@@ -1472,6 +1506,15 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    0,\n+                                ),\n+                                name: CrateName(\n+                                    \"alloc\",\n+                                ),\n+                                prelude: true,\n+                            },\n                             Dependency {\n                                 crate_id: CrateId(\n                                     1,\n@@ -1483,19 +1526,46 @@ fn rust_project_hello_world_project_model() {\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n-                                    0,\n+                                    2,\n                                 ),\n                                 name: CrateName(\n-                                    \"alloc\",\n+                                    \"panic_abort\",\n                                 ),\n                                 prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n-                                    6,\n+                                    3,\n                                 ),\n                                 name: CrateName(\n-                                    \"std\",\n+                                    \"panic_unwind\",\n+                                ),\n+                                prelude: true,\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    5,\n+                                ),\n+                                name: CrateName(\n+                                    \"profiler_builtins\",\n+                                ),\n+                                prelude: true,\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    7,\n+                                ),\n+                                name: CrateName(\n+                                    \"std_detect\",\n+                                ),\n+                                prelude: true,\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    8,\n+                                ),\n+                                name: CrateName(\n+                                    \"term\",\n                                 ),\n                                 prelude: true,\n                             },\n@@ -1506,31 +1576,40 @@ fn rust_project_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"test\",\n                                 ),\n-                                prelude: false,\n+                                prelude: true,\n+                            },\n+                            Dependency {\n+                                crate_id: CrateId(\n+                                    10,\n+                                ),\n+                                name: CrateName(\n+                                    \"unwind\",\n+                                ),\n+                                prelude: true,\n                             },\n                         ],\n                         proc_macro: Err(\n-                            \"no proc macro dylib present\",\n+                            \"no proc macro loaded for sysroot crate\",\n+                        ),\n+                        origin: Lang(\n+                            Std,\n                         ),\n-                        origin: CratesIo {\n-                            repo: None,\n-                        },\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        8,\n+                        7,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            9,\n+                            8,\n                         ),\n                         edition: Edition2018,\n                         version: None,\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"term\",\n+                                    \"std_detect\",\n                                 ),\n-                                canonical_name: \"term\",\n+                                canonical_name: \"std_detect\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n@@ -1552,19 +1631,19 @@ fn rust_project_hello_world_project_model() {\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        5,\n+                        8,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            6,\n+                            9,\n                         ),\n                         edition: Edition2018,\n                         version: None,\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"profiler_builtins\",\n+                                    \"term\",\n                                 ),\n-                                canonical_name: \"profiler_builtins\",\n+                                canonical_name: \"term\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n@@ -1586,19 +1665,19 @@ fn rust_project_hello_world_project_model() {\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        2,\n+                        9,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            3,\n+                            10,\n                         ),\n                         edition: Edition2018,\n                         version: None,\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"panic_abort\",\n+                                    \"test\",\n                                 ),\n-                                canonical_name: \"panic_abort\",\n+                                canonical_name: \"test\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n@@ -1615,24 +1694,24 @@ fn rust_project_hello_world_project_model() {\n                             \"no proc macro loaded for sysroot crate\",\n                         ),\n                         origin: Lang(\n-                            Other,\n+                            Test,\n                         ),\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        9,\n+                        10,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            10,\n+                            11,\n                         ),\n                         edition: Edition2018,\n                         version: None,\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"test\",\n+                                    \"unwind\",\n                                 ),\n-                                canonical_name: \"test\",\n+                                canonical_name: \"unwind\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n@@ -1649,24 +1728,24 @@ fn rust_project_hello_world_project_model() {\n                             \"no proc macro loaded for sysroot crate\",\n                         ),\n                         origin: Lang(\n-                            Test,\n+                            Other,\n                         ),\n                         is_proc_macro: false,\n                     },\n                     CrateId(\n-                        6,\n+                        11,\n                     ): CrateData {\n                         root_file_id: FileId(\n-                            7,\n+                            12,\n                         ),\n                         edition: Edition2018,\n                         version: None,\n                         display_name: Some(\n                             CrateDisplayName {\n                                 crate_name: CrateName(\n-                                    \"std\",\n+                                    \"hello_world\",\n                                 ),\n-                                canonical_name: \"std\",\n+                                canonical_name: \"hello_world\",\n                             },\n                         ),\n                         cfg_options: CfgOptions(\n@@ -1679,15 +1758,6 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [\n-                            Dependency {\n-                                crate_id: CrateId(\n-                                    0,\n-                                ),\n-                                name: CrateName(\n-                                    \"alloc\",\n-                                ),\n-                                prelude: true,\n-                            },\n                             Dependency {\n                                 crate_id: CrateId(\n                                     1,\n@@ -1699,46 +1769,19 @@ fn rust_project_hello_world_project_model() {\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n-                                    2,\n-                                ),\n-                                name: CrateName(\n-                                    \"panic_abort\",\n-                                ),\n-                                prelude: true,\n-                            },\n-                            Dependency {\n-                                crate_id: CrateId(\n-                                    3,\n-                                ),\n-                                name: CrateName(\n-                                    \"panic_unwind\",\n-                                ),\n-                                prelude: true,\n-                            },\n-                            Dependency {\n-                                crate_id: CrateId(\n-                                    5,\n-                                ),\n-                                name: CrateName(\n-                                    \"profiler_builtins\",\n-                                ),\n-                                prelude: true,\n-                            },\n-                            Dependency {\n-                                crate_id: CrateId(\n-                                    7,\n+                                    0,\n                                 ),\n                                 name: CrateName(\n-                                    \"std_detect\",\n+                                    \"alloc\",\n                                 ),\n                                 prelude: true,\n                             },\n                             Dependency {\n                                 crate_id: CrateId(\n-                                    8,\n+                                    6,\n                                 ),\n                                 name: CrateName(\n-                                    \"term\",\n+                                    \"std\",\n                                 ),\n                                 prelude: true,\n                             },\n@@ -1749,58 +1792,15 @@ fn rust_project_hello_world_project_model() {\n                                 name: CrateName(\n                                     \"test\",\n                                 ),\n-                                prelude: true,\n-                            },\n-                            Dependency {\n-                                crate_id: CrateId(\n-                                    10,\n-                                ),\n-                                name: CrateName(\n-                                    \"unwind\",\n-                                ),\n-                                prelude: true,\n+                                prelude: false,\n                             },\n                         ],\n                         proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n-                        origin: Lang(\n-                            Std,\n-                        ),\n-                        is_proc_macro: false,\n-                    },\n-                    CrateId(\n-                        3,\n-                    ): CrateData {\n-                        root_file_id: FileId(\n-                            4,\n-                        ),\n-                        edition: Edition2018,\n-                        version: None,\n-                        display_name: Some(\n-                            CrateDisplayName {\n-                                crate_name: CrateName(\n-                                    \"panic_unwind\",\n-                                ),\n-                                canonical_name: \"panic_unwind\",\n-                            },\n-                        ),\n-                        cfg_options: CfgOptions(\n-                            [],\n-                        ),\n-                        potential_cfg_options: CfgOptions(\n-                            [],\n+                            \"no proc macro dylib present\",\n                         ),\n-                        env: Env {\n-                            entries: {},\n+                        origin: CratesIo {\n+                            repo: None,\n                         },\n-                        dependencies: [],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n-                        origin: Lang(\n-                            Other,\n-                        ),\n                         is_proc_macro: false,\n                     },\n                 },"}, {"sha": "818bbed6af2ec73600d2bde661d2f420d48969f7", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -13,7 +13,7 @@ use cfg::{CfgDiff, CfgOptions};\n use paths::{AbsPath, AbsPathBuf};\n use rustc_hash::{FxHashMap, FxHashSet};\n use semver::Version;\n-use stdx::always;\n+use stdx::{always, hash::NoHashHashMap};\n \n use crate::{\n     build_scripts::BuildScriptOutput,\n@@ -471,7 +471,7 @@ fn project_json_to_crate_graph(\n         .map(|sysroot| sysroot_to_crate_graph(&mut crate_graph, sysroot, rustc_cfg.clone(), load));\n \n     let mut cfg_cache: FxHashMap<&str, Vec<CfgFlag>> = FxHashMap::default();\n-    let crates: FxHashMap<CrateId, CrateId> = project\n+    let crates: NoHashHashMap<CrateId, CrateId> = project\n         .crates()\n         .filter_map(|(crate_id, krate)| {\n             let file_path = &krate.root_module;"}, {"sha": "f516c194da467f7afee60a4f123aeff25c06b26d", "filename": "crates/rust-analyzer/src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -4,11 +4,12 @@ pub(crate) mod to_proto;\n use std::{mem, sync::Arc};\n \n use ide::FileId;\n-use rustc_hash::{FxHashMap, FxHashSet};\n+use ide_db::FxHashMap;\n+use stdx::hash::{NoHashHashMap, NoHashHashSet};\n \n use crate::lsp_ext;\n \n-pub(crate) type CheckFixes = Arc<FxHashMap<usize, FxHashMap<FileId, Vec<Fix>>>>;\n+pub(crate) type CheckFixes = Arc<NoHashHashMap<usize, NoHashHashMap<FileId, Vec<Fix>>>>;\n \n #[derive(Debug, Default, Clone)]\n pub struct DiagnosticsMapConfig {\n@@ -19,12 +20,12 @@ pub struct DiagnosticsMapConfig {\n \n #[derive(Debug, Default, Clone)]\n pub(crate) struct DiagnosticCollection {\n-    // FIXME: should be FxHashMap<FileId, Vec<ra_id::Diagnostic>>\n-    pub(crate) native: FxHashMap<FileId, Vec<lsp_types::Diagnostic>>,\n+    // FIXME: should be NoHashHashMap<FileId, Vec<ra_id::Diagnostic>>\n+    pub(crate) native: NoHashHashMap<FileId, Vec<lsp_types::Diagnostic>>,\n     // FIXME: should be Vec<flycheck::Diagnostic>\n-    pub(crate) check: FxHashMap<usize, FxHashMap<FileId, Vec<lsp_types::Diagnostic>>>,\n+    pub(crate) check: NoHashHashMap<usize, NoHashHashMap<FileId, Vec<lsp_types::Diagnostic>>>,\n     pub(crate) check_fixes: CheckFixes,\n-    changes: FxHashSet<FileId>,\n+    changes: NoHashHashSet<FileId>,\n }\n \n #[derive(Debug, Clone)]\n@@ -105,7 +106,7 @@ impl DiagnosticCollection {\n         native.chain(check)\n     }\n \n-    pub(crate) fn take_changes(&mut self) -> Option<FxHashSet<FileId>> {\n+    pub(crate) fn take_changes(&mut self) -> Option<NoHashHashSet<FileId>> {\n         if self.changes.is_empty() {\n             return None;\n         }"}, {"sha": "706e1742dffde38a695d9119413849ad8fb497ac", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -14,6 +14,7 @@ use parking_lot::{Mutex, RwLock};\n use proc_macro_api::ProcMacroServer;\n use project_model::{CargoWorkspace, ProjectWorkspace, Target, WorkspaceBuildScripts};\n use rustc_hash::FxHashMap;\n+use stdx::hash::NoHashHashMap;\n use vfs::AnchoredPathBuf;\n \n use crate::{\n@@ -67,7 +68,7 @@ pub(crate) struct GlobalState {\n     pub(crate) flycheck_sender: Sender<flycheck::Message>,\n     pub(crate) flycheck_receiver: Receiver<flycheck::Message>,\n \n-    pub(crate) vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n+    pub(crate) vfs: Arc<RwLock<(vfs::Vfs, NoHashHashMap<FileId, LineEndings>)>>,\n     pub(crate) vfs_config_version: u32,\n     pub(crate) vfs_progress_config_version: u32,\n     pub(crate) vfs_progress_n_total: usize,\n@@ -113,7 +114,7 @@ pub(crate) struct GlobalStateSnapshot {\n     pub(crate) check_fixes: CheckFixes,\n     mem_docs: MemDocs,\n     pub(crate) semantic_tokens_cache: Arc<Mutex<FxHashMap<Url, SemanticTokens>>>,\n-    vfs: Arc<RwLock<(vfs::Vfs, FxHashMap<FileId, LineEndings>)>>,\n+    vfs: Arc<RwLock<(vfs::Vfs, NoHashHashMap<FileId, LineEndings>)>>,\n     pub(crate) workspaces: Arc<Vec<ProjectWorkspace>>,\n }\n \n@@ -157,7 +158,7 @@ impl GlobalState {\n             flycheck_sender,\n             flycheck_receiver,\n \n-            vfs: Arc::new(RwLock::new((vfs::Vfs::default(), FxHashMap::default()))),\n+            vfs: Arc::new(RwLock::new((vfs::Vfs::default(), NoHashHashMap::default()))),\n             vfs_config_version: 0,\n             vfs_progress_config_version: 0,\n             vfs_progress_n_total: 0,"}, {"sha": "9909d71bdf066bd4117531998f054aeeaab45444", "filename": "crates/stdx/src/hash.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fstdx%2Fsrc%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fstdx%2Fsrc%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Fhash.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -0,0 +1,80 @@\n+//! A none hashing [`Hasher`] implementation.\n+use std::{\n+    hash::{BuildHasher, Hasher},\n+    marker::PhantomData,\n+};\n+\n+pub type NoHashHashMap<K, V> = std::collections::HashMap<K, V, NoHashHasherBuilder<K>>;\n+pub type NoHashHashSet<K> = std::collections::HashSet<K, NoHashHasherBuilder<K>>;\n+\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n+pub struct NoHashHasherBuilder<T>(PhantomData<T>);\n+\n+impl<T> Default for NoHashHasherBuilder<T> {\n+    fn default() -> Self {\n+        Self(Default::default())\n+    }\n+}\n+\n+pub trait NoHashHashable {}\n+impl NoHashHashable for usize {}\n+impl NoHashHashable for u32 {}\n+\n+pub struct NoHashHasher(u64);\n+\n+impl<T: NoHashHashable> BuildHasher for NoHashHasherBuilder<T> {\n+    type Hasher = NoHashHasher;\n+    fn build_hasher(&self) -> Self::Hasher {\n+        NoHashHasher(0)\n+    }\n+}\n+\n+impl Hasher for NoHashHasher {\n+    fn finish(&self) -> u64 {\n+        self.0\n+    }\n+\n+    fn write(&mut self, _: &[u8]) {\n+        unimplemented!(\"NoHashHasher should only be used for hashing primitive integers\")\n+    }\n+\n+    fn write_u8(&mut self, i: u8) {\n+        self.0 = i as u64;\n+    }\n+\n+    fn write_u16(&mut self, i: u16) {\n+        self.0 = i as u64;\n+    }\n+\n+    fn write_u32(&mut self, i: u32) {\n+        self.0 = i as u64;\n+    }\n+\n+    fn write_u64(&mut self, i: u64) {\n+        self.0 = i as u64;\n+    }\n+\n+    fn write_usize(&mut self, i: usize) {\n+        self.0 = i as u64;\n+    }\n+\n+    fn write_i8(&mut self, i: i8) {\n+        self.0 = i as u64;\n+    }\n+\n+    fn write_i16(&mut self, i: i16) {\n+        self.0 = i as u64;\n+    }\n+\n+    fn write_i32(&mut self, i: i32) {\n+        self.0 = i as u64;\n+    }\n+\n+    fn write_i64(&mut self, i: i64) {\n+        self.0 = i as u64;\n+    }\n+\n+    fn write_isize(&mut self, i: isize) {\n+        self.0 = i as u64;\n+    }\n+}"}, {"sha": "51e109798d1df3c22f119920424fd11969986936", "filename": "crates/stdx/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -7,6 +7,7 @@ use std::{cmp::Ordering, ops, time::Instant};\n use std::{io as sio, iter};\n \n mod macros;\n+pub mod hash;\n pub mod process;\n pub mod panic_context;\n pub mod non_empty_vec;"}, {"sha": "d7549a2841539bb1e9df66e5592d99b5d7c8a809", "filename": "crates/vfs/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fvfs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fvfs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2FCargo.toml?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -12,6 +12,7 @@ doctest = false\n [dependencies]\n rustc-hash = \"1.1.0\"\n fst = \"0.4.7\"\n+indexmap = \"1.9.1\"\n \n paths = { path = \"../paths\", version = \"0.0.0\" }\n-indexmap = \"1.9.1\"\n+stdx = { path = \"../stdx\", version = \"0.0.0\" }"}, {"sha": "e0ef737b3fc09efe338e12ac996d8faf3690134a", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -6,14 +6,15 @@ use std::fmt;\n \n use fst::{IntoStreamer, Streamer};\n use rustc_hash::FxHashMap;\n+use stdx::hash::NoHashHashMap;\n \n use crate::{AnchoredPath, FileId, Vfs, VfsPath};\n \n /// A set of [`VfsPath`]s identified by [`FileId`]s.\n #[derive(Default, Clone, Eq, PartialEq)]\n pub struct FileSet {\n     files: FxHashMap<VfsPath, FileId>,\n-    paths: FxHashMap<FileId, VfsPath>,\n+    paths: NoHashHashMap<FileId, VfsPath>,\n }\n \n impl FileSet {"}, {"sha": "afc9a0fa6fb206b1a0c41024137639f016518697", "filename": "crates/vfs/src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fvfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca8093e282cdcdfb94d2d8adc224b7d05b151f8e/crates%2Fvfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Flib.rs?ref=ca8093e282cdcdfb94d2d8adc224b7d05b151f8e", "patch": "@@ -59,9 +59,16 @@ pub use paths::{AbsPath, AbsPathBuf};\n /// Handle to a file in [`Vfs`]\n ///\n /// Most functions in rust-analyzer use this when they need to refer to a file.\n-#[derive(Copy, Clone, Debug, Ord, PartialOrd, Eq, PartialEq, Hash)]\n+#[derive(Copy, Clone, Debug, Ord, PartialOrd, Eq, PartialEq)]\n pub struct FileId(pub u32);\n \n+impl stdx::hash::NoHashHashable for FileId {}\n+impl std::hash::Hash for FileId {\n+    fn hash<H: std::hash::Hasher>(&self, state: &mut H) {\n+        self.0.hash(state);\n+    }\n+}\n+\n /// Storage for all files read by rust-analyzer.\n ///\n /// For more information see the [crate-level](crate) documentation."}]}