{"sha": "6d651a295e0e0c331153288b10b78344a4ede20b", "node_id": "C_kwDOAAsO6NoAKDZkNjUxYTI5NWUwZTBjMzMxMTUzMjg4YjEwYjc4MzQ0YTRlZGUyMGI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-15T12:35:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-15T12:35:57Z"}, "message": "Auto merge of #104437 - matthiaskrgr:rollup-n5jdg9v, r=matthiaskrgr\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #103439 (Show note where the macro failed to match)\n - #103734 (Adjust stabilization version to 1.65.0 for wasi fds)\n - #104148 (Visit attributes of trait impl items during AST validation)\n - #104241 (Move most of unwind's build script to lib.rs)\n - #104258 (Deduce closure signature from a type alias `impl Trait`'s supertraits)\n - #104296 (Walk types more carefully in `ProhibitOpaqueTypes` visitor)\n - #104309 (Slightly improve error message for invalid identifier)\n - #104316 (Simplify suggestions for errors in generators.)\n - #104339 (Add `rustc_deny_explicit_impl`)\n\nFailed merges:\n\n - #103484 (Add `rust` to `let_underscore_lock` example)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "33533ed571ad09e616cd6e38d6d8ce875aacb2f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33533ed571ad09e616cd6e38d6d8ce875aacb2f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d651a295e0e0c331153288b10b78344a4ede20b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d651a295e0e0c331153288b10b78344a4ede20b", "html_url": "https://github.com/rust-lang/rust/commit/6d651a295e0e0c331153288b10b78344a4ede20b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d651a295e0e0c331153288b10b78344a4ede20b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "357f66072959f494d5fa2e6a269c6100eed703c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/357f66072959f494d5fa2e6a269c6100eed703c1", "html_url": "https://github.com/rust-lang/rust/commit/357f66072959f494d5fa2e6a269c6100eed703c1"}, {"sha": "55ff8bf847cbd5c35d94f38484ad8ad18b851b42", "url": "https://api.github.com/repos/rust-lang/rust/commits/55ff8bf847cbd5c35d94f38484ad8ad18b851b42", "html_url": "https://github.com/rust-lang/rust/commit/55ff8bf847cbd5c35d94f38484ad8ad18b851b42"}], "stats": {"total": 930, "additions": 724, "deletions": 206}, "files": [{"sha": "712fb5ac71f976c80ce84d9e06a996762fab9921", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -1051,6 +1051,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n                     walk_list!(this, visit_assoc_item, items, AssocCtxt::Impl);\n                 });\n+                walk_list!(self, visit_attribute, &item.attrs);\n                 return; // Avoid visiting again.\n             }\n             ItemKind::Impl(box Impl {\n@@ -1168,7 +1169,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 });\n                 walk_list!(self, visit_assoc_item, items, AssocCtxt::Trait);\n                 walk_list!(self, visit_attribute, &item.attrs);\n-                return;\n+                return; // Avoid visiting again\n             }\n             ItemKind::Mod(unsafety, ref mod_kind) => {\n                 if let Unsafe::Yes(span) = unsafety {"}, {"sha": "194bbd83b0f74c296dc97e009c697fc8ebad914e", "filename": "compiler/rustc_error_codes/src/error_codes/E0322.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0322.md", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0322.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0322.md?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -1,4 +1,5 @@\n-The `Sized` trait was implemented explicitly.\n+A built-in trait was implemented explicitly. All implementations of the trait\n+are provided automatically by the compiler.\n \n Erroneous code example:\n "}, {"sha": "4c7ce30097c95f324050b0d93ae2cc2770e1615c", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -384,3 +384,6 @@ parser_fn_ptr_with_generics = function pointer types may not have generic parame\n         [true] the\n         *[false] a\n     } `for` parameter list\n+\n+parser_invalid_identifier_with_leading_number = expected identifier, found number literal\n+    .label = identifiers cannot start with a number"}, {"sha": "d161868edce778677f02f7526acb6addf0069bb8", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -76,6 +76,7 @@ pub(crate) use ParseResult::*;\n use crate::mbe::{macro_rules::Tracker, KleeneOp, TokenTree};\n \n use rustc_ast::token::{self, DocComment, Nonterminal, NonterminalKind, Token};\n+use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::ErrorGuaranteed;\n@@ -86,6 +87,7 @@ use rustc_span::symbol::MacroRulesNormalizedIdent;\n use rustc_span::Span;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n+use std::fmt::Display;\n \n /// A unit within a matcher that a `MatcherPos` can refer to. Similar to (and derived from)\n /// `mbe::TokenTree`, but designed specifically for fast and easy traversal during matching.\n@@ -96,7 +98,7 @@ use std::collections::hash_map::Entry::{Occupied, Vacant};\n ///\n /// This means a matcher can be represented by `&[MatcherLoc]`, and traversal mostly involves\n /// simply incrementing the current matcher position index by one.\n-#[derive(Debug)]\n+#[derive(Debug, PartialEq, Clone)]\n pub(crate) enum MatcherLoc {\n     Token {\n         token: Token,\n@@ -129,6 +131,46 @@ pub(crate) enum MatcherLoc {\n     Eof,\n }\n \n+impl MatcherLoc {\n+    pub(super) fn span(&self) -> Option<Span> {\n+        match self {\n+            MatcherLoc::Token { token } => Some(token.span),\n+            MatcherLoc::Delimited => None,\n+            MatcherLoc::Sequence { .. } => None,\n+            MatcherLoc::SequenceKleeneOpNoSep { .. } => None,\n+            MatcherLoc::SequenceSep { .. } => None,\n+            MatcherLoc::SequenceKleeneOpAfterSep { .. } => None,\n+            MatcherLoc::MetaVarDecl { span, .. } => Some(*span),\n+            MatcherLoc::Eof => None,\n+        }\n+    }\n+}\n+\n+impl Display for MatcherLoc {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        match self {\n+            MatcherLoc::Token { token } | MatcherLoc::SequenceSep { separator: token } => {\n+                write!(f, \"`{}`\", pprust::token_to_string(token))\n+            }\n+            MatcherLoc::MetaVarDecl { bind, kind, .. } => {\n+                write!(f, \"meta-variable `${bind}\")?;\n+                if let Some(kind) = kind {\n+                    write!(f, \":{}\", kind)?;\n+                }\n+                write!(f, \"`\")?;\n+                Ok(())\n+            }\n+            MatcherLoc::Eof => f.write_str(\"end of macro\"),\n+\n+            // These are not printed in the diagnostic\n+            MatcherLoc::Delimited => f.write_str(\"delimiter\"),\n+            MatcherLoc::Sequence { .. } => f.write_str(\"sequence start\"),\n+            MatcherLoc::SequenceKleeneOpNoSep { .. } => f.write_str(\"sequence end\"),\n+            MatcherLoc::SequenceKleeneOpAfterSep { .. } => f.write_str(\"sequence end\"),\n+        }\n+    }\n+}\n+\n pub(super) fn compute_locs(matcher: &[TokenTree]) -> Vec<MatcherLoc> {\n     fn inner(\n         tts: &[TokenTree],\n@@ -398,6 +440,10 @@ impl TtParser {\n         }\n     }\n \n+    pub(super) fn has_no_remaining_items_for_step(&self) -> bool {\n+        self.cur_mps.is_empty()\n+    }\n+\n     /// Process the matcher positions of `cur_mps` until it is empty. In the process, this will\n     /// produce more mps in `next_mps` and `bb_mps`.\n     ///"}, {"sha": "182fbe36919d479c3e7b4070590a6f1369012941", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 29, "deletions": 10, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -337,7 +337,7 @@ fn expand_macro<'cx>(\n         return result;\n     }\n \n-    let Some((token, label)) = tracker.best_failure else {\n+    let Some((token, label, remaining_matcher)) = tracker.best_failure else {\n         return tracker.result.expect(\"must have encountered Error or ErrorReported\");\n     };\n \n@@ -351,6 +351,12 @@ fn expand_macro<'cx>(\n \n     annotate_doc_comment(&mut err, sess.source_map(), span);\n \n+    if let Some(span) = remaining_matcher.span() {\n+        err.span_note(span, format!(\"while trying to match {remaining_matcher}\"));\n+    } else {\n+        err.note(format!(\"while trying to match {remaining_matcher}\"));\n+    }\n+\n     // Check whether there's a missing comma in this macro call, like `println!(\"{}\" a);`\n     if let Some((arg, comma_span)) = arg.add_comma() {\n         for lhs in lhses {\n@@ -379,17 +385,22 @@ fn expand_macro<'cx>(\n }\n \n /// The tracker used for the slow error path that collects useful info for diagnostics.\n-struct CollectTrackerAndEmitter<'a, 'cx> {\n+struct CollectTrackerAndEmitter<'a, 'cx, 'matcher> {\n     cx: &'a mut ExtCtxt<'cx>,\n+    remaining_matcher: Option<&'matcher MatcherLoc>,\n     /// Which arm's failure should we report? (the one furthest along)\n-    best_failure: Option<(Token, &'static str)>,\n+    best_failure: Option<(Token, &'static str, MatcherLoc)>,\n     root_span: Span,\n     result: Option<Box<dyn MacResult + 'cx>>,\n }\n \n-impl<'a, 'cx, 'matcher> Tracker<'matcher> for CollectTrackerAndEmitter<'a, 'cx> {\n-    fn before_match_loc(&mut self, _parser: &TtParser, _matcher: &'matcher MatcherLoc) {\n-        // Empty for now.\n+impl<'a, 'cx, 'matcher> Tracker<'matcher> for CollectTrackerAndEmitter<'a, 'cx, 'matcher> {\n+    fn before_match_loc(&mut self, parser: &TtParser, matcher: &'matcher MatcherLoc) {\n+        if self.remaining_matcher.is_none()\n+            || (parser.has_no_remaining_items_for_step() && *matcher != MatcherLoc::Eof)\n+        {\n+            self.remaining_matcher = Some(matcher);\n+        }\n     }\n \n     fn after_arm(&mut self, result: &NamedParseResult) {\n@@ -398,8 +409,16 @@ impl<'a, 'cx, 'matcher> Tracker<'matcher> for CollectTrackerAndEmitter<'a, 'cx>\n                 unreachable!(\"should not collect detailed info for successful macro match\");\n             }\n             Failure(token, msg) => match self.best_failure {\n-                Some((ref best_token, _)) if best_token.span.lo() >= token.span.lo() => {}\n-                _ => self.best_failure = Some((token.clone(), msg)),\n+                Some((ref best_token, _, _)) if best_token.span.lo() >= token.span.lo() => {}\n+                _ => {\n+                    self.best_failure = Some((\n+                        token.clone(),\n+                        msg,\n+                        self.remaining_matcher\n+                            .expect(\"must have collected matcher already\")\n+                            .clone(),\n+                    ))\n+                }\n             },\n             Error(err_sp, msg) => {\n                 let span = err_sp.substitute_dummy(self.root_span);\n@@ -415,9 +434,9 @@ impl<'a, 'cx, 'matcher> Tracker<'matcher> for CollectTrackerAndEmitter<'a, 'cx>\n     }\n }\n \n-impl<'a, 'cx> CollectTrackerAndEmitter<'a, 'cx> {\n+impl<'a, 'cx> CollectTrackerAndEmitter<'a, 'cx, '_> {\n     fn new(cx: &'a mut ExtCtxt<'cx>, root_span: Span) -> Self {\n-        Self { cx, best_failure: None, root_span, result: None }\n+        Self { cx, remaining_matcher: None, best_failure: None, root_span, result: None }\n     }\n }\n "}, {"sha": "4b6e068db4312505c647c66023a49332d133cd57", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -691,6 +691,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         rustc_allow_incoherent_impl, AttributeType::Normal, template!(Word), ErrorFollowing, @only_local: true,\n         \"#[rustc_allow_incoherent_impl] has to be added to all impl items of an incoherent inherent impl.\"\n     ),\n+    rustc_attr!(\n+        rustc_deny_explicit_impl, AttributeType::Normal, template!(Word), ErrorFollowing, @only_local: false,\n+        \"#[rustc_deny_explicit_impl] enforces that a trait can have no user-provided impls\"\n+    ),\n     rustc_attr!(\n         rustc_has_incoherent_inherent_impls, AttributeType::Normal, template!(Word), ErrorFollowing,\n         \"#[rustc_has_incoherent_inherent_impls] allows the addition of incoherent inherent impls for \\"}, {"sha": "1bf3768fead3619f9fb5781cb8f9314c21f6e256", "filename": "compiler/rustc_hir_analysis/src/coherence/mod.rs", "status": "modified", "additions": 16, "deletions": 50, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -5,10 +5,11 @@\n // done by the orphan and overlap modules. Then we build up various\n // mappings. That mapping code resides here.\n \n-use rustc_errors::struct_span_err;\n+use rustc_errors::{error_code, struct_span_err};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n+use rustc_span::sym;\n use rustc_trait_selection::traits;\n \n mod builtin;\n@@ -39,61 +40,26 @@ fn enforce_trait_manually_implementable(\n     impl_def_id: LocalDefId,\n     trait_def_id: DefId,\n ) {\n-    let did = Some(trait_def_id);\n-    let li = tcx.lang_items();\n     let impl_header_span = tcx.def_span(impl_def_id);\n \n-    // Disallow *all* explicit impls of `Pointee`, `DiscriminantKind`, `Sized` and `Unsize` for now.\n-    if did == li.pointee_trait() {\n-        struct_span_err!(\n+    // Disallow *all* explicit impls of traits marked `#[rustc_deny_explicit_impl]`\n+    if tcx.has_attr(trait_def_id, sym::rustc_deny_explicit_impl) {\n+        let trait_name = tcx.item_name(trait_def_id);\n+        let mut err = struct_span_err!(\n             tcx.sess,\n             impl_header_span,\n             E0322,\n-            \"explicit impls for the `Pointee` trait are not permitted\"\n-        )\n-        .span_label(impl_header_span, \"impl of `Pointee` not allowed\")\n-        .emit();\n-        return;\n-    }\n-\n-    if did == li.discriminant_kind_trait() {\n-        struct_span_err!(\n-            tcx.sess,\n-            impl_header_span,\n-            E0322,\n-            \"explicit impls for the `DiscriminantKind` trait are not permitted\"\n-        )\n-        .span_label(impl_header_span, \"impl of `DiscriminantKind` not allowed\")\n-        .emit();\n-        return;\n-    }\n-\n-    if did == li.sized_trait() {\n-        struct_span_err!(\n-            tcx.sess,\n-            impl_header_span,\n-            E0322,\n-            \"explicit impls for the `Sized` trait are not permitted\"\n-        )\n-        .span_label(impl_header_span, \"impl of `Sized` not allowed\")\n-        .emit();\n-        return;\n-    }\n-\n-    if did == li.unsize_trait() {\n-        struct_span_err!(\n-            tcx.sess,\n-            impl_header_span,\n-            E0328,\n-            \"explicit impls for the `Unsize` trait are not permitted\"\n-        )\n-        .span_label(impl_header_span, \"impl of `Unsize` not allowed\")\n-        .emit();\n-        return;\n-    }\n+            \"explicit impls for the `{trait_name}` trait are not permitted\"\n+        );\n+        err.span_label(impl_header_span, format!(\"impl of `{trait_name}` not allowed\"));\n+\n+        // Maintain explicit error code for `Unsize`, since it has a useful\n+        // explanation about using `CoerceUnsized` instead.\n+        if Some(trait_def_id) == tcx.lang_items().unsize_trait() {\n+            err.code(error_code!(E0328));\n+        }\n \n-    if tcx.features().unboxed_closures {\n-        // the feature gate allows all Fn traits\n+        err.emit();\n         return;\n     }\n "}, {"sha": "63062761b500d9ac8ebe62944cf859b0a9b87003", "filename": "compiler/rustc_hir_typeck/src/closure.rs", "status": "modified", "additions": 10, "deletions": 33, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fclosure.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -173,34 +173,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected_ty: Ty<'tcx>,\n     ) -> (Option<ExpectedSig<'tcx>>, Option<ty::ClosureKind>) {\n         match *expected_ty.kind() {\n-            ty::Opaque(def_id, substs) => {\n-                let bounds = self.tcx.bound_explicit_item_bounds(def_id);\n-                let sig =\n-                    bounds.subst_iter_copied(self.tcx, substs).find_map(|(pred, span)| match pred\n-                        .kind()\n-                        .skip_binder()\n-                    {\n-                        ty::PredicateKind::Projection(proj_predicate) => self\n-                            .deduce_sig_from_projection(\n-                                Some(span),\n-                                pred.kind().rebind(proj_predicate),\n-                            ),\n-                        _ => None,\n-                    });\n-\n-                let kind = bounds\n-                    .0\n-                    .iter()\n-                    .filter_map(|(pred, _)| match pred.kind().skip_binder() {\n-                        ty::PredicateKind::Trait(tp) => {\n-                            self.tcx.fn_trait_kind_from_lang_item(tp.def_id())\n-                        }\n-                        _ => None,\n-                    })\n-                    .fold(None, |best, cur| Some(best.map_or(cur, |best| cmp::min(best, cur))));\n-                trace!(?sig, ?kind);\n-                (sig, kind)\n-            }\n+            ty::Opaque(def_id, substs) => self.deduce_signature_from_predicates(\n+                self.tcx.bound_explicit_item_bounds(def_id).subst_iter_copied(self.tcx, substs),\n+            ),\n             ty::Dynamic(ref object_type, ..) => {\n                 let sig = object_type.projection_bounds().find_map(|pb| {\n                     let pb = pb.with_self_ty(self.tcx, self.tcx.types.trait_object_dummy_self);\n@@ -211,7 +186,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .and_then(|did| self.tcx.fn_trait_kind_from_lang_item(did));\n                 (sig, kind)\n             }\n-            ty::Infer(ty::TyVar(vid)) => self.deduce_expectations_from_obligations(vid),\n+            ty::Infer(ty::TyVar(vid)) => self.deduce_signature_from_predicates(\n+                self.obligations_for_self_ty(vid).map(|obl| (obl.predicate, obl.cause.span)),\n+            ),\n             ty::FnPtr(sig) => {\n                 let expected_sig = ExpectedSig { cause_span: None, sig };\n                 (Some(expected_sig), Some(ty::ClosureKind::Fn))\n@@ -220,19 +197,19 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn deduce_expectations_from_obligations(\n+    fn deduce_signature_from_predicates(\n         &self,\n-        expected_vid: ty::TyVid,\n+        predicates: impl DoubleEndedIterator<Item = (ty::Predicate<'tcx>, Span)>,\n     ) -> (Option<ExpectedSig<'tcx>>, Option<ty::ClosureKind>) {\n         let mut expected_sig = None;\n         let mut expected_kind = None;\n \n-        for obligation in traits::elaborate_obligations(\n+        for obligation in traits::elaborate_predicates_with_span(\n             self.tcx,\n             // Reverse the obligations here, since `elaborate_*` uses a stack,\n             // and we want to keep inference generally in the same order of\n             // the registered obligations.\n-            self.obligations_for_self_ty(expected_vid).rev().collect(),\n+            predicates.rev(),\n         ) {\n             debug!(?obligation.predicate);\n             let bound_predicate = obligation.predicate.kind();"}, {"sha": "afc568f3a505b61a139bb6adf25dad2a9f4d2623", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -1195,35 +1195,30 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n     }\n \n     fn check_for_opaque_ty(&mut self, sp: Span, ty: Ty<'tcx>) -> bool {\n-        struct ProhibitOpaqueTypes<'a, 'tcx> {\n-            cx: &'a LateContext<'tcx>,\n-        }\n-\n-        impl<'a, 'tcx> ty::visit::TypeVisitor<'tcx> for ProhibitOpaqueTypes<'a, 'tcx> {\n+        struct ProhibitOpaqueTypes;\n+        impl<'tcx> ty::visit::TypeVisitor<'tcx> for ProhibitOpaqueTypes {\n             type BreakTy = Ty<'tcx>;\n \n             fn visit_ty(&mut self, ty: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n-                match ty.kind() {\n-                    ty::Opaque(..) => ControlFlow::Break(ty),\n-                    // Consider opaque types within projections FFI-safe if they do not normalize\n-                    // to more opaque types.\n-                    ty::Projection(..) => {\n-                        let ty = self.cx.tcx.normalize_erasing_regions(self.cx.param_env, ty);\n-\n-                        // If `ty` is an opaque type directly then `super_visit_with` won't invoke\n-                        // this function again.\n-                        if ty.has_opaque_types() {\n-                            self.visit_ty(ty)\n-                        } else {\n-                            ControlFlow::CONTINUE\n-                        }\n-                    }\n-                    _ => ty.super_visit_with(self),\n+                if !ty.has_opaque_types() {\n+                    return ControlFlow::CONTINUE;\n+                }\n+\n+                if let ty::Opaque(..) = ty.kind() {\n+                    ControlFlow::Break(ty)\n+                } else {\n+                    ty.super_visit_with(self)\n                 }\n             }\n         }\n \n-        if let Some(ty) = ty.visit_with(&mut ProhibitOpaqueTypes { cx: self.cx }).break_value() {\n+        if let Some(ty) = self\n+            .cx\n+            .tcx\n+            .normalize_erasing_regions(self.cx.param_env, ty)\n+            .visit_with(&mut ProhibitOpaqueTypes)\n+            .break_value()\n+        {\n             self.emit_ffi_unsafe_type_lint(ty, sp, fluent::lint_improper_ctypes_opaque, None);\n             true\n         } else {"}, {"sha": "c1cf7896db59a7df62c678dd2dfc3859481ec71f", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 69, "deletions": 9, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -6,7 +6,6 @@ use crate::ty::sty::{ClosureSubsts, GeneratorSubsts, InlineConstSubsts};\n use crate::ty::visit::{TypeVisitable, TypeVisitor};\n use crate::ty::{self, Lift, List, ParamConst, Ty, TyCtxt};\n \n-use rustc_data_structures::captures::Captures;\n use rustc_data_structures::intern::{Interned, WithStableHash};\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n@@ -19,7 +18,7 @@ use std::fmt;\n use std::marker::PhantomData;\n use std::mem;\n use std::num::NonZeroUsize;\n-use std::ops::ControlFlow;\n+use std::ops::{ControlFlow, Deref};\n use std::slice;\n \n /// An entity in the Rust type system, which can be one of\n@@ -562,25 +561,86 @@ impl<T, U> EarlyBinder<(T, U)> {\n     }\n }\n \n-impl<'tcx, 's, T: IntoIterator<Item = I>, I: TypeFoldable<'tcx>> EarlyBinder<T> {\n+impl<'tcx, 's, I: IntoIterator> EarlyBinder<I>\n+where\n+    I::Item: TypeFoldable<'tcx>,\n+{\n     pub fn subst_iter(\n         self,\n         tcx: TyCtxt<'tcx>,\n         substs: &'s [GenericArg<'tcx>],\n-    ) -> impl Iterator<Item = I> + Captures<'s> + Captures<'tcx> {\n-        self.0.into_iter().map(move |t| EarlyBinder(t).subst(tcx, substs))\n+    ) -> SubstIter<'s, 'tcx, I> {\n+        SubstIter { it: self.0.into_iter(), tcx, substs }\n+    }\n+}\n+\n+pub struct SubstIter<'s, 'tcx, I: IntoIterator> {\n+    it: I::IntoIter,\n+    tcx: TyCtxt<'tcx>,\n+    substs: &'s [GenericArg<'tcx>],\n+}\n+\n+impl<'tcx, I: IntoIterator> Iterator for SubstIter<'_, 'tcx, I>\n+where\n+    I::Item: TypeFoldable<'tcx>,\n+{\n+    type Item = I::Item;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        Some(EarlyBinder(self.it.next()?).subst(self.tcx, self.substs))\n+    }\n+}\n+\n+impl<'tcx, I: IntoIterator> DoubleEndedIterator for SubstIter<'_, 'tcx, I>\n+where\n+    I::IntoIter: DoubleEndedIterator,\n+    I::Item: TypeFoldable<'tcx>,\n+{\n+    fn next_back(&mut self) -> Option<Self::Item> {\n+        Some(EarlyBinder(self.it.next_back()?).subst(self.tcx, self.substs))\n     }\n }\n \n-impl<'tcx, 's, 'a, T: IntoIterator<Item = &'a I>, I: Copy + TypeFoldable<'tcx> + 'a>\n-    EarlyBinder<T>\n+impl<'tcx, 's, I: IntoIterator> EarlyBinder<I>\n+where\n+    I::Item: Deref,\n+    <I::Item as Deref>::Target: Copy + TypeFoldable<'tcx>,\n {\n     pub fn subst_iter_copied(\n         self,\n         tcx: TyCtxt<'tcx>,\n         substs: &'s [GenericArg<'tcx>],\n-    ) -> impl Iterator<Item = I> + Captures<'s> + Captures<'tcx> + Captures<'a> {\n-        self.0.into_iter().map(move |t| EarlyBinder(*t).subst(tcx, substs))\n+    ) -> SubstIterCopied<'s, 'tcx, I> {\n+        SubstIterCopied { it: self.0.into_iter(), tcx, substs }\n+    }\n+}\n+\n+pub struct SubstIterCopied<'a, 'tcx, I: IntoIterator> {\n+    it: I::IntoIter,\n+    tcx: TyCtxt<'tcx>,\n+    substs: &'a [GenericArg<'tcx>],\n+}\n+\n+impl<'tcx, I: IntoIterator> Iterator for SubstIterCopied<'_, 'tcx, I>\n+where\n+    I::Item: Deref,\n+    <I::Item as Deref>::Target: Copy + TypeFoldable<'tcx>,\n+{\n+    type Item = <I::Item as Deref>::Target;\n+\n+    fn next(&mut self) -> Option<Self::Item> {\n+        Some(EarlyBinder(*self.it.next()?).subst(self.tcx, self.substs))\n+    }\n+}\n+\n+impl<'tcx, I: IntoIterator> DoubleEndedIterator for SubstIterCopied<'_, 'tcx, I>\n+where\n+    I::IntoIter: DoubleEndedIterator,\n+    I::Item: Deref,\n+    <I::Item as Deref>::Target: Copy + TypeFoldable<'tcx>,\n+{\n+    fn next_back(&mut self) -> Option<Self::Item> {\n+        Some(EarlyBinder(*self.it.next_back()?).subst(self.tcx, self.substs))\n     }\n }\n "}, {"sha": "2b17cea97949a2cdfd1cecfcd17a56af5387dea6", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -1205,6 +1205,14 @@ pub(crate) struct SelfParamNotFirst {\n     pub span: Span,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(parser_invalid_identifier_with_leading_number)]\n+pub(crate) struct InvalidIdentiferStartsWithNumber {\n+    #[primary_span]\n+    #[label]\n+    pub span: Span,\n+}\n+\n #[derive(Diagnostic)]\n #[diag(parser_const_generic_without_braces)]\n pub(crate) struct ConstGenericWithoutBraces {"}, {"sha": "18b661034e070915d4b0893054e088a0dab4ba6e", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -10,8 +10,8 @@ use super::{\n use crate::errors::{\n     AssignmentElseNotAllowed, CompoundAssignmentExpressionInLet, ConstLetMutuallyExclusive,\n     DocCommentDoesNotDocumentAnything, ExpectedStatementAfterOuterAttr, InvalidCurlyInLetElse,\n-    InvalidExpressionInLetElse, InvalidVariableDeclaration, InvalidVariableDeclarationSub,\n-    WrapExpressionInParentheses,\n+    InvalidExpressionInLetElse, InvalidIdentiferStartsWithNumber, InvalidVariableDeclaration,\n+    InvalidVariableDeclarationSub, WrapExpressionInParentheses,\n };\n use crate::maybe_whole;\n \n@@ -264,6 +264,7 @@ impl<'a> Parser<'a> {\n             self.bump();\n         }\n \n+        self.report_invalid_identifier_error()?;\n         let (pat, colon) = self.parse_pat_before_ty(None, RecoverComma::Yes, \"`let` bindings\")?;\n \n         let (err, ty) = if colon {\n@@ -355,6 +356,17 @@ impl<'a> Parser<'a> {\n         Ok(P(ast::Local { ty, pat, kind, id: DUMMY_NODE_ID, span: lo.to(hi), attrs, tokens: None }))\n     }\n \n+    /// report error for `let 1x = 123`\n+    pub fn report_invalid_identifier_error(&mut self) -> PResult<'a, ()> {\n+        if let token::Literal(lit) = self.token.uninterpolate().kind &&\n+            let Err(_) = rustc_ast::Lit::from_token(&self.token) &&\n+            (lit.kind == token::LitKind::Integer || lit.kind == token::LitKind::Float) &&\n+            self.look_ahead(1, |t| matches!(t.kind, token::Eq) || matches!(t.kind, token::Colon ) ) {\n+                return Err(self.sess.create_err(InvalidIdentiferStartsWithNumber { span: self.token.span }));\n+        }\n+        Ok(())\n+    }\n+\n     fn check_let_else_init_bool_expr(&self, init: &ast::Expr) {\n         if let ast::ExprKind::Binary(op, ..) = init.kind {\n             if op.node.lazy() {"}, {"sha": "a56450a3573d1c10417b949c27ee0964e25ba296", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -1210,6 +1210,7 @@ symbols! {\n         rustc_deallocator,\n         rustc_def_path,\n         rustc_default_body_unstable,\n+        rustc_deny_explicit_impl,\n         rustc_diagnostic_item,\n         rustc_diagnostic_macros,\n         rustc_dirty,"}, {"sha": "84daaf97ecfa8c2dccca83da1b694ec15a6a054f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 42, "deletions": 51, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -44,7 +44,7 @@ use rustc_middle::ty::print::with_no_trimmed_paths;\n #[derive(Debug)]\n pub enum GeneratorInteriorOrUpvar {\n     // span of interior type\n-    Interior(Span),\n+    Interior(Span, Option<(Option<Span>, Span, Option<hir::HirId>, Option<Span>)>),\n     // span of upvar\n     Upvar(Span),\n }\n@@ -283,7 +283,6 @@ pub trait TypeErrCtxtExt<'tcx> {\n         &self,\n         err: &mut Diagnostic,\n         interior_or_upvar_span: GeneratorInteriorOrUpvar,\n-        interior_extra_info: Option<(Option<Span>, Span, Option<hir::HirId>, Option<Span>)>,\n         is_async: bool,\n         outer_generator: Option<DefId>,\n         trait_pred: ty::TraitPredicate<'tcx>,\n@@ -2003,17 +2002,11 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             .as_local()\n             .and_then(|def_id| hir.maybe_body_owned_by(def_id))\n             .map(|body_id| hir.body(body_id));\n-        let is_async = match generator_did.as_local() {\n-            Some(_) => generator_body\n-                .and_then(|body| body.generator_kind())\n-                .map(|generator_kind| matches!(generator_kind, hir::GeneratorKind::Async(..)))\n-                .unwrap_or(false),\n-            None => self\n-                .tcx\n-                .generator_kind(generator_did)\n-                .map(|generator_kind| matches!(generator_kind, hir::GeneratorKind::Async(..)))\n-                .unwrap_or(false),\n-        };\n+        let is_async = self\n+            .tcx\n+            .generator_kind(generator_did)\n+            .map(|generator_kind| matches!(generator_kind, hir::GeneratorKind::Async(..)))\n+            .unwrap_or(false);\n         let mut visitor = AwaitsVisitor::default();\n         if let Some(body) = generator_body {\n             visitor.visit_body(body);\n@@ -2043,61 +2036,60 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             eq\n         };\n \n-        let mut interior_or_upvar_span = None;\n-        let mut interior_extra_info = None;\n-\n         // Get the typeck results from the infcx if the generator is the function we are currently\n         // type-checking; otherwise, get them by performing a query.  This is needed to avoid\n         // cycles. If we can't use resolved types because the generator comes from another crate,\n         // we still provide a targeted error but without all the relevant spans.\n-        let generator_data: Option<GeneratorData<'tcx, '_>> = match &self.typeck_results {\n-            Some(t) if t.hir_owner.to_def_id() == generator_did_root => {\n-                Some(GeneratorData::Local(&t))\n-            }\n+        let generator_data = match &self.typeck_results {\n+            Some(t) if t.hir_owner.to_def_id() == generator_did_root => GeneratorData::Local(&t),\n             _ if generator_did.is_local() => {\n-                Some(GeneratorData::Local(self.tcx.typeck(generator_did.expect_local())))\n+                GeneratorData::Local(self.tcx.typeck(generator_did.expect_local()))\n             }\n-            _ => self\n-                .tcx\n-                .generator_diagnostic_data(generator_did)\n-                .as_ref()\n-                .map(|generator_diag_data| GeneratorData::Foreign(generator_diag_data)),\n+            _ if let Some(generator_diag_data) = self.tcx.generator_diagnostic_data(generator_did) => {\n+                GeneratorData::Foreign(generator_diag_data)\n+            }\n+            _ => return false,\n         };\n \n-        if let Some(generator_data) = generator_data.as_ref() {\n-            interior_or_upvar_span =\n-                generator_data.try_get_upvar_span(&self, generator_did, ty_matches);\n+        let mut interior_or_upvar_span = None;\n \n-            // The generator interior types share the same binders\n-            if let Some(cause) =\n-                generator_data.get_generator_interior_types().skip_binder().iter().find(\n-                    |ty::GeneratorInteriorTypeCause { ty, .. }| {\n-                        ty_matches(generator_data.get_generator_interior_types().rebind(*ty))\n-                    },\n-                )\n-            {\n-                let from_awaited_ty = generator_data.get_from_await_ty(visitor, hir, ty_matches);\n-                let ty::GeneratorInteriorTypeCause { span, scope_span, yield_span, expr, .. } =\n-                    cause;\n+        let from_awaited_ty = generator_data.get_from_await_ty(visitor, hir, ty_matches);\n+        debug!(?from_awaited_ty);\n \n-                interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(*span));\n-                interior_extra_info = Some((*scope_span, *yield_span, *expr, from_awaited_ty));\n-            }\n+        // The generator interior types share the same binders\n+        if let Some(cause) =\n+            generator_data.get_generator_interior_types().skip_binder().iter().find(\n+                |ty::GeneratorInteriorTypeCause { ty, .. }| {\n+                    ty_matches(generator_data.get_generator_interior_types().rebind(*ty))\n+                },\n+            )\n+        {\n+            let ty::GeneratorInteriorTypeCause { span, scope_span, yield_span, expr, .. } = cause;\n \n-            if interior_or_upvar_span.is_none() && generator_data.is_foreign() {\n-                interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(span));\n-            }\n+            interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(\n+                *span,\n+                Some((*scope_span, *yield_span, *expr, from_awaited_ty)),\n+            ));\n         }\n \n+        if interior_or_upvar_span.is_none() {\n+            interior_or_upvar_span =\n+                generator_data.try_get_upvar_span(&self, generator_did, ty_matches);\n+        }\n+\n+        if interior_or_upvar_span.is_none() && generator_data.is_foreign() {\n+            interior_or_upvar_span = Some(GeneratorInteriorOrUpvar::Interior(span, None));\n+        }\n+\n+        debug!(?interior_or_upvar_span);\n         if let Some(interior_or_upvar_span) = interior_or_upvar_span {\n-            let typeck_results = generator_data.and_then(|generator_data| match generator_data {\n+            let typeck_results = match generator_data {\n                 GeneratorData::Local(typeck_results) => Some(typeck_results),\n                 GeneratorData::Foreign(_) => None,\n-            });\n+            };\n             self.note_obligation_cause_for_async_await(\n                 err,\n                 interior_or_upvar_span,\n-                interior_extra_info,\n                 is_async,\n                 outer_generator,\n                 trait_ref,\n@@ -2119,7 +2111,6 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         &self,\n         err: &mut Diagnostic,\n         interior_or_upvar_span: GeneratorInteriorOrUpvar,\n-        interior_extra_info: Option<(Option<Span>, Span, Option<hir::HirId>, Option<Span>)>,\n         is_async: bool,\n         outer_generator: Option<DefId>,\n         trait_pred: ty::TraitPredicate<'tcx>,\n@@ -2241,7 +2232,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n             }\n         };\n         match interior_or_upvar_span {\n-            GeneratorInteriorOrUpvar::Interior(interior_span) => {\n+            GeneratorInteriorOrUpvar::Interior(interior_span, interior_extra_info) => {\n                 if let Some((scope_span, yield_span, expr, from_awaited_ty)) = interior_extra_info {\n                     if let Some(await_span) = from_awaited_ty {\n                         // The type causing this obligation is one being awaited at await_span."}, {"sha": "3eff6033f8da9e16d29006232c4c8e20a0f470e4", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -96,6 +96,7 @@ unsafe impl<T: Sync + ?Sized> Send for &T {}\n )]\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n #[rustc_specialization_trait]\n+#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n pub trait Sized {\n     // Empty.\n }\n@@ -127,6 +128,7 @@ pub trait Sized {\n /// [nomicon-coerce]: ../../nomicon/coercions.html\n #[unstable(feature = \"unsize\", issue = \"27732\")]\n #[lang = \"unsize\"]\n+#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n pub trait Unsize<T: ?Sized> {\n     // Empty.\n }\n@@ -693,6 +695,7 @@ impl<T: ?Sized> StructuralEq for PhantomData<T> {}\n     reason = \"this trait is unlikely to ever be stabilized, use `mem::discriminant` instead\"\n )]\n #[lang = \"discriminant_kind\"]\n+#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n pub trait DiscriminantKind {\n     /// The type of the discriminant, which must satisfy the trait\n     /// bounds required by `mem::Discriminant`.\n@@ -793,6 +796,7 @@ impl<T: ?Sized> Unpin for *mut T {}\n #[lang = \"destruct\"]\n #[rustc_on_unimplemented(message = \"can't drop `{Self}`\", append_const_msg)]\n #[const_trait]\n+#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n pub trait Destruct {}\n \n /// A marker for tuple types.\n@@ -802,6 +806,7 @@ pub trait Destruct {}\n #[unstable(feature = \"tuple_trait\", issue = \"none\")]\n #[lang = \"tuple_trait\"]\n #[rustc_on_unimplemented(message = \"`{Self}` is not a tuple\")]\n+#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n pub trait Tuple {}\n \n /// Implementations of `Copy` for primitive types."}, {"sha": "a8604843e96319c679441affd4a7a32972d44fe5", "filename": "library/core/src/ptr/metadata.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -50,6 +50,7 @@ use crate::hash::{Hash, Hasher};\n ///\n /// [`to_raw_parts`]: *const::to_raw_parts\n #[lang = \"pointee_trait\"]\n+#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n pub trait Pointee {\n     /// The type for metadata in pointers and references to `Self`.\n     #[lang = \"metadata_type\"]"}, {"sha": "4e123a1eec8aed77c1ab397b159f9c7344a9dac1", "filename": "library/std/src/os/wasi/io/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwasi%2Fio%2Fmod.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -1,6 +1,6 @@\n //! WASI-specific extensions to general I/O primitives.\n \n-#![stable(feature = \"io_safety\", since = \"1.63.0\")]\n+#![stable(feature = \"io_safety_wasi\", since = \"1.65.0\")]\n \n-#[stable(feature = \"io_safety\", since = \"1.63.0\")]\n+#[stable(feature = \"io_safety_wasi\", since = \"1.65.0\")]\n pub use crate::os::fd::*;"}, {"sha": "5c3c02fb6adace904655f6b8597faffb29259321", "filename": "library/unwind/build.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/library%2Funwind%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/library%2Funwind%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fbuild.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -21,29 +21,5 @@ fn main() {\n         if has_unwind {\n             println!(\"cargo:rustc-cfg=feature=\\\"system-llvm-libunwind\\\"\");\n         }\n-    } else if target.contains(\"freebsd\") {\n-        println!(\"cargo:rustc-link-lib=gcc_s\");\n-    } else if target.contains(\"netbsd\") {\n-        println!(\"cargo:rustc-link-lib=gcc_s\");\n-    } else if target.contains(\"openbsd\") {\n-        if target.contains(\"sparc64\") {\n-            println!(\"cargo:rustc-link-lib=gcc\");\n-        } else {\n-            println!(\"cargo:rustc-link-lib=c++abi\");\n-        }\n-    } else if target.contains(\"solaris\") {\n-        println!(\"cargo:rustc-link-lib=gcc_s\");\n-    } else if target.contains(\"illumos\") {\n-        println!(\"cargo:rustc-link-lib=gcc_s\");\n-    } else if target.contains(\"dragonfly\") {\n-        println!(\"cargo:rustc-link-lib=gcc_pic\");\n-    } else if target.ends_with(\"pc-windows-gnu\") {\n-        // This is handled in the target spec with late_link_args_[static|dynamic]\n-    } else if target.contains(\"uwp-windows-gnu\") {\n-        println!(\"cargo:rustc-link-lib=unwind\");\n-    } else if target.contains(\"haiku\") {\n-        println!(\"cargo:rustc-link-lib=gcc_s\");\n-    } else if target.contains(\"redox\") {\n-        // redox is handled in lib.rs\n     }\n }"}, {"sha": "3753071d5f0c1fb6bacd8a04a2fd687ae9c3c615", "filename": "library/unwind/src/lib.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/library%2Funwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/library%2Funwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2Fsrc%2Flib.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -103,3 +103,27 @@ extern \"C\" {}\n #[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))]\n #[link(name = \"unwind\", kind = \"static\", modifiers = \"-bundle\")]\n extern \"C\" {}\n+\n+#[cfg(any(target_os = \"freebsd\", target_os = \"netbsd\"))]\n+#[link(name = \"gcc_s\")]\n+extern \"C\" {}\n+\n+#[cfg(all(target_os = \"openbsd\", target_arch = \"sparc64\"))]\n+#[link(name = \"gcc\")]\n+extern \"C\" {}\n+\n+#[cfg(all(target_os = \"openbsd\", not(target_arch = \"sparc64\")))]\n+#[link(name = \"c++abi\")]\n+extern \"C\" {}\n+\n+#[cfg(any(target_os = \"solaris\", target_os = \"illumos\"))]\n+#[link(name = \"gcc_s\")]\n+extern \"C\" {}\n+\n+#[cfg(target_os = \"dragonfly\")]\n+#[link(name = \"gcc_pic\")]\n+extern \"C\" {}\n+\n+#[cfg(target_os = \"haiku\")]\n+#[link(name = \"gcc_s\")]\n+extern \"C\" {}"}, {"sha": "ec4a001f4d01a6f35e622964ebf0f66f4e74cc02", "filename": "src/test/ui/array-slice-vec/vec-macro-with-comma-only.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-macro-with-comma-only.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-macro-with-comma-only.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Fvec-macro-with-comma-only.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -3,6 +3,8 @@ error: no rules expected the token `,`\n    |\n LL |     vec![,];\n    |          ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match end of macro\n \n error: aborting due to previous error\n "}, {"sha": "9f73b91aabebfbbe2ee843665c253b02400fdb6b", "filename": "src/test/ui/const-generics/min_const_generics/macro-fail.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fmacro-fail.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -53,6 +53,12 @@ LL |     macro_rules! gimme_a_const {\n ...\n LL |   let _fail = Example::<gimme_a_const!()>;\n    |                         ^^^^^^^^^^^^^^^^ missing tokens in macro arguments\n+   |\n+note: while trying to match meta-variable `$rusty:ident`\n+  --> $DIR/macro-fail.rs:28:8\n+   |\n+LL |       ($rusty: ident) => {{ let $rusty = 3; *&$rusty }}\n+   |        ^^^^^^^^^^^^^\n \n error[E0747]: type provided when a constant was expected\n   --> $DIR/macro-fail.rs:14:33"}, {"sha": "39944622d07b9ec0c1e5a2eceadf6d635399fe96", "filename": "src/test/ui/editions/edition-keywords-2015-2015-parsing.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2015-parsing.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -3,12 +3,24 @@ error: no rules expected the token `r#async`\n    |\n LL |     r#async = consumes_async!(r#async);\n    |                               ^^^^^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match `async`\n+  --> $DIR/auxiliary/edition-kw-macro-2015.rs:17:6\n+   |\n+LL |     (async) => (1)\n+   |      ^^^^^\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2015-2015-parsing.rs:17:35\n    |\n LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match `r#async`\n+  --> $DIR/auxiliary/edition-kw-macro-2015.rs:22:6\n+   |\n+LL |     (r#async) => (1)\n+   |      ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "fa83908e6666e70a62d1f87e8fb939c406afd358", "filename": "src/test/ui/editions/edition-keywords-2015-2018-parsing.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2015-2018-parsing.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -3,12 +3,24 @@ error: no rules expected the token `r#async`\n    |\n LL |     r#async = consumes_async!(r#async);\n    |                               ^^^^^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match `async`\n+  --> $DIR/auxiliary/edition-kw-macro-2018.rs:17:6\n+   |\n+LL |     (async) => (1)\n+   |      ^^^^^\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2015-2018-parsing.rs:17:35\n    |\n LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match `r#async`\n+  --> $DIR/auxiliary/edition-kw-macro-2018.rs:22:6\n+   |\n+LL |     (r#async) => (1)\n+   |      ^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "1a4a94e973327b64958ca5fba2a6e025d46571ec", "filename": "src/test/ui/editions/edition-keywords-2018-2015-parsing.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2015-parsing.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -25,12 +25,24 @@ error: no rules expected the token `r#async`\n    |\n LL |     r#async = consumes_async!(r#async);\n    |                               ^^^^^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match `async`\n+  --> $DIR/auxiliary/edition-kw-macro-2015.rs:17:6\n+   |\n+LL |     (async) => (1)\n+   |      ^^^^^\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2018-2015-parsing.rs:21:35\n    |\n LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match `r#async`\n+  --> $DIR/auxiliary/edition-kw-macro-2015.rs:22:6\n+   |\n+LL |     (r#async) => (1)\n+   |      ^^^^^^^\n \n error: macro expansion ends with an incomplete expression: expected one of `move`, `|`, or `||`\n   --> $DIR/auxiliary/edition-kw-macro-2015.rs:27:23"}, {"sha": "19eb7ac98239eb4b37e9cfc385e038faec0777e8", "filename": "src/test/ui/editions/edition-keywords-2018-2018-parsing.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-keywords-2018-2018-parsing.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -25,12 +25,24 @@ error: no rules expected the token `r#async`\n    |\n LL |     r#async = consumes_async!(r#async);\n    |                               ^^^^^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match `async`\n+  --> $DIR/auxiliary/edition-kw-macro-2018.rs:17:6\n+   |\n+LL |     (async) => (1)\n+   |      ^^^^^\n \n error: no rules expected the token `async`\n   --> $DIR/edition-keywords-2018-2018-parsing.rs:21:35\n    |\n LL |     r#async = consumes_async_raw!(async);\n    |                                   ^^^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match `r#async`\n+  --> $DIR/auxiliary/edition-kw-macro-2018.rs:22:6\n+   |\n+LL |     (r#async) => (1)\n+   |      ^^^^^^^\n \n error: macro expansion ends with an incomplete expression: expected one of `move`, `|`, or `||`\n   --> $DIR/auxiliary/edition-kw-macro-2018.rs:27:23"}, {"sha": "7cc8d8fe9229a62e85bb63f46d7b10961553f574", "filename": "src/test/ui/empty/empty-comment.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fempty%2Fempty-comment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fempty%2Fempty-comment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fempty%2Fempty-comment.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -6,6 +6,12 @@ LL | macro_rules! one_arg_macro {\n ...\n LL |     one_arg_macro!(/**/);\n    |     ^^^^^^^^^^^^^^^^^^^^ missing tokens in macro arguments\n+   |\n+note: while trying to match meta-variable `$fmt:expr`\n+  --> $DIR/empty-comment.rs:6:6\n+   |\n+LL |     ($fmt:expr) => (print!(concat!($fmt, \"\\n\")));\n+   |      ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "af8f54291ff47ce1c30f3d8bc98d821db2989053", "filename": "src/test/ui/fail-simple.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Ffail-simple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Ffail-simple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffail-simple.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -3,6 +3,8 @@ error: no rules expected the token `@`\n    |\n LL |     panic!(@);\n    |            ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match end of macro\n \n error: aborting due to previous error\n "}, {"sha": "d2c3479203573a74397ee21fd36d9c23c5fd849a", "filename": "src/test/ui/impl-trait/deduce-signature-from-supertrait.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fimpl-trait%2Fdeduce-signature-from-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fimpl-trait%2Fdeduce-signature-from-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fdeduce-signature-from-supertrait.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait SuperExpectation: Fn(i32) {}\n+\n+impl<T: Fn(i32)> SuperExpectation for T {}\n+\n+type Foo = impl SuperExpectation;\n+\n+fn main() {\n+    let _: Foo = |x| {\n+        let _ = x.to_string();\n+    };\n+}"}, {"sha": "b04a0eef37139ec322483240df4a7b43f1ecddf9", "filename": "src/test/ui/issues/issue-7970a.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fissues%2Fissue-7970a.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fissues%2Fissue-7970a.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-7970a.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -6,6 +6,12 @@ LL | macro_rules! one_arg_macro {\n ...\n LL |     one_arg_macro!();\n    |     ^^^^^^^^^^^^^^^^ missing tokens in macro arguments\n+   |\n+note: while trying to match meta-variable `$fmt:expr`\n+  --> $DIR/issue-7970a.rs:2:6\n+   |\n+LL |     ($fmt:expr) => (print!(concat!($fmt, \"\\n\")));\n+   |      ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "c83bca4a4c57026b4467ac3191f1320f44d8c864", "filename": "src/test/ui/lint/opaque-ty-ffi-normalization-cycle.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-normalization-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-normalization-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-normalization-cycle.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -0,0 +1,41 @@\n+#![feature(type_alias_impl_trait)]\n+#![allow(unused)]\n+#![deny(improper_ctypes)]\n+\n+pub trait TraitA {\n+    type Assoc;\n+}\n+\n+impl TraitA for u32 {\n+    type Assoc = u32;\n+}\n+\n+pub trait TraitB {\n+    type Assoc;\n+}\n+\n+impl<T> TraitB for T\n+where\n+    T: TraitA,\n+{\n+    type Assoc = <T as TraitA>::Assoc;\n+}\n+\n+type AliasA = impl TraitA<Assoc = u32>;\n+\n+type AliasB = impl TraitB;\n+\n+fn use_of_a() -> AliasA {\n+    3\n+}\n+\n+fn use_of_b() -> AliasB {\n+    3\n+}\n+\n+extern \"C\" {\n+    fn lint_me() -> <AliasB as TraitB>::Assoc;\n+    //~^ ERROR `extern` block uses type `AliasB`, which is not FFI-safe\n+}\n+\n+fn main() {}"}, {"sha": "e8d696477ada1d5a4654eca57028f79cce16bbe9", "filename": "src/test/ui/lint/opaque-ty-ffi-normalization-cycle.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-normalization-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-normalization-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fopaque-ty-ffi-normalization-cycle.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -0,0 +1,15 @@\n+error: `extern` block uses type `AliasB`, which is not FFI-safe\n+  --> $DIR/opaque-ty-ffi-normalization-cycle.rs:37:21\n+   |\n+LL |     fn lint_me() -> <AliasB as TraitB>::Assoc;\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: opaque types have no C equivalent\n+note: the lint level is defined here\n+  --> $DIR/opaque-ty-ffi-normalization-cycle.rs:3:9\n+   |\n+LL | #![deny(improper_ctypes)]\n+   |         ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "1e73320e43912a5ea607652e45b917f2507a4156", "filename": "src/test/ui/macros/assert-trailing-junk.with-generic-asset.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.with-generic-asset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.with-generic-asset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.with-generic-asset.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -17,6 +17,8 @@ LL |     assert!(true, \"whatever\" blah);\n    |                             -^^^^ no rules expected this token in macro call\n    |                             |\n    |                             help: missing comma here\n+   |\n+   = note: while trying to match sequence start\n \n error: unexpected string literal\n   --> $DIR/assert-trailing-junk.rs:18:18\n@@ -33,6 +35,8 @@ LL |     assert!(true \"whatever\" blah);\n    |                            -^^^^ no rules expected this token in macro call\n    |                            |\n    |                            help: missing comma here\n+   |\n+   = note: while trying to match sequence start\n \n error: macro requires an expression as an argument\n   --> $DIR/assert-trailing-junk.rs:22:5"}, {"sha": "1e73320e43912a5ea607652e45b917f2507a4156", "filename": "src/test/ui/macros/assert-trailing-junk.without-generic-asset.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.without-generic-asset.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.without-generic-asset.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fassert-trailing-junk.without-generic-asset.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -17,6 +17,8 @@ LL |     assert!(true, \"whatever\" blah);\n    |                             -^^^^ no rules expected this token in macro call\n    |                             |\n    |                             help: missing comma here\n+   |\n+   = note: while trying to match sequence start\n \n error: unexpected string literal\n   --> $DIR/assert-trailing-junk.rs:18:18\n@@ -33,6 +35,8 @@ LL |     assert!(true \"whatever\" blah);\n    |                            -^^^^ no rules expected this token in macro call\n    |                            |\n    |                            help: missing comma here\n+   |\n+   = note: while trying to match sequence start\n \n error: macro requires an expression as an argument\n   --> $DIR/assert-trailing-junk.rs:22:5"}, {"sha": "7c45b85bc8d4e811bf256eb3440b6f525d8104bc", "filename": "src/test/ui/macros/macro-at-most-once-rep-2015.stderr", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2015.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -12,6 +12,8 @@ LL | macro_rules! foo {\n ...\n LL |     foo!(a?);\n    |           ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence end\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2015.rs:26:11\n@@ -21,6 +23,8 @@ LL | macro_rules! foo {\n ...\n LL |     foo!(a?a);\n    |           ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence end\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2015.rs:27:11\n@@ -30,6 +34,8 @@ LL | macro_rules! foo {\n ...\n LL |     foo!(a?a?a);\n    |           ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence end\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2015.rs:29:5\n@@ -39,6 +45,12 @@ LL | macro_rules! barplus {\n ...\n LL |     barplus!();\n    |     ^^^^^^^^^^ missing tokens in macro arguments\n+   |\n+note: while trying to match `+`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:15:11\n+   |\n+LL |     ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+   |           ^\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2015.rs:30:15\n@@ -48,6 +60,12 @@ LL | macro_rules! barplus {\n ...\n LL |     barplus!(a);\n    |               ^ missing tokens in macro arguments\n+   |\n+note: while trying to match `+`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:15:11\n+   |\n+LL |     ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+   |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2015.rs:31:15\n@@ -57,6 +75,12 @@ LL | macro_rules! barplus {\n ...\n LL |     barplus!(a?);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match `+`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:15:11\n+   |\n+LL |     ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+   |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2015.rs:32:15\n@@ -66,6 +90,12 @@ LL | macro_rules! barplus {\n ...\n LL |     barplus!(a?a);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match `+`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:15:11\n+   |\n+LL |     ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+   |           ^\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2015.rs:36:5\n@@ -75,6 +105,12 @@ LL | macro_rules! barstar {\n ...\n LL |     barstar!();\n    |     ^^^^^^^^^^ missing tokens in macro arguments\n+   |\n+note: while trying to match `*`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:19:11\n+   |\n+LL |     ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+   |           ^\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2015.rs:37:15\n@@ -84,6 +120,12 @@ LL | macro_rules! barstar {\n ...\n LL |     barstar!(a);\n    |               ^ missing tokens in macro arguments\n+   |\n+note: while trying to match `*`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:19:11\n+   |\n+LL |     ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+   |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2015.rs:38:15\n@@ -93,6 +135,12 @@ LL | macro_rules! barstar {\n ...\n LL |     barstar!(a?);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match `*`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:19:11\n+   |\n+LL |     ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+   |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2015.rs:39:15\n@@ -102,6 +150,12 @@ LL | macro_rules! barstar {\n ...\n LL |     barstar!(a?a);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match `*`\n+  --> $DIR/macro-at-most-once-rep-2015.rs:19:11\n+   |\n+LL |     ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+   |           ^\n \n error: aborting due to 12 previous errors\n "}, {"sha": "696520b28268a0ce81cec0f0b14187b2116a4c72", "filename": "src/test/ui/macros/macro-at-most-once-rep-2018.stderr", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-at-most-once-rep-2018.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -12,6 +12,8 @@ LL | macro_rules! foo {\n ...\n LL |     foo!(a?);\n    |           ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence end\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:26:11\n@@ -21,6 +23,8 @@ LL | macro_rules! foo {\n ...\n LL |     foo!(a?a);\n    |           ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence end\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:27:11\n@@ -30,6 +34,8 @@ LL | macro_rules! foo {\n ...\n LL |     foo!(a?a?a);\n    |           ^ no rules expected this token in macro call\n+   |\n+   = note: while trying to match sequence end\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:29:5\n@@ -39,6 +45,12 @@ LL | macro_rules! barplus {\n ...\n LL |     barplus!();\n    |     ^^^^^^^^^^ missing tokens in macro arguments\n+   |\n+note: while trying to match `+`\n+  --> $DIR/macro-at-most-once-rep-2018.rs:15:11\n+   |\n+LL |     ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+   |           ^\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:30:15\n@@ -48,6 +60,12 @@ LL | macro_rules! barplus {\n ...\n LL |     barplus!(a);\n    |               ^ missing tokens in macro arguments\n+   |\n+note: while trying to match `+`\n+  --> $DIR/macro-at-most-once-rep-2018.rs:15:11\n+   |\n+LL |     ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+   |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:31:15\n@@ -57,6 +75,12 @@ LL | macro_rules! barplus {\n ...\n LL |     barplus!(a?);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match `+`\n+  --> $DIR/macro-at-most-once-rep-2018.rs:15:11\n+   |\n+LL |     ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+   |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:32:15\n@@ -66,6 +90,12 @@ LL | macro_rules! barplus {\n ...\n LL |     barplus!(a?a);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match `+`\n+  --> $DIR/macro-at-most-once-rep-2018.rs:15:11\n+   |\n+LL |     ($(a)?+) => {}; // ok. matches \"a+\" and \"+\"\n+   |           ^\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:36:5\n@@ -75,6 +105,12 @@ LL | macro_rules! barstar {\n ...\n LL |     barstar!();\n    |     ^^^^^^^^^^ missing tokens in macro arguments\n+   |\n+note: while trying to match `*`\n+  --> $DIR/macro-at-most-once-rep-2018.rs:19:11\n+   |\n+LL |     ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+   |           ^\n \n error: unexpected end of macro invocation\n   --> $DIR/macro-at-most-once-rep-2018.rs:37:15\n@@ -84,6 +120,12 @@ LL | macro_rules! barstar {\n ...\n LL |     barstar!(a);\n    |               ^ missing tokens in macro arguments\n+   |\n+note: while trying to match `*`\n+  --> $DIR/macro-at-most-once-rep-2018.rs:19:11\n+   |\n+LL |     ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+   |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:38:15\n@@ -93,6 +135,12 @@ LL | macro_rules! barstar {\n ...\n LL |     barstar!(a?);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match `*`\n+  --> $DIR/macro-at-most-once-rep-2018.rs:19:11\n+   |\n+LL |     ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+   |           ^\n \n error: no rules expected the token `?`\n   --> $DIR/macro-at-most-once-rep-2018.rs:39:15\n@@ -102,6 +150,12 @@ LL | macro_rules! barstar {\n ...\n LL |     barstar!(a?a);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match `*`\n+  --> $DIR/macro-at-most-once-rep-2018.rs:19:11\n+   |\n+LL |     ($(a)?*) => {}; // ok. matches \"a*\" and \"*\"\n+   |           ^\n \n error: aborting due to 12 previous errors\n "}, {"sha": "e1ed87f94355152fd51799f9b9a1c1feb2ce8deb", "filename": "src/test/ui/macros/macro-non-lifetime.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmacro-non-lifetime.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -6,6 +6,12 @@ LL | macro_rules! m { ($x:lifetime) => { } }\n ...\n LL |     m!(a);\n    |        ^ no rules expected this token in macro call\n+   |\n+note: while trying to match meta-variable `$x:lifetime`\n+  --> $DIR/macro-non-lifetime.rs:3:19\n+   |\n+LL | macro_rules! m { ($x:lifetime) => { } }\n+   |                   ^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "81877a29ed8ae74593cc50fd5ce4001439ec27c8", "filename": "src/test/ui/macros/missing-comma.stderr", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fmissing-comma.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -14,6 +14,12 @@ LL |     foo!(a b);\n    |           -^ no rules expected this token in macro call\n    |           |\n    |           help: missing comma here\n+   |\n+note: while trying to match meta-variable `$a:ident`\n+  --> $DIR/missing-comma.rs:2:6\n+   |\n+LL |     ($a:ident) => ();\n+   |      ^^^^^^^^\n \n error: no rules expected the token `e`\n   --> $DIR/missing-comma.rs:23:21\n@@ -25,6 +31,12 @@ LL |     foo!(a, b, c, d e);\n    |                    -^ no rules expected this token in macro call\n    |                    |\n    |                    help: missing comma here\n+   |\n+note: while trying to match meta-variable `$d:ident`\n+  --> $DIR/missing-comma.rs:5:36\n+   |\n+LL |     ($a:ident, $b:ident, $c:ident, $d:ident) => ();\n+   |                                    ^^^^^^^^\n \n error: no rules expected the token `d`\n   --> $DIR/missing-comma.rs:25:18\n@@ -36,6 +48,12 @@ LL |     foo!(a, b, c d, e);\n    |                 -^ no rules expected this token in macro call\n    |                 |\n    |                 help: missing comma here\n+   |\n+note: while trying to match meta-variable `$c:ident`\n+  --> $DIR/missing-comma.rs:4:26\n+   |\n+LL |     ($a:ident, $b:ident, $c:ident) => ();\n+   |                          ^^^^^^^^\n \n error: no rules expected the token `d`\n   --> $DIR/missing-comma.rs:27:18\n@@ -45,6 +63,12 @@ LL | macro_rules! foo {\n ...\n LL |     foo!(a, b, c d e);\n    |                  ^ no rules expected this token in macro call\n+   |\n+note: while trying to match meta-variable `$c:ident`\n+  --> $DIR/missing-comma.rs:4:26\n+   |\n+LL |     ($a:ident, $b:ident, $c:ident) => ();\n+   |                          ^^^^^^^^\n \n error: unexpected end of macro invocation\n   --> $DIR/missing-comma.rs:29:23\n@@ -54,6 +78,12 @@ LL | macro_rules! bar {\n ...\n LL |     bar!(Level::Error, );\n    |                       ^ missing tokens in macro arguments\n+   |\n+note: while trying to match meta-variable `$arg:tt`\n+  --> $DIR/missing-comma.rs:10:19\n+   |\n+LL |     ($lvl:expr, $($arg:tt)+) => {}\n+   |                   ^^^^^^^\n \n error: no rules expected the token `,`\n   --> $DIR/missing-comma.rs:32:38\n@@ -63,6 +93,12 @@ LL | macro_rules! check {\n ...\n LL |     check!(<str as Debug>::fmt, \"fmt\",);\n    |                                      ^ no rules expected this token in macro call\n+   |\n+note: while trying to match meta-variable `$expected:expr`\n+  --> $DIR/missing-comma.rs:14:14\n+   |\n+LL |     ($ty:ty, $expected:expr) => {};\n+   |              ^^^^^^^^^^^^^^\n \n error: aborting due to 7 previous errors\n "}, {"sha": "5bbd5439098335afff89b48dec3a06c73b2f7591", "filename": "src/test/ui/macros/nonterminal-matching.stderr", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fnonterminal-matching.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -10,6 +10,14 @@ LL |     n!(a $nt_item b);\n LL | complex_nonterminal!(enum E {});\n    | ------------------------------- in this macro invocation\n    |\n+note: while trying to match `enum E {}`\n+  --> $DIR/nonterminal-matching.rs:15:15\n+   |\n+LL |     macro n(a $nt_item b) {\n+   |               ^^^^^^^^\n+...\n+LL | complex_nonterminal!(enum E {});\n+   | ------------------------------- in this macro invocation\n    = note: this error originates in the macro `complex_nonterminal` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: aborting due to previous error"}, {"sha": "21e47da075716b64cbc8ae341768bd01837aa28c", "filename": "src/test/ui/macros/trace_faulty_macros.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Ftrace_faulty_macros.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -10,6 +10,7 @@ LL |         my_faulty_macro!(bcd);\n LL |     my_faulty_macro!();\n    |     ------------------ in this macro invocation\n    |\n+   = note: while trying to match end of macro\n    = note: this error originates in the macro `my_faulty_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n note: trace_macro"}, {"sha": "ade3f727004abe27048784e79c36b2f242bea04b", "filename": "src/test/ui/on-unimplemented/issue-104140.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fon-unimplemented%2Fissue-104140.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fon-unimplemented%2Fissue-104140.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fissue-104140.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -0,0 +1,8 @@\n+#![feature(rustc_attrs)]\n+\n+trait Foo {}\n+\n+#[rustc_on_unimplemented] //~ ERROR malformed `rustc_on_unimplemented` attribute input\n+impl Foo for u32 {}\n+\n+fn main() {}"}, {"sha": "ddb1f50f0bb45c850e49cad57efdf799f3aa0266", "filename": "src/test/ui/on-unimplemented/issue-104140.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fon-unimplemented%2Fissue-104140.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fon-unimplemented%2Fissue-104140.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fissue-104140.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -0,0 +1,15 @@\n+error: malformed `rustc_on_unimplemented` attribute input\n+  --> $DIR/issue-104140.rs:5:1\n+   |\n+LL | #[rustc_on_unimplemented]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+help: the following are the possible correct uses\n+   |\n+LL | #[rustc_on_unimplemented = \"message\"]\n+   | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL | #[rustc_on_unimplemented(/*opt*/ message = \"...\", /*opt*/ label = \"...\", /*opt*/ note = \"...\")]\n+   | ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+\n+error: aborting due to previous error\n+"}, {"sha": "acc2099bbc6a80eb03af1a538ea444cc7d6188aa", "filename": "src/test/ui/or-patterns/or-patterns-syntactic-fail-2018.stderr", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2For-patterns%2For-patterns-syntactic-fail-2018.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -6,6 +6,12 @@ LL | macro_rules! accept_pat {\n ...\n LL | accept_pat!(p | q);\n    |               ^ no rules expected this token in macro call\n+   |\n+note: while trying to match meta-variable `$p:pat`\n+  --> $DIR/or-patterns-syntactic-fail-2018.rs:9:6\n+   |\n+LL |     ($p:pat) => {};\n+   |      ^^^^^^\n \n error: no rules expected the token `|`\n   --> $DIR/or-patterns-syntactic-fail-2018.rs:13:13\n@@ -15,6 +21,12 @@ LL | macro_rules! accept_pat {\n ...\n LL | accept_pat!(|p| q);\n    |             ^ no rules expected this token in macro call\n+   |\n+note: while trying to match meta-variable `$p:pat`\n+  --> $DIR/or-patterns-syntactic-fail-2018.rs:9:6\n+   |\n+LL |     ($p:pat) => {};\n+   |      ^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "5f794fe2dc924500ba36f4a77bfccf864b5a2ecd", "filename": "src/test/ui/parser/issues/issue-104088.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-104088.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-104088.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-104088.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -0,0 +1,26 @@\n+fn test() {\n+    if let 123 = 123 { println!(\"yes\"); }\n+}\n+\n+fn test_2() {\n+    let 1x = 123;\n+    //~^ ERROR expected identifier, found number literal\n+}\n+\n+fn test_3() {\n+    let 2x: i32 = 123;\n+    //~^ ERROR expected identifier, found number literal\n+}\n+\n+fn test_4() {\n+    if let 2e1 = 123 {\n+        //~^ ERROR mismatched types\n+    }\n+}\n+\n+fn test_5() {\n+    let 23name = 123;\n+    //~^ ERROR expected identifier, found number literal\n+}\n+\n+fn main() {}"}, {"sha": "ff4b4bdb6953e13673c1814b56f755c6e9f69462", "filename": "src/test/ui/parser/issues/issue-104088.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-104088.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -0,0 +1,29 @@\n+error: expected identifier, found number literal\n+  --> $DIR/issue-104088.rs:6:9\n+   |\n+LL |     let 1x = 123;\n+   |         ^^ identifiers cannot start with a number\n+\n+error: expected identifier, found number literal\n+  --> $DIR/issue-104088.rs:11:9\n+   |\n+LL |     let 2x: i32 = 123;\n+   |         ^^ identifiers cannot start with a number\n+\n+error: expected identifier, found number literal\n+  --> $DIR/issue-104088.rs:22:9\n+   |\n+LL |     let 23name = 123;\n+   |         ^^^^^^ identifiers cannot start with a number\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-104088.rs:16:12\n+   |\n+LL |     if let 2e1 = 123 {\n+   |            ^^^   --- this expression has type `{integer}`\n+   |            |\n+   |            expected integer, found floating-point number\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "eaeb62d2cfd98515e8b4ed394ed0c80afc6f35fc", "filename": "src/test/ui/parser/macro/macro-doc-comments-1.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-1.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -9,6 +9,12 @@ LL |     //! Inner\n    |     |\n    |     no rules expected this token in macro call\n    |     inner doc comments expand to `#![doc = \"...\"]`, which is what this macro attempted to match\n+   |\n+note: while trying to match `[`\n+  --> $DIR/macro-doc-comments-1.rs:2:7\n+   |\n+LL |     (#[$outer:meta]) => ()\n+   |       ^\n \n error: aborting due to previous error\n "}, {"sha": "1dcd95f6fad4f235b810e4ed696d72b5873c2510", "filename": "src/test/ui/parser/macro/macro-doc-comments-2.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Fmacro-doc-comments-2.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -9,6 +9,12 @@ LL |     /// Outer\n    |     |\n    |     no rules expected this token in macro call\n    |     outer doc comments expand to `#[doc = \"...\"]`, which is what this macro attempted to match\n+   |\n+note: while trying to match `!`\n+  --> $DIR/macro-doc-comments-2.rs:2:7\n+   |\n+LL |     (#![$inner:meta]) => ()\n+   |       ^\n \n error: aborting due to previous error\n "}, {"sha": "f3a6a668372fb91dd33048cd9655eee8a9b3d71e", "filename": "src/test/ui/parser/slowparse-bstring.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fparser%2Fslowparse-bstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fparser%2Fslowparse-bstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fslowparse-bstring.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "previous_filename": "src/test/ui/slowparse-bstring.rs"}, {"sha": "6ebc61dae783b2cdf4ba5b59d93e87568f20d243", "filename": "src/test/ui/parser/slowparse-string.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fparser%2Fslowparse-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Fparser%2Fslowparse-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fslowparse-string.rs?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "previous_filename": "src/test/ui/slowparse-string.rs"}, {"sha": "96fe11911b7a0af0e12e6c6aad2cf17cf31433f7", "filename": "src/test/ui/rfc-2294-if-let-guard/feature-gate.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2294-if-let-guard%2Ffeature-gate.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -72,6 +72,12 @@ LL |     macro_rules! use_expr {\n ...\n LL |     use_expr!(let 0 = 1);\n    |               ^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match meta-variable `$e:expr`\n+  --> $DIR/feature-gate.rs:61:10\n+   |\n+LL |         ($e:expr) => {\n+   |          ^^^^^^^\n \n error[E0658]: `if let` guards are experimental\n   --> $DIR/feature-gate.rs:7:12"}, {"sha": "7a43b71fc8b890799133c495be8d7d10eecbe19b", "filename": "src/test/ui/rfc-2497-if-let-chains/feature-gate.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Ffeature-gate.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -18,6 +18,12 @@ LL |     macro_rules! use_expr {\n ...\n LL |     use_expr!(let 0 = 1);\n    |               ^^^ no rules expected this token in macro call\n+   |\n+note: while trying to match meta-variable `$e:expr`\n+  --> $DIR/feature-gate.rs:50:10\n+   |\n+LL |         ($e:expr) => {\n+   |          ^^^^^^^\n \n error[E0658]: `let` expressions in this position are unstable\n   --> $DIR/feature-gate.rs:14:16"}, {"sha": "b0e4d88f67186eafb8ff2e7900a17e6bf7826d22", "filename": "src/test/ui/underscore-ident-matcher.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d651a295e0e0c331153288b10b78344a4ede20b/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr?ref=6d651a295e0e0c331153288b10b78344a4ede20b", "patch": "@@ -6,6 +6,12 @@ LL | macro_rules! identity {\n ...\n LL |     let identity!(_) = 10;\n    |                   ^ no rules expected this token in macro call\n+   |\n+note: while trying to match meta-variable `$i:ident`\n+  --> $DIR/underscore-ident-matcher.rs:2:6\n+   |\n+LL |     ($i: ident) => (\n+   |      ^^^^^^^^^\n \n error: aborting due to previous error\n "}]}