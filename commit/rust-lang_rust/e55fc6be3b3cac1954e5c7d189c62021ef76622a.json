{"sha": "e55fc6be3b3cac1954e5c7d189c62021ef76622a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NWZjNmJlM2IzY2FjMTk1NGU1YzdkMTg5YzYyMDIxZWY3NjYyMmE=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2019-07-14T01:25:53Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-07-14T01:25:53Z"}, "message": "Fix using --help, --verbose, etc. (#3620)", "tree": {"sha": "07e78dfbf2bae5a1d4a301035e4aeac8ee887a7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07e78dfbf2bae5a1d4a301035e4aeac8ee887a7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e55fc6be3b3cac1954e5c7d189c62021ef76622a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e55fc6be3b3cac1954e5c7d189c62021ef76622a", "html_url": "https://github.com/rust-lang/rust/commit/e55fc6be3b3cac1954e5c7d189c62021ef76622a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e55fc6be3b3cac1954e5c7d189c62021ef76622a/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37695b3c45ec8015974359a2f809aa98accd173c", "url": "https://api.github.com/repos/rust-lang/rust/commits/37695b3c45ec8015974359a2f809aa98accd173c", "html_url": "https://github.com/rust-lang/rust/commit/37695b3c45ec8015974359a2f809aa98accd173c"}], "stats": {"total": 92, "additions": 81, "deletions": 11}, "files": [{"sha": "b806ca7609bf9ace862ab392b60e13e7aaf08418", "filename": "src/cargo-fmt/main.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e55fc6be3b3cac1954e5c7d189c62021ef76622a/src%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55fc6be3b3cac1954e5c7d189c62021ef76622a/src%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo-fmt%2Fmain.rs?ref=e55fc6be3b3cac1954e5c7d189c62021ef76622a", "patch": "@@ -85,7 +85,14 @@ fn execute() -> i32 {\n     };\n \n     if opts.version {\n-        return handle_command_status(get_version());\n+        return handle_command_status(get_rustfmt_info(&[String::from(\"--version\")]));\n+    }\n+    if opts.rustfmt_options.iter().any(|s| {\n+        [\"--print-config\", \"-h\", \"--help\", \"-V\", \"--version\"].contains(&s.as_str())\n+            || s.starts_with(\"--help=\")\n+            || s.starts_with(\"--print-config=\")\n+    }) {\n+        return handle_command_status(get_rustfmt_info(&opts.rustfmt_options));\n     }\n \n     let strategy = CargoFmtStrategy::from_opts(&opts);\n@@ -118,10 +125,10 @@ fn handle_command_status(status: Result<i32, io::Error>) -> i32 {\n     }\n }\n \n-fn get_version() -> Result<i32, io::Error> {\n+fn get_rustfmt_info(args: &[String]) -> Result<i32, io::Error> {\n     let mut command = Command::new(\"rustfmt\")\n         .stdout(std::process::Stdio::inherit())\n-        .args(&[String::from(\"--version\")])\n+        .args(args)\n         .spawn()\n         .map_err(|e| match e.kind() {\n             io::ErrorKind::NotFound => io::Error::new(\n@@ -143,14 +150,7 @@ fn format_crate(\n     strategy: &CargoFmtStrategy,\n     rustfmt_args: Vec<String>,\n ) -> Result<i32, io::Error> {\n-    let targets = if rustfmt_args\n-        .iter()\n-        .any(|s| [\"--print-config\", \"-h\", \"--help\", \"-V\", \"--version\"].contains(&s.as_str()))\n-    {\n-        BTreeSet::new()\n-    } else {\n-        get_targets(strategy)?\n-    };\n+    let targets = get_targets(strategy)?;\n \n     // Currently only bin and lib files get formatted.\n     run_rustfmt(&targets, &rustfmt_args, verbosity)"}, {"sha": "d1ba2e689b65f8797facb926d832b7160d1d8fbf", "filename": "tests/cargo-fmt/main.rs", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e55fc6be3b3cac1954e5c7d189c62021ef76622a/tests%2Fcargo-fmt%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e55fc6be3b3cac1954e5c7d189c62021ef76622a/tests%2Fcargo-fmt%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcargo-fmt%2Fmain.rs?ref=e55fc6be3b3cac1954e5c7d189c62021ef76622a", "patch": "@@ -0,0 +1,70 @@\n+// Integration tests for cargo-fmt.\n+\n+use std::env;\n+use std::process::Command;\n+\n+/// Run the cargo-fmt executable and return its output.\n+fn cargo_fmt(args: &[&str]) -> (String, String) {\n+    let mut bin_dir = env::current_exe().unwrap();\n+    bin_dir.pop(); // chop off test exe name\n+    if bin_dir.ends_with(\"deps\") {\n+        bin_dir.pop();\n+    }\n+    let cmd = bin_dir.join(format!(\"cargo-fmt{}\", env::consts::EXE_SUFFIX));\n+\n+    // Ensure cargo-fmt runs the rustfmt binary from the local target dir.\n+    let path = env::var_os(\"PATH\").unwrap_or_default();\n+    let mut paths = env::split_paths(&path).collect::<Vec<_>>();\n+    paths.insert(0, bin_dir);\n+    let new_path = env::join_paths(paths).unwrap();\n+\n+    match Command::new(&cmd).args(args).env(\"PATH\", new_path).output() {\n+        Ok(output) => (\n+            String::from_utf8(output.stdout).expect(\"utf-8\"),\n+            String::from_utf8(output.stderr).expect(\"utf-8\"),\n+        ),\n+        Err(e) => panic!(\"failed to run `{:?} {:?}`: {}\", cmd, args, e),\n+    }\n+}\n+\n+macro_rules! assert_that {\n+    ($args:expr, $check:ident $check_args:tt) => {\n+        let (stdout, stderr) = cargo_fmt($args);\n+        if !stdout.$check$check_args {\n+            panic!(\n+                \"Output not expected for cargo-fmt {:?}\\n\\\n+                 expected: {}{}\\n\\\n+                 actual stdout:\\n{}\\n\\\n+                 actual stderr:\\n{}\",\n+                $args,\n+                stringify!($check),\n+                stringify!($check_args),\n+                stdout,\n+                stderr\n+            );\n+        }\n+    };\n+}\n+\n+#[test]\n+fn version() {\n+    assert_that!(&[\"--version\"], starts_with(\"rustfmt \"));\n+    assert_that!(&[\"--version\"], starts_with(\"rustfmt \"));\n+    assert_that!(&[\"--\", \"-V\"], starts_with(\"rustfmt \"));\n+    assert_that!(&[\"--\", \"--version\"], starts_with(\"rustfmt \"));\n+}\n+\n+#[test]\n+fn print_config() {\n+    assert_that!(\n+        &[\"--\", \"--print-config\", \"current\", \".\"],\n+        contains(\"max_width = \")\n+    );\n+}\n+\n+#[test]\n+fn rustfmt_help() {\n+    assert_that!(&[\"--\", \"--help\"], contains(\"Format Rust code\"));\n+    assert_that!(&[\"--\", \"-h\"], contains(\"Format Rust code\"));\n+    assert_that!(&[\"--\", \"--help=config\"], contains(\"Configuration Options:\"));\n+}"}]}