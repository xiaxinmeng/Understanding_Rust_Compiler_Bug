{"sha": "263f9a7f231a474dd56d02adbcd7c57d079e88fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2M2Y5YTdmMjMxYTQ3NGRkNTZkMDJhZGJjZDdjNTdkMDc5ZTg4ZmQ=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-04T03:38:25Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-08-10T12:44:54Z"}, "message": "Add tracking of packed repr, use it to highlight unsafe refs\n\nTaking a reference to a misaligned field on a packed struct is an\nunsafe operation. Highlight that behavior. Currently, the misaligned\npart isn't tracked, so this highlight is a bit too aggressive.", "tree": {"sha": "125391657a69cb05ac14fadee37e6138dc0daae7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/125391657a69cb05ac14fadee37e6138dc0daae7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/263f9a7f231a474dd56d02adbcd7c57d079e88fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/263f9a7f231a474dd56d02adbcd7c57d079e88fd", "html_url": "https://github.com/rust-lang/rust/commit/263f9a7f231a474dd56d02adbcd7c57d079e88fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/263f9a7f231a474dd56d02adbcd7c57d079e88fd/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f3336509e52187a7a70a8043557a7317872e3a2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f3336509e52187a7a70a8043557a7317872e3a2f", "html_url": "https://github.com/rust-lang/rust/commit/f3336509e52187a7a70a8043557a7317872e3a2f"}], "stats": {"total": 109, "additions": 105, "deletions": 4}, "files": [{"sha": "6f9c56d2943adfea38e7d53992bd1642c28a7384", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/263f9a7f231a474dd56d02adbcd7c57d079e88fd/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263f9a7f231a474dd56d02adbcd7c57d079e88fd/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=263f9a7f231a474dd56d02adbcd7c57d079e88fd", "patch": "@@ -4,6 +4,7 @@ use std::{iter, sync::Arc};\n use arrayvec::ArrayVec;\n use either::Either;\n use hir_def::{\n+    adt::ReprKind,\n     adt::StructKind,\n     adt::VariantData,\n     builtin_type::BuiltinType,\n@@ -431,6 +432,10 @@ impl Struct {\n         Type::from_def(db, self.id.lookup(db.upcast()).container.module(db.upcast()).krate, self.id)\n     }\n \n+    pub fn is_packed(self, db: &dyn HirDatabase) -> bool {\n+        matches!(db.struct_data(self.id).repr, Some(ReprKind::Packed))\n+    }\n+\n     fn variant_data(self, db: &dyn HirDatabase) -> Arc<VariantData> {\n         db.struct_data(self.id).variant_data.clone()\n     }\n@@ -1253,6 +1258,19 @@ impl Type {\n         )\n     }\n \n+    pub fn is_packed(&self, db: &dyn HirDatabase) -> bool {\n+        let adt_id = match self.ty.value {\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::Adt(adt_id), .. }) => adt_id,\n+            _ => return false,\n+        };\n+\n+        let adt = adt_id.into();\n+        match adt {\n+            Adt::Struct(s) => s.is_packed(db),\n+            _ => false,\n+        }\n+    }\n+\n     pub fn is_raw_ptr(&self) -> bool {\n         matches!(&self.ty.value, Ty::Apply(ApplicationTy { ctor: TypeCtor::RawPtr(..), .. }))\n     }"}, {"sha": "6d59c864280cee5ee6146632037ed3adc26c29a6", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 52, "deletions": 4, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/263f9a7f231a474dd56d02adbcd7c57d079e88fd/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263f9a7f231a474dd56d02adbcd7c57d079e88fd/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=263f9a7f231a474dd56d02adbcd7c57d079e88fd", "patch": "@@ -9,11 +9,13 @@ use hir_expand::{\n };\n use ra_arena::{map::ArenaMap, Arena};\n use ra_syntax::ast::{self, NameOwner, VisibilityOwner};\n+use tt::{Delimiter, DelimiterKind, Leaf, Subtree, TokenTree};\n \n use crate::{\n+    attr::AttrInput,\n     body::{CfgExpander, LowerCtx},\n     db::DefDatabase,\n-    item_tree::{Field, Fields, ItemTree},\n+    item_tree::{AttrOwner, Field, Fields, ItemTree, ModItem},\n     src::HasChildSource,\n     src::HasSource,\n     trace::Trace,\n@@ -29,6 +31,7 @@ use ra_cfg::CfgOptions;\n pub struct StructData {\n     pub name: Name,\n     pub variant_data: Arc<VariantData>,\n+    pub repr: Option<ReprKind>,\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -58,26 +61,71 @@ pub struct FieldData {\n     pub visibility: RawVisibility,\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum ReprKind {\n+    Packed,\n+    Other,\n+}\n+\n+fn repr_from_value(item_tree: &ItemTree, of: AttrOwner) -> Option<ReprKind> {\n+    item_tree.attrs(of).iter().find_map(|a| {\n+        if a.path.segments[0].to_string() == \"repr\" {\n+            if let Some(AttrInput::TokenTree(subtree)) = &a.input {\n+                parse_repr_tt(subtree)\n+            } else {\n+                None\n+            }\n+        } else {\n+            None\n+        }\n+    })\n+}\n+\n+fn parse_repr_tt(tt: &Subtree) -> Option<ReprKind> {\n+    match tt.delimiter {\n+        Some(Delimiter { kind: DelimiterKind::Parenthesis, .. }) => {}\n+        _ => return None,\n+    }\n+\n+    let mut it = tt.token_trees.iter();\n+    match it.next() {\n+        None => None,\n+        Some(TokenTree::Leaf(Leaf::Ident(ident))) if ident.text == \"packed\" => {\n+            Some(ReprKind::Packed)\n+        }\n+        _ => Some(ReprKind::Other),\n+    }\n+}\n+\n impl StructData {\n     pub(crate) fn struct_data_query(db: &dyn DefDatabase, id: StructId) -> Arc<StructData> {\n         let loc = id.lookup(db);\n         let item_tree = db.item_tree(loc.id.file_id);\n+        let repr = repr_from_value(&item_tree, ModItem::from(loc.id.value).into());\n         let cfg_options = db.crate_graph()[loc.container.module(db).krate].cfg_options.clone();\n \n         let strukt = &item_tree[loc.id.value];\n         let variant_data = lower_fields(&item_tree, &cfg_options, &strukt.fields);\n-\n-        Arc::new(StructData { name: strukt.name.clone(), variant_data: Arc::new(variant_data) })\n+        Arc::new(StructData {\n+            name: strukt.name.clone(),\n+            variant_data: Arc::new(variant_data),\n+            repr,\n+        })\n     }\n     pub(crate) fn union_data_query(db: &dyn DefDatabase, id: UnionId) -> Arc<StructData> {\n         let loc = id.lookup(db);\n         let item_tree = db.item_tree(loc.id.file_id);\n+        let repr = repr_from_value(&item_tree, ModItem::from(loc.id.value).into());\n         let cfg_options = db.crate_graph()[loc.container.module(db).krate].cfg_options.clone();\n \n         let union = &item_tree[loc.id.value];\n         let variant_data = lower_fields(&item_tree, &cfg_options, &union.fields);\n \n-        Arc::new(StructData { name: union.name.clone(), variant_data: Arc::new(variant_data) })\n+        Arc::new(StructData {\n+            name: union.name.clone(),\n+            variant_data: Arc::new(variant_data),\n+            repr,\n+        })\n     }\n }\n "}, {"sha": "0cab684eb475dd02a8c25d5ddd0b4b2532fd48bb", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/263f9a7f231a474dd56d02adbcd7c57d079e88fd/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263f9a7f231a474dd56d02adbcd7c57d079e88fd/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=263f9a7f231a474dd56d02adbcd7c57d079e88fd", "patch": "@@ -565,6 +565,30 @@ fn highlight_element(\n                 _ => h,\n             }\n         }\n+        REF_EXPR => {\n+            let ref_expr = element.into_node().and_then(ast::RefExpr::cast)?;\n+            let expr = ref_expr.expr()?;\n+            let field_expr = match expr {\n+                ast::Expr::FieldExpr(fe) => fe,\n+                _ => return None,\n+            };\n+\n+            let expr = field_expr.expr()?;\n+            let ty = match sema.type_of_expr(&expr) {\n+                Some(ty) => ty,\n+                None => {\n+                    println!(\"No type :(\");\n+                    return None;\n+                }\n+            };\n+            if !ty.is_packed(db) {\n+                return None;\n+            }\n+\n+            // FIXME account for alignment... somehow\n+\n+            Highlight::new(HighlightTag::Operator) | HighlightModifier::Unsafe\n+        }\n         p if p.is_punct() => match p {\n             T![::] | T![->] | T![=>] | T![&] | T![..] | T![=] | T![@] => {\n                 HighlightTag::Operator.into()"}, {"sha": "f2c078d3479932cbf5bba6363e2eebceffde2b84", "filename": "crates/ra_ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/263f9a7f231a474dd56d02adbcd7c57d079e88fd/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/263f9a7f231a474dd56d02adbcd7c57d079e88fd/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=263f9a7f231a474dd56d02adbcd7c57d079e88fd", "patch": "@@ -292,6 +292,13 @@ struct TypeForStaticMut {\n \n static mut global_mut: TypeForStaticMut = TypeForStaticMut { a: 0 };\n \n+#[repr(packed)]\n+struct Packed {\n+    a: u16,\n+    b: u8,\n+    c: u32,\n+}\n+\n fn main() {\n     let x = &5 as *const usize;\n     let u = Union { b: 0 };\n@@ -306,6 +313,10 @@ fn main() {\n         let y = *(x);\n         let z = -x;\n         let a = global_mut.a;\n+        let packed = Packed { a: 0, b: 0, c: 0 };\n+        let a = &packed.a;\n+        let b = &packed.b;\n+        let c = &packed.c;\n     }\n }\n \"#"}]}