{"sha": "4756be8aeebedd6d12f36613cf06e4dfa8aa896b", "node_id": "C_kwDOAAsO6NoAKDQ3NTZiZThhZWViZWRkNmQxMmYzNjYxM2NmMDZlNGRmYThhYTg5NmI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-07T11:59:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-07T11:59:47Z"}, "message": "Auto merge of #2210 - RalfJung:tls-drop-test, r=RalfJung\n\nadd stdlib test for TLS dtor order", "tree": {"sha": "6e73a86704981d75db8121ac11d6216070d1f6db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e73a86704981d75db8121ac11d6216070d1f6db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4756be8aeebedd6d12f36613cf06e4dfa8aa896b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4756be8aeebedd6d12f36613cf06e4dfa8aa896b", "html_url": "https://github.com/rust-lang/rust/commit/4756be8aeebedd6d12f36613cf06e4dfa8aa896b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4756be8aeebedd6d12f36613cf06e4dfa8aa896b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad576d8f9e68c8ce78024153ce0bdf92b13fd976", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad576d8f9e68c8ce78024153ce0bdf92b13fd976", "html_url": "https://github.com/rust-lang/rust/commit/ad576d8f9e68c8ce78024153ce0bdf92b13fd976"}, {"sha": "61f5680da02206b4d3c354100f2e8341fde6c2a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/61f5680da02206b4d3c354100f2e8341fde6c2a0", "html_url": "https://github.com/rust-lang/rust/commit/61f5680da02206b4d3c354100f2e8341fde6c2a0"}], "stats": {"total": 109, "additions": 109, "deletions": 0}, "files": [{"sha": "552b371cc7f12fdf68a868867f1ccfecef26abd0", "filename": "tests/pass/concurrency/tls_lib_drop.rs", "status": "modified", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/4756be8aeebedd6d12f36613cf06e4dfa8aa896b/tests%2Fpass%2Fconcurrency%2Ftls_lib_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4756be8aeebedd6d12f36613cf06e4dfa8aa896b/tests%2Fpass%2Fconcurrency%2Ftls_lib_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Ftls_lib_drop.rs?ref=4756be8aeebedd6d12f36613cf06e4dfa8aa896b", "patch": "@@ -71,7 +71,116 @@ fn check_blocking() {\n     thread::yield_now();\n }\n \n+// This test tests that TLS destructors have run before the thread joins. The\n+// test has no false positives (meaning: if the test fails, there's actually\n+// an ordering problem). It may have false negatives, where the test passes but\n+// join is not guaranteed to be after the TLS destructors. However, false\n+// negatives should be exceedingly rare due to judicious use of\n+// thread::yield_now and running the test several times.\n+fn join_orders_after_tls_destructors() {\n+    use std::sync::atomic::{AtomicU8, Ordering};\n+\n+    // We emulate a synchronous MPSC rendezvous channel using only atomics and\n+    // thread::yield_now. We can't use std::mpsc as the implementation itself\n+    // may rely on thread locals.\n+    //\n+    // The basic state machine for an SPSC rendezvous channel is:\n+    //           FRESH -> THREAD1_WAITING -> MAIN_THREAD_RENDEZVOUS\n+    // where the first transition is done by the \u201creceiving\u201d thread and the 2nd\n+    // transition is done by the \u201csending\u201d thread.\n+    //\n+    // We add an additional state `THREAD2_LAUNCHED` between `FRESH` and\n+    // `THREAD1_WAITING` to block until all threads are actually running.\n+    //\n+    // A thread that joins on the \u201creceiving\u201d thread completion should never\n+    // observe the channel in the `THREAD1_WAITING` state. If this does occur,\n+    // we switch to the \u201cpoison\u201d state `THREAD2_JOINED` and panic all around.\n+    // (This is equivalent to \u201csending\u201d from an alternate producer thread.)\n+    const FRESH: u8 = 0;\n+    const THREAD2_LAUNCHED: u8 = 1;\n+    const THREAD1_WAITING: u8 = 2;\n+    const MAIN_THREAD_RENDEZVOUS: u8 = 3;\n+    const THREAD2_JOINED: u8 = 4;\n+    static SYNC_STATE: AtomicU8 = AtomicU8::new(FRESH);\n+\n+    for _ in 0..10 {\n+        SYNC_STATE.store(FRESH, Ordering::SeqCst);\n+\n+        let jh = thread::Builder::new()\n+            .name(\"thread1\".into())\n+            .spawn(move || {\n+                struct TlDrop;\n+\n+                impl Drop for TlDrop {\n+                    fn drop(&mut self) {\n+                        let mut sync_state = SYNC_STATE.swap(THREAD1_WAITING, Ordering::SeqCst);\n+                        loop {\n+                            match sync_state {\n+                                THREAD2_LAUNCHED | THREAD1_WAITING => thread::yield_now(),\n+                                MAIN_THREAD_RENDEZVOUS => break,\n+                                THREAD2_JOINED => panic!(\n+                                    \"Thread 1 still running after thread 2 joined on thread 1\"\n+                                ),\n+                                v => unreachable!(\"sync state: {}\", v),\n+                            }\n+                            sync_state = SYNC_STATE.load(Ordering::SeqCst);\n+                        }\n+                    }\n+                }\n+\n+                thread_local! {\n+                    static TL_DROP: TlDrop = TlDrop;\n+                }\n+\n+                TL_DROP.with(|_| {});\n+\n+                loop {\n+                    match SYNC_STATE.load(Ordering::SeqCst) {\n+                        FRESH => thread::yield_now(),\n+                        THREAD2_LAUNCHED => break,\n+                        v => unreachable!(\"sync state: {}\", v),\n+                    }\n+                }\n+            })\n+            .unwrap();\n+\n+        let jh2 = thread::Builder::new()\n+            .name(\"thread2\".into())\n+            .spawn(move || {\n+                assert_eq!(SYNC_STATE.swap(THREAD2_LAUNCHED, Ordering::SeqCst), FRESH);\n+                jh.join().unwrap();\n+                match SYNC_STATE.swap(THREAD2_JOINED, Ordering::SeqCst) {\n+                    MAIN_THREAD_RENDEZVOUS => return,\n+                    THREAD2_LAUNCHED | THREAD1_WAITING => {\n+                        panic!(\"Thread 2 running after thread 1 join before main thread rendezvous\")\n+                    }\n+                    v => unreachable!(\"sync state: {:?}\", v),\n+                }\n+            })\n+            .unwrap();\n+\n+        loop {\n+            match SYNC_STATE.compare_exchange(\n+                THREAD1_WAITING,\n+                MAIN_THREAD_RENDEZVOUS,\n+                Ordering::SeqCst,\n+                Ordering::SeqCst,\n+            ) {\n+                Ok(_) => break,\n+                Err(FRESH) => thread::yield_now(),\n+                Err(THREAD2_LAUNCHED) => thread::yield_now(),\n+                Err(THREAD2_JOINED) => {\n+                    panic!(\"Main thread rendezvous after thread 2 joined thread 1\")\n+                }\n+                v => unreachable!(\"sync state: {:?}\", v),\n+            }\n+        }\n+        jh2.join().unwrap();\n+    }\n+}\n+\n fn main() {\n     check_destructors();\n     check_blocking();\n+    join_orders_after_tls_destructors();\n }"}]}