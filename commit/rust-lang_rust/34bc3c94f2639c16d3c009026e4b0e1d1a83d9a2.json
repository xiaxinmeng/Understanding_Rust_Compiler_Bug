{"sha": "34bc3c94f2639c16d3c009026e4b0e1d1a83d9a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YmMzYzk0ZjI2MzljMTZkM2MwMDkwMjZlNGIwZTFkMWE4M2Q5YTI=", "commit": {"author": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2016-08-17T11:04:14Z"}, "committer": {"name": "Keith Yeung", "email": "kungfukeith11@gmail.com", "date": "2016-08-17T22:12:56Z"}, "message": "Display secondary span for E0053 for Mutability TypeErrors", "tree": {"sha": "e1a01a1e38cd40b27870f84e5ee4abf27d132388", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1a01a1e38cd40b27870f84e5ee4abf27d132388"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34bc3c94f2639c16d3c009026e4b0e1d1a83d9a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34bc3c94f2639c16d3c009026e4b0e1d1a83d9a2", "html_url": "https://github.com/rust-lang/rust/commit/34bc3c94f2639c16d3c009026e4b0e1d1a83d9a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34bc3c94f2639c16d3c009026e4b0e1d1a83d9a2/comments", "author": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KiChjang", "id": 3248587, "node_id": "MDQ6VXNlcjMyNDg1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/3248587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KiChjang", "html_url": "https://github.com/KiChjang", "followers_url": "https://api.github.com/users/KiChjang/followers", "following_url": "https://api.github.com/users/KiChjang/following{/other_user}", "gists_url": "https://api.github.com/users/KiChjang/gists{/gist_id}", "starred_url": "https://api.github.com/users/KiChjang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KiChjang/subscriptions", "organizations_url": "https://api.github.com/users/KiChjang/orgs", "repos_url": "https://api.github.com/users/KiChjang/repos", "events_url": "https://api.github.com/users/KiChjang/events{/privacy}", "received_events_url": "https://api.github.com/users/KiChjang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c4ecc9e7ce47667e05dcea001bbe91453c3ca22", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c4ecc9e7ce47667e05dcea001bbe91453c3ca22", "html_url": "https://github.com/rust-lang/rust/commit/3c4ecc9e7ce47667e05dcea001bbe91453c3ca22"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "043883df035d0378ed7b34a52b4bd558aaa81cc8", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/34bc3c94f2639c16d3c009026e4b0e1d1a83d9a2/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bc3c94f2639c16d3c009026e4b0e1d1a83d9a2/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=34bc3c94f2639c16d3c009026e4b0e1d1a83d9a2", "patch": "@@ -338,6 +338,34 @@ pub fn compare_impl_method<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             };\n \n             let (impl_err_span, trait_err_span) = match terr {\n+                TypeError::Mutability => {\n+                    if let Some(trait_m_node_id) = tcx.map.as_local_node_id(trait_m.def_id) {\n+                        let trait_m_iter = match tcx.map.expect_trait_item(trait_m_node_id).node {\n+                            TraitItem_::MethodTraitItem(ref trait_m_sig, _) =>\n+                                trait_m_sig.decl.inputs.iter(),\n+                            _ => bug!(\"{:?} is not a MethodTraitItem\", trait_m)\n+                        };\n+\n+                        impl_m_iter.zip(trait_m_iter).find(|&(ref impl_arg, ref trait_arg)| {\n+                            match (&impl_arg.ty.node, &trait_arg.ty.node) {\n+                                (&Ty_::TyRptr(_, ref impl_mt), &Ty_::TyRptr(_, ref trait_mt)) |\n+                                (&Ty_::TyPtr(ref impl_mt), &Ty_::TyPtr(ref trait_mt)) =>\n+                                    impl_mt.mutbl != trait_mt.mutbl,\n+                                _ => false\n+                            }\n+                        }).map(|(ref impl_arg, ref trait_arg)| {\n+                            match (impl_arg.to_self(), trait_arg.to_self()) {\n+                                (Some(impl_self), Some(trait_self)) =>\n+                                    (impl_self.span, Some(trait_self.span)),\n+                                (None, None) => (impl_arg.ty.span, Some(trait_arg.ty.span)),\n+                                _ => bug!(\"impl and trait fns have different first args, \\\n+                                           impl: {:?}, trait: {:?}\", impl_arg, trait_arg)\n+                            }\n+                        }).unwrap_or((origin.span(), tcx.map.span_if_local(trait_m.def_id)))\n+                    } else {\n+                        (origin.span(), tcx.map.span_if_local(trait_m.def_id))\n+                    }\n+                }\n                 TypeError::Sorts(ExpectedFound { expected, found }) => {\n                     if let Some(trait_m_node_id) = tcx.map.as_local_node_id(trait_m.def_id) {\n                         let trait_m_iter = match tcx.map.expect_trait_item(trait_m_node_id).node {"}, {"sha": "7022010714aa77ed380d5ad5110ae56740150a94", "filename": "src/test/compile-fail/E0053.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/34bc3c94f2639c16d3c009026e4b0e1d1a83d9a2/src%2Ftest%2Fcompile-fail%2FE0053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34bc3c94f2639c16d3c009026e4b0e1d1a83d9a2/src%2Ftest%2Fcompile-fail%2FE0053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0053.rs?ref=34bc3c94f2639c16d3c009026e4b0e1d1a83d9a2", "patch": "@@ -9,15 +9,21 @@\n // except according to those terms.\n \n trait Foo {\n-    fn foo(x: u16);\n-    fn bar(&self);\n+    fn foo(x: u16); //~ NOTE original trait requirement\n+    fn bar(&self); //~ NOTE original trait requirement\n }\n \n struct Bar;\n \n impl Foo for Bar {\n-    fn foo(x: i16) { } //~ ERROR E0053\n-    fn bar(&mut self) { } //~ ERROR E0053\n+    fn foo(x: i16) { }\n+    //~^ ERROR method `foo` has an incompatible type for trait\n+    //~| NOTE expected u16\n+    fn bar(&mut self) { }\n+    //~^ ERROR method `bar` has an incompatible type for trait\n+    //~| NOTE values differ in mutability\n+    //~| NOTE expected type `fn(&Bar)`\n+    //~| NOTE found type `fn(&mut Bar)`\n }\n \n fn main() {"}]}