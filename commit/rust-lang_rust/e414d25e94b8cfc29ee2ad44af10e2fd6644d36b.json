{"sha": "e414d25e94b8cfc29ee2ad44af10e2fd6644d36b", "node_id": "C_kwDOAAsO6NoAKGU0MTRkMjVlOTRiOGNmYzI5ZWUyYWQ0NGFmMTBlMmZkNjY0NGQzNmI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-15T00:00:55Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-15T00:39:39Z"}, "message": "Make `partition` more consistent.\n\nAlways put the `create_size_estimate` calls and `debug_dump` calls\nwithin a timed scopes. This makes the four main steps look more similar\nto each other.", "tree": {"sha": "95d1be2e3f4e44f12a523d13939b90ec972ad493", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95d1be2e3f4e44f12a523d13939b90ec972ad493"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e414d25e94b8cfc29ee2ad44af10e2fd6644d36b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e414d25e94b8cfc29ee2ad44af10e2fd6644d36b", "html_url": "https://github.com/rust-lang/rust/commit/e414d25e94b8cfc29ee2ad44af10e2fd6644d36b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e414d25e94b8cfc29ee2ad44af10e2fd6644d36b/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57a7c8f577abd12ef4bb404448c42d794a76c690", "url": "https://api.github.com/repos/rust-lang/rust/commits/57a7c8f577abd12ef4bb404448c42d794a76c690", "html_url": "https://github.com/rust-lang/rust/commit/57a7c8f577abd12ef4bb404448c42d794a76c690"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "a74ba8e4a4be9b10021c0986b43b44df028f84fd", "filename": "compiler/rustc_monomorphize/src/partitioning.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e414d25e94b8cfc29ee2ad44af10e2fd6644d36b/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e414d25e94b8cfc29ee2ad44af10e2fd6644d36b/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs?ref=e414d25e94b8cfc29ee2ad44af10e2fd6644d36b", "patch": "@@ -155,14 +155,16 @@ where\n     // functions and statics defined in the local crate.\n     let PlacedRootMonoItems { mut codegen_units, internalization_candidates, unique_inlined_stats } = {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_place_roots\");\n-        place_root_mono_items(cx, mono_items)\n-    };\n+        let mut placed = place_root_mono_items(cx, mono_items);\n \n-    for cgu in &mut codegen_units {\n-        cgu.create_size_estimate(tcx);\n-    }\n+        for cgu in &mut placed.codegen_units {\n+            cgu.create_size_estimate(tcx);\n+        }\n \n-    debug_dump(tcx, \"ROOTS\", &codegen_units, unique_inlined_stats);\n+        debug_dump(tcx, \"ROOTS\", &placed.codegen_units, placed.unique_inlined_stats);\n+\n+        placed\n+    };\n \n     // Merge until we have at most `max_cgu_count` codegen units.\n     // `merge_codegen_units` is responsible for updating the CGU size\n@@ -179,22 +181,25 @@ where\n     // local functions the definition of which is marked with `#[inline]`.\n     {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_place_inline_items\");\n-        place_inlined_mono_items(cx, &mut codegen_units)\n-    };\n+        place_inlined_mono_items(cx, &mut codegen_units);\n \n-    for cgu in &mut codegen_units {\n-        cgu.create_size_estimate(tcx);\n-    }\n+        for cgu in &mut codegen_units {\n+            cgu.create_size_estimate(tcx);\n+        }\n \n-    debug_dump(tcx, \"INLINE\", &codegen_units, unique_inlined_stats);\n+        debug_dump(tcx, \"INLINE\", &codegen_units, unique_inlined_stats);\n+    }\n \n     // Next we try to make as many symbols \"internal\" as possible, so LLVM has\n     // more freedom to optimize.\n     if !tcx.sess.link_dead_code() {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_internalize_symbols\");\n         internalize_symbols(cx, &mut codegen_units, internalization_candidates);\n+\n+        debug_dump(tcx, \"INTERNALIZE\", &codegen_units, unique_inlined_stats);\n     }\n \n+    // Mark one CGU for dead code, if necessary.\n     let instrument_dead_code =\n         tcx.sess.instrument_coverage() && !tcx.sess.instrument_coverage_except_unused_functions();\n     if instrument_dead_code {\n@@ -204,8 +209,6 @@ where\n     // Ensure CGUs are sorted by name, so that we get deterministic results.\n     assert!(codegen_units.is_sorted_by(|a, b| Some(a.name().as_str().cmp(b.name().as_str()))));\n \n-    debug_dump(tcx, \"FINAL\", &codegen_units, unique_inlined_stats);\n-\n     codegen_units\n }\n "}]}