{"sha": "917b0b6c70f078cb08bbb0080c9379e4487353c3", "node_id": "C_kwDOAAsO6NoAKDkxN2IwYjZjNzBmMDc4Y2IwOGJiYjAwODBjOTM3OWU0NDg3MzUzYzM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-26T11:52:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-26T11:52:25Z"}, "message": "Auto merge of #111562 - clubby789:speedup-bootstrap-py, r=jyn514\n\nImprove startup time of bootstrap\n\n~~If the user has a `build/host` symlink set up, we can determine the target triple by reading it rather than invoking rustc. This significantly reduces startup time of bootstrap once any kind of build has been done~~\nNew approach explained below\n```\n\u279c  hyperfine -p 'git checkout -q master' -N './x.py -h' -r 50\nBenchmark 1: ./x.py -h\n  Time (mean \u00b1 \u03c3):     140.7 ms \u00b1   2.6 ms    [User: 99.9 ms, System: 39.3 ms]\n  Range (min \u2026 max):   136.8 ms \u2026 149.6 ms    50 runs\n\n\u279c  rust git:(master) hyperfine -p 'git checkout -q speedup-bootstrap-py' -N './x.py -h' -r 50\nBenchmark 1: ./x.py -h\n  Time (mean \u00b1 \u03c3):      95.2 ms \u00b1   1.5 ms    [User: 67.7 ms, System: 26.7 ms]\n  Range (min \u2026 max):    92.9 ms \u2026  99.6 ms    50 runs\n```\n\nAlso a small microoptimisation in using string splitting rather than regex when reading toml, which saves a few more milliseconds (2-5 testing locally), but less important.\n\nProfiling shows the remaining runtime is around half setting up the Python runtime, and the vast majority of the remaining time is spent in subprocess building and running bootstrap itself, so probably can't be improved much further.", "tree": {"sha": "19a04ea9186a9aaed26b868eadc0e50250eb9d41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19a04ea9186a9aaed26b868eadc0e50250eb9d41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/917b0b6c70f078cb08bbb0080c9379e4487353c3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/917b0b6c70f078cb08bbb0080c9379e4487353c3", "html_url": "https://github.com/rust-lang/rust/commit/917b0b6c70f078cb08bbb0080c9379e4487353c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/917b0b6c70f078cb08bbb0080c9379e4487353c3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1221e43bdf413f7c405e9b17ef19d76c88222098", "url": "https://api.github.com/repos/rust-lang/rust/commits/1221e43bdf413f7c405e9b17ef19d76c88222098", "html_url": "https://github.com/rust-lang/rust/commit/1221e43bdf413f7c405e9b17ef19d76c88222098"}, {"sha": "9a86ceb049380a2a684b7bc8fd6c76235f51d9d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a86ceb049380a2a684b7bc8fd6c76235f51d9d1", "html_url": "https://github.com/rust-lang/rust/commit/9a86ceb049380a2a684b7bc8fd6c76235f51d9d1"}], "stats": {"total": 93, "additions": 44, "deletions": 49}, "files": [{"sha": "58d1926ad96223f860abe30b4348b0e0b9042352", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 44, "deletions": 49, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/917b0b6c70f078cb08bbb0080c9379e4487353c3/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/917b0b6c70f078cb08bbb0080c9379e4487353c3/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=917b0b6c70f078cb08bbb0080c9379e4487353c3", "patch": "@@ -226,16 +226,13 @@ def format_build_time(duration):\n \n def default_build_triple(verbose):\n     \"\"\"Build triple as in LLVM\"\"\"\n-    # If the user already has a host build triple with an existing `rustc`\n-    # install, use their preference. This fixes most issues with Windows builds\n-    # being detected as GNU instead of MSVC.\n+    # If we're on Windows and have an existing `rustc` toolchain, use `rustc --version --verbose`\n+    # to find our host target triple. This fixes an issue with Windows builds being detected\n+    # as GNU instead of MSVC.\n+    # Otherwise, detect it via `uname`\n     default_encoding = sys.getdefaultencoding()\n \n-    if sys.platform == 'darwin':\n-        if verbose:\n-            print(\"not using rustc detection as it is unreliable on macOS\", file=sys.stderr)\n-            print(\"falling back to auto-detect\", file=sys.stderr)\n-    else:\n+    if platform_is_win32():\n         try:\n             version = subprocess.check_output([\"rustc\", \"--version\", \"--verbose\"],\n                     stderr=subprocess.DEVNULL)\n@@ -253,19 +250,17 @@ def default_build_triple(verbose):\n                 print(\"falling back to auto-detect\", file=sys.stderr)\n \n     required = not platform_is_win32()\n-    ostype = require([\"uname\", \"-s\"], exit=required)\n-    cputype = require(['uname', '-m'], exit=required)\n+    uname = require([\"uname\", \"-smp\"], exit=required)\n \n     # If we do not have `uname`, assume Windows.\n-    if ostype is None or cputype is None:\n+    if uname is None:\n         return 'x86_64-pc-windows-msvc'\n \n-    ostype = ostype.decode(default_encoding)\n-    cputype = cputype.decode(default_encoding)\n+    kernel, cputype, processor = uname.decode(default_encoding).split()\n \n     # The goal here is to come up with the same triple as LLVM would,\n     # at least for the subset of platforms we're willing to target.\n-    ostype_mapper = {\n+    kerneltype_mapper = {\n         'Darwin': 'apple-darwin',\n         'DragonFly': 'unknown-dragonfly',\n         'FreeBSD': 'unknown-freebsd',\n@@ -275,17 +270,18 @@ def default_build_triple(verbose):\n     }\n \n     # Consider the direct transformation first and then the special cases\n-    if ostype in ostype_mapper:\n-        ostype = ostype_mapper[ostype]\n-    elif ostype == 'Linux':\n-        os_from_sp = subprocess.check_output(\n-            ['uname', '-o']).strip().decode(default_encoding)\n-        if os_from_sp == 'Android':\n-            ostype = 'linux-android'\n+    if kernel in kerneltype_mapper:\n+        kernel = kerneltype_mapper[kernel]\n+    elif kernel == 'Linux':\n+        # Apple doesn't support `-o` so this can't be used in the combined\n+        # uname invocation above\n+        ostype = require([\"uname\", \"-o\"], exit=required).decode(default_encoding)\n+        if ostype == 'Android':\n+            kernel = 'linux-android'\n         else:\n-            ostype = 'unknown-linux-gnu'\n-    elif ostype == 'SunOS':\n-        ostype = 'pc-solaris'\n+            kernel = 'unknown-linux-gnu'\n+    elif kernel == 'SunOS':\n+        kernel = 'pc-solaris'\n         # On Solaris, uname -m will return a machine classification instead\n         # of a cpu type, so uname -p is recommended instead.  However, the\n         # output from that option is too generic for our purposes (it will\n@@ -294,34 +290,34 @@ def default_build_triple(verbose):\n         cputype = require(['isainfo', '-k']).decode(default_encoding)\n         # sparc cpus have sun as a target vendor\n         if 'sparc' in cputype:\n-            ostype = 'sun-solaris'\n-    elif ostype.startswith('MINGW'):\n+            kernel = 'sun-solaris'\n+    elif kernel.startswith('MINGW'):\n         # msys' `uname` does not print gcc configuration, but prints msys\n         # configuration. so we cannot believe `uname -m`:\n         # msys1 is always i686 and msys2 is always x86_64.\n         # instead, msys defines $MSYSTEM which is MINGW32 on i686 and\n         # MINGW64 on x86_64.\n-        ostype = 'pc-windows-gnu'\n+        kernel = 'pc-windows-gnu'\n         cputype = 'i686'\n         if os.environ.get('MSYSTEM') == 'MINGW64':\n             cputype = 'x86_64'\n-    elif ostype.startswith('MSYS'):\n-        ostype = 'pc-windows-gnu'\n-    elif ostype.startswith('CYGWIN_NT'):\n+    elif kernel.startswith('MSYS'):\n+        kernel = 'pc-windows-gnu'\n+    elif kernel.startswith('CYGWIN_NT'):\n         cputype = 'i686'\n-        if ostype.endswith('WOW64'):\n+        if kernel.endswith('WOW64'):\n             cputype = 'x86_64'\n-        ostype = 'pc-windows-gnu'\n-    elif sys.platform == 'win32':\n+        kernel = 'pc-windows-gnu'\n+    elif platform_is_win32():\n         # Some Windows platforms might have a `uname` command that returns a\n         # non-standard string (e.g. gnuwin32 tools returns `windows32`). In\n         # these cases, fall back to using sys.platform.\n         return 'x86_64-pc-windows-msvc'\n     else:\n-        err = \"unknown OS type: {}\".format(ostype)\n+        err = \"unknown OS type: {}\".format(kernel)\n         sys.exit(err)\n \n-    if cputype in ['powerpc', 'riscv'] and ostype == 'unknown-freebsd':\n+    if cputype in ['powerpc', 'riscv'] and kernel == 'unknown-freebsd':\n         cputype = subprocess.check_output(\n               ['uname', '-p']).strip().decode(default_encoding)\n     cputype_mapper = {\n@@ -354,24 +350,23 @@ def default_build_triple(verbose):\n         cputype = cputype_mapper[cputype]\n     elif cputype in {'xscale', 'arm'}:\n         cputype = 'arm'\n-        if ostype == 'linux-android':\n-            ostype = 'linux-androideabi'\n-        elif ostype == 'unknown-freebsd':\n-            cputype = subprocess.check_output(\n-                ['uname', '-p']).strip().decode(default_encoding)\n-            ostype = 'unknown-freebsd'\n+        if kernel == 'linux-android':\n+            kernel = 'linux-androideabi'\n+        elif kernel == 'unknown-freebsd':\n+            cputype = processor\n+            kernel = 'unknown-freebsd'\n     elif cputype == 'armv6l':\n         cputype = 'arm'\n-        if ostype == 'linux-android':\n-            ostype = 'linux-androideabi'\n+        if kernel == 'linux-android':\n+            kernel = 'linux-androideabi'\n         else:\n-            ostype += 'eabihf'\n+            kernel += 'eabihf'\n     elif cputype in {'armv7l', 'armv8l'}:\n         cputype = 'armv7'\n-        if ostype == 'linux-android':\n-            ostype = 'linux-androideabi'\n+        if kernel == 'linux-android':\n+            kernel = 'linux-androideabi'\n         else:\n-            ostype += 'eabihf'\n+            kernel += 'eabihf'\n     elif cputype == 'mips':\n         if sys.byteorder == 'big':\n             cputype = 'mips'\n@@ -387,14 +382,14 @@ def default_build_triple(verbose):\n         else:\n             raise ValueError('unknown byteorder: {}'.format(sys.byteorder))\n         # only the n64 ABI is supported, indicate it\n-        ostype += 'abi64'\n+        kernel += 'abi64'\n     elif cputype == 'sparc' or cputype == 'sparcv9' or cputype == 'sparc64':\n         pass\n     else:\n         err = \"unknown cpu type: {}\".format(cputype)\n         sys.exit(err)\n \n-    return \"{}-{}\".format(cputype, ostype)\n+    return \"{}-{}\".format(cputype, kernel)\n \n \n @contextlib.contextmanager"}]}