{"sha": "0c835b0cca83fe21090562603e4bda77c183ace3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjODM1YjBjY2E4M2ZlMjEwOTA1NjI2MDNlNGJkYTc3YzE4M2FjZTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-09T23:22:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-09T23:22:23Z"}, "message": "Auto merge of #70909 - marmeladema:issue70853/librustc_hir-local-def-id, r=eddyb\n\nlibrustc_hir: return LocalDefId instead of DefId in local_def_id\n\nIts a first try to remove a few calls to `expect_local` and use `LocalDefId` instead of `DefId` where possible for #70853\n\nThis adds some calls to `.to_def_id()` to get a `DefId` back when needed. I don't know if I should push `LocalDefId` even further and change, for example, `Res::Def` to accept a `LocalDefId` instead of a `DefId` as second argument.\n\ncc @ecstatic-morse", "tree": {"sha": "81756b7fecd9051411eede60a710a041ab54ceb4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81756b7fecd9051411eede60a710a041ab54ceb4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c835b0cca83fe21090562603e4bda77c183ace3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c835b0cca83fe21090562603e4bda77c183ace3", "html_url": "https://github.com/rust-lang/rust/commit/0c835b0cca83fe21090562603e4bda77c183ace3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c835b0cca83fe21090562603e4bda77c183ace3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94d346360da50f159e0dc777dc9bc3c5b6b51a00", "url": "https://api.github.com/repos/rust-lang/rust/commits/94d346360da50f159e0dc777dc9bc3c5b6b51a00", "html_url": "https://github.com/rust-lang/rust/commit/94d346360da50f159e0dc777dc9bc3c5b6b51a00"}, {"sha": "6ae3888b19e40e9c4761c1a443d77eba63e94840", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ae3888b19e40e9c4761c1a443d77eba63e94840", "html_url": "https://github.com/rust-lang/rust/commit/6ae3888b19e40e9c4761c1a443d77eba63e94840"}], "stats": {"total": 124, "additions": 67, "deletions": 57}, "files": [{"sha": "9779954d75944a9ecfb2fd2c53ea90bfb50f38d0", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c835b0cca83fe21090562603e4bda77c183ace3/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c835b0cca83fe21090562603e4bda77c183ace3/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=0c835b0cca83fe21090562603e4bda77c183ace3", "patch": "@@ -259,7 +259,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 hir::ItemKind::Const(ty, body_id)\n             }\n             ItemKind::Fn(_, FnSig { ref decl, header }, ref generics, ref body) => {\n-                let fn_def_id = self.resolver.definitions().local_def_id(id).expect_local();\n+                let fn_def_id = self.resolver.definitions().local_def_id(id);\n                 self.with_new_scopes(|this| {\n                     this.current_item = Some(ident.span);\n \n@@ -346,7 +346,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 self_ty: ref ty,\n                 items: ref impl_items,\n             } => {\n-                let def_id = self.resolver.definitions().local_def_id(id).expect_local();\n+                let def_id = self.resolver.definitions().local_def_id(id);\n \n                 // Lower the \"impl header\" first. This ordering is important\n                 // for in-band lifetimes! Consider `'a` here:\n@@ -645,7 +645,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_foreign_item(&mut self, i: &ForeignItem) -> hir::ForeignItem<'hir> {\n-        let def_id = self.resolver.definitions().local_def_id(i.id).expect_local();\n+        let def_id = self.resolver.definitions().local_def_id(i.id);\n         hir::ForeignItem {\n             hir_id: self.lower_node_id(i.id),\n             ident: i.ident,\n@@ -746,7 +746,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_trait_item(&mut self, i: &AssocItem) -> hir::TraitItem<'hir> {\n-        let trait_item_def_id = self.resolver.definitions().local_def_id(i.id).expect_local();\n+        let trait_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n         let (generics, kind) = match i.kind {\n             AssocItemKind::Const(_, ref ty, ref default) => {\n@@ -811,7 +811,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n     }\n \n     fn lower_impl_item(&mut self, i: &AssocItem) -> hir::ImplItem<'hir> {\n-        let impl_item_def_id = self.resolver.definitions().local_def_id(i.id).expect_local();\n+        let impl_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n         let (generics, kind) = match &i.kind {\n             AssocItemKind::Const(_, ty, expr) => {"}, {"sha": "9bb1f57a52457b27c9ba403a5c7bd29bf33ddf10", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0c835b0cca83fe21090562603e4bda77c183ace3/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c835b0cca83fe21090562603e4bda77c183ace3/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=0c835b0cca83fe21090562603e4bda77c183ace3", "patch": "@@ -464,8 +464,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     | ItemKind::Enum(_, ref generics)\n                     | ItemKind::TyAlias(_, ref generics, ..)\n                     | ItemKind::Trait(_, _, ref generics, ..) => {\n-                        let def_id =\n-                            self.lctx.resolver.definitions().local_def_id(item.id).expect_local();\n+                        let def_id = self.lctx.resolver.definitions().local_def_id(item.id);\n                         let count = generics\n                             .params\n                             .iter()\n@@ -600,7 +599,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             .item_local_id_counters\n             .insert(owner, HIR_ID_COUNTER_LOCKED)\n             .unwrap_or_else(|| panic!(\"no `item_local_id_counters` entry for {:?}\", owner));\n-        let def_id = self.resolver.definitions().local_def_id(owner).expect_local();\n+        let def_id = self.resolver.definitions().local_def_id(owner);\n         self.current_hir_id_owner.push((def_id, counter));\n         let ret = f(self);\n         let (new_def_id, new_counter) = self.current_hir_id_owner.pop().unwrap();\n@@ -1280,8 +1279,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     }\n                     ImplTraitContext::Universal(in_band_ty_params) => {\n                         // Add a definition for the in-band `Param`.\n-                        let def_id =\n-                            self.resolver.definitions().local_def_id(def_node_id).expect_local();\n+                        let def_id = self.resolver.definitions().local_def_id(def_node_id);\n \n                         let hir_bounds = self.lower_param_bounds(\n                             bounds,\n@@ -1369,8 +1367,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // frequently opened issues show.\n         let opaque_ty_span = self.mark_span_with_reason(DesugaringKind::OpaqueTy, span, None);\n \n-        let opaque_ty_def_id =\n-            self.resolver.definitions().local_def_id(opaque_ty_node_id).expect_local();\n+        let opaque_ty_def_id = self.resolver.definitions().local_def_id(opaque_ty_node_id);\n \n         self.allocate_hir_id_counter(opaque_ty_node_id);\n \n@@ -1799,8 +1796,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         let opaque_ty_span = self.mark_span_with_reason(DesugaringKind::Async, span, None);\n \n-        let opaque_ty_def_id =\n-            self.resolver.definitions().local_def_id(opaque_ty_node_id).expect_local();\n+        let opaque_ty_def_id = self.resolver.definitions().local_def_id(opaque_ty_node_id);\n \n         self.allocate_hir_id_counter(opaque_ty_node_id);\n "}, {"sha": "58f34787613be41f1186180ac2dabb86502ae55b", "filename": "src/librustc_hir/definitions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c835b0cca83fe21090562603e4bda77c183ace3/src%2Flibrustc_hir%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c835b0cca83fe21090562603e4bda77c183ace3/src%2Flibrustc_hir%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdefinitions.rs?ref=0c835b0cca83fe21090562603e4bda77c183ace3", "patch": "@@ -326,10 +326,9 @@ impl Definitions {\n         self.node_id_to_def_id.get(&node).copied()\n     }\n \n-    // FIXME(eddyb) this function can and should return `LocalDefId`.\n     #[inline]\n-    pub fn local_def_id(&self, node: ast::NodeId) -> DefId {\n-        self.opt_local_def_id(node).unwrap().to_def_id()\n+    pub fn local_def_id(&self, node: ast::NodeId) -> LocalDefId {\n+        self.opt_local_def_id(node).unwrap()\n     }\n \n     #[inline]"}, {"sha": "6e504a107a3f36a2477f136d3b28083636dea9b2", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c835b0cca83fe21090562603e4bda77c183ace3/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c835b0cca83fe21090562603e4bda77c183ace3/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=0c835b0cca83fe21090562603e4bda77c183ace3", "patch": "@@ -1162,17 +1162,17 @@ impl<'tcx> TyCtxt<'tcx> {\n             maybe_unused_trait_imports: resolutions\n                 .maybe_unused_trait_imports\n                 .into_iter()\n-                .map(|id| definitions.local_def_id(id))\n+                .map(|id| definitions.local_def_id(id).to_def_id())\n                 .collect(),\n             maybe_unused_extern_crates: resolutions\n                 .maybe_unused_extern_crates\n                 .into_iter()\n-                .map(|(id, sp)| (definitions.local_def_id(id), sp))\n+                .map(|(id, sp)| (definitions.local_def_id(id).to_def_id(), sp))\n                 .collect(),\n             glob_map: resolutions\n                 .glob_map\n                 .into_iter()\n-                .map(|(id, names)| (definitions.local_def_id(id), names))\n+                .map(|(id, names)| (definitions.local_def_id(id).to_def_id(), names))\n                 .collect(),\n             extern_prelude: resolutions.extern_prelude,\n             untracked_crate: krate,"}, {"sha": "0ad33f1a120c7a378fcf3d712466f861b2f1fb78", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 42, "deletions": 27, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/0c835b0cca83fe21090562603e4bda77c183ace3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c835b0cca83fe21090562603e4bda77c183ace3/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=0c835b0cca83fe21090562603e4bda77c183ace3", "patch": "@@ -26,7 +26,7 @@ use rustc_errors::{struct_span_err, Applicability};\n use rustc_expand::base::SyntaxExtension;\n use rustc_expand::expand::AstFragment;\n use rustc_hir::def::{self, *};\n-use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX};\n use rustc_metadata::creader::LoadedMacro;\n use rustc_middle::bug;\n use rustc_middle::hir::exports::Export;\n@@ -96,7 +96,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     crate fn get_module(&mut self, def_id: DefId) -> Module<'a> {\n-        if def_id.krate == LOCAL_CRATE {\n+        if let Some(def_id) = def_id.as_local() {\n             return self.module_map[&def_id];\n         }\n \n@@ -675,12 +675,18 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n             ItemKind::Mod(..) => {\n                 let def_id = self.r.definitions.local_def_id(item.id);\n-                let module_kind = ModuleKind::Def(DefKind::Mod, def_id, ident.name);\n+                let module_kind = ModuleKind::Def(DefKind::Mod, def_id.to_def_id(), ident.name);\n                 let module = self.r.arenas.alloc_module(ModuleData {\n                     no_implicit_prelude: parent.no_implicit_prelude || {\n                         attr::contains_name(&item.attrs, sym::no_implicit_prelude)\n                     },\n-                    ..ModuleData::new(Some(parent), module_kind, def_id, expansion, item.span)\n+                    ..ModuleData::new(\n+                        Some(parent),\n+                        module_kind,\n+                        def_id.to_def_id(),\n+                        expansion,\n+                        item.span,\n+                    )\n                 });\n                 self.r.define(parent, ident, TypeNS, (module, vis, sp, expansion));\n                 self.r.module_map.insert(def_id, module);\n@@ -691,15 +697,18 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n \n             // These items live in the value namespace.\n             ItemKind::Static(..) => {\n-                let res = Res::Def(DefKind::Static, self.r.definitions.local_def_id(item.id));\n+                let res =\n+                    Res::Def(DefKind::Static, self.r.definitions.local_def_id(item.id).to_def_id());\n                 self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));\n             }\n             ItemKind::Const(..) => {\n-                let res = Res::Def(DefKind::Const, self.r.definitions.local_def_id(item.id));\n+                let res =\n+                    Res::Def(DefKind::Const, self.r.definitions.local_def_id(item.id).to_def_id());\n                 self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));\n             }\n             ItemKind::Fn(..) => {\n-                let res = Res::Def(DefKind::Fn, self.r.definitions.local_def_id(item.id));\n+                let res =\n+                    Res::Def(DefKind::Fn, self.r.definitions.local_def_id(item.id).to_def_id());\n                 self.r.define(parent, ident, ValueNS, (res, vis, sp, expansion));\n \n                 // Functions introducing procedural macros reserve a slot\n@@ -713,12 +722,12 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     None => DefKind::TyAlias,\n                     Some(_) => DefKind::OpaqueTy,\n                 };\n-                let res = Res::Def(def_kind, self.r.definitions.local_def_id(item.id));\n+                let res = Res::Def(def_kind, self.r.definitions.local_def_id(item.id).to_def_id());\n                 self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));\n             }\n \n             ItemKind::Enum(_, _) => {\n-                let def_id = self.r.definitions.local_def_id(item.id);\n+                let def_id = self.r.definitions.local_def_id(item.id).to_def_id();\n                 self.r.variant_vis.insert(def_id, vis);\n                 let module_kind = ModuleKind::Def(DefKind::Enum, def_id, ident.name);\n                 let module = self.r.new_module(\n@@ -733,14 +742,17 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             ItemKind::TraitAlias(..) => {\n-                let res = Res::Def(DefKind::TraitAlias, self.r.definitions.local_def_id(item.id));\n+                let res = Res::Def(\n+                    DefKind::TraitAlias,\n+                    self.r.definitions.local_def_id(item.id).to_def_id(),\n+                );\n                 self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));\n             }\n \n             // These items live in both the type and value namespaces.\n             ItemKind::Struct(ref vdata, _) => {\n                 // Define a name in the type namespace.\n-                let def_id = self.r.definitions.local_def_id(item.id);\n+                let def_id = self.r.definitions.local_def_id(item.id).to_def_id();\n                 let res = Res::Def(DefKind::Struct, def_id);\n                 self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));\n \n@@ -773,15 +785,15 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                     }\n                     let ctor_res = Res::Def(\n                         DefKind::Ctor(CtorOf::Struct, CtorKind::from_ast(vdata)),\n-                        self.r.definitions.local_def_id(ctor_node_id),\n+                        self.r.definitions.local_def_id(ctor_node_id).to_def_id(),\n                     );\n                     self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, sp, expansion));\n                     self.r.struct_constructors.insert(def_id, (ctor_res, ctor_vis));\n                 }\n             }\n \n             ItemKind::Union(ref vdata, _) => {\n-                let def_id = self.r.definitions.local_def_id(item.id);\n+                let def_id = self.r.definitions.local_def_id(item.id).to_def_id();\n                 let res = Res::Def(DefKind::Union, def_id);\n                 self.r.define(parent, ident, TypeNS, (res, vis, sp, expansion));\n \n@@ -790,7 +802,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             ItemKind::Trait(..) => {\n-                let def_id = self.r.definitions.local_def_id(item.id);\n+                let def_id = self.r.definitions.local_def_id(item.id).to_def_id();\n \n                 // Add all the items within to a new module.\n                 let module_kind = ModuleKind::Def(DefKind::Trait, def_id, ident.name);\n@@ -815,15 +827,18 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     /// Constructs the reduced graph for one foreign item.\n     fn build_reduced_graph_for_foreign_item(&mut self, item: &ForeignItem) {\n         let (res, ns) = match item.kind {\n-            ForeignItemKind::Fn(..) => {\n-                (Res::Def(DefKind::Fn, self.r.definitions.local_def_id(item.id)), ValueNS)\n-            }\n-            ForeignItemKind::Static(..) => {\n-                (Res::Def(DefKind::Static, self.r.definitions.local_def_id(item.id)), ValueNS)\n-            }\n-            ForeignItemKind::TyAlias(..) => {\n-                (Res::Def(DefKind::ForeignTy, self.r.definitions.local_def_id(item.id)), TypeNS)\n-            }\n+            ForeignItemKind::Fn(..) => (\n+                Res::Def(DefKind::Fn, self.r.definitions.local_def_id(item.id).to_def_id()),\n+                ValueNS,\n+            ),\n+            ForeignItemKind::Static(..) => (\n+                Res::Def(DefKind::Static, self.r.definitions.local_def_id(item.id).to_def_id()),\n+                ValueNS,\n+            ),\n+            ForeignItemKind::TyAlias(..) => (\n+                Res::Def(DefKind::ForeignTy, self.r.definitions.local_def_id(item.id).to_def_id()),\n+                TypeNS,\n+            ),\n             ForeignItemKind::MacCall(_) => unreachable!(),\n         };\n         let parent = self.parent_scope.module;\n@@ -1121,7 +1136,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             _ => unreachable!(),\n         };\n \n-        let def_id = self.r.definitions.local_def_id(item.id);\n+        let def_id = self.r.definitions.local_def_id(item.id).to_def_id();\n         let res = Res::Def(DefKind::Macro(ext.macro_kind()), def_id);\n         self.r.macro_map.insert(def_id, ext);\n         self.r.local_macro_def_scopes.insert(item.id, parent_scope.module);\n@@ -1251,7 +1266,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         }\n \n         // Add the item to the trait info.\n-        let item_def_id = self.r.definitions.local_def_id(item.id);\n+        let item_def_id = self.r.definitions.local_def_id(item.id).to_def_id();\n         let (res, ns) = match item.kind {\n             AssocItemKind::Const(..) => (Res::Def(DefKind::AssocConst, item_def_id), ValueNS),\n             AssocItemKind::Fn(_, ref sig, _, _) => {\n@@ -1353,7 +1368,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         let ident = variant.ident;\n \n         // Define a name in the type namespace.\n-        let def_id = self.r.definitions.local_def_id(variant.id);\n+        let def_id = self.r.definitions.local_def_id(variant.id).to_def_id();\n         let res = Res::Def(DefKind::Variant, def_id);\n         self.r.define(parent, ident, TypeNS, (res, vis, variant.span, expn_id));\n \n@@ -1371,7 +1386,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n         // It's ok to use the variant's id as a ctor id since an\n         // error will be reported on any use of such resolution anyway.\n         let ctor_node_id = variant.data.ctor_id().unwrap_or(variant.id);\n-        let ctor_def_id = self.r.definitions.local_def_id(ctor_node_id);\n+        let ctor_def_id = self.r.definitions.local_def_id(ctor_node_id).to_def_id();\n         let ctor_kind = CtorKind::from_ast(&variant.data);\n         let ctor_res = Res::Def(DefKind::Ctor(CtorOf::Variant, ctor_kind), ctor_def_id);\n         self.r.define(parent, ident, ValueNS, (ctor_res, ctor_vis, variant.span, expn_id));"}, {"sha": "c5f4cc3d39b74b2b96b6ef334ea772681f7095f9", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0c835b0cca83fe21090562603e4bda77c183ace3/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c835b0cca83fe21090562603e4bda77c183ace3/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=0c835b0cca83fe21090562603e4bda77c183ace3", "patch": "@@ -745,7 +745,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         debug!(\"resolve_adt\");\n         self.with_current_self_item(item, |this| {\n             this.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n-                let item_def_id = this.r.definitions.local_def_id(item.id);\n+                let item_def_id = this.r.definitions.local_def_id(item.id).to_def_id();\n                 this.with_self_rib(Res::SelfTy(None, Some(item_def_id)), |this| {\n                     visit::walk_item(this, item);\n                 });\n@@ -825,7 +825,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             ItemKind::Trait(.., ref generics, ref bounds, ref trait_items) => {\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n-                    let local_def_id = this.r.definitions.local_def_id(item.id);\n+                    let local_def_id = this.r.definitions.local_def_id(item.id).to_def_id();\n                     this.with_self_rib(Res::SelfTy(Some(local_def_id), None), |this| {\n                         this.visit_generics(generics);\n                         walk_list!(this, visit_param_bound, bounds);\n@@ -866,7 +866,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             ItemKind::TraitAlias(ref generics, ref bounds) => {\n                 // Create a new rib for the trait-wide type parameters.\n                 self.with_generic_param_rib(generics, ItemRibKind(HasGenericParams::Yes), |this| {\n-                    let local_def_id = this.r.definitions.local_def_id(item.id);\n+                    let local_def_id = this.r.definitions.local_def_id(item.id).to_def_id();\n                     this.with_self_rib(Res::SelfTy(Some(local_def_id), None), |this| {\n                         this.visit_generics(generics);\n                         walk_list!(this, visit_param_bound, bounds);\n@@ -947,7 +947,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             seen_bindings.entry(ident).or_insert(param.ident.span);\n \n             // Plain insert (no renaming).\n-            let res = Res::Def(def_kind, self.r.definitions.local_def_id(param.id));\n+            let res = Res::Def(def_kind, self.r.definitions.local_def_id(param.id).to_def_id());\n \n             match param.kind {\n                 GenericParamKind::Type { .. } => {\n@@ -1097,7 +1097,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             this.with_self_rib(Res::SelfTy(None, None), |this| {\n                 // Resolve the trait reference, if necessary.\n                 this.with_optional_trait_ref(opt_trait_reference.as_ref(), |this, trait_id| {\n-                    let item_def_id = this.r.definitions.local_def_id(item_id);\n+                    let item_def_id = this.r.definitions.local_def_id(item_id).to_def_id();\n                     this.with_self_rib(Res::SelfTy(trait_id, Some(item_def_id)), |this| {\n                         if let Some(trait_ref) = opt_trait_reference.as_ref() {\n                             // Resolve type arguments in the trait path.\n@@ -1906,7 +1906,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             if let StmtKind::Item(ref item) = stmt.kind {\n                 if let ItemKind::MacroDef(..) = item.kind {\n                     num_macro_definition_ribs += 1;\n-                    let res = self.r.definitions.local_def_id(item.id);\n+                    let res = self.r.definitions.local_def_id(item.id).to_def_id();\n                     self.ribs[ValueNS].push(Rib::new(MacroDefinition(res)));\n                     self.label_ribs.push(Rib::new(MacroDefinition(res)));\n                 }"}, {"sha": "45521b1415b3806f3f43edd6f9cf4eb5ee74d719", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0c835b0cca83fe21090562603e4bda77c183ace3/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c835b0cca83fe21090562603e4bda77c183ace3/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=0c835b0cca83fe21090562603e4bda77c183ace3", "patch": "@@ -32,7 +32,7 @@ use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_expand::base::SyntaxExtension;\n use rustc_hir::def::Namespace::*;\n use rustc_hir::def::{self, CtorOf, DefKind, NonMacroAttrKind, PartialRes};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX};\n use rustc_hir::definitions::{DefKey, Definitions};\n use rustc_hir::PrimTy::{self, Bool, Char, Float, Int, Str, Uint};\n use rustc_hir::{GlobMap, TraitMap};\n@@ -885,7 +885,7 @@ pub struct Resolver<'a> {\n     /// some AST passes can generate identifiers that only resolve to local or\n     /// language items.\n     empty_module: Module<'a>,\n-    module_map: FxHashMap<DefId, Module<'a>>,\n+    module_map: FxHashMap<LocalDefId, Module<'a>>,\n     extern_module_map: FxHashMap<DefId, Module<'a>>,\n     binding_parent_modules: FxHashMap<PtrKey<'a, NameBinding<'a>>, Module<'a>>,\n     underscore_disambiguator: u32,\n@@ -1121,7 +1121,7 @@ impl<'a> Resolver<'a> {\n             )\n         });\n         let mut module_map = FxHashMap::default();\n-        module_map.insert(DefId::local(CRATE_DEF_INDEX), graph_root);\n+        module_map.insert(LocalDefId { local_def_index: CRATE_DEF_INDEX }, graph_root);\n \n         let mut definitions = Definitions::default();\n         definitions.create_root_def(crate_name, session.local_crate_disambiguator());"}, {"sha": "aa78ac609457f5aee144781beec0a725e7a4fe74", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0c835b0cca83fe21090562603e4bda77c183ace3/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c835b0cca83fe21090562603e4bda77c183ace3/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=0c835b0cca83fe21090562603e4bda77c183ace3", "patch": "@@ -190,7 +190,7 @@ impl<'a> base::Resolver for Resolver<'a> {\n \n         let parent_scope = if let Some(module_id) = parent_module_id {\n             let parent_def_id = self.definitions.local_def_id(module_id);\n-            self.definitions.add_parent_module_of_macro_def(expn_id, parent_def_id);\n+            self.definitions.add_parent_module_of_macro_def(expn_id, parent_def_id.to_def_id());\n             self.module_map[&parent_def_id]\n         } else {\n             self.definitions.add_parent_module_of_macro_def("}]}