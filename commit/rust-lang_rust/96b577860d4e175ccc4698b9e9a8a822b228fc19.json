{"sha": "96b577860d4e175ccc4698b9e9a8a822b228fc19", "node_id": "C_kwDOAAsO6NoAKDk2YjU3Nzg2MGQ0ZTE3NWNjYzQ2OThiOWU5YThhODIyYjIyOGZjMTk", "commit": {"author": {"name": "Andrew Xie", "email": "ndrew.xie@gmail.com", "date": "2023-05-08T01:08:47Z"}, "committer": {"name": "Andrew Xie", "email": "ndrew.xie@gmail.com", "date": "2023-06-05T01:55:32Z"}, "message": "Fixed failing test + minor cleanup", "tree": {"sha": "bd9efda346de27dc61a0206a020c40906f50b6f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd9efda346de27dc61a0206a020c40906f50b6f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96b577860d4e175ccc4698b9e9a8a822b228fc19", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96b577860d4e175ccc4698b9e9a8a822b228fc19", "html_url": "https://github.com/rust-lang/rust/commit/96b577860d4e175ccc4698b9e9a8a822b228fc19", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96b577860d4e175ccc4698b9e9a8a822b228fc19/comments", "author": {"login": "ndrewxie", "id": 32971598, "node_id": "MDQ6VXNlcjMyOTcxNTk4", "avatar_url": "https://avatars.githubusercontent.com/u/32971598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndrewxie", "html_url": "https://github.com/ndrewxie", "followers_url": "https://api.github.com/users/ndrewxie/followers", "following_url": "https://api.github.com/users/ndrewxie/following{/other_user}", "gists_url": "https://api.github.com/users/ndrewxie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndrewxie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndrewxie/subscriptions", "organizations_url": "https://api.github.com/users/ndrewxie/orgs", "repos_url": "https://api.github.com/users/ndrewxie/repos", "events_url": "https://api.github.com/users/ndrewxie/events{/privacy}", "received_events_url": "https://api.github.com/users/ndrewxie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ndrewxie", "id": 32971598, "node_id": "MDQ6VXNlcjMyOTcxNTk4", "avatar_url": "https://avatars.githubusercontent.com/u/32971598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndrewxie", "html_url": "https://github.com/ndrewxie", "followers_url": "https://api.github.com/users/ndrewxie/followers", "following_url": "https://api.github.com/users/ndrewxie/following{/other_user}", "gists_url": "https://api.github.com/users/ndrewxie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndrewxie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndrewxie/subscriptions", "organizations_url": "https://api.github.com/users/ndrewxie/orgs", "repos_url": "https://api.github.com/users/ndrewxie/repos", "events_url": "https://api.github.com/users/ndrewxie/events{/privacy}", "received_events_url": "https://api.github.com/users/ndrewxie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf7dea571695be5db843519db014785c4a0a2786", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf7dea571695be5db843519db014785c4a0a2786", "html_url": "https://github.com/rust-lang/rust/commit/cf7dea571695be5db843519db014785c4a0a2786"}], "stats": {"total": 38, "additions": 20, "deletions": 18}, "files": [{"sha": "02957b38efe7bcc00aa4f1d569ae6fcd786cdf09", "filename": "compiler/rustc_data_structures/src/unord.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96b577860d4e175ccc4698b9e9a8a822b228fc19/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b577860d4e175ccc4698b9e9a8a822b228fc19/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs?ref=96b577860d4e175ccc4698b9e9a8a822b228fc19", "patch": "@@ -62,6 +62,11 @@ impl<T, I: Iterator<Item = T>> UnordItems<T, I> {\n         UnordItems(self.0.filter_map(f))\n     }\n \n+    #[inline]\n+    pub fn for_each<F: Fn(T) -> ()>(self, f: F) {\n+        self.0.for_each(|x| f(x));\n+    }\n+\n     #[inline]\n     pub fn max(self) -> Option<T>\n     where"}, {"sha": "b7bdffe5b06ae479ecbed6ff3abc29abde66d8a2", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/96b577860d4e175ccc4698b9e9a8a822b228fc19/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b577860d4e175ccc4698b9e9a8a822b228fc19/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=96b577860d4e175ccc4698b9e9a8a822b228fc19", "patch": "@@ -377,20 +377,17 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n                 continue;\n             };\n             self.checked_attrs.insert(attr.id);\n-            assertion.clean.items().all(|label| {\n+            assertion.clean.items().for_each(|label| {\n                 let dep_node = DepNode::from_label_string(self.tcx, &label, def_path_hash).unwrap();\n                 self.assert_clean(item_span, dep_node);\n-                true\n             });\n-            assertion.dirty.items().all(|label| {\n+            assertion.dirty.items().for_each(|label| {\n                 let dep_node = DepNode::from_label_string(self.tcx, &label, def_path_hash).unwrap();\n                 self.assert_dirty(item_span, dep_node);\n-                true\n             });\n-            assertion.loaded_from_disk.items().all(|label| {\n+            assertion.loaded_from_disk.items().for_each(|label| {\n                 let dep_node = DepNode::from_label_string(self.tcx, &label, def_path_hash).unwrap();\n                 self.assert_loaded_from_disk(item_span, dep_node);\n-                true\n             });\n         }\n     }"}, {"sha": "c3f1abadacef2fed0d64796ee4239660a625cf11", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/96b577860d4e175ccc4698b9e9a8a822b228fc19/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b577860d4e175ccc4698b9e9a8a822b228fc19/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=96b577860d4e175ccc4698b9e9a8a822b228fc19", "patch": "@@ -674,15 +674,15 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n \n     // Delete all lock files, that don't have an associated directory. They must\n     // be some kind of leftover\n-    lock_file_to_session_dir.items().all(|(lock_file_name, directory_name)| {\n+    lock_file_to_session_dir.items().for_each(|(lock_file_name, directory_name)| {\n         if directory_name.is_none() {\n             let Ok(timestamp) = extract_timestamp_from_session_dir(lock_file_name) else {\n                 debug!(\n                     \"found lock-file with malformed timestamp: {}\",\n                     crate_directory.join(&lock_file_name).display()\n                 );\n                 // Ignore it\n-                return true;\n+                return;\n             };\n \n             let lock_file_path = crate_directory.join(&**lock_file_name);\n@@ -702,7 +702,6 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n                 );\n             }\n         }\n-        true\n     });\n \n     // Filter out `None` directories"}, {"sha": "4c1cb5725dc9ca9c76c0ed78feea08c8f526fd7b", "filename": "compiler/rustc_incremental/src/persist/fs/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96b577860d4e175ccc4698b9e9a8a822b228fc19/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b577860d4e175ccc4698b9e9a8a822b228fc19/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs%2Ftests.rs?ref=96b577860d4e175ccc4698b9e9a8a822b228fc19", "patch": "@@ -10,7 +10,7 @@ fn test_all_except_most_recent() {\n         ((UNIX_EPOCH + Duration::new(2, 0), PathBuf::from(\"2\")), None),\n     ]);\n     let mut paths = UnordSet::default();\n-    UnordSet::extend_unord(&mut paths, computed.into_items().map(|((_, path), _)| path));\n+    paths.extend_unord(all_except_most_recent(computed).into_items().map(|(path, _)| path));\n     assert_eq!(\n         UnordSet::from(paths),\n         UnordSet::from_iter(["}, {"sha": "0727523a22980900a2ada57429c56787d92959e5", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96b577860d4e175ccc4698b9e9a8a822b228fc19/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b577860d4e175ccc4698b9e9a8a822b228fc19/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=96b577860d4e175ccc4698b9e9a8a822b228fc19", "patch": "@@ -163,7 +163,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n                 Decodable::decode(&mut work_product_decoder);\n \n             for swp in work_products {\n-                let all_files_exist = swp.work_product.saved_files.iter().all(|(_, path)| {\n+                let all_files_exist = swp.work_product.saved_files.items().all(|(_, path)| {\n                     let exists = in_incr_comp_dir_sess(sess, path).exists();\n                     if !exists && sess.opts.unstable_opts.incremental_info {\n                         eprintln!(\"incremental: could not find file for work product: {path}\",);"}, {"sha": "bfaa52f9c813416ad50a970a505a1ad6ea602863", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96b577860d4e175ccc4698b9e9a8a822b228fc19/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b577860d4e175ccc4698b9e9a8a822b228fc19/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=96b577860d4e175ccc4698b9e9a8a822b228fc19", "patch": "@@ -105,15 +105,15 @@ pub fn save_work_product_index(\n         if !new_work_products.contains_key(id) {\n             work_product::delete_workproduct_files(sess, wp);\n             debug_assert!(\n-                !wp.saved_files.iter().all(|(_, path)| in_incr_comp_dir_sess(sess, path).exists())\n+                !wp.saved_files.items().all(|(_, path)| in_incr_comp_dir_sess(sess, path).exists())\n             );\n         }\n     }\n \n     // Check that we did not delete one of the current work-products:\n     debug_assert!({\n         new_work_products.iter().all(|(_, wp)| {\n-            wp.saved_files.iter().all(|(_, path)| in_incr_comp_dir_sess(sess, path).exists())\n+            wp.saved_files.items().all(|(_, path)| in_incr_comp_dir_sess(sess, path).exists())\n         })\n     });\n }"}, {"sha": "865f90273bdecb740b322fe4ffc427306d8a79b6", "filename": "compiler/rustc_incremental/src/persist/work_product.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/96b577860d4e175ccc4698b9e9a8a822b228fc19/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b577860d4e175ccc4698b9e9a8a822b228fc19/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs?ref=96b577860d4e175ccc4698b9e9a8a822b228fc19", "patch": "@@ -4,7 +4,7 @@\n \n use crate::errors;\n use crate::persist::fs::*;\n-use rustc_data_structures::fx::FxIndexMap;\n+use rustc_data_structures::unord::UnordMap;\n use rustc_fs_util::link_or_copy;\n use rustc_middle::dep_graph::{WorkProduct, WorkProductId};\n use rustc_session::Session;\n@@ -20,7 +20,7 @@ pub fn copy_cgu_workproduct_to_incr_comp_cache_dir(\n     debug!(?cgu_name, ?files);\n     sess.opts.incremental.as_ref()?;\n \n-    let mut saved_files = FxIndexMap::default();\n+    let mut saved_files = UnordMap::default();\n     for (ext, path) in files {\n         let file_name = format!(\"{cgu_name}.{ext}\");\n         let path_in_incr_dir = in_incr_comp_dir_sess(sess, &file_name);\n@@ -46,10 +46,10 @@ pub fn copy_cgu_workproduct_to_incr_comp_cache_dir(\n \n /// Removes files for a given work product.\n pub fn delete_workproduct_files(sess: &Session, work_product: &WorkProduct) {\n-    for (_, path) in &work_product.saved_files {\n+    work_product.saved_files.items().for_each(|(_, path)| {\n         let path = in_incr_comp_dir_sess(sess, path);\n         if let Err(err) = std_fs::remove_file(&path) {\n             sess.emit_warning(errors::DeleteWorkProduct { path: &path, err });\n         }\n-    }\n+    });\n }"}, {"sha": "c9e80a6d9bc13d38a8ce0776c230d624bd5501f8", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/96b577860d4e175ccc4698b9e9a8a822b228fc19/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96b577860d4e175ccc4698b9e9a8a822b228fc19/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=96b577860d4e175ccc4698b9e9a8a822b228fc19", "patch": "@@ -6,6 +6,7 @@ use rustc_data_structures::sharded::{self, Sharded};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::steal::Steal;\n use rustc_data_structures::sync::{AtomicU32, AtomicU64, Lock, Lrc, Ordering};\n+use rustc_data_structures::unord::UnordMap;\n use rustc_index::IndexVec;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use smallvec::{smallvec, SmallVec};\n@@ -1048,7 +1049,7 @@ pub struct WorkProduct {\n     ///\n     /// By convention, file extensions are currently used as identifiers, i.e. the key \"o\" maps to\n     /// the object file's path, and \"dwo\" to the dwarf object file's path.\n-    pub saved_files: FxIndexMap<String, String>,\n+    pub saved_files: UnordMap<String, String>,\n }\n \n // Index type for `DepNodeData`'s edges."}]}