{"sha": "bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjZGYxNDdhYWZjNmQxYzM2NTQ4N2FiZDg4Y2IwYmMxY2Y1ZjJlNjM=", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2021-07-28T13:06:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-28T13:06:26Z"}, "message": "Rollup merge of #7298 - flip1995:ci-switch-to-monster, r=xFrednet,flip1995\n\nSwitch CI to new metadata collection\n\nr? `@xFrednet`\n\nThings we have to keep in mind:\n\n- This removes the template files and the scripts used for deployment from the checkout. This was added in #5517. I don't think we ever needed those there. Not sure though.\n- ~~As a result, we can't remove the python scripts yet. We have to wait until this hits a stable Clippy release.~~ I'll just break the next stable deploy and do it by hand once.\n- This should be merged together with #7279. Me and `@xFrednet` will coordinate the switch\n- ...?\n\nI still have to try out some things:\n\n- [x] Is it worth caching? Yes\n- [x] ~~Is it worth to do a release build?~~ Nope\n- [x] Does it actually work? With a few changes, yes\n- [ ] ...?\n\nchangelog: Clippy now uses a lint to generate its documentation :tada:", "tree": {"sha": "a9b739013e80e51ffeed6fac8e131225fa541301", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9b739013e80e51ffeed6fac8e131225fa541301"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhAVZSCRBK7hj4Ov3rIwAALJwIAALI5Z5nbBduV7sRYqJfeU9h\nx190wifaVoCxdYHyrzBTlMmBnsJklvthdm8v9HqYp9TZ5IuU4sJ62Nyk8w5IfSKN\nnuHs7XJRjFpGV4rDJUsvj8g+L0n4qwdkG4tdxNyFE1OaOVmbafchk4zLwROOx1GS\n178IC6XPhWENcJILMU1rdHHLDvE9qdle/p+YP2jzOC788A3ii2pyA+KePIlxWPhY\nfjsn2Ihnp/8WK6iLtlP3i5mLYWBh7h3ii6q+A5gh1Tq4v0kKqn2ZE2m0R1NWYFwq\nl50ZWGL3SeTQDcRjel9X7+xjQzFRXROfhzPSSRCJpEzmc6nEzb21LtTr1sKNXe4=\n=zHNf\n-----END PGP SIGNATURE-----\n", "payload": "tree a9b739013e80e51ffeed6fac8e131225fa541301\nparent ce465995d89a34a0d438bcd7ea03afb94a049dae\nparent c951a3c68daefb078d7e52e87e3cebbfa9a13f10\nauthor Philipp Krones <hello@philkrones.com> 1627477586 +0200\ncommitter GitHub <noreply@github.com> 1627477586 +0200\n\nRollup merge of #7298 - flip1995:ci-switch-to-monster, r=xFrednet,flip1995\n\nSwitch CI to new metadata collection\n\nr? `@xFrednet`\n\nThings we have to keep in mind:\n\n- This removes the template files and the scripts used for deployment from the checkout. This was added in #5517. I don't think we ever needed those there. Not sure though.\n- ~~As a result, we can't remove the python scripts yet. We have to wait until this hits a stable Clippy release.~~ I'll just break the next stable deploy and do it by hand once.\n- This should be merged together with #7279. Me and `@xFrednet` will coordinate the switch\n- ...?\n\nI still have to try out some things:\n\n- [x] Is it worth caching? Yes\n- [x] ~~Is it worth to do a release build?~~ Nope\n- [x] Does it actually work? With a few changes, yes\n- [ ] ...?\n\nchangelog: Clippy now uses a lint to generate its documentation :tada:\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63", "html_url": "https://github.com/rust-lang/rust/commit/bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce465995d89a34a0d438bcd7ea03afb94a049dae", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce465995d89a34a0d438bcd7ea03afb94a049dae", "html_url": "https://github.com/rust-lang/rust/commit/ce465995d89a34a0d438bcd7ea03afb94a049dae"}, {"sha": "c951a3c68daefb078d7e52e87e3cebbfa9a13f10", "url": "https://api.github.com/repos/rust-lang/rust/commits/c951a3c68daefb078d7e52e87e3cebbfa9a13f10", "html_url": "https://github.com/rust-lang/rust/commit/c951a3c68daefb078d7e52e87e3cebbfa9a13f10"}], "stats": {"total": 239, "additions": 26, "deletions": 213}, "files": [{"sha": "a3c57232f557c4b774cb53ecc7e10299db1bd8e6", "filename": ".github/deploy.sh", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63/.github%2Fdeploy.sh", "raw_url": "https://github.com/rust-lang/rust/raw/bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63/.github%2Fdeploy.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fdeploy.sh?ref=bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63", "patch": "@@ -8,13 +8,12 @@ rm -rf out/master/ || exit 0\n echo \"Making the docs for master\"\n mkdir out/master/\n cp util/gh-pages/index.html out/master\n-python3 ./util/export.py out/master/lints.json\n+cp util/gh-pages/lints.json out/master\n \n if [[ -n $TAG_NAME ]]; then\n   echo \"Save the doc for the current tag ($TAG_NAME) and point stable/ to it\"\n-  cp -r out/master \"out/$TAG_NAME\"\n-  rm -f out/stable\n-  ln -s \"$TAG_NAME\" out/stable\n+  cp -Tr out/master \"out/$TAG_NAME\"\n+  ln -sf \"$TAG_NAME\" out/stable\n fi\n \n if [[ $BETA = \"true\" ]]; then\n@@ -28,8 +27,8 @@ cp util/gh-pages/versions.html out/index.html\n echo \"Making the versions.json file\"\n python3 ./util/versions.py out\n \n-cd out\n # Now let's go have some fun with the cloned repo\n+cd out\n git config user.name \"GHA CI\"\n git config user.email \"gha@ci.invalid\"\n "}, {"sha": "b8be730be32b00644ec1ed70658a832bf2284397", "filename": ".github/workflows/deploy.yml", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63/.github%2Fworkflows%2Fdeploy.yml", "raw_url": "https://github.com/rust-lang/rust/raw/bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63/.github%2Fworkflows%2Fdeploy.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fdeploy.yml?ref=bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63", "patch": "@@ -39,10 +39,23 @@ jobs:\n       if: github.ref == 'refs/heads/beta'\n       run: echo \"BETA=true\" >> $GITHUB_ENV\n \n-    - name: Use scripts and templates from master branch\n+    # We need to check out all files that (transitively) depend on the\n+    # structure of the gh-pages branch, so that we're able to change that\n+    # structure without breaking the deployment.\n+    - name: Use deploy files from master branch\n       run: |\n         git fetch --no-tags --prune --depth=1 origin master\n-        git checkout origin/master -- .github/deploy.sh util/gh-pages/ util/*.py\n+        git checkout origin/master -- .github/deploy.sh util/versions.py util/gh-pages/versions.html\n+\n+    # Generate lockfile for caching to avoid build problems with cached deps\n+    - name: cargo generate-lockfile\n+      run: cargo generate-lockfile\n+\n+    - name: Cache\n+      uses: Swatinem/rust-cache@v1.3.0\n+\n+    - name: cargo collect-metadata\n+      run: cargo collect-metadata\n \n     - name: Deploy\n       run: |"}, {"sha": "b36e2a28ee45450a589c1c93035c0f77b2d1edb7", "filename": "clippy_dev/src/serve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63/clippy_dev%2Fsrc%2Fserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63/clippy_dev%2Fsrc%2Fserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fserve.rs?ref=bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63", "patch": "@@ -15,8 +15,8 @@ pub fn run(port: u16, lint: Option<&str>) -> ! {\n \n     loop {\n         if mtime(\"util/gh-pages/lints.json\") < mtime(\"clippy_lints/src\") {\n-            Command::new(\"python3\")\n-                .arg(\"util/export.py\")\n+            Command::new(\"cargo\")\n+                .arg(\"collect-metadata\")\n                 .spawn()\n                 .unwrap()\n                 .wait()"}, {"sha": "4a6861bd9365a9c01210ae464b983ebcc483fb24", "filename": "clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63", "patch": "@@ -32,7 +32,7 @@ use clippy_utils::{\n };\n \n /// This is the output file of the lint collector.\n-const OUTPUT_FILE: &str = \"../util/gh-pages/metadata_collection.json\";\n+const OUTPUT_FILE: &str = \"../util/gh-pages/lints.json\";\n /// These lints are excluded from the export.\n const BLACK_LISTED_LINTS: [&str; 3] = [\"lint_author\", \"deep_code_inspection\", \"internal_metadata_collector\"];\n /// These groups will be ignored by the lint group matcher. This is useful for collections like"}, {"sha": "4ede20c52583b0bbcef93972f47fff53aa2879db", "filename": "tests/dogfood.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63/tests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63/tests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdogfood.rs?ref=bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63", "patch": "@@ -183,7 +183,7 @@ fn run_metadata_collection_lint() {\n     use std::time::SystemTime;\n \n     // Setup for validation\n-    let metadata_output_path = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\")).join(\"util/gh-pages/metadata_collection.json\");\n+    let metadata_output_path = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\")).join(\"util/gh-pages/lints.json\");\n     let start_time = SystemTime::now();\n \n     // Run collection as is"}, {"sha": "1248e6b6a26a75777ef97786ce41537200a2fb90", "filename": "util/export.py", "status": "removed", "additions": 0, "deletions": 84, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/ce465995d89a34a0d438bcd7ea03afb94a049dae/util%2Fexport.py", "raw_url": "https://github.com/rust-lang/rust/raw/ce465995d89a34a0d438bcd7ea03afb94a049dae/util%2Fexport.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fexport.py?ref=ce465995d89a34a0d438bcd7ea03afb94a049dae", "patch": "@@ -1,84 +0,0 @@\n-#!/usr/bin/env python\n-\n-# Build the gh-pages\n-\n-from collections import OrderedDict\n-import re\n-import sys\n-import json\n-\n-from lintlib import parse_all, log\n-\n-lint_subheadline = re.compile(r'''^\\*\\*([\\w\\s]+?)[:?.!]?\\*\\*(.*)''')\n-rust_code_block = re.compile(r'''```rust.+?```''', flags=re.DOTALL)\n-\n-CONF_TEMPLATE = \"\"\"\\\n-This lint has the following configuration variables:\n-\n-* `%s: %s`: %s (defaults to `%s`).\"\"\"\n-\n-\n-def parse_code_block(match):\n-    lines = []\n-\n-    for line in match.group(0).split('\\n'):\n-        # fix syntax highlighting for headers like ```rust,ignore\n-        if line.startswith('```rust'):\n-            lines.append('```rust')\n-        elif not line.startswith('# '):\n-            lines.append(line)\n-\n-    return '\\n'.join(lines)\n-\n-\n-def parse_lint_def(lint):\n-    lint_dict = {}\n-    lint_dict['id'] = lint.name\n-    lint_dict['group'] = lint.group\n-    lint_dict['level'] = lint.level\n-    lint_dict['docs'] = OrderedDict()\n-\n-    last_section = None\n-\n-    for line in lint.doc:\n-        match = re.match(lint_subheadline, line)\n-        if match:\n-            last_section = match.groups()[0]\n-            text = match.groups()[1]\n-        else:\n-            text = line\n-\n-        if not last_section:\n-            log.warning(\"Skipping comment line as it was not preceded by a heading\")\n-            log.debug(\"in lint `%s`, line `%s`\", lint.name, line)\n-\n-        if last_section not in lint_dict['docs']:\n-            lint_dict['docs'][last_section] = \"\"\n-\n-        lint_dict['docs'][last_section] += text + \"\\n\"\n-\n-    for section in lint_dict['docs']:\n-        lint_dict['docs'][section] = re.sub(rust_code_block, parse_code_block, lint_dict['docs'][section].strip())\n-\n-    return lint_dict\n-\n-\n-def main():\n-    lintlist, configs = parse_all()\n-    lints = {}\n-    for lint in lintlist:\n-        lints[lint.name] = parse_lint_def(lint)\n-        if lint.name in configs:\n-            lints[lint.name]['docs']['Configuration'] = \\\n-                CONF_TEMPLATE % configs[lint.name]\n-\n-    outfile = sys.argv[1] if len(sys.argv) > 1 else \"util/gh-pages/lints.json\"\n-    with open(outfile, \"w\") as fp:\n-        lints = list(lints.values())\n-        lints.sort(key=lambda x: x['id'])\n-        json.dump(lints, fp, indent=2)\n-        log.info(\"wrote JSON for great justice\")\n-\n-\n-if __name__ == \"__main__\":\n-    main()"}, {"sha": "9cefb2dbb197caffafcc0ae1cd7c6f40f1fa450c", "filename": "util/lintlib.py", "status": "removed", "additions": 0, "deletions": 115, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/ce465995d89a34a0d438bcd7ea03afb94a049dae/util%2Flintlib.py", "raw_url": "https://github.com/rust-lang/rust/raw/ce465995d89a34a0d438bcd7ea03afb94a049dae/util%2Flintlib.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Flintlib.py?ref=ce465995d89a34a0d438bcd7ea03afb94a049dae", "patch": "@@ -1,115 +0,0 @@\n-# Common utils for the several housekeeping scripts.\n-\n-import os\n-import re\n-import collections\n-\n-import logging as log\n-log.basicConfig(level=log.INFO, format='%(levelname)s: %(message)s')\n-\n-Lint = collections.namedtuple('Lint', 'name level doc sourcefile group')\n-Config = collections.namedtuple('Config', 'name ty doc default')\n-\n-lintname_re = re.compile(r'''pub\\s+([A-Z_][A-Z_0-9]*)''')\n-group_re = re.compile(r'''\\s*([a-z_][a-z_0-9]+)''')\n-conf_re = re.compile(r'''define_Conf! {\\n((?!\\n})[\\s\\S])*\\n}''', re.MULTILINE)\n-confvar_re = re.compile(\n-    r'''/// Lint: ([\\w,\\s]+)\\. (.*)\\n\\s*\\(([^:]+):\\s*([^\\s=]+)\\s*=\\s*([^\\.\\)]+).*\\),''', re.MULTILINE)\n-comment_re = re.compile(r'''\\s*/// ?(.*)''')\n-\n-lint_levels = {\n-    \"correctness\": 'Deny',\n-    \"suspicious\": 'Warn',\n-    \"style\": 'Warn',\n-    \"complexity\": 'Warn',\n-    \"perf\": 'Warn',\n-    \"restriction\": 'Allow',\n-    \"pedantic\": 'Allow',\n-    \"nursery\": 'Allow',\n-    \"cargo\": 'Allow',\n-}\n-\n-\n-def parse_lints(lints, filepath):\n-    comment = []\n-    clippy = False\n-    deprecated = False\n-    name = \"\"\n-\n-    with open(filepath) as fp:\n-        for line in fp:\n-            if clippy or deprecated:\n-                m = lintname_re.search(line)\n-                if m:\n-                    name = m.group(1).lower()\n-                    line = next(fp)\n-\n-                    if deprecated:\n-                        level = \"Deprecated\"\n-                        group = \"deprecated\"\n-                    else:\n-                        while True:\n-                            g = group_re.search(line)\n-                            if g:\n-                                group = g.group(1).lower()\n-                                level = lint_levels.get(group, None)\n-                                break\n-                            line = next(fp)\n-\n-                    if level is None:\n-                        continue\n-\n-                    log.info(\"found %s with level %s in %s\",\n-                             name, level, filepath)\n-                    lints.append(Lint(name, level, comment, filepath, group))\n-                    comment = []\n-\n-                    clippy = False\n-                    deprecated = False\n-                    name = \"\"\n-                else:\n-                    m = comment_re.search(line)\n-                    if m:\n-                        comment.append(m.group(1))\n-            elif line.startswith(\"declare_clippy_lint!\"):\n-                clippy = True\n-                deprecated = False\n-            elif line.startswith(\"declare_deprecated_lint!\"):\n-                clippy = False\n-                deprecated = True\n-            elif line.startswith(\"declare_lint!\"):\n-                import sys\n-                print(\n-                    \"don't use `declare_lint!` in Clippy, \"\n-                    \"use `declare_clippy_lint!` instead\"\n-                )\n-                sys.exit(42)\n-\n-\n-def parse_configs(path):\n-    configs = {}\n-    with open(os.path.join(path, 'utils/conf.rs')) as fp:\n-        contents = fp.read()\n-\n-    match = re.search(conf_re, contents)\n-    confvars = re.findall(confvar_re, match.group(0))\n-\n-    for (lints, doc, name, ty, default) in confvars:\n-        for lint in lints.split(','):\n-            configs[lint.strip().lower()] = Config(name.replace(\"_\", \"-\"), ty, doc, default)\n-    return configs\n-\n-\n-def parse_all(path=\"clippy_lints/src\"):\n-    lints = []\n-    for root, dirs, files in os.walk(path):\n-        for fn in files:\n-            if fn.endswith('.rs'):\n-                parse_lints(lints, os.path.join(root, fn))\n-\n-    log.info(\"got %s lints\", len(lints))\n-\n-    configs = parse_configs(path)\n-    log.info(\"got %d configs\", len(configs))\n-\n-    return lints, configs"}, {"sha": "0cfa007d1b2711754167909ffee7004632cdd13c", "filename": "util/versions.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63/util%2Fversions.py", "raw_url": "https://github.com/rust-lang/rust/raw/bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63/util%2Fversions.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fversions.py?ref=bcdf147aafc6d1c365487abd88cb0bc1cf5f2e63", "patch": "@@ -3,8 +3,8 @@\n import json\n import os\n import sys\n-\n-from lintlib import log\n+import logging as log\n+log.basicConfig(level=log.INFO, format='%(levelname)s: %(message)s')\n \n \n def key(v):\n@@ -26,7 +26,7 @@ def key(v):\n \n def main():\n     if len(sys.argv) < 2:\n-        print(\"Error: specify output directory\")\n+        log.error(\"specify output directory\")\n         return\n \n     outdir = sys.argv[1]"}]}