{"sha": "b726bfb56902eaa743f7164ce502afbdd232562c", "node_id": "C_kwDOAAsO6NoAKGI3MjZiZmI1NjkwMmVhYTc0M2Y3MTY0Y2U1MDJhZmJkZDIzMjU2MmM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-07T03:51:30Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-03-07T03:51:30Z"}, "message": "allow referencing impl substs from rustc_on_unimplemented", "tree": {"sha": "4c957e6668ca1a92d12b6416948daa00b0298a1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c957e6668ca1a92d12b6416948daa00b0298a1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b726bfb56902eaa743f7164ce502afbdd232562c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b726bfb56902eaa743f7164ce502afbdd232562c", "html_url": "https://github.com/rust-lang/rust/commit/b726bfb56902eaa743f7164ce502afbdd232562c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b726bfb56902eaa743f7164ce502afbdd232562c/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9ddb8f8fb6fb42d533deb9b092e34c046b45b66", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66", "html_url": "https://github.com/rust-lang/rust/commit/e9ddb8f8fb6fb42d533deb9b092e34c046b45b66"}], "stats": {"total": 87, "additions": 59, "deletions": 28}, "files": [{"sha": "6dfbdace8e2a0f9a76262c2c17a67778578434a8", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b726bfb56902eaa743f7164ce502afbdd232562c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b726bfb56902eaa743f7164ce502afbdd232562c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=b726bfb56902eaa743f7164ce502afbdd232562c", "patch": "@@ -231,9 +231,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         });\n \n-        if let Ok(Some(command)) =\n-            OnUnimplementedDirective::of_item(self.tcx, trait_ref.def_id, def_id)\n-        {\n+        if let Ok(Some(command)) = OnUnimplementedDirective::of_item(self.tcx, def_id) {\n             command.evaluate(self.tcx, trait_ref, &flags)\n         } else {\n             OnUnimplementedNote::default()"}, {"sha": "2f697c1fa27b79e3eb4f7d2a902a9a24f520fb5f", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b726bfb56902eaa743f7164ce502afbdd232562c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b726bfb56902eaa743f7164ce502afbdd232562c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=b726bfb56902eaa743f7164ce502afbdd232562c", "patch": "@@ -54,7 +54,7 @@ fn parse_error(\n impl<'tcx> OnUnimplementedDirective {\n     fn parse(\n         tcx: TyCtxt<'tcx>,\n-        trait_def_id: DefId,\n+        item_def_id: DefId,\n         items: &[NestedMetaItem],\n         span: Span,\n         is_root: bool,\n@@ -63,7 +63,7 @@ impl<'tcx> OnUnimplementedDirective {\n         let mut item_iter = items.iter();\n \n         let parse_value = |value_str| {\n-            OnUnimplementedFormatString::try_parse(tcx, trait_def_id, value_str, span).map(Some)\n+            OnUnimplementedFormatString::try_parse(tcx, item_def_id, value_str, span).map(Some)\n         };\n \n         let condition = if is_root {\n@@ -135,7 +135,7 @@ impl<'tcx> OnUnimplementedDirective {\n             {\n                 if let Some(items) = item.meta_item_list() {\n                     if let Ok(subcommand) =\n-                        Self::parse(tcx, trait_def_id, &items, item.span(), false)\n+                        Self::parse(tcx, item_def_id, &items, item.span(), false)\n                     {\n                         subcommands.push(subcommand);\n                     } else {\n@@ -178,27 +178,23 @@ impl<'tcx> OnUnimplementedDirective {\n         }\n     }\n \n-    pub fn of_item(\n-        tcx: TyCtxt<'tcx>,\n-        trait_def_id: DefId,\n-        impl_def_id: DefId,\n-    ) -> Result<Option<Self>, ErrorGuaranteed> {\n-        let attrs = tcx.get_attrs(impl_def_id);\n+    pub fn of_item(tcx: TyCtxt<'tcx>, item_def_id: DefId) -> Result<Option<Self>, ErrorGuaranteed> {\n+        let attrs = tcx.get_attrs(item_def_id);\n \n         let Some(attr) = tcx.sess.find_by_name(&attrs, sym::rustc_on_unimplemented) else {\n             return Ok(None);\n         };\n \n         let result = if let Some(items) = attr.meta_item_list() {\n-            Self::parse(tcx, trait_def_id, &items, attr.span, true).map(Some)\n+            Self::parse(tcx, item_def_id, &items, attr.span, true).map(Some)\n         } else if let Some(value) = attr.value_str() {\n             Ok(Some(OnUnimplementedDirective {\n                 condition: None,\n                 message: None,\n                 subcommands: vec![],\n                 label: Some(OnUnimplementedFormatString::try_parse(\n                     tcx,\n-                    trait_def_id,\n+                    item_def_id,\n                     value,\n                     attr.span,\n                 )?),\n@@ -209,7 +205,7 @@ impl<'tcx> OnUnimplementedDirective {\n         } else {\n             return Err(ErrorGuaranteed);\n         };\n-        debug!(\"of_item({:?}/{:?}) = {:?}\", trait_def_id, impl_def_id, result);\n+        debug!(\"of_item({:?}) = {:?}\", item_def_id, result);\n         result\n     }\n \n@@ -280,23 +276,29 @@ impl<'tcx> OnUnimplementedDirective {\n impl<'tcx> OnUnimplementedFormatString {\n     fn try_parse(\n         tcx: TyCtxt<'tcx>,\n-        trait_def_id: DefId,\n+        item_def_id: DefId,\n         from: Symbol,\n         err_sp: Span,\n     ) -> Result<Self, ErrorGuaranteed> {\n         let result = OnUnimplementedFormatString(from);\n-        result.verify(tcx, trait_def_id, err_sp)?;\n+        result.verify(tcx, item_def_id, err_sp)?;\n         Ok(result)\n     }\n \n     fn verify(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        trait_def_id: DefId,\n+        item_def_id: DefId,\n         span: Span,\n     ) -> Result<(), ErrorGuaranteed> {\n-        let name = tcx.item_name(trait_def_id);\n-        let generics = tcx.generics_of(trait_def_id);\n+        let trait_def_id = if tcx.is_trait(item_def_id) {\n+            item_def_id\n+        } else {\n+            tcx.trait_id_of_impl(item_def_id)\n+                .expect(\"expected `on_unimplemented` to correspond to a trait\")\n+        };\n+        let trait_name = tcx.item_name(trait_def_id);\n+        let generics = tcx.generics_of(item_def_id);\n         let s = self.0.as_str();\n         let parser = Parser::new(s, None, None, false, ParseMode::Format);\n         let mut result = Ok(());\n@@ -307,7 +309,7 @@ impl<'tcx> OnUnimplementedFormatString {\n                     // `{Self}` is allowed\n                     Position::ArgumentNamed(s, _) if s == kw::SelfUpper => (),\n                     // `{ThisTraitsName}` is allowed\n-                    Position::ArgumentNamed(s, _) if s == name => (),\n+                    Position::ArgumentNamed(s, _) if s == trait_name => (),\n                     // `{from_method}` is allowed\n                     Position::ArgumentNamed(s, _) if s == sym::from_method => (),\n                     // `{from_desugaring}` is allowed\n@@ -329,9 +331,13 @@ impl<'tcx> OnUnimplementedFormatString {\n                                     tcx.sess,\n                                     span,\n                                     E0230,\n-                                    \"there is no parameter `{}` on trait `{}`\",\n+                                    \"there is no parameter `{}` on {}\",\n                                     s,\n-                                    name\n+                                    if trait_def_id == item_def_id {\n+                                        format!(\"trait `{}`\", trait_name)\n+                                    } else {\n+                                        \"impl\".to_string()\n+                                    }\n                                 )\n                                 .emit();\n                                 result = Err(ErrorGuaranteed);"}, {"sha": "7c3594175b85508ed4c10ac92fc306d6cbf79d52", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b726bfb56902eaa743f7164ce502afbdd232562c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b726bfb56902eaa743f7164ce502afbdd232562c/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=b726bfb56902eaa743f7164ce502afbdd232562c", "patch": "@@ -742,12 +742,11 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n                     impl_trait_ref,\n                     &impl_.items,\n                 );\n-                let trait_def_id = impl_trait_ref.def_id;\n-                check_on_unimplemented(tcx, trait_def_id, it);\n+                check_on_unimplemented(tcx, it);\n             }\n         }\n         hir::ItemKind::Trait(_, _, _, _, ref items) => {\n-            check_on_unimplemented(tcx, it.def_id.to_def_id(), it);\n+            check_on_unimplemented(tcx, it);\n \n             for item in items.iter() {\n                 let item = tcx.hir().trait_item(item.id);\n@@ -857,9 +856,9 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n     }\n }\n \n-pub(super) fn check_on_unimplemented(tcx: TyCtxt<'_>, trait_def_id: DefId, item: &hir::Item<'_>) {\n+pub(super) fn check_on_unimplemented(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n     // an error would be reported if this fails.\n-    let _ = traits::OnUnimplementedDirective::of_item(tcx, trait_def_id, item.def_id.to_def_id());\n+    let _ = traits::OnUnimplementedDirective::of_item(tcx, item.def_id.to_def_id());\n }\n \n pub(super) fn check_specialization_validity<'tcx>("}, {"sha": "fe9c50ec3d4a2cf34e92d3c09e8c50a0659d6e27", "filename": "src/test/ui/on-unimplemented/impl-substs.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b726bfb56902eaa743f7164ce502afbdd232562c/src%2Ftest%2Fui%2Fon-unimplemented%2Fimpl-substs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b726bfb56902eaa743f7164ce502afbdd232562c/src%2Ftest%2Fui%2Fon-unimplemented%2Fimpl-substs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fimpl-substs.rs?ref=b726bfb56902eaa743f7164ce502afbdd232562c", "patch": "@@ -0,0 +1,15 @@\n+#![feature(rustc_attrs)]\n+\n+trait Foo<A> {\n+    fn foo(self);\n+}\n+\n+#[rustc_on_unimplemented = \"an impl did not match: {A} {B} {C}\"]\n+impl<A, B, C> Foo<A> for (A, B, C) {\n+    fn foo(self) {}\n+}\n+\n+fn main() {\n+    Foo::<usize>::foo((1i32, 1i32, 1i32));\n+    //~^ ERROR the trait bound `(i32, i32, i32): Foo<usize>` is not satisfied\n+}"}, {"sha": "db66ab0bfaec1a61edd1a84bd7779eb5bfc8a133", "filename": "src/test/ui/on-unimplemented/impl-substs.stderr", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b726bfb56902eaa743f7164ce502afbdd232562c/src%2Ftest%2Fui%2Fon-unimplemented%2Fimpl-substs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b726bfb56902eaa743f7164ce502afbdd232562c/src%2Ftest%2Fui%2Fon-unimplemented%2Fimpl-substs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fon-unimplemented%2Fimpl-substs.stderr?ref=b726bfb56902eaa743f7164ce502afbdd232562c", "patch": "@@ -0,0 +1,13 @@\n+error[E0277]: the trait bound `(i32, i32, i32): Foo<usize>` is not satisfied\n+  --> $DIR/impl-substs.rs:13:23\n+   |\n+LL |     Foo::<usize>::foo((1i32, 1i32, 1i32));\n+   |     ----------------- ^^^^^^^^^^^^^^^^^^ an impl did not match: usize _ _\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Foo<usize>` is not implemented for `(i32, i32, i32)`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}