{"sha": "b9ffbff9595112af6144ea0f833d7c22e940a824", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5ZmZiZmY5NTk1MTEyYWY2MTQ0ZWEwZjgzM2Q3YzIyZTk0MGE4MjQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-12-03T22:43:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-12-03T22:43:44Z"}, "message": "Rollup merge of #46260 - ExpHP:builtin-macro-doc-sync, r=steveklabnik\n\nMake doc stubs for builtin macros reflect existing support for trailing commas\n\nThis modifies the `macro_rules!` stubs in `std` for some of the compiler builtin macros in order to better reflect their currently supported grammar.  To my understanding these stubs have no impact on compiler output whatsoever, and only exist so that they may appear in the documentation.\n\nP.S. It is in fact true that `env!` supports trailing commas while `option_env!` currently does not.  (I have another issue for this)\n\nI don't imagine there's any way to automatically test these stubs, but I did *informally* test the new definitions on the playpen to see that they accept the desired invocations, as well as inspect the updated doc output.", "tree": {"sha": "aa58b88d8e79d184c19562488d988c11a082d9ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa58b88d8e79d184c19562488d988c11a082d9ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9ffbff9595112af6144ea0f833d7c22e940a824", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9ffbff9595112af6144ea0f833d7c22e940a824", "html_url": "https://github.com/rust-lang/rust/commit/b9ffbff9595112af6144ea0f833d7c22e940a824", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9ffbff9595112af6144ea0f833d7c22e940a824/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82ee2094927dbf969a9b37582e54c1fdf6358b17", "url": "https://api.github.com/repos/rust-lang/rust/commits/82ee2094927dbf969a9b37582e54c1fdf6358b17", "html_url": "https://github.com/rust-lang/rust/commit/82ee2094927dbf969a9b37582e54c1fdf6358b17"}, {"sha": "31b8a15e7026eb882aeda7b7b1c704f444da4e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/31b8a15e7026eb882aeda7b7b1c704f444da4e81", "html_url": "https://github.com/rust-lang/rust/commit/31b8a15e7026eb882aeda7b7b1c704f444da4e81"}], "stats": {"total": 40, "additions": 28, "deletions": 12}, "files": [{"sha": "6e3dbcbec9dc9b04a0b93cf5ccea57a15557da1e", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b9ffbff9595112af6144ea0f833d7c22e940a824/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ffbff9595112af6144ea0f833d7c22e940a824/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=b9ffbff9595112af6144ea0f833d7c22e940a824", "patch": "@@ -612,9 +612,10 @@ mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     #[cfg(dox)]\n-    macro_rules! format_args { ($fmt:expr, $($args:tt)*) => ({\n-        /* compiler built-in */\n-    }) }\n+    macro_rules! format_args {\n+        ($fmt:expr) => ({ /* compiler built-in */ });\n+        ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ });\n+    }\n \n     /// Inspect an environment variable at compile time.\n     ///\n@@ -624,7 +625,10 @@ mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     #[cfg(dox)]\n-    macro_rules! env { ($name:expr) => ({ /* compiler built-in */ }) }\n+    macro_rules! env {\n+        ($name:expr) => ({ /* compiler built-in */ });\n+        ($name:expr,) => ({ /* compiler built-in */ });\n+    }\n \n     /// Optionally inspect an environment variable at compile time.\n     ///\n@@ -645,7 +649,8 @@ mod builtin {\n     #[macro_export]\n     #[cfg(dox)]\n     macro_rules! concat_idents {\n-        ($($e:ident),*) => ({ /* compiler built-in */ })\n+        ($($e:ident),*) => ({ /* compiler built-in */ });\n+        ($($e:ident,)*) => ({ /* compiler built-in */ });\n     }\n \n     /// Concatenates literals into a static string slice.\n@@ -656,7 +661,10 @@ mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n     #[cfg(dox)]\n-    macro_rules! concat { ($($e:expr),*) => ({ /* compiler built-in */ }) }\n+    macro_rules! concat {\n+        ($($e:expr),*) => ({ /* compiler built-in */ });\n+        ($($e:expr,)*) => ({ /* compiler built-in */ });\n+    }\n \n     /// A macro which expands to the line number on which it was invoked.\n     ///"}, {"sha": "7d62f94056fb26e4b3481c46e9c2874be077a540", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b9ffbff9595112af6144ea0f833d7c22e940a824/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9ffbff9595112af6144ea0f833d7c22e940a824/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=b9ffbff9595112af6144ea0f833d7c22e940a824", "patch": "@@ -325,9 +325,10 @@ pub mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n-    macro_rules! format_args { ($fmt:expr, $($args:tt)*) => ({\n-        /* compiler built-in */\n-    }) }\n+    macro_rules! format_args {\n+        ($fmt:expr) => ({ /* compiler built-in */ });\n+        ($fmt:expr, $($args:tt)*) => ({ /* compiler built-in */ });\n+    }\n \n     /// Inspect an environment variable at compile time.\n     ///\n@@ -348,7 +349,10 @@ pub mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n-    macro_rules! env { ($name:expr) => ({ /* compiler built-in */ }) }\n+    macro_rules! env {\n+        ($name:expr) => ({ /* compiler built-in */ });\n+        ($name:expr,) => ({ /* compiler built-in */ });\n+    }\n \n     /// Optionally inspect an environment variable at compile time.\n     ///\n@@ -400,7 +404,8 @@ pub mod builtin {\n     #[unstable(feature = \"concat_idents_macro\", issue = \"29599\")]\n     #[macro_export]\n     macro_rules! concat_idents {\n-        ($($e:ident),*) => ({ /* compiler built-in */ })\n+        ($($e:ident),*) => ({ /* compiler built-in */ });\n+        ($($e:ident,)*) => ({ /* compiler built-in */ });\n     }\n \n     /// Concatenates literals into a static string slice.\n@@ -420,7 +425,10 @@ pub mod builtin {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[macro_export]\n-    macro_rules! concat { ($($e:expr),*) => ({ /* compiler built-in */ }) }\n+    macro_rules! concat {\n+        ($($e:expr),*) => ({ /* compiler built-in */ });\n+        ($($e:expr,)*) => ({ /* compiler built-in */ });\n+    }\n \n     /// A macro which expands to the line number on which it was invoked.\n     ///"}]}