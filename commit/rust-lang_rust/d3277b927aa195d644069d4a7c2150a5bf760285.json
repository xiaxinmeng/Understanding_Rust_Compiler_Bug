{"sha": "d3277b927aa195d644069d4a7c2150a5bf760285", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMjc3YjkyN2FhMTk1ZDY0NDA2OWQ0YTdjMjE1MGE1YmY3NjAyODU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-08-02T15:23:49Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-08-02T17:35:24Z"}, "message": "compiletest: Support ignoring tests requiring missing LLVM components", "tree": {"sha": "703c48035a80d0ffe9c8a40077893d82ad14caaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/703c48035a80d0ffe9c8a40077893d82ad14caaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3277b927aa195d644069d4a7c2150a5bf760285", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3277b927aa195d644069d4a7c2150a5bf760285", "html_url": "https://github.com/rust-lang/rust/commit/d3277b927aa195d644069d4a7c2150a5bf760285", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3277b927aa195d644069d4a7c2150a5bf760285/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8876ae2c11f341565059b900eeae1254a9accf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8876ae2c11f341565059b900eeae1254a9accf1", "html_url": "https://github.com/rust-lang/rust/commit/e8876ae2c11f341565059b900eeae1254a9accf1"}], "stats": {"total": 62, "additions": 45, "deletions": 17}, "files": [{"sha": "bb5b9296c0aa73e2c5e2b822abf5036ad95834df", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=d3277b927aa195d644069d4a7c2150a5bf760285", "patch": "@@ -1158,13 +1158,19 @@ impl Step for Compiletest {\n             cmd.arg(\"--quiet\");\n         }\n \n+        let mut llvm_components_passed = false;\n+        let mut copts_passed = false;\n         if builder.config.llvm_enabled() {\n             let llvm_config = builder.ensure(native::Llvm { target: builder.config.build });\n             if !builder.config.dry_run {\n                 let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));\n+                let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n                 // Remove trailing newline from llvm-config output.\n-                let llvm_version = llvm_version.trim_end();\n-                cmd.arg(\"--llvm-version\").arg(llvm_version);\n+                cmd.arg(\"--llvm-version\")\n+                    .arg(llvm_version.trim())\n+                    .arg(\"--llvm-components\")\n+                    .arg(llvm_components.trim());\n+                llvm_components_passed = true;\n             }\n             if !builder.is_rust_llvm(target) {\n                 cmd.arg(\"--system-llvm\");\n@@ -1182,15 +1188,13 @@ impl Step for Compiletest {\n             // Only pass correct values for these flags for the `run-make` suite as it\n             // requires that a C++ compiler was configured which isn't always the case.\n             if !builder.config.dry_run && suite == \"run-make-fulldeps\" {\n-                let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n                 cmd.arg(\"--cc\")\n                     .arg(builder.cc(target))\n                     .arg(\"--cxx\")\n                     .arg(builder.cxx(target).unwrap())\n                     .arg(\"--cflags\")\n-                    .arg(builder.cflags(target, GitRepo::Rustc).join(\" \"))\n-                    .arg(\"--llvm-components\")\n-                    .arg(llvm_components.trim());\n+                    .arg(builder.cflags(target, GitRepo::Rustc).join(\" \"));\n+                copts_passed = true;\n                 if let Some(ar) = builder.ar(target) {\n                     cmd.arg(\"--ar\").arg(ar);\n                 }\n@@ -1220,15 +1224,11 @@ impl Step for Compiletest {\n             }\n         }\n \n-        if suite != \"run-make-fulldeps\" {\n-            cmd.arg(\"--cc\")\n-                .arg(\"\")\n-                .arg(\"--cxx\")\n-                .arg(\"\")\n-                .arg(\"--cflags\")\n-                .arg(\"\")\n-                .arg(\"--llvm-components\")\n-                .arg(\"\");\n+        if !llvm_components_passed {\n+            cmd.arg(\"--llvm-components\").arg(\"\");\n+        }\n+        if !copts_passed {\n+            cmd.arg(\"--cc\").arg(\"\").arg(\"--cxx\").arg(\"\").arg(\"--cflags\").arg(\"\");\n         }\n \n         if builder.remote_tested(target) {"}, {"sha": "150997ee807da21abb5527548edaa0fe87111e5d", "filename": "src/test/assembly/asm/aarch64-modifiers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-modifiers.rs?ref=d3277b927aa195d644069d4a7c2150a5bf760285", "patch": "@@ -2,6 +2,7 @@\n // assembly-output: emit-asm\n // compile-flags: -O\n // compile-flags: --target aarch64-unknown-linux-gnu\n+// needs-llvm-components: aarch64\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]"}, {"sha": "b78a8cbb559b4f93cf750959d2d3b0b511938d54", "filename": "src/test/assembly/asm/aarch64-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Faarch64-types.rs?ref=d3277b927aa195d644069d4a7c2150a5bf760285", "patch": "@@ -1,6 +1,7 @@\n // no-system-llvm\n // assembly-output: emit-asm\n // compile-flags: --target aarch64-unknown-linux-gnu\n+// needs-llvm-components: aarch64\n \n #![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]"}, {"sha": "ad4ab63f265a73958be28c45a0742bdeac4a809f", "filename": "src/test/assembly/asm/arm-modifiers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-modifiers.rs?ref=d3277b927aa195d644069d4a7c2150a5bf760285", "patch": "@@ -3,6 +3,7 @@\n // compile-flags: -O\n // compile-flags: --target armv7-unknown-linux-gnueabihf\n // compile-flags: -C target-feature=+neon\n+// needs-llvm-components: arm\n \n #![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]"}, {"sha": "07e25a38e458321e45704c8fb13cc2b8e9a8ccb1", "filename": "src/test/assembly/asm/arm-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Farm-types.rs?ref=d3277b927aa195d644069d4a7c2150a5bf760285", "patch": "@@ -2,6 +2,7 @@\n // assembly-output: emit-asm\n // compile-flags: --target armv7-unknown-linux-gnueabihf\n // compile-flags: -C target-feature=+neon\n+// needs-llvm-components: arm\n \n #![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]"}, {"sha": "b6b3b54cd710125ff104d9145b83c521d02cc8f2", "filename": "src/test/assembly/asm/hexagon-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fhexagon-types.rs?ref=d3277b927aa195d644069d4a7c2150a5bf760285", "patch": "@@ -1,6 +1,7 @@\n // no-system-llvm\n // assembly-output: emit-asm\n // compile-flags: --target hexagon-unknown-linux-musl\n+// needs-llvm-components: hexagon\n \n #![feature(no_core, lang_items, rustc_attrs, repr_simd)]\n #![crate_type = \"rlib\"]"}, {"sha": "77fd5141357e259216ff24496cf0916b7e1ae4c1", "filename": "src/test/assembly/asm/nvptx-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Fnvptx-types.rs?ref=d3277b927aa195d644069d4a7c2150a5bf760285", "patch": "@@ -2,6 +2,7 @@\n // assembly-output: emit-asm\n // compile-flags: --target nvptx64-nvidia-cuda\n // compile-flags: --crate-type cdylib\n+// needs-llvm-components: nvptx\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![no_core]"}, {"sha": "b6735153b5dcf7e25939acb100ee8273a7a803fb", "filename": "src/test/assembly/asm/riscv-modifiers.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fassembly%2Fasm%2Friscv-modifiers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fassembly%2Fasm%2Friscv-modifiers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-modifiers.rs?ref=d3277b927aa195d644069d4a7c2150a5bf760285", "patch": "@@ -3,6 +3,7 @@\n // compile-flags: -O\n // compile-flags: --target riscv64gc-unknown-linux-gnu\n // compile-flags: -C target-feature=+f\n+// needs-llvm-components: riscv\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]"}, {"sha": "0ff0bf1f94982162ced5ef181d4856eb85d8f1e2", "filename": "src/test/assembly/asm/riscv-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fassembly%2Fasm%2Friscv-types.rs?ref=d3277b927aa195d644069d4a7c2150a5bf760285", "patch": "@@ -4,6 +4,7 @@\n //[riscv64] compile-flags: --target riscv64imac-unknown-none-elf\n //[riscv32] compile-flags: --target riscv32imac-unknown-none-elf\n // compile-flags: -C target-feature=+d\n+// needs-llvm-components: riscv\n \n #![feature(no_core, lang_items, rustc_attrs)]\n #![crate_type = \"rlib\"]"}, {"sha": "1c0b77ad9c72727dc998da104d9edb9ba3958476", "filename": "src/test/codegen/abi-efiapi.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fabi-efiapi.rs?ref=d3277b927aa195d644069d4a7c2150a5bf760285", "patch": "@@ -1,12 +1,14 @@\n // Checks if the correct annotation for the efiapi ABI is passed to llvm.\n \n-// revisions:x86_64 i686 arm\n-\n+// revisions:x86_64 i686 aarch64 arm riscv\n // min-llvm-version: 9.0\n+// needs-llvm-components: aarch64 arm riscv\n \n //[x86_64] compile-flags: --target x86_64-unknown-uefi\n //[i686] compile-flags: --target i686-unknown-linux-musl\n+//[aarch64] compile-flags: --target aarch64-unknown-none\n //[arm] compile-flags: --target armv7r-none-eabi\n+//[riscv] compile-flags: --target riscv64gc-unknown-none-elf\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n@@ -22,6 +24,8 @@ trait Copy { }\n \n //x86_64: define win64cc void @has_efiapi\n //i686: define void @has_efiapi\n+//aarch64: define void @has_efiapi\n //arm: define void @has_efiapi\n+//riscv: define void @has_efiapi\n #[no_mangle]\n pub extern \"efiapi\" fn has_efiapi() {}"}, {"sha": "6d25ca56f1488340855427af287ed4f724e0f2da", "filename": "src/test/codegen/avr/avr-func-addrspace.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Favr%2Favr-func-addrspace.rs?ref=d3277b927aa195d644069d4a7c2150a5bf760285", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: -O --target=avr-unknown-unknown --crate-type=rlib\n+// needs-llvm-components: avr\n \n // This test validates that function pointers can be stored in global variables\n // and called upon. It ensures that Rust emits function pointers in the correct"}, {"sha": "ac2d1d1ed8b733cc6cc402aef47926ec0039642a", "filename": "src/test/ui/issues/issue-37131.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fui%2Fissues%2Fissue-37131.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fui%2Fissues%2Fissue-37131.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37131.rs?ref=d3277b927aa195d644069d4a7c2150a5bf760285", "patch": "@@ -3,6 +3,7 @@\n \n // compile-flags: --target=thumbv6m-none-eabi\n // ignore-arm\n+// needs-llvm-components: arm\n \n // error-pattern:target may not be installed\n fn main() { }"}, {"sha": "ddb070ddf9fae8838ac1df8fcdeeedb1a0877a4b", "filename": "src/test/ui/issues/issue-49851/compiler-builtins-error.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49851%2Fcompiler-builtins-error.rs?ref=d3277b927aa195d644069d4a7c2150a5bf760285", "patch": "@@ -1,6 +1,7 @@\n //~ ERROR 1:1: 1:1: can't find crate for `core` [E0463]\n \n // compile-flags: --target thumbv7em-none-eabihf\n+// needs-llvm-components: arm\n #![deny(unsafe_code)]\n #![deny(warnings)]\n #![no_std]"}, {"sha": "e6a9451a060cdfdcb741dd017e788d1331263bd0", "filename": "src/test/ui/issues/issue-50993.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fui%2Fissues%2Fissue-50993.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftest%2Fui%2Fissues%2Fissue-50993.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50993.rs?ref=d3277b927aa195d644069d4a7c2150a5bf760285", "patch": "@@ -1,4 +1,5 @@\n // compile-flags: --crate-type dylib --target thumbv7em-none-eabihf\n+// needs-llvm-components: arm\n // build-pass\n // error-pattern: dropping unsupported crate type `dylib` for target `thumbv7em-none-eabihf`\n "}, {"sha": "047fbe9da14fe08e2cfcfc1f3f8b52f2e1af2876", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3277b927aa195d644069d4a7c2150a5bf760285/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=d3277b927aa195d644069d4a7c2150a5bf760285", "patch": "@@ -1,3 +1,4 @@\n+use std::collections::HashSet;\n use std::env;\n use std::fs::File;\n use std::io::prelude::*;\n@@ -186,6 +187,17 @@ impl EarlyProps {\n             if config.system_llvm && line.starts_with(\"no-system-llvm\") {\n                 return true;\n             }\n+            if let Some(needed_components) =\n+                config.parse_name_value_directive(line, \"needs-llvm-components\")\n+            {\n+                let components: HashSet<_> = config.llvm_components.split_whitespace().collect();\n+                if !needed_components\n+                    .split_whitespace()\n+                    .all(|needed_component| components.contains(needed_component))\n+                {\n+                    return true;\n+                }\n+            }\n             if let Some(actual_version) = config.llvm_version {\n                 if let Some(rest) = line.strip_prefix(\"min-llvm-version:\").map(str::trim) {\n                     let min_version = extract_llvm_version(rest).unwrap();"}]}