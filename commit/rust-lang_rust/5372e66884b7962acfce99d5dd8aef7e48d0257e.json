{"sha": "5372e66884b7962acfce99d5dd8aef7e48d0257e", "node_id": "C_kwDOAAsO6NoAKDUzNzJlNjY4ODRiNzk2MmFjZmNlOTlkNWRkOGFlZjdlNDhkMDI1N2U", "commit": {"author": {"name": "Arpad Borsos", "email": "swatinem@swatinem.de", "date": "2023-01-29T14:20:03Z"}, "committer": {"name": "Arpad Borsos", "email": "swatinem@swatinem.de", "date": "2023-01-29T14:20:03Z"}, "message": "Remove `GenFuture` from core\n\nThe handling of async constructs in the compiler does not rely on `GenFuture`\nanymore since `1.67`, so this code can now be removed from `core`.", "tree": {"sha": "1156be9fe5c449d1770422da857f442a12fd4bb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1156be9fe5c449d1770422da857f442a12fd4bb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5372e66884b7962acfce99d5dd8aef7e48d0257e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZNNjbpmzULCa7LeL/HvKd4JLMpgFAmPWgOsACgkQ/HvKd4JL\nMph5nw//eZZ61Ie2f81HkwF4UQf3si2UGL0LLsPK2ugZPh7vF+e7HVAhHzwJaG/g\nWJQxu6jv/d1XqBKdLr9F+yqJIJiB7Bg/mnF/YhRnIAWg4jvB1/Gj5EUIHvT76VtZ\nVFWhexf4F/b4AHXmWehXMsO2yhImzaUa/nv+5HYeWoi2wnmYEg4yJzxqKcVNBA8a\n5Qb665Js1Vd6l9MuiQ8cu/lFrenb7a03EifZ0aVN7ieWHNzGPmoZKhrrvxPkG1sR\n0Im4clUaz2FOEXMU5A8Os7shoUdZdsPq6W6gClGznAqUsEhjLKd+Yoxx2BlEvX0W\n8JXCcN0nQnP6LgpW0mHqM+9pBWrLZrWoUa3Fi/LpwWuU1Y+Be3pzzM+7zqo+HiTj\ntcxJBTW9f2clRs54pYPhm65AyCc30GZhgF8RZ8BGkiJ4eZCcr9YObNctJPCpGCy+\n+WlwHLWHHk495JqMvTsAV/gScF/qU4BaINl1Kp1fKCxzw7LVzWYJ+tIoKQx2Fv0y\nPPxnY40ks4xsSMyn4roUCJzBXMf0jZBkqEIk+oFgaVPFt6mQcH73KJU5r0JaT2mi\ntyrtldR4noUj5DTFEmt1aveHKqBkWL5MnJs6L+XsTHErcOlq3oOsV/qd6mJVd6gj\nfQTNcmjMhaBwvXxw6YPdYZXc0evTPKkP7yRkeRKHcMoWcjU/94I=\n=eq/Z\n-----END PGP SIGNATURE-----", "payload": "tree 1156be9fe5c449d1770422da857f442a12fd4bb9\nparent d117135f5a9b69ee3adfb1918aa25616758bf692\nauthor Arpad Borsos <swatinem@swatinem.de> 1675002003 +0100\ncommitter Arpad Borsos <swatinem@swatinem.de> 1675002003 +0100\n\nRemove `GenFuture` from core\n\nThe handling of async constructs in the compiler does not rely on `GenFuture`\nanymore since `1.67`, so this code can now be removed from `core`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5372e66884b7962acfce99d5dd8aef7e48d0257e", "html_url": "https://github.com/rust-lang/rust/commit/5372e66884b7962acfce99d5dd8aef7e48d0257e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5372e66884b7962acfce99d5dd8aef7e48d0257e/comments", "author": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d117135f5a9b69ee3adfb1918aa25616758bf692", "url": "https://api.github.com/repos/rust-lang/rust/commits/d117135f5a9b69ee3adfb1918aa25616758bf692", "html_url": "https://github.com/rust-lang/rust/commit/d117135f5a9b69ee3adfb1918aa25616758bf692"}], "stats": {"total": 45, "additions": 0, "deletions": 45}, "files": [{"sha": "46cbcd43530d5eafa2d6bad1d0c4df9ed675bcba", "filename": "library/core/src/future/mod.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/5372e66884b7962acfce99d5dd8aef7e48d0257e/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5372e66884b7962acfce99d5dd8aef7e48d0257e/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fmod.rs?ref=5372e66884b7962acfce99d5dd8aef7e48d0257e", "patch": "@@ -56,51 +56,6 @@ unsafe impl Send for ResumeTy {}\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n unsafe impl Sync for ResumeTy {}\n \n-/// Wrap a generator in a future.\n-///\n-/// This function returns a `GenFuture` underneath, but hides it in `impl Trait` to give\n-/// better error messages (`impl Future` rather than `GenFuture<[closure.....]>`).\n-// This is `const` to avoid extra errors after we recover from `const async fn`\n-#[doc(hidden)]\n-#[unstable(feature = \"gen_future\", issue = \"50547\")]\n-#[rustc_const_unstable(feature = \"gen_future\", issue = \"50547\")]\n-#[inline]\n-pub const fn from_generator<T>(gen: T) -> impl Future<Output = T::Return>\n-where\n-    T: crate::ops::Generator<ResumeTy, Yield = ()>,\n-{\n-    use crate::{\n-        ops::{Generator, GeneratorState},\n-        pin::Pin,\n-        task::Poll,\n-    };\n-\n-    #[rustc_diagnostic_item = \"gen_future\"]\n-    struct GenFuture<T: Generator<ResumeTy, Yield = ()>>(T);\n-\n-    // We rely on the fact that async/await futures are immovable in order to create\n-    // self-referential borrows in the underlying generator.\n-    impl<T: Generator<ResumeTy, Yield = ()>> !Unpin for GenFuture<T> {}\n-\n-    impl<T: Generator<ResumeTy, Yield = ()>> Future for GenFuture<T> {\n-        type Output = T::Return;\n-        #[track_caller]\n-        fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n-            // SAFETY: Safe because we're !Unpin + !Drop, and this is just a field projection.\n-            let gen = unsafe { Pin::map_unchecked_mut(self, |s| &mut s.0) };\n-\n-            // Resume the generator, turning the `&mut Context` into a `NonNull` raw pointer. The\n-            // `.await` lowering will safely cast that back to a `&mut Context`.\n-            match gen.resume(ResumeTy(NonNull::from(cx).cast::<Context<'static>>())) {\n-                GeneratorState::Yielded(()) => Poll::Pending,\n-                GeneratorState::Complete(x) => Poll::Ready(x),\n-            }\n-        }\n-    }\n-\n-    GenFuture(gen)\n-}\n-\n #[lang = \"get_context\"]\n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]"}]}