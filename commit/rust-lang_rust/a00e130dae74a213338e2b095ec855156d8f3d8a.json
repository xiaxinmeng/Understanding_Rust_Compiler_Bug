{"sha": "a00e130dae74a213338e2b095ec855156d8f3d8a", "node_id": "C_kwDOAAsO6NoAKGEwMGUxMzBkYWU3NGEyMTMzMzhlMmIwOTVlYzg1NTE1NmQ4ZjNkOGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-29T16:08:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-29T16:08:35Z"}, "message": "Auto merge of #93457 - matthiaskrgr:rollup-e43ry1l, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #88205 (Add Explanation For Error E0772)\n - #92274 (Add `intrinsics::const_deallocate`)\n - #93236 (Make `NonNull::new` `const`)\n - #93299 (Fix dot separator when there is no source link)\n - #93410 (kmc-solid: Implement `net::FileDesc::duplicate`)\n - #93424 (fix nit)\n - #93431 (remove unused `jemallocator` crate)\n - #93453 (Add GUI theme change test)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "d8afd415e451e7e736cf2ca49902c67d75207744", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8afd415e451e7e736cf2ca49902c67d75207744"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a00e130dae74a213338e2b095ec855156d8f3d8a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a00e130dae74a213338e2b095ec855156d8f3d8a", "html_url": "https://github.com/rust-lang/rust/commit/a00e130dae74a213338e2b095ec855156d8f3d8a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a00e130dae74a213338e2b095ec855156d8f3d8a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d08e816333281b0c0fb5a99c2c15d8084312e41a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d08e816333281b0c0fb5a99c2c15d8084312e41a", "html_url": "https://github.com/rust-lang/rust/commit/d08e816333281b0c0fb5a99c2c15d8084312e41a"}, {"sha": "d62b414b808be3d75204d6b15cf8547643703109", "url": "https://api.github.com/repos/rust-lang/rust/commits/d62b414b808be3d75204d6b15cf8547643703109", "html_url": "https://github.com/rust-lang/rust/commit/d62b414b808be3d75204d6b15cf8547643703109"}], "stats": {"total": 467, "additions": 437, "deletions": 30}, "files": [{"sha": "b05351a1e9694c03017f3d2e330a7ff86d5f3638", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -3319,7 +3319,6 @@ dependencies = [\n  \"rustc_codegen_ssa\",\n  \"rustc_driver\",\n  \"tikv-jemalloc-sys\",\n- \"tikv-jemallocator\",\n ]\n \n [[package]]\n@@ -5164,16 +5163,6 @@ dependencies = [\n  \"libc\",\n ]\n \n-[[package]]\n-name = \"tikv-jemallocator\"\n-version = \"0.4.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"3c14a5a604eb8715bc5785018a37d00739b180bcf609916ddf4393d33d49ccdf\"\n-dependencies = [\n- \"libc\",\n- \"tikv-jemalloc-sys\",\n-]\n-\n [[package]]\n name = \"time\"\n version = \"0.1.43\""}, {"sha": "696c003a587ac91b211cd84dd515aa1ebada3a05", "filename": "compiler/rustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/compiler%2Frustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/compiler%2Frustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc%2FCargo.toml?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -15,11 +15,7 @@ version = '0.4.0'\n optional = true\n features = ['unprefixed_malloc_on_supported_platforms']\n \n-[dependencies.tikv-jemallocator]\n-version = '0.4.0'\n-optional = true\n-\n [features]\n-jemalloc = ['tikv-jemalloc-sys', 'tikv-jemallocator']\n+jemalloc = ['tikv-jemalloc-sys']\n llvm = ['rustc_driver/llvm']\n max_level_info = ['rustc_driver/max_level_info']"}, {"sha": "c654232c10a5755c8bf3aa8383d36509f27e5d9a", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -369,6 +369,16 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 }\n             }\n \n+            sym::const_allocate => {\n+                // returns a null pointer at runtime.\n+                bx.const_null(bx.type_i8p())\n+            }\n+\n+            sym::const_deallocate => {\n+                // nop at runtime.\n+                return;\n+            }\n+\n             // This requires that atomic intrinsics follow a specific naming pattern:\n             // \"atomic_<operation>[_<ordering>]\", and no ordering means SeqCst\n             name if name_str.starts_with(\"atomic_\") => {"}, {"sha": "89717b75f12815abea8069f2d36d695b7ff3b205", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -347,6 +347,33 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n                 )?;\n                 ecx.write_pointer(ptr, dest)?;\n             }\n+            sym::const_deallocate => {\n+                let ptr = ecx.read_pointer(&args[0])?;\n+                let size = ecx.read_scalar(&args[1])?.to_machine_usize(ecx)?;\n+                let align = ecx.read_scalar(&args[2])?.to_machine_usize(ecx)?;\n+\n+                let size = Size::from_bytes(size);\n+                let align = match Align::from_bytes(align) {\n+                    Ok(a) => a,\n+                    Err(err) => throw_ub_format!(\"align has to be a power of 2, {}\", err),\n+                };\n+\n+                // If an allocation is created in an another const,\n+                // we don't deallocate it.\n+                let (alloc_id, _, _) = ecx.memory.ptr_get_alloc(ptr)?;\n+                let is_allocated_in_another_const = matches!(\n+                    ecx.tcx.get_global_alloc(alloc_id),\n+                    Some(interpret::GlobalAlloc::Memory(_))\n+                );\n+\n+                if !is_allocated_in_another_const {\n+                    ecx.memory.deallocate(\n+                        ptr,\n+                        Some((size, align)),\n+                        interpret::MemoryKind::Machine(MemoryKind::Heap),\n+                    )?;\n+                }\n+            }\n             _ => {\n                 return Err(ConstEvalErrKind::NeedsRfc(format!(\n                     \"calling intrinsic `{}`\","}, {"sha": "c401f65eddaedde02a099bc37ac22533871b9e0d", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -472,6 +472,7 @@ E0768: include_str!(\"./error_codes/E0768.md\"),\n E0769: include_str!(\"./error_codes/E0769.md\"),\n E0770: include_str!(\"./error_codes/E0770.md\"),\n E0771: include_str!(\"./error_codes/E0771.md\"),\n+E0772: include_str!(\"./error_codes/E0772.md\"),\n E0773: include_str!(\"./error_codes/E0773.md\"),\n E0774: include_str!(\"./error_codes/E0774.md\"),\n E0775: include_str!(\"./error_codes/E0775.md\"),\n@@ -642,5 +643,4 @@ E0787: include_str!(\"./error_codes/E0787.md\"),\n //  E0723, // unstable feature in `const` context\n     E0726, // non-explicit (not `'_`) elided lifetime in unsupported position\n //  E0738, // Removed; errored on `#[track_caller] fn`s in `extern \"Rust\" { ... }`.\n-    E0772, // `'static' obligation coming from `impl dyn Trait {}` or `impl Foo for dyn Bar {}`.\n }"}, {"sha": "262e52351ef01c203ad655f7c2683dc6915e8a8a", "filename": "compiler/rustc_error_codes/src/error_codes/E0772.md", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0772.md", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0772.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0772.md?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -0,0 +1,89 @@\n+A trait object has some specific lifetime `'1`, but it was used in a way that\n+requires it to have a `'static` lifetime.\n+\n+Example of erroneous code:\n+\n+```compile_fail,E0772\n+trait BooleanLike {}\n+trait Person {}\n+\n+impl BooleanLike for bool {}\n+\n+impl dyn Person {\n+    fn is_cool(&self) -> bool {\n+        // hey you, you're pretty cool\n+        true\n+    }\n+}\n+\n+fn get_is_cool<'p>(person: &'p dyn Person) -> impl BooleanLike {\n+    // error: `person` has an anonymous lifetime `'p` but calling\n+    //        `print_cool_fn` introduces an implicit `'static` lifetime\n+    //        requirement\n+    person.is_cool()\n+}\n+```\n+\n+The trait object `person` in the function `get_is_cool`, while already being\n+behind a reference with lifetime `'p`, also has it's own implicit lifetime,\n+`'2`.\n+\n+Lifetime `'2` represents the data the trait object might hold inside, for\n+example:\n+\n+```\n+trait MyTrait {}\n+\n+struct MyStruct<'a>(&'a i32);\n+\n+impl<'a> MyTrait for MyStruct<'a> {}\n+```\n+\n+With this scenario, if a trait object of `dyn MyTrait + '2` was made from\n+`MyStruct<'a>`, `'a` must live as long, if not longer than `'2`. This allows the\n+trait object's internal data to be accessed safely from any trait methods. This\n+rule also goes for any lifetime any struct made into a trait object may have.\n+\n+In the implementation for `dyn Person`, the `'2` lifetime representing the\n+internal data was ommitted, meaning that the compiler inferred the lifetime\n+`'static`. As a result, the implementation's `is_cool` is inferred by the\n+compiler to look like this:\n+\n+```\n+# trait Person {}\n+#\n+# impl dyn Person {\n+fn is_cool<'a>(self: &'a (dyn Person + 'static)) -> bool {unimplemented!()}\n+# }\n+```\n+\n+While the `get_is_cool` function is inferred to look like this:\n+\n+```\n+# trait Person {}\n+# trait BooleanLike {}\n+#\n+fn get_is_cool<'p, R: BooleanLike>(person: &'p (dyn Person + 'p)) -> R {\n+    unimplemented!()\n+}\n+```\n+\n+Which brings us to the core of the problem; the assignment of type\n+`&'_ (dyn Person + '_)` to type `&'_ (dyn Person + 'static)` is impossible.\n+\n+Fixing it is as simple as being generic over lifetime `'2`, as to prevent the\n+compiler from inferring it as `'static`:\n+\n+```\n+# trait Person {}\n+#\n+impl<'d> dyn Person + 'd {/* ... */}\n+\n+// This works too, and is more elegant:\n+//impl dyn Person + '_ {/* ... */}\n+```\n+\n+See the [Rust Reference on Trait Object Lifetime Bounds][trait-objects] for\n+more information on trait object lifetimes.\n+\n+[trait-object-lifetime-bounds]: https://doc.rust-lang.org/reference/types/trait-object.html#trait-object-lifetime-bounds"}, {"sha": "f70fde2a040a15f1c8240ff9291c12682498f111", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -1810,7 +1810,7 @@ impl<'tcx> TyS<'tcx> {\n     pub fn sequence_element_type(&self, tcx: TyCtxt<'tcx>) -> Ty<'tcx> {\n         match self.kind() {\n             Array(ty, _) | Slice(ty) => ty,\n-            Str => tcx.mk_mach_uint(ty::UintTy::U8),\n+            Str => tcx.types.u8,\n             _ => bug!(\"`sequence_element_type` called on non-sequence value: {}\", self),\n         }\n     }"}, {"sha": "9fba9c77d0711bbdbab279610951a4b086c41f38", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -461,6 +461,7 @@ symbols! {\n         const_async_blocks,\n         const_compare_raw_pointers,\n         const_constructor,\n+        const_deallocate,\n         const_eval_limit,\n         const_eval_select,\n         const_eval_select_ct,"}, {"sha": "74f6f50d41289c83fb359418989117fb98ebe92d", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -297,6 +297,11 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n             sym::const_allocate => {\n                 (0, vec![tcx.types.usize, tcx.types.usize], tcx.mk_mut_ptr(tcx.types.u8))\n             }\n+            sym::const_deallocate => (\n+                0,\n+                vec![tcx.mk_mut_ptr(tcx.types.u8), tcx.types.usize, tcx.types.usize],\n+                tcx.mk_unit(),\n+            ),\n \n             sym::ptr_offset_from => {\n                 (1, vec![tcx.mk_imm_ptr(param(0)), tcx.mk_imm_ptr(param(0))], tcx.types.isize)"}, {"sha": "b5228397f0a9990f10cd245c838c307dec120cfe", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -1914,10 +1914,31 @@ extern \"rust-intrinsic\" {\n     #[rustc_const_unstable(feature = \"const_raw_ptr_comparison\", issue = \"53020\")]\n     pub fn ptr_guaranteed_ne<T>(ptr: *const T, other: *const T) -> bool;\n \n-    /// Allocate at compile time. Should not be called at runtime.\n+    /// Allocates a block of memory at compile time.\n+    /// At runtime, just returns a null pointer.\n+    ///\n+    /// # Safety\n+    ///\n+    /// - The `align` argument must be a power of two.\n+    ///    - At compile time, a compile error occurs if this constraint is violated.\n+    ///    - At runtime, it is not checked.\n     #[rustc_const_unstable(feature = \"const_heap\", issue = \"79597\")]\n     pub fn const_allocate(size: usize, align: usize) -> *mut u8;\n \n+    /// Deallocates a memory which allocated by `intrinsics::const_allocate` at compile time.\n+    /// At runtime, does nothing.\n+    ///\n+    /// # Safety\n+    ///\n+    /// - The `align` argument must be a power of two.\n+    ///    - At compile time, a compile error occurs if this constraint is violated.\n+    ///    - At runtime, it is not checked.\n+    /// - If the `ptr` is created in an another const, this intrinsic doesn't deallocate it.\n+    /// - If the `ptr` is pointing to a local variable, this intrinsic doesn't deallocate it.\n+    #[rustc_const_unstable(feature = \"const_heap\", issue = \"79597\")]\n+    #[cfg(not(bootstrap))]\n+    pub fn const_deallocate(ptr: *mut u8, size: usize, align: usize);\n+\n     /// Determines whether the raw bytes of the two values are equal.\n     ///\n     /// This is particularly handy for arrays, since it allows things like just"}, {"sha": "3f5d3f62c96044b587868088eb7c5bad076a163e", "filename": "library/core/src/ptr/non_null.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fnon_null.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -211,8 +211,9 @@ impl<T: ?Sized> NonNull<T> {\n     /// }\n     /// ```\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n+    #[rustc_const_unstable(feature = \"const_nonnull_new\", issue = \"93235\")]\n     #[inline]\n-    pub fn new(ptr: *mut T) -> Option<Self> {\n+    pub const fn new(ptr: *mut T) -> Option<Self> {\n         if !ptr.is_null() {\n             // SAFETY: The pointer is already checked and is not null\n             Some(unsafe { Self::new_unchecked(ptr) })"}, {"sha": "df940de479532a6ad55d3b96856a58b08aa8961f", "filename": "library/core/tests/intrinsics.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/library%2Fcore%2Ftests%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/library%2Fcore%2Ftests%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fintrinsics.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -80,3 +80,25 @@ fn test_hints_in_const_contexts() {\n         assert!(42u32 == core::hint::black_box(42u32));\n     }\n }\n+\n+#[cfg(not(bootstrap))]\n+#[test]\n+fn test_const_allocate_at_runtime() {\n+    use core::intrinsics::const_allocate;\n+    unsafe {\n+        assert!(const_allocate(4, 4).is_null());\n+    }\n+}\n+\n+#[cfg(not(bootstrap))]\n+#[test]\n+fn test_const_deallocate_at_runtime() {\n+    use core::intrinsics::const_deallocate;\n+    const X: &u32 = &42u32;\n+    let x = &0u32;\n+    unsafe {\n+        const_deallocate(X as *const _ as *mut u8, 4, 4); // nop\n+        const_deallocate(x as *const _ as *mut u8, 4, 4); // nop\n+        const_deallocate(core::ptr::null_mut(), 1, 1); // nop\n+    }\n+}"}, {"sha": "a2bef2012cf9e1fd5dda02cc871ac99f93725bd6", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -13,10 +13,13 @@\n #![feature(const_bool_to_option)]\n #![feature(const_cell_into_inner)]\n #![feature(const_convert)]\n+#![feature(const_heap)]\n #![feature(const_maybe_uninit_as_mut_ptr)]\n #![feature(const_maybe_uninit_assume_init)]\n #![feature(const_maybe_uninit_assume_init_read)]\n+#![feature(const_nonnull_new)]\n #![feature(const_num_from_num)]\n+#![feature(const_ptr_as_ref)]\n #![feature(const_ptr_read)]\n #![feature(const_ptr_write)]\n #![feature(const_ptr_offset)]"}, {"sha": "bbfd2d64dda404a605d92f408eb944654ff2b9f1", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -274,6 +274,21 @@ fn test_unsized_nonnull() {\n     assert!(ys == zs);\n }\n \n+#[test]\n+fn test_const_nonnull_new() {\n+    const {\n+        assert!(NonNull::new(core::ptr::null_mut::<()>()).is_none());\n+\n+        let value = &mut 0u32;\n+        let mut ptr = NonNull::new(value).unwrap();\n+        unsafe { *ptr.as_mut() = 42 };\n+\n+        let reference = unsafe { &*ptr.as_ref() };\n+        assert!(*reference == *value);\n+        assert!(*reference == 42);\n+    };\n+}\n+\n #[test]\n #[allow(warnings)]\n // Have a symbol for the test below. It doesn\u2019t need to be an actual variadic function, match the"}, {"sha": "eb06a6dd927e6c2274c296d37fcf450b247a771f", "filename": "library/std/src/sys/solid/abi/sockets.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fabi%2Fsockets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fabi%2Fsockets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fabi%2Fsockets.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -175,6 +175,9 @@ extern \"C\" {\n     #[link_name = \"SOLID_NET_Close\"]\n     pub fn close(s: c_int) -> c_int;\n \n+    #[link_name = \"SOLID_NET_Dup\"]\n+    pub fn dup(s: c_int) -> c_int;\n+\n     #[link_name = \"SOLID_NET_GetPeerName\"]\n     pub fn getpeername(s: c_int, name: *mut sockaddr, namelen: *mut socklen_t) -> c_int;\n "}, {"sha": "c91ecce4d728b70acd91b977c8084643ba8910d1", "filename": "library/std/src/sys/solid/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fsolid%2Fnet.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -107,7 +107,7 @@ impl FileDesc {\n     }\n \n     fn duplicate(&self) -> io::Result<FileDesc> {\n-        super::unsupported()\n+        cvt(unsafe { netc::dup(self.fd) }).map(Self::new)\n     }\n }\n "}, {"sha": "c547e12f5b6cec21a683c8af94cf23b52c671186", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -72,7 +72,7 @@ ENV PATH=\"/node-v14.4.0-linux-x64/bin:${PATH}\"\n # https://github.com/puppeteer/puppeteer/issues/375\n #\n # We also specify the version in case we need to update it to go around cache limitations.\n-RUN npm install -g browser-ui-test@0.5.3 --unsafe-perm=true\n+RUN npm install -g browser-ui-test@0.5.8 --unsafe-perm=true\n \n ENV RUST_CONFIGURE_ARGS \\\n   --build=x86_64-unknown-linux-gnu \\"}, {"sha": "0b6faa4b13ed2e96c2756d1fdfad9d8bb9493a7c", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -1676,11 +1676,12 @@ fn render_rightside(\n         containing_item.stable_since(tcx),\n         const_stable_since,\n     );\n-    if has_stability {\n+    let mut tmp_buf = Buffer::empty_from(w);\n+    write_srclink(cx, item, &mut tmp_buf);\n+    if has_stability && !tmp_buf.is_empty() {\n         w.write_str(\" \u00b7 \");\n     }\n-\n-    write_srclink(cx, item, w);\n+    w.push_buffer(tmp_buf);\n     w.write_str(\"</div>\");\n }\n "}, {"sha": "73edee64e4372040593e737ba421fe7bcfc0c850", "filename": "src/test/rustdoc-gui/theme-change.goml", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ftheme-change.goml?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -9,3 +9,19 @@ click: \"#theme-choices > button:last-child\"\n wait-for: 500\n // should be the light theme so let's check the color\n assert-css: (\"body\", { \"background-color\": \"rgb(255, 255, 255)\" })\n+\n+goto: file://|DOC_PATH|/settings.html\n+click: \"#theme-light\"\n+wait-for: 500\n+assert-css: (\"body\", { \"background-color\": \"rgb(255, 255, 255)\" })\n+assert-local-storage: { \"rustdoc-theme\": \"light\" }\n+\n+click: \"#theme-dark\"\n+wait-for: 500\n+assert-css: (\"body\", { \"background-color\": \"rgb(53, 53, 53)\" })\n+assert-local-storage: { \"rustdoc-theme\": \"dark\" }\n+\n+click: \"#theme-ayu\"\n+wait-for: 500\n+assert-css: (\"body\", { \"background-color\": \"rgb(15, 20, 25)\" })\n+assert-local-storage: { \"rustdoc-theme\": \"ayu\" }"}, {"sha": "bffe5030a84fd9674fe0cd97d8d744ec8853555e", "filename": "src/test/rustdoc/version-separator-without-source.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Frustdoc%2Fversion-separator-without-source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Frustdoc%2Fversion-separator-without-source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fversion-separator-without-source.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -0,0 +1,23 @@\n+#![doc(html_no_source)]\n+#![feature(staged_api)]\n+#![stable(feature = \"bar\", since = \"1.0\")]\n+#![crate_name = \"foo\"]\n+\n+// @has foo/fn.foo.html\n+// @has - '//div[@class=\"main-heading\"]/*[@class=\"out-of-band\"]' '1.0 \u00b7 '\n+// @!has - '//div[@class=\"main-heading\"]/*[@class=\"out-of-band\"]' '1.0 \u00b7 source \u00b7 '\n+#[stable(feature = \"bar\", since = \"1.0\")]\n+pub fn foo() {}\n+\n+// @has foo/struct.Bar.html\n+// @has - '//div[@class=\"main-heading\"]/*[@class=\"out-of-band\"]' '1.0 \u00b7 '\n+// @!has - '//div[@class=\"main-heading\"]/*[@class=\"out-of-band\"]' '1.0 \u00b7 source \u00b7 '\n+#[stable(feature = \"bar\", since = \"1.0\")]\n+pub struct Bar;\n+\n+impl Bar {\n+    // @has - '//div[@id=\"method.bar\"]/*[@class=\"rightside\"]' '2.0'\n+    // @!has - '//div[@id=\"method.bar\"]/*[@class=\"rightside\"]' '2.0 \u00b7'\n+    #[stable(feature = \"foobar\", since = \"2.0\")]\n+    pub fn bar() {}\n+}"}, {"sha": "ac9e8b64b48972476ffa83557b561f4032b8afb9", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -6,11 +6,10 @@ use std::intrinsics;\n const FOO: i32 = foo();\n const fn foo() -> i32 {\n     unsafe {\n-        let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n+        let _ = intrinsics::const_allocate(4, 3) as *mut i32;\n         //~^ error: evaluation of constant value failed\n     }\n     1\n-\n }\n \n fn main() {}"}, {"sha": "2628a78455c76b3f5a5f3100852c11807ecb8a26", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_errors.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_errors.stderr?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -4,7 +4,7 @@ error[E0080]: evaluation of constant value failed\n LL | const FOO: i32 = foo();\n    |                  ----- inside `FOO` at $DIR/alloc_intrinsic_errors.rs:6:18\n ...\n-LL |         let _ = intrinsics::const_allocate(4, 3) as * mut i32;\n+LL |         let _ = intrinsics::const_allocate(4, 3) as *mut i32;\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |                 |\n    |                 align has to be a power of 2, `3` is not a power of 2"}, {"sha": "407e69d41a0fa2c8073533c52717afdca0da773e", "filename": "src/test/ui/consts/const-eval/heap/alloc_intrinsic_zero_sized.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_zero_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_zero_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Falloc_intrinsic_zero_sized.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(inline_const)]\n+\n+use std::intrinsics;\n+\n+struct ZST;\n+\n+fn main() {\n+    const {\n+        unsafe {\n+            let _ = intrinsics::const_allocate(0, 0) as *mut ZST;\n+        }\n+    }\n+}"}, {"sha": "aac90cd54cc413f4597ec4eab5d603af3609a4de", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -0,0 +1,36 @@\n+// run-pass\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_mut_refs)]\n+\n+use std::intrinsics;\n+\n+const _X: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 4);\n+};\n+\n+const Y: &u32 = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4) as *mut u32;\n+    *ptr = 42;\n+    &*ptr\n+};\n+\n+const Z: &u32 = &42;\n+\n+const _Z: () = unsafe {\n+    let ptr1 = Y as *const _ as *mut u8;\n+    intrinsics::const_deallocate(ptr1, 4, 4); // nop\n+    intrinsics::const_deallocate(ptr1, 2, 4); // nop\n+    intrinsics::const_deallocate(ptr1, 4, 2); // nop\n+\n+    let ptr2 = Z as *const _ as *mut u8;\n+    intrinsics::const_deallocate(ptr2, 4, 4); // nop\n+    intrinsics::const_deallocate(ptr2, 2, 4); // nop\n+    intrinsics::const_deallocate(ptr2, 4, 2); // nop\n+};\n+\n+fn main() {\n+    assert_eq!(*Y, 42);\n+    assert_eq!(*Z, 42);\n+}"}, {"sha": "b6d89a58dce7bde266d6f9b85b324fd748482f7c", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_dangling.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -0,0 +1,22 @@\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(const_mut_refs)]\n+\n+use std::intrinsics;\n+\n+const _X: &'static u8 = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 4);\n+    &*ptr\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+const _Y: u8 = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    let reference = &*ptr;\n+    intrinsics::const_deallocate(ptr, 4, 4);\n+    *reference\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+fn main() {}"}, {"sha": "4eb1c42e1f7670ab9756251047636fc958bdf8a1", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_dangling.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_dangling.stderr?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -0,0 +1,15 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_dangling.rs:10:5\n+   |\n+LL |     &*ptr\n+   |     ^^^^^ pointer to alloc2 was dereferenced after this allocation got freed\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_dangling.rs:18:5\n+   |\n+LL |     *reference\n+   |     ^^^^^^^^^^ pointer to alloc4 was dereferenced after this allocation got freed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "4010b476990dcc4bf7355fa50b36118e67bf208c", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_duplicate.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -0,0 +1,13 @@\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+\n+use std::intrinsics;\n+\n+const _X: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 4);\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+fn main() {}"}, {"sha": "8177a08504b0b32779434cfc4e514c1059d31c4e", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_duplicate.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_duplicate.stderr?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -0,0 +1,9 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_duplicate.rs:9:5\n+   |\n+LL |     intrinsics::const_deallocate(ptr, 4, 4);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ pointer to alloc2 was dereferenced after this allocation got freed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "031d70fdc8897489f9f87c43453c83601694c9ea", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_incorrect_layout.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -0,0 +1,29 @@\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+\n+use std::intrinsics;\n+\n+const _X: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 2);\n+    //~^ error: evaluation of constant value failed\n+};\n+const _Y: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 2, 4);\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+const _Z: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 3, 4);\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+const _W: () = unsafe {\n+    let ptr = intrinsics::const_allocate(4, 4);\n+    intrinsics::const_deallocate(ptr, 4, 3);\n+    //~^ error: evaluation of constant value failed\n+};\n+\n+fn main() {}"}, {"sha": "650b409b1908a30a7fda38572f080c8ec8d44cf6", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_incorrect_layout.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_incorrect_layout.stderr?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -0,0 +1,27 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_incorrect_layout.rs:8:5\n+   |\n+LL |     intrinsics::const_deallocate(ptr, 4, 2);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect layout on deallocation: alloc2 has size 4 and alignment 4, but gave size 4 and alignment 2\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_incorrect_layout.rs:13:5\n+   |\n+LL |     intrinsics::const_deallocate(ptr, 2, 4);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect layout on deallocation: alloc4 has size 4 and alignment 4, but gave size 2 and alignment 4\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_incorrect_layout.rs:19:5\n+   |\n+LL |     intrinsics::const_deallocate(ptr, 3, 4);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ incorrect layout on deallocation: alloc6 has size 4 and alignment 4, but gave size 3 and alignment 4\n+\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/dealloc_intrinsic_incorrect_layout.rs:25:5\n+   |\n+LL |     intrinsics::const_deallocate(ptr, 4, 3);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ align has to be a power of 2, `3` is not a power of 2\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "84fb4d2ea870f2b73802b397e7d95563eb4978dc", "filename": "src/test/ui/consts/const-eval/heap/dealloc_intrinsic_zero_sized.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_zero_sized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_zero_sized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fheap%2Fdealloc_intrinsic_zero_sized.rs?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -0,0 +1,17 @@\n+// run-pass\n+#![feature(core_intrinsics)]\n+#![feature(const_heap)]\n+#![feature(inline_const)]\n+\n+use std::intrinsics;\n+\n+fn main() {\n+    const {\n+        unsafe {\n+            let ptr1 = intrinsics::const_allocate(0, 0);\n+            let ptr2 = intrinsics::const_allocate(0, 0);\n+            intrinsics::const_deallocate(ptr1, 0, 0);\n+            intrinsics::const_deallocate(ptr2, 0, 0);\n+        }\n+    }\n+}"}, {"sha": "b125eacfb6cf4444d6f351b3f94438304477e548", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound-needing-more-suggestions.stderr?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -38,4 +38,5 @@ LL |     impl MyTrait for Box<dyn ObjectTrait<Assoc = i32> + '_> {\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0515`.\n+Some errors have detailed explanations: E0515, E0772.\n+For more information about an error, try `rustc --explain E0515`."}, {"sha": "ed094c1365caa6a72de2ca9b6580b1ed59c317c5", "filename": "src/test/ui/suggestions/impl-on-dyn-trait-with-implicit-static-bound.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a00e130dae74a213338e2b095ec855156d8f3d8a/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-on-dyn-trait-with-implicit-static-bound.stderr?ref=a00e130dae74a213338e2b095ec855156d8f3d8a", "patch": "@@ -131,4 +131,5 @@ LL |     impl MyTrait for Box<dyn ObjectTrait + '_> {\n \n error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0759`.\n+Some errors have detailed explanations: E0759, E0772.\n+For more information about an error, try `rustc --explain E0759`."}]}