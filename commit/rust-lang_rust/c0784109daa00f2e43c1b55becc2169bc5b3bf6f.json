{"sha": "c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "node_id": "C_kwDOAAsO6NoAKGMwNzg0MTA5ZGFhMDBmMmU0M2MxYjU1YmVjYzIxNjliYzViM2JmNmY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-09T08:30:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-09T08:30:14Z"}, "message": "Auto merge of #102822 - notriddle:rollup-mgfjb62, r=notriddle\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #99818 (don't ICE when normalizing closure input tys)\n - #102514 (Don't repeat lifetime names from outer binder in print)\n - #102661 (rustdoc: Document effect of fundamental types)\n - #102782 (Add regression test for #102124)\n - #102790 (Fix llvm-tblgen for cross compiling)\n - #102807 (Document `rust-docs-json` component)\n - #102812 (Remove empty core::lazy and std::lazy)\n - #102818 (Clean up rustdoc highlight.rs imports a bit)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "c25c0bbc85ee9ea8f41d31d412239ae034062d96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c25c0bbc85ee9ea8f41d31d412239ae034062d96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "html_url": "https://github.com/rust-lang/rust/commit/c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f382c2748aec2ada91eff88840c996644ff0f70d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f382c2748aec2ada91eff88840c996644ff0f70d", "html_url": "https://github.com/rust-lang/rust/commit/f382c2748aec2ada91eff88840c996644ff0f70d"}, {"sha": "16a1eeacbf3f9ebf044708da46fe4db339e3b96c", "url": "https://api.github.com/repos/rust-lang/rust/commits/16a1eeacbf3f9ebf044708da46fe4db339e3b96c", "html_url": "https://github.com/rust-lang/rust/commit/16a1eeacbf3f9ebf044708da46fe4db339e3b96c"}], "stats": {"total": 440, "additions": 339, "deletions": 101}, "files": [{"sha": "a581726a15c9c4ff6bfc77e9d241074a365b3a62", "filename": "compiler/rustc_borrowck/src/type_check/canonical.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fcanonical.rs?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -52,11 +52,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 Some(error_info) => error_info.to_universe_info(old_universe),\n                 None => UniverseInfo::other(),\n             };\n-            for u in old_universe..universe {\n-                self.borrowck_context\n-                    .constraints\n-                    .universe_causes\n-                    .insert(u + 1, universe_info.clone());\n+            for u in (old_universe + 1)..=universe {\n+                self.borrowck_context.constraints.universe_causes.insert(u, universe_info.clone());\n             }\n         }\n \n@@ -71,15 +68,13 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n+        let old_universe = self.infcx.universe();\n+\n         let (instantiated, _) =\n             self.infcx.instantiate_canonical_with_fresh_inference_vars(span, canonical);\n \n-        for u in 0..canonical.max_universe.as_u32() {\n-            let info = UniverseInfo::other();\n-            self.borrowck_context\n-                .constraints\n-                .universe_causes\n-                .insert(ty::UniverseIndex::from_u32(u), info);\n+        for u in (old_universe + 1)..=self.infcx.universe() {\n+            self.borrowck_context.constraints.universe_causes.insert(u, UniverseInfo::other());\n         }\n \n         instantiated"}, {"sha": "02909592637d8cb1c3bed880cf79b8fdf8a2224a", "filename": "compiler/rustc_borrowck/src/type_check/free_region_relations.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Ffree_region_relations.rs?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -8,7 +8,6 @@ use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::traits::query::OutlivesBound;\n use rustc_middle::ty::{self, RegionVid, Ty};\n-use rustc_span::DUMMY_SP;\n use rustc_trait_selection::traits::query::type_op::{self, TypeOp};\n use std::rc::Rc;\n use type_op::TypeOpOutput;\n@@ -219,6 +218,7 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n     }\n \n     pub(crate) fn create(mut self) -> CreateResult<'tcx> {\n+        let span = self.infcx.tcx.def_span(self.universal_regions.defining_ty.def_id());\n         let unnormalized_input_output_tys = self\n             .universal_regions\n             .unnormalized_input_tys\n@@ -250,7 +250,7 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n                         self.infcx\n                             .tcx\n                             .sess\n-                            .delay_span_bug(DUMMY_SP, &format!(\"failed to normalize {:?}\", ty));\n+                            .delay_span_bug(span, &format!(\"failed to normalize {:?}\", ty));\n                         TypeOpOutput {\n                             output: self.infcx.tcx.ty_error(),\n                             constraints: None,\n@@ -301,8 +301,8 @@ impl<'tcx> UniversalRegionRelationsBuilder<'_, 'tcx> {\n                 &self.region_bound_pairs,\n                 self.implicit_region_bound,\n                 self.param_env,\n-                Locations::All(DUMMY_SP),\n-                DUMMY_SP,\n+                Locations::All(span),\n+                span,\n                 ConstraintCategory::Internal,\n                 &mut self.constraints,\n             )"}, {"sha": "a66ddd27dbb2ee178b2fccfc6924e63fb7ee797a", "filename": "compiler/rustc_borrowck/src/type_check/input_output.rs", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Finput_output.rs?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -7,16 +7,11 @@\n //! `RETURN_PLACE` the MIR arguments) are always fully normalized (and\n //! contain revealed `impl Trait` values).\n \n-use crate::type_check::constraint_conversion::ConstraintConversion;\n use rustc_index::vec::Idx;\n use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::mir::*;\n use rustc_middle::ty::Ty;\n use rustc_span::Span;\n-use rustc_span::DUMMY_SP;\n-use rustc_trait_selection::traits::query::type_op::{self, TypeOp};\n-use rustc_trait_selection::traits::query::Fallible;\n-use type_op::TypeOpOutput;\n \n use crate::universal_regions::UniversalRegions;\n \n@@ -185,7 +180,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n         }\n     }\n \n-    #[instrument(skip(self, span), level = \"debug\")]\n+    #[instrument(skip(self), level = \"debug\")]\n     fn equate_normalized_input_or_output(&mut self, a: Ty<'tcx>, b: Ty<'tcx>, span: Span) {\n         if let Err(_) =\n             self.eq_types(a, b, Locations::All(span), ConstraintCategory::BoringNoLocation)\n@@ -194,13 +189,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             // `rustc_traits::normalize_after_erasing_regions`. Ideally, we'd\n             // like to normalize *before* inserting into `local_decls`, but\n             // doing so ends up causing some other trouble.\n-            let b = match self.normalize_and_add_constraints(b) {\n-                Ok(n) => n,\n-                Err(_) => {\n-                    debug!(\"equate_inputs_and_outputs: NoSolution\");\n-                    b\n-                }\n-            };\n+            let b = self.normalize(b, Locations::All(span));\n \n             // Note: if we have to introduce new placeholders during normalization above, then we won't have\n             // added those universes to the universe info, which we would want in `relate_tys`.\n@@ -218,28 +207,4 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             }\n         }\n     }\n-\n-    pub(crate) fn normalize_and_add_constraints(&mut self, t: Ty<'tcx>) -> Fallible<Ty<'tcx>> {\n-        let TypeOpOutput { output: norm_ty, constraints, .. } =\n-            self.param_env.and(type_op::normalize::Normalize::new(t)).fully_perform(self.infcx)?;\n-\n-        debug!(\"{:?} normalized to {:?}\", t, norm_ty);\n-\n-        for data in constraints {\n-            ConstraintConversion::new(\n-                self.infcx,\n-                &self.borrowck_context.universal_regions,\n-                &self.region_bound_pairs,\n-                self.implicit_region_bound,\n-                self.param_env,\n-                Locations::All(DUMMY_SP),\n-                DUMMY_SP,\n-                ConstraintCategory::Internal,\n-                &mut self.borrowck_context.constraints,\n-            )\n-            .convert_all(&*data);\n-        }\n-\n-        Ok(norm_ty)\n-    }\n }"}, {"sha": "6c4b2b3724e346c7a6a978e41b1e80d8159e5591", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -138,8 +138,6 @@ pub(crate) fn type_check<'mir, 'tcx>(\n     use_polonius: bool,\n ) -> MirTypeckResults<'tcx> {\n     let implicit_region_bound = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));\n-    let mut universe_causes = FxHashMap::default();\n-    universe_causes.insert(ty::UniverseIndex::from_u32(0), UniverseInfo::other());\n     let mut constraints = MirTypeckRegionConstraints {\n         placeholder_indices: PlaceholderIndices::default(),\n         placeholder_index_to_region: IndexVec::default(),\n@@ -148,7 +146,7 @@ pub(crate) fn type_check<'mir, 'tcx>(\n         member_constraints: MemberConstraintSet::default(),\n         closure_bounds_mapping: Default::default(),\n         type_tests: Vec::default(),\n-        universe_causes,\n+        universe_causes: FxHashMap::default(),\n     };\n \n     let CreateResult {\n@@ -165,9 +163,8 @@ pub(crate) fn type_check<'mir, 'tcx>(\n \n     debug!(?normalized_inputs_and_output);\n \n-    for u in ty::UniverseIndex::ROOT..infcx.universe() {\n-        let info = UniverseInfo::other();\n-        constraints.universe_causes.insert(u, info);\n+    for u in ty::UniverseIndex::ROOT..=infcx.universe() {\n+        constraints.universe_causes.insert(u, UniverseInfo::other());\n     }\n \n     let mut borrowck_context = BorrowCheckContext {"}, {"sha": "c0607a102a90ecbad2a12708677c26eb14cc4e52", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 63, "deletions": 12, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -2055,7 +2055,14 @@ struct RegionFolder<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     current_index: ty::DebruijnIndex,\n     region_map: BTreeMap<ty::BoundRegion, ty::Region<'tcx>>,\n-    name: &'a mut (dyn FnMut(ty::BoundRegion) -> ty::Region<'tcx> + 'a),\n+    name: &'a mut (\n+                dyn FnMut(\n+        Option<ty::DebruijnIndex>, // Debruijn index of the folded late-bound region\n+        ty::DebruijnIndex,         // Index corresponding to binder level\n+        ty::BoundRegion,\n+    ) -> ty::Region<'tcx>\n+                    + 'a\n+            ),\n }\n \n impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n@@ -2086,7 +2093,9 @@ impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n         let name = &mut self.name;\n         let region = match *r {\n-            ty::ReLateBound(_, br) => *self.region_map.entry(br).or_insert_with(|| name(br)),\n+            ty::ReLateBound(db, br) if db >= self.current_index => {\n+                *self.region_map.entry(br).or_insert_with(|| name(Some(db), self.current_index, br))\n+            }\n             ty::RePlaceholder(ty::PlaceholderRegion { name: kind, .. }) => {\n                 // If this is an anonymous placeholder, don't rename. Otherwise, in some\n                 // async fns, we get a `for<'r> Send` bound\n@@ -2095,7 +2104,10 @@ impl<'a, 'tcx> ty::TypeFolder<'tcx> for RegionFolder<'a, 'tcx> {\n                     _ => {\n                         // Index doesn't matter, since this is just for naming and these never get bound\n                         let br = ty::BoundRegion { var: ty::BoundVar::from_u32(0), kind };\n-                        *self.region_map.entry(br).or_insert_with(|| name(br))\n+                        *self\n+                            .region_map\n+                            .entry(br)\n+                            .or_insert_with(|| name(None, self.current_index, br))\n                     }\n                 }\n             }\n@@ -2234,24 +2246,63 @@ impl<'tcx> FmtPrinter<'_, 'tcx> {\n             })\n         } else {\n             let tcx = self.tcx;\n-            let mut name = |br: ty::BoundRegion| {\n-                start_or_continue(&mut self, \"for<\", \", \");\n-                let kind = match br.kind {\n+\n+            // Closure used in `RegionFolder` to create names for anonymous late-bound\n+            // regions. We use two `DebruijnIndex`es (one for the currently folded\n+            // late-bound region and the other for the binder level) to determine\n+            // whether a name has already been created for the currently folded region,\n+            // see issue #102392.\n+            let mut name = |lifetime_idx: Option<ty::DebruijnIndex>,\n+                            binder_level_idx: ty::DebruijnIndex,\n+                            br: ty::BoundRegion| {\n+                let (name, kind) = match br.kind {\n                     ty::BrAnon(_) | ty::BrEnv => {\n                         let name = next_name(&self);\n-                        do_continue(&mut self, name);\n-                        ty::BrNamed(CRATE_DEF_ID.to_def_id(), name)\n+\n+                        if let Some(lt_idx) = lifetime_idx {\n+                            if lt_idx > binder_level_idx {\n+                                let kind = ty::BrNamed(CRATE_DEF_ID.to_def_id(), name);\n+                                return tcx.mk_region(ty::ReLateBound(\n+                                    ty::INNERMOST,\n+                                    ty::BoundRegion { var: br.var, kind },\n+                                ));\n+                            }\n+                        }\n+\n+                        (name, ty::BrNamed(CRATE_DEF_ID.to_def_id(), name))\n                     }\n                     ty::BrNamed(def_id, kw::UnderscoreLifetime) => {\n                         let name = next_name(&self);\n-                        do_continue(&mut self, name);\n-                        ty::BrNamed(def_id, name)\n+\n+                        if let Some(lt_idx) = lifetime_idx {\n+                            if lt_idx > binder_level_idx {\n+                                let kind = ty::BrNamed(def_id, name);\n+                                return tcx.mk_region(ty::ReLateBound(\n+                                    ty::INNERMOST,\n+                                    ty::BoundRegion { var: br.var, kind },\n+                                ));\n+                            }\n+                        }\n+\n+                        (name, ty::BrNamed(def_id, name))\n                     }\n                     ty::BrNamed(_, name) => {\n-                        do_continue(&mut self, name);\n-                        br.kind\n+                        if let Some(lt_idx) = lifetime_idx {\n+                            if lt_idx > binder_level_idx {\n+                                let kind = br.kind;\n+                                return tcx.mk_region(ty::ReLateBound(\n+                                    ty::INNERMOST,\n+                                    ty::BoundRegion { var: br.var, kind },\n+                                ));\n+                            }\n+                        }\n+\n+                        (name, br.kind)\n                     }\n                 };\n+\n+                start_or_continue(&mut self, \"for<\", \", \");\n+                do_continue(&mut self, name);\n                 tcx.mk_region(ty::ReLateBound(ty::INNERMOST, ty::BoundRegion { var: br.var, kind }))\n             };\n             let mut folder = RegionFolder {"}, {"sha": "f8c06c3f9aedb794a06851ff2f7ae988b4ebb020", "filename": "library/core/src/lazy.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f382c2748aec2ada91eff88840c996644ff0f70d/library%2Fcore%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f382c2748aec2ada91eff88840c996644ff0f70d/library%2Fcore%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flazy.rs?ref=f382c2748aec2ada91eff88840c996644ff0f70d", "patch": "@@ -1 +0,0 @@\n-//! Lazy values and one-time initialization of static data."}, {"sha": "4c0a3049e75be999ca7db9fcb40655b0c58ffb98", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -326,8 +326,6 @@ pub mod cell;\n pub mod char;\n pub mod ffi;\n pub mod iter;\n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n-pub mod lazy;\n pub mod option;\n pub mod panic;\n pub mod panicking;"}, {"sha": "f8c06c3f9aedb794a06851ff2f7ae988b4ebb020", "filename": "library/std/src/lazy.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f382c2748aec2ada91eff88840c996644ff0f70d/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f382c2748aec2ada91eff88840c996644ff0f70d/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=f382c2748aec2ada91eff88840c996644ff0f70d", "patch": "@@ -1 +0,0 @@\n-//! Lazy values and one-time initialization of static data."}, {"sha": "5484d9c332abd241fe558a8ae7da53f7261bf69a", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -529,9 +529,6 @@ pub mod process;\n pub mod sync;\n pub mod time;\n \n-#[unstable(feature = \"once_cell\", issue = \"74465\")]\n-pub mod lazy;\n-\n // Pull in `std_float` crate  into libstd. The contents of\n // `std_float` are in a different repository: rust-lang/portable-simd.\n #[path = \"../../portable-simd/crates/std_float/src/lib.rs\"]"}, {"sha": "5a7a193897bfad3105da46cc20dfee5769115f7d", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -2028,6 +2028,7 @@ impl Step for RustDev {\n             \"llvm-nm\",\n             \"llvm-dwarfdump\",\n             \"llvm-dis\",\n+            \"llvm-tblgen\",\n         ] {\n             tarball.add_file(src_bindir.join(exe(bin, target)), \"bin\", 0o755);\n         }"}, {"sha": "d19a1ae95cf145dcc44f488a8facbb356f12a35a", "filename": "src/bootstrap/download-ci-llvm-stamp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Fbootstrap%2Fdownload-ci-llvm-stamp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdownload-ci-llvm-stamp?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -1,4 +1,4 @@\n Change this file to make users of the `download-ci-llvm` configuration download\n a new version of LLVM from CI, even if the LLVM submodule hasn\u2019t changed.\n \n-Last change is for: https://github.com/rust-lang/rust/pull/97550\n+Last change is for: https://github.com/rust-lang/rust/pull/102790"}, {"sha": "ea97ae4f65127822867a93b8b8d388ad60ace8a2", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -497,18 +497,18 @@ impl Step for Llvm {\n \n         // https://llvm.org/docs/HowToCrossCompileLLVM.html\n         if target != builder.config.build {\n-            builder.ensure(Llvm { target: builder.config.build });\n-            // FIXME: if the llvm root for the build triple is overridden then we\n-            //        should use llvm-tblgen from there, also should verify that it\n-            //        actually exists most of the time in normal installs of LLVM.\n-            let host_bin = builder.llvm_out(builder.config.build).join(\"bin\");\n-            cfg.define(\"LLVM_TABLEGEN\", host_bin.join(\"llvm-tblgen\").with_extension(EXE_EXTENSION));\n-            // LLVM_NM is required for cross compiling using MSVC\n-            cfg.define(\"LLVM_NM\", host_bin.join(\"llvm-nm\").with_extension(EXE_EXTENSION));\n-            cfg.define(\n-                \"LLVM_CONFIG_PATH\",\n-                host_bin.join(\"llvm-config\").with_extension(EXE_EXTENSION),\n-            );\n+            let llvm_config = builder.ensure(Llvm { target: builder.config.build });\n+            if !builder.config.dry_run {\n+                let llvm_bindir = output(Command::new(&llvm_config).arg(\"--bindir\"));\n+                let host_bin = Path::new(llvm_bindir.trim());\n+                cfg.define(\n+                    \"LLVM_TABLEGEN\",\n+                    host_bin.join(\"llvm-tblgen\").with_extension(EXE_EXTENSION),\n+                );\n+                // LLVM_NM is required for cross compiling using MSVC\n+                cfg.define(\"LLVM_NM\", host_bin.join(\"llvm-nm\").with_extension(EXE_EXTENSION));\n+            }\n+            cfg.define(\"LLVM_CONFIG_PATH\", llvm_config);\n             if builder.config.llvm_clang {\n                 let build_bin = builder.llvm_out(builder.config.build).join(\"build\").join(\"bin\");\n                 let clang_tblgen = build_bin.join(\"clang-tblgen\").with_extension(EXE_EXTENSION);"}, {"sha": "b8b5014ab42e6e0ca64bfc7f9cc2ac4b4b69a30c", "filename": "src/doc/rustdoc/src/unstable-features.md", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Funstable-features.md?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -197,6 +197,35 @@ To do so, the `#[doc(keyword = \"...\")]` attribute is used. Example:\n mod empty_mod {}\n ```\n \n+## Effects of other nightly features\n+\n+These nightly-only features are not primarily related to Rustdoc,\n+but have convenient effects on the documentation produced.\n+\n+### `fundamental` types\n+\n+Annotating a type with `#[fundamental]` primarily influences coherence rules about generic types,\n+i.e., they alter whether other crates can provide implementations for that type.\n+The unstable book [links to further information][unstable-fundamental].\n+\n+[unstable-fundamental]: https://doc.rust-lang.org/unstable-book/language-features/fundamental.html\n+\n+For documentation, this has an additional side effect:\n+If a method is implemented on `F<T>` (or `F<&T>`),\n+where `F` is a fundamental type,\n+then the method is not only documented at the page about `F`,\n+but also on the page about `T`.\n+In a sense, it makes the type transparent to Rustdoc.\n+This is especially convenient for types that work as annotated pointers,\n+such as `Pin<&mut T>`,\n+as it ensures that methods only implemented through those annotated pointers\n+can still be found with the type they act on.\n+\n+If the `fundamental` feature's effect on coherence is not intended,\n+such a type can be marked as fundamental only for purposes of documentation\n+by introducing a custom feature and\n+limiting the use of `fundamental` to when documentation is built.\n+\n ## Unstable command-line arguments\n \n These features are enabled by passing a command-line flag to Rustdoc, but the flags in question are\n@@ -465,6 +494,16 @@ Note that the third item is the crate root, which in this case is undocumented.\n [JSON format](https://doc.rust-lang.org/nightly/nightly-rustc/rustdoc_json_types/). `--output-format html` has no effect,\n and is also accepted on stable toolchains.\n \n+JSON Output for toolchain crates (`std`, `alloc`, `core`, `test`, and `proc_macro`)\n+is available via the `rust-docs-json` rustup component.\n+\n+```shell\n+rustup component add --toolchain nightly rust-docs-json\n+```\n+\n+Then the json files will be present in the `share/doc/rust/json/` directory\n+of the rustup toolchain directory.\n+\n It can also be used with `--show-coverage`. Take a look at its\n [documentation](#--show-coverage-calculate-the-percentage-of-items-with-documentation) for more\n information."}, {"sha": "5e28204b21d8c137d8cd2cd3bb1ba900b43306f6", "filename": "src/librustdoc/html/highlight.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fhighlight.rs?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -7,20 +7,18 @@\n \n use crate::clean::PrimitiveType;\n use crate::html::escape::Escape;\n-use crate::html::render::Context;\n+use crate::html::render::{Context, LinkFromSrc};\n \n use std::collections::VecDeque;\n use std::fmt::{Display, Write};\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_lexer::Cursor;\n-use rustc_lexer::{LiteralKind, TokenKind};\n+use rustc_lexer::{Cursor, LiteralKind, TokenKind};\n use rustc_span::edition::Edition;\n use rustc_span::symbol::Symbol;\n use rustc_span::{BytePos, Span, DUMMY_SP};\n \n use super::format::{self, Buffer};\n-use super::render::LinkFromSrc;\n \n /// This type is needed in case we want to render links on items to allow to go to their definition.\n pub(crate) struct HrefContext<'a, 'b, 'c> {"}, {"sha": "7fb8811666536239d45507cee227e3f1857bc4d0", "filename": "src/test/ui/async-await/issue-70935-complex-spans.drop_tracking.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -18,7 +18,7 @@ LL |   async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n    |  ___________________________________________________________________^\n LL | | }\n    | |_^\n-   = note: required because it captures the following types: `ResumeTy`, `impl for<'a, 'b, 'c> Future<Output = ()>`, `()`\n+   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = ()>`, `()`\n note: required because it's used within this `async` block\n   --> $DIR/issue-70935-complex-spans.rs:16:16\n    |"}, {"sha": "7dabd97b94e823d93462b0cc5c8b61ff4789cddf", "filename": "src/test/ui/coherence/coherence-fn-covariant-bound-vs-static.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-covariant-bound-vs-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-covariant-bound-vs-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-fn-covariant-bound-vs-static.stderr?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -1,10 +1,10 @@\n-error[E0119]: conflicting implementations of trait `Trait` for type `for<'r> fn(for<'r> fn(&'r ()))`\n+error[E0119]: conflicting implementations of trait `Trait` for type `for<'r> fn(fn(&'r ()))`\n   --> $DIR/coherence-fn-covariant-bound-vs-static.rs:17:1\n    |\n LL | impl Trait for for<'r> fn(fn(&'r ())) {}\n    | ------------------------------------- first implementation here\n LL | impl<'a> Trait for fn(fn(&'a ())) {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'r> fn(for<'r> fn(&'r ()))`\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `for<'r> fn(fn(&'r ()))`\n    |\n    = note: this behavior recently changed as a result of a bug fix; see rust-lang/rust#56105 for details\n "}, {"sha": "a28f198e9e0998d8d8a93ad591dfac3c4e08372d", "filename": "src/test/ui/const-generics/issue-102124.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fconst-generics%2Fissue-102124.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fconst-generics%2Fissue-102124.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-102124.rs?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+// compile-flags: -Zmir-opt-level=3\n+\n+// regression test for #102124\n+\n+const L: usize = 4;\n+\n+pub trait Print<const N: usize> {\n+    fn print(&self) -> usize {\n+        N\n+    }\n+}\n+\n+pub struct Printer;\n+impl Print<L> for Printer {}\n+\n+fn main() {\n+    let p = Printer;\n+    assert_eq!(p.print(), 4);\n+}"}, {"sha": "f97f349fd824359bae7db0d561a396e82035718c", "filename": "src/test/ui/lifetimes/nested-binder-print.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Flifetimes%2Fnested-binder-print.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Flifetimes%2Fnested-binder-print.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fnested-binder-print.rs?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -0,0 +1,10 @@\n+struct TwoLt<'a, 'b>(&'a (), &'b ());\n+type Foo<'a> = fn(TwoLt<'_, 'a>);\n+\n+fn foo() {\n+    let y: for<'a> fn(Foo<'a>);\n+    let x: u32 = y;\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "32dd896932d2e0646f325d8184133b42744fb4fe", "filename": "src/test/ui/lifetimes/nested-binder-print.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Flifetimes%2Fnested-binder-print.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Flifetimes%2Fnested-binder-print.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fnested-binder-print.stderr?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/nested-binder-print.rs:6:18\n+   |\n+LL |     let x: u32 = y;\n+   |            ---   ^ expected `u32`, found fn pointer\n+   |            |\n+   |            expected due to this\n+   |\n+   = note:    expected type `u32`\n+           found fn pointer `for<'a> fn(for<'b> fn(TwoLt<'b, 'a>))`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "c35d8ecec5e2d34b2959add1c0ae6b19d3044439", "filename": "src/test/ui/lifetimes/re-empty-in-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fre-empty-in-error.stderr?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -4,7 +4,7 @@ error: higher-ranked lifetime error\n LL |     foo(&10);\n    |     ^^^^^^^^\n    |\n-   = note: could not prove `for<'b, 'a> &'b (): 'a`\n+   = note: could not prove `for<'b> &'b (): 'a`\n \n error: aborting due to previous error\n "}, {"sha": "25f47f5b6f6c93a0ec55953f6147a0e1ce4753aa", "filename": "src/test/ui/nll/closure-malformed-projection-input-issue-102800.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fnll%2Fclosure-malformed-projection-input-issue-102800.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fnll%2Fclosure-malformed-projection-input-issue-102800.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-malformed-projection-input-issue-102800.rs?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -0,0 +1,31 @@\n+// Regression test for #102800\n+//\n+// Here we are generating higher-ranked region constraints when normalizing and relating closure\n+// input types. Previously this was an ICE in the error path because we didn't register enough\n+// diagnostic information to render the higher-ranked subtyping error.\n+\n+// check-fail\n+\n+trait Trait {\n+    type Ty;\n+}\n+\n+impl Trait for &'static () {\n+    type Ty = ();\n+}\n+\n+fn main() {\n+    let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+    //~^ ERROR lifetime may not live long enough\n+    //~| ERROR higher-ranked subtype error\n+    //~| ERROR higher-ranked subtype error\n+    //~| ERROR implementation of `Trait` is not general enough\n+    //~| ERROR implementation of `Trait` is not general enough\n+    //~| ERROR implementation of `Trait` is not general enough\n+    //~| ERROR implementation of `Trait` is not general enough\n+    //~| ERROR implementation of `Trait` is not general enough\n+    //~| ERROR implementation of `Trait` is not general enough\n+    //~| ERROR implementation of `Trait` is not general enough\n+    //~| ERROR implementation of `Trait` is not general enough\n+    //~| ERROR implementation of `Trait` is not general enough\n+}"}, {"sha": "dbd5dabd1daccbd15849ffc2d04fb698642b426f", "filename": "src/test/ui/nll/closure-malformed-projection-input-issue-102800.stderr", "status": "added", "additions": 104, "deletions": 0, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fnll%2Fclosure-malformed-projection-input-issue-102800.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fnll%2Fclosure-malformed-projection-input-issue-102800.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-malformed-projection-input-issue-102800.stderr?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -0,0 +1,104 @@\n+error: lifetime may not live long enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:48\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |                                                ^-^\n+   |                                                ||\n+   |                                                |has type `<&'1 () as Trait>::Ty`\n+   |                                                requires that `'1` must outlive `'static`\n+\n+error: higher-ranked subtype error\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:48\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |                                                ^^^\n+\n+error: higher-ranked subtype error\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:48\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |                                                ^^^\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:48\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |                                                ^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:12\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:12\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:12\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:12\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:48\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |                                                ^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:48\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |                                                ^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:48\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |                                                ^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: implementation of `Trait` is not general enough\n+  --> $DIR/closure-malformed-projection-input-issue-102800.rs:18:48\n+   |\n+LL |     let _: for<'a> fn(<&'a () as Trait>::Ty) = |_| {};\n+   |                                                ^^^^^^ implementation of `Trait` is not general enough\n+   |\n+   = note: `&'0 ()` must implement `Trait`, for any lifetime `'0`...\n+   = note: ...but `Trait` is actually implemented for the type `&'static ()`\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "87cc1a8e7a88d7070f315050fe168a61c3a64387", "filename": "src/test/ui/regions/issue-102392.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fregions%2Fissue-102392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fregions%2Fissue-102392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-102392.rs?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -0,0 +1,6 @@\n+fn g(f: for<'a> fn(fn(&str, &'a str))) -> bool {\n+    f\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "56f4c0c5db4b7a6f0a5fa538b93fc333aa4e501a", "filename": "src/test/ui/regions/issue-102392.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fregions%2Fissue-102392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fregions%2Fissue-102392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fissue-102392.stderr?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-102392.rs:2:5\n+   |\n+LL | fn g(f: for<'a> fn(fn(&str, &'a str))) -> bool {\n+   |                                           ---- expected `bool` because of return type\n+LL |     f\n+   |     ^ expected `bool`, found fn pointer\n+   |\n+   = note:    expected type `bool`\n+           found fn pointer `for<'a> fn(for<'b> fn(&'b str, &'a str))`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "30248a7a397b3e7428096053a175a3cfe2d33290", "filename": "src/test/ui/where-clauses/higher-ranked-fn-type.quiet.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.quiet.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.quiet.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.quiet.stderr?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -1,8 +1,8 @@\n-error[E0277]: the trait bound `for<'b> for<'b> fn(&'b ()): Foo` is not satisfied\n+error[E0277]: the trait bound `for<'b> fn(&'b ()): Foo` is not satisfied\n   --> $DIR/higher-ranked-fn-type.rs:20:5\n    |\n LL |     called()\n-   |     ^^^^^^ the trait `for<'b> Foo` is not implemented for `for<'b> fn(&'b ())`\n+   |     ^^^^^^ the trait `for<'b> Foo` is not implemented for `fn(&'b ())`\n    |\n note: required by a bound in `called`\n   --> $DIR/higher-ranked-fn-type.rs:12:25"}, {"sha": "ab6edde4ee7eadfc7a1bd65cf7e34892f2d9ab41", "filename": "src/test/ui/where-clauses/higher-ranked-fn-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0784109daa00f2e43c1b55becc2169bc5b3bf6f/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.rs?ref=c0784109daa00f2e43c1b55becc2169bc5b3bf6f", "patch": "@@ -18,7 +18,7 @@ where\n     (for<'a> fn(&'a ())): Foo,\n {\n     called()\n-    //[quiet]~^ ERROR the trait bound `for<'b> for<'b> fn(&'b ()): Foo` is not satisfied\n+    //[quiet]~^ ERROR the trait bound `for<'b> fn(&'b ()): Foo` is not satisfied\n     //[verbose]~^^ ERROR the trait bound `for<'b> fn(&ReLateBound(\n }\n "}]}