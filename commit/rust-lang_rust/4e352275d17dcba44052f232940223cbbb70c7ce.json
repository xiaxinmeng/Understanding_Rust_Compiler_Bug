{"sha": "4e352275d17dcba44052f232940223cbbb70c7ce", "node_id": "C_kwDOAAsO6NoAKDRlMzUyMjc1ZDE3ZGNiYTQ0MDUyZjIzMjk0MDIyM2NiYmI3MGM3Y2U", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-02T17:38:28Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-10-02T17:38:39Z"}, "message": "minor: simplify", "tree": {"sha": "171f2d19d5556e54dcefe47400ca0f5263c427cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/171f2d19d5556e54dcefe47400ca0f5263c427cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e352275d17dcba44052f232940223cbbb70c7ce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e352275d17dcba44052f232940223cbbb70c7ce", "html_url": "https://github.com/rust-lang/rust/commit/4e352275d17dcba44052f232940223cbbb70c7ce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e352275d17dcba44052f232940223cbbb70c7ce/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "613609cc5eb31a87c08b63b8d5a5ac8123a7b84a", "url": "https://api.github.com/repos/rust-lang/rust/commits/613609cc5eb31a87c08b63b8d5a5ac8123a7b84a", "html_url": "https://github.com/rust-lang/rust/commit/613609cc5eb31a87c08b63b8d5a5ac8123a7b84a"}], "stats": {"total": 40, "additions": 18, "deletions": 22}, "files": [{"sha": "4ce818f9b00752f243c8cd78d58aed8a610bc182", "filename": "crates/mbe/src/parser.rs", "status": "modified", "additions": 18, "deletions": 22, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4e352275d17dcba44052f232940223cbbb70c7ce/crates%2Fmbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e352275d17dcba44052f232940223cbbb70c7ce/crates%2Fmbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fmbe%2Fsrc%2Fparser.rs?ref=4e352275d17dcba44052f232940223cbbb70c7ce", "patch": "@@ -24,20 +24,28 @@ pub(crate) struct MetaTemplate(pub(crate) Vec<Op>);\n \n impl MetaTemplate {\n     pub(crate) fn parse_pattern(pattern: &tt::Subtree) -> Result<MetaTemplate, ParseError> {\n-        let ops =\n-            parse_inner(pattern, Mode::Pattern).into_iter().collect::<Result<_, ParseError>>()?;\n-        Ok(MetaTemplate(ops))\n+        MetaTemplate::parse(pattern, Mode::Pattern)\n     }\n \n     pub(crate) fn parse_template(template: &tt::Subtree) -> Result<MetaTemplate, ParseError> {\n-        let ops =\n-            parse_inner(template, Mode::Template).into_iter().collect::<Result<_, ParseError>>()?;\n-        Ok(MetaTemplate(ops))\n+        MetaTemplate::parse(template, Mode::Template)\n     }\n \n     pub(crate) fn iter(&self) -> impl Iterator<Item = &Op> {\n         self.0.iter()\n     }\n+\n+    fn parse(tt: &tt::Subtree, mode: Mode) -> Result<MetaTemplate, ParseError> {\n+        let mut src = TtIter::new(tt);\n+\n+        let mut res = Vec::new();\n+        while let Some(first) = src.next() {\n+            let op = next_op(first, &mut src, mode)?;\n+            res.push(op)\n+        }\n+\n+        Ok(MetaTemplate(res))\n+    }\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n@@ -96,15 +104,6 @@ enum Mode {\n     Template,\n }\n \n-fn parse_inner(tt: &tt::Subtree, mode: Mode) -> Vec<Result<Op, ParseError>> {\n-    let mut src = TtIter::new(tt);\n-    std::iter::from_fn(move || {\n-        let first = src.next()?;\n-        Some(next_op(first, &mut src, mode))\n-    })\n-    .collect()\n-}\n-\n macro_rules! err {\n     ($($tt:tt)*) => {\n         ParseError::UnexpectedToken(($($tt)*).to_string())\n@@ -128,10 +127,8 @@ fn next_op<'a>(first: &tt::TokenTree, src: &mut TtIter<'a>, mode: Mode) -> Resul\n             match second {\n                 tt::TokenTree::Subtree(subtree) => {\n                     let (separator, kind) = parse_repeat(src)?;\n-                    let tokens = parse_inner(subtree, mode)\n-                        .into_iter()\n-                        .collect::<Result<Vec<Op>, ParseError>>()?;\n-                    Op::Repeat { tokens: MetaTemplate(tokens), separator, kind }\n+                    let tokens = MetaTemplate::parse(subtree, mode)?;\n+                    Op::Repeat { tokens, separator, kind }\n                 }\n                 tt::TokenTree::Leaf(leaf) => match leaf {\n                     tt::Leaf::Punct(_) => {\n@@ -162,9 +159,8 @@ fn next_op<'a>(first: &tt::TokenTree, src: &mut TtIter<'a>, mode: Mode) -> Resul\n         }\n         tt::TokenTree::Leaf(tt) => Op::Leaf(tt.clone()),\n         tt::TokenTree::Subtree(subtree) => {\n-            let tokens =\n-                parse_inner(subtree, mode).into_iter().collect::<Result<Vec<Op>, ParseError>>()?;\n-            Op::Subtree { tokens: MetaTemplate(tokens), delimiter: subtree.delimiter }\n+            let tokens = MetaTemplate::parse(subtree, mode)?;\n+            Op::Subtree { tokens, delimiter: subtree.delimiter }\n         }\n     };\n     Ok(res)"}]}