{"sha": "cbd6799110b858505c271b8169e356c62e34b80a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZDY3OTkxMTBiODU4NTA1YzI3MWI4MTY5ZTM1NmM2MmUzNGI4MGE=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-07-15T07:18:17Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-07-22T01:37:17Z"}, "message": "lexer tests: makefile/configure", "tree": {"sha": "0cc19c1d9580c83f55f2e91cf79bb8c9d40aebf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0cc19c1d9580c83f55f2e91cf79bb8c9d40aebf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbd6799110b858505c271b8169e356c62e34b80a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd6799110b858505c271b8169e356c62e34b80a", "html_url": "https://github.com/rust-lang/rust/commit/cbd6799110b858505c271b8169e356c62e34b80a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbd6799110b858505c271b8169e356c62e34b80a/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "188d889aaf8cccb73243812881ce1030355386cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/188d889aaf8cccb73243812881ce1030355386cc", "html_url": "https://github.com/rust-lang/rust/commit/188d889aaf8cccb73243812881ce1030355386cc"}], "stats": {"total": 86, "additions": 84, "deletions": 2}, "files": [{"sha": "2612761cef951b201f9e3e6d070c1e25476fb742", "filename": "Makefile.in", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6799110b858505c271b8169e356c62e34b80a/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6799110b858505c271b8169e356c62e34b80a/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=cbd6799110b858505c271b8169e356c62e34b80a", "patch": "@@ -252,6 +252,19 @@ ifneq ($(findstring clean,$(MAKECMDGOALS)),)\n   include $(CFG_SRC_DIR)mk/clean.mk\n endif\n \n+# Grammar tests\n+\n+ifneq ($(findstring lexer,$(MAKECMDGOALS)),)\n+  ifdef CFG_JAVAC\n+\tifdef CFG_ANTLR4\n+\t  ifdef CFG_GRUN\n+\t    CFG_INFO := $(info cfg: including grammar tests)\n+\t    include $(CFG_SRC_DIR)mk/grammar.mk\n+\t  endif\n+\tendif\n+  endif\n+endif\n+\n # CTAGS building\n ifneq ($(strip $(findstring TAGS.emacs,$(MAKECMDGOALS)) \\\n                $(findstring TAGS.vi,$(MAKECMDGOALS))),)"}, {"sha": "b6513cb0f74c6424a6f00ea6d2556bcf5baade55", "filename": "configure", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6799110b858505c271b8169e356c62e34b80a/configure", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6799110b858505c271b8169e356c62e34b80a/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=cbd6799110b858505c271b8169e356c62e34b80a", "patch": "@@ -493,6 +493,9 @@ probe CFG_VALGRIND         valgrind\n probe CFG_PERF             perf\n probe CFG_ISCC             iscc\n probe CFG_LLNEXTGEN        LLnextgen\n+probe CFG_JAVAC            javac\n+probe CFG_ANTLR4           antlr4\n+probe CFG_GRUN             grun\n probe CFG_PANDOC           pandoc\n probe CFG_PDFLATEX         pdflatex\n probe CFG_XELATEX          xelatex"}, {"sha": "03e253c7278cc0bbd024e28ad18c67e4518b2aeb", "filename": "mk/grammar.mk", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6799110b858505c271b8169e356c62e34b80a/mk%2Fgrammar.mk", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6799110b858505c271b8169e356c62e34b80a/mk%2Fgrammar.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fgrammar.mk?ref=cbd6799110b858505c271b8169e356c62e34b80a", "patch": "@@ -0,0 +1,43 @@\n+# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+BG = $(CFG_BUILD_DIR)/grammar/\n+SG = $(S)src/grammar/\n+B = $(CFG_BUILD_DIR)/$(CFG_BUILD)/stage2/\n+L = $(B)lib/rustlib/$(CFG_BUILD)/lib\n+LD = $(CFG_BUILD)/stage2/lib/rustlib/$(CFG_BUILD)/lib/\n+RUSTC = $(B)bin/rustc\n+\n+# Run the reference lexer against libsyntax and compare the tokens and spans.\n+# If \"// ignore-lexer-test\" is present in the file, it will be ignored.\n+#\n+# $(1) is the file to test.\n+define LEXER_TEST\n+grep \"// ignore-lexer-test\" $(1) ; \\\n+  if [ $$? -eq 1 ]; then \\\n+   CLASSPATH=$(B)grammar $(CFG_GRUN) RustLexer tokens -tokens < $(1) \\\n+   | $(B)grammar/verify $(1) ; \\\n+  fi\n+endef\n+\n+$(BG):\n+\t$(Q)mkdir -p $(BG)\n+\n+$(BG)RustLexer.class: $(SG)RustLexer.g4\n+\t$(Q)$(CFG_ANTLR4) -o $(B)grammar $(SG)RustLexer.g4\n+\t$(Q)$(CFG_JAVAC) -d $(BG) $(BG)RustLexer.java\n+\n+$(BG)verify: $(SG)verify.rs rustc-stage2-H-$(CFG_BUILD) $(LD)stamp.regex_macros $(LD)stamp.rustc\n+\t$(Q)$(RUSTC) -O --out-dir $(BG) -L $(L) $(SG)verify.rs\n+\n+check-lexer: $(BG) $(BG)RustLexer.class $(BG)verify\n+\t$(info Verifying libsyntax against the reference lexer ...)\n+\t$(Q)find $(S) -iname '*.rs' -exec \"$(SG)check.sh\" {} \"$(BG)\" \\\n+      \"$(CFG_GRUN)\" \"$(BG)verify\" \"$(BG)RustLexer.tokens\" \"$(VERBOSE)\" \\;"}, {"sha": "3ddbb8a34c81258b5e31c9a2c3414e2c77510657", "filename": "src/grammar/check.sh", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6799110b858505c271b8169e356c62e34b80a/src%2Fgrammar%2Fcheck.sh", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6799110b858505c271b8169e356c62e34b80a/src%2Fgrammar%2Fcheck.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fcheck.sh?ref=cbd6799110b858505c271b8169e356c62e34b80a", "patch": "@@ -0,0 +1,21 @@\n+#!/bin/sh\n+\n+# Run the reference lexer against libsyntax and compare the tokens and spans.\n+# If \"// ignore-lexer-test\" is present in the file, it will be ignored.\n+#\n+# Argument $1 is the file to check, $2 is the classpath to use, $3 is the path\n+# to the grun binary, $4 is the path to the verify binary, $5 is the path to\n+# RustLexer.tokens\n+\n+if [ \"${VERBOSE}\" == \"1\" ]; then\n+    set -x\n+fi\n+\n+grep -q \"// ignore lexer-test\" $1;\n+\n+if [ $? -eq 1 ]; then\n+    cd $2 # This `cd` is so java will pick up RustLexer.class. I couldn't\n+    # figure out how to wrangle the CLASSPATH, just adding build/grammr didn't\n+    # seem to have anny effect.\n+    $3 RustLexer tokens -tokens < $1 | $4 $1 $5\n+fi"}, {"sha": "7fddf9b887ded05b85786df2e93bdf0991fbb719", "filename": "src/grammar/verify.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cbd6799110b858505c271b8169e356c62e34b80a/src%2Fgrammar%2Fverify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbd6799110b858505c271b8169e356c62e34b80a/src%2Fgrammar%2Fverify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fverify.rs?ref=cbd6799110b858505c271b8169e356c62e34b80a", "patch": "@@ -223,11 +223,13 @@ fn main() {\n         r.next_token()\n     }\n \n-    let token_map = parse_token_list(File::open(&Path::new(\"RustLexer.tokens\")).unwrap().read_to_string().unwrap().as_slice());\n+    let args = std::os::args();\n+\n+    let token_map = parse_token_list(File::open(&Path::new(args.get(2).as_slice())).unwrap().read_to_string().unwrap().as_slice());\n     let mut stdin = std::io::stdin();\n     let mut antlr_tokens = stdin.lines().map(|l| parse_antlr_token(l.unwrap().as_slice().trim(), &token_map));\n \n-    let code = File::open(&Path::new(std::os::args().get(1).as_slice())).unwrap().read_to_string().unwrap();\n+    let code = File::open(&Path::new(args.get(1).as_slice())).unwrap().read_to_string().unwrap();\n     let options = config::basic_options();\n     let session = session::build_session(options, None,\n                                          syntax::diagnostics::registry::Registry::new([]));"}]}