{"sha": "640884bad0199e80a7701469a3d0eae0977b5998", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0MDg4NGJhZDAxOTllODBhNzcwMTQ2OWEzZDBlYWUwOTc3YjU5OTg=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-04-27T23:08:16Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-05-17T20:13:08Z"}, "message": "Add edition to expansion info", "tree": {"sha": "73abac424522350cc393d3fc5738b1e92c9d81c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73abac424522350cc393d3fc5738b1e92c9d81c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/640884bad0199e80a7701469a3d0eae0977b5998", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/640884bad0199e80a7701469a3d0eae0977b5998", "html_url": "https://github.com/rust-lang/rust/commit/640884bad0199e80a7701469a3d0eae0977b5998", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/640884bad0199e80a7701469a3d0eae0977b5998/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ee5b1e15aa689b801bc7b2f7ee6508549a043f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee5b1e15aa689b801bc7b2f7ee6508549a043f56", "html_url": "https://github.com/rust-lang/rust/commit/ee5b1e15aa689b801bc7b2f7ee6508549a043f56"}], "stats": {"total": 51, "additions": 43, "deletions": 8}, "files": [{"sha": "45d429612a1dbd4723060010dec29c2905018ad3", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=640884bad0199e80a7701469a3d0eae0977b5998", "patch": "@@ -593,6 +593,7 @@ impl<'a> LoweringContext<'a> {\n                 span: Some(span),\n                 allow_internal_unstable: true,\n                 allow_internal_unsafe: false,\n+                edition: codemap::hygiene::default_edition(),\n             },\n         });\n         span.with_ctxt(SyntaxContext::empty().apply_mark(mark))"}, {"sha": "3a37c1c18c8d9fcd976e55d5bfe5958712f99cd3", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=640884bad0199e80a7701469a3d0eae0977b5998", "patch": "@@ -131,6 +131,15 @@ impl_stable_hash_for!(struct ::syntax::attr::Stability {\n     rustc_const_unstable\n });\n \n+impl<'a> HashStable<StableHashingContext<'a>>\n+for ::syntax::edition::Edition {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a>,\n+                                          hasher: &mut StableHasher<W>) {\n+        mem::discriminant(self).hash_stable(hcx, hasher);\n+    }\n+}\n+\n impl<'a> HashStable<StableHashingContext<'a>>\n for ::syntax::attr::StabilityLevel {\n     fn hash_stable<W: StableHasherResult>(&self,\n@@ -389,6 +398,7 @@ impl_stable_hash_for!(struct ::syntax_pos::hygiene::NameAndSpan {\n     format,\n     allow_internal_unstable,\n     allow_internal_unsafe,\n+    edition,\n     span\n });\n "}, {"sha": "497d5fdcac70288b94d5f92df52692676537506d", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=640884bad0199e80a7701469a3d0eae0977b5998", "patch": "@@ -21,7 +21,7 @@ use syntax::ext::base::ExtCtxt;\n use syntax::ext::base::Resolver;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::expand::ExpansionConfig;\n-use syntax::ext::hygiene::{Mark, SyntaxContext};\n+use syntax::ext::hygiene::{self, Mark, SyntaxContext};\n use syntax::fold::{self, Folder};\n use syntax::parse::ParseSess;\n use syntax::ptr::P;\n@@ -86,6 +86,7 @@ impl<'a> Folder for ExpandAllocatorDirectives<'a> {\n                 span: None,\n                 allow_internal_unstable: true,\n                 allow_internal_unsafe: false,\n+                edition: hygiene::default_edition(),\n             },\n         });\n         let span = item.span.with_ctxt(SyntaxContext::empty().apply_mark(mark));"}, {"sha": "2f89814032ef6eb55c43b3ce7986ca4c0c9477f1", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=640884bad0199e80a7701469a3d0eae0977b5998", "patch": "@@ -108,7 +108,7 @@ use syntax::ast;\n use syntax::codemap::{CodeMap, FileLoader, RealFileLoader};\n use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n use syntax::parse::{self, PResult};\n-use syntax_pos::{DUMMY_SP, MultiSpan, FileName};\n+use syntax_pos::{hygiene, DUMMY_SP, MultiSpan, FileName};\n \n #[cfg(test)]\n mod test;\n@@ -466,6 +466,7 @@ pub fn run_compiler<'a>(args: &[String],\n         };\n \n         let (sopts, cfg) = config::build_session_options_and_crate_config(&matches);\n+        hygiene::set_default_edition(sopts.edition);\n \n         driver::spawn_thread_pool(sopts, |sopts| {\n             run_compiler_with_pool(matches, sopts, cfg, callbacks, file_loader, emitter_dest)"}, {"sha": "0b6a7e1c4f49dc2d6b13f27dab4d601226cf59ab", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=640884bad0199e80a7701469a3d0eae0977b5998", "patch": "@@ -10,7 +10,7 @@\n \n use attr::HasAttrs;\n use ast;\n-use codemap::{ExpnInfo, NameAndSpan, ExpnFormat};\n+use codemap::{hygiene, ExpnInfo, NameAndSpan, ExpnFormat};\n use ext::base::ExtCtxt;\n use ext::build::AstBuilder;\n use parse::parser::PathStyle;\n@@ -65,6 +65,7 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt, span: Span, traits: &[ast::Path]\n             span: None,\n             allow_internal_unstable: true,\n             allow_internal_unsafe: false,\n+            edition: hygiene::default_edition(),\n         },\n     });\n "}, {"sha": "1cf0a7077c2ddd47e56a005bf6d651781043aa37", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=640884bad0199e80a7701469a3d0eae0977b5998", "patch": "@@ -16,7 +16,7 @@ use config::{is_test_or_bench, StripUnconfigured};\n use errors::FatalError;\n use ext::base::*;\n use ext::derive::{add_derived_markers, collect_derives};\n-use ext::hygiene::{Mark, SyntaxContext};\n+use ext::hygiene::{self, Mark, SyntaxContext};\n use ext::placeholders::{placeholder, PlaceholderExpander};\n use feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n use fold;\n@@ -502,6 +502,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 span: None,\n                 allow_internal_unstable: false,\n                 allow_internal_unsafe: false,\n+                edition: hygiene::default_edition(),\n             }\n         });\n \n@@ -642,6 +643,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     span: def_site_span,\n                     allow_internal_unstable,\n                     allow_internal_unsafe,\n+                    edition: hygiene::default_edition(),\n                 },\n             });\n             Ok(())\n@@ -688,6 +690,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                             span: tt_span,\n                             allow_internal_unstable,\n                             allow_internal_unsafe: false,\n+                            edition: hygiene::default_edition(),\n                         }\n                     });\n \n@@ -728,6 +731,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                             // FIXME probably want to follow macro_rules macros here.\n                             allow_internal_unstable: false,\n                             allow_internal_unsafe: false,\n+                            edition: hygiene::default_edition(),\n                         },\n                     });\n \n@@ -802,6 +806,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 span: None,\n                 allow_internal_unstable: false,\n                 allow_internal_unsafe: false,\n+                edition: hygiene::default_edition(),\n             }\n         };\n "}, {"sha": "e9cd7adb9c166fa25f955bdf81ba11c7d3519f70", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=640884bad0199e80a7701469a3d0eae0977b5998", "patch": "@@ -14,7 +14,7 @@ use std::cell::Cell;\n use ext::hygiene::{Mark, SyntaxContext};\n use symbol::{Symbol, keywords};\n use syntax_pos::{DUMMY_SP, Span};\n-use codemap::{ExpnInfo, NameAndSpan, MacroAttribute, dummy_spanned, respan};\n+use codemap::{ExpnInfo, NameAndSpan, MacroAttribute, dummy_spanned, hygiene, respan};\n use ptr::P;\n use tokenstream::TokenStream;\n \n@@ -30,6 +30,7 @@ fn ignored_span(sp: Span) -> Span {\n             span: None,\n             allow_internal_unstable: true,\n             allow_internal_unsafe: false,\n+            edition: hygiene::default_edition(),\n         }\n     });\n     sp.with_ctxt(SyntaxContext::empty().apply_mark(mark))"}, {"sha": "1dfd48a24c3bfbb4009052492346d2220ec4e73d", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=640884bad0199e80a7701469a3d0eae0977b5998", "patch": "@@ -29,7 +29,7 @@ use entry::{self, EntryPointType};\n use ext::base::{ExtCtxt, Resolver};\n use ext::build::AstBuilder;\n use ext::expand::ExpansionConfig;\n-use ext::hygiene::{Mark, SyntaxContext};\n+use ext::hygiene::{self, Mark, SyntaxContext};\n use fold::Folder;\n use feature_gate::Features;\n use util::move_map::MoveMap;\n@@ -300,6 +300,7 @@ fn generate_test_harness(sess: &ParseSess,\n             span: None,\n             allow_internal_unstable: true,\n             allow_internal_unsafe: false,\n+            edition: hygiene::default_edition(),\n         }\n     });\n "}, {"sha": "3593165023a54611cde685e540ce2039e87e267f", "filename": "src/libsyntax_ext/proc_macro_registrar.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_registrar.rs?ref=640884bad0199e80a7701469a3d0eae0977b5998", "patch": "@@ -14,7 +14,7 @@ use errors;\n \n use syntax::ast::{self, Ident, NodeId};\n use syntax::attr;\n-use syntax::codemap::{ExpnInfo, NameAndSpan, MacroAttribute, respan};\n+use syntax::codemap::{ExpnInfo, NameAndSpan, MacroAttribute, hygiene, respan};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::expand::ExpansionConfig;\n@@ -369,6 +369,7 @@ fn mk_registrar(cx: &mut ExtCtxt,\n             span: None,\n             allow_internal_unstable: true,\n             allow_internal_unsafe: false,\n+            edition: hygiene::default_edition(),\n         }\n     });\n     let span = DUMMY_SP.apply_mark(mark);"}, {"sha": "18446c109964d8a2c3a5ee5560355e0d143da429", "filename": "src/libsyntax_pos/edition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibsyntax_pos%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibsyntax_pos%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fedition.rs?ref=640884bad0199e80a7701469a3d0eae0977b5998", "patch": "@@ -12,7 +12,7 @@ use std::fmt;\n use std::str::FromStr;\n \n /// The edition of the compiler (RFC 2052)\n-#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq, Debug)]\n+#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq, Debug, RustcEncodable, RustcDecodable)]\n #[non_exhaustive]\n pub enum Edition {\n     // editions must be kept in order, newest to oldest"}, {"sha": "1365ac396ffdf5f4e21bf89e535556ad8a730a52", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/640884bad0199e80a7701469a3d0eae0977b5998/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=640884bad0199e80a7701469a3d0eae0977b5998", "patch": "@@ -17,6 +17,7 @@\n \n use GLOBALS;\n use Span;\n+use edition::Edition;\n use symbol::{Ident, Symbol};\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n@@ -151,6 +152,7 @@ pub struct HygieneData {\n     syntax_contexts: Vec<SyntaxContextData>,\n     markings: HashMap<(SyntaxContext, Mark), SyntaxContext>,\n     gensym_to_ctxt: HashMap<Symbol, Span>,\n+    default_edition: Edition,\n }\n \n impl HygieneData {\n@@ -168,6 +170,7 @@ impl HygieneData {\n             }],\n             markings: HashMap::new(),\n             gensym_to_ctxt: HashMap::new(),\n+            default_edition: Edition::Edition2015,\n         }\n     }\n \n@@ -176,6 +179,14 @@ impl HygieneData {\n     }\n }\n \n+pub fn default_edition() -> Edition {\n+    HygieneData::with(|data| data.default_edition)\n+}\n+\n+pub fn set_default_edition(edition: Edition) {\n+    HygieneData::with(|data| data.default_edition = edition);\n+}\n+\n pub fn clear_markings() {\n     HygieneData::with(|data| data.markings = HashMap::new());\n }\n@@ -443,6 +454,8 @@ pub struct NameAndSpan {\n     /// Whether the macro is allowed to use `unsafe` internally\n     /// even if the user crate has `#![forbid(unsafe_code)]`.\n     pub allow_internal_unsafe: bool,\n+    /// Edition of the crate in which the macro is defined.\n+    pub edition: Edition,\n     /// The span of the macro definition itself. The macro may not\n     /// have a sensible definition span (e.g. something defined\n     /// completely inside libsyntax) in which case this is None."}]}