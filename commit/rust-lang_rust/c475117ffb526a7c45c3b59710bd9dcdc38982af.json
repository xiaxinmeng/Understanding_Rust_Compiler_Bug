{"sha": "c475117ffb526a7c45c3b59710bd9dcdc38982af", "node_id": "C_kwDOAAsO6NoAKGM0NzUxMTdmZmI1MjZhN2M0NWMzYjU5NzEwYmQ5ZGNkYzM4OTgyYWY", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-04-10T01:16:12Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2022-04-18T19:50:56Z"}, "message": "Refactor exported_symbols and linked_symbols for code reuse", "tree": {"sha": "133051e55a887a23fdc53ee3d4a1574782adf5a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/133051e55a887a23fdc53ee3d4a1574782adf5a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c475117ffb526a7c45c3b59710bd9dcdc38982af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c475117ffb526a7c45c3b59710bd9dcdc38982af", "html_url": "https://github.com/rust-lang/rust/commit/c475117ffb526a7c45c3b59710bd9dcdc38982af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c475117ffb526a7c45c3b59710bd9dcdc38982af/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78f0e72431dd9b2388f91fc7d6449c5b6f5931f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/78f0e72431dd9b2388f91fc7d6449c5b6f5931f4", "html_url": "https://github.com/rust-lang/rust/commit/78f0e72431dd9b2388f91fc7d6449c5b6f5931f4"}], "stats": {"total": 70, "additions": 26, "deletions": 44}, "files": [{"sha": "fce340232500ff102296dd029ca8cc6ebe7cd312", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 26, "deletions": 44, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c475117ffb526a7c45c3b59710bd9dcdc38982af/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c475117ffb526a7c45c3b59710bd9dcdc38982af/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=c475117ffb526a7c45c3b59710bd9dcdc38982af", "patch": "@@ -12,7 +12,7 @@ use std::{env, mem, str};\n \n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_middle::middle::dependency_format::Linkage;\n-use rustc_middle::middle::exported_symbols::SymbolExportKind;\n+use rustc_middle::middle::exported_symbols::{ExportedSymbol, SymbolExportInfo, SymbolExportKind};\n use rustc_middle::ty::TyCtxt;\n use rustc_serialize::{json, Encoder};\n use rustc_session::config::{self, CrateType, DebugInfo, LinkerPluginLto, Lto, OptLevel, Strip};\n@@ -1519,22 +1519,13 @@ impl<'a> L4Bender<'a> {\n     }\n }\n \n-pub(crate) fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n-    if let Some(ref exports) = tcx.sess.target.override_export_symbols {\n-        return exports.clone();\n-    }\n-\n-    let mut symbols = Vec::new();\n-\n-    let export_threshold = symbol_export::crates_export_threshold(&[crate_type]);\n+fn for_each_exported_symbols_include_dep<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    crate_type: CrateType,\n+    mut callback: impl FnMut(ExportedSymbol<'tcx>, SymbolExportInfo, CrateNum),\n+) {\n     for &(symbol, info) in tcx.exported_symbols(LOCAL_CRATE).iter() {\n-        if info.level.is_below_threshold(export_threshold) {\n-            symbols.push(symbol_export::symbol_name_for_instance_in_crate(\n-                tcx,\n-                symbol,\n-                LOCAL_CRATE,\n-            ));\n-        }\n+        callback(symbol, info, LOCAL_CRATE);\n     }\n \n     let formats = tcx.dependency_formats(());\n@@ -1544,16 +1535,26 @@ pub(crate) fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<St\n         let cnum = CrateNum::new(index + 1);\n         // For each dependency that we are linking to statically ...\n         if *dep_format == Linkage::Static {\n-            // ... we add its symbol list to our export list.\n             for &(symbol, info) in tcx.exported_symbols(cnum).iter() {\n-                if !info.level.is_below_threshold(export_threshold) {\n-                    continue;\n-                }\n-\n-                symbols.push(symbol_export::symbol_name_for_instance_in_crate(tcx, symbol, cnum));\n+                callback(symbol, info, cnum);\n             }\n         }\n     }\n+}\n+\n+pub(crate) fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n+    if let Some(ref exports) = tcx.sess.target.override_export_symbols {\n+        return exports.clone();\n+    }\n+\n+    let mut symbols = Vec::new();\n+\n+    let export_threshold = symbol_export::crates_export_threshold(&[crate_type]);\n+    for_each_exported_symbols_include_dep(tcx, crate_type, |symbol, info, cnum| {\n+        if info.level.is_below_threshold(export_threshold) {\n+            symbols.push(symbol_export::symbol_name_for_instance_in_crate(tcx, symbol, cnum));\n+        }\n+    });\n \n     symbols\n }\n@@ -1572,33 +1573,14 @@ pub(crate) fn linked_symbols(\n     let mut symbols = Vec::new();\n \n     let export_threshold = symbol_export::crates_export_threshold(&[crate_type]);\n-    for &(symbol, info) in tcx.exported_symbols(LOCAL_CRATE).iter() {\n+    for_each_exported_symbols_include_dep(tcx, crate_type, |symbol, info, cnum| {\n         if info.level.is_below_threshold(export_threshold) || info.used {\n             symbols.push((\n-                symbol_export::symbol_name_for_instance_in_crate(tcx, symbol, LOCAL_CRATE),\n+                symbol_export::symbol_name_for_instance_in_crate(tcx, symbol, cnum),\n                 info.kind,\n             ));\n         }\n-    }\n-\n-    let formats = tcx.dependency_formats(());\n-    let deps = formats.iter().find_map(|(t, list)| (*t == crate_type).then_some(list)).unwrap();\n-\n-    for (index, dep_format) in deps.iter().enumerate() {\n-        let cnum = CrateNum::new(index + 1);\n-        // For each dependency that we are linking to statically ...\n-        if *dep_format == Linkage::Static {\n-            // ... we add its symbol list to our export list.\n-            for &(symbol, info) in tcx.exported_symbols(cnum).iter() {\n-                if info.level.is_below_threshold(export_threshold) || info.used {\n-                    symbols.push((\n-                        symbol_export::symbol_name_for_instance_in_crate(tcx, symbol, cnum),\n-                        info.kind,\n-                    ));\n-                }\n-            }\n-        }\n-    }\n+    });\n \n     symbols\n }"}]}