{"sha": "fa84593fc3098c4631be0887b772f0665b731a31", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhODQ1OTNmYzMwOThjNDYzMWJlMDg4N2I3NzJmMDY2NWI3MzFhMzE=", "commit": {"author": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2014-01-07T05:39:13Z"}, "committer": {"name": "klutzy", "email": "klutzytheklutzy@gmail.com", "date": "2014-01-22T18:02:39Z"}, "message": "rustpkg: Do not guess version if not given\n\nrustpkg accessed git repo to read tags and guess package version,\nbut it's not quite useful: version can be given explicitly by user,\nand implicit guess may cause confusions.", "tree": {"sha": "87b8416fb4c650ae491616c91de81676d7e76317", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/87b8416fb4c650ae491616c91de81676d7e76317"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa84593fc3098c4631be0887b772f0665b731a31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa84593fc3098c4631be0887b772f0665b731a31", "html_url": "https://github.com/rust-lang/rust/commit/fa84593fc3098c4631be0887b772f0665b731a31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa84593fc3098c4631be0887b772f0665b731a31/comments", "author": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "klutzy", "id": 1589355, "node_id": "MDQ6VXNlcjE1ODkzNTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1589355?v=4", "gravatar_id": "", "url": "https://api.github.com/users/klutzy", "html_url": "https://github.com/klutzy", "followers_url": "https://api.github.com/users/klutzy/followers", "following_url": "https://api.github.com/users/klutzy/following{/other_user}", "gists_url": "https://api.github.com/users/klutzy/gists{/gist_id}", "starred_url": "https://api.github.com/users/klutzy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/klutzy/subscriptions", "organizations_url": "https://api.github.com/users/klutzy/orgs", "repos_url": "https://api.github.com/users/klutzy/repos", "events_url": "https://api.github.com/users/klutzy/events{/privacy}", "received_events_url": "https://api.github.com/users/klutzy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "750d48b0ad1854b389ce1c209484f9146dc7aba0", "url": "https://api.github.com/repos/rust-lang/rust/commits/750d48b0ad1854b389ce1c209484f9146dc7aba0", "html_url": "https://github.com/rust-lang/rust/commit/750d48b0ad1854b389ce1c209484f9146dc7aba0"}], "stats": {"total": 156, "additions": 7, "deletions": 149}, "files": [{"sha": "bd9a75bad6975232a71989fbfaf45a10d66e5e02", "filename": "src/librustpkg/crate_id.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/fa84593fc3098c4631be0887b772f0665b731a31/src%2Flibrustpkg%2Fcrate_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa84593fc3098c4631be0887b772f0665b731a31/src%2Flibrustpkg%2Fcrate_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fcrate_id.rs?ref=fa84593fc3098c4631be0887b772f0665b731a31", "patch": "@@ -8,8 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use version::{try_getting_version, try_getting_local_version,\n-              Version, NoVersion, ExactRevision};\n+use version::{Version, NoVersion, ExactRevision};\n use std::hash::Streaming;\n use std::hash;\n use syntax::crateid;\n@@ -53,17 +52,9 @@ impl CrateId {\n         let raw_crateid = raw_crateid.unwrap();\n         let crateid::CrateId { path, name, version } = raw_crateid;\n         let path = Path::new(path);\n-        let given_version = version.map(|v| ExactRevision(v));\n-\n-        let version = match given_version {\n-            Some(v) => v,\n-            None => match try_getting_local_version(&path) {\n-                Some(v) => v,\n-                None => match try_getting_version(&path) {\n-                    Some(v) => v,\n-                    None => NoVersion\n-                }\n-            }\n+        let version = match version {\n+            Some(v) => ExactRevision(v),\n+            None => NoVersion,\n         };\n \n         CrateId {"}, {"sha": "f2efcadea78545636114f32d5015c447ef937105", "filename": "src/librustpkg/tests.rs", "status": "modified", "additions": 2, "deletions": 42, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/fa84593fc3098c4631be0887b772f0665b731a31/src%2Flibrustpkg%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa84593fc3098c4631be0887b772f0665b731a31/src%2Flibrustpkg%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Ftests.rs?ref=fa84593fc3098c4631be0887b772f0665b731a31", "patch": "@@ -752,46 +752,6 @@ fn test_crate_ids_must_be_relative_path_like() {\n     })\n }\n \n-#[test]\n-fn test_package_version() {\n-    let local_path = \"mockgithub.com/catamorphism/test_pkg_version\";\n-    let repo = init_git_repo(&Path::new(local_path));\n-    let repo = repo.path();\n-    let repo_subdir = repo.join_many([\"mockgithub.com\", \"catamorphism\", \"test_pkg_version\"]);\n-    debug!(\"Writing files in: {}\", repo_subdir.display());\n-    fs::mkdir_recursive(&repo_subdir, io::UserRWX);\n-    writeFile(&repo_subdir.join(\"main.rs\"),\n-              \"fn main() { let _x = (); }\");\n-    writeFile(&repo_subdir.join(\"lib.rs\"),\n-              \"pub fn f() { let _x = (); }\");\n-    writeFile(&repo_subdir.join(\"test.rs\"),\n-              \"#[test] pub fn f() { (); }\");\n-    writeFile(&repo_subdir.join(\"bench.rs\"),\n-              \"#[bench] pub fn f() { (); }\");\n-    add_git_tag(&repo_subdir, ~\"0.4\");\n-\n-    // It won't pick up the 0.4 version because the dir isn't in the RUST_PATH, but...\n-    let temp_pkg_id = CrateId::new(\"mockgithub.com/catamorphism/test_pkg_version\");\n-    // This should look at the prefix, clone into a workspace, then build.\n-    command_line_test([~\"install\", ~\"mockgithub.com/catamorphism/test_pkg_version\"],\n-                      repo);\n-    let ws = repo.join(\".rust\");\n-    // we can still match on the filename to make sure it contains the 0.4 version\n-    assert!(match built_library_in_workspace(&temp_pkg_id,\n-                                             &ws) {\n-        Some(p) => {\n-            let suffix = format!(\"0.4{}\", os::consts::DLL_SUFFIX);\n-            p.as_vec().ends_with(suffix.as_bytes())\n-        }\n-        None    => false\n-    });\n-    assert!(built_executable_in_workspace(&temp_pkg_id, &ws)\n-            == Some(target_build_dir(&ws).join_many([\"mockgithub.com\",\n-                                                     \"catamorphism\",\n-                                                     \"test_pkg_version\",\n-                                                     \"test_pkg_version\"])));\n-}\n-\n #[test]\n fn test_package_request_version() {\n     let local_path = \"mockgithub.com/catamorphism/test_pkg_version\";\n@@ -2183,9 +2143,9 @@ fn test_installed_read_only() {\n               \"fn main() { let _x = (); }\");\n     writeFile(&repo_subdir.join(\"lib.rs\"),\n               \"pub fn f() { let _x = (); }\");\n-    add_git_tag(&repo_subdir, ~\"0.1\"); // this has the effect of committing the files\n+    add_git_tag(&repo_subdir, ~\"0.0\"); // this has the effect of committing the files\n     // update crateid to what will be auto-detected\n-    temp_pkg_id.version = ExactRevision(~\"0.1\");\n+    temp_pkg_id.version = ExactRevision(~\"0.0\");\n \n     // FIXME (#9639): This needs to handle non-utf8 paths\n     command_line_test([~\"install\", temp_pkg_id.path.as_str().unwrap().to_owned()], repo);"}, {"sha": "5da5b4fece9748a67d21732e20f8711675682022", "filename": "src/librustpkg/version.rs", "status": "modified", "additions": 1, "deletions": 94, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/fa84593fc3098c4631be0887b772f0665b731a31/src%2Flibrustpkg%2Fversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa84593fc3098c4631be0887b772f0665b731a31/src%2Flibrustpkg%2Fversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fversion.rs?ref=fa84593fc3098c4631be0887b772f0665b731a31", "patch": "@@ -14,9 +14,7 @@\n extern mod std;\n \n use extra::semver;\n-use std::{char, result, run, str};\n-use extra::tempfile::TempDir;\n-use path_util::rust_path;\n+use std::{char, result};\n \n #[deriving(Clone)]\n pub enum Version {\n@@ -93,91 +91,6 @@ pub fn parse_vers(vers: ~str) -> result::Result<semver::Version, ~str> {\n     }\n }\n \n-/// If `local_path` is a git repo in the RUST_PATH, and the most recent tag\n-/// in that repo denotes a version, return it; otherwise, `None`\n-pub fn try_getting_local_version(local_path: &Path) -> Option<Version> {\n-    let rustpath = rust_path();\n-    for rp in rustpath.iter() {\n-        let local_path = rp.join(local_path);\n-        let git_dir = local_path.join(\".git\");\n-        if !git_dir.is_dir() {\n-            continue;\n-        }\n-        // FIXME (#9639): This needs to handle non-utf8 paths\n-        let opt_outp = run::process_output(\"git\",\n-                                   [\"--git-dir=\" + git_dir.as_str().unwrap(), ~\"tag\", ~\"-l\"]);\n-        let outp = opt_outp.expect(\"Failed to exec `git`\");\n-\n-        debug!(\"git --git-dir={} tag -l ~~~> {:?}\", git_dir.display(), outp.status);\n-\n-        if !outp.status.success() {\n-            continue;\n-        }\n-\n-        let mut output = None;\n-        let output_text = str::from_utf8(outp.output).unwrap();\n-        for l in output_text.lines() {\n-            if !l.is_whitespace() {\n-                output = Some(l);\n-            }\n-            match output.and_then(try_parsing_version) {\n-                Some(v) => return Some(v),\n-                None    => ()\n-            }\n-        }\n-    }\n-    None\n-}\n-\n-/// If `remote_path` refers to a git repo that can be downloaded,\n-/// and the most recent tag in that repo denotes a version, return it;\n-/// otherwise, `None`\n-pub fn try_getting_version(remote_path: &Path) -> Option<Version> {\n-    if is_url_like(remote_path) {\n-        let tmp_dir = TempDir::new(\"test\");\n-        let tmp_dir = tmp_dir.expect(\"try_getting_version: couldn't create temp dir\");\n-        let tmp_dir = tmp_dir.path();\n-        debug!(\"(to get version) executing \\\\{git clone https://{} {}\\\\}\",\n-               remote_path.display(),\n-               tmp_dir.display());\n-        // FIXME (#9639): This needs to handle non-utf8 paths\n-        let opt_outp = run::process_output(\"git\", [~\"clone\", format!(\"https://{}\",\n-                                                                     remote_path.as_str().unwrap()),\n-                                                   tmp_dir.as_str().unwrap().to_owned()]);\n-        let outp = opt_outp.expect(\"Failed to exec `git`\");\n-        if outp.status.success() {\n-            debug!(\"Cloned it... ( {}, {} )\",\n-                   str::from_utf8(outp.output).unwrap(),\n-                   str::from_utf8(outp.error).unwrap());\n-            let mut output = None;\n-            let git_dir = tmp_dir.join(\".git\");\n-            debug!(\"(getting version, now getting tags) executing \\\\{git --git-dir={} tag -l\\\\}\",\n-                   git_dir.display());\n-            // FIXME (#9639): This needs to handle non-utf8 paths\n-            let opt_outp = run::process_output(\"git\",\n-                                               [\"--git-dir=\" + git_dir.as_str().unwrap(),\n-                                                ~\"tag\", ~\"-l\"]);\n-            let outp = opt_outp.expect(\"Failed to exec `git`\");\n-            let output_text = str::from_utf8(outp.output).unwrap();\n-            debug!(\"Full output: ( {} ) [{:?}]\", output_text, outp.status);\n-            for l in output_text.lines() {\n-                debug!(\"A line of output: {}\", l);\n-                if !l.is_whitespace() {\n-                    output = Some(l);\n-                }\n-            }\n-\n-            output.and_then(try_parsing_version)\n-        }\n-        else {\n-            None\n-        }\n-    }\n-    else {\n-        None\n-    }\n-}\n-\n // Being lazy since we don't have a regexp library now\n #[deriving(Eq)]\n enum ParseState {\n@@ -207,12 +120,6 @@ pub fn try_parsing_version(s: &str) -> Option<Version> {\n     }\n }\n \n-/// Just an approximation\n-fn is_url_like(p: &Path) -> bool {\n-    // check if there are more than 2 /-separated components\n-    p.as_vec().split(|b| *b == '/' as u8).nth(2).is_some()\n-}\n-\n /// If s is of the form foo#bar, where bar is a valid version\n /// number, return the prefix before the # and the version.\n /// Otherwise, return None."}]}