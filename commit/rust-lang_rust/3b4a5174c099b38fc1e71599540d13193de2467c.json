{"sha": "3b4a5174c099b38fc1e71599540d13193de2467c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNGE1MTc0YzA5OWIzOGZjMWU3MTU5OTU0MGQxMzE5M2RlMjQ2N2M=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-01T11:11:23Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-04-01T11:11:23Z"}, "message": "rustc: make comments on CrateContext doc comments", "tree": {"sha": "1bb3c39ead76e1de56e9d42689380e692159ad4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bb3c39ead76e1de56e9d42689380e692159ad4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b4a5174c099b38fc1e71599540d13193de2467c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b4a5174c099b38fc1e71599540d13193de2467c", "html_url": "https://github.com/rust-lang/rust/commit/3b4a5174c099b38fc1e71599540d13193de2467c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b4a5174c099b38fc1e71599540d13193de2467c/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64", "html_url": "https://github.com/rust-lang/rust/commit/b8ef9fd9c9f642ce7b8aed82782a1ed745d08d64"}], "stats": {"total": 50, "additions": 25, "deletions": 25}, "files": [{"sha": "a4cc1d8444c3ea750263ae13b432abd5385074a8", "filename": "src/librustc/middle/trans/context.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/3b4a5174c099b38fc1e71599540d13193de2467c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b4a5174c099b38fc1e71599540d13193de2467c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcontext.rs?ref=3b4a5174c099b38fc1e71599540d13193de2467c", "patch": "@@ -51,45 +51,45 @@ pub struct CrateContext {\n     pub link_meta: LinkMeta,\n     pub drop_glues: RefCell<HashMap<ty::t, ValueRef>>,\n     pub tydescs: RefCell<HashMap<ty::t, @tydesc_info>>,\n-    // Set when running emit_tydescs to enforce that no more tydescs are\n-    // created.\n+    /// Set when running emit_tydescs to enforce that no more tydescs are\n+    /// created.\n     pub finished_tydescs: Cell<bool>,\n-    // Track mapping of external ids to local items imported for inlining\n+    /// Track mapping of external ids to local items imported for inlining\n     pub external: RefCell<DefIdMap<Option<ast::NodeId>>>,\n-    // Backwards version of the `external` map (inlined items to where they\n-    // came from)\n+    /// Backwards version of the `external` map (inlined items to where they\n+    /// came from)\n     pub external_srcs: RefCell<NodeMap<ast::DefId>>,\n-    // A set of static items which cannot be inlined into other crates. This\n-    // will pevent in IIItem() structures from being encoded into the metadata\n-    // that is generated\n+    /// A set of static items which cannot be inlined into other crates. This\n+    /// will pevent in IIItem() structures from being encoded into the metadata\n+    /// that is generated\n     pub non_inlineable_statics: RefCell<NodeSet>,\n-    // Cache instances of monomorphized functions\n+    /// Cache instances of monomorphized functions\n     pub monomorphized: RefCell<HashMap<mono_id, ValueRef>>,\n     pub monomorphizing: RefCell<DefIdMap<uint>>,\n-    // Cache generated vtables\n+    /// Cache generated vtables\n     pub vtables: RefCell<HashMap<(ty::t, mono_id), ValueRef>>,\n-    // Cache of constant strings,\n+    /// Cache of constant strings,\n     pub const_cstr_cache: RefCell<HashMap<InternedString, ValueRef>>,\n \n-    // Reverse-direction for const ptrs cast from globals.\n-    // Key is an int, cast from a ValueRef holding a *T,\n-    // Val is a ValueRef holding a *[T].\n-    //\n-    // Needed because LLVM loses pointer->pointee association\n-    // when we ptrcast, and we have to ptrcast during translation\n-    // of a [T] const because we form a slice, a [*T,int] pair, not\n-    // a pointer to an LLVM array type.\n+    /// Reverse-direction for const ptrs cast from globals.\n+    /// Key is an int, cast from a ValueRef holding a *T,\n+    /// Val is a ValueRef holding a *[T].\n+    ///\n+    /// Needed because LLVM loses pointer->pointee association\n+    /// when we ptrcast, and we have to ptrcast during translation\n+    /// of a [T] const because we form a slice, a [*T,int] pair, not\n+    /// a pointer to an LLVM array type.\n     pub const_globals: RefCell<HashMap<int, ValueRef>>,\n \n-    // Cache of emitted const values\n+    /// Cache of emitted const values\n     pub const_values: RefCell<NodeMap<ValueRef>>,\n \n-    // Cache of external const values\n+    /// Cache of external const values\n     pub extern_const_values: RefCell<DefIdMap<ValueRef>>,\n \n     pub impl_method_cache: RefCell<HashMap<(ast::DefId, ast::Name), ast::DefId>>,\n \n-    // Cache of closure wrappers for bare fn's.\n+    /// Cache of closure wrappers for bare fn's.\n     pub closure_bare_wrapper_cache: RefCell<HashMap<ValueRef, ValueRef>>,\n \n     pub lltypes: RefCell<HashMap<ty::t, Type>>,\n@@ -104,9 +104,9 @@ pub struct CrateContext {\n     pub int_type: Type,\n     pub opaque_vec_type: Type,\n     pub builder: BuilderRef_res,\n-    // Set when at least one function uses GC. Needed so that\n-    // decl_gc_metadata knows whether to link to the module metadata, which\n-    // is not emitted by LLVM's GC pass when no functions use GC.\n+    /// Set when at least one function uses GC. Needed so that\n+    /// decl_gc_metadata knows whether to link to the module metadata, which\n+    /// is not emitted by LLVM's GC pass when no functions use GC.\n     pub uses_gc: bool,\n     pub dbg_cx: Option<debuginfo::CrateDebugContext>,\n }"}]}