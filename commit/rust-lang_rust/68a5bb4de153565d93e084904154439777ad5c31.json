{"sha": "68a5bb4de153565d93e084904154439777ad5c31", "node_id": "C_kwDOAAsO6NoAKDY4YTViYjRkZTE1MzU2NWQ5M2UwODQ5MDQxNTQ0Mzk3NzdhZDVjMzE", "commit": {"author": {"name": "Charisee", "email": "chiw@google.com", "date": "2023-05-05T18:32:20Z"}, "committer": {"name": "Charisee", "email": "chiw@google.com", "date": "2023-05-05T18:32:20Z"}, "message": "Add GNU Property Note", "tree": {"sha": "aa05ae9255cb8ee24f85bf544478dbc454bbfcc6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa05ae9255cb8ee24f85bf544478dbc454bbfcc6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68a5bb4de153565d93e084904154439777ad5c31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68a5bb4de153565d93e084904154439777ad5c31", "html_url": "https://github.com/rust-lang/rust/commit/68a5bb4de153565d93e084904154439777ad5c31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68a5bb4de153565d93e084904154439777ad5c31/comments", "author": null, "committer": null, "parents": [{"sha": "cb4f8153d8285ac2bf2145c569c09014f3ba317d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4f8153d8285ac2bf2145c569c09014f3ba317d", "html_url": "https://github.com/rust-lang/rust/commit/cb4f8153d8285ac2bf2145c569c09014f3ba317d"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "d4515a794ee5feff2979cf21e52ecc9d999debad", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/68a5bb4de153565d93e084904154439777ad5c31/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a5bb4de153565d93e084904154439777ad5c31/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=68a5bb4de153565d93e084904154439777ad5c31", "patch": "@@ -98,6 +98,7 @@ fn add_gnu_property_note(\n     file: &mut write::Object<'static>,\n     architecture: Architecture,\n     binary_format: BinaryFormat,\n+    endianness: Endianness,\n ) {\n     // check bti protection\n     if binary_format != BinaryFormat::Elf\n@@ -115,23 +116,26 @@ fn add_gnu_property_note(\n     let n_namsz: u32 = 4; // Size of the n_name field\n     let n_descsz: u32 = 16; // Size of the n_desc field\n     let n_type: u32 = NT_GNU_PROPERTY_TYPE_0; // Type of note descriptor\n-    let values = [n_namsz, n_descsz, n_type];\n-    values.map(|v| data.extend_from_slice(&(v.to_le_bytes())));\n-    data.push(b'G'); // Owner of the program property note\n-    data.push(b'N');\n-    data.push(b'U');\n-    data.push(0);\n+    let header_values = [n_namsz, n_descsz, n_type];\n+    match endianness {\n+        Endianness::Little => header_values.map(|v| data.extend_from_slice(&(v.to_le_bytes()))),\n+        Endianness::Big => header_values.map(|v| data.extend_from_slice(&(v.to_be_bytes()))),\n+    };\n+    data.extend_from_slice(b\"GNU\\0\"); // Owner of the program property note\n     let pr_type: u32 = match architecture {\n         Architecture::X86_64 => 0xc0000002,\n         Architecture::Aarch64 => 0xc0000000,\n         _ => unreachable!(),\n     };\n     let pr_datasz: u32 = 4; //size of the pr_data field\n     let pr_data: u32 = 3; //program property descriptor\n-    let pr_padding: u32 = 3;\n-    let values = [pr_type, pr_datasz, pr_data, pr_padding];\n-    values.map(|v| data.extend_from_slice(&(v.to_le_bytes())));\n-    file.append_section_data(section, &data, 4);\n+    let pr_padding: u32 = 0;\n+    let property_values = [pr_type, pr_datasz, pr_data, pr_padding];\n+    match endianness {\n+        Endianness::Little => property_values.map(|v| data.extend_from_slice(&(v.to_le_bytes()))),\n+        Endianness::Big => property_values.map(|v| data.extend_from_slice(&(v.to_be_bytes()))),\n+    };\n+    file.append_section_data(section, &data, 8);\n }\n \n pub(crate) fn create_object_file(sess: &Session) -> Option<write::Object<'static>> {\n@@ -246,7 +250,7 @@ pub(crate) fn create_object_file(sess: &Session) -> Option<write::Object<'static\n         _ => elf::ELFOSABI_NONE,\n     };\n     let abi_version = 0;\n-    add_gnu_property_note(&mut file, architecture, binary_format);\n+    add_gnu_property_note(&mut file, architecture, binary_format, endianness);\n     file.flags = FileFlags::Elf { os_abi, abi_version, e_flags };\n     Some(file)\n }"}, {"sha": "cabe951e1c5cb2d5cbb1fbdb6d3b91e158977b8e", "filename": "tests/run-make/branch-protection-check-IBT/Makefile", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/68a5bb4de153565d93e084904154439777ad5c31/tests%2Frun-make%2Fbranch-protection-check-IBT%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/68a5bb4de153565d93e084904154439777ad5c31/tests%2Frun-make%2Fbranch-protection-check-IBT%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fbranch-protection-check-IBT%2FMakefile?ref=68a5bb4de153565d93e084904154439777ad5c31", "patch": "@@ -0,0 +1,15 @@\n+# Check for GNU Property Note\n+\n+include ../tools.mk\n+\n+# How to run this\n+# python3 x.py test --target x86_64-unknown-linux-gnu  tests/run-make/branch-protection-check-IBT/\n+\n+# only-x86_64\n+\n+all:\n+ifeq ($(filter x86,$(LLVM_COMPONENTS)),x86_64)\n+\t$(RUSTC) --target x86_64-unknown-linux-gnu -Z cf-protection=branch -L$(TMPDIR) -C link-args='-nostartfiles'  -C save-temps  ./main.rs -o $(TMPDIR)/rsmain\n+\t readelf -nW $(TMPDIR)/rsmain | $(CGREP) -e \".note.gnu.property\"\n+endif\n+"}, {"sha": "ad379d6ea4373eab048e758c128f99477cb6c8a8", "filename": "tests/run-make/branch-protection-check-IBT/main.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/68a5bb4de153565d93e084904154439777ad5c31/tests%2Frun-make%2Fbranch-protection-check-IBT%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68a5bb4de153565d93e084904154439777ad5c31/tests%2Frun-make%2Fbranch-protection-check-IBT%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-make%2Fbranch-protection-check-IBT%2Fmain.rs?ref=68a5bb4de153565d93e084904154439777ad5c31", "patch": "@@ -0,0 +1,3 @@\n+fn main() {\n+    println!(\"hello world\");\n+}"}]}