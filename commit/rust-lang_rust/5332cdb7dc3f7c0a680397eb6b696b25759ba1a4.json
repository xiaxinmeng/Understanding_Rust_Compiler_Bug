{"sha": "5332cdb7dc3f7c0a680397eb6b696b25759ba1a4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMzJjZGI3ZGMzZjdjMGE2ODAzOTdlYjZiNjk2YjI1NzU5YmExYTQ=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-02-22T05:06:51Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-02-22T05:06:51Z"}, "message": "Remove unneeded visitor class\n\nUse ExprUseVisitor correctly instead.", "tree": {"sha": "12989997bacb21036e6c95358442ef851c610afb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12989997bacb21036e6c95358442ef851c610afb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5332cdb7dc3f7c0a680397eb6b696b25759ba1a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5332cdb7dc3f7c0a680397eb6b696b25759ba1a4", "html_url": "https://github.com/rust-lang/rust/commit/5332cdb7dc3f7c0a680397eb6b696b25759ba1a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5332cdb7dc3f7c0a680397eb6b696b25759ba1a4/comments", "author": null, "committer": null, "parents": [{"sha": "9d6ecc74850148e0eee2304f9a90ebb199e14c0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d6ecc74850148e0eee2304f9a90ebb199e14c0f", "html_url": "https://github.com/rust-lang/rust/commit/9d6ecc74850148e0eee2304f9a90ebb199e14c0f"}], "stats": {"total": 44, "additions": 4, "deletions": 40}, "files": [{"sha": "909d82a7be5b2256f935bf520a72608928d68599", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 4, "deletions": 40, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/5332cdb7dc3f7c0a680397eb6b696b25759ba1a4/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5332cdb7dc3f7c0a680397eb6b696b25759ba1a4/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=5332cdb7dc3f7c0a680397eb6b696b25759ba1a4", "patch": "@@ -1,12 +1,11 @@\n use crate::utils::span_lint;\n use rustc::hir::intravisit as visit;\n-use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::middle::expr_use_visitor::*;\n use rustc::middle::mem_categorization::{cmt_, Categorization};\n use rustc::ty::layout::LayoutOf;\n-use rustc::ty::{self, Ty, UpvarCapture};\n+use rustc::ty::{self, Ty};\n use rustc::util::nodemap::NodeSet;\n use rustc::{declare_tool_lint, lint_array};\n use syntax::ast::NodeId;\n@@ -89,17 +88,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n         let region_scope_tree = &cx.tcx.region_scope_tree(fn_def_id);\n         ExprUseVisitor::new(&mut v, cx.tcx, cx.param_env, region_scope_tree, cx.tables, None).consume_body(body);\n \n-        let mut capture_visitor = CaptureVisitor {\n-            cx,\n-            moved: NodeSet::default(),\n-        };\n-        capture_visitor.visit_body(body);\n-\n-        for node in v.set.difference(&capture_visitor.moved) {\n+        for node in v.set {\n             span_lint(\n                 cx,\n                 BOXED_LOCAL,\n-                cx.tcx.hir().span(*node),\n+                cx.tcx.hir().span(node),\n                 \"local variable doesn't need to be boxed here\",\n             );\n         }\n@@ -109,7 +102,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n     fn consume(&mut self, _: NodeId, _: Span, cmt: &cmt_<'tcx>, mode: ConsumeMode) {\n         if let Categorization::Local(lid) = cmt.cat {\n-            if let Move(DirectRefMove) = mode {\n+            if let Move(DirectRefMove) | Move(CaptureMove) = mode {\n                 // moved out or in. clearly can't be localized\n                 self.set.remove(&lid);\n             }\n@@ -199,32 +192,3 @@ impl<'a, 'tcx> EscapeDelegate<'a, 'tcx> {\n         }\n     }\n }\n-\n-struct CaptureVisitor<'a, 'tcx: 'a> {\n-    cx: &'a LateContext<'a, 'tcx>,\n-    moved: NodeSet,\n-}\n-\n-impl<'a, 'tcx> Visitor<'tcx> for CaptureVisitor<'a, 'tcx> {\n-    fn visit_expr(&mut self, expr: &'tcx Expr) {\n-        if let ExprKind::Closure(..) = expr.node {\n-            if let ty::Closure(def_id, _) = &self.cx.tables.expr_ty(expr).sty {\n-                if let Some(upvar_list) = &self.cx.tables.upvar_list.get(&def_id) {\n-                    for upvar_id in upvar_list.iter() {\n-                        if let UpvarCapture::ByValue = self.cx.tables.upvar_capture(*upvar_id) {\n-                            let hir_id = upvar_id.var_path.hir_id;\n-                            let id = &self.cx.tcx.hir().hir_to_node_id(hir_id);\n-                            self.moved.insert(*id);\n-                        }\n-                    }\n-                }\n-            }\n-        } else {\n-            walk_expr(self, expr);\n-        }\n-    }\n-\n-    fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'tcx> {\n-        NestedVisitorMap::None\n-    }\n-}"}]}