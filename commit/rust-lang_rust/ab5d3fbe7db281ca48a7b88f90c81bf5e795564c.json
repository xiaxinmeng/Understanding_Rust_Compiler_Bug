{"sha": "ab5d3fbe7db281ca48a7b88f90c81bf5e795564c", "node_id": "C_kwDOAAsO6NoAKGFiNWQzZmJlN2RiMjgxY2E0OGE3Yjg4ZjkwYzgxYmY1ZTc5NTU2NGM", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-23T00:14:48Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-02-25T05:11:02Z"}, "message": "Add inlining attributes for query system functions", "tree": {"sha": "b3dd77d390be8b6c05b0061b4343d4e24850a1e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3dd77d390be8b6c05b0061b4343d4e24850a1e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab5d3fbe7db281ca48a7b88f90c81bf5e795564c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5d3fbe7db281ca48a7b88f90c81bf5e795564c", "html_url": "https://github.com/rust-lang/rust/commit/ab5d3fbe7db281ca48a7b88f90c81bf5e795564c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab5d3fbe7db281ca48a7b88f90c81bf5e795564c/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a049550c457dc78e81ffa69d03e1619f4ff689a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a049550c457dc78e81ffa69d03e1619f4ff689a2", "html_url": "https://github.com/rust-lang/rust/commit/a049550c457dc78e81ffa69d03e1619f4ff689a2"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "2c0b3b690cfccc7d0aca0045c02dca8e198d3383", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ab5d3fbe7db281ca48a7b88f90c81bf5e795564c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5d3fbe7db281ca48a7b88f90c81bf5e795564c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=ab5d3fbe7db281ca48a7b88f90c81bf5e795564c", "patch": "@@ -1011,6 +1011,7 @@ impl<'tcx> TyCtxt<'tcx> {\n \n     /// Note that this is *untracked* and should only be used within the query\n     /// system if the result is otherwise tracked through queries\n+    #[inline]\n     pub fn cstore_untracked(self) -> MappedReadGuard<'tcx, CrateStoreDyn> {\n         ReadGuard::map(self.untracked.cstore.read(), |c| &**c)\n     }"}, {"sha": "59e0c35974559c1e4ce46b0d53eb796c81683668", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab5d3fbe7db281ca48a7b88f90c81bf5e795564c/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5d3fbe7db281ca48a7b88f90c81bf5e795564c/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=ab5d3fbe7db281ca48a7b88f90c81bf5e795564c", "patch": "@@ -279,6 +279,7 @@ impl<K: DepKind> DepGraph<K> {\n     ///   `arg` parameter.\n     ///\n     /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/incremental-compilation.html\n+    #[inline(always)]\n     pub fn with_task<Ctxt: HasDepContext<DepKind = K>, A: Debug, R>(\n         &self,\n         key: DepNode<K>,\n@@ -298,6 +299,7 @@ impl<K: DepKind> DepGraph<K> {\n         }\n     }\n \n+    #[inline(always)]\n     fn with_task_impl<Ctxt: HasDepContext<DepKind = K>, A: Debug, R>(\n         &self,\n         key: DepNode<K>,\n@@ -598,6 +600,7 @@ impl<K: DepKind> DepGraph<K> {\n         self.data.is_some() && self.dep_node_index_of_opt(dep_node).is_some()\n     }\n \n+    #[inline]\n     pub fn prev_fingerprint_of(&self, dep_node: &DepNode<K>) -> Option<Fingerprint> {\n         self.data.as_ref().unwrap().previous.fingerprint_of(dep_node)\n     }\n@@ -1127,6 +1130,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n \n     /// Writes the node to the current dep-graph and allocates a `DepNodeIndex` for it.\n     /// Assumes that this is a node that has no equivalent in the previous dep-graph.\n+    #[inline(always)]\n     fn intern_new_node(\n         &self,\n         profiler: &SelfProfilerRef,\n@@ -1365,6 +1369,7 @@ impl DepNodeColorMap {\n         }\n     }\n \n+    #[inline]\n     fn insert(&self, index: SerializedDepNodeIndex, color: DepNodeColor) {\n         self.values[index].store(\n             match color {"}, {"sha": "fa877ceaf2375b03189696af84e10b7e5bb0fdff", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5d3fbe7db281ca48a7b88f90c81bf5e795564c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5d3fbe7db281ca48a7b88f90c81bf5e795564c/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=ab5d3fbe7db281ca48a7b88f90c81bf5e795564c", "patch": "@@ -394,6 +394,7 @@ where\n     }\n }\n \n+#[inline(always)]\n fn execute_job<Q, Qcx>(\n     qcx: Qcx,\n     key: Q::Key,\n@@ -479,6 +480,7 @@ where\n     (result, dep_node_index)\n }\n \n+#[inline(always)]\n fn try_load_from_disk_and_cache_in_memory<Q, Qcx>(\n     qcx: Qcx,\n     key: &Q::Key,\n@@ -569,6 +571,7 @@ where\n     Some((result, dep_node_index))\n }\n \n+#[inline]\n #[instrument(skip(tcx, result, hash_result), level = \"debug\")]\n pub(crate) fn incremental_verify_ich<Tcx, V: Debug>(\n     tcx: Tcx,\n@@ -723,6 +726,7 @@ pub enum QueryMode {\n     Ensure,\n }\n \n+#[inline(always)]\n pub fn get_query<Q, Qcx, D>(qcx: Qcx, span: Span, key: Q::Key, mode: QueryMode) -> Option<Q::Value>\n where\n     D: DepKind,"}]}