{"sha": "f69a88b7d345e09e076ae65e4c8538c6f034b47c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2OWE4OGI3ZDM0NWUwOWUwNzZhZTY1ZTRjODUzOGM2ZjAzNGI0N2M=", "commit": {"author": {"name": "Jake Vossen", "email": "jake@vossen.dev", "date": "2020-09-30T16:52:51Z"}, "committer": {"name": "Jake Vossen", "email": "jake@vossen.dev", "date": "2020-09-30T16:52:51Z"}, "message": "updated p! macro to accept literals", "tree": {"sha": "acb9924f2e32624155da763a655c1c0995e5cf25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acb9924f2e32624155da763a655c1c0995e5cf25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f69a88b7d345e09e076ae65e4c8538c6f034b47c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f69a88b7d345e09e076ae65e4c8538c6f034b47c", "html_url": "https://github.com/rust-lang/rust/commit/f69a88b7d345e09e076ae65e4c8538c6f034b47c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f69a88b7d345e09e076ae65e4c8538c6f034b47c/comments", "author": {"login": "jakevossen5", "id": 16298666, "node_id": "MDQ6VXNlcjE2Mjk4NjY2", "avatar_url": "https://avatars.githubusercontent.com/u/16298666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevossen5", "html_url": "https://github.com/jakevossen5", "followers_url": "https://api.github.com/users/jakevossen5/followers", "following_url": "https://api.github.com/users/jakevossen5/following{/other_user}", "gists_url": "https://api.github.com/users/jakevossen5/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevossen5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevossen5/subscriptions", "organizations_url": "https://api.github.com/users/jakevossen5/orgs", "repos_url": "https://api.github.com/users/jakevossen5/repos", "events_url": "https://api.github.com/users/jakevossen5/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevossen5/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jakevossen5", "id": 16298666, "node_id": "MDQ6VXNlcjE2Mjk4NjY2", "avatar_url": "https://avatars.githubusercontent.com/u/16298666?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jakevossen5", "html_url": "https://github.com/jakevossen5", "followers_url": "https://api.github.com/users/jakevossen5/followers", "following_url": "https://api.github.com/users/jakevossen5/following{/other_user}", "gists_url": "https://api.github.com/users/jakevossen5/gists{/gist_id}", "starred_url": "https://api.github.com/users/jakevossen5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jakevossen5/subscriptions", "organizations_url": "https://api.github.com/users/jakevossen5/orgs", "repos_url": "https://api.github.com/users/jakevossen5/repos", "events_url": "https://api.github.com/users/jakevossen5/events{/privacy}", "received_events_url": "https://api.github.com/users/jakevossen5/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d103fe15d16dddd3300799375e9e6516e1d072e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d103fe15d16dddd3300799375e9e6516e1d072e5", "html_url": "https://github.com/rust-lang/rust/commit/d103fe15d16dddd3300799375e9e6516e1d072e5"}], "stats": {"total": 43, "additions": 43, "deletions": 0}, "files": [{"sha": "8166e1dd6ff5c6be84a7d4e71cb1403dc3cfa414", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f69a88b7d345e09e076ae65e4c8538c6f034b47c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f69a88b7d345e09e076ae65e4c8538c6f034b47c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=f69a88b7d345e09e076ae65e4c8538c6f034b47c", "patch": "@@ -646,8 +646,13 @@ pub trait PrettyPrinter<'tcx>:\n             ty::Generator(did, substs, movability) => {\n                 p!(write(\"[\"));\n                 match movability {\n+<<<<<<< HEAD\n                     hir::Movability::Movable => {}\n                     hir::Movability::Static => p!(\"static \"),\n+=======\n+                    hir::Movability::Movable => p!(\"[generator\"),\n+                    hir::Movability::Static => p!(\"[static generator\"),\n+>>>>>>> 4bc0ae233aa... updated p! macro to accept literals\n                 }\n \n                 if !self.tcx().sess.verbose() {\n@@ -686,6 +691,7 @@ pub trait PrettyPrinter<'tcx>:\n                 p!(in_binder(&types));\n             }\n             ty::Closure(did, substs) => {\n+<<<<<<< HEAD\n                 p!(write(\"[\"));\n                 if !self.tcx().sess.verbose() {\n                     p!(write(\"closure\"));\n@@ -697,6 +703,33 @@ pub trait PrettyPrinter<'tcx>:\n                         } else {\n                             let span = self.tcx().hir().span(hir_id);\n                             p!(write(\"@{}\", self.tcx().sess.source_map().span_to_string(span)));\n+=======\n+                p!(\"[closure\");\n+\n+                // FIXME(eddyb) should use `def_span`.\n+                if let Some(did) = did.as_local() {\n+                    let hir_id = self.tcx().hir().local_def_id_to_hir_id(did);\n+                    if self.tcx().sess.opts.debugging_opts.span_free_formats {\n+                        p!(\"@\", print_def_path(did.to_def_id(), substs));\n+                    } else {\n+                        let span = self.tcx().hir().span(hir_id);\n+                        p!(write(\"@{}\", self.tcx().sess.source_map().span_to_string(span)));\n+                    }\n+\n+                    if substs.as_closure().is_valid() {\n+                        let upvar_tys = substs.as_closure().upvar_tys();\n+                        let mut sep = \" \";\n+                        for (&var_id, upvar_ty) in self\n+                            .tcx()\n+                            .upvars_mentioned(did)\n+                            .as_ref()\n+                            .iter()\n+                            .flat_map(|v| v.keys())\n+                            .zip(upvar_tys)\n+                        {\n+                            p!(write(\"{}{}:\", sep, self.tcx().hir().name(var_id)), print(upvar_ty));\n+                            sep = \", \";\n+>>>>>>> 4bc0ae233aa... updated p! macro to accept literals\n                         }\n                     } else {\n                         p!(write(\"@{}\", self.tcx().def_path_str(did)));\n@@ -723,7 +756,17 @@ pub trait PrettyPrinter<'tcx>:\n                         }\n                     }\n                 }\n+<<<<<<< HEAD\n                 p!(\"]\");\n+=======\n+\n+                if self.tcx().sess.verbose() && substs.as_closure().is_valid() {\n+                    p!(\" closure_kind_ty=\", print(substs.as_closure().kind_ty()));\n+                    p!(\" closure_sig_as_fn_ptr_ty=\", print(substs.as_closure().sig_as_fn_ptr_ty()));\n+                }\n+\n+                p!(\"]\")\n+>>>>>>> 4bc0ae233aa... updated p! macro to accept literals\n             }\n             ty::Array(ty, sz) => {\n                 p!(\"[\", print(ty), \"; \");"}]}