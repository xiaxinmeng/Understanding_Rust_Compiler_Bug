{"sha": "6d4907a7426de78b929b1db36e5d027e035a4d25", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNDkwN2E3NDI2ZGU3OGI5MjliMWRiMzZlNWQwMjdlMDM1YTRkMjU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-26T06:46:32Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-26T19:35:17Z"}, "message": "testsuite: Eliminate uses of structural records from most run-pass tests\n\nExcept the pipes tests (that needs a snapshot)", "tree": {"sha": "8ef3b3b16b93573b039bc58a8c899a22b3f1ab64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ef3b3b16b93573b039bc58a8c899a22b3f1ab64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d4907a7426de78b929b1db36e5d027e035a4d25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d4907a7426de78b929b1db36e5d027e035a4d25", "html_url": "https://github.com/rust-lang/rust/commit/6d4907a7426de78b929b1db36e5d027e035a4d25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d4907a7426de78b929b1db36e5d027e035a4d25/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "413be829eba2eda321e5470912c548b75ef2c25e", "url": "https://api.github.com/repos/rust-lang/rust/commits/413be829eba2eda321e5470912c548b75ef2c25e", "html_url": "https://github.com/rust-lang/rust/commit/413be829eba2eda321e5470912c548b75ef2c25e"}], "stats": {"total": 1032, "additions": 600, "deletions": 432}, "files": [{"sha": "d20653e429ae93b838b990d94f12b702d9d05f78", "filename": "src/test/auxiliary/cci_nested_lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_nested_lib.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -13,11 +13,12 @@\n \n use dvec::DVec;\n \n-type entry<A,B> = {key: A, value: B};\n-struct alist<A,B> { eq_fn: fn@(A,A) -> bool, data: DVec<entry<A,B>> }\n+struct Entry<A,B> {key: A, value: B}\n+\n+struct alist<A,B> { eq_fn: fn@(A,A) -> bool, data: DVec<Entry<A,B>> }\n \n fn alist_add<A: Copy, B: Copy>(lst: alist<A,B>, k: A, v: B) {\n-    lst.data.push({key:k, value:v});\n+    lst.data.push(Entry{key:k, value:v});\n }\n \n fn alist_get<A: Copy, B: Copy>(lst: alist<A,B>, k: A) -> B {"}, {"sha": "e07f24c2fb7783310a186520ae547345785175a4", "filename": "src/test/auxiliary/crateresolve5-1.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-1.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -14,8 +14,10 @@\n #[crate_type = \"lib\"];\n #[legacy_exports];\n \n-fn structural() -> { name: ~str, val: int } {\n-    { name: ~\"crateresolve5\", val: 10 }\n+struct NameVal { name: ~str, val: int }\n+\n+fn struct_nameval() -> NameVal {\n+    NameVal { name: ~\"crateresolve5\", val: 10 }\n }\n \n enum e {"}, {"sha": "be7e993d29c0ebe94868734831728f9cf7ec717e", "filename": "src/test/auxiliary/crateresolve5-2.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrateresolve5-2.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -14,8 +14,9 @@\n #[crate_type = \"lib\"];\n #[legacy_exports];\n \n-fn structural() -> { name: ~str, val: int } {\n-    { name: ~\"crateresolve5\", val: 10 }\n+struct NameVal { name: ~str, val: int }\n+fn struct_nameval() -> NameVal {\n+    NameVal { name: ~\"crateresolve5\", val: 10 }\n }\n \n enum e {"}, {"sha": "888acf30b2a933bfdece4ff22d047890fd947d92", "filename": "src/test/run-pass/alias-uninit-value.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -14,10 +14,10 @@\n \n enum sty { ty_nil, }\n \n-type raw_t = {struct_: sty, cname: Option<~str>, hash: uint};\n+struct RawT {struct_: sty, cname: Option<~str>, hash: uint}\n \n-fn mk_raw_ty(st: sty, cname: Option<~str>) -> raw_t {\n-    return {struct_: st, cname: cname, hash: 0u};\n+fn mk_raw_ty(st: sty, cname: Option<~str>) -> RawT {\n+    return RawT {struct_: st, cname: cname, hash: 0u};\n }\n \n fn main() { mk_raw_ty(ty_nil, None::<~str>); }"}, {"sha": "2e0e3ea8f559fd48ecf2379578f63ccfe382af9a", "filename": "src/test/run-pass/alignment-gep-tup-like-2.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,18 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type pair<A,B> = {\n+struct Pair<A,B> {\n     a: A, b: B\n-};\n+}\n \n-enum rec<A> = _rec<A>;\n-type _rec<A> = {\n+enum RecEnum<A> = Rec<A>;\n+struct Rec<A> {\n     val: A,\n-    mut rec: Option<@rec<A>>\n-};\n+    mut rec: Option<@RecEnum<A>>\n+}\n \n fn make_cycle<A:Copy>(a: A) {\n-    let g: @rec<A> = @rec({val: a, mut rec: None});\n+    let g: @RecEnum<A> = @RecEnum(Rec {val: a, mut rec: None});\n     g.rec = Some(g);\n }\n "}, {"sha": "2901754c8f2be925ec05980a36b9952f074db8d1", "filename": "src/test/run-pass/alloca-from-derived-tydesc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,8 +10,8 @@\n \n enum option<T> { some(T), none, }\n \n-type r<T> = {mut v: ~[option<T>]};\n+struct R<T> {mut v: ~[option<T>]}\n \n fn f<T>() -> ~[T] { return ~[]; }\n \n-fn main() { let r: r<int> = {mut v: ~[]}; r.v = f(); }\n+fn main() { let r: R<int> = R {mut v: ~[]}; r.v = f(); }"}, {"sha": "a30a0c64215ec0741143e0d2ed14906f3b357db4", "filename": "src/test/run-pass/alt-implicit-copy-unique.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,10 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct Pair { mut a: ~int, mut b: ~int }\n+\n fn main() {\n-    let x = ~{mut a: ~10, b: ~20};\n+    let x = ~Pair {mut a: ~10, b: ~20};\n     match x {\n-      ~{a: ref mut a, b: ref b} => {\n+      ~Pair {a: ref mut a, b: ref b} => {\n         assert **a == 10; *a = ~30; assert **a == 30;\n       }\n     }"}, {"sha": "f23cf72cf1f8eeeb9efa280435fb2eb0225691dc", "filename": "src/test/run-pass/alt-naked-record-expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Falt-naked-record-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Falt-naked-record-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-naked-record-expr.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct X { x: int }\n+\n fn main() {\n     let x = match 0 {\n-      _ => {\n+      _ => X {\n         x: 0\n       }.x\n     };"}, {"sha": "dbb8b07b8e84e66ee094b0806006852fed24b8b7", "filename": "src/test/run-pass/alt-naked-record.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Falt-naked-record.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Falt-naked-record.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-naked-record.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct X { x: int }\n+\n fn main() {\n     let x = match 0 {\n-      _ => {\n+      _ => X {\n         x: 0\n       }\n     };"}, {"sha": "fc124041fd4e68102e5acd2ba6925acafac26d85", "filename": "src/test/run-pass/alt-ref-binding-mut.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Falt-ref-binding-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Falt-ref-binding-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-ref-binding-mut.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,18 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type rec = {\n+struct Rec {\n     f: int\n-};\n+}\n \n-fn destructure(x: &mut rec) {\n+fn destructure(x: &mut Rec) {\n     match *x {\n-      {f: ref mut f} => *f += 1\n+      Rec {f: ref mut f} => *f += 1\n     }\n }\n \n fn main() {\n-    let mut v = {f: 22};\n+    let mut v = Rec {f: 22};\n     destructure(&mut v);\n     assert v.f == 23;\n }"}, {"sha": "560a6cbb823d11ef0751476c5189ab60a72b44f7", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -11,7 +11,9 @@\n // xfail-fast\n #[legacy_modes];\n \n-fn f1(a: {mut x: int}, b: &mut int, -c: int) -> int {\n+struct X { mut x: int }\n+\n+fn f1(a: X, b: &mut int, -c: int) -> int {\n     let r = a.x + *b + c;\n     a.x = 0;\n     *b = 10;\n@@ -21,7 +23,7 @@ fn f1(a: {mut x: int}, b: &mut int, -c: int) -> int {\n fn f2(a: int, f: fn(int)) -> int { f(1); return a; }\n \n fn main() {\n-    let mut a = {mut x: 1}, b = 2, c = 3;\n+    let mut a = X {mut x: 1}, b = 2, c = 3;\n     assert (f1(a, &mut b, move c) == 6);\n     assert (a.x == 0);\n     assert (b == 10);"}, {"sha": "a2031019a4d1f88fce7d0ff9820902fcdaaf8071", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -12,9 +12,13 @@\n \n \n // -*- rust -*-\n-fn f<T: Copy, U: Copy>(x: T, y: U) -> {a: T, b: U} { return {a: x, b: y}; }\n+\n+struct Pair<T, U> { a: T, b: U }\n+struct Triple { x: int, y: int, z: int }\n+\n+fn f<T: Copy, U: Copy>(x: T, y: U) -> Pair<T, U> { return Pair {a: x, b: y}; }\n \n fn main() {\n-    log(debug, f({x: 3, y: 4, z: 5}, 4).a.x);\n+    log(debug, f(Triple {x: 3, y: 4, z: 5}, 4).a.x);\n     log(debug, f(5, 6).a);\n }"}, {"sha": "7a620d584819bd52f353c26f97e15846bb91dfdf", "filename": "src/test/run-pass/borrowck-binding-mutbl.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,14 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct F { mut f: ~[int] }\n+\n fn impure(_v: &[int]) {\n }\n \n fn main() {\n-    let x = {mut f: ~[3]};\n+    let x = F {f: ~[3]};\n \n     match x {\n-      {f: ref mut v} => {\n+      F {f: ref mut v} => {\n         impure(*v);\n       }\n     }"}, {"sha": "b6c205524a809ef90feb12d846670a14a071713f", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,23 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type ints = {sum: ~int, values: ~[int]};\n+struct Ints {sum: ~int, values: ~[int]}\n \n-fn add_int(x: &mut ints, v: int) {\n+fn add_int(x: &mut Ints, v: int) {\n     *x.sum += v;\n     let mut values = ~[];\n     x.values <-> values;\n     values.push(v);\n     x.values <-> values;\n }\n \n-fn iter_ints(x: &ints, f: fn(x: &int) -> bool) {\n+fn iter_ints(x: &Ints, f: fn(x: &int) -> bool) {\n     let l = x.values.len();\n     uint::range(0, l, |i| f(&x.values[i]))\n }\n \n fn main() {\n-    let mut ints = ~{sum: ~0, values: ~[]};\n+    let mut ints = ~Ints {sum: ~0, values: ~[]};\n     add_int(ints, 22);\n     add_int(ints, 44);\n "}, {"sha": "14757bfa3d8af93ee25ad2cf8659a5217a64f3a0", "filename": "src/test/run-pass/borrowck-preserve-box-in-discr.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,14 +10,16 @@\n \n // exec-env:RUST_POISON_ON_FREE=1\n \n+struct F { f: ~int }\n+\n fn main() {\n-    let mut x = @{f: ~3};\n+    let mut x = @F {f: ~3};\n     match x {\n-      @{f: ref b_x} => {\n+      @F {f: ref b_x} => {\n         assert **b_x == 3;\n         assert ptr::addr_of(&(*x.f)) == ptr::addr_of(&(**b_x));\n \n-        x = @{f: ~4};\n+        x = @F {f: ~4};\n \n         debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(&(**b_x)) as uint);\n         assert **b_x == 3;"}, {"sha": "87592f548179fe5c65f4bf956a6ceccc700f8fcf", "filename": "src/test/run-pass/borrowck-preserve-box-in-field.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -17,12 +17,14 @@ fn borrow(x: &int, f: fn(x: &int)) {\n     assert before == after;\n }\n \n+struct F { f: ~int }\n+\n fn main() {\n-    let mut x = @{f: ~3};\n+    let mut x = @F {f: ~3};\n     do borrow(x.f) |b_x| {\n         assert *b_x == 3;\n         assert ptr::addr_of(&(*x.f)) == ptr::addr_of(&(*b_x));\n-        x = @{f: ~4};\n+        x = @F {f: ~4};\n \n         debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(&(*b_x)) as uint);\n         assert *b_x == 3;"}, {"sha": "ccf9be1d585dbb3189202378e31a69d4d2d58c28", "filename": "src/test/run-pass/borrowck-preserve-box-in-pat.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,14 +10,16 @@\n \n // exec-env:RUST_POISON_ON_FREE=1\n \n+struct F { f: ~int }\n+\n fn main() {\n-    let mut x = @mut @{f: ~3};\n+    let mut x = @mut @F {f: ~3};\n     match x {\n-      @@{f: ref b_x} => {\n+      @@F{f: ref b_x} => {\n         assert **b_x == 3;\n         assert ptr::addr_of(&(x.f)) == ptr::addr_of(b_x);\n \n-        *x = @{f: ~4};\n+        *x = @F {f: ~4};\n \n         debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(&(**b_x)) as uint);\n         assert **b_x == 3;"}, {"sha": "1f6bfe20bb12821f2872489204fba9c4883e990b", "filename": "src/test/run-pass/borrowck-preserve-box-in-uniq.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -17,12 +17,14 @@ fn borrow(x: &int, f: fn(x: &int)) {\n     assert before == after;\n }\n \n+struct F { f: ~int }\n+\n fn main() {\n-    let mut x = ~mut @{f: ~3};\n+    let mut x = ~mut @F{f: ~3};\n     do borrow(x.f) |b_x| {\n         assert *b_x == 3;\n         assert ptr::addr_of(&(*x.f)) == ptr::addr_of(&(*b_x));\n-        *x = @{f: ~4};\n+        *x = @F{f: ~4};\n \n         debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(&(*b_x)) as uint);\n         assert *b_x == 3;"}, {"sha": "30250c26a9a6c6bcf9bd9ba9f45e6664f13554f1", "filename": "src/test/run-pass/borrowck-preserve-expl-deref.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -17,12 +17,14 @@ fn borrow(x: &int, f: fn(x: &int)) {\n     assert before == after;\n }\n \n+struct F { f: ~int }\n+\n fn main() {\n-    let mut x = @{f: ~3};\n+    let mut x = @F {f: ~3};\n     do borrow((*x).f) |b_x| {\n         assert *b_x == 3;\n         assert ptr::addr_of(&(*x.f)) == ptr::addr_of(&(*b_x));\n-        x = @{f: ~4};\n+        x = @F {f: ~4};\n \n         debug!(\"ptr::addr_of(*b_x) = %x\", ptr::addr_of(&(*b_x)) as uint);\n         assert *b_x == 3;"}, {"sha": "0e4f15d49db2ee4ef0551af3fbe4cbaf8061c757", "filename": "src/test/run-pass/borrowck-root-while-cond-2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct F { mut f: @G }\n+struct G { g: ~[int] }\n+\n fn main() {\n-    let rec = @{mut f: @{g: ~[1, 2, 3]}};\n+    let rec = @F {mut f: @G {g: ~[1, 2, 3]}};\n     while rec.f.g.len() == 23 {}\n }"}, {"sha": "e8e3cf297ba7b310e0d24fef7000f47e4991ef7e", "filename": "src/test/run-pass/borrowck-root-while-cond.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,7 +10,9 @@\n \n fn borrow<T>(x: &r/T) -> &r/T {x}\n \n+struct Rec { mut f: @int }\n+\n fn main() {\n-    let rec = @{mut f: @22};\n+    let rec = @Rec {mut f: @22};\n     while *borrow(rec.f) == 23 {}\n }"}, {"sha": "91e416b72e18fb26a58d9d526fba8767c9e764cc", "filename": "src/test/run-pass/box-pattern.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fbox-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fbox-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-pattern.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type foo = {a: int, b: uint};\n-enum bar { u(@foo), w(int), }\n+struct Foo {a: int, b: uint}\n+enum bar { u(@Foo), w(int), }\n \n fn main() {\n-    assert (match u(@{a: 10, b: 40u}) {\n-              u(@{a: a, b: b}) => { a + (b as int) }\n+    assert (match u(@Foo{a: 10, b: 40u}) {\n+              u(@Foo{a: a, b: b}) => { a + (b as int) }\n               _ => { 66 }\n             } == 50);\n }"}, {"sha": "355850147131843f2ecc1ca2cd3361ac6d160177", "filename": "src/test/run-pass/box-unbox.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,13 +10,13 @@\n \n \n \n-type box<T: Copy> = {c: @T};\n+struct Box<T: Copy> {c: @T}\n \n-fn unbox<T: Copy>(b: box<T>) -> T { return *b.c; }\n+fn unbox<T: Copy>(b: Box<T>) -> T { return *b.c; }\n \n fn main() {\n     let foo: int = 17;\n-    let bfoo: box<int> = {c: @foo};\n+    let bfoo: Box<int> = Box {c: @foo};\n     debug!(\"see what's in our box\");\n     assert (unbox::<int>(bfoo) == foo);\n }"}, {"sha": "3c55409dde889ee70fff7ef848345f51c8391467", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -14,11 +14,13 @@\n \n fn foo<T: Copy Const>(x: T) -> T { x }\n \n+struct F { field: int }\n+\n fn main() {\n     foo(1);\n     foo(~\"hi\");\n     foo(~[1, 2, 3]);\n-    foo({field: 42});\n+    foo(F{field: 42});\n     foo((1, 2u));\n     foo(@1);\n     foo(~1);"}, {"sha": "6dccecb5aa8dcf4002904a70655713c70952c0db", "filename": "src/test/run-pass/const-fields-and-indexing.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -13,11 +13,16 @@ const p : int = x[2];\n const y : &[int] = &[1,2,3,4];\n const q : int = y[2];\n \n-const s : {a: int, b: int} = {a: 10, b: 20};\n+struct S {a: int, b: int}\n+\n+const s : S = S {a: 10, b: 20};\n const t : int = s.b;\n \n-const k : {a: int, b: int, c: {d: int, e: int}} = {a: 10, b: 20, c: {d: 30,\n-                                                                     e: 40}};\n+struct K {a: int, b: int, c: D}\n+struct D { d: int, e: int }\n+\n+const k : K = K {a: 10, b: 20, c: D {d: 30,\n+                                     e: 40}};\n const m : int = k.c.e;\n \n fn main() {"}, {"sha": "b3d971a2cefda45adf17a57375e9a7bc474a78fb", "filename": "src/test/run-pass/const-rec-and-tup.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct Pair { a: float, b: float }\n+\n+struct AnotherPair { x: (i64, i64), y: Pair }\n+\n const x : (i32,i32) = (0xfeedf00dd,0xca11ab1e);\n-const y : { x: (i64, i64),\n-            y: { a: float,\n-                 b: float } } = { x: (0xf0f0f0f0_f0f0f0f0,\n-                                      0xabababab_abababab),\n-                                  y: { a: 3.14159265358979323846,\n-                                       b: 2.7182818284590452354 } };\n+const y : AnotherPair = AnotherPair{ x: (0xf0f0f0f0_f0f0f0f0,\n+                                         0xabababab_abababab),\n+                           y: Pair { a: 3.14159265358979323846,\n+                                     b: 2.7182818284590452354 }};\n \n fn main() {\n     let (p, _) = y.x;"}, {"sha": "c8b08b1e35a7a0784e731e45719e496fc975605a", "filename": "src/test/run-pass/const-region-ptrs.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -9,9 +9,11 @@\n // except according to those terms.\n \n \n+struct Pair { a: int, b: &int }\n+\n const x: &int = &10;\n \n-const y: &{a: int, b: &int} = &{a: 15, b: x};\n+const y: &Pair = &Pair {a: 15, b: x};\n \n fn main() {\n     io::println(fmt!(\"x = %?\", *x));"}, {"sha": "0b0d9a839ce6865ec984c28d38ef21b05da20a0e", "filename": "src/test/run-pass/crateresolve5.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fcrateresolve5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fcrateresolve5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve5.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -17,8 +17,8 @@ extern mod cr5_2 (name = \"crateresolve5\", vers = \"0.2\");\n \n fn main() {\n     // Structural types can be used between two versions of the same crate\n-    assert cr5_1::structural().name == cr5_2::structural().name;\n-    assert cr5_1::structural().val == cr5_2::structural().val;\n+    assert cr5_1::struct_nameval().name == cr5_2::struct_nameval().name;\n+    assert cr5_1::struct_nameval().val == cr5_2::struct_nameval().val;\n     // Make sure these are actually two different crates\n     assert cr5_1::f() == 10 && cr5_2::f() == 20;\n }"}, {"sha": "2e647d25c747815a01add80b2f5786d55c347706", "filename": "src/test/run-pass/early-vtbl-resolution.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -17,9 +17,11 @@ impl<A> int: thing<A> {\n }\n fn foo_func<A, B: thing<A>>(x: B) -> Option<A> { x.foo() }\n \n+struct A { a: int }\n+\n fn main() {\n \n-    for iter::eachi(&(Some({a: 0}))) |i, a| { \n+    for iter::eachi(&(Some(A {a: 0}))) |i, a| { \n         debug!(\"%u %d\", i, a.a);\n     }\n "}, {"sha": "bb57710969f5203bddd8b4d958514794681e9aaf", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -18,14 +18,14 @@ extern mod std;\n type HashFn<K> = pure fn~(K) -> uint;\n type EqFn<K> = pure fn~(K, K) -> bool;\n \n+struct LM { resize_at: uint, size: uint }\n+\n enum LinearMap<K,V> {\n-    LinearMap_({\n-        resize_at: uint,\n-        size: uint})\n+    LinearMap_(LM)\n }\n \n fn linear_map<K,V>() -> LinearMap<K,V> {\n-    LinearMap_({\n+    LinearMap_(LM{\n         resize_at: 32,\n         size: 0})\n }"}, {"sha": "b4a80906b33a6a96a65fe77bb53801bb84411ded", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -11,11 +11,11 @@\n \n const tau: float = 2.0*3.14159265358979323;\n \n-type point = {x: float, y: float};\n-type size = {w: float, h: float};\n+struct Point {x: float, y: float}\n+struct Size {w: float, h: float}\n enum shape {\n-    circle(point, float),\n-    rectangle(point, size)\n+    circle(Point, float),\n+    rectangle(Point, Size)\n }\n \n \n@@ -37,16 +37,18 @@ impl shape {\n fn select_based_on_unit_circle<T>(\n     threshold: float, a: &r/T, b: &r/T) -> &r/T {\n \n-    let shape = &circle({x: 0.0, y: 0.0}, 1.0);\n+    let shape = &circle(Point{x: 0.0, y: 0.0}, 1.0);\n     shape.select(threshold, a, b)\n }\n \n \n struct thing {\n-    x: {mut a: @int}\n+    x: A\n }\n \n-fn thing(x: {mut a: @int}) -> thing {\n+struct A { mut a: @int }\n+\n+fn thing(x: A) -> thing {\n     thing {\n         x: copy x\n     }\n@@ -56,7 +58,7 @@ impl thing {\n     fn foo(@self) -> int { *self.x.a }\n     fn bar(~self) -> int { *self.x.a }\n     fn quux(&self) -> int { *self.x.a }\n-    fn baz(&self) -> &self/{mut a: @int} { &self.x }\n+    fn baz(&self) -> &self/A { &self.x }\n     fn spam(self) -> int { *self.x.a }\n }\n \n@@ -65,14 +67,14 @@ impl thing: Nus { fn f(&self) {} }\n \n fn main() {\n \n-    let x = @thing({mut a: @10});\n+    let x = @thing(A {mut a: @10});\n     assert x.foo() == 10;\n     assert x.quux() == 10;\n \n-    let y = ~thing({mut a: @10});\n+    let y = ~thing(A {mut a: @10});\n     assert (copy y).bar() == 10;\n     assert y.quux() == 10;\n \n-    let z = thing({mut a: @11});\n+    let z = thing(A {mut a: @11});\n     assert z.spam() == 11;\n }"}, {"sha": "61e92500cc8aef89382869982300d8c6f55725e7", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -24,13 +24,13 @@ fn test_bool() {\n     test_generic::<bool>(true, compare_bool);\n }\n \n-type t = {a: int, b: int};\n+struct Pair { a: int, b: int }\n \n fn test_rec() {\n-    fn compare_rec(t1: t, t2: t) -> bool {\n+    fn compare_rec(t1: Pair, t2: Pair) -> bool {\n         t1.a == t2.a && t1.b == t2.b\n     }\n-    test_generic::<t>({a: 1, b: 2}, compare_rec);\n+    test_generic::<Pair>(Pair {a: 1, b: 2}, compare_rec);\n }\n \n fn main() { test_bool(); test_rec(); }"}, {"sha": "1cc9d4ba6842845834eec67e8aa333c3c51d527b", "filename": "src/test/run-pass/expr-alt-struct.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -13,9 +13,11 @@\n \n // -*- rust -*-\n \n-// Tests for match as expressions resulting in structural types\n+// Tests for match as expressions resulting in struct types\n+struct R { i: int }\n+\n fn test_rec() {\n-    let rs = match true { true => {i: 100}, _ => fail };\n+    let rs = match true { true => R {i: 100}, _ => fail };\n     assert (rs.i == 100);\n }\n "}, {"sha": "6cfc06307c416faf3f227e45a1fcdfd50acb0cfe", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -26,13 +26,13 @@ fn test_bool() {\n     test_generic::<bool>(true, compare_bool);\n }\n \n-type t = {a: int, b: int};\n+struct Pair {a: int, b: int}\n \n fn test_rec() {\n-    fn compare_rec(t1: t, t2: t) -> bool {\n+    fn compare_rec(t1: Pair, t2: Pair) -> bool {\n         t1.a == t2.a && t1.b == t2.b\n     }\n-    test_generic::<t>({a: 1, b: 2}, compare_rec);\n+    test_generic::<Pair>(Pair {a: 1, b: 2}, compare_rec);\n }\n \n fn main() { test_bool(); test_rec(); }"}, {"sha": "8c173ae5d76b52de0a39c8883b6925c070968f1e", "filename": "src/test/run-pass/expr-block-slot.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexpr-block-slot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexpr-block-slot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-slot.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -9,9 +9,13 @@\n // except according to those terms.\n \n // Regression test for issue #377\n+\n+struct A { a: int }\n+struct V { v: int }\n+\n fn main() {\n-    let a = { let b = {a: 3}; b };\n+    let a = { let b = A {a: 3}; b };\n     assert (a.a == 3);\n-    let c = { let d = {v: 3}; d };\n+    let c = { let d = V {v: 3}; d };\n     assert (c.v == 3);\n }"}, {"sha": "490f3950f9f3e630d5ebb02e175070c4e8a356f8", "filename": "src/test/run-pass/expr-block.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexpr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexpr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -16,7 +16,9 @@\n // Tests for standalone blocks as expressions\n fn test_basic() { let rs: bool = { true }; assert (rs); }\n \n-fn test_rec() { let rs = { {v1: 10, v2: 20} }; assert (rs.v2 == 20); }\n+struct RS { v1: int, v2: int }\n+\n+fn test_rec() { let rs = { RS {v1: 10, v2: 20} }; assert (rs.v2 == 20); }\n \n fn test_filled_with_stuff() {\n     let rs = { let mut a = 0; while a < 10 { a += 1; } a };"}, {"sha": "69dcac9f03a424e95c51a14d47213da858cc5635", "filename": "src/test/run-pass/expr-copy.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-copy.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -11,12 +11,14 @@\n // xfail-fast\n #[legacy_modes];\n \n-fn f(arg: {mut a: int}) {\n+fn f(arg: A) {\n     arg.a = 100;\n }\n \n+struct A { mut a: int }\n+\n fn main() {\n-    let x = {mut a: 10};\n+    let x = A {a: 10};\n     f(x);\n     assert x.a == 100;\n     x.a = 20;"}, {"sha": "92f9117dde8dfb7bb4126bae9928bbf9c6d68fa1", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -25,13 +25,13 @@ fn test_bool() {\n     test_generic::<bool>(true, false, compare_bool);\n }\n \n-type t = {a: int, b: int};\n+struct Pair {a: int, b: int}\n \n fn test_rec() {\n-    fn compare_rec(t1: t, t2: t) -> bool {\n+    fn compare_rec(t1: Pair, t2: Pair) -> bool {\n         t1.a == t2.a && t1.b == t2.b\n     }\n-    test_generic::<t>({a: 1, b: 2}, {a: 2, b: 3}, compare_rec);\n+    test_generic::<Pair>(Pair{a: 1, b: 2}, Pair{a: 2, b: 3}, compare_rec);\n }\n \n fn main() { test_bool(); test_rec(); }"}, {"sha": "506d607e7e8f3e0f1be254669c3ec6f8fd9de54c", "filename": "src/test/run-pass/expr-if-struct.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -13,9 +13,12 @@\n \n // -*- rust -*-\n \n-// Tests for if as expressions returning structural types\n+// Tests for if as expressions returning nominal types\n+\n+struct I { i: int }\n+\n fn test_rec() {\n-    let rs = if true { {i: 100} } else { {i: 101} };\n+    let rs = if true { I {i: 100} } else { I {i: 101} };\n     assert (rs.i == 100);\n }\n "}, {"sha": "2d77a775f34fd6e0885fddb1ef8da6514f326989", "filename": "src/test/run-pass/exterior.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fexterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexterior.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -12,13 +12,13 @@\n \n \n // -*- rust -*-\n-type point = {x: int, y: int, mut z: int};\n+struct Point {x: int, y: int, mut z: int}\n \n-fn f(p: @point) { assert (p.z == 12); p.z = 13; assert (p.z == 13); }\n+fn f(p: @Point) { assert (p.z == 12); p.z = 13; assert (p.z == 13); }\n \n fn main() {\n-    let a: point = {x: 10, y: 11, mut z: 12};\n-    let b: @point = @copy a;\n+    let a: Point = Point {x: 10, y: 11, mut z: 12};\n+    let b: @Point = @copy a;\n     assert (b.z == 12);\n     f(b);\n     assert (a.z == 12);"}, {"sha": "3d6e781c512cb5cf070835c1f45e8c98d17d888d", "filename": "src/test/run-pass/fixed_length_vec_glue.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixed_length_vec_glue.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,9 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct Struc { a: u8, b: [int * 3], c: int }\n+\n fn main() {\n     let arr = [1,2,3];\n-    let struc = {a: 13u8, b: arr, c: 42};\n+    let struc = Struc {a: 13u8, b: arr, c: 42};\n     let s = sys::log_str(&struc);\n     assert(s == ~\"{a: 13, b: [1, 2, 3], c: 42}\");\n }"}, {"sha": "47da343764c14fc696a0293cc2f5f30aaa4cc819", "filename": "src/test/run-pass/for-destruct.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Ffor-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Ffor-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-destruct.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct Pair { x: int, y: int }\n+\n fn main() {\n-    for vec::each(~[{x: 10, y: 20}, {x: 30, y: 0}]) |elt| {\n+    for vec::each(~[Pair {x: 10, y: 20}, Pair {x: 30, y: 0}]) |elt| {\n         assert (elt.x + elt.y == 30);\n     }\n }"}, {"sha": "f68cf1676c7293d3df1de5b06653eca3c6a8ce79", "filename": "src/test/run-pass/generic-box.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-box.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,9 +10,11 @@\n \n \n \n-fn box<T: Copy>(x: {x: T, y: T, z: T}) -> @{x: T, y: T, z: T} { return @x; }\n+fn box<T: Copy>(x: Box<T>) -> @Box<T> { return @x; }\n+\n+struct Box<T> {x: T, y: T, z: T}\n \n fn main() {\n-    let x: @{x: int, y: int, z: int} = box::<int>({x: 1, y: 2, z: 3});\n+    let x: @Box<int> = box::<int>(Box{x: 1, y: 2, z: 3});\n     assert (x.y == 2);\n }"}, {"sha": "03f5a84de6937cae742bb9ffa763c9de00636105", "filename": "src/test/run-pass/generic-derived-type.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -12,11 +12,12 @@\n \n fn g<X: Copy>(x: X) -> X { return x; }\n \n-fn f<T: Copy>(t: T) -> {a: T, b: T} {\n-    type pair = {a: T, b: T};\n+struct Pair<T> {a: T, b: T}\n \n-    let x: pair = {a: t, b: t};\n-    return g::<pair>(x);\n+fn f<T: Copy>(t: T) -> Pair<T> {\n+\n+    let x: Pair<T> = Pair {a: t, b: t};\n+    return g::<Pair<T>>(x);\n }\n \n fn main() {"}, {"sha": "aad24e99058a51902482eaf84f3857307f9a82c7", "filename": "src/test/run-pass/generic-drop-glue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-drop-glue.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n \n+struct Pair { x: @int, y: @int }\n \n fn f<T: Copy>(t: T) { let t1: T = t; }\n \n-fn main() { let x = {x: @10, y: @12}; f(x); }\n+fn main() { let x = Pair {x: @10, y: @12}; f(x); }"}, {"sha": "738bb73b0be4fcc41ecded7a614c1e033ac188db", "filename": "src/test/run-pass/generic-exterior-box.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-box.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,12 +10,12 @@\n \n \n \n-type recbox<T: Copy> = {x: @T};\n+struct Recbox<T: Copy> {x: @T}\n \n-fn reclift<T: Copy>(t: T) -> recbox<T> { return {x: @t}; }\n+fn reclift<T: Copy>(t: T) -> Recbox<T> { return Recbox {x: @t}; }\n \n fn main() {\n     let foo: int = 17;\n-    let rbfoo: recbox<int> = reclift::<int>(foo);\n+    let rbfoo: Recbox<int> = reclift::<int>(foo);\n     assert (*rbfoo.x == foo);\n }"}, {"sha": "2095578aefad808b5f186bebc0fbe5830455d6ee", "filename": "src/test/run-pass/generic-exterior-unique.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-exterior-unique.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type recbox<T: Copy> = {x: ~T};\n+struct Recbox<T: Copy> {x: ~T}\n \n-fn reclift<T: Copy>(t: T) -> recbox<T> { return {x: ~t}; }\n+fn reclift<T: Copy>(t: T) -> Recbox<T> { return Recbox {x: ~t}; }\n \n fn main() {\n     let foo: int = 17;\n-    let rbfoo: recbox<int> = reclift::<int>(foo);\n+    let rbfoo: Recbox<int> = reclift::<int>(foo);\n     assert (*rbfoo.x == foo);\n }"}, {"sha": "13ed32e0c2d6513e5d8a6fdf03209e76df549084", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -14,22 +14,22 @@\n // -*- rust -*-\n fn id<T: Copy>(x: T) -> T { return x; }\n \n-type triple = {x: int, y: int, z: int};\n+struct Triple {x: int, y: int, z: int}\n \n fn main() {\n     let mut x = 62;\n     let mut y = 63;\n     let a = 'a';\n     let mut b = 'b';\n-    let p: triple = {x: 65, y: 66, z: 67};\n-    let mut q: triple = {x: 68, y: 69, z: 70};\n+    let p: Triple = Triple {x: 65, y: 66, z: 67};\n+    let mut q: Triple = Triple {x: 68, y: 69, z: 70};\n     y = id::<int>(x);\n     log(debug, y);\n     assert (x == y);\n     b = id::<char>(a);\n     log(debug, b);\n     assert (a == b);\n-    q = id::<triple>(p);\n+    q = id::<Triple>(p);\n     x = p.z;\n     y = q.z;\n     log(debug, y);"}, {"sha": "9fd5f4fadff96514f1b7a5cb85e445639eb7b475", "filename": "src/test/run-pass/generic-tag-values.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-tag-values.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -14,10 +14,12 @@\n // -*- rust -*-\n enum noption<T> { some(T), }\n \n+struct Pair { x: int, y: int }\n+\n fn main() {\n     let nop: noption<int> = some::<int>(5);\n     match nop { some::<int>(n) => { log(debug, n); assert (n == 5); } }\n-    let nop2: noption<{x: int, y: int}> = some({x: 17, y: 42});\n+    let nop2: noption<Pair> = some(Pair{x: 17, y: 42});\n     match nop2 {\n       some(t) => {\n         log(debug, t.x);"}, {"sha": "e0f6363eb6b34bbea00f6b00258784bf6ac0994a", "filename": "src/test/run-pass/generic-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-type.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,10 +10,10 @@\n \n \n \n-type pair<T> = {x: T, y: T};\n+struct Pair<T> {x: T, y: T}\n \n fn main() {\n-    let x: pair<int> = {x: 10, y: 12};\n+    let x: Pair<int> = Pair {x: 10, y: 12};\n     assert (x.x == 10);\n     assert (x.y == 12);\n }"}, {"sha": "01e899db23a663d0dec9b9bc8c5be0d79d4dfc45", "filename": "src/test/run-pass/generic-unique.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-unique.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,10 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct Triple<T> { x: T, y: T, z: T }\n \n-fn box<T: Copy>(x: {x: T, y: T, z: T}) -> ~{x: T, y: T, z: T} { return ~x; }\n+fn box<T: Copy>(x: Triple<T>) -> ~Triple<T> { return ~x; }\n \n fn main() {\n-    let x: ~{x: int, y: int, z: int} = box::<int>({x: 1, y: 2, z: 3});\n+    let x: ~Triple<int> = box::<int>(Triple{x: 1, y: 2, z: 3});\n     assert (x.y == 2);\n }"}, {"sha": "2ba0660cc70547888647b1b94acde29e19671e94", "filename": "src/test/run-pass/guards.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fguards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fguards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,16 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct Pair { x: int, y: int }\n+\n fn main() {\n     let a =\n         match 10 { x if x < 7 => { 1 } x if x < 11 => { 2 } 10 => { 3 } _ => { 4 } };\n     assert (a == 2);\n \n     let b =\n-        match {x: 10, y: 20} {\n+        match Pair {x: 10, y: 20} {\n           x if x.x < 5 && x.y < 5 => { 1 }\n-          {x: x, y: y} if x == 10 && y == 20 => { 2 }\n-          {x: x, y: y} => { 3 }\n+          Pair {x: x, y: y} if x == 10 && y == 20 => { 2 }\n+          Pair {x: x, y: y} => { 3 }\n         };\n     assert (b == 2);\n }"}, {"sha": "c87987aac3a85fcec757d8ccb581141b1678c7ca", "filename": "src/test/run-pass/infer-with-expected.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finfer-with-expected.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -13,10 +13,13 @@\n // type must be known in this context' if the passing down doesn't\n // happen.)\n \n-fn eat_tup(_r: ~@(int, fn@({x: int, y: int}) -> int)) {}\n-fn eat_rec(_r: @~{a: int, b: fn@({x: int, y: int}) -> int}) {}\n+fn eat_tup(_r: ~@(int, fn@(Pair) -> int)) {}\n+fn eat_rec(_r: @~Rec) {}\n+\n+struct Rec { a: int, b: fn(Pair) -> int }\n+struct Pair { x: int, y: int }\n \n fn main() {\n     eat_tup(~@(10, |a| a.x ));\n-    eat_rec(@~{a: 10, b: |a| a.x });\n+    eat_rec(@~Rec{a: 10, b: |a| a.x });\n }"}, {"sha": "11efd61072c8241fba175a3bec48a62638c69119", "filename": "src/test/run-pass/init-res-into-things.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finit-res-into-things.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -15,6 +15,8 @@ struct r {\n   i: @mut int,\n }\n \n+struct Box { x: r }\n+\n impl r : Drop {\n     fn finalize(&self) {\n         *(self.i) = *(self.i) + 1;\n@@ -38,7 +40,7 @@ fn test_box() {\n fn test_rec() {\n     let i = @mut 0;\n     {\n-        let a = move {x: r(i)};\n+        let a = move Box {x: r(i)};\n     }\n     assert *i == 1;\n }\n@@ -74,7 +76,7 @@ fn test_unique() {\n fn test_box_rec() {\n     let i = @mut 0;\n     {\n-        let a = move @{\n+        let a = move @Box {\n             x: r(i)\n         };\n     }"}, {"sha": "57065ec44a5184c0c49b8e7d12f26d3ede171b0f", "filename": "src/test/run-pass/instantiable.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Finstantiable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Finstantiable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finstantiable.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -11,9 +11,11 @@\n \n // check that we do not report a type like this as uninstantiable,\n // even though it would be if the nxt field had type @foo:\n-enum foo = {x: uint, nxt: *foo};\n+enum foo = X;\n+\n+struct X { x: uint, nxt: *foo }\n \n fn main() {\n-    let x = foo({x: 0u, nxt: ptr::null()});\n+    let x = foo(X {x: 0, nxt: ptr::null()});\n }\n "}, {"sha": "a29d6d1e3e4b3bcdb9179bfbd2d94cb9d9aec5ee", "filename": "src/test/run-pass/issue-1112.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fissue-1112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fissue-1112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1112.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -11,18 +11,18 @@\n // Issue #1112\n // Alignment of interior pointers to dynamic-size types\n \n-type x<T> = {\n+struct X<T> {\n     a: T,\n     b: u8,\n     c: bool,\n     d: u8,\n     e: u16,\n     f: u8,\n     g: u8\n-};\n+}\n \n fn main() {\n-    let x: x<int> = {\n+    let x: X<int> = X {\n         a: 12345678,\n         b: 9u8,\n         c: true,\n@@ -34,7 +34,7 @@ fn main() {\n     bar(x);\n }\n \n-fn bar<T>(x: x<T>) {\n+fn bar<T>(x: X<T>) {\n     assert x.b == 9u8;\n     assert x.c == true;\n     assert x.d == 10u8;"}, {"sha": "ab0e0aa1aba9f78d0fb774e80d2505d1c7146d57", "filename": "src/test/run-pass/issue-1989.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fissue-1989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fissue-1989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1989.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -12,16 +12,16 @@\n \n enum maybe_pointy {\n     none,\n-    p(@pointy)\n+    p(@Pointy)\n }\n \n-type pointy = {\n+struct Pointy {\n     mut a : maybe_pointy,\n     mut f : fn@()->(),\n-};\n+}\n \n-fn empty_pointy() -> @pointy {\n-    return @{\n+fn empty_pointy() -> @Pointy {\n+    return @Pointy{\n         mut a : none,\n         mut f : fn@()->(){},\n     }"}, {"sha": "b787677db6814e02f8eeeb7bba68443bcc016a8e", "filename": "src/test/run-pass/issue-2463.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fissue-2463.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fissue-2463.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2463.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,20 +8,22 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct Pair { f: int, g: int }\n+\n fn main() {\n \n-    let x = {\n+    let x = Pair {\n         f: 0,\n         g: 0,\n     };\n \n-    let y = {\n+    let y = Pair {\n         f: 1,\n         g: 1,\n         .. x\n     };\n \n-    let z = {\n+    let z = Pair {\n         f: 1,\n         .. x\n     };"}, {"sha": "e209a9a03ed45f86f00b5c57be90eca1e674f7f4", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -18,14 +18,14 @@ fn cat() -> cat {\n     }\n }\n \n-type kitty_info = {kitty: cat};\n+struct KittyInfo {kitty: cat}\n \n // Code compiles and runs successfully if we add a + before the first arg\n-fn nyan(kitty: cat, _kitty_info: kitty_info) {\n+fn nyan(kitty: cat, _kitty_info: KittyInfo) {\n     (kitty.meow)();\n }\n \n fn main() {\n     let mut kitty = cat();\n-    nyan(copy kitty, {kitty: copy kitty});\n+    nyan(copy kitty, KittyInfo {kitty: copy kitty});\n }"}, {"sha": "f8f2fc461c3ffb8b1e9605af63b2eeefe0a54ce8", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -14,6 +14,12 @@\n pub mod pipes {\n     use core::cast::{forget, transmute};\n \n+    pub struct Stuff<T> {\n+        mut state: state,\n+        mut blocked_task: Option<task::Task>,\n+        mut payload: Option<T>\n+    }\n+\n     pub enum state {\n         empty,\n         full,\n@@ -36,7 +42,7 @@ pub mod pipes {\n \n     pub fn packet<T: Owned>() -> *packet<T> {\n         unsafe {\n-            let p: *packet<T> = cast::transmute(~{\n+            let p: *packet<T> = cast::transmute(~Stuff{\n                 mut state: empty,\n                 mut blocked_task: None::<task::Task>,\n                 mut payload: None::<T>"}, {"sha": "d77a0817b825fa63828f4a82b690e69548a1b39d", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -22,7 +22,7 @@ impl (): methods {\n \n // the position of this function is significant! - if it comes before methods\n // then it works, if it comes after it then it doesnt!\n-fn to_bools(bitv: {storage: ~[u64]}) -> ~[bool] {\n+fn to_bools(bitv: Storage) -> ~[bool] {\n     vec::from_fn(8, |i| {\n         let w = i / 64;\n         let b = i % 64;\n@@ -31,9 +31,11 @@ fn to_bools(bitv: {storage: ~[u64]}) -> ~[bool] {\n     })\n }\n \n+struct Storage { storage: ~[u64] }\n+\n fn main() {\n     let bools = ~[false, false, true, false, false, true, true, false];\n-    let bools2 = to_bools({storage: ~[0b01100100]});\n+    let bools2 = to_bools(Storage{storage: ~[0b01100100]});\n \n     for uint::range(0, 8) |i| {\n         io::println(fmt!(\"%u => %u vs %u\", i, bools[i] as uint, bools2[i] as uint));"}, {"sha": "f29231b53d0c86e4bc970ad45328a4e6aa153ccb", "filename": "src/test/run-pass/issue-980.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fissue-980.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fissue-980.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-980.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,14 +10,14 @@\n \n enum maybe_pointy {\n     no_pointy,\n-    yes_pointy(@pointy),\n+    yes_pointy(@Pointy),\n }\n \n-type pointy = {\n+struct Pointy {\n     mut x : maybe_pointy\n-};\n+}\n \n fn main() {\n-    let m = @{ mut x : no_pointy };\n+    let m = @Pointy { mut x : no_pointy };\n     m.x = yes_pointy(m);\n }"}, {"sha": "1e94f6af90f1d3dd69af127d8fe056435014e955", "filename": "src/test/run-pass/lambda-infer-unresolved.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flambda-infer-unresolved.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,8 +10,12 @@\n \n // This should typecheck even though the type of e is not fully\n // resolved when we finish typechecking the fn@.\n+\n+\n+struct Refs { mut refs: ~[int], n: int }\n+\n fn main() {\n-    let e = @{mut refs: ~[], n: 0};\n+    let e = @Refs{mut refs: ~[], n: 0};\n     let f = fn@ () { log(error, e.n); };\n     e.refs += ~[1];\n }"}, {"sha": "21b68a07560d1ebe49ee25c1dfb3e24db4d2f508", "filename": "src/test/run-pass/large-records.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Flarge-records.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Flarge-records.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flarge-records.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -12,9 +12,8 @@\n \n \n // -*- rust -*-\n-fn f() {\n-    let foo:\n-            {a: int,\n+\n+struct Large {a: int,\n              b: int,\n              c: int,\n              d: int,\n@@ -25,8 +24,10 @@ fn f() {\n              i: int,\n              j: int,\n              k: int,\n-             l: int} =\n-        {a: 0,\n+             l: int}\n+fn f() {\n+    let foo: Large =\n+        Large {a: 0,\n          b: 0,\n          c: 0,\n          d: 0,"}, {"sha": "ee08b18de161211189eb6a60ee8a4e5707298184", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,9 +10,11 @@\n \n // Make sure #1399 stays fixed\n \n+struct A { a: ~int }\n+\n fn foo() -> fn@() -> int {\n     let k = ~22;\n-    let _u = {a: copy k};\n+    let _u = A {a: copy k};\n     return fn@(move k) -> int { 22 };\n }\n "}, {"sha": "885b3a83da639749d6bf322326b53e7cd300e778", "filename": "src/test/run-pass/last-use-is-capture.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-is-capture.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,9 +10,11 @@\n \n // Make sure #1399 stays fixed\n \n+struct A { a: ~int }\n+\n fn main() {\n     fn invoke(f: fn@()) { f(); }\n     let k = ~22;\n-    let _u = {a: copy k};\n+    let _u = A {a: copy k};\n     invoke(|| log(error, copy k) )\n }"}, {"sha": "ba7fd4fee5e2b3b8be6af634c38500c263d64dd4", "filename": "src/test/run-pass/let-destruct-fresh-mem.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Flet-destruct-fresh-mem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Flet-destruct-fresh-mem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-destruct-fresh-mem.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,9 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct X { x: int, y: @A }\n+struct A { a: int }\n+\n fn main() {\n-    let u = {x: 10, y: @{a: 20}};\n-    let mut {x: x, y: @{a: a}} = u;\n+    let u = X {x: 10, y: @A {a: 20}};\n+    let mut X {x: x, y: @A {a: a}} = u;\n     x = 100;\n     a = 100;\n     assert (x == 100);"}, {"sha": "be9c8bdf2d6538790bdf488dd8b3ab0aa3e2f0b5", "filename": "src/test/run-pass/let-destruct.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Flet-destruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Flet-destruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-destruct.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,7 +10,9 @@\n \n enum xx = int;\n \n+struct X { x: xx, y: int }\n+\n fn main() {\n-    let @{x: xx(x), y: y} = @{x: xx(10), y: 20};\n+    let @X {x: xx(x), y: y} = @X{x: xx(10), y: 20};\n     assert (x + y == 30);\n }"}, {"sha": "73e16085c4ee9acc0c5aba8ebd0ac9e9d9c95d6b", "filename": "src/test/run-pass/log-linearized.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Flog-linearized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-linearized.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -15,11 +15,13 @@ enum option<T> {\n     some(T),\n }\n \n-type smallintmap<T> = @{mut v: ~[mut option<T>]};\n+struct Smallintmap<T> {mut v: ~[mut option<T>]}\n \n-fn mk<T>() -> smallintmap<T> {\n+struct V<T> { v: ~[mut option<T>] }\n+\n+fn mk<T>() -> @Smallintmap<T> {\n     let v: ~[mut option<T>] = ~[mut];\n-    return @{mut v: move v};\n+    return @Smallintmap {mut v: move v};\n }\n \n fn f<T,U>() {"}, {"sha": "35b2993ca33c6e321ddbd25e9ec244fbcb3ef664", "filename": "src/test/run-pass/morestack4.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmorestack4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmorestack4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmorestack4.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -11,7 +11,7 @@\n // This is testing for stack frames greater than 256 bytes,\n // for which function prologues are generated differently\n \n-type biggy = {\n+struct Biggy {\n     a00: u64,\n     a01: u64,\n     a02: u64,\n@@ -52,17 +52,17 @@ type biggy = {\n     a37: u64,\n     a38: u64,\n     a39: u64,\n-};\n+}\n \n \n-fn getbig(i: biggy) {\n+fn getbig(i: Biggy) {\n     if i.a00 != 0u64 {\n-        getbig({a00: i.a00 - 1u64,.. i});\n+        getbig(Biggy{a00: i.a00 - 1u64,.. i});\n     }\n }\n \n fn main() {\n-    getbig({\n+    getbig(Biggy {\n         a00: 10000u64,\n         a01: 10000u64,\n         a02: 10000u64,"}, {"sha": "e477442376eb04aff3f311365ff275e6ff6f589f", "filename": "src/test/run-pass/move-1-unique.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,16 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct Triple { x: int, y: int, z: int }\n \n-fn test(x: bool, foo: ~{x: int, y: int, z: int}) -> int {\n+fn test(x: bool, foo: ~Triple) -> int {\n     let bar = foo;\n-    let mut y: ~{x: int, y: int, z: int};\n-    if x { y = move bar; } else { y = ~{x: 4, y: 5, z: 6}; }\n+    let mut y: ~Triple;\n+    if x { y = move bar; } else { y = ~Triple{x: 4, y: 5, z: 6}; }\n     return y.y;\n }\n \n fn main() {\n-    let x = ~{x: 1, y: 2, z: 3};\n+    let x = ~Triple{x: 1, y: 2, z: 3};\n     assert (test(true, x) == 2);\n     assert (test(true, x) == 2);\n     assert (test(true, x) == 2);"}, {"sha": "4c7e5682a1304f1d669ab934da7c672831024c53", "filename": "src/test/run-pass/move-1.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmove-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmove-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,15 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn test(x: bool, foo: @{x: int, y: int, z: int}) -> int {\n+struct Triple { x: int, y: int, z: int }\n+\n+fn test(x: bool, foo: @Triple) -> int {\n     let bar = foo;\n-    let mut y: @{x: int, y: int, z: int};\n-    if x { y = move bar; } else { y = @{x: 4, y: 5, z: 6}; }\n+    let mut y: @Triple;\n+    if x { y = move bar; } else { y = @Triple{x: 4, y: 5, z: 6}; }\n     return y.y;\n }\n \n fn main() {\n-    let x = @{x: 1, y: 2, z: 3};\n+    let x = @Triple {x: 1, y: 2, z: 3};\n     assert (test(true, x) == 2);\n     assert (test(true, x) == 2);\n     assert (test(true, x) == 2);"}, {"sha": "096daf315ebafa7f6fb8c06e7495d752ad2965de", "filename": "src/test/run-pass/move-2-unique.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2-unique.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -9,5 +9,6 @@\n // except according to those terms.\n \n \n+struct X { x: int, y: int, z: int }\n \n-fn main() { let x = ~{x: 1, y: 2, z: 3}; let y = move x; assert (y.y == 2); }\n+fn main() { let x = ~X{x: 1, y: 2, z: 3}; let y = move x; assert (y.y == 2); }"}, {"sha": "23746c924ad73f153472439a916619382e4193f4", "filename": "src/test/run-pass/move-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmove-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmove-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-2.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -9,5 +9,6 @@\n // except according to those terms.\n \n \n+struct X { x: int, y: int, z: int }\n \n-fn main() { let x = @{x: 1, y: 2, z: 3}; let y = move x; assert (y.y == 2); }\n+fn main() { let x = @X {x: 1, y: 2, z: 3}; let y = move x; assert (y.y == 2); }"}, {"sha": "e16955f31e817a656d17f65267e89cbd29624c5c", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,15 +10,17 @@\n \n extern mod std;\n \n-fn test(x: bool, foo: ~{x: int, y: int, z: int}) -> int {\n+struct Triple { x: int, y: int, z: int }\n+\n+fn test(x: bool, foo: ~Triple) -> int {\n     let bar = foo;\n-    let mut y: ~{x: int, y: int, z: int};\n-    if x { y = move bar; } else { y = ~{x: 4, y: 5, z: 6}; }\n+    let mut y: ~Triple;\n+    if x { y = move bar; } else { y = ~Triple {x: 4, y: 5, z: 6}; }\n     return y.y;\n }\n \n fn main() {\n-    let x = ~{x: 1, y: 2, z: 3};\n+    let x = ~Triple{x: 1, y: 2, z: 3};\n     for uint::range(0u, 10000u) |_i| {\n         assert (test(true, x) == 2);\n     }"}, {"sha": "80de11091ee33cfb0a279b82bb25f23bb171b428", "filename": "src/test/run-pass/move-3.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmove-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmove-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,15 +10,17 @@\n \n extern mod std;\n \n-fn test(x: bool, foo: @{x: int, y: int, z: int}) -> int {\n+struct Triple { x: int, y: int, z: int }\n+\n+fn test(x: bool, foo: @Triple) -> int {\n     let bar = foo;\n-    let mut y: @{x: int, y: int, z: int};\n-    if x { y = move bar; } else { y = @{x: 4, y: 5, z: 6}; }\n+    let mut y: @Triple;\n+    if x { y = move bar; } else { y = @Triple{x: 4, y: 5, z: 6}; }\n     return y.y;\n }\n \n fn main() {\n-    let x = @{x: 1, y: 2, z: 3};\n+    let x = @Triple{x: 1, y: 2, z: 3};\n     for uint::range(0u, 10000u) |i| {\n         assert (test(true, x) == 2);\n     }"}, {"sha": "0c2ce79e6aa712f514ab8fdc32dd994b196c585c", "filename": "src/test/run-pass/move-4-unique.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4-unique.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,12 +10,14 @@\n \n extern mod std;\n \n-fn test(foo: ~{a: int, b: int, c: int}) -> ~{a: int, b: int, c: int} {\n+struct Triple {a: int, b: int, c: int}\n+\n+fn test(foo: ~Triple) -> ~Triple {\n     let foo = foo;\n     let bar = move foo;\n     let baz = move bar;\n     let quux = move baz;\n     return quux;\n }\n \n-fn main() { let x = ~{a: 1, b: 2, c: 3}; let y = test(x); assert (y.c == 3); }\n+fn main() { let x = ~Triple{a: 1, b: 2, c: 3}; let y = test(x); assert (y.c == 3); }"}, {"sha": "351b78807b83f9fc25b32f5d198eb0537b6d4b5a", "filename": "src/test/run-pass/move-4.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmove-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmove-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-4.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -11,12 +11,18 @@\n \n extern mod std;\n \n-fn test(foo: @{a: int, b: int, c: int}) -> @{a: int, b: int, c: int} {\n+struct Triple { a: int, b: int, c: int }\n+\n+fn test(foo: @Triple) -> @Triple {\n     let foo = foo;\n     let bar = move foo;\n     let baz = move bar;\n     let quux = move baz;\n     return quux;\n }\n \n-fn main() { let x = @{a: 1, b: 2, c: 3}; let y = test(x); assert (y.c == 3); }\n+fn main() {\n+    let x = @Triple{a: 1, b: 2, c: 3};\n+    let y = test(x);\n+    assert (y.c == 3);\n+}"}, {"sha": "f774e42134897b5cb19a9df9cf1e5e090ce11b12", "filename": "src/test/run-pass/mutable-vec-drop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmutable-vec-drop.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -9,8 +9,10 @@\n // except according to those terms.\n \n \n+struct Pair { a: int, b: int}\n+\n fn main() {\n     // This just tests whether the vec leaks its members.\n-    let pvec: ~[mut @{a: int, b: int}] =\n-        ~[mut @{a: 1, b: 2}, @{a: 3, b: 4}, @{a: 5, b: 6}];\n+    let pvec: ~[mut @Pair] =\n+        ~[mut @Pair{a: 1, b: 2}, @Pair{a: 3, b: 4}, @Pair{a: 5, b: 6}];\n }"}, {"sha": "c6eb91c564db7299201238d8674281779ca724b6", "filename": "src/test/run-pass/nested-exhaustive-alt.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fnested-exhaustive-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fnested-exhaustive-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-exhaustive-alt.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct Foo { foo: bool, bar: Option<int>, baz: int }\n+\n fn main() {\n-    match @{foo: true, bar: Some(10), baz: 20} {\n-      @{foo: true, bar: Some(_), _} => {}\n-      @{foo: false, bar: None, _} => {}\n-      @{foo: true, bar: None, _} => {}\n-      @{foo: false, bar: Some(_), _} => {}\n+    match @Foo{foo: true, bar: Some(10), baz: 20} {\n+      @Foo{foo: true, bar: Some(_), _} => {}\n+      @Foo{foo: false, bar: None, _} => {}\n+      @Foo{foo: true, bar: None, _} => {}\n+      @Foo{foo: false, bar: Some(_), _} => {}\n     }\n }"}, {"sha": "06d630255c0b1798a3d5fa3cc93a25ca1467d596", "filename": "src/test/run-pass/nested-patterns.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fnested-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fnested-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnested-patterns.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,15 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct A { a: int, b: @int }\n+struct B { a: int, b: C }\n+struct D { a: int, d: C }\n+struct C { mut c: int }\n+\n fn main() {\n-    match {a: 10, b: @20} {\n-        x@{a, b: @20} => { assert x.a == 10; assert a == 10; }\n-        {b, _} => { fail; }\n+    match A {a: 10, b: @20} {\n+        x@A {a, b: @20} => { assert x.a == 10; assert a == 10; }\n+        A {b, _} => { fail; }\n     }\n-    let x@{b, _} = {a: 10, b: {mut c: 20}};\n+    let x@B {b, _} = B {a: 10, b: C {mut c: 20}};\n     x.b.c = 30;\n     assert b.c == 20;\n-    let y@{d, _} = {a: 10, d: {mut c: 20}};\n+    let y@D {d, _} = D {a: 10, d: C {mut c: 20}};\n     y.d.c = 30;\n     assert d.c == 20;\n }"}, {"sha": "cb781ae6a993e3468af8c1df9b3b4d7c341fc5b9", "filename": "src/test/run-pass/newtype.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-enum mytype = {compute: extern fn(mytype) -> int, val: int};\n+enum mytype = Mytype;\n+\n+struct Mytype {compute: extern fn(mytype) -> int, val: int}\n \n fn compute(i: mytype) -> int { return i.val + 20; }\n \n fn main() {\n-    let myval = mytype({compute: compute, val: 30});\n+    let myval = mytype(Mytype{compute: compute, val: 30});\n     assert ((myval.compute)(myval) == 50);\n }"}, {"sha": "3667a9802516fea0b5d734021aca8cea89af30ea", "filename": "src/test/run-pass/output-slot-variants.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foutput-slot-variants.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,27 +8,28 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n+struct A { a: int, b: int }\n+struct Abox { a: @int, b: @int }\n \n fn ret_int_i() -> int { return 10; }\n \n fn ret_ext_i() -> @int { return @10; }\n \n-fn ret_int_rec() -> {a: int, b: int} { return {a: 10, b: 10}; }\n+fn ret_int_rec() -> A { return A {a: 10, b: 10}; }\n \n-fn ret_ext_rec() -> @{a: int, b: int} { return @{a: 10, b: 10}; }\n+fn ret_ext_rec() -> @A { return @A {a: 10, b: 10}; }\n \n-fn ret_ext_mem() -> {a: @int, b: @int} { return {a: @10, b: @10}; }\n+fn ret_ext_mem() -> Abox { return Abox {a: @10, b: @10}; }\n \n-fn ret_ext_ext_mem() -> @{a: @int, b: @int} { return @{a: @10, b: @10}; }\n+fn ret_ext_ext_mem() -> @Abox { return @Abox{a: @10, b: @10}; }\n \n fn main() {\n     let mut int_i: int;\n     let mut ext_i: @int;\n-    let mut int_rec: {a: int, b: int};\n-    let mut ext_rec: @{a: int, b: int};\n-    let mut ext_mem: {a: @int, b: @int};\n-    let mut ext_ext_mem: @{a: @int, b: @int};\n+    let mut int_rec: A;\n+    let mut ext_rec: @A;\n+    let mut ext_mem: Abox;\n+    let mut ext_ext_mem: @Abox;\n     int_i = ret_int_i(); // initializing\n \n     int_i = ret_int_i(); // non-initializing"}, {"sha": "2821ab3e3ebc82961de0dce337a84765f23ab7b4", "filename": "src/test/run-pass/pass-by-copy.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpass-by-copy.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,11 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn magic(+x: {a: @int}) { log(debug, x); }\n+fn magic(+x: A) { log(debug, x); }\n fn magic2(+x: @int) { log(debug, x); }\n \n+struct A { a: @int }\n+\n fn main() {\n-    let a = {a: @10}, b = @10;\n-    magic(a); magic({a: @20});\n+    let a = A {a: @10}, b = @10;\n+    magic(a); magic(A {a: @20});\n     magic2(b); magic2(@20);\n }"}, {"sha": "572720f58085a9dbe15e42b2ca1dffae9e55502d", "filename": "src/test/run-pass/pure-fmt.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fpure-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fpure-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-fmt.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,9 +10,12 @@\n \n // Testing that calling fmt! (via debug!) doesn't complain about impure borrows\n \n+struct Big { b: @~str, c: uint, d: int, e: char,\n+            f: float, g: bool }\n+\n pure fn foo() {\n-    let a = {\n-        b: @\"hi\",\n+    let a = Big {\n+        b: @~\"hi\",\n         c: 0,\n         d: 1,\n         e: 'a',"}, {"sha": "84792d52c133813fd4d58e1512b6cf4e9c300900", "filename": "src/test/run-pass/pure-sum.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fpure-sum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpure-sum.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -29,16 +29,18 @@ pure fn sums_to_using_uniq(v: ~[int], sum: int) -> bool {\n }\n \n pure fn sums_to_using_rec(v: ~[int], sum: int) -> bool {\n-    let mut i = 0u, sum0 = {f: 0};\n+    let mut i = 0u, sum0 = F {f: 0};\n     while i < v.len() {\n         sum0.f += v[i];\n         i += 1u;\n     }\n     return sum0.f == sum;\n }\n \n+struct F<T> { f: T }\n+\n pure fn sums_to_using_uniq_rec(v: ~[int], sum: int) -> bool {\n-    let mut i = 0u, sum0 = {f: ~mut 0};\n+    let mut i = 0u, sum0 = F {f: ~mut 0};\n     while i < v.len() {\n         *sum0.f += v[i];\n         i += 1u;"}, {"sha": "5c3f77b994b4e47c8d4c5b37a77654d9d7d8f5dc", "filename": "src/test/run-pass/readalias.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Freadalias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Freadalias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freadalias.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -12,8 +12,8 @@\n \n \n // -*- rust -*-\n-type point = {x: int, y: int, z: int};\n+struct Point {x: int, y: int, z: int}\n \n-fn f(p: point) { assert (p.z == 12); }\n+fn f(p: Point) { assert (p.z == 12); }\n \n-fn main() { let x: point = {x: 10, y: 11, z: 12}; f(x); }\n+fn main() { let x: Point = Point {x: 10, y: 11, z: 12}; f(x); }"}, {"sha": "11e2f79aa60825ed228cc62fd3bb2177216d2719", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -18,16 +18,16 @@ extern mod rusti {\n }\n \n // This is the type with the questionable alignment\n-type inner = {\n+struct Inner {\n     c64: u32\n-};\n+}\n \n // This is the type that contains the type with the\n // questionable alignment, for testing\n-type outer = {\n+struct Outer {\n     c8: u8,\n-    t: inner\n-};\n+    t: Inner\n+}\n \n \n #[cfg(target_arch = \"x86\")]\n@@ -46,21 +46,21 @@ mod m {\n \n fn main() {\n     unsafe {\n-        let x = {c8: 22u8, t: {c64: 44u32}};\n+        let x = Outer {c8: 22u8, t: Inner {c64: 44u32}};\n \n         // Send it through the shape code\n         let y = fmt!(\"%?\", x);\n \n-        debug!(\"align inner = %?\", rusti::min_align_of::<inner>());\n-        debug!(\"size outer = %?\", sys::size_of::<outer>());\n+        debug!(\"align inner = %?\", rusti::min_align_of::<Inner>());\n+        debug!(\"size outer = %?\", sys::size_of::<Outer>());\n         debug!(\"y = %s\", y);\n \n         // per clang/gcc the alignment of `inner` is 4 on x86.\n-        assert rusti::min_align_of::<inner>() == m::align();\n+        assert rusti::min_align_of::<Inner>() == m::align();\n \n         // per clang/gcc the size of `outer` should be 12\n         // because `inner`s alignment was 4.\n-        assert sys::size_of::<outer>() == m::size();\n+        assert sys::size_of::<Outer>() == m::size();\n \n         assert y == ~\"{c8: 22, t: {c64: 44}}\";\n     }"}, {"sha": "5fdabdc360cd91930c18966697fde5a0c7b6d455", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -18,16 +18,16 @@ extern mod rusti {\n }\n \n // This is the type with the questionable alignment\n-type inner = {\n+struct Inner {\n     c64: u64\n-};\n+}\n \n // This is the type that contains the type with the\n // questionable alignment, for testing\n-type outer = {\n+struct Outer {\n     c8: u8,\n-    t: inner\n-};\n+    t: Inner\n+}\n \n \n #[cfg(target_os = \"linux\")]\n@@ -63,21 +63,21 @@ mod m {\n \n fn main() {\n     unsafe {\n-        let x = {c8: 22u8, t: {c64: 44u64}};\n+        let x = Outer {c8: 22u8, t: Inner {c64: 44u64}};\n \n         // Send it through the shape code\n         let y = fmt!(\"%?\", x);\n \n-        debug!(\"align inner = %?\", rusti::min_align_of::<inner>());\n-        debug!(\"size outer = %?\", sys::size_of::<outer>());\n+        debug!(\"align inner = %?\", rusti::min_align_of::<Inner>());\n+        debug!(\"size outer = %?\", sys::size_of::<Outer>());\n         debug!(\"y = %s\", y);\n \n-        // per clang/gcc the alignment of `inner` is 4 on x86.\n-        assert rusti::min_align_of::<inner>() == m::m::align();\n+        // per clang/gcc the alignment of `Inner` is 4 on x86.\n+        assert rusti::min_align_of::<Inner>() == m::m::align();\n \n-        // per clang/gcc the size of `outer` should be 12\n-        // because `inner`s alignment was 4.\n-        assert sys::size_of::<outer>() == m::m::size();\n+        // per clang/gcc the size of `Outer` should be 12\n+        // because `Inner`s alignment was 4.\n+        assert sys::size_of::<Outer>() == m::m::size();\n \n         assert y == ~\"{c8: 22, t: {c64: 44}}\";\n     }"}, {"sha": "05428879fd2eb68eeb5be42d9933def923bb4266", "filename": "src/test/run-pass/rec-auto.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Frec-auto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Frec-auto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-auto.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -14,8 +14,11 @@\n // -*- rust -*-\n \n // Issue #50.\n+\n+struct X { foo: ~str, bar: ~str }\n+\n fn main() {\n-    let x = {foo: ~\"hello\", bar: ~\"world\"};\n+    let x = X {foo: ~\"hello\", bar: ~\"world\"};\n     log(debug, copy x.foo);\n     log(debug, copy x.bar);\n }"}, {"sha": "ca353455c13726f1ab8048368d17c001904c5c05", "filename": "src/test/run-pass/rec-extend.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Frec-extend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Frec-extend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-extend.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -12,12 +12,12 @@\n \n \n // -*- rust -*-\n-type point = {x: int, y: int};\n+struct Point {x: int, y: int}\n \n fn main() {\n-    let origin: point = {x: 0, y: 0};\n-    let right: point = {x: origin.x + 10,.. origin};\n-    let up: point = {y: origin.y + 10,.. origin};\n+    let origin: Point = Point {x: 0, y: 0};\n+    let right: Point = Point {x: origin.x + 10,.. origin};\n+    let up: Point = Point {y: origin.y + 10,.. origin};\n     assert (origin.x == 0);\n     assert (origin.y == 0);\n     assert (right.x == 10);"}, {"sha": "8c20e4f342ba60f33b8c98a7c759d6149536424d", "filename": "src/test/run-pass/rec-tup.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Frec-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Frec-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-tup.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -9,12 +9,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type point = {x: int, y: int};\n+struct Point {x: int, y: int}\n \n-type rect = (point, point);\n+type rect = (Point, Point);\n \n-fn fst(r: rect) -> point { let (fst, _) = r; return fst; }\n-fn snd(r: rect) -> point { let (_, snd) = r; return snd; }\n+fn fst(r: rect) -> Point { let (fst, _) = r; return fst; }\n+fn snd(r: rect) -> Point { let (_, snd) = r; return snd; }\n \n fn f(r: rect, x1: int, y1: int, x2: int, y2: int) {\n     assert (fst(r).x == x1);\n@@ -24,7 +24,7 @@ fn f(r: rect, x1: int, y1: int, x2: int, y2: int) {\n }\n \n fn main() {\n-    let r: rect = ({x: 10, y: 20}, {x: 11, y: 22});\n+    let r: rect = (Point {x: 10, y: 20}, Point {x: 11, y: 22});\n     assert (fst(r).x == 10);\n     assert (fst(r).y == 20);\n     assert (snd(r).x == 11);"}, {"sha": "6ff3635587514192869d583f94a941f87044d702", "filename": "src/test/run-pass/rec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Frec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Frec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -12,22 +12,22 @@\n \n \n // -*- rust -*-\n-type rect = {x: int, y: int, w: int, h: int};\n+struct Rect {x: int, y: int, w: int, h: int}\n \n-fn f(r: rect, x: int, y: int, w: int, h: int) {\n+fn f(r: Rect, x: int, y: int, w: int, h: int) {\n     assert (r.x == x);\n     assert (r.y == y);\n     assert (r.w == w);\n     assert (r.h == h);\n }\n \n fn main() {\n-    let r: rect = {x: 10, y: 20, w: 100, h: 200};\n+    let r: Rect = Rect {x: 10, y: 20, w: 100, h: 200};\n     assert (r.x == 10);\n     assert (r.y == 20);\n     assert (r.w == 100);\n     assert (r.h == 200);\n-    let r2: rect = r;\n+    let r2: Rect = r;\n     let x: int = r2.x;\n     assert (x == 10);\n     f(r, 10, 20, 100, 200);"}, {"sha": "026b9c93203fa4930aa48a0e02ef44c92fe18d64", "filename": "src/test/run-pass/record-pat.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Frecord-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Frecord-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frecord-pat.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -9,17 +9,17 @@\n // except according to those terms.\n \n enum t1 { a(int), b(uint), }\n-type t2 = {x: t1, y: int};\n-enum t3 { c(t2, uint), }\n+struct T2 {x: t1, y: int}\n+enum t3 { c(T2, uint), }\n \n fn m(in: t3) -> int {\n     match in {\n-      c({x: a(m), _}, _) => { return m; }\n-      c({x: b(m), y: y}, z) => { return ((m + z) as int) + y; }\n+      c(T2 {x: a(m), _}, _) => { return m; }\n+      c(T2 {x: b(m), y: y}, z) => { return ((m + z) as int) + y; }\n     }\n }\n \n fn main() {\n-    assert (m(c({x: a(10), y: 5}, 4u)) == 10);\n-    assert (m(c({x: b(10u), y: 5}, 4u)) == 19);\n+    assert (m(c(T2 {x: a(10), y: 5}, 4u)) == 10);\n+    assert (m(c(T2 {x: b(10u), y: 5}, 4u)) == 19);\n }"}, {"sha": "d072df4d8e880f88cc5b76679226e72b963ee2c3", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -29,9 +29,7 @@ fn align(size: uint, align: uint) -> uint {\n     ((size + align) - 1u) & !(align - 1u)\n }\n \n-enum ptr_visit_adaptor<V: TyVisitor movable_ptr> = {\n-    inner: V\n-};\n+enum ptr_visit_adaptor<V: TyVisitor movable_ptr> = Inner<V>;\n \n impl<V: TyVisitor movable_ptr> ptr_visit_adaptor<V> {\n \n@@ -469,11 +467,13 @@ impl<V: TyVisitor movable_ptr> ptr_visit_adaptor<V>: TyVisitor {\n     }\n }\n \n-enum my_visitor = @{\n+enum my_visitor = @Stuff;\n+\n+struct Stuff {\n     mut ptr1: *c_void,\n     mut ptr2: *c_void,\n     mut vals: ~[~str]\n-};\n+}\n \n impl my_visitor {\n     fn get<T>(f: fn(T)) {\n@@ -485,13 +485,15 @@ impl my_visitor {\n     fn visit_inner(inner: *TyDesc) -> bool {\n         unsafe {\n             let u = my_visitor(*self);\n-            let v = ptr_visit_adaptor({inner: u});\n+            let v = ptr_visit_adaptor::<my_visitor>(Inner {inner: u});\n             visit_tydesc(inner, v as TyVisitor);\n             true\n         }\n     }\n }\n \n+struct Inner<V> { inner: V }\n+\n impl my_visitor: movable_ptr {\n     fn move_ptr(adjustment: fn(*c_void) -> *c_void) {\n         self.ptr1 = adjustment(self.ptr1);\n@@ -622,14 +624,16 @@ fn get_tydesc_for<T>(&&_t: T) -> *TyDesc {\n     get_tydesc::<T>()\n }\n \n+struct Triple { x: int, y: int, z: int }\n+\n fn main() {\n     unsafe {\n-        let r = (1,2,3,true,false,{x:5,y:4,z:3});\n+        let r = (1,2,3,true,false, Triple {x:5,y:4,z:3});\n         let p = ptr::addr_of(&r) as *c_void;\n-        let u = my_visitor(@{mut ptr1: p,\n+        let u = my_visitor(@Stuff {mut ptr1: p,\n                              mut ptr2: p,\n                              mut vals: ~[]});\n-        let v = ptr_visit_adaptor({inner: u});\n+        let v = ptr_visit_adaptor(Inner {inner: u});\n         let td = get_tydesc_for(r);\n         unsafe { error!(\"tydesc sz: %u, align: %u\",\n                         (*td).size, (*td).align); }"}, {"sha": "e1d54f33dcb780f10b7ebfa82bb79482c4b59890", "filename": "src/test/run-pass/regions-infer-borrow-scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type point = {x: int, y: int};\n+struct Point {x: int, y: int}\n \n-fn x_coord(p: &r/point) -> &r/int {\n+fn x_coord(p: &r/Point) -> &r/int {\n     return &p.x;\n }\n \n fn main() {\n-    let p = @{x: 3, y: 4};\n+    let p = @Point {x: 3, y: 4};\n     let xc = x_coord(p);\n     assert *xc == 3;\n }"}, {"sha": "71bf0ac826982a92c1d263bedbd5f81dcede8139", "filename": "src/test/run-pass/regions-mock-trans-impls.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans-impls.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -14,36 +14,36 @@ extern mod std;\n use libc, sys, cast;\n use std::arena::Arena;\n \n-type bcx = {\n-    fcx: &fcx\n-};\n+struct Bcx {\n+    fcx: &Fcx\n+}\n \n-type fcx = {\n+struct Fcx {\n     arena: &Arena,\n-    ccx: &ccx\n-};\n+    ccx: &Ccx\n+}\n \n-type ccx = {\n+struct Ccx {\n     x: int\n-};\n+}\n \n-fn h(bcx : &r/bcx) -> &r/bcx {\n-    return bcx.fcx.arena.alloc(|| { fcx: bcx.fcx });\n+fn h(bcx : &r/Bcx) -> &r/Bcx {\n+    return bcx.fcx.arena.alloc(|| Bcx { fcx: bcx.fcx });\n }\n \n-fn g(fcx : &fcx) {\n-    let bcx = { fcx: fcx };\n+fn g(fcx : &Fcx) {\n+    let bcx = Bcx { fcx: fcx };\n     h(&bcx);\n }\n \n-fn f(ccx : &ccx) {\n+fn f(ccx : &Ccx) {\n     let a = Arena();\n-    let fcx = &{ arena: &a, ccx: ccx };\n+    let fcx = &Fcx { arena: &a, ccx: ccx };\n     return g(fcx);\n }\n \n fn main() {\n-    let ccx = { x: 0 };\n+    let ccx = Ccx { x: 0 };\n     f(&ccx);\n }\n "}, {"sha": "2ef63af3be195cfe18593f4152068f49f934e013", "filename": "src/test/run-pass/regions-mock-trans.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-trans.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,46 +10,46 @@\n \n enum arena = ();\n \n-type bcx = {\n-    fcx: &fcx\n-};\n+struct Bcx {\n+    fcx: &Fcx\n+}\n \n-type fcx = {\n+struct Fcx {\n     arena: &arena,\n-    ccx: &ccx\n-};\n+    ccx: &Ccx\n+}\n \n-type ccx = {\n+struct Ccx {\n     x: int\n-};\n+}\n \n-fn alloc(_bcx : &arena) -> &bcx {   \n+fn alloc(_bcx : &arena) -> &Bcx {   \n     unsafe {\n         return cast::reinterpret_cast(\n-            &libc::malloc(sys::size_of::<bcx/&blk>() as libc::size_t));\n+            &libc::malloc(sys::size_of::<Bcx/&blk>() as libc::size_t));\n     }\n }\n \n-fn h(bcx : &bcx) -> &bcx {\n+fn h(bcx : &Bcx) -> &Bcx {\n     return alloc(bcx.fcx.arena);\n }\n \n-fn g(fcx : &fcx) {\n-    let bcx = { fcx: fcx };\n+fn g(fcx : &Fcx) {\n+    let bcx = Bcx { fcx: fcx };\n     let bcx2 = h(&bcx);\n     unsafe {\n         libc::free(cast::reinterpret_cast(&bcx2));\n     }\n }\n \n-fn f(ccx : &ccx) {\n+fn f(ccx : &Ccx) {\n     let a = arena(());\n-    let fcx = { arena: &a, ccx: ccx };\n+    let fcx = Fcx { arena: &a, ccx: ccx };\n     return g(&fcx);\n }\n \n fn main() {\n-    let ccx = { x: 0 };\n+    let ccx = Ccx { x: 0 };\n     f(&ccx);\n }\n "}, {"sha": "975d96dc4206e483412b4ceb85925edb8dba26e4", "filename": "src/test/run-pass/regions-self-impls.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-self-impls.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,18 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type clam = { chowder: &int };\n+struct Clam { chowder: &int }\n \n trait get_chowder {\n     fn get_chowder() -> &self/int;\n }\n \n-impl clam: get_chowder {\n+impl Clam: get_chowder {\n     fn get_chowder() -> &self/int { return self.chowder; }\n }\n \n fn main() {\n-    let clam = { chowder: &3 };\n+    let clam = Clam { chowder: &3 };\n     log(debug, *clam.get_chowder());\n     clam.get_chowder();\n }"}, {"sha": "575fefa9db510b4fd11c74f24098282fb1013623", "filename": "src/test/run-pass/regions-trait.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fregions-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-trait.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type ctxt = { v: uint };\n+struct Ctxt { v: uint }\n \n trait get_ctxt {\n-    fn get_ctxt() -> &self/ctxt;\n+    fn get_ctxt() -> &self/Ctxt;\n }\n \n-type has_ctxt = { c: &ctxt };\n+struct HasCtxt { c: &Ctxt }\n \n-impl has_ctxt: get_ctxt {\n-    fn get_ctxt() -> &self/ctxt {\n+impl HasCtxt: get_ctxt {\n+    fn get_ctxt() -> &self/Ctxt {\n         self.c\n     }\n }\n@@ -27,8 +27,8 @@ fn get_v(gc: get_ctxt) -> uint {\n }\n \n fn main() {\n-    let ctxt = { v: 22u };\n-    let hc = { c: &ctxt };\n+    let ctxt = Ctxt { v: 22 };\n+    let hc = HasCtxt { c: &ctxt };\n \n-    assert get_v(hc as get_ctxt) == 22u;\n+    assert get_v(hc as get_ctxt) == 22;\n }"}, {"sha": "f2926c5e1c5c9dcde20728ac51a2172c758f6753", "filename": "src/test/run-pass/resource-cycle.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fresource-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -34,10 +34,12 @@ fn r(v: *int) -> r {\n     }\n }\n \n-enum t = {\n+enum t = Node;\n+\n+struct Node {\n     mut next: Option<@t>,\n     r: r\n-};\n+}\n \n fn main() {\n     unsafe {\n@@ -48,7 +50,7 @@ fn main() {\n         let i2p = cast::reinterpret_cast(&i2);\n         cast::forget(move i2);\n \n-        let x1 = @t({\n+        let x1 = @t(Node{\n             mut next: None,\n               r: {\n               let rs = r(i1p);\n@@ -61,7 +63,7 @@ fn main() {\n             cast::reinterpret_cast::<@t, uint>(&x1),\n             cast::reinterpret_cast::<*r, uint>(&ptr::addr_of(&(x1.r))));\n \n-        let x2 = @t({\n+        let x2 = @t(Node{\n             mut next: None,\n               r: {\n               let rs = r(i2p);"}, {"sha": "56ca229b0555331fe34839b2aaca35b437973ac0", "filename": "src/test/run-pass/resource-cycle2.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle2.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,14 +10,14 @@\n \n // Don't leak the unique pointers\n \n-type u = {\n+struct U {\n     a: int,\n     b: int,\n     c: *int\n-};\n+}\n \n struct r {\n-  v: u,\n+  v: U,\n }\n \n impl r : Drop {\n@@ -28,16 +28,18 @@ impl r : Drop {\n     }\n }\n \n-fn r(v: u) -> r {\n+fn r(v: U) -> r {\n     r {\n         v: v\n     }\n }\n \n-enum t = {\n+enum t = Node;\n+\n+struct Node {\n     mut next: Option<@t>,\n     r: r\n-};\n+}\n \n fn main() {\n     unsafe {\n@@ -48,14 +50,14 @@ fn main() {\n         let i2p = cast::reinterpret_cast(&i2);\n         cast::forget(move i2);\n \n-        let u1 = {a: 0xB, b: 0xC, c: i1p};\n-        let u2 = {a: 0xB, b: 0xC, c: i2p};\n+        let u1 = U {a: 0xB, b: 0xC, c: i1p};\n+        let u2 = U {a: 0xB, b: 0xC, c: i2p};\n \n-        let x1 = @t({\n+        let x1 = @t(Node {\n             mut next: None,\n             r: r(u1)\n         });\n-        let x2 = @t({\n+        let x2 = @t(Node {\n             mut next: None,\n             r: r(u2)\n         });"}, {"sha": "59a6d703c7ce3a1a92c58c81c84c5a0e0acac550", "filename": "src/test/run-pass/resource-cycle3.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-cycle3.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -12,19 +12,19 @@\n \n // Don't leak the unique pointers\n \n-type u = {\n+struct U {\n     a: int,\n     b: int,\n     c: *int\n-};\n+}\n \n-struct r {\n-  v: u,\n+struct R {\n+  v: U,\n   w: int,\n   x: *int,\n }\n \n-impl r : Drop {\n+impl R : Drop {\n     fn finalize(&self) {\n         unsafe {\n             let _v2: ~int = cast::reinterpret_cast(&self.v.c);\n@@ -33,20 +33,22 @@ impl r : Drop {\n     }\n }\n \n-fn r(v: u, w: int, _x: *int) -> r {\n+fn r(v: U, w: int, _x: *int) -> R {\n     unsafe {\n-        r {\n+        R {\n             v: v,\n             w: w,\n             x: cast::reinterpret_cast(&0)\n         }\n     }\n }\n \n-enum t = {\n+enum t = Node;\n+\n+struct Node {\n     mut next: Option<@t>,\n-    r: r\n-};\n+    r: R\n+}\n \n fn main() { \n     unsafe {\n@@ -57,14 +59,14 @@ fn main() {\n         let i2p = cast::reinterpret_cast(&i2);\n         cast::forget(move i2);\n \n-        let u1 = {a: 0xB, b: 0xC, c: i1p};\n-        let u2 = {a: 0xB, b: 0xC, c: i2p};\n+        let u1 = U {a: 0xB, b: 0xC, c: i1p};\n+        let u2 = U {a: 0xB, b: 0xC, c: i2p};\n \n-        let x1 = @t({\n+        let x1 = @t(Node{\n             mut next: None,\n             r: r(u1, 42, i1p)\n         });\n-        let x2 = @t({\n+        let x2 = @t(Node{\n             mut next: None,\n             r: r(u2, 42, i2p)\n         });"}, {"sha": "e528cd32974ba54d5da36f51958dbc65883c1f15", "filename": "src/test/run-pass/resource-generic.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fresource-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-generic.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -11,8 +11,10 @@\n // xfail-fast\n #[legacy_modes];\n \n+struct Arg<T> {val: T, fin: extern fn(T)}\n+\n struct finish<T: Copy> {\n-  arg: {val: T, fin: extern fn(T)},\n+  arg: Arg<T>\n }\n \n impl<T: Copy> finish<T> : Drop {\n@@ -21,7 +23,7 @@ impl<T: Copy> finish<T> : Drop {\n     }\n }\n \n-fn finish<T: Copy>(arg: {val: T, fin: extern fn(T)}) -> finish<T> {\n+fn finish<T: Copy>(arg: Arg<T>) -> finish<T> {\n     finish {\n         arg: arg\n     }\n@@ -31,6 +33,6 @@ fn main() {\n     let box = @mut 10;\n     fn dec_box(&&i: @mut int) { *i -= 1; }\n \n-    { let _i = move finish({val: box, fin: dec_box}); }\n+    { let _i = move finish(Arg{val: box, fin: dec_box}); }\n     assert (*box == 9);\n }"}, {"sha": "2b43fca58b72657c74b3f0025b2ddd269d7301ff", "filename": "src/test/run-pass/rt-circular-buffer.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frt-circular-buffer.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -14,7 +14,7 @@\n // that has a size that is not a power of two\n \n // A 12-byte unit to ::core::oldcomm::send over the channel\n-type record = {val1: u32, val2: u32, val3: u32};\n+struct Record {val1: u32, val2: u32, val3: u32}\n \n \n // Assuming that the default buffer size needs to hold 8 units,\n@@ -24,7 +24,7 @@ type record = {val1: u32, val2: u32, val3: u32};\n fn test_init() {\n     let myport = ::core::oldcomm::Port();\n     let mychan = ::core::oldcomm::Chan(&myport);\n-    let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n+    let val: Record = Record {val1: 0u32, val2: 0u32, val3: 0u32};\n     ::core::oldcomm::send(mychan, val);\n }\n \n@@ -35,7 +35,7 @@ fn test_grow() {\n     let myport = ::core::oldcomm::Port();\n     let mychan = ::core::oldcomm::Chan(&myport);\n     for uint::range(0u, 100u) |i| {\n-        let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n+        let val: Record = Record {val1: 0u32, val2: 0u32, val3: 0u32};\n         ::core::oldcomm::send(mychan, val);\n     }\n }\n@@ -53,7 +53,7 @@ fn test_shrink2() {\n     let myport = ::core::oldcomm::Port();\n     let mychan = ::core::oldcomm::Chan(&myport);\n     for uint::range(0u, 100u) |_i| {\n-        let val: record = {val1: 0u32, val2: 0u32, val3: 0u32};\n+        let val: Record = Record {val1: 0u32, val2: 0u32, val3: 0u32};\n         ::core::oldcomm::send(mychan, val);\n     }\n     for uint::range(0u, 100u) |_i| { let x = ::core::oldcomm::recv(myport); }\n@@ -65,7 +65,7 @@ fn test_rotate() {\n     let myport = ::core::oldcomm::Port();\n     let mychan = ::core::oldcomm::Chan(&myport);\n     for uint::range(0u, 100u) |i| {\n-        let val = {val1: i as u32, val2: i as u32, val3: i as u32};\n+        let val = Record {val1: i as u32, val2: i as u32, val3: i as u32};\n         ::core::oldcomm::send(mychan, val);\n         let x = ::core::oldcomm::recv(myport);\n         assert (x.val1 == i as u32);\n@@ -78,12 +78,12 @@ fn test_rotate() {\n // Test rotating and growing the buffer when\n // the unit size is not a power of two\n fn test_rotate_grow() {\n-    let myport = ::core::oldcomm::Port::<record>();\n+    let myport = ::core::oldcomm::Port::<Record>();\n     let mychan = ::core::oldcomm::Chan(&myport);\n     for uint::range(0u, 10u) |j| {\n         for uint::range(0u, 10u) |i| {\n-            let val: record =\n-                {val1: i as u32, val2: i as u32, val3: i as u32};\n+            let val: Record =\n+                Record {val1: i as u32, val2: i as u32, val3: i as u32};\n             ::core::oldcomm::send(mychan, val);\n         }\n         for uint::range(0u, 10u) |i| {"}, {"sha": "44165119b0d52a26bee202e7e897c128103a3b65", "filename": "src/test/run-pass/sendfn-generic-fn.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-generic-fn.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -18,13 +18,13 @@ use oldcomm::send;\n \n fn main() { test05(); }\n \n-type pair<A,B> = { a: A, b: B };\n+struct Pair<A,B> { a: A, b: B }\n \n-fn make_generic_record<A: Copy, B: Copy>(a: A, b: B) -> pair<A,B> {\n-    return {a: a, b: b};\n+fn make_generic_record<A: Copy, B: Copy>(a: A, b: B) -> Pair<A,B> {\n+    return Pair {a: a, b: b};\n }\n \n-fn test05_start(&&f: fn~(&&v: float, &&v: ~str) -> pair<float, ~str>) {\n+fn test05_start(&&f: fn~(&&v: float, &&v: ~str) -> Pair<float, ~str>) {\n     let p = f(22.22f, ~\"Hi\");\n     log(debug, copy p);\n     assert p.a == 22.22f;\n@@ -36,8 +36,8 @@ fn test05_start(&&f: fn~(&&v: float, &&v: ~str) -> pair<float, ~str>) {\n     assert q.b == ~\"Ho\";\n }\n \n-fn spawn<A: Copy, B: Copy>(f: extern fn(fn~(A,B)->pair<A,B>)) {\n-    let arg = fn~(a: A, b: B) -> pair<A,B> {\n+fn spawn<A: Copy, B: Copy>(f: extern fn(fn~(A,B)->Pair<A,B>)) {\n+    let arg = fn~(a: A, b: B) -> Pair<A,B> {\n         return make_generic_record(a, b);\n     };\n     task::spawn(|| f(arg) );"}, {"sha": "53a09b385b3cd5f2580d3246cfa19257eb686669", "filename": "src/test/run-pass/shape_intrinsic_tag_then_rec.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshape_intrinsic_tag_then_rec.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -22,21 +22,23 @@ enum opt_span {\n \n     //hack (as opposed to option), to make `span` compile\n     os_none,\n-    os_some(@span),\n+    os_some(@Span),\n }\n-type span = {lo: uint, hi: uint, expanded_from: opt_span};\n-type spanned<T> = { data: T, span: span };\n+struct Span {lo: uint, hi: uint, expanded_from: opt_span}\n+struct Spanned<T> { data: T, span: Span }\n type ty_ = uint;\n-type path_ = { global: bool, idents: ~[~str], types: ~[@ty] };\n-type path = spanned<path_>;\n-type ty = spanned<ty_>;\n+struct Path_ { global: bool, idents: ~[~str], types: ~[@ty] }\n+type path = Spanned<Path_>;\n+type ty = Spanned<ty_>;\n+\n+struct X { sp: Span, path: path }\n \n fn main() {\n-    let sp: span = {lo: 57451u, hi: 57542u, expanded_from: os_none};\n-    let t: @ty = @{ data: 3u, span: sp };\n-    let p_: path_ = { global: true, idents: ~[~\"hi\"], types: ~[t] };\n-    let p: path = { data: p_, span: sp };\n-    let x = { sp: sp, path: p };\n+    let sp: Span = Span {lo: 57451u, hi: 57542u, expanded_from: os_none};\n+    let t: @ty = @Spanned { data: 3u, span: sp };\n+    let p_: Path_ = Path_ { global: true, idents: ~[~\"hi\"], types: ~[t] };\n+    let p: path = Spanned { data: p_, span: sp };\n+    let x = X { sp: sp, path: p };\n     log(error, copy x.path);\n     log(error, copy x);\n }"}, {"sha": "e09150eac767e242ce153d6bccac967d3bb92900", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,19 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type quad = { a: u64, b: u64, c: u64, d: u64 };\n-type floats = { a: f64, b: u8, c: f64 };\n+struct Quad { a: u64, b: u64, c: u64, d: u64 }\n+struct Floats { a: f64, b: u8, c: f64 }\n \n #[nolink]\n extern mod rustrt {\n     #[legacy_exports];\n-    fn debug_abi_1(++q: quad) -> quad;\n-    fn debug_abi_2(++f: floats) -> floats;\n+    fn debug_abi_1(++q: Quad) -> Quad;\n+    fn debug_abi_2(++f: Floats) -> Floats;\n }\n \n fn test1() {\n     unsafe {\n-        let q = { a: 0xaaaa_aaaa_aaaa_aaaa_u64,\n+        let q = Quad { a: 0xaaaa_aaaa_aaaa_aaaa_u64,\n                  b: 0xbbbb_bbbb_bbbb_bbbb_u64,\n                  c: 0xcccc_cccc_cccc_cccc_u64,\n                  d: 0xdddd_dddd_dddd_dddd_u64 };\n@@ -39,7 +39,7 @@ fn test1() {\n #[cfg(target_arch = \"x86_64\")]\n fn test2() {\n     unsafe {\n-        let f = { a: 1.234567890e-15_f64,\n+        let f = Floats { a: 1.234567890e-15_f64,\n                  b: 0b_1010_1010_u8,\n                  c: 1.0987654321e-15_f64 };\n         let ff = rustrt::debug_abi_2(f);"}, {"sha": "83e34ba84e168776ecb7b091380ef8df5e90da82", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -17,12 +17,12 @@ use pipes::Chan;\n \n // Tests of ports and channels on various types\n fn test_rec() {\n-    type r = {val0: int, val1: u8, val2: char};\n+    struct R {val0: int, val1: u8, val2: char}\n \n     let (po, ch) = pipes::stream();\n-    let r0: r = {val0: 0, val1: 1u8, val2: '2'};\n+    let r0: R = R {val0: 0, val1: 1u8, val2: '2'};\n     ch.send(r0);\n-    let mut r1: r;\n+    let mut r1: R;\n     r1 = po.recv();\n     assert (r1.val0 == 0);\n     assert (r1.val1 == 1u8);"}, {"sha": "cbc093fcc192f1291bd447e175371dbd37fcc4b6", "filename": "src/test/run-pass/trait-cast.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Ftrait-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-cast.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,12 +10,12 @@\n \n // Test cyclic detector when using trait instances.\n \n-enum Tree = TreeR;\n-type TreeR = @{\n+enum Tree = @TreeR;\n+struct TreeR {\n     mut left: Option<Tree>,\n     mut right: Option<Tree>,\n     val: to_str\n-};\n+}\n \n trait to_str {\n     fn to_str() -> ~str;\n@@ -45,10 +45,10 @@ impl Tree: to_str {\n fn foo<T: to_str>(x: T) -> ~str { x.to_str() }\n \n fn main() {\n-    let t1 = Tree(@{mut left: None,\n+    let t1 = Tree(@TreeR{mut left: None,\n                     mut right: None,\n                     val: 1 as to_str });\n-    let t2 = Tree(@{mut left: Some(t1),\n+    let t2 = Tree(@TreeR{mut left: Some(t1),\n                     mut right: Some(t1),\n                     val: 2 as to_str });\n     let expected = ~\"[2, some([1, none, none]), some([1, none, none])]\";"}, {"sha": "4215a8597f2c9c7cfc6d8b232f08a147a8fd460e", "filename": "src/test/run-pass/type-namespace.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Ftype-namespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Ftype-namespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-namespace.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-type a = {a: int};\n+struct A { a: int }\n \n-fn a(a: a) -> int { return a.a; }\n+fn a(a: A) -> int { return a.a; }\n \n-fn main() { let x: a = {a: 1}; assert (a(x) == 1); }\n+fn main() { let x: A = A {a: 1}; assert (a(x) == 1); }"}, {"sha": "b1cde5b2e85fc180b86182e6b3f4a9524c97ac17", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,20 +10,20 @@\n \n enum maybe_pointy {\n     none,\n-    p(@pointy),\n+    p(@Pointy),\n }\n \n-type pointy = {\n+struct Pointy {\n     mut a : maybe_pointy,\n     d : fn~() -> uint,\n-};\n+}\n \n fn make_uniq_closure<A:Owned Copy>(a: A) -> fn~() -> uint {\n     fn~() -> uint { ptr::addr_of(&a) as uint }\n }\n \n-fn empty_pointy() -> @pointy {\n-    return @{\n+fn empty_pointy() -> @Pointy {\n+    return @Pointy {\n         mut a : none,\n         d : make_uniq_closure(~\"hi\")\n     }"}, {"sha": "deaf09a23929bea71ca912b998ea381cc3c5c5e4", "filename": "src/test/run-pass/uniq-cc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,17 +10,17 @@\n \n enum maybe_pointy {\n     none,\n-    p(@pointy),\n+    p(@Pointy),\n }\n \n-type pointy = {\n+struct Pointy {\n     mut a : maybe_pointy,\n     c : ~int,\n     d : fn~()->(),\n-};\n+}\n \n-fn empty_pointy() -> @pointy {\n-    return @{\n+fn empty_pointy() -> @Pointy {\n+    return @Pointy {\n         mut a : none,\n         c : ~22,\n         d : fn~()->(){},"}, {"sha": "d53d89457f18cf5a4743d501e18bd21252d2ba36", "filename": "src/test/run-pass/unique-autoderef-field.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Funique-autoderef-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Funique-autoderef-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-autoderef-field.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,8 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct J { j: int }\n+\n fn main() {\n-    let i = ~{\n+    let i = ~J {\n         j: 100\n     };\n     assert i.j == 100;"}, {"sha": "5f88a9fce0323b4a04a9c4319100648183218528", "filename": "src/test/run-pass/unique-destructure.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Funique-destructure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Funique-destructure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-destructure.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct Foo { a: int, b: int }\n+\n fn main() {\n-    let ~{a, b} = ~{a: 100, b: 200};\n+    let ~Foo{a, b} = ~Foo{a: 100, b: 200};\n     assert a + b == 300;\n }\n\\ No newline at end of file"}, {"sha": "48c90d3ba63448a0c68c0474deb0c347513e9234", "filename": "src/test/run-pass/unique-pat-2.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Funique-pat-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Funique-pat-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pat-2.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -9,12 +9,13 @@\n // except according to those terms.\n \n \n-type foo = {a: int, b: uint};\n-enum bar { u(~foo), w(int), }\n+struct Foo {a: int, b: uint}\n+\n+enum bar { u(~Foo), w(int), }\n \n fn main() {\n-    assert (match u(~{a: 10, b: 40u}) {\n-              u(~{a: a, b: b}) => { a + (b as int) }\n+    assert (match u(~Foo{a: 10, b: 40u}) {\n+              u(~Foo{a: a, b: b}) => { a + (b as int) }\n               _ => { 66 }\n             } == 50);\n }"}, {"sha": "4beaa080f8b9e64cb7db4fa7c09c0e185cd10c1e", "filename": "src/test/run-pass/unique-rec.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Funique-rec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Funique-rec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-rec.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -8,9 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+struct X { x: int }\n \n fn main() {\n-    let x = ~{x: 1};\n+    let x = ~X {x: 1};\n     let bar = x;\n     assert bar.x == 1;\n }"}, {"sha": "f7d7c1474f792f18f6257d080258b2a3f98cb716", "filename": "src/test/run-pass/vec-drop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fvec-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvec-drop.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -10,9 +10,11 @@\n \n \n \n+struct Pair { x: int, y: int }\n+\n fn main() {\n     // This just tests whether the vec leaks its members.\n \n-    let pvec: ~[@{x: int, y: int}] =\n-        ~[@{x: 1, y: 2}, @{x: 3, y: 4}, @{x: 5, y: 6}];\n+    let pvec: ~[@Pair] =\n+        ~[@Pair{x: 1, y: 2}, @Pair{x: 3, y: 4}, @Pair{x: 5, y: 6}];\n }"}, {"sha": "6d93f837affc4ae122e5c4c2b7d9f449c16266d3", "filename": "src/test/run-pass/writealias.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fwritealias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d4907a7426de78b929b1db36e5d027e035a4d25/src%2Ftest%2Frun-pass%2Fwritealias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwritealias.rs?ref=6d4907a7426de78b929b1db36e5d027e035a4d25", "patch": "@@ -12,12 +12,12 @@\n \n \n // -*- rust -*-\n-type point = {x: int, y: int, mut z: int};\n+struct Point {x: int, y: int, mut z: int}\n \n-fn f(p: &mut point) { p.z = 13; }\n+fn f(p: &mut Point) { p.z = 13; }\n \n fn main() {\n-    let mut x: point = {x: 10, y: 11, mut z: 12};\n+    let mut x: Point = Point {x: 10, y: 11, mut z: 12};\n     f(&mut x);\n     assert (x.z == 13);\n }"}]}