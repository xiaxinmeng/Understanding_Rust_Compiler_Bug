{"sha": "1586005a1d15e7d26b6c46a33e7a9643de9a77ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ODYwMDVhMWQxNWU3ZDI2YjZjNDZhMzNlN2E5NjQzZGU5YTc3YWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-11T19:03:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-11T19:03:18Z"}, "message": "Auto merge of #30534 - bluss:binary-heap-fast-pop, r=Gankro\n\nBinaryHeap: Use full sift down in .pop()\n\n.sift_down can either choose to compare the element on the way down (and\nplace it during descent), or to sift down an element fully, then sift\nback up to place it.\n\nA previous PR changed .sift_down() to the former behavior, which is much\nfaster for relatively small heaps and for elements that are cheap to\ncompare.\n\nA benchmarking run suggested that BinaryHeap::pop() suffers\nimproportionally from this, and that it should use the second strategy\ninstead. It's logical since .pop() brings last element from the\nheapified vector into index 0, it's very likely that this element will\nend up at the bottom again.\n\nCloses #29969\nPrevious PR #29811", "tree": {"sha": "7714b5e02c7375556742119a6901b6f9ff75ade4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7714b5e02c7375556742119a6901b6f9ff75ade4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1586005a1d15e7d26b6c46a33e7a9643de9a77ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1586005a1d15e7d26b6c46a33e7a9643de9a77ac", "html_url": "https://github.com/rust-lang/rust/commit/1586005a1d15e7d26b6c46a33e7a9643de9a77ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1586005a1d15e7d26b6c46a33e7a9643de9a77ac/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0672ed4e82abb562660c8a6d7183288c15e4526a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0672ed4e82abb562660c8a6d7183288c15e4526a", "html_url": "https://github.com/rust-lang/rust/commit/0672ed4e82abb562660c8a6d7183288c15e4526a"}, {"sha": "52883ab843e90aff36008c2e77e0053c36509df8", "url": "https://api.github.com/repos/rust-lang/rust/commits/52883ab843e90aff36008c2e77e0053c36509df8", "html_url": "https://github.com/rust-lang/rust/commit/52883ab843e90aff36008c2e77e0053c36509df8"}], "stats": {"total": 27, "additions": 26, "deletions": 1}, "files": [{"sha": "bd329949618e5f4376860f8b3af77db4a041be75", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1586005a1d15e7d26b6c46a33e7a9643de9a77ac/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1586005a1d15e7d26b6c46a33e7a9643de9a77ac/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=1586005a1d15e7d26b6c46a33e7a9643de9a77ac", "patch": "@@ -354,7 +354,7 @@ impl<T: Ord> BinaryHeap<T> {\n         self.data.pop().map(|mut item| {\n             if !self.is_empty() {\n                 swap(&mut item, &mut self.data[0]);\n-                self.sift_down(0);\n+                self.sift_down_to_bottom(0);\n             }\n             item\n         })\n@@ -545,6 +545,31 @@ impl<T: Ord> BinaryHeap<T> {\n         self.sift_down_range(pos, len);\n     }\n \n+    /// Take an element at `pos` and move it all the way down the heap,\n+    /// then sift it up to its position.\n+    ///\n+    /// Note: This is faster when the element is known to be large / should\n+    /// be closer to the bottom.\n+    fn sift_down_to_bottom(&mut self, mut pos: usize) {\n+        let end = self.len();\n+        let start = pos;\n+        unsafe {\n+            let mut hole = Hole::new(&mut self.data, pos);\n+            let mut child = 2 * pos + 1;\n+            while child < end {\n+                let right = child + 1;\n+                // compare with the greater of the two children\n+                if right < end && !(hole.get(child) > hole.get(right)) {\n+                    child = right;\n+                }\n+                hole.move_to(child);\n+                child = 2 * hole.pos() + 1;\n+            }\n+            pos = hole.pos;\n+        }\n+        self.sift_up(start, pos);\n+    }\n+\n     /// Returns the length of the binary heap.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn len(&self) -> usize {"}]}