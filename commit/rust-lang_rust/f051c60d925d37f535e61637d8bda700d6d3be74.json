{"sha": "f051c60d925d37f535e61637d8bda700d6d3be74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwNTFjNjBkOTI1ZDM3ZjUzNWU2MTYzN2Q4YmRhNzAwZDZkM2JlNzQ=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-17T22:34:38Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:03:30Z"}, "message": "Reduce extensions to FunctionContext in cleanup.", "tree": {"sha": "5cf025c62e55311e52218add129b50f58f46a3fb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cf025c62e55311e52218add129b50f58f46a3fb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f051c60d925d37f535e61637d8bda700d6d3be74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f051c60d925d37f535e61637d8bda700d6d3be74", "html_url": "https://github.com/rust-lang/rust/commit/f051c60d925d37f535e61637d8bda700d6d3be74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f051c60d925d37f535e61637d8bda700d6d3be74/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1804131b6da1765678c1b6881dcd1b4f4ca00bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1804131b6da1765678c1b6881dcd1b4f4ca00bc4", "html_url": "https://github.com/rust-lang/rust/commit/1804131b6da1765678c1b6881dcd1b4f4ca00bc4"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "bfb7a8330091d897edac5a4180af8f250d7c9713", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f051c60d925d37f535e61637d8bda700d6d3be74/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051c60d925d37f535e61637d8bda700d6d3be74/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=f051c60d925d37f535e61637d8bda700d6d3be74", "patch": "@@ -398,7 +398,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n \n     let llfn = callee.reify(bcx.ccx());\n     let llret;\n-    if let Some(landing_pad) = self_scope.as_ref().and_then(|c| c.landing_pad) {\n+    if let Some(landing_pad) = self_scope.landing_pad {\n         let normal_bcx = bcx.fcx().build_new_block(\"normal-return\");\n         llret = bcx.invoke(llfn, &llargs[..], normal_bcx.llbb(), landing_pad, None);\n         bcx = normal_bcx;\n@@ -416,7 +416,7 @@ fn trans_fn_once_adapter_shim<'a, 'tcx>(\n     if fn_ret.0.is_never() {\n         bcx.unreachable();\n     }\n-    fcx.trans_scope(&bcx, self_scope);\n+    self_scope.trans(&bcx);\n     fcx.finish(&bcx);\n \n     ccx.instances().borrow_mut().insert(method_instance, lloncefn);"}, {"sha": "8a9283442cbd3f58d575525c64bdc63a0cf1ab82", "filename": "src/librustc_trans/cleanup.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/f051c60d925d37f535e61637d8bda700d6d3be74/src%2Flibrustc_trans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051c60d925d37f535e61637d8bda700d6d3be74/src%2Flibrustc_trans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcleanup.rs?ref=f051c60d925d37f535e61637d8bda700d6d3be74", "patch": "@@ -29,7 +29,7 @@ use rustc::ty::Ty;\n \n pub struct CleanupScope<'tcx> {\n     // Cleanup to run upon scope exit.\n-    cleanup: DropValue<'tcx>,\n+    cleanup: Option<DropValue<'tcx>>,\n \n     // Computed on creation if compiling with landing pads (!sess.no_landing_pads)\n     pub landing_pad: Option<BasicBlockRef>,\n@@ -92,21 +92,11 @@ impl PartialEq for UnwindKind {\n         }\n     }\n }\n-impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n-    pub fn trans_scope(\n-        &self,\n-        bcx: &BlockAndBuilder<'blk, 'tcx>,\n-        custom_scope: Option<CleanupScope<'tcx>>\n-    ) {\n-        if let Some(scope) = custom_scope {\n-            scope.cleanup.trans(None, &bcx);\n-        }\n-    }\n \n-    /// Schedules a (deep) drop of `val`, which is a pointer to an instance of\n-    /// `ty`\n-    pub fn schedule_drop_mem(&self, val: ValueRef, ty: Ty<'tcx>) -> Option<CleanupScope<'tcx>> {\n-        if !self.type_needs_drop(ty) { return None; }\n+impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n+    /// Schedules a (deep) drop of `val`, which is a pointer to an instance of `ty`\n+    pub fn schedule_drop_mem(&self, val: ValueRef, ty: Ty<'tcx>) -> CleanupScope<'tcx> {\n+        if !self.type_needs_drop(ty) { return CleanupScope::noop(); }\n         let drop = DropValue {\n             val: val,\n             ty: ty,\n@@ -115,19 +105,18 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n \n         debug!(\"schedule_drop_mem(val={:?}, ty={:?}) skip_dtor={}\", Value(val), ty, drop.skip_dtor);\n \n-        Some(CleanupScope::new(self, drop))\n+        CleanupScope::new(self, drop)\n     }\n \n     /// Issue #23611: Schedules a (deep) drop of the contents of\n     /// `val`, which is a pointer to an instance of struct/enum type\n     /// `ty`. The scheduled code handles extracting the discriminant\n     /// and dropping the contents associated with that variant\n     /// *without* executing any associated drop implementation.\n-    pub fn schedule_drop_adt_contents(&self, val: ValueRef, ty: Ty<'tcx>)\n-        -> Option<CleanupScope<'tcx>> {\n+    pub fn schedule_drop_adt_contents(&self, val: ValueRef, ty: Ty<'tcx>) -> CleanupScope<'tcx> {\n         // `if` below could be \"!contents_needs_drop\"; skipping drop\n         // is just an optimization, so sound to be conservative.\n-        if !self.type_needs_drop(ty) { return None; }\n+        if !self.type_needs_drop(ty) { return CleanupScope::noop(); }\n \n         let drop = DropValue {\n             val: val,\n@@ -138,15 +127,14 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n         debug!(\"schedule_drop_adt_contents(val={:?}, ty={:?}) skip_dtor={}\",\n                Value(val), ty, drop.skip_dtor);\n \n-        Some(CleanupScope::new(self, drop))\n+        CleanupScope::new(self, drop)\n     }\n-\n }\n \n impl<'tcx> CleanupScope<'tcx> {\n     fn new<'a>(fcx: &FunctionContext<'a, 'tcx>, drop_val: DropValue<'tcx>) -> CleanupScope<'tcx> {\n         CleanupScope {\n-            cleanup: drop_val,\n+            cleanup: Some(drop_val),\n             landing_pad: if !fcx.ccx.sess().no_landing_pads() {\n                 Some(CleanupScope::get_landing_pad(fcx, &drop_val))\n             } else {\n@@ -155,6 +143,19 @@ impl<'tcx> CleanupScope<'tcx> {\n         }\n     }\n \n+    pub fn noop() -> CleanupScope<'tcx> {\n+        CleanupScope {\n+            cleanup: None,\n+            landing_pad: None,\n+        }\n+    }\n+\n+    pub fn trans<'a>(self, bcx: &'a BlockAndBuilder<'a, 'tcx>) {\n+        if let Some(cleanup) = self.cleanup {\n+            cleanup.trans(None, &bcx);\n+        }\n+    }\n+\n     /// Creates a landing pad for the top scope. The landing pad will perform all cleanups necessary\n     /// for an unwind and then `resume` to continue error propagation:\n     ///"}, {"sha": "dca5907b8afedff2fceceebaaba50ac340b15504", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f051c60d925d37f535e61637d8bda700d6d3be74/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f051c60d925d37f535e61637d8bda700d6d3be74/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=f051c60d925d37f535e61637d8bda700d6d3be74", "patch": "@@ -32,6 +32,7 @@ use type_of::{type_of, sizing_type_of, align_of};\n use type_::Type;\n use value::Value;\n use Disr;\n+use cleanup::CleanupScope;\n \n use syntax_pos::DUMMY_SP;\n \n@@ -224,7 +225,7 @@ fn trans_custom_dtor<'blk, 'tcx>(mut bcx: BlockAndBuilder<'blk, 'tcx>,\n     let contents_scope = if !shallow_drop {\n         bcx.fcx().schedule_drop_adt_contents(v0, t)\n     } else {\n-        None\n+        CleanupScope::noop()\n     };\n \n     let (sized_args, unsized_args);\n@@ -252,15 +253,15 @@ fn trans_custom_dtor<'blk, 'tcx>(mut bcx: BlockAndBuilder<'blk, 'tcx>,\n     let callee = Callee::def(bcx.ccx(), dtor_did, vtbl.substs);\n     let fn_ty = callee.direct_fn_type(bcx.ccx(), &[]);\n     let llret;\n-    if let Some(landing_pad) = contents_scope.as_ref().and_then(|c| c.landing_pad) {\n+    if let Some(landing_pad) = contents_scope.landing_pad {\n         let normal_bcx = bcx.fcx().build_new_block(\"normal-return\");\n         llret = bcx.invoke(callee.reify(bcx.ccx()), args, normal_bcx.llbb(), landing_pad, None);\n         bcx = normal_bcx;\n     } else {\n         llret = bcx.call(callee.reify(bcx.ccx()), args, None);\n     }\n     fn_ty.apply_attrs_callsite(llret);\n-    bcx.fcx().trans_scope(&bcx, contents_scope);\n+    contents_scope.trans(&bcx);\n     bcx\n }\n "}]}