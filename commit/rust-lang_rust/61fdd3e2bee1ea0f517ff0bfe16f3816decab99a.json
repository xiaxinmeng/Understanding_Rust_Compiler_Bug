{"sha": "61fdd3e2bee1ea0f517ff0bfe16f3816decab99a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZmRkM2UyYmVlMWVhMGY1MTdmZjBiZmUxNmYzODE2ZGVjYWI5OWE=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-04T17:17:58Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-04T17:17:58Z"}, "message": "expand comment on default mutex behavior", "tree": {"sha": "e20e7b0ce539bf57e3891bf2f65fd70f07f42f19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e20e7b0ce539bf57e3891bf2f65fd70f07f42f19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61fdd3e2bee1ea0f517ff0bfe16f3816decab99a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61fdd3e2bee1ea0f517ff0bfe16f3816decab99a", "html_url": "https://github.com/rust-lang/rust/commit/61fdd3e2bee1ea0f517ff0bfe16f3816decab99a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61fdd3e2bee1ea0f517ff0bfe16f3816decab99a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6318d24ad8440fa30428b405be1174478e9536e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6318d24ad8440fa30428b405be1174478e9536e3", "html_url": "https://github.com/rust-lang/rust/commit/6318d24ad8440fa30428b405be1174478e9536e3"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "185615d01dd507521733246a7093b7ad51b7e9c3", "filename": "src/libstd/sys/unix/mutex.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/61fdd3e2bee1ea0f517ff0bfe16f3816decab99a/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61fdd3e2bee1ea0f517ff0bfe16f3816decab99a/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmutex.rs?ref=61fdd3e2bee1ea0f517ff0bfe16f3816decab99a", "patch": "@@ -28,14 +28,18 @@ impl Mutex {\n         //\n         // A pthread mutex initialized with PTHREAD_MUTEX_INITIALIZER will have\n         // a type of PTHREAD_MUTEX_DEFAULT, which has undefined behavior if you\n-        // try to re-lock it from the same thread when you already hold a lock.\n+        // try to re-lock it from the same thread when you already hold a lock\n+        // (https://pubs.opengroup.org/onlinepubs/9699919799/functions/pthread_mutex_init.html).\n         //\n         // In practice, glibc takes advantage of this undefined behavior to\n         // implement hardware lock elision, which uses hardware transactional\n-        // memory to avoid acquiring the lock. While a transaction is in\n+        // memory to avoid acquiring the lock.\n+        // This is the case even if PTHREAD_MUTEX_DEFAULT == PTHREAD_MUTEX_NORMAL\n+        // (https://github.com/rust-lang/rust/issues/33770#issuecomment-220847521).\n+        // As a consequence, while a transaction is in\n         // progress, the lock appears to be unlocked. This isn't a problem for\n         // other threads since the transactional memory will abort if a conflict\n-        // is detected, however no abort is generated if re-locking from the\n+        // is detected, however no abort is generated when re-locking from the\n         // same thread.\n         //\n         // Since locking the same mutex twice will result in two aliasing &mut"}]}