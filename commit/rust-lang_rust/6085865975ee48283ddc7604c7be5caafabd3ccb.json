{"sha": "6085865975ee48283ddc7604c7be5caafabd3ccb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwODU4NjU5NzVlZTQ4MjgzZGRjNzYwNGM3YmU1Y2FhZmFiZDNjY2I=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-20T07:42:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-20T07:45:25Z"}, "message": "adjust for InboundsCheck parameter of memory bounds check", "tree": {"sha": "ca72ae3203c1be0d328280ec77eef7fe0aa91143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca72ae3203c1be0d328280ec77eef7fe0aa91143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6085865975ee48283ddc7604c7be5caafabd3ccb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6085865975ee48283ddc7604c7be5caafabd3ccb", "html_url": "https://github.com/rust-lang/rust/commit/6085865975ee48283ddc7604c7be5caafabd3ccb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6085865975ee48283ddc7604c7be5caafabd3ccb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8486ce9d693aa2aa987409690bf146cef20fe41", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8486ce9d693aa2aa987409690bf146cef20fe41", "html_url": "https://github.com/rust-lang/rust/commit/b8486ce9d693aa2aa987409690bf146cef20fe41"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "be05c2259957e5e8e878ce406484ba7f2593325b", "filename": "src/operator.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6085865975ee48283ddc7604c7be5caafabd3ccb/src%2Foperator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085865975ee48283ddc7604c7be5caafabd3ccb/src%2Foperator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foperator.rs?ref=6085865975ee48283ddc7604c7be5caafabd3ccb", "patch": "@@ -142,8 +142,9 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n                     // allocations sit right next to each other.  The C/C++ standards are\n                     // somewhat fuzzy about this case, so I think for now this check is\n                     // \"good enough\".\n-                    self.memory().check_bounds_ptr(left, false)?;\n-                    self.memory().check_bounds_ptr(right, false)?;\n+                    // We require liveness, as dead allocations can of course overlap.\n+                    self.memory().check_bounds_ptr(left, InboundsCheck::Live)?;\n+                    self.memory().check_bounds_ptr(right, InboundsCheck::Live)?;\n                     // Two live in-bounds pointers, we can compare across allocations\n                     left == right\n                 }\n@@ -153,15 +154,17 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n             (Scalar::Bits { bits, size }, Scalar::Ptr(ptr)) => {\n                 assert_eq!(size as u64, self.pointer_size().bytes());\n                 let bits = bits as u64;\n-                let (alloc_size, alloc_align) = self.memory().get_size_and_align(ptr.alloc_id);\n \n                 // Case I: Comparing with NULL\n                 if bits == 0 {\n                     // Test if the ptr is in-bounds. Then it cannot be NULL.\n-                    if ptr.offset <= alloc_size {\n+                    if self.memory().check_bounds_ptr(ptr, InboundsCheck::MaybeDead).is_ok() {\n                         return Ok(false);\n                     }\n                 }\n+\n+                let (alloc_size, alloc_align) = self.memory().get_size_and_align(ptr.alloc_id);\n+\n                 // Case II: Alignment gives it away\n                 if ptr.offset.bytes() % alloc_align.abi() == 0 {\n                     // The offset maintains the allocation alignment, so we know `base+offset`\n@@ -293,11 +296,11 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for super::MiriEvalContext<'a, 'mir, '\n         let offset = offset.checked_mul(pointee_size).ok_or_else(|| EvalErrorKind::Overflow(mir::BinOp::Mul))?;\n         // Now let's see what kind of pointer this is\n         if let Scalar::Ptr(ptr) = ptr {\n-            // Both old and new pointer must be in-bounds.\n+            // Both old and new pointer must be in-bounds of a *live* allocation.\n             // (Of the same allocation, but that part is trivial with our representation.)\n-            self.memory().check_bounds_ptr(ptr, false)?;\n+            self.memory().check_bounds_ptr(ptr, InboundsCheck::Live)?;\n             let ptr = ptr.signed_offset(offset, self)?;\n-            self.memory().check_bounds_ptr(ptr, false)?;\n+            self.memory().check_bounds_ptr(ptr, InboundsCheck::Live)?;\n             Ok(Scalar::Ptr(ptr))\n         } else {\n             // An integer pointer. They can only be offset by 0, and we pretend there"}, {"sha": "063a544baa655092934be8ef9601822507772318", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6085865975ee48283ddc7604c7be5caafabd3ccb/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085865975ee48283ddc7604c7be5caafabd3ccb/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=6085865975ee48283ddc7604c7be5caafabd3ccb", "patch": "@@ -5,7 +5,7 @@ use rustc::hir::{Mutability, MutMutable, MutImmutable};\n \n use crate::{\n     EvalResult, EvalErrorKind, MiriEvalContext, HelpersEvalContextExt, Evaluator, MutValueVisitor,\n-    MemoryKind, MiriMemoryKind, RangeMap, AllocId, Allocation, AllocationExtra,\n+    MemoryKind, MiriMemoryKind, RangeMap, AllocId, Allocation, AllocationExtra, InboundsCheck,\n     Pointer, MemPlace, Scalar, Immediate, ImmTy, PlaceTy, MPlaceTy,\n };\n \n@@ -523,7 +523,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n         }\n \n         // Get the allocation\n-        self.memory().check_bounds(ptr, size, false)?;\n+        self.memory().check_bounds(ptr, size, InboundsCheck::Live)?;\n         let alloc = self.memory().get(ptr.alloc_id).expect(\"We checked that the ptr is fine!\");\n         // If we got here, we do some checking, *but* we leave the tag unchanged.\n         if let Borrow::Shr(Some(_)) = ptr.tag {\n@@ -566,7 +566,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n             ptr, place.layout.ty, new_bor);\n \n         // Get the allocation.  It might not be mutable, so we cannot use `get_mut`.\n-        self.memory().check_bounds(ptr, size, false)?;\n+        self.memory().check_bounds(ptr, size, InboundsCheck::Live)?;\n         let alloc = self.memory().get(ptr.alloc_id).expect(\"We checked that the ptr is fine!\");\n         // Update the stacks.\n         if let Borrow::Shr(Some(_)) = new_bor {"}, {"sha": "ce1c89a2a008181bb63c96a5cfaf46efe9291fca", "filename": "tests/compile-fail-fullmir/out_of_bounds_ptr_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6085865975ee48283ddc7604c7be5caafabd3ccb/tests%2Fcompile-fail-fullmir%2Fout_of_bounds_ptr_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6085865975ee48283ddc7604c7be5caafabd3ccb/tests%2Fcompile-fail-fullmir%2Fout_of_bounds_ptr_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fout_of_bounds_ptr_1.rs?ref=6085865975ee48283ddc7604c7be5caafabd3ccb", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: pointer computed at offset 5, outside bounds of allocation\n+// error-pattern: must be in-bounds and live at offset 5, but is outside bounds of allocation\n fn main() {\n     let v = [0i8; 4];\n     let x = &v as *const i8;"}]}