{"sha": "3b4797cb598260b96dd8d6e47cd429210e14c1f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiNDc5N2NiNTk4MjYwYjk2ZGQ4ZDZlNDdjZDQyOTIxMGUxNGMxZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-31T11:01:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-31T11:01:40Z"}, "message": "Auto merge of #76153 - matklad:rollup-vlblfup, r=matklad\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #75969 (Switch to intra-doc links in core/src/{convert,iter}/mod.rs)\n - #76023 (Liballoc extend use intra doc link)\n - #76033 (Add missing hyphen)\n - #76052 (GH-66816:  Remove disable attr before return)\n - #76055 (Keep doc standard for Vec DrainFilter)\n - #76058 (Use assertions on Vec doc)\n - #76069 (Use explicit intra-doc link in path for Vec resize)\n - #76117 (Update README.md)\n - #76134 (Update MinGW instructions to include ninja)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "476e4920db279ab1cef411918d6025bede0739f3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/476e4920db279ab1cef411918d6025bede0739f3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b4797cb598260b96dd8d6e47cd429210e14c1f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b4797cb598260b96dd8d6e47cd429210e14c1f6", "html_url": "https://github.com/rust-lang/rust/commit/3b4797cb598260b96dd8d6e47cd429210e14c1f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b4797cb598260b96dd8d6e47cd429210e14c1f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8bfe289886af727150c1b9ec502cbfd7bbf425e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8bfe289886af727150c1b9ec502cbfd7bbf425e8", "html_url": "https://github.com/rust-lang/rust/commit/8bfe289886af727150c1b9ec502cbfd7bbf425e8"}, {"sha": "bd91b085078b8bfca32bbc0f4583db04eda2f076", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd91b085078b8bfca32bbc0f4583db04eda2f076", "html_url": "https://github.com/rust-lang/rust/commit/bd91b085078b8bfca32bbc0f4583db04eda2f076"}], "stats": {"total": 111, "additions": 46, "deletions": 65}, "files": [{"sha": "095ffdd04b982fc05c70c56c7d0bf6b8b756c6b6", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -112,7 +112,7 @@ build.\n    # Install build tools needed for Rust. If you're building a 32-bit compiler,\n    # then replace \"x86_64\" below with \"i686\". If you've already got git, python,\n    # or CMake installed and in PATH you can remove them from this list. Note\n-   # that it is important that you do **not** use the 'python2' and 'cmake'\n+   # that it is important that you do **not** use the 'python2', 'cmake' and 'ninja'\n    # packages from the 'msys2' subsystem. The build has historically been known\n    # to fail with these packages.\n    $ pacman -S git \\\n@@ -121,7 +121,8 @@ build.\n                tar \\\n                mingw-w64-x86_64-python \\\n                mingw-w64-x86_64-cmake \\\n-               mingw-w64-x86_64-gcc\n+               mingw-w64-x86_64-gcc \\\n+               mingw-w64-x86_64-ninja\n    ```\n \n 4. Navigate to Rust's source code (or clone it), then build it:"}, {"sha": "ff07bf52c02732626c4f05e12ea1e581cfb302b8", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -111,7 +111,7 @@ macro_rules! acquire {\n ///\n /// # Cloning references\n ///\n-/// Creating a new reference from an existing reference counted pointer is done using the\n+/// Creating a new reference from an existing reference-counted pointer is done using the\n /// `Clone` trait implemented for [`Arc<T>`][Arc] and [`Weak<T>`][Weak].\n ///\n /// ```"}, {"sha": "c86798a1bd3a537dbb36b4d256b4b6c10b00d1d9", "filename": "library/alloc/src/vec.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/library%2Falloc%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/library%2Falloc%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec.rs?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -114,8 +114,9 @@ use crate::raw_vec::RawVec;\n /// assert_eq!(vec, [0, 0, 0, 0, 0]);\n ///\n /// // The following is equivalent, but potentially slower:\n-/// let mut vec1 = Vec::with_capacity(5);\n-/// vec1.resize(5, 0);\n+/// let mut vec = Vec::with_capacity(5);\n+/// vec.resize(5, 0);\n+/// assert_eq!(vec, [0, 0, 0, 0, 0]);\n /// ```\n ///\n /// Use a `Vec<T>` as an efficient stack:\n@@ -1565,7 +1566,7 @@ impl<T: Clone> Vec<T> {\n     /// This method requires `T` to implement [`Clone`],\n     /// in order to be able to clone the passed value.\n     /// If you need more flexibility (or want to rely on [`Default`] instead of\n-    /// [`Clone`]), use [`resize_with`].\n+    /// [`Clone`]), use [`Vec::resize_with`].\n     ///\n     /// # Examples\n     ///\n@@ -1578,8 +1579,6 @@ impl<T: Clone> Vec<T> {\n     /// vec.resize(2, 0);\n     /// assert_eq!(vec, [1, 2]);\n     /// ```\n-    ///\n-    /// [`resize_with`]: Vec::resize_with\n     #[stable(feature = \"vec_resize\", since = \"1.5.0\")]\n     pub fn resize(&mut self, new_len: usize, value: T) {\n         let len = self.len();\n@@ -1609,7 +1608,7 @@ impl<T: Clone> Vec<T> {\n     /// assert_eq!(vec, [1, 2, 3, 4]);\n     /// ```\n     ///\n-    /// [`extend`]: #method.extend\n+    /// [`extend`]: Vec::extend\n     #[stable(feature = \"vec_extend_from_slice\", since = \"1.6.0\")]\n     pub fn extend_from_slice(&mut self, other: &[T]) {\n         self.spec_extend(other.iter())\n@@ -3024,7 +3023,10 @@ impl<T> Drain<'_, T> {\n     }\n }\n \n-/// An iterator produced by calling `drain_filter` on Vec.\n+/// An iterator which uses a closure to determine if an element should be removed.\n+///\n+/// This struct is created by [`Vec::drain_filter`].\n+/// See its documentation for more.\n #[unstable(feature = \"drain_filter\", reason = \"recently added\", issue = \"43244\")]\n #[derive(Debug)]\n pub struct DrainFilter<'a, T, F>"}, {"sha": "2bfeb49b5fab7fa5fb0f3ae253ed2c52d06cbe4d", "filename": "library/core/src/convert/mod.rs", "status": "modified", "additions": 14, "deletions": 38, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fconvert%2Fmod.rs?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -31,13 +31,6 @@\n //!   `into` themselves and `from` themselves\n //!\n //! See each trait for usage examples.\n-//!\n-//! [`Into`]: trait.Into.html\n-//! [`From`]: trait.From.html\n-//! [`TryFrom`]: trait.TryFrom.html\n-//! [`TryInto`]: trait.TryInto.html\n-//! [`AsRef`]: trait.AsRef.html\n-//! [`AsMut`]: trait.AsMut.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -141,13 +134,11 @@ pub const fn identity<T>(x: T) -> T {\n /// want to accept all references that can be converted to [`&str`] as an argument.\n /// Since both [`String`] and [`&str`] implement `AsRef<str>` we can accept both as input argument.\n ///\n-/// [`Option<T>`]: ../../std/option/enum.Option.html\n-/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n-/// [`Borrow`]: ../../std/borrow/trait.Borrow.html\n-/// [`Hash`]: ../../std/hash/trait.Hash.html\n-/// [`Eq`]: ../../std/cmp/trait.Eq.html\n-/// [`Ord`]: ../../std/cmp/trait.Ord.html\n-/// [`&str`]: ../../std/primitive.str.html\n+/// [`Option<T>`]: Option\n+/// [`Result<T, E>`]: Result\n+/// [`Borrow`]: crate::borrow::Borrow\n+/// [`Eq`]: crate::cmp::Eq\n+/// [`Ord`]: crate::cmp::Ord\n /// [`String`]: ../../std/string/struct.String.html\n ///\n /// ```\n@@ -177,8 +168,8 @@ pub trait AsRef<T: ?Sized> {\n /// **Note: This trait must not fail**. If the conversion can fail, use a\n /// dedicated method which returns an [`Option<T>`] or a [`Result<T, E>`].\n ///\n-/// [`Option<T>`]: ../../std/option/enum.Option.html\n-/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n+/// [`Option<T>`]: Option\n+/// [`Result<T, E>`]: Result\n ///\n /// # Generic Implementations\n ///\n@@ -278,12 +269,9 @@ pub trait AsMut<T: ?Sized> {\n /// is_hello(s);\n /// ```\n ///\n-/// [`TryInto`]: trait.TryInto.html\n-/// [`Option<T>`]: ../../std/option/enum.Option.html\n-/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n+/// [`Option<T>`]: Option\n+/// [`Result<T, E>`]: Result\n /// [`String`]: ../../std/string/struct.String.html\n-/// [`From`]: trait.From.html\n-/// [`Into`]: trait.Into.html\n /// [`Vec`]: ../../std/vec/struct.Vec.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Into<T>: Sized {\n@@ -370,12 +358,10 @@ pub trait Into<T>: Sized {\n /// }\n /// ```\n ///\n-/// [`TryFrom`]: trait.TryFrom.html\n-/// [`Option<T>`]: ../../std/option/enum.Option.html\n-/// [`Result<T, E>`]: ../../std/result/enum.Result.html\n+/// [`Option<T>`]: Option\n+/// [`Result<T, E>`]: Result\n /// [`String`]: ../../std/string/struct.String.html\n-/// [`Into`]: trait.Into.html\n-/// [`from`]: trait.From.html#tymethod.from\n+/// [`from`]: From::from\n /// [book]: ../../book/ch09-00-error-handling.html\n #[rustc_diagnostic_item = \"from_trait\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -404,9 +390,6 @@ pub trait From<T>: Sized {\n ///\n /// This suffers the same restrictions and reasoning as implementing\n /// [`Into`], see there for details.\n-///\n-/// [`TryFrom`]: trait.TryFrom.html\n-/// [`Into`]: trait.Into.html\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryInto<T>: Sized {\n     /// The type returned in the event of a conversion error.\n@@ -485,11 +468,9 @@ pub trait TryInto<T>: Sized {\n /// assert!(try_successful_smaller_number.is_ok());\n /// ```\n ///\n-/// [`try_from`]: trait.TryFrom.html#tymethod.try_from\n-/// [`TryInto`]: trait.TryInto.html\n-/// [`i32::MAX`]: ../../std/i32/constant.MAX.html\n+/// [`i32::MAX`]: crate::i32::MAX\n+/// [`try_from`]: TryFrom::try_from\n /// [`!`]: ../../std/primitive.never.html\n-/// [`Infallible`]: enum.Infallible.html\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n pub trait TryFrom<T>: Sized {\n     /// The type returned in the event of a conversion error.\n@@ -676,7 +657,6 @@ impl AsRef<str> for str {\n ///\n /// \u2026 and eventually deprecate `Infallible`.\n ///\n-///\n /// However there is one case where `!` syntax can be used\n /// before `!` is stabilized as a full-fledged type: in the position of a function\u2019s return type.\n /// Specifically, it is possible implementations for two different function pointer types:\n@@ -692,10 +672,6 @@ impl AsRef<str> for str {\n /// the two `impl`s will start to overlap\n /// and therefore will be disallowed by the language\u2019s trait coherence rules.\n ///\n-/// [`Ok`]: ../result/enum.Result.html#variant.Ok\n-/// [`Result`]: ../result/enum.Result.html\n-/// [`TryFrom`]: trait.TryFrom.html\n-/// [`Into`]: trait.Into.html\n /// [never]: ../../std/primitive.never.html\n #[stable(feature = \"convert_infallible\", since = \"1.34.0\")]\n #[derive(Copy)]"}, {"sha": "28b22f80e2c1be770c49e693dba26f1d0024b03f", "filename": "library/core/src/iter/mod.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fmod.rs?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -54,8 +54,7 @@\n //! below for more details.\n //!\n //! [`Some(Item)`]: Some\n-//! [`Iterator`]: trait.Iterator.html\n-//! [`next`]: trait.Iterator.html#tymethod.next\n+//! [`next`]: Iterator::next\n //! [`TryIter`]: ../../std/sync/mpsc/struct.TryIter.html\n //!\n //! # The three forms of iteration\n@@ -159,8 +158,7 @@\n //! Let's take a look at that `for` loop again, and what the compiler converts\n //! it into:\n //!\n-//! [`IntoIterator`]: trait.IntoIterator.html\n-//! [`into_iter`]: trait.IntoIterator.html#tymethod.into_iter\n+//! [`into_iter`]: IntoIterator::into_iter\n //!\n //! ```\n //! let values = vec![1, 2, 3, 4, 5];\n@@ -222,9 +220,9 @@\n //! across versions of Rust, so you should avoid relying on the exact values\n //! returned by an iterator which panicked.\n //!\n-//! [`map`]: trait.Iterator.html#method.map\n-//! [`take`]: trait.Iterator.html#method.take\n-//! [`filter`]: trait.Iterator.html#method.filter\n+//! [`map`]: Iterator::map\n+//! [`take`]: Iterator::take\n+//! [`filter`]: Iterator::filter\n //!\n //! # Laziness\n //!\n@@ -261,13 +259,13 @@\n //! }\n //! ```\n //!\n-//! [`map`]: trait.Iterator.html#method.map\n-//! [`for_each`]: trait.Iterator.html#method.for_each\n+//! [`map`]: Iterator::map\n+//! [`for_each`]: Iterator::for_each\n //!\n //! Another common way to evaluate an iterator is to use the [`collect`]\n //! method to produce a new collection.\n //!\n-//! [`collect`]: trait.Iterator.html#method.collect\n+//! [`collect`]: Iterator::collect\n //!\n //! # Infinity\n //!\n@@ -305,8 +303,8 @@\n //! println!(\"The smallest number one is {}.\", least);\n //! ```\n //!\n-//! [`take`]: trait.Iterator.html#method.take\n-//! [`min`]: trait.Iterator.html#method.min\n+//! [`take`]: Iterator::take\n+//! [`min`]: Iterator::min\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}, {"sha": "ef0dec1c45be2a97119e2aede72bfd5efec52c23", "filename": "src/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME.md?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -1,5 +1,5 @@\n This directory contains the source code of the rust project, including:\n-- `rustc` and its tests\n+- The test suite\n - The bootstrapping build system\n - Various submodules for tools, like rustdoc, rls, etc.\n "}, {"sha": "1b3eb2011afdce333dd87b376f616d88e6b82abb", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/3b4797cb598260b96dd8d6e47cd429210e14c1f6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=3b4797cb598260b96dd8d6e47cd429210e14c1f6", "patch": "@@ -2740,10 +2740,17 @@ function defocusSearchBar() {\n         });\n     }\n \n+    function enableSearchInput() {\n+        if (search_input) {\n+            search_input.removeAttribute('disabled');\n+        }\n+    }\n+\n     window.addSearchOptions = function(crates) {\n         var elem = document.getElementById(\"crate-search\");\n \n         if (!elem) {\n+            enableSearchInput();\n             return;\n         }\n         var crates_text = [];\n@@ -2781,10 +2788,7 @@ function defocusSearchBar() {\n                 elem.value = savedCrate;\n             }\n         }\n-\n-        if (search_input) {\n-            search_input.removeAttribute('disabled');\n-        }\n+        enableSearchInput();\n     };\n \n     function buildHelperPopup() {"}]}