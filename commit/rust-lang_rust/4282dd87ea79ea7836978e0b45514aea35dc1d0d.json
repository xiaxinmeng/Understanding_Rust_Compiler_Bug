{"sha": "4282dd87ea79ea7836978e0b45514aea35dc1d0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyODJkZDg3ZWE3OWVhNzgzNjk3OGUwYjQ1NTE0YWVhMzVkYzFkMGQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-24T14:18:11Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2017-07-31T13:15:09Z"}, "message": "async-llvm(7): Clean up error handling a bit.", "tree": {"sha": "fc7ac04ff68edf824c59aec8088c95b79d2b3199", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc7ac04ff68edf824c59aec8088c95b79d2b3199"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4282dd87ea79ea7836978e0b45514aea35dc1d0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4282dd87ea79ea7836978e0b45514aea35dc1d0d", "html_url": "https://github.com/rust-lang/rust/commit/4282dd87ea79ea7836978e0b45514aea35dc1d0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4282dd87ea79ea7836978e0b45514aea35dc1d0d/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f6894e177cecf3cd35833e2063256a69841415a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f6894e177cecf3cd35833e2063256a69841415a", "html_url": "https://github.com/rust-lang/rust/commit/8f6894e177cecf3cd35833e2063256a69841415a"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "5d9444218c4d30a89c37a3b3a586ef2ac90adb46", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4282dd87ea79ea7836978e0b45514aea35dc1d0d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4282dd87ea79ea7836978e0b45514aea35dc1d0d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=4282dd87ea79ea7836978e0b45514aea35dc1d0d", "patch": "@@ -1248,7 +1248,13 @@ fn start_executing_work(sess: &Session,\n                 // this to spawn a new unit of work, or it may get dropped\n                 // immediately if we have no more work to spawn.\n                 Message::Token(token) => {\n-                    tokens.push(token.expect(\"failed to acquire jobserver token\"));\n+                    if let Ok(token) = token {\n+                        tokens.push(token);\n+                    } else {\n+                        shared_emitter.fatal(\"failed to acquire jobserver token\");\n+                        drop(trans_worker_send.send(Message::CheckErrorMessages));\n+                        return\n+                    }\n                 }\n \n                 Message::WorkItem(work_item) => {\n@@ -1266,11 +1272,12 @@ fn start_executing_work(sess: &Session,\n                 Message::Done { success: true } => {\n                     drop(tokens.pop());\n                     running -= 1;\n-                    trans_worker_send.send(Message::CheckErrorMessages).unwrap();\n+                    drop(trans_worker_send.send(Message::CheckErrorMessages));\n                 }\n                 Message::Done { success: false } => {\n-                    shared_emitter.fatal(\"aborting due to worker thread panic\".to_string());\n-                    trans_worker_send.send(Message::CheckErrorMessages).unwrap();\n+                    shared_emitter.fatal(\"aborting due to worker thread panic\");\n+                    drop(trans_worker_send.send(Message::CheckErrorMessages));\n+                    return\n                 }\n                 msg @ Message::CheckErrorMessages => {\n                     bug!(\"unexpected message: {:?}\", msg);\n@@ -1440,8 +1447,8 @@ impl SharedEmitter {\n         drop(self.sender.send(SharedEmitterMessage::InlineAsmError(cookie, msg)));\n     }\n \n-    fn fatal(&self, msg: String) {\n-        drop(self.sender.send(SharedEmitterMessage::Fatal(msg)));\n+    fn fatal(&self, msg: &str) {\n+        drop(self.sender.send(SharedEmitterMessage::Fatal(msg.to_string())));\n     }\n }\n "}]}