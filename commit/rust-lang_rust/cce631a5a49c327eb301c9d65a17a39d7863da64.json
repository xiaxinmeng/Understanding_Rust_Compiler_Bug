{"sha": "cce631a5a49c327eb301c9d65a17a39d7863da64", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZTYzMWE1YTQ5YzMyN2ViMzAxYzlkNjVhMTdhMzlkNzg2M2RhNjQ=", "commit": {"author": {"name": "Baoshan", "email": "pangbw@gmail.com", "date": "2019-08-27T22:06:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-27T22:06:16Z"}, "message": "Merge pull request #9 from Wind-River/V7LIBC-948\n\nremove the reference to __cxa_thread_atexit_impl", "tree": {"sha": "a9bbff7ab5957b6c53042ed52f6cd358b3993044", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9bbff7ab5957b6c53042ed52f6cd358b3993044"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cce631a5a49c327eb301c9d65a17a39d7863da64", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdZalYCRBK7hj4Ov3rIwAAdHIIAJiofcZpEKeCIQ7JW7O0lmN9\nYCTB6OaxB5GU9pm/46fUfjlWPwQRsosV57dnLaz3lEBFdneZnLKd7a5FGJfuNYwA\n3YYosscl/yyMVkbCqBY5xyX5W/VOnv3izpLwrJGR+BjwQhGgAJJCI2L6HnvyV2FR\n2BQNnwiuxVVICPXCDWnDhahiGyXBd6DPG6ZIVjkd6VVvRLPzSIeSU3VZu+7YFMSo\nUI6SsGd3MMRD+h1l0hPUGlQ8GXlZjKGFGmoWkWnroBYqIjgvaLKDPDFveSFrLerR\nCKApC1+iOPk3tzjvsVtyyu5YOvr/4ctzHHo+gr2E9HBTFS3/9xWBcNQ68O4Ireg=\n=EauP\n-----END PGP SIGNATURE-----\n", "payload": "tree a9bbff7ab5957b6c53042ed52f6cd358b3993044\nparent 602bea3c12b21e070a71001815a9bbf51cbd0556\nparent 3b2c14736d6d8fc44cf60588ed41a67eaf9459ad\nauthor Baoshan <pangbw@gmail.com> 1566943576 -0700\ncommitter GitHub <noreply@github.com> 1566943576 -0700\n\nMerge pull request #9 from Wind-River/V7LIBC-948\n\nremove the reference to __cxa_thread_atexit_impl"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cce631a5a49c327eb301c9d65a17a39d7863da64", "html_url": "https://github.com/rust-lang/rust/commit/cce631a5a49c327eb301c9d65a17a39d7863da64", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cce631a5a49c327eb301c9d65a17a39d7863da64/comments", "author": {"login": "BaoshanPang", "id": 3380860, "node_id": "MDQ6VXNlcjMzODA4NjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3380860?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BaoshanPang", "html_url": "https://github.com/BaoshanPang", "followers_url": "https://api.github.com/users/BaoshanPang/followers", "following_url": "https://api.github.com/users/BaoshanPang/following{/other_user}", "gists_url": "https://api.github.com/users/BaoshanPang/gists{/gist_id}", "starred_url": "https://api.github.com/users/BaoshanPang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BaoshanPang/subscriptions", "organizations_url": "https://api.github.com/users/BaoshanPang/orgs", "repos_url": "https://api.github.com/users/BaoshanPang/repos", "events_url": "https://api.github.com/users/BaoshanPang/events{/privacy}", "received_events_url": "https://api.github.com/users/BaoshanPang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "602bea3c12b21e070a71001815a9bbf51cbd0556", "url": "https://api.github.com/repos/rust-lang/rust/commits/602bea3c12b21e070a71001815a9bbf51cbd0556", "html_url": "https://github.com/rust-lang/rust/commit/602bea3c12b21e070a71001815a9bbf51cbd0556"}, {"sha": "3b2c14736d6d8fc44cf60588ed41a67eaf9459ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b2c14736d6d8fc44cf60588ed41a67eaf9459ad", "html_url": "https://github.com/rust-lang/rust/commit/3b2c14736d6d8fc44cf60588ed41a67eaf9459ad"}], "stats": {"total": 27, "additions": 2, "deletions": 25}, "files": [{"sha": "2e021980778e54c37420ee0f9caa4f44291b3701", "filename": "src/libstd/sys/vxworks/fast_thread_local.rs", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cce631a5a49c327eb301c9d65a17a39d7863da64/src%2Flibstd%2Fsys%2Fvxworks%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cce631a5a49c327eb301c9d65a17a39d7863da64/src%2Flibstd%2Fsys%2Fvxworks%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Ffast_thread_local.rs?ref=cce631a5a49c327eb301c9d65a17a39d7863da64", "patch": "@@ -1,33 +1,10 @@\n+// Copyright (c) 2019 Wind River Systems, Inc.\n+\n #![cfg(target_thread_local)]\n #![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n \n-// Since what appears to be glibc 2.18 this symbol has been shipped which\n-// GCC and clang both use to invoke destructors in thread_local globals, so\n-// let's do the same!\n-//\n-// Note, however, that we run on lots older linuxes, as well as cross\n-// compiling from a newer linux to an older linux, so we also have a\n-// fallback implementation to use as well.\n-//\n-// Due to rust-lang/rust#18804, make sure this is not generic!\n pub unsafe fn register_dtor(t: *mut u8, dtor: unsafe extern fn(*mut u8)) {\n-    use crate::mem;\n     use crate::sys_common::thread_local::register_dtor_fallback;\n-\n-    extern {\n-        #[linkage = \"extern_weak\"]\n-        static __dso_handle: *mut u8;\n-        #[linkage = \"extern_weak\"]\n-        static __cxa_thread_atexit_impl: *const libc::c_void;\n-    }\n-    if !__cxa_thread_atexit_impl.is_null() {\n-        type F = unsafe extern fn(dtor: unsafe extern fn(*mut u8),\n-                                  arg: *mut u8,\n-                                  dso_handle: *mut u8) -> libc::c_int;\n-        mem::transmute::<*const libc::c_void, F>(__cxa_thread_atexit_impl)\n-            (dtor, t, &__dso_handle as *const _ as *mut _);\n-        return\n-    }\n     register_dtor_fallback(t, dtor);\n }\n "}]}