{"sha": "2975c01747fd112812a13637103d7e8e2df46419", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NzVjMDE3NDdmZDExMjgxMmExMzYzNzEwM2Q3ZThlMmRmNDY0MTk=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-12T18:59:25Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-07-14T19:19:16Z"}, "message": "Remove unused BorrowckErrors methods", "tree": {"sha": "71ee878180a358498108e01fa5fe84553022d1d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71ee878180a358498108e01fa5fe84553022d1d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2975c01747fd112812a13637103d7e8e2df46419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2975c01747fd112812a13637103d7e8e2df46419", "html_url": "https://github.com/rust-lang/rust/commit/2975c01747fd112812a13637103d7e8e2df46419", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2975c01747fd112812a13637103d7e8e2df46419/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85a360e0ea2f1629b8851e7c9b2903bbdbab42bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/85a360e0ea2f1629b8851e7c9b2903bbdbab42bf", "html_url": "https://github.com/rust-lang/rust/commit/85a360e0ea2f1629b8851e7c9b2903bbdbab42bf"}], "stats": {"total": 111, "additions": 3, "deletions": 108}, "files": [{"sha": "83d441b90be720aacb650654f8c62facba121e69", "filename": "src/librustc_mir/error_codes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2975c01747fd112812a13637103d7e8e2df46419/src%2Flibrustc_mir%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2975c01747fd112812a13637103d7e8e2df46419/src%2Flibrustc_mir%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ferror_codes.rs?ref=2975c01747fd112812a13637103d7e8e2df46419", "patch": "@@ -2462,12 +2462,12 @@ register_diagnostics! {\n //  E0298, // cannot compare constants\n //  E0299, // mismatched types between arms\n //  E0471, // constant evaluation error (in pattern)\n-//    E0385, // {} in an aliasable location\n+//  E0385, // {} in an aliasable location\n     E0493, // destructors cannot be evaluated at compile-time\n-    E0521,  // borrowed data escapes outside of closure\n+    E0521, // borrowed data escapes outside of closure\n     E0524, // two closures require unique access to `..` at the same time\n     E0526, // shuffle indices are not constant\n     E0594, // cannot assign to {}\n-    E0598, // lifetime of {} is too short to guarantee its contents can be...\n+//  E0598, // lifetime of {} is too short to guarantee its contents can be...\n     E0625, // thread-local statics cannot be accessed at compile-time\n }"}, {"sha": "7c7e4de316f15bfdc9f6dd41cac87212a7bbb805", "filename": "src/librustc_mir/util/borrowck_errors.rs", "status": "modified", "additions": 0, "deletions": 105, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/2975c01747fd112812a13637103d7e8e2df46419/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2975c01747fd112812a13637103d7e8e2df46419/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fborrowck_errors.rs?ref=2975c01747fd112812a13637103d7e8e2df46419", "patch": "@@ -300,16 +300,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         err\n     }\n \n-    fn cannot_move_into_closure(self, span: Span, desc: &str, _: Origin) -> DiagnosticBuilder<'cx> {\n-        struct_span_err!(\n-            self,\n-            span,\n-            E0504,\n-            \"cannot move `{}` into closure because it is borrowed\",\n-            desc,\n-        )\n-    }\n-\n     fn cannot_reassign_immutable(\n         self,\n         span: Span,\n@@ -336,10 +326,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         struct_span_err!(self, span, E0594, \"cannot assign to {}\", desc)\n     }\n \n-    fn cannot_assign_static(self, span: Span, desc: &str, o: Origin) -> DiagnosticBuilder<'cx> {\n-        self.cannot_assign(span, &format!(\"immutable static item `{}`\", desc), o)\n-    }\n-\n     fn cannot_move_out_of(\n         self,\n         move_from_span: Span,\n@@ -422,36 +408,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         )\n     }\n \n-    fn cannot_partially_reinit_an_uninit_struct(\n-        self,\n-        span: Span,\n-        uninit_path: &str,\n-        _: Origin,\n-    ) -> DiagnosticBuilder<'cx> {\n-        struct_span_err!(\n-            self,\n-            span,\n-            E0383,\n-            \"partial reinitialization of uninitialized structure `{}`\",\n-            uninit_path,\n-        )\n-    }\n-\n-    fn closure_cannot_assign_to_borrowed(\n-        self,\n-        span: Span,\n-        descr: &str,\n-        _: Origin,\n-    ) -> DiagnosticBuilder<'cx> {\n-        struct_span_err!(\n-            self,\n-            span,\n-            E0595,\n-            \"closure cannot assign to {}\",\n-            descr,\n-        )\n-    }\n-\n     fn cannot_borrow_path_as_mutable_because(\n         self,\n         span: Span,\n@@ -469,15 +425,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         )\n     }\n \n-    fn cannot_borrow_path_as_mutable(\n-        self,\n-        span: Span,\n-        path: &str,\n-        o: Origin,\n-    ) -> DiagnosticBuilder<'cx> {\n-        self.cannot_borrow_path_as_mutable_because(span, path, \"\", o)\n-    }\n-\n     fn cannot_mutate_in_match_guard(\n         self,\n         mutate_span: Span,\n@@ -569,58 +516,6 @@ pub trait BorrowckErrors<'cx>: Sized + Copy {\n         err\n     }\n \n-    fn lifetime_too_short_for_reborrow(\n-        self,\n-        span: Span,\n-        path: &str,\n-        _: Origin,\n-    ) -> DiagnosticBuilder<'cx> {\n-        struct_span_err!(\n-            self,\n-            span,\n-            E0598,\n-            \"lifetime of {} is too short to guarantee \\\n-             its contents can be safely reborrowed\",\n-            path,\n-        )\n-    }\n-\n-    fn cannot_act_on_capture_in_sharable_fn(\n-        self,\n-        span: Span,\n-        bad_thing: &str,\n-        help: (Span, &str),\n-        _: Origin,\n-    ) -> DiagnosticBuilder<'cx> {\n-        let (help_span, help_msg) = help;\n-        let mut err = struct_span_err!(\n-            self,\n-            span,\n-            E0387,\n-            \"{} in a captured outer variable in an `Fn` closure\",\n-            bad_thing,\n-        );\n-        err.span_help(help_span, help_msg);\n-        err\n-    }\n-\n-    fn cannot_assign_into_immutable_reference(\n-        self,\n-        span: Span,\n-        bad_thing: &str,\n-        _: Origin,\n-    ) -> DiagnosticBuilder<'cx> {\n-        let mut err = struct_span_err!(\n-            self,\n-            span,\n-            E0389,\n-            \"{} in a `&` reference\",\n-            bad_thing,\n-        );\n-        err.span_label(span, \"assignment into an immutable reference\");\n-        err\n-    }\n-\n     fn cannot_capture_in_long_lived_closure(\n         self,\n         closure_span: Span,"}]}