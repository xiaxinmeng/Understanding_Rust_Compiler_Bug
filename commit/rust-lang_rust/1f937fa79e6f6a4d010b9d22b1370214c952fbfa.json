{"sha": "1f937fa79e6f6a4d010b9d22b1370214c952fbfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOTM3ZmE3OWU2ZjZhNGQwMTBiOWQyMmIxMzcwMjE0Yzk1MmZiZmE=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-03-17T00:00:56Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-03-25T19:32:27Z"}, "message": "rustdoc: render derived impls separately", "tree": {"sha": "6d4d710e6da25565e4608db7c7a087d566243625", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d4d710e6da25565e4608db7c7a087d566243625"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f937fa79e6f6a4d010b9d22b1370214c952fbfa", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f937fa79e6f6a4d010b9d22b1370214c952fbfa", "html_url": "https://github.com/rust-lang/rust/commit/1f937fa79e6f6a4d010b9d22b1370214c952fbfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f937fa79e6f6a4d010b9d22b1370214c952fbfa/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e88387a94709b3bf86c4abf39477be9ffa26c7e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e88387a94709b3bf86c4abf39477be9ffa26c7e8", "html_url": "https://github.com/rust-lang/rust/commit/e88387a94709b3bf86c4abf39477be9ffa26c7e8"}], "stats": {"total": 33, "additions": 30, "deletions": 3}, "files": [{"sha": "0bc3da15462ad483747d47380da7f74f1ccf35e6", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1f937fa79e6f6a4d010b9d22b1370214c952fbfa/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f937fa79e6f6a4d010b9d22b1370214c952fbfa/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=1f937fa79e6f6a4d010b9d22b1370214c952fbfa", "patch": "@@ -1020,11 +1020,23 @@ pub struct Impl {\n     generics: Generics,\n     trait_: Option<Type>,\n     for_: Type,\n-    methods: Vec<Item> ,\n+    methods: Vec<Item>,\n+    derived: bool,\n }\n \n impl Clean<Item> for doctree::Impl {\n     fn clean(&self) -> Item {\n+        let mut derived = false;\n+        for attr in self.attrs.iter() {\n+            match attr.node.value.node {\n+                ast::MetaWord(ref s) => {\n+                    if s.get() == \"automatically_derived\" {\n+                        derived = true;\n+                    }\n+                }\n+                _ => {}\n+            }\n+        }\n         Item {\n             name: None,\n             attrs: self.attrs.clean(),\n@@ -1036,6 +1048,7 @@ impl Clean<Item> for doctree::Impl {\n                 trait_: self.trait_.clean(),\n                 for_: self.for_.clean(),\n                 methods: self.methods.clean(),\n+                derived: derived,\n             }),\n         }\n     }"}, {"sha": "0f4e1284e74037c5d21cea832e61b861080ea3d4", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1f937fa79e6f6a4d010b9d22b1370214c952fbfa/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f937fa79e6f6a4d010b9d22b1370214c952fbfa/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=1f937fa79e6f6a4d010b9d22b1370214c952fbfa", "patch": "@@ -1517,8 +1517,22 @@ fn render_methods(w: &mut Writer, it: &clean::Item) -> fmt::Result {\n                 if traits.len() > 0 {\n                     try!(write!(w, \"<h2 id='implementations'>Trait \\\n                                       Implementations</h2>\"));\n-                    for &(ref i, ref dox) in traits.move_iter() {\n-                        try!(render_impl(w, i, dox));\n+                    let mut any_derived = false;\n+                    for & &(ref i, ref dox) in traits.iter() {\n+                        if !i.derived {\n+                            try!(render_impl(w, i, dox));\n+                        } else {\n+                            any_derived = true;\n+                        }\n+                    }\n+                    if any_derived {\n+                        try!(write!(w, \"<h3 id='derived_implementations'>Derived Implementations \\\n+                                    </h3>\"));\n+                        for &(ref i, ref dox) in traits.move_iter() {\n+                            if i.derived {\n+                                try!(render_impl(w, i, dox));\n+                            }\n+                        }\n                     }\n                 }\n             }"}]}