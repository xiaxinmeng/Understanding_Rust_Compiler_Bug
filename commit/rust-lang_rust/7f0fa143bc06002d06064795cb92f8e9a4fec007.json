{"sha": "7f0fa143bc06002d06064795cb92f8e9a4fec007", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMGZhMTQzYmMwNjAwMmQwNjA2NDc5NWNiOTJmOGU5YTRmZWMwMDc=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-23T22:06:32Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-01-23T23:01:24Z"}, "message": "switch LinearMap to current constructor convention", "tree": {"sha": "3ead3d38d26d151bef041bdb9f7b5f6d49ee17cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ead3d38d26d151bef041bdb9f7b5f6d49ee17cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f0fa143bc06002d06064795cb92f8e9a4fec007", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f0fa143bc06002d06064795cb92f8e9a4fec007", "html_url": "https://github.com/rust-lang/rust/commit/7f0fa143bc06002d06064795cb92f8e9a4fec007", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f0fa143bc06002d06064795cb92f8e9a4fec007/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "591eefd740f7abc42777fa60035682fb1887fb21", "url": "https://api.github.com/repos/rust-lang/rust/commits/591eefd740f7abc42777fa60035682fb1887fb21", "html_url": "https://github.com/rust-lang/rust/commit/591eefd740f7abc42777fa60035682fb1887fb21"}], "stats": {"total": 70, "additions": 37, "deletions": 33}, "files": [{"sha": "dc48266e15289e89f9bfd3573bca51e8753cbac7", "filename": "src/libcargo/cargo.rc", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f0fa143bc06002d06064795cb92f8e9a4fec007/src%2Flibcargo%2Fcargo.rc", "raw_url": "https://github.com/rust-lang/rust/raw/7f0fa143bc06002d06064795cb92f8e9a4fec007/src%2Flibcargo%2Fcargo.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcargo%2Fcargo.rc?ref=7f0fa143bc06002d06064795cb92f8e9a4fec007", "patch": "@@ -1617,7 +1617,7 @@ fn dump_cache(c: &Cargo) {\n     need_dir(&c.root);\n \n     let out = c.root.push(\"cache.json\");\n-    let _root = json::Object(~LinearMap());\n+    let _root = json::Object(~LinearMap::new());\n \n     if os::path_exists(&out) {\n         copy_warn(&out, &c.root.push(\"cache.json.old\"));\n@@ -1638,10 +1638,10 @@ fn dump_sources(c: &Cargo) {\n \n     match io::buffered_file_writer(&out) {\n         result::Ok(writer) => {\n-            let mut hash = ~LinearMap();\n+            let mut hash = ~LinearMap::new();\n \n             for c.sources.each |k, v| {\n-                let mut chash = ~LinearMap();\n+                let mut chash = ~LinearMap::new();\n \n                 chash.insert(~\"url\", json::String(v.url));\n                 chash.insert(~\"method\", json::String(v.method));"}, {"sha": "40b80bddf84ad185b47a440f5a940bd399d680e6", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7f0fa143bc06002d06064795cb92f8e9a4fec007/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0fa143bc06002d06064795cb92f8e9a4fec007/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=7f0fa143bc06002d06064795cb92f8e9a4fec007", "patch": "@@ -352,6 +352,10 @@ pub mod linear {\n     }\n \n     impl<K:Hash IterBytes Eq,V> LinearMap<K,V> {\n+        static fn new() -> LinearMap<K, V> {\n+            linear_map_with_capacity(INITIAL_CAPACITY)\n+        }\n+\n         fn pop(&mut self, k: &K) -> Option<V> {\n             let hash = k.hash_keyed(self.k0, self.k1) as uint;\n             self.pop_internal(hash, k)\n@@ -405,7 +409,7 @@ pub mod linear {\n         }\n     }\n \n-    impl<K:Hash IterBytes Eq, V: Copy> LinearMap<K,V> {\n+    impl<K:Hash IterBytes Eq, V: Copy> LinearMap<K, V> {\n         pure fn find_copy(&const self, k: &K) -> Option<V> {\n             match self.bucket_for_key(self.buckets, k) {\n                 FoundEntry(idx) => {\n@@ -504,7 +508,7 @@ pub mod test {\n \n     #[test]\n     pub fn inserts() {\n-        let mut m = ~LinearMap();\n+        let mut m = LinearMap::new();\n         assert m.insert(1, 2);\n         assert m.insert(2, 4);\n         assert *m.get(&1) == 2;\n@@ -513,7 +517,7 @@ pub mod test {\n \n     #[test]\n     pub fn overwrite() {\n-        let mut m = ~LinearMap();\n+        let mut m = LinearMap::new();\n         assert m.insert(1, 2);\n         assert *m.get(&1) == 2;\n         assert !m.insert(1, 3);\n@@ -553,26 +557,26 @@ pub mod test {\n \n     #[test]\n     pub fn pops() {\n-        let mut m = ~LinearMap();\n+        let mut m = LinearMap::new();\n         m.insert(1, 2);\n         assert m.pop(&1) == Some(2);\n         assert m.pop(&1) == None;\n     }\n \n     #[test]\n     pub fn swaps() {\n-        let mut m = ~LinearMap();\n+        let mut m = LinearMap::new();\n         assert m.swap(1, 2) == None;\n         assert m.swap(1, 3) == Some(2);\n         assert m.swap(1, 4) == Some(3);\n     }\n \n     #[test]\n     pub fn consumes() {\n-        let mut m = ~LinearMap();\n+        let mut m = LinearMap::new();\n         assert m.insert(1, 2);\n         assert m.insert(2, 3);\n-        let mut m2 = ~LinearMap();\n+        let mut m2 = LinearMap::new();\n         do m.consume |k, v| {\n             m2.insert(k, v);\n         }\n@@ -598,7 +602,7 @@ pub mod test {\n \n     #[test]\n     pub fn find() {\n-        let mut m = ~LinearMap();\n+        let mut m = LinearMap::new();\n         assert m.find(&1).is_none();\n         m.insert(1, 2);\n         match m.find(&1) {\n@@ -609,12 +613,12 @@ pub mod test {\n \n     #[test]\n     pub fn test_eq() {\n-        let mut m1 = ~LinearMap();\n+        let mut m1 = LinearMap::new();\n         m1.insert(1, 2);\n         m1.insert(2, 3);\n         m1.insert(3, 4);\n \n-        let mut m2 = ~LinearMap();\n+        let mut m2 = LinearMap::new();\n         m2.insert(1, 2);\n         m2.insert(2, 3);\n \n@@ -627,7 +631,7 @@ pub mod test {\n \n     #[test]\n     pub fn test_expand() {\n-        let mut m = ~LinearMap();\n+        let mut m = LinearMap::new();\n \n         assert m.len() == 0;\n         assert m.is_empty();"}, {"sha": "a79d245f70c78efb38a80c0a8cabe92125d0c475", "filename": "src/libstd/json.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7f0fa143bc06002d06064795cb92f8e9a4fec007/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0fa143bc06002d06064795cb92f8e9a4fec007/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=7f0fa143bc06002d06064795cb92f8e9a4fec007", "patch": "@@ -24,7 +24,7 @@ use core::float;\n use core::io::{WriterUtil, ReaderUtil};\n use core::io;\n use core::prelude::*;\n-use core::hashmap::linear;\n+use core::hashmap::linear::LinearMap;\n use core::str;\n use core::to_str;\n use core::vec;\n@@ -40,7 +40,7 @@ pub enum Json {\n }\n \n pub type List = ~[Json];\n-pub type Object = linear::LinearMap<~str, Json>;\n+pub type Object = LinearMap<~str, Json>;\n \n pub struct Error {\n     line: uint,\n@@ -671,7 +671,7 @@ priv impl Parser {\n         self.bump();\n         self.parse_whitespace();\n \n-        let mut values = ~linear::LinearMap();\n+        let mut values = ~LinearMap::new();\n \n         if self.ch == '}' {\n           self.bump();\n@@ -1175,9 +1175,9 @@ impl <A: ToJson> ~[A]: ToJson {\n     fn to_json() -> Json { List(self.map(|elt| elt.to_json())) }\n }\n \n-impl <A: ToJson Copy> linear::LinearMap<~str, A>: ToJson {\n+impl <A: ToJson Copy> LinearMap<~str, A>: ToJson {\n     fn to_json() -> Json {\n-        let mut d = linear::LinearMap();\n+        let mut d = LinearMap::new();\n         for self.each() |key, value| {\n             d.insert(copy *key, value.to_json());\n         }\n@@ -1188,7 +1188,7 @@ impl <A: ToJson Copy> linear::LinearMap<~str, A>: ToJson {\n /*\n impl <A: ToJson Copy> @std::map::HashMap<~str, A>: ToJson {\n     fn to_json() -> Json {\n-        let mut d = linear::LinearMap();\n+        let mut d = LinearMap::new();\n         for self.each_ref |key, value| {\n             d.insert(copy *key, value.to_json());\n         }\n@@ -1223,10 +1223,10 @@ mod tests {\n     use json::*;\n \n     use core::result;\n-    use core::hashmap::linear;\n+    use core::hashmap::linear::LinearMap;\n \n     fn mk_object(items: &[(~str, Json)]) -> Json {\n-        let mut d = ~linear::LinearMap();\n+        let mut d = LinearMap::new();\n \n         for items.each |item| {\n             match *item {"}, {"sha": "b7e62f44882c36f436a0aa8e41ebf77b655eccf3", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7f0fa143bc06002d06064795cb92f8e9a4fec007/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0fa143bc06002d06064795cb92f8e9a4fec007/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=7f0fa143bc06002d06064795cb92f8e9a4fec007", "patch": "@@ -242,7 +242,7 @@ pub fn encode_form_urlencoded(m: &LinearMap<~str, ~[~str]>) -> ~str {\n  */\n pub fn decode_form_urlencoded(s: &[u8]) -> LinearMap<~str, ~[~str]> {\n     do io::with_bytes_reader(s) |rdr| {\n-        let mut m = LinearMap();\n+        let mut m = LinearMap::new();\n         let mut key = ~\"\";\n         let mut value = ~\"\";\n         let mut parsing_key = true;\n@@ -1053,18 +1053,18 @@ mod tests {\n \n     #[test]\n     fn test_encode_form_urlencoded() {\n-        let mut m = LinearMap();\n+        let mut m = LinearMap::new();\n         assert encode_form_urlencoded(&m) == ~\"\";\n \n         m.insert(~\"\", ~[]);\n         m.insert(~\"foo\", ~[]);\n         assert encode_form_urlencoded(&m) == ~\"\";\n \n-        let mut m = LinearMap();\n+        let mut m = LinearMap::new();\n         m.insert(~\"foo\", ~[~\"bar\", ~\"123\"]);\n         assert encode_form_urlencoded(&m) == ~\"foo=bar&foo=123\";\n \n-        let mut m = LinearMap();\n+        let mut m = LinearMap::new();\n         m.insert(~\"foo bar\", ~[~\"abc\", ~\"12 = 34\"]);\n         assert encode_form_urlencoded(&m) == ~\"foo+bar=abc&foo+bar=12+%3D+34\";\n     }"}, {"sha": "9572c07e715c498423816d00806490f1e20e0762", "filename": "src/libstd/workcache.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7f0fa143bc06002d06064795cb92f8e9a4fec007/src%2Flibstd%2Fworkcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0fa143bc06002d06064795cb92f8e9a4fec007/src%2Flibstd%2Fworkcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fworkcache.rs?ref=7f0fa143bc06002d06064795cb92f8e9a4fec007", "patch": "@@ -152,7 +152,7 @@ pub impl<S: Encoder> WorkMap: Encodable<S> {\n pub impl<D: Decoder> WorkMap: Decodable<D> {\n     static fn decode(&self, d: &D) -> WorkMap {\n         let v : ~[(WorkKey,~str)] = Decodable::decode(d);\n-        let mut w = LinearMap();\n+        let mut w = LinearMap::new();\n         for v.each |&(k,v)| {\n             w.insert(copy k, copy v);\n         }\n@@ -348,8 +348,8 @@ impl @Mut<Prep> : TPrep {\n                     let blk = blk.unwrap();\n                     let chan = ~mut Some(move chan);\n                     do task::spawn |move blk, move chan| {\n-                        let exe = Exec { discovered_inputs: LinearMap(),\n-                                         discovered_outputs: LinearMap() };\n+                        let exe = Exec{discovered_inputs: LinearMap::new(),\n+                                       discovered_outputs: LinearMap::new()};\n                         let chan = option::swap_unwrap(&mut *chan);\n                         let v = blk(&exe);\n                         send_one(move chan, (move exe, move v));\n@@ -411,10 +411,10 @@ fn test() {\n     use io::WriterUtil;\n \n     let db = @Mut(Database { db_filename: Path(\"db.json\"),\n-                             db_cache: LinearMap(),\n+                             db_cache: LinearMap::new(),\n                              db_dirty: false });\n     let lg = @Mut(Logger { a: () });\n-    let cfg = @LinearMap();\n+    let cfg = @LinearMap::new();\n     let cx = @Context::new(db, lg, cfg);\n     let w:Work<~str> = do cx.prep(\"test1\") |prep| {\n         let pth = Path(\"foo.c\");"}, {"sha": "366afd16ad622d004c7dc5a0656426d47a6ec07a", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f0fa143bc06002d06064795cb92f8e9a4fec007/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0fa143bc06002d06064795cb92f8e9a4fec007/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=7f0fa143bc06002d06064795cb92f8e9a4fec007", "patch": "@@ -178,10 +178,10 @@ fn main() {\n         let rng = rand::seeded_rng(&seed);\n         let mut results = empty_results();\n         int_benchmarks::<@Mut<LinearMap<uint, uint>>>(\n-            || @Mut(LinearMap()),\n+            || @Mut(LinearMap::new()),\n             rng, num_keys, &mut results);\n         str_benchmarks::<@Mut<LinearMap<~str, uint>>>(\n-            || @Mut(LinearMap()),\n+            || @Mut(LinearMap::new()),\n             rng, num_keys, &mut results);\n         write_results(\"libstd::map::hashmap\", &results);\n     }"}]}