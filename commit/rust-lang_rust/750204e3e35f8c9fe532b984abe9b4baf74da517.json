{"sha": "750204e3e35f8c9fe532b984abe9b4baf74da517", "node_id": "C_kwDOAAsO6NoAKDc1MDIwNGUzZTM1ZjhjOWZlNTMyYjk4NGFiZTliNGJhZjc0ZGE1MTc", "commit": {"author": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2022-03-08T10:15:11Z"}, "committer": {"name": "J-ZhengLi", "email": "lizheng135@huawei.com", "date": "2022-03-08T10:15:11Z"}, "message": "fix a bug that caused internal test fail", "tree": {"sha": "5bde4c7024e814cc20081d8f9ffe29fa02a65597", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bde4c7024e814cc20081d8f9ffe29fa02a65597"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/750204e3e35f8c9fe532b984abe9b4baf74da517", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/750204e3e35f8c9fe532b984abe9b4baf74da517", "html_url": "https://github.com/rust-lang/rust/commit/750204e3e35f8c9fe532b984abe9b4baf74da517", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/750204e3e35f8c9fe532b984abe9b4baf74da517/comments", "author": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "J-ZhengLi", "id": 32276130, "node_id": "MDQ6VXNlcjMyMjc2MTMw", "avatar_url": "https://avatars.githubusercontent.com/u/32276130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/J-ZhengLi", "html_url": "https://github.com/J-ZhengLi", "followers_url": "https://api.github.com/users/J-ZhengLi/followers", "following_url": "https://api.github.com/users/J-ZhengLi/following{/other_user}", "gists_url": "https://api.github.com/users/J-ZhengLi/gists{/gist_id}", "starred_url": "https://api.github.com/users/J-ZhengLi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/J-ZhengLi/subscriptions", "organizations_url": "https://api.github.com/users/J-ZhengLi/orgs", "repos_url": "https://api.github.com/users/J-ZhengLi/repos", "events_url": "https://api.github.com/users/J-ZhengLi/events{/privacy}", "received_events_url": "https://api.github.com/users/J-ZhengLi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bfc1120cf7773af46a9f0fa7a9ef47863577c05", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bfc1120cf7773af46a9f0fa7a9ef47863577c05", "html_url": "https://github.com/rust-lang/rust/commit/6bfc1120cf7773af46a9f0fa7a9ef47863577c05"}], "stats": {"total": 76, "additions": 49, "deletions": 27}, "files": [{"sha": "f13ee27df47ca4407d03315b523569750ac5c255", "filename": "clippy_lints/src/matches/nop_match.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/750204e3e35f8c9fe532b984abe9b4baf74da517/clippy_lints%2Fsrc%2Fmatches%2Fnop_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750204e3e35f8c9fe532b984abe9b4baf74da517/clippy_lints%2Fsrc%2Fmatches%2Fnop_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fnop_match.rs?ref=750204e3e35f8c9fe532b984abe9b4baf74da517", "patch": "@@ -80,26 +80,29 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>) {\n }\n \n fn check_if_let(cx: &LateContext<'_>, if_let: &higher::IfLet<'_>) -> bool {\n-    if let Some(else_block) = if_let.if_else {\n+    if let Some(if_else) = if_let.if_else {\n         if !pat_same_as_expr(if_let.let_pat, peel_blocks_with_stmt(if_let.if_then)) {\n             return false;\n         }\n \n-        let else_expr = peel_blocks_with_stmt(else_block);\n         // Recurrsively check for each `else if let` phrase,\n-        if let Some(ref nested_if_let) = higher::IfLet::hir(cx, else_expr) {\n+        if let Some(ref nested_if_let) = higher::IfLet::hir(cx, if_else) {\n             return check_if_let(cx, nested_if_let);\n         }\n-        let ret = strip_return(else_expr);\n-        let let_expr_ty = cx.typeck_results().expr_ty(if_let.let_expr);\n-        if is_type_diagnostic_item(cx, let_expr_ty, sym::Option) {\n-            if let ExprKind::Path(ref qpath) = ret.kind {\n-                return is_lang_ctor(cx, qpath, OptionNone) || eq_expr_value(cx, if_let.let_expr, ret);\n+\n+        if matches!(if_else.kind, ExprKind::Block(..)) {\n+            let else_expr = peel_blocks_with_stmt(if_else);\n+            let ret = strip_return(else_expr);\n+            let let_expr_ty = cx.typeck_results().expr_ty(if_let.let_expr);\n+            if is_type_diagnostic_item(cx, let_expr_ty, sym::Option) {\n+                if let ExprKind::Path(ref qpath) = ret.kind {\n+                    return is_lang_ctor(cx, qpath, OptionNone) || eq_expr_value(cx, if_let.let_expr, ret);\n+                }\n+            } else {\n+                return eq_expr_value(cx, if_let.let_expr, ret);\n             }\n-        } else {\n-            return eq_expr_value(cx, if_let.let_expr, ret);\n+            return true;\n         }\n-        return true;\n     }\n     false\n }"}, {"sha": "8875323a1bbd0691aa78ac38f1385aaa43718c97", "filename": "tests/ui/nop_match.fixed", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/750204e3e35f8c9fe532b984abe9b4baf74da517/tests%2Fui%2Fnop_match.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/750204e3e35f8c9fe532b984abe9b4baf74da517/tests%2Fui%2Fnop_match.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnop_match.fixed?ref=750204e3e35f8c9fe532b984abe9b4baf74da517", "patch": "@@ -3,6 +3,7 @@\n #![allow(clippy::manual_map)]\n #![allow(dead_code)]\n \n+#[derive(Clone, Copy)]\n enum Choice {\n     A,\n     B,\n@@ -60,8 +61,16 @@ fn if_let_result(x: Result<(), i32>) {\n     let _: Result<(), i32> = if let Err(e) = Ok(1) { Err(e) } else { x };\n }\n \n-fn custom_enum_a(x: Choice) -> Choice {\n-    x\n+fn if_let_custom_enum(x: Choice) {\n+    let _: Choice = x;\n+    // Don't trigger\n+    let _: Choice = if let Choice::A = x {\n+        Choice::A\n+    } else if true {\n+        Choice::B\n+    } else {\n+        x\n+    };\n }\n \n fn main() {}"}, {"sha": "19469a860225e07eef520205a6759d46cd19ee04", "filename": "tests/ui/nop_match.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/750204e3e35f8c9fe532b984abe9b4baf74da517/tests%2Fui%2Fnop_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750204e3e35f8c9fe532b984abe9b4baf74da517/tests%2Fui%2Fnop_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnop_match.rs?ref=750204e3e35f8c9fe532b984abe9b4baf74da517", "patch": "@@ -3,6 +3,7 @@\n #![allow(clippy::manual_map)]\n #![allow(dead_code)]\n \n+#[derive(Clone, Copy)]\n enum Choice {\n     A,\n     B,\n@@ -79,16 +80,24 @@ fn if_let_result(x: Result<(), i32>) {\n     let _: Result<(), i32> = if let Err(e) = Ok(1) { Err(e) } else { x };\n }\n \n-fn custom_enum_a(x: Choice) -> Choice {\n-    if let Choice::A = x {\n+fn if_let_custom_enum(x: Choice) {\n+    let _: Choice = if let Choice::A = x {\n         Choice::A\n     } else if let Choice::B = x {\n         Choice::B\n     } else if let Choice::C = x {\n         Choice::C\n     } else {\n         x\n-    }\n+    };\n+    // Don't trigger\n+    let _: Choice = if let Choice::A = x {\n+        Choice::A\n+    } else if true {\n+        Choice::B\n+    } else {\n+        x\n+    };\n }\n \n fn main() {}"}, {"sha": "b7a1967bf5f238f768eaa9e1e92515df368151fe", "filename": "tests/ui/nop_match.stderr", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/750204e3e35f8c9fe532b984abe9b4baf74da517/tests%2Fui%2Fnop_match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/750204e3e35f8c9fe532b984abe9b4baf74da517/tests%2Fui%2Fnop_match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnop_match.stderr?ref=750204e3e35f8c9fe532b984abe9b4baf74da517", "patch": "@@ -1,5 +1,5 @@\n error: this match expression is unnecessary\n-  --> $DIR/nop_match.rs:14:18\n+  --> $DIR/nop_match.rs:15:18\n    |\n LL |       let _: i32 = match x {\n    |  __________________^\n@@ -13,7 +13,7 @@ LL | |     };\n    = note: `-D clippy::nop-match` implied by `-D warnings`\n \n error: this match expression is unnecessary\n-  --> $DIR/nop_match.rs:23:21\n+  --> $DIR/nop_match.rs:24:21\n    |\n LL |       let _: Choice = match se {\n    |  _____________________^\n@@ -25,7 +25,7 @@ LL | |     };\n    | |_____^ help: replace it with: `se`\n \n error: this match expression is unnecessary\n-  --> $DIR/nop_match.rs:45:26\n+  --> $DIR/nop_match.rs:46:26\n    |\n LL |       let _: Option<i32> = match x {\n    |  __________________________^\n@@ -35,7 +35,7 @@ LL | |     };\n    | |_____^ help: replace it with: `x`\n \n error: this match expression is unnecessary\n-  --> $DIR/nop_match.rs:61:31\n+  --> $DIR/nop_match.rs:62:31\n    |\n LL |       let _: Result<i32, i32> = match Ok(1) {\n    |  _______________________________^\n@@ -45,7 +45,7 @@ LL | |     };\n    | |_____^ help: replace it with: `Ok(1)`\n \n error: this match expression is unnecessary\n-  --> $DIR/nop_match.rs:65:31\n+  --> $DIR/nop_match.rs:66:31\n    |\n LL |       let _: Result<i32, i32> = match func_ret_err(0_i32) {\n    |  _______________________________^\n@@ -55,33 +55,34 @@ LL | |     };\n    | |_____^ help: replace it with: `func_ret_err(0_i32)`\n \n error: this if-let expression is unnecessary\n-  --> $DIR/nop_match.rs:72:5\n+  --> $DIR/nop_match.rs:73:5\n    |\n LL |     if let Some(a) = Some(1) { Some(a) } else { None }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `Some(1)`\n \n error: this if-let expression is unnecessary\n-  --> $DIR/nop_match.rs:76:30\n+  --> $DIR/nop_match.rs:77:30\n    |\n LL |     let _: Result<(), i32> = if let Err(e) = x { Err(e) } else { x };\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `x`\n \n error: this if-let expression is unnecessary\n-  --> $DIR/nop_match.rs:77:30\n+  --> $DIR/nop_match.rs:78:30\n    |\n LL |     let _: Result<(), i32> = if let Ok(val) = x { Ok(val) } else { x };\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `x`\n \n error: this if-let expression is unnecessary\n-  --> $DIR/nop_match.rs:83:5\n+  --> $DIR/nop_match.rs:84:21\n    |\n-LL | /     if let Choice::A = x {\n+LL |       let _: Choice = if let Choice::A = x {\n+   |  _____________________^\n LL | |         Choice::A\n LL | |     } else if let Choice::B = x {\n LL | |         Choice::B\n ...  |\n LL | |         x\n-LL | |     }\n+LL | |     };\n    | |_____^ help: replace it with: `x`\n \n error: aborting due to 9 previous errors"}]}