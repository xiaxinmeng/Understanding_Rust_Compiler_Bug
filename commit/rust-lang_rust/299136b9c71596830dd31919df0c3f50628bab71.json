{"sha": "299136b9c71596830dd31919df0c3f50628bab71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5OTEzNmI5YzcxNTk2ODMwZGQzMTkxOWRmMGMzZjUwNjI4YmFiNzE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-10-05T20:36:51Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2020-10-05T21:18:03Z"}, "message": "builtin_macros: Fix use of interpolated identifiers in `asm!`", "tree": {"sha": "5ee499542eb3e99d152eda9449649953a686e3a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ee499542eb3e99d152eda9449649953a686e3a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/299136b9c71596830dd31919df0c3f50628bab71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/299136b9c71596830dd31919df0c3f50628bab71", "html_url": "https://github.com/rust-lang/rust/commit/299136b9c71596830dd31919df0c3f50628bab71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/299136b9c71596830dd31919df0c3f50628bab71/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea7e131435a960d154e9a5d6a9297039574ffd7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7e131435a960d154e9a5d6a9297039574ffd7d", "html_url": "https://github.com/rust-lang/rust/commit/ea7e131435a960d154e9a5d6a9297039574ffd7d"}], "stats": {"total": 108, "additions": 92, "deletions": 16}, "files": [{"sha": "2cdfc3f6c9cc958bfe560f705be74abbf57f9228", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/299136b9c71596830dd31919df0c3f50628bab71/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299136b9c71596830dd31919df0c3f50628bab71/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=299136b9c71596830dd31919df0c3f50628bab71", "patch": "@@ -81,7 +81,7 @@ fn parse_args<'a>(\n         } // accept trailing commas\n \n         // Parse options\n-        if p.eat(&token::Ident(sym::options, false)) {\n+        if p.eat_keyword(sym::options) {\n             parse_options(&mut p, &mut args)?;\n             allow_templates = false;\n             continue;\n@@ -101,19 +101,19 @@ fn parse_args<'a>(\n         };\n \n         let mut explicit_reg = false;\n-        let op = if p.eat(&token::Ident(kw::In, false)) {\n+        let op = if p.eat_keyword(kw::In) {\n             let reg = parse_reg(&mut p, &mut explicit_reg)?;\n             let expr = p.parse_expr()?;\n             ast::InlineAsmOperand::In { reg, expr }\n-        } else if p.eat(&token::Ident(sym::out, false)) {\n+        } else if p.eat_keyword(sym::out) {\n             let reg = parse_reg(&mut p, &mut explicit_reg)?;\n             let expr = if p.eat_keyword(kw::Underscore) { None } else { Some(p.parse_expr()?) };\n             ast::InlineAsmOperand::Out { reg, expr, late: false }\n-        } else if p.eat(&token::Ident(sym::lateout, false)) {\n+        } else if p.eat_keyword(sym::lateout) {\n             let reg = parse_reg(&mut p, &mut explicit_reg)?;\n             let expr = if p.eat_keyword(kw::Underscore) { None } else { Some(p.parse_expr()?) };\n             ast::InlineAsmOperand::Out { reg, expr, late: true }\n-        } else if p.eat(&token::Ident(sym::inout, false)) {\n+        } else if p.eat_keyword(sym::inout) {\n             let reg = parse_reg(&mut p, &mut explicit_reg)?;\n             let expr = p.parse_expr()?;\n             if p.eat(&token::FatArrow) {\n@@ -123,7 +123,7 @@ fn parse_args<'a>(\n             } else {\n                 ast::InlineAsmOperand::InOut { reg, expr, late: false }\n             }\n-        } else if p.eat(&token::Ident(sym::inlateout, false)) {\n+        } else if p.eat_keyword(sym::inlateout) {\n             let reg = parse_reg(&mut p, &mut explicit_reg)?;\n             let expr = p.parse_expr()?;\n             if p.eat(&token::FatArrow) {\n@@ -133,10 +133,10 @@ fn parse_args<'a>(\n             } else {\n                 ast::InlineAsmOperand::InOut { reg, expr, late: true }\n             }\n-        } else if p.eat(&token::Ident(kw::Const, false)) {\n+        } else if p.eat_keyword(kw::Const) {\n             let expr = p.parse_expr()?;\n             ast::InlineAsmOperand::Const { expr }\n-        } else if p.eat(&token::Ident(sym::sym, false)) {\n+        } else if p.eat_keyword(sym::sym) {\n             let expr = p.parse_expr()?;\n             match expr.kind {\n                 ast::ExprKind::Path(..) => {}\n@@ -333,21 +333,22 @@ fn parse_options<'a>(p: &mut Parser<'a>, args: &mut AsmArgs) -> Result<(), Diagn\n     p.expect(&token::OpenDelim(token::DelimToken::Paren))?;\n \n     while !p.eat(&token::CloseDelim(token::DelimToken::Paren)) {\n-        if p.eat(&token::Ident(sym::pure, false)) {\n+        if p.eat_keyword(sym::pure) {\n             try_set_option(p, args, sym::pure, ast::InlineAsmOptions::PURE);\n-        } else if p.eat(&token::Ident(sym::nomem, false)) {\n+        } else if p.eat_keyword(sym::nomem) {\n             try_set_option(p, args, sym::nomem, ast::InlineAsmOptions::NOMEM);\n-        } else if p.eat(&token::Ident(sym::readonly, false)) {\n+        } else if p.eat_keyword(sym::readonly) {\n             try_set_option(p, args, sym::readonly, ast::InlineAsmOptions::READONLY);\n-        } else if p.eat(&token::Ident(sym::preserves_flags, false)) {\n+        } else if p.eat_keyword(sym::preserves_flags) {\n             try_set_option(p, args, sym::preserves_flags, ast::InlineAsmOptions::PRESERVES_FLAGS);\n-        } else if p.eat(&token::Ident(sym::noreturn, false)) {\n+        } else if p.eat_keyword(sym::noreturn) {\n             try_set_option(p, args, sym::noreturn, ast::InlineAsmOptions::NORETURN);\n-        } else if p.eat(&token::Ident(sym::nostack, false)) {\n+        } else if p.eat_keyword(sym::nostack) {\n             try_set_option(p, args, sym::nostack, ast::InlineAsmOptions::NOSTACK);\n-        } else {\n-            p.expect(&token::Ident(sym::att_syntax, false))?;\n+        } else if p.eat_keyword(sym::att_syntax) {\n             try_set_option(p, args, sym::att_syntax, ast::InlineAsmOptions::ATT_SYNTAX);\n+        } else {\n+            return Err(p.expect_one_of(&[], &[]).unwrap_err());\n         }\n \n         // Allow trailing commas"}, {"sha": "f4cb749307d4d6ea45993f16d8730e38bdd8efd7", "filename": "src/test/ui/asm/interpolated-idents.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/299136b9c71596830dd31919df0c3f50628bab71/src%2Ftest%2Fui%2Fasm%2Finterpolated-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299136b9c71596830dd31919df0c3f50628bab71/src%2Ftest%2Fui%2Fasm%2Finterpolated-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finterpolated-idents.rs?ref=299136b9c71596830dd31919df0c3f50628bab71", "patch": "@@ -0,0 +1,24 @@\n+// only-x86_64\n+\n+#![feature(asm)]\n+\n+macro_rules! m {\n+    ($in:ident $out:ident $lateout:ident $inout:ident $inlateout:ident $const:ident $sym:ident\n+     $pure:ident $nomem:ident $readonly:ident $preserves_flags:ident\n+     $noreturn:ident $nostack:ident $att_syntax:ident $options:ident) => {\n+        unsafe {\n+            asm!(\"\", $in(x) x, $out(x) x, $lateout(x) x, $inout(x) x, $inlateout(x) x,\n+            //~^ ERROR asm outputs are not allowed with the `noreturn` option\n+            const x, sym x,\n+            $options($pure, $nomem, $readonly, $preserves_flags, $noreturn, $nostack, $att_syntax));\n+            //~^ ERROR the `nomem` and `readonly` options are mutually exclusive\n+            //~| ERROR the `pure` and `noreturn` options are mutually exclusive\n+        }\n+    };\n+}\n+\n+fn main() {\n+    m!(in out lateout inout inlateout const sym\n+       pure nomem readonly preserves_flags\n+       noreturn nostack att_syntax options);\n+}"}, {"sha": "6ffe8d97b05c117b1fe9fd7d6d1e3cc33f67632f", "filename": "src/test/ui/asm/interpolated-idents.stderr", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/299136b9c71596830dd31919df0c3f50628bab71/src%2Ftest%2Fui%2Fasm%2Finterpolated-idents.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/299136b9c71596830dd31919df0c3f50628bab71/src%2Ftest%2Fui%2Fasm%2Finterpolated-idents.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Finterpolated-idents.stderr?ref=299136b9c71596830dd31919df0c3f50628bab71", "patch": "@@ -0,0 +1,51 @@\n+error: the `nomem` and `readonly` options are mutually exclusive\n+  --> $DIR/interpolated-idents.rs:13:13\n+   |\n+LL |               $options($pure, $nomem, $readonly, $preserves_flags, $noreturn, $nostack, $att_syntax));\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | /     m!(in out lateout inout inlateout const sym\n+LL | |        pure nomem readonly preserves_flags\n+LL | |        noreturn nostack att_syntax options);\n+   | |____________________________________________- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: the `pure` and `noreturn` options are mutually exclusive\n+  --> $DIR/interpolated-idents.rs:13:13\n+   |\n+LL |               $options($pure, $nomem, $readonly, $preserves_flags, $noreturn, $nostack, $att_syntax));\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL | /     m!(in out lateout inout inlateout const sym\n+LL | |        pure nomem readonly preserves_flags\n+LL | |        noreturn nostack att_syntax options);\n+   | |____________________________________________- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: asm outputs are not allowed with the `noreturn` option\n+  --> $DIR/interpolated-idents.rs:10:32\n+   |\n+LL |               asm!(\"\", $in(x) x, $out(x) x, $lateout(x) x, $inout(x) x, $inlateout(x) x,\n+   |                                  ^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^  ^^^^^^^^^^^^^^^\n+...\n+LL |       m!(in out lateout inout inlateout const sym\n+   |  _____-\n+   | |_____|\n+   | |_____|\n+   | |_____|\n+   | |\n+LL | |        pure nomem readonly preserves_flags\n+LL | |        noreturn nostack att_syntax options);\n+   | |                                            -\n+   | |____________________________________________|\n+   | |____________________________________________in this macro invocation\n+   | |____________________________________________in this macro invocation\n+   | |____________________________________________in this macro invocation\n+   |                                              in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 3 previous errors\n+"}]}