{"sha": "16d061ea77eebe963cac28b0cf13dd3cbb506b13", "node_id": "C_kwDOAAsO6NoAKDE2ZDA2MWVhNzdlZWJlOTYzY2FjMjhiMGNmMTNkZDNjYmI1MDZiMTM", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-04-19T08:29:29Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2023-04-19T08:30:30Z"}, "message": "small type system cleanup", "tree": {"sha": "b998bc05eb1d22c7220a0b00a42ad578e6cbbd3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b998bc05eb1d22c7220a0b00a42ad578e6cbbd3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16d061ea77eebe963cac28b0cf13dd3cbb506b13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16d061ea77eebe963cac28b0cf13dd3cbb506b13", "html_url": "https://github.com/rust-lang/rust/commit/16d061ea77eebe963cac28b0cf13dd3cbb506b13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16d061ea77eebe963cac28b0cf13dd3cbb506b13/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5fe3528be5ef12be3d12c7a9ee1b0bff9e3b35e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5fe3528be5ef12be3d12c7a9ee1b0bff9e3b35e4", "html_url": "https://github.com/rust-lang/rust/commit/5fe3528be5ef12be3d12c7a9ee1b0bff9e3b35e4"}], "stats": {"total": 39, "additions": 15, "deletions": 24}, "files": [{"sha": "68002bfcfbd138231c319c15515c10c7404db0fc", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/16d061ea77eebe963cac28b0cf13dd3cbb506b13/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d061ea77eebe963cac28b0cf13dd3cbb506b13/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=16d061ea77eebe963cac28b0cf13dd3cbb506b13", "patch": "@@ -178,7 +178,7 @@ impl FlagComputation {\n \n             &ty::Alias(ty::Projection, data) => {\n                 self.add_flags(TypeFlags::HAS_TY_PROJECTION);\n-                self.add_projection_ty(data);\n+                self.add_alias_ty(data);\n             }\n \n             &ty::Alias(ty::Opaque, ty::AliasTy { substs, .. }) => {\n@@ -267,7 +267,7 @@ impl FlagComputation {\n                 projection_ty,\n                 term,\n             })) => {\n-                self.add_projection_ty(projection_ty);\n+                self.add_alias_ty(projection_ty);\n                 self.add_term(term);\n             }\n             ty::PredicateKind::WellFormed(arg) => {\n@@ -372,8 +372,8 @@ impl FlagComputation {\n         }\n     }\n \n-    fn add_projection_ty(&mut self, projection_ty: ty::AliasTy<'_>) {\n-        self.add_substs(projection_ty.substs);\n+    fn add_alias_ty(&mut self, alias_ty: ty::AliasTy<'_>) {\n+        self.add_substs(alias_ty.substs);\n     }\n \n     fn add_substs(&mut self, substs: &[GenericArg<'_>]) {"}, {"sha": "6808861d643ca9e1ff01aa6088e0c8a00d601bd0", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/16d061ea77eebe963cac28b0cf13dd3cbb506b13/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d061ea77eebe963cac28b0cf13dd3cbb506b13/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=16d061ea77eebe963cac28b0cf13dd3cbb506b13", "patch": "@@ -170,29 +170,20 @@ pub fn predicate_obligations<'tcx>(\n         ty::PredicateKind::WellFormed(arg) => {\n             wf.compute(arg);\n         }\n-        ty::PredicateKind::ObjectSafe(_) => {}\n-        ty::PredicateKind::ClosureKind(..) => {}\n-        ty::PredicateKind::Subtype(ty::SubtypePredicate { a, b, a_is_expected: _ }) => {\n-            wf.compute(a.into());\n-            wf.compute(b.into());\n-        }\n-        ty::PredicateKind::Coerce(ty::CoercePredicate { a, b }) => {\n-            wf.compute(a.into());\n-            wf.compute(b.into());\n-        }\n+\n         ty::PredicateKind::ConstEvaluatable(ct) => {\n             wf.compute(ct.into());\n         }\n-        ty::PredicateKind::ConstEquate(c1, c2) => {\n-            wf.compute(c1.into());\n-            wf.compute(c2.into());\n-        }\n-        ty::PredicateKind::Ambiguous => {}\n-        ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n-            bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n-        }\n-        ty::PredicateKind::AliasRelate(..) => {\n-            bug!(\"We should only wf check where clauses and `AliasRelate` is not a `Clause`\")\n+\n+        ty::PredicateKind::ObjectSafe(_)\n+        | ty::PredicateKind::ClosureKind(..)\n+        | ty::PredicateKind::Subtype(..)\n+        | ty::PredicateKind::Coerce(..)\n+        | ty::PredicateKind::ConstEquate(..)\n+        | ty::PredicateKind::Ambiguous\n+        | ty::PredicateKind::AliasRelate(..)\n+        | ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n+            bug!(\"We should only wf check where clauses, unexpected predicate: {predicate:?}\")\n         }\n     }\n "}]}