{"sha": "3b5afa590bec0652eabc4d97c967cd9f26a6ef5e", "node_id": "C_kwDOAAsO6NoAKDNiNWFmYTU5MGJlYzA2NTJlYWJjNGQ5N2M5NjdjZDlmMjZhNmVmNWU", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2023-01-08T08:01:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-08T08:01:48Z"}, "message": "Rollup merge of #106557 - Ezrashaw:ui-test-fixups-1, r=GuillaumeGomez\n\nAdd some UI tests and reword error-code docs\n\nAdded UI tests for `E0013` and `E0015`. Error code docs for `E0015` were a bit unclear (they referred to all non-const errors in const context, when only non-const functions applied), so I touched them up a bit.\n\nI also fixed up some issues in the new `error_codes.rs` tidy check (linked #106341), that I overlooked previously.\n\nr? ``@GuillaumeGomez``", "tree": {"sha": "990ce8265a5e8ee4e96e93b311afc7e157d56456", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/990ce8265a5e8ee4e96e93b311afc7e157d56456"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b5afa590bec0652eabc4d97c967cd9f26a6ef5e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjunhsCRBK7hj4Ov3rIwAAaRUIADu31AT9cstpVKixoONaLK71\n+mZBEW1fN7XPF8sIGQfa+pWZtq8Td7u+tiLFuWAWI1SzdodVpD23skpwRa6hGajk\nQBmbzFuZulsxPGUfoblD9F7BUWaHGQ4Z0/olXGJJv3ueP/wUCu1zZSlxNTn31UIU\nvWl/Qp862cs2Ts7jLBGseB5DHjtn+CRVHx3KJiDtSAhKcZHJB9I8NsSeh/jMXlED\nSi56OUdfbsW85uGahKNIvf74CqDLEz8WFX/NqV+PszF8IiSGfPjIRxbmIELzNK+R\nQdI/1eLi2WlzyhMrMKMcZx99Zkakw6hv6SxM05AZ5ByxmDdU7Iwb1NuErHSzCX8=\n=jEL3\n-----END PGP SIGNATURE-----\n", "payload": "tree 990ce8265a5e8ee4e96e93b311afc7e157d56456\nparent 7997ff6612c1beadb74edd54f772c97147e14b96\nparent ae61c250cd6124d0ec5095acb3be64b633268ab3\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1673164908 +0900\ncommitter GitHub <noreply@github.com> 1673164908 +0900\n\nRollup merge of #106557 - Ezrashaw:ui-test-fixups-1, r=GuillaumeGomez\n\nAdd some UI tests and reword error-code docs\n\nAdded UI tests for `E0013` and `E0015`. Error code docs for `E0015` were a bit unclear (they referred to all non-const errors in const context, when only non-const functions applied), so I touched them up a bit.\n\nI also fixed up some issues in the new `error_codes.rs` tidy check (linked #106341), that I overlooked previously.\n\nr? ``@GuillaumeGomez``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b5afa590bec0652eabc4d97c967cd9f26a6ef5e", "html_url": "https://github.com/rust-lang/rust/commit/3b5afa590bec0652eabc4d97c967cd9f26a6ef5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b5afa590bec0652eabc4d97c967cd9f26a6ef5e/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7997ff6612c1beadb74edd54f772c97147e14b96", "url": "https://api.github.com/repos/rust-lang/rust/commits/7997ff6612c1beadb74edd54f772c97147e14b96", "html_url": "https://github.com/rust-lang/rust/commit/7997ff6612c1beadb74edd54f772c97147e14b96"}, {"sha": "ae61c250cd6124d0ec5095acb3be64b633268ab3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae61c250cd6124d0ec5095acb3be64b633268ab3", "html_url": "https://github.com/rust-lang/rust/commit/ae61c250cd6124d0ec5095acb3be64b633268ab3"}], "stats": {"total": 84, "additions": 57, "deletions": 27}, "files": [{"sha": "ac78f66adada052ae5b3487fa532bb4b8f65874a", "filename": "compiler/rustc_error_codes/src/error_codes/E0015.md", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3b5afa590bec0652eabc4d97c967cd9f26a6ef5e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0015.md", "raw_url": "https://github.com/rust-lang/rust/raw/3b5afa590bec0652eabc4d97c967cd9f26a6ef5e/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0015.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0015.md?ref=3b5afa590bec0652eabc4d97c967cd9f26a6ef5e", "patch": "@@ -1,5 +1,4 @@\n-A constant item was initialized with something that is not a constant\n-expression.\n+A non-`const` function was called in a `const` context.\n \n Erroneous code example:\n \n@@ -8,26 +7,20 @@ fn create_some() -> Option<u8> {\n     Some(1)\n }\n \n-const FOO: Option<u8> = create_some(); // error!\n+// error: cannot call non-const fn `create_some` in constants\n+const FOO: Option<u8> = create_some();\n ```\n \n-The only functions that can be called in static or constant expressions are\n-`const` functions, and struct/enum constructors.\n+All functions used in a `const` context (constant or static expression) must\n+be marked `const`.\n \n To fix this error, you can declare `create_some` as a constant function:\n \n ```\n-const fn create_some() -> Option<u8> { // declared as a const function\n+// declared as a `const` function:\n+const fn create_some() -> Option<u8> {\n     Some(1)\n }\n \n-const FOO: Option<u8> = create_some(); // ok!\n-\n-// These are also working:\n-struct Bar {\n-    x: u8,\n-}\n-\n-const OTHER_FOO: Option<u8> = Some(1);\n-const BAR: Bar = Bar {x: 1};\n+const FOO: Option<u8> = create_some(); // no error!\n ```"}, {"sha": "9b3982a785b7fa845ae277cea8029adbfb44f5f0", "filename": "src/test/ui/error-codes/E0013.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3b5afa590bec0652eabc4d97c967cd9f26a6ef5e/src%2Ftest%2Fui%2Ferror-codes%2FE0013.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5afa590bec0652eabc4d97c967cd9f26a6ef5e/src%2Ftest%2Fui%2Ferror-codes%2FE0013.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0013.rs?ref=3b5afa590bec0652eabc4d97c967cd9f26a6ef5e", "patch": "@@ -0,0 +1,4 @@\n+static X: i32 = 42;\n+const Y: i32 = X; //~ ERROR constants cannot refer to statics [E0013]\n+\n+fn main() {}"}, {"sha": "dc22053a63895e14ba2625b66c1584f5ed765ea9", "filename": "src/test/ui/error-codes/E0013.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b5afa590bec0652eabc4d97c967cd9f26a6ef5e/src%2Ftest%2Fui%2Ferror-codes%2FE0013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5afa590bec0652eabc4d97c967cd9f26a6ef5e/src%2Ftest%2Fui%2Ferror-codes%2FE0013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0013.stderr?ref=3b5afa590bec0652eabc4d97c967cd9f26a6ef5e", "patch": "@@ -0,0 +1,11 @@\n+error[E0013]: constants cannot refer to statics\n+  --> $DIR/E0013.rs:2:16\n+   |\n+LL | const Y: i32 = X;\n+   |                ^\n+   |\n+   = help: consider extracting the value of the `static` to a `const`, and referring to that\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0013`."}, {"sha": "b0211358d81668cdec050a14ba826125e037fc43", "filename": "src/test/ui/error-codes/E0015.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3b5afa590bec0652eabc4d97c967cd9f26a6ef5e/src%2Ftest%2Fui%2Ferror-codes%2FE0015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5afa590bec0652eabc4d97c967cd9f26a6ef5e/src%2Ftest%2Fui%2Ferror-codes%2FE0015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0015.rs?ref=3b5afa590bec0652eabc4d97c967cd9f26a6ef5e", "patch": "@@ -0,0 +1,8 @@\n+fn create_some() -> Option<u8> {\n+    Some(1)\n+}\n+\n+const FOO: Option<u8> = create_some();\n+//~^ ERROR cannot call non-const fn `create_some` in constants [E0015]\n+\n+fn main() {}"}, {"sha": "ec1ce47b2ce78c122e38133871526572ae10f0c4", "filename": "src/test/ui/error-codes/E0015.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3b5afa590bec0652eabc4d97c967cd9f26a6ef5e/src%2Ftest%2Fui%2Ferror-codes%2FE0015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3b5afa590bec0652eabc4d97c967cd9f26a6ef5e/src%2Ftest%2Fui%2Ferror-codes%2FE0015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0015.stderr?ref=3b5afa590bec0652eabc4d97c967cd9f26a6ef5e", "patch": "@@ -0,0 +1,11 @@\n+error[E0015]: cannot call non-const fn `create_some` in constants\n+  --> $DIR/E0015.rs:5:25\n+   |\n+LL | const FOO: Option<u8> = create_some();\n+   |                         ^^^^^^^^^^^^^\n+   |\n+   = note: calls in constants are limited to constant functions, tuple structs and tuple variants\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0015`."}, {"sha": "4b0a62fac839efcacb02296c63aa4260482a2cd1", "filename": "src/tools/tidy/src/error_codes.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/3b5afa590bec0652eabc4d97c967cd9f26a6ef5e/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b5afa590bec0652eabc4d97c967cd9f26a6ef5e/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ferror_codes.rs?ref=3b5afa590bec0652eabc4d97c967cd9f26a6ef5e", "patch": "@@ -15,8 +15,6 @@\n //!\n //! 4. We check that the error code is actually emitted by the compiler.\n //!   - This is done by searching `compiler/` with a regex.\n-//!\n-//! This tidy check was merged and refactored from two others. See #PR_NUM for information about linting changes that occurred during this refactor.\n \n use std::{ffi::OsStr, fs, path::Path};\n \n@@ -57,7 +55,7 @@ pub fn check(root_path: &Path, search_paths: &[&Path], verbose: bool, bad: &mut\n     let no_longer_emitted = check_error_codes_docs(root_path, &error_codes, &mut errors, verbose);\n \n     // Stage 3: check list has UI tests\n-    check_error_codes_tests(root_path, &error_codes, &mut errors, verbose);\n+    check_error_codes_tests(root_path, &error_codes, &mut errors, verbose, &no_longer_emitted);\n \n     // Stage 4: check list is emitted by compiler\n     check_error_codes_used(search_paths, &error_codes, &mut errors, &no_longer_emitted, verbose);\n@@ -174,22 +172,21 @@ fn check_error_codes_docs(\n             return;\n         }\n \n-        let (found_code_example, found_proper_doctest, emit_ignore_warning, emit_no_longer_warning) =\n+        let (found_code_example, found_proper_doctest, emit_ignore_warning, no_longer_emitted) =\n             check_explanation_has_doctest(&contents, &err_code);\n+\n         if emit_ignore_warning {\n             verbose_print!(\n                 verbose,\n                 \"warning: Error code `{err_code}` uses the ignore header. This should not be used, add the error code to the \\\n                 `IGNORE_DOCTEST_CHECK` constant instead.\"\n             );\n         }\n-        if emit_no_longer_warning {\n+\n+        if no_longer_emitted {\n             no_longer_emitted_codes.push(err_code.to_owned());\n-            verbose_print!(\n-                verbose,\n-                \"warning: Error code `{err_code}` is no longer emitted and should be removed entirely.\"\n-            );\n         }\n+\n         if !found_code_example {\n             verbose_print!(\n                 verbose,\n@@ -226,7 +223,7 @@ fn check_explanation_has_doctest(explanation: &str, err_code: &str) -> (bool, bo\n     let mut found_proper_doctest = false;\n \n     let mut emit_ignore_warning = false;\n-    let mut emit_no_longer_warning = false;\n+    let mut no_longer_emitted = false;\n \n     for line in explanation.lines() {\n         let line = line.trim();\n@@ -246,13 +243,13 @@ fn check_explanation_has_doctest(explanation: &str, err_code: &str) -> (bool, bo\n         } else if line\n             .starts_with(\"#### Note: this error code is no longer emitted by the compiler\")\n         {\n-            emit_no_longer_warning = true;\n+            no_longer_emitted = true;\n             found_code_example = true;\n             found_proper_doctest = true;\n         }\n     }\n \n-    (found_code_example, found_proper_doctest, emit_ignore_warning, emit_no_longer_warning)\n+    (found_code_example, found_proper_doctest, emit_ignore_warning, no_longer_emitted)\n }\n \n // Stage 3: Checks that each error code has a UI test in the correct directory\n@@ -261,6 +258,7 @@ fn check_error_codes_tests(\n     error_codes: &[String],\n     errors: &mut Vec<String>,\n     verbose: bool,\n+    no_longer_emitted: &[String],\n ) {\n     let tests_path = root_path.join(Path::new(ERROR_TESTS_PATH));\n \n@@ -295,6 +293,11 @@ fn check_error_codes_tests(\n             }\n         };\n \n+        if no_longer_emitted.contains(code) {\n+            // UI tests *can't* contain error codes that are no longer emitted.\n+            continue;\n+        }\n+\n         let mut found_code = false;\n \n         for line in file.lines() {"}]}