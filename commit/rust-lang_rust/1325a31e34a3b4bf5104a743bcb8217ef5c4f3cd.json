{"sha": "1325a31e34a3b4bf5104a743bcb8217ef5c4f3cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzMjVhMzFlMzRhM2I0YmY1MTA0YTc0M2JjYjgyMTdlZjVjNGYzY2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-26T16:15:39Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-26T16:15:39Z"}, "message": "reduce visibility", "tree": {"sha": "38786cb16a84aadf153dbc9d90b8e87dd7c02eac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38786cb16a84aadf153dbc9d90b8e87dd7c02eac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1325a31e34a3b4bf5104a743bcb8217ef5c4f3cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1325a31e34a3b4bf5104a743bcb8217ef5c4f3cd", "html_url": "https://github.com/rust-lang/rust/commit/1325a31e34a3b4bf5104a743bcb8217ef5c4f3cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1325a31e34a3b4bf5104a743bcb8217ef5c4f3cd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e28db444dfdc797002bd3561940cde2659b831de", "url": "https://api.github.com/repos/rust-lang/rust/commits/e28db444dfdc797002bd3561940cde2659b831de", "html_url": "https://github.com/rust-lang/rust/commit/e28db444dfdc797002bd3561940cde2659b831de"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "624c25c4d6f3cbafbff772e49c0a8d49438abcfa", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1325a31e34a3b4bf5104a743bcb8217ef5c4f3cd/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1325a31e34a3b4bf5104a743bcb8217ef5c4f3cd/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=1325a31e34a3b4bf5104a743bcb8217ef5c4f3cd", "patch": "@@ -13,7 +13,7 @@ use crate::{\n     adt::{EnumVariantId, StructFieldId, VariantDef},\n     generics::GenericParams,\n     docs::{Documentation, Docs, docs_from_ast},\n-    ids::{FunctionId, StructId, EnumId, AstItemDef, ConstId, StaticId, TraitId, TypeId},\n+    ids::{FunctionId, StructId, EnumId, AstItemDef, ConstId, StaticId, TraitId, TypeAliasId},\n     impl_block::ImplBlock,\n     resolve::Resolver,\n     diagnostics::DiagnosticSink,\n@@ -672,7 +672,7 @@ impl Docs for Trait {\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TypeAlias {\n-    pub(crate) id: TypeId,\n+    pub(crate) id: TypeAliasId,\n }\n \n impl TypeAlias {"}, {"sha": "eb9939df790f57b05fda1413fbe52bb453c611c8", "filename": "crates/ra_hir/src/ids.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1325a31e34a3b4bf5104a743bcb8217ef5c4f3cd/crates%2Fra_hir%2Fsrc%2Fids.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1325a31e34a3b4bf5104a743bcb8217ef5c4f3cd/crates%2Fra_hir%2Fsrc%2Fids.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fids.rs?ref=1325a31e34a3b4bf5104a743bcb8217ef5c4f3cd", "patch": "@@ -21,7 +21,7 @@ pub struct HirInterner {\n     consts: LocationInterner<ItemLoc<ast::ConstDef>, ConstId>,\n     statics: LocationInterner<ItemLoc<ast::StaticDef>, StaticId>,\n     traits: LocationInterner<ItemLoc<ast::TraitDef>, TraitId>,\n-    types: LocationInterner<ItemLoc<ast::TypeAliasDef>, TypeId>,\n+    types: LocationInterner<ItemLoc<ast::TypeAliasDef>, TypeAliasId>,\n }\n \n impl HirInterner {\n@@ -229,7 +229,7 @@ pub(crate) trait AstItemDef<N: AstNode>: ArenaId + Clone {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct FunctionId(RawId);\n+pub(crate) struct FunctionId(RawId);\n impl_arena_id!(FunctionId);\n impl AstItemDef<ast::FnDef> for FunctionId {\n     fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::FnDef>, Self> {\n@@ -238,7 +238,7 @@ impl AstItemDef<ast::FnDef> for FunctionId {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct StructId(RawId);\n+pub(crate) struct StructId(RawId);\n impl_arena_id!(StructId);\n impl AstItemDef<ast::StructDef> for StructId {\n     fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::StructDef>, Self> {\n@@ -247,7 +247,7 @@ impl AstItemDef<ast::StructDef> for StructId {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct EnumId(RawId);\n+pub(crate) struct EnumId(RawId);\n impl_arena_id!(EnumId);\n impl AstItemDef<ast::EnumDef> for EnumId {\n     fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::EnumDef>, Self> {\n@@ -256,7 +256,7 @@ impl AstItemDef<ast::EnumDef> for EnumId {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct ConstId(RawId);\n+pub(crate) struct ConstId(RawId);\n impl_arena_id!(ConstId);\n impl AstItemDef<ast::ConstDef> for ConstId {\n     fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::ConstDef>, Self> {\n@@ -265,7 +265,7 @@ impl AstItemDef<ast::ConstDef> for ConstId {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct StaticId(RawId);\n+pub(crate) struct StaticId(RawId);\n impl_arena_id!(StaticId);\n impl AstItemDef<ast::StaticDef> for StaticId {\n     fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::StaticDef>, Self> {\n@@ -274,7 +274,7 @@ impl AstItemDef<ast::StaticDef> for StaticId {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct TraitId(RawId);\n+pub(crate) struct TraitId(RawId);\n impl_arena_id!(TraitId);\n impl AstItemDef<ast::TraitDef> for TraitId {\n     fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::TraitDef>, Self> {\n@@ -283,9 +283,9 @@ impl AstItemDef<ast::TraitDef> for TraitId {\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct TypeId(RawId);\n-impl_arena_id!(TypeId);\n-impl AstItemDef<ast::TypeAliasDef> for TypeId {\n+pub(crate) struct TypeAliasId(RawId);\n+impl_arena_id!(TypeAliasId);\n+impl AstItemDef<ast::TypeAliasDef> for TypeAliasId {\n     fn interner(interner: &HirInterner) -> &LocationInterner<ItemLoc<ast::TypeAliasDef>, Self> {\n         &interner.types\n     }"}]}