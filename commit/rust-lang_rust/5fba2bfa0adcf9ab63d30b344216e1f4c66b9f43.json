{"sha": "5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmYmEyYmZhMGFkY2Y5YWI2M2QzMGIzNDQyMTZlMWY0YzY2YjlmNDM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-25T20:14:51Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-04-25T20:14:51Z"}, "message": "Rollup merge of #33133 - mitaa:rdoc-smth-smth-impl, r=alexcrichton\n\nrustdoc: inline all the impls\n\nThis used to be done to avoid inlining impls referencing private items, but is now unnecessary since we actually check that impls do not reference non-doc-reachable items.\n\nfixes #32881\nfixes #33025\nfixes #33113\n\nr? @alexcrichton", "tree": {"sha": "4bdcd048a310f2f1858b0a903d00535631258cf8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bdcd048a310f2f1858b0a903d00535631258cf8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43", "html_url": "https://github.com/rust-lang/rust/commit/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bc30a5621c0bee47bf91dc06bc194f5797ac3bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc30a5621c0bee47bf91dc06bc194f5797ac3bf", "html_url": "https://github.com/rust-lang/rust/commit/1bc30a5621c0bee47bf91dc06bc194f5797ac3bf"}, {"sha": "6603c95414bd3adb10e6b3ba548f69952df8f290", "url": "https://api.github.com/repos/rust-lang/rust/commits/6603c95414bd3adb10e6b3ba548f69952df8f290", "html_url": "https://github.com/rust-lang/rust/commit/6603c95414bd3adb10e6b3ba548f69952df8f290"}], "stats": {"total": 158, "additions": 132, "deletions": 26}, "files": [{"sha": "e13b2688788904e5d480dde122d505d5f7ddeaa5", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 3, "deletions": 18, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43", "patch": "@@ -76,6 +76,7 @@ fn try_inline_def(cx: &DocContext, tcx: &TyCtxt,\n     let inner = match def {\n         Def::Trait(did) => {\n             record_extern_fqn(cx, did, clean::TypeTrait);\n+            ret.extend(build_impls(cx, tcx, did));\n             clean::TraitItem(build_external_trait(cx, tcx, did))\n         }\n         Def::Fn(did) => {\n@@ -247,12 +248,10 @@ pub fn build_impls(cx: &DocContext,\n     // Primarily, the impls will be used to populate the documentation for this\n     // type being inlined, but impls can also be used when generating\n     // documentation for primitives (no way to find those specifically).\n-    if !cx.all_crate_impls.borrow_mut().contains_key(&did.krate) {\n-        let mut impls = Vec::new();\n+    if cx.populated_crate_impls.borrow_mut().insert(did.krate) {\n         for item in tcx.sess.cstore.crate_top_level_items(did.krate) {\n             populate_impls(cx, tcx, item.def, &mut impls);\n         }\n-        cx.all_crate_impls.borrow_mut().insert(did.krate, impls);\n \n         fn populate_impls(cx: &DocContext, tcx: &TyCtxt,\n                           def: cstore::DefLike,\n@@ -269,21 +268,7 @@ pub fn build_impls(cx: &DocContext,\n         }\n     }\n \n-    let mut candidates = cx.all_crate_impls.borrow_mut();\n-    let candidates = candidates.get_mut(&did.krate).unwrap();\n-    for i in (0..candidates.len()).rev() {\n-        let remove = match candidates[i].inner {\n-            clean::ImplItem(ref i) => {\n-                i.for_.def_id() == Some(did) || i.for_.primitive_type().is_some()\n-            }\n-            _ => continue,\n-        };\n-        if remove {\n-            impls.push(candidates.swap_remove(i));\n-        }\n-    }\n-\n-    return impls;\n+    impls\n }\n \n pub fn build_impl(cx: &DocContext,"}, {"sha": "0b3a0c19dacc46151bc8fe048597acb6a60927b6", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43", "patch": "@@ -30,7 +30,7 @@ use syntax::feature_gate::UnstableFeatures;\n use syntax::parse::token;\n \n use std::cell::{RefCell, Cell};\n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::rc::Rc;\n \n use visit_ast::RustdocVisitor;\n@@ -54,7 +54,7 @@ pub struct DocContext<'a, 'tcx: 'a> {\n     pub map: &'a hir_map::Map<'tcx>,\n     pub maybe_typed: MaybeTyped<'a, 'tcx>,\n     pub input: Input,\n-    pub all_crate_impls: RefCell<HashMap<ast::CrateNum, Vec<clean::Item>>>,\n+    pub populated_crate_impls: RefCell<HashSet<ast::CrateNum>>,\n     pub deref_trait_did: Cell<Option<DefId>>,\n     // Note that external items for which `doc(hidden)` applies to are shown as\n     // non-reachable while local items aren't. This is because we're reusing\n@@ -189,7 +189,7 @@ pub fn run_core(search_paths: SearchPaths,\n             map: &tcx.map,\n             maybe_typed: Typed(tcx),\n             input: input,\n-            all_crate_impls: RefCell::new(HashMap::new()),\n+            populated_crate_impls: RefCell::new(HashSet::new()),\n             deref_trait_did: Cell::new(None),\n             access_levels: RefCell::new(access_levels),\n             external_traits: RefCell::new(HashMap::new()),"}, {"sha": "26d82ccea5b8613eb658eb61186cac571864ed9f", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43", "patch": "@@ -291,17 +291,19 @@ impl fmt::Display for clean::Path {\n \n pub fn href(did: DefId) -> Option<(String, ItemType, Vec<String>)> {\n     let cache = cache();\n+    if !did.is_local() && !cache.access_levels.is_doc_reachable(did) {\n+        return None\n+    }\n+\n     let loc = CURRENT_LOCATION_KEY.with(|l| l.borrow().clone());\n     let &(ref fqp, shortty) = match cache.paths.get(&did) {\n         Some(p) => p,\n         None => return None,\n     };\n+\n     let mut url = if did.is_local() || cache.inlined.contains(&did) {\n         repeat(\"../\").take(loc.len()).collect::<String>()\n     } else {\n-        if !cache.access_levels.is_doc_reachable(did) {\n-            return None\n-        }\n         match cache.extern_locations[&did.krate] {\n             (_, render::Remote(ref s)) => s.to_string(),\n             (_, render::Local) => repeat(\"../\").take(loc.len()).collect(),"}, {"sha": "81fd1128afac84c16b31c92d70cf339d26209edd", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use std::cell::{RefCell, Cell};\n-use std::collections::HashMap;\n+use std::collections::{HashMap, HashSet};\n use std::env;\n use std::ffi::OsString;\n use std::io::prelude::*;\n@@ -111,7 +111,7 @@ pub fn run(input: &str,\n         maybe_typed: core::NotTyped(&sess),\n         input: input,\n         external_traits: RefCell::new(HashMap::new()),\n-        all_crate_impls: RefCell::new(HashMap::new()),\n+        populated_crate_impls: RefCell::new(HashSet::new()),\n         deref_trait_did: Cell::new(None),\n         access_levels: Default::default(),\n         renderinfo: Default::default(),"}, {"sha": "c476dda26902907040368bf2a447c156ffc5de31", "filename": "src/test/auxiliary/issue-33113.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Ftest%2Fauxiliary%2Fissue-33113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Ftest%2Fauxiliary%2Fissue-33113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-33113.rs?ref=5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name=\"bar\"]\n+\n+pub trait Bar {}\n+pub struct Foo;\n+\n+impl<'a> Bar for &'a char {}\n+impl Bar for Foo {}"}, {"sha": "aae3eb84fb5dd6151e269a83be0d0355c6d6aefe", "filename": "src/test/auxiliary/rustdoc-hidden.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Ftest%2Fauxiliary%2Frustdoc-hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Ftest%2Fauxiliary%2Frustdoc-hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frustdoc-hidden.rs?ref=5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[doc(hidden)]\n+pub struct Foo;\n+\n+pub struct Bar;"}, {"sha": "317262f417512f2c37bc6b8ac4b843e76b54e1c1", "filename": "src/test/auxiliary/rustdoc-trait-object-impl.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Ftest%2Fauxiliary%2Frustdoc-trait-object-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Ftest%2Fauxiliary%2Frustdoc-trait-object-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Frustdoc-trait-object-impl.rs?ref=5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+\n+pub trait Bar {}\n+\n+impl<'a> Bar + 'a {\n+    pub fn bar(&self) -> usize { 42 }\n+}\n+\n+impl<'a> fmt::Debug for Bar + 'a {\n+    fn fmt(&self, _: &mut fmt::Formatter) -> fmt::Result {\n+        Ok(())\n+    }\n+}\n+"}, {"sha": "c59b5afd1c48311db934d2c5bd037ce937fb3645", "filename": "src/test/rustdoc/inline_cross/inline_hidden.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Ftest%2Frustdoc%2Finline_cross%2Finline_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Ftest%2Frustdoc%2Finline_cross%2Finline_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Finline_hidden.rs?ref=5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:rustdoc-hidden.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+extern crate rustdoc_hidden;\n+\n+#[doc(no_inline)]\n+pub use rustdoc_hidden::Foo;\n+\n+// @has inline_hidden/fn.foo.html\n+// @!has - '//a/@title' 'Foo'\n+pub fn foo(_: Foo) {}"}, {"sha": "948061bdcbed58fef6bb39215c6081be9fc30121", "filename": "src/test/rustdoc/inline_cross/issue-32881.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-32881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-32881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-32881.rs?ref=5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:rustdoc-trait-object-impl.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+extern crate rustdoc_trait_object_impl;\n+\n+// @has issue_32881/trait.Bar.html\n+// @has - '//code' \"impl<'a> Bar\"\n+// @has - '//code' \"impl<'a> Debug for Bar\"\n+\n+pub use rustdoc_trait_object_impl::Bar;\n+"}, {"sha": "9ae8fefe730effd1f6f68d7c46a7b1f2d6148623", "filename": "src/test/rustdoc/inline_cross/issue-33113.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-33113.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-33113.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fissue-33113.rs?ref=5fba2bfa0adcf9ab63d30b344216e1f4c66b9f43", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:issue-33113.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+\n+extern crate bar;\n+\n+// @has issue_33113/trait.Bar.html\n+// @has - '//code' \"for &'a char\"\n+// @has - '//code' \"for Foo\"\n+pub use bar::Bar;"}]}