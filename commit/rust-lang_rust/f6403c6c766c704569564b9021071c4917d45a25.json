{"sha": "f6403c6c766c704569564b9021071c4917d45a25", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NDAzYzZjNzY2YzcwNDU2OTU2NGI5MDIxMDcxYzQ5MTdkNDVhMjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-01T06:24:07Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-12T16:54:48Z"}, "message": "Use `Option` in `ImplItemKind::Method`.", "tree": {"sha": "31e861f837051b1663e56cd202b823b614a5137f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31e861f837051b1663e56cd202b823b614a5137f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6403c6c766c704569564b9021071c4917d45a25", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6403c6c766c704569564b9021071c4917d45a25", "html_url": "https://github.com/rust-lang/rust/commit/f6403c6c766c704569564b9021071c4917d45a25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6403c6c766c704569564b9021071c4917d45a25/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73557faed23678fc443f3fa52727b5f200f597d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/73557faed23678fc443f3fa52727b5f200f597d2", "html_url": "https://github.com/rust-lang/rust/commit/73557faed23678fc443f3fa52727b5f200f597d2"}], "stats": {"total": 222, "additions": 149, "deletions": 73}, "files": [{"sha": "a82febba38ab017f3521e855ec3be4e226cb2a46", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -1211,7 +1211,7 @@ impl<'a> LoweringContext<'a> {\n                             let ct = self.with_new_scopes(|this| {\n                                 hir::AnonConst {\n                                     hir_id: this.lower_node_id(node_id),\n-                                    body: this.lower_const_body(&path_expr),\n+                                    body: this.lower_const_body(path_expr.span, Some(&path_expr)),\n                                 }\n                             });\n                             return GenericArg::Const(ConstArg {\n@@ -3003,7 +3003,7 @@ impl<'a> LoweringContext<'a> {\n         self.with_new_scopes(|this| {\n             hir::AnonConst {\n                 hir_id: this.lower_node_id(c.id),\n-                body: this.lower_const_body(&c.value),\n+                body: this.lower_const_body(c.value.span, Some(&c.value)),\n             }\n         })\n     }"}, {"sha": "7e231cd6b5982fbbb224dfcbd42d490f58f9c2b7", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 48, "deletions": 23, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -250,7 +250,7 @@ impl LoweringContext<'_> {\n             return None;\n         }\n \n-        let kind = self.lower_item_kind(i.id, &mut ident, &attrs, &mut vis, &i.kind);\n+        let kind = self.lower_item_kind(i.span, i.id, &mut ident, &attrs, &mut vis, &i.kind);\n \n         Some(hir::Item {\n             hir_id: self.lower_node_id(i.id),\n@@ -264,6 +264,7 @@ impl LoweringContext<'_> {\n \n     fn lower_item_kind(\n         &mut self,\n+        span: Span,\n         id: NodeId,\n         ident: &mut Ident,\n         attrs: &hir::HirVec<Attribute>,\n@@ -292,7 +293,7 @@ impl LoweringContext<'_> {\n                         }\n                     ),\n                     m,\n-                    self.lower_const_body(e),\n+                    self.lower_const_body(span, Some(e)),\n                 )\n             }\n             ItemKind::Const(ref t, ref e) => {\n@@ -305,7 +306,7 @@ impl LoweringContext<'_> {\n                             ImplTraitContext::Disallowed(ImplTraitPosition::Binding)\n                         }\n                     ),\n-                    self.lower_const_body(e)\n+                    self.lower_const_body(span, Some(e))\n                 )\n             }\n             ItemKind::Fn(FnSig { ref decl, header }, ref generics, ref body) => {\n@@ -317,7 +318,12 @@ impl LoweringContext<'_> {\n                     // `impl Future<Output = T>` here because lower_body\n                     // only cares about the input argument patterns in the function\n                     // declaration (decl), not the return types.\n-                    let body_id = this.lower_maybe_async_body(&decl, header.asyncness.node, body);\n+                    let body_id = this.lower_maybe_async_body(\n+                        span,\n+                        &decl,\n+                        header.asyncness.node,\n+                        Some(body),\n+                    );\n \n                     let (generics, decl) = this.add_in_band_defs(\n                         generics,\n@@ -817,7 +823,7 @@ impl LoweringContext<'_> {\n                     self.lower_ty(ty, ImplTraitContext::disallowed()),\n                     default\n                         .as_ref()\n-                        .map(|x| self.lower_const_body(x)),\n+                        .map(|x| self.lower_const_body(i.span, Some(x))),\n                 ),\n             ),\n             TraitItemKind::Method(ref sig, None) => {\n@@ -832,7 +838,7 @@ impl LoweringContext<'_> {\n                 (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Required(names)))\n             }\n             TraitItemKind::Method(ref sig, Some(ref body)) => {\n-                let body_id = self.lower_fn_body_block(&sig.decl, body);\n+                let body_id = self.lower_fn_body_block(i.span, &sig.decl, Some(body));\n                 let (generics, sig) = self.lower_method_sig(\n                     &i.generics,\n                     sig,\n@@ -891,6 +897,11 @@ impl LoweringContext<'_> {\n         }\n     }\n \n+    /// Construct `ExprKind::Err` for the given `span`.\n+    fn expr_err(&mut self, span: Span) -> hir::Expr {\n+        self.expr(span, hir::ExprKind::Err, ThinVec::new())\n+    }\n+\n     fn lower_impl_item(&mut self, i: &ImplItem) -> hir::ImplItem {\n         let impl_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n@@ -899,19 +910,16 @@ impl LoweringContext<'_> {\n                 self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n                 hir::ImplItemKind::Const(\n                     self.lower_ty(ty, ImplTraitContext::disallowed()),\n-                    match expr {\n-                        Some(expr) => self.lower_const_body(expr),\n-                        None => self.lower_body(|this| (\n-                            hir_vec![],\n-                            this.expr(i.span, hir::ExprKind::Err, ThinVec::new()),\n-                        )),\n-                    }\n+                    self.lower_const_body(i.span, expr.as_deref()),\n                 ),\n             ),\n             ImplItemKind::Method(ref sig, ref body) => {\n                 self.current_item = Some(i.span);\n                 let body_id = self.lower_maybe_async_body(\n-                    &sig.decl, sig.header.asyncness.node, body\n+                    i.span,\n+                    &sig.decl,\n+                    sig.header.asyncness.node,\n+                    body.as_deref(),\n                 );\n                 let impl_trait_return_allow = !self.is_in_trait_impl;\n                 let (generics, sig) = self.lower_method_sig(\n@@ -1069,23 +1077,39 @@ impl LoweringContext<'_> {\n         ))\n     }\n \n-    fn lower_fn_body_block(&mut self, decl: &FnDecl, body: &Block) -> hir::BodyId {\n-        self.lower_fn_body(decl, |this| this.lower_block_expr(body))\n+    fn lower_fn_body_block(\n+        &mut self,\n+        span: Span,\n+        decl: &FnDecl,\n+        body: Option<&Block>,\n+    ) -> hir::BodyId {\n+        self.lower_fn_body(decl, |this| this.lower_block_expr_opt(span, body))\n+    }\n+\n+    fn lower_block_expr_opt(&mut self, span: Span, block: Option<&Block>) -> hir::Expr {\n+        match block {\n+            Some(block) => self.lower_block_expr(block),\n+            None => self.expr_err(span),\n+        }\n     }\n \n-    pub(super) fn lower_const_body(&mut self, expr: &Expr) -> hir::BodyId {\n-        self.lower_body(|this| (hir_vec![], this.lower_expr(expr)))\n+    pub(super) fn lower_const_body(&mut self, span: Span, expr: Option<&Expr>) -> hir::BodyId {\n+        self.lower_body(|this| (hir_vec![], match expr {\n+            Some(expr) => this.lower_expr(expr),\n+            None => this.expr_err(span),\n+        }))\n     }\n \n     fn lower_maybe_async_body(\n         &mut self,\n+        span: Span,\n         decl: &FnDecl,\n         asyncness: IsAsync,\n-        body: &Block,\n+        body: Option<&Block>,\n     ) -> hir::BodyId {\n         let closure_id = match asyncness {\n             IsAsync::Async { closure_id, .. } => closure_id,\n-            IsAsync::NotAsync => return self.lower_fn_body_block(decl, body),\n+            IsAsync::NotAsync => return self.lower_fn_body_block(span, decl, body),\n         };\n \n         self.lower_body(|this| {\n@@ -1219,15 +1243,16 @@ impl LoweringContext<'_> {\n                 parameters.push(new_parameter);\n             }\n \n+            let body_span = body.map_or(span, |b| b.span);\n             let async_expr = this.make_async_expr(\n                 CaptureBy::Value,\n                 closure_id,\n                 None,\n-                body.span,\n+                body_span,\n                 hir::AsyncGeneratorKind::Fn,\n                 |this| {\n                     // Create a block from the user's function body:\n-                    let user_body = this.lower_block_expr(body);\n+                    let user_body = this.lower_block_expr_opt(body_span, body);\n \n                     // Transform into `drop-temps { <user-body> }`, an expression:\n                     let desugared_span = this.mark_span_with_reason(\n@@ -1257,7 +1282,7 @@ impl LoweringContext<'_> {\n                     );\n                     this.expr_block(P(body), ThinVec::new())\n                 });\n-            (HirVec::from(parameters), this.expr(body.span, async_expr, ThinVec::new()))\n+            (HirVec::from(parameters), this.expr(body_span, async_expr, ThinVec::new()))\n         })\n     }\n "}, {"sha": "053502c43dcde0afcbfc5c2eedf517b2ad43eed1", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -705,9 +705,7 @@ impl<'a> Parser<'a> {\n             // FIXME: code copied from `parse_macro_use_or_failure` -- use abstraction!\n             (Ident::invalid(), ast::ImplItemKind::Macro(mac), Generics::default())\n         } else {\n-            let (name, inner_attrs, generics, kind) = self.parse_impl_method(at_end)?;\n-            attrs.extend(inner_attrs);\n-            (name, kind, generics)\n+            self.parse_impl_method(at_end, &mut attrs)?\n         };\n \n         Ok(ImplItem {\n@@ -1842,11 +1840,11 @@ impl<'a> Parser<'a> {\n     fn parse_impl_method(\n         &mut self,\n         at_end: &mut bool,\n-    ) -> PResult<'a, (Ident, Vec<Attribute>, Generics, ImplItemKind)> {\n+        attrs: &mut Vec<Attribute>,\n+    ) -> PResult<'a, (Ident, ImplItemKind, Generics)> {\n         let (ident, sig, generics) = self.parse_method_sig(|_| true)?;\n-        *at_end = true;\n-        let (inner_attrs, body) = self.parse_inner_attrs_and_block()?;\n-        Ok((ident, inner_attrs, generics, ast::ImplItemKind::Method(sig, body)))\n+        let body = self.parse_trait_method_body(at_end, attrs)?;\n+        Ok((ident, ast::ImplItemKind::Method(sig, body), generics))\n     }\n \n     fn parse_trait_item_method("}, {"sha": "78866dc9cc90afaa28a94156f9afbf2ad6d43dd1", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -279,6 +279,22 @@ impl<'a> AstValidator<'a> {\n                 .emit();\n         }\n     }\n+\n+    fn check_impl_item_provided<T>(&self, sp: Span, body: &Option<T>, ctx: &str, sugg: &str) {\n+        if body.is_some() {\n+            return;\n+        }\n+\n+        self.err_handler()\n+            .struct_span_err(sp, &format!(\"associated {} in `impl` without body\", ctx))\n+            .span_suggestion(\n+                self.session.source_map().end_point(sp),\n+                &format!(\"provide a definition for the {}\", ctx),\n+                sugg.to_string(),\n+                Applicability::HasPlaceholders,\n+            )\n+            .emit();\n+    }\n }\n \n enum GenericPosition {\n@@ -747,18 +763,11 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n \n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n         match &ii.kind {\n-            ImplItemKind::Const(ty, None) => {\n-                self.err_handler()\n-                    .struct_span_err(ii.span, \"associated constant in `impl` without body\")\n-                    .span_suggestion(\n-                        ii.span,\n-                        \"provide a definition for the constant\",\n-                        format!(\"const {}: {} = <expr>;\", ii.ident, pprust::ty_to_string(ty)),\n-                        Applicability::HasPlaceholders,\n-                    )\n-                    .emit();\n+            ImplItemKind::Const(_, body) => {\n+                self.check_impl_item_provided(ii.span, body, \"constant\", \" = <expr>;\");\n             }\n-            ImplItemKind::Method(sig, _) => {\n+            ImplItemKind::Method(sig, body) => {\n+                self.check_impl_item_provided(ii.span, body, \"function\", \" { <body> }\");\n                 self.check_fn_decl(&sig.decl);\n             }\n             _ => {}"}, {"sha": "76a52bb7f7f37a550e30615c5ea50b5484269488", "filename": "src/librustc_resolve/def_collector.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibrustc_resolve%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibrustc_resolve%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdef_collector.rs?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -50,7 +50,7 @@ impl<'a> DefCollector<'a> {\n         header: &FnHeader,\n         generics: &'a Generics,\n         decl: &'a FnDecl,\n-        body: &'a Block,\n+        body: Option<&'a Block>,\n     ) {\n         let (closure_id, return_impl_trait_id) = match header.asyncness.node {\n             IsAsync::Async {\n@@ -74,7 +74,9 @@ impl<'a> DefCollector<'a> {\n                 closure_id, DefPathData::ClosureExpr, span,\n             );\n             this.with_parent(closure_def, |this| {\n-                visit::walk_block(this, body);\n+                if let Some(body) = body {\n+                    visit::walk_block(this, body);\n+                }\n             })\n         })\n     }\n@@ -123,7 +125,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     &sig.header,\n                     generics,\n                     &sig.decl,\n-                    body,\n+                    Some(body),\n                 )\n             }\n             ItemKind::Static(..) | ItemKind::Const(..) | ItemKind::Fn(..) =>\n@@ -237,7 +239,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     header,\n                     &ii.generics,\n                     decl,\n-                    body,\n+                    body.as_deref(),\n                 )\n             }\n             ImplItemKind::Method(..) |"}, {"sha": "99f9c3b1f2e32933ba885615b5ff4a2d4803ec18", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -1119,7 +1119,7 @@ impl<'l, 'tcx> DumpVisitor<'l, 'tcx> {\n             ast::ImplItemKind::Method(ref sig, ref body) => {\n                 self.process_method(\n                     sig,\n-                    Some(body),\n+                    body.as_deref(),\n                     impl_item.id,\n                     impl_item.ident,\n                     &impl_item.generics,"}, {"sha": "f6af5d8637edc6d65cc8d43f8e9a17bd1d58fcf5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -1637,7 +1637,7 @@ pub struct ImplItem<K = ImplItemKind> {\n #[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n pub enum ImplItemKind  {\n     Const(P<Ty>, Option<P<Expr>>),\n-    Method(FnSig, P<Block>),\n+    Method(FnSig, Option<P<Block>>),\n     TyAlias(P<Ty>),\n     Macro(Mac),\n }"}, {"sha": "0fa4dcf3ad9ddffdb9822b34efcbaccdb94bd440", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -985,7 +985,7 @@ pub fn noop_flat_map_impl_item<T: MutVisitor>(mut item: ImplItem, visitor: &mut\n         }\n         ImplItemKind::Method(sig, body) => {\n             visit_fn_sig(sig, visitor);\n-            visitor.visit_block(body);\n+            visit_opt(body, |body| visitor.visit_block(body));\n         }\n         ImplItemKind::TyAlias(ty) => visitor.visit_ty(ty),\n         ImplItemKind::Macro(mac) => visitor.visit_mac(mac),"}, {"sha": "34097841b4ac9c277e5ddc28a615b6f336300ae2", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -1553,23 +1553,13 @@ impl<'a> State<'a> {\n         self.print_defaultness(ti.defaultness);\n         match ti.kind {\n             ast::TraitItemKind::Const(ref ty, ref default) => {\n-                self.print_associated_const(\n-                    ti.ident,\n-                    ty,\n-                    default.as_ref().map(|expr| &**expr),\n-                    &source_map::respan(ti.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n-                );\n+                self.print_associated_const(ti.ident, ty, default.as_deref(), &ti.vis);\n             }\n             ast::TraitItemKind::Method(ref sig, ref body) => {\n                 if body.is_some() {\n                     self.head(\"\");\n                 }\n-                self.print_method_sig(\n-                    ti.ident,\n-                    &ti.generics,\n-                    sig,\n-                    &source_map::respan(ti.span.shrink_to_lo(), ast::VisibilityKind::Inherited),\n-                );\n+                self.print_method_sig(ti.ident, &ti.generics, sig, &ti.vis);\n                 if let Some(ref body) = *body {\n                     self.nbsp();\n                     self.print_block_with_attrs(body, &ti.attrs);\n@@ -1602,10 +1592,16 @@ impl<'a> State<'a> {\n                 self.print_associated_const(ii.ident, ty, expr.as_deref(), &ii.vis);\n             }\n             ast::ImplItemKind::Method(ref sig, ref body) => {\n-                self.head(\"\");\n+                if body.is_some() {\n+                    self.head(\"\");\n+                }\n                 self.print_method_sig(ii.ident, &ii.generics, sig, &ii.vis);\n-                self.nbsp();\n-                self.print_block_with_attrs(body, &ii.attrs);\n+                if let Some(body) = body {\n+                    self.nbsp();\n+                    self.print_block_with_attrs(body, &ii.attrs);\n+                } else {\n+                    self.s.word(\";\");\n+                }\n             }\n             ast::ImplItemKind::TyAlias(ref ty) => {\n                 self.print_associated_type(ii.ident, None, Some(ty));"}, {"sha": "bdf70ec46f7d37074a05b19e343b9d9328763376", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -25,7 +25,7 @@ pub enum FnKind<'a> {\n     ItemFn(Ident, &'a FnHeader, &'a Visibility, &'a Block),\n \n     /// E.g., `fn foo(&self)`.\n-    Method(Ident, &'a FnSig, Option<&'a Visibility>, &'a Block),\n+    Method(Ident, &'a FnSig, &'a Visibility, &'a Block),\n \n     /// E.g., `|x, y| body`.\n     Closure(&'a Expr),\n@@ -596,7 +596,7 @@ pub fn walk_trait_item<'a, V: Visitor<'a>>(visitor: &mut V, trait_item: &'a Trai\n             walk_fn_decl(visitor, &sig.decl);\n         }\n         TraitItemKind::Method(ref sig, Some(ref body)) => {\n-            visitor.visit_fn(FnKind::Method(trait_item.ident, sig, None, body),\n+            visitor.visit_fn(FnKind::Method(trait_item.ident, sig, &trait_item.vis, body),\n                              &sig.decl, trait_item.span, trait_item.id);\n         }\n         TraitItemKind::Type(ref bounds, ref default) => {\n@@ -619,8 +619,12 @@ pub fn walk_impl_item<'a, V: Visitor<'a>>(visitor: &mut V, impl_item: &'a ImplIt\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, expr);\n         }\n-        ImplItemKind::Method(ref sig, ref body) => {\n-            visitor.visit_fn(FnKind::Method(impl_item.ident, sig, Some(&impl_item.vis), body),\n+        ImplItemKind::Method(ref sig, None) => {\n+            visitor.visit_fn_header(&sig.header);\n+            walk_fn_decl(visitor, &sig.decl);\n+        }\n+        ImplItemKind::Method(ref sig, Some(ref body)) => {\n+            visitor.visit_fn(FnKind::Method(impl_item.ident, sig, &impl_item.vis, body),\n                              &sig.decl, impl_item.span, impl_item.id);\n         }\n         ImplItemKind::TyAlias(ref ty) => {"}, {"sha": "e8c4f993d4f34b42180213ffaa647723e7da0b8d", "filename": "src/libsyntax_ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fgeneric%2Fmod.rs?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -956,7 +956,7 @@ impl<'a> MethodDef<'a> {\n             vis: respan(trait_lo_sp, ast::VisibilityKind::Inherited),\n             defaultness: ast::Defaultness::Final,\n             ident: method_ident,\n-            kind: ast::ImplItemKind::Method(sig, body_block),\n+            kind: ast::ImplItemKind::Method(sig, Some(body_block)),\n             tokens: None,\n         }\n     }"}, {"sha": "8b1a39a94e67af4a3220c266066a2da857e5b14d", "filename": "src/test/ui/issues/issue-58856-1.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.rs?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -1,6 +1,8 @@\n impl A {\n+    //~^ ERROR cannot find type `A` in this scope\n     fn b(self>\n     //~^ ERROR expected one of `)`, `,`, or `:`, found `>`\n+    //~| ERROR expected `;` or `{`, found `>`\n }\n \n fn main() {}"}, {"sha": "0ea6b0175489045258f49d2446a5a4b1bf85de9c", "filename": "src/test/ui/issues/issue-58856-1.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-58856-1.stderr?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -1,10 +1,23 @@\n error: expected one of `)`, `,`, or `:`, found `>`\n-  --> $DIR/issue-58856-1.rs:2:14\n+  --> $DIR/issue-58856-1.rs:3:14\n    |\n LL |     fn b(self>\n    |         -    ^ help: `)` may belong here\n    |         |\n    |         unclosed delimiter\n \n-error: aborting due to previous error\n+error: expected `;` or `{`, found `>`\n+  --> $DIR/issue-58856-1.rs:3:14\n+   |\n+LL |     fn b(self>\n+   |              ^ expected `;` or `{`\n+\n+error[E0412]: cannot find type `A` in this scope\n+  --> $DIR/issue-58856-1.rs:1:6\n+   |\n+LL | impl A {\n+   |      ^ not found in this scope\n+\n+error: aborting due to 3 previous errors\n \n+For more information about this error, try `rustc --explain E0412`."}, {"sha": "ec3bee0ce682485c23d66e4a56136a8ae57f8926", "filename": "src/test/ui/parser/impl-item-const-semantic-fail.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Ftest%2Fui%2Fparser%2Fimpl-item-const-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Ftest%2Fui%2Fparser%2Fimpl-item-const-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-const-semantic-fail.stderr?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -2,7 +2,9 @@ error: associated constant in `impl` without body\n   --> $DIR/impl-item-const-semantic-fail.rs:6:5\n    |\n LL |     const Y: u8;\n-   |     ^^^^^^^^^^^^ help: provide a definition for the constant: `const Y: u8 = <expr>;`\n+   |     ^^^^^^^^^^^-\n+   |                |\n+   |                help: provide a definition for the constant: `= <expr>;`\n \n error: aborting due to previous error\n "}, {"sha": "16b09d64e8c1786c96500da3c83512eb42fc9321", "filename": "src/test/ui/parser/impl-item-fn-no-body-pass.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Ftest%2Fui%2Fparser%2Fimpl-item-fn-no-body-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Ftest%2Fui%2Fparser%2Fimpl-item-fn-no-body-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-fn-no-body-pass.rs?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+impl X {\n+    fn f();\n+}"}, {"sha": "cb183db59643e454d136b6458b6a46fcab14b25b", "filename": "src/test/ui/parser/impl-item-fn-no-body-semantic-fail.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Ftest%2Fui%2Fparser%2Fimpl-item-fn-no-body-semantic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Ftest%2Fui%2Fparser%2Fimpl-item-fn-no-body-semantic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-fn-no-body-semantic-fail.rs?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -0,0 +1,7 @@\n+fn main() {}\n+\n+struct X;\n+\n+impl X {\n+    fn f(); //~ ERROR associated function in `impl` without body\n+}"}, {"sha": "1acb727368bce2513b836228dd9f953d62dd47ba", "filename": "src/test/ui/parser/impl-item-fn-no-body-semantic-fail.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6403c6c766c704569564b9021071c4917d45a25/src%2Ftest%2Fui%2Fparser%2Fimpl-item-fn-no-body-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f6403c6c766c704569564b9021071c4917d45a25/src%2Ftest%2Fui%2Fparser%2Fimpl-item-fn-no-body-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimpl-item-fn-no-body-semantic-fail.stderr?ref=f6403c6c766c704569564b9021071c4917d45a25", "patch": "@@ -0,0 +1,10 @@\n+error: associated function in `impl` without body\n+  --> $DIR/impl-item-fn-no-body-semantic-fail.rs:6:5\n+   |\n+LL |     fn f();\n+   |     ^^^^^^-\n+   |           |\n+   |           help: provide a definition for the function: `{ <body> }`\n+\n+error: aborting due to previous error\n+"}]}