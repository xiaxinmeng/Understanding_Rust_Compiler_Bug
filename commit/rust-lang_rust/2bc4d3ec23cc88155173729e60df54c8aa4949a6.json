{"sha": "2bc4d3ec23cc88155173729e60df54c8aa4949a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYzRkM2VjMjNjYzg4MTU1MTczNzI5ZTYwZGY1NGM4YWE0OTQ5YTY=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-10-24T21:34:57Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2014-10-25T18:12:19Z"}, "message": "get rid of libc_heap::{malloc_raw, realloc_raw}\n\nThe C standard library functions should be used directly. The quirky\nNULL / zero-size allocation workaround is no longer necessary and was\nadding an extra branch to the allocator code path in a build without\njemalloc. This is a small step towards liballoc being compatible with\nhandling OOM errors instead of aborting (#18292).\n\n[breaking-change]", "tree": {"sha": "46b2d71ffeba2ffa639b8f67c9480617d04aea9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46b2d71ffeba2ffa639b8f67c9480617d04aea9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bc4d3ec23cc88155173729e60df54c8aa4949a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc4d3ec23cc88155173729e60df54c8aa4949a6", "html_url": "https://github.com/rust-lang/rust/commit/2bc4d3ec23cc88155173729e60df54c8aa4949a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bc4d3ec23cc88155173729e60df54c8aa4949a6/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f253bd49e80c809b7c22fd257bcef06a8ca7c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f253bd49e80c809b7c22fd257bcef06a8ca7c30", "html_url": "https://github.com/rust-lang/rust/commit/6f253bd49e80c809b7c22fd257bcef06a8ca7c30"}], "stats": {"total": 96, "additions": 30, "deletions": 66}, "files": [{"sha": "20569d336a85721a668883cc83306cc0af7dda21", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/2bc4d3ec23cc88155173729e60df54c8aa4949a6/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc4d3ec23cc88155173729e60df54c8aa4949a6/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=2bc4d3ec23cc88155173729e60df54c8aa4949a6", "patch": "@@ -213,8 +213,8 @@ mod imp {\n mod imp {\n     use core::cmp;\n     use core::ptr;\n+    use core::ptr::RawPtr;\n     use libc;\n-    use libc_heap;\n     use super::MIN_ALIGN;\n \n     extern {\n@@ -226,7 +226,11 @@ mod imp {\n     #[inline]\n     pub unsafe fn allocate(size: uint, align: uint) -> *mut u8 {\n         if align <= MIN_ALIGN {\n-            libc_heap::malloc_raw(size)\n+            let ptr = libc::malloc(size as libc::size_t);\n+            if ptr.is_null() {\n+                ::oom();\n+            }\n+            ptr as *mut u8\n         } else {\n             let mut out = 0 as *mut libc::c_void;\n             let ret = posix_memalign(&mut out,\n@@ -242,7 +246,11 @@ mod imp {\n     #[inline]\n     pub unsafe fn reallocate(ptr: *mut u8, old_size: uint, size: uint, align: uint) -> *mut u8 {\n         if align <= MIN_ALIGN {\n-            libc_heap::realloc_raw(ptr, size)\n+            let ptr = libc::realloc(ptr as *mut libc::c_void, size as libc::size_t);\n+            if ptr.is_null() {\n+                ::oom();\n+            }\n+            ptr as *mut u8\n         } else {\n             let new_ptr = allocate(size, align);\n             ptr::copy_memory(new_ptr, ptr as *const u8, cmp::min(size, old_size));\n@@ -274,7 +282,6 @@ mod imp {\n mod imp {\n     use libc::{c_void, size_t};\n     use libc;\n-    use libc_heap;\n     use core::ptr::RawPtr;\n     use super::MIN_ALIGN;\n \n@@ -288,7 +295,11 @@ mod imp {\n     #[inline]\n     pub unsafe fn allocate(size: uint, align: uint) -> *mut u8 {\n         if align <= MIN_ALIGN {\n-            libc_heap::malloc_raw(size)\n+            let ptr = libc::malloc(size as size_t);\n+            if ptr.is_null() {\n+                ::oom();\n+            }\n+            ptr as *mut u8\n         } else {\n             let ptr = _aligned_malloc(size as size_t, align as size_t);\n             if ptr.is_null() {\n@@ -301,7 +312,11 @@ mod imp {\n     #[inline]\n     pub unsafe fn reallocate(ptr: *mut u8, _old_size: uint, size: uint, align: uint) -> *mut u8 {\n         if align <= MIN_ALIGN {\n-            libc_heap::realloc_raw(ptr, size)\n+            let ptr = libc::realloc(ptr as *mut c_void, size as size_t);\n+            if ptr.is_null() {\n+                ::oom();\n+            }\n+            ptr as *mut u8\n         } else {\n             let ptr = _aligned_realloc(ptr as *mut c_void, size as size_t,\n                                        align as size_t);"}, {"sha": "c721649ca9d4fbc659638dbe46f682056db014b2", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bc4d3ec23cc88155173729e60df54c8aa4949a6/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc4d3ec23cc88155173729e60df54c8aa4949a6/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=2bc4d3ec23cc88155173729e60df54c8aa4949a6", "patch": "@@ -54,11 +54,8 @@\n //!\n //! ## Heap interfaces\n //!\n-//! The [`heap`](heap/index.html) and [`libc_heap`](libc_heap/index.html)\n-//! modules are the unsafe interfaces to the underlying allocation systems. The\n-//! `heap` module is considered the default heap, and is not necessarily backed\n-//! by libc malloc/free.  The `libc_heap` module is defined to be wired up to\n-//! the system malloc/free.\n+//! The [`heap`](heap/index.html) module defines the low-level interface to the\n+//! default global allocator. It is not compatible with the libc allocator API.\n \n #![crate_name = \"alloc\"]\n #![experimental]\n@@ -90,7 +87,6 @@ pub use boxed as owned;\n // Heaps provided for low-level allocation strategies\n \n pub mod heap;\n-pub mod libc_heap;\n \n // Primitive types using the heaps above\n "}, {"sha": "4f6400630fd9c14aceb5e963c01c1d26c3020db9", "filename": "src/liballoc/libc_heap.rs", "status": "removed", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6f253bd49e80c809b7c22fd257bcef06a8ca7c30/src%2Fliballoc%2Flibc_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f253bd49e80c809b7c22fd257bcef06a8ca7c30/src%2Fliballoc%2Flibc_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flibc_heap.rs?ref=6f253bd49e80c809b7c22fd257bcef06a8ca7c30", "patch": "@@ -1,48 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-\n-//! The global (exchange) heap.\n-\n-use libc::{c_void, size_t, free, malloc, realloc};\n-use core::ptr::{RawPtr, null_mut};\n-\n-/// A wrapper around libc::malloc, aborting on out-of-memory.\n-#[inline]\n-pub unsafe fn malloc_raw(size: uint) -> *mut u8 {\n-    // `malloc(0)` may allocate, but it may also return a null pointer\n-    // http://pubs.opengroup.org/onlinepubs/9699919799/functions/malloc.html\n-    if size == 0 {\n-        null_mut()\n-    } else {\n-        let p = malloc(size as size_t);\n-        if p.is_null() {\n-            ::oom();\n-        }\n-        p as *mut u8\n-    }\n-}\n-\n-/// A wrapper around libc::realloc, aborting on out-of-memory.\n-#[inline]\n-pub unsafe fn realloc_raw(ptr: *mut u8, size: uint) -> *mut u8 {\n-    // `realloc(ptr, 0)` may allocate, but it may also return a null pointer\n-    // http://pubs.opengroup.org/onlinepubs/9699919799/functions/realloc.html\n-    if size == 0 {\n-        free(ptr as *mut c_void);\n-        null_mut()\n-    } else {\n-        let p = realloc(ptr as *mut c_void, size as size_t);\n-        if p.is_null() {\n-            ::oom();\n-        }\n-        p as *mut u8\n-    }\n-}"}, {"sha": "6a33777a413c5d5fa8394c47e18271095b913856", "filename": "src/librustrt/c_str.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2bc4d3ec23cc88155173729e60df54c8aa4949a6/src%2Flibrustrt%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc4d3ec23cc88155173729e60df54c8aa4949a6/src%2Flibrustrt%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Fc_str.rs?ref=2bc4d3ec23cc88155173729e60df54c8aa4949a6", "patch": "@@ -71,7 +71,6 @@ fn main() {\n \n */\n \n-use alloc::libc_heap::malloc_raw;\n use collections::string::String;\n use collections::hash;\n use core::fmt;\n@@ -101,7 +100,8 @@ impl Clone for CString {\n     /// with C's allocator API, rather than the usual shallow clone.\n     fn clone(&self) -> CString {\n         let len = self.len() + 1;\n-        let buf = unsafe { malloc_raw(len) } as *mut libc::c_char;\n+        let buf = unsafe { libc::malloc(len as libc::size_t) } as *mut libc::c_char;\n+        if buf.is_null() { fail!(\"out of memory\") }\n         unsafe { ptr::copy_nonoverlapping_memory(buf, self.buf, len); }\n         CString { buf: buf as *const libc::c_char, owns_buffer_: true }\n     }\n@@ -393,7 +393,8 @@ impl<'a> ToCStr for &'a [u8] {\n \n     unsafe fn to_c_str_unchecked(&self) -> CString {\n         let self_len = self.len();\n-        let buf = malloc_raw(self_len + 1);\n+        let buf = libc::malloc(self_len as libc::size_t + 1) as *mut u8;\n+        if buf.is_null() { fail!(\"out of memory\") }\n \n         ptr::copy_memory(buf, self.as_ptr(), self_len);\n         *buf.offset(self_len as int) = 0;"}, {"sha": "7ec25acb17308af454bb12f65c99d1ec08bc667d", "filename": "src/libstd/c_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc4d3ec23cc88155173729e60df54c8aa4949a6/src%2Flibstd%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc4d3ec23cc88155173729e60df54c8aa4949a6/src%2Flibstd%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fc_vec.rs?ref=2bc4d3ec23cc88155173729e60df54c8aa4949a6", "patch": "@@ -165,11 +165,11 @@ mod tests {\n     use super::CVec;\n     use libc;\n     use ptr;\n-    use rt::libc_heap::malloc_raw;\n \n     fn malloc(n: uint) -> CVec<u8> {\n         unsafe {\n-            let mem = malloc_raw(n);\n+            let mem = libc::malloc(n as libc::size_t);\n+            if mem.is_null() { fail!(\"out of memory\") }\n \n             CVec::new_with_dtor(mem as *mut u8, n,\n                 proc() { libc::free(mem as *mut libc::c_void); })"}, {"sha": "a91c6c572e686c0f8ff073b342846f8c3a9b08ce", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc4d3ec23cc88155173729e60df54c8aa4949a6/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc4d3ec23cc88155173729e60df54c8aa4949a6/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=2bc4d3ec23cc88155173729e60df54c8aa4949a6", "patch": "@@ -62,7 +62,7 @@ pub use self::util::{default_sched_threads, min_stack, running_on_valgrind};\n \n // Reexport functionality from librustrt and other crates underneath the\n // standard library which work together to create the entire runtime.\n-pub use alloc::{heap, libc_heap};\n+pub use alloc::heap;\n pub use rustrt::{task, local, mutex, exclusive, stack, args, rtio, thread};\n pub use rustrt::{Stdio, Stdout, Stderr, begin_unwind, begin_unwind_fmt};\n pub use rustrt::{bookkeeping, at_exit, unwind, DEFAULT_ERROR_CODE, Runtime};"}]}