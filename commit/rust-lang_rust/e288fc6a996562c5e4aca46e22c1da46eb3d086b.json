{"sha": "e288fc6a996562c5e4aca46e22c1da46eb3d086b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyODhmYzZhOTk2NTYyYzVlNGFjYTQ2ZTIyYzFkYTQ2ZWIzZDA4NmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-17T22:16:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-17T22:16:23Z"}, "message": "auto merge of #15515 : pcwalton/rust/cross-borrowing, r=alexcrichton\n\nexcept where trait objects are involved.\r\n\r\nPart of issue #15349, though I'm leaving it open for trait objects.\r\nCross borrowing for trait objects remains because it is needed until we\r\nhave DST.\r\n\r\nThis will break code like:\r\n\r\n    fn foo(x: &int) { ... }\r\n\r\n    let a = box 3i;\r\n    foo(a);\r\n\r\nChange this code to:\r\n\r\n    fn foo(x: &int) { ... }\r\n\r\n    let a = box 3i;\r\n    foo(&*a);\r\n\r\n[breaking-change]\r\n\r\nr? @alexcrichton", "tree": {"sha": "2f26793e5416aa2cef3b93760807543c0c6398d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f26793e5416aa2cef3b93760807543c0c6398d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e288fc6a996562c5e4aca46e22c1da46eb3d086b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e288fc6a996562c5e4aca46e22c1da46eb3d086b", "html_url": "https://github.com/rust-lang/rust/commit/e288fc6a996562c5e4aca46e22c1da46eb3d086b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e288fc6a996562c5e4aca46e22c1da46eb3d086b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d6acc4eea7e305058511c3fda19d459095b7f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d6acc4eea7e305058511c3fda19d459095b7f8", "html_url": "https://github.com/rust-lang/rust/commit/36d6acc4eea7e305058511c3fda19d459095b7f8"}, {"sha": "de70d76373e05fcf0f421cedb185b08de10a714c", "url": "https://api.github.com/repos/rust-lang/rust/commits/de70d76373e05fcf0f421cedb185b08de10a714c", "html_url": "https://github.com/rust-lang/rust/commit/de70d76373e05fcf0f421cedb185b08de10a714c"}], "stats": {"total": 410, "additions": 206, "deletions": 204}, "files": [{"sha": "a6cc9cd0bc281f9a9b6950ca7bdc62349b2f59d2", "filename": "src/doc/guide-lifetimes.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Fdoc%2Fguide-lifetimes.md", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Fdoc%2Fguide-lifetimes.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-lifetimes.md?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -67,7 +67,7 @@ Now we can call `compute_distance()`:\n # let on_the_stack :     Point  =     Point{x: 3.0, y: 4.0};\n # let on_the_heap  : Box<Point> = box Point{x: 7.0, y: 9.0};\n # fn compute_distance(p1: &Point, p2: &Point) -> f64 { 0.0 }\n-compute_distance(&on_the_stack, on_the_heap);\n+compute_distance(&on_the_stack, &*on_the_heap);\n ~~~\n \n Here, the `&` operator takes the address of the variable\n@@ -77,10 +77,9 @@ value. We also call this _borrowing_ the local variable\n `on_the_stack`, because we have created an alias: that is, another\n name for the same data.\n \n-In the case of `on_the_heap`, however, no explicit action is necessary. \n-The compiler will automatically convert a box point to a reference like &point. \n-This is another form of borrowing; in this case, the contents of the owned box \n-are being lent out.\n+Likewise, in the case of `owned_box`,\n+the `&` operator is used in conjunction with the `*` operator\n+to take a reference to the contents of the box.\n \n Whenever a caller lends data to a callee, there are some limitations on what\n the caller can do with the original. For example, if the contents of a"}, {"sha": "17a1114be55f6e0b777baa0398197f6dd436208a", "filename": "src/doc/guide-pointers.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Fdoc%2Fguide-pointers.md", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Fdoc%2Fguide-pointers.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fguide-pointers.md?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -279,7 +279,7 @@ fn main() {\n     let origin =    &Point { x: 0.0, y: 0.0 };\n     let p1     = box Point { x: 5.0, y: 3.0 };\n \n-    println!(\"{}\", compute_distance(origin, p1));\n+    println!(\"{}\", compute_distance(origin, &*p1));\n }\n ~~~\n "}, {"sha": "9fe61eb3fe3b0da14db5f78cb30d4ae48d5cfeef", "filename": "src/doc/rust.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -3243,7 +3243,7 @@ enum List { Nil, Cons(uint, Box<List>) }\n fn is_sorted(list: &List) -> bool {\n     match *list {\n         Nil | Cons(_, box Nil) => true,\n-        Cons(x, ref r @ box Cons(y, _)) => (x <= y) && is_sorted(*r)\n+        Cons(x, ref r @ box Cons(y, _)) => (x <= y) && is_sorted(&**r)\n     }\n }\n "}, {"sha": "4c90e564b584ec127883df86d0141c8b44effff3", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -1470,7 +1470,7 @@ Now we can call `compute_distance()` in various ways:\n # let on_the_stack :     Point  =     Point { x: 3.0, y: 4.0 };\n # let on_the_heap  : Box<Point> = box Point { x: 7.0, y: 9.0 };\n # fn compute_distance(p1: &Point, p2: &Point) -> f64 { 0.0 }\n-compute_distance(&on_the_stack, on_the_heap);\n+compute_distance(&on_the_stack, &*on_the_heap);\n ~~~\n \n Here the `&` operator is used to take the address of the variable\n@@ -1480,11 +1480,9 @@ reference. We also call this _borrowing_ the local variable\n `on_the_stack`, because we are creating an alias: that is, another\n route to the same data.\n \n-In the case of `owned_box`, however, no\n-explicit action is necessary. The compiler will automatically convert\n-a box `box point` to a reference like\n-`&point`. This is another form of borrowing; in this case, the\n-contents of the owned box are being lent out.\n+Likewise, in the case of `owned_box`,\n+the `&` operator is used in conjunction with the `*` operator\n+to take a reference to the contents of the box.\n \n Whenever a value is borrowed, there are some limitations on what you\n can do with the original. For example, if the contents of a variable"}, {"sha": "89f6e934ad2597e78e6e1ce79da9e4d4965d954c", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -67,7 +67,7 @@ impl<T:PartialEq> PartialEq for Box<T> {\n impl<T:PartialOrd> PartialOrd for Box<T> {\n     #[inline]\n     fn partial_cmp(&self, other: &Box<T>) -> Option<Ordering> {\n-        (**self).partial_cmp(*other)\n+        (**self).partial_cmp(&**other)\n     }\n     #[inline]\n     fn lt(&self, other: &Box<T>) -> bool { *(*self) < *(*other) }\n@@ -80,7 +80,9 @@ impl<T:PartialOrd> PartialOrd for Box<T> {\n }\n impl<T: Ord> Ord for Box<T> {\n     #[inline]\n-    fn cmp(&self, other: &Box<T>) -> Ordering { (**self).cmp(*other) }\n+    fn cmp(&self, other: &Box<T>) -> Ordering {\n+        (**self).cmp(&**other)\n+    }\n }\n impl<T: Eq> Eq for Box<T> {}\n "}, {"sha": "ad5ad13167c0e4c50d1d2d529aa52fa269114d95", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -516,7 +516,7 @@ define_iterator! {\n fn deref<'a, K, V>(node: &'a Option<Box<TreeNode<K, V>>>) -> *const TreeNode<K, V> {\n     match *node {\n         Some(ref n) => {\n-            let n: &TreeNode<K, V> = *n;\n+            let n: &TreeNode<K, V> = &**n;\n             n as *const TreeNode<K, V>\n         }\n         None => ptr::null()"}, {"sha": "7163dfa3b16abf6b27035913d63e1eebf60b941c", "filename": "src/libregex_macros/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibregex_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibregex_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex_macros%2Flib.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -623,15 +623,15 @@ fn parse(cx: &mut ExtCtxt, tts: &[ast::TokenTree]) -> Option<String> {\n                 _ => {\n                     cx.span_err(entry.span, format!(\n                         \"expected string literal but got `{}`\",\n-                        pprust::lit_to_string(lit)).as_slice());\n+                        pprust::lit_to_string(&*lit)).as_slice());\n                     return None\n                 }\n             }\n         }\n         _ => {\n             cx.span_err(entry.span, format!(\n                 \"expected string literal but got `{}`\",\n-                pprust::expr_to_string(entry)).as_slice());\n+                pprust::expr_to_string(&*entry)).as_slice());\n             return None\n         }\n     };"}, {"sha": "43aa3f9041fd97d146bbbad40a8a22fe1a6bd835", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -799,7 +799,7 @@ fn print_flowgraph<W:io::Writer>(variants: Vec<borrowck_dot::Variant>,\n     let ty_cx = &analysis.ty_cx;\n     let cfg = match code {\n         blocks::BlockCode(block) => cfg::CFG::new(ty_cx, &*block),\n-        blocks::FnLikeCode(fn_like) => cfg::CFG::new(ty_cx, fn_like.body()),\n+        blocks::FnLikeCode(fn_like) => cfg::CFG::new(ty_cx, &*fn_like.body()),\n     };\n     debug!(\"cfg: {:?}\", cfg);\n "}, {"sha": "a3389ef86e551e8b03962757bd9da3b637e1fcdb", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -1248,7 +1248,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n                     encode_method_sort(ebml_w, 'p');\n                     encode_inlined_item(ecx, ebml_w,\n                                         IIMethodRef(def_id, true, &*m));\n-                    encode_method_argument_names(ebml_w, m.pe_fn_decl());\n+                    encode_method_argument_names(ebml_w, &*m.pe_fn_decl());\n                 }\n             }\n "}, {"sha": "bcd6f3ac91abc8ed64984806e1f2a723538570f6", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -267,7 +267,7 @@ fn enc_sty(w: &mut MemWriter, cx: &ctxt, st: &ty::sty) {\n         }\n         ty::ty_closure(ref f) => {\n             mywrite!(w, \"f\");\n-            enc_closure_ty(w, cx, *f);\n+            enc_closure_ty(w, cx, &**f);\n         }\n         ty::ty_bare_fn(ref f) => {\n             mywrite!(w, \"F\");"}, {"sha": "fd10fd3c35aae4f5fa7f48f51b451bc8ff8e8b89", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -1557,7 +1557,7 @@ fn test_simplification() {\n             return alist {eq_fn: eq_int, data: Vec::new()};\n         }\n     ).unwrap();\n-    let item_in = e::IIItemRef(item);\n+    let item_in = e::IIItemRef(&*item);\n     let item_out = simplify_ast(item_in);\n     let item_exp = ast::IIItem(quote_item!(cx,\n         fn new_int_alist<B>() -> alist<int, B> {\n@@ -1566,7 +1566,8 @@ fn test_simplification() {\n     ).unwrap());\n     match (item_out, item_exp) {\n       (ast::IIItem(item_out), ast::IIItem(item_exp)) => {\n-        assert!(pprust::item_to_string(item_out) == pprust::item_to_string(item_exp));\n+        assert!(pprust::item_to_string(&*item_out) ==\n+                pprust::item_to_string(&*item_exp));\n       }\n       _ => fail!()\n     }"}, {"sha": "5604d33496d9dfc0e6f37d9831abc8b4eaa732b5", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -216,8 +216,13 @@ pub fn build_borrowck_dataflow_data_for_fn<'a>(\n \n     let p = input.fn_parts;\n \n-    let dataflow_data = build_borrowck_dataflow_data(\n-        &mut bccx, &p.kind, p.decl, input.cfg, p.body, p.span, p.id);\n+    let dataflow_data = build_borrowck_dataflow_data(&mut bccx,\n+                                                     &p.kind,\n+                                                     &*p.decl,\n+                                                     input.cfg,\n+                                                     &*p.body,\n+                                                     p.span,\n+                                                     p.id);\n \n     (bccx, dataflow_data)\n }"}, {"sha": "066837afac94a008f1b56aadb3f8ddcc2ecdbb36", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -47,7 +47,9 @@ impl fmt::Show for Matrix {\n \n         let &Matrix(ref m) = self;\n         let pretty_printed_matrix: Vec<Vec<String>> = m.iter().map(|row| {\n-            row.iter().map(|&pat| pat_to_string(pat)).collect::<Vec<String>>()\n+            row.iter()\n+               .map(|&pat| pat_to_string(&*pat))\n+               .collect::<Vec<String>>()\n         }).collect();\n \n         let column_count = m.iter().map(|row| row.len()).max().unwrap_or(0u);"}, {"sha": "33e7554084ac64fb361884a10259e3f6931b1416", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -212,7 +212,7 @@ impl<'a> MarkSymbolVisitor<'a> {\n                 visit::walk_trait_method(self, &*trait_method, ctxt);\n             }\n             ast_map::NodeMethod(method) => {\n-                visit::walk_block(self, method.pe_body(), ctxt);\n+                visit::walk_block(self, &*method.pe_body(), ctxt);\n             }\n             ast_map::NodeForeignItem(foreign_item) => {\n                 visit::walk_foreign_item(self, &*foreign_item, ctxt);\n@@ -520,7 +520,9 @@ impl<'a> Visitor<()> for DeadVisitor<'a> {\n     // Overwrite so that we don't warn the trait method itself.\n     fn visit_trait_method(&mut self, trait_method: &ast::TraitMethod, _: ()) {\n         match *trait_method {\n-            ast::Provided(ref method) => visit::walk_block(self, method.pe_body(), ()),\n+            ast::Provided(ref method) => {\n+                visit::walk_block(self, &*method.pe_body(), ())\n+            }\n             ast::Required(_) => ()\n         }\n     }"}, {"sha": "e404ce85663757beddd3c7115039788b0e1affc6", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -316,14 +316,14 @@ impl<'a> ReachableContext<'a> {\n                         // Keep going, nothing to get exported\n                     }\n                     ast::Provided(ref method) => {\n-                        visit::walk_block(self, method.pe_body(), ())\n+                        visit::walk_block(self, &*method.pe_body(), ())\n                     }\n                 }\n             }\n             ast_map::NodeMethod(method) => {\n                 let did = self.tcx.map.get_parent_did(search_item);\n                 if method_might_be_inlined(self.tcx, &*method, did) {\n-                    visit::walk_block(self, method.pe_body(), ())\n+                    visit::walk_block(self, &*method.pe_body(), ())\n                 }\n             }\n             // Nothing to recurse on for these"}, {"sha": "5bea24dfa90f6d53385099d5dbdbb7f2c7349822", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -3707,7 +3707,7 @@ impl<'a> Resolver<'a> {\n \n                                 match ty_m.explicit_self.node {\n                                     SelfExplicit(ref typ, _) => {\n-                                        this.resolve_type(*typ)\n+                                        this.resolve_type(&**typ)\n                                     }\n                                     _ => {}\n                                 }\n@@ -4044,7 +4044,7 @@ impl<'a> Resolver<'a> {\n                                                 rib_kind);\n \n         match method.pe_explicit_self().node {\n-            SelfExplicit(ref typ, _) => self.resolve_type(*typ),\n+            SelfExplicit(ref typ, _) => self.resolve_type(&**typ),\n             _ => {}\n         }\n "}, {"sha": "0aeb90df11a264b5affe441266f2aaffa046937f", "filename": "src/librustc/middle/save/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fsave%2Fmod.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -356,9 +356,10 @@ impl <'l> DxrVisitor<'l> {\n         for arg in method.pe_fn_decl().inputs.iter() {\n             self.visit_ty(&*arg.ty, e);\n         }\n-        self.visit_ty(method.pe_fn_decl().output, e);\n+        self.visit_ty(&*method.pe_fn_decl().output, e);\n         // walk the fn body\n-        self.visit_block(method.pe_body(), DxrVisitorEnv::new_nested(method.id));\n+        self.visit_block(&*method.pe_body(),\n+                         DxrVisitorEnv::new_nested(method.id));\n \n         self.process_generic_params(method.pe_generics(),\n                                     method.span,"}, {"sha": "75224883cf37f1b312a89fc05a1a0e180573c78c", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -491,7 +491,7 @@ fn enter_default<'a, 'b>(\n \n     // Collect all of the matches that can match against anything.\n     enter_match(bcx, dm, m, col, val, |pats| {\n-        if pat_is_binding_or_wild(dm, pats[col]) {\n+        if pat_is_binding_or_wild(dm, &*pats[col]) {\n             Some(Vec::from_slice(pats.slice_to(col)).append(pats.slice_from(col + 1)))\n         } else {\n             None\n@@ -546,8 +546,10 @@ fn enter_opt<'a, 'b>(\n     let _indenter = indenter();\n \n     let ctor = match opt {\n-        &lit(x) => check_match::ConstantValue(const_eval::eval_const_expr(\n-            bcx.tcx(), lit_to_expr(bcx.tcx(), &x))),\n+        &lit(x) => {\n+            check_match::ConstantValue(const_eval::eval_const_expr(\n+                bcx.tcx(), &*lit_to_expr(bcx.tcx(), &x)))\n+        }\n         &range(ref lo, ref hi) => check_match::ConstantRange(\n             const_eval::eval_const_expr(bcx.tcx(), &**lo),\n             const_eval::eval_const_expr(bcx.tcx(), &**hi)"}, {"sha": "ba44314d962acd6e3d00bcf50aa69e7713894b3c", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -68,8 +68,13 @@ pub fn trans_impl(ccx: &CrateContext,\n     for method in methods.iter() {\n         if method.pe_generics().ty_params.len() == 0u {\n             let llfn = get_item_val(ccx, method.id);\n-            trans_fn(ccx, method.pe_fn_decl(), method.pe_body(),\n-                     llfn, &param_substs::empty(), method.id, []);\n+            trans_fn(ccx,\n+                     &*method.pe_fn_decl(),\n+                     &*method.pe_body(),\n+                     llfn,\n+                     &param_substs::empty(),\n+                     method.id,\n+                     []);\n         } else {\n             let mut v = TransItemVisitor{ ccx: ccx };\n             visit::walk_method_helper(&mut v, &**method, ());"}, {"sha": "95ec43738308ebe04cd04597a5f5337bb64eed52", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -2038,7 +2038,7 @@ pub fn type_contents(cx: &ctxt, ty: t) -> TypeContents {\n             }\n \n             ty_closure(ref c) => {\n-                closure_contents(cx, *c)\n+                closure_contents(cx, &**c)\n             }\n \n             ty_box(typ) => {"}, {"sha": "6d215282cc45d34e7ddc6c4d8032218446041b78", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -1018,7 +1018,7 @@ fn determine_explicit_self_category<AC:AstConv,\n         }\n         ast::SelfUniq(_) => ty::ByBoxExplicitSelfCategory,\n         ast::SelfExplicit(ast_type, _) => {\n-            let explicit_type = ast_ty_to_ty(this, rscope, ast_type);\n+            let explicit_type = ast_ty_to_ty(this, rscope, &*ast_type);\n \n             {\n                 let inference_context = infer::new_infer_ctxt(this.tcx());"}, {"sha": "3b860be0f0134a0c40211bec73916807ebfd03dc", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 17, "deletions": 9, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -764,7 +764,12 @@ fn check_method_body(ccx: &CrateCtxt,\n \n     let fty = ty::node_id_to_type(ccx.tcx, method.id);\n \n-    check_bare_fn(ccx, method.pe_fn_decl(), method.pe_body(), method.id, fty, param_env);\n+    check_bare_fn(ccx,\n+                  &*method.pe_fn_decl(),\n+                  &*method.pe_body(),\n+                  method.id,\n+                  fty,\n+                  param_env);\n }\n \n fn check_impl_methods_against_trait(ccx: &CrateCtxt,\n@@ -2370,7 +2375,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n \n         if ty::type_is_integral(lhs_t) && ast_util::is_shift_binop(op) {\n             // Shift is a special case: rhs must be uint, no matter what lhs is\n-            check_expr_has_type(fcx, rhs, ty::mk_uint());\n+            check_expr_has_type(fcx, &*rhs, ty::mk_uint());\n             fcx.write_ty(expr.id, lhs_t);\n             return;\n         }\n@@ -2957,7 +2962,7 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n       }\n \n       ast::ExprLit(lit) => {\n-        let typ = check_lit(fcx, lit, expected);\n+        let typ = check_lit(fcx, &*lit, expected);\n         fcx.write_ty(id, typ);\n       }\n       ast::ExprBinary(op, ref lhs, ref rhs) => {\n@@ -3164,8 +3169,11 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         fcx.write_bot(id);\n       }\n       ast::ExprParen(a) => {\n-        check_expr_with_expectation_and_lvalue_pref(fcx, a, expected, lvalue_pref);\n-        fcx.write_ty(id, fcx.expr_ty(a));\n+        check_expr_with_expectation_and_lvalue_pref(fcx,\n+                                                    &*a,\n+                                                    expected,\n+                                                    lvalue_pref);\n+        fcx.write_ty(id, fcx.expr_ty(&*a));\n       }\n       ast::ExprAssign(ref lhs, ref rhs) => {\n         check_expr_with_lvalue_pref(fcx, &**lhs, PreferMutLvalue);\n@@ -3326,8 +3334,8 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n                 Some(ref fs) if i < fs.len() => ExpectHasType(*fs.get(i)),\n                 _ => NoExpectation\n             };\n-            check_expr_with_expectation(fcx, *e, opt_hint);\n-            let t = fcx.expr_ty(*e);\n+            check_expr_with_expectation(fcx, &**e, opt_hint);\n+            let t = fcx.expr_ty(&**e);\n             err_field = err_field || ty::type_is_error(t);\n             bot_field = bot_field || ty::type_is_bot(t);\n             t\n@@ -3674,8 +3682,8 @@ fn check_block_with_expected(fcx: &FnCtxt,\n                              e.span,\n                              \"unreachable expression\".to_string());\n             }\n-            check_expr_with_expectation(fcx, e, expected);\n-              let ety = fcx.expr_ty(e);\n+            check_expr_with_expectation(fcx, &*e, expected);\n+              let ety = fcx.expr_ty(&*e);\n               fcx.write_ty(blk.id, ety);\n               if any_err {\n                   fcx.write_error(blk.id);"}, {"sha": "906cc1e0255aa53bdd96e4e431751ee80cdd7f1e", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -215,9 +215,15 @@ pub fn ensure_trait_methods(ccx: &CrateCtxt,\n \n                             &ast::Provided(ref m) => {\n                                 ty_method_of_trait_method(\n-                                    ccx, trait_id, &trait_def.generics,\n-                                    &m.id, &m.pe_ident(), m.pe_explicit_self(),\n-                                    m.pe_generics(), &m.pe_fn_style(), m.pe_fn_decl())\n+                                    ccx,\n+                                    trait_id,\n+                                    &trait_def.generics,\n+                                    &m.id,\n+                                    &m.pe_ident(),\n+                                    m.pe_explicit_self(),\n+                                    m.pe_generics(),\n+                                    &m.pe_fn_style(),\n+                                    &*m.pe_fn_decl())\n                             }\n                         });\n \n@@ -383,7 +389,7 @@ fn convert_methods(ccx: &CrateCtxt,\n                                   m.pe_fn_style(),\n                                   untransformed_rcvr_ty,\n                                   *m.pe_explicit_self(),\n-                                  m.pe_fn_decl());\n+                                  &*m.pe_fn_decl());\n \n         // if the method specifies a visibility, use that, otherwise\n         // inherit the visibility from the impl (so `foo` in `pub impl\n@@ -1295,7 +1301,7 @@ fn check_method_self_type<RS:RegionScope>(\n                           explicit_self: &ast::ExplicitSelf) {\n     match explicit_self.node {\n         ast::SelfExplicit(ref ast_type, _) => {\n-            let typ = crate_context.to_ty(rs, *ast_type);\n+            let typ = crate_context.to_ty(rs, &**ast_type);\n             let base_type = match ty::get(typ).sty {\n                 ty::ty_rptr(_, tm) => tm.ty,\n                 ty::ty_uniq(typ) => typ,"}, {"sha": "03890250f77013c39602e086f3b22b2945a4a99f", "filename": "src/librustc/middle/typeck/infer/coercion.rs", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcoercion.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -76,7 +76,6 @@ use util::common::indenter;\n use util::ppaux::Repr;\n \n use syntax::abi;\n-use syntax::ast::MutImmutable;\n use syntax::ast;\n \n // Note: Coerce is not actually a combiner, in that it does not\n@@ -248,12 +247,7 @@ impl<'f> Coerce<'f> {\n         let r_borrow = self.get_ref().infcx.next_region_var(coercion);\n \n         let inner_ty = match *sty_a {\n-            ty::ty_box(typ) | ty::ty_uniq(typ) => {\n-                if mt_b.mutbl == ast::MutMutable {\n-                    return Err(ty::terr_mutability)\n-                }\n-                typ\n-            }\n+            ty::ty_box(_) | ty::ty_uniq(_) => return Err(ty::terr_mismatch),\n             ty::ty_rptr(_, mt_a) => mt_a.ty,\n             _ => {\n                 return self.subtype(a, b);\n@@ -280,23 +274,9 @@ impl<'f> Coerce<'f> {\n                b.repr(self.get_ref().infcx.tcx));\n \n         match *sty_a {\n-            ty::ty_uniq(t) => match ty::get(t).sty {\n-                ty::ty_str => {}\n-                _ => return self.subtype(a, b),\n-            },\n-            _ => {\n-                return self.subtype(a, b);\n-            }\n-        };\n-\n-        let coercion = Coercion(self.get_ref().trace.clone());\n-        let r_a = self.get_ref().infcx.next_region_var(coercion);\n-        let a_borrowed = ty::mk_str_slice(self.get_ref().infcx.tcx, r_a, ast::MutImmutable);\n-        if_ok!(self.subtype(a_borrowed, b));\n-        Ok(Some(AutoDerefRef(AutoDerefRef {\n-            autoderefs: 0,\n-            autoref: Some(AutoBorrowVec(r_a, MutImmutable))\n-        })))\n+            ty::ty_uniq(_) => return Err(ty::terr_mismatch),\n+            _ => return self.subtype(a, b),\n+        }\n     }\n \n     pub fn coerce_borrowed_vector(&self,\n@@ -313,7 +293,8 @@ impl<'f> Coerce<'f> {\n         let coercion = Coercion(self.get_ref().trace.clone());\n         let r_borrow = self.get_ref().infcx.next_region_var(coercion);\n         let ty_inner = match *sty_a {\n-            ty::ty_uniq(t) | ty::ty_ptr(ty::mt{ty: t, ..}) |\n+            ty::ty_uniq(_) => return Err(ty::terr_mismatch),\n+            ty::ty_ptr(ty::mt{ty: t, ..}) |\n             ty::ty_rptr(_, ty::mt{ty: t, ..}) => match ty::get(t).sty {\n                 ty::ty_vec(mt, None) => mt.ty,\n                 _ => {"}, {"sha": "d82e6e74778e5d7df032b7be9c0fa3305dcb018c", "filename": "src/librustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -552,7 +552,7 @@ pub fn super_tys<C:Combine>(this: &C, a: ty::t, b: ty::t) -> cres<ty::t> {\n       }\n \n       (&ty::ty_closure(ref a_fty), &ty::ty_closure(ref b_fty)) => {\n-        this.closure_tys(*a_fty, *b_fty).and_then(|fty| {\n+        this.closure_tys(&**a_fty, &**b_fty).and_then(|fty| {\n             Ok(ty::mk_closure(tcx, fty))\n         })\n       }"}, {"sha": "30fffc42a3f97f1b28bac0722d7d39300370bfcb", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -30,8 +30,8 @@ use middle::ty_fold::TypeFolder;\n use middle::typeck::check::regionmanip::replace_late_bound_regions_in_fn_sig;\n use middle::typeck::infer::coercion::Coerce;\n use middle::typeck::infer::combine::{Combine, CombineFields, eq_tys};\n-use middle::typeck::infer::region_inference::{RegionVarBindings,\n-                                              RegionSnapshot};\n+use middle::typeck::infer::region_inference::{RegionSnapshot};\n+use middle::typeck::infer::region_inference::{RegionVarBindings};\n use middle::typeck::infer::resolve::{resolver};\n use middle::typeck::infer::sub::Sub;\n use middle::typeck::infer::lub::Lub;"}, {"sha": "54ea826f10920c42b841425c7b2878fc78c46c39", "filename": "src/librustc/middle/typeck/infer/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Ftest.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -174,7 +174,7 @@ impl<'a> Env<'a> {\n             assert!(idx < names.len());\n             for item in m.items.iter() {\n                 if item.ident.user_string(this.tcx) == names[idx] {\n-                    return search(this, *item, idx+1, names);\n+                    return search(this, &**item, idx+1, names);\n                 }\n             }\n             return None;"}, {"sha": "8b8e37fe280d90db2da9a1df82835aa9dbf85997", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -374,7 +374,7 @@ pub fn ty_to_string(cx: &ctxt, typ: t) -> String {\n         format!(\"({})\", strs.connect(\",\"))\n       }\n       ty_closure(ref f) => {\n-          closure_to_string(cx, *f)\n+          closure_to_string(cx, &**f)\n       }\n       ty_bare_fn(ref f) => {\n           bare_fn_to_string(cx, f.fn_style, f.abi, None, &f.sig)"}, {"sha": "f1c1784146a84b930c9afe2ee1d76401078ee9c8", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -954,7 +954,9 @@ impl<'a> MethodDef<'a> {\n                 // expressions for referencing every field of every\n                 // Self arg, assuming all are instances of VariantK.\n                 // Build up code associated with such a case.\n-                let substructure = EnumMatching(index, variant, field_tuples);\n+                let substructure = EnumMatching(index,\n+                                                &*variant,\n+                                                field_tuples);\n                 let arm_expr = self.call_substructure_method(\n                     cx, trait_, type_ident, self_args, nonself_args,\n                     &substructure);"}, {"sha": "a098139b36dcb5b64d49f82117fced0cbec96502", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -166,14 +166,14 @@ pub fn expand_expr(e: Gc<ast::Expr>, fld: &mut MacroExpander) -> Gc<ast::Expr> {\n \n         ast::ExprFnBlock(fn_decl, block) => {\n             let (rewritten_fn_decl, rewritten_block)\n-                = expand_and_rename_fn_decl_and_block(fn_decl, block, fld);\n+                = expand_and_rename_fn_decl_and_block(&*fn_decl, block, fld);\n             let new_node = ast::ExprFnBlock(rewritten_fn_decl, rewritten_block);\n             box(GC) ast::Expr{id:e.id, node: new_node, span: fld.new_span(e.span)}\n         }\n \n         ast::ExprProc(fn_decl, block) => {\n             let (rewritten_fn_decl, rewritten_block)\n-                = expand_and_rename_fn_decl_and_block(fn_decl, block, fld);\n+                = expand_and_rename_fn_decl_and_block(&*fn_decl, block, fld);\n             let new_node = ast::ExprProc(rewritten_fn_decl, rewritten_block);\n             box(GC) ast::Expr{id:e.id, node: new_node, span: fld.new_span(e.span)}\n         }\n@@ -422,7 +422,7 @@ fn expand_item_underscore(item: &ast::Item_, fld: &mut MacroExpander) -> ast::It\n     match *item {\n         ast::ItemFn(decl, fn_style, abi, ref generics, body) => {\n             let (rewritten_fn_decl, rewritten_body)\n-                = expand_and_rename_fn_decl_and_block(decl,body,fld);\n+                = expand_and_rename_fn_decl_and_block(&*decl, body, fld);\n             let expanded_generics = fold::fold_generics(generics,fld);\n             ast::ItemFn(rewritten_fn_decl, fn_style, abi, expanded_generics, rewritten_body)\n         }\n@@ -572,7 +572,9 @@ fn expand_stmt(s: &Stmt, fld: &mut MacroExpander) -> SmallVector<Gc<Stmt>> {\n     };\n     let expanded_stmt = match expand_mac_invoc(mac,&s.span,\n                                                 |r|{r.make_stmt()},\n-                                                |sts,mrk|{mark_stmt(sts,mrk)},\n+                                                |sts,mrk| {\n+                                                    mark_stmt(&*sts,mrk)\n+                                                },\n                                                 fld) {\n         Some(stmt) => stmt,\n         None => {\n@@ -628,7 +630,7 @@ fn expand_non_macro_stmt(s: &Stmt, fld: &mut MacroExpander)\n                     // names, as well... but that should be okay, as long as\n                     // the new names are gensyms for the old ones.\n                     // generate fresh names, push them to a new pending list\n-                    let idents = pattern_bindings(expanded_pat);\n+                    let idents = pattern_bindings(&*expanded_pat);\n                     let mut new_pending_renames =\n                         idents.iter().map(|ident| (*ident, fresh_name(ident))).collect();\n                     // rewrite the pattern using the new names (the old\n@@ -677,7 +679,7 @@ fn expand_arm(arm: &ast::Arm, fld: &mut MacroExpander) -> ast::Arm {\n     // all of the pats must have the same set of bindings, so use the\n     // first one to extract them and generate new names:\n     let first_pat = expanded_pats.get(0);\n-    let idents = pattern_bindings(*first_pat);\n+    let idents = pattern_bindings(&**first_pat);\n     let new_renames =\n         idents.iter().map(|id| (*id,fresh_name(id))).collect();\n     // apply the renaming, but only to the PatIdents:\n@@ -732,7 +734,7 @@ fn pattern_bindings(pat : &ast::Pat) -> Vec<ast::Ident> {\n fn fn_decl_arg_bindings(fn_decl: &ast::FnDecl) -> Vec<ast::Ident> {\n     let mut pat_idents = PatIdentFinder{ident_accumulator:Vec::new()};\n     for arg in fn_decl.inputs.iter() {\n-        pat_idents.visit_pat(arg.pat,());\n+        pat_idents.visit_pat(&*arg.pat, ());\n     }\n     pat_idents.ident_accumulator\n }\n@@ -910,7 +912,7 @@ fn expand_method(m: &ast::Method, fld: &mut MacroExpander) -> SmallVector<Gc<ast\n     match m.node {\n         ast::MethDecl(ident, ref generics, ref explicit_self, fn_style, decl, body, vis) => {\n             let (rewritten_fn_decl, rewritten_body)\n-                = expand_and_rename_fn_decl_and_block(decl,body,fld);\n+                = expand_and_rename_fn_decl_and_block(&*decl,body,fld);\n             SmallVector::one(box(GC) ast::Method {\n                     attrs: m.attrs.iter().map(|a| fld.fold_attribute(*a)).collect(),\n                     id: id,\n@@ -951,12 +953,12 @@ fn expand_and_rename_fn_decl_and_block(fn_decl: &ast::FnDecl, block: Gc<ast::Blo\n                                        fld: &mut MacroExpander)\n     -> (Gc<ast::FnDecl>, Gc<ast::Block>) {\n     let expanded_decl = fld.fold_fn_decl(fn_decl);\n-    let idents = fn_decl_arg_bindings(expanded_decl);\n+    let idents = fn_decl_arg_bindings(&*expanded_decl);\n     let renames =\n         idents.iter().map(|id : &ast::Ident| (*id,fresh_name(id))).collect();\n     // first, a renamer for the PatIdents, for the fn_decl:\n     let mut rename_pat_fld = PatIdentRenamer{renames: &renames};\n-    let rewritten_fn_decl = rename_pat_fld.fold_fn_decl(expanded_decl);\n+    let rewritten_fn_decl = rename_pat_fld.fold_fn_decl(&*expanded_decl);\n     // now, a renamer for *all* idents, for the body:\n     let mut rename_fld = IdentRenamer{renames: &renames};\n     let rewritten_body = fld.fold_block(rename_fld.fold_block(block));\n@@ -999,7 +1001,7 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n     }\n \n     fn fold_method(&mut self, method: Gc<ast::Method>) -> SmallVector<Gc<ast::Method>> {\n-        expand_method(method, self)\n+        expand_method(&*method, self)\n     }\n \n     fn new_span(&mut self, span: Span) -> Span {\n@@ -1660,7 +1662,7 @@ foo_module!()\n     fn pat_idents(){\n         let pat = string_to_pat(\n             \"(a,Foo{x:c @ (b,9),y:Bar(4,d)})\".to_string());\n-        let idents = pattern_bindings(pat);\n+        let idents = pattern_bindings(&*pat);\n         assert_eq!(idents, strs_to_idents(vec!(\"a\",\"c\",\"b\",\"d\")));\n     }\n "}, {"sha": "5467afab9f515e6d2f5299b1dedb61601003b388", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -472,7 +472,7 @@ fn fold_interpolated<T: Folder>(nt : &token::Nonterminal, fld: &mut T) -> token:\n                           .expect_one(\"expected fold to produce exactly one item\")),\n         token::NtBlock(block) => token::NtBlock(fld.fold_block(block)),\n         token::NtStmt(stmt) =>\n-            token::NtStmt(fld.fold_stmt(stmt)\n+            token::NtStmt(fld.fold_stmt(&*stmt)\n                           // this is probably okay, because the only folds likely\n                           // to peek inside interpolated nodes will be renamings/markings,\n                           // which map single items to single items\n@@ -483,8 +483,8 @@ fn fold_interpolated<T: Folder>(nt : &token::Nonterminal, fld: &mut T) -> token:\n         token::NtIdent(ref id, is_mod_name) =>\n             token::NtIdent(box fld.fold_ident(**id),is_mod_name),\n         token::NtMeta(meta_item) => token::NtMeta(fold_meta_item_(meta_item,fld)),\n-        token::NtPath(ref path) => token::NtPath(box fld.fold_path(*path)),\n-        token::NtTT(tt) => token::NtTT(box (GC) fold_tt(tt,fld)),\n+        token::NtPath(ref path) => token::NtPath(box fld.fold_path(&**path)),\n+        token::NtTT(tt) => token::NtTT(box (GC) fold_tt(&*tt,fld)),\n         // it looks to me like we can leave out the matchers: token::NtMatchers(matchers)\n         _ => (*nt).clone()\n     }"}, {"sha": "a77f24f98f81803eb6ab1317c4904dbe0d7dfbfa", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -502,7 +502,9 @@ impl<'a> Parser<'a> {\n                        inedible: &[token::Token]) {\n         debug!(\"commit_stmt {:?}\", s);\n         let _s = s; // unused, but future checks might want to inspect `s`.\n-        if self.last_token.as_ref().map_or(false, |t| is_ident_or_path(*t)) {\n+        if self.last_token\n+               .as_ref()\n+               .map_or(false, |t| is_ident_or_path(&**t)) {\n             let expected = edible.iter().map(|x| (*x).clone()).collect::<Vec<_>>()\n                            .append(inedible.as_slice());\n             self.check_for_erroneous_unit_struct_expecting("}, {"sha": "10caaea86cf4bc13f39d7a3be1d2d91de8268af2", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -1862,7 +1862,7 @@ impl<'a> State<'a> {\n             ast::SelfExplicit(ref typ, _) => {\n                 try!(word(&mut self.s, \"self\"));\n                 try!(self.word_space(\":\"));\n-                try!(self.print_type(*typ));\n+                try!(self.print_type(&**typ));\n             }\n         }\n         return Ok(true);"}, {"sha": "cd953607ea22b02b2f181b2ccc5b7bf312bcf3e1", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -215,7 +215,7 @@ pub fn walk_explicit_self<E: Clone, V: Visitor<E>>(visitor: &mut V,\n         SelfRegion(ref lifetime, _, _) => {\n             visitor.visit_opt_lifetime_ref(explicit_self.span, lifetime, env)\n         }\n-        SelfExplicit(ref typ, _) => visitor.visit_ty(*typ, env.clone()),\n+        SelfExplicit(ref typ, _) => visitor.visit_ty(&**typ, env.clone()),\n     }\n }\n \n@@ -565,8 +565,8 @@ pub fn walk_method_helper<E: Clone, V: Visitor<E>>(visitor: &mut V,\n         MethDecl(ident, ref generics, _, _, decl, body, _) => {\n             visitor.visit_ident(method.span, ident, env.clone());\n             visitor.visit_fn(&FkMethod(ident, generics, method),\n-                             decl,\n-                             body,\n+                             &*decl,\n+                             &*body,\n                              method.span,\n                              method.id,\n                              env.clone());"}, {"sha": "ebec59924e8f33094cc9e22d03c121401f3d4ca7", "filename": "src/libterm/terminfo/searcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Flibterm%2Fterminfo%2Fsearcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fsearcher.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -79,7 +79,7 @@ pub fn get_dbpath_for_term(term: &str) -> Option<Box<Path>> {\n pub fn open(term: &str) -> Result<File, String> {\n     match get_dbpath_for_term(term) {\n         Some(x) => {\n-            match File::open(x) {\n+            match File::open(&*x) {\n                 Ok(file) => Ok(file),\n                 Err(e) => Err(format!(\"error opening file: {}\", e)),\n             }"}, {"sha": "ab2fc6c67b40171e2b3d55b44cf76b5d53d621cb", "filename": "src/test/compile-fail/borrowck-bad-nested-calls-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-free.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -30,7 +30,7 @@ fn implicit() {\n     //    evaluated, but it gets freed when evaluating the second\n     //    argument!\n     add(\n-        a,\n+        &*a,\n         rewrite(&mut a)); //~ ERROR cannot borrow\n }\n "}, {"sha": "708eed0d113bdae823c8ca514744d6268ce4b11a", "filename": "src/test/compile-fail/borrowck-bad-nested-calls-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-bad-nested-calls-move.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -30,7 +30,7 @@ fn implicit() {\n     //    evaluated, but it gets moved when evaluating the second\n     //    argument!\n     add(\n-        a,\n+        &*a,\n         a); //~ ERROR cannot move\n }\n "}, {"sha": "735d9ece9b1a500844cf22701ee8f9412cfeee25", "filename": "src/test/compile-fail/borrowck-closures-use-after-free.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-closures-use-after-free.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -28,5 +28,5 @@ fn main() {\n   let test = |foo: &Foo| {\n     ptr = box Foo { x: ptr.x + 1 };\n   };\n-  test(ptr); //~ ERROR cannot borrow `*ptr`\n+  test(&*ptr); //~ ERROR cannot borrow `*ptr`\n }"}, {"sha": "12e1240d10d633ed60cd64f8dfca1c5c2d409278", "filename": "src/test/compile-fail/borrowck-lend-flow-loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-loop.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -31,7 +31,7 @@ fn loop_overarching_alias_mut() {\n     let mut x = &mut v;\n     **x += 1;\n     loop {\n-        borrow(v); //~ ERROR cannot borrow\n+        borrow(&*v); //~ ERROR cannot borrow\n     }\n }\n \n@@ -41,7 +41,7 @@ fn block_overarching_alias_mut() {\n     let mut v = box 3;\n     let mut x = &mut v;\n     for _ in range(0i, 3) {\n-        borrow(v); //~ ERROR cannot borrow\n+        borrow(&*v); //~ ERROR cannot borrow\n     }\n     *x = box 5;\n }\n@@ -105,7 +105,7 @@ fn while_aliased_mut_cond(cond: bool, cond2: bool) {\n     let mut x = &mut w;\n     while cond {\n         **x += 1;\n-        borrow(v); //~ ERROR cannot borrow\n+        borrow(&*v); //~ ERROR cannot borrow\n         if cond2 {\n             x = &mut v; //~ ERROR cannot borrow\n         }"}, {"sha": "bfa890ada9f1925fc44611c2b15dfd6080a4e7e4", "filename": "src/test/compile-fail/borrowck-loan-blocks-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-mut-uniq.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -14,7 +14,7 @@ fn borrow(v: &int, f: |x: &int|) {\n \n fn box_imm() {\n     let mut v = box 3;\n-    borrow(v,\n+    borrow(&*v,\n            |w| { //~ ERROR cannot borrow `v` as mutable\n             v = box 4;\n             assert_eq!(*v, 3);"}, {"sha": "b9dc7953580833b18bf3df8f3f3ce612afbb3949", "filename": "src/test/compile-fail/borrowck-preserve-box-in-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-field.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -25,7 +25,7 @@ struct F { f: Box<int> }\n \n pub fn main() {\n     let mut x = box(GC) F {f: box 3};\n-    borrow(x.f, |b_x| {\n+    borrow(&*x.f, |b_x| {\n     //~^ ERROR cannot borrow `x` as mutable because `*x.f` is also borrowed as immutable\n         assert_eq!(*b_x, 3);\n         assert_eq!(&(*x.f) as *const int, &(*b_x) as *const int);"}, {"sha": "38c80f293ef248c1138b5b4b84fefab5ab41d6ef", "filename": "src/test/compile-fail/borrowck-preserve-box-in-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box-in-uniq.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -25,7 +25,7 @@ struct F { f: Box<int> }\n \n pub fn main() {\n     let mut x = box box(GC) F{f: box 3};\n-    borrow(x.f, |b_x| {\n+    borrow(&*x.f, |b_x| {\n     //~^ ERROR cannot borrow `x` as mutable because `*x.f` is also borrowed as immutable\n         assert_eq!(*b_x, 3);\n         assert_eq!(&(*x.f) as *const int, &(*b_x) as *const int);"}, {"sha": "d838851e922ca21feba4359d108b1919f4eabce2", "filename": "src/test/compile-fail/borrowck-preserve-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-box.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -23,7 +23,7 @@ fn borrow(x: &int, f: |x: &int|) {\n \n pub fn main() {\n     let mut x = box(GC) 3;\n-    borrow(x, |b_x| {\n+    borrow(&*x, |b_x| {\n     //~^ ERROR cannot borrow `x` as mutable because `*x` is also borrowed as immutable\n         assert_eq!(*b_x, 3);\n         assert_eq!(&(*x) as *const int, &(*b_x) as *const int);"}, {"sha": "d00bded2d79cafc722811ffd699d2a5425e34779", "filename": "src/test/compile-fail/borrowck-preserve-expl-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-preserve-expl-deref.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -25,7 +25,7 @@ struct F { f: Box<int> }\n \n pub fn main() {\n     let mut x = box(GC) F {f: box 3};\n-    borrow((*x).f, |b_x| {\n+    borrow(&*(*x).f, |b_x| {\n     //~^ ERROR cannot borrow `x` as mutable because `*x.f` is also borrowed as immutable\n         assert_eq!(*b_x, 3);\n         assert_eq!(&(*x.f) as *const int, &(*b_x) as *const int);"}, {"sha": "9785b6a8f69a349a704509a65ce47f20b80de6e8", "filename": "src/test/compile-fail/borrowck-uniq-via-lend.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-uniq-via-lend.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -13,48 +13,48 @@ fn borrow(_v: &int) {}\n \n fn local() {\n     let mut v = box 3i;\n-    borrow(v);\n+    borrow(&*v);\n }\n \n fn local_rec() {\n     struct F { f: Box<int> }\n     let mut v = F {f: box 3};\n-    borrow(v.f);\n+    borrow(&*v.f);\n }\n \n fn local_recs() {\n     struct F { f: G }\n     struct G { g: H }\n     struct H { h: Box<int> }\n     let mut v = F {f: G {g: H {h: box 3}}};\n-    borrow(v.f.g.h);\n+    borrow(&*v.f.g.h);\n }\n \n fn aliased_imm() {\n     let mut v = box 3i;\n     let _w = &v;\n-    borrow(v);\n+    borrow(&*v);\n }\n \n fn aliased_mut() {\n     let mut v = box 3i;\n     let _w = &mut v;\n-    borrow(v); //~ ERROR cannot borrow `*v`\n+    borrow(&*v); //~ ERROR cannot borrow `*v`\n }\n \n fn aliased_other() {\n     let mut v = box 3i;\n     let mut w = box 4i;\n     let _x = &mut w;\n-    borrow(v);\n+    borrow(&*v);\n }\n \n fn aliased_other_reassign() {\n     let mut v = box 3i;\n     let mut w = box 4i;\n     let mut _x = &mut w;\n     _x = &mut v;\n-    borrow(v); //~ ERROR cannot borrow `*v`\n+    borrow(&*v); //~ ERROR cannot borrow `*v`\n }\n \n fn main() {"}, {"sha": "18a00d15eafe36610d5763fa63a6a28251e2fd20", "filename": "src/test/compile-fail/issue-11192.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11192.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -25,7 +25,7 @@ fn main() {\n         ptr = box Foo { x: ptr.x + 1 };\n         println!(\"access {}\", foo.x);\n     };\n-    test(ptr);\n+    test(&*ptr);\n     //~^ ERROR: cannot borrow `*ptr` as immutable\n }\n "}, {"sha": "d4073a5e98479230fd6a471426359c067c992c7d", "filename": "src/test/compile-fail/isuue-12470.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fisuue-12470.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fisuue-12470.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fisuue-12470.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -33,7 +33,7 @@ fn make_a<'a>(p: &'a X) -> A<'a> {\n \n fn make_make_a() -> A {\n     let b: Box<B> = box B {i:1};\n-    let bb: &B = b;    //~ ERROR does not live long enough\n+    let bb: &B = &*b;    //~ ERROR does not live long enough\n     make_a(bb)\n }\n "}, {"sha": "1600043acbfbbab518d66a671fffea92f40bcdb1", "filename": "src/test/compile-fail/lint-allocation.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/36d6acc4eea7e305058511c3fda19d459095b7f8/src%2Ftest%2Fcompile-fail%2Flint-allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36d6acc4eea7e305058511c3fda19d459095b7f8/src%2Ftest%2Fcompile-fail%2Flint-allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-allocation.rs?ref=36d6acc4eea7e305058511c3fda19d459095b7f8", "patch": "@@ -1,17 +0,0 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-#![deny(unnecessary_allocation)]\n-\n-fn f(_: &int) {}\n-\n-fn main() {\n-    f(box 1); //~ ERROR unnecessary allocation, use & instead\n-}"}, {"sha": "028988dbd4fa5f93bb9ada80657577833fd423e9", "filename": "src/test/compile-fail/regions-infer-borrow-scope-too-big.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-too-big.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -22,7 +22,7 @@ fn x_coord<'r>(p: &'r point) -> &'r int {\n }\n \n fn foo(p: Gc<point>) -> &int {\n-    let xc = x_coord(p); //~ ERROR `*p` does not live long enough\n+    let xc = x_coord(&*p); //~ ERROR `*p` does not live long enough\n     assert_eq!(*xc, 3);\n     return xc;\n }"}, {"sha": "bb021d4135a160cd320847414c7ca3f23c57503f", "filename": "src/test/compile-fail/regions-infer-borrow-scope-within-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-borrow-scope-within-loop.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -21,7 +21,7 @@ fn foo(cond: || -> bool, make_box: || -> Gc<int>) {\n \n         // Here we complain because the resulting region\n         // of this borrow is the fn body as a whole.\n-        y = borrow(x); //~ ERROR `*x` does not live long enough\n+        y = borrow(&*x); //~ ERROR `*x` does not live long enough\n \n         assert_eq!(*x, *y);\n         if cond() { break; }"}, {"sha": "24dcfb87ad884e24d4985ba8ff6e576f21007080", "filename": "src/test/compile-fail/regions-trait-variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fregions-trait-variance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fregions-trait-variance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-variance.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -42,7 +42,7 @@ fn make_make_a() -> A {\n     let b: Box<B> = box B {\n         i: 1,\n     };\n-    let bb: &B = b; //~ ERROR `*b` does not live long enough\n+    let bb: &B = &*b; //~ ERROR `*b` does not live long enough\n     make_a(bb)\n }\n "}, {"sha": "bfa8f402a82db33d356f14d4931f7edacd0ef1da", "filename": "src/test/compile-fail/struct-field-assignability.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fstruct-field-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fcompile-fail%2Fstruct-field-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-field-assignability.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test\n+\n // Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -17,6 +19,6 @@ struct Foo<'a> {\n }\n \n pub fn main() {\n-    let f = Foo { x: box(GC) 3 }; //~ ERROR borrowed value does not live long enough\n+    let f = Foo { x: &*(box(GC) 3) }; //~ ERROR borrowed value does not live long enough\n     assert_eq!(*f.x, 3);\n }"}, {"sha": "8e924a46d9aaa944261ac8d0f32e617cea59d8e8", "filename": "src/test/debuginfo/borrowed-managed-basic.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fdebuginfo%2Fborrowed-managed-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fdebuginfo%2Fborrowed-managed-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-managed-basic.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -120,46 +120,46 @@ use std::gc::{Gc, GC};\n \n fn main() {\n     let bool_box: Gc<bool> = box(GC) true;\n-    let bool_ref: &bool = bool_box;\n+    let bool_ref: &bool = &*bool_box;\n \n     let int_box: Gc<int> = box(GC) -1;\n-    let int_ref: &int = int_box;\n+    let int_ref: &int = &*int_box;\n \n     let char_box: Gc<char> = box(GC) 'a';\n-    let char_ref: &char = char_box;\n+    let char_ref: &char = &*char_box;\n \n     let i8_box: Gc<i8> = box(GC) 68;\n-    let i8_ref: &i8 = i8_box;\n+    let i8_ref: &i8 = &*i8_box;\n \n     let i16_box: Gc<i16> = box(GC) -16;\n-    let i16_ref: &i16 = i16_box;\n+    let i16_ref: &i16 = &*i16_box;\n \n     let i32_box: Gc<i32> = box(GC) -32;\n-    let i32_ref: &i32 = i32_box;\n+    let i32_ref: &i32 = &*i32_box;\n \n     let i64_box: Gc<i64> = box(GC) -64;\n-    let i64_ref: &i64 = i64_box;\n+    let i64_ref: &i64 = &*i64_box;\n \n     let uint_box: Gc<uint> = box(GC) 1;\n-    let uint_ref: &uint = uint_box;\n+    let uint_ref: &uint = &*uint_box;\n \n     let u8_box: Gc<u8> = box(GC) 100;\n-    let u8_ref: &u8 = u8_box;\n+    let u8_ref: &u8 = &*u8_box;\n \n     let u16_box: Gc<u16> = box(GC) 16;\n-    let u16_ref: &u16 = u16_box;\n+    let u16_ref: &u16 = &*u16_box;\n \n     let u32_box: Gc<u32> = box(GC) 32;\n-    let u32_ref: &u32 = u32_box;\n+    let u32_ref: &u32 = &*u32_box;\n \n     let u64_box: Gc<u64> = box(GC) 64;\n-    let u64_ref: &u64 = u64_box;\n+    let u64_ref: &u64 = &*u64_box;\n \n     let f32_box: Gc<f32> = box(GC) 2.5;\n-    let f32_ref: &f32 = f32_box;\n+    let f32_ref: &f32 = &*f32_box;\n \n     let f64_box: Gc<f64> = box(GC) 3.5;\n-    let f64_ref: &f64 = f64_box;\n+    let f64_ref: &f64 = &*f64_box;\n \n     zzz(); // #break\n }"}, {"sha": "ed56c19869f2261b87f8693c561d4ce106b3e416", "filename": "src/test/debuginfo/borrowed-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-struct.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -100,12 +100,12 @@ fn main() {\n     let ref_to_unnamed: &SomeStruct = &SomeStruct { x: 11, y: 24.5 };\n \n     let managed_val = box(GC) SomeStruct { x: 12, y: 25.5 };\n-    let managed_val_ref: &SomeStruct = managed_val;\n+    let managed_val_ref: &SomeStruct = &*managed_val;\n     let managed_val_interior_ref_1: &int = &managed_val.x;\n     let managed_val_interior_ref_2: &f64 = &managed_val.y;\n \n     let unique_val = box SomeStruct { x: 13, y: 26.5 };\n-    let unique_val_ref: &SomeStruct = unique_val;\n+    let unique_val_ref: &SomeStruct = &*unique_val;\n     let unique_val_interior_ref_1: &int = &unique_val.x;\n     let unique_val_interior_ref_2: &f64 = &unique_val.y;\n "}, {"sha": "583906b7b3070ea0a997d3c784f4ae1b82574297", "filename": "src/test/debuginfo/borrowed-tuple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-tuple.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -60,10 +60,10 @@ fn main() {\n     let ref_to_unnamed: &(i16, f32) = &(-15, -20f32);\n \n     let managed_val: Gc<(i16, f32)> = box(GC) (-16, -21f32);\n-    let managed_val_ref: &(i16, f32) = managed_val;\n+    let managed_val_ref: &(i16, f32) = &*managed_val;\n \n     let unique_val: Box<(i16, f32)> = box() (-17, -22f32);\n-    let unique_val_ref: &(i16, f32) = unique_val;\n+    let unique_val_ref: &(i16, f32) = &*unique_val;\n \n     zzz(); // #break\n }"}, {"sha": "4a5df78b5c61ecb4399e0ca4a117e742bdbdb811", "filename": "src/test/debuginfo/borrowed-unique-basic.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fborrowed-unique-basic.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -116,46 +116,46 @@\n \n fn main() {\n     let bool_box: Box<bool> = box true;\n-    let bool_ref: &bool = bool_box;\n+    let bool_ref: &bool = &*bool_box;\n \n     let int_box: Box<int> = box -1;\n-    let int_ref: &int = int_box;\n+    let int_ref: &int = &*int_box;\n \n     let char_box: Box<char> = box 'a';\n-    let char_ref: &char = char_box;\n+    let char_ref: &char = &*char_box;\n \n     let i8_box: Box<i8> = box 68;\n-    let i8_ref: &i8 = i8_box;\n+    let i8_ref: &i8 = &*i8_box;\n \n     let i16_box: Box<i16> = box -16;\n-    let i16_ref: &i16 = i16_box;\n+    let i16_ref: &i16 = &*i16_box;\n \n     let i32_box: Box<i32> = box -32;\n-    let i32_ref: &i32 = i32_box;\n+    let i32_ref: &i32 = &*i32_box;\n \n     let i64_box: Box<i64> = box -64;\n-    let i64_ref: &i64 = i64_box;\n+    let i64_ref: &i64 = &*i64_box;\n \n     let uint_box: Box<uint> = box 1;\n-    let uint_ref: &uint = uint_box;\n+    let uint_ref: &uint = &*uint_box;\n \n     let u8_box: Box<u8> = box 100;\n-    let u8_ref: &u8 = u8_box;\n+    let u8_ref: &u8 = &*u8_box;\n \n     let u16_box: Box<u16> = box 16;\n-    let u16_ref: &u16 = u16_box;\n+    let u16_ref: &u16 = &*u16_box;\n \n     let u32_box: Box<u32> = box 32;\n-    let u32_ref: &u32 = u32_box;\n+    let u32_ref: &u32 = &*u32_box;\n \n     let u64_box: Box<u64> = box 64;\n-    let u64_ref: &u64 = u64_box;\n+    let u64_ref: &u64 = &*u64_box;\n \n     let f32_box: Box<f32> = box 2.5;\n-    let f32_ref: &f32 = f32_box;\n+    let f32_ref: &f32 = &*f32_box;\n \n     let f64_box: Box<f64> = box 3.5;\n-    let f64_ref: &f64 = f64_box;\n+    let f64_ref: &f64 = &*f64_box;\n \n     zzz(); // #break\n }"}, {"sha": "e87c23b96e276079592a67677099e752d1affd53", "filename": "src/test/debuginfo/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -58,7 +58,7 @@ fn main() {\n \n     let closure: proc() = proc() {\n         zzz(); // #break\n-        do_something(&constant, &a_struct.a, owned);\n+        do_something(&constant, &a_struct.a, &*owned);\n     };\n \n     closure();"}, {"sha": "281167ff46c86aca23c79ef984270c667f9bb061", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -15,7 +15,7 @@ use std::collections::Bitv;\n fn bitv_test() {\n     let mut v1 = box Bitv::with_capacity(31, false);\n     let v2 = box Bitv::with_capacity(31, true);\n-    v1.union(v2);\n+    v1.union(&*v2);\n }\n \n pub fn main() {"}, {"sha": "9b8fa8f9f79b2a0e48a244c55ddcdc35409f0bc2", "filename": "src/test/run-pass/borrowck-lend-args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fborrowck-lend-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fborrowck-lend-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-lend-args.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -12,15 +12,15 @@\n fn borrow(_v: &int) {}\n \n fn borrow_from_arg_imm_ref(v: Box<int>) {\n-    borrow(v);\n+    borrow(&*v);\n }\n \n fn borrow_from_arg_mut_ref(v: &mut Box<int>) {\n-    borrow(*v);\n+    borrow(&**v);\n }\n \n fn borrow_from_arg_copy(v: Box<int>) {\n-    borrow(v);\n+    borrow(&*v);\n }\n \n pub fn main() {"}, {"sha": "993ce37a1eca7b88ef6950acba11faab385cf724", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -32,7 +32,7 @@ pub fn main() {\n     add_int(&mut *ints, 22);\n     add_int(&mut *ints, 44);\n \n-    iter_ints(ints, |i| {\n+    iter_ints(&*ints, |i| {\n         println!(\"int = {}\", *i);\n         true\n     });"}, {"sha": "35cdfb41abca047268b7bc53e7d9af6eb0ba6b58", "filename": "src/test/run-pass/borrowck-root-while-cond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -18,5 +18,5 @@ struct Rec { f: Gc<int> }\n \n pub fn main() {\n     let rec = box(GC) Rec {f: box(GC) 22};\n-    while *borrow(rec.f) == 23 {}\n+    while *borrow(&*rec.f) == 23 {}\n }"}, {"sha": "84bd70c78d4871c2ed5550fddb94c117889b476c", "filename": "src/test/run-pass/borrowck-uniq-via-ref.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fborrowck-uniq-via-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fborrowck-uniq-via-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-uniq-via-ref.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -28,27 +28,27 @@ struct Innermost {\n fn borrow(_v: &int) {}\n \n fn box_mut(v: &mut Box<int>) {\n-    borrow(*v); // OK: &mut -> &imm\n+    borrow(&**v); // OK: &mut -> &imm\n }\n \n fn box_mut_rec(v: &mut Rec) {\n-    borrow(v.f); // OK: &mut -> &imm\n+    borrow(&*v.f); // OK: &mut -> &imm\n }\n \n fn box_mut_recs(v: &mut Outer) {\n-    borrow(v.f.g.h); // OK: &mut -> &imm\n+    borrow(&*v.f.g.h); // OK: &mut -> &imm\n }\n \n fn box_imm(v: &Box<int>) {\n-    borrow(*v); // OK\n+    borrow(&**v); // OK\n }\n \n fn box_imm_rec(v: &Rec) {\n-    borrow(v.f); // OK\n+    borrow(&*v.f); // OK\n }\n \n fn box_imm_recs(v: &Outer) {\n-    borrow(v.f.g.h); // OK\n+    borrow(&*v.f.g.h); // OK\n }\n \n pub fn main() {"}, {"sha": "32b4065439f93e1411d8bc0c53281525b028e14e", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -18,7 +18,7 @@ use std::gc::GC;\n \n pub fn main() {\n     let p = box(GC) 22u;\n-    let r = foo(p);\n+    let r = foo(&*p);\n     println!(\"r={}\", r);\n     assert_eq!(r, 22u);\n }"}, {"sha": "9414a6f2302df7fe6285cf8c49bf1df73a45f3d1", "filename": "src/test/run-pass/issue-3794.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3794.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -34,8 +34,7 @@ fn print_s(s: &S) {\n \n pub fn main() {\n     let s: Box<S> = box S { s: 5 };\n-    print_s(s);\n+    print_s(&*s);\n     let t: Box<T> = s as Box<T>;\n     print_t(t);\n-\n }"}, {"sha": "2d8f966caf1bfb80b41d0de537bfab19b28f60d5", "filename": "src/test/run-pass/issue-5884.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fissue-5884.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fissue-5884.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5884.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -22,7 +22,7 @@ struct Bar<'a> {\n }\n \n fn check(a: Gc<Foo>) {\n-    let _ic = Bar{ b: a, a: box None };\n+    let _ic = Bar{ b: &*a, a: box None };\n }\n \n pub fn main(){}"}, {"sha": "6bea1aebc458815496d1d789eae4d0da734bd71e", "filename": "src/test/run-pass/let-assignability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Flet-assignability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Flet-assignability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-assignability.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -10,7 +10,7 @@\n \n fn f() {\n     let a = box 1;\n-    let b: &int = a;\n+    let b: &int = &*a;\n     println!(\"{}\", b);\n }\n "}, {"sha": "38f552e9a9846e4085ba67fd3d3dedd9dd4ee4d7", "filename": "src/test/run-pass/new-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fnew-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fnew-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnew-box.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -10,7 +10,7 @@\n \n \n fn f(x: Box<int>) {\n-    let y: &int = x;\n+    let y: &int = &*x;\n     println!(\"{}\", *x);\n     println!(\"{}\", *y);\n }"}, {"sha": "74990432d03e0241fc0a32a31374a5a7fac3fcfc", "filename": "src/test/run-pass/regions-borrow-at.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-at.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -18,7 +18,7 @@ fn foo(x: &uint) -> uint {\n \n pub fn main() {\n     let p = box(GC) 22u;\n-    let r = foo(p);\n+    let r = foo(&*p);\n     println!(\"r={}\", r);\n     assert_eq!(r, 22u);\n }"}, {"sha": "36f7d88f7d79731fb4a29d2e8256b36b9df3142a", "filename": "src/test/run-pass/regions-borrow-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-borrow-uniq.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -14,6 +14,6 @@ fn foo(x: &uint) -> uint {\n \n pub fn main() {\n     let p = box 3u;\n-    let r = foo(p);\n+    let r = foo(&*p);\n     assert_eq!(r, 3u);\n }"}, {"sha": "5e2893c49809e45e901752866063ea2a83ca7c44", "filename": "src/test/run-pass/regions-escape-into-other-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-escape-into-other-fn.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -17,5 +17,5 @@ fn bar(x: &uint) -> uint { *x }\n \n pub fn main() {\n     let p = box(GC) 3u;\n-    assert_eq!(bar(foo(p)), 3);\n+    assert_eq!(bar(foo(&*p)), 3);\n }"}, {"sha": "0b42f71fccb051e41fb69a318b6dbdeb45fcf599", "filename": "src/test/run-pass/regions-infer-borrow-scope-within-loop-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope-within-loop-ok.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -15,7 +15,7 @@ fn borrow<'r, T>(x: &'r T) -> &'r T {x}\n pub fn main() {\n     let x = box(GC) 3i;\n     loop {\n-        let y = borrow(x);\n+        let y = borrow(&*x);\n         assert_eq!(*x, *y);\n         break;\n     }"}, {"sha": "abbbb51580fb7f0ccf2f3dfd63c463720f91b7ac", "filename": "src/test/run-pass/regions-infer-borrow-scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e288fc6a996562c5e4aca46e22c1da46eb3d086b/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-infer-borrow-scope.rs?ref=e288fc6a996562c5e4aca46e22c1da46eb3d086b", "patch": "@@ -20,6 +20,6 @@ fn x_coord<'r>(p: &'r Point) -> &'r int {\n \n pub fn main() {\n     let p = box(GC) Point {x: 3, y: 4};\n-    let xc = x_coord(p);\n+    let xc = x_coord(&*p);\n     assert_eq!(*xc, 3);\n }"}]}