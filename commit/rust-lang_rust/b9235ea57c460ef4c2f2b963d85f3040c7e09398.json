{"sha": "b9235ea57c460ef4c2f2b963d85f3040c7e09398", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MjM1ZWE1N2M0NjBlZjRjMmYyYjk2M2Q4NWYzMDQwYzdlMDkzOTg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-12T21:57:47Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-12-12T22:10:36Z"}, "message": "Account for `impl Trait` when suggesting lifetime", "tree": {"sha": "b2a4ec82366d5c1d90df90a131a47935022ad5e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2a4ec82366d5c1d90df90a131a47935022ad5e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b9235ea57c460ef4c2f2b963d85f3040c7e09398", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b9235ea57c460ef4c2f2b963d85f3040c7e09398", "html_url": "https://github.com/rust-lang/rust/commit/b9235ea57c460ef4c2f2b963d85f3040c7e09398", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b9235ea57c460ef4c2f2b963d85f3040c7e09398/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd8fc7dc06dea00afbd365468cf4804f68a3531c", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd8fc7dc06dea00afbd365468cf4804f68a3531c", "html_url": "https://github.com/rust-lang/rust/commit/dd8fc7dc06dea00afbd365468cf4804f68a3531c"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "d213a5c56187141f6f169ca93affa41617bacfbf", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 20, "deletions": 11, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b9235ea57c460ef4c2f2b963d85f3040c7e09398/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9235ea57c460ef4c2f2b963d85f3040c7e09398/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=b9235ea57c460ef4c2f2b963d85f3040c7e09398", "patch": "@@ -1095,15 +1095,16 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                             let sp = hir.span(id);\n                             // `sp` only covers `T`, change it so that it covers\n                             // `T:` when appropriate\n-                            let sp = if has_bounds {\n+                            let is_impl_trait = bound_kind.to_string().starts_with(\"impl \");\n+                            let sp = if has_bounds && !is_impl_trait {\n                                 sp.to(self.tcx\n                                     .sess\n                                     .source_map()\n                                     .next_point(self.tcx.sess.source_map().next_point(sp)))\n                             } else {\n                                 sp\n                             };\n-                            (sp, has_bounds)\n+                            (sp, has_bounds, is_impl_trait)\n                         })\n                     } else {\n                         None\n@@ -1136,25 +1137,33 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n \n         fn binding_suggestion<'tcx, S: fmt::Display>(\n             err: &mut DiagnosticBuilder<'tcx>,\n-            type_param_span: Option<(Span, bool)>,\n+            type_param_span: Option<(Span, bool, bool)>,\n             bound_kind: GenericKind<'tcx>,\n             sub: S,\n         ) {\n-            let consider = &format!(\n-                \"consider adding an explicit lifetime bound `{}: {}`...\",\n-                bound_kind, sub\n+            let consider = format!(\n+                \"consider adding an explicit lifetime bound {}\",\n+                if type_param_span.map(|(_, _, is_impl_trait)| is_impl_trait).unwrap_or(false) {\n+                    format!(\" `{}` to `{}`...\", sub, bound_kind)\n+                } else {\n+                    format!(\"`{}: {}`...\", bound_kind, sub)\n+                },\n             );\n-            if let Some((sp, has_lifetimes)) = type_param_span {\n-                let tail = if has_lifetimes { \" + \" } else { \"\" };\n-                let suggestion = format!(\"{}: {}{}\", bound_kind, sub, tail);\n+            if let Some((sp, has_lifetimes, is_impl_trait)) = type_param_span {\n+                let suggestion = if is_impl_trait {\n+                    format!(\"{} + {}\", bound_kind, sub)\n+                } else {\n+                    let tail = if has_lifetimes { \" + \" } else { \"\" };\n+                    format!(\"{}: {}{}\", bound_kind, sub, tail)\n+                };\n                 err.span_suggestion_short_with_applicability(\n                     sp,\n-                    consider,\n+                    &consider,\n                     suggestion,\n                     Applicability::MaybeIncorrect, // Issue #41966\n                 );\n             } else {\n-                err.help(consider);\n+                err.help(&consider);\n             }\n         }\n "}, {"sha": "8592af1262e6fd8f882148d79e9220d821f046b5", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.fixed", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b9235ea57c460ef4c2f2b963d85f3040c7e09398/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/b9235ea57c460ef4c2f2b963d85f3040c7e09398/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.fixed?ref=b9235ea57c460ef4c2f2b963d85f3040c7e09398", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+\n+use std::fmt::Debug;\n+\n+fn foo(d: impl Debug + 'static) {\n+//~^ HELP consider adding an explicit lifetime bound  `'static` to `impl Debug`\n+    bar(d);\n+//~^ ERROR the parameter type `impl Debug` may not live long enough\n+//~| NOTE ...so that the type `impl Debug` will meet its required lifetime bounds\n+}\n+\n+fn bar(d: impl Debug + 'static) {\n+    println!(\"{:?}\", d)\n+}\n+\n+fn main() {\n+  foo(\"hi\");\n+}"}, {"sha": "c67d78ea4c73bc4536c296a84aca02e2305318bd", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b9235ea57c460ef4c2f2b963d85f3040c7e09398/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b9235ea57c460ef4c2f2b963d85f3040c7e09398/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.rs?ref=b9235ea57c460ef4c2f2b963d85f3040c7e09398", "patch": "@@ -0,0 +1,18 @@\n+// run-rustfix\n+\n+use std::fmt::Debug;\n+\n+fn foo(d: impl Debug) {\n+//~^ HELP consider adding an explicit lifetime bound  `'static` to `impl Debug`\n+    bar(d);\n+//~^ ERROR the parameter type `impl Debug` may not live long enough\n+//~| NOTE ...so that the type `impl Debug` will meet its required lifetime bounds\n+}\n+\n+fn bar(d: impl Debug + 'static) {\n+    println!(\"{:?}\", d)\n+}\n+\n+fn main() {\n+  foo(\"hi\");\n+}"}, {"sha": "cba231d0e86e541da2fb174f5bd949066291dd3d", "filename": "src/test/ui/suggestions/suggest-impl-trait-lifetime.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b9235ea57c460ef4c2f2b963d85f3040c7e09398/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b9235ea57c460ef4c2f2b963d85f3040c7e09398/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-impl-trait-lifetime.stderr?ref=b9235ea57c460ef4c2f2b963d85f3040c7e09398", "patch": "@@ -0,0 +1,19 @@\n+error[E0310]: the parameter type `impl Debug` may not live long enough\n+  --> $DIR/suggest-impl-trait-lifetime.rs:7:5\n+   |\n+LL |     bar(d);\n+   |     ^^^\n+   |\n+note: ...so that the type `impl Debug` will meet its required lifetime bounds\n+  --> $DIR/suggest-impl-trait-lifetime.rs:7:5\n+   |\n+LL |     bar(d);\n+   |     ^^^\n+help: consider adding an explicit lifetime bound  `'static` to `impl Debug`...\n+   |\n+LL | fn foo(d: impl Debug + 'static) {\n+   |           ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0310`."}]}