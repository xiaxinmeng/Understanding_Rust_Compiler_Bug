{"sha": "531a3c680d31b52fab99b50fe9a52c55505b9ac9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMWEzYzY4MGQzMWI1MmZhYjk5YjUwZmU5YTUyYzU1NTA1YjlhYzk=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-07-26T20:21:36Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2014-07-28T08:03:38Z"}, "message": "rustdoc: show struct field docs when inlined\n\nSome minor changes to the compiler to expose this information. Very\ninconvenient since struct fields aren't an item. Adds (yet another) table to\nmetadata.\n\nCloses #15739", "tree": {"sha": "98e7d01b2a79ff76047aab9ec2b1e55f57450bcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98e7d01b2a79ff76047aab9ec2b1e55f57450bcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/531a3c680d31b52fab99b50fe9a52c55505b9ac9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/531a3c680d31b52fab99b50fe9a52c55505b9ac9", "html_url": "https://github.com/rust-lang/rust/commit/531a3c680d31b52fab99b50fe9a52c55505b9ac9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/531a3c680d31b52fab99b50fe9a52c55505b9ac9/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79e9f14abf50eecb7d3c53f10ad900615bb2d397", "url": "https://api.github.com/repos/rust-lang/rust/commits/79e9f14abf50eecb7d3c53f10ad900615bb2d397", "html_url": "https://github.com/rust-lang/rust/commit/79e9f14abf50eecb7d3c53f10ad900615bb2d397"}], "stats": {"total": 73, "additions": 67, "deletions": 6}, "files": [{"sha": "5edbe9b5a082c5d51779f061ba793cecddac84a8", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/531a3c680d31b52fab99b50fe9a52c55505b9ac9/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531a3c680d31b52fab99b50fe9a52c55505b9ac9/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=531a3c680d31b52fab99b50fe9a52c55505b9ac9", "patch": "@@ -227,3 +227,7 @@ pub static tag_region_param_def_index: uint = 0x94;\n pub static tag_unboxed_closures: uint = 0x95;\n pub static tag_unboxed_closure: uint = 0x96;\n pub static tag_unboxed_closure_type: uint = 0x97;\n+\n+pub static tag_struct_fields: uint = 0x98;\n+pub static tag_struct_field: uint = 0x99;\n+pub static tag_struct_field_id: uint = 0x9a;"}, {"sha": "b1b366ec03090de4526f3ab2626956c4056b8a53", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/531a3c680d31b52fab99b50fe9a52c55505b9ac9/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531a3c680d31b52fab99b50fe9a52c55505b9ac9/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=531a3c680d31b52fab99b50fe9a52c55505b9ac9", "patch": "@@ -29,6 +29,8 @@ use syntax::attr;\n use syntax::diagnostic::expect;\n use syntax::parse::token;\n \n+use std::collections::hashmap::HashMap;\n+\n pub struct StaticMethodInfo {\n     pub ident: ast::Ident,\n     pub def_id: ast::DefId,\n@@ -192,6 +194,12 @@ pub fn get_struct_fields(cstore: &cstore::CStore,\n     decoder::get_struct_fields(cstore.intr.clone(), &*cdata, def.node)\n }\n \n+pub fn get_struct_field_attrs(cstore: &cstore::CStore, def: ast::DefId) -> HashMap<ast::NodeId,\n+        Vec<ast::Attribute>> {\n+    let cdata = cstore.get_crate_data(def.krate);\n+    decoder::get_struct_field_attrs(&*cdata)\n+}\n+\n pub fn get_type(tcx: &ty::ctxt,\n                 def: ast::DefId)\n              -> ty::Polytype {"}, {"sha": "3cd8c55b066b0c24388de43616501454fcb0b855", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/531a3c680d31b52fab99b50fe9a52c55505b9ac9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531a3c680d31b52fab99b50fe9a52c55505b9ac9/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=531a3c680d31b52fab99b50fe9a52c55505b9ac9", "patch": "@@ -34,6 +34,7 @@ use std::hash::Hash;\n use std::hash;\n use std::io::extensions::u64_from_be_bytes;\n use std::io;\n+use std::collections::hashmap::HashMap;\n use std::rc::Rc;\n use std::u64;\n use serialize::ebml::reader;\n@@ -963,6 +964,19 @@ pub fn get_item_attrs(cdata: Cmd,\n     f(get_attributes(item));\n }\n \n+pub fn get_struct_field_attrs(cdata: Cmd) -> HashMap<ast::NodeId, Vec<ast::Attribute>> {\n+    let data = ebml::Doc::new(cdata.data());\n+    let fields = reader::get_doc(data, tag_struct_fields);\n+    let mut map = HashMap::new();\n+    reader::tagged_docs(fields, tag_struct_field, |field| {\n+        let id = reader::doc_as_u32(reader::get_doc(field, tag_struct_field_id));\n+        let attrs = get_attributes(field);\n+        map.insert(id, attrs);\n+        true\n+    });\n+    map\n+}\n+\n fn struct_field_family_to_visibility(family: Family) -> ast::Visibility {\n     match family {\n       PublicField => ast::Public,"}, {"sha": "2a7697f0a52a511b7ef77811f93bb306df5352fa", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/531a3c680d31b52fab99b50fe9a52c55505b9ac9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531a3c680d31b52fab99b50fe9a52c55505b9ac9/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=531a3c680d31b52fab99b50fe9a52c55505b9ac9", "patch": "@@ -1644,6 +1644,29 @@ fn encode_unboxed_closures<'a>(\n     ebml_w.end_tag();\n }\n \n+fn encode_struct_field_attrs(ebml_w: &mut Encoder, krate: &Crate) {\n+    struct StructFieldVisitor<'a, 'b> {\n+        ebml_w: &'a mut Encoder<'b>,\n+    }\n+\n+    impl<'a, 'b> Visitor<()> for StructFieldVisitor<'a, 'b> {\n+        fn visit_struct_field(&mut self, field: &ast::StructField, _: ()) {\n+            self.ebml_w.start_tag(tag_struct_field);\n+            self.ebml_w.wr_tagged_u32(tag_struct_field_id, field.node.id);\n+            encode_attributes(self.ebml_w, field.node.attrs.as_slice());\n+            self.ebml_w.end_tag();\n+        }\n+    }\n+\n+    ebml_w.start_tag(tag_struct_fields);\n+    visit::walk_crate(&mut StructFieldVisitor {\n+        ebml_w: ebml_w\n+    }, krate, ());\n+    ebml_w.end_tag();\n+}\n+\n+\n+\n struct ImplVisitor<'a,'b,'c> {\n     ecx: &'a EncodeContext<'b>,\n     ebml_w: &'a mut Encoder<'c>,\n@@ -1928,6 +1951,8 @@ fn encode_metadata_inner(wr: &mut MemWriter, parms: EncodeParams, krate: &Crate)\n     stats.index_bytes = ebml_w.writer.tell().unwrap() - i;\n     ebml_w.end_tag();\n \n+    encode_struct_field_attrs(&mut ebml_w, krate);\n+\n     stats.total_bytes = ebml_w.writer.tell().unwrap();\n \n     if tcx.sess.meta_stats() {"}, {"sha": "0f5af4421a5e8fb89e98c3888979ea15445f6d0f", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/531a3c680d31b52fab99b50fe9a52c55505b9ac9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531a3c680d31b52fab99b50fe9a52c55505b9ac9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=531a3c680d31b52fab99b50fe9a52c55505b9ac9", "patch": "@@ -4071,7 +4071,7 @@ pub fn lookup_struct_fields(cx: &ctxt, did: ast::DefId) -> Vec<field_ty> {\n \n         let len = results.as_slice().iter().map(|x| x.len()).sum();\n         let mut result: Vec<field_ty> = Vec::with_capacity(len);\n-        result.extend(results.as_slice().iter().flat_map(|rs| rs.iter().map(|&f| f)));\n+        result.extend(results.as_slice().iter().flat_map(|rs| rs.iter().map(|f| f.clone())));\n         assert!(result.len() == len);\n         result\n     } else {\n@@ -4085,7 +4085,7 @@ pub fn lookup_struct_field(cx: &ctxt,\n                         -> field_ty {\n     let r = lookup_struct_fields(cx, parent);\n     match r.iter().find(|f| f.id.node == field_id.node) {\n-        Some(t) => *t,\n+        Some(t) => t.clone(),\n         None => cx.sess.bug(\"struct ID not found in parent's fields\")\n     }\n }"}, {"sha": "531dced550a821e56607272d689cc7055f3918ce", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/531a3c680d31b52fab99b50fe9a52c55505b9ac9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531a3c680d31b52fab99b50fe9a52c55505b9ac9/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=531a3c680d31b52fab99b50fe9a52c55505b9ac9", "patch": "@@ -322,7 +322,7 @@ pub fn check_struct_pat_fields(pcx: &pat_ctxt,\n             }\n             Some(&(index, ref mut used)) => {\n                 *used = true;\n-                let class_field = *class_fields.get(index);\n+                let class_field = class_fields.get(index).clone();\n                 let field_type = ty::lookup_field_type(tcx,\n                                                        class_id,\n                                                        class_field.id,"}, {"sha": "3c942d0791e77fb6e5db6ff7cb36c21d1d584c4c", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/531a3c680d31b52fab99b50fe9a52c55505b9ac9/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531a3c680d31b52fab99b50fe9a52c55505b9ac9/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=531a3c680d31b52fab99b50fe9a52c55505b9ac9", "patch": "@@ -209,7 +209,7 @@ fn build_struct(tcx: &ty::ctxt, did: ast::DefId) -> clean::Struct {\n             _ => doctree::Plain,\n         },\n         generics: (&t.generics, subst::TypeSpace).clean(),\n-        fields: fields.iter().map(|f| f.clean()).collect(),\n+        fields: fields.clean(),\n         fields_stripped: false,\n     }\n }"}, {"sha": "417a5521a12c4be29f0b7ed117b451eb44d87f9b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/531a3c680d31b52fab99b50fe9a52c55505b9ac9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/531a3c680d31b52fab99b50fe9a52c55505b9ac9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=531a3c680d31b52fab99b50fe9a52c55505b9ac9", "patch": "@@ -1320,16 +1320,26 @@ impl Clean<Item> for ast::StructField {\n impl Clean<Item> for ty::field_ty {\n     fn clean(&self) -> Item {\n         use syntax::parse::token::special_idents::unnamed_field;\n+        use rustc::metadata::csearch;\n+\n+        let cx = get_cx();\n+        let attrs;\n+\n+        let attr_map = csearch::get_struct_field_attrs(&cx.tcx().sess.cstore, self.id);\n+\n         let name = if self.name == unnamed_field.name {\n+            attrs = None;\n             None\n         } else {\n+            attrs = Some(attr_map.find(&self.id.node).unwrap());\n             Some(self.name)\n         };\n-        let cx = get_cx();\n+\n         let ty = ty::lookup_item_type(cx.tcx(), self.id);\n+\n         Item {\n             name: name.clean(),\n-            attrs: inline::load_attrs(cx.tcx(), self.id),\n+            attrs: attrs.unwrap_or(&Vec::new()).clean(),\n             source: Span::empty(),\n             visibility: Some(self.vis),\n             stability: get_stability(self.id),"}]}