{"sha": "b043358be936b7f139efd49b7d187d64e319830e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNDMzNThiZTkzNmI3ZjEzOWVmZDQ5YjdkMTg3ZDY0ZTMxOTgzMGU=", "commit": {"author": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-10-08T11:25:37Z"}, "committer": {"name": "ice1000", "email": "ice1000kotlin@foxmail.com", "date": "2019-10-08T11:32:41Z"}, "message": "Address comments: fix docs, add completion test for `Self`.", "tree": {"sha": "0d97b8dbff3a9f7052aea71a904ca5055176d16c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d97b8dbff3a9f7052aea71a904ca5055176d16c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b043358be936b7f139efd49b7d187d64e319830e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b043358be936b7f139efd49b7d187d64e319830e", "html_url": "https://github.com/rust-lang/rust/commit/b043358be936b7f139efd49b7d187d64e319830e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b043358be936b7f139efd49b7d187d64e319830e/comments", "author": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ice1000", "id": 16398479, "node_id": "MDQ6VXNlcjE2Mzk4NDc5", "avatar_url": "https://avatars.githubusercontent.com/u/16398479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ice1000", "html_url": "https://github.com/ice1000", "followers_url": "https://api.github.com/users/ice1000/followers", "following_url": "https://api.github.com/users/ice1000/following{/other_user}", "gists_url": "https://api.github.com/users/ice1000/gists{/gist_id}", "starred_url": "https://api.github.com/users/ice1000/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ice1000/subscriptions", "organizations_url": "https://api.github.com/users/ice1000/orgs", "repos_url": "https://api.github.com/users/ice1000/repos", "events_url": "https://api.github.com/users/ice1000/events{/privacy}", "received_events_url": "https://api.github.com/users/ice1000/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bad638928ab880bfbad868f07f0690ace2f2c30", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bad638928ab880bfbad868f07f0690ace2f2c30", "html_url": "https://github.com/rust-lang/rust/commit/6bad638928ab880bfbad868f07f0690ace2f2c30"}], "stats": {"total": 37, "additions": 32, "deletions": 5}, "files": [{"sha": "58db6832d1a5c786bb538a6d1bba062b11492b16", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b043358be936b7f139efd49b7d187d64e319830e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b043358be936b7f139efd49b7d187d64e319830e/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=b043358be936b7f139efd49b7d187d64e319830e", "patch": "@@ -465,7 +465,7 @@ impl Enum {\n         // ...and add generic params, if present\n         let p = self.generic_params(db);\n         let r = if !p.params.is_empty() { r.push_generic_params_scope(p) } else { r };\n-        r.push_scope(Scope::AdtScope(From::from(self)))\n+        r.push_scope(Scope::AdtScope(self.into()))\n     }\n }\n "}, {"sha": "3c797c0c3a82168a087446a255627eebd60dfd6b", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b043358be936b7f139efd49b7d187d64e319830e/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b043358be936b7f139efd49b7d187d64e319830e/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=b043358be936b7f139efd49b7d187d64e319830e", "patch": "@@ -45,7 +45,7 @@ pub(crate) enum Scope {\n     GenericParams(Arc<GenericParams>),\n     /// Brings `Self` in `impl` block into scope\n     ImplBlockScope(ImplBlock),\n-    /// Brings `Self` in enum definition into scope\n+    /// Brings `Self` in enum, struct and union definitions into scope\n     AdtScope(Adt),\n     /// Local bindings\n     ExprScope(ExprScope),"}, {"sha": "a69f04ff1513197d1bddbf954f221d5078d9603f", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b043358be936b7f139efd49b7d187d64e319830e/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b043358be936b7f139efd49b7d187d64e319830e/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=b043358be936b7f139efd49b7d187d64e319830e", "patch": "@@ -559,9 +559,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             match resolver.resolve_path_in_type_ns_fully(self.db, &path) {\n                 Some(TypeNs::Adt(Adt::Struct(it))) => it.into(),\n                 Some(TypeNs::Adt(Adt::Union(it))) => it.into(),\n-                Some(TypeNs::AdtSelfType(Adt::Struct(it))) => it.into(),\n-                Some(TypeNs::AdtSelfType(Adt::Union(it))) => it.into(),\n-                Some(TypeNs::AdtSelfType(Adt::Enum(it))) => it.into(),\n+                Some(TypeNs::AdtSelfType(adt)) => adt.into(),\n                 Some(TypeNs::EnumVariant(it)) => it.into(),\n                 Some(TypeNs::TypeAlias(it)) => it.into(),\n "}, {"sha": "38a6c3d37b65f77a50a492bdf209e0dc0bd091e9", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b043358be936b7f139efd49b7d187d64e319830e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b043358be936b7f139efd49b7d187d64e319830e/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=b043358be936b7f139efd49b7d187d64e319830e", "patch": "@@ -309,6 +309,35 @@ mod tests {\n         );\n     }\n \n+    #[test]\n+    fn completes_self_in_enum() {\n+        assert_debug_snapshot!(\n+            do_reference_completion(\n+                r\"\n+                enum X {\n+                    Y(<|>)\n+                }\n+                \"\n+            ),\n+            @r###\"[\n+    CompletionItem {\n+        label: \"Self\",\n+        source_range: [48; 48),\n+        delete: [48; 48),\n+        insert: \"Self\",\n+        kind: TypeParam,\n+    },\n+    CompletionItem {\n+        label: \"X\",\n+        source_range: [48; 48),\n+        delete: [48; 48),\n+        insert: \"X\",\n+        kind: Enum,\n+    },\n+]\"###\n+        );\n+    }\n+\n     #[test]\n     fn completes_module_items() {\n         assert_debug_snapshot!("}]}