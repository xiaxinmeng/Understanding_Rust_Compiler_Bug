{"sha": "c5c442eee107ba3830b3c589090d158d63555976", "node_id": "C_kwDOAAsO6NoAKGM1YzQ0MmVlZTEwN2JhMzgzMGIzYzU4OTA5MGQxNThkNjM1NTU5NzY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-17T13:11:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-17T13:11:40Z"}, "message": "Auto merge of #12285 - Veykril:inlay-hints, r=Veykril\n\nfeat: Implement inlay hint tooltips\n\nCurrently this just delegates to hover request for some things, and otherwise fallsback to the label.\n![image](https://user-images.githubusercontent.com/3757771/168816520-e015726f-53e1-4dac-a76e-8f1312f145d7.png)\n![image](https://user-images.githubusercontent.com/3757771/168802753-43749b75-866c-40db-b106-aeaa542b87a3.png)\n![image](https://user-images.githubusercontent.com/3757771/168816579-da2050f0-f198-4b3a-a9a1-53199fcaab61.png)\n![image](https://user-images.githubusercontent.com/3757771/168818804-d4400ffe-0e6c-48a0-a872-f054e5f550fa.png)", "tree": {"sha": "0845d257ef95be8f16713e7f98eed4bf1ae0d323", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0845d257ef95be8f16713e7f98eed4bf1ae0d323"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5c442eee107ba3830b3c589090d158d63555976", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c442eee107ba3830b3c589090d158d63555976", "html_url": "https://github.com/rust-lang/rust/commit/c5c442eee107ba3830b3c589090d158d63555976", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5c442eee107ba3830b3c589090d158d63555976/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f8fc0ea528166e7cd8202caa63c8f385c1e76d19", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8fc0ea528166e7cd8202caa63c8f385c1e76d19", "html_url": "https://github.com/rust-lang/rust/commit/f8fc0ea528166e7cd8202caa63c8f385c1e76d19"}, {"sha": "58a241134c9958c55b0cec1021a80523c550a399", "url": "https://api.github.com/repos/rust-lang/rust/commits/58a241134c9958c55b0cec1021a80523c550a399", "html_url": "https://github.com/rust-lang/rust/commit/58a241134c9958c55b0cec1021a80523c550a399"}], "stats": {"total": 284, "additions": 224, "deletions": 60}, "files": [{"sha": "bf82e83822c183f2e4f8f75319aaa06db1d296a5", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 127, "deletions": 35, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/c5c442eee107ba3830b3c589090d158d63555976/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c442eee107ba3830b3c589090d158d63555976/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=c5c442eee107ba3830b3c589090d158d63555976", "patch": "@@ -8,7 +8,8 @@ use itertools::Itertools;\n use stdx::to_lower_snake_case;\n use syntax::{\n     ast::{self, AstNode, HasArgList, HasGenericParams, HasName, UnaryOp},\n-    match_ast, Direction, NodeOrToken, SmolStr, SyntaxKind, SyntaxNode, TextRange, T,\n+    match_ast, Direction, NodeOrToken, SmolStr, SyntaxKind, SyntaxNode, SyntaxToken, TextRange,\n+    TextSize, T,\n };\n \n use crate::FileId;\n@@ -56,11 +57,19 @@ pub enum InlayKind {\n     TypeHint,\n }\n \n+// FIXME: This should live somewhere more general\n+#[derive(Debug)]\n+pub enum RangeOrOffset {\n+    Range(TextRange),\n+    Offset(TextSize),\n+}\n+\n #[derive(Debug)]\n pub struct InlayHint {\n     pub range: TextRange,\n     pub kind: InlayKind,\n-    pub label: SmolStr,\n+    pub label: String,\n+    pub hover_trigger: Option<RangeOrOffset>,\n }\n \n // Feature: Inlay Hints\n@@ -164,8 +173,10 @@ fn closing_brace_hints(\n ) -> Option<()> {\n     let min_lines = config.closing_brace_hints_min_lines?;\n \n+    let name = |it: ast::Name| it.syntax().text_range().start();\n+\n     let mut closing_token;\n-    let label = if let Some(item_list) = ast::AssocItemList::cast(node.clone()) {\n+    let (label, name_offset) = if let Some(item_list) = ast::AssocItemList::cast(node.clone()) {\n         closing_token = item_list.r_curly_token()?;\n \n         let parent = item_list.syntax().parent()?;\n@@ -176,13 +187,13 @@ fn closing_brace_hints(\n                     let ty = imp.self_ty(sema.db);\n                     let trait_ = imp.trait_(sema.db);\n \n-                    match trait_ {\n+                    (match trait_ {\n                         Some(tr) => format!(\"impl {} for {}\", tr.name(sema.db), ty.display_truncated(sema.db, config.max_length)),\n                         None => format!(\"impl {}\", ty.display_truncated(sema.db, config.max_length)),\n-                    }\n+                    }, None)\n                 },\n                 ast::Trait(tr) => {\n-                    format!(\"trait {}\", tr.name()?)\n+                    (format!(\"trait {}\", tr.name()?), tr.name().map(name))\n                 },\n                 _ => return None,\n             }\n@@ -191,7 +202,7 @@ fn closing_brace_hints(\n         closing_token = list.r_curly_token()?;\n \n         let module = ast::Module::cast(list.syntax().parent()?)?;\n-        format!(\"mod {}\", module.name()?)\n+        (format!(\"mod {}\", module.name()?), module.name().map(name))\n     } else if let Some(block) = ast::BlockExpr::cast(node.clone()) {\n         closing_token = block.stmt_list()?.r_curly_token()?;\n \n@@ -201,14 +212,14 @@ fn closing_brace_hints(\n                 ast::Fn(it) => {\n                     // FIXME: this could include parameters, but `HirDisplay` prints too much info\n                     // and doesn't respect the max length either, so the hints end up way too long\n-                    format!(\"fn {}\", it.name()?)\n+                    (format!(\"fn {}\", it.name()?), it.name().map(name))\n                 },\n-                ast::Static(it) => format!(\"static {}\", it.name()?),\n+                ast::Static(it) => (format!(\"static {}\", it.name()?), it.name().map(name)),\n                 ast::Const(it) => {\n                     if it.underscore_token().is_some() {\n-                        \"const _\".into()\n+                        (\"const _\".into(), None)\n                     } else {\n-                        format!(\"const {}\", it.name()?)\n+                        (format!(\"const {}\", it.name()?), it.name().map(name))\n                     }\n                 },\n                 _ => return None,\n@@ -221,7 +232,10 @@ fn closing_brace_hints(\n         }\n         closing_token = last_token;\n \n-        format!(\"{}!\", mac.path()?)\n+        (\n+            format!(\"{}!\", mac.path()?),\n+            mac.path().and_then(|it| it.segment()).map(|it| it.syntax().text_range().start()),\n+        )\n     } else {\n         return None;\n     };\n@@ -248,7 +262,8 @@ fn closing_brace_hints(\n     acc.push(InlayHint {\n         range: closing_token.text_range(),\n         kind: InlayKind::ClosingBraceHint,\n-        label: label.into(),\n+        label,\n+        hover_trigger: name_offset.map(RangeOrOffset::Offset),\n     });\n \n     None\n@@ -262,6 +277,14 @@ fn lifetime_fn_hints(\n     if config.lifetime_elision_hints == LifetimeElisionHints::Never {\n         return None;\n     }\n+\n+    let mk_lt_hint = |t: SyntaxToken, label| InlayHint {\n+        range: t.text_range(),\n+        kind: InlayKind::LifetimeHint,\n+        label,\n+        hover_trigger: None,\n+    };\n+\n     let param_list = func.param_list()?;\n     let generic_param_list = func.generic_param_list();\n     let ret_type = func.ret_type();\n@@ -378,11 +401,7 @@ fn lifetime_fn_hints(\n                 ast::Type::RefType(ty) if ty.lifetime().is_none() => {\n                     if let Some(amp) = ty.amp_token() {\n                         is_trivial = false;\n-                        acc.push(InlayHint {\n-                            range: amp.text_range(),\n-                            kind: InlayKind::LifetimeHint,\n-                            label: output_lt.clone(),\n-                        });\n+                        acc.push(mk_lt_hint(amp, output_lt.to_string()));\n                     }\n                 }\n                 _ => (),\n@@ -398,8 +417,8 @@ fn lifetime_fn_hints(\n     for (_, amp_token, _, is_elided) in potential_lt_refs {\n         if is_elided {\n             let t = amp_token?;\n-            let lt = a.next()?.clone();\n-            acc.push(InlayHint { range: t.text_range(), kind: InlayKind::LifetimeHint, label: lt });\n+            let lt = a.next()?;\n+            acc.push(mk_lt_hint(t, lt.to_string()));\n         }\n     }\n \n@@ -409,21 +428,20 @@ fn lifetime_fn_hints(\n         (Some(gpl), allocated_lifetimes) => {\n             let angle_tok = gpl.l_angle_token()?;\n             let is_empty = gpl.generic_params().next().is_none();\n-            acc.push(InlayHint {\n-                range: angle_tok.text_range(),\n-                kind: InlayKind::GenericParamListHint,\n-                label: format!(\n+            acc.push(mk_lt_hint(\n+                angle_tok,\n+                format!(\n                     \"{}{}\",\n                     allocated_lifetimes.iter().format(\", \"),\n                     if is_empty { \"\" } else { \", \" }\n-                )\n-                .into(),\n-            });\n+                ),\n+            ));\n         }\n         (None, allocated_lifetimes) => acc.push(InlayHint {\n             range: func.name()?.syntax().text_range(),\n             kind: InlayKind::GenericParamListHint,\n             label: format!(\"<{}>\", allocated_lifetimes.iter().format(\", \"),).into(),\n+            hover_trigger: None,\n         }),\n     }\n     Some(())\n@@ -456,7 +474,8 @@ fn closure_ret_hints(\n         range: param_list.syntax().text_range(),\n         kind: InlayKind::ClosureReturnTypeHint,\n         label: hint_iterator(sema, &famous_defs, config, &ty)\n-            .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string().into()),\n+            .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string()),\n+        hover_trigger: None,\n     });\n     Some(())\n }\n@@ -482,7 +501,8 @@ fn reborrow_hints(\n     acc.push(InlayHint {\n         range: expr.syntax().text_range(),\n         kind: InlayKind::ImplicitReborrowHint,\n-        label: SmolStr::new_inline(label),\n+        label: label.to_string(),\n+        hover_trigger: None,\n     });\n     Some(())\n }\n@@ -539,8 +559,9 @@ fn chaining_hints(\n                 range: expr.syntax().text_range(),\n                 kind: InlayKind::ChainingHint,\n                 label: hint_iterator(sema, &famous_defs, config, &ty).unwrap_or_else(|| {\n-                    ty.display_truncated(sema.db, config.max_length).to_string().into()\n+                    ty.display_truncated(sema.db, config.max_length).to_string()\n                 }),\n+                hover_trigger: Some(RangeOrOffset::Range(expr.syntax().text_range())),\n             });\n         }\n     }\n@@ -581,6 +602,8 @@ fn param_name_hints(\n             range,\n             kind: InlayKind::ParameterHint,\n             label: param_name.into(),\n+            // FIXME: Show hover for parameter\n+            hover_trigger: None,\n         });\n \n     acc.extend(hints);\n@@ -609,7 +632,8 @@ fn binding_mode_hints(\n         acc.push(InlayHint {\n             range,\n             kind: InlayKind::BindingModeHint,\n-            label: SmolStr::new_inline(r),\n+            label: r.to_string(),\n+            hover_trigger: None,\n         });\n     });\n     match pat {\n@@ -623,7 +647,8 @@ fn binding_mode_hints(\n             acc.push(InlayHint {\n                 range,\n                 kind: InlayKind::BindingModeHint,\n-                label: SmolStr::new_inline(bm),\n+                label: bm.to_string(),\n+                hover_trigger: None,\n             });\n         }\n         _ => (),\n@@ -663,7 +688,7 @@ fn bind_pat_hints(\n             {\n                 return None;\n             }\n-            ty_name.into()\n+            ty_name\n         }\n     };\n \n@@ -674,6 +699,7 @@ fn bind_pat_hints(\n         },\n         kind: InlayKind::TypeHint,\n         label,\n+        hover_trigger: pat.name().map(|it| it.syntax().text_range()).map(RangeOrOffset::Range),\n     });\n \n     Some(())\n@@ -738,7 +764,7 @@ fn hint_iterator(\n     famous_defs: &FamousDefs,\n     config: &InlayHintsConfig,\n     ty: &hir::Type,\n-) -> Option<SmolStr> {\n+) -> Option<String> {\n     let db = sema.db;\n     let strukt = ty.strip_references().as_adt()?;\n     let krate = strukt.module(db).krate();\n@@ -775,7 +801,7 @@ fn hint_iterator(\n                     )\n                     .to_string()\n                 });\n-            return Some(format!(\"{}{}{}\", LABEL_START, ty_display, LABEL_END).into());\n+            return Some(format!(\"{}{}{}\", LABEL_START, ty_display, LABEL_END));\n         }\n     }\n \n@@ -1986,11 +2012,21 @@ fn main() {\n                         range: 147..172,\n                         kind: ChainingHint,\n                         label: \"B\",\n+                        hover_trigger: Some(\n+                            Range(\n+                                147..172,\n+                            ),\n+                        ),\n                     },\n                     InlayHint {\n                         range: 147..154,\n                         kind: ChainingHint,\n                         label: \"A\",\n+                        hover_trigger: Some(\n+                            Range(\n+                                147..154,\n+                            ),\n+                        ),\n                     },\n                 ]\n             \"#]],\n@@ -2041,11 +2077,21 @@ fn main() {\n                         range: 143..190,\n                         kind: ChainingHint,\n                         label: \"C\",\n+                        hover_trigger: Some(\n+                            Range(\n+                                143..190,\n+                            ),\n+                        ),\n                     },\n                     InlayHint {\n                         range: 143..179,\n                         kind: ChainingHint,\n                         label: \"B\",\n+                        hover_trigger: Some(\n+                            Range(\n+                                143..179,\n+                            ),\n+                        ),\n                     },\n                 ]\n             \"#]],\n@@ -2081,11 +2127,21 @@ fn main() {\n                         range: 246..283,\n                         kind: ChainingHint,\n                         label: \"B<X<i32, bool>>\",\n+                        hover_trigger: Some(\n+                            Range(\n+                                246..283,\n+                            ),\n+                        ),\n                     },\n                     InlayHint {\n                         range: 246..265,\n                         kind: ChainingHint,\n                         label: \"A<X<i32, bool>>\",\n+                        hover_trigger: Some(\n+                            Range(\n+                                246..265,\n+                            ),\n+                        ),\n                     },\n                 ]\n             \"#]],\n@@ -2123,21 +2179,41 @@ fn main() {\n                         range: 174..241,\n                         kind: ChainingHint,\n                         label: \"impl Iterator<Item = ()>\",\n+                        hover_trigger: Some(\n+                            Range(\n+                                174..241,\n+                            ),\n+                        ),\n                     },\n                     InlayHint {\n                         range: 174..224,\n                         kind: ChainingHint,\n                         label: \"impl Iterator<Item = ()>\",\n+                        hover_trigger: Some(\n+                            Range(\n+                                174..224,\n+                            ),\n+                        ),\n                     },\n                     InlayHint {\n                         range: 174..206,\n                         kind: ChainingHint,\n                         label: \"impl Iterator<Item = ()>\",\n+                        hover_trigger: Some(\n+                            Range(\n+                                174..206,\n+                            ),\n+                        ),\n                     },\n                     InlayHint {\n                         range: 174..189,\n                         kind: ChainingHint,\n                         label: \"&mut MyIter\",\n+                        hover_trigger: Some(\n+                            Range(\n+                                174..189,\n+                            ),\n+                        ),\n                     },\n                 ]\n             \"#]],\n@@ -2172,21 +2248,37 @@ fn main() {\n                         range: 124..130,\n                         kind: TypeHint,\n                         label: \"Struct\",\n+                        hover_trigger: Some(\n+                            Range(\n+                                124..130,\n+                            ),\n+                        ),\n                     },\n                     InlayHint {\n                         range: 145..185,\n                         kind: ChainingHint,\n                         label: \"Struct\",\n+                        hover_trigger: Some(\n+                            Range(\n+                                145..185,\n+                            ),\n+                        ),\n                     },\n                     InlayHint {\n                         range: 145..168,\n                         kind: ChainingHint,\n                         label: \"Struct\",\n+                        hover_trigger: Some(\n+                            Range(\n+                                145..168,\n+                            ),\n+                        ),\n                     },\n                     InlayHint {\n                         range: 222..228,\n                         kind: ParameterHint,\n                         label: \"self\",\n+                        hover_trigger: None,\n                     },\n                 ]\n             \"#]],"}, {"sha": "071da8097c50b95f56b0d8f47f505908a2fa1c35", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c442eee107ba3830b3c589090d158d63555976/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c442eee107ba3830b3c589090d158d63555976/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=c5c442eee107ba3830b3c589090d158d63555976", "patch": "@@ -80,7 +80,9 @@ pub use crate::{\n     folding_ranges::{Fold, FoldKind},\n     highlight_related::{HighlightRelatedConfig, HighlightedRange},\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n-    inlay_hints::{InlayHint, InlayHintsConfig, InlayKind, LifetimeElisionHints, ReborrowHints},\n+    inlay_hints::{\n+        InlayHint, InlayHintsConfig, InlayKind, LifetimeElisionHints, RangeOrOffset, ReborrowHints,\n+    },\n     join_lines::JoinLinesConfig,\n     markup::Markup,\n     moniker::{MonikerKind, MonikerResult, PackageInformation},"}, {"sha": "a653ec289b387ca6abadd77218f2b50a88c0c908", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c5c442eee107ba3830b3c589090d158d63555976/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c442eee107ba3830b3c589090d158d63555976/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=c5c442eee107ba3830b3c589090d158d63555976", "patch": "@@ -4,7 +4,8 @@ use lsp_types::{\n     CodeActionProviderCapability, CodeLensOptions, CompletionOptions, DeclarationCapability,\n     DocumentOnTypeFormattingOptions, FileOperationFilter, FileOperationPattern,\n     FileOperationPatternKind, FileOperationRegistrationOptions, FoldingRangeProviderCapability,\n-    HoverProviderCapability, ImplementationProviderCapability, OneOf, RenameOptions, SaveOptions,\n+    HoverProviderCapability, ImplementationProviderCapability, InlayHintOptions,\n+    InlayHintServerCapabilities, OneOf, RenameOptions, SaveOptions,\n     SelectionRangeProviderCapability, SemanticTokensFullOptions, SemanticTokensLegend,\n     SemanticTokensOptions, ServerCapabilities, SignatureHelpOptions, TextDocumentSyncCapability,\n     TextDocumentSyncKind, TextDocumentSyncOptions, TypeDefinitionProviderCapability,\n@@ -112,7 +113,12 @@ pub fn server_capabilities(config: &Config) -> ServerCapabilities {\n             .into(),\n         ),\n         moniker_provider: None,\n-        inlay_hint_provider: Some(OneOf::Left(true)),\n+        inlay_hint_provider: Some(OneOf::Right(InlayHintServerCapabilities::Options(\n+            InlayHintOptions {\n+                work_done_progress_options: Default::default(),\n+                resolve_provider: Some(true),\n+            },\n+        ))),\n         experimental: Some(json!({\n             \"externalDocs\": true,\n             \"hoverRange\": true,"}, {"sha": "510b37bb6f631acc0de999914e3f144ce33cea67", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 44, "deletions": 1, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/c5c442eee107ba3830b3c589090d158d63555976/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c442eee107ba3830b3c589090d158d63555976/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=c5c442eee107ba3830b3c589090d158d63555976", "patch": "@@ -1343,11 +1343,54 @@ pub(crate) fn handle_inlay_hints(\n         snap.analysis\n             .inlay_hints(&inlay_hints_config, file_id, Some(range))?\n             .into_iter()\n-            .map(|it| to_proto::inlay_hint(inlay_hints_config.render_colons, &line_index, it))\n+            .map(|it| {\n+                to_proto::inlay_hint(\n+                    &line_index,\n+                    &params.text_document,\n+                    inlay_hints_config.render_colons,\n+                    it,\n+                )\n+            })\n             .collect(),\n     ))\n }\n \n+pub(crate) fn handle_inlay_hints_resolve(\n+    snap: GlobalStateSnapshot,\n+    mut hint: InlayHint,\n+) -> Result<InlayHint> {\n+    let _p = profile::span(\"handle_inlay_hints_resolve\");\n+    let data = match hint.data.take() {\n+        Some(it) => it,\n+        None => return Ok(hint),\n+    };\n+\n+    let resolve_data: lsp_ext::InlayHintResolveData = serde_json::from_value(data)?;\n+\n+    let file_range = from_proto::file_range(\n+        &snap,\n+        resolve_data.text_document,\n+        match resolve_data.position {\n+            PositionOrRange::Position(pos) => Range::new(pos, pos),\n+            PositionOrRange::Range(range) => range,\n+        },\n+    )?;\n+    let info = match snap.analysis.hover(&snap.config.hover(), file_range)? {\n+        None => return Ok(hint),\n+        Some(info) => info,\n+    };\n+\n+    let markup_kind =\n+        snap.config.hover().documentation.map_or(ide::HoverDocFormat::Markdown, |kind| kind);\n+\n+    // FIXME: hover actions?\n+    hint.tooltip = Some(lsp_types::InlayHintTooltip::MarkupContent(to_proto::markup_content(\n+        info.info.markup,\n+        markup_kind,\n+    )));\n+    Ok(hint)\n+}\n+\n pub(crate) fn handle_call_hierarchy_prepare(\n     snap: GlobalStateSnapshot,\n     params: CallHierarchyPrepareParams,"}, {"sha": "c1b230bd9dff2dbd9e8eb8d0cd55888568255449", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c5c442eee107ba3830b3c589090d158d63555976/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c442eee107ba3830b3c589090d158d63555976/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=c5c442eee107ba3830b3c589090d158d63555976", "patch": "@@ -518,6 +518,12 @@ pub struct CompletionResolveData {\n     pub imports: Vec<CompletionImport>,\n }\n \n+#[derive(Debug, Serialize, Deserialize)]\n+pub struct InlayHintResolveData {\n+    pub text_document: TextDocumentIdentifier,\n+    pub position: PositionOrRange,\n+}\n+\n #[derive(Debug, Serialize, Deserialize)]\n pub struct CompletionImport {\n     pub full_import_path: String,"}, {"sha": "b5ac55e60d6bea15466dbba84ee3d019587649df", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5c442eee107ba3830b3c589090d158d63555976/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c442eee107ba3830b3c589090d158d63555976/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=c5c442eee107ba3830b3c589090d158d63555976", "patch": "@@ -612,6 +612,7 @@ impl GlobalState {\n             .on::<lsp_types::request::GotoImplementation>(handlers::handle_goto_implementation)\n             .on::<lsp_types::request::GotoTypeDefinition>(handlers::handle_goto_type_definition)\n             .on::<lsp_types::request::InlayHintRequest>(handlers::handle_inlay_hints)\n+            .on::<lsp_types::request::InlayHintResolveRequest>(handlers::handle_inlay_hints_resolve)\n             .on::<lsp_types::request::Completion>(handlers::handle_completion)\n             .on::<lsp_types::request::ResolveCompletionItem>(handlers::handle_completion_resolve)\n             .on::<lsp_types::request::CodeLensRequest>(handlers::handle_code_lens)"}, {"sha": "6817090a8bc3cb9577a90d616e1f0802fec179b1", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 34, "deletions": 20, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c5c442eee107ba3830b3c589090d158d63555976/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c442eee107ba3830b3c589090d158d63555976/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=c5c442eee107ba3830b3c589090d158d63555976", "patch": "@@ -415,8 +415,9 @@ pub(crate) fn signature_help(\n }\n \n pub(crate) fn inlay_hint(\n-    render_colons: bool,\n     line_index: &LineIndex,\n+    text_document: &lsp_types::TextDocumentIdentifier,\n+    render_colons: bool,\n     inlay_hint: InlayHint,\n ) -> lsp_types::InlayHint {\n     lsp_types::InlayHint {\n@@ -433,24 +434,6 @@ pub(crate) fn inlay_hint(\n             | InlayKind::LifetimeHint\n             | InlayKind::ClosingBraceHint => position(line_index, inlay_hint.range.end()),\n         },\n-        label: lsp_types::InlayHintLabel::String(match inlay_hint.kind {\n-            InlayKind::ParameterHint if render_colons => format!(\"{}:\", inlay_hint.label),\n-            InlayKind::TypeHint if render_colons => format!(\": {}\", inlay_hint.label),\n-            InlayKind::ClosureReturnTypeHint => format!(\" -> {}\", inlay_hint.label),\n-            _ => inlay_hint.label.to_string(),\n-        }),\n-        kind: match inlay_hint.kind {\n-            InlayKind::ParameterHint => Some(lsp_types::InlayHintKind::PARAMETER),\n-            InlayKind::ClosureReturnTypeHint | InlayKind::TypeHint | InlayKind::ChainingHint => {\n-                Some(lsp_types::InlayHintKind::TYPE)\n-            }\n-            InlayKind::BindingModeHint\n-            | InlayKind::GenericParamListHint\n-            | InlayKind::LifetimeHint\n-            | InlayKind::ImplicitReborrowHint\n-            | InlayKind::ClosingBraceHint => None,\n-        },\n-        tooltip: None,\n         padding_left: Some(match inlay_hint.kind {\n             InlayKind::TypeHint => !render_colons,\n             InlayKind::ChainingHint | InlayKind::ClosingBraceHint => true,\n@@ -471,8 +454,39 @@ pub(crate) fn inlay_hint(\n             InlayKind::BindingModeHint => inlay_hint.label != \"&\",\n             InlayKind::ParameterHint | InlayKind::LifetimeHint => true,\n         }),\n+        label: lsp_types::InlayHintLabel::String(match inlay_hint.kind {\n+            InlayKind::ParameterHint if render_colons => format!(\"{}:\", inlay_hint.label),\n+            InlayKind::TypeHint if render_colons => format!(\": {}\", inlay_hint.label),\n+            InlayKind::ClosureReturnTypeHint => format!(\" -> {}\", inlay_hint.label),\n+            _ => inlay_hint.label.clone(),\n+        }),\n+        kind: match inlay_hint.kind {\n+            InlayKind::ParameterHint => Some(lsp_types::InlayHintKind::PARAMETER),\n+            InlayKind::ClosureReturnTypeHint | InlayKind::TypeHint | InlayKind::ChainingHint => {\n+                Some(lsp_types::InlayHintKind::TYPE)\n+            }\n+            InlayKind::BindingModeHint\n+            | InlayKind::GenericParamListHint\n+            | InlayKind::LifetimeHint\n+            | InlayKind::ImplicitReborrowHint\n+            | InlayKind::ClosingBraceHint => None,\n+        },\n         text_edits: None,\n-        data: None,\n+        tooltip: Some(lsp_types::InlayHintTooltip::String(inlay_hint.label)),\n+        data: inlay_hint.hover_trigger.map(|range_or_offset| {\n+            to_value(lsp_ext::InlayHintResolveData {\n+                text_document: text_document.clone(),\n+                position: match range_or_offset {\n+                    ide::RangeOrOffset::Offset(offset) => {\n+                        lsp_ext::PositionOrRange::Position(position(line_index, offset))\n+                    }\n+                    ide::RangeOrOffset::Range(text_range) => {\n+                        lsp_ext::PositionOrRange::Range(range(line_index, text_range))\n+                    }\n+                },\n+            })\n+            .unwrap()\n+        }),\n     }\n }\n "}, {"sha": "875561608dc009a523cfacabc4c6fadeb58a7e11", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c442eee107ba3830b3c589090d158d63555976/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/c5c442eee107ba3830b3c589090d158d63555976/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=c5c442eee107ba3830b3c589090d158d63555976", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 7a34bc3f38e2a7d8\n+lsp_ext.rs hash: 44e8238e4fbd4128\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this issue:"}]}