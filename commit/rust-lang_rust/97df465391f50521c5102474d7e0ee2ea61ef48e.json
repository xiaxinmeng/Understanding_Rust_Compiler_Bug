{"sha": "97df465391f50521c5102474d7e0ee2ea61ef48e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3ZGY0NjUzOTFmNTA1MjFjNTEwMjQ3NGQ3ZTBlZTJlYTYxZWY0OGU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-30T15:51:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-30T15:51:06Z"}, "message": "Merge #5602\n\n5602: Rename StructDef -> Struct r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2bda021d9fafc6af927ebfbcafd31537496bd53c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bda021d9fafc6af927ebfbcafd31537496bd53c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97df465391f50521c5102474d7e0ee2ea61ef48e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIuxqCRBK7hj4Ov3rIwAAdHIIABz+gOnSM+y/fRkWwzwxSocC\nxxbpwOxJ/VmpysbhnnTu/7UFON6txdD55ytxkVnW4n0E0dyRMVpOh6EXZx2x2Zz0\nOM6HaB8ZczdkUYDhAhUqMHjUw52bLaGKeuyVM5qaZi3AcrgGO1US1wIhP+Bbx3bY\nj1qk2DTiYtG2bcJ7npk7zd7cKoKc4EHUbocdrFPg7eswnLG6GyuciE6QDuiP04On\nK0mZwjwhQokLmGoiwU22ckggf/YZNqRy2VrWrPP3vtYRWTwVsxXto1yMAHsLuehg\nNx3pNsjZERMNqbRj9dp7oziVCOUgo2zG77mMPOFWFmxoWn4OG3o3HcBch/DheJE=\n=irht\n-----END PGP SIGNATURE-----\n", "payload": "tree 2bda021d9fafc6af927ebfbcafd31537496bd53c\nparent 0c8944314cb323416c8ad6ad27347ca056c5a91c\nparent 216a5344c8ef3c3e430d2761dc8b1a7b60250a15\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596124266 +0000\ncommitter GitHub <noreply@github.com> 1596124266 +0000\n\nMerge #5602\n\n5602: Rename StructDef -> Struct r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97df465391f50521c5102474d7e0ee2ea61ef48e", "html_url": "https://github.com/rust-lang/rust/commit/97df465391f50521c5102474d7e0ee2ea61ef48e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97df465391f50521c5102474d7e0ee2ea61ef48e/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c8944314cb323416c8ad6ad27347ca056c5a91c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c8944314cb323416c8ad6ad27347ca056c5a91c", "html_url": "https://github.com/rust-lang/rust/commit/0c8944314cb323416c8ad6ad27347ca056c5a91c"}, {"sha": "216a5344c8ef3c3e430d2761dc8b1a7b60250a15", "url": "https://api.github.com/repos/rust-lang/rust/commits/216a5344c8ef3c3e430d2761dc8b1a7b60250a15", "html_url": "https://github.com/rust-lang/rust/commit/216a5344c8ef3c3e430d2761dc8b1a7b60250a15"}], "stats": {"total": 326, "additions": 163, "deletions": 163}, "files": [{"sha": "12c40a3cc50ba79cdd076db436052d190327f481", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,7 +1,7 @@\n use ra_syntax::{\n     ast::{self, NameOwner, VisibilityOwner},\n     AstNode,\n-    SyntaxKind::{CONST_DEF, ENUM_DEF, FN, MODULE, STATIC_DEF, STRUCT_DEF, TRAIT_DEF, VISIBILITY},\n+    SyntaxKind::{CONST_DEF, ENUM_DEF, FN, MODULE, STATIC_DEF, STRUCT, TRAIT_DEF, VISIBILITY},\n     T,\n };\n use test_utils::mark;\n@@ -36,7 +36,7 @@ fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n \n     let (offset, target) = if let Some(keyword) = item_keyword {\n         let parent = keyword.parent();\n-        let def_kws = vec![CONST_DEF, STATIC_DEF, FN, MODULE, STRUCT_DEF, ENUM_DEF, TRAIT_DEF];\n+        let def_kws = vec![CONST_DEF, STATIC_DEF, FN, MODULE, STRUCT, ENUM_DEF, TRAIT_DEF];\n         // Parent is not a definition, can't add visibility\n         if !def_kws.iter().any(|&def_kw| def_kw == parent.kind()) {\n             return None;"}, {"sha": "22b47d254737b971da545e424a2beb17ddb048d7", "filename": "crates/ra_assists/src/handlers/generate_new.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -31,7 +31,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n //\n // ```\n pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n-    let strukt = ctx.find_node_at_offset::<ast::StructDef>()?;\n+    let strukt = ctx.find_node_at_offset::<ast::Struct>()?;\n \n     // We want to only apply this to non-union structs with named fields\n     let field_list = match strukt.kind() {\n@@ -91,7 +91,7 @@ pub(crate) fn generate_new(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n \n // Generates the surrounding `impl Type { <code> }` including type and lifetime\n // parameters\n-fn generate_impl_text(strukt: &ast::StructDef, code: &str) -> String {\n+fn generate_impl_text(strukt: &ast::Struct, code: &str) -> String {\n     let type_params = strukt.generic_param_list();\n     let mut buf = String::with_capacity(code.len());\n     buf.push_str(\"\\n\\nimpl\");\n@@ -122,7 +122,7 @@ fn generate_impl_text(strukt: &ast::StructDef, code: &str) -> String {\n //\n // FIXME: change the new fn checking to a more semantic approach when that's more\n // viable (e.g. we process proc macros, etc)\n-fn find_struct_impl(ctx: &AssistContext, strukt: &ast::StructDef) -> Option<Option<ast::ImplDef>> {\n+fn find_struct_impl(ctx: &AssistContext, strukt: &ast::Struct) -> Option<Option<ast::ImplDef>> {\n     let db = ctx.db();\n     let module = strukt.syntax().ancestors().find(|node| {\n         ast::Module::can_cast(node.kind()) || ast::SourceFile::can_cast(node.kind())"}, {"sha": "3b82477c503e6bdcde09ace29ae286931417838c", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn move_bounds_to_where_clause(acc: &mut Assists, ctx: &AssistContext\n             ast::TraitDef(it) => it.assoc_item_list()?.syntax().clone().into(),\n             ast::ImplDef(it) => it.assoc_item_list()?.syntax().clone().into(),\n             ast::EnumDef(it) => it.variant_list()?.syntax().clone().into(),\n-            ast::StructDef(it) => {\n+            ast::Struct(it) => {\n                 it.syntax().children_with_tokens()\n                     .find(|it| it.kind() == RECORD_FIELD_LIST || it.kind() == T![;])?\n             },"}, {"sha": "811a12e00568bf84818b8bd11b48d45c1f558dff", "filename": "crates/ra_hir/src/has_source.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir%2Fsrc%2Fhas_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fhas_source.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -57,8 +57,8 @@ impl HasSource for Field {\n     }\n }\n impl HasSource for Struct {\n-    type Ast = ast::StructDef;\n-    fn source(self, db: &dyn HirDatabase) -> InFile<ast::StructDef> {\n+    type Ast = ast::Struct;\n+    fn source(self, db: &dyn HirDatabase) -> InFile<ast::Struct> {\n         self.id.lookup(db.upcast()).source(db.upcast())\n     }\n }"}, {"sha": "7df018b05946a0405ebf5936f834fce498e88329", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -580,7 +580,7 @@ macro_rules! to_def_impls {\n \n to_def_impls![\n     (crate::Module, ast::Module, module_to_def),\n-    (crate::Struct, ast::StructDef, struct_to_def),\n+    (crate::Struct, ast::Struct, struct_to_def),\n     (crate::Enum, ast::EnumDef, enum_to_def),\n     (crate::Union, ast::Union, union_to_def),\n     (crate::Trait, ast::TraitDef, trait_to_def),"}, {"sha": "75b773352fc473211f8b1ac040610a35f0e1dcd6", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -74,7 +74,7 @@ impl SourceToDefCtx<'_, '_> {\n     pub(super) fn fn_to_def(&mut self, src: InFile<ast::Fn>) -> Option<FunctionId> {\n         self.to_def(src, keys::FUNCTION)\n     }\n-    pub(super) fn struct_to_def(&mut self, src: InFile<ast::StructDef>) -> Option<StructId> {\n+    pub(super) fn struct_to_def(&mut self, src: InFile<ast::Struct>) -> Option<StructId> {\n         self.to_def(src, keys::STRUCT)\n     }\n     pub(super) fn enum_to_def(&mut self, src: InFile<ast::EnumDef>) -> Option<EnumId> {\n@@ -166,7 +166,7 @@ impl SourceToDefCtx<'_, '_> {\n                         let def = self.fn_to_def(container.with_value(it))?;\n                         DefWithBodyId::from(def).into()\n                     },\n-                    ast::StructDef(it) => {\n+                    ast::Struct(it) => {\n                         let def = self.struct_to_def(container.with_value(it))?;\n                         VariantId::from(def).into()\n                     },\n@@ -205,7 +205,7 @@ impl SourceToDefCtx<'_, '_> {\n             let res: GenericDefId = match_ast! {\n                 match (container.value) {\n                     ast::Fn(it) => self.fn_to_def(container.with_value(it))?.into(),\n-                    ast::StructDef(it) => self.struct_to_def(container.with_value(it))?.into(),\n+                    ast::Struct(it) => self.struct_to_def(container.with_value(it))?.into(),\n                     ast::EnumDef(it) => self.enum_to_def(container.with_value(it))?.into(),\n                     ast::TraitDef(it) => self.trait_to_def(container.with_value(it))?.into(),\n                     ast::TypeAlias(it) => self.type_alias_to_def(container.with_value(it))?.into(),"}, {"sha": "840841d875fedfc5b435016eea2dd1336fae2904", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -652,7 +652,7 @@ impl ExprCollector<'_> {\n                         let id = self.find_inner_item(&def)?;\n                         (StaticLoc { container, id }.intern(self.db).into(), def.name())\n                     }\n-                    ast::Item::StructDef(def) => {\n+                    ast::Item::Struct(def) => {\n                         let id = self.find_inner_item(&def)?;\n                         (StructLoc { container, id }.intern(self.db).into(), def.name())\n                     }"}, {"sha": "6b96a4c200e77e27c18c90fa3f8716a6ef618ef7", "filename": "crates/ra_hir_def/src/item_tree.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -414,7 +414,7 @@ mod_items! {\n     Import in imports -> ast::Use,\n     ExternCrate in extern_crates -> ast::ExternCrate,\n     Function in functions -> ast::Fn,\n-    Struct in structs -> ast::StructDef,\n+    Struct in structs -> ast::Struct,\n     Union in unions -> ast::Union,\n     Enum in enums -> ast::EnumDef,\n     Const in consts -> ast::ConstDef,\n@@ -514,7 +514,7 @@ pub struct Struct {\n     pub visibility: RawVisibilityId,\n     pub generic_params: GenericParamsId,\n     pub fields: Fields,\n-    pub ast_id: FileAstId<ast::StructDef>,\n+    pub ast_id: FileAstId<ast::Struct>,\n     pub kind: StructDefKind,\n }\n "}, {"sha": "a856180155610a2ca4748094c9db3e753cf51733", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -78,7 +78,7 @@ impl Ctx {\n \n         // Collect inner items for 1-to-1-lowered items.\n         match item {\n-            ast::Item::StructDef(_)\n+            ast::Item::Struct(_)\n             | ast::Item::Union(_)\n             | ast::Item::EnumDef(_)\n             | ast::Item::Fn(_)\n@@ -103,7 +103,7 @@ impl Ctx {\n \n         let attrs = Attrs::new(item, &self.hygiene);\n         let items = match item {\n-            ast::Item::StructDef(ast) => self.lower_struct(ast).map(Into::into),\n+            ast::Item::Struct(ast) => self.lower_struct(ast).map(Into::into),\n             ast::Item::Union(ast) => self.lower_union(ast).map(Into::into),\n             ast::Item::EnumDef(ast) => self.lower_enum(ast).map(Into::into),\n             ast::Item::Fn(ast) => self.lower_function(ast).map(Into::into),\n@@ -165,7 +165,7 @@ impl Ctx {\n         }\n     }\n \n-    fn lower_struct(&mut self, strukt: &ast::StructDef) -> Option<FileItemTreeId<Struct>> {\n+    fn lower_struct(&mut self, strukt: &ast::Struct) -> Option<FileItemTreeId<Struct>> {\n         let visibility = self.lower_visibility(strukt);\n         let name = strukt.name()?.as_name();\n         let generic_params = self.lower_generic_params(GenericsOwner::Struct, strukt);"}, {"sha": "db37223dac5105a1c2f2d680ac7ce1e7fff23f6c", "filename": "crates/ra_hir_def/src/item_tree/tests.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Ftests.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -244,11 +244,11 @@ fn smoke() {\n             > #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"assoc_dfl_method\"))] }, input: None }]) }]\n             > Function { name: Name(Text(\"dfl_method\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), has_self_param: true, is_unsafe: false, params: [Reference(Path(Path { type_anchor: None, mod_path: ModPath { kind: Plain, segments: [Name(Text(\"Self\"))] }, generic_args: [None] }), Mut)], is_varargs: false, ret_type: Tuple([]), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Fn>(11) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct0\"))] }, input: None }]) }]\n-            Struct { name: Name(Text(\"Struct0\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(1), fields: Unit, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(3), kind: Unit }\n+            Struct { name: Name(Text(\"Struct0\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(1), fields: Unit, ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Struct>(3), kind: Unit }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct1\"))] }, input: None }]) }]\n-            Struct { name: Name(Text(\"Struct1\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(2), fields: Tuple(IdRange::<ra_hir_def::item_tree::Field>(0..1)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(4), kind: Tuple }\n+            Struct { name: Name(Text(\"Struct1\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(2), fields: Tuple(IdRange::<ra_hir_def::item_tree::Field>(0..1)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Struct>(4), kind: Tuple }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"struct2\"))] }, input: None }]) }]\n-            Struct { name: Name(Text(\"Struct2\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(3), fields: Record(IdRange::<ra_hir_def::item_tree::Field>(1..2)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::StructDef>(5), kind: Record }\n+            Struct { name: Name(Text(\"Struct2\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(3), fields: Record(IdRange::<ra_hir_def::item_tree::Field>(1..2)), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::Struct>(5), kind: Record }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"en\"))] }, input: None }]) }]\n             Enum { name: Name(Text(\"En\")), visibility: RawVisibilityId(\"pub(self)\"), generic_params: GenericParamsId(4294967295), variants: IdRange::<ra_hir_def::item_tree::Variant>(0..1), ast_id: FileAstId::<ra_syntax::ast::generated::nodes::EnumDef>(6) }\n             #[Attrs { entries: Some([Attr { path: ModPath { kind: Plain, segments: [Name(Text(\"un\"))] }, input: None }]) }]"}, {"sha": "d9ec0f30566066e84d060035cd548ee25966acf3", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -20,7 +20,7 @@ pub const STATIC: Key<ast::StaticDef, StaticId> = Key::new();\n pub const TYPE_ALIAS: Key<ast::TypeAlias, TypeAliasId> = Key::new();\n pub const IMPL: Key<ast::ImplDef, ImplId> = Key::new();\n pub const TRAIT: Key<ast::TraitDef, TraitId> = Key::new();\n-pub const STRUCT: Key<ast::StructDef, StructId> = Key::new();\n+pub const STRUCT: Key<ast::Struct, StructId> = Key::new();\n pub const UNION: Key<ast::Union, UnionId> = Key::new();\n pub const ENUM: Key<ast::EnumDef, EnumId> = Key::new();\n "}, {"sha": "489ec0513a87842f4bc1eb663f87bc5f4a039bdb", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -72,7 +72,7 @@ fn parse_adt(tt: &tt::Subtree) -> Result<BasicAdtInfo, mbe::ExpandError> {\n     let node = item.syntax();\n     let (name, params) = match_ast! {\n         match node {\n-            ast::StructDef(it) => (it.name(), it.generic_param_list()),\n+            ast::Struct(it) => (it.name(), it.generic_param_list()),\n             ast::EnumDef(it) => (it.name(), it.generic_param_list()),\n             ast::Union(it) => (it.name(), it.generic_param_list()),\n             _ => {"}, {"sha": "5686faaabc7fa0f75422b14c2df02502f2b8c601", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -380,7 +380,7 @@ pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option\n     match_ast! {\n         match node {\n             ast::Fn(it) => it.doc_comment_text(),\n-            ast::StructDef(it) => it.doc_comment_text(),\n+            ast::Struct(it) => it.doc_comment_text(),\n             ast::EnumDef(it) => it.doc_comment_text(),\n             ast::TraitDef(it) => it.doc_comment_text(),\n             ast::Module(it) => it.doc_comment_text(),\n@@ -405,7 +405,7 @@ pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) ->\n     match_ast! {\n         match node {\n             ast::Fn(it) => it.short_label(),\n-            ast::StructDef(it) => it.short_label(),\n+            ast::Struct(it) => it.short_label(),\n             ast::EnumDef(it) => it.short_label(),\n             ast::TraitDef(it) => it.short_label(),\n             ast::Module(it) => it.short_label(),"}, {"sha": "504b884c58a7e0e536149fc3247872ac93e0433f", "filename": "crates/ra_ide/src/display/short_label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -13,7 +13,7 @@ impl ShortLabel for ast::Fn {\n     }\n }\n \n-impl ShortLabel for ast::StructDef {\n+impl ShortLabel for ast::Struct {\n     fn short_label(&self) -> Option<String> {\n         short_label_from_node(self, \"struct \")\n     }"}, {"sha": "6f198fcbc673c05d1fbae43ae3bfaf23562e08ca", "filename": "crates/ra_ide/src/file_structure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -126,7 +126,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n \n                 decl_with_detail(it, Some(detail))\n             },\n-            ast::StructDef(it) => decl(it),\n+            ast::Struct(it) => decl(it),\n             ast::Union(it) => decl(it),\n             ast::EnumDef(it) => decl(it),\n             ast::EnumVariant(it) => decl(it),\n@@ -238,7 +238,7 @@ fn very_obsolete() {}\n                         label: \"Foo\",\n                         navigation_range: 8..11,\n                         node_range: 1..26,\n-                        kind: STRUCT_DEF,\n+                        kind: STRUCT,\n                         detail: None,\n                         deprecated: false,\n                     },"}, {"sha": "699fad57d172f13dfbb982845e861ad2689f5aa7", "filename": "crates/ra_ide/src/goto_implementation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_implementation.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -44,7 +44,7 @@ fn impls_for_def(\n     krate: Crate,\n ) -> Option<Vec<NavigationTarget>> {\n     let ty = match node {\n-        ast::AdtDef::StructDef(def) => sema.to_def(def)?.ty(sema.db),\n+        ast::AdtDef::Struct(def) => sema.to_def(def)?.ty(sema.db),\n         ast::AdtDef::EnumDef(def) => sema.to_def(def)?.ty(sema.db),\n         ast::AdtDef::Union(def) => sema.to_def(def)?.ty(sema.db),\n     };"}, {"sha": "83228af2e92b98e363ad3328750ab7ae70a4dcbe", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1443,7 +1443,7 @@ fn main() { let s<|>t = S{ f1:0 }; }\n                                         7..8,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -1482,7 +1482,7 @@ fn main() { let s<|>t = S{ f1:Arg(0) }; }\n                                         24..25,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -1501,7 +1501,7 @@ fn main() { let s<|>t = S{ f1:Arg(0) }; }\n                                         7..10,\n                                     ),\n                                     name: \"Arg\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct Arg\",\n@@ -1540,7 +1540,7 @@ fn main() { let s<|>t = S{ f1: S{ f1: Arg(0) } }; }\n                                         24..25,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -1559,7 +1559,7 @@ fn main() { let s<|>t = S{ f1: S{ f1: Arg(0) } }; }\n                                         7..10,\n                                     ),\n                                     name: \"Arg\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct Arg\",\n@@ -1601,7 +1601,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                         7..8,\n                                     ),\n                                     name: \"A\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct A\",\n@@ -1620,7 +1620,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                         22..23,\n                                     ),\n                                     name: \"B\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct B\",\n@@ -1639,7 +1639,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                         53..54,\n                                     ),\n                                     name: \"C\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"pub struct C\",\n@@ -1737,7 +1737,7 @@ fn main() { let s<|>t = foo(); }\n                                         23..24,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -1877,7 +1877,7 @@ fn main() { let s<|>t = foo(); }\n                                         39..41,\n                                     ),\n                                     name: \"S1\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S1\",\n@@ -1896,7 +1896,7 @@ fn main() { let s<|>t = foo(); }\n                                         52..54,\n                                     ),\n                                     name: \"S2\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S2\",\n@@ -2011,7 +2011,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                         36..37,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2068,7 +2068,7 @@ fn foo(ar<|>g: &impl Foo<S>) {}\n                                         23..24,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2111,7 +2111,7 @@ fn main() { let s<|>t = foo(); }\n                                         49..50,\n                                     ),\n                                     name: \"B\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct B\",\n@@ -2224,7 +2224,7 @@ fn foo(ar<|>g: &dyn Foo<S>) {}\n                                         23..24,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\",\n@@ -2284,7 +2284,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                         50..51,\n                                     ),\n                                     name: \"B\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct B\",\n@@ -2322,7 +2322,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                         65..66,\n                                     ),\n                                     name: \"S\",\n-                                    kind: STRUCT_DEF,\n+                                    kind: STRUCT,\n                                     container_name: None,\n                                     description: Some(\n                                         \"struct S\","}, {"sha": "2a62dab6cb17af890d14003dd5c9d2e7eed92e9e", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -172,7 +172,7 @@ fn get_struct_def_name_for_struct_literal_search(\n         if let Some(name) =\n             sema.find_node_at_offset_with_descend::<ast::Name>(&syntax, left.text_range().start())\n         {\n-            return name.syntax().ancestors().find_map(ast::StructDef::cast).and_then(|l| l.name());\n+            return name.syntax().ancestors().find_map(ast::Struct::cast).and_then(|l| l.name());\n         }\n         if sema\n             .find_node_at_offset_with_descend::<ast::GenericParamList>(\n@@ -181,7 +181,7 @@ fn get_struct_def_name_for_struct_literal_search(\n             )\n             .is_some()\n         {\n-            return left.ancestors().find_map(ast::StructDef::cast).and_then(|l| l.name());\n+            return left.ancestors().find_map(ast::Struct::cast).and_then(|l| l.name());\n         }\n     }\n     None\n@@ -212,7 +212,7 @@ fn main() {\n         );\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(1) 0..26 7..10 Other\",\n+            \"Foo STRUCT FileId(1) 0..26 7..10 Other\",\n             &[\"FileId(1) 101..104 StructLiteral\"],\n         );\n     }\n@@ -230,7 +230,7 @@ struct Foo<|> {}\n         );\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(1) 0..13 7..10 Other\",\n+            \"Foo STRUCT FileId(1) 0..13 7..10 Other\",\n             &[\"FileId(1) 41..44 Other\", \"FileId(1) 54..57 StructLiteral\"],\n         );\n     }\n@@ -248,7 +248,7 @@ struct Foo<T> <|>{}\n         );\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(1) 0..16 7..10 Other\",\n+            \"Foo STRUCT FileId(1) 0..16 7..10 Other\",\n             &[\"FileId(1) 64..67 StructLiteral\"],\n         );\n     }\n@@ -267,7 +267,7 @@ fn main() {\n         );\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(1) 0..16 7..10 Other\",\n+            \"Foo STRUCT FileId(1) 0..16 7..10 Other\",\n             &[\"FileId(1) 54..57 StructLiteral\"],\n         );\n     }\n@@ -431,7 +431,7 @@ fn f() {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(2) 17..51 28..31 Other\",\n+            \"Foo STRUCT FileId(2) 17..51 28..31 Other\",\n             &[\"FileId(1) 53..56 StructLiteral\", \"FileId(3) 79..82 StructLiteral\"],\n         );\n     }\n@@ -486,7 +486,7 @@ pub(super) struct Foo<|> {\n         let refs = analysis.find_all_refs(pos, None).unwrap().unwrap();\n         check_result(\n             refs,\n-            \"Foo STRUCT_DEF FileId(3) 0..41 18..21 Other\",\n+            \"Foo STRUCT FileId(3) 0..41 18..21 Other\",\n             &[\"FileId(2) 20..23 Other\", \"FileId(2) 47..50 StructLiteral\"],\n         );\n     }"}, {"sha": "ba1fd62427e0381c3259512e7550ce0fcac8a5b5", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -705,7 +705,7 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n     };\n \n     let tag = match parent.kind() {\n-        STRUCT_DEF => HighlightTag::Struct,\n+        STRUCT => HighlightTag::Struct,\n         ENUM_DEF => HighlightTag::Enum,\n         UNION => HighlightTag::Union,\n         TRAIT_DEF => HighlightTag::Trait,"}, {"sha": "6a2180f6c233cb704b6a966d8998309939c2089f", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -150,7 +150,7 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n                 let def = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },\n-            ast::StructDef(it) => {\n+            ast::Struct(it) => {\n                 let def: hir::Struct = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::ModuleDef(def.into())))\n             },"}, {"sha": "da19f0f33d63e477718e0d3e16c72bb21783598c", "filename": "crates/ra_ide_db/src/symbol_index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -344,7 +344,7 @@ impl Query {\n }\n \n fn is_type(kind: SyntaxKind) -> bool {\n-    matches!(kind, STRUCT_DEF | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS)\n+    matches!(kind, STRUCT | ENUM_DEF | TRAIT_DEF | TYPE_ALIAS)\n }\n \n /// The actual data that is stored in the index. It should be as compact as\n@@ -398,7 +398,7 @@ fn to_symbol(node: &SyntaxNode) -> Option<(SmolStr, SyntaxNodePtr, TextRange)> {\n     match_ast! {\n         match node {\n             ast::Fn(it) => decl(it),\n-            ast::StructDef(it) => decl(it),\n+            ast::Struct(it) => decl(it),\n             ast::EnumDef(it) => decl(it),\n             ast::TraitDef(it) => decl(it),\n             ast::Module(it) => decl(it),"}, {"sha": "5fc48507ff589d91d71b1ee6eafb6f8c60cb2b95", "filename": "crates/ra_mbe/src/syntax_bridge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsyntax_bridge.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -825,7 +825,7 @@ mod tests {\n     #[test]\n     fn test_token_tree_multi_char_punct() {\n         let source_file = ast::SourceFile::parse(\"struct Foo { a: x::Y }\").ok().unwrap();\n-        let struct_def = source_file.syntax().descendants().find_map(ast::StructDef::cast).unwrap();\n+        let struct_def = source_file.syntax().descendants().find_map(ast::Struct::cast).unwrap();\n         let tt = ast_to_token_tree(&struct_def).unwrap().0;\n         token_tree_to_syntax_node(&tt, FragmentKind::Item).unwrap();\n     }"}, {"sha": "21af06e73a30b0a424283bbeac850cea8a1231bc", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -490,7 +490,7 @@ fn test_expand_to_item_list() {\n         format!(\"{:#?}\", tree).trim(),\n         r#\"\n MACRO_ITEMS@0..40\n-  STRUCT_DEF@0..20\n+  STRUCT@0..20\n     STRUCT_KW@0..6 \"struct\"\n     NAME@6..9\n       IDENT@6..9 \"Foo\"\n@@ -506,7 +506,7 @@ MACRO_ITEMS@0..40\n               NAME_REF@16..19\n                 IDENT@16..19 \"u32\"\n       R_CURLY@19..20 \"}\"\n-  STRUCT_DEF@20..40\n+  STRUCT@20..40\n     STRUCT_KW@20..26 \"struct\"\n     NAME@26..29\n       IDENT@26..29 \"Bar\""}, {"sha": "2f5cfb6b6d3165d319683be156b66778b2444f47", "filename": "crates/ra_parser/src/grammar/items/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -5,7 +5,7 @@ use super::*;\n pub(super) fn struct_def(p: &mut Parser, m: Marker) {\n     assert!(p.at(T![struct]));\n     p.bump(T![struct]);\n-    struct_or_union(p, m, T![struct], STRUCT_DEF);\n+    struct_or_union(p, m, T![struct], STRUCT);\n }\n \n pub(super) fn union_def(p: &mut Parser, m: Marker) {"}, {"sha": "4fad765c7c32021a0ec0a7e4ed97186804f72e03", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,7 +1,7 @@\n //! Generated file, do not edit by hand, see `xtask/src/codegen`\n \n #![allow(bad_style, missing_docs, unreachable_pub)]\n-#[doc = r\" The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\"]\n+#[doc = r\" The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT`.\"]\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n #[repr(u16)]\n pub enum SyntaxKind {\n@@ -123,7 +123,7 @@ pub enum SyntaxKind {\n     L_DOLLAR,\n     R_DOLLAR,\n     SOURCE_FILE,\n-    STRUCT_DEF,\n+    STRUCT,\n     UNION,\n     ENUM_DEF,\n     FN,"}, {"sha": "b69b6e85e98307eae02d88ac3ab2e44551c0c6b0", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -235,7 +235,7 @@ fn test_comments_preserve_trailing_whitespace() {\n     )\n     .ok()\n     .unwrap();\n-    let def = file.syntax().descendants().find_map(StructDef::cast).unwrap();\n+    let def = file.syntax().descendants().find_map(Struct::cast).unwrap();\n     assert_eq!(\n         \"Representation of a Realm.   \\nIn the specification these are called Realm Records.\",\n         def.doc_comment_text().unwrap()"}, {"sha": "0fd3d4f1b54d8800c641d3bc0860f8dbca8c2d1c", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -155,14 +155,14 @@ impl StaticDef {\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct StructDef {\n+pub struct Struct {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for StructDef {}\n-impl ast::NameOwner for StructDef {}\n-impl ast::VisibilityOwner for StructDef {}\n-impl ast::GenericParamsOwner for StructDef {}\n-impl StructDef {\n+impl ast::AttrsOwner for Struct {}\n+impl ast::NameOwner for Struct {}\n+impl ast::VisibilityOwner for Struct {}\n+impl ast::GenericParamsOwner for Struct {}\n+impl Struct {\n     pub fn struct_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![struct]) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n     pub fn field_list(&self) -> Option<FieldList> { support::child(&self.syntax) }\n@@ -1281,7 +1281,7 @@ pub enum Item {\n     MacroCall(MacroCall),\n     Module(Module),\n     StaticDef(StaticDef),\n-    StructDef(StructDef),\n+    Struct(Struct),\n     TraitDef(TraitDef),\n     TypeAlias(TypeAlias),\n     Union(Union),\n@@ -1391,7 +1391,7 @@ impl ast::NameOwner for ExternItem {}\n impl ast::VisibilityOwner for ExternItem {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum AdtDef {\n-    StructDef(StructDef),\n+    Struct(Struct),\n     EnumDef(EnumDef),\n     Union(Union),\n }\n@@ -1520,8 +1520,8 @@ impl AstNode for StaticDef {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for StructDef {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == STRUCT_DEF }\n+impl AstNode for Struct {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == STRUCT }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2801,8 +2801,8 @@ impl From<Module> for Item {\n impl From<StaticDef> for Item {\n     fn from(node: StaticDef) -> Item { Item::StaticDef(node) }\n }\n-impl From<StructDef> for Item {\n-    fn from(node: StructDef) -> Item { Item::StructDef(node) }\n+impl From<Struct> for Item {\n+    fn from(node: Struct) -> Item { Item::Struct(node) }\n }\n impl From<TraitDef> for Item {\n     fn from(node: TraitDef) -> Item { Item::TraitDef(node) }\n@@ -2820,7 +2820,7 @@ impl AstNode for Item {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             CONST_DEF | ENUM_DEF | EXTERN_BLOCK | EXTERN_CRATE | FN | IMPL_DEF | MACRO_CALL\n-            | MODULE | STATIC_DEF | STRUCT_DEF | TRAIT_DEF | TYPE_ALIAS | UNION | USE => true,\n+            | MODULE | STATIC_DEF | STRUCT | TRAIT_DEF | TYPE_ALIAS | UNION | USE => true,\n             _ => false,\n         }\n     }\n@@ -2835,7 +2835,7 @@ impl AstNode for Item {\n             MACRO_CALL => Item::MacroCall(MacroCall { syntax }),\n             MODULE => Item::Module(Module { syntax }),\n             STATIC_DEF => Item::StaticDef(StaticDef { syntax }),\n-            STRUCT_DEF => Item::StructDef(StructDef { syntax }),\n+            STRUCT => Item::Struct(Struct { syntax }),\n             TRAIT_DEF => Item::TraitDef(TraitDef { syntax }),\n             TYPE_ALIAS => Item::TypeAlias(TypeAlias { syntax }),\n             UNION => Item::Union(Union { syntax }),\n@@ -2855,7 +2855,7 @@ impl AstNode for Item {\n             Item::MacroCall(it) => &it.syntax,\n             Item::Module(it) => &it.syntax,\n             Item::StaticDef(it) => &it.syntax,\n-            Item::StructDef(it) => &it.syntax,\n+            Item::Struct(it) => &it.syntax,\n             Item::TraitDef(it) => &it.syntax,\n             Item::TypeAlias(it) => &it.syntax,\n             Item::Union(it) => &it.syntax,\n@@ -3372,8 +3372,8 @@ impl AstNode for ExternItem {\n         }\n     }\n }\n-impl From<StructDef> for AdtDef {\n-    fn from(node: StructDef) -> AdtDef { AdtDef::StructDef(node) }\n+impl From<Struct> for AdtDef {\n+    fn from(node: Struct) -> AdtDef { AdtDef::Struct(node) }\n }\n impl From<EnumDef> for AdtDef {\n     fn from(node: EnumDef) -> AdtDef { AdtDef::EnumDef(node) }\n@@ -3384,13 +3384,13 @@ impl From<Union> for AdtDef {\n impl AstNode for AdtDef {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            STRUCT_DEF | ENUM_DEF | UNION => true,\n+            STRUCT | ENUM_DEF | UNION => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n-            STRUCT_DEF => AdtDef::StructDef(StructDef { syntax }),\n+            STRUCT => AdtDef::Struct(Struct { syntax }),\n             ENUM_DEF => AdtDef::EnumDef(EnumDef { syntax }),\n             UNION => AdtDef::Union(Union { syntax }),\n             _ => return None,\n@@ -3399,7 +3399,7 @@ impl AstNode for AdtDef {\n     }\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n-            AdtDef::StructDef(it) => &it.syntax,\n+            AdtDef::Struct(it) => &it.syntax,\n             AdtDef::EnumDef(it) => &it.syntax,\n             AdtDef::Union(it) => &it.syntax,\n         }\n@@ -3510,7 +3510,7 @@ impl std::fmt::Display for StaticDef {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for StructDef {\n+impl std::fmt::Display for Struct {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "2299988ce74a69a580e05b846ca3a4d51c97483e", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -183,7 +183,7 @@ impl StructKind {\n     }\n }\n \n-impl ast::StructDef {\n+impl ast::Struct {\n     pub fn kind(&self) -> StructKind {\n         StructKind::from_node(self)\n     }\n@@ -475,7 +475,7 @@ impl ast::TokenTree {\n \n impl ast::DocCommentsOwner for ast::SourceFile {}\n impl ast::DocCommentsOwner for ast::Fn {}\n-impl ast::DocCommentsOwner for ast::StructDef {}\n+impl ast::DocCommentsOwner for ast::Struct {}\n impl ast::DocCommentsOwner for ast::Union {}\n impl ast::DocCommentsOwner for ast::RecordField {}\n impl ast::DocCommentsOwner for ast::TupleField {}"}, {"sha": "ef260ea592de4496e7d2a0a7e39e3f6159ade644", "filename": "crates/ra_syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -146,8 +146,8 @@ fn n_attached_trivias<'a>(\n     trivias: impl Iterator<Item = (SyntaxKind, &'a str)>,\n ) -> usize {\n     match kind {\n-        MACRO_CALL | CONST_DEF | TYPE_ALIAS | STRUCT_DEF | ENUM_DEF | ENUM_VARIANT | FN\n-        | TRAIT_DEF | MODULE | RECORD_FIELD | STATIC_DEF => {\n+        MACRO_CALL | CONST_DEF | TYPE_ALIAS | STRUCT | ENUM_DEF | ENUM_VARIANT | FN | TRAIT_DEF\n+        | MODULE | RECORD_FIELD | STATIC_DEF => {\n             let mut res = 0;\n             let mut trivias = trivias.enumerate().peekable();\n "}, {"sha": "bbbf496c82de40fe356d88ccb045355f1173f6e2", "filename": "crates/ra_syntax/test_data/parser/err/0000_struct_field_missing_comma.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..34\n-  STRUCT_DEF@0..34\n+  STRUCT@0..34\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8"}, {"sha": "6dc73bfdbae629b87f2079460814489f8fcc7cd1", "filename": "crates/ra_syntax/test_data/parser/err/0001_item_recovery_in_file.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -5,7 +5,7 @@ SOURCE_FILE@0..21\n   ERROR@3..8\n     MATCH_KW@3..8 \"match\"\n   WHITESPACE@8..10 \"\\n\\n\"\n-  STRUCT_DEF@10..21\n+  STRUCT@10..21\n     STRUCT_KW@10..16 \"struct\"\n     WHITESPACE@16..17 \" \"\n     NAME@17..18"}, {"sha": "7763fad840b69062e8f7af2d4409086a4879e90b", "filename": "crates/ra_syntax/test_data/parser/err/0003_C++_semicolon.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..40\n-  STRUCT_DEF@0..39\n+  STRUCT@0..39\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8"}, {"sha": "5f85c3943ab9c95cdf531001ec28745eaa480a8a", "filename": "crates/ra_syntax/test_data/parser/err/0006_named_field_recovery.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..74\n-  STRUCT_DEF@0..73\n+  STRUCT@0..73\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8"}, {"sha": "560bfd7518602b02ddf027b2e91521a5d4afd317", "filename": "crates/ra_syntax/test_data/parser/err/0007_stray_curly_in_file.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0007_stray_curly_in_file.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -2,7 +2,7 @@ SOURCE_FILE@0..31\n   ERROR@0..1\n     R_CURLY@0..1 \"}\"\n   WHITESPACE@1..3 \"\\n\\n\"\n-  STRUCT_DEF@3..12\n+  STRUCT@3..12\n     STRUCT_KW@3..9 \"struct\"\n     WHITESPACE@9..10 \" \"\n     NAME@10..11"}, {"sha": "dacf71aa16514eda790ddad05628b4a39b86c91c", "filename": "crates/ra_syntax/test_data/parser/err/0009_broken_struct_type_parameter.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0009_broken_struct_type_parameter.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..43\n-  STRUCT_DEF@0..11\n+  STRUCT@0..11\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8\n@@ -38,7 +38,7 @@ SOURCE_FILE@0..43\n     WHITESPACE@29..30 \"\\n\"\n     R_CURLY@30..31 \"}\"\n   WHITESPACE@31..33 \"\\n\\n\"\n-  STRUCT_DEF@33..42\n+  STRUCT@33..42\n     STRUCT_KW@33..39 \"struct\"\n     WHITESPACE@39..40 \" \"\n     NAME@40..41"}, {"sha": "b02d390af9b6adcdbead6beb231437be87e9298d", "filename": "crates/ra_syntax/test_data/parser/err/0011_extern_struct.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0011_extern_struct.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0011_extern_struct.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0011_extern_struct.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -3,7 +3,7 @@ SOURCE_FILE@0..19\n     ABI@0..6\n       EXTERN_KW@0..6 \"extern\"\n   WHITESPACE@6..7 \" \"\n-  STRUCT_DEF@7..18\n+  STRUCT@7..18\n     STRUCT_KW@7..13 \"struct\"\n     WHITESPACE@13..14 \" \"\n     NAME@14..17"}, {"sha": "3eef848fc8eedfc96630bcdd98bb0e8dd96db126", "filename": "crates/ra_syntax/test_data/parser/err/0013_invalid_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..86\n-  STRUCT_DEF@0..72\n+  STRUCT@0..72\n     VISIBILITY@0..3\n       PUB_KW@0..3 \"pub\"\n     WHITESPACE@3..4 \" \""}, {"sha": "02339d03572cd740b99910f244d981f6366d4280", "filename": "crates/ra_syntax/test_data/parser/err/0022_bad_exprs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0022_bad_exprs.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -28,7 +28,7 @@ SOURCE_FILE@0..112\n         ERROR@17..18\n           COMMA@17..18 \",\"\n       WHITESPACE@18..19 \" \"\n-      STRUCT_DEF@19..26\n+      STRUCT@19..26\n         STRUCT_KW@19..25 \"struct\"\n         ERROR@25..26\n           COMMA@25..26 \",\""}, {"sha": "e95688f56a58d40120e320617e9edf5f37446e21", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0007_type_param_bounds.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0007_type_param_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0007_type_param_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0007_type_param_bounds.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..35\n-  STRUCT_DEF@0..34\n+  STRUCT@0..34\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8"}, {"sha": "50742cbcf1f6f70e53c1f3dfac44ec02dacb9437", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0022_crate_visibility.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0022_crate_visibility.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0022_crate_visibility.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0022_crate_visibility.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..81\n-  STRUCT_DEF@0..20\n+  STRUCT@0..20\n     VISIBILITY@0..10\n       PUB_KW@0..3 \"pub\"\n       L_PAREN@3..4 \"(\"\n@@ -12,7 +12,7 @@ SOURCE_FILE@0..81\n       IDENT@18..19 \"S\"\n     SEMICOLON@19..20 \";\"\n   WHITESPACE@20..21 \"\\n\"\n-  STRUCT_DEF@21..40\n+  STRUCT@21..40\n     VISIBILITY@21..30\n       PUB_KW@21..24 \"pub\"\n       L_PAREN@24..25 \"(\"\n@@ -25,7 +25,7 @@ SOURCE_FILE@0..81\n       IDENT@38..39 \"S\"\n     SEMICOLON@39..40 \";\"\n   WHITESPACE@40..41 \"\\n\"\n-  STRUCT_DEF@41..60\n+  STRUCT@41..60\n     VISIBILITY@41..50\n       PUB_KW@41..44 \"pub\"\n       L_PAREN@44..45 \"(\"\n@@ -38,7 +38,7 @@ SOURCE_FILE@0..81\n       IDENT@58..59 \"S\"\n     SEMICOLON@59..60 \";\"\n   WHITESPACE@60..61 \"\\n\"\n-  STRUCT_DEF@61..80\n+  STRUCT@61..80\n     VISIBILITY@61..70\n       PUB_KW@61..64 \"pub\"\n       L_PAREN@64..65 \"(\""}, {"sha": "db5bd28496933e6629f7455dd3023ab6c82effdf", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0040_crate_keyword_vis.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -16,7 +16,7 @@ SOURCE_FILE@0..71\n       WHITESPACE@17..18 \" \"\n       R_CURLY@18..19 \"}\"\n   WHITESPACE@19..20 \"\\n\"\n-  STRUCT_DEF@20..49\n+  STRUCT@20..49\n     STRUCT_KW@20..26 \"struct\"\n     WHITESPACE@26..27 \" \"\n     NAME@27..28\n@@ -41,7 +41,7 @@ SOURCE_FILE@0..71\n       WHITESPACE@47..48 \" \"\n       R_CURLY@48..49 \"}\"\n   WHITESPACE@49..50 \"\\n\"\n-  STRUCT_DEF@50..70\n+  STRUCT@50..70\n     STRUCT_KW@50..56 \"struct\"\n     WHITESPACE@56..57 \" \"\n     NAME@57..58"}, {"sha": "9ae271817e95562f713bcc7d8def8c60829a4aea", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0054_record_field_attrs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..64\n-  STRUCT_DEF@0..63\n+  STRUCT@0..63\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8"}, {"sha": "de8217064f1f096b0395add11947fdc837218142", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0062_mod_contents.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0062_mod_contents.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -57,7 +57,7 @@ SOURCE_FILE@0..70\n       L_CURLY@57..58 \"{\"\n       R_CURLY@58..59 \"}\"\n   WHITESPACE@59..60 \"\\n\"\n-  STRUCT_DEF@60..69\n+  STRUCT@60..69\n     STRUCT_KW@60..66 \"struct\"\n     WHITESPACE@66..67 \" \"\n     NAME@67..68"}, {"sha": "cdbc40fe0b2fbffeeb2a7bf3a938569ebf024030", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0083_struct_items.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,12 +1,12 @@\n SOURCE_FILE@0..106\n-  STRUCT_DEF@0..11\n+  STRUCT@0..11\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..10\n       IDENT@7..10 \"Foo\"\n     SEMICOLON@10..11 \";\"\n   WHITESPACE@11..12 \"\\n\"\n-  STRUCT_DEF@12..25\n+  STRUCT@12..25\n     STRUCT_KW@12..18 \"struct\"\n     WHITESPACE@18..19 \" \"\n     NAME@19..22\n@@ -16,7 +16,7 @@ SOURCE_FILE@0..106\n       L_CURLY@23..24 \"{\"\n       R_CURLY@24..25 \"}\"\n   WHITESPACE@25..26 \"\\n\"\n-  STRUCT_DEF@26..39\n+  STRUCT@26..39\n     STRUCT_KW@26..32 \"struct\"\n     WHITESPACE@32..33 \" \"\n     NAME@33..36\n@@ -26,7 +26,7 @@ SOURCE_FILE@0..106\n       R_PAREN@37..38 \")\"\n     SEMICOLON@38..39 \";\"\n   WHITESPACE@39..40 \"\\n\"\n-  STRUCT_DEF@40..66\n+  STRUCT@40..66\n     STRUCT_KW@40..46 \"struct\"\n     WHITESPACE@46..47 \" \"\n     NAME@47..50\n@@ -50,7 +50,7 @@ SOURCE_FILE@0..106\n       R_PAREN@64..65 \")\"\n     SEMICOLON@65..66 \";\"\n   WHITESPACE@66..67 \"\\n\"\n-  STRUCT_DEF@67..105\n+  STRUCT@67..105\n     STRUCT_KW@67..73 \"struct\"\n     WHITESPACE@73..74 \" \"\n     NAME@74..77"}, {"sha": "2ef026e37099032265cf64a2be532e09bb741871", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0090_type_param_default.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0090_type_param_default.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0090_type_param_default.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0090_type_param_default.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..19\n-  STRUCT_DEF@0..18\n+  STRUCT@0..18\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8"}, {"sha": "0e1594dc4852f8532853af2e0ad5eec48ebf3434", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0114_tuple_struct_where.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..53\n-  STRUCT_DEF@0..33\n+  STRUCT@0..33\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..11\n@@ -40,7 +40,7 @@ SOURCE_FILE@0..53\n                     IDENT@27..32 \"Clone\"\n     SEMICOLON@32..33 \";\"\n   WHITESPACE@33..34 \"\\n\"\n-  STRUCT_DEF@34..52\n+  STRUCT@34..52\n     STRUCT_KW@34..40 \"struct\"\n     WHITESPACE@40..41 \" \"\n     NAME@41..45"}, {"sha": "4d09c9f50f31c238c0717c9c27a49e7e82930689", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0115_tuple_field_attrs.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..60\n-  STRUCT_DEF@0..59\n+  STRUCT@0..59\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8"}, {"sha": "280f947ce0679a4e7f140ac1ba9ed12b975c1bba", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0134_nocontentexpr_after_item.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -47,7 +47,7 @@ SOURCE_FILE@0..111\n           R_CURLY@89..90 \"}\"\n       SEMICOLON@90..91 \";\"\n       WHITESPACE@91..96 \"\\n    \"\n-      STRUCT_DEF@96..107\n+      STRUCT@96..107\n         STRUCT_KW@96..102 \"struct\"\n         WHITESPACE@102..103 \" \"\n         NAME@103..104"}, {"sha": "9312eab65e4c6883bacdbc345e99317eb7dbc609", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0147_const_param.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_const_param.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_const_param.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0147_const_param.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..24\n-  STRUCT_DEF@0..23\n+  STRUCT@0..23\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8"}, {"sha": "a171fe7a86d78f20083b7f1fc1eb8de766651604", "filename": "crates/ra_syntax/test_data/parser/ok/0001_struct_item.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0001_struct_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0001_struct_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0001_struct_item.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..32\n-  STRUCT_DEF@0..31\n+  STRUCT@0..31\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8"}, {"sha": "362892b91f1dedc296d4b746f30aa9242240bcfb", "filename": "crates/ra_syntax/test_data/parser/ok/0002_struct_item_field.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0002_struct_item_field.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0002_struct_item_field.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0002_struct_item_field.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..25\n-  STRUCT_DEF@0..25\n+  STRUCT@0..25\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8"}, {"sha": "b2c1d791f145d26bea2ca71ea291db2c5ce357fa", "filename": "crates/ra_syntax/test_data/parser/ok/0008_mod_item.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -40,7 +40,7 @@ SOURCE_FILE@0..118\n           WHITESPACE@41..46 \"\\n    \"\n           R_CURLY@46..47 \"}\"\n       WHITESPACE@47..52 \"\\n    \"\n-      STRUCT_DEF@52..63\n+      STRUCT@52..63\n         STRUCT_KW@52..58 \"struct\"\n         WHITESPACE@58..59 \" \"\n         NAME@59..60"}, {"sha": "b15f41dd7e974d6045df38701cfd69e4602a4304", "filename": "crates/ra_syntax/test_data/parser/ok/0016_struct_flavors.rast", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0016_struct_flavors.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0016_struct_flavors.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0016_struct_flavors.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,12 +1,12 @@\n SOURCE_FILE@0..97\n-  STRUCT_DEF@0..9\n+  STRUCT@0..9\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8\n       IDENT@7..8 \"A\"\n     SEMICOLON@8..9 \";\"\n   WHITESPACE@9..10 \"\\n\"\n-  STRUCT_DEF@10..21\n+  STRUCT@10..21\n     STRUCT_KW@10..16 \"struct\"\n     WHITESPACE@16..17 \" \"\n     NAME@17..18\n@@ -16,7 +16,7 @@ SOURCE_FILE@0..97\n       L_CURLY@19..20 \"{\"\n       R_CURLY@20..21 \"}\"\n   WHITESPACE@21..22 \"\\n\"\n-  STRUCT_DEF@22..33\n+  STRUCT@22..33\n     STRUCT_KW@22..28 \"struct\"\n     WHITESPACE@28..29 \" \"\n     NAME@29..30\n@@ -26,7 +26,7 @@ SOURCE_FILE@0..97\n       R_PAREN@31..32 \")\"\n     SEMICOLON@32..33 \";\"\n   WHITESPACE@33..35 \"\\n\\n\"\n-  STRUCT_DEF@35..74\n+  STRUCT@35..74\n     STRUCT_KW@35..41 \"struct\"\n     WHITESPACE@41..42 \" \"\n     NAME@42..43\n@@ -63,7 +63,7 @@ SOURCE_FILE@0..97\n       WHITESPACE@72..73 \"\\n\"\n       R_CURLY@73..74 \"}\"\n   WHITESPACE@74..76 \"\\n\\n\"\n-  STRUCT_DEF@76..96\n+  STRUCT@76..96\n     STRUCT_KW@76..82 \"struct\"\n     WHITESPACE@82..83 \" \"\n     NAME@83..84"}, {"sha": "630aa0708bb88bf6e6a8e23c1420f44d23a41daf", "filename": "crates/ra_syntax/test_data/parser/ok/0018_struct_type_params.rast", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0018_struct_type_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0018_struct_type_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0018_struct_type_params.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..290\n-  STRUCT_DEF@0..13\n+  STRUCT@0..13\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..9\n@@ -12,7 +12,7 @@ SOURCE_FILE@0..290\n       R_ANGLE@11..12 \">\"\n     SEMICOLON@12..13 \";\"\n   WHITESPACE@13..14 \"\\n\"\n-  STRUCT_DEF@14..32\n+  STRUCT@14..32\n     STRUCT_KW@14..20 \"struct\"\n     WHITESPACE@20..21 \" \"\n     NAME@21..23\n@@ -34,7 +34,7 @@ SOURCE_FILE@0..290\n       R_PAREN@30..31 \")\"\n     SEMICOLON@31..32 \";\"\n   WHITESPACE@32..33 \"\\n\"\n-  STRUCT_DEF@33..56\n+  STRUCT@33..56\n     STRUCT_KW@33..39 \"struct\"\n     WHITESPACE@39..40 \" \"\n     NAME@40..42\n@@ -62,7 +62,7 @@ SOURCE_FILE@0..290\n       WHITESPACE@54..55 \" \"\n       R_CURLY@55..56 \"}\"\n   WHITESPACE@56..58 \"\\n\\n\"\n-  STRUCT_DEF@58..70\n+  STRUCT@58..70\n     STRUCT_KW@58..64 \"struct\"\n     WHITESPACE@64..65 \" \"\n     NAME@65..67\n@@ -72,7 +72,7 @@ SOURCE_FILE@0..290\n       R_ANGLE@68..69 \">\"\n     SEMICOLON@69..70 \";\"\n   WHITESPACE@70..71 \"\\n\"\n-  STRUCT_DEF@71..85\n+  STRUCT@71..85\n     STRUCT_KW@71..77 \"struct\"\n     WHITESPACE@77..78 \" \"\n     NAME@78..80\n@@ -84,7 +84,7 @@ SOURCE_FILE@0..290\n       R_ANGLE@83..84 \">\"\n     SEMICOLON@84..85 \";\"\n   WHITESPACE@85..86 \"\\n\"\n-  STRUCT_DEF@86..101\n+  STRUCT@86..101\n     STRUCT_KW@86..92 \"struct\"\n     WHITESPACE@92..93 \" \"\n     NAME@93..95\n@@ -97,7 +97,7 @@ SOURCE_FILE@0..290\n       R_ANGLE@99..100 \">\"\n     SEMICOLON@100..101 \";\"\n   WHITESPACE@101..102 \"\\n\"\n-  STRUCT_DEF@102..120\n+  STRUCT@102..120\n     STRUCT_KW@102..108 \"struct\"\n     WHITESPACE@108..109 \" \"\n     NAME@109..111\n@@ -112,7 +112,7 @@ SOURCE_FILE@0..290\n       R_ANGLE@118..119 \">\"\n     SEMICOLON@119..120 \";\"\n   WHITESPACE@120..121 \"\\n\"\n-  STRUCT_DEF@121..142\n+  STRUCT@121..142\n     STRUCT_KW@121..127 \"struct\"\n     WHITESPACE@127..128 \" \"\n     NAME@128..130\n@@ -130,7 +130,7 @@ SOURCE_FILE@0..290\n       R_ANGLE@140..141 \">\"\n     SEMICOLON@141..142 \";\"\n   WHITESPACE@142..143 \"\\n\"\n-  STRUCT_DEF@143..166\n+  STRUCT@143..166\n     STRUCT_KW@143..149 \"struct\"\n     WHITESPACE@149..150 \" \"\n     NAME@150..152\n@@ -149,7 +149,7 @@ SOURCE_FILE@0..290\n       R_ANGLE@164..165 \">\"\n     SEMICOLON@165..166 \";\"\n   WHITESPACE@166..167 \"\\n\"\n-  STRUCT_DEF@167..183\n+  STRUCT@167..183\n     STRUCT_KW@167..173 \"struct\"\n     WHITESPACE@173..174 \" \"\n     NAME@174..177\n@@ -162,7 +162,7 @@ SOURCE_FILE@0..290\n       R_ANGLE@181..182 \">\"\n     SEMICOLON@182..183 \";\"\n   WHITESPACE@183..184 \"\\n\"\n-  STRUCT_DEF@184..203\n+  STRUCT@184..203\n     STRUCT_KW@184..190 \"struct\"\n     WHITESPACE@190..191 \" \"\n     NAME@191..194\n@@ -178,7 +178,7 @@ SOURCE_FILE@0..290\n       R_ANGLE@201..202 \">\"\n     SEMICOLON@202..203 \";\"\n   WHITESPACE@203..204 \"\\n\"\n-  STRUCT_DEF@204..233\n+  STRUCT@204..233\n     STRUCT_KW@204..210 \"struct\"\n     WHITESPACE@210..211 \" \"\n     NAME@211..214\n@@ -202,7 +202,7 @@ SOURCE_FILE@0..290\n       R_ANGLE@231..232 \">\"\n     SEMICOLON@232..233 \";\"\n   WHITESPACE@233..235 \"\\n\\n\"\n-  STRUCT_DEF@235..249\n+  STRUCT@235..249\n     STRUCT_KW@235..241 \"struct\"\n     WHITESPACE@241..242 \" \"\n     NAME@242..245\n@@ -215,7 +215,7 @@ SOURCE_FILE@0..290\n       R_ANGLE@247..248 \">\"\n     SEMICOLON@248..249 \";\"\n   WHITESPACE@249..250 \"\\n\"\n-  STRUCT_DEF@250..267\n+  STRUCT@250..267\n     STRUCT_KW@250..256 \"struct\"\n     WHITESPACE@256..257 \" \"\n     NAME@257..260\n@@ -233,7 +233,7 @@ SOURCE_FILE@0..290\n       R_ANGLE@265..266 \">\"\n     SEMICOLON@266..267 \";\"\n   WHITESPACE@267..268 \"\\n\"\n-  STRUCT_DEF@268..289\n+  STRUCT@268..289\n     STRUCT_KW@268..274 \"struct\"\n     WHITESPACE@274..275 \" \"\n     NAME@275..278"}, {"sha": "9bdc50e1e790c2424d138a344faebc72f3d186b9", "filename": "crates/ra_syntax/test_data/parser/ok/0020_type_param_bounds.rast", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0020_type_param_bounds.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0020_type_param_bounds.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0020_type_param_bounds.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..250\n-  STRUCT_DEF@0..12\n+  STRUCT@0..12\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8\n@@ -12,7 +12,7 @@ SOURCE_FILE@0..250\n       R_ANGLE@10..11 \">\"\n     SEMICOLON@11..12 \";\"\n   WHITESPACE@12..13 \"\\n\"\n-  STRUCT_DEF@13..26\n+  STRUCT@13..26\n     STRUCT_KW@13..19 \"struct\"\n     WHITESPACE@19..20 \" \"\n     NAME@20..21\n@@ -27,7 +27,7 @@ SOURCE_FILE@0..250\n       R_ANGLE@24..25 \">\"\n     SEMICOLON@25..26 \";\"\n   WHITESPACE@26..27 \"\\n\"\n-  STRUCT_DEF@27..43\n+  STRUCT@27..43\n     STRUCT_KW@27..33 \"struct\"\n     WHITESPACE@33..34 \" \"\n     NAME@34..35\n@@ -45,7 +45,7 @@ SOURCE_FILE@0..250\n       R_ANGLE@41..42 \">\"\n     SEMICOLON@42..43 \";\"\n   WHITESPACE@43..44 \"\\n\"\n-  STRUCT_DEF@44..63\n+  STRUCT@44..63\n     STRUCT_KW@44..50 \"struct\"\n     WHITESPACE@50..51 \" \"\n     NAME@51..52\n@@ -66,7 +66,7 @@ SOURCE_FILE@0..250\n       R_ANGLE@61..62 \">\"\n     SEMICOLON@62..63 \";\"\n   WHITESPACE@63..64 \"\\n\"\n-  STRUCT_DEF@64..86\n+  STRUCT@64..86\n     STRUCT_KW@64..70 \"struct\"\n     WHITESPACE@70..71 \" \"\n     NAME@71..72\n@@ -90,7 +90,7 @@ SOURCE_FILE@0..250\n       R_ANGLE@84..85 \">\"\n     SEMICOLON@85..86 \";\"\n   WHITESPACE@86..87 \"\\n\"\n-  STRUCT_DEF@87..116\n+  STRUCT@87..116\n     STRUCT_KW@87..93 \"struct\"\n     WHITESPACE@93..94 \" \"\n     NAME@94..95\n@@ -122,7 +122,7 @@ SOURCE_FILE@0..250\n       R_ANGLE@114..115 \">\"\n     SEMICOLON@115..116 \";\"\n   WHITESPACE@116..117 \"\\n\"\n-  STRUCT_DEF@117..143\n+  STRUCT@117..143\n     STRUCT_KW@117..123 \"struct\"\n     WHITESPACE@123..124 \" \"\n     NAME@124..125\n@@ -153,7 +153,7 @@ SOURCE_FILE@0..250\n       R_ANGLE@141..142 \">\"\n     SEMICOLON@142..143 \";\"\n   WHITESPACE@143..144 \"\\n\"\n-  STRUCT_DEF@144..180\n+  STRUCT@144..180\n     STRUCT_KW@144..150 \"struct\"\n     WHITESPACE@150..151 \" \"\n     NAME@151..152\n@@ -194,7 +194,7 @@ SOURCE_FILE@0..250\n       R_ANGLE@178..179 \">\"\n     SEMICOLON@179..180 \";\"\n   WHITESPACE@180..181 \"\\n\"\n-  STRUCT_DEF@181..199\n+  STRUCT@181..199\n     STRUCT_KW@181..187 \"struct\"\n     WHITESPACE@187..188 \" \"\n     NAME@188..189\n@@ -217,7 +217,7 @@ SOURCE_FILE@0..250\n       R_ANGLE@197..198 \">\"\n     SEMICOLON@198..199 \";\"\n   WHITESPACE@199..200 \"\\n\"\n-  STRUCT_DEF@200..250\n+  STRUCT@200..250\n     STRUCT_KW@200..206 \"struct\"\n     WHITESPACE@206..207 \" \"\n     NAME@207..208"}, {"sha": "8cfc14f491cb5333702e2c805342b3d12f87f13f", "filename": "crates/ra_syntax/test_data/parser/ok/0040_raw_struct_item_field.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0040_raw_struct_item_field.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0040_raw_struct_item_field.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0040_raw_struct_item_field.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,5 +1,5 @@\n SOURCE_FILE@0..27\n-  STRUCT_DEF@0..27\n+  STRUCT@0..27\n     STRUCT_KW@0..6 \"struct\"\n     WHITESPACE@6..7 \" \"\n     NAME@7..8"}, {"sha": "c4ffc0a3d8b7f1ba11edb011fd32969100cf8c83", "filename": "crates/ra_syntax/test_data/parser/ok/0042_ufcs_call_list.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0042_ufcs_call_list.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,7 +1,7 @@\n SOURCE_FILE@0..199\n   COMMENT@0..60 \"// https://github.com ...\"\n   WHITESPACE@60..62 \"\\n\\n\"\n-  STRUCT_DEF@62..73\n+  STRUCT@62..73\n     STRUCT_KW@62..68 \"struct\"\n     WHITESPACE@68..69 \" \"\n     NAME@69..72"}, {"sha": "adc4a22e969834479105f2ed5f9481ff984064d9", "filename": "crates/ra_syntax/test_data/parser/ok/0043_complex_assignment.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -1,7 +1,7 @@\n SOURCE_FILE@0..160\n   COMMENT@0..60 \"// https://github.com ...\"\n   WHITESPACE@60..62 \"\\n\\n\"\n-  STRUCT_DEF@62..90\n+  STRUCT@62..90\n     STRUCT_KW@62..68 \"struct\"\n     WHITESPACE@68..69 \" \"\n     NAME@69..73"}, {"sha": "cb11dffd072b820f5eb44728819e9c467cc1fb27", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -925,7 +925,7 @@ pub(crate) fn handle_code_lens(\n                     matches!(\n                         it.kind,\n                         SyntaxKind::TRAIT_DEF\n-                            | SyntaxKind::STRUCT_DEF\n+                            | SyntaxKind::STRUCT\n                             | SyntaxKind::ENUM_DEF\n                             | SyntaxKind::UNION\n                     )"}, {"sha": "a09a74c41c0727f653b879c1581035c8dfbeda81", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -32,7 +32,7 @@ pub(crate) fn range(line_index: &LineIndex, range: TextRange) -> lsp_types::Rang\n pub(crate) fn symbol_kind(syntax_kind: SyntaxKind) -> lsp_types::SymbolKind {\n     match syntax_kind {\n         SyntaxKind::FN => lsp_types::SymbolKind::Function,\n-        SyntaxKind::STRUCT_DEF => lsp_types::SymbolKind::Struct,\n+        SyntaxKind::STRUCT => lsp_types::SymbolKind::Struct,\n         SyntaxKind::ENUM_DEF => lsp_types::SymbolKind::Enum,\n         SyntaxKind::ENUM_VARIANT => lsp_types::SymbolKind::EnumMember,\n         SyntaxKind::TRAIT_DEF => lsp_types::SymbolKind::Interface,"}, {"sha": "e8a90636e6f587f0465a12e4268091c8b7f3fd42", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -93,7 +93,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n     ],\n     nodes: &[\n         \"SOURCE_FILE\",\n-        \"STRUCT_DEF\",\n+        \"STRUCT\",\n         \"UNION\",\n         \"ENUM_DEF\",\n         \"FN\","}, {"sha": "e993a750c1d8f345bf707400216954bf9ce66938", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -307,7 +307,7 @@ fn generate_syntax_kinds(grammar: KindsSrc<'_>) -> Result<String> {\n \n     let ast = quote! {\n         #![allow(bad_style, missing_docs, unreachable_pub)]\n-        /// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT_DEF`.\n+        /// The kind of syntax node, e.g. `IDENT`, `USE_KW`, or `STRUCT`.\n         #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n         #[repr(u16)]\n         pub enum SyntaxKind {"}, {"sha": "d038c5c5acaebd10f24cada8ffcd5c3086cd8f55", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/97df465391f50521c5102474d7e0ee2ea61ef48e/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/97df465391f50521c5102474d7e0ee2ea61ef48e/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=97df465391f50521c5102474d7e0ee2ea61ef48e", "patch": "@@ -13,7 +13,7 @@ Item =\n | MacroCall\n | Module\n | StaticDef\n-| StructDef\n+| Struct\n | TraitDef\n | TypeAlias\n | Union\n@@ -76,7 +76,7 @@ TypeAlias =\n   Attr* Visibility? 'default'? 'type' Name GenericParamList? (':' TypeBoundList?)? WhereClause?\n   '=' TypeRef ';'\n \n-StructDef =\n+Struct =\n   Attr* Visibility? 'struct' Name GenericParamList? (\n     WhereClause?  (RecordFieldList | ';')\n   | TupleFieldList WhereClause? ';'\n@@ -453,7 +453,7 @@ MetaItem =\n   Path '=' AttrInput nested_meta_items:MetaItem*\n \n AdtDef =\n-  StructDef\n+  Struct\n | EnumDef\n | Union\n "}]}