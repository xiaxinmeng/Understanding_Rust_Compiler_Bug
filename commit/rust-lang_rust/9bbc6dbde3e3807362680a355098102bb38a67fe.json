{"sha": "9bbc6dbde3e3807362680a355098102bb38a67fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYmM2ZGJkZTNlMzgwNzM2MjY4MGEzNTUwOTgxMDJiYjM4YTY3ZmU=", "commit": {"author": {"name": "Tobias Schaffner", "email": "tschaff@genua.de", "date": "2017-08-18T09:50:20Z"}, "committer": {"name": "Tobias Schaffner", "email": "tschaff@genua.de", "date": "2017-09-08T12:36:56Z"}, "message": "Add modifications needed for L4re in libstd\n\nThis commit adds the needed modifications to compile the std crate\nfor the L4 Runtime environment (L4Re).\n\nA target for the L4Re was introduced in commit:\nc151220a84e40b65e45308cc0f3bbea4466d3acf\n\nIn many aspects implementations for linux also apply for the L4Re\nmicrokernel.\n\nTwo uncommon characteristics had to be resolved:\n* L4Re has no network funktionality\n* L4Re has a maximum stacksize of 1Mb for threads\n\nCo-authored-by: Sebastian Humenda <sebastian.humenda@tu-dresden.de>", "tree": {"sha": "2c154e9288f0929d11a134dbd403ec4ac28fa1ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c154e9288f0929d11a134dbd403ec4ac28fa1ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bbc6dbde3e3807362680a355098102bb38a67fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbc6dbde3e3807362680a355098102bb38a67fe", "html_url": "https://github.com/rust-lang/rust/commit/9bbc6dbde3e3807362680a355098102bb38a67fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bbc6dbde3e3807362680a355098102bb38a67fe/comments", "author": null, "committer": null, "parents": [{"sha": "2cf0a4ad4690c587d755dc6e5383779dddb9b178", "url": "https://api.github.com/repos/rust-lang/rust/commits/2cf0a4ad4690c587d755dc6e5383779dddb9b178", "html_url": "https://github.com/rust-lang/rust/commit/2cf0a4ad4690c587d755dc6e5383779dddb9b178"}], "stats": {"total": 55, "additions": 45, "deletions": 10}, "files": [{"sha": "115adf6e3f9c1589e1f6e19b87582ea7664b87e7", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=9bbc6dbde3e3807362680a355098102bb38a67fe", "patch": "@@ -466,6 +466,7 @@ pub mod error;\n pub mod ffi;\n pub mod fs;\n pub mod io;\n+#[cfg(not(target_os = \"l4re\"))]\n pub mod net;\n pub mod num;\n pub mod os;"}, {"sha": "b460bd90f173558f10ef3080b48c995529dc7cb5", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=9bbc6dbde3e3807362680a355098102bb38a67fe", "patch": "@@ -27,7 +27,7 @@ pub use sys::unix_ext as unix;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use sys::windows_ext as windows;\n \n-#[cfg(any(dox, target_os = \"linux\"))]\n+#[cfg(any(dox, target_os = \"linux\", target_os = \"l4re\"))]\n #[doc(cfg(target_os = \"linux\"))]\n pub mod linux;\n "}, {"sha": "72169773df596ee977e384d37513e7515ecbe17b", "filename": "src/libstd/sys/unix/args.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fargs.rs?ref=9bbc6dbde3e3807362680a355098102bb38a67fe", "patch": "@@ -65,6 +65,7 @@ impl DoubleEndedIterator for Args {\n           target_os = \"solaris\",\n           target_os = \"emscripten\",\n           target_os = \"haiku\",\n+          target_os = \"l4re\",\n           target_os = \"fuchsia\"))]\n mod imp {\n     use os::unix::prelude::*;"}, {"sha": "89a44b976578363f1d439d87cf0c0420c4dbd0d4", "filename": "src/libstd/sys/unix/condvar.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fcondvar.rs?ref=9bbc6dbde3e3807362680a355098102bb38a67fe", "patch": "@@ -38,10 +38,16 @@ impl Condvar {\n         Condvar { inner: UnsafeCell::new(libc::PTHREAD_COND_INITIALIZER) }\n     }\n \n-    #[cfg(any(target_os = \"macos\", target_os = \"ios\", target_os = \"android\"))]\n+    #[cfg(any(target_os = \"macos\",\n+              target_os = \"ios\",\n+              target_os = \"l4re\",\n+              target_os = \"android\"))]\n     pub unsafe fn init(&mut self) {}\n \n-    #[cfg(not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"android\")))]\n+    #[cfg(not(any(target_os = \"macos\",\n+                  target_os = \"ios\",\n+                  target_os = \"l4re\",\n+                  target_os = \"android\")))]\n     pub unsafe fn init(&mut self) {\n         use mem;\n         let mut attr: libc::pthread_condattr_t = mem::uninitialized();"}, {"sha": "3d9a06bedd57cc74898803dc17764547c7e5ad6d", "filename": "src/libstd/sys/unix/env.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys%2Funix%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fenv.rs?ref=9bbc6dbde3e3807362680a355098102bb38a67fe", "patch": "@@ -182,3 +182,14 @@ pub mod os {\n     pub const EXE_SUFFIX: &'static str = \"\";\n     pub const EXE_EXTENSION: &'static str = \"\";\n }\n+\n+#[cfg(target_os = \"l4re\")]\n+pub mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"l4re\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}"}, {"sha": "5dafc3251e7551e10f6c68573b479a16cd2efbf6", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=9bbc6dbde3e3807362680a355098102bb38a67fe", "patch": "@@ -144,6 +144,7 @@ impl FileDesc {\n                   target_os = \"solaris\",\n                   target_os = \"emscripten\",\n                   target_os = \"fuchsia\",\n+                  target_os = \"l4re\",\n                   target_os = \"haiku\")))]\n     pub fn set_cloexec(&self) -> io::Result<()> {\n         unsafe {\n@@ -155,6 +156,7 @@ impl FileDesc {\n               target_os = \"solaris\",\n               target_os = \"emscripten\",\n               target_os = \"fuchsia\",\n+              target_os = \"l4re\",\n               target_os = \"haiku\"))]\n     pub fn set_cloexec(&self) -> io::Result<()> {\n         unsafe {"}, {"sha": "13112fc1fa5904e6d6b4f8bfcda702893b2c056b", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=9bbc6dbde3e3807362680a355098102bb38a67fe", "patch": "@@ -23,19 +23,21 @@ use sys::time::SystemTime;\n use sys::{cvt, cvt_r};\n use sys_common::{AsInner, FromInner};\n \n-#[cfg(any(target_os = \"linux\", target_os = \"emscripten\"))]\n+#[cfg(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"l4re\"))]\n use libc::{stat64, fstat64, lstat64, off64_t, ftruncate64, lseek64, dirent64, readdir64_r, open64};\n #[cfg(target_os = \"android\")]\n use libc::{stat as stat64, fstat as fstat64, lstat as lstat64, lseek64,\n            dirent as dirent64, open as open64};\n #[cfg(not(any(target_os = \"linux\",\n               target_os = \"emscripten\",\n+              target_os = \"l4re\",\n               target_os = \"android\")))]\n use libc::{stat as stat64, fstat as fstat64, lstat as lstat64, off_t as off64_t,\n            ftruncate as ftruncate64, lseek as lseek64, dirent as dirent64, open as open64};\n #[cfg(not(any(target_os = \"linux\",\n               target_os = \"emscripten\",\n               target_os = \"solaris\",\n+              target_os = \"l4re\",\n               target_os = \"fuchsia\")))]\n use libc::{readdir_r as readdir64_r};\n \n@@ -316,6 +318,7 @@ impl DirEntry {\n               target_os = \"android\",\n               target_os = \"solaris\",\n               target_os = \"haiku\",\n+              target_os = \"l4re\",\n               target_os = \"fuchsia\"))]\n     pub fn ino(&self) -> u64 {\n         self.entry.d_ino as u64\n@@ -346,6 +349,7 @@ impl DirEntry {\n     #[cfg(any(target_os = \"android\",\n               target_os = \"linux\",\n               target_os = \"emscripten\",\n+              target_os = \"l4re\",\n               target_os = \"haiku\"))]\n     fn name_bytes(&self) -> &[u8] {\n         unsafe {"}, {"sha": "697e9b962b1c4c65412badd3b9a2917137284112", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=9bbc6dbde3e3807362680a355098102bb38a67fe", "patch": "@@ -28,6 +28,7 @@ use libc;\n #[cfg(all(not(dox), target_os = \"solaris\"))]   pub use os::solaris as platform;\n #[cfg(all(not(dox), target_os = \"emscripten\"))] pub use os::emscripten as platform;\n #[cfg(all(not(dox), target_os = \"fuchsia\"))]   pub use os::fuchsia as platform;\n+#[cfg(all(not(dox), target_os = \"l4re\"))]      pub use os::linux as platform;\n \n #[macro_use]\n pub mod weak;"}, {"sha": "5ef98d247105e6e1a36e9f59484bf76f4ac97aff", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=9bbc6dbde3e3807362680a355098102bb38a67fe", "patch": "@@ -38,7 +38,10 @@ static ENV_LOCK: Mutex = Mutex::new();\n \n extern {\n     #[cfg(not(target_os = \"dragonfly\"))]\n-    #[cfg_attr(any(target_os = \"linux\", target_os = \"emscripten\", target_os = \"fuchsia\"),\n+    #[cfg_attr(any(target_os = \"linux\",\n+                   target_os = \"emscripten\",\n+                   target_os = \"fuchsia\",\n+                   target_os = \"l4re\"),\n                link_name = \"__errno_location\")]\n     #[cfg_attr(any(target_os = \"bitrig\",\n                    target_os = \"netbsd\",\n@@ -346,10 +349,10 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     }\n }\n \n-#[cfg(target_os = \"fuchsia\")]\n+#[cfg(any(target_os = \"fuchsia\", target_os = \"l4re\"))]\n pub fn current_exe() -> io::Result<PathBuf> {\n     use io::ErrorKind;\n-    Err(io::Error::new(ErrorKind::Other, \"Not yet implemented on fuchsia\"))\n+    Err(io::Error::new(ErrorKind::Other, \"Not yet implemented!\"))\n }\n \n pub struct Env {"}, {"sha": "5e2610736a8dd16788f565696e57d00241a8c54e", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=9bbc6dbde3e3807362680a355098102bb38a67fe", "patch": "@@ -52,6 +52,11 @@ impl Thread {\n         assert_eq!(libc::pthread_attr_init(&mut attr), 0);\n \n         let stack_size = cmp::max(stack, min_stack_size(&attr));\n+\n+        // L4Re only supports a maximum of 1Mb per default.\n+        #[cfg(target_os = \"l4re\")]\n+        let stack_size = cmp::min(stack_size, 1024 * 1024);\n+\n         match pthread_attr_setstacksize(&mut attr,\n                                         stack_size) {\n             0 => {}\n@@ -131,6 +136,7 @@ impl Thread {\n     #[cfg(any(target_env = \"newlib\",\n               target_os = \"solaris\",\n               target_os = \"haiku\",\n+              target_os = \"l4re\",\n               target_os = \"emscripten\"))]\n     pub fn set_name(_name: &CStr) {\n         // Newlib, Illumos, Haiku, and Emscripten have no way to set a thread name.\n@@ -226,7 +232,7 @@ pub mod guard {\n     }\n \n     #[cfg(any(target_os = \"android\", target_os = \"freebsd\",\n-              target_os = \"linux\", target_os = \"netbsd\"))]\n+              target_os = \"linux\", target_os = \"netbsd\", target_os = \"l4re\"))]\n     unsafe fn get_stack_start() -> Option<*mut libc::c_void> {\n         let mut ret = None;\n         let mut attr: libc::pthread_attr_t = ::mem::zeroed();\n@@ -328,7 +334,7 @@ pub mod guard {\n     }\n \n     #[cfg(any(target_os = \"android\", target_os = \"freebsd\",\n-              target_os = \"linux\", target_os = \"netbsd\"))]\n+              target_os = \"linux\", target_os = \"netbsd\", target_os = \"l4re\"))]\n     pub unsafe fn current() -> Option<usize> {\n         let mut ret = None;\n         let mut attr: libc::pthread_attr_t = ::mem::zeroed();"}, {"sha": "ae8d280d5763bc20f3a8a0fc0d3a140e1d00fc12", "filename": "src/libstd/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bbc6dbde3e3807362680a355098102bb38a67fe/src%2Flibstd%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fmod.rs?ref=9bbc6dbde3e3807362680a355098102bb38a67fe", "patch": "@@ -47,7 +47,7 @@ pub mod wtf8;\n #[cfg(target_os = \"redox\")]\n pub use sys::net;\n \n-#[cfg(not(target_os = \"redox\"))]\n+#[cfg(not(any(target_os = \"redox\", target_os = \"l4re\")))]\n pub mod net;\n \n #[cfg(feature = \"backtrace\")]"}]}