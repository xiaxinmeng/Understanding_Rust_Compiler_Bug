{"sha": "a76bff86e6f4b56b2c3fd1704ce8535ed207dd78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3NmJmZjg2ZTZmNGI1NmIyYzNmZDE3MDRjZTg1MzVlZDIwN2RkNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-24T09:27:15Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-05-24T09:27:15Z"}, "message": "Auto merge of #50949 - eddyb:debuginfo, r=mw\n\nrustc_codegen_llvm: remove some debuginfo cruft.\n\n(The second commit passes tests locally but might not on older LLVM versions)\n\nr? @nikomatsakis", "tree": {"sha": "d59de40c0f799c06efa8499f48a7b3196c50c4da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d59de40c0f799c06efa8499f48a7b3196c50c4da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a76bff86e6f4b56b2c3fd1704ce8535ed207dd78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a76bff86e6f4b56b2c3fd1704ce8535ed207dd78", "html_url": "https://github.com/rust-lang/rust/commit/a76bff86e6f4b56b2c3fd1704ce8535ed207dd78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a76bff86e6f4b56b2c3fd1704ce8535ed207dd78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7426f5ccf7b362785a5abeb365674d3da3d4df2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7426f5ccf7b362785a5abeb365674d3da3d4df2e", "html_url": "https://github.com/rust-lang/rust/commit/7426f5ccf7b362785a5abeb365674d3da3d4df2e"}, {"sha": "da579ef75e4a8ca11fb98b24a0a3ea0c7ccffeeb", "url": "https://api.github.com/repos/rust-lang/rust/commits/da579ef75e4a8ca11fb98b24a0a3ea0c7ccffeeb", "html_url": "https://github.com/rust-lang/rust/commit/da579ef75e4a8ca11fb98b24a0a3ea0c7ccffeeb"}], "stats": {"total": 38, "additions": 5, "deletions": 33}, "files": [{"sha": "803966145f773268c1a513909be6e05e0c357a60", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a76bff86e6f4b56b2c3fd1704ce8535ed207dd78/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76bff86e6f4b56b2c3fd1704ce8535ed207dd78/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=a76bff86e6f4b56b2c3fd1704ce8535ed207dd78", "patch": "@@ -147,7 +147,6 @@ pub enum VariableAccess<'a> {\n pub enum VariableKind {\n     ArgumentVariable(usize /*index*/),\n     LocalVariable,\n-    CapturedVariable,\n }\n \n /// Create any deferred debug metadata nodes\n@@ -478,6 +477,7 @@ pub fn declare_local<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n                                variable_access: VariableAccess,\n                                variable_kind: VariableKind,\n                                span: Span) {\n+    assert!(!dbg_context.get_ref(span).source_locations_enabled.get());\n     let cx = bx.cx;\n \n     let file = span_start(cx, span).file;\n@@ -490,8 +490,7 @@ pub fn declare_local<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n \n     let (argument_index, dwarf_tag) = match variable_kind {\n         ArgumentVariable(index) => (index as c_uint, DW_TAG_arg_variable),\n-        LocalVariable    |\n-        CapturedVariable => (0, DW_TAG_auto_variable)\n+        LocalVariable => (0, DW_TAG_auto_variable)\n     };\n     let align = cx.align_of(variable_type);\n \n@@ -529,14 +528,7 @@ pub fn declare_local<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n \n                 llvm::LLVMSetInstDebugLocation(bx.llbuilder, instr);\n             }\n-        }\n-    }\n-\n-    match variable_kind {\n-        ArgumentVariable(_) | CapturedVariable => {\n-            assert!(!dbg_context.get_ref(span).source_locations_enabled.get());\n             source_loc::set_debug_location(bx, UnknownLocation);\n         }\n-        _ => { /* nothing to do */ }\n     }\n }"}, {"sha": "d34f881bf9dd83814b81a15d05d95c13c7b00e51", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a76bff86e6f4b56b2c3fd1704ce8535ed207dd78/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a76bff86e6f4b56b2c3fd1704ce8535ed207dd78/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=a76bff86e6f4b56b2c3fd1704ce8535ed207dd78", "patch": "@@ -583,23 +583,6 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n             };\n             let upvar_tys = upvar_substs.upvar_tys(def_id, tcx);\n \n-            // Store the pointer to closure data in an alloca for debuginfo\n-            // because that's what the llvm.dbg.declare intrinsic expects.\n-\n-            // FIXME(eddyb) this shouldn't be necessary but SROA seems to\n-            // mishandle DW_OP_plus not preceded by DW_OP_deref, i.e. it\n-            // doesn't actually strip the offset when splitting the closure\n-            // environment into its components so it ends up out of bounds.\n-            let env_ptr = if !env_ref {\n-                let scratch = PlaceRef::alloca(bx,\n-                    bx.cx.layout_of(tcx.mk_mut_ptr(arg.layout.ty)),\n-                    \"__debuginfo_env_ptr\");\n-                bx.store(place.llval, scratch.llval, scratch.align);\n-                scratch.llval\n-            } else {\n-                place.llval\n-            };\n-\n             for (i, (decl, ty)) in mir.upvar_decls.iter().zip(upvar_tys).enumerate() {\n                 let byte_offset_of_var_in_env = closure_layout.fields.offset(i).bytes();\n \n@@ -611,10 +594,7 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n                 };\n \n                 // The environment and the capture can each be indirect.\n-\n-                // FIXME(eddyb) see above why we have to keep\n-                // a pointer in an alloca for debuginfo atm.\n-                let mut ops = if env_ref || true { &ops[..] } else { &ops[1..] };\n+                let mut ops = if env_ref { &ops[..] } else { &ops[1..] };\n \n                 let ty = if let (true, &ty::TyRef(_, ty, _)) = (decl.by_ref, &ty.sty) {\n                     ty\n@@ -624,7 +604,7 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n                 };\n \n                 let variable_access = VariableAccess::IndirectVariable {\n-                    alloca: env_ptr,\n+                    alloca: place.llval,\n                     address_operations: &ops\n                 };\n                 declare_local(\n@@ -634,7 +614,7 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n                     ty,\n                     scope,\n                     variable_access,\n-                    VariableKind::CapturedVariable,\n+                    VariableKind::LocalVariable,\n                     DUMMY_SP\n                 );\n             }"}]}