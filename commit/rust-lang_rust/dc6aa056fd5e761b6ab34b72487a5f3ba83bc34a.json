{"sha": "dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a", "node_id": "C_kwDOAAsO6NoAKGRjNmFhMDU2ZmQ1ZTc2MWI2YWIzNGI3MjQ4N2E1ZjNiYTgzYmMzNGE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-16T12:18:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-16T12:18:00Z"}, "message": "Auto merge of #12009 - matklad:debug-reloads, r=matklad\n\ninternal: more visibility into why things happen", "tree": {"sha": "f9828f27b0b1a1478bb2fd76a76c2d92de513336", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f9828f27b0b1a1478bb2fd76a76c2d92de513336"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a", "html_url": "https://github.com/rust-lang/rust/commit/dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74cbc20fce38b0ef6c199fb22b51a6d389909ccb", "url": "https://api.github.com/repos/rust-lang/rust/commits/74cbc20fce38b0ef6c199fb22b51a6d389909ccb", "html_url": "https://github.com/rust-lang/rust/commit/74cbc20fce38b0ef6c199fb22b51a6d389909ccb"}, {"sha": "3f4235d59b1dcf6e9c56e5505e15c97302c38cc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f4235d59b1dcf6e9c56e5505e15c97302c38cc5", "html_url": "https://github.com/rust-lang/rust/commit/3f4235d59b1dcf6e9c56e5505e15c97302c38cc5"}], "stats": {"total": 63, "additions": 35, "deletions": 28}, "files": [{"sha": "cfbd5f63bc1a37dcb19c8cc46ea89880354a27fa", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a", "patch": "@@ -192,7 +192,8 @@ impl GlobalState {\n                 if let Some(path) = vfs.file_path(file.file_id).as_path() {\n                     let path = path.to_path_buf();\n                     if reload::should_refresh_for_change(&path, file.change_kind) {\n-                        self.fetch_workspaces_queue.request_op();\n+                        self.fetch_workspaces_queue\n+                            .request_op(format!(\"vfs file change: {}\", path.display()));\n                     }\n                     fs_changes.push((path, file.change_kind));\n                     if file.is_created_or_deleted() {"}, {"sha": "e305fe408e63810117d805dc3b9b5ee76872c94c", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a", "patch": "@@ -149,9 +149,9 @@ impl GlobalState {\n             );\n         }\n \n-        self.fetch_workspaces_queue.request_op();\n-        if self.fetch_workspaces_queue.should_start_op() {\n-            self.fetch_workspaces();\n+        self.fetch_workspaces_queue.request_op(\"startup\".to_string());\n+        if let Some(cause) = self.fetch_workspaces_queue.should_start_op() {\n+            self.fetch_workspaces(cause);\n         }\n \n         while let Some(event) = self.next_event(&inbox) {\n@@ -240,7 +240,8 @@ impl GlobalState {\n                                     let workspaces_updated = !Arc::ptr_eq(&old, &self.workspaces);\n \n                                     if self.config.run_build_scripts() && workspaces_updated {\n-                                        self.fetch_build_data_queue.request_op()\n+                                        self.fetch_build_data_queue\n+                                            .request_op(format!(\"workspace updated\"));\n                                     }\n \n                                     (Progress::End, None)\n@@ -312,7 +313,8 @@ impl GlobalState {\n \n                             self.prime_caches_queue.op_completed(());\n                             if cancelled {\n-                                self.prime_caches_queue.request_op();\n+                                self.prime_caches_queue\n+                                    .request_op(\"restart after cancelation\".to_string());\n                             }\n                         }\n                     };\n@@ -443,7 +445,7 @@ impl GlobalState {\n                     flycheck.update();\n                 }\n                 if self.config.prefill_caches() {\n-                    self.prime_caches_queue.request_op();\n+                    self.prime_caches_queue.request_op(\"became quiescent\".to_string());\n                 }\n             }\n \n@@ -493,14 +495,15 @@ impl GlobalState {\n         }\n \n         if self.config.cargo_autoreload() {\n-            if self.fetch_workspaces_queue.should_start_op() {\n-                self.fetch_workspaces();\n+            if let Some(cause) = self.fetch_workspaces_queue.should_start_op() {\n+                self.fetch_workspaces(cause);\n             }\n         }\n-        if self.fetch_build_data_queue.should_start_op() {\n-            self.fetch_build_data();\n+        if let Some(cause) = self.fetch_build_data_queue.should_start_op() {\n+            self.fetch_build_data(cause);\n         }\n-        if self.prime_caches_queue.should_start_op() {\n+        if let Some(cause) = self.prime_caches_queue.should_start_op() {\n+            tracing::debug!(%cause, \"will prime caches\");\n             let num_worker_threads = self.config.prime_caches_num_threads();\n \n             self.task_pool.handle.spawn_with_sender({\n@@ -569,7 +572,7 @@ impl GlobalState {\n \n         RequestDispatcher { req: Some(req), global_state: self }\n             .on_sync_mut::<lsp_ext::ReloadWorkspace>(|s, ()| {\n-                s.fetch_workspaces_queue.request_op();\n+                s.fetch_workspaces_queue.request_op(\"reload workspace request\".to_string());\n                 Ok(())\n             })?\n             .on_sync_mut::<lsp_types::request::Shutdown>(|s, ()| {\n@@ -714,7 +717,7 @@ impl GlobalState {\n                 }\n                 if let Ok(abs_path) = from_proto::abs_path(&params.text_document.uri) {\n                     if reload::should_refresh_for_change(&abs_path, ChangeKind::Modify) {\n-                        this.fetch_workspaces_queue.request_op();\n+                        this.fetch_workspaces_queue.request_op(format!(\"DidSaveTextDocument {}\", abs_path.display()));\n                     }\n                 }\n                 Ok(())"}, {"sha": "97aca0161873e491ff3f2abad85cf3ac49b1200d", "filename": "crates/rust-analyzer/src/op_queue.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a/crates%2Frust-analyzer%2Fsrc%2Fop_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a/crates%2Frust-analyzer%2Fsrc%2Fop_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fop_queue.rs?ref=dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a", "patch": "@@ -1,29 +1,30 @@\n //! Bookkeeping to make sure only one long-running operation is being executed\n //! at a time.\n \n+pub(crate) type Cause = String;\n+\n pub(crate) struct OpQueue<Output> {\n-    op_requested: bool,\n+    op_requested: Option<Cause>,\n     op_in_progress: bool,\n     last_op_result: Output,\n }\n \n impl<Output: Default> Default for OpQueue<Output> {\n     fn default() -> Self {\n-        Self { op_requested: false, op_in_progress: false, last_op_result: Default::default() }\n+        Self { op_requested: None, op_in_progress: false, last_op_result: Default::default() }\n     }\n }\n \n impl<Output> OpQueue<Output> {\n-    pub(crate) fn request_op(&mut self) {\n-        self.op_requested = true;\n+    pub(crate) fn request_op(&mut self, reason: Cause) {\n+        self.op_requested = Some(reason);\n     }\n-    pub(crate) fn should_start_op(&mut self) -> bool {\n+    pub(crate) fn should_start_op(&mut self) -> Option<Cause> {\n         if self.op_in_progress {\n-            return false;\n+            return None;\n         }\n-        self.op_in_progress = self.op_requested;\n-        self.op_requested = false;\n-        self.op_in_progress\n+        self.op_in_progress = self.op_requested.is_some();\n+        self.op_requested.take()\n     }\n     pub(crate) fn op_completed(&mut self, result: Output) {\n         assert!(self.op_in_progress);\n@@ -38,6 +39,6 @@ impl<Output> OpQueue<Output> {\n         self.op_in_progress\n     }\n     pub(crate) fn op_requested(&self) -> bool {\n-        self.op_requested\n+        self.op_requested.is_some()\n     }\n }"}, {"sha": "d4e40d807d0939cb2412aec1c408ee4c8929dbe6", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=dc6aa056fd5e761b6ab34b72487a5f3ba83bc34a", "patch": "@@ -18,6 +18,7 @@ use crate::{\n     global_state::GlobalState,\n     lsp_ext,\n     main_loop::Task,\n+    op_queue::Cause,\n };\n \n #[derive(Debug)]\n@@ -49,7 +50,7 @@ impl GlobalState {\n             self.analysis_host.update_lru_capacity(self.config.lru_capacity());\n         }\n         if self.config.linked_projects() != old_config.linked_projects() {\n-            self.fetch_workspaces_queue.request_op()\n+            self.fetch_workspaces_queue.request_op(\"linked projects changed\".to_string())\n         } else if self.config.flycheck() != old_config.flycheck() {\n             self.reload_flycheck();\n         }\n@@ -92,8 +93,8 @@ impl GlobalState {\n         status\n     }\n \n-    pub(crate) fn fetch_workspaces(&mut self) {\n-        tracing::info!(\"will fetch workspaces\");\n+    pub(crate) fn fetch_workspaces(&mut self, cause: Cause) {\n+        tracing::info!(%cause, \"will fetch workspaces\");\n \n         self.task_pool.handle.spawn_with_sender({\n             let linked_projects = self.config.linked_projects();\n@@ -144,7 +145,8 @@ impl GlobalState {\n         });\n     }\n \n-    pub(crate) fn fetch_build_data(&mut self) {\n+    pub(crate) fn fetch_build_data(&mut self, cause: Cause) {\n+        tracing::debug!(%cause, \"will fetch build data\");\n         let workspaces = Arc::clone(&self.workspaces);\n         let config = self.config.cargo();\n         self.task_pool.handle.spawn_with_sender(move |sender| {"}]}