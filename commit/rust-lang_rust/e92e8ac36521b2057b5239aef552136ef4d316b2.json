{"sha": "e92e8ac36521b2057b5239aef552136ef4d316b2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5MmU4YWMzNjUyMWIyMDU3YjUyMzlhZWY1NTIxMzZlZjRkMzE2YjI=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-11-21T22:45:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2014-12-12T01:14:17Z"}, "message": "Use rust-installer for installation\n\nThis is just a refactoring of the current installer so that Rust and Cargo\nuse the same codebase.\n\ncc #16456", "tree": {"sha": "fc033b45cf8fe1a22256c225165a123a34949006", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc033b45cf8fe1a22256c225165a123a34949006"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e92e8ac36521b2057b5239aef552136ef4d316b2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e92e8ac36521b2057b5239aef552136ef4d316b2", "html_url": "https://github.com/rust-lang/rust/commit/e92e8ac36521b2057b5239aef552136ef4d316b2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e92e8ac36521b2057b5239aef552136ef4d316b2/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65bca024a7f6f7c3b40d8c9315657f2639262939", "url": "https://api.github.com/repos/rust-lang/rust/commits/65bca024a7f6f7c3b40d8c9315657f2639262939", "html_url": "https://github.com/rust-lang/rust/commit/65bca024a7f6f7c3b40d8c9315657f2639262939"}], "stats": {"total": 549, "additions": 21, "deletions": 528}, "files": [{"sha": "6cd704b3703760d0ab5599e5098dd3a02e8fbce8", "filename": ".gitmodules", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e92e8ac36521b2057b5239aef552136ef4d316b2/.gitmodules", "raw_url": "https://github.com/rust-lang/rust/raw/e92e8ac36521b2057b5239aef552136ef4d316b2/.gitmodules", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitmodules?ref=e92e8ac36521b2057b5239aef552136ef4d316b2", "patch": "@@ -11,3 +11,6 @@\n [submodule \"src/jemalloc\"]\n \tpath = src/jemalloc\n \turl = https://github.com/rust-lang/jemalloc.git\n+[submodule \"src/rust-installer\"]\n+\tpath = src/rust-installer\n+\turl = https://github.com/rust-lang/rust-installer"}, {"sha": "2db26f819dfdf2a27f9da1adac5d179b379c6fe7", "filename": "mk/dist.mk", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e92e8ac36521b2057b5239aef552136ef4d316b2/mk%2Fdist.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e92e8ac36521b2057b5239aef552136ef4d316b2/mk%2Fdist.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdist.mk?ref=e92e8ac36521b2057b5239aef552136ef4d316b2", "patch": "@@ -58,6 +58,7 @@ PKG_FILES := \\\n       rt                                       \\\n       rustllvm                                 \\\n       snapshots.txt                            \\\n+      rust-installer                           \\\n       test)                                    \\\n     $(PKG_GITMODULES)                          \\\n     $(filter-out config.stamp, \\\n@@ -209,33 +210,40 @@ distcheck-osx: dist-osx\n # Unix binary installer tarballs\n ######################################################################\n \n+NON_INSTALLED_PREFIXES=COPYRIGHT,LICENSE-APACHE,LICENSE-MIT,README.md,doc\n+\n define DEF_INSTALLER\n \n $$(eval $$(call DEF_PREPARE,dir-$(1)))\n \n dist-install-dir-$(1): PREPARE_HOST=$(1)\n dist-install-dir-$(1): PREPARE_TARGETS=$(2)\n-dist-install-dir-$(1): PREPARE_DEST_DIR=tmp/dist/$$(PKG_NAME)-$(1)\n+dist-install-dir-$(1): PREPARE_DEST_DIR=tmp/dist/$$(PKG_NAME)-$(1)-image\n dist-install-dir-$(1): PREPARE_DIR_CMD=$(DEFAULT_PREPARE_DIR_CMD)\n dist-install-dir-$(1): PREPARE_BIN_CMD=$(DEFAULT_PREPARE_BIN_CMD)\n dist-install-dir-$(1): PREPARE_LIB_CMD=$(DEFAULT_PREPARE_LIB_CMD)\n dist-install-dir-$(1): PREPARE_MAN_CMD=$(DEFAULT_PREPARE_MAN_CMD)\n dist-install-dir-$(1): PREPARE_CLEAN=true\n dist-install-dir-$(1): prepare-base-dir-$(1) docs compiler-docs\n-\t$$(Q)(cd $$(PREPARE_DEST_DIR)/ && find . -type f | sed 's/^\\.\\///') \\\n-      > tmp/dist/manifest-$(1).in\n-\t$$(Q)mv tmp/dist/manifest-$(1).in $$(PREPARE_DEST_DIR)/$$(CFG_LIBDIR_RELATIVE)/rustlib/manifest.in\n-# Add remaining non-installed files\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)COPYRIGHT $$(PREPARE_DEST_DIR)\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)LICENSE-APACHE $$(PREPARE_DEST_DIR)\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)LICENSE-MIT $$(PREPARE_DEST_DIR)\n \t$$(Q)$$(PREPARE_MAN_CMD) $$(S)README.md $$(PREPARE_DEST_DIR)\n \t$$(Q)cp -r doc $$(PREPARE_DEST_DIR)\n-\t$$(Q)$$(PREPARE_BIN_CMD) $$(S)src/etc/install.sh $$(PREPARE_DEST_DIR)\n \n dist/$$(PKG_NAME)-$(1).tar.gz: dist-install-dir-$(1)\n \t@$(call E, build: $$@)\n-\t$$(Q)tar -czf dist/$$(PKG_NAME)-$(1).tar.gz -C tmp/dist $$(PKG_NAME)-$(1)\n+\t$$(Q)$$(S)src/rust-installer/gen-installer.sh \\\n+\t\t--product-name=Rust \\\n+\t\t--verify-bin=rustc \\\n+\t\t--rel-manifest-dir=rustlib \\\n+\t\t--success-message=Rust-is-ready-to-roll. \\\n+\t\t--image-dir=tmp/dist/$$(PKG_NAME)-$(1)-image \\\n+\t\t--work-dir=tmp/dist \\\n+\t\t--output-dir=dist \\\n+\t\t--non-installed-prefixes=$$(NON_INSTALLED_PREFIXES) \\\n+\t\t--package-name=$$(PKG_NAME)-$(1)\n+\t$$(Q)rm -R tmp/dist/$$(PKG_NAME)-$(1)-image\n \n endef\n "}, {"sha": "632df3c754b8d153efdf193e1365f7a5bfa73366", "filename": "mk/install.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e92e8ac36521b2057b5239aef552136ef4d316b2/mk%2Finstall.mk", "raw_url": "https://github.com/rust-lang/rust/raw/e92e8ac36521b2057b5239aef552136ef4d316b2/mk%2Finstall.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Finstall.mk?ref=e92e8ac36521b2057b5239aef552136ef4d316b2", "patch": "@@ -25,7 +25,7 @@ endif\n # Remove tmp files because it's a decent amount of disk space\n \t$(Q)rm -R tmp/dist\n \n-prepare_install: dist-install-dir-$(CFG_BUILD) | tmp/empty_dir\n+prepare_install: dist/$(PKG_NAME)-$(CFG_BUILD).tar.gz | tmp/empty_dir\n \n uninstall:\n ifeq (root user, $(USER) $(patsubst %,user,$(SUDO_USER)))\n@@ -38,7 +38,7 @@ endif\n # Remove tmp files because it's a decent amount of disk space\n \t$(Q)rm -R tmp/dist\n \n-prepare_uninstall: dist-install-dir-$(CFG_BUILD) | tmp/empty_dir\n+prepare_uninstall: dist/$(PKG_NAME)-$(CFG_BUILD).tar.gz | tmp/empty_dir\n \n .PHONY: install prepare_install uninstall prepare_uninstall\n "}, {"sha": "8bc48fc7934e22e9079c42197fc588be9c0c377c", "filename": "src/etc/install.sh", "status": "removed", "additions": 0, "deletions": 519, "changes": 519, "blob_url": "https://github.com/rust-lang/rust/blob/65bca024a7f6f7c3b40d8c9315657f2639262939/src%2Fetc%2Finstall.sh", "raw_url": "https://github.com/rust-lang/rust/raw/65bca024a7f6f7c3b40d8c9315657f2639262939/src%2Fetc%2Finstall.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Finstall.sh?ref=65bca024a7f6f7c3b40d8c9315657f2639262939", "patch": "@@ -1,519 +0,0 @@\n-#!/bin/sh\n-# Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-# file at the top-level directory of this distribution and at\n-# http://rust-lang.org/COPYRIGHT.\n-#\n-# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-# option. This file may not be copied, modified, or distributed\n-# except according to those terms.\n-\n-msg() {\n-    echo \"install: $1\"\n-}\n-\n-step_msg() {\n-    msg\n-    msg \"$1\"\n-    msg\n-}\n-\n-warn() {\n-    echo \"install: WARNING: $1\"\n-}\n-\n-err() {\n-    echo \"install: error: $1\"\n-    exit 1\n-}\n-\n-need_ok() {\n-    if [ $? -ne 0 ]\n-    then\n-        err \"$1\"\n-    fi\n-}\n-\n-need_cmd() {\n-    if command -v $1 >/dev/null 2>&1\n-    then msg \"found $1\"\n-    else err \"need $1\"\n-    fi\n-}\n-\n-putvar() {\n-    local T\n-    eval T=\\$$1\n-    eval TLEN=\\${#$1}\n-    if [ $TLEN -gt 35 ]\n-    then\n-        printf \"install: %-20s := %.35s ...\\n\" $1 \"$T\"\n-    else\n-        printf \"install: %-20s := %s %s\\n\" $1 \"$T\" \"$2\"\n-    fi\n-}\n-\n-valopt() {\n-    VAL_OPTIONS=\"$VAL_OPTIONS $1\"\n-\n-    local OP=$1\n-    local DEFAULT=$2\n-    shift\n-    shift\n-    local DOC=\"$*\"\n-    if [ $HELP -eq 0 ]\n-    then\n-        local UOP=$(echo $OP | tr '[:lower:]' '[:upper:]' | tr '\\-' '\\_')\n-        local V=\"CFG_${UOP}\"\n-        eval $V=\"$DEFAULT\"\n-        for arg in $CFG_ARGS\n-        do\n-            if echo \"$arg\" | grep -q -- \"--$OP=\"\n-            then\n-                val=$(echo \"$arg\" | cut -f2 -d=)\n-                eval $V=$val\n-            fi\n-        done\n-        putvar $V\n-    else\n-        if [ -z \"$DEFAULT\" ]\n-        then\n-            DEFAULT=\"<none>\"\n-        fi\n-        OP=\"${OP}=[${DEFAULT}]\"\n-        printf \"    --%-30s %s\\n\" \"$OP\" \"$DOC\"\n-    fi\n-}\n-\n-opt() {\n-    BOOL_OPTIONS=\"$BOOL_OPTIONS $1\"\n-\n-    local OP=$1\n-    local DEFAULT=$2\n-    shift\n-    shift\n-    local DOC=\"$*\"\n-    local FLAG=\"\"\n-\n-    if [ $DEFAULT -eq 0 ]\n-    then\n-        FLAG=\"enable\"\n-    else\n-        FLAG=\"disable\"\n-        DOC=\"don't $DOC\"\n-    fi\n-\n-    if [ $HELP -eq 0 ]\n-    then\n-        for arg in $CFG_ARGS\n-        do\n-            if [ \"$arg\" = \"--${FLAG}-${OP}\" ]\n-            then\n-                OP=$(echo $OP | tr 'a-z-' 'A-Z_')\n-                FLAG=$(echo $FLAG | tr 'a-z' 'A-Z')\n-                local V=\"CFG_${FLAG}_${OP}\"\n-                eval $V=1\n-                putvar $V\n-            fi\n-        done\n-    else\n-        if [ ! -z \"$META\" ]\n-        then\n-            OP=\"$OP=<$META>\"\n-        fi\n-        printf \"    --%-30s %s\\n\" \"$FLAG-$OP\" \"$DOC\"\n-     fi\n-}\n-\n-flag() {\n-    BOOL_OPTIONS=\"$BOOL_OPTIONS $1\"\n-\n-    local OP=$1\n-    shift\n-    local DOC=\"$*\"\n-\n-    if [ $HELP -eq 0 ]\n-    then\n-        for arg in $CFG_ARGS\n-        do\n-            if [ \"$arg\" = \"--${OP}\" ]\n-            then\n-                OP=$(echo $OP | tr 'a-z-' 'A-Z_')\n-                local V=\"CFG_${OP}\"\n-                eval $V=1\n-                putvar $V\n-            fi\n-        done\n-    else\n-        if [ ! -z \"$META\" ]\n-        then\n-            OP=\"$OP=<$META>\"\n-        fi\n-        printf \"    --%-30s %s\\n\" \"$OP\" \"$DOC\"\n-     fi\n-}\n-\n-validate_opt () {\n-    for arg in $CFG_ARGS\n-    do\n-        isArgValid=0\n-        for option in $BOOL_OPTIONS\n-        do\n-            if test --disable-$option = $arg\n-            then\n-                isArgValid=1\n-            fi\n-            if test --enable-$option = $arg\n-            then\n-                isArgValid=1\n-            fi\n-            if test --$option = $arg\n-            then\n-                isArgValid=1\n-            fi\n-        done\n-        for option in $VAL_OPTIONS\n-        do\n-            if echo \"$arg\" | grep -q -- \"--$option=\"\n-            then\n-                isArgValid=1\n-            fi\n-        done\n-        if [ \"$arg\" = \"--help\" ]\n-        then\n-            echo\n-            echo \"No more help available for Configure options,\"\n-            echo \"check the Wiki or join our IRC channel\"\n-            break\n-        else\n-            if test $isArgValid -eq 0\n-            then\n-                err \"Option '$arg' is not recognized\"\n-            fi\n-        fi\n-    done\n-}\n-\n-absolutify() {\n-    FILE_PATH=\"${1}\"\n-    FILE_PATH_DIRNAME=\"$(dirname ${FILE_PATH})\"\n-    FILE_PATH_BASENAME=\"$(basename ${FILE_PATH})\"\n-    FILE_ABS_PATH=\"$(cd ${FILE_PATH_DIRNAME} && pwd)\"\n-    FILE_PATH=\"${FILE_ABS_PATH}/${FILE_PATH_BASENAME}\"\n-    # This is the return value\n-    ABSOLUTIFIED=\"${FILE_PATH}\"\n-}\n-\n-msg \"looking for install programs\"\n-need_cmd mkdir\n-need_cmd printf\n-need_cmd cut\n-need_cmd grep\n-need_cmd uname\n-need_cmd tr\n-need_cmd sed\n-\n-CFG_SRC_DIR=\"$(cd $(dirname $0) && pwd)\"\n-CFG_SELF=\"$0\"\n-CFG_ARGS=\"$@\"\n-\n-HELP=0\n-if [ \"$1\" = \"--help\" ]\n-then\n-    HELP=1\n-    shift\n-    echo\n-    echo \"Usage: $CFG_SELF [options]\"\n-    echo\n-    echo \"Options:\"\n-    echo\n-else\n-    step_msg \"processing $CFG_SELF args\"\n-fi\n-\n-# Check for mingw or cygwin in order to special case $CFG_LIBDIR_RELATIVE.\n-# This logic is duplicated from configure in order to get the correct libdir\n-# for Windows installs.\n-CFG_OSTYPE=$(uname -s)\n-\n-case $CFG_OSTYPE in\n-\n-    MINGW32*)\n-        CFG_OSTYPE=pc-mingw32\n-        ;;\n-\n-    MINGW64*)\n-        # msys2, MSYSTEM=MINGW64\n-        CFG_OSTYPE=w64-mingw32\n-        ;;\n-\n-# Thad's Cygwin identifers below\n-\n-#   Vista 32 bit\n-    CYGWIN_NT-6.0)\n-        CFG_OSTYPE=pc-mingw32\n-        ;;\n-\n-#   Vista 64 bit\n-    CYGWIN_NT-6.0-WOW64)\n-        CFG_OSTYPE=w64-mingw32\n-        ;;\n-\n-#   Win 7 32 bit\n-    CYGWIN_NT-6.1)\n-        CFG_OSTYPE=pc-mingw32\n-        ;;\n-\n-#   Win 7 64 bit\n-    CYGWIN_NT-6.1-WOW64)\n-        CFG_OSTYPE=w64-mingw32\n-        ;;\n-esac\n-\n-OPTIONS=\"\"\n-BOOL_OPTIONS=\"\"\n-VAL_OPTIONS=\"\"\n-\n-# On windows we just store the libraries in the bin directory because\n-# there's no rpath. This is where the build system itself puts libraries;\n-# --libdir is used to configure the installation directory.\n-# FIXME: Thise needs to parameterized over target triples. Do it in platform.mk\n-CFG_LIBDIR_RELATIVE=lib\n-if [ \"$CFG_OSTYPE\" = \"pc-mingw32\" ] || [ \"$CFG_OSTYPE\" = \"w64-mingw32\" ]\n-then\n-    CFG_LIBDIR_RELATIVE=bin\n-fi\n-\n-if [ \"$CFG_OSTYPE\" = \"pc-mingw32\" ] || [ \"$CFG_OSTYPE\" = \"w64-mingw32\" ]\n-then\n-    CFG_LD_PATH_VAR=PATH\n-    CFG_OLD_LD_PATH_VAR=$PATH\n-elif [ \"$CFG_OSTYPE\" = \"Darwin\" ]\n-then\n-    CFG_LD_PATH_VAR=DYLD_LIBRARY_PATH\n-    CFG_OLD_LD_PATH_VAR=$DYLD_LIBRARY_PATH\n-else\n-    CFG_LD_PATH_VAR=LD_LIBRARY_PATH\n-    CFG_OLD_LD_PATH_VAR=$LD_LIBRARY_PATH\n-fi\n-\n-flag uninstall \"only uninstall from the installation prefix\"\n-opt verify 1 \"verify that the installed binaries run correctly\"\n-valopt prefix \"/usr/local\" \"set installation prefix\"\n-# NB This is exactly the same definition as in `configure`.\n-valopt libdir \"${CFG_PREFIX}/${CFG_LIBDIR_RELATIVE}\" \"install libraries\"\n-case \"$CFG_LIBDIR\" in\n-    \"$CFG_PREFIX\"/*) CAT_INC=2;;\n-    \"$CFG_PREFIX\"*)  CAT_INC=1;;\n-    *)\n-        err \"libdir must begin with the prefix. Use --prefix to set it accordingly.\";;\n-esac\n-CFG_LIBDIR_RELATIVE=`echo ${CFG_LIBDIR} | cut -c$((${#CFG_PREFIX}+${CAT_INC}))-`\n-\n-valopt mandir \"${CFG_PREFIX}/share/man\" \"install man pages in PATH\"\n-\n-if [ $HELP -eq 1 ]\n-then\n-    echo\n-    exit 0\n-fi\n-\n-step_msg \"validating $CFG_SELF args\"\n-validate_opt\n-\n-\n-# OK, let's get installing ...\n-\n-# Sanity check: can we run the binaries?\n-if [ -z \"${CFG_DISABLE_VERIFY}\" ]\n-then\n-    # Don't do this if uninstalling. Failure here won't help in any way.\n-    if [ -z \"${CFG_UNINSTALL}\" ]\n-    then\n-        msg \"verifying platform can run binaries\"\n-        export $CFG_LD_PATH_VAR=\"${CFG_SRC_DIR}/lib:$CFG_OLD_LD_PATH_VAR\"\n-        \"${CFG_SRC_DIR}/bin/rustc\" --version > /dev/null\n-        if [ $? -ne 0 ]\n-        then\n-            err \"can't execute rustc binary on this platform\"\n-        fi\n-        export $CFG_LD_PATH_VAR=$CFG_OLD_LD_PATH_VAR\n-    fi\n-fi\n-\n-# Sanity check: can we can write to the destination?\n-msg \"verifying destination is writable\"\n-umask 022 && mkdir -p \"${CFG_LIBDIR}\"\n-need_ok \"can't write to destination. consider \\`sudo\\`.\"\n-touch \"${CFG_LIBDIR}/rust-install-probe\" > /dev/null\n-if [ $? -ne 0 ]\n-then\n-    err \"can't write to destination. consider \\`sudo\\`.\"\n-fi\n-rm -f \"${CFG_LIBDIR}/rust-install-probe\"\n-need_ok \"failed to remove install probe\"\n-\n-# Sanity check: don't install to the directory containing the installer.\n-# That would surely cause chaos.\n-msg \"verifying destination is not the same as source\"\n-INSTALLER_DIR=\"$(cd $(dirname $0) && pwd)\"\n-PREFIX_DIR=\"$(cd ${CFG_PREFIX} && pwd)\"\n-if [ \"${INSTALLER_DIR}\" = \"${PREFIX_DIR}\" ]\n-then\n-    err \"can't install to same directory as installer\"\n-fi\n-\n-# Using an absolute path to libdir in a few places so that the status\n-# messages are consistently using absolute paths.\n-absolutify \"${CFG_LIBDIR}\"\n-ABS_LIBDIR=\"${ABSOLUTIFIED}\"\n-\n-# The file name of the manifest we're going to create during install\n-INSTALLED_MANIFEST=\"${ABS_LIBDIR}/rustlib/manifest\"\n-\n-# First, uninstall from the installation prefix.\n-# Errors are warnings - try to rm everything in the manifest even if some fail.\n-if [ -f \"${INSTALLED_MANIFEST}\" ]\n-then\n-    # Iterate through installed manifest and remove files\n-    while read p; do\n-        # The installed manifest contains absolute paths\n-        msg \"removing $p\"\n-        if [ -f \"$p\" ]\n-        then\n-            rm -f \"$p\"\n-            if [ $? -ne 0 ]\n-            then\n-                warn \"failed to remove $p\"\n-            fi\n-        else\n-            warn \"supposedly installed file $p does not exist!\"\n-        fi\n-    done < \"${INSTALLED_MANIFEST}\"\n-\n-    # If we fail to remove rustlib below, then the installed manifest will\n-    # still be full; the installed manifest needs to be empty before install.\n-    msg \"removing ${INSTALLED_MANIFEST}\"\n-    rm -f \"${INSTALLED_MANIFEST}\"\n-    # For the above reason, this is a hard error\n-    need_ok \"failed to remove installed manifest\"\n-\n-    # Remove 'rustlib' directory\n-    msg \"removing ${ABS_LIBDIR}/rustlib\"\n-    rm -Rf \"${ABS_LIBDIR}/rustlib\"\n-    if [ $? -ne 0 ]\n-    then\n-        warn \"failed to remove rustlib\"\n-    fi\n-else\n-    # There's no manifest. If we were asked to uninstall, then that's a problem.\n-    if [ -n \"${CFG_UNINSTALL}\" ]\n-    then\n-        err \"unable to find installation manifest at ${CFG_LIBDIR}/rustlib\"\n-    fi\n-fi\n-\n-# If we're only uninstalling then exit\n-if [ -n \"${CFG_UNINSTALL}\" ]\n-then\n-    echo\n-    echo \"    Rust is uninstalled. Have a nice day.\"\n-    echo\n-    exit 0\n-fi\n-\n-# Create the installed manifest, which we will fill in with absolute file paths\n-mkdir -p \"${CFG_LIBDIR}/rustlib\"\n-need_ok \"failed to create rustlib\"\n-touch \"${INSTALLED_MANIFEST}\"\n-need_ok \"failed to create installed manifest\"\n-\n-# Now install, iterate through the new manifest and copy files\n-while read p; do\n-\n-    # Decide the destination of the file\n-    FILE_INSTALL_PATH=\"${CFG_PREFIX}/$p\"\n-\n-    if echo \"$p\" | grep \"^${CFG_LIBDIR_RELATIVE}/\" > /dev/null\n-    then\n-        pp=`echo $p | sed \"s%^${CFG_LIBDIR_RELATIVE}/%%\"`\n-        FILE_INSTALL_PATH=\"${CFG_LIBDIR}/$pp\"\n-    fi\n-\n-    if echo \"$p\" | grep \"^share/man/\" > /dev/null\n-    then\n-        pp=`echo $p | sed 's/^share\\/man\\///'`\n-        FILE_INSTALL_PATH=\"${CFG_MANDIR}/$pp\"\n-    fi\n-\n-    # Make sure there's a directory for it\n-    umask 022 && mkdir -p \"$(dirname ${FILE_INSTALL_PATH})\"\n-    need_ok \"directory creation failed\"\n-\n-    # Make the path absolute so we can uninstall it later without\n-    # starting from the installation cwd\n-    absolutify \"${FILE_INSTALL_PATH}\"\n-    FILE_INSTALL_PATH=\"${ABSOLUTIFIED}\"\n-\n-    # Install the file\n-    msg \"${FILE_INSTALL_PATH}\"\n-    if echo \"$p\" | grep \"^bin/\" > /dev/null\n-    then\n-        install -m755 \"${CFG_SRC_DIR}/$p\" \"${FILE_INSTALL_PATH}\"\n-    else\n-        install -m644 \"${CFG_SRC_DIR}/$p\" \"${FILE_INSTALL_PATH}\"\n-    fi\n-    need_ok \"file creation failed\"\n-\n-    # Update the manifest\n-    echo \"${FILE_INSTALL_PATH}\" >> \"${INSTALLED_MANIFEST}\"\n-    need_ok \"failed to update manifest\"\n-\n-# The manifest lists all files to install\n-done < \"${CFG_SRC_DIR}/${CFG_LIBDIR_RELATIVE}/rustlib/manifest.in\"\n-\n-# Run ldconfig to make dynamic libraries available to the linker\n-if [ \"$CFG_OSTYPE\" = \"Linux\" ]\n-    then\n-    ldconfig\n-    if [ $? -ne 0 ]\n-    then\n-        warn \"failed to run ldconfig.\"\n-        warn \"this may happen when not installing as root and may be fine\"\n-    fi\n-fi\n-\n-# Sanity check: can we run the installed binaries?\n-#\n-# As with the verification above, make sure the right LD_LIBRARY_PATH-equivalent\n-# is in place. Try first without this variable, and if that fails try again with\n-# the variable. If the second time tries, print a hopefully helpful message to\n-# add something to the appropriate environment variable.\n-if [ -z \"${CFG_DISABLE_VERIFY}\" ]\n-then\n-    msg \"verifying installed binaries are executable\"\n-    \"${CFG_PREFIX}/bin/rustc\" --version 2> /dev/null 1> /dev/null\n-    if [ $? -ne 0 ]\n-    then\n-        export $CFG_LD_PATH_VAR=\"${CFG_PREFIX}/lib:$CFG_OLD_LD_PATH_VAR\"\n-        \"${CFG_PREFIX}/bin/rustc\" --version > /dev/null\n-        if [ $? -ne 0 ]\n-        then\n-            ERR=\"can't execute installed rustc binary. \"\n-            ERR=\"${ERR}installation may be broken. \"\n-            ERR=\"${ERR}if this is expected then rerun install.sh with \\`--disable-verify\\` \"\n-            ERR=\"${ERR}or \\`make install\\` with \\`--disable-verify-install\\`\"\n-            err \"${ERR}\"\n-        else\n-            echo\n-            echo \"    Note: please ensure '${CFG_PREFIX}/lib' is added to ${CFG_LD_PATH_VAR}\"\n-        fi\n-    fi\n-fi\n-\n-echo\n-echo \"    Rust is ready to roll.\"\n-echo\n-\n-"}, {"sha": "aed73472416064642911af790b25d57c9390b6c7", "filename": "src/rust-installer", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frust-installer?ref=e92e8ac36521b2057b5239aef552136ef4d316b2", "patch": "@@ -0,0 +1 @@\n+Subproject commit aed73472416064642911af790b25d57c9390b6c7"}]}