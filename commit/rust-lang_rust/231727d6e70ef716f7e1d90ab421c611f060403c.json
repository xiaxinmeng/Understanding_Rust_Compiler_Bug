{"sha": "231727d6e70ef716f7e1d90ab421c611f060403c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzMTcyN2Q2ZTcwZWY3MTZmN2UxZDkwYWI0MjFjNjExZjA2MDQwM2M=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-12-30T09:15:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-30T09:15:20Z"}, "message": "Rollup merge of #80467 - LingMan:more_matches, r=oli-obk\n\nMore uses of the matches! macro\n\n`@rustbot` modify labels +C-cleanup +T-compiler", "tree": {"sha": "5638e7e868673ce4cd7e339b7b7415183cf97b4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5638e7e868673ce4cd7e339b7b7415183cf97b4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/231727d6e70ef716f7e1d90ab421c611f060403c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf7EUoCRBK7hj4Ov3rIwAAdHIIAAs13F8MSH8WGLdeSnttC+NX\nvCCnPljiBNNYq1PMc3Ha82n+i6HeBKjTBdnrjmic3OS767GBza37dZ4zH0N45jiA\n28QHGeGxiEtWrPt7zGgiWnlK1GzGB/RG6wZXkxIJdutShdNDU3cG3UOuiLmL8xAb\ndd9lwMktSV5xlOqLw/PBKQhulD9FqwhlXLY50FaRLEo+MCnMU19s87v0DHoTs2sy\nP+leW8pjXgTAldgCgkCgey22NO7EtZGPoZKmvWXXTJwUjyVolhX24Oh85SQwKnhE\nyLolqFDXcuargJHo+QLLnu7Jffp2sERcQRC5+TzDyWjUovW8AfckQaTxgoC4zkg=\n=xFA+\n-----END PGP SIGNATURE-----\n", "payload": "tree 5638e7e868673ce4cd7e339b7b7415183cf97b4d\nparent b050261a1a54ee8afaed4e9e65f9558be81fd47b\nparent 7a41532ef900cf6b1adbbafde93f489147f1cbca\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1609319720 +0900\ncommitter GitHub <noreply@github.com> 1609319720 +0900\n\nRollup merge of #80467 - LingMan:more_matches, r=oli-obk\n\nMore uses of the matches! macro\n\n`@rustbot` modify labels +C-cleanup +T-compiler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/231727d6e70ef716f7e1d90ab421c611f060403c", "html_url": "https://github.com/rust-lang/rust/commit/231727d6e70ef716f7e1d90ab421c611f060403c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/231727d6e70ef716f7e1d90ab421c611f060403c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b050261a1a54ee8afaed4e9e65f9558be81fd47b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b050261a1a54ee8afaed4e9e65f9558be81fd47b", "html_url": "https://github.com/rust-lang/rust/commit/b050261a1a54ee8afaed4e9e65f9558be81fd47b"}, {"sha": "7a41532ef900cf6b1adbbafde93f489147f1cbca", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a41532ef900cf6b1adbbafde93f489147f1cbca", "html_url": "https://github.com/rust-lang/rust/commit/7a41532ef900cf6b1adbbafde93f489147f1cbca"}], "stats": {"total": 25, "additions": 9, "deletions": 16}, "files": [{"sha": "fa0ef165cb4f3cf22f07b4cb88fca188a23ca57a", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/231727d6e70ef716f7e1d90ab421c611f060403c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231727d6e70ef716f7e1d90ab421c611f060403c/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=231727d6e70ef716f7e1d90ab421c611f060403c", "patch": "@@ -1092,15 +1092,9 @@ impl Expr {\n         if let ExprKind::Block(ref block, _) = self.kind {\n             match block.stmts.last().map(|last_stmt| &last_stmt.kind) {\n                 // Implicit return\n-                Some(&StmtKind::Expr(_)) => true,\n-                Some(&StmtKind::Semi(ref expr)) => {\n-                    if let ExprKind::Ret(_) = expr.kind {\n-                        // Last statement is explicit return.\n-                        true\n-                    } else {\n-                        false\n-                    }\n-                }\n+                Some(StmtKind::Expr(_)) => true,\n+                // Last statement is an explicit return?\n+                Some(StmtKind::Semi(expr)) => matches!(expr.kind, ExprKind::Ret(_)),\n                 // This is a block that doesn't end in either an implicit or explicit return.\n                 _ => false,\n             }\n@@ -1950,7 +1944,7 @@ impl TyKind {\n     }\n \n     pub fn is_unit(&self) -> bool {\n-        if let TyKind::Tup(ref tys) = *self { tys.is_empty() } else { false }\n+        matches!(self, TyKind::Tup(tys) if tys.is_empty())\n     }\n }\n "}, {"sha": "5bcfe2fedee217d2389f16f6c4874808b7958f40", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/231727d6e70ef716f7e1d90ab421c611f060403c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/231727d6e70ef716f7e1d90ab421c611f060403c/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=231727d6e70ef716f7e1d90ab421c611f060403c", "patch": "@@ -1806,12 +1806,11 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             output,\n             c_variadic,\n             implicit_self: decl.inputs.get(0).map_or(hir::ImplicitSelfKind::None, |arg| {\n-                let is_mutable_pat = match arg.pat.kind {\n-                    PatKind::Ident(BindingMode::ByValue(mt) | BindingMode::ByRef(mt), _, _) => {\n-                        mt == Mutability::Mut\n-                    }\n-                    _ => false,\n-                };\n+                use BindingMode::{ByRef, ByValue};\n+                let is_mutable_pat = matches!(\n+                    arg.pat.kind,\n+                    PatKind::Ident(ByValue(Mutability::Mut) | ByRef(Mutability::Mut), ..)\n+                );\n \n                 match arg.ty.kind {\n                     TyKind::ImplicitSelf if is_mutable_pat => hir::ImplicitSelfKind::Mut,"}]}