{"sha": "4029b0e704bbb8300158eb5857d516614ef4ee23", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMjliMGU3MDRiYmI4MzAwMTU4ZWI1ODU3ZDUxNjYxNGVmNGVlMjM=", "commit": {"author": {"name": "Stuart Dootson", "email": "stuart.dootson@gmail.com", "date": "2016-08-10T06:13:27Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-08-10T06:13:27Z"}, "message": "Fix #1120 - rework how the use list prefix is determined. (#1121)\n\n* Fix #1120 - rework how the use list prefix is determined.\r\n\r\n* Added test commentary & another test case", "tree": {"sha": "96ebe23612a1f636d64c92e509923355526acef2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96ebe23612a1f636d64c92e509923355526acef2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4029b0e704bbb8300158eb5857d516614ef4ee23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4029b0e704bbb8300158eb5857d516614ef4ee23", "html_url": "https://github.com/rust-lang/rust/commit/4029b0e704bbb8300158eb5857d516614ef4ee23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4029b0e704bbb8300158eb5857d516614ef4ee23/comments", "author": {"login": "studoot", "id": 799344, "node_id": "MDQ6VXNlcjc5OTM0NA==", "avatar_url": "https://avatars.githubusercontent.com/u/799344?v=4", "gravatar_id": "", "url": "https://api.github.com/users/studoot", "html_url": "https://github.com/studoot", "followers_url": "https://api.github.com/users/studoot/followers", "following_url": "https://api.github.com/users/studoot/following{/other_user}", "gists_url": "https://api.github.com/users/studoot/gists{/gist_id}", "starred_url": "https://api.github.com/users/studoot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/studoot/subscriptions", "organizations_url": "https://api.github.com/users/studoot/orgs", "repos_url": "https://api.github.com/users/studoot/repos", "events_url": "https://api.github.com/users/studoot/events{/privacy}", "received_events_url": "https://api.github.com/users/studoot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ed9618f1cabcfff5871887feb8b7871b027a744", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed9618f1cabcfff5871887feb8b7871b027a744", "html_url": "https://github.com/rust-lang/rust/commit/9ed9618f1cabcfff5871887feb8b7871b027a744"}], "stats": {"total": 55, "additions": 46, "deletions": 9}, "files": [{"sha": "4ae40b7fc0b71996bbb9c79326ae76cbf13087d9", "filename": "src/imports.rs", "status": "modified", "additions": 26, "deletions": 9, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/4029b0e704bbb8300158eb5857d516614ef4ee23/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4029b0e704bbb8300158eb5857d516614ef4ee23/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=4029b0e704bbb8300158eb5857d516614ef4ee23", "patch": "@@ -16,7 +16,7 @@ use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n use types::rewrite_path;\n use rewrite::{Rewrite, RewriteContext};\n use visitor::FmtVisitor;\n-use std::cmp::Ordering;\n+use std::cmp::{self, Ordering};\n \n use syntax::{ast, ptr};\n \n@@ -159,29 +159,46 @@ impl Rewrite for ast::ViewPath {\n \n impl<'a> FmtVisitor<'a> {\n     pub fn format_imports(&mut self, use_items: &[ptr::P<ast::Item>]) {\n-        let mut last_pos = use_items.first()\n-            .and_then(|p_i| p_i.span.lo.0.checked_sub(1))\n-            .map(|span_lo| BytePos(span_lo))\n+        // Find the location immediately before the first use item in the run. This must not lie\n+        // before the current `self.last_pos`\n+        let pos_before_first_use_item = use_items.first()\n+            .map(|p_i| cmp::max(self.last_pos, p_i.span.lo))\n             .unwrap_or(self.last_pos);\n-        let prefix = codemap::mk_sp(self.last_pos, last_pos);\n+        // Construct a list of pairs, each containing a `use` item and the start of span before\n+        // that `use` item.\n+        let mut last_pos_of_prev_use_item = pos_before_first_use_item;\n         let mut ordered_use_items = use_items.iter()\n             .map(|p_i| {\n-                let new_item = (&*p_i, last_pos);\n-                last_pos = p_i.span.hi;\n+                let new_item = (&*p_i, last_pos_of_prev_use_item);\n+                last_pos_of_prev_use_item = p_i.span.hi;\n                 new_item\n             })\n             .collect::<Vec<_>>();\n+        let pos_after_last_use_item = last_pos_of_prev_use_item;\n         // Order the imports by view-path & other import path properties\n         ordered_use_items.sort_by(|a, b| compare_use_items(a.0, b.0).unwrap());\n         // First, output the span before the first import\n-        self.format_missing(prefix.hi);\n+        // Look for indent (the line part preceding the use is all whitespace) and excise that\n+        // from the prefix\n+        let prev_span_str = self.snippet(codemap::mk_sp(self.last_pos, pos_before_first_use_item));\n+        let span_end = match prev_span_str.rfind('\\n') {\n+            Some(offset) => {\n+                if prev_span_str[offset..].trim().is_empty() {\n+                    self.last_pos + BytePos(offset as u32)\n+                } else {\n+                    pos_before_first_use_item\n+                }\n+            }\n+            None => pos_before_first_use_item,\n+        };\n+        self.format_missing(span_end);\n         for ordered in ordered_use_items {\n             // Fake out the formatter by setting `self.last_pos` to the appropriate location before\n             // each item before visiting it.\n             self.last_pos = ordered.1;\n             self.visit_item(&ordered.0);\n         }\n-        self.last_pos = last_pos;\n+        self.last_pos = pos_after_last_use_item;\n     }\n \n     pub fn format_import(&mut self, vis: &ast::Visibility, vp: &ast::ViewPath, span: Span) {"}, {"sha": "e85c9af99d457e2174ed8dbd99fbb2d624243d70", "filename": "tests/source/issue-1120.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4029b0e704bbb8300158eb5857d516614ef4ee23/tests%2Fsource%2Fissue-1120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4029b0e704bbb8300158eb5857d516614ef4ee23/tests%2Fsource%2Fissue-1120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-1120.rs?ref=4029b0e704bbb8300158eb5857d516614ef4ee23", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-reorder_imports: true\n+\n+// Ensure that a use at the start of an inline module is correctly formatted.\n+mod foo {use bar;}\n+\n+// Ensure that an indented `use` gets the correct indentation.\n+mod foo {\n+        use bar;\n+}"}, {"sha": "f44597e7d1eefc84a016b9761e0acb85ff89eac3", "filename": "tests/target/issue-1120.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4029b0e704bbb8300158eb5857d516614ef4ee23/tests%2Ftarget%2Fissue-1120.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4029b0e704bbb8300158eb5857d516614ef4ee23/tests%2Ftarget%2Fissue-1120.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-1120.rs?ref=4029b0e704bbb8300158eb5857d516614ef4ee23", "patch": "@@ -0,0 +1,11 @@\n+// rustfmt-reorder_imports: true\n+\n+// Ensure that a use at the start of an inline module is correctly formatted.\n+mod foo {\n+    use bar;\n+}\n+\n+// Ensure that an indented `use` gets the correct indentation.\n+mod foo {\n+    use bar;\n+}"}]}