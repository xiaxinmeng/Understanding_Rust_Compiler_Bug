{"sha": "ea76ac55622250a916898f9c3f6b79b80f074b8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNzZhYzU1NjIyMjUwYTkxNjg5OGY5YzNmNmI3OWI4MGYwNzRiOGU=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-21T21:53:45Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-06-29T15:09:39Z"}, "message": "Make `COLLAPSIBLE_IF` consider `if let`", "tree": {"sha": "36403cec969968bfe916cbf6e8c5b7c492bb4e0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36403cec969968bfe916cbf6e8c5b7c492bb4e0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea76ac55622250a916898f9c3f6b79b80f074b8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJXc+S3AAoJEF5CfHlMukXoBLkP/Ars4R92tRMwcuaynMMDirPH\nZWWGJuUJSCV/YNdyz9lk2aJ6CIOwQV+unj3xMnXe3Kqjh2bxZaJY2M4z+q8of0Xo\n5kMX6gDZyjuaMkOXjGLYDSXaeu/5vpZHgO3TTX4hQ20M+IP4kzV1LJGkNI3/cXms\nU8l7suu8Q6QBFfaGYixVoX0UAjOquRAUvyXUdTxJ2Q6xTsqG9valJXRToc0f7vNP\nvYojlLu5apa2ikw4nahfuBgkw/Jo5QwucTM20L9WTYlbsgZ+gfEXyysSenw1BRQT\nlvKjvRYWyNaf2nVwWwMSnjXBmerye84yshmRB+lb0WKRrGLGL1bcU61fNsg4Oom+\nKxd+zHKzQNPc1NRx1ZKRRyFayfVC3fR6DzqoPFAxrzGlFmyvFY9x6NWHWacqodQH\n7Z0pX0udItqbmQBvv26BE+PdFr2KtNLnt4MuqVIgtOSqPDNOyqaoiqn13C9h9wpU\n7qJKM9VT3V0l+lgwcazFTmNjtDdfHdH/Y4yNW320XJN6A9lDcb4TSsGScCTpAG0V\nI9bHzZq4jtBPT0lsjhYcIZnyWT6mX6z2H+CU1v2yhotiPIdIjsyvUTQGT7P2JOsg\nTzLQ0WtWZB+Ctsace9yyzMW4eoenEIN9nyyEOJ7MpT6u1tjfli7ubfZKN7N2l7Wj\nE+JfkHcDbJr/KmLWi1AN\n=ZNPh\n-----END PGP SIGNATURE-----", "payload": "tree 36403cec969968bfe916cbf6e8c5b7c492bb4e0c\nparent f6ba217c1c01b8e24c404d27ea9aba270d5831d2\nauthor mcarton <cartonmartin+git@gmail.com> 1466546025 +0200\ncommitter mcarton <cartonmartin+git@gmail.com> 1467212979 +0200\n\nMake `COLLAPSIBLE_IF` consider `if let`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea76ac55622250a916898f9c3f6b79b80f074b8e", "html_url": "https://github.com/rust-lang/rust/commit/ea76ac55622250a916898f9c3f6b79b80f074b8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea76ac55622250a916898f9c3f6b79b80f074b8e/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6ba217c1c01b8e24c404d27ea9aba270d5831d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6ba217c1c01b8e24c404d27ea9aba270d5831d2", "html_url": "https://github.com/rust-lang/rust/commit/f6ba217c1c01b8e24c404d27ea9aba270d5831d2"}], "stats": {"total": 155, "additions": 126, "deletions": 29}, "files": [{"sha": "2921bc2769c25f1da6f148dbafa439b54d35fa71", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 50, "deletions": 23, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/ea76ac55622250a916898f9c3f6b79b80f074b8e/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea76ac55622250a916898f9c3f6b79b80f074b8e/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=ea76ac55622250a916898f9c3f6b79b80f074b8e", "patch": "@@ -53,37 +53,64 @@ impl EarlyLintPass for CollapsibleIf {\n     }\n }\n \n-fn check_if(cx: &EarlyContext, e: &ast::Expr) {\n-    if let ast::ExprKind::If(ref check, ref then, ref else_) = e.node {\n-        if let Some(ref else_) = *else_ {\n-            if_let_chain! {[\n-                let ast::ExprKind::Block(ref block) = else_.node,\n-                block.stmts.is_empty(),\n-                let Some(ref else_) = block.expr,\n-                let ast::ExprKind::If(_, _, _) = else_.node\n-            ], {\n+fn check_if(cx: &EarlyContext, expr: &ast::Expr) {\n+    match expr.node {\n+        ast::ExprKind::If(ref check, ref then, ref else_) => {\n+            if let Some(ref else_) = *else_ {\n+                check_collapsible_maybe_if_let(cx, else_);\n+            } else {\n+                check_collapsible_no_if_let(cx, expr, check, then);\n+            }\n+        }\n+        ast::ExprKind::IfLet(_, _, _, Some(ref else_)) => {\n+            check_collapsible_maybe_if_let(cx, else_);\n+        }\n+        _ => (),\n+    }\n+}\n+\n+fn check_collapsible_maybe_if_let(cx: &EarlyContext, else_: &ast::Expr) {\n+    if_let_chain! {[\n+        let ast::ExprKind::Block(ref block) = else_.node,\n+        block.stmts.is_empty(),\n+        let Some(ref else_) = block.expr,\n+    ], {\n+        match else_.node {\n+            ast::ExprKind::If(..) | ast::ExprKind::IfLet(..) => {\n                 span_lint_and_then(cx,\n                                    COLLAPSIBLE_IF,\n                                    block.span,\n                                    \"this `else { if .. }` block can be collapsed\", |db| {\n                     db.span_suggestion(block.span, \"try\", snippet_block(cx, else_.span, \"..\").into_owned());\n                 });\n-            }}\n-        } else if let Some(&ast::Expr { node: ast::ExprKind::If(ref check_inner, ref content, None), span: sp, .. }) =\n-               single_stmt_of_block(then) {\n-            if e.span.expn_id != sp.expn_id {\n-                return;\n             }\n-            span_lint_and_then(cx, COLLAPSIBLE_IF, e.span, \"this if statement can be collapsed\", |db| {\n-                db.span_suggestion(e.span,\n-                                   \"try\",\n-                                   format!(\"if {} && {} {}\",\n-                                           check_to_string(cx, check),\n-                                           check_to_string(cx, check_inner),\n-                                           snippet_block(cx, content.span, \"..\")));\n-            });\n+            _ => (),\n         }\n-    }\n+    }}\n+}\n+\n+fn check_collapsible_no_if_let(\n+    cx: &EarlyContext,\n+    expr: &ast::Expr,\n+    check: &ast::Expr,\n+    then: &ast::Block,\n+) {\n+    if_let_chain! {[\n+        let Some(inner) = single_stmt_of_block(then),\n+        let ast::ExprKind::If(ref check_inner, ref content, None) = inner.node,\n+    ], {\n+        if expr.span.expn_id != inner.span.expn_id {\n+            return;\n+        }\n+        span_lint_and_then(cx, COLLAPSIBLE_IF, expr.span, \"this if statement can be collapsed\", |db| {\n+            db.span_suggestion(expr.span,\n+                               \"try\",\n+                               format!(\"if {} && {} {}\",\n+                                       check_to_string(cx, check),\n+                                       check_to_string(cx, check_inner),\n+                                       snippet_block(cx, content.span, \"..\")));\n+        });\n+    }}\n }\n \n fn requires_brackets(e: &ast::Expr) -> bool {"}, {"sha": "ea2ef284f38fd82524e872172e210f3f3490c2de", "filename": "tests/compile-fail/collapsible_if.rs", "status": "modified", "additions": 75, "deletions": 6, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/ea76ac55622250a916898f9c3f6b79b80f074b8e/tests%2Fcompile-fail%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea76ac55622250a916898f9c3f6b79b80f074b8e/tests%2Fcompile-fail%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcollapsible_if.rs?ref=ea76ac55622250a916898f9c3f6b79b80f074b8e", "patch": "@@ -26,19 +26,32 @@ fn main() {\n     // Collaspe `else { if .. }` to `else if ..`\n     if x == \"hello\" {\n         print!(\"Hello \");\n-    } else { //~ERROR: this `else { if .. }`\n-             //~| HELP try\n-             //~| SUGGESTION } else if y == \"world\"\n+    } else {\n+        //~^ ERROR: this `else { if .. }`\n+        //~| HELP try\n+        //~| SUGGESTION } else if y == \"world\"\n         if y == \"world\" {\n             println!(\"world!\")\n         }\n     }\n \n     if x == \"hello\" {\n         print!(\"Hello \");\n-    } else { //~ERROR this `else { if .. }`\n-             //~| HELP try\n-             //~| SUGGESTION } else if y == \"world\"\n+    } else {\n+        //~^ ERROR: this `else { if .. }`\n+        //~| HELP try\n+        //~| SUGGESTION } else if let Some(42)\n+        if let Some(42) = Some(42) {\n+            println!(\"world!\")\n+        }\n+    }\n+\n+    if x == \"hello\" {\n+        print!(\"Hello \");\n+    } else {\n+        //~^ ERROR this `else { if .. }`\n+        //~| HELP try\n+        //~| SUGGESTION } else if y == \"world\"\n         if y == \"world\" {\n             println!(\"world\")\n         }\n@@ -47,6 +60,62 @@ fn main() {\n         }\n     }\n \n+    if x == \"hello\" {\n+        print!(\"Hello \");\n+    } else {\n+        //~^ ERROR this `else { if .. }`\n+        //~| HELP try\n+        //~| SUGGESTION } else if let Some(42)\n+        if let Some(42) = Some(42) {\n+            println!(\"world\")\n+        }\n+        else {\n+            println!(\"!\")\n+        }\n+    }\n+\n+    if let Some(42) = Some(42) {\n+        print!(\"Hello \");\n+    } else {\n+        //~^ ERROR this `else { if .. }`\n+        //~| HELP try\n+        //~| SUGGESTION } else if let Some(42)\n+        if let Some(42) = Some(42) {\n+            println!(\"world\")\n+        }\n+        else {\n+            println!(\"!\")\n+        }\n+    }\n+\n+    if let Some(42) = Some(42) {\n+        print!(\"Hello \");\n+    } else {\n+        //~^ ERROR this `else { if .. }`\n+        //~| HELP try\n+        //~| SUGGESTION } else if x == \"hello\"\n+        if x == \"hello\" {\n+            println!(\"world\")\n+        }\n+        else {\n+            println!(\"!\")\n+        }\n+    }\n+\n+    if let Some(42) = Some(42) {\n+        print!(\"Hello \");\n+    } else {\n+        //~^ ERROR this `else { if .. }`\n+        //~| HELP try\n+        //~| SUGGESTION } else if let Some(42)\n+        if let Some(42) = Some(42) {\n+            println!(\"world\")\n+        }\n+        else {\n+            println!(\"!\")\n+        }\n+    }\n+\n     // Works because any if with an else statement cannot be collapsed.\n     if x == \"hello\" {\n         if y == \"world\" {"}, {"sha": "2fd8c766d92886c11100d7b8571d82fed8eb049c", "filename": "tests/compile-fail/copies.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ea76ac55622250a916898f9c3f6b79b80f074b8e/tests%2Fcompile-fail%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea76ac55622250a916898f9c3f6b79b80f074b8e/tests%2Fcompile-fail%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcopies.rs?ref=ea76ac55622250a916898f9c3f6b79b80f074b8e", "patch": "@@ -8,6 +8,7 @@\n #![allow(unused_variables)]\n #![allow(cyclomatic_complexity)]\n #![allow(blacklisted_name)]\n+#![allow(collapsible_if)]\n \n fn bar<T>(_: T) {}\n fn foo() -> bool { unimplemented!() }"}]}