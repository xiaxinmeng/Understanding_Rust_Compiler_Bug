{"sha": "8f442e8ded9cd246e19ec9886eb50c2131a6e7ba", "node_id": "C_kwDOAAsO6NoAKDhmNDQyZThkZWQ5Y2QyNDZlMTllYzk4ODZlYjUwYzIxMzFhNmU3YmE", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-08-24T03:49:20Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-09-01T23:42:31Z"}, "message": "Get rid of `fn recover`", "tree": {"sha": "3c95637f6571ee97e4a62cb3f7d0e13e38ceaef6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c95637f6571ee97e4a62cb3f7d0e13e38ceaef6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f442e8ded9cd246e19ec9886eb50c2131a6e7ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f442e8ded9cd246e19ec9886eb50c2131a6e7ba", "html_url": "https://github.com/rust-lang/rust/commit/8f442e8ded9cd246e19ec9886eb50c2131a6e7ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f442e8ded9cd246e19ec9886eb50c2131a6e7ba/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70f20ac40ea95f4bba330858750e81f4ab2b8b3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/70f20ac40ea95f4bba330858750e81f4ab2b8b3a", "html_url": "https://github.com/rust-lang/rust/commit/70f20ac40ea95f4bba330858750e81f4ab2b8b3a"}], "stats": {"total": 26, "additions": 8, "deletions": 18}, "files": [{"sha": "3483c40396b595c26acda0f7f3b0f8169d9cd34b", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 8, "deletions": 18, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8f442e8ded9cd246e19ec9886eb50c2131a6e7ba/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f442e8ded9cd246e19ec9886eb50c2131a6e7ba/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=8f442e8ded9cd246e19ec9886eb50c2131a6e7ba", "patch": "@@ -299,34 +299,28 @@ pub(crate) fn create_query_frame<\n     QueryStackFrame::new(name, description, span, def_kind, hash)\n }\n \n-pub(crate) fn try_load_from_on_disk_cache<'tcx, K, V>(\n+pub(crate) fn try_load_from_on_disk_cache<'tcx, K: DepNodeParams<TyCtxt<'tcx>>, V>(\n     tcx: TyCtxt<'tcx>,\n     dep_node: DepNode,\n-    recover: fn(TyCtxt<'tcx>, DepNode) -> Option<K>,\n     cache_on_disk: fn(TyCtxt<'tcx>, &K) -> bool,\n     do_query: fn(TyCtxt<'tcx>, K) -> V,\n ) {\n     debug_assert!(tcx.dep_graph.is_green(&dep_node));\n \n-    let key = recover(tcx, dep_node).unwrap_or_else(|| {\n+    let key = K::recover(tcx, &dep_node).unwrap_or_else(|| {\n         panic!(\"Failed to recover key for {:?} with hash {}\", dep_node, dep_node.hash)\n     });\n     if cache_on_disk(tcx, &key) {\n         let _ = do_query(tcx, key);\n     }\n }\n \n-pub(crate) fn force_from_dep_node<'tcx, Q>(\n-    tcx: TyCtxt<'tcx>,\n-    // dep_node: rustc_query_system::dep_graph::DepNode<CTX::DepKind>,\n-    dep_node: DepNode,\n-    recover: fn(TyCtxt<'tcx>, DepNode) -> Option<Q::Key>,\n-) -> bool\n+fn force_from_dep_node<'tcx, Q>(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> bool\n where\n     Q: QueryDescription<QueryCtxt<'tcx>>,\n     Q::Key: DepNodeParams<TyCtxt<'tcx>>,\n {\n-    if let Some(key) = recover(tcx, dep_node) {\n+    if let Some(key) = Q::Key::recover(tcx, &dep_node) {\n         #[cfg(debug_assertions)]\n         let _guard = tracing::span!(tracing::Level::TRACE, stringify!($name), ?key).entered();\n         let tcx = QueryCtxt::from_tcx(tcx);\n@@ -405,7 +399,6 @@ macro_rules! define_queries {\n         #[allow(nonstandard_style)]\n         mod query_callbacks {\n             use super::*;\n-            use rustc_middle::dep_graph::DepNode;\n             use rustc_query_system::dep_graph::DepNodeParams;\n             use rustc_query_system::query::QueryDescription;\n             use rustc_query_system::dep_graph::FingerprintStyle;\n@@ -479,17 +472,14 @@ macro_rules! define_queries {\n                     }\n                 }\n \n-                #[inline(always)]\n-                fn recover<'tcx>(tcx: TyCtxt<'tcx>, dep_node: DepNode) -> Option<<queries::$name<'tcx> as QueryConfig>::Key> {\n-                    <<queries::$name<'_> as QueryConfig>::Key as DepNodeParams<TyCtxt<'_>>>::recover(tcx, &dep_node)\n-                }\n-\n                 DepKindStruct {\n                     is_anon,\n                     is_eval_always,\n                     fingerprint_style,\n-                    force_from_dep_node: Some(|tcx, dep_node| $crate::plumbing::force_from_dep_node::<queries::$name<'_>>(tcx, dep_node, recover)),\n-                    try_load_from_on_disk_cache: Some(|tcx, key| $crate::plumbing::try_load_from_on_disk_cache(tcx, key, recover, queries::$name::cache_on_disk, TyCtxt::$name)),\n+                    force_from_dep_node: Some(|tcx, dep_node| $crate::plumbing::force_from_dep_node::<queries::$name<'_>>(tcx, dep_node)),\n+                    try_load_from_on_disk_cache: Some(|tcx, key| $crate::plumbing::try_load_from_on_disk_cache::<\n+                        <queries::$name<'_> as QueryConfig>::Key, _\n+                    >(tcx, key, queries::$name::cache_on_disk, TyCtxt::$name)),\n                 }\n             })*\n         }"}]}