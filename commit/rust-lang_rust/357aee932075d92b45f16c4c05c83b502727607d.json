{"sha": "357aee932075d92b45f16c4c05c83b502727607d", "node_id": "C_kwDOAAsO6NoAKDM1N2FlZTkzMjA3NWQ5MmI0NWYxNmM0YzA1YzgzYjUwMjcyNzYwN2Q", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-01T01:23:16Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-02T02:59:28Z"}, "message": "Inline and remove `late_lint_pass_crate`.\n\nIt has a single call site.", "tree": {"sha": "649403ce84cc6b2844b36839a7a2f8eafd64b86c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/649403ce84cc6b2844b36839a7a2f8eafd64b86c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/357aee932075d92b45f16c4c05c83b502727607d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/357aee932075d92b45f16c4c05c83b502727607d", "html_url": "https://github.com/rust-lang/rust/commit/357aee932075d92b45f16c4c05c83b502727607d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/357aee932075d92b45f16c4c05c83b502727607d/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e4f55d63f84d86f856aa60786823e72083f40eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e4f55d63f84d86f856aa60786823e72083f40eb", "html_url": "https://github.com/rust-lang/rust/commit/0e4f55d63f84d86f856aa60786823e72083f40eb"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "34828ef55465bb4ada12796e56e70e9febb8d348", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/357aee932075d92b45f16c4c05c83b502727607d/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/357aee932075d92b45f16c4c05c83b502727607d/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=357aee932075d92b45f16c4c05c83b502727607d", "patch": "@@ -326,7 +326,7 @@ macro_rules! late_lint_pass_impl {\n \n crate::late_lint_methods!(late_lint_pass_impl, [], ['tcx]);\n \n-pub fn late_lint_mod<'tcx, T: LateLintPass<'tcx> + 'tcx>(\n+pub(super) fn late_lint_mod<'tcx, T: LateLintPass<'tcx> + 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     module_def_id: LocalDefId,\n     builtin_lints: T,\n@@ -361,26 +361,29 @@ pub fn late_lint_mod<'tcx, T: LateLintPass<'tcx> + 'tcx>(\n     }\n }\n \n-fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T) {\n-    let effective_visibilities = &tcx.effective_visibilities(());\n-\n+fn late_lint_crate<'tcx, T: LateLintPass<'tcx> + 'tcx>(tcx: TyCtxt<'tcx>, builtin_lints: T) {\n     let context = LateContext {\n         tcx,\n         enclosing_body: None,\n         cached_typeck_results: Cell::new(None),\n         param_env: ty::ParamEnv::empty(),\n-        effective_visibilities,\n+        effective_visibilities: &tcx.effective_visibilities(()),\n         lint_store: unerased_lint_store(tcx),\n         last_node_with_lint_attrs: hir::CRATE_HIR_ID,\n         generics: None,\n         only_module: false,\n     };\n \n+    let mut passes =\n+        unerased_lint_store(tcx).late_passes.iter().map(|p| (p)(tcx)).collect::<Vec<_>>();\n+    passes.push(Box::new(builtin_lints));\n+    let pass = LateLintPassObjects { lints: &mut passes[..] };\n+\n     let mut cx = LateContextAndPass { context, pass };\n \n     // Visit the whole crate.\n     cx.with_lint_attrs(hir::CRATE_HIR_ID, |cx| {\n-        // since the root module isn't visited as an item (because it isn't an\n+        // Since the root module isn't visited as an item (because it isn't an\n         // item), warn for it here.\n         lint_callback!(cx, check_crate,);\n         tcx.hir().walk_toplevel_module(cx);\n@@ -389,14 +392,6 @@ fn late_lint_pass_crate<'tcx, T: LateLintPass<'tcx>>(tcx: TyCtxt<'tcx>, pass: T)\n     })\n }\n \n-fn late_lint_crate<'tcx, T: LateLintPass<'tcx> + 'tcx>(tcx: TyCtxt<'tcx>, builtin_lints: T) {\n-    let mut passes =\n-        unerased_lint_store(tcx).late_passes.iter().map(|p| (p)(tcx)).collect::<Vec<_>>();\n-    passes.push(Box::new(builtin_lints));\n-\n-    late_lint_pass_crate(tcx, LateLintPassObjects { lints: &mut passes[..] });\n-}\n-\n /// Performs lint checking on a crate.\n pub fn check_crate<'tcx, T: LateLintPass<'tcx> + 'tcx>(\n     tcx: TyCtxt<'tcx>,"}]}