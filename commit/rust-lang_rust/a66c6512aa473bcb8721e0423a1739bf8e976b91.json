{"sha": "a66c6512aa473bcb8721e0423a1739bf8e976b91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NmM2NTEyYWE0NzNiY2I4NzIxZTA0MjNhMTczOWJmOGU5NzZiOTE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-10T14:55:43Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-12-20T19:04:52Z"}, "message": "pass `UniversalRegions` to MIR type-checker instead of fields\n\nNo functional change.", "tree": {"sha": "8eaa0aacfcaa0cfd646967b7da0cefa9d35b6447", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8eaa0aacfcaa0cfd646967b7da0cefa9d35b6447"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a66c6512aa473bcb8721e0423a1739bf8e976b91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a66c6512aa473bcb8721e0423a1739bf8e976b91", "html_url": "https://github.com/rust-lang/rust/commit/a66c6512aa473bcb8721e0423a1739bf8e976b91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a66c6512aa473bcb8721e0423a1739bf8e976b91/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f50e7ca8564489b888f23839687b1e076844a49", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f50e7ca8564489b888f23839687b1e076844a49", "html_url": "https://github.com/rust-lang/rust/commit/7f50e7ca8564489b888f23839687b1e076844a49"}], "stats": {"total": 48, "additions": 26, "deletions": 22}, "files": [{"sha": "7acbe2ebf932890827ba89f3e48c21eb95e65c3e", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a66c6512aa473bcb8721e0423a1739bf8e976b91/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66c6512aa473bcb8721e0423a1739bf8e976b91/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=a66c6512aa473bcb8721e0423a1739bf8e976b91", "patch": "@@ -79,16 +79,12 @@ pub(in borrow_check) fn compute_regions<'cx, 'gcx, 'tcx>(\n     // Run the MIR type-checker.\n     let mir_node_id = infcx.tcx.hir.as_local_node_id(def_id).unwrap();\n     let liveness = &LivenessResults::compute(mir);\n-    let fr_fn_body = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));\n     let constraint_sets = &type_check::type_check(\n         infcx,\n         mir_node_id,\n         param_env,\n         mir,\n-        &universal_regions.region_bound_pairs,\n-        fr_fn_body,\n-        universal_regions.input_tys,\n-        universal_regions.output_ty,\n+        &universal_regions,\n         &liveness,\n         flow_inits,\n         move_data,"}, {"sha": "a56fb0492761eb2986f407639fbccfd51e2380c9", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a66c6512aa473bcb8721e0423a1739bf8e976b91/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66c6512aa473bcb8721e0423a1739bf8e976b91/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=a66c6512aa473bcb8721e0423a1739bf8e976b91", "patch": "@@ -13,6 +13,7 @@\n \n use borrow_check::nll::region_infer::Cause;\n use borrow_check::nll::region_infer::ClosureRegionRequirementsExt;\n+use borrow_check::nll::universal_regions::UniversalRegions;\n use dataflow::FlowAtLocation;\n use dataflow::MaybeInitializedLvals;\n use dataflow::move_paths::MoveData;\n@@ -71,28 +72,32 @@ pub(crate) fn type_check<'gcx, 'tcx>(\n     body_id: ast::NodeId,\n     param_env: ty::ParamEnv<'gcx>,\n     mir: &Mir<'tcx>,\n-    region_bound_pairs: &[(ty::Region<'tcx>, GenericKind<'tcx>)],\n-    implicit_region_bound: ty::Region<'tcx>,\n-    input_tys: &[Ty<'tcx>],\n-    output_ty: Ty<'tcx>,\n+    universal_regions: &UniversalRegions<'tcx>,\n     liveness: &LivenessResults,\n     flow_inits: &mut FlowAtLocation<MaybeInitializedLvals<'_, 'gcx, 'tcx>>,\n     move_data: &MoveData<'tcx>,\n ) -> MirTypeckRegionConstraints<'tcx> {\n+    let implicit_region_bound = infcx.tcx.mk_region(ty::ReVar(universal_regions.fr_fn_body));\n     type_check_internal(\n         infcx,\n         body_id,\n         param_env,\n         mir,\n-        region_bound_pairs,\n+        &universal_regions.region_bound_pairs,\n         Some(implicit_region_bound),\n         &mut |cx| {\n             liveness::generate(cx, mir, liveness, flow_inits, move_data);\n \n             // Equate the input and output tys given by the user with\n             // the ones found in the MIR.\n-            cx.equate_input_or_output(output_ty, mir.local_decls[RETURN_PLACE].ty);\n-            for (&input_ty, local) in input_tys.iter().zip((1..).map(Local::new)) {\n+            let &UniversalRegions {\n+                unnormalized_output_ty,\n+                unnormalized_input_tys,\n+                ..\n+            } = universal_regions;\n+            cx.equate_input_or_output(unnormalized_output_ty, mir.local_decls[RETURN_PLACE].ty);\n+            let arg_locals = (1..).map(Local::new);\n+            for (&input_ty, local) in unnormalized_input_tys.iter().zip(arg_locals) {\n                 cx.equate_input_or_output(input_ty, mir.local_decls[local].ty);\n             }\n         },"}, {"sha": "070cea4bef2e3610563bd083ba1146fe81d73a05", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/a66c6512aa473bcb8721e0423a1739bf8e976b91/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a66c6512aa473bcb8721e0423a1739bf8e976b91/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=a66c6512aa473bcb8721e0423a1739bf8e976b91", "patch": "@@ -70,16 +70,18 @@ pub struct UniversalRegions<'tcx> {\n     pub defining_ty: DefiningTy<'tcx>,\n \n     /// The return type of this function, with all regions replaced by\n-    /// their universal `RegionVid` equivalents. This type is **NOT\n-    /// NORMALIZED** (i.e., it contains unnormalized associated type\n-    /// projections).\n-    pub output_ty: Ty<'tcx>,\n+    /// their universal `RegionVid` equivalents.\n+    ///\n+    /// NB. Associated types in this type have not been normalized,\n+    /// as the name suggests. =)\n+    pub unnormalized_output_ty: Ty<'tcx>,\n \n     /// The fully liberated input types of this function, with all\n     /// regions replaced by their universal `RegionVid` equivalents.\n-    /// This type is **NOT NORMALIZED** (i.e., it contains\n-    /// unnormalized associated type projections).\n-    pub input_tys: &'tcx [Ty<'tcx>],\n+    ///\n+    /// NB. Associated types in these types have not been normalized,\n+    /// as the name suggests. =)\n+    pub unnormalized_input_tys: &'tcx [Ty<'tcx>],\n \n     /// Each RBP `('a, GK)` indicates that `GK: 'a` can be assumed to\n     /// be true. These encode relationships like `T: 'a` that are\n@@ -479,7 +481,8 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n             self.relations.relate_universal_regions(fr, fr_fn_body);\n         }\n \n-        let (output_ty, input_tys) = inputs_and_output.split_last().unwrap();\n+        let (unnormalized_output_ty, unnormalized_input_tys) =\n+            inputs_and_output.split_last().unwrap();\n \n         // we should not have created any more variables\n         assert_eq!(self.infcx.num_region_vars(), num_universals);\n@@ -508,8 +511,8 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n             first_local_index,\n             num_universals,\n             defining_ty,\n-            output_ty,\n-            input_tys,\n+            unnormalized_output_ty,\n+            unnormalized_input_tys,\n             region_bound_pairs: self.region_bound_pairs,\n             relations: self.relations,\n         }"}]}