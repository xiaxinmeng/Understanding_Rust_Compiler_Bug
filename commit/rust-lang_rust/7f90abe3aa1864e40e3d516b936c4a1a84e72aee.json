{"sha": "7f90abe3aa1864e40e3d516b936c4a1a84e72aee", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmOTBhYmUzYWExODY0ZTQwZTNkNTE2YjkzNmM0YTFhODRlNzJhZWU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-08T07:20:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-08T07:20:57Z"}, "message": "Auto merge of #61635 - ecstatic-morse:const-signum, r=oli-obk\n\nMake `i*::signum` a `const fn`.\n\nTicks a box in #53718.\n\nThis uses a well-known branchless implementation of `signum`: `(n > 0) as i32 - (n < 0) as i32`.\n\nHere's a [playground](https://play.rust-lang.org/?version=nightly&mode=release&edition=2018&gist=747cf191c4974bf66c9d75e509ae6e6e) comparing the two techniques. On x86 in release mode, the branchless implementation is able to replace a `mov` and `cmov` with a `sar` and `add`, so this should be a bit faster as well.\n\n~~This is marked as a draft since I think I'll need to add `#[rustc_const_unstable]` somewhere. Perhaps the reviewer can point me in the right direction.~~", "tree": {"sha": "c7f2291af4dbdb983fa7f5fdd6941b90dde084c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7f2291af4dbdb983fa7f5fdd6941b90dde084c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f90abe3aa1864e40e3d516b936c4a1a84e72aee", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f90abe3aa1864e40e3d516b936c4a1a84e72aee", "html_url": "https://github.com/rust-lang/rust/commit/7f90abe3aa1864e40e3d516b936c4a1a84e72aee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f90abe3aa1864e40e3d516b936c4a1a84e72aee/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6312b89fdabce0aedf613391266e08c0deef2324", "url": "https://api.github.com/repos/rust-lang/rust/commits/6312b89fdabce0aedf613391266e08c0deef2324", "html_url": "https://github.com/rust-lang/rust/commit/6312b89fdabce0aedf613391266e08c0deef2324"}, {"sha": "f6611db1d59bbf5fb7d5cfbcccc629b6916d06a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6611db1d59bbf5fb7d5cfbcccc629b6916d06a3", "html_url": "https://github.com/rust-lang/rust/commit/f6611db1d59bbf5fb7d5cfbcccc629b6916d06a3"}], "stats": {"total": 23, "additions": 15, "deletions": 8}, "files": [{"sha": "304b2fc9ebb06e56e61c600d9ad9b58091b3c9c3", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f90abe3aa1864e40e3d516b936c4a1a84e72aee/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f90abe3aa1864e40e3d516b936c4a1a84e72aee/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=7f90abe3aa1864e40e3d516b936c4a1a84e72aee", "patch": "@@ -1993,13 +1993,10 @@ assert_eq!((-10\", stringify!($SelfT), \").signum(), -1);\",\n $EndFeature, \"\n ```\"),\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+            #[rustc_const_unstable(feature = \"const_int_sign\")]\n             #[inline]\n-            pub fn signum(self) -> Self {\n-                match self {\n-                    n if n > 0 =>  1,\n-                    0          =>  0,\n-                    _          => -1,\n-                }\n+            pub const fn signum(self) -> Self {\n+                (self > 0) as Self - (self < 0) as Self\n             }\n         }\n "}, {"sha": "fcd3ef4ea025b805c7b8f20ab7261861bbaa47e4", "filename": "src/test/run-pass/const-int-sign.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7f90abe3aa1864e40e3d516b936c4a1a84e72aee/src%2Ftest%2Frun-pass%2Fconst-int-sign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f90abe3aa1864e40e3d516b936c4a1a84e72aee/src%2Ftest%2Frun-pass%2Fconst-int-sign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-int-sign.rs?ref=7f90abe3aa1864e40e3d516b936c4a1a84e72aee", "patch": "@@ -1,11 +1,21 @@\n+#![feature(const_int_sign)]\n+\n const NEGATIVE_A: bool = (-10i32).is_negative();\n const NEGATIVE_B: bool = 10i32.is_negative();\n-const POSITIVE_A: bool= (-10i32).is_positive();\n-const POSITIVE_B: bool= 10i32.is_positive();\n+const POSITIVE_A: bool = (-10i32).is_positive();\n+const POSITIVE_B: bool = 10i32.is_positive();\n+\n+const SIGNUM_POS: i32 = 10i32.signum();\n+const SIGNUM_NIL: i32 = 0i32.signum();\n+const SIGNUM_NEG: i32 = (-42i32).signum();\n \n fn main() {\n     assert!(NEGATIVE_A);\n     assert!(!NEGATIVE_B);\n     assert!(!POSITIVE_A);\n     assert!(POSITIVE_B);\n+\n+    assert_eq!(SIGNUM_POS, 1);\n+    assert_eq!(SIGNUM_NIL, 0);\n+    assert_eq!(SIGNUM_NEG, -1);\n }"}]}