{"sha": "817e1b81e230d599585f860cdcad96c5ed83b93e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxN2UxYjgxZTIzMGQ1OTk1ODVmODYwY2RjYWQ5NmM1ZWQ4M2I5M2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-12T09:54:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-09-12T09:54:59Z"}, "message": "Auto merge of #44344 - jonhoo:entry_or_default, r=BurntSushi\n\nAdd or_default to Entry APIs\n\nAs argued for in #44324, this PR adds a new `or_default` method to the various `Entry` APIs (currently just for `BTreeMap` and `HashMap`) when `V: Default`. This method is effectively a shorthand for `or_insert_with(Default::default)`.", "tree": {"sha": "c8b45bc0eaa2d61bf3b1dbbd941b41dbefcc9f31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c8b45bc0eaa2d61bf3b1dbbd941b41dbefcc9f31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/817e1b81e230d599585f860cdcad96c5ed83b93e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/817e1b81e230d599585f860cdcad96c5ed83b93e", "html_url": "https://github.com/rust-lang/rust/commit/817e1b81e230d599585f860cdcad96c5ed83b93e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/817e1b81e230d599585f860cdcad96c5ed83b93e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fc0fc8c2d9718f8b664afca8e28636a6099e2b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc0fc8c2d9718f8b664afca8e28636a6099e2b8", "html_url": "https://github.com/rust-lang/rust/commit/8fc0fc8c2d9718f8b664afca8e28636a6099e2b8"}, {"sha": "9389d26ba261119bec1dc5336d17ce23c34785b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9389d26ba261119bec1dc5336d17ce23c34785b7", "html_url": "https://github.com/rust-lang/rust/commit/9389d26ba261119bec1dc5336d17ce23c34785b7"}], "stats": {"total": 67, "additions": 67, "deletions": 0}, "files": [{"sha": "f8c8a2a7a718bafa31c0f1dcd8adabb885cd12f6", "filename": "src/doc/unstable-book/src/library-features/entry-or-default.md", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/817e1b81e230d599585f860cdcad96c5ed83b93e/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fentry-or-default.md", "raw_url": "https://github.com/rust-lang/rust/raw/817e1b81e230d599585f860cdcad96c5ed83b93e/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fentry-or-default.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fentry-or-default.md?ref=817e1b81e230d599585f860cdcad96c5ed83b93e", "patch": "@@ -0,0 +1,13 @@\n+# `entry_or_default`\n+\n+The tracking issue for this feature is: [#44324]\n+\n+[#44324]: https://github.com/rust-lang/rust/issues/44324\n+\n+------------------------\n+\n+The `entry_or_default` feature adds a new method to `hash_map::Entry`\n+and `btree_map::Entry`, `or_default`, when `V: Default`. This method is\n+semantically identical to `or_insert_with(Default::default)`, and will\n+insert the default value for the type if no entry exists for the current\n+key."}, {"sha": "4c93fead172372fa20201861e0f47096e18e5f2f", "filename": "src/liballoc/btree/map.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/817e1b81e230d599585f860cdcad96c5ed83b93e/src%2Fliballoc%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817e1b81e230d599585f860cdcad96c5ed83b93e/src%2Fliballoc%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fbtree%2Fmap.rs?ref=817e1b81e230d599585f860cdcad96c5ed83b93e", "patch": "@@ -2104,6 +2104,33 @@ impl<'a, K: Ord, V> Entry<'a, K, V> {\n     }\n }\n \n+impl<'a, K: Ord, V: Default> Entry<'a, K, V> {\n+    #[unstable(feature = \"entry_or_default\", issue = \"44324\")]\n+    /// Ensures a value is in the entry by inserting the default value if empty,\n+    /// and returns a mutable reference to the value in the entry.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(entry_or_default)]\n+    /// # fn main() {\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map: BTreeMap<&str, Option<usize>> = BTreeMap::new();\n+    /// map.entry(\"poneyland\").or_default();\n+    ///\n+    /// assert_eq!(map[\"poneyland\"], None);\n+    /// # }\n+    /// ```\n+    pub fn or_default(self) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(Default::default()),\n+        }\n+    }\n+\n+}\n+\n impl<'a, K: Ord, V> VacantEntry<'a, K, V> {\n     /// Gets a reference to the key that would be used when inserting a value\n     /// through the VacantEntry."}, {"sha": "fbb69ca974930ae3e442882485a57fda24bc856e", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/817e1b81e230d599585f860cdcad96c5ed83b93e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/817e1b81e230d599585f860cdcad96c5ed83b93e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=817e1b81e230d599585f860cdcad96c5ed83b93e", "patch": "@@ -2001,6 +2001,33 @@ impl<'a, K, V> Entry<'a, K, V> {\n     }\n }\n \n+impl<'a, K, V: Default> Entry<'a, K, V> {\n+    #[unstable(feature = \"entry_or_default\", issue = \"44324\")]\n+    /// Ensures a value is in the entry by inserting the default value if empty,\n+    /// and returns a mutable reference to the value in the entry.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(entry_or_default)]\n+    /// # fn main() {\n+    /// use std::collections::HashMap;\n+    ///\n+    /// let mut map: HashMap<&str, Option<u32>> = HashMap::new();\n+    /// map.entry(\"poneyland\").or_default();\n+    ///\n+    /// assert_eq!(map[\"poneyland\"], None);\n+    /// # }\n+    /// ```\n+    pub fn or_default(self) -> &'a mut V {\n+        match self {\n+            Occupied(entry) => entry.into_mut(),\n+            Vacant(entry) => entry.insert(Default::default()),\n+        }\n+    }\n+\n+}\n+\n impl<'a, K, V> OccupiedEntry<'a, K, V> {\n     /// Gets a reference to the key in the entry.\n     ///"}]}