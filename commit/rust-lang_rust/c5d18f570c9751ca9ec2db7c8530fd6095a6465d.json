{"sha": "c5d18f570c9751ca9ec2db7c8530fd6095a6465d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1ZDE4ZjU3MGM5NzUxY2E5ZWMyZGI3Yzg1MzBmZDYwOTVhNjQ2NWQ=", "commit": {"author": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-04-14T17:21:17Z"}, "committer": {"name": "Benjamin Coenen", "email": "5719034+bnjjj@users.noreply.github.com", "date": "2020-04-14T17:28:33Z"}, "message": "add sort_text to sort in editor view\n\nSigned-off-by: Benjamin Coenen <5719034+bnjjj@users.noreply.github.com>", "tree": {"sha": "aff100ac781ebef12028e5b3423314e95b5e3ca7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aff100ac781ebef12028e5b3423314e95b5e3ca7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5d18f570c9751ca9ec2db7c8530fd6095a6465d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5d18f570c9751ca9ec2db7c8530fd6095a6465d", "html_url": "https://github.com/rust-lang/rust/commit/c5d18f570c9751ca9ec2db7c8530fd6095a6465d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5d18f570c9751ca9ec2db7c8530fd6095a6465d/comments", "author": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bnjjj", "id": 5719034, "node_id": "MDQ6VXNlcjU3MTkwMzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5719034?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bnjjj", "html_url": "https://github.com/bnjjj", "followers_url": "https://api.github.com/users/bnjjj/followers", "following_url": "https://api.github.com/users/bnjjj/following{/other_user}", "gists_url": "https://api.github.com/users/bnjjj/gists{/gist_id}", "starred_url": "https://api.github.com/users/bnjjj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bnjjj/subscriptions", "organizations_url": "https://api.github.com/users/bnjjj/orgs", "repos_url": "https://api.github.com/users/bnjjj/repos", "events_url": "https://api.github.com/users/bnjjj/events{/privacy}", "received_events_url": "https://api.github.com/users/bnjjj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b092bbc83d13af6a79f8f282632ec1ea0a1560bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/b092bbc83d13af6a79f8f282632ec1ea0a1560bd", "html_url": "https://github.com/rust-lang/rust/commit/b092bbc83d13af6a79f8f282632ec1ea0a1560bd"}], "stats": {"total": 20, "additions": 12, "deletions": 8}, "files": [{"sha": "79bc1fa41629bc444d6ad24a07571331866d2820", "filename": "crates/rust-analyzer/src/conv.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5d18f570c9751ca9ec2db7c8530fd6095a6465d/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d18f570c9751ca9ec2db7c8530fd6095a6465d/crates%2Frust-analyzer%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconv.rs?ref=c5d18f570c9751ca9ec2db7c8530fd6095a6465d", "patch": "@@ -112,31 +112,31 @@ impl Conv for Severity {\n     }\n }\n \n-impl ConvWith<(&LineIndex, LineEndings)> for CompletionItem {\n+impl ConvWith<(&LineIndex, LineEndings, usize)> for CompletionItem {\n     type Output = ::lsp_types::CompletionItem;\n \n-    fn conv_with(self, ctx: (&LineIndex, LineEndings)) -> ::lsp_types::CompletionItem {\n+    fn conv_with(self, ctx: (&LineIndex, LineEndings, usize)) -> ::lsp_types::CompletionItem {\n         let mut additional_text_edits = Vec::new();\n         let mut text_edit = None;\n         // LSP does not allow arbitrary edits in completion, so we have to do a\n         // non-trivial mapping here.\n         for atom_edit in self.text_edit().as_atoms() {\n             if self.source_range().is_subrange(&atom_edit.delete) {\n                 text_edit = Some(if atom_edit.delete == self.source_range() {\n-                    atom_edit.conv_with(ctx)\n+                    atom_edit.conv_with((ctx.0, ctx.1))\n                 } else {\n                     assert!(self.source_range().end() == atom_edit.delete.end());\n                     let range1 =\n                         TextRange::from_to(atom_edit.delete.start(), self.source_range().start());\n                     let range2 = self.source_range();\n                     let edit1 = AtomTextEdit::replace(range1, String::new());\n                     let edit2 = AtomTextEdit::replace(range2, atom_edit.insert.clone());\n-                    additional_text_edits.push(edit1.conv_with(ctx));\n-                    edit2.conv_with(ctx)\n+                    additional_text_edits.push(edit1.conv_with((ctx.0, ctx.1)));\n+                    edit2.conv_with((ctx.0, ctx.1))\n                 })\n             } else {\n                 assert!(self.source_range().intersection(&atom_edit.delete).is_none());\n-                additional_text_edits.push(atom_edit.conv_with(ctx));\n+                additional_text_edits.push(atom_edit.conv_with((ctx.0, ctx.1)));\n             }\n         }\n         let text_edit = text_edit.unwrap();\n@@ -147,6 +147,7 @@ impl ConvWith<(&LineIndex, LineEndings)> for CompletionItem {\n             filter_text: Some(self.lookup().to_string()),\n             kind: self.kind().map(|it| it.conv()),\n             text_edit: Some(text_edit),\n+            sort_text: Some(format!(\"{:02}\", ctx.2)),\n             additional_text_edits: Some(additional_text_edits),\n             documentation: self.documentation().map(|it| it.conv()),\n             deprecated: Some(self.deprecated()),"}, {"sha": "d18d2de348c3b6bceb6f7ccf4184c3604f633312", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c5d18f570c9751ca9ec2db7c8530fd6095a6465d/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5d18f570c9751ca9ec2db7c8530fd6095a6465d/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=c5d18f570c9751ca9ec2db7c8530fd6095a6465d", "patch": "@@ -423,8 +423,11 @@ pub fn handle_completion(\n     };\n     let line_index = world.analysis().file_line_index(position.file_id)?;\n     let line_endings = world.file_line_endings(position.file_id);\n-    let items: Vec<CompletionItem> =\n-        items.into_iter().map(|item| item.conv_with((&line_index, line_endings))).collect();\n+    let items: Vec<CompletionItem> = items\n+        .into_iter()\n+        .enumerate()\n+        .map(|(idx, item)| item.conv_with((&line_index, line_endings, idx)))\n+        .collect();\n \n     Ok(Some(items.into()))\n }"}]}