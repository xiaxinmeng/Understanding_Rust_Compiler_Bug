{"sha": "d682a6834d712dff3b9da219f6b2d3a68f0a22fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2ODJhNjgzNGQ3MTJkZmYzYjlkYTIxOWY2YjJkM2E2OGYwYTIyZmQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-12T07:13:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-12T07:13:28Z"}, "message": "Rollup merge of #80897 - camelid:atty, r=jyn514\n\ndriver: Use `atty` instead of rolling our own\n\nFixes #80888.\n\nRationale:\n\n- `atty` is widely used in the Rust ecosystem\n- We already use it (in `rustc_errors` and other places)\n- We shouldn't be rolling our own TTY detector when there's a\n  widely-used, well-tested package that we can use", "tree": {"sha": "cf80da92237e0d68de6709500187c7e34e5e51f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf80da92237e0d68de6709500187c7e34e5e51f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d682a6834d712dff3b9da219f6b2d3a68f0a22fd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf/UwYCRBK7hj4Ov3rIwAAdHIIAKnt2Ex38zpkLjyZovPTlfX9\n+/miwKVU1IRiDWAQtBx2vHwJxYGy+5glb3bgXrnshhCEydu9niQBGg3VAgRa529i\nG5swos67yCCBifATgqAMcifL9+TvPw8F5+budkx+E7XeKqNWgURwXbHPvO4l4kfT\n2UWVbruJaF1Qb/DL5VZZw43ENn5MJ+jxvdT8myQylU1+s0bHFO4wbIC6neexFlv9\nkVV4WMkIdAxXXTrznYev/b0j/0Iok6hROaRSUHIxwNKnNK6T0SVcppt0mb5OUiH+\nPYkHVPk9JNekgYegoX0IUF+xwaovBWisQjSbTLt/qL2QIcWM0RYR/c/KcyjDX1Q=\n=trlA\n-----END PGP SIGNATURE-----\n", "payload": "tree cf80da92237e0d68de6709500187c7e34e5e51f5\nparent 7c79e5b105daa4323d2a8c95712799c01233c83c\nparent 8c431607440d454e15c456b14f0282d3487c411e\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1610435608 +0900\ncommitter GitHub <noreply@github.com> 1610435608 +0900\n\nRollup merge of #80897 - camelid:atty, r=jyn514\n\ndriver: Use `atty` instead of rolling our own\n\nFixes #80888.\n\nRationale:\n\n- `atty` is widely used in the Rust ecosystem\n- We already use it (in `rustc_errors` and other places)\n- We shouldn't be rolling our own TTY detector when there's a\n  widely-used, well-tested package that we can use\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d682a6834d712dff3b9da219f6b2d3a68f0a22fd", "html_url": "https://github.com/rust-lang/rust/commit/d682a6834d712dff3b9da219f6b2d3a68f0a22fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d682a6834d712dff3b9da219f6b2d3a68f0a22fd/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c79e5b105daa4323d2a8c95712799c01233c83c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c79e5b105daa4323d2a8c95712799c01233c83c", "html_url": "https://github.com/rust-lang/rust/commit/7c79e5b105daa4323d2a8c95712799c01233c83c"}, {"sha": "8c431607440d454e15c456b14f0282d3487c411e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c431607440d454e15c456b14f0282d3487c411e", "html_url": "https://github.com/rust-lang/rust/commit/8c431607440d454e15c456b14f0282d3487c411e"}], "stats": {"total": 37, "additions": 4, "deletions": 33}, "files": [{"sha": "ab452c97e7b3763ed689a41903caba11a5be8efb", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d682a6834d712dff3b9da219f6b2d3a68f0a22fd/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/d682a6834d712dff3b9da219f6b2d3a68f0a22fd/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=d682a6834d712dff3b9da219f6b2d3a68f0a22fd", "patch": "@@ -3652,6 +3652,7 @@ dependencies = [\n name = \"rustc_driver\"\n version = \"0.0.0\"\n dependencies = [\n+ \"atty\",\n  \"libc\",\n  \"rustc_ast\",\n  \"rustc_ast_pretty\","}, {"sha": "b88b556d143d98a96b0c8308f26fe680e18f224e", "filename": "compiler/rustc_driver/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d682a6834d712dff3b9da219f6b2d3a68f0a22fd/compiler%2Frustc_driver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/d682a6834d712dff3b9da219f6b2d3a68f0a22fd/compiler%2Frustc_driver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2FCargo.toml?ref=d682a6834d712dff3b9da219f6b2d3a68f0a22fd", "patch": "@@ -9,6 +9,7 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n libc = \"0.2\"\n+atty = \"0.2\"\n tracing = { version = \"0.1.18\" }\n tracing-subscriber = { version = \"0.2.13\", default-features = false, features = [\"fmt\", \"env-filter\", \"smallvec\", \"parking_lot\", \"ansi\"] }\n tracing-tree = \"0.1.6\""}, {"sha": "509f81e16536bbcdb252db23dfab8e2d7496cc48", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 2, "deletions": 33, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d682a6834d712dff3b9da219f6b2d3a68f0a22fd/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d682a6834d712dff3b9da219f6b2d3a68f0a22fd/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=d682a6834d712dff3b9da219f6b2d3a68f0a22fd", "patch": "@@ -546,43 +546,12 @@ impl Compilation {\n #[derive(Copy, Clone)]\n pub struct RustcDefaultCalls;\n \n-// FIXME remove these and use winapi 0.3 instead\n-// Duplicates: bootstrap/compile.rs, librustc_errors/emitter.rs\n-#[cfg(unix)]\n-fn stdout_isatty() -> bool {\n-    unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }\n-}\n-\n-#[cfg(windows)]\n fn stdout_isatty() -> bool {\n-    use winapi::um::consoleapi::GetConsoleMode;\n-    use winapi::um::processenv::GetStdHandle;\n-    use winapi::um::winbase::STD_OUTPUT_HANDLE;\n-\n-    unsafe {\n-        let handle = GetStdHandle(STD_OUTPUT_HANDLE);\n-        let mut out = 0;\n-        GetConsoleMode(handle, &mut out) != 0\n-    }\n+    atty::is(atty::Stream::Stdout)\n }\n \n-// FIXME remove these and use winapi 0.3 instead\n-#[cfg(unix)]\n-fn stderr_isatty() -> bool {\n-    unsafe { libc::isatty(libc::STDERR_FILENO) != 0 }\n-}\n-\n-#[cfg(windows)]\n fn stderr_isatty() -> bool {\n-    use winapi::um::consoleapi::GetConsoleMode;\n-    use winapi::um::processenv::GetStdHandle;\n-    use winapi::um::winbase::STD_ERROR_HANDLE;\n-\n-    unsafe {\n-        let handle = GetStdHandle(STD_ERROR_HANDLE);\n-        let mut out = 0;\n-        GetConsoleMode(handle, &mut out) != 0\n-    }\n+    atty::is(atty::Stream::Stderr)\n }\n \n fn handle_explain(registry: Registry, code: &str, output: ErrorOutputType) {"}]}