{"sha": "156054f55cb1289d5828d09099a5a7ff5a44c5bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1NjA1NGY1NWNiMTI4OWQ1ODI4ZDA5MDk5YTVhN2ZmNWE0NGM1YmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-30T09:21:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-11-30T09:21:41Z"}, "message": "auto merge of #10722 : cmr/rust/type_id_opaque, r=alexcrichton\n\nCloses #10594", "tree": {"sha": "82763921587e357ec69937c7e422f5322f31598e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82763921587e357ec69937c7e422f5322f31598e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/156054f55cb1289d5828d09099a5a7ff5a44c5bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/156054f55cb1289d5828d09099a5a7ff5a44c5bd", "html_url": "https://github.com/rust-lang/rust/commit/156054f55cb1289d5828d09099a5a7ff5a44c5bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/156054f55cb1289d5828d09099a5a7ff5a44c5bd/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80991bb578329ca921fdc910d9b6b064e8f521d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/80991bb578329ca921fdc910d9b6b064e8f521d2", "html_url": "https://github.com/rust-lang/rust/commit/80991bb578329ca921fdc910d9b6b064e8f521d2"}, {"sha": "572635b76f878d3d08576b30a05c1db55d345347", "url": "https://api.github.com/repos/rust-lang/rust/commits/572635b76f878d3d08576b30a05c1db55d345347", "html_url": "https://github.com/rust-lang/rust/commit/572635b76f878d3d08576b30a05c1db55d345347"}], "stats": {"total": 151, "additions": 105, "deletions": 46}, "files": [{"sha": "d8eaffd5563cbdd1514dedf83ca8b4de7356ce5f", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/156054f55cb1289d5828d09099a5a7ff5a44c5bd/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156054f55cb1289d5828d09099a5a7ff5a44c5bd/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=156054f55cb1289d5828d09099a5a7ff5a44c5bd", "patch": "@@ -82,16 +82,18 @@ pub enum LangItem {\n     OpaqueStructLangItem,              // 38\n \n     EventLoopFactoryLangItem,          // 39\n+\n+    TypeIdLangItem,                    // 40\n }\n \n pub struct LanguageItems {\n-    items: [Option<ast::DefId>, ..40]\n+    items: [Option<ast::DefId>, ..41]\n }\n \n impl LanguageItems {\n     pub fn new() -> LanguageItems {\n         LanguageItems {\n-            items: [ None, ..40 ]\n+            items: [ None, ..41 ]\n         }\n     }\n \n@@ -148,6 +150,8 @@ impl LanguageItems {\n \n             39 => \"event_loop_factory\",\n \n+            40 => \"type_id\",\n+\n             _ => \"???\"\n         }\n     }\n@@ -298,6 +302,9 @@ impl LanguageItems {\n     pub fn event_loop_factory(&self) -> Option<ast::DefId> {\n         self.items[EventLoopFactoryLangItem as uint]\n     }\n+    pub fn type_id(&self) -> Option<ast::DefId> {\n+        self.items[TypeIdLangItem as uint]\n+    }\n }\n \n struct LanguageItemCollector {\n@@ -382,6 +389,7 @@ impl LanguageItemCollector {\n         item_refs.insert(\"ty_visitor\", TyVisitorTraitLangItem as uint);\n         item_refs.insert(\"opaque\", OpaqueStructLangItem as uint);\n         item_refs.insert(\"event_loop_factory\", EventLoopFactoryLangItem as uint);\n+        item_refs.insert(\"type_id\", TypeIdLangItem as uint);\n \n         LanguageItemCollector {\n             session: session,"}, {"sha": "110e964bdbc48aac602af0da051fa6f6f6fc541e", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/156054f55cb1289d5828d09099a5a7ff5a44c5bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156054f55cb1289d5828d09099a5a7ff5a44c5bd/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=156054f55cb1289d5828d09099a5a7ff5a44c5bd", "patch": "@@ -287,7 +287,16 @@ pub fn trans_intrinsic(ccx: @mut CrateContext,\n         \"type_id\" => {\n             let hash = ty::hash_crate_independent(ccx.tcx, substs.tys[0],\n                                                   ccx.link_meta.extras_hash);\n-            Ret(bcx, C_i64(hash as i64))\n+            // NB: This needs to be kept in lockstep with the TypeId struct in\n+            //     libstd/unstable/intrinsics.rs\n+            let val = C_named_struct(type_of::type_of(ccx, output_type), [C_u64(hash)]);\n+            match bcx.fcx.llretptr {\n+                Some(ptr) => {\n+                    Store(bcx, val, ptr);\n+                    RetVoid(bcx);\n+                },\n+                None => Ret(bcx, val)\n+            }\n         }\n         \"init\" => {\n             let tp_ty = substs.tys[0];"}, {"sha": "e3160dbc40236149beba90724b711ee36afdb249", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/156054f55cb1289d5828d09099a5a7ff5a44c5bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156054f55cb1289d5828d09099a5a7ff5a44c5bd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=156054f55cb1289d5828d09099a5a7ff5a44c5bd", "patch": "@@ -105,6 +105,7 @@ use middle::typeck::rscope::RegionScope;\n use middle::typeck::{lookup_def_ccx};\n use middle::typeck::no_params;\n use middle::typeck::{require_same_types, method_map, vtable_map};\n+use middle::lang_items::TypeIdLangItem;\n use util::common::{block_query, indenter, loop_query};\n use util::ppaux::UserString;\n use util::ppaux;\n@@ -4013,7 +4014,17 @@ pub fn check_intrinsic_type(ccx: @mut CrateCtxt, it: @ast::foreign_item) {\n               });\n               (1u, ~[], td_ptr)\n             }\n-            \"type_id\" => (1u, ~[], ty::mk_u64()),\n+            \"type_id\" => {\n+                let langid = ccx.tcx.lang_items.require(TypeIdLangItem);\n+                match langid {\n+                    Ok(did) => (1u, ~[], ty::mk_struct(ccx.tcx, did, substs {\n+                                                 self_ty: None,\n+                                                 tps: ~[],\n+                                                 regions: ty::NonerasedRegions(opt_vec::Empty)\n+                                                 }) ),\n+                    Err(msg) => { tcx.sess.span_fatal(it.span, msg); }\n+                }\n+            },\n             \"visit_tydesc\" => {\n               let tydesc_ty = match ty::get_tydesc_ty(ccx.tcx) {\n                   Ok(t) => t,"}, {"sha": "7af12bef7b5c29280bffd799823696d68193234f", "filename": "src/libstd/any.rs", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/156054f55cb1289d5828d09099a5a7ff5a44c5bd/src%2Flibstd%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156054f55cb1289d5828d09099a5a7ff5a44c5bd/src%2Flibstd%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fany.rs?ref=156054f55cb1289d5828d09099a5a7ff5a44c5bd", "patch": "@@ -12,22 +12,28 @@\n //! of any type.\n \n use cast::transmute;\n+#[cfg(stage0)]\n use cmp::Eq;\n use option::{Option, Some, None};\n+#[cfg(stage0)]\n use to_bytes::{IterBytes, Cb};\n use to_str::ToStr;\n use unstable::intrinsics;\n use util::Void;\n+#[cfg(not(stage0))]\n+use unstable::intrinsics::TypeId;\n \n ///////////////////////////////////////////////////////////////////////////////\n // TypeId\n ///////////////////////////////////////////////////////////////////////////////\n \n /// `TypeId` represents a globally unique identifier for a type\n+#[cfg(stage0)]\n pub struct TypeId {\n     priv t: u64,\n }\n \n+#[cfg(stage0)]\n impl TypeId {\n     /// Returns the `TypeId` of the type this generic function has been instantiated with\n     #[inline]\n@@ -36,13 +42,15 @@ impl TypeId {\n     }\n }\n \n+#[cfg(stage0)]\n impl Eq for TypeId {\n     #[inline]\n     fn eq(&self, &other: &TypeId) -> bool {\n         self.t == other.t\n     }\n }\n \n+#[cfg(stage0)]\n impl IterBytes for TypeId {\n     fn iter_bytes(&self, lsb0: bool, f: Cb) -> bool {\n         self.t.iter_bytes(lsb0, f)\n@@ -189,29 +197,6 @@ mod tests {\n \n     static TEST: &'static str = \"Test\";\n \n-    #[test]\n-    fn type_id() {\n-        let (a, b, c) = (TypeId::of::<uint>(), TypeId::of::<&'static str>(),\n-                         TypeId::of::<Test>());\n-        let (d, e, f) = (TypeId::of::<uint>(), TypeId::of::<&'static str>(),\n-                         TypeId::of::<Test>());\n-\n-        assert!(a != b);\n-        assert!(a != c);\n-        assert!(b != c);\n-\n-        assert_eq!(a, d);\n-        assert_eq!(b, e);\n-        assert_eq!(c, f);\n-    }\n-\n-    #[test]\n-    fn type_id_hash() {\n-        let (a, b) = (TypeId::of::<uint>(), TypeId::of::<uint>());\n-\n-        assert_eq!(a.hash(), b.hash());\n-    }\n-\n     #[test]\n     fn any_as_void_ptr() {\n         let (a, b, c) = (~5u as ~Any, ~TEST as ~Any, ~Test as ~Any);"}, {"sha": "01b4225d70bad4126f8e613264ad422c953287c5", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/156054f55cb1289d5828d09099a5a7ff5a44c5bd/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156054f55cb1289d5828d09099a5a7ff5a44c5bd/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=156054f55cb1289d5828d09099a5a7ff5a44c5bd", "patch": "@@ -34,7 +34,7 @@ A quick refresher on memory ordering:\n \n // This is needed to prevent duplicate lang item definitions.\n #[cfg(test)]\n-pub use realstd::unstable::intrinsics::{TyDesc, Opaque, TyVisitor};\n+pub use realstd::unstable::intrinsics::{TyDesc, Opaque, TyVisitor, TypeId};\n \n pub type GlueFn = extern \"Rust\" fn(*i8);\n \n@@ -313,7 +313,11 @@ extern \"rust-intrinsic\" {\n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n+    #[cfg(stage0)]\n     pub fn type_id<T: 'static>() -> u64;\n+    #[cfg(not(stage0))]\n+    pub fn type_id<T: 'static>() -> TypeId;\n+\n \n     /// Create a value initialized to zero.\n     ///\n@@ -486,3 +490,22 @@ extern \"rust-intrinsic\" {\n #[cfg(target_endian = \"big\")]    pub fn to_be32(x: i32) -> i32 { x }\n #[cfg(target_endian = \"little\")] pub fn to_be64(x: i64) -> i64 { unsafe { bswap64(x) } }\n #[cfg(target_endian = \"big\")]    pub fn to_be64(x: i64) -> i64 { x }\n+\n+\n+/// `TypeId` represents a globally unique identifier for a type\n+#[lang=\"type_id\"] // This needs to be kept in lockstep with the code in trans/intrinsic.rs and\n+                  // middle/lang_items.rs\n+#[deriving(Eq, IterBytes)]\n+#[cfg(not(test))]\n+pub struct TypeId {\n+    priv t: u64,\n+}\n+\n+#[cfg(not(test))]\n+impl TypeId {\n+    /// Returns the `TypeId` of the type this generic function has been instantiated with\n+    #[cfg(not(stage0))]\n+    pub fn of<T: 'static>() -> TypeId {\n+        unsafe { type_id::<T>() }\n+    }\n+}"}, {"sha": "9bb867372619a2e650be659935f31d4dbc51b9d2", "filename": "src/test/auxiliary/typeid-intrinsic.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/156054f55cb1289d5828d09099a5a7ff5a44c5bd/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156054f55cb1289d5828d09099a5a7ff5a44c5bd/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic.rs?ref=156054f55cb1289d5828d09099a5a7ff5a44c5bd", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::unstable::intrinsics;\n+use std::unstable::intrinsics::TypeId;\n \n pub struct A;\n pub struct B(Option<A>);\n@@ -20,13 +21,13 @@ pub type F = Option<int>;\n pub type G = uint;\n pub type H = &'static str;\n \n-pub unsafe fn id_A() -> u64 { intrinsics::type_id::<A>() }\n-pub unsafe fn id_B() -> u64 { intrinsics::type_id::<B>() }\n-pub unsafe fn id_C() -> u64 { intrinsics::type_id::<C>() }\n-pub unsafe fn id_D() -> u64 { intrinsics::type_id::<D>() }\n-pub unsafe fn id_E() -> u64 { intrinsics::type_id::<E>() }\n-pub unsafe fn id_F() -> u64 { intrinsics::type_id::<F>() }\n-pub unsafe fn id_G() -> u64 { intrinsics::type_id::<G>() }\n-pub unsafe fn id_H() -> u64 { intrinsics::type_id::<H>() }\n+pub unsafe fn id_A() -> TypeId { intrinsics::type_id::<A>() }\n+pub unsafe fn id_B() -> TypeId { intrinsics::type_id::<B>() }\n+pub unsafe fn id_C() -> TypeId { intrinsics::type_id::<C>() }\n+pub unsafe fn id_D() -> TypeId { intrinsics::type_id::<D>() }\n+pub unsafe fn id_E() -> TypeId { intrinsics::type_id::<E>() }\n+pub unsafe fn id_F() -> TypeId { intrinsics::type_id::<F>() }\n+pub unsafe fn id_G() -> TypeId { intrinsics::type_id::<G>() }\n+pub unsafe fn id_H() -> TypeId { intrinsics::type_id::<H>() }\n \n-pub unsafe fn foo<T: 'static>() -> u64 { intrinsics::type_id::<T>() }\n+pub unsafe fn foo<T: 'static>() -> TypeId { intrinsics::type_id::<T>() }"}, {"sha": "9bb867372619a2e650be659935f31d4dbc51b9d2", "filename": "src/test/auxiliary/typeid-intrinsic2.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/156054f55cb1289d5828d09099a5a7ff5a44c5bd/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156054f55cb1289d5828d09099a5a7ff5a44c5bd/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftypeid-intrinsic2.rs?ref=156054f55cb1289d5828d09099a5a7ff5a44c5bd", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n use std::unstable::intrinsics;\n+use std::unstable::intrinsics::TypeId;\n \n pub struct A;\n pub struct B(Option<A>);\n@@ -20,13 +21,13 @@ pub type F = Option<int>;\n pub type G = uint;\n pub type H = &'static str;\n \n-pub unsafe fn id_A() -> u64 { intrinsics::type_id::<A>() }\n-pub unsafe fn id_B() -> u64 { intrinsics::type_id::<B>() }\n-pub unsafe fn id_C() -> u64 { intrinsics::type_id::<C>() }\n-pub unsafe fn id_D() -> u64 { intrinsics::type_id::<D>() }\n-pub unsafe fn id_E() -> u64 { intrinsics::type_id::<E>() }\n-pub unsafe fn id_F() -> u64 { intrinsics::type_id::<F>() }\n-pub unsafe fn id_G() -> u64 { intrinsics::type_id::<G>() }\n-pub unsafe fn id_H() -> u64 { intrinsics::type_id::<H>() }\n+pub unsafe fn id_A() -> TypeId { intrinsics::type_id::<A>() }\n+pub unsafe fn id_B() -> TypeId { intrinsics::type_id::<B>() }\n+pub unsafe fn id_C() -> TypeId { intrinsics::type_id::<C>() }\n+pub unsafe fn id_D() -> TypeId { intrinsics::type_id::<D>() }\n+pub unsafe fn id_E() -> TypeId { intrinsics::type_id::<E>() }\n+pub unsafe fn id_F() -> TypeId { intrinsics::type_id::<F>() }\n+pub unsafe fn id_G() -> TypeId { intrinsics::type_id::<G>() }\n+pub unsafe fn id_H() -> TypeId { intrinsics::type_id::<H>() }\n \n-pub unsafe fn foo<T: 'static>() -> u64 { intrinsics::type_id::<T>() }\n+pub unsafe fn foo<T: 'static>() -> TypeId { intrinsics::type_id::<T>() }"}, {"sha": "1999043c6cdd2bc14888e19a5a1b391c0f0042a7", "filename": "src/test/run-pass/typeid-intrinsic.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/156054f55cb1289d5828d09099a5a7ff5a44c5bd/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/156054f55cb1289d5828d09099a5a7ff5a44c5bd/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeid-intrinsic.rs?ref=156054f55cb1289d5828d09099a5a7ff5a44c5bd", "patch": "@@ -16,8 +16,10 @@ extern mod other1(name = \"typeid-intrinsic\");\n extern mod other2(name = \"typeid-intrinsic2\");\n \n use std::unstable::intrinsics;\n+use std::unstable::intrinsics::TypeId;\n \n struct A;\n+struct Test;\n \n fn main() {\n     unsafe {\n@@ -50,4 +52,23 @@ fn main() {\n         assert_eq!(intrinsics::type_id::<A>(), other1::foo::<A>());\n         assert_eq!(other2::foo::<A>(), other1::foo::<A>());\n     }\n+\n+    // sanity test of TypeId\n+    let (a, b, c) = (TypeId::of::<uint>(), TypeId::of::<&'static str>(),\n+                     TypeId::of::<Test>());\n+    let (d, e, f) = (TypeId::of::<uint>(), TypeId::of::<&'static str>(),\n+                     TypeId::of::<Test>());\n+\n+    assert!(a != b);\n+    assert!(a != c);\n+    assert!(b != c);\n+\n+    assert_eq!(a, d);\n+    assert_eq!(b, e);\n+    assert_eq!(c, f);\n+\n+    // check it has a hash\n+    let (a, b) = (TypeId::of::<uint>(), TypeId::of::<uint>());\n+\n+    assert_eq!(a.hash(), b.hash());\n }"}]}