{"sha": "8b00ab1a488ae3461b6eafdd83e6738599de157f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMDBhYjFhNDg4YWUzNDYxYjZlYWZkZDgzZTY3Mzg1OTlkZTE1N2Y=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-07-16T21:54:47Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-07-16T21:54:47Z"}, "message": "Feed the correct return type to the typechecker when typechecking objects, and add a testcase.", "tree": {"sha": "c4ed133dc6e307b87462e85f3b5b799ea2962346", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4ed133dc6e307b87462e85f3b5b799ea2962346"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b00ab1a488ae3461b6eafdd83e6738599de157f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b00ab1a488ae3461b6eafdd83e6738599de157f", "html_url": "https://github.com/rust-lang/rust/commit/8b00ab1a488ae3461b6eafdd83e6738599de157f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b00ab1a488ae3461b6eafdd83e6738599de157f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa37b8c0472248338bb300dfdd716fa326d6271c", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa37b8c0472248338bb300dfdd716fa326d6271c", "html_url": "https://github.com/rust-lang/rust/commit/aa37b8c0472248338bb300dfdd716fa326d6271c"}], "stats": {"total": 55, "additions": 41, "deletions": 14}, "files": [{"sha": "94c42c9cf8cf40f23abc23f665fc67b8dfbd860b", "filename": "src/Makefile", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8b00ab1a488ae3461b6eafdd83e6738599de157f/src%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/8b00ab1a488ae3461b6eafdd83e6738599de157f/src%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FMakefile?ref=8b00ab1a488ae3461b6eafdd83e6738599de157f", "patch": "@@ -437,6 +437,7 @@ TEST_XFAILS_LLVM := $(addprefix test/run-pass/, \\\n                       obj-drop.rs \\\n                       obj-dtor.rs \\\n                       obj-recursion.rs \\\n+                      obj-return-polytypes.rs \\\n                       obj-with-vec.rs \\\n                       opeq.rs \\\n                       output-slot-variants.rs \\"}, {"sha": "20f2443d79b1441a016a808bce05c096c1fe8fe6", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8b00ab1a488ae3461b6eafdd83e6738599de157f/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/8b00ab1a488ae3461b6eafdd83e6738599de157f/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=8b00ab1a488ae3461b6eafdd83e6738599de157f", "patch": "@@ -845,20 +845,24 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n       Stack.push fn_ctx fn_ctx_stack\n     in\n \n+    let push_fn_ctx_of_ty_fn (ty_fn:Ast.ty_fn) : unit =\n+      let (ty_sig, ty_fn_aux) = ty_fn in\n+      let ret_ty = ty_sig.Ast.sig_output_slot.Ast.slot_ty in\n+      let is_iter = ty_fn_aux.Ast.fn_is_iter in\n+      push_fn_ctx (Common.option_get ret_ty) is_iter\n+    in\n+\n     let visit_mod_item_pre _ _ item =\n-      match item.Common.node.Ast.decl_item with\n+      let { Common.node = item; Common.id = item_id } = item in\n+      match item.Ast.decl_item with\n           Ast.MOD_ITEM_fn _ ->\n-            let id = item.Common.id in\n+            let fn_ty = Hashtbl.find cx.Semant.ctxt_all_item_types item_id in\n             begin\n-              match Hashtbl.find cx.Semant.ctxt_all_item_types id with\n-                  Ast.TY_fn (ty_sig, ty_fn_aux) ->\n-                    let ret_ty = ty_sig.Ast.sig_output_slot.Ast.slot_ty in\n-                    let is_iter = ty_fn_aux.Ast.fn_is_iter in\n-                    push_fn_ctx (Common.option_get ret_ty) is_iter\n+              match fn_ty with\n+                  Ast.TY_fn ty_fn -> push_fn_ctx_of_ty_fn ty_fn\n                 | _ ->\n-                  Common.bug\n-                    ()\n-                    \"Type.visit_mod_item_pre: fn item doesn't have a fn type\"\n+                  Common.bug ()\n+                    \"Type.visit_mod_item_pre: fn item didn't have a fn type\"\n             end\n         | _ -> ()\n     in\n@@ -869,10 +873,16 @@ let process_crate (cx:Semant.ctxt) (crate:Ast.crate) : unit =\n         | _ -> ()\n     in\n \n-    let visit_obj_fn_pre _ _ fn =\n-      let fn = fn.Common.node in\n-      let ret_ty = fn.Ast.fn_output_slot.Common.node.Ast.slot_ty in\n-      push_fn_ctx (Common.option_get ret_ty) fn.Ast.fn_aux.Ast.fn_is_iter\n+    let visit_obj_fn_pre obj ident _ =\n+      let obj_ty = Hashtbl.find cx.Semant.ctxt_all_item_types obj.Common.id in\n+      match obj_ty with\n+          Ast.TY_fn ({ Ast.sig_output_slot =\n+              { Ast.slot_ty = Some (Ast.TY_obj (_, methods)) } }, _) ->\n+            push_fn_ctx_of_ty_fn (Hashtbl.find methods ident)\n+        | _ ->\n+            Common.bug ()\n+              \"Type.visit_obj_fn_pre: item doesn't have an object type (%a)\"\n+              Ast.sprintf_ty obj_ty\n     in\n     let visit_obj_fn_post _ _ _ = ignore (Stack.pop fn_ctx_stack) in\n "}, {"sha": "78897d7eed48f4e57747b24ef71f102f5c494ecf", "filename": "src/test/run-pass/obj-return-polytypes.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b00ab1a488ae3461b6eafdd83e6738599de157f/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b00ab1a488ae3461b6eafdd83e6738599de157f/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobj-return-polytypes.rs?ref=8b00ab1a488ae3461b6eafdd83e6738599de157f", "patch": "@@ -0,0 +1,16 @@\n+// -*- rust -*-\n+\n+type clam[T] = tag(signed(int), unsigned(uint));\n+\n+fn getclam[T]() -> clam[T] {\n+  ret signed[T](42);\n+}\n+\n+obj impatience[T]() {\n+  fn moreclam() -> clam[T] {\n+    be getclam[T]();\n+  }\n+}\n+\n+fn main() {}\n+"}]}