{"sha": "9e11d1cca4ea724468ec1589c8d424397d7de4bd", "node_id": "C_kwDOAAsO6NoAKDllMTFkMWNjYTRlYTcyNDQ2OGVjMTU4OWM4ZDQyNDM5N2Q3ZGU0YmQ", "commit": {"author": {"name": "Jubilee", "email": "46493976+workingjubilee@users.noreply.github.com", "date": "2021-09-24T00:31:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-24T00:31:43Z"}, "message": "Rollup merge of #89148 - estebank:used-type-param, r=oli-obk\n\nSuggest `_` in turbofish if param will be inferred from fn argument", "tree": {"sha": "798a0b70fa291689ebf42ac6f31a6e318add07a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/798a0b70fa291689ebf42ac6f31a6e318add07a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e11d1cca4ea724468ec1589c8d424397d7de4bd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhTRxwCRBK7hj4Ov3rIwAAJSAIAHiUV3EhgypBIcP2EoUB+VVP\nx3U/y7MixA6I5kznF6dHA39sOZgmiKediw7SK1toODvU6VJTLBhshjt+NbpiQ8cz\nrKJO0Y2L9Wz0nkBsbfaPHDQK/u+WcM2a8gRSGUii/LqqnlGcq0pRkIWVNuS9+cVc\njRvyT0uI5xVt6or3M/pXBThp+LrzPmcWXI0nzKAlak7ZpOX/wnx//tgQc7xwgRpq\nE6ASz4s3GWRln+EVXO3hq57crnJXqKO4jP2UXig0LCiG8HnFIvZpvz8K+lqenWm8\nqfa3wDy8pATIfaubeupAHWBSgYc5zLUGYGlBwQDxb01nxjauO3aihpyM4HcH8Lo=\n=moOB\n-----END PGP SIGNATURE-----\n", "payload": "tree 798a0b70fa291689ebf42ac6f31a6e318add07a3\nparent 5da2f460b36988d5e0226412080769bafd94eb3c\nparent affea730e9693623d7c0f6bad35b3fab36df02e4\nauthor Jubilee <46493976+workingjubilee@users.noreply.github.com> 1632443503 -0700\ncommitter GitHub <noreply@github.com> 1632443503 -0700\n\nRollup merge of #89148 - estebank:used-type-param, r=oli-obk\n\nSuggest `_` in turbofish if param will be inferred from fn argument\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e11d1cca4ea724468ec1589c8d424397d7de4bd", "html_url": "https://github.com/rust-lang/rust/commit/9e11d1cca4ea724468ec1589c8d424397d7de4bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e11d1cca4ea724468ec1589c8d424397d7de4bd/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5da2f460b36988d5e0226412080769bafd94eb3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5da2f460b36988d5e0226412080769bafd94eb3c", "html_url": "https://github.com/rust-lang/rust/commit/5da2f460b36988d5e0226412080769bafd94eb3c"}, {"sha": "affea730e9693623d7c0f6bad35b3fab36df02e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/affea730e9693623d7c0f6bad35b3fab36df02e4", "html_url": "https://github.com/rust-lang/rust/commit/affea730e9693623d7c0f6bad35b3fab36df02e4"}], "stats": {"total": 58, "additions": 57, "deletions": 1}, "files": [{"sha": "2e3db4d6d655f53447438c62ec0c76ad90b7a397", "filename": "compiler/rustc_typeck/src/structured_errors/wrong_number_of_generic_args.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9e11d1cca4ea724468ec1589c8d424397d7de4bd/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e11d1cca4ea724468ec1589c8d424397d7de4bd/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fstructured_errors%2Fwrong_number_of_generic_args.rs?ref=9e11d1cca4ea724468ec1589c8d424397d7de4bd", "patch": "@@ -1,6 +1,7 @@\n use crate::structured_errors::StructuredDiagnostic;\n use rustc_errors::{pluralize, Applicability, DiagnosticBuilder, DiagnosticId};\n use rustc_hir as hir;\n+use rustc_middle::hir::map::fn_sig;\n use rustc_middle::middle::resolve_lifetime::LifetimeScopeForPath;\n use rustc_middle::ty::{self as ty, TyCtxt};\n use rustc_session::Session;\n@@ -292,12 +293,30 @@ impl<'a, 'tcx> WrongNumberOfGenericArgs<'a, 'tcx> {\n         &self,\n         num_params_to_take: usize,\n     ) -> String {\n+        let fn_sig = self.tcx.hir().get_if_local(self.def_id).and_then(|node| fn_sig(node));\n+        let is_used_in_input = |def_id| {\n+            fn_sig.map_or(false, |fn_sig| {\n+                fn_sig.decl.inputs.iter().any(|ty| match ty.kind {\n+                    hir::TyKind::Path(hir::QPath::Resolved(\n+                        None,\n+                        hir::Path { res: hir::def::Res::Def(_, id), .. },\n+                    )) if *id == def_id => true,\n+                    _ => false,\n+                })\n+            })\n+        };\n         self.gen_params\n             .params\n             .iter()\n             .skip(self.params_offset + self.num_provided_type_or_const_args())\n             .take(num_params_to_take)\n-            .map(|param| param.name.to_string())\n+            .map(|param| match param.kind {\n+                // This is being infered from the item's inputs, no need to set it.\n+                ty::GenericParamDefKind::Type { .. } if is_used_in_input(param.def_id) => {\n+                    \"_\".to_string()\n+                }\n+                _ => param.name.to_string(),\n+            })\n             .collect::<Vec<_>>()\n             .join(\", \")\n     }"}, {"sha": "cc4120041b9865e7215259af4ec5ef3a50793dc2", "filename": "src/test/ui/suggestions/missing-type-param-used-in-param.fixed", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e11d1cca4ea724468ec1589c8d424397d7de4bd/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9e11d1cca4ea724468ec1589c8d424397d7de4bd/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.fixed?ref=9e11d1cca4ea724468ec1589c8d424397d7de4bd", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+fn two_type_params<A, B>(_: B) {}\n+\n+fn main() {\n+    two_type_params::<String, _>(100); //~ ERROR this function takes 2 generic arguments\n+    two_type_params::<String, _>(100);\n+}"}, {"sha": "19286331b60232d7c21cdf485310beab74d9eda1", "filename": "src/test/ui/suggestions/missing-type-param-used-in-param.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9e11d1cca4ea724468ec1589c8d424397d7de4bd/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e11d1cca4ea724468ec1589c8d424397d7de4bd/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.rs?ref=9e11d1cca4ea724468ec1589c8d424397d7de4bd", "patch": "@@ -0,0 +1,8 @@\n+// run-rustfix\n+\n+fn two_type_params<A, B>(_: B) {}\n+\n+fn main() {\n+    two_type_params::<String>(100); //~ ERROR this function takes 2 generic arguments\n+    two_type_params::<String, _>(100);\n+}"}, {"sha": "4f7058a6492596ad1382c9050548042c8333661b", "filename": "src/test/ui/suggestions/missing-type-param-used-in-param.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9e11d1cca4ea724468ec1589c8d424397d7de4bd/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e11d1cca4ea724468ec1589c8d424397d7de4bd/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fmissing-type-param-used-in-param.stderr?ref=9e11d1cca4ea724468ec1589c8d424397d7de4bd", "patch": "@@ -0,0 +1,21 @@\n+error[E0107]: this function takes 2 generic arguments but 1 generic argument was supplied\n+  --> $DIR/missing-type-param-used-in-param.rs:6:5\n+   |\n+LL |     two_type_params::<String>(100);\n+   |     ^^^^^^^^^^^^^^^   ------ supplied 1 generic argument\n+   |     |\n+   |     expected 2 generic arguments\n+   |\n+note: function defined here, with 2 generic parameters: `A`, `B`\n+  --> $DIR/missing-type-param-used-in-param.rs:3:4\n+   |\n+LL | fn two_type_params<A, B>(_: B) {}\n+   |    ^^^^^^^^^^^^^^^ -  -\n+help: add missing generic argument\n+   |\n+LL |     two_type_params::<String, _>(100);\n+   |                             +++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}]}