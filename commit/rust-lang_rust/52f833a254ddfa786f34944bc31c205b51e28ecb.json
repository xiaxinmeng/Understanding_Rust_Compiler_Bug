{"sha": "52f833a254ddfa786f34944bc31c205b51e28ecb", "node_id": "C_kwDOAAsO6NoAKDUyZjgzM2EyNTRkZGZhNzg2ZjM0OTQ0YmMzMWMyMDViNTFlMjhlY2I", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-03T20:19:59Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-13T15:46:05Z"}, "message": "remove LifeSeeder\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "c5781d2c0fcad8bda916b8dea123ad3d68a100f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5781d2c0fcad8bda916b8dea123ad3d68a100f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52f833a254ddfa786f34944bc31c205b51e28ecb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52f833a254ddfa786f34944bc31c205b51e28ecb", "html_url": "https://github.com/rust-lang/rust/commit/52f833a254ddfa786f34944bc31c205b51e28ecb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52f833a254ddfa786f34944bc31c205b51e28ecb/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00260347e344bbf3af708b7a70b7aaecfc684c03", "url": "https://api.github.com/repos/rust-lang/rust/commits/00260347e344bbf3af708b7a70b7aaecfc684c03", "html_url": "https://github.com/rust-lang/rust/commit/00260347e344bbf3af708b7a70b7aaecfc684c03"}], "stats": {"total": 121, "additions": 69, "deletions": 52}, "files": [{"sha": "e136bb000919e18a2f7190088191a5aea7bedc2a", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 69, "deletions": 52, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/52f833a254ddfa786f34944bc31c205b51e28ecb/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52f833a254ddfa786f34944bc31c205b51e28ecb/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=52f833a254ddfa786f34944bc31c205b51e28ecb", "patch": "@@ -8,7 +8,6 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorOf, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, Visitor};\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{Node, PatKind, TyKind};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n@@ -468,7 +467,7 @@ fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n     tcx.lint_level_at_node(lint::builtin::DEAD_CODE, id).0 == lint::Allow\n }\n \n-// This visitor seeds items that\n+// These check_* functions seeds items that\n //   1) We want to explicitly consider as live:\n //     * Item annotated with #[allow(dead_code)]\n //         - This is done so that if we want to suppress warnings for a\n@@ -481,90 +480,99 @@ fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n //   or\n //   2) We are not sure to be live or not\n //     * Implementations of traits and trait methods\n-struct LifeSeeder<'tcx> {\n-    worklist: Vec<LocalDefId>,\n+fn check_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    // see `MarkSymbolVisitor::struct_constructors`\n-    struct_constructors: FxHashMap<LocalDefId, LocalDefId>,\n-}\n-\n-impl<'v, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'tcx> {\n-    fn visit_item(&mut self, item: &hir::Item<'_>) {\n-        let allow_dead_code = has_allow_dead_code_or_lang_attr(self.tcx, item.hir_id());\n-        if allow_dead_code {\n-            self.worklist.push(item.def_id);\n-        }\n-        match item.kind {\n-            hir::ItemKind::Enum(ref enum_def, _) => {\n-                let hir = self.tcx.hir();\n+    worklist: &mut Vec<LocalDefId>,\n+    struct_constructors: &mut FxHashMap<LocalDefId, LocalDefId>,\n+    id: hir::ItemId,\n+) {\n+    let allow_dead_code = has_allow_dead_code_or_lang_attr(tcx, id.hir_id());\n+    if allow_dead_code {\n+        worklist.push(id.def_id);\n+    }\n+\n+    match tcx.hir().def_kind(id.def_id) {\n+        DefKind::Enum => {\n+            let item = tcx.hir().item(id);\n+            if let hir::ItemKind::Enum(ref enum_def, _) = item.kind {\n+                let hir = tcx.hir();\n                 if allow_dead_code {\n-                    self.worklist.extend(\n+                    worklist.extend(\n                         enum_def.variants.iter().map(|variant| hir.local_def_id(variant.id)),\n                     );\n                 }\n \n                 for variant in enum_def.variants {\n                     if let Some(ctor_hir_id) = variant.data.ctor_hir_id() {\n-                        self.struct_constructors\n+                        struct_constructors\n                             .insert(hir.local_def_id(ctor_hir_id), hir.local_def_id(variant.id));\n                     }\n                 }\n             }\n-            hir::ItemKind::Impl(hir::Impl { ref of_trait, items, .. }) => {\n+        }\n+        DefKind::Impl => {\n+            let item = tcx.hir().item(id);\n+            if let hir::ItemKind::Impl(hir::Impl { ref of_trait, items, .. }) = item.kind {\n                 if of_trait.is_some() {\n-                    self.worklist.push(item.def_id);\n+                    worklist.push(item.def_id);\n                 }\n                 for impl_item_ref in *items {\n-                    let impl_item = self.tcx.hir().impl_item(impl_item_ref.id);\n+                    let impl_item = tcx.hir().impl_item(impl_item_ref.id);\n                     if of_trait.is_some()\n-                        || has_allow_dead_code_or_lang_attr(self.tcx, impl_item.hir_id())\n+                        || has_allow_dead_code_or_lang_attr(tcx, impl_item.hir_id())\n                     {\n-                        self.worklist.push(impl_item_ref.id.def_id);\n+                        worklist.push(impl_item_ref.id.def_id);\n                     }\n                 }\n             }\n-            hir::ItemKind::Struct(ref variant_data, _) => {\n+        }\n+        DefKind::Struct => {\n+            let item = tcx.hir().item(id);\n+            if let hir::ItemKind::Struct(ref variant_data, _) = item.kind {\n                 if let Some(ctor_hir_id) = variant_data.ctor_hir_id() {\n-                    self.struct_constructors\n-                        .insert(self.tcx.hir().local_def_id(ctor_hir_id), item.def_id);\n+                    struct_constructors.insert(tcx.hir().local_def_id(ctor_hir_id), item.def_id);\n                 }\n             }\n-            hir::ItemKind::GlobalAsm(_) => {\n-                // global_asm! is always live.\n-                self.worklist.push(item.def_id);\n-            }\n-            _ => (),\n         }\n+        DefKind::GlobalAsm => {\n+            // global_asm! is always live.\n+            worklist.push(id.def_id);\n+        }\n+        _ => {}\n     }\n+}\n \n-    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n-        use hir::TraitItemKind::{Const, Fn};\n+fn check_trait_item<'tcx>(tcx: TyCtxt<'tcx>, worklist: &mut Vec<LocalDefId>, id: hir::TraitItemId) {\n+    use hir::TraitItemKind::{Const, Fn};\n+    if matches!(tcx.hir().def_kind(id.def_id), DefKind::AssocConst | DefKind::AssocFn) {\n+        let trait_item = tcx.hir().trait_item(id);\n         if matches!(trait_item.kind, Const(_, Some(_)) | Fn(_, hir::TraitFn::Provided(_)))\n-            && has_allow_dead_code_or_lang_attr(self.tcx, trait_item.hir_id())\n+            && has_allow_dead_code_or_lang_attr(tcx, trait_item.hir_id())\n         {\n-            self.worklist.push(trait_item.def_id);\n+            worklist.push(trait_item.def_id);\n         }\n     }\n+}\n \n-    fn visit_impl_item(&mut self, _item: &hir::ImplItem<'_>) {\n-        // ignore: we are handling this in `visit_item` above\n-    }\n-\n-    fn visit_foreign_item(&mut self, foreign_item: &hir::ForeignItem<'_>) {\n-        use hir::ForeignItemKind::{Fn, Static};\n-        if matches!(foreign_item.kind, Static(..) | Fn(..))\n-            && has_allow_dead_code_or_lang_attr(self.tcx, foreign_item.hir_id())\n-        {\n-            self.worklist.push(foreign_item.def_id);\n-        }\n+fn check_foreign_item<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    worklist: &mut Vec<LocalDefId>,\n+    id: hir::ForeignItemId,\n+) {\n+    if matches!(tcx.hir().def_kind(id.def_id), DefKind::Static(_) | DefKind::Fn)\n+        && has_allow_dead_code_or_lang_attr(tcx, id.hir_id())\n+    {\n+        worklist.push(id.def_id);\n     }\n }\n \n fn create_and_seed_worklist<'tcx>(\n     tcx: TyCtxt<'tcx>,\n ) -> (Vec<LocalDefId>, FxHashMap<LocalDefId, LocalDefId>) {\n     let access_levels = &tcx.privacy_access_levels(());\n-    let worklist = access_levels\n+    // see `MarkSymbolVisitor::struct_constructors`\n+    let mut struct_constructors = Default::default();\n+    let mut worklist = access_levels\n         .map\n         .iter()\n         .filter_map(\n@@ -576,11 +584,20 @@ fn create_and_seed_worklist<'tcx>(\n         .chain(tcx.entry_fn(()).and_then(|(def_id, _)| def_id.as_local()))\n         .collect::<Vec<_>>();\n \n-    // Seed implemented trait items\n-    let mut life_seeder = LifeSeeder { worklist, tcx, struct_constructors: Default::default() };\n-    tcx.hir().visit_all_item_likes(&mut life_seeder);\n+    let crate_items = tcx.hir_crate_items(());\n+    for id in crate_items.items() {\n+        check_item(tcx, &mut worklist, &mut struct_constructors, id);\n+    }\n+\n+    for id in crate_items.trait_items() {\n+        check_trait_item(tcx, &mut worklist, id);\n+    }\n+\n+    for id in crate_items.foreign_items() {\n+        check_foreign_item(tcx, &mut worklist, id);\n+    }\n \n-    (life_seeder.worklist, life_seeder.struct_constructors)\n+    (worklist, struct_constructors)\n }\n \n fn live_symbols_and_ignored_derived_traits<'tcx>("}]}