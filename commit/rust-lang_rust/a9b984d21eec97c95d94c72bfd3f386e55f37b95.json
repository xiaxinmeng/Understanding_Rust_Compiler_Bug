{"sha": "a9b984d21eec97c95d94c72bfd3f386e55f37b95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5Yjk4NGQyMWVlYzk3Yzk1ZDk0YzcyYmZkM2YzODZlNTVmMzdiOTU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T12:13:47Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T12:13:47Z"}, "message": "don't always allocate for the `uninit` intrinsic", "tree": {"sha": "852daee2485853f4e6c303b504250257153870c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/852daee2485853f4e6c303b504250257153870c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9b984d21eec97c95d94c72bfd3f386e55f37b95", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYGyn7AAoJEFbW7qD8Z6xGICEQAIz+GNMWoMP52z/3iak8qQ58\nM410A1JBRG7KRCdouztF9H7+tWjxaT00Gz+0ZLvWkBU0eI//aXmU0Z2O1MS34E8/\nPmDIYMhwWnTY81pK2GVwSznlqhoCRcqsSYJn4uGRIX6SVArFjhhBXAz5f27IMdVx\nRxUX1Ap+LXxzSkkxWa7naQHiDAaCrk+jTpSy2lLSkjEHw7WQvLpRSYpCZhPtZPv7\nsE31KElHGlxd6mTfUX9YL2gaCkHFPdSz5rx6owSDEMe3AybjZuYG5/sTnias24Ur\n5LHfFo5x/rwSI50/G1j9pGXubzdZ/KsMM7bYQbnQQDGD37rmdan307eRlgUBUtxi\nomWk4UhalaktuqFDfnV0ToRcBBBwZf/2yQHfalU1bzpG2ERljrK91V7vSqeC5BhO\nOpN40Vy1ZAJr9hp+sqKb6SUnOKiD2D3T1Tv+j8zmh9GLruPSLKCgWkMKnbOHkUiK\nuc8w97ReOZdEz61lDvLK/8GP5hBa1gRLzv5glDuAOt1SbttmVxYSwnrrkoKhiIlo\ntQVFrNlVY8xg+91dFqu9gteSHp4VQSkmNQgBCx7jg4prfNtxGNReCuhyTAEL8RlT\nx1tbgttVCJEI8FvBCKYjD3lCwrfuDm3csFVD8B+FOGgrU1/tvW8D5SQ90kDEqOY6\nz3/53nmYj7+xiySbHkJA\n=swwo\n-----END PGP SIGNATURE-----", "payload": "tree 852daee2485853f4e6c303b504250257153870c5\nparent 92f6874ead00ac6ea12c46ca555796c67db56c70\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478175227 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478175227 +0100\n\ndon't always allocate for the `uninit` intrinsic"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9b984d21eec97c95d94c72bfd3f386e55f37b95", "html_url": "https://github.com/rust-lang/rust/commit/a9b984d21eec97c95d94c72bfd3f386e55f37b95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9b984d21eec97c95d94c72bfd3f386e55f37b95/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92f6874ead00ac6ea12c46ca555796c67db56c70", "url": "https://api.github.com/repos/rust-lang/rust/commits/92f6874ead00ac6ea12c46ca555796c67db56c70", "html_url": "https://github.com/rust-lang/rust/commit/92f6874ead00ac6ea12c46ca555796c67db56c70"}], "stats": {"total": 42, "additions": 27, "deletions": 15}, "files": [{"sha": "0cd7190db99197bf6b1975e9726d99202f07a742", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a9b984d21eec97c95d94c72bfd3f386e55f37b95/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b984d21eec97c95d94c72bfd3f386e55f37b95/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=a9b984d21eec97c95d94c72bfd3f386e55f37b95", "patch": "@@ -1555,7 +1555,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n     /// convenience function to ensure correct usage of globals and code-sharing with locals\n     pub fn modify_global<\n-        F: FnOnce(&mut Self, Option<Value>) -> EvalResult<'tcx, Value>,\n+        F: FnOnce(&mut Self, Option<Value>) -> EvalResult<'tcx, Option<Value>>,\n     >(\n         &mut self,\n         cid: GlobalId<'tcx>,\n@@ -1565,14 +1565,14 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n         if !val.mutable {\n             return Err(EvalError::ModifiedConstantMemory);\n         }\n-        val.data = Some(f(self, val.data)?);\n+        val.data = f(self, val.data)?;\n         *self.globals.get_mut(&cid).expect(\"already checked\") = val;\n         Ok(())\n     }\n \n     /// convenience function to ensure correct usage of locals and code-sharing with globals\n     pub fn modify_local<\n-        F: FnOnce(&mut Self, Option<Value>) -> EvalResult<'tcx, Value>,\n+        F: FnOnce(&mut Self, Option<Value>) -> EvalResult<'tcx, Option<Value>>,\n     >(\n         &mut self,\n         frame: usize,\n@@ -1581,7 +1581,8 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     ) -> EvalResult<'tcx, ()> {\n         let val = self.stack[frame].get_local(local);\n         let val = f(self, val)?;\n-        self.stack[frame].set_local(local, val);\n+        // can't use `set_local` here, because that's only meant for going to an initialized value\n+        self.stack[frame].locals[local.index() - 1] = val;\n         Ok(())\n     }\n }"}, {"sha": "3e13d2a85dbd969d277422b92a7b8050aec46c3e", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 22, "deletions": 11, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/a9b984d21eec97c95d94c72bfd3f386e55f37b95/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9b984d21eec97c95d94c72bfd3f386e55f37b95/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=a9b984d21eec97c95d94c72bfd3f386e55f37b95", "patch": "@@ -131,21 +131,21 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                     match val {\n                         Some(Value::ByRef(ptr)) => {\n                             this.memory.write_repeat(ptr, 0, size)?;\n-                            Ok(Value::ByRef(ptr))\n+                            Ok(Some(Value::ByRef(ptr)))\n                         },\n                         None => match this.ty_to_primval_kind(dest_ty) {\n-                            Ok(kind) => Ok(Value::ByVal(PrimVal::new(0, kind))),\n+                            Ok(kind) => Ok(Some(Value::ByVal(PrimVal::new(0, kind)))),\n                             Err(_) => {\n                                 let ptr = this.alloc_ptr_with_substs(dest_ty, substs)?;\n                                 this.memory.write_repeat(ptr, 0, size)?;\n-                                Ok(Value::ByRef(ptr))\n+                                Ok(Some(Value::ByRef(ptr)))\n                             }\n                         },\n-                        Some(Value::ByVal(value)) => Ok(Value::ByVal(PrimVal::new(0, value.kind))),\n-                        Some(Value::ByValPair(a, b)) => Ok(Value::ByValPair(\n+                        Some(Value::ByVal(value)) => Ok(Some(Value::ByVal(PrimVal::new(0, value.kind)))),\n+                        Some(Value::ByValPair(a, b)) => Ok(Some(Value::ByValPair(\n                             PrimVal::new(0, a.kind),\n                             PrimVal::new(0, b.kind),\n-                        )),\n+                        ))),\n                     }\n                 };\n                 match dest {\n@@ -271,12 +271,23 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"uninit\" => {\n-                // FIXME(solson): Attempt writing a None over the destination when it's an\n-                // Lvalue::Local (that is not ByRef). Otherwise do the mark_definedness as usual.\n-                let dest = self.force_allocation(dest)?.to_ptr();\n-\n                 let size = dest_layout.size(&self.tcx.data_layout).bytes() as usize;\n-                self.memory.mark_definedness(dest, size, false)?;\n+                let uninit = |this: &mut Self, val: Option<Value>| {\n+                    match val {\n+                        Some(Value::ByRef(ptr)) => {\n+                            this.memory.mark_definedness(ptr, size, false)?;\n+                            Ok(Some(Value::ByRef(ptr)))\n+                        },\n+                        None => Ok(None),\n+                        Some(_) => Ok(None),\n+                    }\n+                };\n+                match dest {\n+                    Lvalue::Local { frame, local } => self.modify_local(frame, local, uninit)?,\n+                    Lvalue::Ptr { ptr, extra: LvalueExtra::None } => self.memory.mark_definedness(ptr, size, false)?,\n+                    Lvalue::Ptr { .. } => bug!(\"uninit intrinsic tried to write to fat ptr target\"),\n+                    Lvalue::Global(cid) => self.modify_global(cid, uninit)?,\n+                }\n             }\n \n             name => return Err(EvalError::Unimplemented(format!(\"unimplemented intrinsic: {}\", name))),"}]}