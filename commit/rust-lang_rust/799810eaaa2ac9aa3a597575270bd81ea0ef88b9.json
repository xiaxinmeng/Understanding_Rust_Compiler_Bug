{"sha": "799810eaaa2ac9aa3a597575270bd81ea0ef88b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5OTgxMGVhYWEyYWM5YWEzYTU5NzU3NTI3MGJkODFlYTBlZjg4Yjk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-12T15:10:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-02-12T15:10:16Z"}, "message": "Document config pattern", "tree": {"sha": "f99b8c6b35a1cd0bea638778102899101b4668e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f99b8c6b35a1cd0bea638778102899101b4668e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/799810eaaa2ac9aa3a597575270bd81ea0ef88b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/799810eaaa2ac9aa3a597575270bd81ea0ef88b9", "html_url": "https://github.com/rust-lang/rust/commit/799810eaaa2ac9aa3a597575270bd81ea0ef88b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/799810eaaa2ac9aa3a597575270bd81ea0ef88b9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0fc2af1184bed5af0a74276c261c79f685fa5d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0fc2af1184bed5af0a74276c261c79f685fa5d7", "html_url": "https://github.com/rust-lang/rust/commit/e0fc2af1184bed5af0a74276c261c79f685fa5d7"}], "stats": {"total": 60, "additions": 60, "deletions": 0}, "files": [{"sha": "73ce59b8701da549443eec3dbc779f8eb04d7cb3", "filename": "docs/dev/style.md", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/799810eaaa2ac9aa3a597575270bd81ea0ef88b9/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/799810eaaa2ac9aa3a597575270bd81ea0ef88b9/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=799810eaaa2ac9aa3a597575270bd81ea0ef88b9", "patch": "@@ -368,6 +368,66 @@ impl ThingDoer {\n \n **Rationale:** not bothering the caller with irrelevant details, not mixing user API with implementor API.\n \n+## Functions with many parameters\n+\n+Avoid creating functions with many optional or boolean parameters.\n+Introduce a `Config` struct instead.\n+\n+```rust\n+// GOOD\n+pub struct AnnotationConfig {\n+    pub binary_target: bool,\n+    pub annotate_runnables: bool,\n+    pub annotate_impls: bool,\n+}\n+\n+pub fn annotations(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    config: AnnotationConfig\n+) -> Vec<Annotation> {\n+    ...\n+}\n+\n+// BAD\n+pub fn annotations(\n+    db: &RootDatabase,\n+    file_id: FileId,\n+    binary_target: bool,\n+    annotate_runnables: bool,\n+    annotate_impls: bool,\n+) -> Vec<Annotation> {\n+    ...\n+}\n+```\n+\n+**Rationale:** reducing churn.\n+If the function has many parameters, they most likely change frequently.\n+By packing them into a struct we protect all intermediary functions from changes.\n+\n+Do not implement `Default` for the `Config` struct, the caller has more context to determine better defaults.\n+Do not store `Config` as a part of the `state`, pass it explicitly.\n+This gives more flexibility for the caller.\n+\n+If there is variation not only in the input parameters, but in the return type as well, consider introducing a `Command` type.\n+\n+```rust\n+// MAYBE GOOD\n+pub struct Query {\n+    pub name: String,\n+    pub case_sensitive: bool,\n+}\n+\n+impl Query {\n+    pub fn all(self) -> Vec<Item> { ... }\n+    pub fn first(self) -> Option<Item> { ... }\n+}\n+\n+// MAYBE BAD\n+fn query_all(name: String, case_sensitive: bool) -> Vec<Item> { ... }\n+fn query_first(name: String, case_sensitive: bool) -> Option<Item> { ... }\n+```\n+\n ## Avoid Monomorphization\n \n Avoid making a lot of code type parametric, *especially* on the boundaries between crates."}]}