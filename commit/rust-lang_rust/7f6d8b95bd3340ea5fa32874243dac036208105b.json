{"sha": "7f6d8b95bd3340ea5fa32874243dac036208105b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNmQ4Yjk1YmQzMzQwZWE1ZmEzMjg3NDI0M2RhYzAzNjIwODEwNWI=", "commit": {"author": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-09-08T06:37:51Z"}, "committer": {"name": "Michael Bebenita", "email": "mbebenita@mozilla.com", "date": "2010-09-08T06:37:51Z"}, "message": "Fixed race in the rust kernel.", "tree": {"sha": "7010caf355578adc06a0919df97b0418683ba41f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7010caf355578adc06a0919df97b0418683ba41f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f6d8b95bd3340ea5fa32874243dac036208105b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6d8b95bd3340ea5fa32874243dac036208105b", "html_url": "https://github.com/rust-lang/rust/commit/7f6d8b95bd3340ea5fa32874243dac036208105b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f6d8b95bd3340ea5fa32874243dac036208105b/comments", "author": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbebenita", "id": 311082, "node_id": "MDQ6VXNlcjMxMTA4Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/311082?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbebenita", "html_url": "https://github.com/mbebenita", "followers_url": "https://api.github.com/users/mbebenita/followers", "following_url": "https://api.github.com/users/mbebenita/following{/other_user}", "gists_url": "https://api.github.com/users/mbebenita/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbebenita/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbebenita/subscriptions", "organizations_url": "https://api.github.com/users/mbebenita/orgs", "repos_url": "https://api.github.com/users/mbebenita/repos", "events_url": "https://api.github.com/users/mbebenita/events{/privacy}", "received_events_url": "https://api.github.com/users/mbebenita/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de611a309006f0976bc9a579eb1087e7a89f79a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/de611a309006f0976bc9a579eb1087e7a89f79a7", "html_url": "https://github.com/rust-lang/rust/commit/de611a309006f0976bc9a579eb1087e7a89f79a7"}], "stats": {"total": 65, "additions": 45, "deletions": 20}, "files": [{"sha": "910e33c69e9b36aa4efc4257108941fc90a0f87c", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 30, "deletions": 17, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7f6d8b95bd3340ea5fa32874243dac036208105b/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7f6d8b95bd3340ea5fa32874243dac036208105b/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=7f6d8b95bd3340ea5fa32874243dac036208105b", "patch": "@@ -129,20 +129,25 @@ rust_kernel::log(uint32_t type_bits, char const *fmt, ...) {\n }\n \n void\n-rust_kernel::start_kernel_loop() {\n-    while (_interrupt_kernel_loop == false) {\n-        message_queues.global.lock();\n-        for (size_t i = 0; i < message_queues.length(); i++) {\n-            rust_message_queue *queue = message_queues[i];\n-            if (queue->is_associated() == false) {\n-                rust_message *message = NULL;\n-                while (queue->dequeue(&message)) {\n-                    message->kernel_process();\n-                    delete message;\n-                }\n+rust_kernel::pump_message_queues() {\n+    message_queues.global.lock();\n+    for (size_t i = 0; i < message_queues.length(); i++) {\n+        rust_message_queue *queue = message_queues[i];\n+        if (queue->is_associated() == false) {\n+            rust_message *message = NULL;\n+            while (queue->dequeue(&message)) {\n+                message->kernel_process();\n+                delete message;\n             }\n         }\n-        message_queues.global.unlock();\n+    }\n+    message_queues.global.unlock();\n+}\n+\n+void\n+rust_kernel::start_kernel_loop() {\n+    while (_interrupt_kernel_loop == false) {\n+        pump_message_queues();\n     }\n }\n \n@@ -153,16 +158,24 @@ rust_kernel::run() {\n     log(rust_log::KERN, \"finished kernel loop\");\n }\n \n+void\n+rust_kernel::terminate_kernel_loop() {\n+    _interrupt_kernel_loop = true;\n+    join();\n+}\n+\n rust_kernel::~rust_kernel() {\n     K(_srv, domains.length() == 0,\n       \"Kernel has %d live domain(s), join all domains before killing \"\n        \"the kernel.\", domains.length());\n \n-    // If the kernel loop is running, interrupt it, join and exit.\n-    if (is_running()) {\n-        _interrupt_kernel_loop = true;\n-        join();\n-    }\n+    terminate_kernel_loop();\n+\n+    // It's possible that the message pump misses some messages because\n+    // of races, so pump any remaining messages here. By now all domain\n+    // threads should have been joined, so we shouldn't miss any more\n+    // messages.\n+    pump_message_queues();\n \n     free_handles(_task_handles);\n     free_handles(_port_handles);"}, {"sha": "8c599c1f92dd56270eef38a58c4ea06d06a624ec", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f6d8b95bd3340ea5fa32874243dac036208105b/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/7f6d8b95bd3340ea5fa32874243dac036208105b/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=7f6d8b95bd3340ea5fa32874243dac036208105b", "patch": "@@ -60,6 +60,9 @@ class rust_kernel : public rust_thread {\n      */\n     spin_lock _message_queues_lock;\n \n+    void terminate_kernel_loop();\n+    void pump_message_queues();\n+\n public:\n \n     /**"}, {"sha": "fdfc065249dd50ceb00154a9a8f7973e90e390d8", "filename": "src/rt/sync/sync.cpp", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f6d8b95bd3340ea5fa32874243dac036208105b/src%2Frt%2Fsync%2Fsync.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7f6d8b95bd3340ea5fa32874243dac036208105b/src%2Frt%2Fsync%2Fsync.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Fsync.cpp?ref=7f6d8b95bd3340ea5fa32874243dac036208105b", "patch": "@@ -11,6 +11,10 @@ void sync::yield() {\n #endif\n }\n \n+rust_thread::rust_thread() : _is_running(false) {\n+    // Nop.\n+}\n+\n #if defined(__WIN32__)\n static DWORD WINAPI\n #elif defined(__GNUC__)\n@@ -36,6 +40,7 @@ rust_thread::start() {\n    pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);\n    pthread_create(&thread, &attr, rust_thread_start, (void *) this);\n #endif\n+   _is_running = true;\n }\n \n void\n@@ -46,10 +51,10 @@ rust_thread::join() {\n    pthread_join(thread, NULL);\n #endif\n    thread = 0;\n+   _is_running = false;\n }\n \n bool\n rust_thread::is_running() {\n-    // TODO: This may be broken because of possible races.\n-    return thread;\n+    return _is_running;\n }"}, {"sha": "3829dafe65044d8a984ceacda284de37577b856a", "filename": "src/rt/sync/sync.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f6d8b95bd3340ea5fa32874243dac036208105b/src%2Frt%2Fsync%2Fsync.h", "raw_url": "https://github.com/rust-lang/rust/raw/7f6d8b95bd3340ea5fa32874243dac036208105b/src%2Frt%2Fsync%2Fsync.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fsync%2Fsync.h?ref=7f6d8b95bd3340ea5fa32874243dac036208105b", "patch": "@@ -15,12 +15,15 @@ class sync {\n  * Thread utility class. Derive and implement your own run() method.\n  */\n class rust_thread {\n+private:\n+    volatile bool _is_running;\n public:\n #if defined(__WIN32__)\n     HANDLE thread;\n #else\n     pthread_t thread;\n #endif\n+    rust_thread();\n     void start();\n \n     virtual void run() {"}, {"sha": "a2c9d5c9b4c89ccdb2c0cee38f5335f9ab5e97b2", "filename": "src/test/run-pass/task-comm-9.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f6d8b95bd3340ea5fa32874243dac036208105b/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f6d8b95bd3340ea5fa32874243dac036208105b/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-9.rs?ref=7f6d8b95bd3340ea5fa32874243dac036208105b", "patch": "@@ -16,7 +16,8 @@ io fn test00() {\n     let port[int] p = port();\n     let int number_of_messages = 10;\n         \n-    let task t0 = spawn thread test00_start(chan(p), number_of_messages);\n+    let task t0 = spawn thread \"child\"\n+        test00_start(chan(p), number_of_messages);\n     \n     let int i = 0;\n     while (i < number_of_messages) {"}]}