{"sha": "bec8dbdb602688d6da4f49b7fdd74226f0f9f04c", "node_id": "C_kwDOAAsO6NoAKGJlYzhkYmRiNjAyNjg4ZDZkYTRmNDliN2ZkZDc0MjI2ZjBmOWYwNGM", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-04-05T00:37:59Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-04-05T00:39:35Z"}, "message": "diagnostics: give a special note for unsafe fn / Fn/FnOnce/FnMut\n\nFixes #90073", "tree": {"sha": "70177740bbd8b4b90213e8823648b61870e4a79e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70177740bbd8b4b90213e8823648b61870e4a79e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bec8dbdb602688d6da4f49b7fdd74226f0f9f04c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bec8dbdb602688d6da4f49b7fdd74226f0f9f04c", "html_url": "https://github.com/rust-lang/rust/commit/bec8dbdb602688d6da4f49b7fdd74226f0f9f04c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bec8dbdb602688d6da4f49b7fdd74226f0f9f04c/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3", "html_url": "https://github.com/rust-lang/rust/commit/60e50fc1cfe0bb693a5f4f93eb83ef70854531e3"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "31b92d52bebc8d08a8690b60d7d283ecb516e6f4", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bec8dbdb602688d6da4f49b7fdd74226f0f9f04c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec8dbdb602688d6da4f49b7fdd74226f0f9f04c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=bec8dbdb602688d6da4f49b7fdd74226f0f9f04c", "patch": "@@ -208,6 +208,15 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 flags.push((sym::_Self, Some(\"&[]\".to_owned())));\n             }\n \n+            if self_ty.is_fn() {\n+                let fn_sig = self_ty.fn_sig(self.tcx);\n+                let shortname = match fn_sig.unsafety() {\n+                    hir::Unsafety::Normal => \"fn\",\n+                    hir::Unsafety::Unsafe => \"unsafe fn\",\n+                };\n+                flags.push((sym::_Self, Some(shortname.to_owned())));\n+            }\n+\n             if let ty::Array(aty, len) = self_ty.kind() {\n                 flags.push((sym::_Self, Some(\"[]\".to_owned())));\n                 flags.push((sym::_Self, Some(format!(\"[{}]\", aty))));"}, {"sha": "a7b28471bfe12eb0e22b7155357ea306911f6556", "filename": "library/core/src/ops/function.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bec8dbdb602688d6da4f49b7fdd74226f0f9f04c/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bec8dbdb602688d6da4f49b7fdd74226f0f9f04c/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ffunction.rs?ref=bec8dbdb602688d6da4f49b7fdd74226f0f9f04c", "patch": "@@ -59,6 +59,10 @@\n         Args = \"()\",\n         note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n     ),\n+    on(\n+        _Self = \"unsafe fn\",\n+        note = \"unsafe functions must be wrapped in closures: `|| unsafe {{ /* code */ }}`\"\n+    ),\n     message = \"expected a `{Fn}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `Fn<{Args}>` closure, found `{Self}`\"\n )]\n@@ -139,6 +143,10 @@ pub trait Fn<Args>: FnMut<Args> {\n         Args = \"()\",\n         note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n     ),\n+    on(\n+        _Self = \"unsafe fn\",\n+        note = \"unsafe functions must be wrapped in closures: `|| unsafe {{ /* code */ }}`\"\n+    ),\n     message = \"expected a `{FnMut}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `FnMut<{Args}>` closure, found `{Self}`\"\n )]\n@@ -211,6 +219,10 @@ pub trait FnMut<Args>: FnOnce<Args> {\n         Args = \"()\",\n         note = \"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"\n     ),\n+    on(\n+        _Self = \"unsafe fn\",\n+        note = \"unsafe functions must be wrapped in closures: `|| unsafe {{ /* code */ }}`\"\n+    ),\n     message = \"expected a `{FnOnce}<{Args}>` closure, found `{Self}`\",\n     label = \"expected an `FnOnce<{Args}>` closure, found `{Self}`\"\n )]"}, {"sha": "57043c335c0dd85accd7df2ad16570521b0e7c9e", "filename": "src/test/ui/closures/coerce-unsafe-to-closure.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bec8dbdb602688d6da4f49b7fdd74226f0f9f04c/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bec8dbdb602688d6da4f49b7fdd74226f0f9f04c/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fcoerce-unsafe-to-closure.stderr?ref=bec8dbdb602688d6da4f49b7fdd74226f0f9f04c", "patch": "@@ -7,6 +7,7 @@ LL |     let x: Option<&[u8]> = Some(\"foo\").map(std::mem::transmute);\n    |                                        required by a bound introduced by this call\n    |\n    = help: the trait `FnOnce<(&str,)>` is not implemented for `unsafe extern \"rust-intrinsic\" fn(_) -> _ {transmute::<_, _>}`\n+   = note: unsafe functions must be wrapped in closures: `|| unsafe { /* code */ }`\n note: required by a bound in `Option::<T>::map`\n   --> $SRC_DIR/core/src/option.rs:LL:COL\n    |"}, {"sha": "fcd668c191fddae8b683b0141882863578974beb", "filename": "src/test/ui/unboxed-closures/unboxed-closures-unsafe-extern-fn.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bec8dbdb602688d6da4f49b7fdd74226f0f9f04c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bec8dbdb602688d6da4f49b7fdd74226f0f9f04c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-unsafe-extern-fn.stderr?ref=bec8dbdb602688d6da4f49b7fdd74226f0f9f04c", "patch": "@@ -7,6 +7,7 @@ LL |     let x = call_it(&square, 22);\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = note: unsafe functions must be wrapped in closures: `|| unsafe { /* code */ }`\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:9:15\n    |\n@@ -22,6 +23,7 @@ LL |     let y = call_it_mut(&mut square, 22);\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = note: unsafe functions must be wrapped in closures: `|| unsafe { /* code */ }`\n note: required by a bound in `call_it_mut`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:12:19\n    |\n@@ -37,6 +39,7 @@ LL |     let z = call_it_once(square, 22);\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `for<'r> unsafe fn(&'r isize) -> isize {square}`\n+   = note: unsafe functions must be wrapped in closures: `|| unsafe { /* code */ }`\n note: required by a bound in `call_it_once`\n   --> $DIR/unboxed-closures-unsafe-extern-fn.rs:15:20\n    |"}, {"sha": "576806e3956b0824ffdde0c8e1fa56e99e627786", "filename": "src/test/ui/unboxed-closures/unboxed-closures-wrong-arg-type-extern-fn.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bec8dbdb602688d6da4f49b7fdd74226f0f9f04c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bec8dbdb602688d6da4f49b7fdd74226f0f9f04c/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-wrong-arg-type-extern-fn.stderr?ref=bec8dbdb602688d6da4f49b7fdd74226f0f9f04c", "patch": "@@ -7,6 +7,7 @@ LL |     let x = call_it(&square, 22);\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> Fn<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = note: unsafe functions must be wrapped in closures: `|| unsafe { /* code */ }`\n note: required by a bound in `call_it`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:10:15\n    |\n@@ -22,6 +23,7 @@ LL |     let y = call_it_mut(&mut square, 22);\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnMut<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = note: unsafe functions must be wrapped in closures: `|| unsafe { /* code */ }`\n note: required by a bound in `call_it_mut`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:13:19\n    |\n@@ -37,6 +39,7 @@ LL |     let z = call_it_once(square, 22);\n    |             required by a bound introduced by this call\n    |\n    = help: the trait `for<'r> FnOnce<(&'r isize,)>` is not implemented for `unsafe fn(isize) -> isize {square}`\n+   = note: unsafe functions must be wrapped in closures: `|| unsafe { /* code */ }`\n note: required by a bound in `call_it_once`\n   --> $DIR/unboxed-closures-wrong-arg-type-extern-fn.rs:16:20\n    |"}]}