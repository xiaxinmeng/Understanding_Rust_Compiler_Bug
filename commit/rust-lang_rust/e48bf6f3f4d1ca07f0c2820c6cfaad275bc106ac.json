{"sha": "e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0OGJmNmYzZjRkMWNhMDdmMGMyODIwYzZjZmFhZDI3NWJjMTA2YWM=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-27T17:58:52Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-27T17:58:52Z"}, "message": "Make occurs check in ty::fixup_vars more reliable\n\nIt wouldn't detect cycles that went through several type vars before.\n\nCloses #1464", "tree": {"sha": "7a2026c20a220710ad111dddae3e14ca6448c853", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a2026c20a220710ad111dddae3e14ca6448c853"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac", "html_url": "https://github.com/rust-lang/rust/commit/e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "362625008ab9e3479f7e34212e1887a3ad6d93b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/362625008ab9e3479f7e34212e1887a3ad6d93b8", "html_url": "https://github.com/rust-lang/rust/commit/362625008ab9e3479f7e34212e1887a3ad6d93b8"}], "stats": {"total": 34, "additions": 21, "deletions": 13}, "files": [{"sha": "502510063dfd130286377ccd0729cf8a059ae378", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac", "patch": "@@ -2421,7 +2421,8 @@ mod unify {\n     fn fixup_vars(tcx: ty_ctxt, sp: option::t<span>, vb: @var_bindings,\n                   typ: t) -> fixup_result {\n         fn subst_vars(tcx: ty_ctxt, sp: option::t<span>, vb: @var_bindings,\n-                      unresolved: @mutable option::t<int>, vid: int) -> t {\n+                      unresolved: @mutable option::t<int>,\n+                      vars_seen: std::list::list<int>, vid: int) -> t {\n             // Should really return a fixup_result instead of a t, but fold_ty\n             // doesn't allow returning anything but a t.\n             if vid as uint >= ufind::set_count(vb.sets) {\n@@ -2432,21 +2433,28 @@ mod unify {\n             alt smallintmap::find::<t>(vb.types, root_id) {\n               none { *unresolved = some(vid); ret ty::mk_var(tcx, vid); }\n               some(rt) {\n-                if occurs_check_fails(tcx, sp, vid, rt) {\n-                    // Return the type unchanged, so we can error out\n-                    // downstream\n-                    ret rt;\n+                let give_up = false;\n+                std::list::iter(vars_seen) {|v|\n+                    if v == vid {\n+                        give_up = true;\n+                        option::may(sp) {|sp|\n+                            tcx.sess.span_fatal(\n+                                sp, \"can not instantiate infinite type\");\n+                        }\n+                    }\n                 }\n-                ret fold_ty(tcx,\n-                            fm_var(bind subst_vars(tcx, sp, vb, unresolved,\n-                                                   _)), rt);\n+                // Return the type unchanged, so we can error out\n+                // downstream\n+                if give_up { ret rt; }\n+                ret fold_ty(tcx, fm_var(bind subst_vars(\n+                    tcx, sp, vb, unresolved, std::list::cons(vid, @vars_seen),\n+                    _)), rt);\n               }\n             }\n         }\n         let unresolved = @mutable none::<int>;\n-        let rty =\n-            fold_ty(tcx, fm_var(bind subst_vars(tcx, sp, vb, unresolved, _)),\n-                    typ);\n+        let rty = fold_ty(tcx, fm_var(bind subst_vars(\n+            tcx, sp, vb, unresolved, std::list::nil, _)), typ);\n         let ur = *unresolved;\n         alt ur {\n           none { ret fix_ok(rty); }"}, {"sha": "e393b42b9f25c02335939c7ec625b7aee597e293", "filename": "src/libstd/list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac/src%2Flibstd%2Flist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac/src%2Flibstd%2Flist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flist.rs?ref=e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac", "patch": "@@ -128,7 +128,7 @@ Function: tail\n \n Returns all but the first element of a list\n */\n-pure fn tail<T: copy>(ls: list<T>) : is_not_empty(ls) -> list<T> {\n+pure fn tail<T: copy>(ls: list<T>) -> list<T> {\n     alt ls {\n         cons(_, tl) { ret *tl; }\n         nil { fail \"list empty\" }"}, {"sha": "069bd0a5bbd72510e0a12df911d8696af5663801", "filename": "src/test/compile-fail/occurs-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs?ref=e48bf6f3f4d1ca07f0c2820c6cfaad275bc106ac", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern: Type inference failed because I could not find\n+// error-pattern: can not instantiate infinite type\n fn main() { let f; f = @f; }"}]}