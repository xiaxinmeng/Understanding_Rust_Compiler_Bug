{"sha": "0673cde5a36db203f18941c125a1665184e056ed", "node_id": "C_kwDOAAsO6NoAKDA2NzNjZGU1YTM2ZGIyMDNmMTg5NDFjMTI1YTE2NjUxODRlMDU2ZWQ", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-26T13:55:18Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-26T19:35:32Z"}, "message": "Use LLVM for getting symbols from COFF bigobj files", "tree": {"sha": "5cf3b1c28273fcdbafd37e4620bfc5d7a1754207", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cf3b1c28273fcdbafd37e4620bfc5d7a1754207"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0673cde5a36db203f18941c125a1665184e056ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0673cde5a36db203f18941c125a1665184e056ed", "html_url": "https://github.com/rust-lang/rust/commit/0673cde5a36db203f18941c125a1665184e056ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0673cde5a36db203f18941c125a1665184e056ed/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be6708428fdf6693188e2c2f10f05d1b1aaa5750", "url": "https://api.github.com/repos/rust-lang/rust/commits/be6708428fdf6693188e2c2f10f05d1b1aaa5750", "html_url": "https://github.com/rust-lang/rust/commit/be6708428fdf6693188e2c2f10f05d1b1aaa5750"}], "stats": {"total": 44, "additions": 33, "deletions": 11}, "files": [{"sha": "0aee1a1439b9bcd2867bb2da9681092891c257d5", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0673cde5a36db203f18941c125a1665184e056ed/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0673cde5a36db203f18941c125a1665184e056ed/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=0673cde5a36db203f18941c125a1665184e056ed", "patch": "@@ -261,12 +261,20 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n     }\n }\n \n+// The object crate doesn't know how to get symbols for LLVM bitcode and COFF bigobj files.\n+// As such we need to use LLVM for them.\n #[deny(unsafe_op_in_unsafe_fn)]\n fn get_llvm_object_symbols(\n     buf: &[u8],\n     f: &mut dyn FnMut(&[u8]) -> io::Result<()>,\n ) -> io::Result<bool> {\n-    if unsafe { llvm::LLVMRustIsBitcode(buf.as_ptr(), buf.len()) } {\n+    let is_bitcode = unsafe { llvm::LLVMRustIsBitcode(buf.as_ptr(), buf.len()) };\n+\n+    // COFF bigobj file, msvc LTO file or import library. See\n+    // https://github.com/llvm/llvm-project/blob/453f27bc9/llvm/lib/BinaryFormat/Magic.cpp#L38-L51\n+    let is_unsupported_windows_obj_file = buf.get(0..4) == Some(b\"\\0\\0\\xFF\\xFF\");\n+\n+    if is_bitcode || is_unsupported_windows_obj_file {\n         let mut state = Box::new(f);\n \n         let err = unsafe {"}, {"sha": "974207e918cd6f9138190aaf13bc0d23c8fb3bf3", "filename": "compiler/rustc_llvm/llvm-wrapper/SymbolWrapper.cpp", "status": "modified", "additions": 24, "deletions": 10, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0673cde5a36db203f18941c125a1665184e056ed/compiler%2Frustc_llvm%2Fllvm-wrapper%2FSymbolWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0673cde5a36db203f18941c125a1665184e056ed/compiler%2Frustc_llvm%2Fllvm-wrapper%2FSymbolWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FSymbolWrapper.cpp?ref=0673cde5a36db203f18941c125a1665184e056ed", "patch": "@@ -49,19 +49,33 @@ extern \"C\" void *LLVMRustGetSymbols(\n   std::unique_ptr<object::SymbolicFile> Obj;\n \n   const file_magic Type = identify_magic(Buf->getBuffer());\n-  if (Type != file_magic::bitcode) {\n-    return ErrorCallback(\"not bitcode\");\n+  if (!object::SymbolicFile::isSymbolicFile(Type, &Context)) {\n+    return 0;\n   }\n-  auto ObjOrErr = object::SymbolicFile::createSymbolicFile(\n+\n+  if (Type == file_magic::bitcode) {\n+    auto ObjOrErr = object::SymbolicFile::createSymbolicFile(\n       Buf->getMemBufferRef(), file_magic::bitcode, &Context);\n-  if (!ObjOrErr) {\n-    Error E = ObjOrErr.takeError();\n-    SmallString<0> ErrorBuf;\n-    raw_svector_ostream Error(ErrorBuf);\n-    Error << E << '\\0';\n-    return ErrorCallback(Error.str().data());\n+    if (!ObjOrErr) {\n+      Error E = ObjOrErr.takeError();\n+      SmallString<0> ErrorBuf;\n+      raw_svector_ostream Error(ErrorBuf);\n+      Error << E << '\\0';\n+      return ErrorCallback(Error.str().data());\n+    }\n+    Obj = std::move(*ObjOrErr);\n+  } else {\n+    auto ObjOrErr = object::SymbolicFile::createSymbolicFile(Buf->getMemBufferRef());\n+    if (!ObjOrErr) {\n+      Error E = ObjOrErr.takeError();\n+      SmallString<0> ErrorBuf;\n+      raw_svector_ostream Error(ErrorBuf);\n+      Error << E << '\\0';\n+      return ErrorCallback(Error.str().data());\n+    }\n+    Obj = std::move(*ObjOrErr);\n   }\n-  Obj = std::move(*ObjOrErr);\n+\n \n   for (const object::BasicSymbolRef &S : Obj->symbols()) {\n     if (!isArchiveSymbol(S))"}]}