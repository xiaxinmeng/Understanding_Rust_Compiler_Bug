{"sha": "a154c5b656ea215f136a6f4c3120b315686f4bc5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExNTRjNWI2NTZlYTIxNWYxMzZhNmY0YzMxMjBiMzE1Njg2ZjRiYzU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-30T21:10:06Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-03-30T21:10:06Z"}, "message": "Um, that'd be, align the word *before* retpc. Addresses point to the low part of a word. Un-XFAIL nbody on Darwin.", "tree": {"sha": "f2887f040b335f6dcfff931d496db7661b23c2a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2887f040b335f6dcfff931d496db7661b23c2a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a154c5b656ea215f136a6f4c3120b315686f4bc5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a154c5b656ea215f136a6f4c3120b315686f4bc5", "html_url": "https://github.com/rust-lang/rust/commit/a154c5b656ea215f136a6f4c3120b315686f4bc5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a154c5b656ea215f136a6f4c3120b315686f4bc5/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e7b991d4957a13e8049c1a4d1893a685f47d9ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7b991d4957a13e8049c1a4d1893a685f47d9ae", "html_url": "https://github.com/rust-lang/rust/commit/3e7b991d4957a13e8049c1a4d1893a685f47d9ae"}], "stats": {"total": 17, "additions": 7, "deletions": 10}, "files": [{"sha": "97c70c699d20abe58f615ad7548e015da72d6145", "filename": "Makefile.in", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a154c5b656ea215f136a6f4c3120b315686f4bc5/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/a154c5b656ea215f136a6f4c3120b315686f4bc5/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=a154c5b656ea215f136a6f4c3120b315686f4bc5", "patch": "@@ -587,9 +587,6 @@ ifdef CFG_WINDOWSY\n TEST_XFAILS_BOOT += $(S)src/test/run-pass/native-mod.rc\n TEST_XFAILS_STAGE0 += $(S)src/test/run-pass/native-mod.rc\n endif\n-ifeq ($(CFG_OSTYPE), Darwin)\n-TEST_XFAILS_STAGE0 += $(S)src/test/bench/shootout/nbody.rs\n-endif\n \n BENCH_RS = $(wildcard $(S)src/test/bench/shootout/*.rs) \\\n             $(wildcard $(S)src/test/bench/99-bottles/*.rs)"}, {"sha": "df7dd2a35311d75580e848ba8e435a08bd9f9dcb", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a154c5b656ea215f136a6f4c3120b315686f4bc5/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/a154c5b656ea215f136a6f4c3120b315686f4bc5/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=a154c5b656ea215f136a6f4c3120b315686f4bc5", "patch": "@@ -150,8 +150,8 @@ rust_task::start(uintptr_t exit_task_glue,\n     rust_sp -= sizeof(uintptr_t);\n \n     // NB: Darwin needs \"16-byte aligned\" stacks *at the point of the call\n-    // instruction in the caller*. This means that the address at which a\n-    // retpc is pushed must always be 16-byte aligned.\n+    // instruction in the caller*. This means that the address at which the\n+    // word before retpc is pushed must always be 16-byte aligned.\n     //\n     // see: \"Mac OS X ABI Function Call Guide\"\n \n@@ -168,11 +168,11 @@ rust_task::start(uintptr_t exit_task_glue,\n \n \n     // The exit_task_glue frame we synthesize above the frame we activate:\n-    make_aligned_room_for_bytes(spp, 3 * sizeof(uintptr_t));\n+    make_aligned_room_for_bytes(spp, 2 * sizeof(uintptr_t));\n     *spp-- = (uintptr_t) 0;          // closure-or-obj\n     *spp-- = (uintptr_t) this;       // task\n-    *spp-- = (uintptr_t) 0x0;        // output\n     I(dom, spp == align_down(spp));\n+    *spp-- = (uintptr_t) 0x0;        // output\n     *spp-- = (uintptr_t) 0x0;        // retpc\n \n     uintptr_t exit_task_frame_base;\n@@ -198,9 +198,9 @@ rust_task::start(uintptr_t exit_task_glue,\n \n     I(dom, args);\n     if (spawnee_abi == ABI_X86_RUSTBOOT_CDECL)\n-        make_aligned_room_for_bytes(spp, callsz);\n+        make_aligned_room_for_bytes(spp, callsz - sizeof(uintptr_t));\n     else\n-        make_aligned_room_for_bytes(spp, callsz - 2 * sizeof(uintptr_t));\n+        make_aligned_room_for_bytes(spp, callsz - 3 * sizeof(uintptr_t));\n \n     // Copy args from spawner to spawnee.\n     uintptr_t *src = (uintptr_t *)args;\n@@ -233,7 +233,7 @@ rust_task::start(uintptr_t exit_task_glue,\n         I(dom, spawnee_abi == ABI_X86_RUSTC_FASTCALL);\n     }\n \n-    I(dom, spp == align_down(spp));\n+    I(dom, spp+1 == align_down(spp+1));\n     *spp-- = (uintptr_t) exit_task_glue;  // retpc\n \n     // The context the activate_glue needs to switch stack."}]}