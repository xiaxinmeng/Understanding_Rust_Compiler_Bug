{"sha": "4b3a017b352df52da17300be7c7ac16cc472fcf5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiM2EwMTdiMzUyZGY1MmRhMTczMDBiZTdjN2FjMTZjYzQ3MmZjZjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-28T09:11:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-28T09:11:14Z"}, "message": "Rollup merge of #63061 - Centril:constantly-improving, r=scottmcm\n\nIn which we constantly improve the Vec(Deque) array PartialEq impls\n\nUse the same approach as in https://github.com/rust-lang/rust/pull/62435 as sanctioned by https://github.com/rust-lang/rust/issues/61415#issuecomment-504155110.\n\nr? @scottmcm", "tree": {"sha": "3d9b4bcfc56e7d3342d69df5a23e8c3d348ee505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d9b4bcfc56e7d3342d69df5a23e8c3d348ee505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b3a017b352df52da17300be7c7ac16cc472fcf5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdPWayCRBK7hj4Ov3rIwAAdHIIACZQIbGFbSaK7Sta8T7VAag6\nOhHoBhTsCOLUNh9LE91tZ/KA+zqyBRlOt2u0PswyMoqv4eVXFi5w5gl0CtBERqXP\nhtHsejdnk76yAytqaeviE9z1sCgZNl9TzPN8XIXw3PKWazUYFk2Fyls7At1F2E/s\ntJoaGDlX8fD07Qe+xx4872DlMl2nC56h34OPwjSKDx/Q1/csJugzKIGHlDI3/7/K\nESqSeH2ZUXa36FqPRv1h1C9iSQlhXMij+bh1CWq7F+mdfbHP53PDdCXG1X0mKNTa\nTRNKqL72mcTfoHKpU4T9pT+F2KLsxRHxHLsP+L9eWRdvYulPcfyDKML7+IR6+m8=\n=zYvs\n-----END PGP SIGNATURE-----\n", "payload": "tree 3d9b4bcfc56e7d3342d69df5a23e8c3d348ee505\nparent a558668cf2bd01cf47613694b786c08b6a91a607\nparent bfdfa85e73186ef96f082980113f7ace8561efd2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1564305074 +0200\ncommitter GitHub <noreply@github.com> 1564305074 +0200\n\nRollup merge of #63061 - Centril:constantly-improving, r=scottmcm\n\nIn which we constantly improve the Vec(Deque) array PartialEq impls\n\nUse the same approach as in https://github.com/rust-lang/rust/pull/62435 as sanctioned by https://github.com/rust-lang/rust/issues/61415#issuecomment-504155110.\n\nr? @scottmcm\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b3a017b352df52da17300be7c7ac16cc472fcf5", "html_url": "https://github.com/rust-lang/rust/commit/4b3a017b352df52da17300be7c7ac16cc472fcf5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b3a017b352df52da17300be7c7ac16cc472fcf5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a558668cf2bd01cf47613694b786c08b6a91a607", "url": "https://api.github.com/repos/rust-lang/rust/commits/a558668cf2bd01cf47613694b786c08b6a91a607", "html_url": "https://github.com/rust-lang/rust/commit/a558668cf2bd01cf47613694b786c08b6a91a607"}, {"sha": "bfdfa85e73186ef96f082980113f7ace8561efd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bfdfa85e73186ef96f082980113f7ace8561efd2", "html_url": "https://github.com/rust-lang/rust/commit/bfdfa85e73186ef96f082980113f7ace8561efd2"}], "stats": {"total": 229, "additions": 170, "deletions": 59}, "files": [{"sha": "495165f7786e0bb21c7b0ce798abc7aea1a69a02", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 14, "deletions": 26, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4b3a017b352df52da17300be7c7ac16cc472fcf5/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b3a017b352df52da17300be7c7ac16cc472fcf5/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=4b3a017b352df52da17300be7c7ac16cc472fcf5", "patch": "@@ -9,6 +9,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use core::array::LengthAtMost32;\n use core::cmp::{self, Ordering};\n use core::fmt;\n use core::iter::{repeat_with, FromIterator, FusedIterator};\n@@ -2571,13 +2572,14 @@ impl<A: PartialEq> PartialEq for VecDeque<A> {\n impl<A: Eq> Eq for VecDeque<A> {}\n \n macro_rules! __impl_slice_eq1 {\n-    ($Lhs: ty, $Rhs: ty) => {\n-        __impl_slice_eq1! { $Lhs, $Rhs, Sized }\n-    };\n-    ($Lhs: ty, $Rhs: ty, $Bound: ident) => {\n+    ([$($vars:tt)*] $lhs:ty, $rhs:ty, $($constraints:tt)*) => {\n         #[stable(feature = \"vec_deque_partial_eq_slice\", since = \"1.17.0\")]\n-        impl<A: $Bound, B> PartialEq<$Rhs> for $Lhs where A: PartialEq<B> {\n-            fn eq(&self, other: &$Rhs) -> bool {\n+        impl<A, B, $($vars)*> PartialEq<$rhs> for $lhs\n+        where\n+            A: PartialEq<B>,\n+            $($constraints)*\n+        {\n+            fn eq(&self, other: &$rhs) -> bool {\n                 if self.len() != other.len() {\n                     return false;\n                 }\n@@ -2589,26 +2591,12 @@ macro_rules! __impl_slice_eq1 {\n     }\n }\n \n-__impl_slice_eq1! { VecDeque<A>, Vec<B> }\n-__impl_slice_eq1! { VecDeque<A>, &[B] }\n-__impl_slice_eq1! { VecDeque<A>, &mut [B] }\n-\n-macro_rules! array_impls {\n-    ($($N: expr)+) => {\n-        $(\n-            __impl_slice_eq1! { VecDeque<A>, [B; $N] }\n-            __impl_slice_eq1! { VecDeque<A>, &[B; $N] }\n-            __impl_slice_eq1! { VecDeque<A>, &mut [B; $N] }\n-        )+\n-    }\n-}\n-\n-array_impls! {\n-     0  1  2  3  4  5  6  7  8  9\n-    10 11 12 13 14 15 16 17 18 19\n-    20 21 22 23 24 25 26 27 28 29\n-    30 31 32\n-}\n+__impl_slice_eq1! { [] VecDeque<A>, Vec<B>, }\n+__impl_slice_eq1! { [] VecDeque<A>, &[B], }\n+__impl_slice_eq1! { [] VecDeque<A>, &mut [B], }\n+__impl_slice_eq1! { [const N: usize] VecDeque<A>, [B; N], [B; N]: LengthAtMost32 }\n+__impl_slice_eq1! { [const N: usize] VecDeque<A>, &[B; N], [B; N]: LengthAtMost32 }\n+__impl_slice_eq1! { [const N: usize] VecDeque<A>, &mut [B; N], [B; N]: LengthAtMost32 }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: PartialOrd> PartialOrd for VecDeque<A> {"}, {"sha": "e42d64347254641aaab6fbb163fb21f92d049f67", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b3a017b352df52da17300be7c7ac16cc472fcf5/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b3a017b352df52da17300be7c7ac16cc472fcf5/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=4b3a017b352df52da17300be7c7ac16cc472fcf5", "patch": "@@ -78,6 +78,8 @@\n #![feature(cfg_target_has_atomic)]\n #![feature(coerce_unsized)]\n #![cfg_attr(not(bootstrap), feature(const_in_array_repeat_expressions))]\n+#![feature(const_generic_impls_guard)]\n+#![feature(const_generics)]\n #![feature(dispatch_from_dyn)]\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]"}, {"sha": "dac04e4e624032be1d6222e1bcc019d6400e6939", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 23, "deletions": 33, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/4b3a017b352df52da17300be7c7ac16cc472fcf5/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b3a017b352df52da17300be7c7ac16cc472fcf5/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=4b3a017b352df52da17300be7c7ac16cc472fcf5", "patch": "@@ -56,6 +56,7 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n+use core::array::LengthAtMost32;\n use core::cmp::{self, Ordering};\n use core::fmt;\n use core::hash::{self, Hash};\n@@ -2171,47 +2172,36 @@ impl<'a, T: 'a + Copy> Extend<&'a T> for Vec<T> {\n }\n \n macro_rules! __impl_slice_eq1 {\n-    ($Lhs: ty, $Rhs: ty) => {\n-        __impl_slice_eq1! { $Lhs, $Rhs, Sized }\n-    };\n-    ($Lhs: ty, $Rhs: ty, $Bound: ident) => {\n+    ([$($vars:tt)*] $lhs:ty, $rhs:ty, $($constraints:tt)*) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<'a, 'b, A: $Bound, B> PartialEq<$Rhs> for $Lhs where A: PartialEq<B> {\n+        impl<A, B, $($vars)*> PartialEq<$rhs> for $lhs\n+        where\n+            A: PartialEq<B>,\n+            $($constraints)*\n+        {\n             #[inline]\n-            fn eq(&self, other: &$Rhs) -> bool { self[..] == other[..] }\n+            fn eq(&self, other: &$rhs) -> bool { self[..] == other[..] }\n             #[inline]\n-            fn ne(&self, other: &$Rhs) -> bool { self[..] != other[..] }\n+            fn ne(&self, other: &$rhs) -> bool { self[..] != other[..] }\n         }\n     }\n }\n \n-__impl_slice_eq1! { Vec<A>, Vec<B> }\n-__impl_slice_eq1! { Vec<A>, &'b [B] }\n-__impl_slice_eq1! { Vec<A>, &'b mut [B] }\n-__impl_slice_eq1! { Cow<'a, [A]>, &'b [B], Clone }\n-__impl_slice_eq1! { Cow<'a, [A]>, &'b mut [B], Clone }\n-__impl_slice_eq1! { Cow<'a, [A]>, Vec<B>, Clone }\n+__impl_slice_eq1! { [] Vec<A>, Vec<B>, }\n+__impl_slice_eq1! { [] Vec<A>, &[B], }\n+__impl_slice_eq1! { [] Vec<A>, &mut [B], }\n+__impl_slice_eq1! { [] Cow<'_, [A]>, &[B], A: Clone }\n+__impl_slice_eq1! { [] Cow<'_, [A]>, &mut [B], A: Clone }\n+__impl_slice_eq1! { [] Cow<'_, [A]>, Vec<B>, A: Clone }\n+__impl_slice_eq1! { [const N: usize] Vec<A>, [B; N], [B; N]: LengthAtMost32 }\n+__impl_slice_eq1! { [const N: usize] Vec<A>, &[B; N], [B; N]: LengthAtMost32 }\n \n-macro_rules! array_impls {\n-    ($($N: expr)+) => {\n-        $(\n-            // NOTE: some less important impls are omitted to reduce code bloat\n-            __impl_slice_eq1! { Vec<A>, [B; $N] }\n-            __impl_slice_eq1! { Vec<A>, &'b [B; $N] }\n-            // __impl_slice_eq1! { Vec<A>, &'b mut [B; $N] }\n-            // __impl_slice_eq1! { Cow<'a, [A]>, [B; $N], Clone }\n-            // __impl_slice_eq1! { Cow<'a, [A]>, &'b [B; $N], Clone }\n-            // __impl_slice_eq1! { Cow<'a, [A]>, &'b mut [B; $N], Clone }\n-        )+\n-    }\n-}\n-\n-array_impls! {\n-     0  1  2  3  4  5  6  7  8  9\n-    10 11 12 13 14 15 16 17 18 19\n-    20 21 22 23 24 25 26 27 28 29\n-    30 31 32\n-}\n+// NOTE: some less important impls are omitted to reduce code bloat\n+// FIXME(Centril): Reconsider this?\n+//__impl_slice_eq1! { [const N: usize] Vec<A>, &mut [B; N], [B; N]: LengthAtMost32 }\n+//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, [B; N], [B; N]: LengthAtMost32 }\n+//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &[B; N], [B; N]: LengthAtMost32 }\n+//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &mut [B; N], [B; N]: LengthAtMost32 }\n \n /// Implements comparison of vectors, lexicographically.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "db941a440e104c7e940f7cccbc5ea6edbf4d5dec", "filename": "src/test/ui/const-generics/array-impls/alloc-traits-impls-length-32.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4b3a017b352df52da17300be7c7ac16cc472fcf5/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-impls-length-32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b3a017b352df52da17300be7c7ac16cc472fcf5/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-impls-length-32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-impls-length-32.rs?ref=4b3a017b352df52da17300be7c7ac16cc472fcf5", "patch": "@@ -0,0 +1,40 @@\n+// check-pass\n+\n+pub fn yes_vec_partial_eq_array<A, B>() -> impl PartialEq<[B; 32]>\n+where\n+    A: PartialEq<B>,\n+{\n+    Vec::<A>::new()\n+}\n+\n+pub fn yes_vec_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 32]>\n+where\n+    A: PartialEq<B>,\n+{\n+    Vec::<A>::new()\n+}\n+\n+use std::collections::VecDeque;\n+\n+pub fn yes_vecdeque_partial_eq_array<A, B>() -> impl PartialEq<[B; 32]>\n+where\n+    A: PartialEq<B>,\n+{\n+    VecDeque::<A>::new()\n+}\n+\n+pub fn yes_vecdeque_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 32]>\n+where\n+    A: PartialEq<B>,\n+{\n+    VecDeque::<A>::new()\n+}\n+\n+pub fn yes_vecdeque_partial_eq_ref_mut_array<'a, A, B>() -> impl PartialEq<&'a mut [B; 32]>\n+where\n+    A: PartialEq<B>,\n+{\n+    VecDeque::<A>::new()\n+}\n+\n+fn main() {}"}, {"sha": "19107e6bf16d5be779e9832384deb4ae2b643f8c", "filename": "src/test/ui/const-generics/array-impls/alloc-traits-no-impls-length-33.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4b3a017b352df52da17300be7c7ac16cc472fcf5/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-no-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b3a017b352df52da17300be7c7ac16cc472fcf5/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-no-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-no-impls-length-33.rs?ref=4b3a017b352df52da17300be7c7ac16cc472fcf5", "patch": "@@ -0,0 +1,43 @@\n+pub fn no_vec_partial_eq_array<A, B>() -> impl PartialEq<[B; 33]>\n+//~^ ERROR arrays only have std trait implementations for lengths 0..=32\n+where\n+    A: PartialEq<B>,\n+{\n+    Vec::<A>::new()\n+}\n+\n+pub fn no_vec_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 33]>\n+//~^ ERROR arrays only have std trait implementations for lengths 0..=32\n+where\n+    A: PartialEq<B>,\n+{\n+    Vec::<A>::new()\n+}\n+\n+use std::collections::VecDeque;\n+\n+pub fn no_vecdeque_partial_eq_array<A, B>() -> impl PartialEq<[B; 33]>\n+//~^ ERROR arrays only have std trait implementations for lengths 0..=32\n+where\n+    A: PartialEq<B>,\n+{\n+    VecDeque::<A>::new()\n+}\n+\n+pub fn no_vecdeque_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 33]>\n+//~^ ERROR arrays only have std trait implementations for lengths 0..=32\n+where\n+    A: PartialEq<B>,\n+{\n+    VecDeque::<A>::new()\n+}\n+\n+pub fn no_vecdeque_partial_eq_ref_mut_array<'a, A, B>() -> impl PartialEq<&'a mut [B; 33]>\n+//~^ ERROR arrays only have std trait implementations for lengths 0..=32\n+where\n+    A: PartialEq<B>,\n+{\n+    VecDeque::<A>::new()\n+}\n+\n+fn main() {}"}, {"sha": "5c37468130c64bca9af6ef06f4b46cf05021f302", "filename": "src/test/ui/const-generics/array-impls/alloc-traits-no-impls-length-33.stderr", "status": "added", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4b3a017b352df52da17300be7c7ac16cc472fcf5/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b3a017b352df52da17300be7c7ac16cc472fcf5/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-no-impls-length-33.stderr?ref=4b3a017b352df52da17300be7c7ac16cc472fcf5", "patch": "@@ -0,0 +1,48 @@\n+error[E0277]: arrays only have std trait implementations for lengths 0..=32\n+  --> $DIR/alloc-traits-no-impls-length-33.rs:1:43\n+   |\n+LL | pub fn no_vec_partial_eq_array<A, B>() -> impl PartialEq<[B; 33]>\n+   |                                           ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[B; 33]`\n+   |\n+   = note: required because of the requirements on the impl of `std::cmp::PartialEq<[B; 33]>` for `std::vec::Vec<A>`\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0277]: arrays only have std trait implementations for lengths 0..=32\n+  --> $DIR/alloc-traits-no-impls-length-33.rs:9:51\n+   |\n+LL | pub fn no_vec_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 33]>\n+   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[B; 33]`\n+   |\n+   = note: required because of the requirements on the impl of `std::cmp::PartialEq<&'a [B; 33]>` for `std::vec::Vec<A>`\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0277]: arrays only have std trait implementations for lengths 0..=32\n+  --> $DIR/alloc-traits-no-impls-length-33.rs:19:48\n+   |\n+LL | pub fn no_vecdeque_partial_eq_array<A, B>() -> impl PartialEq<[B; 33]>\n+   |                                                ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[B; 33]`\n+   |\n+   = note: required because of the requirements on the impl of `std::cmp::PartialEq<[B; 33]>` for `std::collections::VecDeque<A>`\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0277]: arrays only have std trait implementations for lengths 0..=32\n+  --> $DIR/alloc-traits-no-impls-length-33.rs:27:56\n+   |\n+LL | pub fn no_vecdeque_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 33]>\n+   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[B; 33]`\n+   |\n+   = note: required because of the requirements on the impl of `std::cmp::PartialEq<&'a [B; 33]>` for `std::collections::VecDeque<A>`\n+   = note: the return type of a function must have a statically known size\n+\n+error[E0277]: arrays only have std trait implementations for lengths 0..=32\n+  --> $DIR/alloc-traits-no-impls-length-33.rs:35:60\n+   |\n+LL | pub fn no_vecdeque_partial_eq_ref_mut_array<'a, A, B>() -> impl PartialEq<&'a mut [B; 33]>\n+   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[B; 33]`\n+   |\n+   = note: required because of the requirements on the impl of `std::cmp::PartialEq<&'a mut [B; 33]>` for `std::collections::VecDeque<A>`\n+   = note: the return type of a function must have a statically known size\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}