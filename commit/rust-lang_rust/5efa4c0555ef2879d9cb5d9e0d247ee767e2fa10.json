{"sha": "5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZmE0YzA1NTVlZjI4NzlkOWNiNWQ5ZTBkMjQ3ZWU3NjdlMmZhMTA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-04T22:23:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-07-04T22:23:06Z"}, "message": "Auto merge of #86875 - JohnTitor:rollup-fuefamw, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #86477 (E0716: clarify that equivalent code example is erroneous)\n - #86623 (Add check to ensure error code explanations are not removed anymore even if not emitted)\n - #86856 (Make x.py less verbose on failures)\n - #86858 (Stabilize `string_drain_as_str`)\n - #86859 (Add a regression test for issue-69323)\n - #86862 (re-export SwitchIntEdgeEffects)\n - #86864 (Add missing code example for Write::write_vectored)\n - #86874 (Bump deps)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "fd0d93be775ecb7abc0dcd9ddfa9bb08d39d48a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd0d93be775ecb7abc0dcd9ddfa9bb08d39d48a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "html_url": "https://github.com/rust-lang/rust/commit/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3d11f95cc5dd687fdd185ce91e02ebe40e6f46b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3d11f95cc5dd687fdd185ce91e02ebe40e6f46b", "html_url": "https://github.com/rust-lang/rust/commit/b3d11f95cc5dd687fdd185ce91e02ebe40e6f46b"}, {"sha": "433287ff31ecd211b41545c0ac8f4202be34fda0", "url": "https://api.github.com/repos/rust-lang/rust/commits/433287ff31ecd211b41545c0ac8f4202be34fda0", "html_url": "https://github.com/rust-lang/rust/commit/433287ff31ecd211b41545c0ac8f4202be34fda0"}], "stats": {"total": 196, "additions": 126, "deletions": 70}, "files": [{"sha": "f8f1331579406dfb1f7651a727c3018eb78c259a", "filename": "Cargo.lock", "status": "modified", "additions": 13, "deletions": 46, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "patch": "@@ -398,7 +398,7 @@ dependencies = [\n  \"jobserver\",\n  \"libc\",\n  \"log\",\n- \"miow 0.3.6\",\n+ \"miow 0.3.7\",\n  \"same-file\",\n  \"shell-escape\",\n  \"tempfile\",\n@@ -418,17 +418,6 @@ dependencies = [\n  \"serde_json\",\n ]\n \n-[[package]]\n-name = \"cargo_metadata\"\n-version = \"0.11.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"89fec17b16f1ac67908af82e47d0a90a7afd0e1827b181cd77504323d3263d35\"\n-dependencies = [\n- \"semver 0.10.0\",\n- \"serde\",\n- \"serde_json\",\n-]\n-\n [[package]]\n name = \"cargo_metadata\"\n version = \"0.12.0\"\n@@ -675,7 +664,7 @@ dependencies = [\n  \"glob\",\n  \"lazy_static\",\n  \"libc\",\n- \"miow 0.3.6\",\n+ \"miow 0.3.7\",\n  \"regex\",\n  \"rustfix 0.6.0\",\n  \"serde\",\n@@ -699,7 +688,7 @@ dependencies = [\n  \"lazy_static\",\n  \"libc\",\n  \"log\",\n- \"miow 0.3.6\",\n+ \"miow 0.3.7\",\n  \"regex\",\n  \"rustfix 0.5.1\",\n  \"serde\",\n@@ -867,24 +856,24 @@ dependencies = [\n \n [[package]]\n name = \"curl\"\n-version = \"0.4.36\"\n+version = \"0.4.38\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d0bac9f84ca0977c4d9b8db998689de55b9e976656a6bc87fada2ca710d504c7\"\n+checksum = \"003cb79c1c6d1c93344c7e1201bb51c2148f24ec2bd9c253709d6b2efb796515\"\n dependencies = [\n  \"curl-sys\",\n  \"libc\",\n  \"openssl-probe\",\n  \"openssl-sys\",\n  \"schannel\",\n- \"socket2 0.4.0\",\n+ \"socket2\",\n  \"winapi 0.3.9\",\n ]\n \n [[package]]\n name = \"curl-sys\"\n-version = \"0.4.42+curl-7.76.0\"\n+version = \"0.4.44+curl-7.77.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4636d8d6109c842707018a104051436bffb8991ea20b2d1293db70b6e0ee4c7c\"\n+checksum = \"4b6d85e9322b193f117c966e79c2d6929ec08c02f339f950044aba12e20bbaf1\"\n dependencies = [\n  \"cc\",\n  \"libc\",\n@@ -2263,7 +2252,7 @@ checksum = \"0840c1c50fd55e521b247f949c241c9997709f23bd7f023b9762cd561e935656\"\n dependencies = [\n  \"log\",\n  \"mio\",\n- \"miow 0.3.6\",\n+ \"miow 0.3.7\",\n  \"winapi 0.3.9\",\n ]\n \n@@ -2292,11 +2281,10 @@ dependencies = [\n \n [[package]]\n name = \"miow\"\n-version = \"0.3.6\"\n+version = \"0.3.7\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5a33c1b55807fbed163481b5ba66db4b2fa6cde694a5027be10fb724206c5897\"\n+checksum = \"b9f1c5b025cda876f66ef43a113f91ebc9f4ccef34843000e0adf6ebbab84e21\"\n dependencies = [\n- \"socket2 0.3.19\",\n  \"winapi 0.3.9\",\n ]\n \n@@ -2525,7 +2513,7 @@ dependencies = [\n  \"libc\",\n  \"log\",\n  \"mio-named-pipes\",\n- \"miow 0.3.6\",\n+ \"miow 0.3.7\",\n  \"rand 0.7.3\",\n  \"tokio\",\n  \"winapi 0.3.9\",\n@@ -4681,16 +4669,6 @@ dependencies = [\n  \"serde\",\n ]\n \n-[[package]]\n-name = \"semver\"\n-version = \"0.10.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"394cec28fa623e00903caf7ba4fa6fb9a0e260280bb8cdbbba029611108a0190\"\n-dependencies = [\n- \"semver-parser 0.7.0\",\n- \"serde\",\n-]\n-\n [[package]]\n name = \"semver\"\n version = \"0.11.0\"\n@@ -4879,17 +4857,6 @@ version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"da73c8f77aebc0e40c300b93f0a5f1bece7a248a36eee287d4e095f35c7b7d6e\"\n \n-[[package]]\n-name = \"socket2\"\n-version = \"0.3.19\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"122e570113d28d773067fab24266b66753f6ea915758651696b6e35e49f88d6e\"\n-dependencies = [\n- \"cfg-if 1.0.0\",\n- \"libc\",\n- \"winapi 0.3.9\",\n-]\n-\n [[package]]\n name = \"socket2\"\n version = \"0.4.0\"\n@@ -5230,7 +5197,7 @@ dependencies = [\n name = \"tidy\"\n version = \"0.1.0\"\n dependencies = [\n- \"cargo_metadata 0.11.1\",\n+ \"cargo_metadata 0.12.0\",\n  \"crossbeam-utils 0.8.3\",\n  \"lazy_static\",\n  \"regex\","}, {"sha": "c3546cd744f7b6be9527aa18cfc3eb1d0805aa74", "filename": "compiler/rustc_error_codes/src/error_codes/E0716.md", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0716.md", "raw_url": "https://github.com/rust-lang/rust/raw/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0716.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0716.md?ref=5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "patch": "@@ -14,14 +14,16 @@ Here, the expression `&foo()` is borrowing the expression `foo()`. As `foo()` is\n a call to a function, and not the name of a variable, this creates a\n **temporary** -- that temporary stores the return value from `foo()` so that it\n can be borrowed. You could imagine that `let p = bar(&foo());` is equivalent to\n-this:\n+the following, which uses an explicit temporary variable.\n+\n+Erroneous code example:\n \n ```compile_fail,E0597\n # fn foo() -> i32 { 22 }\n # fn bar(x: &i32) -> &i32 { x }\n let p = {\n   let tmp = foo(); // the temporary\n-  bar(&tmp)\n+  bar(&tmp) // error: `tmp` does not live long enough\n }; // <-- tmp is freed as we exit this block\n let q = p;\n ```"}, {"sha": "03531a6b0049cab5a5fd456d9ed21cf577d48d0c", "filename": "compiler/rustc_mir/src/dataflow/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fdataflow%2Fmod.rs?ref=5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "patch": "@@ -7,7 +7,7 @@ pub(crate) use self::drop_flag_effects::*;\n pub use self::framework::{\n     fmt, lattice, visit_results, Analysis, AnalysisDomain, Backward, BorrowckFlowState,\n     BorrowckResults, Engine, Forward, GenKill, GenKillAnalysis, JoinSemiLattice, Results,\n-    ResultsCursor, ResultsRefCursor, ResultsVisitor,\n+    ResultsCursor, ResultsRefCursor, ResultsVisitor, SwitchIntEdgeEffects,\n };\n \n use self::move_paths::MoveData;"}, {"sha": "d0cf6244756761821cc2ad41b5d0ee791ef7fb82", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "patch": "@@ -2769,33 +2769,31 @@ impl<'a> Drain<'a> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(string_drain_as_str)]\n     /// let mut s = String::from(\"abc\");\n     /// let mut drain = s.drain(..);\n     /// assert_eq!(drain.as_str(), \"abc\");\n     /// let _ = drain.next().unwrap();\n     /// assert_eq!(drain.as_str(), \"bc\");\n     /// ```\n-    #[unstable(feature = \"string_drain_as_str\", issue = \"76905\")] // Note: uncomment AsRef impls below when stabilizing.\n+    #[stable(feature = \"string_drain_as_str\", since = \"1.55.0\")]\n     pub fn as_str(&self) -> &str {\n         self.iter.as_str()\n     }\n }\n \n-// Uncomment when stabilizing `string_drain_as_str`.\n-// #[unstable(feature = \"string_drain_as_str\", issue = \"76905\")]\n-// impl<'a> AsRef<str> for Drain<'a> {\n-//     fn as_ref(&self) -> &str {\n-//         self.as_str()\n-//     }\n-// }\n-//\n-// #[unstable(feature = \"string_drain_as_str\", issue = \"76905\")]\n-// impl<'a> AsRef<[u8]> for Drain<'a> {\n-//     fn as_ref(&self) -> &[u8] {\n-//         self.as_str().as_bytes()\n-//     }\n-// }\n+#[stable(feature = \"string_drain_as_str\", since = \"1.55.0\")]\n+impl<'a> AsRef<str> for Drain<'a> {\n+    fn as_ref(&self) -> &str {\n+        self.as_str()\n+    }\n+}\n+\n+#[stable(feature = \"string_drain_as_str\", since = \"1.55.0\")]\n+impl<'a> AsRef<[u8]> for Drain<'a> {\n+    fn as_ref(&self) -> &[u8] {\n+        self.as_str().as_bytes()\n+    }\n+}\n \n #[stable(feature = \"drain\", since = \"1.6.0\")]\n impl Iterator for Drain<'_> {"}, {"sha": "63233613b4b2b60e833a13b69d38eab496be715c", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "patch": "@@ -1418,6 +1418,27 @@ pub trait Write {\n     /// The default implementation calls [`write`] with either the first nonempty\n     /// buffer provided, or an empty one if none exists.\n     ///\n+    /// # Examples\n+    ///\n+    /// ```no_run\n+    /// use std::io::IoSlice;\n+    /// use std::io::prelude::*;\n+    /// use std::fs::File;\n+    ///\n+    /// fn main() -> std::io::Result<()> {\n+    ///     let mut data1 = [1; 8];\n+    ///     let mut data2 = [15; 8];\n+    ///     let io_slice1 = IoSlice::new(&mut data1);\n+    ///     let io_slice2 = IoSlice::new(&mut data2);\n+    ///\n+    ///     let mut buffer = File::create(\"foo.txt\")?;\n+    ///\n+    ///     // Writes some prefix of the byte string, not necessarily all of it.\n+    ///     buffer.write_vectored(&[io_slice1, io_slice2])?;\n+    ///     Ok(())\n+    /// }\n+    /// ```\n+    ///\n     /// [`write`]: Write::write\n     #[stable(feature = \"iovec\", since = \"1.36.0\")]\n     fn write_vectored(&mut self, bufs: &[IoSlice<'_>]) -> Result<usize> {"}, {"sha": "f9904cb610d2d6e3157abee34161498afd36cabf", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "patch": "@@ -138,7 +138,7 @@ def unpack(tarball, tarball_suffix, dst, verbose=False, match=None):\n     shutil.rmtree(os.path.join(dst, fname))\n \n \n-def run(args, verbose=False, exception=False, **kwargs):\n+def run(args, verbose=False, exception=False, is_bootstrap=False, **kwargs):\n     \"\"\"Run a child program in a new process\"\"\"\n     if verbose:\n         print(\"running: \" + ' '.join(args))\n@@ -151,7 +151,14 @@ def run(args, verbose=False, exception=False, **kwargs):\n         err = \"failed to run: \" + ' '.join(args)\n         if verbose or exception:\n             raise RuntimeError(err)\n-        sys.exit(err)\n+        # For most failures, we definitely do want to print this error, or the user will have no\n+        # idea what went wrong. But when we've successfully built bootstrap and it failed, it will\n+        # have already printed an error above, so there's no need to print the exact command we're\n+        # running.\n+        if is_bootstrap:\n+            sys.exit(1)\n+        else:\n+            sys.exit(err)\n \n \n def require(cmd, exit=True):\n@@ -1170,7 +1177,7 @@ def bootstrap(help_triggered):\n         env[\"BOOTSTRAP_CONFIG\"] = toml_path\n     if build.rustc_commit is not None:\n         env[\"BOOTSTRAP_DOWNLOAD_RUSTC\"] = '1'\n-    run(args, env=env, verbose=build.verbose)\n+    run(args, env=env, verbose=build.verbose, is_bootstrap=True)\n \n \n def main():"}, {"sha": "1fae4bee732c01248a5a708e506afb37348f3a89", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "patch": "@@ -1366,7 +1366,7 @@ pub fn stream_cargo(\n \n     // Make sure Cargo actually succeeded after we read all of its stdout.\n     let status = t!(child.wait());\n-    if !status.success() {\n+    if builder.is_verbose() && !status.success() {\n         eprintln!(\n             \"command did not execute successfully: {:?}\\n\\\n                   expected success, got: {}\","}, {"sha": "8066ea3a944b39543b393ac48698178cfc75b6f8", "filename": "src/ci/docker/host-x86_64/mingw-check/Dockerfile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2FDockerfile?ref=5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "patch": "@@ -28,6 +28,7 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n COPY host-x86_64/mingw-check/validate-toolstate.sh /scripts/\n+COPY host-x86_64/mingw-check/validate-error-codes.sh /scripts/\n \n ENV RUN_CHECK_WITH_PARALLEL_QUERIES 1\n ENV SCRIPT python3 ../x.py --stage 2 test src/tools/expand-yaml-anchors && \\\n@@ -37,6 +38,7 @@ ENV SCRIPT python3 ../x.py --stage 2 test src/tools/expand-yaml-anchors && \\\n            python3 ../x.py test --stage 2 src/tools/tidy && \\\n            python3 ../x.py doc --stage 0 library/test && \\\n            /scripts/validate-toolstate.sh && \\\n+           /scripts/validate-error-codes.sh && \\\n            # Runs checks to ensure that there are no ES5 issues in our JS code.\n            es-check es5 ../src/librustdoc/html/static/*.js && \\\n            eslint ../src/librustdoc/html/static/*.js"}, {"sha": "e9aa948eb877fa67d6a512aff1c50c18ca654f8c", "filename": "src/ci/docker/host-x86_64/mingw-check/validate-error-codes.sh", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2Fvalidate-error-codes.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2Fvalidate-error-codes.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fmingw-check%2Fvalidate-error-codes.sh?ref=5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "patch": "@@ -0,0 +1,20 @@\n+#!/bin/bash\n+# Checks that no error code explanation is removed.\n+\n+set -eo pipefail\n+\n+if [[ -z \"$BASE_COMMIT\" ]]; then\n+    echo \"not checking error code explanations removal\"\n+    exit 0\n+fi\n+\n+echo \"Check if an error code explanation was removed...\"\n+\n+if (git diff \"$BASE_COMMIT\" --name-status | grep '^D' \\\n+        | grep --quiet \"compiler/rustc_error_codes/src/error_codes/\"); then\n+    echo \"Error code explanations should never be removed!\"\n+    echo \"Take a look at E0001 to see how to handle it.\"\n+    exit 1\n+fi\n+\n+echo \"No error code explanation was removed!\""}, {"sha": "489c3d76601958aa56217d232199b56085dd304f", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "patch": "@@ -219,6 +219,14 @@ else\n   command=\"/checkout/src/ci/run.sh\"\n fi\n \n+if [ \"$CI\" != \"\" ]; then\n+    # Get some needed information for $BASE_COMMIT\n+    git fetch \"https://github.com/$GITHUB_REPOSITORY\" \"$GITHUB_BASE_REF\"\n+    BASE_COMMIT=\"$(git merge-base FETCH_HEAD HEAD)\"\n+else\n+    BASE_COMMIT=\"\"\n+fi\n+\n docker \\\n   run \\\n   --workdir /checkout/obj \\\n@@ -237,6 +245,7 @@ docker \\\n   --env TOOLSTATE_PUBLISH \\\n   --env RUST_CI_OVERRIDE_RELEASE_CHANNEL \\\n   --env CI_JOB_NAME=\"${CI_JOB_NAME-$IMAGE}\" \\\n+  --env BASE_COMMIT=\"$BASE_COMMIT\" \\\n   --init \\\n   --rm \\\n   rust-ci \\"}, {"sha": "71cc6f61c37861e0e882782826ea72afa9d1e7e7", "filename": "src/test/ui/type-alias-impl-trait/issue-69323.full.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69323.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69323.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69323.full.stderr?ref=5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-69323.rs:5:27\n+   |\n+LL | #![cfg_attr(full, feature(type_alias_impl_trait))]\n+   |                           ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "824558c1b342bae2688948921e4fbb5c6c92eb08", "filename": "src/test/ui/type-alias-impl-trait/issue-69323.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69323.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69323.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-69323.rs?ref=5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+\n+// revisions: min full\n+#![feature(min_type_alias_impl_trait)]\n+#![cfg_attr(full, feature(type_alias_impl_trait))]\n+//[full]~^ WARN incomplete\n+\n+use std::iter::{once, Chain};\n+\n+fn test1<A: Iterator<Item = &'static str>>(x: A) -> Chain<A, impl Iterator<Item = &'static str>> {\n+    x.chain(once(\",\"))\n+}\n+\n+type I<A> = Chain<A, impl Iterator<Item = &'static str>>;\n+fn test2<A: Iterator<Item = &'static str>>(x: A) -> I<A> {\n+    x.chain(once(\",\"))\n+}\n+\n+fn main() {}"}, {"sha": "e44d2bb725698d343ca141cb8c3a7efe59399610", "filename": "src/tools/tidy/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/src%2Ftools%2Ftidy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10/src%2Ftools%2Ftidy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2FCargo.toml?ref=5efa4c0555ef2879d9cb5d9e0d247ee767e2fa10", "patch": "@@ -6,7 +6,7 @@ edition = \"2018\"\n autobins = false\n \n [dependencies]\n-cargo_metadata = \"0.11\"\n+cargo_metadata = \"0.12\"\n regex = \"1\"\n lazy_static = \"1\"\n walkdir = \"2\""}]}