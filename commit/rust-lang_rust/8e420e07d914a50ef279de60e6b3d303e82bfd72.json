{"sha": "8e420e07d914a50ef279de60e6b3d303e82bfd72", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNDIwZTA3ZDkxNGE1MGVmMjc5ZGU2MGU2YjNkMzAzZTgyYmZkNzI=", "commit": {"author": {"name": "Craig Hills", "email": "chills@gmail.com", "date": "2015-10-06T02:25:19Z"}, "committer": {"name": "Craig Hills", "email": "chills@gmail.com", "date": "2015-10-06T02:25:19Z"}, "message": "trpl: Clarify closure terminology\n\nThis is to address issue #28803", "tree": {"sha": "905363971ba7ca3c2e2694c2385ce10eaa6249af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/905363971ba7ca3c2e2694c2385ce10eaa6249af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e420e07d914a50ef279de60e6b3d303e82bfd72", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQEcBAABCgAGBQJWEzEuAAoJEOnXExw4UcogRFQH/irLnS3cSDv5s0Rv6d+wLidL\nW9lk+UHoYFLM6Lx+LvaUv7hxsYkXvV7rFOOjTZOl0fTDfjypYja+w5hZ90u5v0X7\n9beTsmyHkMI6t+op7k3a1Wio0J1ezBlLnrrtyri5bXVgi0TDX5HBPcj02rdkhMWJ\nWLL30E5KUeiLNwHdQgjKRpV7xTlxf11dQLQIf+8UyvEYtisFGtsO2/nzQjDIaiJb\nQ74Xd2RqfBAfjFB5HjJLSfn1K7qvDSvrozeUqADPOrlp8VLOPXbuY8Q7H3B1fd9I\nlj1nIG/D8b5fIZ7nbLRbnDuRdQyJCPxFXWghxxifIQ5j/i9GXtoBRgXuqhtmzGA=\n=d8J2\n-----END PGP SIGNATURE-----", "payload": "tree 905363971ba7ca3c2e2694c2385ce10eaa6249af\nparent 32a8567ea4ded47ac4cfd39bc808bb8d6f2e119c\nauthor Craig Hills <chills@gmail.com> 1444098319 -0400\ncommitter Craig Hills <chills@gmail.com> 1444098319 -0400\n\ntrpl: Clarify closure terminology\n\nThis is to address issue #28803\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e420e07d914a50ef279de60e6b3d303e82bfd72", "html_url": "https://github.com/rust-lang/rust/commit/8e420e07d914a50ef279de60e6b3d303e82bfd72", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e420e07d914a50ef279de60e6b3d303e82bfd72/comments", "author": {"login": "chills42", "id": 800409, "node_id": "MDQ6VXNlcjgwMDQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/800409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chills42", "html_url": "https://github.com/chills42", "followers_url": "https://api.github.com/users/chills42/followers", "following_url": "https://api.github.com/users/chills42/following{/other_user}", "gists_url": "https://api.github.com/users/chills42/gists{/gist_id}", "starred_url": "https://api.github.com/users/chills42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chills42/subscriptions", "organizations_url": "https://api.github.com/users/chills42/orgs", "repos_url": "https://api.github.com/users/chills42/repos", "events_url": "https://api.github.com/users/chills42/events{/privacy}", "received_events_url": "https://api.github.com/users/chills42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chills42", "id": 800409, "node_id": "MDQ6VXNlcjgwMDQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/800409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chills42", "html_url": "https://github.com/chills42", "followers_url": "https://api.github.com/users/chills42/followers", "following_url": "https://api.github.com/users/chills42/following{/other_user}", "gists_url": "https://api.github.com/users/chills42/gists{/gist_id}", "starred_url": "https://api.github.com/users/chills42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chills42/subscriptions", "organizations_url": "https://api.github.com/users/chills42/orgs", "repos_url": "https://api.github.com/users/chills42/repos", "events_url": "https://api.github.com/users/chills42/events{/privacy}", "received_events_url": "https://api.github.com/users/chills42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "32a8567ea4ded47ac4cfd39bc808bb8d6f2e119c", "url": "https://api.github.com/repos/rust-lang/rust/commits/32a8567ea4ded47ac4cfd39bc808bb8d6f2e119c", "html_url": "https://github.com/rust-lang/rust/commit/32a8567ea4ded47ac4cfd39bc808bb8d6f2e119c"}], "stats": {"total": 44, "additions": 23, "deletions": 21}, "files": [{"sha": "85e74b083b4179e01b743ff4c146cdc40bbe97ea", "filename": "src/doc/trpl/closures.md", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8e420e07d914a50ef279de60e6b3d303e82bfd72/src%2Fdoc%2Ftrpl%2Fclosures.md", "raw_url": "https://github.com/rust-lang/rust/raw/8e420e07d914a50ef279de60e6b3d303e82bfd72/src%2Fdoc%2Ftrpl%2Fclosures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fclosures.md?ref=8e420e07d914a50ef279de60e6b3d303e82bfd72", "patch": "@@ -1,9 +1,10 @@\n % Closures\n \n-Rust not only has named functions, but anonymous functions as well. Anonymous\n-functions that have an associated environment are called \u2018closures\u2019, because they\n-close over an environment. Rust has a really great implementation of them, as\n-we\u2019ll see.\n+Sometimes it is useful to wrap up a function and free variables for better\n+clarity and reuse. The _free variables_ that can be used come from the\n+enclosing scope and are \"closed over\" when used in the function. From this, we\n+get the name \"closures\" and Rust provides a really great implementation of\n+them, as we\u2019ll see.\n \n # Syntax\n \n@@ -34,7 +35,7 @@ assert_eq!(4, plus_two(2));\n ```\n \n You\u2019ll notice a few things about closures that are a bit different from regular\n-functions defined with `fn`. The first is that we did not need to\n+named functions defined with `fn`. The first is that we did not need to\n annotate the types of arguments the closure takes or the values it returns. We\n can:\n \n@@ -44,14 +45,14 @@ let plus_one = |x: i32| -> i32 { x + 1 };\n assert_eq!(2, plus_one(1));\n ```\n \n-But we don\u2019t have to. Why is this? Basically, it was chosen for ergonomic reasons.\n-While specifying the full type for named functions is helpful with things like\n-documentation and type inference, the types of closures are rarely documented\n-since they\u2019re anonymous, and they don\u2019t cause the kinds of error-at-a-distance\n-problems that inferring named function types can.\n+But we don\u2019t have to. Why is this? Basically, it was chosen for ergonomic\n+reasons.  While specifying the full type for named functions is helpful with\n+things like documentation and type inference, types within closures are rarely\n+documented since they\u2019re anonymous, and they don\u2019t cause the kinds of\n+error-at-a-distance problems that inferring named function types can.\n \n-The second is that the syntax is similar, but a bit different. I\u2019ve added spaces\n-here for easier comparison:\n+The second is that the syntax is similar, but a bit different. I\u2019ve added\n+spaces here for easier comparison:\n \n ```rust\n fn  plus_one_v1   (x: i32) -> i32 { x + 1 }\n@@ -63,8 +64,8 @@ Small differences, but they\u2019re similar.\n \n # Closures and their environment\n \n-Closures are called such because they \u2018close over their environment\u2019. It\n-looks like this:\n+The environment for a closure can include bindings from it's enclosing scope in\n+addition to parameters and local bindings.  It looks like this:\n \n ```rust\n let num = 5;\n@@ -197,9 +198,10 @@ frame.  Without `move`, a closure may be tied to the stack frame that created\n it, while a `move` closure is self-contained. This means that you cannot\n generally return a non-`move` closure from a function, for example.\n \n-But before we talk about taking and returning closures, we should talk some more\n-about the way that closures are implemented. As a systems language, Rust gives\n-you tons of control over what your code does, and closures are no different.\n+But before we talk about taking and returning closures, we should talk some\n+more about the way that closures are implemented. As a systems language, Rust\n+gives you tons of control over what your code does, and closures are no\n+different.\n \n # Closure implementation\n \n@@ -288,9 +290,9 @@ isn\u2019t interesting. The next part is:\n #   some_closure(1) }\n ```\n \n-Because `Fn` is a trait, we can bound our generic with it. In this case, our closure\n-takes a `i32` as an argument and returns an `i32`, and so the generic bound we use\n-is `Fn(i32) -> i32`.\n+Because `Fn` is a trait, we can bound our generic with it. In this case, our\n+closure takes a `i32` as an argument and returns an `i32`, and so the generic\n+bound we use is `Fn(i32) -> i32`.\n \n There\u2019s one other key point here: because we\u2019re bounding a generic with a\n trait, this will get monomorphized, and therefore, we\u2019ll be doing static"}, {"sha": "2e9f0d21fe321849a4759a01fc28eae82ef196d6", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=8e420e07d914a50ef279de60e6b3d303e82bfd72", "patch": "@@ -1 +1 @@\n-Subproject commit 62ad301a2407a7aca50c1d5120c63597d676d29f\n+Subproject commit 2e9f0d21fe321849a4759a01fc28eae82ef196d6"}]}