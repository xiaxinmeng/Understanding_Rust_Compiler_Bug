{"sha": "ead115949017533de244049c58f4b6886243eda7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZDExNTk0OTAxNzUzM2RlMjQ0MDQ5YzU4ZjRiNjg4NjI0M2VkYTc=", "commit": {"author": {"name": "Stephane Raux", "email": "stephaneyfx@gmail.com", "date": "2019-12-10T06:49:59Z"}, "committer": {"name": "stephaneyfx", "email": "stephaneyfx@gmail.com", "date": "2019-12-10T07:20:49Z"}, "message": "Use Niko's wording", "tree": {"sha": "e8d4d1b53fa55bb24b69d1d729bf26d620a8acaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8d4d1b53fa55bb24b69d1d729bf26d620a8acaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ead115949017533de244049c58f4b6886243eda7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ead115949017533de244049c58f4b6886243eda7", "html_url": "https://github.com/rust-lang/rust/commit/ead115949017533de244049c58f4b6886243eda7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ead115949017533de244049c58f4b6886243eda7/comments", "author": {"login": "stephaneyfx", "id": 24405066, "node_id": "MDQ6VXNlcjI0NDA1MDY2", "avatar_url": "https://avatars.githubusercontent.com/u/24405066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stephaneyfx", "html_url": "https://github.com/stephaneyfx", "followers_url": "https://api.github.com/users/stephaneyfx/followers", "following_url": "https://api.github.com/users/stephaneyfx/following{/other_user}", "gists_url": "https://api.github.com/users/stephaneyfx/gists{/gist_id}", "starred_url": "https://api.github.com/users/stephaneyfx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stephaneyfx/subscriptions", "organizations_url": "https://api.github.com/users/stephaneyfx/orgs", "repos_url": "https://api.github.com/users/stephaneyfx/repos", "events_url": "https://api.github.com/users/stephaneyfx/events{/privacy}", "received_events_url": "https://api.github.com/users/stephaneyfx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "stephaneyfx", "id": 24405066, "node_id": "MDQ6VXNlcjI0NDA1MDY2", "avatar_url": "https://avatars.githubusercontent.com/u/24405066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/stephaneyfx", "html_url": "https://github.com/stephaneyfx", "followers_url": "https://api.github.com/users/stephaneyfx/followers", "following_url": "https://api.github.com/users/stephaneyfx/following{/other_user}", "gists_url": "https://api.github.com/users/stephaneyfx/gists{/gist_id}", "starred_url": "https://api.github.com/users/stephaneyfx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/stephaneyfx/subscriptions", "organizations_url": "https://api.github.com/users/stephaneyfx/orgs", "repos_url": "https://api.github.com/users/stephaneyfx/repos", "events_url": "https://api.github.com/users/stephaneyfx/events{/privacy}", "received_events_url": "https://api.github.com/users/stephaneyfx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "812ec6a3bf775c1564ed3b12374c4ee81bfa94b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/812ec6a3bf775c1564ed3b12374c4ee81bfa94b8", "html_url": "https://github.com/rust-lang/rust/commit/812ec6a3bf775c1564ed3b12374c4ee81bfa94b8"}], "stats": {"total": 23, "additions": 21, "deletions": 2}, "files": [{"sha": "a7e09d72b4a92cdaae9337faed99af581e32fd00", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 21, "deletions": 2, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ead115949017533de244049c58f4b6886243eda7/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ead115949017533de244049c58f4b6886243eda7/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=ead115949017533de244049c58f4b6886243eda7", "patch": "@@ -63,14 +63,25 @@\n //! T` obtained from `Box::<T>::into_raw` may be deallocated using the\n //! [`Global`] allocator with `Layout::for_value(&*value)`.\n //!\n-//! `Box<T>` has the same ABI as `&mut T`. In particular, when `T: Sized`,\n-//! this allows using `Box<T>` in FFI:\n+//! So long as `T: Sized`, a `Box<T>` is guaranteed to be represented as a\n+//! single pointer and is also ABI-compatible with C pointers (i.e. the C type\n+//! `T*`). This means that you have Rust code which passes ownership of a\n+//! `Box<T>` to C code by using `Box<T>` as the type on the Rust side, and\n+//! `T*` as the corresponding type on the C side. As an example, consider this\n+//! C header which declares functions that create and destroy some kind of\n+//! `Foo` value:\n //!\n //! ```c\n //! /* C header */\n //! struct Foo* foo_new(void); /* Returns ownership to the caller */\n //! void foo_delete(struct Foo*); /* Takes ownership from the caller */\n //! ```\n+//! \n+//! These two functions might be implemented in Rust as follows. Here, the\n+//! `struct Foo*` type from C is translated to `Box<Foo>`, which captures\n+//! the ownership constraints. Note also that the nullable argument to\n+//! `foo_delete` is represented in Rust as `Option<Box<Foo>>`, since `Box<Foo>`\n+//! cannot be null.\n //!\n //! ```\n //! #[repr(C)]\n@@ -84,6 +95,14 @@\n //! #[no_mangle]\n //! pub extern \"C\" fn foo_delete(_: Option<Box<Foo>>) {}\n //! ```\n+//! \n+//! Even though `Box<T>` has the same representation and C ABI as a C pointer,\n+//! this does not mean that you can convert an arbitrary `T*` into a `Box<T>`\n+//! and expect things to work. `Box<T>` values will always be fully aligned,\n+//! non-null pointers. Moreover, the destructor for `Box<T>` will attempt to\n+//! free the value with the global allocator. In general, the best practice\n+//! is to only use `Box<T>` for pointers that originated from the global\n+//! allocator.\n //!\n //! [dereferencing]: ../../std/ops/trait.Deref.html\n //! [`Box`]: struct.Box.html"}]}