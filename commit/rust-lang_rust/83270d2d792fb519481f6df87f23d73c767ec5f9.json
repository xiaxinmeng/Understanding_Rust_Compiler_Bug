{"sha": "83270d2d792fb519481f6df87f23d73c767ec5f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMjcwZDJkNzkyZmI1MTk0ODFmNmRmODdmMjNkNzNjNzY3ZWM1Zjk=", "commit": {"author": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-07T22:49:57Z"}, "committer": {"name": "Daniel Micay", "email": "danielmicay@gmail.com", "date": "2013-02-08T03:04:35Z"}, "message": "rm each method from the Map trait\n\nthe map types should implement BaseIter instead", "tree": {"sha": "89b8242df68a8a249291c6a2b5354bc7de2f0bac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89b8242df68a8a249291c6a2b5354bc7de2f0bac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83270d2d792fb519481f6df87f23d73c767ec5f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83270d2d792fb519481f6df87f23d73c767ec5f9", "html_url": "https://github.com/rust-lang/rust/commit/83270d2d792fb519481f6df87f23d73c767ec5f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83270d2d792fb519481f6df87f23d73c767ec5f9/comments", "author": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thestinger", "id": 1505226, "node_id": "MDQ6VXNlcjE1MDUyMjY=", "avatar_url": "https://avatars.githubusercontent.com/u/1505226?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thestinger", "html_url": "https://github.com/thestinger", "followers_url": "https://api.github.com/users/thestinger/followers", "following_url": "https://api.github.com/users/thestinger/following{/other_user}", "gists_url": "https://api.github.com/users/thestinger/gists{/gist_id}", "starred_url": "https://api.github.com/users/thestinger/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thestinger/subscriptions", "organizations_url": "https://api.github.com/users/thestinger/orgs", "repos_url": "https://api.github.com/users/thestinger/repos", "events_url": "https://api.github.com/users/thestinger/events{/privacy}", "received_events_url": "https://api.github.com/users/thestinger/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d903231f1e7d7efb35405bdfdcbc451385e429b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d903231f1e7d7efb35405bdfdcbc451385e429b2", "html_url": "https://github.com/rust-lang/rust/commit/d903231f1e7d7efb35405bdfdcbc451385e429b2"}], "stats": {"total": 80, "additions": 41, "deletions": 39}, "files": [{"sha": "36424d1bfaaa3cd20f6a61fa9c1dda0fa1a40e2f", "filename": "src/libcore/container.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/83270d2d792fb519481f6df87f23d73c767ec5f9/src%2Flibcore%2Fcontainer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83270d2d792fb519481f6df87f23d73c767ec5f9/src%2Flibcore%2Fcontainer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcontainer.rs?ref=83270d2d792fb519481f6df87f23d73c767ec5f9", "patch": "@@ -29,9 +29,6 @@ pub trait Map<K, V>: Mutable {\n     /// Return true if the map contains a value for the specified key\n     pure fn contains_key(&self, key: &K) -> bool;\n \n-    /// Visit all key-value pairs\n-    pure fn each(&self, f: fn(&K, &V) -> bool);\n-\n     /// Visit all keys\n     pure fn each_key(&self, f: fn(&K) -> bool);\n "}, {"sha": "6bc9e4f88cf0f28617fb1577f4929f94110cf133", "filename": "src/libcore/hashmap.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/83270d2d792fb519481f6df87f23d73c767ec5f9/src%2Flibcore%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83270d2d792fb519481f6df87f23d73c767ec5f9/src%2Flibcore%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhashmap.rs?ref=83270d2d792fb519481f6df87f23d73c767ec5f9", "patch": "@@ -262,19 +262,6 @@ pub mod linear {\n             }\n         }\n \n-        /// Visit all key-value pairs\n-        pure fn each(&self, blk: fn(k: &K, v: &V) -> bool) {\n-            for self.buckets.each |slot| {\n-                let mut broke = false;\n-                do slot.iter |bucket| {\n-                    if !blk(&bucket.key, &bucket.value) {\n-                        broke = true; // FIXME(#3064) just write \"break;\"\n-                    }\n-                }\n-                if broke { break; }\n-            }\n-        }\n-\n         /// Visit all keys\n         pure fn each_key(&self, blk: fn(k: &K) -> bool) {\n             self.each(|k, _| blk(k))\n@@ -335,6 +322,19 @@ pub mod linear {\n             linear_map_with_capacity(INITIAL_CAPACITY)\n         }\n \n+        /// Visit all key-value pairs\n+        pure fn each(&self, blk: fn(k: &K, v: &V) -> bool) {\n+            for self.buckets.each |slot| {\n+                let mut broke = false;\n+                do slot.iter |bucket| {\n+                    if !blk(&bucket.key, &bucket.value) {\n+                        broke = true; // FIXME(#3064) just write \"break;\"\n+                    }\n+                }\n+                if broke { break; }\n+            }\n+        }\n+\n         fn pop(&mut self, k: &K) -> Option<V> {\n             let hash = k.hash_keyed(self.k0, self.k1) as uint;\n             self.pop_internal(hash, k)"}, {"sha": "218964695e295490ec6fcb9c8d03efa089f1df1e", "filename": "src/libstd/smallintmap.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/83270d2d792fb519481f6df87f23d73c767ec5f9/src%2Flibstd%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83270d2d792fb519481f6df87f23d73c767ec5f9/src%2Flibstd%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsmallintmap.rs?ref=83270d2d792fb519481f6df87f23d73c767ec5f9", "patch": "@@ -48,16 +48,6 @@ impl<V> SmallIntMap<V>: Map<uint, V> {\n         self.find(key).is_some()\n     }\n \n-    /// Visit all key-value pairs\n-    pure fn each(&self, it: fn(key: &uint, value: &V) -> bool) {\n-        for uint::range(0, self.v.len()) |i| {\n-            match self.v[i] {\n-              Some(ref elt) => if !it(&i, elt) { break },\n-              None => ()\n-            }\n-        }\n-    }\n-\n     /// Visit all keys\n     pure fn each_key(&self, blk: fn(key: &uint) -> bool) {\n         self.each(|k, _| blk(k))\n@@ -109,6 +99,16 @@ pub impl<V> SmallIntMap<V> {\n     /// Create an empty SmallIntMap\n     static pure fn new() -> SmallIntMap<V> { SmallIntMap{v: ~[]} }\n \n+    /// Visit all key-value pairs\n+    pure fn each(&self, it: fn(key: &uint, value: &V) -> bool) {\n+        for uint::range(0, self.v.len()) |i| {\n+            match self.v[i] {\n+              Some(ref elt) => if !it(&i, elt) { break },\n+              None => ()\n+            }\n+        }\n+    }\n+\n     pure fn get(&self, key: &uint) -> &self/V {\n         self.find(key).expect(\"key not present\")\n     }"}, {"sha": "70226c7277d3f8c2149a55df6f69904b047f1917", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/83270d2d792fb519481f6df87f23d73c767ec5f9/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83270d2d792fb519481f6df87f23d73c767ec5f9/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=83270d2d792fb519481f6df87f23d73c767ec5f9", "patch": "@@ -125,9 +125,6 @@ impl <K: Ord, V> TreeMap<K, V>: Map<K, V> {\n         self.find(key).is_some()\n     }\n \n-    /// Visit all key-value pairs in order\n-    pure fn each(&self, f: fn(&K, &V) -> bool) { each(&self.root, f) }\n-\n     /// Visit all keys in order\n     pure fn each_key(&self, f: fn(&K) -> bool) { self.each(|k, _| f(k)) }\n \n@@ -175,6 +172,9 @@ impl <K: Ord, V> TreeMap<K, V> {\n     /// Create an empty TreeMap\n     static pure fn new() -> TreeMap<K, V> { TreeMap{root: None, length: 0} }\n \n+    /// Visit all key-value pairs in order\n+    pure fn each(&self, f: fn(&K, &V) -> bool) { each(&self.root, f) }\n+\n     /// Visit all key-value pairs in reverse order\n     pure fn each_reverse(&self, f: fn(&K, &V) -> bool) {\n         each_reverse(&self.root, f);"}, {"sha": "a0230d02981324598d871cf2139c6391b512a5ae", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/83270d2d792fb519481f6df87f23d73c767ec5f9/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83270d2d792fb519481f6df87f23d73c767ec5f9/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=83270d2d792fb519481f6df87f23d73c767ec5f9", "patch": "@@ -11,6 +11,7 @@\n // xfail-fast\n \n use core::container::{Container, Mutable, Map};\n+use core::iter::BaseIter;\n \n enum cat_type { tuxedo, tabby, tortoiseshell }\n \n@@ -48,6 +49,18 @@ impl<T> cat<T> {\n     }\n }\n \n+impl<T> cat<T>: BaseIter<(int, &T)> {\n+    pure fn each(&self, f: fn(&(int, &self/T)) -> bool) {\n+        let mut n = int::abs(self.meows);\n+        while n > 0 {\n+            if !f(&(n, &self.name)) { break; }\n+            n -= 1;\n+        }\n+    }\n+\n+    pure fn size_hint(&self) -> Option<uint> { Some(self.len()) }\n+}\n+\n impl<T> cat<T>: Container {\n     pure fn len(&self) -> uint { self.meows as uint }\n     pure fn is_empty(&self) -> bool { self.meows == 0 }\n@@ -60,20 +73,12 @@ impl<T> cat<T>: Mutable {\n impl<T> cat<T>: Map<int, T> {\n     pure fn contains_key(&self, k: &int) -> bool { *k <= self.meows }\n \n-    pure fn each(&self, f: fn(v: &int, v: &T) -> bool) {\n-        let mut n = int::abs(self.meows);\n-        while n > 0 {\n-            if !f(&n, &self.name) { break; }\n-            n -= 1;\n-        }\n-    }\n-\n     pure fn each_key(&self, f: fn(v: &int) -> bool) {\n-        for self.each |k, _| { if !f(k) { break; } loop;};\n+        for self.each |&(k, _)| { if !f(&k) { break; } loop;};\n     }\n \n     pure fn each_value(&self, f: fn(v: &T) -> bool) {\n-        for self.each |_, v| { if !f(v) { break; } loop;};\n+        for self.each |&(_, v)| { if !f(v) { break; } loop;};\n     }\n \n     fn insert(&mut self, k: int, _: T) -> bool {"}]}