{"sha": "deb9195e5749c4f15e9a5ae0e7ee8e1802c716e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlYjkxOTVlNTc0OWM0ZjE1ZTlhNWFlMGU3ZWU4ZTE4MDJjNzE2ZTQ=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-28T05:46:43Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-11-29T06:12:15Z"}, "message": "Remove `huge_word` and `zero_word`.\n\nThey are unused. The commit also adds some blank lines between some\nmethods.", "tree": {"sha": "d309ce1ed5f83f77339ac3c83a622661c80b7102", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d309ce1ed5f83f77339ac3c83a622661c80b7102"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deb9195e5749c4f15e9a5ae0e7ee8e1802c716e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deb9195e5749c4f15e9a5ae0e7ee8e1802c716e4", "html_url": "https://github.com/rust-lang/rust/commit/deb9195e5749c4f15e9a5ae0e7ee8e1802c716e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deb9195e5749c4f15e9a5ae0e7ee8e1802c716e4/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c80f7c4fcb83be65c0b3595eb30690c626a30e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c80f7c4fcb83be65c0b3595eb30690c626a30e3", "html_url": "https://github.com/rust-lang/rust/commit/6c80f7c4fcb83be65c0b3595eb30690c626a30e3"}], "stats": {"total": 25, "additions": 16, "deletions": 9}, "files": [{"sha": "e01c4b01aaa6681f36d5844446276833725cb81c", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/deb9195e5749c4f15e9a5ae0e7ee8e1802c716e4/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deb9195e5749c4f15e9a5ae0e7ee8e1802c716e4/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=deb9195e5749c4f15e9a5ae0e7ee8e1802c716e4", "patch": "@@ -309,10 +309,12 @@ impl<'a> Printer<'a> {\n     pub fn last_token(&mut self) -> Token {\n         self.buf[self.right].token.clone()\n     }\n-    /// be very careful with this!\n+\n+    /// Be very careful with this!\n     pub fn replace_last_token(&mut self, t: Token) {\n         self.buf[self.right].token = t;\n     }\n+\n     pub fn pretty_print(&mut self, token: Token) -> io::Result<()> {\n         debug!(\"pp Vec<{},{}>\", self.left, self.right);\n         match token {\n@@ -387,6 +389,7 @@ impl<'a> Printer<'a> {\n             }\n         }\n     }\n+\n     pub fn check_stream(&mut self) -> io::Result<()> {\n         debug!(\"check_stream Vec<{}, {}> with left_total={}, right_total={}\",\n                self.left, self.right, self.left_total, self.right_total);\n@@ -405,19 +408,24 @@ impl<'a> Printer<'a> {\n         }\n         Ok(())\n     }\n+\n     pub fn scan_push(&mut self, x: usize) {\n         debug!(\"scan_push {}\", x);\n         self.scan_stack.push_front(x);\n     }\n+\n     pub fn scan_pop(&mut self) -> usize {\n         self.scan_stack.pop_front().unwrap()\n     }\n+\n     pub fn scan_top(&mut self) -> usize {\n         *self.scan_stack.front().unwrap()\n     }\n+\n     pub fn scan_pop_bottom(&mut self) -> usize {\n         self.scan_stack.pop_back().unwrap()\n     }\n+\n     pub fn advance_right(&mut self) {\n         self.right += 1;\n         self.right %= self.buf_max_len;\n@@ -427,6 +435,7 @@ impl<'a> Printer<'a> {\n         }\n         assert_ne!(self.right, self.left);\n     }\n+\n     pub fn advance_left(&mut self) -> io::Result<()> {\n         debug!(\"advance_left Vec<{},{}>, sizeof({})={}\", self.left, self.right,\n                self.left, self.buf[self.left].size);\n@@ -461,6 +470,7 @@ impl<'a> Printer<'a> {\n \n         Ok(())\n     }\n+\n     pub fn check_stack(&mut self, k: isize) {\n         if !self.scan_stack.is_empty() {\n             let x = self.scan_top();\n@@ -488,17 +498,20 @@ impl<'a> Printer<'a> {\n             }\n         }\n     }\n+\n     pub fn print_newline(&mut self, amount: isize) -> io::Result<()> {\n         debug!(\"NEWLINE {}\", amount);\n         let ret = write!(self.out, \"\\n\");\n         self.pending_indentation = 0;\n         self.indent(amount);\n         ret\n     }\n+\n     pub fn indent(&mut self, amount: isize) {\n         debug!(\"INDENT {}\", amount);\n         self.pending_indentation += amount;\n     }\n+\n     pub fn get_top(&mut self) -> PrintStackElem {\n         match self.print_stack.last() {\n             Some(el) => *el,\n@@ -508,13 +521,15 @@ impl<'a> Printer<'a> {\n             }\n         }\n     }\n+\n     pub fn print_str(&mut self, s: &str) -> io::Result<()> {\n         while self.pending_indentation > 0 {\n             write!(self.out, \" \")?;\n             self.pending_indentation -= 1;\n         }\n         write!(self.out, \"{}\", s)\n     }\n+\n     pub fn print(&mut self, token: Token, l: isize) -> io::Result<()> {\n         debug!(\"print {} {} (remaining line space={})\", token, l,\n                self.space);\n@@ -633,14 +648,6 @@ impl<'a> Printer<'a> {\n         self.pretty_print(Token::String(wrd.to_string(), wrd.len() as isize))\n     }\n \n-    pub fn huge_word(&mut self, wrd: &str) -> io::Result<()> {\n-        self.pretty_print(Token::String(wrd.to_string(), SIZE_INFINITY))\n-    }\n-\n-    pub fn zero_word(&mut self, wrd: &str) -> io::Result<()> {\n-        self.pretty_print(Token::String(wrd.to_string(), 0))\n-    }\n-\n     fn spaces(&mut self, n: usize) -> io::Result<()> {\n         self.break_offset(n, 0)\n     }"}]}