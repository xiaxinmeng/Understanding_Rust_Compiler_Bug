{"sha": "c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2Nzk0NGIzZWE5Y2YxZGFmYzYzYzQyMmI4ZDIxMWY4NGU1ZGNiNGU=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-08-24T03:55:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-24T03:55:04Z"}, "message": "Merge pull request #1189 from Manishearth/easy\n\nAdd `zero_prefixed_literal` and `missing_docs_in_private_items` lints", "tree": {"sha": "c696d57bed4b844b0be789f0beeed23b2f659db1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c696d57bed4b844b0be789f0beeed23b2f659db1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "html_url": "https://github.com/rust-lang/rust/commit/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf2b0c8dd683c80df8012c78c939e95c0c19eaf1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1", "html_url": "https://github.com/rust-lang/rust/commit/cf2b0c8dd683c80df8012c78c939e95c0c19eaf1"}, {"sha": "be329ebdf7ac417f57f17cb848d6d1f8a73d192a", "url": "https://api.github.com/repos/rust-lang/rust/commits/be329ebdf7ac417f57f17cb848d6d1f8a73d192a", "html_url": "https://github.com/rust-lang/rust/commit/be329ebdf7ac417f57f17cb848d6d1f8a73d192a"}], "stats": {"total": 522, "additions": 512, "deletions": 10}, "files": [{"sha": "7723b558376f2e260bfd6ab3662e30ee2365bb94", "filename": "CHANGELOG.md", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -1,6 +1,9 @@\n # Change Log\n All notable changes to this project will be documented in this file.\n \n+## 0.0.86 \u2014 ?\n+* New lints: [`missing_docs_in_private_items`], [`zero_prefixed_literal`]\n+\n ## 0.0.85 \u2014 2016-08-19\n * Fix ICE with [`useless_attribute`]\n * [`useless_attribute`] ignores [`unused_imports`] on `use` statements\n@@ -238,6 +241,7 @@ All notable changes to this project will be documented in this file.\n [`mem_forget`]: https://github.com/Manishearth/rust-clippy/wiki#mem_forget\n [`min_max`]: https://github.com/Manishearth/rust-clippy/wiki#min_max\n [`misrefactored_assign_op`]: https://github.com/Manishearth/rust-clippy/wiki#misrefactored_assign_op\n+[`missing_docs_in_private_items`]: https://github.com/Manishearth/rust-clippy/wiki#missing_docs_in_private_items\n [`mixed_case_hex_literals`]: https://github.com/Manishearth/rust-clippy/wiki#mixed_case_hex_literals\n [`module_inception`]: https://github.com/Manishearth/rust-clippy/wiki#module_inception\n [`modulo_one`]: https://github.com/Manishearth/rust-clippy/wiki#modulo_one\n@@ -329,5 +333,6 @@ All notable changes to this project will be documented in this file.\n [`wrong_self_convention`]: https://github.com/Manishearth/rust-clippy/wiki#wrong_self_convention\n [`wrong_transmute`]: https://github.com/Manishearth/rust-clippy/wiki#wrong_transmute\n [`zero_divided_by_zero`]: https://github.com/Manishearth/rust-clippy/wiki#zero_divided_by_zero\n+[`zero_prefixed_literal`]: https://github.com/Manishearth/rust-clippy/wiki#zero_prefixed_literal\n [`zero_width_space`]: https://github.com/Manishearth/rust-clippy/wiki#zero_width_space\n <!-- end autogenerated links to wiki -->"}, {"sha": "64d2932ed668e7b4a4aa81399b427feee24ebf8c", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -17,7 +17,7 @@ Table of contents:\n \n ## Lints\n \n-There are 167 lints included in this crate:\n+There are 169 lints included in this crate:\n \n name                                                                                                                 | default | triggers on\n ---------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -100,6 +100,7 @@ name\n [mem_forget](https://github.com/Manishearth/rust-clippy/wiki#mem_forget)                                             | allow   | `mem::forget` usage on `Drop` types, likely to cause memory leaks\n [min_max](https://github.com/Manishearth/rust-clippy/wiki#min_max)                                                   | warn    | `min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\n [misrefactored_assign_op](https://github.com/Manishearth/rust-clippy/wiki#misrefactored_assign_op)                   | warn    | having a variable on both sides of an assign op\n+[missing_docs_in_private_items](https://github.com/Manishearth/rust-clippy/wiki#missing_docs_in_private_items)       | allow   | detects missing documentation for public and private members\n [mixed_case_hex_literals](https://github.com/Manishearth/rust-clippy/wiki#mixed_case_hex_literals)                   | warn    | hex literals whose letter digits are not consistently upper- or lowercased\n [module_inception](https://github.com/Manishearth/rust-clippy/wiki#module_inception)                                 | warn    | modules that have the same name as their parent module\n [modulo_one](https://github.com/Manishearth/rust-clippy/wiki#modulo_one)                                             | warn    | taking a number modulo 1, which always returns 0\n@@ -187,6 +188,7 @@ name\n [wrong_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_self_convention)                       | warn    | defining a method named with an established prefix (like \"into_\") that takes `self` with the wrong convention\n [wrong_transmute](https://github.com/Manishearth/rust-clippy/wiki#wrong_transmute)                                   | warn    | transmutes that are confusing at best, undefined behaviour at worst and always useless\n [zero_divided_by_zero](https://github.com/Manishearth/rust-clippy/wiki#zero_divided_by_zero)                         | warn    | usage of `0.0 / 0.0` to obtain NaN instead of std::f32::NaN or std::f64::NaN\n+[zero_prefixed_literal](https://github.com/Manishearth/rust-clippy/wiki#zero_prefixed_literal)                       | warn    | integer literals starting with `0`\n [zero_width_space](https://github.com/Manishearth/rust-clippy/wiki#zero_width_space)                                 | deny    | using a zero-width space in a string literal, which is confusing\n \n More to come, please [file an issue](https://github.com/Manishearth/rust-clippy/issues) if you have ideas!"}, {"sha": "f7b1dcb40f4f6fabe2199ef6171ce7913d5f9849", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -10,7 +10,7 @@\n #![feature(stmt_expr_attributes)]\n #![feature(type_macros)]\n \n-#![allow(indexing_slicing, shadow_reuse, unknown_lints)]\n+#![allow(indexing_slicing, shadow_reuse, unknown_lints, missing_docs_in_private_items)]\n \n #[macro_use]\n extern crate syntax;\n@@ -96,6 +96,7 @@ pub mod methods;\n pub mod minmax;\n pub mod misc;\n pub mod misc_early;\n+pub mod missing_doc;\n pub mod module_inception;\n pub mod mut_mut;\n pub mod mut_reference;\n@@ -260,6 +261,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box assign_ops::AssignOps);\n     reg.register_late_lint_pass(box let_if_seq::LetIfSeq);\n     reg.register_late_lint_pass(box eval_order_dependence::EvalOrderDependence);\n+    reg.register_late_lint_pass(box missing_doc::MissingDoc::new());\n \n     reg.register_lint_group(\"clippy_restrictions\", vec![\n         arithmetic::FLOAT_ARITHMETIC,\n@@ -282,6 +284,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         methods::WRONG_PUB_SELF_CONVENTION,\n         misc::USED_UNDERSCORE_BINDING,\n         misc_early::UNSEPARATED_LITERAL_SUFFIX,\n+        missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n         mut_mut::MUT_MUT,\n         mutex_atomic::MUTEX_INTEGER,\n         non_expressive_names::SIMILAR_NAMES,\n@@ -387,6 +390,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         misc_early::MIXED_CASE_HEX_LITERALS,\n         misc_early::REDUNDANT_CLOSURE_CALL,\n         misc_early::UNNEEDED_FIELD_PATTERN,\n+        misc_early::ZERO_PREFIXED_LITERAL,\n         module_inception::MODULE_INCEPTION,\n         mut_reference::UNNECESSARY_MUT_PASSED,\n         mutex_atomic::MUTEX_ATOMIC,"}, {"sha": "47b6854cfa5e5cd1f8033137001c872e913e845f", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 48, "deletions": 2, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -105,14 +105,51 @@ declare_lint! {\n     \"literals whose suffix is not separated by an underscore\"\n }\n \n+/// **What it does:** Warns if a integral constant literal starts with `0`.\n+///\n+/// **Why is this bad?** In some languages (including the infamous C language and most of its\n+/// familly), this marks an octal constant. In Rust however, this is a decimal constant. This could\n+/// be confusing for both the writer and a reader of the constant.\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+///\n+/// In Rust:\n+/// ```rust\n+/// fn main() {\n+///     let a = 0123;\n+///     println!(\"{}\", a);\n+/// }\n+/// ```\n+///\n+/// prints `123`, while in C:\n+///\n+/// ```c\n+/// #include <stdio.h>\n+///\n+/// int main() {\n+///     int a = 0123;\n+///     printf(\"%d\\n\", a);\n+/// }\n+/// ```\n+///\n+/// prints `83` (as `89 == 0o123` while `123 == 0o173`).\n+declare_lint! {\n+    pub ZERO_PREFIXED_LITERAL,\n+    Warn,\n+    \"integer literals starting with `0`\"\n+}\n+\n \n #[derive(Copy, Clone)]\n pub struct MiscEarly;\n \n impl LintPass for MiscEarly {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(UNNEEDED_FIELD_PATTERN, DUPLICATE_UNDERSCORE_ARGUMENT, REDUNDANT_CLOSURE_CALL,\n-                    DOUBLE_NEG, MIXED_CASE_HEX_LITERALS, UNSEPARATED_LITERAL_SUFFIX)\n+                    DOUBLE_NEG, MIXED_CASE_HEX_LITERALS, UNSEPARATED_LITERAL_SUFFIX,\n+                    ZERO_PREFIXED_LITERAL)\n     }\n }\n \n@@ -220,7 +257,7 @@ impl EarlyLintPass for MiscEarly {\n             }\n             ExprKind::Lit(ref lit) => {\n                 if_let_chain! {[\n-                    let LitKind::Int(..) = lit.node,\n+                    let LitKind::Int(value, ..) = lit.node,\n                     let Some(src) = snippet_opt(cx, lit.span),\n                     let Some(firstch) = src.chars().next(),\n                     char::to_digit(firstch, 10).is_some()\n@@ -250,6 +287,15 @@ impl EarlyLintPass for MiscEarly {\n                             span_lint(cx, MIXED_CASE_HEX_LITERALS, lit.span,\n                                       \"inconsistent casing in hexadecimal literal\");\n                         }\n+                    } else if value != 0 && src.starts_with('0') {\n+                        span_lint_and_then(cx,\n+                                           ZERO_PREFIXED_LITERAL,\n+                                           lit.span,\n+                                           \"this is a decimal constant\",\n+                                           |db| {\n+                            db.span_suggestion(lit.span, \"if you mean to use a decimal constant, remove the `0` to remove confusion:\", src[1..].to_string());\n+                            db.span_suggestion(lit.span, \"if you mean to use an octal constant, use `0o`:\", format!(\"0o{}\", &src[1..]));\n+                        });\n                     }\n                 }}\n                 if_let_chain! {["}, {"sha": "0871f5ab5755550ff0dca320ecefd040548a1a75", "filename": "clippy_lints/src/missing_doc.rs", "status": "added", "additions": 178, "deletions": 0, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -0,0 +1,178 @@\n+/* This file incorporates work covered by the following copyright and\n+ * permission notice:\n+ *   Copyright 2012-2015 The Rust Project Developers. See the COPYRIGHT\n+ *   file at the top-level directory of this distribution and at\n+ *   http://rust-lang.org/COPYRIGHT.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+ *   http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+ *   <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+ *   option. This file may not be copied, modified, or distributed\n+ *   except according to those terms.\n+ */\n+\n+/* Note: More specifically this lint is largely inspired (aka copied) from *rustc*'s\n+ * [`missing_doc`].\n+ *\n+ * [`missing_doc`]: https://github.com/rust-lang/rust/blob/d6d05904697d89099b55da3331155392f1db9c00/src/librustc_lint/builtin.rs#L246\n+ */\n+\n+use rustc::hir;\n+use rustc::lint::*;\n+use rustc::ty;\n+use syntax::ast;\n+use syntax::attr::{self, AttrMetaMethods};\n+use syntax::codemap::Span;\n+use utils::in_macro;\n+\n+/// **What it does:** Warns if there is missing doc for any documentable item (public or private).\n+///\n+/// **Why is this bad?** Doc is good. *rustc* has a `MISSING_DOCS` allowed-by-default lint for\n+/// public members, but has no way to enforce documentation of private items. This lint fixes that.\n+///\n+/// **Known problems:** None.\n+declare_lint! {\n+    pub MISSING_DOCS_IN_PRIVATE_ITEMS,\n+    Allow,\n+    \"detects missing documentation for public and private members\"\n+}\n+\n+pub struct MissingDoc {\n+    /// Stack of whether #[doc(hidden)] is set\n+    /// at each level which has lint attributes.\n+    doc_hidden_stack: Vec<bool>,\n+}\n+\n+impl ::std::default::Default for MissingDoc {\n+    fn default() -> MissingDoc {\n+        MissingDoc::new()\n+    }\n+}\n+\n+impl MissingDoc {\n+    pub fn new() -> MissingDoc {\n+        MissingDoc {\n+            doc_hidden_stack: vec![false],\n+        }\n+    }\n+\n+    fn doc_hidden(&self) -> bool {\n+        *self.doc_hidden_stack.last().expect(\"empty doc_hidden_stack\")\n+    }\n+\n+    fn check_missing_docs_attrs(&self,\n+                               cx: &LateContext,\n+                               attrs: &[ast::Attribute],\n+                               sp: Span,\n+                               desc: &'static str) {\n+        // If we're building a test harness, then warning about\n+        // documentation is probably not really relevant right now.\n+        if cx.sess().opts.test {\n+            return;\n+        }\n+\n+        // `#[doc(hidden)]` disables missing_docs check.\n+        if self.doc_hidden() {\n+            return;\n+        }\n+\n+        if in_macro(cx, sp) {\n+            return;\n+        }\n+\n+        let has_doc = attrs.iter().any(|a| a.is_value_str() && a.name() == \"doc\");\n+        if !has_doc {\n+            cx.span_lint(MISSING_DOCS_IN_PRIVATE_ITEMS, sp,\n+                         &format!(\"missing documentation for {}\", desc));\n+        }\n+    }\n+}\n+\n+impl LintPass for MissingDoc {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array![MISSING_DOCS_IN_PRIVATE_ITEMS]\n+    }\n+}\n+\n+impl LateLintPass for MissingDoc {\n+    fn enter_lint_attrs(&mut self, _: &LateContext, attrs: &[ast::Attribute]) {\n+        let doc_hidden = self.doc_hidden() || attrs.iter().any(|attr| {\n+            attr.check_name(\"doc\") && match attr.meta_item_list() {\n+                None => false,\n+                Some(l) => attr::contains_name(&l[..], \"hidden\"),\n+            }\n+        });\n+        self.doc_hidden_stack.push(doc_hidden);\n+    }\n+\n+    fn exit_lint_attrs(&mut self, _: &LateContext, _: &[ast::Attribute]) {\n+        self.doc_hidden_stack.pop().expect(\"empty doc_hidden_stack\");\n+    }\n+\n+    fn check_crate(&mut self, cx: &LateContext, krate: &hir::Crate) {\n+        self.check_missing_docs_attrs(cx, &krate.attrs, krate.span, \"crate\");\n+    }\n+\n+    fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n+        let desc = match it.node {\n+            hir::ItemConst(..) => \"a constant\",\n+            hir::ItemEnum(..) => \"an enum\",\n+            hir::ItemFn(..) => \"a function\",\n+            hir::ItemMod(..) => \"a module\",\n+            hir::ItemStatic(..) => \"a static\",\n+            hir::ItemStruct(..) => \"a struct\",\n+            hir::ItemTrait(..) => \"a trait\",\n+            hir::ItemTy(..) => \"a type alias\",\n+            hir::ItemDefaultImpl(..) |\n+            hir::ItemExternCrate(..) |\n+            hir::ItemForeignMod(..) |\n+            hir::ItemImpl(..) |\n+            hir::ItemUse(..) => return,\n+        };\n+\n+        self.check_missing_docs_attrs(cx, &it.attrs, it.span, desc);\n+    }\n+\n+    fn check_trait_item(&mut self, cx: &LateContext, trait_item: &hir::TraitItem) {\n+        let desc = match trait_item.node {\n+            hir::ConstTraitItem(..) => \"an associated constant\",\n+            hir::MethodTraitItem(..) => \"a trait method\",\n+            hir::TypeTraitItem(..) => \"an associated type\",\n+        };\n+\n+        self.check_missing_docs_attrs(cx, &trait_item.attrs, trait_item.span, desc);\n+    }\n+\n+    fn check_impl_item(&mut self, cx: &LateContext, impl_item: &hir::ImplItem) {\n+        // If the method is an impl for a trait, don't doc.\n+        let def_id = cx.tcx.map.local_def_id(impl_item.id);\n+        match cx.tcx.impl_or_trait_items.borrow()\n+                                         .get(&def_id)\n+                                         .expect(\"missing method descriptor?!\")\n+                                         .container() {\n+            ty::TraitContainer(_) => return,\n+            ty::ImplContainer(cid) => {\n+                if cx.tcx.impl_trait_ref(cid).is_some() {\n+                    return\n+                }\n+            }\n+        }\n+\n+        let desc = match impl_item.node {\n+            hir::ImplItemKind::Const(..) => \"an associated constant\",\n+            hir::ImplItemKind::Method(..) => \"a method\",\n+            hir::ImplItemKind::Type(_) => \"an associated type\",\n+        };\n+        self.check_missing_docs_attrs(cx, &impl_item.attrs, impl_item.span, desc);\n+    }\n+\n+    fn check_struct_field(&mut self, cx: &LateContext, sf: &hir::StructField) {\n+        if !sf.is_positional() {\n+            self.check_missing_docs_attrs(cx, &sf.attrs, sf.span, \"a struct field\");\n+        }\n+    }\n+\n+    fn check_variant(&mut self, cx: &LateContext, v: &hir::Variant, _: &hir::Generics) {\n+        self.check_missing_docs_attrs(cx, &v.node.attrs, v.span, \"a variant\");\n+    }\n+}"}, {"sha": "a277226eb67c6844a8f0d13922f7c0f8d86d2870", "filename": "clippy_lints/src/utils/comparisons.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fcomparisons.rs?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -1,14 +1,23 @@\n+//! Utility functions about comparison operators.\n+\n+#![deny(missing_docs_in_private_items)]\n+\n use rustc::hir::{BinOp_, Expr};\n \n #[derive(PartialEq, Eq, Debug, Copy, Clone)]\n+/// Represent a normalized comparison operator.\n pub enum Rel {\n+    /// `<`\n     Lt,\n+    /// `<=`\n     Le,\n+    /// `==`\n     Eq,\n+    /// `!=`\n     Ne,\n }\n \n-/// Put the expression in the form  `lhs < rhs` or `lhs <= rhs`.\n+/// Put the expression in the form  `lhs < rhs`, `lhs <= rhs`, `lhs == rhs` or `lhs != rhs`.\n pub fn normalize_comparison<'a>(op: BinOp_, lhs: &'a Expr, rhs: &'a Expr)\n                                 -> Option<(Rel, &'a Expr, &'a Expr)> {\n     match op {"}, {"sha": "748d144daa0d2ce3c414c4df23c0075439382111", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -1,3 +1,7 @@\n+//! Read configurations files.\n+\n+#![deny(missing_docs_in_private_items)]\n+\n use std::{fmt, fs, io};\n use std::io::Read;\n use syntax::{ast, codemap, ptr};\n@@ -32,9 +36,20 @@ pub fn file(args: &[ptr::P<ast::MetaItem>]) -> Result<Option<token::InternedStri\n /// Error from reading a configuration file.\n #[derive(Debug)]\n pub enum Error {\n+    /// An I/O error.\n     Io(io::Error),\n+    /// The file is not valid TOML.\n     Toml(Vec<toml::ParserError>),\n-    Type(&'static str, &'static str, &'static str),\n+    /// Type error.\n+    Type(\n+        /// The name of the key.\n+        &'static str,\n+        /// The expected type.\n+        &'static str,\n+        /// The type we got instead.\n+        &'static str\n+    ),\n+    /// There is an unknown key is the file.\n     UnknownKey(String),\n }\n "}, {"sha": "aed07471a6564bb06178c05b5f948aaa798d1ab2", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -1,5 +1,7 @@\n //! This module contains functions for retrieve the original AST from lowered `hir`.\n \n+#![deny(missing_docs_in_private_items)]\n+\n use rustc::hir;\n use rustc::lint::LateContext;\n use syntax::ast;\n@@ -33,14 +35,17 @@ pub fn binop(op: hir::BinOp_) -> ast::BinOpKind {\n /// Represent a range akin to `ast::ExprKind::Range`.\n #[derive(Debug, Copy, Clone)]\n pub struct Range<'a> {\n+    /// The lower bound of the range, or `None` for ranges such as `..X`.\n     pub start: Option<&'a hir::Expr>,\n+    /// The upper bound of the range, or `None` for ranges such as `X..`.\n     pub end: Option<&'a hir::Expr>,\n+    /// Whether the interval is open or closed.\n     pub limits: ast::RangeLimits,\n }\n \n /// Higher a `hir` range to something similar to `ast::ExprKind::Range`.\n pub fn range(expr: &hir::Expr) -> Option<Range> {\n-    // To be removed when ranges get stable.\n+    /// Skip unstable blocks. To be removed when ranges get stable.\n     fn unwrap_unstable(expr: &hir::Expr) -> &hir::Expr {\n         if let hir::ExprBlock(ref block) = expr.node {\n             if block.rules == hir::BlockCheckMode::PushUnstableBlock || block.rules == hir::BlockCheckMode::PopUnstableBlock {\n@@ -53,6 +58,7 @@ pub fn range(expr: &hir::Expr) -> Option<Range> {\n         expr\n     }\n \n+    /// Find the field named `name` in the field. Always return `Some` for convenience.\n     fn get_field<'a>(name: &str, fields: &'a [hir::Field]) -> Option<&'a hir::Expr> {\n         let expr = &fields.iter()\n                           .find(|field| field.name.node.as_str() == name)"}, {"sha": "560ec491b455365d4f00569a91d88d07ddd33989", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -1,3 +1,6 @@\n+//! Contains utility functions to generate suggestions.\n+#![deny(missing_docs_in_private_items)]\n+\n use rustc::hir;\n use rustc::lint::{EarlyContext, LateContext, LintContext};\n use rustc_errors;\n@@ -35,6 +38,7 @@ impl<'a> Display for Sugg<'a> {\n \n #[allow(wrong_self_convention)] // ok, because of the function `as_ty` method\n impl<'a> Sugg<'a> {\n+    /// Prepare a suggestion from an expression.\n     pub fn hir_opt(cx: &LateContext, expr: &hir::Expr) -> Option<Sugg<'a>> {\n         snippet_opt(cx, expr.span).map(|snippet| {\n             let snippet = Cow::Owned(snippet);\n@@ -72,10 +76,12 @@ impl<'a> Sugg<'a> {\n         })\n     }\n \n+    /// Convenience function around `hir_opt` for suggestions with a default text.\n     pub fn hir(cx: &LateContext, expr: &hir::Expr, default: &'a str) -> Sugg<'a> {\n         Self::hir_opt(cx, expr).unwrap_or_else(|| Sugg::NonParen(Cow::Borrowed(default)))\n     }\n \n+    /// Prepare a suggestion from an expression.\n     pub fn ast(cx: &EarlyContext, expr: &ast::Expr, default: &'a str) -> Sugg<'a> {\n         use syntax::ast::RangeLimits;\n \n@@ -193,12 +199,16 @@ impl<'a> std::ops::Not for Sugg<'a> {\n     }\n }\n \n+/// Helper type to display either `foo` or `(foo)`.\n struct ParenHelper<T> {\n+    /// Whether parenthesis are needed.\n     paren: bool,\n+    /// The main thing to display.\n     wrapped: T,\n }\n \n impl<T> ParenHelper<T> {\n+    /// Build a `ParenHelper`.\n     fn new(paren: bool, wrapped: T) -> Self {\n         ParenHelper {\n             paren: paren,\n@@ -230,14 +240,18 @@ pub fn make_unop(op: &str, expr: Sugg) -> Sugg<'static> {\n /// Precedence of shift operator relative to other arithmetic operation is often confusing so\n /// parenthesis will always be added for a mix of these.\n pub fn make_assoc(op: AssocOp, lhs: &Sugg, rhs: &Sugg) -> Sugg<'static> {\n+    /// Whether the operator is a shift operator `<<` or `>>`.\n     fn is_shift(op: &AssocOp) -> bool {\n         matches!(*op, AssocOp::ShiftLeft | AssocOp::ShiftRight)\n     }\n \n+    /// Whether the operator is a arithmetic operator (`+`, `-`, `*`, `/`, `%`).\n     fn is_arith(op: &AssocOp) -> bool {\n         matches!(*op, AssocOp::Add | AssocOp::Subtract | AssocOp::Multiply | AssocOp::Divide | AssocOp::Modulus)\n     }\n \n+    /// Whether the operator `op` needs parenthesis with the operator `other` in the direction\n+    /// `dir`.\n     fn needs_paren(op: &AssocOp, other: &AssocOp, dir: Associativity) -> bool {\n         other.precedence() < op.precedence() ||\n             (other.precedence() == op.precedence() &&\n@@ -298,10 +312,15 @@ pub fn make_binop(op: ast::BinOpKind, lhs: &Sugg, rhs: &Sugg) -> Sugg<'static> {\n }\n \n #[derive(PartialEq, Eq)]\n+/// Operator associativity.\n enum Associativity {\n+    /// The operator is both left-associative and right-associative.\n     Both,\n+    /// The operator is left-associative.\n     Left,\n+    /// The operator is not associative.\n     None,\n+    /// The operator is right-associative.\n     Right,\n }\n \n@@ -383,6 +402,7 @@ fn indentation<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n     }\n }\n \n+/// Convenience extension trait for `DiagnosticBuilder`.\n pub trait DiagnosticBuilderExt<T: LintContext> {\n     /// Suggests to add an attribute to an item.\n     ///"}, {"sha": "e0a6cc28a02efebf622795a84e319886bdbc16d1", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -2,6 +2,7 @@\n #![feature(plugin_registrar)]\n #![feature(rustc_private)]\n #![allow(unknown_lints)]\n+#![allow(missing_docs_in_private_items)]\n \n extern crate rustc_plugin;\n use rustc_plugin::Registry;"}, {"sha": "efe6459f5877b405d2dce0386ee2a5e7a0bf87bb", "filename": "src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/src%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/src%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmain.rs?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -2,6 +2,8 @@\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n \n+#![allow(unknown_lints, missing_docs_in_private_items)]\n+\n extern crate clippy_lints;\n extern crate getopts;\n extern crate rustc;"}, {"sha": "12fd104312a9f9bea3fa4c06f80e2b02432c5af6", "filename": "tests/compile-fail/enum_glob_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/tests%2Fcompile-fail%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/tests%2Fcompile-fail%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fenum_glob_use.rs?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -1,7 +1,7 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n #![deny(clippy, clippy_pedantic)]\n-#![allow(unused_imports, dead_code)]\n+#![allow(unused_imports, dead_code, missing_docs_in_private_items)]\n \n use std::cmp::Ordering::*; //~ ERROR: don't use glob imports for enum variants\n "}, {"sha": "20803c8d0e858c01f068d5a6664c759e9bb28ff5", "filename": "tests/compile-fail/filter_methods.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/tests%2Fcompile-fail%2Ffilter_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/tests%2Fcompile-fail%2Ffilter_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffilter_methods.rs?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -2,6 +2,8 @@\n #![plugin(clippy)]\n \n #![deny(clippy, clippy_pedantic)]\n+#![allow(missing_docs_in_private_items)]\n+\n fn main() {\n     let _: Vec<_> = vec![5; 6].into_iter() //~ERROR called `filter(p).map(q)` on an `Iterator`\n                               .filter(|&x| x == 0)"}, {"sha": "91a63646998c84a009c1c66e882d92cdd82b509c", "filename": "tests/compile-fail/literals.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/tests%2Fcompile-fail%2Fliterals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/tests%2Fcompile-fail%2Fliterals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fliterals.rs?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -2,6 +2,7 @@\n #![plugin(clippy)]\n #![deny(mixed_case_hex_literals)]\n #![deny(unseparated_literal_suffix)]\n+#![deny(zero_prefixed_literal)]\n #![allow(dead_code)]\n \n fn main() {\n@@ -22,4 +23,13 @@ fn main() {\n     let fail5 = 1234isize;    //~ERROR integer type suffix should be separated\n     let fail6 = 1234usize;    //~ERROR integer type suffix should be separated\n     let fail7 = 1.5f32;       //~ERROR float type suffix should be separated\n+\n+    let ok9 = 0;\n+    let ok10 = 0_i64;\n+    let fail8 = 0123;\n+    //~^ERROR decimal constant\n+    //~|HELP remove the `0`\n+    //~|SUGGESTION = 123;\n+    //~|HELP use `0o`\n+    //~|SUGGESTION = 0o123;\n }"}, {"sha": "0412dfecac11d2a23d9e2b38730061b80e8fe51a", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -3,7 +3,7 @@\n #![plugin(clippy)]\n \n #![deny(clippy, clippy_pedantic)]\n-#![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default, new_without_default_derive)]\n+#![allow(blacklisted_name, unused, print_stdout, non_ascii_literal, new_without_default, new_without_default_derive, missing_docs_in_private_items)]\n \n use std::collections::BTreeMap;\n use std::collections::HashMap;"}, {"sha": "acd86f18ea3d5cb6b1b8213c6807485eda755655", "filename": "tests/compile-fail/missing-doc.rs", "status": "added", "additions": 202, "deletions": 0, "changes": 202, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/tests%2Fcompile-fail%2Fmissing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/tests%2Fcompile-fail%2Fmissing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmissing-doc.rs?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -0,0 +1,202 @@\n+/* This file incorporates work covered by the following copyright and\n+ * permission notice:\n+ *   Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+ *   file at the top-level directory of this distribution and at\n+ *   http://rust-lang.org/COPYRIGHT.\n+ *\n+ *   Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+ *   http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+ *   <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+ *   option. This file may not be copied, modified, or distributed\n+ *   except according to those terms.\n+ */\n+\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+#![deny(missing_docs_in_private_items)]\n+\n+// When denying at the crate level, be sure to not get random warnings from the\n+// injected intrinsics by the compiler.\n+#![allow(dead_code)]\n+#![feature(associated_type_defaults)]\n+\n+//! Some garbage docs for the crate here\n+#![doc=\"More garbage\"]\n+\n+type Typedef = String; //~ ERROR: missing documentation for a type alias\n+pub type PubTypedef = String; //~ ERROR: missing documentation for a type alias\n+\n+struct Foo { //~ ERROR: missing documentation for a struct\n+    a: isize, //~ ERROR: missing documentation for a struct field\n+    b: isize, //~ ERROR: missing documentation for a struct field\n+}\n+\n+pub struct PubFoo { //~ ERROR: missing documentation for a struct\n+    pub a: isize,      //~ ERROR: missing documentation for a struct field\n+    b: isize, //~ ERROR: missing documentation for a struct field\n+}\n+\n+#[allow(missing_docs_in_private_items)]\n+pub struct PubFoo2 {\n+    pub a: isize,\n+    pub c: isize,\n+}\n+\n+mod module_no_dox {} //~ ERROR: missing documentation for a module\n+pub mod pub_module_no_dox {} //~ ERROR: missing documentation for a module\n+\n+/// dox\n+pub fn foo() {}\n+pub fn foo2() {} //~ ERROR: missing documentation for a function\n+fn foo3() {} //~ ERROR: missing documentation for a function\n+#[allow(missing_docs_in_private_items)] pub fn foo4() {}\n+\n+/// dox\n+pub trait A {\n+    /// dox\n+    fn foo(&self);\n+    /// dox\n+    fn foo_with_impl(&self) {}\n+}\n+\n+#[allow(missing_docs_in_private_items)]\n+trait B {\n+    fn foo(&self);\n+    fn foo_with_impl(&self) {}\n+}\n+\n+pub trait C { //~ ERROR: missing documentation for a trait\n+    fn foo(&self); //~ ERROR: missing documentation for a trait method\n+    fn foo_with_impl(&self) {} //~ ERROR: missing documentation for a trait method\n+}\n+\n+#[allow(missing_docs_in_private_items)]\n+pub trait D {\n+    fn dummy(&self) { }\n+}\n+\n+/// dox\n+pub trait E {\n+    type AssociatedType; //~ ERROR: missing documentation for an associated type\n+    type AssociatedTypeDef = Self; //~ ERROR: missing documentation for an associated type\n+\n+    /// dox\n+    type DocumentedType;\n+    /// dox\n+    type DocumentedTypeDef = Self;\n+    /// dox\n+    fn dummy(&self) {}\n+}\n+\n+impl Foo {\n+    pub fn foo() {} //~ ERROR: missing documentation for a method\n+    fn bar() {} //~ ERROR: missing documentation for a method\n+}\n+\n+impl PubFoo {\n+    pub fn foo() {} //~ ERROR: missing documentation for a method\n+    /// dox\n+    pub fn foo1() {}\n+    fn foo2() {} //~ ERROR: missing documentation for a method\n+    #[allow(missing_docs_in_private_items)] pub fn foo3() {}\n+}\n+\n+#[allow(missing_docs_in_private_items)]\n+trait F {\n+    fn a();\n+    fn b(&self);\n+}\n+\n+// should need to redefine documentation for implementations of traits\n+impl F for Foo {\n+    fn a() {}\n+    fn b(&self) {}\n+}\n+\n+// It sure is nice if doc(hidden) implies allow(missing_docs), and that it\n+// applies recursively\n+#[doc(hidden)]\n+mod a {\n+    pub fn baz() {}\n+    pub mod b {\n+        pub fn baz() {}\n+    }\n+}\n+\n+enum Baz { //~ ERROR: missing documentation for an enum\n+    BazA { //~ ERROR: missing documentation for a variant\n+        a: isize, //~ ERROR: missing documentation for a struct field\n+        b: isize //~ ERROR: missing documentation for a struct field\n+    },\n+    BarB //~ ERROR: missing documentation for a variant\n+}\n+\n+pub enum PubBaz { //~ ERROR: missing documentation for an enum\n+    PubBazA { //~ ERROR: missing documentation for a variant\n+        a: isize, //~ ERROR: missing documentation for a struct field\n+    },\n+}\n+\n+/// dox\n+pub enum PubBaz2 {\n+    /// dox\n+    PubBaz2A {\n+        /// dox\n+        a: isize,\n+    },\n+}\n+\n+#[allow(missing_docs_in_private_items)]\n+pub enum PubBaz3 {\n+    PubBaz3A {\n+        b: isize\n+    },\n+}\n+\n+#[doc(hidden)]\n+pub fn baz() {}\n+\n+\n+const FOO: u32 = 0; //~ ERROR: missing documentation for a const\n+/// dox\n+pub const FOO1: u32 = 0;\n+#[allow(missing_docs_in_private_items)]\n+pub const FOO2: u32 = 0;\n+#[doc(hidden)]\n+pub const FOO3: u32 = 0;\n+pub const FOO4: u32 = 0; //~ ERROR: missing documentation for a const\n+\n+\n+static BAR: u32 = 0; //~ ERROR: missing documentation for a static\n+/// dox\n+pub static BAR1: u32 = 0;\n+#[allow(missing_docs_in_private_items)]\n+pub static BAR2: u32 = 0;\n+#[doc(hidden)]\n+pub static BAR3: u32 = 0;\n+pub static BAR4: u32 = 0; //~ ERROR: missing documentation for a static\n+\n+\n+mod internal_impl { //~ ERROR: missing documentation for a module\n+    /// dox\n+    pub fn documented() {}\n+    pub fn undocumented1() {} //~ ERROR: missing documentation for a function\n+    pub fn undocumented2() {} //~ ERROR: missing documentation for a function\n+    fn undocumented3() {} //~ ERROR: missing documentation for a function\n+    /// dox\n+    pub mod globbed {\n+        /// dox\n+        pub fn also_documented() {}\n+        pub fn also_undocumented1() {} //~ ERROR: missing documentation for a function\n+        fn also_undocumented2() {} //~ ERROR: missing documentation for a function\n+    }\n+}\n+/// dox\n+pub mod public_interface {\n+    pub use internal_impl::documented as foo;\n+    pub use internal_impl::undocumented1 as bar;\n+    pub use internal_impl::{documented, undocumented2};\n+    pub use internal_impl::globbed::*;\n+}\n+\n+fn main() {} //~ ERROR: missing documentation for a function"}, {"sha": "fae87cd97503aa6bc65034fe06fa812ddc8bccae", "filename": "tests/compile-fail/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/tests%2Fcompile-fail%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e/tests%2Fcompile-fail%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fshadow.rs?ref=c67944b3ea9cf1dafc63c422b8d211f84e5dcb4e", "patch": "@@ -1,8 +1,8 @@\n #![feature(plugin)]\n #![plugin(clippy)]\n \n-#![allow(unused_parens, unused_variables)]\n #![deny(clippy, clippy_pedantic)]\n+#![allow(unused_parens, unused_variables, missing_docs_in_private_items)]\n \n fn id<T>(x: T) -> T { x }\n "}]}