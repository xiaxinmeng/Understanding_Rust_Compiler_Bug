{"sha": "d91da405df2dc33a8baf0a580ad564b94e53d835", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MWRhNDA1ZGYyZGMzM2E4YmFmMGE1ODBhZDU2NGI5NGU1M2Q4MzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-05T19:00:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-04-05T19:00:41Z"}, "message": "Auto merge of #6463 - xFrednet:5234-shared-code-in-if-blocks, r=phansch\n\nNew Lint: `branches_sharing_code`\n\nThis lint checks if all `if`-blocks contain some statements that are the same and can be moved out of the blocks to prevent code duplication. Here is an example:\n\n```rust\nlet _ = if ... {\n    println!(\"Start\"); // <-- Lint for code duplication\n    let _a = 99;\n    println!(\"End\"); // <-- Lint for code duplication\n    false\n} else {\n    println!(\"Start\");\n    let _b = 17;\n    println!(\"End\");\n    false\n};\n```\n\nThis could be written as:\n\n```rust\nprintln!(\"Start\");\n\nlet _ = if ... {\n    let _a = 99;\n    false\n} else {\n    let _b = 17;\n    false\n};\n\nprintln!(\"End\");\n```\n\n---\n\nThis lint will get masked by the `IF_SAME_THEN_ELSE` lint. I think it makes more sense to only emit one lint per if block. This means that the folloing example:\n\n```rust\nif ... {\n    let _a = 17;\n} else {\n    let _a = 17;\n}\n```\n\nWill only trigger the `IF_SAME_THEN_ELSE` lint and not the `SHARED_CODE_IN_IF_BLOCKS` lint.\n\n---\n\ncloses: #5234\n\nchangelog: Added a new lint: `branches_sharing_code`\n\nAnd hello to the one that is writing the changelog for this release :D", "tree": {"sha": "d1d12a0e10cc58e40c43e249670b0a2be843f36f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1d12a0e10cc58e40c43e249670b0a2be843f36f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d91da405df2dc33a8baf0a580ad564b94e53d835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d91da405df2dc33a8baf0a580ad564b94e53d835", "html_url": "https://github.com/rust-lang/rust/commit/d91da405df2dc33a8baf0a580ad564b94e53d835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d91da405df2dc33a8baf0a580ad564b94e53d835/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a45e437b8abb3f0e9fa056c26e8e52ed5d0ebd0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a45e437b8abb3f0e9fa056c26e8e52ed5d0ebd0", "html_url": "https://github.com/rust-lang/rust/commit/1a45e437b8abb3f0e9fa056c26e8e52ed5d0ebd0"}, {"sha": "a6f54f5dfdfdf0017ffecfbcd6f43352b8b71ca1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6f54f5dfdfdf0017ffecfbcd6f43352b8b71ca1", "html_url": "https://github.com/rust-lang/rust/commit/a6f54f5dfdfdf0017ffecfbcd6f43352b8b71ca1"}], "stats": {"total": 2025, "additions": 1785, "deletions": 240}, "files": [{"sha": "73997192ae0d5537db33b9c7a1f52990cf0d3c21", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -2129,6 +2129,7 @@ Released 2018-09-13\n [`borrowed_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box\n [`box_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_vec\n [`boxed_local`]: https://rust-lang.github.io/rust-clippy/master/index.html#boxed_local\n+[`branches_sharing_code`]: https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code\n [`builtin_type_shadow`]: https://rust-lang.github.io/rust-clippy/master/index.html#builtin_type_shadow\n [`bytes_nth`]: https://rust-lang.github.io/rust-clippy/master/index.html#bytes_nth\n [`cargo_common_metadata`]: https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata"}, {"sha": "1b982221b0653a57a8deb8eb7d645b7ba37d46c6", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 448, "deletions": 40, "changes": 488, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -1,9 +1,19 @@\n-use clippy_utils::diagnostics::span_lint_and_note;\n-use clippy_utils::{eq_expr_value, in_macro, search_same, SpanlessEq, SpanlessHash};\n-use clippy_utils::{get_parent_expr, if_sequence};\n-use rustc_hir::{Block, Expr, ExprKind};\n+use clippy_utils::diagnostics::{span_lint_and_note, span_lint_and_then};\n+use clippy_utils::source::{first_line_of_span, indent_of, reindent_multiline, snippet, snippet_opt};\n+use clippy_utils::{\n+    both, count_eq, eq_expr_value, get_enclosing_block, get_parent_expr, if_sequence, in_macro, parent_node_is_if_expr,\n+    run_lints, search_same, ContainsName, SpanlessEq, SpanlessHash,\n+};\n+use if_chain::if_chain;\n+use rustc_data_structures::fx::FxHashSet;\n+use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n+use rustc_hir::{Block, Expr, ExprKind, HirId};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{source_map::Span, symbol::Symbol, BytePos};\n+use std::borrow::Cow;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for consecutive `if`s with the same condition.\n@@ -104,47 +114,457 @@ declare_clippy_lint! {\n     \"`if` with the same `then` and `else` blocks\"\n }\n \n-declare_lint_pass!(CopyAndPaste => [IFS_SAME_COND, SAME_FUNCTIONS_IN_IF_CONDITION, IF_SAME_THEN_ELSE]);\n+declare_clippy_lint! {\n+    /// **What it does:** Checks if the `if` and `else` block contain shared code that can be\n+    /// moved out of the blocks.\n+    ///\n+    /// **Why is this bad?** Duplicate code is less maintainable.\n+    ///\n+    /// **Known problems:** Hopefully none.\n+    ///\n+    /// **Example:**\n+    /// ```ignore\n+    /// let foo = if \u2026 {\n+    ///     println!(\"Hello World\");\n+    ///     13\n+    /// } else {\n+    ///     println!(\"Hello World\");\n+    ///     42\n+    /// };\n+    /// ```\n+    ///\n+    /// Could be written as:\n+    /// ```ignore\n+    /// println!(\"Hello World\");\n+    /// let foo = if \u2026 {\n+    ///     13\n+    /// } else {\n+    ///     42\n+    /// };\n+    /// ```\n+    pub BRANCHES_SHARING_CODE,\n+    complexity,\n+    \"`if` statement with shared code in all blocks\"\n+}\n+\n+declare_lint_pass!(CopyAndPaste => [\n+    IFS_SAME_COND,\n+    SAME_FUNCTIONS_IN_IF_CONDITION,\n+    IF_SAME_THEN_ELSE,\n+    BRANCHES_SHARING_CODE\n+]);\n \n impl<'tcx> LateLintPass<'tcx> for CopyAndPaste {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if !expr.span.from_expansion() {\n-            // skip ifs directly in else, it will be checked in the parent if\n-            if let Some(&Expr {\n-                kind: ExprKind::If(_, _, Some(ref else_expr)),\n-                ..\n-            }) = get_parent_expr(cx, expr)\n-            {\n-                if else_expr.hir_id == expr.hir_id {\n-                    return;\n+            if let ExprKind::If(_, _, _) = expr.kind {\n+                // skip ifs directly in else, it will be checked in the parent if\n+                if let Some(&Expr {\n+                    kind: ExprKind::If(_, _, Some(ref else_expr)),\n+                    ..\n+                }) = get_parent_expr(cx, expr)\n+                {\n+                    if else_expr.hir_id == expr.hir_id {\n+                        return;\n+                    }\n                 }\n+\n+                let (conds, blocks) = if_sequence(expr);\n+                // Conditions\n+                lint_same_cond(cx, &conds);\n+                lint_same_fns_in_if_cond(cx, &conds);\n+                // Block duplication\n+                lint_same_then_else(cx, &blocks, conds.len() == blocks.len(), expr);\n             }\n+        }\n+    }\n+}\n \n-            let (conds, blocks) = if_sequence(expr);\n-            lint_same_then_else(cx, &blocks);\n-            lint_same_cond(cx, &conds);\n-            lint_same_fns_in_if_cond(cx, &conds);\n+/// Implementation of `BRANCHES_SHARING_CODE` and `IF_SAME_THEN_ELSE` if the blocks are equal.\n+fn lint_same_then_else<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    blocks: &[&Block<'tcx>],\n+    has_conditional_else: bool,\n+    expr: &'tcx Expr<'_>,\n+) {\n+    // We only lint ifs with multiple blocks\n+    if blocks.len() < 2 || parent_node_is_if_expr(expr, cx) {\n+        return;\n+    }\n+\n+    // Check if each block has shared code\n+    let has_expr = blocks[0].expr.is_some();\n+    let (start_eq, mut end_eq, expr_eq) = scan_block_for_eq(cx, blocks);\n+\n+    // BRANCHES_SHARING_CODE prerequisites\n+    if has_conditional_else || (start_eq == 0 && end_eq == 0 && (has_expr && !expr_eq)) {\n+        return;\n+    }\n+\n+    // Only the start is the same\n+    if start_eq != 0 && end_eq == 0 && (!has_expr || !expr_eq) {\n+        let block = blocks[0];\n+        let start_stmts = block.stmts.split_at(start_eq).0;\n+\n+        let mut start_walker = UsedValueFinderVisitor::new(cx);\n+        for stmt in start_stmts {\n+            intravisit::walk_stmt(&mut start_walker, stmt);\n         }\n+\n+        emit_branches_sharing_code_lint(\n+            cx,\n+            start_eq,\n+            0,\n+            false,\n+            check_for_warn_of_moved_symbol(cx, &start_walker.def_symbols, expr),\n+            blocks,\n+            expr,\n+        );\n+    } else if end_eq != 0 || (has_expr && expr_eq) {\n+        let block = blocks[blocks.len() - 1];\n+        let (start_stmts, block_stmts) = block.stmts.split_at(start_eq);\n+        let (block_stmts, end_stmts) = block_stmts.split_at(block_stmts.len() - end_eq);\n+\n+        // Scan start\n+        let mut start_walker = UsedValueFinderVisitor::new(cx);\n+        for stmt in start_stmts {\n+            intravisit::walk_stmt(&mut start_walker, stmt);\n+        }\n+        let mut moved_syms = start_walker.def_symbols;\n+\n+        // Scan block\n+        let mut block_walker = UsedValueFinderVisitor::new(cx);\n+        for stmt in block_stmts {\n+            intravisit::walk_stmt(&mut block_walker, stmt);\n+        }\n+        let mut block_defs = block_walker.defs;\n+\n+        // Scan moved stmts\n+        let mut moved_start: Option<usize> = None;\n+        let mut end_walker = UsedValueFinderVisitor::new(cx);\n+        for (index, stmt) in end_stmts.iter().enumerate() {\n+            intravisit::walk_stmt(&mut end_walker, stmt);\n+\n+            for value in &end_walker.uses {\n+                // Well we can't move this and all prev statements. So reset\n+                if block_defs.contains(&value) {\n+                    moved_start = Some(index + 1);\n+                    end_walker.defs.drain().for_each(|x| {\n+                        block_defs.insert(x);\n+                    });\n+\n+                    end_walker.def_symbols.clear();\n+                }\n+            }\n+\n+            end_walker.uses.clear();\n+        }\n+\n+        if let Some(moved_start) = moved_start {\n+            end_eq -= moved_start;\n+        }\n+\n+        let end_linable = block.expr.map_or_else(\n+            || end_eq != 0,\n+            |expr| {\n+                intravisit::walk_expr(&mut end_walker, expr);\n+                end_walker.uses.iter().any(|x| !block_defs.contains(x))\n+            },\n+        );\n+\n+        if end_linable {\n+            end_walker.def_symbols.drain().for_each(|x| {\n+                moved_syms.insert(x);\n+            });\n+        }\n+\n+        emit_branches_sharing_code_lint(\n+            cx,\n+            start_eq,\n+            end_eq,\n+            end_linable,\n+            check_for_warn_of_moved_symbol(cx, &moved_syms, expr),\n+            blocks,\n+            expr,\n+        );\n     }\n }\n \n-/// Implementation of `IF_SAME_THEN_ELSE`.\n-fn lint_same_then_else(cx: &LateContext<'_>, blocks: &[&Block<'_>]) {\n-    let eq: &dyn Fn(&&Block<'_>, &&Block<'_>) -> bool =\n-        &|&lhs, &rhs| -> bool { SpanlessEq::new(cx).eq_block(lhs, rhs) };\n+fn scan_block_for_eq(cx: &LateContext<'tcx>, blocks: &[&Block<'tcx>]) -> (usize, usize, bool) {\n+    let mut start_eq = usize::MAX;\n+    let mut end_eq = usize::MAX;\n+    let mut expr_eq = true;\n+    for win in blocks.windows(2) {\n+        let l_stmts = win[0].stmts;\n+        let r_stmts = win[1].stmts;\n \n-    if let Some((i, j)) = search_same_sequenced(blocks, eq) {\n-        span_lint_and_note(\n+        // `SpanlessEq` now keeps track of the locals and is therefore context sensitive clippy#6752.\n+        // The comparison therefore needs to be done in a way that builds the correct context.\n+        let mut evaluator = SpanlessEq::new(cx);\n+        let mut evaluator = evaluator.inter_expr();\n+\n+        let current_start_eq = count_eq(&mut l_stmts.iter(), &mut r_stmts.iter(), |l, r| evaluator.eq_stmt(l, r));\n+\n+        let current_end_eq = {\n+            // We skip the middle statements which can't be equal\n+            let end_comparison_count = l_stmts.len().min(r_stmts.len()) - current_start_eq;\n+            let it1 = l_stmts.iter().skip(l_stmts.len() - end_comparison_count);\n+            let it2 = r_stmts.iter().skip(r_stmts.len() - end_comparison_count);\n+            it1.zip(it2)\n+                .fold(0, |acc, (l, r)| if evaluator.eq_stmt(l, r) { acc + 1 } else { 0 })\n+        };\n+        let block_expr_eq = both(&win[0].expr, &win[1].expr, |l, r| evaluator.eq_expr(l, r));\n+\n+        // IF_SAME_THEN_ELSE\n+        if_chain! {\n+            if block_expr_eq;\n+            if l_stmts.len() == r_stmts.len();\n+            if l_stmts.len() == current_start_eq;\n+            if run_lints(cx, &[IF_SAME_THEN_ELSE], win[0].hir_id);\n+            if run_lints(cx, &[IF_SAME_THEN_ELSE], win[1].hir_id);\n+            then {\n+                span_lint_and_note(\n+                    cx,\n+                    IF_SAME_THEN_ELSE,\n+                    win[0].span,\n+                    \"this `if` has identical blocks\",\n+                    Some(win[1].span),\n+                    \"same as this\",\n+                );\n+\n+                return (0, 0, false);\n+            }\n+        }\n+\n+        start_eq = start_eq.min(current_start_eq);\n+        end_eq = end_eq.min(current_end_eq);\n+        expr_eq &= block_expr_eq;\n+    }\n+\n+    let has_expr = blocks[0].expr.is_some();\n+    if has_expr && !expr_eq {\n+        end_eq = 0;\n+    }\n+\n+    // Check if the regions are overlapping. Set `end_eq` to prevent the overlap\n+    let min_block_size = blocks.iter().map(|x| x.stmts.len()).min().unwrap();\n+    if (start_eq + end_eq) > min_block_size {\n+        end_eq = min_block_size - start_eq;\n+    }\n+\n+    (start_eq, end_eq, expr_eq)\n+}\n+\n+fn check_for_warn_of_moved_symbol(\n+    cx: &LateContext<'tcx>,\n+    symbols: &FxHashSet<Symbol>,\n+    if_expr: &'tcx Expr<'_>,\n+) -> bool {\n+    get_enclosing_block(cx, if_expr.hir_id).map_or(false, |block| {\n+        let ignore_span = block.span.shrink_to_lo().to(if_expr.span);\n+\n+        symbols\n+            .iter()\n+            .filter(|sym| !sym.as_str().starts_with('_'))\n+            .any(move |sym| {\n+                let mut walker = ContainsName {\n+                    name: *sym,\n+                    result: false,\n+                };\n+\n+                // Scan block\n+                block\n+                    .stmts\n+                    .iter()\n+                    .filter(|stmt| !ignore_span.overlaps(stmt.span))\n+                    .for_each(|stmt| intravisit::walk_stmt(&mut walker, stmt));\n+\n+                if let Some(expr) = block.expr {\n+                    intravisit::walk_expr(&mut walker, expr);\n+                }\n+\n+                walker.result\n+            })\n+    })\n+}\n+\n+fn emit_branches_sharing_code_lint(\n+    cx: &LateContext<'tcx>,\n+    start_stmts: usize,\n+    end_stmts: usize,\n+    lint_end: bool,\n+    warn_about_moved_symbol: bool,\n+    blocks: &[&Block<'tcx>],\n+    if_expr: &'tcx Expr<'_>,\n+) {\n+    if start_stmts == 0 && !lint_end {\n+        return;\n+    }\n+\n+    // (help, span, suggestion)\n+    let mut suggestions: Vec<(&str, Span, String)> = vec![];\n+    let mut add_expr_note = false;\n+\n+    // Construct suggestions\n+    if start_stmts > 0 {\n+        let block = blocks[0];\n+        let span_start = first_line_of_span(cx, if_expr.span).shrink_to_lo();\n+        let span_end = block.stmts[start_stmts - 1].span.source_callsite();\n+\n+        let cond_span = first_line_of_span(cx, if_expr.span).until(block.span);\n+        let cond_snippet = reindent_multiline(snippet(cx, cond_span, \"_\"), false, None);\n+        let cond_indent = indent_of(cx, cond_span);\n+        let moved_span = block.stmts[0].span.source_callsite().to(span_end);\n+        let moved_snippet = reindent_multiline(snippet(cx, moved_span, \"_\"), true, None);\n+        let suggestion = moved_snippet.to_string() + \"\\n\" + &cond_snippet + \"{\";\n+        let suggestion = reindent_multiline(Cow::Borrowed(&suggestion), true, cond_indent);\n+\n+        let span = span_start.to(span_end);\n+        suggestions.push((\"start\", span, suggestion.to_string()));\n+    }\n+\n+    if lint_end {\n+        let block = blocks[blocks.len() - 1];\n+        let span_end = block.span.shrink_to_hi();\n+\n+        let moved_start = if end_stmts == 0 && block.expr.is_some() {\n+            block.expr.unwrap().span\n+        } else {\n+            block.stmts[block.stmts.len() - end_stmts].span\n+        }\n+        .source_callsite();\n+        let moved_end = block\n+            .expr\n+            .map_or_else(|| block.stmts[block.stmts.len() - 1].span, |expr| expr.span)\n+            .source_callsite();\n+\n+        let moved_span = moved_start.to(moved_end);\n+        let moved_snipped = reindent_multiline(snippet(cx, moved_span, \"_\"), true, None);\n+        let indent = indent_of(cx, if_expr.span.shrink_to_hi());\n+        let suggestion = \"}\\n\".to_string() + &moved_snipped;\n+        let suggestion = reindent_multiline(Cow::Borrowed(&suggestion), true, indent);\n+\n+        let mut span = moved_start.to(span_end);\n+        // Improve formatting if the inner block has indention (i.e. normal Rust formatting)\n+        let test_span = Span::new(span.lo() - BytePos(4), span.lo(), span.ctxt());\n+        if snippet_opt(cx, test_span)\n+            .map(|snip| snip == \"    \")\n+            .unwrap_or_default()\n+        {\n+            span = span.with_lo(test_span.lo());\n+        }\n+\n+        suggestions.push((\"end\", span, suggestion.to_string()));\n+        add_expr_note = !cx.typeck_results().expr_ty(if_expr).is_unit()\n+    }\n+\n+    let add_optional_msgs = |diag: &mut DiagnosticBuilder<'_>| {\n+        if add_expr_note {\n+            diag.note(\"The end suggestion probably needs some adjustments to use the expression result correctly\");\n+        }\n+\n+        if warn_about_moved_symbol {\n+            diag.warn(\"Some moved values might need to be renamed to avoid wrong references\");\n+        }\n+    };\n+\n+    // Emit lint\n+    if suggestions.len() == 1 {\n+        let (place_str, span, sugg) = suggestions.pop().unwrap();\n+        let msg = format!(\"all if blocks contain the same code at the {}\", place_str);\n+        let help = format!(\"consider moving the {} statements out like this\", place_str);\n+        span_lint_and_then(cx, BRANCHES_SHARING_CODE, span, msg.as_str(), |diag| {\n+            diag.span_suggestion(span, help.as_str(), sugg, Applicability::Unspecified);\n+\n+            add_optional_msgs(diag);\n+        });\n+    } else if suggestions.len() == 2 {\n+        let (_, end_span, end_sugg) = suggestions.pop().unwrap();\n+        let (_, start_span, start_sugg) = suggestions.pop().unwrap();\n+        span_lint_and_then(\n             cx,\n-            IF_SAME_THEN_ELSE,\n-            j.span,\n-            \"this `if` has identical blocks\",\n-            Some(i.span),\n-            \"same as this\",\n+            BRANCHES_SHARING_CODE,\n+            start_span,\n+            \"all if blocks contain the same code at the start and the end. Here at the start\",\n+            move |diag| {\n+                diag.span_note(end_span, \"and here at the end\");\n+\n+                diag.span_suggestion(\n+                    start_span,\n+                    \"consider moving the start statements out like this\",\n+                    start_sugg,\n+                    Applicability::Unspecified,\n+                );\n+\n+                diag.span_suggestion(\n+                    end_span,\n+                    \"and consider moving the end statements out like this\",\n+                    end_sugg,\n+                    Applicability::Unspecified,\n+                );\n+\n+                add_optional_msgs(diag);\n+            },\n         );\n     }\n }\n \n+/// This visitor collects `HirId`s and Symbols of defined symbols and `HirId`s of used values.\n+struct UsedValueFinderVisitor<'a, 'tcx> {\n+    cx: &'a LateContext<'tcx>,\n+\n+    /// The `HirId`s of defined values in the scanned statements\n+    defs: FxHashSet<HirId>,\n+\n+    /// The Symbols of the defined symbols in the scanned statements\n+    def_symbols: FxHashSet<Symbol>,\n+\n+    /// The `HirId`s of the used values\n+    uses: FxHashSet<HirId>,\n+}\n+\n+impl<'a, 'tcx> UsedValueFinderVisitor<'a, 'tcx> {\n+    fn new(cx: &'a LateContext<'tcx>) -> Self {\n+        UsedValueFinderVisitor {\n+            cx,\n+            defs: FxHashSet::default(),\n+            def_symbols: FxHashSet::default(),\n+            uses: FxHashSet::default(),\n+        }\n+    }\n+}\n+\n+impl<'a, 'tcx> Visitor<'tcx> for UsedValueFinderVisitor<'a, 'tcx> {\n+    type Map = Map<'tcx>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::All(self.cx.tcx.hir())\n+    }\n+\n+    fn visit_local(&mut self, l: &'tcx rustc_hir::Local<'tcx>) {\n+        let local_id = l.pat.hir_id;\n+        self.defs.insert(local_id);\n+\n+        if let Some(sym) = l.pat.simple_ident() {\n+            self.def_symbols.insert(sym.name);\n+        }\n+\n+        if let Some(expr) = l.init {\n+            intravisit::walk_expr(self, expr);\n+        }\n+    }\n+\n+    fn visit_qpath(&mut self, qpath: &'tcx rustc_hir::QPath<'tcx>, id: HirId, _span: rustc_span::Span) {\n+        if let rustc_hir::QPath::Resolved(_, ref path) = *qpath {\n+            if path.segments.len() == 1 {\n+                if let rustc_hir::def::Res::Local(var) = self.cx.qpath_res(qpath, id) {\n+                    self.uses.insert(var);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n /// Implementation of `IFS_SAME_COND`.\n fn lint_same_cond(cx: &LateContext<'_>, conds: &[&Expr<'_>]) {\n     let hash: &dyn Fn(&&Expr<'_>) -> u64 = &|expr| -> u64 {\n@@ -198,15 +618,3 @@ fn lint_same_fns_in_if_cond(cx: &LateContext<'_>, conds: &[&Expr<'_>]) {\n         );\n     }\n }\n-\n-fn search_same_sequenced<T, Eq>(exprs: &[T], eq: Eq) -> Option<(&T, &T)>\n-where\n-    Eq: Fn(&T, &T) -> bool,\n-{\n-    for win in exprs.windows(2) {\n-        if eq(&win[0], &win[1]) {\n-            return Some((&win[0], &win[1]));\n-        }\n-    }\n-    None\n-}"}, {"sha": "43e89c2475f3a1c1f82364d2692e43e0f0315a5b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -613,6 +613,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &collapsible_if::COLLAPSIBLE_IF,\n         &collapsible_match::COLLAPSIBLE_MATCH,\n         &comparison_chain::COMPARISON_CHAIN,\n+        &copies::BRANCHES_SHARING_CODE,\n         &copies::IFS_SAME_COND,\n         &copies::IF_SAME_THEN_ELSE,\n         &copies::SAME_FUNCTIONS_IN_IF_CONDITION,\n@@ -1482,6 +1483,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&collapsible_if::COLLAPSIBLE_IF),\n         LintId::of(&collapsible_match::COLLAPSIBLE_MATCH),\n         LintId::of(&comparison_chain::COMPARISON_CHAIN),\n+        LintId::of(&copies::BRANCHES_SHARING_CODE),\n         LintId::of(&copies::IFS_SAME_COND),\n         LintId::of(&copies::IF_SAME_THEN_ELSE),\n         LintId::of(&default::FIELD_REASSIGN_WITH_DEFAULT),\n@@ -1870,6 +1872,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&booleans::NONMINIMAL_BOOL),\n         LintId::of(&casts::CHAR_LIT_AS_U8),\n         LintId::of(&casts::UNNECESSARY_CAST),\n+        LintId::of(&copies::BRANCHES_SHARING_CODE),\n         LintId::of(&double_comparison::DOUBLE_COMPARISONS),\n         LintId::of(&double_parens::DOUBLE_PARENS),\n         LintId::of(&duration_subsec::DURATION_SUBSEC),"}, {"sha": "ecb8b72ef46105b28838b2893c5e41e0946e5157", "filename": "clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 16, "deletions": 32, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -44,44 +44,28 @@ pub fn check(\n             // \"mul\" is omitted because lhs can be negative.\n             _ => return,\n         }\n-\n-        let mut applicability = Applicability::MachineApplicable;\n-        span_lint_and_sugg(\n-            cx,\n-            super::MANUAL_SATURATING_ARITHMETIC,\n-            expr.span,\n-            \"manual saturating arithmetic\",\n-            &format!(\"try using `saturating_{}`\", arith),\n-            format!(\n-                \"{}.saturating_{}({})\",\n-                snippet_with_applicability(cx, arith_lhs.span, \"..\", &mut applicability),\n-                arith,\n-                snippet_with_applicability(cx, arith_rhs.span, \"..\", &mut applicability),\n-            ),\n-            applicability,\n-        );\n     } else {\n         match (mm, arith) {\n             (MinMax::Max, \"add\" | \"mul\") | (MinMax::Min, \"sub\") => (),\n             _ => return,\n         }\n-\n-        let mut applicability = Applicability::MachineApplicable;\n-        span_lint_and_sugg(\n-            cx,\n-            super::MANUAL_SATURATING_ARITHMETIC,\n-            expr.span,\n-            \"manual saturating arithmetic\",\n-            &format!(\"try using `saturating_{}`\", arith),\n-            format!(\n-                \"{}.saturating_{}({})\",\n-                snippet_with_applicability(cx, arith_lhs.span, \"..\", &mut applicability),\n-                arith,\n-                snippet_with_applicability(cx, arith_rhs.span, \"..\", &mut applicability),\n-            ),\n-            applicability,\n-        );\n     }\n+\n+    let mut applicability = Applicability::MachineApplicable;\n+    span_lint_and_sugg(\n+        cx,\n+        super::MANUAL_SATURATING_ARITHMETIC,\n+        expr.span,\n+        \"manual saturating arithmetic\",\n+        &format!(\"try using `saturating_{}`\", arith),\n+        format!(\n+            \"{}.saturating_{}({})\",\n+            snippet_with_applicability(cx, arith_lhs.span, \"..\", &mut applicability),\n+            arith,\n+            snippet_with_applicability(cx, arith_rhs.span, \"..\", &mut applicability),\n+        ),\n+        applicability,\n+    );\n }\n \n #[derive(PartialEq, Eq)]"}, {"sha": "7f827f1759d2f9542a6fa53668b6aa7204f0507e", "filename": "clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/clippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/clippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fdiagnostics.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -218,6 +218,11 @@ where\n     multispan_sugg_with_applicability(diag, help_msg, Applicability::Unspecified, sugg)\n }\n \n+/// Create a suggestion made from several `span \u2192 replacement`.\n+///\n+/// rustfix currently doesn't support the automatic application of suggestions with\n+/// multiple spans. This is tracked in issue [rustfix#141](https://github.com/rust-lang/rustfix/issues/141).\n+/// Suggestions with multiple spans will be silently ignored.\n pub fn multispan_sugg_with_applicability<I>(\n     diag: &mut DiagnosticBuilder<'_>,\n     help_msg: &str,"}, {"sha": "571eec9e530fb7be5a25a72a9718f4ef48470141", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -58,13 +58,14 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n \n     /// Use this method to wrap comparisons that may involve inter-expression context.\n     /// See `self.locals`.\n-    fn inter_expr(&mut self) -> HirEqInterExpr<'_, 'a, 'tcx> {\n+    pub fn inter_expr(&mut self) -> HirEqInterExpr<'_, 'a, 'tcx> {\n         HirEqInterExpr {\n             inner: self,\n             locals: HirIdMap::default(),\n         }\n     }\n \n+    #[allow(dead_code)]\n     pub fn eq_block(&mut self, left: &Block<'_>, right: &Block<'_>) -> bool {\n         self.inter_expr().eq_block(left, right)\n     }\n@@ -82,7 +83,7 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n     }\n }\n \n-struct HirEqInterExpr<'a, 'b, 'tcx> {\n+pub struct HirEqInterExpr<'a, 'b, 'tcx> {\n     inner: &'a mut SpanlessEq<'b, 'tcx>,\n \n     // When binding are declared, the binding ID in the left expression is mapped to the one on the\n@@ -92,12 +93,14 @@ struct HirEqInterExpr<'a, 'b, 'tcx> {\n }\n \n impl HirEqInterExpr<'_, '_, '_> {\n-    fn eq_stmt(&mut self, left: &Stmt<'_>, right: &Stmt<'_>) -> bool {\n+    pub fn eq_stmt(&mut self, left: &Stmt<'_>, right: &Stmt<'_>) -> bool {\n         match (&left.kind, &right.kind) {\n             (&StmtKind::Local(ref l), &StmtKind::Local(ref r)) => {\n-                self.eq_pat(&l.pat, &r.pat)\n+                // eq_pat adds the HirIds to the locals map. We therefor call it last to make sure that\n+                // these only get added if the init and type is equal.\n+                both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n                     && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r))\n-                    && both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n+                    && self.eq_pat(&l.pat, &r.pat)\n             },\n             (&StmtKind::Expr(ref l), &StmtKind::Expr(ref r)) | (&StmtKind::Semi(ref l), &StmtKind::Semi(ref r)) => {\n                 self.eq_expr(l, r)\n@@ -159,7 +162,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n     }\n \n     #[allow(clippy::similar_names)]\n-    fn eq_expr(&mut self, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n+    pub fn eq_expr(&mut self, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n         if !self.inner.allow_side_effects && differing_macro_contexts(left.span, right.span) {\n             return false;\n         }\n@@ -483,6 +486,15 @@ pub fn over<X>(left: &[X], right: &[X], mut eq_fn: impl FnMut(&X, &X) -> bool) -\n     left.len() == right.len() && left.iter().zip(right).all(|(x, y)| eq_fn(x, y))\n }\n \n+/// Counts how many elements of the slices are equal as per `eq_fn`.\n+pub fn count_eq<X: Sized>(\n+    left: &mut dyn Iterator<Item = X>,\n+    right: &mut dyn Iterator<Item = X>,\n+    mut eq_fn: impl FnMut(&X, &X) -> bool,\n+) -> usize {\n+    left.zip(right).take_while(|(l, r)| eq_fn(l, r)).count()\n+}\n+\n /// Checks if two expressions evaluate to the same value, and don't contain any side effects.\n pub fn eq_expr_value(cx: &LateContext<'_>, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n     SpanlessEq::new(cx).deny_side_effects().eq_expr(left, right)"}, {"sha": "7ce90ffd9f0f1334d04c4961dc96f248b7264a52", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -47,7 +47,7 @@ pub mod usage;\n pub mod visitors;\n \n pub use self::attrs::*;\n-pub use self::hir_utils::{both, eq_expr_value, over, SpanlessEq, SpanlessHash};\n+pub use self::hir_utils::{both, count_eq, eq_expr_value, over, SpanlessEq, SpanlessHash};\n \n use std::collections::hash_map::Entry;\n use std::hash::BuildHasherDefault;\n@@ -609,9 +609,9 @@ pub fn get_pat_name(pat: &Pat<'_>) -> Option<Symbol> {\n     }\n }\n \n-struct ContainsName {\n-    name: Symbol,\n-    result: bool,\n+pub struct ContainsName {\n+    pub name: Symbol,\n+    pub result: bool,\n }\n \n impl<'tcx> Visitor<'tcx> for ContainsName {\n@@ -1216,6 +1216,8 @@ pub fn if_sequence<'tcx>(mut expr: &'tcx Expr<'tcx>) -> (Vec<&'tcx Expr<'tcx>>,\n     (conds, blocks)\n }\n \n+/// This function returns true if the given expression is the `else` or `if else` part of an if\n+/// statement\n pub fn parent_node_is_if_expr(expr: &Expr<'_>, cx: &LateContext<'_>) -> bool {\n     let map = cx.tcx.hir();\n     let parent_id = map.get_parent_node(expr.hir_id);\n@@ -1326,6 +1328,16 @@ pub fn fn_def_id(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<DefId> {\n     }\n }\n \n+/// This function checks if any of the lints in the slice is enabled for the provided `HirId`.\n+/// A lint counts as enabled with any of the levels: `Level::Forbid` | `Level::Deny` | `Level::Warn`\n+///\n+/// ```ignore\n+/// #[deny(clippy::YOUR_AWESOME_LINT)]\n+/// println!(\"Hello, World!\"); // <- Clippy code: run_lints(cx, &[YOUR_AWESOME_LINT], id) == true\n+///\n+/// #[allow(clippy::YOUR_AWESOME_LINT)]\n+/// println!(\"See you soon!\"); // <- Clippy code: run_lints(cx, &[YOUR_AWESOME_LINT], id) == false\n+/// ```\n pub fn run_lints(cx: &LateContext<'_>, lints: &[&'static Lint], id: HirId) -> bool {\n     lints.iter().any(|lint| {\n         matches!("}, {"sha": "c389c243d447e45adaf8e20707d8d1013ee6736e", "filename": "tests/ui/branches_sharing_code/shared_at_bottom.rs", "status": "added", "additions": 209, "deletions": 0, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -0,0 +1,209 @@\n+#![allow(dead_code)]\n+#![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n+\n+// This tests the branches_sharing_code lint at the end of blocks\n+\n+fn simple_examples() {\n+    let x = 1;\n+\n+    let _ = if x == 7 {\n+        println!(\"Branch I\");\n+        let start_value = 0;\n+        println!(\"=^.^=\");\n+\n+        // Same but not moveable due to `start_value`\n+        let _ = start_value;\n+\n+        // The rest is self contained and moveable => Only lint the rest\n+        let result = false;\n+        println!(\"Block end!\");\n+        result\n+    } else {\n+        println!(\"Branch II\");\n+        let start_value = 8;\n+        println!(\"xD\");\n+\n+        // Same but not moveable due to `start_value`\n+        let _ = start_value;\n+\n+        // The rest is self contained and moveable => Only lint the rest\n+        let result = false;\n+        println!(\"Block end!\");\n+        result\n+    };\n+\n+    // Else if block\n+    if x == 9 {\n+        println!(\"The index is: 6\");\n+\n+        println!(\"Same end of block\");\n+    } else if x == 8 {\n+        println!(\"The index is: 4\");\n+\n+        // We should only get a lint trigger for the last statement\n+        println!(\"This is also eq with the else block\");\n+        println!(\"Same end of block\");\n+    } else {\n+        println!(\"This is also eq with the else block\");\n+        println!(\"Same end of block\");\n+    }\n+\n+    // Use of outer scope value\n+    let outer_scope_value = \"I'm outside the if block\";\n+    if x < 99 {\n+        let z = \"How are you\";\n+        println!(\"I'm a local because I use the value `z`: `{}`\", z);\n+\n+        println!(\n+            \"I'm moveable because I know: `outer_scope_value`: '{}'\",\n+            outer_scope_value\n+        );\n+    } else {\n+        let z = 45678000;\n+        println!(\"I'm a local because I use the value `z`: `{}`\", z);\n+\n+        println!(\n+            \"I'm moveable because I know: `outer_scope_value`: '{}'\",\n+            outer_scope_value\n+        );\n+    }\n+\n+    if x == 9 {\n+        if x == 8 {\n+            // No parent!!\n+            println!(\"---\");\n+            println!(\"Hello World\");\n+        } else {\n+            println!(\"Hello World\");\n+        }\n+    }\n+}\n+\n+/// Simple examples where the move can cause some problems due to moved values\n+fn simple_but_suggestion_is_invalid() {\n+    let x = 16;\n+\n+    // Local value\n+    let later_used_value = 17;\n+    if x == 9 {\n+        let _ = 9;\n+        let later_used_value = \"A string value\";\n+        println!(\"{}\", later_used_value);\n+    } else {\n+        let later_used_value = \"A string value\";\n+        println!(\"{}\", later_used_value);\n+        // I'm expecting a note about this\n+    }\n+    println!(\"{}\", later_used_value);\n+\n+    // outer function\n+    if x == 78 {\n+        let simple_examples = \"I now identify as a &str :)\";\n+        println!(\"This is the new simple_example: {}\", simple_examples);\n+    } else {\n+        println!(\"Separator print statement\");\n+\n+        let simple_examples = \"I now identify as a &str :)\";\n+        println!(\"This is the new simple_example: {}\", simple_examples);\n+    }\n+    simple_examples();\n+}\n+\n+/// Tests where the blocks are not linted due to the used value scope\n+fn not_moveable_due_to_value_scope() {\n+    let x = 18;\n+\n+    // Using a local value in the moved code\n+    if x == 9 {\n+        let y = 18;\n+        println!(\"y is: `{}`\", y);\n+    } else {\n+        let y = \"A string\";\n+        println!(\"y is: `{}`\", y);\n+    }\n+\n+    // Using a local value in the expression\n+    let _ = if x == 0 {\n+        let mut result = x + 1;\n+\n+        println!(\"1. Doing some calculations\");\n+        println!(\"2. Some more calculations\");\n+        println!(\"3. Setting result\");\n+\n+        result\n+    } else {\n+        let mut result = x - 1;\n+\n+        println!(\"1. Doing some calculations\");\n+        println!(\"2. Some more calculations\");\n+        println!(\"3. Setting result\");\n+\n+        result\n+    };\n+\n+    let _ = if x == 7 {\n+        let z1 = 100;\n+        println!(\"z1: {}\", z1);\n+\n+        let z2 = z1;\n+        println!(\"z2: {}\", z2);\n+\n+        z2\n+    } else {\n+        let z1 = 300;\n+        println!(\"z1: {}\", z1);\n+\n+        let z2 = z1;\n+        println!(\"z2: {}\", z2);\n+\n+        z2\n+    };\n+}\n+\n+/// This should add a note to the lint msg since the moved expression is not `()`\n+fn added_note_for_expression_use() -> u32 {\n+    let x = 9;\n+\n+    let _ = if x == 7 {\n+        x << 2\n+    } else {\n+        let _ = 6;\n+        x << 2\n+    };\n+\n+    if x == 9 {\n+        x * 4\n+    } else {\n+        let _ = 17;\n+        x * 4\n+    }\n+}\n+\n+#[rustfmt::skip]\n+fn test_suggestion_with_weird_formatting() {\n+    let x = 9;\n+    let mut a = 0;\n+    let mut b = 0;\n+\n+    // The error message still looks weird tbh but this is the best I can do\n+    // for weird formatting\n+    if x == 17 { b = 1; a = 0x99; } else { a = 0x99; }\n+}\n+\n+fn fp_test() {\n+    let x = 17;\n+\n+    if x == 18 {\n+        let y = 19;\n+        if y < x {\n+            println!(\"Trigger\")\n+        }\n+    } else {\n+        let z = 166;\n+        if z < x {\n+            println!(\"Trigger\")\n+        }\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "271fcd8b6c129fa87203db8f8f04a4cd765ad93a", "filename": "tests/ui/branches_sharing_code/shared_at_bottom.stderr", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_bottom.stderr?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -0,0 +1,143 @@\n+error: all if blocks contain the same code at the end\n+  --> $DIR/shared_at_bottom.rs:30:5\n+   |\n+LL | /         let result = false;\n+LL | |         println!(\"Block end!\");\n+LL | |         result\n+LL | |     };\n+   | |_____^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/shared_at_bottom.rs:2:36\n+   |\n+LL | #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: The end suggestion probably needs some adjustments to use the expression result correctly\n+help: consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     let result = false;\n+LL |     println!(\"Block end!\");\n+LL |     result;\n+   |\n+\n+error: all if blocks contain the same code at the end\n+  --> $DIR/shared_at_bottom.rs:48:5\n+   |\n+LL | /         println!(\"Same end of block\");\n+LL | |     }\n+   | |_____^\n+   |\n+help: consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     println!(\"Same end of block\");\n+   |\n+\n+error: all if blocks contain the same code at the end\n+  --> $DIR/shared_at_bottom.rs:65:5\n+   |\n+LL | /         println!(\n+LL | |             \"I'm moveable because I know: `outer_scope_value`: '{}'\",\n+LL | |             outer_scope_value\n+LL | |         );\n+LL | |     }\n+   | |_____^\n+   |\n+help: consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     println!(\n+LL |         \"I'm moveable because I know: `outer_scope_value`: '{}'\",\n+LL |         outer_scope_value\n+LL |     );\n+   |\n+\n+error: all if blocks contain the same code at the end\n+  --> $DIR/shared_at_bottom.rs:77:9\n+   |\n+LL | /             println!(\"Hello World\");\n+LL | |         }\n+   | |_________^\n+   |\n+help: consider moving the end statements out like this\n+   |\n+LL |         }\n+LL |         println!(\"Hello World\");\n+   |\n+\n+error: all if blocks contain the same code at the end\n+  --> $DIR/shared_at_bottom.rs:93:5\n+   |\n+LL | /         let later_used_value = \"A string value\";\n+LL | |         println!(\"{}\", later_used_value);\n+LL | |         // I'm expecting a note about this\n+LL | |     }\n+   | |_____^\n+   |\n+   = warning: Some moved values might need to be renamed to avoid wrong references\n+help: consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     let later_used_value = \"A string value\";\n+LL |     println!(\"{}\", later_used_value);\n+   |\n+\n+error: all if blocks contain the same code at the end\n+  --> $DIR/shared_at_bottom.rs:106:5\n+   |\n+LL | /         let simple_examples = \"I now identify as a &str :)\";\n+LL | |         println!(\"This is the new simple_example: {}\", simple_examples);\n+LL | |     }\n+   | |_____^\n+   |\n+   = warning: Some moved values might need to be renamed to avoid wrong references\n+help: consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     let simple_examples = \"I now identify as a &str :)\";\n+LL |     println!(\"This is the new simple_example: {}\", simple_examples);\n+   |\n+\n+error: all if blocks contain the same code at the end\n+  --> $DIR/shared_at_bottom.rs:171:5\n+   |\n+LL | /         x << 2\n+LL | |     };\n+   | |_____^\n+   |\n+   = note: The end suggestion probably needs some adjustments to use the expression result correctly\n+help: consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     x << 2;\n+   |\n+\n+error: all if blocks contain the same code at the end\n+  --> $DIR/shared_at_bottom.rs:178:5\n+   |\n+LL | /         x * 4\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: The end suggestion probably needs some adjustments to use the expression result correctly\n+help: consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     x * 4\n+   |\n+\n+error: all if blocks contain the same code at the end\n+  --> $DIR/shared_at_bottom.rs:190:44\n+   |\n+LL |     if x == 17 { b = 1; a = 0x99; } else { a = 0x99; }\n+   |                                            ^^^^^^^^^^^\n+   |\n+help: consider moving the end statements out like this\n+   |\n+LL |     if x == 17 { b = 1; a = 0x99; } else { }\n+LL |     a = 0x99;\n+   |\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "e65bcfd78737f329e673fbce03cc79343ce40e03", "filename": "tests/ui/branches_sharing_code/shared_at_top.rs", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -0,0 +1,103 @@\n+#![allow(dead_code, clippy::eval_order_dependence)]\n+#![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n+\n+// This tests the branches_sharing_code lint at the start of blocks\n+\n+fn simple_examples() {\n+    let x = 0;\n+\n+    // Simple\n+    if true {\n+        println!(\"Hello World!\");\n+        println!(\"I'm branch nr: 1\");\n+    } else {\n+        println!(\"Hello World!\");\n+        println!(\"I'm branch nr: 2\");\n+    }\n+\n+    // Else if\n+    if x == 0 {\n+        let y = 9;\n+        println!(\"The value y was set to: `{}`\", y);\n+        let _z = y;\n+\n+        println!(\"I'm the true start index of arrays\");\n+    } else if x == 1 {\n+        let y = 9;\n+        println!(\"The value y was set to: `{}`\", y);\n+        let _z = y;\n+\n+        println!(\"I start counting from 1 so my array starts from `1`\");\n+    } else {\n+        let y = 9;\n+        println!(\"The value y was set to: `{}`\", y);\n+        let _z = y;\n+\n+        println!(\"Ha, Pascal allows you to start the array where you want\")\n+    }\n+\n+    // Return a value\n+    let _ = if x == 7 {\n+        let y = 16;\n+        println!(\"What can I say except: \\\"you're welcome?\\\"\");\n+        let _ = y;\n+        x\n+    } else {\n+        let y = 16;\n+        println!(\"Thank you\");\n+        y\n+    };\n+}\n+\n+/// Simple examples where the move can cause some problems due to moved values\n+fn simple_but_suggestion_is_invalid() {\n+    let x = 10;\n+\n+    // Can't be automatically moved because used_value_name is getting used again\n+    let used_value_name = 19;\n+    if x == 10 {\n+        let used_value_name = \"Different type\";\n+        println!(\"Str: {}\", used_value_name);\n+        let _ = 1;\n+    } else {\n+        let used_value_name = \"Different type\";\n+        println!(\"Str: {}\", used_value_name);\n+        let _ = 2;\n+    }\n+    let _ = used_value_name;\n+\n+    // This can be automatically moved as `can_be_overridden` is not used again\n+    let can_be_overridden = 8;\n+    let _ = can_be_overridden;\n+    if x == 11 {\n+        let can_be_overridden = \"Move me\";\n+        println!(\"I'm also moveable\");\n+        let _ = 111;\n+    } else {\n+        let can_be_overridden = \"Move me\";\n+        println!(\"I'm also moveable\");\n+        let _ = 222;\n+    }\n+}\n+\n+/// This function tests that the `IS_SAME_THAN_ELSE` only covers the lint if it's enabled.\n+fn check_if_same_than_else_mask() {\n+    let x = 2021;\n+\n+    #[allow(clippy::if_same_then_else)]\n+    if x == 2020 {\n+        println!(\"This should trigger the `SHARED_CODE_IN_IF_BLOCKS` lint.\");\n+        println!(\"Because `IF_SAME_THEN_ELSE` is allowed here\");\n+    } else {\n+        println!(\"This should trigger the `SHARED_CODE_IN_IF_BLOCKS` lint.\");\n+        println!(\"Because `IF_SAME_THEN_ELSE` is allowed here\");\n+    }\n+\n+    if x == 2019 {\n+        println!(\"This should trigger `IS_SAME_THAN_ELSE` as usual\");\n+    } else {\n+        println!(\"This should trigger `IS_SAME_THAN_ELSE` as usual\");\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "15867e9ea020ac09d5aa280e761f622be9229e13", "filename": "tests/ui/branches_sharing_code/shared_at_top.stderr", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.stderr?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -0,0 +1,121 @@\n+error: all if blocks contain the same code at the start\n+  --> $DIR/shared_at_top.rs:10:5\n+   |\n+LL | /     if true {\n+LL | |         println!(\"Hello World!\");\n+   | |_________________________________^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/shared_at_top.rs:2:36\n+   |\n+LL | #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+help: consider moving the start statements out like this\n+   |\n+LL |     println!(\"Hello World!\");\n+LL |     if true {\n+   |\n+\n+error: all if blocks contain the same code at the start\n+  --> $DIR/shared_at_top.rs:19:5\n+   |\n+LL | /     if x == 0 {\n+LL | |         let y = 9;\n+LL | |         println!(\"The value y was set to: `{}`\", y);\n+LL | |         let _z = y;\n+   | |___________________^\n+   |\n+   = warning: Some moved values might need to be renamed to avoid wrong references\n+help: consider moving the start statements out like this\n+   |\n+LL |     let y = 9;\n+LL |     println!(\"The value y was set to: `{}`\", y);\n+LL |     let _z = y;\n+LL |     if x == 0 {\n+   |\n+\n+error: all if blocks contain the same code at the start\n+  --> $DIR/shared_at_top.rs:40:5\n+   |\n+LL | /     let _ = if x == 7 {\n+LL | |         let y = 16;\n+   | |___________________^\n+   |\n+help: consider moving the start statements out like this\n+   |\n+LL |     let y = 16;\n+LL |     let _ = if x == 7 {\n+   |\n+\n+error: all if blocks contain the same code at the start\n+  --> $DIR/shared_at_top.rs:58:5\n+   |\n+LL | /     if x == 10 {\n+LL | |         let used_value_name = \"Different type\";\n+LL | |         println!(\"Str: {}\", used_value_name);\n+   | |_____________________________________________^\n+   |\n+   = warning: Some moved values might need to be renamed to avoid wrong references\n+help: consider moving the start statements out like this\n+   |\n+LL |     let used_value_name = \"Different type\";\n+LL |     println!(\"Str: {}\", used_value_name);\n+LL |     if x == 10 {\n+   |\n+\n+error: all if blocks contain the same code at the start\n+  --> $DIR/shared_at_top.rs:72:5\n+   |\n+LL | /     if x == 11 {\n+LL | |         let can_be_overridden = \"Move me\";\n+LL | |         println!(\"I'm also moveable\");\n+   | |______________________________________^\n+   |\n+   = warning: Some moved values might need to be renamed to avoid wrong references\n+help: consider moving the start statements out like this\n+   |\n+LL |     let can_be_overridden = \"Move me\";\n+LL |     println!(\"I'm also moveable\");\n+LL |     if x == 11 {\n+   |\n+\n+error: all if blocks contain the same code at the start\n+  --> $DIR/shared_at_top.rs:88:5\n+   |\n+LL | /     if x == 2020 {\n+LL | |         println!(\"This should trigger the `SHARED_CODE_IN_IF_BLOCKS` lint.\");\n+LL | |         println!(\"Because `IF_SAME_THEN_ELSE` is allowed here\");\n+   | |________________________________________________________________^\n+   |\n+help: consider moving the start statements out like this\n+   |\n+LL |     println!(\"This should trigger the `SHARED_CODE_IN_IF_BLOCKS` lint.\");\n+LL |     println!(\"Because `IF_SAME_THEN_ELSE` is allowed here\");\n+LL |     if x == 2020 {\n+   |\n+\n+error: this `if` has identical blocks\n+  --> $DIR/shared_at_top.rs:96:18\n+   |\n+LL |       if x == 2019 {\n+   |  __________________^\n+LL | |         println!(\"This should trigger `IS_SAME_THAN_ELSE` as usual\");\n+LL | |     } else {\n+   | |_____^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/shared_at_top.rs:2:9\n+   |\n+LL | #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: same as this\n+  --> $DIR/shared_at_top.rs:98:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         println!(\"This should trigger `IS_SAME_THAN_ELSE` as usual\");\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "deefdad32c9dd271635a5cac077d817490d409ca", "filename": "tests/ui/branches_sharing_code/shared_at_top_and_bottom.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -0,0 +1,119 @@\n+#![allow(dead_code)]\n+#![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n+\n+// branches_sharing_code at the top and bottom of the if blocks\n+\n+struct DataPack {\n+    id: u32,\n+    name: String,\n+    some_data: Vec<u8>,\n+}\n+\n+fn overlapping_eq_regions() {\n+    let x = 9;\n+\n+    // Overlap with separator\n+    if x == 7 {\n+        let t = 7;\n+        let _overlap_start = t * 2;\n+        let _overlap_end = 2 * t;\n+        let _u = 9;\n+    } else {\n+        let t = 7;\n+        let _overlap_start = t * 2;\n+        let _overlap_end = 2 * t;\n+        println!(\"Overlap separator\");\n+        let _overlap_start = t * 2;\n+        let _overlap_end = 2 * t;\n+        let _u = 9;\n+    }\n+\n+    // Overlap with separator\n+    if x == 99 {\n+        let r = 7;\n+        let _overlap_start = r;\n+        let _overlap_middle = r * r;\n+        let _overlap_end = r * r * r;\n+        let z = \"end\";\n+    } else {\n+        let r = 7;\n+        let _overlap_start = r;\n+        let _overlap_middle = r * r;\n+        let _overlap_middle = r * r;\n+        let _overlap_end = r * r * r;\n+        let z = \"end\";\n+    }\n+}\n+\n+fn complexer_example() {\n+    fn gen_id(x: u32, y: u32) -> u32 {\n+        let x = x & 0x0000_ffff;\n+        let y = (y & 0xffff_0000) << 16;\n+        x | y\n+    }\n+\n+    fn process_data(data: DataPack) {\n+        let _ = data;\n+    }\n+\n+    let x = 8;\n+    let y = 9;\n+    if (x > 7 && y < 13) || (x + y) % 2 == 1 {\n+        let a = 0xcafe;\n+        let b = 0xffff00ff;\n+        let e_id = gen_id(a, b);\n+\n+        println!(\"From the a `{}` to the b `{}`\", a, b);\n+\n+        let pack = DataPack {\n+            id: e_id,\n+            name: \"Player 1\".to_string(),\n+            some_data: vec![0x12, 0x34, 0x56, 0x78, 0x90],\n+        };\n+        process_data(pack);\n+    } else {\n+        let a = 0xcafe;\n+        let b = 0xffff00ff;\n+        let e_id = gen_id(a, b);\n+\n+        println!(\"The new ID is '{}'\", e_id);\n+\n+        let pack = DataPack {\n+            id: e_id,\n+            name: \"Player 1\".to_string(),\n+            some_data: vec![0x12, 0x34, 0x56, 0x78, 0x90],\n+        };\n+        process_data(pack);\n+    }\n+}\n+\n+/// This should add a note to the lint msg since the moved expression is not `()`\n+fn added_note_for_expression_use() -> u32 {\n+    let x = 9;\n+\n+    let _ = if x == 7 {\n+        let _ = 19;\n+\n+        let _splitter = 6;\n+\n+        x << 2\n+    } else {\n+        let _ = 19;\n+\n+        x << 2\n+    };\n+\n+    if x == 9 {\n+        let _ = 17;\n+\n+        let _splitter = 6;\n+\n+        x * 4\n+    } else {\n+        let _ = 17;\n+\n+        x * 4\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "212cfb2f1d1803f3ef7b96314a95b09b86dbbfbe", "filename": "tests/ui/branches_sharing_code/shared_at_top_and_bottom.stderr", "status": "added", "additions": 154, "deletions": 0, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fshared_at_top_and_bottom.stderr?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -0,0 +1,154 @@\n+error: all if blocks contain the same code at the start and the end. Here at the start\n+  --> $DIR/shared_at_top_and_bottom.rs:16:5\n+   |\n+LL | /     if x == 7 {\n+LL | |         let t = 7;\n+LL | |         let _overlap_start = t * 2;\n+LL | |         let _overlap_end = 2 * t;\n+   | |_________________________________^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/shared_at_top_and_bottom.rs:2:36\n+   |\n+LL | #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n+   |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: and here at the end\n+  --> $DIR/shared_at_top_and_bottom.rs:28:5\n+   |\n+LL | /         let _u = 9;\n+LL | |     }\n+   | |_____^\n+help: consider moving the start statements out like this\n+   |\n+LL |     let t = 7;\n+LL |     let _overlap_start = t * 2;\n+LL |     let _overlap_end = 2 * t;\n+LL |     if x == 7 {\n+   |\n+help: and consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     let _u = 9;\n+   |\n+\n+error: all if blocks contain the same code at the start and the end. Here at the start\n+  --> $DIR/shared_at_top_and_bottom.rs:32:5\n+   |\n+LL | /     if x == 99 {\n+LL | |         let r = 7;\n+LL | |         let _overlap_start = r;\n+LL | |         let _overlap_middle = r * r;\n+   | |____________________________________^\n+   |\n+note: and here at the end\n+  --> $DIR/shared_at_top_and_bottom.rs:43:5\n+   |\n+LL | /         let _overlap_end = r * r * r;\n+LL | |         let z = \"end\";\n+LL | |     }\n+   | |_____^\n+   = warning: Some moved values might need to be renamed to avoid wrong references\n+help: consider moving the start statements out like this\n+   |\n+LL |     let r = 7;\n+LL |     let _overlap_start = r;\n+LL |     let _overlap_middle = r * r;\n+LL |     if x == 99 {\n+   |\n+help: and consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     let _overlap_end = r * r * r;\n+LL |     let z = \"end\";\n+   |\n+\n+error: all if blocks contain the same code at the start and the end. Here at the start\n+  --> $DIR/shared_at_top_and_bottom.rs:61:5\n+   |\n+LL | /     if (x > 7 && y < 13) || (x + y) % 2 == 1 {\n+LL | |         let a = 0xcafe;\n+LL | |         let b = 0xffff00ff;\n+LL | |         let e_id = gen_id(a, b);\n+   | |________________________________^\n+   |\n+note: and here at the end\n+  --> $DIR/shared_at_top_and_bottom.rs:81:5\n+   |\n+LL | /         let pack = DataPack {\n+LL | |             id: e_id,\n+LL | |             name: \"Player 1\".to_string(),\n+LL | |             some_data: vec![0x12, 0x34, 0x56, 0x78, 0x90],\n+LL | |         };\n+LL | |         process_data(pack);\n+LL | |     }\n+   | |_____^\n+   = warning: Some moved values might need to be renamed to avoid wrong references\n+help: consider moving the start statements out like this\n+   |\n+LL |     let a = 0xcafe;\n+LL |     let b = 0xffff00ff;\n+LL |     let e_id = gen_id(a, b);\n+LL |     if (x > 7 && y < 13) || (x + y) % 2 == 1 {\n+   |\n+help: and consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     let pack = DataPack {\n+LL |         id: e_id,\n+LL |         name: \"Player 1\".to_string(),\n+LL |         some_data: vec![0x12, 0x34, 0x56, 0x78, 0x90],\n+LL |     };\n+ ...\n+\n+error: all if blocks contain the same code at the start and the end. Here at the start\n+  --> $DIR/shared_at_top_and_bottom.rs:94:5\n+   |\n+LL | /     let _ = if x == 7 {\n+LL | |         let _ = 19;\n+   | |___________________^\n+   |\n+note: and here at the end\n+  --> $DIR/shared_at_top_and_bottom.rs:103:5\n+   |\n+LL | /         x << 2\n+LL | |     };\n+   | |_____^\n+   = note: The end suggestion probably needs some adjustments to use the expression result correctly\n+help: consider moving the start statements out like this\n+   |\n+LL |     let _ = 19;\n+LL |     let _ = if x == 7 {\n+   |\n+help: and consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     x << 2;\n+   |\n+\n+error: all if blocks contain the same code at the start and the end. Here at the start\n+  --> $DIR/shared_at_top_and_bottom.rs:106:5\n+   |\n+LL | /     if x == 9 {\n+LL | |         let _ = 17;\n+   | |___________________^\n+   |\n+note: and here at the end\n+  --> $DIR/shared_at_top_and_bottom.rs:115:5\n+   |\n+LL | /         x * 4\n+LL | |     }\n+   | |_____^\n+   = note: The end suggestion probably needs some adjustments to use the expression result correctly\n+help: consider moving the start statements out like this\n+   |\n+LL |     let _ = 17;\n+LL |     if x == 9 {\n+   |\n+help: and consider moving the end statements out like this\n+   |\n+LL |     }\n+LL |     x * 4\n+   |\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "0c70e3748ec16aa480832a1297f7d7eb96b8f1c8", "filename": "tests/ui/branches_sharing_code/valid_if_blocks.rs", "status": "added", "additions": 155, "deletions": 0, "changes": 155, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -0,0 +1,155 @@\n+#![allow(dead_code, clippy::eval_order_dependence)]\n+#![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n+\n+// This tests valid if blocks that shouldn't trigger the lint\n+\n+// Tests with value references are includes in \"shared_code_at_bottom.rs\"\n+\n+fn valid_examples() {\n+    let x = 2;\n+\n+    // The edge statements are different\n+    if x == 9 {\n+        let y = 1 << 5;\n+\n+        println!(\"This is the same: vvv\");\n+        let _z = y;\n+        println!(\"The block expression is different\");\n+\n+        println!(\"Different end 1\");\n+    } else {\n+        let y = 1 << 7;\n+\n+        println!(\"This is the same: vvv\");\n+        let _z = y;\n+        println!(\"The block expression is different\");\n+\n+        println!(\"Different end 2\");\n+    }\n+\n+    // No else\n+    if x == 2 {\n+        println!(\"Hello world!\");\n+        println!(\"Hello back, how are you?\");\n+\n+        // This is different vvvv\n+        println!(\"Howdy stranger =^.^=\");\n+\n+        println!(\"Bye Bye World\");\n+    } else if x == 9 {\n+        println!(\"Hello world!\");\n+        println!(\"Hello back, how are you?\");\n+\n+        // This is different vvvv\n+        println!(\"Hello reviewer :D\");\n+\n+        println!(\"Bye Bye World\");\n+    }\n+\n+    // Overlapping statements only in else if blocks -> Don't lint\n+    if x == 0 {\n+        println!(\"I'm important!\")\n+    } else if x == 17 {\n+        println!(\"I share code in else if\");\n+\n+        println!(\"x is 17\");\n+    } else {\n+        println!(\"I share code in else if\");\n+\n+        println!(\"x is nether x nor 17\");\n+    }\n+\n+    // Mutability is different\n+    if x == 13 {\n+        let mut y = 9;\n+        println!(\"Value y is: {}\", y);\n+        y += 16;\n+        let _z1 = y;\n+    } else {\n+        let y = 9;\n+        println!(\"Value y is: {}\", y);\n+        let _z2 = y;\n+    }\n+\n+    // Same blocks but at start and bottom so no `if_same_then_else` lint\n+    if x == 418 {\n+        let y = 9;\n+        let z = 8;\n+        let _ = (x, y, z);\n+        // Don't tell the programmer, my code is also in the else block\n+    } else if x == 419 {\n+        println!(\"+-----------+\");\n+        println!(\"|           |\");\n+        println!(\"|  O     O  |\");\n+        println!(\"|     \u00b0     |\");\n+        println!(\"|  \\\\_____/  |\");\n+        println!(\"|           |\");\n+        println!(\"+-----------+\");\n+    } else {\n+        let y = 9;\n+        let z = 8;\n+        let _ = (x, y, z);\n+        // I'm so much better than the x == 418 block. Trust me\n+    }\n+\n+    let x = 1;\n+    if true {\n+        println!(\"{}\", x);\n+    } else {\n+        let x = 2;\n+        println!(\"{}\", x);\n+    }\n+\n+    // Let's test empty blocks\n+    if false {\n+    } else {\n+    }\n+}\n+\n+/// This makes sure that the `if_same_then_else` masks the `shared_code_in_if_blocks` lint\n+fn trigger_other_lint() {\n+    let x = 0;\n+    let y = 1;\n+\n+    // Same block\n+    if x == 0 {\n+        let u = 19;\n+        println!(\"How are u today?\");\n+        let _ = \"This is a string\";\n+    } else {\n+        let u = 19;\n+        println!(\"How are u today?\");\n+        let _ = \"This is a string\";\n+    }\n+\n+    // Only same expression\n+    let _ = if x == 6 { 7 } else { 7 };\n+\n+    // Same in else if block\n+    let _ = if x == 67 {\n+        println!(\"Well I'm the most important block\");\n+        \"I'm a pretty string\"\n+    } else if x == 68 {\n+        println!(\"I'm a doppelg\u00e4nger\");\n+        // Don't listen to my clone below\n+\n+        if y == 90 { \"=^.^=\" } else { \":D\" }\n+    } else {\n+        // Don't listen to my clone above\n+        println!(\"I'm a doppelg\u00e4nger\");\n+\n+        if y == 90 { \"=^.^=\" } else { \":D\" }\n+    };\n+\n+    if x == 0 {\n+        println!(\"I'm single\");\n+    } else if x == 68 {\n+        println!(\"I'm a doppelg\u00e4nger\");\n+        // Don't listen to my clone below\n+    } else {\n+        // Don't listen to my clone above\n+        println!(\"I'm a doppelg\u00e4nger\");\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "a815995e71721f1bcd75a7a21897e2d04b4edcfd", "filename": "tests/ui/branches_sharing_code/valid_if_blocks.stderr", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.stderr?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -0,0 +1,101 @@\n+error: this `if` has identical blocks\n+  --> $DIR/valid_if_blocks.rs:104:14\n+   |\n+LL |       if false {\n+   |  ______________^\n+LL | |     } else {\n+   | |_____^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/valid_if_blocks.rs:2:9\n+   |\n+LL | #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: same as this\n+  --> $DIR/valid_if_blocks.rs:105:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |     }\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/valid_if_blocks.rs:115:15\n+   |\n+LL |       if x == 0 {\n+   |  _______________^\n+LL | |         let u = 19;\n+LL | |         println!(\"How are u today?\");\n+LL | |         let _ = \"This is a string\";\n+LL | |     } else {\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/valid_if_blocks.rs:119:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         let u = 19;\n+LL | |         println!(\"How are u today?\");\n+LL | |         let _ = \"This is a string\";\n+LL | |     }\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/valid_if_blocks.rs:126:23\n+   |\n+LL |     let _ = if x == 6 { 7 } else { 7 };\n+   |                       ^^^^^\n+   |\n+note: same as this\n+  --> $DIR/valid_if_blocks.rs:126:34\n+   |\n+LL |     let _ = if x == 6 { 7 } else { 7 };\n+   |                                  ^^^^^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/valid_if_blocks.rs:132:23\n+   |\n+LL |       } else if x == 68 {\n+   |  _______________________^\n+LL | |         println!(\"I'm a doppelg\u00e4nger\");\n+LL | |         // Don't listen to my clone below\n+LL | |\n+LL | |         if y == 90 { \"=^.^=\" } else { \":D\" }\n+LL | |     } else {\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/valid_if_blocks.rs:137:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         // Don't listen to my clone above\n+LL | |         println!(\"I'm a doppelg\u00e4nger\");\n+LL | |\n+LL | |         if y == 90 { \"=^.^=\" } else { \":D\" }\n+LL | |     };\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/valid_if_blocks.rs:146:23\n+   |\n+LL |       } else if x == 68 {\n+   |  _______________________^\n+LL | |         println!(\"I'm a doppelg\u00e4nger\");\n+LL | |         // Don't listen to my clone below\n+LL | |     } else {\n+   | |_____^\n+   |\n+note: same as this\n+  --> $DIR/valid_if_blocks.rs:149:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         // Don't listen to my clone above\n+LL | |         println!(\"I'm a doppelg\u00e4nger\");\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "ec082c73b44c08fa534779647f395260864d3266", "filename": "tests/ui/checked_unwrap/complex_conditionals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -1,5 +1,5 @@\n #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n-#![allow(clippy::if_same_then_else)]\n+#![allow(clippy::if_same_then_else, clippy::branches_sharing_code)]\n \n fn test_complex_conditions() {\n     let x: Result<(), ()> = Ok(());"}, {"sha": "043ea4148dc517ed736dacd5c647f69d5c456fcf", "filename": "tests/ui/checked_unwrap/complex_conditionals_nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals_nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals_nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fcomplex_conditionals_nested.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -1,5 +1,5 @@\n #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n-#![allow(clippy::if_same_then_else)]\n+#![allow(clippy::if_same_then_else, clippy::branches_sharing_code)]\n \n fn test_nested() {\n     fn nested() {"}, {"sha": "8f23fb28827a23a8841a70f4743dca2067c0ee6e", "filename": "tests/ui/checked_unwrap/simple_conditionals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -1,5 +1,5 @@\n #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n-#![allow(clippy::if_same_then_else)]\n+#![allow(clippy::if_same_then_else, clippy::branches_sharing_code)]\n \n macro_rules! m {\n     ($a:expr) => {"}, {"sha": "43468872db0b45f69c61799afc1c6b75521e7100", "filename": "tests/ui/default_numeric_fallback.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -3,6 +3,7 @@\n #![allow(clippy::never_loop)]\n #![allow(clippy::no_effect)]\n #![allow(clippy::unnecessary_operation)]\n+#![allow(clippy::branches_sharing_code)]\n \n mod basic_expr {\n     fn test() {"}, {"sha": "d1c4c8203dd832a07875d668dd9d7178928f64ca", "filename": "tests/ui/default_numeric_fallback.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fdefault_numeric_fallback.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fdefault_numeric_fallback.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fdefault_numeric_fallback.stderr?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -1,145 +1,145 @@\n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:10:17\n+  --> $DIR/default_numeric_fallback.rs:11:17\n    |\n LL |         let x = 22;\n    |                 ^^ help: consider adding suffix: `22_i32`\n    |\n    = note: `-D clippy::default-numeric-fallback` implied by `-D warnings`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:11:18\n+  --> $DIR/default_numeric_fallback.rs:12:18\n    |\n LL |         let x = [1, 2, 3];\n    |                  ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:11:21\n+  --> $DIR/default_numeric_fallback.rs:12:21\n    |\n LL |         let x = [1, 2, 3];\n    |                     ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:11:24\n+  --> $DIR/default_numeric_fallback.rs:12:24\n    |\n LL |         let x = [1, 2, 3];\n    |                        ^ help: consider adding suffix: `3_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:12:28\n+  --> $DIR/default_numeric_fallback.rs:13:28\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                            ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:12:31\n+  --> $DIR/default_numeric_fallback.rs:13:31\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                               ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:12:44\n+  --> $DIR/default_numeric_fallback.rs:13:44\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                                            ^ help: consider adding suffix: `3_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:12:47\n+  --> $DIR/default_numeric_fallback.rs:13:47\n    |\n LL |         let x = if true { (1, 2) } else { (3, 4) };\n    |                                               ^ help: consider adding suffix: `4_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:13:23\n+  --> $DIR/default_numeric_fallback.rs:14:23\n    |\n LL |         let x = match 1 {\n    |                       ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:14:13\n+  --> $DIR/default_numeric_fallback.rs:15:13\n    |\n LL |             1 => 1,\n    |             ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:14:18\n+  --> $DIR/default_numeric_fallback.rs:15:18\n    |\n LL |             1 => 1,\n    |                  ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:15:18\n+  --> $DIR/default_numeric_fallback.rs:16:18\n    |\n LL |             _ => 2,\n    |                  ^ help: consider adding suffix: `2_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:19:17\n+  --> $DIR/default_numeric_fallback.rs:20:17\n    |\n LL |         let x = 0.12;\n    |                 ^^^^ help: consider adding suffix: `0.12_f64`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:37:21\n+  --> $DIR/default_numeric_fallback.rs:38:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:45:21\n+  --> $DIR/default_numeric_fallback.rs:46:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:51:21\n+  --> $DIR/default_numeric_fallback.rs:52:21\n    |\n LL |             let y = 1;\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:63:9\n+  --> $DIR/default_numeric_fallback.rs:64:9\n    |\n LL |         1\n    |         ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:69:27\n+  --> $DIR/default_numeric_fallback.rs:70:27\n    |\n LL |         let f = || -> _ { 1 };\n    |                           ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:73:29\n+  --> $DIR/default_numeric_fallback.rs:74:29\n    |\n LL |         let f = || -> i32 { 1 };\n    |                             ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:87:21\n+  --> $DIR/default_numeric_fallback.rs:88:21\n    |\n LL |         generic_arg(1);\n    |                     ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:90:32\n+  --> $DIR/default_numeric_fallback.rs:91:32\n    |\n LL |         let x: _ = generic_arg(1);\n    |                                ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:108:28\n+  --> $DIR/default_numeric_fallback.rs:109:28\n    |\n LL |         GenericStruct { x: 1 };\n    |                            ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:111:36\n+  --> $DIR/default_numeric_fallback.rs:112:36\n    |\n LL |         let _ = GenericStruct { x: 1 };\n    |                                    ^ help: consider adding suffix: `1_i32`\n \n error: default numeric fallback might occur\n-  --> $DIR/default_numeric_fallback.rs:131:23\n+  --> $DIR/default_numeric_fallback.rs:132:23\n    |\n LL |         s.generic_arg(1);\n    |                       ^ help: consider adding suffix: `1_i32`"}, {"sha": "ef9567455008bfcfdf8bb4885d092dbf76f140c5", "filename": "tests/ui/if_same_then_else.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -5,7 +5,8 @@\n     clippy::never_loop,\n     clippy::no_effect,\n     clippy::unused_unit,\n-    clippy::zero_divided_by_zero\n+    clippy::zero_divided_by_zero,\n+    clippy::branches_sharing_code\n )]\n \n struct Foo {"}, {"sha": "2f38052fc209e957e76bb06f97000d40bb45c15f", "filename": "tests/ui/if_same_then_else.stderr", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fif_same_then_else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fif_same_then_else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else.stderr?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -1,111 +1,111 @@\n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else.rs:28:12\n+  --> $DIR/if_same_then_else.rs:21:13\n    |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n+LL |       if true {\n+   |  _____________^\n LL | |         Foo { bar: 42 };\n LL | |         0..10;\n+LL | |         ..;\n ...  |\n LL | |         foo();\n-LL | |     }\n+LL | |     } else {\n    | |_____^\n    |\n    = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n note: same as this\n-  --> $DIR/if_same_then_else.rs:20:13\n+  --> $DIR/if_same_then_else.rs:29:12\n    |\n-LL |       if true {\n-   |  _____________^\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n LL | |         Foo { bar: 42 };\n LL | |         0..10;\n-LL | |         ..;\n ...  |\n LL | |         foo();\n-LL | |     } else {\n+LL | |     }\n    | |_____^\n \n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else.rs:66:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         0.0\n-LL | |     };\n-   | |_____^\n-   |\n-note: same as this\n-  --> $DIR/if_same_then_else.rs:64:21\n+  --> $DIR/if_same_then_else.rs:65:21\n    |\n LL |       let _ = if true {\n    |  _____________________^\n LL | |         0.0\n LL | |     } else {\n    | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else.rs:73:12\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:67:12\n    |\n LL |       } else {\n    |  ____________^\n LL | |         //~ ERROR same body as `if` block\n-LL | |         -0.0\n+LL | |         0.0\n LL | |     };\n    | |_____^\n-   |\n-note: same as this\n-  --> $DIR/if_same_then_else.rs:71:21\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:72:21\n    |\n LL |       let _ = if true {\n    |  _____________________^\n LL | |         -0.0\n LL | |     } else {\n    | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else.rs:89:12\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:74:12\n    |\n LL |       } else {\n    |  ____________^\n LL | |         //~ ERROR same body as `if` block\n-LL | |         42\n+LL | |         -0.0\n LL | |     };\n    | |_____^\n-   |\n-note: same as this\n-  --> $DIR/if_same_then_else.rs:87:21\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:88:21\n    |\n LL |       let _ = if true {\n    |  _____________________^\n LL | |         42\n LL | |     } else {\n    | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else.rs:101:12\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else.rs:90:12\n    |\n LL |       } else {\n    |  ____________^\n LL | |         //~ ERROR same body as `if` block\n+LL | |         42\n+LL | |     };\n+   | |_____^\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else.rs:95:13\n+   |\n+LL |       if true {\n+   |  _____________^\n LL | |         let bar = if true { 42 } else { 43 };\n LL | |\n+LL | |         while foo() {\n ...  |\n LL | |         bar + 1;\n-LL | |     }\n+LL | |     } else {\n    | |_____^\n    |\n note: same as this\n-  --> $DIR/if_same_then_else.rs:94:13\n+  --> $DIR/if_same_then_else.rs:102:12\n    |\n-LL |       if true {\n-   |  _____________^\n+LL |       } else {\n+   |  ____________^\n+LL | |         //~ ERROR same body as `if` block\n LL | |         let bar = if true { 42 } else { 43 };\n LL | |\n-LL | |         while foo() {\n ...  |\n LL | |         bar + 1;\n-LL | |     } else {\n+LL | |     }\n    | |_____^\n \n error: aborting due to 5 previous errors"}, {"sha": "e4dc5b647dfd2eb0d3a42be5d5e7c262eaf41228", "filename": "tests/ui/if_same_then_else2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fif_same_then_else2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fif_same_then_else2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else2.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -5,7 +5,8 @@\n     clippy::collapsible_if,\n     clippy::ifs_same_cond,\n     clippy::needless_return,\n-    clippy::single_element_loop\n+    clippy::single_element_loop,\n+    clippy::branches_sharing_code\n )]\n \n fn if_same_then_else2() -> Result<&'static str, ()> {"}, {"sha": "6524be0af8517ff4925a7723b8554ffd30e7aa93", "filename": "tests/ui/if_same_then_else2.stderr", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fif_same_then_else2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fif_same_then_else2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_same_then_else2.stderr?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -1,19 +1,5 @@\n error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:21:12\n-   |\n-LL |       } else {\n-   |  ____________^\n-LL | |         //~ ERROR same body as `if` block\n-LL | |         for _ in &[42] {\n-LL | |             let bar: &Option<_> = &Some::<u8>(42);\n-...  |\n-LL | |         }\n-LL | |     }\n-   | |_____^\n-   |\n-   = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n-note: same as this\n-  --> $DIR/if_same_then_else2.rs:12:13\n+  --> $DIR/if_same_then_else2.rs:13:13\n    |\n LL |       if true {\n    |  _____________^\n@@ -24,102 +10,116 @@ LL | |             if foo.is_some() {\n LL | |         }\n LL | |     } else {\n    | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:35:12\n+   |\n+   = note: `-D clippy::if-same-then-else` implied by `-D warnings`\n+note: same as this\n+  --> $DIR/if_same_then_else2.rs:22:12\n    |\n LL |       } else {\n    |  ____________^\n LL | |         //~ ERROR same body as `if` block\n-LL | |         if let Some(a) = Some(42) {}\n+LL | |         for _ in &[42] {\n+LL | |             let bar: &Option<_> = &Some::<u8>(42);\n+...  |\n+LL | |         }\n LL | |     }\n    | |_____^\n-   |\n-note: same as this\n-  --> $DIR/if_same_then_else2.rs:33:13\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else2.rs:34:13\n    |\n LL |       if true {\n    |  _____________^\n LL | |         if let Some(a) = Some(42) {}\n LL | |     } else {\n    | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:42:12\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else2.rs:36:12\n    |\n LL |       } else {\n    |  ____________^\n LL | |         //~ ERROR same body as `if` block\n-LL | |         if let (1, .., 3) = (1, 2, 3) {}\n+LL | |         if let Some(a) = Some(42) {}\n LL | |     }\n    | |_____^\n-   |\n-note: same as this\n-  --> $DIR/if_same_then_else2.rs:40:13\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else2.rs:41:13\n    |\n LL |       if true {\n    |  _____________^\n LL | |         if let (1, .., 3) = (1, 2, 3) {}\n LL | |     } else {\n    | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:92:12\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else2.rs:43:12\n    |\n LL |       } else {\n    |  ____________^\n LL | |         //~ ERROR same body as `if` block\n-LL | |         f32::NAN\n-LL | |     };\n+LL | |         if let (1, .., 3) = (1, 2, 3) {}\n+LL | |     }\n    | |_____^\n-   |\n-note: same as this\n-  --> $DIR/if_same_then_else2.rs:90:21\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else2.rs:91:21\n    |\n LL |       let _ = if true {\n    |  _____________________^\n LL | |         f32::NAN\n LL | |     } else {\n    | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:99:12\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else2.rs:93:12\n    |\n LL |       } else {\n    |  ____________^\n LL | |         //~ ERROR same body as `if` block\n-LL | |         Ok(\"foo\")?;\n-LL | |     }\n+LL | |         f32::NAN\n+LL | |     };\n    | |_____^\n-   |\n-note: same as this\n-  --> $DIR/if_same_then_else2.rs:97:13\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else2.rs:98:13\n    |\n LL |       if true {\n    |  _____________^\n LL | |         Ok(\"foo\")?;\n LL | |     } else {\n    | |_____^\n-\n-error: this `if` has identical blocks\n-  --> $DIR/if_same_then_else2.rs:124:12\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else2.rs:100:12\n    |\n LL |       } else {\n    |  ____________^\n-LL | |         let foo = \"\";\n-LL | |         return Ok(&foo[0..]);\n+LL | |         //~ ERROR same body as `if` block\n+LL | |         Ok(\"foo\")?;\n LL | |     }\n    | |_____^\n-   |\n-note: same as this\n-  --> $DIR/if_same_then_else2.rs:121:20\n+\n+error: this `if` has identical blocks\n+  --> $DIR/if_same_then_else2.rs:122:20\n    |\n LL |       } else if true {\n    |  ____________________^\n LL | |         let foo = \"\";\n LL | |         return Ok(&foo[0..]);\n LL | |     } else {\n    | |_____^\n+   |\n+note: same as this\n+  --> $DIR/if_same_then_else2.rs:125:12\n+   |\n+LL |       } else {\n+   |  ____________^\n+LL | |         let foo = \"\";\n+LL | |         return Ok(&foo[0..]);\n+LL | |     }\n+   | |_____^\n \n error: aborting due to 6 previous errors\n "}, {"sha": "2d8f3c2f0e7aacf69c5d1b0808e4f38117cfa311", "filename": "tests/ui/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_if_seq.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -2,7 +2,8 @@\n     unused_variables,\n     unused_assignments,\n     clippy::similar_names,\n-    clippy::blacklisted_name\n+    clippy::blacklisted_name,\n+    clippy::branches_sharing_code\n )]\n #![warn(clippy::useless_let_if_seq)]\n "}, {"sha": "9cf2e10a5ee56940e5a06d103a6bcd01323dbf05", "filename": "tests/ui/let_if_seq.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Flet_if_seq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Flet_if_seq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flet_if_seq.stderr?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -1,5 +1,5 @@\n error: `if _ { .. } else { .. }` is an expression\n-  --> $DIR/let_if_seq.rs:64:5\n+  --> $DIR/let_if_seq.rs:65:5\n    |\n LL | /     let mut foo = 0;\n LL | |     if f() {\n@@ -11,7 +11,7 @@ LL | |     }\n    = note: you might not need `mut` at all\n \n error: `if _ { .. } else { .. }` is an expression\n-  --> $DIR/let_if_seq.rs:69:5\n+  --> $DIR/let_if_seq.rs:70:5\n    |\n LL | /     let mut bar = 0;\n LL | |     if f() {\n@@ -25,7 +25,7 @@ LL | |     }\n    = note: you might not need `mut` at all\n \n error: `if _ { .. } else { .. }` is an expression\n-  --> $DIR/let_if_seq.rs:77:5\n+  --> $DIR/let_if_seq.rs:78:5\n    |\n LL | /     let quz;\n LL | |     if f() {\n@@ -36,7 +36,7 @@ LL | |     }\n    | |_____^ help: it is more idiomatic to write: `let quz = if f() { 42 } else { 0 };`\n \n error: `if _ { .. } else { .. }` is an expression\n-  --> $DIR/let_if_seq.rs:106:5\n+  --> $DIR/let_if_seq.rs:107:5\n    |\n LL | /     let mut baz = 0;\n LL | |     if f() {"}, {"sha": "588bb88f446134fc38252837ed6fdcb845564ae5", "filename": "tests/ui/needless_bool/simple.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fneedless_bool%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fneedless_bool%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Fsimple.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -4,7 +4,8 @@\n     dead_code,\n     clippy::no_effect,\n     clippy::if_same_then_else,\n-    clippy::needless_return\n+    clippy::needless_return,\n+    clippy::branches_sharing_code\n )]\n \n fn main() {"}, {"sha": "0ccc9416bcd58d1727c8c6c2cca74fc757ac2e75", "filename": "tests/ui/needless_bool/simple.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fneedless_bool%2Fsimple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fneedless_bool%2Fsimple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_bool%2Fsimple.stderr?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -1,5 +1,5 @@\n error: this if-then-else expression will always return true\n-  --> $DIR/simple.rs:13:5\n+  --> $DIR/simple.rs:14:5\n    |\n LL | /     if x {\n LL | |         true\n@@ -11,7 +11,7 @@ LL | |     };\n    = note: `-D clippy::needless-bool` implied by `-D warnings`\n \n error: this if-then-else expression will always return false\n-  --> $DIR/simple.rs:18:5\n+  --> $DIR/simple.rs:19:5\n    |\n LL | /     if x {\n LL | |         false\n@@ -21,7 +21,7 @@ LL | |     };\n    | |_____^\n \n error: this if-then-else expression will always return true\n-  --> $DIR/simple.rs:33:5\n+  --> $DIR/simple.rs:34:5\n    |\n LL | /     if x {\n LL | |         return true;\n@@ -31,7 +31,7 @@ LL | |     };\n    | |_____^\n \n error: this if-then-else expression will always return false\n-  --> $DIR/simple.rs:41:5\n+  --> $DIR/simple.rs:42:5\n    |\n LL | /     if x {\n LL | |         return false;"}, {"sha": "82d95cc041fb35941a47c4862625db40d34e40bd", "filename": "tests/ui/needless_return.fixed", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.fixed?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -1,7 +1,12 @@\n // run-rustfix\n \n-#![allow(unused, clippy::needless_bool)]\n-#![allow(clippy::if_same_then_else, clippy::single_match)]\n+#![allow(unused)]\n+#![allow(\n+    clippy::if_same_then_else,\n+    clippy::single_match,\n+    clippy::branches_sharing_code,\n+    clippy::needless_bool\n+)]\n #![warn(clippy::needless_return)]\n \n macro_rules! the_answer {"}, {"sha": "8a471f802e111dbf62fa4d07afc1cb23582f2138", "filename": "tests/ui/needless_return.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.rs?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -1,7 +1,12 @@\n // run-rustfix\n \n-#![allow(unused, clippy::needless_bool)]\n-#![allow(clippy::if_same_then_else, clippy::single_match)]\n+#![allow(unused)]\n+#![allow(\n+    clippy::if_same_then_else,\n+    clippy::single_match,\n+    clippy::branches_sharing_code,\n+    clippy::needless_bool\n+)]\n #![warn(clippy::needless_return)]\n \n macro_rules! the_answer {"}, {"sha": "075db22456f736b0ad268830dd5687af4aa1f702", "filename": "tests/ui/needless_return.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d91da405df2dc33a8baf0a580ad564b94e53d835/tests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_return.stderr?ref=d91da405df2dc33a8baf0a580ad564b94e53d835", "patch": "@@ -1,109 +1,109 @@\n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:18:5\n+  --> $DIR/needless_return.rs:23:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n    |\n    = note: `-D clippy::needless-return` implied by `-D warnings`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:22:5\n+  --> $DIR/needless_return.rs:27:5\n    |\n LL |     return true;\n    |     ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:27:9\n+  --> $DIR/needless_return.rs:32:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:29:9\n+  --> $DIR/needless_return.rs:34:9\n    |\n LL |         return false;\n    |         ^^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:35:17\n+  --> $DIR/needless_return.rs:40:17\n    |\n LL |         true => return false,\n    |                 ^^^^^^^^^^^^ help: remove `return`: `false`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:37:13\n+  --> $DIR/needless_return.rs:42:13\n    |\n LL |             return true;\n    |             ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:44:9\n+  --> $DIR/needless_return.rs:49:9\n    |\n LL |         return true;\n    |         ^^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:46:16\n+  --> $DIR/needless_return.rs:51:16\n    |\n LL |     let _ = || return true;\n    |                ^^^^^^^^^^^ help: remove `return`: `true`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:54:5\n+  --> $DIR/needless_return.rs:59:5\n    |\n LL |     return;\n    |     ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:59:9\n+  --> $DIR/needless_return.rs:64:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:61:9\n+  --> $DIR/needless_return.rs:66:9\n    |\n LL |         return;\n    |         ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:68:14\n+  --> $DIR/needless_return.rs:73:14\n    |\n LL |         _ => return,\n    |              ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:83:9\n+  --> $DIR/needless_return.rs:88:9\n    |\n LL |         return String::from(\"test\");\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::from(\"test\")`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:85:9\n+  --> $DIR/needless_return.rs:90:9\n    |\n LL |         return String::new();\n    |         ^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `String::new()`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:106:32\n+  --> $DIR/needless_return.rs:111:32\n    |\n LL |         bar.unwrap_or_else(|_| return)\n    |                                ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:111:13\n+  --> $DIR/needless_return.rs:116:13\n    |\n LL |             return;\n    |             ^^^^^^^ help: remove `return`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:113:20\n+  --> $DIR/needless_return.rs:118:20\n    |\n LL |         let _ = || return;\n    |                    ^^^^^^ help: replace `return` with an empty block: `{}`\n \n error: unneeded `return` statement\n-  --> $DIR/needless_return.rs:119:32\n+  --> $DIR/needless_return.rs:124:32\n    |\n LL |         res.unwrap_or_else(|_| return Foo)\n    |                                ^^^^^^^^^^ help: remove `return`: `Foo`"}]}