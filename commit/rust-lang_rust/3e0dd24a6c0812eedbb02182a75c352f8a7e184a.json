{"sha": "3e0dd24a6c0812eedbb02182a75c352f8a7e184a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMGRkMjRhNmMwODEyZWVkYmIwMjE4MmE3NWMzNTJmOGE3ZTE4NGE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-25T07:03:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-25T07:03:58Z"}, "message": "Auto merge of #77546 - lcnr:impl-trait-closure, r=eddyb\n\nfix def collector for impl trait\n\nfixes #77329\n\nWe now consistently make `impl Trait` a hir owner, requiring some special casing for synthetic generic params.\n\nr? `@eddyb`", "tree": {"sha": "ff4818aee54f87a34953d5285643e97a252e6452", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff4818aee54f87a34953d5285643e97a252e6452"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e0dd24a6c0812eedbb02182a75c352f8a7e184a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e0dd24a6c0812eedbb02182a75c352f8a7e184a", "html_url": "https://github.com/rust-lang/rust/commit/3e0dd24a6c0812eedbb02182a75c352f8a7e184a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17cc9b6256c95c31944591aec683884fead4e3b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/17cc9b6256c95c31944591aec683884fead4e3b6", "html_url": "https://github.com/rust-lang/rust/commit/17cc9b6256c95c31944591aec683884fead4e3b6"}, {"sha": "567d55ef9ef4c441365227aeb14880eef639c349", "url": "https://api.github.com/repos/rust-lang/rust/commits/567d55ef9ef4c441365227aeb14880eef639c349", "html_url": "https://github.com/rust-lang/rust/commit/567d55ef9ef4c441365227aeb14880eef639c349"}], "stats": {"total": 117, "additions": 98, "deletions": 19}, "files": [{"sha": "a3f046986c01418f18a1d1671fcf510a5ea5bdfa", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=3e0dd24a6c0812eedbb02182a75c352f8a7e184a", "patch": "@@ -538,6 +538,12 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         }\n                         self.visit_fn_ret_ty(&f.decl.output)\n                     }\n+                    TyKind::ImplTrait(def_node_id, _) => {\n+                        self.lctx.allocate_hir_id_counter(def_node_id);\n+                        self.with_hir_id_owner(Some(def_node_id), |this| {\n+                            visit::walk_ty(this, t);\n+                        });\n+                    }\n                     _ => visit::walk_ty(self, t),\n                 }\n             }\n@@ -1347,10 +1353,14 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         // Add a definition for the in-band `Param`.\n                         let def_id = self.resolver.local_def_id(def_node_id);\n \n-                        let hir_bounds = self.lower_param_bounds(\n-                            bounds,\n-                            ImplTraitContext::Universal(in_band_ty_params),\n-                        );\n+                        self.allocate_hir_id_counter(def_node_id);\n+\n+                        let hir_bounds = self.with_hir_id_owner(def_node_id, |this| {\n+                            this.lower_param_bounds(\n+                                bounds,\n+                                ImplTraitContext::Universal(in_band_ty_params),\n+                            )\n+                        });\n                         // Set the name to `impl Bound1 + Bound2`.\n                         let ident = Ident::from_str_and_span(&pprust::ty_to_string(t), span);\n                         in_band_ty_params.push(hir::GenericParam {\n@@ -2201,7 +2211,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                         .attrs\n                         .iter()\n                         .filter(|attr| self.sess.check_name(attr, sym::rustc_synthetic))\n-                        .map(|_| hir::SyntheticTyParamKind::ImplTrait)\n+                        .map(|_| hir::SyntheticTyParamKind::FromAttr)\n                         .next(),\n                 };\n "}, {"sha": "d452156a5a0021dcb087e3d8978d34b9d1a49770", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=3e0dd24a6c0812eedbb02182a75c352f8a7e184a", "patch": "@@ -486,6 +486,8 @@ impl Generics<'hir> {\n #[derive(HashStable_Generic)]\n pub enum SyntheticTyParamKind {\n     ImplTrait,\n+    // Created by the `#[rustc_synthetic]` attribute.\n+    FromAttr,\n }\n \n /// A where-clause in a definition."}, {"sha": "516c9b6752b97afa46636b3fffe66a6896880c56", "filename": "compiler/rustc_middle/src/hir/map/collector.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fcollector.rs?ref=3e0dd24a6c0812eedbb02182a75c352f8a7e184a", "patch": "@@ -360,8 +360,26 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n     }\n \n     fn visit_generic_param(&mut self, param: &'hir GenericParam<'hir>) {\n-        self.insert(param.span, param.hir_id, Node::GenericParam(param));\n-        intravisit::walk_generic_param(self, param);\n+        if let hir::GenericParamKind::Type {\n+            synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n+            ..\n+        } = param.kind\n+        {\n+            debug_assert_eq!(\n+                param.hir_id.owner,\n+                self.definitions.opt_hir_id_to_local_def_id(param.hir_id).unwrap()\n+            );\n+            self.with_dep_node_owner(param.hir_id.owner, param, |this, hash| {\n+                this.insert_with_hash(param.span, param.hir_id, Node::GenericParam(param), hash);\n+\n+                this.with_parent(param.hir_id, |this| {\n+                    intravisit::walk_generic_param(this, param);\n+                });\n+            });\n+        } else {\n+            self.insert(param.span, param.hir_id, Node::GenericParam(param));\n+            intravisit::walk_generic_param(self, param);\n+        }\n     }\n \n     fn visit_trait_item(&mut self, ti: &'hir TraitItem<'hir>) {"}, {"sha": "6d1a5fcc10b0ff14ff9c10e316e0358d3bef0370", "filename": "compiler/rustc_passes/src/hir_id_validator.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_id_validator.rs?ref=3e0dd24a6c0812eedbb02182a75c352f8a7e184a", "patch": "@@ -163,4 +163,17 @@ impl<'a, 'hir> intravisit::Visitor<'hir> for HirIdValidator<'a, 'hir> {\n         // we are currently in. So for those it's correct that they have a\n         // different owner.\n     }\n+\n+    fn visit_generic_param(&mut self, param: &'hir hir::GenericParam<'hir>) {\n+        if let hir::GenericParamKind::Type {\n+            synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n+            ..\n+        } = param.kind\n+        {\n+            // Synthetic impl trait parameters are owned by the node of the desugared type.\n+            // This means it is correct for them to have a different owner.\n+        } else {\n+            intravisit::walk_generic_param(self, param);\n+        }\n+    }\n }"}, {"sha": "a4de4d500f5e9f0d4865c7e0887e17495d50ac5e", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=3e0dd24a6c0812eedbb02182a75c352f8a7e184a", "patch": "@@ -240,13 +240,13 @@ impl<'a, 'b> visit::Visitor<'a> for DefCollector<'a, 'b> {\n \n     fn visit_ty(&mut self, ty: &'a Ty) {\n         match ty.kind {\n-            TyKind::MacCall(..) => return self.visit_macro_invoc(ty.id),\n+            TyKind::MacCall(..) => self.visit_macro_invoc(ty.id),\n             TyKind::ImplTrait(node_id, _) => {\n-                self.create_def(node_id, DefPathData::ImplTrait, ty.span);\n+                let parent_def = self.create_def(node_id, DefPathData::ImplTrait, ty.span);\n+                self.with_parent(parent_def, |this| visit::walk_ty(this, ty));\n             }\n-            _ => {}\n+            _ => visit::walk_ty(self, ty),\n         }\n-        visit::walk_ty(self, ty);\n     }\n \n     fn visit_stmt(&mut self, stmt: &'a Stmt) {"}, {"sha": "dbb5e3cc9f06620f3a03041096dc62ac75607400", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=3e0dd24a6c0812eedbb02182a75c352f8a7e184a", "patch": "@@ -320,6 +320,15 @@ impl<'tcx> DumpVisitor<'tcx> {\n         for param in generics.params {\n             match param.kind {\n                 hir::GenericParamKind::Lifetime { .. } => {}\n+                hir::GenericParamKind::Type {\n+                    synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n+                    ..\n+                } => {\n+                    return self\n+                        .nest_typeck_results(self.tcx.hir().local_def_id(param.hir_id), |this| {\n+                            this.visit_generics(generics)\n+                        });\n+                }\n                 hir::GenericParamKind::Type { .. } => {\n                     let param_ss = param.name.ident().span;\n                     let name = escape(self.span.snippet(param_ss));\n@@ -351,7 +360,8 @@ impl<'tcx> DumpVisitor<'tcx> {\n                 hir::GenericParamKind::Const { .. } => {}\n             }\n         }\n-        self.visit_generics(generics);\n+\n+        self.visit_generics(generics)\n     }\n \n     fn process_fn("}, {"sha": "3bfb2d3f1b0f958173bed32d9d9bd3914d1e48c2", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=3e0dd24a6c0812eedbb02182a75c352f8a7e184a", "patch": "@@ -548,13 +548,18 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         generics: &ty::Generics,\n     ) -> bool {\n         let explicit = !seg.infer_args;\n-        let impl_trait = generics.params.iter().any(|param| match param.kind {\n-            ty::GenericParamDefKind::Type {\n-                synthetic: Some(hir::SyntheticTyParamKind::ImplTrait),\n-                ..\n-            } => true,\n-            _ => false,\n-        });\n+        let impl_trait =\n+            generics.params.iter().any(|param| match param.kind {\n+                ty::GenericParamDefKind::Type {\n+                    synthetic:\n+                        Some(\n+                            hir::SyntheticTyParamKind::ImplTrait\n+                            | hir::SyntheticTyParamKind::FromAttr,\n+                        ),\n+                    ..\n+                } => true,\n+                _ => false,\n+            });\n \n         if explicit && impl_trait {\n             let spans = seg"}, {"sha": "3cfce459e37dc8b6c5f62b7aca8b0d1ca25f8c1b", "filename": "src/test/ui/impl-trait/closure-in-impl-trait-arg.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-in-impl-trait-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-in-impl-trait-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-in-impl-trait-arg.rs?ref=3e0dd24a6c0812eedbb02182a75c352f8a7e184a", "patch": "@@ -0,0 +1,7 @@\n+// run-pass\n+#![allow(unused_must_use)]\n+fn bug(_: impl Iterator<Item = [(); { |x: u32| { x }; 4 }]>) {}\n+\n+fn main() {\n+    bug(std::iter::empty());\n+}"}, {"sha": "3593a1d5c8d10970916b5d9b9e8022882c34ab40", "filename": "src/test/ui/impl-trait/closure-in-impl-trait.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-in-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e0dd24a6c0812eedbb02182a75c352f8a7e184a/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-in-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fclosure-in-impl-trait.rs?ref=3e0dd24a6c0812eedbb02182a75c352f8a7e184a", "patch": "@@ -0,0 +1,14 @@\n+// run-pass\n+#![allow(unused_must_use)]\n+fn bug<T>() -> impl Iterator<Item = [(); { |x: u32| { x }; 4 }]> {\n+    std::iter::empty()\n+}\n+\n+fn ok<T>() -> Box<dyn Iterator<Item = [(); { |x: u32| { x }; 4 }]>> {\n+    Box::new(std::iter::empty())\n+}\n+\n+fn main() {\n+    for _item in ok::<u32>() {}\n+    for _item in bug::<u32>() {}\n+}"}]}