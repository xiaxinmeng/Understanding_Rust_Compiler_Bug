{"sha": "1c8de173238a02abeb5642c25c3cef1eea52ac18", "node_id": "C_kwDOAAsO6NoAKDFjOGRlMTczMjM4YTAyYWJlYjU2NDJjMjVjM2NlZjFlZWE1MmFjMTg", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-07T08:37:22Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2022-09-07T08:42:23Z"}, "message": "Rustdoc-Json: More accurate struct type.\n\nCloses #101489", "tree": {"sha": "12f2484c759eea2db34c0fdacfba2c1503060458", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12f2484c759eea2db34c0fdacfba2c1503060458"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c8de173238a02abeb5642c25c3cef1eea52ac18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c8de173238a02abeb5642c25c3cef1eea52ac18", "html_url": "https://github.com/rust-lang/rust/commit/1c8de173238a02abeb5642c25c3cef1eea52ac18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c8de173238a02abeb5642c25c3cef1eea52ac18/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78a891d364a7358ed9eb9c93099ba2f3e6817ca6", "url": "https://api.github.com/repos/rust-lang/rust/commits/78a891d364a7358ed9eb9c93099ba2f3e6817ca6", "html_url": "https://github.com/rust-lang/rust/commit/78a891d364a7358ed9eb9c93099ba2f3e6817ca6"}], "stats": {"total": 189, "additions": 118, "deletions": 71}, "files": [{"sha": "991c881bae10d8b707b2e1c3cd43ba4725fb7076", "filename": "src/etc/check_missing_items.py", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Fetc%2Fcheck_missing_items.py", "raw_url": "https://github.com/rust-lang/rust/raw/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Fetc%2Fcheck_missing_items.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcheck_missing_items.py?ref=1c8de173238a02abeb5642c25c3cef1eea52ac18", "patch": "@@ -132,9 +132,11 @@ def check_type(ty):\n         work_list |= set(item[\"inner\"][\"items\"]) - visited\n     elif item[\"kind\"] == \"struct\":\n         check_generics(item[\"inner\"][\"generics\"])\n-        work_list |= (\n-            set(item[\"inner\"][\"fields\"]) | set(item[\"inner\"][\"impls\"])\n-        ) - visited\n+        work_list |= set(item[\"inner\"][\"impls\"]) - visited\n+        if \"tuple\" in item[\"inner\"][\"kind\"]:\n+            work_list |= set(filter(None, item[\"inner\"][\"kind\"][\"tuple\"])) - visited\n+        elif \"plain\" in item[\"inner\"][\"kind\"]:\n+            work_list |= set(item[\"inner\"][\"kind\"][\"plain\"][\"fields\"]) - visited\n     elif item[\"kind\"] == \"struct_field\":\n         check_type(item[\"inner\"])\n     elif item[\"kind\"] == \"enum\":"}, {"sha": "1177d482ac06d94784f05b78896df638355d5429", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 11, "deletions": 25, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=1c8de173238a02abeb5642c25c3cef1eea52ac18", "patch": "@@ -304,11 +304,19 @@ impl FromWithTcx<clean::Struct> for Struct {\n     fn from_tcx(struct_: clean::Struct, tcx: TyCtxt<'_>) -> Self {\n         let fields_stripped = struct_.has_stripped_entries();\n         let clean::Struct { struct_type, generics, fields } = struct_;\n+\n+        let kind = match struct_type {\n+            CtorKind::Fn => StructKind::Tuple(ids_keeping_stripped(fields, tcx)),\n+            CtorKind::Const => {\n+                assert!(fields.is_empty());\n+                StructKind::Unit\n+            }\n+            CtorKind::Fictive => StructKind::Plain { fields: ids(fields, tcx), fields_stripped },\n+        };\n+\n         Struct {\n-            struct_type: from_ctor_kind(struct_type),\n+            kind,\n             generics: generics.into_tcx(tcx),\n-            fields_stripped,\n-            fields: ids(fields, tcx),\n             impls: Vec::new(), // Added in JsonRenderer::item\n         }\n     }\n@@ -327,14 +335,6 @@ impl FromWithTcx<clean::Union> for Union {\n     }\n }\n \n-pub(crate) fn from_ctor_kind(struct_type: CtorKind) -> StructType {\n-    match struct_type {\n-        CtorKind::Fictive => StructType::Plain,\n-        CtorKind::Fn => StructType::Tuple,\n-        CtorKind::Const => StructType::Unit,\n-    }\n-}\n-\n pub(crate) fn from_fn_header(header: &rustc_hir::FnHeader) -> Header {\n     Header {\n         async_: header.is_async(),\n@@ -644,20 +644,6 @@ impl FromWithTcx<clean::Enum> for Enum {\n     }\n }\n \n-impl FromWithTcx<clean::VariantStruct> for Struct {\n-    fn from_tcx(struct_: clean::VariantStruct, tcx: TyCtxt<'_>) -> Self {\n-        let fields_stripped = struct_.has_stripped_entries();\n-        let clean::VariantStruct { struct_type, fields } = struct_;\n-        Struct {\n-            struct_type: from_ctor_kind(struct_type),\n-            generics: Generics { params: vec![], where_predicates: vec![] },\n-            fields_stripped,\n-            fields: ids(fields, tcx),\n-            impls: Vec::new(),\n-        }\n-    }\n-}\n-\n impl FromWithTcx<clean::Variant> for Variant {\n     fn from_tcx(variant: clean::Variant, tcx: TyCtxt<'_>) -> Self {\n         use clean::Variant::*;"}, {"sha": "13bafa506e4a6c6753d3435ce976e12ed96388c9", "filename": "src/rustdoc-json-types/lib.rs", "status": "modified", "additions": 30, "deletions": 12, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Frustdoc-json-types%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Frustdoc-json-types%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Flib.rs?ref=1c8de173238a02abeb5642c25c3cef1eea52ac18", "patch": "@@ -9,7 +9,7 @@ use std::path::PathBuf;\n use serde::{Deserialize, Serialize};\n \n /// rustdoc format-version.\n-pub const FORMAT_VERSION: u32 = 20;\n+pub const FORMAT_VERSION: u32 = 21;\n \n /// A `Crate` is the root of the emitted JSON blob. It contains all type/documentation information\n /// about the language items in the local crate, as well as info about external items to allow\n@@ -289,13 +289,39 @@ pub struct Union {\n \n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Struct {\n-    pub struct_type: StructType,\n+    pub kind: StructKind,\n     pub generics: Generics,\n-    pub fields_stripped: bool,\n-    pub fields: Vec<Id>,\n     pub impls: Vec<Id>,\n }\n \n+#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n+#[serde(rename_all = \"snake_case\")]\n+pub enum StructKind {\n+    /// A struct with no fields and no parentheses.\n+    ///\n+    /// ```rust\n+    /// pub struct Unit;\n+    /// ```\n+    Unit,\n+    /// A struct with unnamed fields.\n+    ///\n+    /// ```rust\n+    /// pub struct TupleStruct(i32);\n+    /// pub struct EmptyTupleStruct();\n+    /// ```\n+    ///\n+    /// All [`Id`]'s will point to [`ItemEnum::StructField`]. Private and\n+    /// `#[doc(hidden)]` fields will be given as `None`\n+    Tuple(Vec<Option<Id>>),\n+    /// A struct with nammed fields.\n+    ///\n+    /// ```rust\n+    /// pub struct PlainStruct { x: i32 }\n+    /// pub struct EmptyPlainStruct {}\n+    /// ```\n+    Plain { fields: Vec<Id>, fields_stripped: bool },\n+}\n+\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Enum {\n     pub generics: Generics,\n@@ -357,14 +383,6 @@ pub struct Discriminant {\n     pub value: String,\n }\n \n-#[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n-#[serde(rename_all = \"snake_case\")]\n-pub enum StructType {\n-    Plain,\n-    Tuple,\n-    Unit,\n-}\n-\n #[derive(Clone, Debug, PartialEq, Eq, Hash, Serialize, Deserialize)]\n pub struct Header {\n     #[serde(rename = \"const\")]"}, {"sha": "399ff54b294977a12b3613805c6f6743c6f19108", "filename": "src/rustdoc-json-types/tests.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Frustdoc-json-types%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Frustdoc-json-types%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc-json-types%2Ftests.rs?ref=1c8de173238a02abeb5642c25c3cef1eea52ac18", "patch": "@@ -3,10 +3,8 @@ use super::*;\n #[test]\n fn test_struct_info_roundtrip() {\n     let s = ItemEnum::Struct(Struct {\n-        struct_type: StructType::Plain,\n         generics: Generics { params: vec![], where_predicates: vec![] },\n-        fields_stripped: false,\n-        fields: vec![],\n+        kind: StructKind::Plain { fields: vec![], fields_stripped: false },\n         impls: vec![],\n     });\n "}, {"sha": "ee2d2efa960e8be06730af0da18b58befb87c9ee", "filename": "src/test/rustdoc-json/nested.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fnested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fnested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fnested.rs?ref=1c8de173238a02abeb5642c25c3cef1eea52ac18", "patch": "@@ -17,7 +17,7 @@ pub mod l1 {\n     pub mod l3 {\n \n         // @is \"$.index[*][?(@.name=='L4')].kind\" \\\"struct\\\"\n-        // @is \"$.index[*][?(@.name=='L4')].inner.struct_type\" \\\"unit\\\"\n+        // @is \"$.index[*][?(@.name=='L4')].inner.kind\" \\\"unit\\\"\n         // @set l4_id = \"$.index[*][?(@.name=='L4')].id\"\n         // @ismany \"$.index[*][?(@.name=='l3')].inner.items[*]\" $l4_id\n         pub struct L4;"}, {"sha": "b86ab93c264d5f5c3459617a823bbcdbe3c1f20f", "filename": "src/test/rustdoc-json/structs/plain_all_pub.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_all_pub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_all_pub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_all_pub.rs?ref=1c8de173238a02abeb5642c25c3cef1eea52ac18", "patch": "@@ -0,0 +1,11 @@\n+pub struct Demo {\n+    pub x: i32,\n+    pub y: i32,\n+}\n+\n+// @set x = \"$.index[*][?(@.name=='x')].id\"\n+// @set y = \"$.index[*][?(@.name=='y')].id\"\n+// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[0]\" $x\n+// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[1]\" $y\n+// @count \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[*]\" 2\n+// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields_stripped\" false"}, {"sha": "7800b55a481ac485c8ed778ae576587ac2dabbe6", "filename": "src/test/rustdoc-json/structs/plain_doc_hidden.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_doc_hidden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_doc_hidden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_doc_hidden.rs?ref=1c8de173238a02abeb5642c25c3cef1eea52ac18", "patch": "@@ -0,0 +1,11 @@\n+pub struct Demo {\n+    pub x: i32,\n+    #[doc(hidden)]\n+    pub y: i32,\n+}\n+\n+// @set x = \"$.index[*][?(@.name=='x')].id\"\n+// @!has \"$.index[*][?(@.name=='y')].id\"\n+// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[0]\" $x\n+// @count \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[*]\" 1\n+// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields_stripped\" true"}, {"sha": "1d01b8bc14a81819381a00d1a37346a4323246cb", "filename": "src/test/rustdoc-json/structs/plain_empty.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_empty.rs?ref=1c8de173238a02abeb5642c25c3cef1eea52ac18", "patch": "@@ -1,6 +1,5 @@\n-// @has \"$.index[*][?(@.name=='PlainEmpty')].visibility\" \\\"public\\\"\n-// @has \"$.index[*][?(@.name=='PlainEmpty')].kind\" \\\"struct\\\"\n-// @has \"$.index[*][?(@.name=='PlainEmpty')].inner.struct_type\" \\\"plain\\\"\n-// @has \"$.index[*][?(@.name=='PlainEmpty')].inner.fields_stripped\" false\n-// @has \"$.index[*][?(@.name=='PlainEmpty')].inner.fields\" []\n+// @is \"$.index[*][?(@.name=='PlainEmpty')].visibility\" \\\"public\\\"\n+// @is \"$.index[*][?(@.name=='PlainEmpty')].kind\" \\\"struct\\\"\n+// @is \"$.index[*][?(@.name=='PlainEmpty')].inner.kind.plain.fields_stripped\" false\n+// @is \"$.index[*][?(@.name=='PlainEmpty')].inner.kind.plain.fields\" []\n pub struct PlainEmpty {}"}, {"sha": "9b771224d97417c15d7a8e20993ce3bde70de2fc", "filename": "src/test/rustdoc-json/structs/plain_pub_priv.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_pub_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_pub_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fplain_pub_priv.rs?ref=1c8de173238a02abeb5642c25c3cef1eea52ac18", "patch": "@@ -0,0 +1,9 @@\n+pub struct Demo {\n+    pub x: i32,\n+    y: i32,\n+}\n+\n+// @set x = \"$.index[*][?(@.name=='x')].id\"\n+// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[0]\" $x\n+// @count \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields[*]\" 1\n+// @is \"$.index[*][?(@.name=='Demo')].inner.kind.plain.fields_stripped\" true"}, {"sha": "6bdb753ee0136c7541a4b7454d9dcb60460f4fce", "filename": "src/test/rustdoc-json/structs/tuple.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple.rs?ref=1c8de173238a02abeb5642c25c3cef1eea52ac18", "patch": "@@ -1,5 +1,4 @@\n-// @has \"$.index[*][?(@.name=='Tuple')].visibility\" \\\"public\\\"\n-// @has \"$.index[*][?(@.name=='Tuple')].kind\" \\\"struct\\\"\n-// @has \"$.index[*][?(@.name=='Tuple')].inner.struct_type\" \\\"tuple\\\"\n-// @has \"$.index[*][?(@.name=='Tuple')].inner.fields_stripped\" true\n+// @is \"$.index[*][?(@.name=='Tuple')].visibility\" \\\"public\\\"\n+// @is \"$.index[*][?(@.name=='Tuple')].kind\" \\\"struct\\\"\n+// @is \"$.index[*][?(@.name=='Tuple')].inner.kind.tuple\" '[null, null]'\n pub struct Tuple(u32, String);"}, {"sha": "0ad6a89547fc3343f2eaef3c2c58bc62a5cb0105", "filename": "src/test/rustdoc-json/structs/tuple_empty.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple_empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple_empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple_empty.rs?ref=1c8de173238a02abeb5642c25c3cef1eea52ac18", "patch": "@@ -0,0 +1,2 @@\n+// @is \"$.index[*][?(@.name=='TupleUnit')].inner.kind.tuple\" []\n+pub struct TupleUnit();"}, {"sha": "9d5a1d1c8be7fccbc45268aa864a36069a76a885", "filename": "src/test/rustdoc-json/structs/tuple_pub_priv.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple_pub_priv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple_pub_priv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Ftuple_pub_priv.rs?ref=1c8de173238a02abeb5642c25c3cef1eea52ac18", "patch": "@@ -0,0 +1,13 @@\n+pub struct Demo(\n+    i32,\n+    /// field\n+    pub i32,\n+    #[doc(hidden)] i32,\n+);\n+\n+// @set field = \"$.index[*][?(@.docs=='field')].id\"\n+\n+// @is    \"$.index[*][?(@.name=='Demo')].inner.kind.tuple[0]\" null\n+// @is    \"$.index[*][?(@.name=='Demo')].inner.kind.tuple[1]\" $field\n+// @is    \"$.index[*][?(@.name=='Demo')].inner.kind.tuple[2]\" null\n+// @count \"$.index[*][?(@.name=='Demo')].inner.kind.tuple[*]\" 3"}, {"sha": "265709717212f492e1d720cd3d14eb1264678267", "filename": "src/test/rustdoc-json/structs/unit.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Funit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Funit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Funit.rs?ref=1c8de173238a02abeb5642c25c3cef1eea52ac18", "patch": "@@ -1,5 +1,4 @@\n-// @has \"$.index[*][?(@.name=='Unit')].visibility\" \\\"public\\\"\n-// @has \"$.index[*][?(@.name=='Unit')].kind\" \\\"struct\\\"\n-// @has \"$.index[*][?(@.name=='Unit')].inner.struct_type\" \\\"unit\\\"\n-// @has \"$.index[*][?(@.name=='Unit')].inner.fields\" []\n+// @is \"$.index[*][?(@.name=='Unit')].visibility\" \\\"public\\\"\n+// @is \"$.index[*][?(@.name=='Unit')].kind\" \\\"struct\\\"\n+// @is \"$.index[*][?(@.name=='Unit')].inner.kind\" \\\"unit\\\"\n pub struct Unit;"}, {"sha": "00474800a0e54c76328169e5b88cf9bc2d11cafc", "filename": "src/test/rustdoc-json/structs/with_generics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_generics.rs?ref=1c8de173238a02abeb5642c25c3cef1eea52ac18", "patch": "@@ -1,13 +1,13 @@\n use std::collections::HashMap;\n \n-// @has \"$.index[*][?(@.name=='WithGenerics')].visibility\" \\\"public\\\"\n-// @has \"$.index[*][?(@.name=='WithGenerics')].kind\" \\\"struct\\\"\n-// @has \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[0].name\" \\\"T\\\"\n-// @has \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[0].kind.type\"\n-// @has \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[1].name\" \\\"U\\\"\n-// @has \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[1].kind.type\"\n-// @has \"$.index[*][?(@.name=='WithGenerics')].inner.struct_type\" \\\"plain\\\"\n-// @has \"$.index[*][?(@.name=='WithGenerics')].inner.fields_stripped\" true\n+// @is \"$.index[*][?(@.name=='WithGenerics')].visibility\" \\\"public\\\"\n+// @is \"$.index[*][?(@.name=='WithGenerics')].kind\" \\\"struct\\\"\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[0].name\" \\\"T\\\"\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[0].kind.type.bounds\" []\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[1].name\" \\\"U\\\"\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.generics.params[1].kind.type.bounds\" []\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.kind.plain.fields_stripped\" true\n+// @is \"$.index[*][?(@.name=='WithGenerics')].inner.kind.plain.fields\" []\n pub struct WithGenerics<T, U> {\n     stuff: Vec<T>,\n     things: HashMap<U, U>,"}, {"sha": "9c5a37f3957c03ab2f68eca8b02cbcec0b5c5d8a", "filename": "src/test/rustdoc-json/structs/with_primitives.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c8de173238a02abeb5642c25c3cef1eea52ac18/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fstructs%2Fwith_primitives.rs?ref=1c8de173238a02abeb5642c25c3cef1eea52ac18", "patch": "@@ -1,9 +1,9 @@\n-// @has \"$.index[*][?(@.name=='WithPrimitives')].visibility\" \\\"public\\\"\n-// @has \"$.index[*][?(@.name=='WithPrimitives')].kind\" \\\"struct\\\"\n-// @has \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].name\" \\\"\\'a\\\"\n-// @has \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].kind.lifetime.outlives\" []\n-// @has \"$.index[*][?(@.name=='WithPrimitives')].inner.struct_type\" \\\"plain\\\"\n-// @has \"$.index[*][?(@.name=='WithPrimitives')].inner.fields_stripped\" true\n+// @is \"$.index[*][?(@.name=='WithPrimitives')].visibility\" \\\"public\\\"\n+// @is \"$.index[*][?(@.name=='WithPrimitives')].kind\" \\\"struct\\\"\n+// @is \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].name\" \\\"\\'a\\\"\n+// @is \"$.index[*][?(@.name=='WithPrimitives')].inner.generics.params[0].kind.lifetime.outlives\" []\n+// @is \"$.index[*][?(@.name=='WithPrimitives')].inner.kind.plain.fields_stripped\" true\n+// @is \"$.index[*][?(@.name=='WithPrimitives')].inner.kind.plain.fields\" []\n pub struct WithPrimitives<'a> {\n     num: u32,\n     s: &'a str,"}]}