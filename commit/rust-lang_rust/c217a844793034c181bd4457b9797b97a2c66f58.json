{"sha": "c217a844793034c181bd4457b9797b97a2c66f58", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyMTdhODQ0NzkzMDM0YzE4MWJkNDQ1N2I5Nzk3Yjk3YTJjNjZmNTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-07T21:56:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-07T21:56:39Z"}, "message": "auto merge of #14005 : alexcrichton/rust/extern-unsafe, r=pcwalton\n\nPreviously, the parser would not allow you to simultaneously implement a\r\nfunction with a different abi as well as being unsafe at the same time. This\r\nextends the parser to allow functions of the form:\r\n\r\n    unsafe extern fn foo() {\r\n        // ...\r\n    }\r\n\r\nThe closure type grammar was also changed to reflect this reversal, types\r\npreviously written as \"extern unsafe fn()\" must now be written as\r\n\"unsafe extern fn()\". The parser currently has a hack which allows the old\r\nstyle, but this will go away once a snapshot has landed.\r\n\r\nCloses #10025\r\n\r\n[breaking-change]", "tree": {"sha": "72ca8dc5d2c2d7a1b21f5d9e14f9e2e3c49b7b30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72ca8dc5d2c2d7a1b21f5d9e14f9e2e3c49b7b30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c217a844793034c181bd4457b9797b97a2c66f58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c217a844793034c181bd4457b9797b97a2c66f58", "html_url": "https://github.com/rust-lang/rust/commit/c217a844793034c181bd4457b9797b97a2c66f58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c217a844793034c181bd4457b9797b97a2c66f58/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "828ffab627350c6250786e0e4960bc3d3aa0b761", "url": "https://api.github.com/repos/rust-lang/rust/commits/828ffab627350c6250786e0e4960bc3d3aa0b761", "html_url": "https://github.com/rust-lang/rust/commit/828ffab627350c6250786e0e4960bc3d3aa0b761"}, {"sha": "08237cad8d2ce9287aedf99e57384407cc9dc42d", "url": "https://api.github.com/repos/rust-lang/rust/commits/08237cad8d2ce9287aedf99e57384407cc9dc42d", "html_url": "https://github.com/rust-lang/rust/commit/08237cad8d2ce9287aedf99e57384407cc9dc42d"}], "stats": {"total": 108, "additions": 59, "deletions": 49}, "files": [{"sha": "39700f91b5fed5be65b4927408f82f3dd7fb5144", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=c217a844793034c181bd4457b9797b97a2c66f58", "patch": "@@ -110,7 +110,6 @@ enum Family {\n     UnsafeFn,              // u\n     StaticMethod,          // F\n     UnsafeStaticMethod,    // U\n-    ForeignFn,             // e\n     Type,                  // y\n     ForeignType,           // T\n     Mod,                   // m\n@@ -134,7 +133,6 @@ fn item_family(item: ebml::Doc) -> Family {\n       'u' => UnsafeFn,\n       'F' => StaticMethod,\n       'U' => UnsafeStaticMethod,\n-      'e' => ForeignFn,\n       'y' => Type,\n       'T' => ForeignType,\n       'm' => Mod,\n@@ -339,7 +337,6 @@ fn item_to_def_like(item: ebml::Doc, did: ast::DefId, cnum: ast::CrateNum)\n         Struct    => DlDef(ast::DefStruct(did)),\n         UnsafeFn  => DlDef(ast::DefFn(did, ast::UnsafeFn)),\n         Fn        => DlDef(ast::DefFn(did, ast::NormalFn)),\n-        ForeignFn => DlDef(ast::DefFn(did, ast::ExternFn)),\n         StaticMethod | UnsafeStaticMethod => {\n             let fn_style = if fam == UnsafeStaticMethod { ast::UnsafeFn } else\n                 { ast::NormalFn };"}, {"sha": "06f742e1be0d50ad3fddb47971c1e6cb90fb0a08", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=c217a844793034c181bd4457b9797b97a2c66f58", "patch": "@@ -788,15 +788,13 @@ fn style_fn_family(s: FnStyle) -> char {\n     match s {\n         UnsafeFn => 'u',\n         NormalFn => 'f',\n-        ExternFn => 'e'\n     }\n }\n \n fn fn_style_static_method_family(s: FnStyle) -> char {\n     match s {\n         UnsafeFn => 'U',\n         NormalFn => 'F',\n-        _ => fail!(\"extern fn can't be static\")\n     }\n }\n "}, {"sha": "76621cfd09f84c3a9d086255d099607ebd8af127", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=c217a844793034c181bd4457b9797b97a2c66f58", "patch": "@@ -441,7 +441,6 @@ fn parse_fn_style(c: char) -> FnStyle {\n     match c {\n         'u' => UnsafeFn,\n         'n' => NormalFn,\n-        'c' => ExternFn,\n         _ => fail!(\"parse_fn_style: bad fn_style {}\", c)\n     }\n }"}, {"sha": "fd41d219b417a320c40ded7cb13945b17bea63e4", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=c217a844793034c181bd4457b9797b97a2c66f58", "patch": "@@ -298,7 +298,6 @@ fn enc_fn_style(w: &mut MemWriter, p: FnStyle) {\n     match p {\n         NormalFn => mywrite!(w, \"n\"),\n         UnsafeFn => mywrite!(w, \"u\"),\n-        ExternFn => mywrite!(w, \"c\")\n     }\n }\n "}, {"sha": "7dad6473478c13250ac705f660c9055fe46fb047", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=c217a844793034c181bd4457b9797b97a2c66f58", "patch": "@@ -22,6 +22,7 @@ use middle::privacy;\n use util::nodemap::NodeSet;\n \n use collections::HashSet;\n+use syntax::abi;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::ast_util::{def_id_of_def, is_local};\n@@ -250,8 +251,10 @@ impl<'a> ReachableContext<'a> {\n             match *node {\n                 ast_map::NodeItem(item) => {\n                     match item.node {\n-                        ast::ItemFn(_, ast::ExternFn, _, _, _) => {\n-                            self.reachable_symbols.insert(search_item);\n+                        ast::ItemFn(_, _, abi, _, _) => {\n+                            if abi != abi::Rust {\n+                                self.reachable_symbols.insert(search_item);\n+                            }\n                         }\n                         _ => {}\n                     }"}, {"sha": "8c4fd92cc0b9dcef77f35cde2e49c49288b0d8b1", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c217a844793034c181bd4457b9797b97a2c66f58", "patch": "@@ -1594,8 +1594,8 @@ impl<'a> Visitor<()> for TransItemVisitor<'a> {\n pub fn trans_item(ccx: &CrateContext, item: &ast::Item) {\n     let _icx = push_ctxt(\"trans_item\");\n     match item.node {\n-      ast::ItemFn(decl, fn_style, _abi, ref generics, body) => {\n-        if fn_style == ast::ExternFn  {\n+      ast::ItemFn(decl, _fn_style, abi, ref generics, body) => {\n+        if abi != Rust  {\n             let llfndecl = get_item_val(ccx, item.id);\n             foreign::trans_rust_fn_with_foreign_abi(\n                 ccx, decl, body, item.attrs.as_slice(), llfndecl, item.id);\n@@ -1939,8 +1939,8 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n                     }\n                 }\n \n-                ast::ItemFn(_, fn_style, _, _, _) => {\n-                    let llfn = if fn_style != ast::ExternFn {\n+                ast::ItemFn(_, _, abi, _, _) => {\n+                    let llfn = if abi == Rust {\n                         register_fn(ccx, i.span, sym, i.id, ty)\n                     } else {\n                         foreign::register_rust_fn_with_foreign_abi(ccx,"}, {"sha": "307654f1d96993bb64f0dfe18c4111d515955d77", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=c217a844793034c181bd4457b9797b97a2c66f58", "patch": "@@ -403,6 +403,5 @@ pub fn ast_fn_style_constant(fn_style: ast::FnStyle) -> uint {\n     match fn_style {\n         ast::UnsafeFn => 1u,\n         ast::NormalFn => 2u,\n-        ast::ExternFn => 3u\n     }\n }"}, {"sha": "42b0321e67d5884709ea6f1dfe1a1d88a999bf38", "filename": "src/librustc/middle/typeck/infer/glb.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fglb.rs?ref=c217a844793034c181bd4457b9797b97a2c66f58", "patch": "@@ -22,7 +22,7 @@ use middle::typeck::infer::{cres, InferCtxt};\n use middle::typeck::infer::{TypeTrace, Subtype};\n use middle::typeck::infer::fold_regions_in_sig;\n use syntax::ast::{Many, Once, MutImmutable, MutMutable};\n-use syntax::ast::{ExternFn, NormalFn, UnsafeFn, NodeId};\n+use syntax::ast::{NormalFn, UnsafeFn, NodeId};\n use syntax::ast::{Onceness, FnStyle};\n use collections::HashMap;\n use util::common::{indenter};\n@@ -83,7 +83,6 @@ impl<'f> Combine for Glb<'f> {\n \n     fn fn_styles(&self, a: FnStyle, b: FnStyle) -> cres<FnStyle> {\n         match (a, b) {\n-          (ExternFn, _) | (_, ExternFn) => Ok(ExternFn),\n           (NormalFn, _) | (_, NormalFn) => Ok(NormalFn),\n           (UnsafeFn, UnsafeFn) => Ok(UnsafeFn)\n         }"}, {"sha": "804c71da730325814ab0b8badad5854c70d0c5bf", "filename": "src/librustc/middle/typeck/infer/lub.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Flub.rs?ref=c217a844793034c181bd4457b9797b97a2c66f58", "patch": "@@ -23,7 +23,7 @@ use middle::typeck::infer::fold_regions_in_sig;\n use middle::typeck::infer::{TypeTrace, Subtype};\n use collections::HashMap;\n use syntax::ast::{Many, Once, NodeId};\n-use syntax::ast::{ExternFn, NormalFn, UnsafeFn};\n+use syntax::ast::{NormalFn, UnsafeFn};\n use syntax::ast::{Onceness, FnStyle};\n use util::ppaux::mt_to_str;\n \n@@ -78,8 +78,7 @@ impl<'f> Combine for Lub<'f> {\n     fn fn_styles(&self, a: FnStyle, b: FnStyle) -> cres<FnStyle> {\n         match (a, b) {\n           (UnsafeFn, _) | (_, UnsafeFn) => Ok(UnsafeFn),\n-          (NormalFn, _) | (_, NormalFn) => Ok(NormalFn),\n-          (ExternFn, ExternFn) => Ok(ExternFn),\n+          (NormalFn, NormalFn) => Ok(NormalFn),\n         }\n     }\n "}, {"sha": "d77dadcd7311dee6abc7c794ac24d056bc6abf1d", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=c217a844793034c181bd4457b9797b97a2c66f58", "patch": "@@ -1206,7 +1206,7 @@ impl Clean<Item> for ast::ForeignItem {\n                 ForeignFunctionItem(Function {\n                     decl: decl.clean(),\n                     generics: generics.clean(),\n-                    fn_style: ast::ExternFn,\n+                    fn_style: ast::NormalFn,\n                 })\n             }\n             ast::ForeignItemStatic(ref ty, mutbl) => {"}, {"sha": "aef5e8fcb97d10e623a355a4b0d3bdee82a41ac0", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=c217a844793034c181bd4457b9797b97a2c66f58", "patch": "@@ -397,10 +397,10 @@ impl fmt::Show for clean::Type {\n             clean::BareFunction(ref decl) => {\n                 write!(f.buf, \"{}{}fn{}{}\",\n                        FnStyleSpace(decl.fn_style),\n-                       match decl.abi {\n-                           ref x if \"\" == *x => \"\".to_owned(),\n-                           ref x if \"\\\"Rust\\\"\" == *x => \"\".to_owned(),\n-                           ref s => \" \" + *s + \" \",\n+                       match decl.abi.as_slice() {\n+                           \"\" => \" extern \".to_owned(),\n+                           \"\\\"Rust\\\"\" => \"\".to_owned(),\n+                           s => format!(\" extern {} \", s)\n                        },\n                        decl.generics,\n                        decl.decl)\n@@ -517,7 +517,6 @@ impl fmt::Show for FnStyleSpace {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match self.get() {\n             ast::UnsafeFn => write!(f.buf, \"unsafe \"),\n-            ast::ExternFn => write!(f.buf, \"extern \"),\n             ast::NormalFn => Ok(())\n         }\n     }"}, {"sha": "391116d2dbcd2aa0f9b53efc2dc8e7d311a39898", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=c217a844793034c181bd4457b9797b97a2c66f58", "patch": "@@ -876,15 +876,13 @@ pub struct FnDecl {\n pub enum FnStyle {\n     UnsafeFn, // declared with \"unsafe fn\"\n     NormalFn, // declared with \"fn\"\n-    ExternFn, // declared with \"extern fn\"\n }\n \n impl fmt::Show for FnStyle {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n             NormalFn => \"normal\".fmt(f),\n             UnsafeFn => \"unsafe\".fmt(f),\n-            ExternFn => \"extern\".fmt(f),\n         }\n     }\n }"}, {"sha": "38f3841f15a2030bfa6d16dba7bda88e454d2010", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c217a844793034c181bd4457b9797b97a2c66f58", "patch": "@@ -27,7 +27,7 @@ use ast::{ExprLit, ExprLoop, ExprMac};\n use ast::{ExprMethodCall, ExprParen, ExprPath, ExprProc};\n use ast::{ExprRepeat, ExprRet, ExprStruct, ExprTup, ExprUnary};\n use ast::{ExprVec, ExprVstore, ExprVstoreSlice};\n-use ast::{ExprVstoreMutSlice, ExprWhile, ExprForLoop, ExternFn, Field, FnDecl};\n+use ast::{ExprVstoreMutSlice, ExprWhile, ExprForLoop, Field, FnDecl};\n use ast::{ExprVstoreUniq, Once, Many};\n use ast::{ForeignItem, ForeignItemStatic, ForeignItemFn, ForeignMod};\n use ast::{Ident, NormalFn, Inherited, Item, Item_, ItemStatic};\n@@ -884,25 +884,29 @@ impl<'a> Parser<'a> {\n     pub fn parse_ty_bare_fn(&mut self) -> Ty_ {\n         /*\n \n-        [extern \"ABI\"] [unsafe] fn <'lt> (S) -> T\n-                ^~~~^  ^~~~~~~^    ^~~~^ ^~^    ^\n-                  |      |           |    |     |\n-                  |      |           |    |   Return type\n-                  |      |           |  Argument types\n-                  |      |       Lifetimes\n-                  |      |\n-                  |    Function Style\n-                 ABI\n-\n+        [unsafe] [extern \"ABI\"] fn <'lt> (S) -> T\n+         ^~~~^           ^~~~^     ^~~~^ ^~^    ^\n+           |               |         |    |     |\n+           |               |         |    |   Return type\n+           |               |         |  Argument types\n+           |               |     Lifetimes\n+           |              ABI\n+        Function Style\n         */\n \n+        let fn_style = self.parse_unsafety();\n         let abi = if self.eat_keyword(keywords::Extern) {\n             self.parse_opt_abi().unwrap_or(abi::C)\n         } else {\n             abi::Rust\n         };\n \n-        let fn_style = self.parse_unsafety();\n+        // NOTE: remove after a stage0 snapshot\n+        let fn_style = match self.parse_unsafety() {\n+            UnsafeFn => UnsafeFn,\n+            NormalFn => fn_style,\n+        };\n+\n         self.expect_keyword(keywords::Fn);\n         let (decl, lifetimes) = self.parse_ty_fn_decl(true);\n         return TyBareFn(@BareFnTy {\n@@ -1256,6 +1260,7 @@ impl<'a> Parser<'a> {\n             self.expect_and();\n             self.parse_borrowed_pointee()\n         } else if self.is_keyword(keywords::Extern) ||\n+                  self.is_keyword(keywords::Unsafe) ||\n                 self.token_is_bare_fn_keyword() {\n             // BARE FUNCTION\n             self.parse_ty_bare_fn()\n@@ -4563,7 +4568,7 @@ impl<'a> Parser<'a> {\n                 // EXTERN FUNCTION ITEM\n                 let abi = opt_abi.unwrap_or(abi::C);\n                 let (ident, item_, extra_attrs) =\n-                    self.parse_item_fn(ExternFn, abi);\n+                    self.parse_item_fn(NormalFn, abi);\n                 let item = self.mk_item(lo,\n                                         self.last_span.hi,\n                                         ident,\n@@ -4617,9 +4622,14 @@ impl<'a> Parser<'a> {\n             && self.look_ahead(1u, |t| *t != token::LBRACE) {\n             // UNSAFE FUNCTION ITEM\n             self.bump();\n+            let abi = if self.eat_keyword(keywords::Extern) {\n+                self.parse_opt_abi().unwrap_or(abi::C)\n+            } else {\n+                abi::Rust\n+            };\n             self.expect_keyword(keywords::Fn);\n             let (ident, item_, extra_attrs) =\n-                self.parse_item_fn(UnsafeFn, abi::Rust);\n+                self.parse_item_fn(UnsafeFn, abi);\n             let item = self.mk_item(lo,\n                                     self.last_span.hi,\n                                     ident,"}, {"sha": "bd7b584a99ad6f0974e9222fe0e1a4122e608b36", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217a844793034c181bd4457b9797b97a2c66f58/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=c217a844793034c181bd4457b9797b97a2c66f58", "patch": "@@ -2372,16 +2372,10 @@ impl<'a> State<'a> {\n                                 abi: abi::Abi,\n                                 vis: ast::Visibility) -> IoResult<()> {\n         try!(word(&mut self.s, visibility_qualified(vis, \"\")));\n-\n+        try!(self.print_opt_fn_style(opt_fn_style));\n         if abi != abi::Rust {\n             try!(self.word_nbsp(\"extern\"));\n             try!(self.word_nbsp(abi.to_str()));\n-\n-            if opt_fn_style != Some(ast::ExternFn) {\n-                try!(self.print_opt_fn_style(opt_fn_style));\n-            }\n-        } else {\n-            try!(self.print_opt_fn_style(opt_fn_style));\n         }\n \n         word(&mut self.s, \"fn\")\n@@ -2391,7 +2385,6 @@ impl<'a> State<'a> {\n         match s {\n             ast::NormalFn => Ok(()),\n             ast::UnsafeFn => self.word_nbsp(\"unsafe\"),\n-            ast::ExternFn => self.word_nbsp(\"extern\")\n         }\n     }\n "}, {"sha": "8f494ea81fcb329517be35aab0da3a8303151a9d", "filename": "src/test/run-pass/issue-10025.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c217a844793034c181bd4457b9797b97a2c66f58/src%2Ftest%2Frun-pass%2Fissue-10025.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c217a844793034c181bd4457b9797b97a2c66f58/src%2Ftest%2Frun-pass%2Fissue-10025.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10025.rs?ref=c217a844793034c181bd4457b9797b97a2c66f58", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+unsafe extern fn foo() {}\n+unsafe extern \"C\" fn bar() {}\n+\n+fn main() {\n+    let _a: unsafe extern fn() = foo;\n+    let _a: unsafe extern \"C\" fn() = foo;\n+}"}]}