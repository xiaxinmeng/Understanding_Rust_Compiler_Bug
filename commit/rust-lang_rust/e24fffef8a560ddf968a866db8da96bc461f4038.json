{"sha": "e24fffef8a560ddf968a866db8da96bc461f4038", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyNGZmZmVmOGE1NjBkZGY5NjhhODY2ZGI4ZGE5NmJjNDYxZjQwMzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-22T08:43:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-11-22T08:43:22Z"}, "message": "Auto merge of #29716 - Manishearth:repr-error, r=Gankro\n\nr? @Gankro", "tree": {"sha": "22e33b2ededf6400e8a93d63447a66bc10dd2436", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22e33b2ededf6400e8a93d63447a66bc10dd2436"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e24fffef8a560ddf968a866db8da96bc461f4038", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e24fffef8a560ddf968a866db8da96bc461f4038", "html_url": "https://github.com/rust-lang/rust/commit/e24fffef8a560ddf968a866db8da96bc461f4038", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e24fffef8a560ddf968a866db8da96bc461f4038/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f04653250b3bf204ffcdfc97f7bee4bfd44ece87", "url": "https://api.github.com/repos/rust-lang/rust/commits/f04653250b3bf204ffcdfc97f7bee4bfd44ece87", "html_url": "https://github.com/rust-lang/rust/commit/f04653250b3bf204ffcdfc97f7bee4bfd44ece87"}, {"sha": "92df8a9a990ff6794c18c25c4dbc38754540c826", "url": "https://api.github.com/repos/rust-lang/rust/commits/92df8a9a990ff6794c18c25c4dbc38754540c826", "html_url": "https://github.com/rust-lang/rust/commit/92df8a9a990ff6794c18c25c4dbc38754540c826"}], "stats": {"total": 102, "additions": 87, "deletions": 15}, "files": [{"sha": "f4d7a3186918919f5f119b7f6b246d1f91016221", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/e24fffef8a560ddf968a866db8da96bc461f4038/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24fffef8a560ddf968a866db8da96bc461f4038/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=e24fffef8a560ddf968a866db8da96bc461f4038", "patch": "@@ -2042,6 +2042,79 @@ It is not possible to use stability attributes outside of the standard library.\n Also, for now, it is not possible to write deprecation messages either.\n \"##,\n \n+E0517: r##\"\n+This error indicates that a `#[repr(..)]` attribute was placed on an unsupported\n+item.\n+\n+Examples of erroneous code:\n+\n+```\n+#[repr(C)]\n+type Foo = u8;\n+\n+#[repr(packed)]\n+enum Foo {Bar, Baz}\n+\n+#[repr(u8)]\n+struct Foo {bar: bool, baz: bool}\n+\n+#[repr(C)]\n+impl Foo {\n+    ...\n+}\n+```\n+\n+ - The `#[repr(C)]` attribute can only be placed on structs and enums\n+ - The `#[repr(packed)]` and `#[repr(simd)]` attributes only work on structs\n+ - The `#[repr(u8)]`, `#[repr(i16)]`, etc attributes only work on enums\n+\n+These attributes do not work on typedefs, since typedefs are just aliases.\n+\n+Representations like `#[repr(u8)]`, `#[repr(i64)]` are for selecting the\n+discriminant size for C-like enums (when there is no associated data, e.g. `enum\n+Color {Red, Blue, Green}`), effectively setting the size of the enum to the size\n+of the provided type. Such an enum can be cast to a value of the same type as\n+well. In short, `#[repr(u8)]` makes the enum behave like an integer with a\n+constrained set of allowed values.\n+\n+Only C-like enums can be cast to numerical primitives, so this attribute will\n+not apply to structs.\n+\n+`#[repr(packed)]` reduces padding to make the struct size smaller. The\n+representation of enums isn't strictly defined in Rust, and this attribute won't\n+work on enums.\n+\n+`#[repr(simd)]` will give a struct consisting of a homogenous series of machine\n+types (i.e. `u8`, `i32`, etc) a representation that permits vectorization via\n+SIMD. This doesn't make much sense for enums since they don't consist of a\n+single list of data.\n+\"##,\n+\n+E0518: r##\"\n+This error indicates that an `#[inline(..)]` attribute was incorrectly placed on\n+something other than a function or method.\n+\n+Examples of erroneous code:\n+\n+```\n+#[inline(always)]\n+struct Foo;\n+\n+#[inline(never)]\n+impl Foo {\n+    ...\n+}\n+```\n+\n+`#[inline]` hints the compiler whether or not to attempt to inline a method or\n+function. By default, the compiler does a pretty good job of figuring this out\n+itself, but if you feel the need for annotations, `#[inline(always)]` and\n+`#[inline(never)]` can override or force the compiler's decision.\n+\n+If you wish to apply this attribute to all methods in an impl, manually annotate\n+each method; it is not possible to annotate the entire impl with an `#[inline]`\n+attribute.\n+\"##,\n }\n \n "}, {"sha": "27785a072a6544a2a07012388d456738bfad3111", "filename": "src/librustc/front/check_attr.rs", "status": "modified", "additions": 14, "deletions": 15, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e24fffef8a560ddf968a866db8da96bc461f4038/src%2Flibrustc%2Ffront%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e24fffef8a560ddf968a866db8da96bc461f4038/src%2Flibrustc%2Ffront%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fcheck_attr.rs?ref=e24fffef8a560ddf968a866db8da96bc461f4038", "patch": "@@ -41,9 +41,7 @@ struct CheckAttrVisitor<'a> {\n impl<'a> CheckAttrVisitor<'a> {\n     fn check_inline(&self, attr: &ast::Attribute, target: Target) {\n         if target != Target::Fn {\n-            self.sess.span_err(\n-                attr.span,\n-                \"attribute should be applied to function\");\n+            span_err!(self.sess, attr.span, E0518, \"attribute should be applied to function\");\n         }\n     }\n \n@@ -56,33 +54,34 @@ impl<'a> CheckAttrVisitor<'a> {\n         };\n         for word in words {\n             let word: &str = &word.name();\n-            match word {\n+            let message = match word {\n                 \"C\" => {\n                     if target != Target::Struct && target != Target::Enum {\n-                        self.sess.span_err(\n-                            attr.span,\n-                            \"attribute should be applied to struct or enum\");\n+                            \"attribute should be applied to struct or enum\"\n+                    } else {\n+                        continue\n                     }\n                 }\n                 \"packed\" |\n                 \"simd\" => {\n                     if target != Target::Struct {\n-                        self.sess.span_err(\n-                            attr.span,\n-                            \"attribute should be applied to struct\");\n+                        \"attribute should be applied to struct\"\n+                    } else {\n+                        continue\n                     }\n                 }\n                 \"i8\" | \"u8\" | \"i16\" | \"u16\" |\n                 \"i32\" | \"u32\" | \"i64\" | \"u64\" |\n                 \"isize\" | \"usize\" => {\n                     if target != Target::Enum {\n-                        self.sess.span_err(\n-                            attr.span,\n-                            \"attribute should be applied to enum\");\n+                            \"attribute should be applied to enum\"\n+                    } else {\n+                        continue\n                     }\n                 }\n-                _ => (),\n-            }\n+                _ => continue,\n+            };\n+            span_err!(self.sess, attr.span, E0517, \"{}\", message);\n         }\n     }\n "}]}