{"sha": "e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9", "node_id": "C_kwDOAAsO6NoAKGU5ZjdjZTFmOTFiOGM0NGNjNmZmNGY5YWQyMTNlMzZkZWJjNzY0ZDk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-29T18:07:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-29T18:07:50Z"}, "message": "Auto merge of #9247 - clubby789:raw_slice_pointer_cast, r=Alexendoo\n\nNew lint: Raw slice pointer cast\n\nAdds a lint to check for a raw slice being created and cast back to a pointer, suggesting `ptr::slice_from_raw_parts`, to identify UB such as https://github.com/SimonSapin/rust-typed-arena/pull/54.\n```\nchangelog: [`cast_slice_from_raw_parts`]: Add lint to check for `slice::from_raw_parts(.., ..) as *const _`\n```", "tree": {"sha": "9d47a48bc44c273a3b3866da4962322089605a01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d47a48bc44c273a3b3866da4962322089605a01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9", "html_url": "https://github.com/rust-lang/rust/commit/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58bbb1a95dad9eb866e3a29db760b4ccc6da55ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/58bbb1a95dad9eb866e3a29db760b4ccc6da55ba", "html_url": "https://github.com/rust-lang/rust/commit/58bbb1a95dad9eb866e3a29db760b4ccc6da55ba"}, {"sha": "cc9f2035432135375ae73e3bdfb73e80114b55ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc9f2035432135375ae73e3bdfb73e80114b55ea", "html_url": "https://github.com/rust-lang/rust/commit/cc9f2035432135375ae73e3bdfb73e80114b55ea"}], "stats": {"total": 191, "additions": 190, "deletions": 1}, "files": [{"sha": "69ce0a201bfda65ac6bf11fbfb135dea803b2cc7", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9", "patch": "@@ -3627,6 +3627,7 @@ Released 2018-09-13\n [`cast_ref_to_mut`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_ref_to_mut\n [`cast_sign_loss`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss\n [`cast_slice_different_sizes`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_slice_different_sizes\n+[`cast_slice_from_raw_parts`]: https://rust-lang.github.io/rust-clippy/master/index.html#cast_slice_from_raw_parts\n [`char_lit_as_u8`]: https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8\n [`chars_last_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#chars_last_cmp\n [`chars_next_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#chars_next_cmp"}, {"sha": "284ef165998a7f46cbfaa7b9060cb81dc42fe9a7", "filename": "clippy_lints/src/casts/cast_slice_from_raw_parts.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_from_raw_parts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_from_raw_parts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_from_raw_parts.rs?ref=e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9", "patch": "@@ -0,0 +1,63 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{match_def_path, meets_msrv, msrvs, paths};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{def_id::DefId, Expr, ExprKind};\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, Ty};\n+use rustc_semver::RustcVersion;\n+\n+use super::CAST_SLICE_FROM_RAW_PARTS;\n+\n+enum RawPartsKind {\n+    Immutable,\n+    Mutable,\n+}\n+\n+fn raw_parts_kind(cx: &LateContext<'_>, did: DefId) -> Option<RawPartsKind> {\n+    if match_def_path(cx, did, &paths::SLICE_FROM_RAW_PARTS) {\n+        Some(RawPartsKind::Immutable)\n+    } else if match_def_path(cx, did, &paths::SLICE_FROM_RAW_PARTS_MUT) {\n+        Some(RawPartsKind::Mutable)\n+    } else {\n+        None\n+    }\n+}\n+\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &Expr<'_>,\n+    cast_expr: &Expr<'_>,\n+    cast_to: Ty<'_>,\n+    msrv: Option<RustcVersion>,\n+) {\n+    if_chain! {\n+        if meets_msrv(msrv, msrvs::PTR_SLICE_RAW_PARTS);\n+        if let ty::RawPtr(ptrty) = cast_to.kind();\n+        if let ty::Slice(_) = ptrty.ty.kind();\n+        if let ExprKind::Call(fun, [ptr_arg, len_arg]) = cast_expr.peel_blocks().kind;\n+        if let ExprKind::Path(ref qpath) = fun.kind;\n+        if let Some(fun_def_id) = cx.qpath_res(qpath, fun.hir_id).opt_def_id();\n+        if let Some(rpk) = raw_parts_kind(cx, fun_def_id);\n+        then {\n+            let func = match rpk {\n+                RawPartsKind::Immutable => \"from_raw_parts\",\n+                RawPartsKind::Mutable => \"from_raw_parts_mut\"\n+            };\n+            let span = expr.span;\n+            let mut applicability = Applicability::MachineApplicable;\n+            let ptr = snippet_with_applicability(cx, ptr_arg.span, \"ptr\", &mut applicability);\n+            let len = snippet_with_applicability(cx, len_arg.span, \"len\", &mut applicability);\n+            span_lint_and_sugg(\n+                cx,\n+                CAST_SLICE_FROM_RAW_PARTS,\n+                span,\n+                &format!(\"casting the result of `{func}` to {cast_to}\"),\n+                \"replace with\",\n+                format!(\"core::ptr::slice_{func}({ptr}, {len})\"),\n+                applicability\n+            );\n+        }\n+    }\n+}"}, {"sha": "cc5d346b954e3d393e71fa6090c4bcc0839bafa7", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9", "patch": "@@ -10,6 +10,7 @@ mod cast_ptr_alignment;\n mod cast_ref_to_mut;\n mod cast_sign_loss;\n mod cast_slice_different_sizes;\n+mod cast_slice_from_raw_parts;\n mod char_lit_as_u8;\n mod fn_to_numeric_cast;\n mod fn_to_numeric_cast_any;\n@@ -568,6 +569,32 @@ declare_clippy_lint! {\n     pedantic,\n     \"borrowing just to cast to a raw pointer\"\n }\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for a raw slice being cast to a slice pointer\n+    ///\n+    /// ### Why is this bad?\n+    /// This can result in multiple `&mut` references to the same location when only a pointer is\n+    /// required.\n+    /// `ptr::slice_from_raw_parts` is a safe alternative that doesn't require\n+    /// the same [safety requirements] to be upheld.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// let _: *const [u8] = std::slice::from_raw_parts(ptr, len) as *const _;\n+    /// let _: *mut [u8] = std::slice::from_raw_parts_mut(ptr, len) as *mut _;\n+    /// ```\n+    /// Use instead:\n+    /// ```rust,ignore\n+    /// let _: *const [u8] = std::ptr::slice_from_raw_parts(ptr, len);\n+    /// let _: *mut [u8] = std::ptr::slice_from_raw_parts_mut(ptr, len);\n+    /// ```\n+    /// [safety requirements]: https://doc.rust-lang.org/std/slice/fn.from_raw_parts.html#safety\n+    #[clippy::version = \"1.64.0\"]\n+    pub CAST_SLICE_FROM_RAW_PARTS,\n+    suspicious,\n+    \"casting a slice created from a pointer and length to a slice pointer\"\n+}\n \n pub struct Casts {\n     msrv: Option<RustcVersion>,\n@@ -600,6 +627,7 @@ impl_lint_pass!(Casts => [\n     CAST_ABS_TO_UNSIGNED,\n     AS_UNDERSCORE,\n     BORROW_AS_PTR,\n+    CAST_SLICE_FROM_RAW_PARTS\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Casts {\n@@ -624,7 +652,7 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n             if unnecessary_cast::check(cx, expr, cast_expr, cast_from, cast_to) {\n                 return;\n             }\n-\n+            cast_slice_from_raw_parts::check(cx, expr, cast_expr, cast_to, self.msrv);\n             fn_to_numeric_cast_any::check(cx, expr, cast_expr, cast_from, cast_to);\n             fn_to_numeric_cast::check(cx, expr, cast_expr, cast_from, cast_to);\n             fn_to_numeric_cast_with_truncation::check(cx, expr, cast_expr, cast_from, cast_to);"}, {"sha": "700762fa3efed6a127dc7214d89ce2d574850d62", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9", "patch": "@@ -25,6 +25,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(casts::CAST_ENUM_TRUNCATION),\n     LintId::of(casts::CAST_REF_TO_MUT),\n     LintId::of(casts::CAST_SLICE_DIFFERENT_SIZES),\n+    LintId::of(casts::CAST_SLICE_FROM_RAW_PARTS),\n     LintId::of(casts::CHAR_LIT_AS_U8),\n     LintId::of(casts::FN_TO_NUMERIC_CAST),\n     LintId::of(casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),"}, {"sha": "ee94165d2ed09fe21bd73295a668047ed4f6b7e4", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9", "patch": "@@ -77,6 +77,7 @@ store.register_lints(&[\n     casts::CAST_REF_TO_MUT,\n     casts::CAST_SIGN_LOSS,\n     casts::CAST_SLICE_DIFFERENT_SIZES,\n+    casts::CAST_SLICE_FROM_RAW_PARTS,\n     casts::CHAR_LIT_AS_U8,\n     casts::FN_TO_NUMERIC_CAST,\n     casts::FN_TO_NUMERIC_CAST_ANY,"}, {"sha": "8f131bbf98be3fecab313b2ae904e982620fd88d", "filename": "clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/clippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9", "patch": "@@ -11,6 +11,7 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(casts::CAST_ABS_TO_UNSIGNED),\n     LintId::of(casts::CAST_ENUM_CONSTRUCTOR),\n     LintId::of(casts::CAST_ENUM_TRUNCATION),\n+    LintId::of(casts::CAST_SLICE_FROM_RAW_PARTS),\n     LintId::of(crate_in_macro_def::CRATE_IN_MACRO_DEF),\n     LintId::of(drop_forget_ref::DROP_NON_DROP),\n     LintId::of(drop_forget_ref::FORGET_NON_DROP),"}, {"sha": "b70c1912951164cd911d6896ceedd2a9c2cd9cff", "filename": "tests/ui/cast_raw_slice_pointer_cast.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/tests%2Fui%2Fcast_raw_slice_pointer_cast.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/tests%2Fui%2Fcast_raw_slice_pointer_cast.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_raw_slice_pointer_cast.fixed?ref=e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+#![warn(clippy::cast_slice_from_raw_parts)]\n+\n+#[allow(unused_imports, unused_unsafe)]\n+fn main() {\n+    let mut vec = vec![0u8; 1];\n+    let ptr: *const u8 = vec.as_ptr();\n+    let mptr = vec.as_mut_ptr();\n+    let _: *const [u8] = unsafe { core::ptr::slice_from_raw_parts(ptr, 1) };\n+    let _: *const [u8] = unsafe { core::ptr::slice_from_raw_parts_mut(mptr, 1) };\n+    let _: *const [u8] = core::ptr::slice_from_raw_parts(ptr, 1);\n+    {\n+        use core::slice;\n+        let _: *const [u8] = core::ptr::slice_from_raw_parts(ptr, 1);\n+        use slice as one;\n+        let _: *const [u8] = core::ptr::slice_from_raw_parts(ptr, 1);\n+    }\n+    {\n+        use std::slice;\n+        let _: *const [u8] = core::ptr::slice_from_raw_parts(ptr, 1);\n+        use slice as one;\n+        let _: *const [u8] = core::ptr::slice_from_raw_parts(ptr, 1);\n+    }\n+}"}, {"sha": "c1b316765c967748ab163213d492e5c1d12a47f1", "filename": "tests/ui/cast_raw_slice_pointer_cast.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/tests%2Fui%2Fcast_raw_slice_pointer_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/tests%2Fui%2Fcast_raw_slice_pointer_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_raw_slice_pointer_cast.rs?ref=e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+#![warn(clippy::cast_slice_from_raw_parts)]\n+\n+#[allow(unused_imports, unused_unsafe)]\n+fn main() {\n+    let mut vec = vec![0u8; 1];\n+    let ptr: *const u8 = vec.as_ptr();\n+    let mptr = vec.as_mut_ptr();\n+    let _: *const [u8] = unsafe { std::slice::from_raw_parts(ptr, 1) as *const [u8] };\n+    let _: *const [u8] = unsafe { std::slice::from_raw_parts_mut(mptr, 1) as *mut [u8] };\n+    let _: *const [u8] = unsafe { std::slice::from_raw_parts(ptr, 1) } as *const [u8];\n+    {\n+        use core::slice;\n+        let _: *const [u8] = unsafe { slice::from_raw_parts(ptr, 1) } as *const [u8];\n+        use slice as one;\n+        let _: *const [u8] = unsafe { one::from_raw_parts(ptr, 1) } as *const [u8];\n+    }\n+    {\n+        use std::slice;\n+        let _: *const [u8] = unsafe { slice::from_raw_parts(ptr, 1) } as *const [u8];\n+        use slice as one;\n+        let _: *const [u8] = unsafe { one::from_raw_parts(ptr, 1) } as *const [u8];\n+    }\n+}"}, {"sha": "f07801c197cccfe73f1dd4727b2bd15770b11f2c", "filename": "tests/ui/cast_raw_slice_pointer_cast.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/tests%2Fui%2Fcast_raw_slice_pointer_cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9/tests%2Fui%2Fcast_raw_slice_pointer_cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcast_raw_slice_pointer_cast.stderr?ref=e9f7ce1f91b8c44cc6ff4f9ad213e36debc764d9", "patch": "@@ -0,0 +1,46 @@\n+error: casting the result of `from_raw_parts` to *const [u8]\n+  --> $DIR/cast_raw_slice_pointer_cast.rs:9:35\n+   |\n+LL |     let _: *const [u8] = unsafe { std::slice::from_raw_parts(ptr, 1) as *const [u8] };\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `core::ptr::slice_from_raw_parts(ptr, 1)`\n+   |\n+   = note: `-D clippy::cast-slice-from-raw-parts` implied by `-D warnings`\n+\n+error: casting the result of `from_raw_parts_mut` to *mut [u8]\n+  --> $DIR/cast_raw_slice_pointer_cast.rs:10:35\n+   |\n+LL |     let _: *const [u8] = unsafe { std::slice::from_raw_parts_mut(mptr, 1) as *mut [u8] };\n+   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `core::ptr::slice_from_raw_parts_mut(mptr, 1)`\n+\n+error: casting the result of `from_raw_parts` to *const [u8]\n+  --> $DIR/cast_raw_slice_pointer_cast.rs:11:26\n+   |\n+LL |     let _: *const [u8] = unsafe { std::slice::from_raw_parts(ptr, 1) } as *const [u8];\n+   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `core::ptr::slice_from_raw_parts(ptr, 1)`\n+\n+error: casting the result of `from_raw_parts` to *const [u8]\n+  --> $DIR/cast_raw_slice_pointer_cast.rs:14:30\n+   |\n+LL |         let _: *const [u8] = unsafe { slice::from_raw_parts(ptr, 1) } as *const [u8];\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `core::ptr::slice_from_raw_parts(ptr, 1)`\n+\n+error: casting the result of `from_raw_parts` to *const [u8]\n+  --> $DIR/cast_raw_slice_pointer_cast.rs:16:30\n+   |\n+LL |         let _: *const [u8] = unsafe { one::from_raw_parts(ptr, 1) } as *const [u8];\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `core::ptr::slice_from_raw_parts(ptr, 1)`\n+\n+error: casting the result of `from_raw_parts` to *const [u8]\n+  --> $DIR/cast_raw_slice_pointer_cast.rs:20:30\n+   |\n+LL |         let _: *const [u8] = unsafe { slice::from_raw_parts(ptr, 1) } as *const [u8];\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `core::ptr::slice_from_raw_parts(ptr, 1)`\n+\n+error: casting the result of `from_raw_parts` to *const [u8]\n+  --> $DIR/cast_raw_slice_pointer_cast.rs:22:30\n+   |\n+LL |         let _: *const [u8] = unsafe { one::from_raw_parts(ptr, 1) } as *const [u8];\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `core::ptr::slice_from_raw_parts(ptr, 1)`\n+\n+error: aborting due to 7 previous errors\n+"}]}