{"sha": "e11fd49b1cc333a4fedbe1f948e6203208edd17b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMWZkNDliMWNjMzMzYTRmZWRiZTFmOTQ4ZTYyMDMyMDhlZGQxN2I=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-09-04T07:08:07Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-09-04T10:48:46Z"}, "message": "Unicode lints, second attempt: Lint whole strings, help with replacement", "tree": {"sha": "6fc9c137dda5b604cf1bd8c5033254dfbce7de17", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fc9c137dda5b604cf1bd8c5033254dfbce7de17"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e11fd49b1cc333a4fedbe1f948e6203208edd17b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e11fd49b1cc333a4fedbe1f948e6203208edd17b", "html_url": "https://github.com/rust-lang/rust/commit/e11fd49b1cc333a4fedbe1f948e6203208edd17b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e11fd49b1cc333a4fedbe1f948e6203208edd17b/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af4d7f9b60323b1db6b2863783f41ba64c4d6100", "url": "https://api.github.com/repos/rust-lang/rust/commits/af4d7f9b60323b1db6b2863783f41ba64c4d6100", "html_url": "https://github.com/rust-lang/rust/commit/af4d7f9b60323b1db6b2863783f41ba64c4d6100"}], "stats": {"total": 77, "additions": 54, "deletions": 23}, "files": [{"sha": "656efd312b26e97b29b6b3191fa34b3707c5c1de", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e11fd49b1cc333a4fedbe1f948e6203208edd17b/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e11fd49b1cc333a4fedbe1f948e6203208edd17b/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=e11fd49b1cc333a4fedbe1f948e6203208edd17b", "patch": "@@ -16,6 +16,9 @@ keywords = [\"clippy\", \"lint\", \"plugin\"]\n name = \"clippy\"\n plugin = true\n \n+[dependencies]\n+unicode-normalization = \"*\"\n+\n [dev-dependencies]\n compiletest_rs = \"*\"\n regex = \"*\""}, {"sha": "0046d891129008dd988dfb20f80a95009850335d", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e11fd49b1cc333a4fedbe1f948e6203208edd17b/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/e11fd49b1cc333a4fedbe1f948e6203208edd17b/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=e11fd49b1cc333a4fedbe1f948e6203208edd17b", "patch": "@@ -4,7 +4,7 @@\n A collection of lints that give helpful tips to newbies and catch oversights.\n \n ##Lints\n-There are 53 lints included in this crate:\n+There are 54 lints included in this crate:\n \n name                                                                                                 | default | meaning\n -----------------------------------------------------------------------------------------------------|---------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -56,6 +56,7 @@ name\n [string_to_string](https://github.com/Manishearth/rust-clippy/wiki#string_to_string)                 | warn    | calling `String.to_string()` which is a no-op\n [toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                 | warn    | a function argument is declared `ref` (i.e. `fn foo(ref x: u8)`, but not `fn foo((ref x, ref y): (u8, u8))`)\n [type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                   | warn    | usage of very complex types; recommends factoring out parts into `type` definitions\n+[unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                   | allow   | using a unicode literal not in NFC normal form (see http://www.unicode.org/reports/tr15/ for further information)\n [unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                 | warn    | comparing unit values (which is always `true` or `false`, respectively)\n [unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                     | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n [while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                     | warn    | `loop { if let { ... } else break }` can be written as a `while let` loop"}, {"sha": "a4aee0c27fd6f1dff9806c38557d22de1d4a1006", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11fd49b1cc333a4fedbe1f948e6203208edd17b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11fd49b1cc333a4fedbe1f948e6203208edd17b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=e11fd49b1cc333a4fedbe1f948e6203208edd17b", "patch": "@@ -14,6 +14,9 @@ extern crate rustc_front;\n extern crate core;\n extern crate collections;\n \n+// for unicode nfc normalization\n+extern crate unicode_normalization;\n+\n use rustc::plugin::Registry;\n use rustc::lint::LintPassObject;\n \n@@ -96,6 +99,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         types::CAST_PRECISION_LOSS,\n         types::CAST_SIGN_LOSS,\n         unicode::NON_ASCII_LITERAL,\n+        unicode::UNICODE_NOT_NFC,\n     ]);\n \n     reg.register_lint_group(\"clippy\", vec!["}, {"sha": "5e1af6f981883f3aa94bfb55c524b7e1c21c7320", "filename": "src/unicode.rs", "status": "modified", "additions": 41, "deletions": 17, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e11fd49b1cc333a4fedbe1f948e6203208edd17b/src%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11fd49b1cc333a4fedbe1f948e6203208edd17b/src%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funicode.rs?ref=e11fd49b1cc333a4fedbe1f948e6203208edd17b", "patch": "@@ -1,21 +1,27 @@\n use rustc::lint::*;\n use rustc_front::hir::*;\n-use syntax::codemap::{BytePos, Span};\n+use syntax::codemap::Span;\n \n-use utils::span_lint;\n+use unicode_normalization::UnicodeNormalization;\n+\n+use utils::span_help_and_lint;\n \n declare_lint!{ pub ZERO_WIDTH_SPACE, Deny,\n                \"using a zero-width space in a string literal, which is confusing\" }\n declare_lint!{ pub NON_ASCII_LITERAL, Allow,\n                \"using any literal non-ASCII chars in a string literal; suggests \\\n                 using the \\\\u escape instead\" }\n+declare_lint!{ pub UNICODE_NOT_NFC, Allow,\n+               \"using a unicode literal not in NFC normal form (see \\\n+               http://www.unicode.org/reports/tr15/ for further information)\" }\n+\n \n #[derive(Copy, Clone)]\n pub struct Unicode;\n \n impl LintPass for Unicode {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(ZERO_WIDTH_SPACE, NON_ASCII_LITERAL)\n+        lint_array!(ZERO_WIDTH_SPACE, NON_ASCII_LITERAL, UNICODE_NOT_NFC)\n     }\n \n     fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n@@ -27,23 +33,41 @@ impl LintPass for Unicode {\n     }\n }\n \n-fn check_str(cx: &Context, string: &str, span: Span) {\n-    for (i, c) in string.char_indices() {\n-        if c == '\\u{200B}' {\n-            str_pos_lint(cx, ZERO_WIDTH_SPACE, span, i,\n-                         \"zero-width space detected. Consider using `\\\\u{200B}`\");\n-        }\n+fn escape<T: Iterator<Item=char>>(s: T) -> String {\n+    let mut result = String::new();\n+    for c in s {\n         if c as u32 > 0x7F {\n-            str_pos_lint(cx, NON_ASCII_LITERAL, span, i, &format!(\n-                \"literal non-ASCII character detected. Consider using `\\\\u{{{:X}}}`\", c as u32));\n+            for d in c.escape_unicode() { result.push(d) };\n+        } else {\n+            result.push(c);\n         }\n     }\n+    result\n }\n \n-#[allow(cast_possible_truncation)]\n-fn str_pos_lint(cx: &Context, lint: &'static Lint, span: Span, index: usize, msg: &str) {\n-    span_lint(cx, lint, Span { lo: span.lo + BytePos((1 + index) as u32),\n-                               hi: span.lo + BytePos((1 + index) as u32),\n-                               expn_id: span.expn_id }, msg);\n-\n+fn check_str(cx: &Context, string: &str, span: Span) {\n+    if string.contains('\\u{200B}') {\n+        span_help_and_lint(cx, ZERO_WIDTH_SPACE, span,\n+            \"zero-width space detected\",\n+            &format!(\"Consider replacing the string with:\\n\\\"{}\\\"\",\n+                string.replace(\"\\u{200B}\", \"\\\\u{200B}\")));\n+    }\n+    if string.chars().any(|c| c as u32 > 0x7F) {\n+        span_help_and_lint(cx, NON_ASCII_LITERAL, span,\n+            \"literal non-ASCII character detected\",\n+            &format!(\"Consider replacing the string with:\\n\\\"{}\\\"\",\n+                if cx.current_level(UNICODE_NOT_NFC) == Level::Allow {\n+                    escape(string.chars())\n+                } else {\n+                    escape(string.nfc())\n+                }));\n+    }\n+    if string.chars().zip(string.nfc()).any(|(a, b)| a != b) {\n+        if cx.current_level(NON_ASCII_LITERAL) == Level::Allow {\n+            span_help_and_lint(cx, UNICODE_NOT_NFC, span,\n+                \"non-nfc unicode sequence detected\",\n+                &format!(\"Consider replacing the string with:\\n\\\"{}\\\"\",\n+                    string.nfc().collect::<String>()));\n+        }\n+    }\n }"}, {"sha": "066825fc686f0f1ec211f59bf9d17ee728a1f7aa", "filename": "tests/compile-fail/unicode.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e11fd49b1cc333a4fedbe1f948e6203208edd17b/tests%2Fcompile-fail%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11fd49b1cc333a4fedbe1f948e6203208edd17b/tests%2Fcompile-fail%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funicode.rs?ref=e11fd49b1cc333a4fedbe1f948e6203208edd17b", "patch": "@@ -4,18 +4,17 @@\n #[deny(zero_width_space)]\n fn zero() {\n     print!(\"Here >\u200b< is a ZWS, and \u200banother\");\n-               //~^ ERROR zero-width space detected. Consider using `\\u{200B}`\n-                            //~^^ ERROR zero-width space detected. Consider using `\\u{200B}`\n+               //~^ ERROR zero-width space detected\n }\n \n-//#[deny(unicode_canon)]\n+#[deny(unicode_not_nfc)]\n fn canon() {\n-    print!(\"\u0300ah?\"); //not yet ~ERROR non-canonical unicode sequence detected. Consider using \u00e0\n+    print!(\"\u0300a\u0300h?\"); //~ERROR non-nfc unicode sequence detected\n }\n \n #[deny(non_ascii_literal)]\n fn uni() {\n-    print!(\"\u00dcben!\"); //~ERROR literal non-ASCII character detected. Consider using `\\u{DC}`\n+    print!(\"\u00dcben!\"); //~ERROR literal non-ASCII character detected\n }\n \n fn main() {"}]}