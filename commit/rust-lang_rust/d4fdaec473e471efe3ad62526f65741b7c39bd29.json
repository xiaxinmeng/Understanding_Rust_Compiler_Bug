{"sha": "d4fdaec473e471efe3ad62526f65741b7c39bd29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZmRhZWM0NzNlNDcxZWZlM2FkNjI1MjZmNjU3NDFiN2MzOWJkMjk=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-16T02:59:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-16T02:59:32Z"}, "message": "Merge pull request #2159 from topecongiro/issue-2158\n\nPrevent long associated type from overflowing max width", "tree": {"sha": "1c9e9091ab003d21a2d41a23c3594b61128e4643", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c9e9091ab003d21a2d41a23c3594b61128e4643"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4fdaec473e471efe3ad62526f65741b7c39bd29", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaDP8UCRBK7hj4Ov3rIwAAdHIIAIcu2vZS1yivUEJ0b9uG7v1c\n8YJXKBTe7IjPT+inH17HdCIXk4L2cn9sMIZ+t2Lx3ep1GaxDrvgNB6o3Xau04SGa\nJGhoCMTg+r9UEkDR8Qbd+WG/Lwq3W1WxUKv0UXub+KuH+a8p43KQmxtl8uTqakud\n29Ij/IBX02nUwoqe4Hv0E7Jhk5mwYT1zBGcq3QF/9O5cShHYbqCgk4PBS5/oXW+8\ntxUWMQ/Tz/rCDCYFCjPjT4bT4LYvvW6dNg6BYe7jFe3Y1Jk5zihBTYlQMIYVp4HH\nCShIQUsz8JEY3bJCZmRDN7EaBUKPFvD3ZodMsBmMzVMv8ZeYWhBtGdxjRsHE+qM=\n=23b9\n-----END PGP SIGNATURE-----\n", "payload": "tree 1c9e9091ab003d21a2d41a23c3594b61128e4643\nparent c0e537d2274e771a964bd17f83f9d70b313081fc\nparent f7ef1f681cf026ee6e941f51de0fa9a3693e2153\nauthor Nick Cameron <nrc@ncameron.org> 1510801172 +1300\ncommitter GitHub <noreply@github.com> 1510801172 +1300\n\nMerge pull request #2159 from topecongiro/issue-2158\n\nPrevent long associated type from overflowing max width"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fdaec473e471efe3ad62526f65741b7c39bd29", "html_url": "https://github.com/rust-lang/rust/commit/d4fdaec473e471efe3ad62526f65741b7c39bd29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4fdaec473e471efe3ad62526f65741b7c39bd29/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0e537d2274e771a964bd17f83f9d70b313081fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0e537d2274e771a964bd17f83f9d70b313081fc", "html_url": "https://github.com/rust-lang/rust/commit/c0e537d2274e771a964bd17f83f9d70b313081fc"}, {"sha": "f7ef1f681cf026ee6e941f51de0fa9a3693e2153", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7ef1f681cf026ee6e941f51de0fa9a3693e2153", "html_url": "https://github.com/rust-lang/rust/commit/f7ef1f681cf026ee6e941f51de0fa9a3693e2153"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "46e7e500f2272a2561db5c7a881ac61cacef03b9", "filename": "src/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4fdaec473e471efe3ad62526f65741b7c39bd29/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fdaec473e471efe3ad62526f65741b7c39bd29/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=d4fdaec473e471efe3ad62526f65741b7c39bd29", "patch": "@@ -2578,10 +2578,10 @@ fn rewrite_assignment(\n \n // The left hand side must contain everything up to, and including, the\n // assignment operator.\n-pub fn rewrite_assign_rhs<S: Into<String>>(\n+pub fn rewrite_assign_rhs<S: Into<String>, R: Rewrite>(\n     context: &RewriteContext,\n     lhs: S,\n-    ex: &ast::Expr,\n+    ex: &R,\n     shape: Shape,\n ) -> Option<String> {\n     let lhs = lhs.into();\n@@ -2596,9 +2596,9 @@ pub fn rewrite_assign_rhs<S: Into<String>>(\n     Some(lhs + &rhs)\n }\n \n-fn choose_rhs(\n+fn choose_rhs<R: Rewrite>(\n     context: &RewriteContext,\n-    expr: &ast::Expr,\n+    expr: &R,\n     shape: Shape,\n     orig_rhs: Option<String>,\n ) -> Option<String> {"}, {"sha": "5f6c043bb4a8b0a0878960bfc9b40aa84d75ccde", "filename": "src/items.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d4fdaec473e471efe3ad62526f65741b7c39bd29/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fdaec473e471efe3ad62526f65741b7c39bd29/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=d4fdaec473e471efe3ad62526f65741b7c39bd29", "patch": "@@ -111,7 +111,7 @@ impl Rewrite for ast::Local {\n             // 1 = trailing semicolon;\n             let nested_shape = shape.sub_width(1)?;\n \n-            result = rewrite_assign_rhs(context, result, ex, nested_shape)?;\n+            result = rewrite_assign_rhs(context, result, &**ex, nested_shape)?;\n         }\n \n         result.push(';');\n@@ -550,7 +550,7 @@ impl<'a> FmtVisitor<'a> {\n             ast::VariantData::Unit(..) => if let Some(ref expr) = field.node.disr_expr {\n                 let lhs = format!(\"{} =\", field.node.name);\n                 // 1 = ','\n-                rewrite_assign_rhs(&context, lhs, expr, shape.sub_width(1)?)?\n+                rewrite_assign_rhs(&context, lhs, &**expr, shape.sub_width(1)?)?\n             } else {\n                 field.node.name.to_string()\n             },\n@@ -1593,7 +1593,7 @@ fn rewrite_static(\n         rewrite_assign_rhs(\n             context,\n             lhs,\n-            expr,\n+            &**expr,\n             Shape::legacy(remaining_width, offset.block_only()),\n         ).and_then(|res| {\n             recover_comment_removed(res, static_parts.span, context)\n@@ -1613,10 +1613,9 @@ pub fn rewrite_associated_type(\n ) -> Option<String> {\n     let prefix = format!(\"type {}\", ident);\n \n-    let type_bounds_str = if let Some(ty_param_bounds) = ty_param_bounds_opt {\n+    let type_bounds_str = if let Some(ref bounds) = ty_param_bounds_opt {\n         // 2 = \": \".len()\n         let shape = Shape::indented(indent, context.config).offset_left(prefix.len() + 2)?;\n-        let bounds: &[_] = ty_param_bounds;\n         let bound_str = bounds\n             .iter()\n             .map(|ty_bound| ty_bound.rewrite(context, shape))\n@@ -1631,14 +1630,10 @@ pub fn rewrite_associated_type(\n     };\n \n     if let Some(ty) = ty_opt {\n-        let ty_str = ty.rewrite(\n-            context,\n-            Shape::legacy(\n-                context.budget(indent.block_indent + prefix.len() + 2),\n-                indent.block_only(),\n-            ),\n-        )?;\n-        Some(format!(\"{}{} = {};\", prefix, type_bounds_str, ty_str))\n+        // 1 = `;`\n+        let shape = Shape::indented(indent, context.config).sub_width(1)?;\n+        let lhs = format!(\"{}{} =\", prefix, type_bounds_str);\n+        rewrite_assign_rhs(context, lhs, &**ty, shape).map(|s| s + \";\")\n     } else {\n         Some(format!(\"{}{};\", prefix, type_bounds_str))\n     }"}, {"sha": "e625c4c970367a044a710a9b8298f71c79c499a0", "filename": "tests/source/trait.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d4fdaec473e471efe3ad62526f65741b7c39bd29/tests%2Fsource%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fdaec473e471efe3ad62526f65741b7c39bd29/tests%2Fsource%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftrait.rs?ref=d4fdaec473e471efe3ad62526f65741b7c39bd29", "patch": "@@ -65,3 +65,9 @@ A + C\n // and B\n     + B\n {}\n+\n+// #2158\n+trait Foo {\n+    type ItRev = <MergingUntypedTimeSeries<SliceSeries<SliceWindow>> as UntypedTimeSeries>::IterRev;\n+    type IteRev = <MergingUntypedTimeSeries<SliceSeries<SliceWindow>> as UntypedTimeSeries>::IterRev;\n+}"}, {"sha": "632107d8938327e9e7997026feb01e2c1762ca68", "filename": "tests/target/trait.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4fdaec473e471efe3ad62526f65741b7c39bd29/tests%2Ftarget%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fdaec473e471efe3ad62526f65741b7c39bd29/tests%2Ftarget%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftrait.rs?ref=d4fdaec473e471efe3ad62526f65741b7c39bd29", "patch": "@@ -92,3 +92,10 @@ A + C\n // and B\n     + B\n {}\n+\n+// #2158\n+trait Foo {\n+    type ItRev = <MergingUntypedTimeSeries<SliceSeries<SliceWindow>> as UntypedTimeSeries>::IterRev;\n+    type IteRev =\n+        <MergingUntypedTimeSeries<SliceSeries<SliceWindow>> as UntypedTimeSeries>::IterRev;\n+}"}]}