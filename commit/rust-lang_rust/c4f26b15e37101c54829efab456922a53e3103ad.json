{"sha": "c4f26b15e37101c54829efab456922a53e3103ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZjI2YjE1ZTM3MTAxYzU0ODI5ZWZhYjQ1NjkyMmE1M2UzMTAzYWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-01T03:43:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-01T03:43:37Z"}, "message": "Auto merge of #88121 - camelid:better-recursive-alias-error, r=estebank\n\nImprove errors for recursive type aliases\n\nFixes #17539.", "tree": {"sha": "ce7caaa6f4446a1faa1414554ef0f1715847a4f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce7caaa6f4446a1faa1414554ef0f1715847a4f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4f26b15e37101c54829efab456922a53e3103ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f26b15e37101c54829efab456922a53e3103ad", "html_url": "https://github.com/rust-lang/rust/commit/c4f26b15e37101c54829efab456922a53e3103ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4f26b15e37101c54829efab456922a53e3103ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2a408840ad18f74280805535f0b7193528ff3df", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2a408840ad18f74280805535f0b7193528ff3df", "html_url": "https://github.com/rust-lang/rust/commit/c2a408840ad18f74280805535f0b7193528ff3df"}, {"sha": "d96234bed72e1935d8ab9a0c7a7e70027c86ad77", "url": "https://api.github.com/repos/rust-lang/rust/commits/d96234bed72e1935d8ab9a0c7a7e70027c86ad77", "html_url": "https://github.com/rust-lang/rust/commit/d96234bed72e1935d8ab9a0c7a7e70027c86ad77"}], "stats": {"total": 252, "additions": 227, "deletions": 25}, "files": [{"sha": "dada94edc95ff12f9157d3772208ae8e50eace82", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -120,7 +120,18 @@ rustc_queries! {\n \n     /// Records the type of every item.\n     query type_of(key: DefId) -> Ty<'tcx> {\n-        desc { |tcx| \"computing type of `{}`\", tcx.def_path_str(key) }\n+        desc { |tcx|\n+            \"{action} `{path}`\",\n+            action = {\n+                use rustc_hir::def::DefKind;\n+                match tcx.def_kind(key) {\n+                    DefKind::TyAlias => \"expanding type alias\",\n+                    DefKind::TraitAlias => \"expanding trait alias\",\n+                    _ => \"computing type of\",\n+                }\n+            },\n+            path = tcx.def_path_str(key),\n+        }\n         cache_on_disk_if { key.is_local() }\n     }\n "}, {"sha": "c973eae6b0665a29e49f480fe09d39f75b44e252", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -20,6 +20,12 @@ pub trait Key {\n     /// In the event that a cycle occurs, if no explicit span has been\n     /// given for a query with key `self`, what span should we use?\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span;\n+\n+    /// If the key is a [`DefId`] or `DefId`--equivalent, return that `DefId`.\n+    /// Otherwise, return `None`.\n+    fn key_as_def_id(&self) -> Option<DefId> {\n+        None\n+    }\n }\n \n impl Key for () {\n@@ -95,6 +101,9 @@ impl Key for LocalDefId {\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         self.to_def_id().default_span(tcx)\n     }\n+    fn key_as_def_id(&self) -> Option<DefId> {\n+        Some(self.to_def_id())\n+    }\n }\n \n impl Key for DefId {\n@@ -105,6 +114,10 @@ impl Key for DefId {\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(*self)\n     }\n+    #[inline(always)]\n+    fn key_as_def_id(&self) -> Option<DefId> {\n+        Some(*self)\n+    }\n }\n \n impl Key for ty::WithOptConstParam<LocalDefId> {\n@@ -165,6 +178,10 @@ impl Key for (DefId, Option<Ident>) {\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span {\n         tcx.def_span(self.0)\n     }\n+    #[inline(always)]\n+    fn key_as_def_id(&self) -> Option<DefId> {\n+        Some(self.0)\n+    }\n }\n \n impl Key for (DefId, LocalDefId, Ident) {"}, {"sha": "bb0e65111596cb290ec8c73b9a045a68f0062821", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -51,6 +51,8 @@ pub use on_disk_cache::OnDiskCache;\n mod profiling_support;\n pub use self::profiling_support::alloc_self_profile_query_strings;\n \n+mod util;\n+\n rustc_query_append! { [define_queries!][<'tcx>] }\n \n impl<'tcx> Queries<'tcx> {"}, {"sha": "90a6ba474b405acd1b2c8fcbeedf11b4cc28bfb7", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -337,6 +337,13 @@ macro_rules! define_queries {\n                 } else {\n                     Some(key.default_span(*tcx))\n                 };\n+                let def_id = key.key_as_def_id();\n+                let def_kind = def_id\n+                    .and_then(|def_id| def_id.as_local())\n+                    // Use `tcx.hir().opt_def_kind()` to reduce the chance of\n+                    // accidentally triggering an infinite query loop.\n+                    .and_then(|def_id| tcx.hir().opt_def_kind(def_id))\n+                    .map(|def_kind| $crate::util::def_kind_to_simple_def_kind(def_kind));\n                 let hash = || {\n                     let mut hcx = tcx.create_stable_hashing_context();\n                     let mut hasher = StableHasher::new();\n@@ -345,7 +352,7 @@ macro_rules! define_queries {\n                     hasher.finish::<u64>()\n                 };\n \n-                QueryStackFrame::new(name, description, span, hash)\n+                QueryStackFrame::new(name, description, span, def_kind, hash)\n             })*\n         }\n "}, {"sha": "517c107b5d9af83738636312c0ce574277c2849a", "filename": "compiler/rustc_query_impl/src/util.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/compiler%2Frustc_query_impl%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/compiler%2Frustc_query_impl%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Futil.rs?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -0,0 +1,18 @@\n+use rustc_hir::def::DefKind;\n+use rustc_query_system::query::SimpleDefKind;\n+\n+/// Convert a [`DefKind`] to a [`SimpleDefKind`].\n+///\n+/// *See [`SimpleDefKind`]'s docs for more information.*\n+pub(crate) fn def_kind_to_simple_def_kind(def_kind: DefKind) -> SimpleDefKind {\n+    match def_kind {\n+        DefKind::Struct => SimpleDefKind::Struct,\n+        DefKind::Enum => SimpleDefKind::Enum,\n+        DefKind::Union => SimpleDefKind::Union,\n+        DefKind::Trait => SimpleDefKind::Trait,\n+        DefKind::TyAlias => SimpleDefKind::TyAlias,\n+        DefKind::TraitAlias => SimpleDefKind::TraitAlias,\n+\n+        _ => SimpleDefKind::Other,\n+    }\n+}"}, {"sha": "63a8f0624759c842908ba800ef81f871849cd6fc", "filename": "compiler/rustc_query_system/src/query/job.rs", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fjob.rs?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -1,6 +1,6 @@\n use crate::dep_graph::DepContext;\n use crate::query::plumbing::CycleError;\n-use crate::query::{QueryContext, QueryStackFrame};\n+use crate::query::{QueryContext, QueryStackFrame, SimpleDefKind};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{struct_span_err, Diagnostic, DiagnosticBuilder, Handler, Level};\n@@ -591,10 +591,33 @@ pub(crate) fn report_cycle<'a>(\n         err.span_note(span, &format!(\"...which requires {}...\", query.description));\n     }\n \n-    err.note(&format!(\n-        \"...which again requires {}, completing the cycle\",\n-        stack[0].query.description\n-    ));\n+    if stack.len() == 1 {\n+        err.note(&format!(\"...which immediately requires {} again\", stack[0].query.description));\n+    } else {\n+        err.note(&format!(\n+            \"...which again requires {}, completing the cycle\",\n+            stack[0].query.description\n+        ));\n+    }\n+\n+    if stack.iter().all(|entry| {\n+        entry.query.def_kind.map_or(false, |def_kind| {\n+            matches!(def_kind, SimpleDefKind::TyAlias | SimpleDefKind::TraitAlias)\n+        })\n+    }) {\n+        if stack.iter().all(|entry| {\n+            entry\n+                .query\n+                .def_kind\n+                .map_or(false, |def_kind| matches!(def_kind, SimpleDefKind::TyAlias))\n+        }) {\n+            err.note(\"type aliases cannot be recursive\");\n+            err.help(\"consider using a struct, enum, or union instead to break the cycle\");\n+            err.help(\"see <https://doc.rust-lang.org/reference/types.html#recursive-types> for more information\");\n+        } else {\n+            err.note(\"trait aliases cannot be recursive\");\n+        }\n+    }\n \n     if let Some((span, query)) = usage {\n         err.span_note(fix_span(span, &query), &format!(\"cycle used when {}\", query.description));"}, {"sha": "dffe7f3689ff4b52f80c4ff8af04b823a29bd9db", "filename": "compiler/rustc_query_system/src/query/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fmod.rs?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -29,24 +29,53 @@ pub struct QueryStackFrame {\n     pub name: &'static str,\n     pub description: String,\n     span: Option<Span>,\n+    /// The `DefKind` this query frame is associated with, if applicable.\n+    ///\n+    /// We can't use `rustc_hir::def::DefKind` because `rustc_hir` is not\n+    /// available in `rustc_query_system`. Instead, we have a simplified\n+    /// custom version of it, called [`SimpleDefKind`].\n+    def_kind: Option<SimpleDefKind>,\n     /// This hash is used to deterministically pick\n     /// a query to remove cycles in the parallel compiler.\n     #[cfg(parallel_compiler)]\n     hash: u64,\n }\n \n+/// A simplified version of `rustc_hir::def::DefKind`.\n+///\n+/// It was added to help improve cycle errors caused by recursive type aliases.\n+/// As of August 2021, `rustc_query_system` cannot depend on `rustc_hir`\n+/// because it would create a dependency cycle. So, instead, a simplified\n+/// version of `DefKind` was added to `rustc_query_system`.\n+///\n+/// `DefKind`s are converted to `SimpleDefKind`s in `rustc_query_impl`.\n+#[derive(Debug, Copy, Clone)]\n+pub enum SimpleDefKind {\n+    Struct,\n+    Enum,\n+    Union,\n+    Trait,\n+    TyAlias,\n+    TraitAlias,\n+\n+    // FIXME: add more from `rustc_hir::def::DefKind` and then remove `Other`\n+    Other,\n+}\n+\n impl QueryStackFrame {\n     #[inline]\n     pub fn new(\n         name: &'static str,\n         description: String,\n         span: Option<Span>,\n+        def_kind: Option<SimpleDefKind>,\n         _hash: impl FnOnce() -> u64,\n     ) -> Self {\n         Self {\n             name,\n             description,\n             span,\n+            def_kind,\n             #[cfg(parallel_compiler)]\n             hash: _hash(),\n         }"}, {"sha": "4162cdaa8dcd87995264d4e461f3009622f9f2cb", "filename": "src/test/ui/associated-type-bounds/ambiguous-associated-type2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fambiguous-associated-type2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fambiguous-associated-type2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fambiguous-associated-type2.stderr?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -4,7 +4,7 @@ error[E0391]: cycle detected when computing the super traits of `Baz` with assoc\n LL | trait Baz: Foo + Bar<Self::Item> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: ...which again requires computing the super traits of `Baz` with associated type name `Item`, completing the cycle\n+   = note: ...which immediately requires computing the super traits of `Baz` with associated type name `Item` again\n note: cycle used when computing the super traits of `Baz`\n   --> $DIR/ambiguous-associated-type2.rs:7:1\n    |"}, {"sha": "97f3c759355d45327c18d917d05dd1ede01f43eb", "filename": "src/test/ui/coherence/coherence-inherited-assoc-ty-cycle-err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fcoherence-inherited-assoc-ty-cycle-err.stderr?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -14,7 +14,7 @@ error[E0391]: cycle detected when building specialization graph of trait `Trait`\n LL | trait Trait<T> { type Assoc; }\n    | ^^^^^^^^^^^^^^\n    |\n-   = note: ...which again requires building specialization graph of trait `Trait`, completing the cycle\n+   = note: ...which immediately requires building specialization graph of trait `Trait` again\n note: cycle used when coherence checking all impls of trait `Trait`\n   --> $DIR/coherence-inherited-assoc-ty-cycle-err.rs:9:1\n    |"}, {"sha": "fc842fada5a0d9892ef026ce080385844e3627de", "filename": "src/test/ui/cycle-trait/cycle-trait-default-type-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-trait%2Fcycle-trait-default-type-trait.stderr?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -4,7 +4,7 @@ error[E0391]: cycle detected when computing type of `Foo::X`\n LL | trait Foo<X = Box<dyn Foo>> {\n    |                       ^^^\n    |\n-   = note: ...which again requires computing type of `Foo::X`, completing the cycle\n+   = note: ...which immediately requires computing type of `Foo::X` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/cycle-trait-default-type-trait.rs:4:1\n    |\n@@ -17,7 +17,7 @@ error[E0391]: cycle detected when computing type of `Foo::X`\n LL | trait Foo<X = Box<dyn Foo>> {\n    |                       ^^^\n    |\n-   = note: ...which again requires computing type of `Foo::X`, completing the cycle\n+   = note: ...which immediately requires computing type of `Foo::X` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/cycle-trait-default-type-trait.rs:4:1\n    |"}, {"sha": "369645f9030fbc8c9d93fc4438e9a280fa671c12", "filename": "src/test/ui/infinite/infinite-struct.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-struct.stderr?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -18,7 +18,7 @@ error[E0391]: cycle detected when computing drop-check constraints for `Take`\n LL | struct Take(Take);\n    | ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: ...which again requires computing drop-check constraints for `Take`, completing the cycle\n+   = note: ...which immediately requires computing drop-check constraints for `Take` again\n    = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing }, value: Take } }`\n \n error: aborting due to 2 previous errors"}, {"sha": "61b5e9467752642487ab59618946c91f797f01a6", "filename": "src/test/ui/infinite/infinite-tag-type-recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-tag-type-recursion.stderr?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -17,7 +17,7 @@ error[E0391]: cycle detected when computing drop-check constraints for `MList`\n LL | enum MList { Cons(isize, MList), Nil }\n    | ^^^^^^^^^^\n    |\n-   = note: ...which again requires computing drop-check constraints for `MList`, completing the cycle\n+   = note: ...which immediately requires computing drop-check constraints for `MList` again\n    = note: cycle used when computing dropck types for `Canonical { max_universe: U0, variables: [], value: ParamEnvAnd { param_env: ParamEnv { caller_bounds: [], reveal: UserFacing }, value: MList } }`\n \n error: aborting due to 2 previous errors"}, {"sha": "ec86744e68c53b2411033598431b6977b8e7790f", "filename": "src/test/ui/infinite/infinite-trait-alias-recursion.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Finfinite%2Finfinite-trait-alias-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Finfinite%2Finfinite-trait-alias-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-trait-alias-recursion.rs?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -0,0 +1,10 @@\n+#![feature(trait_alias)]\n+\n+trait T1 = T2;\n+//~^ ERROR cycle detected when computing the super predicates of `T1`\n+\n+trait T2 = T3;\n+\n+trait T3 = T1 + T3;\n+\n+fn main() {}"}, {"sha": "5ecaedb3cb2cd6cc46d09c132b6d9cb3a6d45f7d", "filename": "src/test/ui/infinite/infinite-trait-alias-recursion.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Finfinite%2Finfinite-trait-alias-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Finfinite%2Finfinite-trait-alias-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-trait-alias-recursion.stderr?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -0,0 +1,42 @@\n+error[E0391]: cycle detected when computing the super predicates of `T1`\n+  --> $DIR/infinite-trait-alias-recursion.rs:3:1\n+   |\n+LL | trait T1 = T2;\n+   | ^^^^^^^^^^^^^^\n+   |\n+note: ...which requires computing the super traits of `T1`...\n+  --> $DIR/infinite-trait-alias-recursion.rs:3:12\n+   |\n+LL | trait T1 = T2;\n+   |            ^^\n+note: ...which requires computing the super predicates of `T2`...\n+  --> $DIR/infinite-trait-alias-recursion.rs:6:1\n+   |\n+LL | trait T2 = T3;\n+   | ^^^^^^^^^^^^^^\n+note: ...which requires computing the super traits of `T2`...\n+  --> $DIR/infinite-trait-alias-recursion.rs:6:12\n+   |\n+LL | trait T2 = T3;\n+   |            ^^\n+note: ...which requires computing the super predicates of `T3`...\n+  --> $DIR/infinite-trait-alias-recursion.rs:8:1\n+   |\n+LL | trait T3 = T1 + T3;\n+   | ^^^^^^^^^^^^^^^^^^^\n+note: ...which requires computing the super traits of `T3`...\n+  --> $DIR/infinite-trait-alias-recursion.rs:8:12\n+   |\n+LL | trait T3 = T1 + T3;\n+   |            ^^\n+   = note: ...which again requires computing the super predicates of `T1`, completing the cycle\n+   = note: trait aliases cannot be recursive\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/infinite-trait-alias-recursion.rs:3:1\n+   |\n+LL | trait T1 = T2;\n+   | ^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "5381eedcfacfc412fad7a2823a932b7beabdb434", "filename": "src/test/ui/infinite/infinite-type-alias-mutual-recursion.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Finfinite%2Finfinite-type-alias-mutual-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Finfinite%2Finfinite-type-alias-mutual-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-type-alias-mutual-recursion.rs?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -0,0 +1,6 @@\n+type X1 = X2;\n+//~^ ERROR cycle detected when expanding type alias `X1`\n+type X2 = X3;\n+type X3 = X1;\n+\n+fn main() {}"}, {"sha": "7f82b294434f177040598d24e2991ea5e57daf19", "filename": "src/test/ui/infinite/infinite-type-alias-mutual-recursion.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Finfinite%2Finfinite-type-alias-mutual-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Finfinite%2Finfinite-type-alias-mutual-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-type-alias-mutual-recursion.stderr?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -0,0 +1,34 @@\n+error[E0391]: cycle detected when expanding type alias `X1`\n+  --> $DIR/infinite-type-alias-mutual-recursion.rs:1:11\n+   |\n+LL | type X1 = X2;\n+   |           ^^\n+   |\n+note: ...which requires expanding type alias `X2`...\n+  --> $DIR/infinite-type-alias-mutual-recursion.rs:3:11\n+   |\n+LL | type X2 = X3;\n+   |           ^^\n+note: ...which requires expanding type alias `X3`...\n+  --> $DIR/infinite-type-alias-mutual-recursion.rs:4:11\n+   |\n+LL | type X3 = X1;\n+   |           ^^\n+   = note: ...which again requires expanding type alias `X1`, completing the cycle\n+   = note: type aliases cannot be recursive\n+   = help: consider using a struct, enum, or union instead to break the cycle\n+   = help: see <https://doc.rust-lang.org/reference/types.html#recursive-types> for more information\n+note: cycle used when collecting item types in top-level module\n+  --> $DIR/infinite-type-alias-mutual-recursion.rs:1:1\n+   |\n+LL | / type X1 = X2;\n+LL | |\n+LL | | type X2 = X3;\n+LL | | type X3 = X1;\n+LL | |\n+LL | | fn main() {}\n+   | |____________^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "1e487a5b11c2af4eb287f5d208baaf47c8bbb9b7", "filename": "src/test/ui/infinite/infinite-vec-type-recursion.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-vec-type-recursion.stderr?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -1,10 +1,13 @@\n-error[E0391]: cycle detected when computing type of `X`\n+error[E0391]: cycle detected when expanding type alias `X`\n   --> $DIR/infinite-vec-type-recursion.rs:1:14\n    |\n LL | type X = Vec<X>;\n    |              ^\n    |\n-   = note: ...which again requires computing type of `X`, completing the cycle\n+   = note: ...which immediately requires expanding type alias `X` again\n+   = note: type aliases cannot be recursive\n+   = help: consider using a struct, enum, or union instead to break the cycle\n+   = help: see <https://doc.rust-lang.org/reference/types.html#recursive-types> for more information\n note: cycle used when collecting item types in top-level module\n   --> $DIR/infinite-vec-type-recursion.rs:1:1\n    |"}, {"sha": "c964dc41dceafece79bb65ab6295a9ce6bfd650d", "filename": "src/test/ui/issues/issue-20772.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fissues%2Fissue-20772.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fissues%2Fissue-20772.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20772.stderr?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -6,7 +6,7 @@ LL | |\n LL | | {}\n    | |__^\n    |\n-   = note: ...which again requires computing the super traits of `T` with associated type name `Item`, completing the cycle\n+   = note: ...which immediately requires computing the super traits of `T` with associated type name `Item` again\n note: cycle used when computing the super traits of `T`\n   --> $DIR/issue-20772.rs:1:1\n    |"}, {"sha": "be2bbd448007b605ce3ea4e011a8ca592d16cf02", "filename": "src/test/ui/issues/issue-20825.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fissues%2Fissue-20825.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fissues%2Fissue-20825.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20825.stderr?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -4,7 +4,7 @@ error[E0391]: cycle detected when computing the super traits of `Processor` with\n LL | pub trait Processor: Subscriber<Input = Self::Input> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: ...which again requires computing the super traits of `Processor` with associated type name `Input`, completing the cycle\n+   = note: ...which immediately requires computing the super traits of `Processor` with associated type name `Input` again\n note: cycle used when computing the super traits of `Processor`\n   --> $DIR/issue-20825.rs:5:1\n    |"}, {"sha": "6877a18460509feb04badbd366a7701de10de779", "filename": "src/test/ui/issues/issue-21177.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fissues%2Fissue-21177.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fissues%2Fissue-21177.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-21177.stderr?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -4,7 +4,7 @@ error[E0391]: cycle detected when computing the bounds for type parameter `T`\n LL | fn foo<T: Trait<A = T::B>>() { }\n    |                     ^^^^\n    |\n-   = note: ...which again requires computing the bounds for type parameter `T`, completing the cycle\n+   = note: ...which immediately requires computing the bounds for type parameter `T` again\n note: cycle used when computing explicit predicates of `foo`\n   --> $DIR/issue-21177.rs:6:21\n    |"}, {"sha": "8be3cfa72fb2675afb8fc3ae7596ada986fcc77f", "filename": "src/test/ui/issues/issue-34373.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fissues%2Fissue-34373.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fissues%2Fissue-34373.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34373.stderr?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -4,7 +4,7 @@ error[E0391]: cycle detected when computing type of `Foo::T`\n LL | pub struct Foo<T = Box<Trait<DefaultFoo>>>;\n    |                              ^^^^^^^^^^\n    |\n-note: ...which requires computing type of `DefaultFoo`...\n+note: ...which requires expanding type alias `DefaultFoo`...\n   --> $DIR/issue-34373.rs:8:19\n    |\n LL | type DefaultFoo = Foo;"}, {"sha": "0dcf0184db107005eea351fffa5a01fb6408d08d", "filename": "src/test/ui/resolve/issue-23305.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -4,7 +4,7 @@ error[E0391]: cycle detected when computing type of `<impl at $DIR/issue-23305.r\n LL | impl dyn ToNbt<Self> {}\n    |                ^^^^\n    |\n-   = note: ...which again requires computing type of `<impl at $DIR/issue-23305.rs:5:1: 5:24>`, completing the cycle\n+   = note: ...which immediately requires computing type of `<impl at $DIR/issue-23305.rs:5:1: 5:24>` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/issue-23305.rs:1:1\n    |"}, {"sha": "7f623e47353b93844e778705354cfd6ac99bc1bf", "filename": "src/test/ui/resolve/resolve-self-in-impl.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4f26b15e37101c54829efab456922a53e3103ad/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-self-in-impl.stderr?ref=c4f26b15e37101c54829efab456922a53e3103ad", "patch": "@@ -4,7 +4,7 @@ error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-\n LL | impl Tr for Self {}\n    |             ^^^^\n    |\n-   = note: ...which again requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:14:1: 14:20>`, completing the cycle\n+   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:14:1: 14:20>` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/resolve-self-in-impl.rs:1:1\n    |\n@@ -23,7 +23,7 @@ error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-\n LL | impl Tr for S<Self> {}\n    |               ^^^^\n    |\n-   = note: ...which again requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:15:1: 15:23>`, completing the cycle\n+   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:15:1: 15:23>` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/resolve-self-in-impl.rs:1:1\n    |\n@@ -42,7 +42,7 @@ error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-\n LL | impl Self {}\n    |      ^^^^\n    |\n-   = note: ...which again requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:16:1: 16:13>`, completing the cycle\n+   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:16:1: 16:13>` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/resolve-self-in-impl.rs:1:1\n    |\n@@ -61,7 +61,7 @@ error[E0391]: cycle detected when computing type of `<impl at $DIR/resolve-self-\n LL | impl S<Self> {}\n    |        ^^^^\n    |\n-   = note: ...which again requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:17:1: 17:16>`, completing the cycle\n+   = note: ...which immediately requires computing type of `<impl at $DIR/resolve-self-in-impl.rs:17:1: 17:16>` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/resolve-self-in-impl.rs:1:1\n    |\n@@ -80,7 +80,7 @@ error[E0391]: cycle detected when computing trait implemented by `<impl at $DIR/\n LL | impl Tr<Self::A> for S {}\n    | ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: ...which again requires computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:18:1: 18:26>`, completing the cycle\n+   = note: ...which immediately requires computing trait implemented by `<impl at $DIR/resolve-self-in-impl.rs:18:1: 18:26>` again\n note: cycle used when collecting item types in top-level module\n   --> $DIR/resolve-self-in-impl.rs:1:1\n    |"}]}