{"sha": "a3ee0bb7264aaf59a2906ea28755c96d21405a68", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzZWUwYmI3MjY0YWFmNTlhMjkwNmVhMjg3NTVjOTZkMjE0MDVhNjg=", "commit": {"author": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2021-04-11T22:44:54Z"}, "committer": {"name": "SNCPlay42", "email": "SNCPlay42@gmail.com", "date": "2021-04-11T22:44:54Z"}, "message": "detect when suggested paths enter extern crates more rigorously", "tree": {"sha": "04c72a31be99e831c6866f96bf9a2e005fca7399", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04c72a31be99e831c6866f96bf9a2e005fca7399"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a3ee0bb7264aaf59a2906ea28755c96d21405a68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a3ee0bb7264aaf59a2906ea28755c96d21405a68", "html_url": "https://github.com/rust-lang/rust/commit/a3ee0bb7264aaf59a2906ea28755c96d21405a68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a3ee0bb7264aaf59a2906ea28755c96d21405a68/comments", "author": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SNCPlay42", "id": 5455518, "node_id": "MDQ6VXNlcjU0NTU1MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5455518?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SNCPlay42", "html_url": "https://github.com/SNCPlay42", "followers_url": "https://api.github.com/users/SNCPlay42/followers", "following_url": "https://api.github.com/users/SNCPlay42/following{/other_user}", "gists_url": "https://api.github.com/users/SNCPlay42/gists{/gist_id}", "starred_url": "https://api.github.com/users/SNCPlay42/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SNCPlay42/subscriptions", "organizations_url": "https://api.github.com/users/SNCPlay42/orgs", "repos_url": "https://api.github.com/users/SNCPlay42/repos", "events_url": "https://api.github.com/users/SNCPlay42/events{/privacy}", "received_events_url": "https://api.github.com/users/SNCPlay42/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7953910464e073eb3876d1544a3fd5b5ba0ca49b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7953910464e073eb3876d1544a3fd5b5ba0ca49b", "html_url": "https://github.com/rust-lang/rust/commit/7953910464e073eb3876d1544a3fd5b5ba0ca49b"}], "stats": {"total": 57, "additions": 46, "deletions": 11}, "files": [{"sha": "87e28f7fcc5929fe98b9926fc73a77a46e7480ab", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a3ee0bb7264aaf59a2906ea28755c96d21405a68/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3ee0bb7264aaf59a2906ea28755c96d21405a68/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=a3ee0bb7264aaf59a2906ea28755c96d21405a68", "patch": "@@ -758,17 +758,14 @@ impl<'a> Resolver<'a> {\n     {\n         let mut candidates = Vec::new();\n         let mut seen_modules = FxHashSet::default();\n-        let not_local_module = crate_name.name != kw::Crate;\n-        let mut worklist =\n-            vec![(start_module, Vec::<ast::PathSegment>::new(), true, not_local_module)];\n+        let mut worklist = vec![(start_module, Vec::<ast::PathSegment>::new(), true)];\n         let mut worklist_via_import = vec![];\n \n-        while let Some((in_module, path_segments, accessible, in_module_is_extern)) =\n-            match worklist.pop() {\n-                None => worklist_via_import.pop(),\n-                Some(x) => Some(x),\n-            }\n-        {\n+        while let Some((in_module, path_segments, accessible)) = match worklist.pop() {\n+            None => worklist_via_import.pop(),\n+            Some(x) => Some(x),\n+        } {\n+            let in_module_is_extern = !in_module.def_id().unwrap().is_local();\n             // We have to visit module children in deterministic order to avoid\n             // instabilities in reported imports (#43552).\n             in_module.for_each_child(self, |this, ident, ns, name_binding| {\n@@ -850,11 +847,10 @@ impl<'a> Resolver<'a> {\n                         name_binding.is_extern_crate() && lookup_ident.span.rust_2018();\n \n                     if !is_extern_crate_that_also_appears_in_prelude {\n-                        let is_extern = in_module_is_extern || name_binding.is_extern_crate();\n                         // add the module to the lookup\n                         if seen_modules.insert(module.def_id().unwrap()) {\n                             if via_import { &mut worklist_via_import } else { &mut worklist }\n-                                .push((module, path_segments, child_accessible, is_extern));\n+                                .push((module, path_segments, child_accessible));\n                         }\n                     }\n                 }"}, {"sha": "190ca75aba86a0fec6a7eadec4c7b2c2efdc17b5", "filename": "src/test/ui/resolve/auxiliary/issue-80079.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a3ee0bb7264aaf59a2906ea28755c96d21405a68/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fissue-80079.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3ee0bb7264aaf59a2906ea28755c96d21405a68/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fissue-80079.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fissue-80079.rs?ref=a3ee0bb7264aaf59a2906ea28755c96d21405a68", "patch": "@@ -0,0 +1,18 @@\n+#![crate_type = \"lib\"]\n+\n+pub mod public {\n+    use private_import;\n+\n+    // should not be suggested since it is private\n+    struct Foo;\n+\n+    mod private_module {\n+        // should not be suggested since it is private\n+        pub struct Foo;\n+    }\n+}\n+\n+mod private_import {\n+    // should not be suggested since it is private\n+    pub struct Foo;\n+}"}, {"sha": "4795ed062c8f6ddeed9755d365b0b6b53122aa95", "filename": "src/test/ui/resolve/issue-80079.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a3ee0bb7264aaf59a2906ea28755c96d21405a68/src%2Ftest%2Fui%2Fresolve%2Fissue-80079.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a3ee0bb7264aaf59a2906ea28755c96d21405a68/src%2Ftest%2Fui%2Fresolve%2Fissue-80079.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-80079.rs?ref=a3ee0bb7264aaf59a2906ea28755c96d21405a68", "patch": "@@ -0,0 +1,12 @@\n+// aux-build:issue-80079.rs\n+\n+// using a module from another crate should not cause errors to suggest private\n+// items in that module\n+\n+extern crate issue_80079;\n+\n+use issue_80079::public;\n+\n+fn main() {\n+    let _ = Foo; //~ ERROR cannot find value `Foo` in this scope\n+}"}, {"sha": "93e8c0341a13a040736712a45aca2500e128cab3", "filename": "src/test/ui/resolve/issue-80079.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a3ee0bb7264aaf59a2906ea28755c96d21405a68/src%2Ftest%2Fui%2Fresolve%2Fissue-80079.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a3ee0bb7264aaf59a2906ea28755c96d21405a68/src%2Ftest%2Fui%2Fresolve%2Fissue-80079.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-80079.stderr?ref=a3ee0bb7264aaf59a2906ea28755c96d21405a68", "patch": "@@ -0,0 +1,9 @@\n+error[E0425]: cannot find value `Foo` in this scope\n+  --> $DIR/issue-80079.rs:11:13\n+   |\n+LL |     let _ = Foo;\n+   |             ^^^ not found in this scope\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0425`."}]}