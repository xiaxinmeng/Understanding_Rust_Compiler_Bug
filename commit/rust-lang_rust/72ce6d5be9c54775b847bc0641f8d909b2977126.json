{"sha": "72ce6d5be9c54775b847bc0641f8d909b2977126", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyY2U2ZDViZTljNTQ3NzViODQ3YmMwNjQxZjhkOTA5YjI5NzcxMjY=", "commit": {"author": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-04-24T14:46:56Z"}, "committer": {"name": "ThibsG", "email": "Thibs@debian.com", "date": "2020-05-02T11:03:11Z"}, "message": "Fix unwrap lint when checks are done in parameters", "tree": {"sha": "dc27db88c26a38e260d7c33b14a6dda034a14361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc27db88c26a38e260d7c33b14a6dda034a14361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72ce6d5be9c54775b847bc0641f8d909b2977126", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72ce6d5be9c54775b847bc0641f8d909b2977126", "html_url": "https://github.com/rust-lang/rust/commit/72ce6d5be9c54775b847bc0641f8d909b2977126", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72ce6d5be9c54775b847bc0641f8d909b2977126/comments", "author": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ThibsG", "id": 12683889, "node_id": "MDQ6VXNlcjEyNjgzODg5", "avatar_url": "https://avatars.githubusercontent.com/u/12683889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ThibsG", "html_url": "https://github.com/ThibsG", "followers_url": "https://api.github.com/users/ThibsG/followers", "following_url": "https://api.github.com/users/ThibsG/following{/other_user}", "gists_url": "https://api.github.com/users/ThibsG/gists{/gist_id}", "starred_url": "https://api.github.com/users/ThibsG/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ThibsG/subscriptions", "organizations_url": "https://api.github.com/users/ThibsG/orgs", "repos_url": "https://api.github.com/users/ThibsG/repos", "events_url": "https://api.github.com/users/ThibsG/events{/privacy}", "received_events_url": "https://api.github.com/users/ThibsG/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "991efa6375e548ff86334916a585a7e36a9d6839", "url": "https://api.github.com/repos/rust-lang/rust/commits/991efa6375e548ff86334916a585a7e36a9d6839", "html_url": "https://github.com/rust-lang/rust/commit/991efa6375e548ff86334916a585a7e36a9d6839"}], "stats": {"total": 72, "additions": 54, "deletions": 18}, "files": [{"sha": "f3844c7d3b68f4f7e37449a3640c879a2691990e", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/72ce6d5be9c54775b847bc0641f8d909b2977126/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ce6d5be9c54775b847bc0641f8d909b2977126/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=72ce6d5be9c54775b847bc0641f8d909b2977126", "patch": "@@ -1,4 +1,7 @@\n-use crate::utils::{higher::if_block, is_type_diagnostic_item, span_lint_and_then, usage::is_potentially_mutated};\n+use crate::utils::{\n+    differing_macro_contexts, higher::if_block, is_type_diagnostic_item, span_lint_and_then,\n+    usage::is_potentially_mutated,\n+};\n use if_chain::if_chain;\n use rustc_hir::intravisit::{walk_expr, walk_fn, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{BinOpKind, Body, Expr, ExprKind, FnDecl, HirId, Path, QPath, UnOp};\n@@ -73,6 +76,8 @@ struct UnwrapInfo<'tcx> {\n     ident: &'tcx Path<'tcx>,\n     /// The check, like `x.is_ok()`\n     check: &'tcx Expr<'tcx>,\n+    /// The branch where the check takes place, like `if x.is_ok() { .. }`\n+    branch: &'tcx Expr<'tcx>,\n     /// Whether `is_some()` or `is_ok()` was called (as opposed to `is_err()` or `is_none()`).\n     safe_to_unwrap: bool,\n }\n@@ -82,19 +87,20 @@ struct UnwrapInfo<'tcx> {\n fn collect_unwrap_info<'a, 'tcx>(\n     cx: &'a LateContext<'a, 'tcx>,\n     expr: &'tcx Expr<'_>,\n+    branch: &'tcx Expr<'_>,\n     invert: bool,\n ) -> Vec<UnwrapInfo<'tcx>> {\n     if let ExprKind::Binary(op, left, right) = &expr.kind {\n         match (invert, op.node) {\n             (false, BinOpKind::And) | (false, BinOpKind::BitAnd) | (true, BinOpKind::Or) | (true, BinOpKind::BitOr) => {\n-                let mut unwrap_info = collect_unwrap_info(cx, left, invert);\n-                unwrap_info.append(&mut collect_unwrap_info(cx, right, invert));\n+                let mut unwrap_info = collect_unwrap_info(cx, left, branch, invert);\n+                unwrap_info.append(&mut collect_unwrap_info(cx, right, branch, invert));\n                 return unwrap_info;\n             },\n             _ => (),\n         }\n     } else if let ExprKind::Unary(UnOp::UnNot, expr) = &expr.kind {\n-        return collect_unwrap_info(cx, expr, !invert);\n+        return collect_unwrap_info(cx, expr, branch, !invert);\n     } else {\n         if_chain! {\n             if let ExprKind::MethodCall(method_name, _, args) = &expr.kind;\n@@ -111,7 +117,7 @@ fn collect_unwrap_info<'a, 'tcx>(\n                     _ => unreachable!(),\n                 };\n                 let safe_to_unwrap = unwrappable != invert;\n-                return vec![UnwrapInfo { ident: path, check: expr, safe_to_unwrap }];\n+                return vec![UnwrapInfo { ident: path, check: expr, branch, safe_to_unwrap }];\n             }\n         }\n     }\n@@ -121,7 +127,7 @@ fn collect_unwrap_info<'a, 'tcx>(\n impl<'a, 'tcx> UnwrappableVariablesVisitor<'a, 'tcx> {\n     fn visit_branch(&mut self, cond: &'tcx Expr<'_>, branch: &'tcx Expr<'_>, else_branch: bool) {\n         let prev_len = self.unwrappables.len();\n-        for unwrap_info in collect_unwrap_info(self.cx, cond, else_branch) {\n+        for unwrap_info in collect_unwrap_info(self.cx, cond, branch, else_branch) {\n             if is_potentially_mutated(unwrap_info.ident, cond, self.cx)\n                 || is_potentially_mutated(unwrap_info.ident, branch, self.cx)\n             {\n@@ -158,6 +164,9 @@ impl<'a, 'tcx> Visitor<'tcx> for UnwrappableVariablesVisitor<'a, 'tcx> {\n                 let call_to_unwrap = method_name.ident.name == sym!(unwrap);\n                 if let Some(unwrappable) = self.unwrappables.iter()\n                     .find(|u| u.ident.res == path.res);\n+                // Span contexts should not differ with the conditional branch\n+                if !differing_macro_contexts(unwrappable.branch.span, expr.span);\n+                if !differing_macro_contexts(unwrappable.branch.span, unwrappable.check.span);\n                 then {\n                     if call_to_unwrap == unwrappable.safe_to_unwrap {\n                         span_lint_and_then("}, {"sha": "3e7b4b390bad48581244b7f66c666968af5db293", "filename": "tests/ui/checked_unwrap/simple_conditionals.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/72ce6d5be9c54775b847bc0641f8d909b2977126/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ce6d5be9c54775b847bc0641f8d909b2977126/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.rs?ref=72ce6d5be9c54775b847bc0641f8d909b2977126", "patch": "@@ -9,6 +9,30 @@ macro_rules! m {\n     };\n }\n \n+macro_rules! checks_in_param {\n+    ($a:expr, $b:expr) => {\n+        if $a {\n+            $b;\n+        }\n+    };\n+}\n+\n+macro_rules! checks_unwrap {\n+    ($a:expr, $b:expr) => {\n+        if $a.is_some() {\n+            $b;\n+        }\n+    };\n+}\n+\n+macro_rules! checks_some {\n+    ($a:expr, $b:expr) => {\n+        if $a {\n+            $b.unwrap();\n+        }\n+    };\n+}\n+\n fn main() {\n     let x = Some(());\n     if x.is_some() {\n@@ -22,6 +46,9 @@ fn main() {\n         x.unwrap(); // unnecessary\n     }\n     m!(x);\n+    checks_in_param!(x.is_some(), x.unwrap()); // ok\n+    checks_unwrap!(x, x.unwrap()); // ok\n+    checks_some!(x.is_some(), x); // ok\n     let mut x: Result<(), ()> = Ok(());\n     if x.is_ok() {\n         x.unwrap(); // unnecessary"}, {"sha": "4013d1ed667f16470d8abe497bfeff6562bb9ac2", "filename": "tests/ui/checked_unwrap/simple_conditionals.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/72ce6d5be9c54775b847bc0641f8d909b2977126/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/72ce6d5be9c54775b847bc0641f8d909b2977126/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fchecked_unwrap%2Fsimple_conditionals.stderr?ref=72ce6d5be9c54775b847bc0641f8d909b2977126", "patch": "@@ -1,5 +1,5 @@\n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/simple_conditionals.rs:15:9\n+  --> $DIR/simple_conditionals.rs:39:9\n    |\n LL |     if x.is_some() {\n    |        ----------- the check is happening here\n@@ -13,7 +13,7 @@ LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/simple_conditionals.rs:17:9\n+  --> $DIR/simple_conditionals.rs:41:9\n    |\n LL |     if x.is_some() {\n    |        ----------- because of this check\n@@ -28,15 +28,15 @@ LL | #![deny(clippy::panicking_unwrap, clippy::unnecessary_unwrap)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/simple_conditionals.rs:20:9\n+  --> $DIR/simple_conditionals.rs:44:9\n    |\n LL |     if x.is_none() {\n    |        ----------- because of this check\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/simple_conditionals.rs:22:9\n+  --> $DIR/simple_conditionals.rs:46:9\n    |\n LL |     if x.is_none() {\n    |        ----------- the check is happening here\n@@ -58,15 +58,15 @@ LL |     m!(x);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/simple_conditionals.rs:27:9\n+  --> $DIR/simple_conditionals.rs:54:9\n    |\n LL |     if x.is_ok() {\n    |        --------- the check is happening here\n LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: This call to `unwrap_err()` will always panic.\n-  --> $DIR/simple_conditionals.rs:28:9\n+  --> $DIR/simple_conditionals.rs:55:9\n    |\n LL |     if x.is_ok() {\n    |        --------- because of this check\n@@ -75,7 +75,7 @@ LL |         x.unwrap_err(); // will panic\n    |         ^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/simple_conditionals.rs:30:9\n+  --> $DIR/simple_conditionals.rs:57:9\n    |\n LL |     if x.is_ok() {\n    |        --------- because of this check\n@@ -84,7 +84,7 @@ LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/simple_conditionals.rs:31:9\n+  --> $DIR/simple_conditionals.rs:58:9\n    |\n LL |     if x.is_ok() {\n    |        --------- the check is happening here\n@@ -93,15 +93,15 @@ LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: This call to `unwrap()` will always panic.\n-  --> $DIR/simple_conditionals.rs:34:9\n+  --> $DIR/simple_conditionals.rs:61:9\n    |\n LL |     if x.is_err() {\n    |        ---------- because of this check\n LL |         x.unwrap(); // will panic\n    |         ^^^^^^^^^^\n \n error: You checked before that `unwrap_err()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/simple_conditionals.rs:35:9\n+  --> $DIR/simple_conditionals.rs:62:9\n    |\n LL |     if x.is_err() {\n    |        ---------- the check is happening here\n@@ -110,7 +110,7 @@ LL |         x.unwrap_err(); // unnecessary\n    |         ^^^^^^^^^^^^^^\n \n error: You checked before that `unwrap()` cannot fail. Instead of checking and unwrapping, it's better to use `if let` or `match`.\n-  --> $DIR/simple_conditionals.rs:37:9\n+  --> $DIR/simple_conditionals.rs:64:9\n    |\n LL |     if x.is_err() {\n    |        ---------- the check is happening here\n@@ -119,7 +119,7 @@ LL |         x.unwrap(); // unnecessary\n    |         ^^^^^^^^^^\n \n error: This call to `unwrap_err()` will always panic.\n-  --> $DIR/simple_conditionals.rs:38:9\n+  --> $DIR/simple_conditionals.rs:65:9\n    |\n LL |     if x.is_err() {\n    |        ---------- because of this check"}]}