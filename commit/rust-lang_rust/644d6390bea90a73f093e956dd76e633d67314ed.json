{"sha": "644d6390bea90a73f093e956dd76e633d67314ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY0NGQ2MzkwYmVhOTBhNzNmMDkzZTk1NmRkNzZlNjMzZDY3MzE0ZWQ=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-02-18T13:19:11Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-09T14:45:29Z"}, "message": "typeck: Use TyFnDef for methods.", "tree": {"sha": "fc1932b97722e5f9afaf41b0b43edffa6c64f5b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fc1932b97722e5f9afaf41b0b43edffa6c64f5b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/644d6390bea90a73f093e956dd76e633d67314ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/644d6390bea90a73f093e956dd76e633d67314ed", "html_url": "https://github.com/rust-lang/rust/commit/644d6390bea90a73f093e956dd76e633d67314ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/644d6390bea90a73f093e956dd76e633d67314ed/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "847f00738b93575aa19e1707c5d0216e0e36447e", "url": "https://api.github.com/repos/rust-lang/rust/commits/847f00738b93575aa19e1707c5d0216e0e36447e", "html_url": "https://github.com/rust-lang/rust/commit/847f00738b93575aa19e1707c5d0216e0e36447e"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "7b709b93ed882f2cf776fa1b08440de81293c93b", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/644d6390bea90a73f093e956dd76e633d67314ed/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644d6390bea90a73f093e956dd76e633d67314ed/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=644d6390bea90a73f093e956dd76e633d67314ed", "patch": "@@ -98,27 +98,29 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n         let InstantiatedMethodSig {\n             method_sig, all_substs, method_predicates\n         } = self.instantiate_method_sig(&pick, all_substs);\n+        let all_substs = self.tcx().mk_substs(all_substs);\n         let method_self_ty = method_sig.inputs[0];\n \n         // Unify the (adjusted) self type with what the method expects.\n         self.unify_receivers(self_ty, method_self_ty);\n \n         // Create the method type\n+        let def_id = pick.item.def_id();\n         let method_ty = pick.item.as_opt_method().unwrap();\n-        let fty = self.tcx().mk_fn_ptr(ty::BareFnTy {\n+        let fty = self.tcx().mk_fn_def(def_id, all_substs, ty::BareFnTy {\n             sig: ty::Binder(method_sig),\n             unsafety: method_ty.fty.unsafety,\n             abi: method_ty.fty.abi.clone(),\n         });\n \n         // Add any trait/regions obligations specified on the method's type parameters.\n-        self.add_obligations(fty, &all_substs, &method_predicates);\n+        self.add_obligations(fty, all_substs, &method_predicates);\n \n         // Create the final `MethodCallee`.\n         let callee = ty::MethodCallee {\n-            def_id: pick.item.def_id(),\n+            def_id: def_id,\n             ty: fty,\n-            substs: self.tcx().mk_substs(all_substs)\n+            substs: all_substs\n         };\n         // If this is an `&mut self` method, bias the receiver\n         // expression towards mutability (this will switch\n@@ -457,7 +459,7 @@ impl<'a,'tcx> ConfirmContext<'a,'tcx> {\n     fn fixup_derefs_on_method_receiver_if_necessary(&self,\n                                                     method_callee: &ty::MethodCallee) {\n         let sig = match method_callee.ty.sty {\n-            ty::TyFnPtr(ref f) => f.sig.clone(),\n+            ty::TyFnDef(_, _, ref f) => f.sig.clone(),\n             _ => return,\n         };\n "}, {"sha": "e74623eda6d428afb46277a1f7a5a8801d586fa4", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/644d6390bea90a73f093e956dd76e633d67314ed/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644d6390bea90a73f093e956dd76e633d67314ed/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=644d6390bea90a73f093e956dd76e633d67314ed", "patch": "@@ -230,7 +230,8 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                                                                        &method_ty.fty.sig).0;\n     let fn_sig = fcx.instantiate_type_scheme(span, trait_ref.substs, &fn_sig);\n     let transformed_self_ty = fn_sig.inputs[0];\n-    let fty = tcx.mk_fn_ptr(ty::BareFnTy {\n+    let def_id = method_item.def_id();\n+    let fty = tcx.mk_fn_def(def_id, trait_ref.substs, ty::BareFnTy {\n         sig: ty::Binder(fn_sig),\n         unsafety: method_ty.fty.unsafety,\n         abi: method_ty.fty.abi.clone(),\n@@ -318,7 +319,7 @@ pub fn lookup_in_trait_adjusted<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n     }\n \n     let callee = ty::MethodCallee {\n-        def_id: method_item.def_id(),\n+        def_id: def_id,\n         ty: fty,\n         substs: trait_ref.substs\n     };"}, {"sha": "6865e173d3298916d3cf846ef86e26ce430a6d43", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/644d6390bea90a73f093e956dd76e633d67314ed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/644d6390bea90a73f093e956dd76e633d67314ed/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=644d6390bea90a73f093e956dd76e633d67314ed", "patch": "@@ -2340,7 +2340,7 @@ fn check_method_argument_types<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n         ty::FnConverging(fcx.tcx().types.err)\n     } else {\n         match method_fn_ty.sty {\n-            ty::TyFnPtr(ref fty) => {\n+            ty::TyFnDef(_, _, ref fty) => {\n                 // HACK(eddyb) ignore self in the definition (see above).\n                 let expected_arg_tys = expected_types_for_fn_args(fcx,\n                                                                   sp,"}]}