{"sha": "cccc7500464177018f573b9ce9b3b454be50e11b", "node_id": "C_kwDOAAsO6NoAKGNjY2M3NTAwNDY0MTc3MDE4ZjU3M2I5Y2U5YjNiNDU0YmU1MGUxMWI", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-14T01:10:30Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-14T01:57:17Z"}, "message": "Fix `clap` deprecation warnings", "tree": {"sha": "85a37bd9d7ae14cf614955eeaa49baa3d7b8bf8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85a37bd9d7ae14cf614955eeaa49baa3d7b8bf8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cccc7500464177018f573b9ce9b3b454be50e11b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cccc7500464177018f573b9ce9b3b454be50e11b", "html_url": "https://github.com/rust-lang/rust/commit/cccc7500464177018f573b9ce9b3b454be50e11b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cccc7500464177018f573b9ce9b3b454be50e11b/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17b7ab004fd67f186b5822bf6c42c16896802c4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/17b7ab004fd67f186b5822bf6c42c16896802c4b", "html_url": "https://github.com/rust-lang/rust/commit/17b7ab004fd67f186b5822bf6c42c16896802c4b"}], "stats": {"total": 287, "additions": 120, "deletions": 167}, "files": [{"sha": "71005449b4ddf871d46f1ec86a8cc07b89ed3a8f", "filename": "clippy_dev/src/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cccc7500464177018f573b9ce9b3b454be50e11b/clippy_dev%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccc7500464177018f573b9ce9b3b454be50e11b/clippy_dev%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flint.rs?ref=cccc7500464177018f573b9ce9b3b454be50e11b", "patch": "@@ -13,7 +13,7 @@ fn exit_if_err(status: io::Result<ExitStatus>) {\n     }\n }\n \n-pub fn run<'a>(path: &str, args: impl Iterator<Item = &'a str>) {\n+pub fn run<'a>(path: &str, args: impl Iterator<Item = &'a String>) {\n     let is_file = match fs::metadata(path) {\n         Ok(metadata) => metadata.is_file(),\n         Err(e) => {"}, {"sha": "2c27a0bcaf95ee776f901d76407fad87529f1edd", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 88, "deletions": 124, "changes": 212, "blob_url": "https://github.com/rust-lang/rust/blob/cccc7500464177018f573b9ce9b3b454be50e11b/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccc7500464177018f573b9ce9b3b454be50e11b/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=cccc7500464177018f573b9ce9b3b454be50e11b", "patch": "@@ -2,63 +2,63 @@\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n-use clap::{Arg, ArgMatches, Command};\n+use clap::{Arg, ArgAction, ArgMatches, Command, PossibleValue};\n use clippy_dev::{bless, fmt, lint, new_lint, serve, setup, update_lints};\n use indoc::indoc;\n fn main() {\n     let matches = get_clap_config();\n \n     match matches.subcommand() {\n         Some((\"bless\", matches)) => {\n-            bless::bless(matches.is_present(\"ignore-timestamp\"));\n+            bless::bless(matches.contains_id(\"ignore-timestamp\"));\n         },\n         Some((\"fmt\", matches)) => {\n-            fmt::run(matches.is_present(\"check\"), matches.is_present(\"verbose\"));\n+            fmt::run(matches.contains_id(\"check\"), matches.contains_id(\"verbose\"));\n         },\n         Some((\"update_lints\", matches)) => {\n-            if matches.is_present(\"print-only\") {\n+            if matches.contains_id(\"print-only\") {\n                 update_lints::print_lints();\n-            } else if matches.is_present(\"check\") {\n+            } else if matches.contains_id(\"check\") {\n                 update_lints::update(update_lints::UpdateMode::Check);\n             } else {\n                 update_lints::update(update_lints::UpdateMode::Change);\n             }\n         },\n         Some((\"new_lint\", matches)) => {\n             match new_lint::create(\n-                matches.value_of(\"pass\"),\n-                matches.value_of(\"name\"),\n-                matches.value_of(\"category\"),\n-                matches.is_present(\"msrv\"),\n+                matches.get_one::<String>(\"pass\"),\n+                matches.get_one::<String>(\"name\"),\n+                matches.get_one::<String>(\"category\"),\n+                matches.contains_id(\"msrv\"),\n             ) {\n                 Ok(_) => update_lints::update(update_lints::UpdateMode::Change),\n                 Err(e) => eprintln!(\"Unable to create lint: {}\", e),\n             }\n         },\n         Some((\"setup\", sub_command)) => match sub_command.subcommand() {\n             Some((\"intellij\", matches)) => {\n-                if matches.is_present(\"remove\") {\n+                if matches.contains_id(\"remove\") {\n                     setup::intellij::remove_rustc_src();\n                 } else {\n                     setup::intellij::setup_rustc_src(\n                         matches\n-                            .value_of(\"rustc-repo-path\")\n+                            .get_one::<String>(\"rustc-repo-path\")\n                             .expect(\"this field is mandatory and therefore always valid\"),\n                     );\n                 }\n             },\n             Some((\"git-hook\", matches)) => {\n-                if matches.is_present(\"remove\") {\n+                if matches.contains_id(\"remove\") {\n                     setup::git_hook::remove_hook();\n                 } else {\n-                    setup::git_hook::install_hook(matches.is_present(\"force-override\"));\n+                    setup::git_hook::install_hook(matches.contains_id(\"force-override\"));\n                 }\n             },\n             Some((\"vscode-tasks\", matches)) => {\n-                if matches.is_present(\"remove\") {\n+                if matches.contains_id(\"remove\") {\n                     setup::vscode::remove_tasks();\n                 } else {\n-                    setup::vscode::install_tasks(matches.is_present(\"force-override\"));\n+                    setup::vscode::install_tasks(matches.contains_id(\"force-override\"));\n                 }\n             },\n             _ => {},\n@@ -70,19 +70,19 @@ fn main() {\n             _ => {},\n         },\n         Some((\"serve\", matches)) => {\n-            let port = matches.value_of(\"port\").unwrap().parse().unwrap();\n-            let lint = matches.value_of(\"lint\");\n+            let port = *matches.get_one::<u16>(\"port\").unwrap();\n+            let lint = matches.get_one::<String>(\"lint\");\n             serve::run(port, lint);\n         },\n         Some((\"lint\", matches)) => {\n-            let path = matches.value_of(\"path\").unwrap();\n-            let args = matches.values_of(\"args\").into_iter().flatten();\n+            let path = matches.get_one::<String>(\"path\").unwrap();\n+            let args = matches.get_many::<String>(\"args\").into_iter().flatten();\n             lint::run(path, args);\n         },\n         Some((\"rename_lint\", matches)) => {\n-            let old_name = matches.value_of(\"old_name\").unwrap();\n-            let new_name = matches.value_of(\"new_name\").unwrap_or(old_name);\n-            let uplift = matches.is_present(\"uplift\");\n+            let old_name = matches.get_one::<String>(\"old_name\").unwrap();\n+            let new_name = matches.get_one::<String>(\"new_name\").unwrap_or(old_name);\n+            let uplift = matches.contains_id(\"uplift\");\n             update_lints::rename(old_name, new_name, uplift);\n         },\n         _ => {},\n@@ -92,98 +92,86 @@ fn main() {\n fn get_clap_config() -> ArgMatches {\n     Command::new(\"Clippy developer tooling\")\n         .arg_required_else_help(true)\n-        .subcommand(\n+        .subcommands([\n             Command::new(\"bless\").about(\"bless the test output changes\").arg(\n                 Arg::new(\"ignore-timestamp\")\n                     .long(\"ignore-timestamp\")\n                     .help(\"Include files updated before clippy was built\"),\n             ),\n-        )\n-        .subcommand(\n             Command::new(\"fmt\")\n                 .about(\"Run rustfmt on all projects and tests\")\n-                .arg(Arg::new(\"check\").long(\"check\").help(\"Use the rustfmt --check option\"))\n-                .arg(Arg::new(\"verbose\").short('v').long(\"verbose\").help(\"Echo commands run\")),\n-        )\n-        .subcommand(\n+                .args([\n+                    Arg::new(\"check\").long(\"check\").help(\"Use the rustfmt --check option\"),\n+                    Arg::new(\"verbose\").short('v').long(\"verbose\").help(\"Echo commands run\"),\n+                ]),\n             Command::new(\"update_lints\")\n                 .about(\"Updates lint registration and information from the source code\")\n                 .long_about(\n                     \"Makes sure that:\\n \\\n-                 * the lint count in README.md is correct\\n \\\n-                 * the changelog contains markdown link references at the bottom\\n \\\n-                 * all lint groups include the correct lints\\n \\\n-                 * lint modules in `clippy_lints/*` are visible in `src/lib.rs` via `pub mod`\\n \\\n-                 * all lints are registered in the lint store\",\n+                    * the lint count in README.md is correct\\n \\\n+                    * the changelog contains markdown link references at the bottom\\n \\\n+                    * all lint groups include the correct lints\\n \\\n+                    * lint modules in `clippy_lints/*` are visible in `src/lib.rs` via `pub mod`\\n \\\n+                    * all lints are registered in the lint store\",\n                 )\n-                .arg(Arg::new(\"print-only\").long(\"print-only\").help(\n-                    \"Print a table of lints to STDOUT. \\\n-                 This does not include deprecated and internal lints. \\\n-                 (Does not modify any files)\",\n-                ))\n-                .arg(\n+                .args([\n+                    Arg::new(\"print-only\").long(\"print-only\").help(\n+                        \"Print a table of lints to STDOUT. \\\n+                        This does not include deprecated and internal lints. \\\n+                        (Does not modify any files)\",\n+                    ),\n                     Arg::new(\"check\")\n                         .long(\"check\")\n                         .help(\"Checks that `cargo dev update_lints` has been run. Used on CI.\"),\n-                ),\n-        )\n-        .subcommand(\n+                ]),\n             Command::new(\"new_lint\")\n                 .about(\"Create new lint and run `cargo dev update_lints`\")\n-                .arg(\n+                .args([\n                     Arg::new(\"pass\")\n                         .short('p')\n                         .long(\"pass\")\n                         .help(\"Specify whether the lint runs during the early or late pass\")\n                         .takes_value(true)\n-                        .possible_values(&[\"early\", \"late\"])\n+                        .value_parser([PossibleValue::new(\"early\"), PossibleValue::new(\"late\")])\n                         .required(true),\n-                )\n-                .arg(\n                     Arg::new(\"name\")\n                         .short('n')\n                         .long(\"name\")\n                         .help(\"Name of the new lint in snake case, ex: fn_too_long\")\n                         .takes_value(true)\n                         .required(true),\n-                )\n-                .arg(\n                     Arg::new(\"category\")\n                         .short('c')\n                         .long(\"category\")\n                         .help(\"What category the lint belongs to\")\n                         .default_value(\"nursery\")\n-                        .possible_values(&[\n-                            \"style\",\n-                            \"correctness\",\n-                            \"suspicious\",\n-                            \"complexity\",\n-                            \"perf\",\n-                            \"pedantic\",\n-                            \"restriction\",\n-                            \"cargo\",\n-                            \"nursery\",\n-                            \"internal\",\n-                            \"internal_warn\",\n+                        .value_parser([\n+                            PossibleValue::new(\"style\"),\n+                            PossibleValue::new(\"correctness\"),\n+                            PossibleValue::new(\"suspicious\"),\n+                            PossibleValue::new(\"complexity\"),\n+                            PossibleValue::new(\"perf\"),\n+                            PossibleValue::new(\"pedantic\"),\n+                            PossibleValue::new(\"restriction\"),\n+                            PossibleValue::new(\"cargo\"),\n+                            PossibleValue::new(\"nursery\"),\n+                            PossibleValue::new(\"internal\"),\n+                            PossibleValue::new(\"internal_warn\"),\n                         ])\n                         .takes_value(true),\n-                )\n-                .arg(Arg::new(\"msrv\").long(\"msrv\").help(\"Add MSRV config code to the lint\")),\n-        )\n-        .subcommand(\n+                    Arg::new(\"msrv\").long(\"msrv\").help(\"Add MSRV config code to the lint\"),\n+                ]),\n             Command::new(\"setup\")\n                 .about(\"Support for setting up your personal development environment\")\n                 .arg_required_else_help(true)\n-                .subcommand(\n+                .subcommands([\n                     Command::new(\"intellij\")\n                         .about(\"Alter dependencies so Intellij Rust can find rustc internals\")\n-                        .arg(\n+                        .args([\n                             Arg::new(\"remove\")\n                                 .long(\"remove\")\n                                 .help(\"Remove the dependencies added with 'cargo dev setup intellij'\")\n                                 .required(false),\n-                        )\n-                        .arg(\n                             Arg::new(\"rustc-repo-path\")\n                                 .long(\"repo-path\")\n                                 .short('r')\n@@ -192,67 +180,53 @@ fn get_clap_config() -> ArgMatches {\n                                 .value_name(\"path\")\n                                 .conflicts_with(\"remove\")\n                                 .required(true),\n-                        ),\n-                )\n-                .subcommand(\n+                        ]),\n                     Command::new(\"git-hook\")\n                         .about(\"Add a pre-commit git hook that formats your code to make it look pretty\")\n-                        .arg(\n+                        .args([\n                             Arg::new(\"remove\")\n                                 .long(\"remove\")\n                                 .help(\"Remove the pre-commit hook added with 'cargo dev setup git-hook'\")\n                                 .required(false),\n-                        )\n-                        .arg(\n                             Arg::new(\"force-override\")\n                                 .long(\"force-override\")\n                                 .short('f')\n                                 .help(\"Forces the override of an existing git pre-commit hook\")\n                                 .required(false),\n-                        ),\n-                )\n-                .subcommand(\n+                        ]),\n                     Command::new(\"vscode-tasks\")\n                         .about(\"Add several tasks to vscode for formatting, validation and testing\")\n-                        .arg(\n+                        .args([\n                             Arg::new(\"remove\")\n                                 .long(\"remove\")\n                                 .help(\"Remove the tasks added with 'cargo dev setup vscode-tasks'\")\n                                 .required(false),\n-                        )\n-                        .arg(\n                             Arg::new(\"force-override\")\n                                 .long(\"force-override\")\n                                 .short('f')\n                                 .help(\"Forces the override of existing vscode tasks\")\n                                 .required(false),\n-                        ),\n-                ),\n-        )\n-        .subcommand(\n+                        ]),\n+                ]),\n             Command::new(\"remove\")\n                 .about(\"Support for undoing changes done by the setup command\")\n                 .arg_required_else_help(true)\n-                .subcommand(Command::new(\"git-hook\").about(\"Remove any existing pre-commit git hook\"))\n-                .subcommand(Command::new(\"vscode-tasks\").about(\"Remove any existing vscode tasks\"))\n-                .subcommand(\n+                .subcommands([\n+                    Command::new(\"git-hook\").about(\"Remove any existing pre-commit git hook\"),\n+                    Command::new(\"vscode-tasks\").about(\"Remove any existing vscode tasks\"),\n                     Command::new(\"intellij\").about(\"Removes rustc source paths added via `cargo dev setup intellij`\"),\n-                ),\n-        )\n-        .subcommand(\n+                ]),\n             Command::new(\"serve\")\n                 .about(\"Launch a local 'ALL the Clippy Lints' website in a browser\")\n-                .arg(\n+                .args([\n                     Arg::new(\"port\")\n                         .long(\"port\")\n                         .short('p')\n                         .help(\"Local port for the http server\")\n                         .default_value(\"8000\")\n-                        .validator_os(serve::validate_port),\n-                )\n-                .arg(Arg::new(\"lint\").help(\"Which lint's page to load initially (optional)\")),\n-        )\n-        .subcommand(\n+                        .value_parser(clap::value_parser!(u16)),\n+                    Arg::new(\"lint\").help(\"Which lint's page to load initially (optional)\"),\n+                ]),\n             Command::new(\"lint\")\n                 .about(\"Manually run clippy on a file or package\")\n                 .after_help(indoc! {\"\n@@ -271,37 +245,27 @@ fn get_clap_config() -> ArgMatches {\n                             cargo dev lint file.rs -- -W clippy::pedantic\n                             cargo dev lint ~/my-project -- -- -W clippy::pedantic\n                 \"})\n-                .arg(\n+                .args([\n                     Arg::new(\"path\")\n                         .required(true)\n                         .help(\"The path to a file or package directory to lint\"),\n-                )\n-                .arg(\n                     Arg::new(\"args\")\n-                        .multiple_occurrences(true)\n+                        .action(ArgAction::Append)\n                         .help(\"Pass extra arguments to cargo/clippy-driver\"),\n-                ),\n-        )\n-        .subcommand(\n-            Command::new(\"rename_lint\")\n-                .about(\"Renames the given lint\")\n-                .arg(\n-                    Arg::new(\"old_name\")\n-                        .index(1)\n-                        .required(true)\n-                        .help(\"The name of the lint to rename\"),\n-                )\n-                .arg(\n-                    Arg::new(\"new_name\")\n-                        .index(2)\n-                        .required_unless_present(\"uplift\")\n-                        .help(\"The new name of the lint\"),\n-                )\n-                .arg(\n-                    Arg::new(\"uplift\")\n-                        .long(\"uplift\")\n-                        .help(\"This lint will be uplifted into rustc\"),\n-                ),\n-        )\n+                ]),\n+            Command::new(\"rename_lint\").about(\"Renames the given lint\").args([\n+                Arg::new(\"old_name\")\n+                    .index(1)\n+                    .required(true)\n+                    .help(\"The name of the lint to rename\"),\n+                Arg::new(\"new_name\")\n+                    .index(2)\n+                    .required_unless_present(\"uplift\")\n+                    .help(\"The new name of the lint\"),\n+                Arg::new(\"uplift\")\n+                    .long(\"uplift\")\n+                    .help(\"This lint will be uplifted into rustc\"),\n+            ]),\n+        ])\n         .get_matches()\n }"}, {"sha": "748d73c0801265b82ff109fce7d089aca1d684c6", "filename": "clippy_dev/src/new_lint.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cccc7500464177018f573b9ce9b3b454be50e11b/clippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccc7500464177018f573b9ce9b3b454be50e11b/clippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fnew_lint.rs?ref=cccc7500464177018f573b9ce9b3b454be50e11b", "patch": "@@ -34,7 +34,12 @@ impl<T> Context for io::Result<T> {\n /// # Errors\n ///\n /// This function errors out if the files couldn't be created or written to.\n-pub fn create(pass: Option<&str>, lint_name: Option<&str>, category: Option<&str>, msrv: bool) -> io::Result<()> {\n+pub fn create(\n+    pass: Option<&String>,\n+    lint_name: Option<&String>,\n+    category: Option<&String>,\n+    msrv: bool,\n+) -> io::Result<()> {\n     let lint = LintData {\n         pass: pass.expect(\"`pass` argument is validated by clap\"),\n         name: lint_name.expect(\"`name` argument is validated by clap\"),"}, {"sha": "f15f24da94671878d56b48ddd562b6ef2c4333ce", "filename": "clippy_dev/src/serve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cccc7500464177018f573b9ce9b3b454be50e11b/clippy_dev%2Fsrc%2Fserve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccc7500464177018f573b9ce9b3b454be50e11b/clippy_dev%2Fsrc%2Fserve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fserve.rs?ref=cccc7500464177018f573b9ce9b3b454be50e11b", "patch": "@@ -8,7 +8,7 @@ use std::time::{Duration, SystemTime};\n /// # Panics\n ///\n /// Panics if the python commands could not be spawned\n-pub fn run(port: u16, lint: Option<&str>) -> ! {\n+pub fn run(port: u16, lint: Option<&String>) -> ! {\n     let mut url = Some(match lint {\n         None => format!(\"http://localhost:{}\", port),\n         Some(lint) => format!(\"http://localhost:{}/#{}\", port, lint),"}, {"sha": "1742cf677c0f9fefad4e3791012b4f674bd4c2f0", "filename": "lintcheck/src/config.rs", "status": "modified", "additions": 24, "deletions": 40, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/cccc7500464177018f573b9ce9b3b454be50e11b/lintcheck%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cccc7500464177018f573b9ce9b3b454be50e11b/lintcheck%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fconfig.rs?ref=cccc7500464177018f573b9ce9b3b454be50e11b", "patch": "@@ -1,50 +1,40 @@\n-use clap::{Arg, ArgMatches, Command};\n+use clap::{Arg, ArgAction, ArgMatches, Command};\n use std::env;\n use std::path::PathBuf;\n \n fn get_clap_config() -> ArgMatches {\n     Command::new(\"lintcheck\")\n         .about(\"run clippy on a set of crates and check output\")\n-        .arg(\n+        .args([\n             Arg::new(\"only\")\n-                .takes_value(true)\n+                .action(ArgAction::Set)\n                 .value_name(\"CRATE\")\n                 .long(\"only\")\n                 .help(\"Only process a single crate of the list\"),\n-        )\n-        .arg(\n             Arg::new(\"crates-toml\")\n-                .takes_value(true)\n+                .action(ArgAction::Set)\n                 .value_name(\"CRATES-SOURCES-TOML-PATH\")\n                 .long(\"crates-toml\")\n                 .help(\"Set the path for a crates.toml where lintcheck should read the sources from\"),\n-        )\n-        .arg(\n             Arg::new(\"threads\")\n-                .takes_value(true)\n+                .action(ArgAction::Set)\n                 .value_name(\"N\")\n+                .value_parser(clap::value_parser!(usize))\n                 .short('j')\n                 .long(\"jobs\")\n                 .help(\"Number of threads to use, 0 automatic choice\"),\n-        )\n-        .arg(\n             Arg::new(\"fix\")\n-                .long(\"--fix\")\n+                .long(\"fix\")\n                 .help(\"Runs cargo clippy --fix and checks if all suggestions apply\"),\n-        )\n-        .arg(\n             Arg::new(\"filter\")\n-                .long(\"--filter\")\n-                .takes_value(true)\n-                .multiple_occurrences(true)\n+                .long(\"filter\")\n+                .action(ArgAction::Append)\n                 .value_name(\"clippy_lint_name\")\n                 .help(\"Apply a filter to only collect specified lints, this also overrides `allow` attributes\"),\n-        )\n-        .arg(\n             Arg::new(\"markdown\")\n-                .long(\"--markdown\")\n+                .long(\"markdown\")\n                 .help(\"Change the reports table to use markdown links\"),\n-        )\n+        ])\n         .get_matches()\n }\n \n@@ -75,13 +65,13 @@ impl LintcheckConfig {\n         // if not, use the default \"lintcheck/lintcheck_crates.toml\"\n         let sources_toml = env::var(\"LINTCHECK_TOML\").unwrap_or_else(|_| {\n             clap_config\n-                .value_of(\"crates-toml\")\n-                .clone()\n+                .get_one::<String>(\"crates-toml\")\n+                .map(|s| &**s)\n                 .unwrap_or(\"lintcheck/lintcheck_crates.toml\")\n-                .to_string()\n+                .into()\n         });\n \n-        let markdown = clap_config.is_present(\"markdown\");\n+        let markdown = clap_config.contains_id(\"markdown\");\n         let sources_toml_path = PathBuf::from(sources_toml);\n \n         // for the path where we save the lint results, get the filename without extension (so for\n@@ -96,25 +86,19 @@ impl LintcheckConfig {\n         // look at the --threads arg, if 0 is passed, ask rayon rayon how many threads it would spawn and\n         // use half of that for the physical core count\n         // by default use a single thread\n-        let max_jobs = match clap_config.value_of(\"threads\") {\n-            Some(threads) => {\n-                let threads: usize = threads\n-                    .parse()\n-                    .unwrap_or_else(|_| panic!(\"Failed to parse '{}' to a digit\", threads));\n-                if threads == 0 {\n-                    // automatic choice\n-                    // Rayon seems to return thread count so half that for core count\n-                    (rayon::current_num_threads() / 2) as usize\n-                } else {\n-                    threads\n-                }\n+        let max_jobs = match clap_config.get_one::<usize>(\"threads\") {\n+            Some(&0) => {\n+                // automatic choice\n+                // Rayon seems to return thread count so half that for core count\n+                (rayon::current_num_threads() / 2) as usize\n             },\n+            Some(&threads) => threads,\n             // no -j passed, use a single thread\n             None => 1,\n         };\n \n         let lint_filter: Vec<String> = clap_config\n-            .values_of(\"filter\")\n+            .get_many::<String>(\"filter\")\n             .map(|iter| {\n                 iter.map(|lint_name| {\n                     let mut filter = lint_name.replace('_', \"-\");\n@@ -131,8 +115,8 @@ impl LintcheckConfig {\n             max_jobs,\n             sources_toml_path,\n             lintcheck_results_path,\n-            only: clap_config.value_of(\"only\").map(String::from),\n-            fix: clap_config.is_present(\"fix\"),\n+            only: clap_config.get_one::<String>(\"only\").map(String::from),\n+            fix: clap_config.contains_id(\"fix\"),\n             lint_filter,\n             markdown,\n         }"}]}