{"sha": "7411468ff817884cdb1239e85b5ab785cc65e36d", "node_id": "C_kwDOAAsO6NoAKDc0MTE0NjhmZjgxNzg4NGNkYjEyMzllODViNWFiNzg1Y2M2NWUzNmQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-01T05:29:36Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-05-02T05:04:50Z"}, "message": "Mark RPITIT and AFIT as no longer incomplete", "tree": {"sha": "a977c119ff29836b826db36020ea5301ff1c1a3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a977c119ff29836b826db36020ea5301ff1c1a3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7411468ff817884cdb1239e85b5ab785cc65e36d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7411468ff817884cdb1239e85b5ab785cc65e36d", "html_url": "https://github.com/rust-lang/rust/commit/7411468ff817884cdb1239e85b5ab785cc65e36d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7411468ff817884cdb1239e85b5ab785cc65e36d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cb63572d271855a5ccef79a3e10a8015d00f6ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cb63572d271855a5ccef79a3e10a8015d00f6ad", "html_url": "https://github.com/rust-lang/rust/commit/1cb63572d271855a5ccef79a3e10a8015d00f6ad"}], "stats": {"total": 422, "additions": 59, "deletions": 363}, "files": [{"sha": "bafb83740ca853f749a2ec50ba1c4c9fe57cefa8", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -310,7 +310,7 @@ declare_features! (\n     /// Allows `async || body` closures.\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n     /// Allows async functions to be declared, implemented, and used in traits.\n-    (incomplete, async_fn_in_trait, \"1.66.0\", Some(91611), None),\n+    (active, async_fn_in_trait, \"1.66.0\", Some(91611), None),\n     /// Treat `extern \"C\"` function as nounwind.\n     (active, c_unwind, \"1.52.0\", Some(74990), None),\n     /// Allows using C-variadics.\n@@ -496,7 +496,7 @@ declare_features! (\n     /// Allows `repr(simd)` and importing the various simd intrinsics.\n     (active, repr_simd, \"1.4.0\", Some(27731), None),\n     /// Allows return-position `impl Trait` in traits.\n-    (incomplete, return_position_impl_trait_in_trait, \"1.65.0\", Some(91611), None),\n+    (active, return_position_impl_trait_in_trait, \"1.65.0\", Some(91611), None),\n     /// Allows bounding the return type of AFIT/RPITIT.\n     (incomplete, return_type_notation, \"1.70.0\", Some(109417), None),\n     /// Allows `extern \"rust-cold\"`."}, {"sha": "58ce41d1a893386fb033828e170b75e4632ef519", "filename": "tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(return_type_notation, async_fn_in_trait)]\n //~^ WARN the feature `return_type_notation` is incomplete\n-//~| WARN the feature `async_fn_in_trait` is incomplete\n \n trait Trait {\n     async fn method() {}"}, {"sha": "95ef7d82fcab872f229d99a26e66bc6ae8560f67", "filename": "tests/ui/associated-type-bounds/return-type-notation/bad-inputs-and-output.stderr", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbad-inputs-and-output.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,11 +1,11 @@\n error: return type notation uses `()` instead of `(..)` for elided arguments\n-  --> $DIR/bad-inputs-and-output.rs:19:24\n+  --> $DIR/bad-inputs-and-output.rs:18:24\n    |\n LL | fn baz<T: Trait<method(..): Send>>() {}\n    |                        ^^ help: remove the `..`\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/bad-inputs-and-output.rs:11:17\n+  --> $DIR/bad-inputs-and-output.rs:10:17\n    |\n LL | fn foo<T: Trait<method(i32): Send>>() {}\n    |                 ^^^^^^^^^^^^^^^^^\n@@ -14,7 +14,7 @@ LL | fn foo<T: Trait<method(i32): Send>>() {}\n    = help: add `#![feature(associated_type_bounds)]` to the crate attributes to enable\n \n error[E0658]: associated type bounds are unstable\n-  --> $DIR/bad-inputs-and-output.rs:15:17\n+  --> $DIR/bad-inputs-and-output.rs:14:17\n    |\n LL | fn bar<T: Trait<method() -> (): Send>>() {}\n    |                 ^^^^^^^^^^^^^^^^^^^^\n@@ -31,26 +31,18 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bad-inputs-and-output.rs:3:34\n-   |\n-LL | #![feature(return_type_notation, async_fn_in_trait)]\n-   |                                  ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-\n error: argument types not allowed with return type notation\n-  --> $DIR/bad-inputs-and-output.rs:11:23\n+  --> $DIR/bad-inputs-and-output.rs:10:23\n    |\n LL | fn foo<T: Trait<method(i32): Send>>() {}\n    |                       ^^^^^ help: remove the input types: `()`\n \n error: return type not allowed with return type notation\n-  --> $DIR/bad-inputs-and-output.rs:15:25\n+  --> $DIR/bad-inputs-and-output.rs:14:25\n    |\n LL | fn bar<T: Trait<method() -> (): Send>>() {}\n    |                         ^^^^^^ help: remove the return type\n \n-error: aborting due to 5 previous errors; 2 warnings emitted\n+error: aborting due to 5 previous errors; 1 warning emitted\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "edc6a8e4caf0a88f5fca56253a31b15dd750e5ed", "filename": "tests/ui/associated-type-bounds/return-type-notation/basic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -4,7 +4,6 @@\n \n #![feature(return_type_notation, async_fn_in_trait)]\n //~^ WARN the feature `return_type_notation` is incomplete\n-//~| WARN the feature `async_fn_in_trait` is incomplete\n \n trait Foo {\n     async fn method() -> Result<(), ()>;"}, {"sha": "9962f4706b3141cecff982b624e617a8da32b091", "filename": "tests/ui/associated-type-bounds/return-type-notation/basic.with.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.with.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.with.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.with.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -7,13 +7,5 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/basic.rs:5:34\n-   |\n-LL | #![feature(return_type_notation, async_fn_in_trait)]\n-   |                                  ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-\n-warning: 2 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "c2da4f57696f5ab37633f2a6765a3ab1a0d8d555", "filename": "tests/ui/associated-type-bounds/return-type-notation/basic.without.stderr", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.without.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.without.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fbasic.without.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -7,31 +7,23 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/basic.rs:5:34\n-   |\n-LL | #![feature(return_type_notation, async_fn_in_trait)]\n-   |                                  ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-\n error: future cannot be sent between threads safely\n-  --> $DIR/basic.rs:24:13\n+  --> $DIR/basic.rs:23:13\n    |\n LL |     is_send(foo::<T>());\n    |             ^^^^^^^^^^ future returned by `foo` is not `Send`\n    |\n    = help: within `impl Future<Output = Result<(), ()>>`, the trait `Send` is not implemented for `impl Future<Output = Result<(), ()>>`\n note: future is not `Send` as it awaits another future which is not `Send`\n-  --> $DIR/basic.rs:14:5\n+  --> $DIR/basic.rs:13:5\n    |\n LL |     T::method().await?;\n    |     ^^^^^^^^^^^ await occurs here on type `impl Future<Output = Result<(), ()>>`, which is not `Send`\n note: required by a bound in `is_send`\n-  --> $DIR/basic.rs:18:20\n+  --> $DIR/basic.rs:17:20\n    |\n LL | fn is_send(_: impl Send) {}\n    |                    ^^^^ required by this bound in `is_send`\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "6884305d7b37bb8c82679ed696a97c4996ff5135", "filename": "tests/ui/associated-type-bounds/return-type-notation/equality.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(return_type_notation, async_fn_in_trait)]\n //~^ WARN the feature `return_type_notation` is incomplete\n-//~| WARN the feature `async_fn_in_trait` is incomplete\n \n use std::future::Future;\n "}, {"sha": "490bfdc4c3c6034e92fbdbd03614943e05c9a769", "filename": "tests/ui/associated-type-bounds/return-type-notation/equality.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fequality.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -7,19 +7,11 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/equality.rs:3:34\n-   |\n-LL | #![feature(return_type_notation, async_fn_in_trait)]\n-   |                                  ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-\n error: return type notation is not allowed to use type equality\n-  --> $DIR/equality.rs:13:18\n+  --> $DIR/equality.rs:12:18\n    |\n LL | fn test<T: Trait<method() = Box<dyn Future<Output = ()>>>>() {}\n    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "b84b5a717b72d8c0df67278b9f34b6dadef7be20", "filename": "tests/ui/associated-type-bounds/return-type-notation/missing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -2,7 +2,6 @@\n \n #![feature(return_type_notation, async_fn_in_trait)]\n //~^ WARN the feature `return_type_notation` is incomplete\n-//~| WARN the feature `async_fn_in_trait` is incomplete\n \n trait Trait {\n     async fn method() {}"}, {"sha": "954d9f74767a7f3f6c4ebe9a009dc0e37c8ee871", "filename": "tests/ui/associated-type-bounds/return-type-notation/missing.stderr", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-type-bounds%2Freturn-type-notation%2Fmissing.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -7,19 +7,11 @@ LL | #![feature(return_type_notation, async_fn_in_trait)]\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/missing.rs:3:34\n-   |\n-LL | #![feature(return_type_notation, async_fn_in_trait)]\n-   |                                  ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-\n error: cannot find associated function `methid` in trait `Trait`\n-  --> $DIR/missing.rs:11:17\n+  --> $DIR/missing.rs:10:17\n    |\n LL | fn bar<T: Trait<methid(): Send>>() {}\n    |                 ^^^^^^^^^^^^^^\n \n-error: aborting due to previous error; 2 warnings emitted\n+error: aborting due to previous error; 1 warning emitted\n "}, {"sha": "2142ee232ca5c54935facab007d87a5ec2fea447", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.current.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.current.stderr?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/async-default-fn-overridden.rs:6:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "2142ee232ca5c54935facab007d87a5ec2fea447", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.next.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.next.stderr?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/async-default-fn-overridden.rs:6:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "99c3ba6a3c20e869f67dca17980e5fa710c34bb2", "filename": "tests/ui/async-await/in-trait/async-default-fn-overridden.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fasync-default-fn-overridden.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -4,7 +4,6 @@\n // revisions: current next\n \n #![feature(async_fn_in_trait)]\n-//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use\n \n use std::future::Future;\n "}, {"sha": "ae590fb057f3b81d93185018d76633d632a385b7", "filename": "tests/ui/async-await/in-trait/bad-signatures.current.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.current.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,26 +1,17 @@\n error: expected identifier, found keyword `self`\n-  --> $DIR/bad-signatures.rs:9:23\n+  --> $DIR/bad-signatures.rs:8:23\n    |\n LL |     async fn bar(&abc self);\n    |                       ^^^^ expected identifier, found keyword\n \n error: expected one of `:`, `@`, or `|`, found keyword `self`\n-  --> $DIR/bad-signatures.rs:9:23\n+  --> $DIR/bad-signatures.rs:8:23\n    |\n LL |     async fn bar(&abc self);\n    |                  -----^^^^\n    |                  |    |\n    |                  |    expected one of `:`, `@`, or `|`\n    |                  help: declare the type after the parameter binding: `<identifier>: <type>`\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bad-signatures.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n "}, {"sha": "ae590fb057f3b81d93185018d76633d632a385b7", "filename": "tests/ui/async-await/in-trait/bad-signatures.next.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.next.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,26 +1,17 @@\n error: expected identifier, found keyword `self`\n-  --> $DIR/bad-signatures.rs:9:23\n+  --> $DIR/bad-signatures.rs:8:23\n    |\n LL |     async fn bar(&abc self);\n    |                       ^^^^ expected identifier, found keyword\n \n error: expected one of `:`, `@`, or `|`, found keyword `self`\n-  --> $DIR/bad-signatures.rs:9:23\n+  --> $DIR/bad-signatures.rs:8:23\n    |\n LL |     async fn bar(&abc self);\n    |                  -----^^^^\n    |                  |    |\n    |                  |    expected one of `:`, `@`, or `|`\n    |                  help: declare the type after the parameter binding: `<identifier>: <type>`\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/bad-signatures.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n "}, {"sha": "4baddd8ccb8355508409baad2c324e18d54882cd", "filename": "tests/ui/async-await/in-trait/bad-signatures.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fbad-signatures.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -3,7 +3,6 @@\n // revisions: current next\n \n #![feature(async_fn_in_trait)]\n-//~^ WARN the feature `async_fn_in_trait` is incomplete\n \n trait MyTrait {\n     async fn bar(&abc self);"}, {"sha": "eec5ab065397cf09f80e3d340f76edf4a6f3ee0b", "filename": "tests/ui/async-await/in-trait/dont-project-to-specializable-projection.current.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.current.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,12 +1,3 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/dont-project-to-specializable-projection.rs:6:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error: async associated function in trait cannot be specialized\n   --> $DIR/dont-project-to-specializable-projection.rs:16:5\n    |\n@@ -15,5 +6,5 @@ LL |     default async fn foo(_: T) -> &'static str {\n    |\n    = note: specialization behaves in inconsistent and surprising ways with `#![feature(async_fn_in_trait)]`, and for now is disallowed\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "25a7f3bb56a50103be850ac2e3175a5b949b49d7", "filename": "tests/ui/async-await/in-trait/dont-project-to-specializable-projection.next.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fdont-project-to-specializable-projection.next.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,12 +1,3 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/dont-project-to-specializable-projection.rs:6:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0053]: method `foo` has an incompatible type for trait\n   --> $DIR/dont-project-to-specializable-projection.rs:16:35\n    |\n@@ -29,6 +20,6 @@ LL |     default async fn foo(_: T) -> &'static str {\n    |\n    = note: specialization behaves in inconsistent and surprising ways with `#![feature(async_fn_in_trait)]`, and for now is disallowed\n \n-error: aborting due to 2 previous errors; 1 warning emitted\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0053`."}, {"sha": "69e7c65ee3e70372ef272421a3b09888bc26a497", "filename": "tests/ui/async-await/in-trait/lifetime-mismatch.current.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.current.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,21 +1,12 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lifetime-mismatch.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0195]: lifetime parameters or bounds on method `foo` do not match the trait declaration\n-  --> $DIR/lifetime-mismatch.rs:14:17\n+  --> $DIR/lifetime-mismatch.rs:13:17\n    |\n LL |     async fn foo<'a>(&self);\n    |                 ---- lifetimes in impl do not match this method in trait\n ...\n LL |     async fn foo(&self) {}\n    |                 ^ lifetimes do not match method in trait\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0195`."}, {"sha": "69e7c65ee3e70372ef272421a3b09888bc26a497", "filename": "tests/ui/async-await/in-trait/lifetime-mismatch.next.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.next.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,21 +1,12 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/lifetime-mismatch.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0195]: lifetime parameters or bounds on method `foo` do not match the trait declaration\n-  --> $DIR/lifetime-mismatch.rs:14:17\n+  --> $DIR/lifetime-mismatch.rs:13:17\n    |\n LL |     async fn foo<'a>(&self);\n    |                 ---- lifetimes in impl do not match this method in trait\n ...\n LL |     async fn foo(&self) {}\n    |                 ^ lifetimes do not match method in trait\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0195`."}, {"sha": "46183f72bce6878249454bd62c32dff189b198d6", "filename": "tests/ui/async-await/in-trait/lifetime-mismatch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Flifetime-mismatch.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -3,7 +3,6 @@\n // revisions: current next\n \n #![feature(async_fn_in_trait)]\n-//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n \n trait MyTrait {\n     async fn foo<'a>(&self);"}, {"sha": "9aa37f7437e4ece30bc88c69d77eea19d0f28d8d", "filename": "tests/ui/async-await/in-trait/missing-send-bound.current.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.current.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,29 +1,20 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/missing-send-bound.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error: future cannot be sent between threads safely\n-  --> $DIR/missing-send-bound.rs:17:20\n+  --> $DIR/missing-send-bound.rs:16:20\n    |\n LL |     assert_is_send(test::<T>());\n    |                    ^^^^^^^^^^^ future returned by `test` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `impl Future<Output = ()>`\n note: future is not `Send` as it awaits another future which is not `Send`\n-  --> $DIR/missing-send-bound.rs:13:5\n+  --> $DIR/missing-send-bound.rs:12:5\n    |\n LL |     T::bar().await;\n    |     ^^^^^^^^ await occurs here on type `impl Future<Output = ()>`, which is not `Send`\n note: required by a bound in `assert_is_send`\n-  --> $DIR/missing-send-bound.rs:21:27\n+  --> $DIR/missing-send-bound.rs:20:27\n    |\n LL | fn assert_is_send(_: impl Send) {}\n    |                           ^^^^ required by this bound in `assert_is_send`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "9aa37f7437e4ece30bc88c69d77eea19d0f28d8d", "filename": "tests/ui/async-await/in-trait/missing-send-bound.next.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.next.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,29 +1,20 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/missing-send-bound.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error: future cannot be sent between threads safely\n-  --> $DIR/missing-send-bound.rs:17:20\n+  --> $DIR/missing-send-bound.rs:16:20\n    |\n LL |     assert_is_send(test::<T>());\n    |                    ^^^^^^^^^^^ future returned by `test` is not `Send`\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `impl Future<Output = ()>`\n note: future is not `Send` as it awaits another future which is not `Send`\n-  --> $DIR/missing-send-bound.rs:13:5\n+  --> $DIR/missing-send-bound.rs:12:5\n    |\n LL |     T::bar().await;\n    |     ^^^^^^^^ await occurs here on type `impl Future<Output = ()>`, which is not `Send`\n note: required by a bound in `assert_is_send`\n-  --> $DIR/missing-send-bound.rs:21:27\n+  --> $DIR/missing-send-bound.rs:20:27\n    |\n LL | fn assert_is_send(_: impl Send) {}\n    |                           ^^^^ required by this bound in `assert_is_send`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n "}, {"sha": "b602865cbb12d110ff67239b577df6c47e300073", "filename": "tests/ui/async-await/in-trait/missing-send-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fmissing-send-bound.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -3,7 +3,6 @@\n // revisions: current next\n \n #![feature(async_fn_in_trait)]\n-//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n \n trait Foo {\n     async fn bar();"}, {"sha": "7f7ec39142cdf5f40e186412ea86f1f8d3d54593", "filename": "tests/ui/async-await/in-trait/object-safety.current.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.current.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,27 +1,18 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/object-safety.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety.rs:13:12\n+  --> $DIR/object-safety.rs:12:12\n    |\n LL |     let x: &dyn Foo = todo!();\n    |            ^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:9:14\n+  --> $DIR/object-safety.rs:8:14\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     async fn foo(&self);\n    |              ^^^ ...because method `foo` is `async`\n    = help: consider moving `foo` to another trait\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0038`."}, {"sha": "7f7ec39142cdf5f40e186412ea86f1f8d3d54593", "filename": "tests/ui/async-await/in-trait/object-safety.next.stderr", "status": "modified", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.next.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,27 +1,18 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/object-safety.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0038]: the trait `Foo` cannot be made into an object\n-  --> $DIR/object-safety.rs:13:12\n+  --> $DIR/object-safety.rs:12:12\n    |\n LL |     let x: &dyn Foo = todo!();\n    |            ^^^^^^^^ `Foo` cannot be made into an object\n    |\n note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n-  --> $DIR/object-safety.rs:9:14\n+  --> $DIR/object-safety.rs:8:14\n    |\n LL | trait Foo {\n    |       --- this trait cannot be made into an object...\n LL |     async fn foo(&self);\n    |              ^^^ ...because method `foo` is `async`\n    = help: consider moving `foo` to another trait\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0038`."}, {"sha": "4edad1512e93ae65969e95266914e559c9edcc03", "filename": "tests/ui/async-await/in-trait/object-safety.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Fobject-safety.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -3,7 +3,6 @@\n // revisions: current next\n \n #![feature(async_fn_in_trait)]\n-//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n \n trait Foo {\n     async fn foo(&self);"}, {"sha": "6a107d7beb8fd67bc74267875314d579cf14f948", "filename": "tests/ui/async-await/in-trait/return-type-suggestion.current.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.current.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/return-type-suggestion.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0308]: mismatched types\n-  --> $DIR/return-type-suggestion.rs:10:9\n+  --> $DIR/return-type-suggestion.rs:9:9\n    |\n LL |         Ok(())\n    |         ^^^^^^- help: consider using a semicolon here: `;`\n@@ -18,6 +9,6 @@ LL |         Ok(())\n    = note: expected unit type `()`\n                    found enum `Result<(), _>`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "6a107d7beb8fd67bc74267875314d579cf14f948", "filename": "tests/ui/async-await/in-trait/return-type-suggestion.next.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.next.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/return-type-suggestion.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0308]: mismatched types\n-  --> $DIR/return-type-suggestion.rs:10:9\n+  --> $DIR/return-type-suggestion.rs:9:9\n    |\n LL |         Ok(())\n    |         ^^^^^^- help: consider using a semicolon here: `;`\n@@ -18,6 +9,6 @@ LL |         Ok(())\n    = note: expected unit type `()`\n                    found enum `Result<(), _>`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "d63bccefa9fdc03174c4e08974e4bd24b787aed7", "filename": "tests/ui/async-await/in-trait/return-type-suggestion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fin-trait%2Freturn-type-suggestion.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -3,7 +3,6 @@\n // revisions: current next\n \n #![feature(async_fn_in_trait)]\n-//~^ WARN the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n \n trait A {\n     async fn e() {"}, {"sha": "33e22dec3f7b23feb0c4c8461e610a08821d0af2", "filename": "tests/ui/async-await/return-type-notation/issue-110963-early.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-early.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-early.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-early.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -7,14 +7,6 @@ LL | #![feature(return_type_notation)]\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-110963-early.rs:5:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-\n error: higher-ranked lifetime error\n   --> $DIR/issue-110963-early.rs:15:5\n    |\n@@ -41,5 +33,5 @@ LL | |     });\n    |\n    = note: could not prove `[async block@$DIR/issue-110963-early.rs:15:11: 20:6]: Send`\n \n-error: aborting due to 2 previous errors; 2 warnings emitted\n+error: aborting due to 2 previous errors; 1 warning emitted\n "}, {"sha": "17b5d775d4479166d76650d952201bc3f6854cbd", "filename": "tests/ui/async-await/return-type-notation/issue-110963-late.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -4,7 +4,6 @@\n #![feature(return_type_notation)]\n //~^ WARN the feature `return_type_notation` is incomplete\n #![feature(async_fn_in_trait)]\n-//~^ WARN the feature `async_fn_in_trait` is incomplete\n \n trait HealthCheck {\n     async fn check(&mut self) -> bool;"}, {"sha": "9c6966537a73a19bba68b2655b8d64bd7bae49d5", "filename": "tests/ui/async-await/return-type-notation/issue-110963-late.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Freturn-type-notation%2Fissue-110963-late.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -7,13 +7,5 @@ LL | #![feature(return_type_notation)]\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = note: `#[warn(incomplete_features)]` on by default\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-110963-late.rs:6:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-\n-warning: 2 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "1bdb2574eadc301b46ae37512663b5ea0445d476", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.cfg.stderr", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.cfg.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,36 +1,27 @@\n error[E0658]: return type notation is experimental\n-  --> $DIR/feature-gate-return_type_notation.rs:15:17\n+  --> $DIR/feature-gate-return_type_notation.rs:14:17\n    |\n LL | fn foo<T: Trait<m(): Send>>() {}\n    |                 ^^^^^^^^^\n    |\n    = note: see issue #109417 <https://github.com/rust-lang/rust/issues/109417> for more information\n    = help: add `#![feature(return_type_notation)]` to the crate attributes to enable\n \n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/feature-gate-return_type_notation.rs:7:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error: parenthesized generic arguments cannot be used in associated type constraints\n-  --> $DIR/feature-gate-return_type_notation.rs:15:17\n+  --> $DIR/feature-gate-return_type_notation.rs:14:17\n    |\n LL | fn foo<T: Trait<m(): Send>>() {}\n    |                 ^--\n    |                  |\n    |                  help: remove these parentheses\n \n error[E0220]: associated type `m` not found for `Trait`\n-  --> $DIR/feature-gate-return_type_notation.rs:15:17\n+  --> $DIR/feature-gate-return_type_notation.rs:14:17\n    |\n LL | fn foo<T: Trait<m(): Send>>() {}\n    |                 ^ associated type `m` not found\n \n-error: aborting due to 3 previous errors; 1 warning emitted\n+error: aborting due to 3 previous errors\n \n Some errors have detailed explanations: E0220, E0658.\n For more information about an error, try `rustc --explain E0220`."}, {"sha": "dd6ebb61038622a6861828ae71f3f0b25152e68d", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.no.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.no.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,14 +1,5 @@\n-warning: the feature `async_fn_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/feature-gate-return_type_notation.rs:7:12\n-   |\n-LL | #![feature(async_fn_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n warning: return type notation is experimental\n-  --> $DIR/feature-gate-return_type_notation.rs:15:17\n+  --> $DIR/feature-gate-return_type_notation.rs:14:17\n    |\n LL | fn foo<T: Trait<m(): Send>>() {}\n    |                 ^^^^^^^^^\n@@ -18,5 +9,5 @@ LL | fn foo<T: Trait<m(): Send>>() {}\n    = warning: unstable syntax can change at any point in the future, causing a hard error!\n    = note: for more information, see issue #65860 <https://github.com/rust-lang/rust/issues/65860>\n \n-warning: 2 warnings emitted\n+warning: 1 warning emitted\n "}, {"sha": "d9bcb65feba9a3e0ec0378371466957828b5e3d3", "filename": "tests/ui/feature-gates/feature-gate-return_type_notation.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-return_type_notation.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -5,7 +5,6 @@\n // Since we're not adding new syntax, `cfg`'d out RTN must pass.\n \n #![feature(async_fn_in_trait)]\n-//~^ WARN the feature `async_fn_in_trait` is incomplete\n \n trait Trait {\n     async fn m();"}, {"sha": "05c025cc169ffb8c9273fa4646fa307b2e19265c", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.current.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.current.stderr?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/box-coerce-span-in-default.rs:5:12\n-   |\n-LL | #![feature(return_position_impl_trait_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "05c025cc169ffb8c9273fa4646fa307b2e19265c", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.next.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.next.stderr?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/box-coerce-span-in-default.rs:5:12\n-   |\n-LL | #![feature(return_position_impl_trait_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "f5290a5f4af8f881cfe0d3ff9d5a317946c9400d", "filename": "tests/ui/impl-trait/in-trait/box-coerce-span-in-default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fbox-coerce-span-in-default.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -3,7 +3,6 @@\n // revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n-//~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n \n struct TestA {}\n struct TestB {}"}, {"sha": "a0c0589b9a1c04fb7a7fbd3f4520697cb942ce0c", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.current.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.current.stderr?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/default-method-binder-shifting.rs:5:12\n-   |\n-LL | #![feature(return_position_impl_trait_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "a0c0589b9a1c04fb7a7fbd3f4520697cb942ce0c", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.next.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.next.stderr?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/default-method-binder-shifting.rs:5:12\n-   |\n-LL | #![feature(return_position_impl_trait_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "187039f449c8d3134ec7d91ad57966fc6862ef0c", "filename": "tests/ui/impl-trait/in-trait/default-method-binder-shifting.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-binder-shifting.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -3,7 +3,6 @@\n // revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n-//~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n \n trait Trait {\n     type Type;"}, {"sha": "7bb79911f56f81168e24eae0f7d9ab3387b7887d", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.current.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.current.stderr?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/default-method-constraint.rs:7:12\n-   |\n-LL | #![feature(return_position_impl_trait_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "7bb79911f56f81168e24eae0f7d9ab3387b7887d", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.next.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cb63572d271855a5ccef79a3e10a8015d00f6ad/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.next.stderr?ref=1cb63572d271855a5ccef79a3e10a8015d00f6ad", "patch": "@@ -1,11 +0,0 @@\n-warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/default-method-constraint.rs:7:12\n-   |\n-LL | #![feature(return_position_impl_trait_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "4f0bf2e7dfe16fc94a9dd53a4db8a9bbded3e623", "filename": "tests/ui/impl-trait/in-trait/default-method-constraint.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdefault-method-constraint.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -5,7 +5,6 @@\n // This didn't work in the previous default RPITIT method hack attempt\n \n #![feature(return_position_impl_trait_in_trait)]\n-//~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n \n trait Foo {\n     fn bar(x: bool) -> impl Sized {"}, {"sha": "d4d0124a6599c7282ce22e6f1821e0e701643393", "filename": "tests/ui/impl-trait/in-trait/dont-project-to-rpitit-with-no-value.current.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.current.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,21 +1,12 @@\n-warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/dont-project-to-rpitit-with-no-value.rs:4:12\n-   |\n-LL | #![feature(return_position_impl_trait_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0046]: not all trait items implemented, missing: `foo`\n-  --> $DIR/dont-project-to-rpitit-with-no-value.rs:12:1\n+  --> $DIR/dont-project-to-rpitit-with-no-value.rs:11:1\n    |\n LL |     fn foo(&self) -> impl Sized;\n    |     ---------------------------- `foo` from trait\n ...\n LL | impl MyTrait for i32 {\n    | ^^^^^^^^^^^^^^^^^^^^ missing `foo` in implementation\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0046`."}, {"sha": "d4d0124a6599c7282ce22e6f1821e0e701643393", "filename": "tests/ui/impl-trait/in-trait/dont-project-to-rpitit-with-no-value.next.stderr", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.next.stderr?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -1,21 +1,12 @@\n-warning: the feature `return_position_impl_trait_in_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/dont-project-to-rpitit-with-no-value.rs:4:12\n-   |\n-LL | #![feature(return_position_impl_trait_in_trait)]\n-   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: see issue #91611 <https://github.com/rust-lang/rust/issues/91611> for more information\n-   = note: `#[warn(incomplete_features)]` on by default\n-\n error[E0046]: not all trait items implemented, missing: `foo`\n-  --> $DIR/dont-project-to-rpitit-with-no-value.rs:12:1\n+  --> $DIR/dont-project-to-rpitit-with-no-value.rs:11:1\n    |\n LL |     fn foo(&self) -> impl Sized;\n    |     ---------------------------- `foo` from trait\n ...\n LL | impl MyTrait for i32 {\n    | ^^^^^^^^^^^^^^^^^^^^ missing `foo` in implementation\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0046`."}, {"sha": "4d50b8c927870feb81d892306e1885bd5fb5e2cc", "filename": "tests/ui/impl-trait/in-trait/dont-project-to-rpitit-with-no-value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7411468ff817884cdb1239e85b5ab785cc65e36d/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fin-trait%2Fdont-project-to-rpitit-with-no-value.rs?ref=7411468ff817884cdb1239e85b5ab785cc65e36d", "patch": "@@ -2,7 +2,6 @@\n // revisions: current next\n \n #![feature(return_position_impl_trait_in_trait)]\n-//~^ WARN the feature `return_position_impl_trait_in_trait` is incomplete\n \n trait MyTrait {\n     fn foo(&self) -> impl Sized;"}]}