{"sha": "0c88dd663a7095ccc405a2036047a90981137a51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjODhkZDY2M2E3MDk1Y2NjNDA1YTIwMzYwNDdhOTA5ODExMzdhNTE=", "commit": {"author": {"name": "Keno Fischer", "email": "keno@alumni.harvard.edu", "date": "2020-06-24T02:42:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-24T02:42:35Z"}, "message": "Update Box::from_raw example to generalize better\n\nI know very little about rust, so I saw this example and tried to generalize it by writing,\r\n```\r\n    let layout = Layout::new::<T>();\r\n    let new_obj = unsafe {\r\n        let ptr = alloc(layout) as *mut T;\r\n        *ptr = obj;\r\n        Box::from_raw(ptr)\r\n    };\r\n```\r\nfor some more complicated `T`, which ended up crashing with SIGSEGV,\r\nbecause it tried to `drop_in_place` the previous object in `ptr` which is\r\nof course garbage. I also added a comment that explains why `.write`\r\nis used, but I think adding that comment is optional and may be too verbose\r\nhere. I do however think that changing this example is a good idea to\r\nsuggest the correct generalization. `.write` is also used in most of the rest\r\nof the documentation here, even if the example is `i32`, so it would additionally\r\nbe more consistent.", "tree": {"sha": "c7537df9ffecabee18820ad7ac8571fa1c434b02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7537df9ffecabee18820ad7ac8571fa1c434b02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c88dd663a7095ccc405a2036047a90981137a51", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe8r2bCRBK7hj4Ov3rIwAAdHIIAKuRfkmmSGOoC0OzQY8RYXkP\nu9emlqt05xpIVCfGWvqskXxBrIGmYL1zTNls1GOuT9yGT2LSbi5/XUHJjoPN3NHJ\n1ga50iYgEyBMF6dTnzCaEI+iFob6z0E2xI2cN4FycktASR3U2EX4mfKNe1bTRMly\nBPczJMAgnM8IsjByF+xsoOQecEp9fM1srl3Qq2WHyxcFkJ1WFwoveIhnYh98nS5N\n2M9RmVxSz2oYmEUhUc5kHtVUHXDfdqJhJJ9Fms6RJar2I9dGLq6WhbJbLxAkb+bE\nxd7nWGJ6zAvISMOzRtpOxjF2ywf8yJbgYbi8riIU9lcX8e84Fg2aQjgOF/m1yjs=\n=sFL7\n-----END PGP SIGNATURE-----\n", "payload": "tree c7537df9ffecabee18820ad7ac8571fa1c434b02\nparent 0c04344d86f9598f20d9ec86fe87ea2a5d6ff8e6\nauthor Keno Fischer <keno@alumni.harvard.edu> 1592966555 -0400\ncommitter GitHub <noreply@github.com> 1592966555 -0400\n\nUpdate Box::from_raw example to generalize better\n\nI know very little about rust, so I saw this example and tried to generalize it by writing,\r\n```\r\n    let layout = Layout::new::<T>();\r\n    let new_obj = unsafe {\r\n        let ptr = alloc(layout) as *mut T;\r\n        *ptr = obj;\r\n        Box::from_raw(ptr)\r\n    };\r\n```\r\nfor some more complicated `T`, which ended up crashing with SIGSEGV,\r\nbecause it tried to `drop_in_place` the previous object in `ptr` which is\r\nof course garbage. I also added a comment that explains why `.write`\r\nis used, but I think adding that comment is optional and may be too verbose\r\nhere. I do however think that changing this example is a good idea to\r\nsuggest the correct generalization. `.write` is also used in most of the rest\r\nof the documentation here, even if the example is `i32`, so it would additionally\r\nbe more consistent."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c88dd663a7095ccc405a2036047a90981137a51", "html_url": "https://github.com/rust-lang/rust/commit/0c88dd663a7095ccc405a2036047a90981137a51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c88dd663a7095ccc405a2036047a90981137a51/comments", "author": {"login": "Keno", "id": 1291671, "node_id": "MDQ6VXNlcjEyOTE2NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1291671?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Keno", "html_url": "https://github.com/Keno", "followers_url": "https://api.github.com/users/Keno/followers", "following_url": "https://api.github.com/users/Keno/following{/other_user}", "gists_url": "https://api.github.com/users/Keno/gists{/gist_id}", "starred_url": "https://api.github.com/users/Keno/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Keno/subscriptions", "organizations_url": "https://api.github.com/users/Keno/orgs", "repos_url": "https://api.github.com/users/Keno/repos", "events_url": "https://api.github.com/users/Keno/events{/privacy}", "received_events_url": "https://api.github.com/users/Keno/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c04344d86f9598f20d9ec86fe87ea2a5d6ff8e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c04344d86f9598f20d9ec86fe87ea2a5d6ff8e6", "html_url": "https://github.com/rust-lang/rust/commit/0c04344d86f9598f20d9ec86fe87ea2a5d6ff8e6"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "02634825c2108d766ae6f811c07b19a23dab240c", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0c88dd663a7095ccc405a2036047a90981137a51/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c88dd663a7095ccc405a2036047a90981137a51/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=0c88dd663a7095ccc405a2036047a90981137a51", "patch": "@@ -382,7 +382,10 @@ impl<T: ?Sized> Box<T> {\n     ///\n     /// unsafe {\n     ///     let ptr = alloc(Layout::new::<i32>()) as *mut i32;\n-    ///     *ptr = 5;\n+    ///     // In general .write is required to avoid attempting to destruct\n+    ///     // the (uninitialized) previous contents of `ptr`, though for this\n+    ///     // simple example `*ptr = 5` would have worked as well.\n+    ///     ptr.write(5);\n     ///     let x = Box::from_raw(ptr);\n     /// }\n     /// ```"}]}