{"sha": "24bdce4bbf55dd7f88492fd3a106bca2efdaa1a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YmRjZTRiYmY1NWRkN2Y4ODQ5MmZkM2ExMDZiY2EyZWZkYWExYTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-19T15:30:45Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-22T01:14:26Z"}, "message": "some comments and nits", "tree": {"sha": "910d07c009ed17728c23e9181f2a71f59b422883", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/910d07c009ed17728c23e9181f2a71f59b422883"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24bdce4bbf55dd7f88492fd3a106bca2efdaa1a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24bdce4bbf55dd7f88492fd3a106bca2efdaa1a6", "html_url": "https://github.com/rust-lang/rust/commit/24bdce4bbf55dd7f88492fd3a106bca2efdaa1a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24bdce4bbf55dd7f88492fd3a106bca2efdaa1a6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64d33d892ad3bda256e174e97e51f603896b6c66", "url": "https://api.github.com/repos/rust-lang/rust/commits/64d33d892ad3bda256e174e97e51f603896b6c66", "html_url": "https://github.com/rust-lang/rust/commit/64d33d892ad3bda256e174e97e51f603896b6c66"}], "stats": {"total": 80, "additions": 45, "deletions": 35}, "files": [{"sha": "864d666d24fd6c4c9e2083e88be81c8b282f3196", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 43, "deletions": 35, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/24bdce4bbf55dd7f88492fd3a106bca2efdaa1a6/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24bdce4bbf55dd7f88492fd3a106bca2efdaa1a6/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=24bdce4bbf55dd7f88492fd3a106bca2efdaa1a6", "patch": "@@ -17,9 +17,9 @@ use self::SelectionCandidate::*;\n use self::BuiltinBoundConditions::*;\n use self::EvaluationResult::*;\n \n-use super::{DerivedObligationCause};\n-use super::{project};\n-use super::project::Normalized;\n+use super::DerivedObligationCause;\n+use super::project;\n+use super::project::{normalize_with_depth, Normalized};\n use super::{PredicateObligation, TraitObligation, ObligationCause};\n use super::{ObligationCauseCode, BuiltinDerivedObligation, ImplDerivedObligation};\n use super::{SelectionError, Unimplemented, Overflow, OutputTypeParameterMismatch};\n@@ -1620,7 +1620,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n-    fn constituent_types(&self, t: Ty<'tcx>) -> Vec<Ty<'tcx>> {\n+    fn constituent_ty_obligations(&self, t: Ty<'tcx>) -> Vec<Ty<'tcx>> {\n         match t.sty {\n             ty::ty_uint(_) |\n             ty::ty_int(_) |\n@@ -1870,6 +1870,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         VtableBuiltinData { nested: obligations }\n     }\n \n+    /// This handles the case where a `impl Foo for ..` impl is being used.\n+    /// The idea is that the impl applies to `X : Foo` if the following conditions are met:\n+    ///\n+    /// 1. For each constituent type `Y` in `X`, `Y : Foo` holds\n+    /// 2. For each where-clause `C` declared on `Foo`, `[Self => X] C` holds.\n     fn confirm_default_impl_candidate(&mut self,\n                                       obligation: &TraitObligation<'tcx>,\n                                       impl_def_id: ast::DefId)\n@@ -1881,10 +1886,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                impl_def_id.repr(self.tcx()));\n \n         let self_ty = self.infcx.shallow_resolve(obligation.predicate.0.self_ty());\n-        let types = self.constituent_types(self_ty);\n+        let types = self.constituent_ty_obligations(self_ty);\n         Ok(self.vtable_default_impl(obligation, impl_def_id, types))\n     }\n \n+    /// See `confirm_default_impl_candidate`\n     fn vtable_default_impl(&mut self,\n                            obligation: &TraitObligation<'tcx>,\n                            trait_def_id: ast::DefId,\n@@ -1930,12 +1936,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 self.infcx().skolemize_late_bound_regions(&obligation.predicate, snapshot);\n \n             let substs = obligation.predicate.to_poly_trait_ref().substs();\n-            let trait_obligations = self.impl_obligations(obligation.cause.clone(),\n-                                                          obligation.recursion_depth + 1,\n-                                                          trait_def_id,\n-                                                          substs,\n-                                                          skol_map,\n-                                                          snapshot);\n+            let trait_obligations = self.impl_or_trait_obligations(obligation.cause.clone(),\n+                                                                   obligation.recursion_depth + 1,\n+                                                                   trait_def_id,\n+                                                                   substs,\n+                                                                   skol_map,\n+                                                                   snapshot);\n             obligations.push_all(trait_obligations.as_slice());\n             Ok(())\n         });\n@@ -1988,12 +1994,12 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                skol_map.repr(self.tcx()));\n \n         let mut impl_obligations =\n-            self.impl_obligations(cause,\n-                                 recursion_depth,\n-                                 impl_def_id,\n-                                 &substs.value,\n-                                 skol_map,\n-                                 snapshot);\n+            self.impl_or_trait_obligations(cause,\n+                                           recursion_depth,\n+                                           impl_def_id,\n+                                           &substs.value,\n+                                           skol_map,\n+                                           snapshot);\n \n         debug!(\"vtable_impl: impl_def_id={} impl_obligations={}\",\n                impl_def_id.repr(self.tcx()),\n@@ -2413,28 +2419,30 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         ty::Binder(trait_ref)\n     }\n \n-    fn impl_obligations(&mut self,\n-                        cause: ObligationCause<'tcx>,\n-                        recursion_depth: uint,\n-                        impl_def_id: ast::DefId,\n-                        impl_substs: &Substs<'tcx>,\n-                        skol_map: infer::SkolemizationMap,\n-                        snapshot: &infer::CombinedSnapshot)\n-                        -> VecPerParamSpace<PredicateObligation<'tcx>>\n+    /// Returns the obligations that are implied by instantiating an\n+    /// impl or trait. The obligations are substituted and fully\n+    /// normalized. This is used when confirming an impl or default\n+    /// impl.\n+    fn impl_or_trait_obligations(&mut self,\n+                                 cause: ObligationCause<'tcx>,\n+                                 recursion_depth: uint,\n+                                 def_id: ast::DefId, // of impl or trait\n+                                 substs: &Substs<'tcx>, // for impl or trait\n+                                 skol_map: infer::SkolemizationMap,\n+                                 snapshot: &infer::CombinedSnapshot)\n+                                 -> VecPerParamSpace<PredicateObligation<'tcx>>\n     {\n-        let impl_bounds = ty::lookup_predicates(self.tcx(), impl_def_id);\n-        let bounds = impl_bounds.instantiate(self.tcx(), impl_substs);\n-        let normalized_bounds =\n-            project::normalize_with_depth(self, cause.clone(), recursion_depth, &bounds);\n-        let normalized_bounds =\n-            self.infcx().plug_leaks(skol_map, snapshot, &normalized_bounds);\n-        let mut impl_obligations =\n+        let predicates = ty::lookup_predicates(self.tcx(), def_id);\n+        let predicates = predicates.instantiate(self.tcx(), substs);\n+        let predicates = normalize_with_depth(self, cause.clone(), recursion_depth, &predicates);\n+        let predicates = self.infcx().plug_leaks(skol_map, snapshot, &predicates);\n+        let mut obligations =\n             util::predicates_for_generics(self.tcx(),\n                                           cause,\n                                           recursion_depth,\n-                                          &normalized_bounds.value);\n-        impl_obligations.extend(TypeSpace, normalized_bounds.obligations.into_iter());\n-        impl_obligations\n+                                          &predicates.value);\n+        obligations.extend(TypeSpace, predicates.obligations.into_iter());\n+        obligations\n     }\n \n     #[allow(unused_comparisons)]"}, {"sha": "4f572e87639f051208ba7efa78d14a961e8e35ab", "filename": "src/test/compile-fail/typeck-default-trait-impl-trait-where-clause.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24bdce4bbf55dd7f88492fd3a106bca2efdaa1a6/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24bdce4bbf55dd7f88492fd3a106bca2efdaa1a6/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck-default-trait-impl-trait-where-clause.rs?ref=24bdce4bbf55dd7f88492fd3a106bca2efdaa1a6", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n+\n // Test that when a `..` impl applies, we also check that any\n // supertrait conditions are met.\n "}]}