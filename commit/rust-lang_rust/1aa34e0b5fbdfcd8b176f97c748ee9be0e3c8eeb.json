{"sha": "1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhYTM0ZTBiNWZiZGZjZDhiMTc2Zjk3Yzc0OGVlOWJlMGUzYzhlZWI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-16T10:09:23Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-05-27T00:01:04Z"}, "message": "Strip unconfigured items during macro expansion", "tree": {"sha": "f336b376590e21974789201b6c03b07da286ede6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f336b376590e21974789201b6c03b07da286ede6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb", "html_url": "https://github.com/rust-lang/rust/commit/1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25c733360b1cddfc0b129680a9220d1d5097483d", "url": "https://api.github.com/repos/rust-lang/rust/commits/25c733360b1cddfc0b129680a9220d1d5097483d", "html_url": "https://github.com/rust-lang/rust/commit/25c733360b1cddfc0b129680a9220d1d5097483d"}], "stats": {"total": 62, "additions": 45, "deletions": 17}, "files": [{"sha": "48b86d862f5757ae24cf02286037ebcd65b8ba35", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb", "patch": "@@ -720,16 +720,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         ret\n     });\n \n-    // JBC: make CFG processing part of expansion to avoid this problem:\n-\n-    // strip again, in case expansion added anything with a #[cfg].\n     krate = sess.track_errors(|| {\n-        let krate = time(time_passes, \"configuration 2\", || {\n-            syntax::config::strip_unconfigured_items(sess.diagnostic(),\n-                                                     krate,\n-                                                     &mut feature_gated_cfgs)\n-        });\n-\n         time(time_passes, \"gated configuration checking\", || {\n             let features = sess.features.borrow();\n             feature_gated_cfgs.sort();"}, {"sha": "77f20934d805b33bc59cbbc81182cbb14643f11f", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb", "patch": "@@ -38,6 +38,16 @@ pub struct StripUnconfigured<'a> {\n }\n \n impl<'a> StripUnconfigured<'a> {\n+    pub fn new(config: &'a ast::CrateConfig,\n+               diagnostic: &'a Handler,\n+               feature_gated_cfgs: &'a mut Vec<GatedCfgAttr>)\n+               -> Self {\n+        StripUnconfigured {\n+            config: config,\n+            diag: CfgDiagReal { diag: diagnostic, feature_gated_cfgs: feature_gated_cfgs },\n+        }\n+    }\n+\n     fn process_cfg_attr(&mut self, attr: ast::Attribute) -> Option<ast::Attribute> {\n         if !attr.check_name(\"cfg_attr\") {\n             return Some(attr);\n@@ -121,13 +131,8 @@ pub fn strip_unconfigured_items(diagnostic: &Handler, krate: ast::Crate,\n                                 feature_gated_cfgs: &mut Vec<GatedCfgAttr>)\n                                 -> ast::Crate\n {\n-    StripUnconfigured {\n-        config: &krate.config.clone(),\n-        diag: CfgDiagReal {\n-            diag: diagnostic,\n-            feature_gated_cfgs: feature_gated_cfgs,\n-        },\n-    }.fold_crate(krate)\n+    let config = &krate.config.clone();\n+    StripUnconfigured::new(config, diagnostic, feature_gated_cfgs).fold_crate(krate)\n }\n \n impl<T: CfgFolder> fold::Folder for T {"}, {"sha": "95d03b5018daad8422f95809c1f0db6a19e50176", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1aa34e0b5fbdfcd8b176f97c748ee9be0e3c8eeb", "patch": "@@ -19,6 +19,7 @@ use attr;\n use attr::{AttrMetaMethods, WithAttrs, ThinAttributesExt};\n use codemap;\n use codemap::{Span, Spanned, ExpnInfo, ExpnId, NameAndSpan, MacroBang, MacroAttribute};\n+use config::StripUnconfigured;\n use ext::base::*;\n use feature_gate::{self, Features};\n use fold;\n@@ -76,6 +77,17 @@ impl_macro_generable! {\n         \"statement\", .make_stmts,      lift .fold_stmt,      |_span| SmallVector::zero();\n }\n \n+impl MacroGenerable for Option<P<ast::Expr>> {\n+    fn kind_name() -> &'static str { \"expression\" }\n+    fn dummy(_span: Span) -> Self { None }\n+    fn make_with<'a>(result: Box<MacResult + 'a>) -> Option<Self> {\n+        result.make_expr().map(Some)\n+    }\n+    fn fold_with<F: Folder>(self, folder: &mut F) -> Self {\n+        self.and_then(|expr| folder.fold_opt_expr(expr))\n+    }\n+}\n+\n pub fn expand_expr(e: P<ast::Expr>, fld: &mut MacroExpander) -> P<ast::Expr> {\n     return e.and_then(|ast::Expr {id, node, span, attrs}| match node {\n \n@@ -322,7 +334,8 @@ fn expand_mac_invoc<T>(mac: ast::Mac, ident: Option<Ident>, attrs: Vec<ast::Attr\n     };\n \n     let marked = expanded.fold_with(&mut Marker { mark: mark, expn_id: Some(fld.cx.backtrace()) });\n-    let fully_expanded = marked.fold_with(fld);\n+    let configured = marked.fold_with(&mut fld.strip_unconfigured());\n+    let fully_expanded = configured.fold_with(fld);\n     fld.cx.bt_pop();\n     fully_expanded\n }\n@@ -987,6 +1000,12 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n     pub fn new(cx: &'a mut ExtCtxt<'b>) -> MacroExpander<'a, 'b> {\n         MacroExpander { cx: cx }\n     }\n+\n+    fn strip_unconfigured(&mut self) -> StripUnconfigured {\n+        StripUnconfigured::new(&self.cx.cfg,\n+                               &self.cx.parse_sess.span_diagnostic,\n+                               self.cx.feature_gated_cfgs)\n+    }\n }\n \n impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n@@ -999,6 +1018,19 @@ impl<'a, 'b> Folder for MacroExpander<'a, 'b> {\n         expand_expr(expr, self)\n     }\n \n+    fn fold_opt_expr(&mut self, expr: P<ast::Expr>) -> Option<P<ast::Expr>> {\n+        match expr.node {\n+            ast::ExprKind::Mac(_) => {}\n+            _ => return Some(expand_expr(expr, self)),\n+        }\n+\n+        expr.and_then(|ast::Expr {node, span, attrs, ..}| match node {\n+            ast::ExprKind::Mac(mac) =>\n+                expand_mac_invoc(mac, None, attrs.into_attr_vec(), span, self),\n+            _ => unreachable!(),\n+        })\n+    }\n+\n     fn fold_pat(&mut self, pat: P<ast::Pat>) -> P<ast::Pat> {\n         expand_pat(pat, self)\n     }"}]}