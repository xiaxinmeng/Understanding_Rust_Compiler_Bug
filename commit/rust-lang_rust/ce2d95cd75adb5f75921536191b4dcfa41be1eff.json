{"sha": "ce2d95cd75adb5f75921536191b4dcfa41be1eff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMmQ5NWNkNzVhZGI1Zjc1OTIxNTM2MTkxYjRkY2ZhNDFiZTFlZmY=", "commit": {"author": {"name": "Kornel", "email": "kornel@geekhood.net", "date": "2021-03-09T18:30:39Z"}, "committer": {"name": "Kornel", "email": "kornel@geekhood.net", "date": "2021-03-09T20:47:23Z"}, "message": "Demonstrate best practice for feeding stdin of a child processes\n\nIt's possible to create a deadlock with stdin/stdout I/O on a single thread:\n\n* the child process may fill its stdout buffer, and have to wait for the parent process to read it,\n* but the parent process may be waiting until its stdin write finishes before reading the stdout.\n\nTherefore, the parent process should use separate threads for writing and reading.", "tree": {"sha": "5a364eb64b8044c722b1dc6ef46ff9db1b3ec53f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5a364eb64b8044c722b1dc6ef46ff9db1b3ec53f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce2d95cd75adb5f75921536191b4dcfa41be1eff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce2d95cd75adb5f75921536191b4dcfa41be1eff", "html_url": "https://github.com/rust-lang/rust/commit/ce2d95cd75adb5f75921536191b4dcfa41be1eff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce2d95cd75adb5f75921536191b4dcfa41be1eff/comments", "author": {"login": "kornelski", "id": 72159, "node_id": "MDQ6VXNlcjcyMTU5", "avatar_url": "https://avatars.githubusercontent.com/u/72159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kornelski", "html_url": "https://github.com/kornelski", "followers_url": "https://api.github.com/users/kornelski/followers", "following_url": "https://api.github.com/users/kornelski/following{/other_user}", "gists_url": "https://api.github.com/users/kornelski/gists{/gist_id}", "starred_url": "https://api.github.com/users/kornelski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kornelski/subscriptions", "organizations_url": "https://api.github.com/users/kornelski/orgs", "repos_url": "https://api.github.com/users/kornelski/repos", "events_url": "https://api.github.com/users/kornelski/events{/privacy}", "received_events_url": "https://api.github.com/users/kornelski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kornelski", "id": 72159, "node_id": "MDQ6VXNlcjcyMTU5", "avatar_url": "https://avatars.githubusercontent.com/u/72159?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kornelski", "html_url": "https://github.com/kornelski", "followers_url": "https://api.github.com/users/kornelski/followers", "following_url": "https://api.github.com/users/kornelski/following{/other_user}", "gists_url": "https://api.github.com/users/kornelski/gists{/gist_id}", "starred_url": "https://api.github.com/users/kornelski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kornelski/subscriptions", "organizations_url": "https://api.github.com/users/kornelski/orgs", "repos_url": "https://api.github.com/users/kornelski/repos", "events_url": "https://api.github.com/users/kornelski/events{/privacy}", "received_events_url": "https://api.github.com/users/kornelski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3a5d45f68cadc8fff4fbb557780f92b403b19c19", "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5d45f68cadc8fff4fbb557780f92b403b19c19", "html_url": "https://github.com/rust-lang/rust/commit/3a5d45f68cadc8fff4fbb557780f92b403b19c19"}], "stats": {"total": 25, "additions": 18, "deletions": 7}, "files": [{"sha": "b199f381b2a285fa79cab761c83484321787d7ff", "filename": "library/std/src/process.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/ce2d95cd75adb5f75921536191b4dcfa41be1eff/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce2d95cd75adb5f75921536191b4dcfa41be1eff/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=ce2d95cd75adb5f75921536191b4dcfa41be1eff", "patch": "@@ -71,11 +71,15 @@\n //!     .spawn()\n //!     .expect(\"failed to execute child\");\n //!\n-//! {\n-//!     // limited borrow of stdin\n-//!     let stdin = child.stdin.as_mut().expect(\"failed to get stdin\");\n+//! // If the child process fills its stdout buffer, it may end up\n+//! // waiting until the parent reads the stdout, and not be able to\n+//! // read stdin in the meantime, causing a deadlock.\n+//! // Writing from another thread ensures that stdout is being read\n+//! // at the same time, avoiding the problem.\n+//! let mut stdin = child.stdin.take().expect(\"failed to get stdin\");\n+//! std::thread::spawn(move || {\n //!     stdin.write_all(b\"test\").expect(\"failed to write to stdin\");\n-//! }\n+//! });\n //!\n //! let output = child\n //!     .wait_with_output()\n@@ -1145,14 +1149,21 @@ impl Stdio {\n     ///     .spawn()\n     ///     .expect(\"Failed to spawn child process\");\n     ///\n-    /// {\n-    ///     let stdin = child.stdin.as_mut().expect(\"Failed to open stdin\");\n+    /// let mut stdin = child.stdin.take().expect(\"Failed to open stdin\");\n+    /// std::thread::spawn(move || {\n     ///     stdin.write_all(\"Hello, world!\".as_bytes()).expect(\"Failed to write to stdin\");\n-    /// }\n+    /// });\n     ///\n     /// let output = child.wait_with_output().expect(\"Failed to read stdout\");\n     /// assert_eq!(String::from_utf8_lossy(&output.stdout), \"!dlrow ,olleH\");\n     /// ```\n+    ///\n+    /// Writing more than a pipe buffer's worth of input to stdin without also reading\n+    /// stdout and stderr at the same time may cause a deadlock.\n+    /// This is an issue when running any program that doesn't guarantee that it reads\n+    /// its entire stdin before writing more than a pipe buffer's worth of output.\n+    /// The size of a pipe buffer varies on different targets.\n+    ///\n     #[stable(feature = \"process\", since = \"1.0.0\")]\n     pub fn piped() -> Stdio {\n         Stdio(imp::Stdio::MakePipe)"}]}