{"sha": "c818f5c65e67c93a55cbf7b1b6ded983d8f392b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MThmNWM2NWU2N2M5M2E1NWNiZjdiMWI2ZGVkOTgzZDhmMzkyYjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T17:05:45Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-17T17:05:45Z"}, "message": "Unify verbosity handling", "tree": {"sha": "865b701c74c2fd4c64a50e2cf2649480c4546131", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/865b701c74c2fd4c64a50e2cf2649480c4546131"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c818f5c65e67c93a55cbf7b1b6ded983d8f392b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c818f5c65e67c93a55cbf7b1b6ded983d8f392b8", "html_url": "https://github.com/rust-lang/rust/commit/c818f5c65e67c93a55cbf7b1b6ded983d8f392b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c818f5c65e67c93a55cbf7b1b6ded983d8f392b8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa482a9fee6596f9b3021b188a2120873d5bb0d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa482a9fee6596f9b3021b188a2120873d5bb0d3", "html_url": "https://github.com/rust-lang/rust/commit/fa482a9fee6596f9b3021b188a2120873d5bb0d3"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "83f95555f22eeafa159fdbd070c6041b871c1765", "filename": "crates/ra_cli/src/analysis_bench.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c818f5c65e67c93a55cbf7b1b6ded983d8f392b8/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c818f5c65e67c93a55cbf7b1b6ded983d8f392b8/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fanalysis_bench.rs?ref=c818f5c65e67c93a55cbf7b1b6ded983d8f392b8", "patch": "@@ -13,7 +13,7 @@ use ra_db::{\n };\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, FilePosition, LineCol};\n \n-use crate::{load_cargo::load_cargo, Result};\n+use crate::{load_cargo::load_cargo, Result, Verbosity};\n \n pub(crate) struct Position {\n     path: PathBuf,\n@@ -41,7 +41,7 @@ pub(crate) enum Op {\n     GotoDef(Position),\n }\n \n-pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n+pub(crate) fn run(verbosity: Verbosity, path: &Path, op: Op) -> Result<()> {\n     ra_prof::init();\n \n     let start = Instant::now();\n@@ -79,7 +79,7 @@ pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n                 analysis.diagnostics(file_id).unwrap();\n                 analysis.highlight_as_html(file_id, false).unwrap()\n             });\n-            if verbose {\n+            if verbosity.is_verbose() {\n                 println!(\"\\n{}\", res);\n             }\n         }\n@@ -98,13 +98,13 @@ pub(crate) fn run(verbose: bool, path: &Path, op: Op) -> Result<()> {\n             if is_completion {\n                 let res =\n                     do_work(&mut host, file_id, |analysis| analysis.completions(file_postion));\n-                if verbose {\n+                if verbosity.is_verbose() {\n                     println!(\"\\n{:#?}\", res);\n                 }\n             } else {\n                 let res =\n                     do_work(&mut host, file_id, |analysis| analysis.goto_definition(file_postion));\n-                if verbose {\n+                if verbosity.is_verbose() {\n                     println!(\"\\n{:#?}\", res);\n                 }\n             }"}, {"sha": "58fea2cd4a6120215e69844600211fc8bc23189a", "filename": "crates/ra_cli/src/main.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c818f5c65e67c93a55cbf7b1b6ded983d8f392b8/crates%2Fra_cli%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c818f5c65e67c93a55cbf7b1b6ded983d8f392b8/crates%2Fra_cli%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cli%2Fsrc%2Fmain.rs?ref=c818f5c65e67c93a55cbf7b1b6ded983d8f392b8", "patch": "@@ -48,8 +48,8 @@ fn main() -> Result<()> {\n                 randomize,\n             )?;\n         }\n-        Command::Bench { verbose, path, op } => {\n-            analysis_bench::run(verbose, path.as_ref(), op)?;\n+        Command::Bench { verbosity, path, op } => {\n+            analysis_bench::run(verbosity, path.as_ref(), op)?;\n         }\n         Command::HelpPrinted => (),\n     }\n@@ -97,7 +97,7 @@ enum Command {\n         path: PathBuf,\n     },\n     Bench {\n-        verbose: bool,\n+        verbosity: Verbosity,\n         path: PathBuf,\n         op: analysis_bench::Op,\n     },\n@@ -109,6 +109,19 @@ impl Command {\n         let mut matches = Arguments::from_env();\n         let subcommand = matches.subcommand()?.unwrap_or_default();\n \n+        let verbosity = match (\n+            matches.contains([\"-vv\", \"--spammy\"]),\n+            matches.contains([\"-v\", \"--verbose\"]),\n+            matches.contains([\"-q\", \"--quiet\"]),\n+        ) {\n+            (true, _, true) => Err(\"Invalid flags: -q conflicts with -vv\")?,\n+            (true, _, false) => Verbosity::Spammy,\n+            (false, false, false) => Verbosity::Normal,\n+            (false, false, true) => Verbosity::Quiet,\n+            (false, true, false) => Verbosity::Verbose,\n+            (false, true, true) => Err(\"Invalid flags: -q conflicts with -v\")?,\n+        };\n+\n         let command = match subcommand.as_str() {\n             \"parse\" => {\n                 if matches.contains([\"-h\", \"--help\"]) {\n@@ -193,18 +206,6 @@ ARGS:\n                     return Ok(Command::HelpPrinted);\n                 }\n \n-                let verbosity = match (\n-                    matches.contains([\"-vv\", \"--spammy\"]),\n-                    matches.contains([\"-v\", \"--verbose\"]),\n-                    matches.contains([\"-q\", \"--quiet\"]),\n-                ) {\n-                    (true, _, true) => Err(\"Invalid flags: -q conflicts with -vv\")?,\n-                    (true, _, false) => Verbosity::Spammy,\n-                    (false, false, false) => Verbosity::Normal,\n-                    (false, false, true) => Verbosity::Quiet,\n-                    (false, true, false) => Verbosity::Verbose,\n-                    (false, true, true) => Err(\"Invalid flags: -q conflicts with -v\")?,\n-                };\n                 let randomize = matches.contains(\"--randomize\");\n                 let memory_usage = matches.contains(\"--memory-usage\");\n                 let only: Option<String> = matches.opt_value_from_str([\"-o\", \"--only\"])?;\n@@ -242,7 +243,6 @@ ARGS:\n                     return Ok(Command::HelpPrinted);\n                 }\n \n-                let verbose = matches.contains([\"-v\", \"--verbose\"]);\n                 let path: PathBuf = matches.opt_value_from_str(\"--path\")?.unwrap_or_default();\n                 let highlight_path: Option<String> = matches.opt_value_from_str(\"--highlight\")?;\n                 let complete_path: Option<String> = matches.opt_value_from_str(\"--complete\")?;\n@@ -255,7 +255,7 @@ ARGS:\n                         \"exactly one of  `--highlight`, `--complete` or `--goto-def` must be set\"\n                     ),\n                 };\n-                Command::Bench { verbose, path, op }\n+                Command::Bench { verbosity, path, op }\n             }\n             _ => {\n                 eprintln!("}]}