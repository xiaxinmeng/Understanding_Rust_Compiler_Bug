{"sha": "7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "node_id": "C_kwDOAAsO6NoAKDdlYmYyY2QyYjhmMWY4YzExZjkzMzllZjMzN2QzMzZhOTFkNmY3ZGM", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-18T11:04:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-18T11:04:21Z"}, "message": "Rollup merge of #108772 - jyn514:faster-tidy, r=the8472\n\nSpeed up tidy quite a lot\n\nI highly recommend reviewing this commit-by-commit. Based on #106440 for convenience.\n\n## Timings\n\nThese were collected by running `x test tidy -v` to copy paste the command, then using [`samply record`](https://github.com/mstange/samply).\n\nbefore (8 threads)\n![image](https://user-images.githubusercontent.com/23638587/222965319-352ad2c8-367c-4d74-960a-e4bb161a6aff.png)\n\nafter (8 threads) ![image](https://user-images.githubusercontent.com/23638587/222965323-fa846f4e-727a-4bf8-8e3b-1b7b40505cc3.png)\n\nbefore (64 threads) ![image](https://user-images.githubusercontent.com/23638587/222965302-dc88020c-19e9-49d9-a87d-cad054d717f3.png)\nafter (64 threads) ![image](https://user-images.githubusercontent.com/23638587/222965335-e73d7622-59de-41d2-9cc4-1bd67042a349.png)\n\nThe last commit makes tidy use more threads, so comparing \"before (8 threads)\" to \"after (64 threads)\" is IMO the most realistic comparison. Locally, that brings the time for me to run tidy down from 4 to .9 seconds, i.e. the majority of the time for `x test tidy` is now spend running `fmt --check`.\n\nr? `@the8472`", "tree": {"sha": "599c1fff28765ed61a3acb84485935c9c2417d04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/599c1fff28765ed61a3acb84485935c9c2417d04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkFZq1CRBK7hj4Ov3rIwAA+UMIAGcoNoXfY8aK5H5RBT48TPQL\nU7Et8bRtGrVJtlUiPOdIO/mzB71Lijn3U8cshKfbxci/AKyyMBKJ50hKCZJ4tFtX\nMsQzz1qhjxg9jje+2OuNwmQVZJ9IgxkZljlAghFqYoZY/UHTDYCm3ZD6GLwoZopK\ne3x4cc4OZFlF6t1EgHuFSAmLfMXvbBfDqFttMwN2hwVCEdeMIr4VRXDWrrrN6emq\nxo+twzUP9A4z9PFtcKC+xuwGNq5UrY+NF+C3n+y0jdqa5nBCHMJoJ7FEa2ZmYRjH\n44RsjNd7sMRmvjRLoQnIjUEbz2e+uNHqe0LsqaO7fzd5hISOaQthixCVNiI7fHs=\n=OlHB\n-----END PGP SIGNATURE-----\n", "payload": "tree 599c1fff28765ed61a3acb84485935c9c2417d04\nparent 9599f3cc5430039b615bc5171be41a6733083dc0\nparent 675c4aa2c1c142415d4e95bf550ec0b1de2493d0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1679137461 +0100\ncommitter GitHub <noreply@github.com> 1679137461 +0100\n\nRollup merge of #108772 - jyn514:faster-tidy, r=the8472\n\nSpeed up tidy quite a lot\n\nI highly recommend reviewing this commit-by-commit. Based on #106440 for convenience.\n\n## Timings\n\nThese were collected by running `x test tidy -v` to copy paste the command, then using [`samply record`](https://github.com/mstange/samply).\n\nbefore (8 threads)\n![image](https://user-images.githubusercontent.com/23638587/222965319-352ad2c8-367c-4d74-960a-e4bb161a6aff.png)\n\nafter (8 threads) ![image](https://user-images.githubusercontent.com/23638587/222965323-fa846f4e-727a-4bf8-8e3b-1b7b40505cc3.png)\n\nbefore (64 threads) ![image](https://user-images.githubusercontent.com/23638587/222965302-dc88020c-19e9-49d9-a87d-cad054d717f3.png)\nafter (64 threads) ![image](https://user-images.githubusercontent.com/23638587/222965335-e73d7622-59de-41d2-9cc4-1bd67042a349.png)\n\nThe last commit makes tidy use more threads, so comparing \"before (8 threads)\" to \"after (64 threads)\" is IMO the most realistic comparison. Locally, that brings the time for me to run tidy down from 4 to .9 seconds, i.e. the majority of the time for `x test tidy` is now spend running `fmt --check`.\n\nr? `@the8472`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "html_url": "https://github.com/rust-lang/rust/commit/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9599f3cc5430039b615bc5171be41a6733083dc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9599f3cc5430039b615bc5171be41a6733083dc0", "html_url": "https://github.com/rust-lang/rust/commit/9599f3cc5430039b615bc5171be41a6733083dc0"}, {"sha": "675c4aa2c1c142415d4e95bf550ec0b1de2493d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/675c4aa2c1c142415d4e95bf550ec0b1de2493d0", "html_url": "https://github.com/rust-lang/rust/commit/675c4aa2c1c142415d4e95bf550ec0b1de2493d0"}], "stats": {"total": 412, "additions": 225, "deletions": 187}, "files": [{"sha": "04d2597ecc69665cf358f4d54774528edd6a14e6", "filename": ".gitignore", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/.gitignore", "raw_url": "https://github.com/rust-lang/rust/raw/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/.gitignore", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.gitignore?ref=7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "patch": "@@ -42,6 +42,7 @@ no_llvm_build\n /llvm/\n /mingw-build/\n build/\n+!/compiler/rustc_mir_build/src/build/\n /build-rust-analyzer/\n /dist/\n /unicode-downloads"}, {"sha": "140d1154718f741ff101d91fc7ae5abf943f540e", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 35, "deletions": 12, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "patch": "@@ -73,19 +73,34 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Binary { op, lhs, rhs } => {\n                 let lhs = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[lhs], LocalInfo::Boring, NeedsTemporary::Maybe)\n+                    block = this.as_operand(\n+                        block,\n+                        scope,\n+                        &this.thir[lhs],\n+                        LocalInfo::Boring,\n+                        NeedsTemporary::Maybe\n+                    )\n                 );\n                 let rhs = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[rhs], LocalInfo::Boring, NeedsTemporary::No)\n+                    block = this.as_operand(\n+                        block,\n+                        scope,\n+                        &this.thir[rhs],\n+                        LocalInfo::Boring,\n+                        NeedsTemporary::No\n+                    )\n                 );\n                 this.build_binary_op(block, op, expr_span, expr.ty, lhs, rhs)\n             }\n             ExprKind::Unary { op, arg } => {\n                 let arg = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[arg], LocalInfo::Boring, NeedsTemporary::No)\n+                    block = this.as_operand(\n+                        block,\n+                        scope,\n+                        &this.thir[arg],\n+                        LocalInfo::Boring,\n+                        NeedsTemporary::No\n+                    )\n                 );\n                 // Check for -MIN on signed integers\n                 if this.check_overflow && op == UnOp::Neg && expr.ty.is_signed() {\n@@ -272,8 +287,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Pointer { cast, source } => {\n                 let source = unpack!(\n-                    block =\n-                        this.as_operand(block, scope, &this.thir[source], LocalInfo::Boring, NeedsTemporary::No)\n+                    block = this.as_operand(\n+                        block,\n+                        scope,\n+                        &this.thir[source],\n+                        LocalInfo::Boring,\n+                        NeedsTemporary::No\n+                    )\n                 );\n                 block.and(Rvalue::Cast(CastKind::Pointer(cast), source, expr.ty))\n             }\n@@ -502,8 +522,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     Category::of(&expr.kind),\n                     Some(Category::Rvalue(RvalueFunc::AsRvalue) | Category::Constant)\n                 ));\n-                let operand =\n-                    unpack!(block = this.as_operand(block, scope, expr, LocalInfo::Boring, NeedsTemporary::No));\n+                let operand = unpack!(\n+                    block =\n+                        this.as_operand(block, scope, expr, LocalInfo::Boring, NeedsTemporary::No)\n+                );\n                 block.and(Rvalue::Use(operand))\n             }\n         }\n@@ -662,8 +684,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             // Repeating a const does nothing\n         } else {\n             // For a non-const, we may need to generate an appropriate `Drop`\n-            let value_operand =\n-                unpack!(block = this.as_operand(block, scope, value, LocalInfo::Boring, NeedsTemporary::No));\n+            let value_operand = unpack!(\n+                block = this.as_operand(block, scope, value, LocalInfo::Boring, NeedsTemporary::No)\n+            );\n             if let Operand::Move(to_drop) = value_operand {\n                 let success = this.cfg.start_new_block();\n                 this.cfg.terminate("}, {"sha": "2d52102db2cc6335674bdb308cd0640b841ad201", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "patch": "@@ -2252,7 +2252,9 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 user_ty: None,\n                 source_info,\n                 internal: false,\n-                local_info: ClearCrossCrate::Set(Box::new(LocalInfo::User(BindingForm::RefForGuard))),\n+                local_info: ClearCrossCrate::Set(Box::new(LocalInfo::User(\n+                    BindingForm::RefForGuard,\n+                ))),\n             });\n             self.var_debug_info.push(VarDebugInfo {\n                 name,"}, {"sha": "80d8b27336c5438ec4a1818e0f4d07c9733fd727", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "patch": "@@ -876,21 +876,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 } => {\n                     self.local_decls[local].mutability = mutability;\n                     self.local_decls[local].source_info.scope = self.source_scope;\n-                    **self.local_decls[local].local_info.as_mut().assert_crate_local() = if let Some(kind) = param.self_kind {\n-                        LocalInfo::User(\n-                            BindingForm::ImplicitSelf(kind),\n-                        )\n-                    } else {\n-                        let binding_mode = ty::BindingMode::BindByValue(mutability);\n-                        LocalInfo::User(BindingForm::Var(\n-                            VarBindingForm {\n+                    **self.local_decls[local].local_info.as_mut().assert_crate_local() =\n+                        if let Some(kind) = param.self_kind {\n+                            LocalInfo::User(BindingForm::ImplicitSelf(kind))\n+                        } else {\n+                            let binding_mode = ty::BindingMode::BindByValue(mutability);\n+                            LocalInfo::User(BindingForm::Var(VarBindingForm {\n                                 binding_mode,\n                                 opt_ty_info: param.ty_span,\n                                 opt_match_place: Some((None, span)),\n                                 pat_span: span,\n-                            },\n-                        ))\n-                    };\n+                            }))\n+                        };\n                     self.var_indices.insert(var, LocalsForNode::One(local));\n                 }\n                 _ => {"}, {"sha": "baddc9da48db8b5de4bc3fbfec40b78ea88bf55a", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "patch": "@@ -1118,7 +1118,11 @@ impl Step for Tidy {\n         cmd.arg(&builder.src);\n         cmd.arg(&builder.initial_cargo);\n         cmd.arg(&builder.out);\n-        cmd.arg(builder.jobs().to_string());\n+        // Tidy is heavily IO constrained. Still respect `-j`, but use a higher limit if `jobs` hasn't been configured.\n+        let jobs = builder.config.jobs.unwrap_or_else(|| {\n+            8 * std::thread::available_parallelism().map_or(1, std::num::NonZeroUsize::get) as u32\n+        });\n+        cmd.arg(jobs.to_string());\n         if builder.is_verbose() {\n             cmd.arg(\"--verbose\");\n         }"}, {"sha": "070ce93f97c174c16771dc8f52854bae457c0905", "filename": "src/tools/tidy/src/bins.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fbins.rs?ref=7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "patch": "@@ -103,7 +103,7 @@ mod os_impl {\n \n         // FIXME: we don't need to look at all binaries, only files that have been modified in this branch\n         // (e.g. using `git ls-files`).\n-        walk_no_read(path, |path| filter_dirs(path) || path.ends_with(\"src/etc\"), &mut |entry| {\n+        walk_no_read(&[path], |path| filter_dirs(path) || path.ends_with(\"src/etc\"), &mut |entry| {\n             let file = entry.path();\n             let extension = file.extension();\n             let scripts = [\"py\", \"sh\", \"ps1\"];"}, {"sha": "84b133068055b174303c1d22878ee6ae07256bdb", "filename": "src/tools/tidy/src/debug_artifacts.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdebug_artifacts.rs?ref=7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "patch": "@@ -1,21 +1,15 @@\n //! Tidy check to prevent creation of unnecessary debug artifacts while running tests.\n \n-use crate::walk::{filter_dirs, walk};\n+use crate::walk::{filter_dirs, filter_not_rust, walk};\n use std::path::Path;\n \n const GRAPHVIZ_POSTFLOW_MSG: &str = \"`borrowck_graphviz_postflow` attribute in test\";\n \n pub fn check(test_dir: &Path, bad: &mut bool) {\n-    walk(test_dir, filter_dirs, &mut |entry, contents| {\n-        let filename = entry.path();\n-        let is_rust = filename.extension().map_or(false, |ext| ext == \"rs\");\n-        if !is_rust {\n-            return;\n-        }\n-\n+    walk(test_dir, |path| filter_dirs(path) || filter_not_rust(path), &mut |entry, contents| {\n         for (i, line) in contents.lines().enumerate() {\n             if line.contains(\"borrowck_graphviz_postflow\") {\n-                tidy_error!(bad, \"{}:{}: {}\", filename.display(), i + 1, GRAPHVIZ_POSTFLOW_MSG);\n+                tidy_error!(bad, \"{}:{}: {}\", entry.path().display(), i + 1, GRAPHVIZ_POSTFLOW_MSG);\n             }\n         }\n     });"}, {"sha": "f18feda533c9ca104b033b2ffef59429eda0ebd0", "filename": "src/tools/tidy/src/features.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ffeatures.rs?ref=7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "patch": "@@ -9,8 +9,9 @@\n //! * All unstable lang features have tests to ensure they are actually unstable.\n //! * Language features in a group are sorted by feature name.\n \n-use crate::walk::{filter_dirs, walk, walk_many};\n+use crate::walk::{filter_dirs, filter_not_rust, walk, walk_many};\n use std::collections::hash_map::{Entry, HashMap};\n+use std::ffi::OsStr;\n use std::fmt;\n use std::fs;\n use std::num::NonZeroU32;\n@@ -101,17 +102,15 @@ pub fn check(\n             &tests_path.join(\"rustdoc-ui\"),\n             &tests_path.join(\"rustdoc\"),\n         ],\n-        filter_dirs,\n+        |path| {\n+            filter_dirs(path)\n+                || filter_not_rust(path)\n+                || path.file_name() == Some(OsStr::new(\"features.rs\"))\n+                || path.file_name() == Some(OsStr::new(\"diagnostic_list.rs\"))\n+        },\n         &mut |entry, contents| {\n             let file = entry.path();\n             let filename = file.file_name().unwrap().to_string_lossy();\n-            if !filename.ends_with(\".rs\")\n-                || filename == \"features.rs\"\n-                || filename == \"diagnostic_list.rs\"\n-            {\n-                return;\n-            }\n-\n             let filen_underscore = filename.replace('-', \"_\").replace(\".rs\", \"\");\n             let filename_is_gate_test = test_filen_gate(&filen_underscore, &mut features);\n "}, {"sha": "f59406c404bab9d4f29be5fa6e9ee47b6b4ae1ea", "filename": "src/tools/tidy/src/main.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fmain.rs?ref=7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "patch": "@@ -13,7 +13,7 @@ use std::path::PathBuf;\n use std::process;\n use std::str::FromStr;\n use std::sync::atomic::{AtomicBool, Ordering};\n-use std::thread::{scope, ScopedJoinHandle};\n+use std::thread::{self, scope, ScopedJoinHandle};\n \n fn main() {\n     let root_path: PathBuf = env::args_os().nth(1).expect(\"need path to root of repo\").into();\n@@ -55,16 +55,28 @@ fn main() {\n             VecDeque::with_capacity(concurrency.get());\n \n         macro_rules! check {\n-            ($p:ident $(, $args:expr)* ) => {\n+            ($p:ident) => {\n+                check!(@ $p, name=format!(\"{}\", stringify!($p)));\n+            };\n+            ($p:ident, $path:expr $(, $args:expr)* ) => {\n+                let shortened = $path.strip_prefix(&root_path).unwrap();\n+                let name = if shortened == std::path::Path::new(\"\") {\n+                    format!(\"{} (.)\", stringify!($p))\n+                } else {\n+                    format!(\"{} ({})\", stringify!($p), shortened.display())\n+                };\n+                check!(@ $p, name=name, $path $(,$args)*);\n+            };\n+            (@ $p:ident, name=$name:expr $(, $args:expr)* ) => {\n                 drain_handles(&mut handles);\n \n-                let handle = s.spawn(|| {\n+                let handle = thread::Builder::new().name($name).spawn_scoped(s, || {\n                     let mut flag = false;\n                     $p::check($($args, )* &mut flag);\n                     if (flag) {\n                         bad.store(true, Ordering::Relaxed);\n                     }\n-                });\n+                }).unwrap();\n                 handles.push_back(handle);\n             }\n         }\n@@ -108,7 +120,6 @@ fn main() {\n         check!(edition, &library_path);\n \n         check!(alphabetical, &src_path);\n-        check!(alphabetical, &tests_path);\n         check!(alphabetical, &compiler_path);\n         check!(alphabetical, &library_path);\n "}, {"sha": "a965c98f48491ceff2acea5f3faea512d9ec85a5", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "patch": "@@ -19,7 +19,7 @@\n \n use crate::walk::{filter_dirs, walk};\n use regex::{Regex, RegexSet};\n-use std::path::Path;\n+use std::{ffi::OsStr, path::Path};\n \n /// Error code markdown is restricted to 80 columns because they can be\n /// displayed on the console with --example.\n@@ -228,21 +228,33 @@ fn is_unexplained_ignore(extension: &str, line: &str) -> bool {\n \n pub fn check(path: &Path, bad: &mut bool) {\n     fn skip(path: &Path) -> bool {\n-        filter_dirs(path) || skip_markdown_path(path)\n+        if path.file_name().map_or(false, |name| name.to_string_lossy().starts_with(\".#\")) {\n+            // vim or emacs temporary file\n+            return true;\n+        }\n+\n+        if filter_dirs(path) || skip_markdown_path(path) {\n+            return true;\n+        }\n+\n+        let extensions = [\"rs\", \"py\", \"js\", \"sh\", \"c\", \"cpp\", \"h\", \"md\", \"css\", \"ftl\", \"goml\"];\n+        if extensions.iter().all(|e| path.extension() != Some(OsStr::new(e))) {\n+            return true;\n+        }\n+\n+        // We only check CSS files in rustdoc.\n+        path.extension().map_or(false, |e| e == \"css\") && !is_in(path, \"src\", \"librustdoc\")\n     }\n+\n     let problematic_consts_strings: Vec<String> = (PROBLEMATIC_CONSTS.iter().map(u32::to_string))\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:x}\", v)))\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:X}\", v)))\n         .collect();\n     let problematic_regex = RegexSet::new(problematic_consts_strings.as_slice()).unwrap();\n+\n     walk(path, skip, &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n-        let extensions =\n-            [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\", \".md\", \".css\", \".ftl\", \".goml\"];\n-        if extensions.iter().all(|e| !filename.ends_with(e)) || filename.starts_with(\".#\") {\n-            return;\n-        }\n \n         let is_style_file = filename.ends_with(\".css\");\n         let under_rustfmt = filename.ends_with(\".rs\") &&\n@@ -253,11 +265,6 @@ pub fn check(path: &Path, bad: &mut bool) {\n                     a.ends_with(\"src/doc/book\")\n             });\n \n-        if is_style_file && !is_in(file, \"src\", \"librustdoc\") {\n-            // We only check CSS files in rustdoc.\n-            return;\n-        }\n-\n         if contents.is_empty() {\n             tidy_error!(bad, \"{}: empty file\", file.display());\n         }"}, {"sha": "e0fa6aceb853c05686d14618f0348220ec158cc1", "filename": "src/tools/tidy/src/target_specific_tests.rs", "status": "modified", "additions": 49, "deletions": 51, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Ftarget_specific_tests.rs?ref=7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "patch": "@@ -4,6 +4,8 @@\n use std::collections::BTreeMap;\n use std::path::Path;\n \n+use crate::walk::filter_not_rust;\n+\n const COMMENT: &str = \"//\";\n const LLVM_COMPONENTS_HEADER: &str = \"needs-llvm-components:\";\n const COMPILE_FLAGS_HEADER: &str = \"compile-flags:\";\n@@ -35,61 +37,57 @@ struct RevisionInfo<'a> {\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n-    crate::walk::walk(\n-        path,\n-        |path| path.extension().map(|p| p == \"rs\") == Some(false),\n-        &mut |entry, content| {\n-            let file = entry.path().display();\n-            let mut header_map = BTreeMap::new();\n-            iter_header(content, &mut |cfg, directive| {\n-                if let Some(value) = directive.strip_prefix(LLVM_COMPONENTS_HEADER) {\n-                    let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n-                    let comp_vec = info.llvm_components.get_or_insert(Vec::new());\n-                    for component in value.split(' ') {\n-                        let component = component.trim();\n-                        if !component.is_empty() {\n-                            comp_vec.push(component);\n-                        }\n-                    }\n-                } else if directive.starts_with(COMPILE_FLAGS_HEADER) {\n-                    let compile_flags = &directive[COMPILE_FLAGS_HEADER.len()..];\n-                    if let Some((_, v)) = compile_flags.split_once(\"--target\") {\n-                        if let Some((arch, _)) =\n-                            v.trim_start_matches(|c| c == ' ' || c == '=').split_once(\"-\")\n-                        {\n-                            let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n-                            info.target_arch.replace(arch);\n-                        } else {\n-                            eprintln!(\"{file}: seems to have a malformed --target value\");\n-                            *bad = true;\n-                        }\n+    crate::walk::walk(path, filter_not_rust, &mut |entry, content| {\n+        let file = entry.path().display();\n+        let mut header_map = BTreeMap::new();\n+        iter_header(content, &mut |cfg, directive| {\n+            if let Some(value) = directive.strip_prefix(LLVM_COMPONENTS_HEADER) {\n+                let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n+                let comp_vec = info.llvm_components.get_or_insert(Vec::new());\n+                for component in value.split(' ') {\n+                    let component = component.trim();\n+                    if !component.is_empty() {\n+                        comp_vec.push(component);\n                     }\n                 }\n-            });\n-            for (rev, RevisionInfo { target_arch, llvm_components }) in &header_map {\n-                let rev = rev.unwrap_or(\"[unspecified]\");\n-                match (target_arch, llvm_components) {\n-                    (None, None) => {}\n-                    (Some(_), None) => {\n-                        eprintln!(\n-                            \"{}: revision {} should specify `{}` as it has `--target` set\",\n-                            file, rev, LLVM_COMPONENTS_HEADER\n-                        );\n+            } else if directive.starts_with(COMPILE_FLAGS_HEADER) {\n+                let compile_flags = &directive[COMPILE_FLAGS_HEADER.len()..];\n+                if let Some((_, v)) = compile_flags.split_once(\"--target\") {\n+                    if let Some((arch, _)) =\n+                        v.trim_start_matches(|c| c == ' ' || c == '=').split_once(\"-\")\n+                    {\n+                        let info = header_map.entry(cfg).or_insert(RevisionInfo::default());\n+                        info.target_arch.replace(arch);\n+                    } else {\n+                        eprintln!(\"{file}: seems to have a malformed --target value\");\n                         *bad = true;\n                     }\n-                    (None, Some(_)) => {\n-                        eprintln!(\n-                            \"{}: revision {} should not specify `{}` as it doesn't need `--target`\",\n-                            file, rev, LLVM_COMPONENTS_HEADER\n-                        );\n-                        *bad = true;\n-                    }\n-                    (Some(_), Some(_)) => {\n-                        // FIXME: check specified components against the target architectures we\n-                        // gathered.\n-                    }\n                 }\n             }\n-        },\n-    );\n+        });\n+        for (rev, RevisionInfo { target_arch, llvm_components }) in &header_map {\n+            let rev = rev.unwrap_or(\"[unspecified]\");\n+            match (target_arch, llvm_components) {\n+                (None, None) => {}\n+                (Some(_), None) => {\n+                    eprintln!(\n+                        \"{}: revision {} should specify `{}` as it has `--target` set\",\n+                        file, rev, LLVM_COMPONENTS_HEADER\n+                    );\n+                    *bad = true;\n+                }\n+                (None, Some(_)) => {\n+                    eprintln!(\n+                        \"{}: revision {} should not specify `{}` as it doesn't need `--target`\",\n+                        file, rev, LLVM_COMPONENTS_HEADER\n+                    );\n+                    *bad = true;\n+                }\n+                (Some(_), Some(_)) => {\n+                    // FIXME: check specified components against the target architectures we\n+                    // gathered.\n+                }\n+            }\n+        }\n+    });\n }"}, {"sha": "66f5c932be2a0fca00b21dce473e605e2a45abaf", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 59, "deletions": 63, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "patch": "@@ -3,87 +3,83 @@\n //! - there are no stray `.stderr` files\n \n use ignore::Walk;\n-use ignore::WalkBuilder;\n+use std::collections::HashMap;\n use std::fs;\n-use std::path::Path;\n+use std::path::{Path, PathBuf};\n \n const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n const ROOT_ENTRY_LIMIT: usize = 940;\n const ISSUES_ENTRY_LIMIT: usize = 1978;\n \n-fn check_entries(path: &Path, bad: &mut bool) {\n-    for dir in Walk::new(&path.join(\"ui\")) {\n+fn check_entries(tests_path: &Path, bad: &mut bool) {\n+    let mut directories: HashMap<PathBuf, usize> = HashMap::new();\n+\n+    for dir in Walk::new(&tests_path.join(\"ui\")) {\n         if let Ok(entry) = dir {\n-            if entry.file_type().map(|ft| ft.is_dir()).unwrap_or(false) {\n-                let dir_path = entry.path();\n-                // Use special values for these dirs.\n-                let is_root = path.join(\"ui\") == dir_path;\n-                let is_issues_dir = path.join(\"ui/issues\") == dir_path;\n-                let limit = if is_root {\n-                    ROOT_ENTRY_LIMIT\n-                } else if is_issues_dir {\n-                    ISSUES_ENTRY_LIMIT\n-                } else {\n-                    ENTRY_LIMIT\n-                };\n+            let parent = entry.path().parent().unwrap().to_path_buf();\n+            *directories.entry(parent).or_default() += 1;\n+        }\n+    }\n \n-                let count = WalkBuilder::new(&dir_path)\n-                    .max_depth(Some(1))\n-                    .build()\n-                    .into_iter()\n-                    .collect::<Vec<_>>()\n-                    .len()\n-                    - 1; // remove the dir itself\n+    for (dir_path, count) in directories {\n+        // Use special values for these dirs.\n+        let is_root = tests_path.join(\"ui\") == dir_path;\n+        let is_issues_dir = tests_path.join(\"ui/issues\") == dir_path;\n+        let limit = if is_root {\n+            ROOT_ENTRY_LIMIT\n+        } else if is_issues_dir {\n+            ISSUES_ENTRY_LIMIT\n+        } else {\n+            ENTRY_LIMIT\n+        };\n \n-                if count > limit {\n-                    tidy_error!(\n-                        bad,\n-                        \"following path contains more than {} entries, \\\n-                            you should move the test to some relevant subdirectory (current: {}): {}\",\n-                        limit,\n-                        count,\n-                        dir_path.display()\n-                    );\n-                }\n-            }\n+        if count > limit {\n+            tidy_error!(\n+                bad,\n+                \"following path contains more than {} entries, \\\n+                    you should move the test to some relevant subdirectory (current: {}): {}\",\n+                limit,\n+                count,\n+                dir_path.display()\n+            );\n         }\n     }\n }\n \n pub fn check(path: &Path, bad: &mut bool) {\n     check_entries(&path, bad);\n-    for path in &[&path.join(\"ui\"), &path.join(\"ui-fulldeps\")] {\n-        crate::walk::walk_no_read(path, |_| false, &mut |entry| {\n-            let file_path = entry.path();\n-            if let Some(ext) = file_path.extension() {\n-                if ext == \"stderr\" || ext == \"stdout\" {\n-                    // Test output filenames have one of the formats:\n-                    // ```\n-                    // $testname.stderr\n-                    // $testname.$mode.stderr\n-                    // $testname.$revision.stderr\n-                    // $testname.$revision.$mode.stderr\n-                    // ```\n-                    //\n-                    // For now, just make sure that there is a corresponding\n-                    // `$testname.rs` file.\n-                    //\n-                    // NB: We do not use file_stem() as some file names have multiple `.`s and we\n-                    // must strip all of them.\n-                    let testname =\n-                        file_path.file_name().unwrap().to_str().unwrap().split_once('.').unwrap().0;\n-                    if !file_path.with_file_name(testname).with_extension(\"rs\").exists() {\n-                        tidy_error!(bad, \"Stray file with UI testing output: {:?}\", file_path);\n-                    }\n+    let (ui, ui_fulldeps) = (path.join(\"ui\"), path.join(\"ui-fulldeps\"));\n+    let paths = [ui.as_path(), ui_fulldeps.as_path()];\n+    crate::walk::walk_no_read(&paths, |_| false, &mut |entry| {\n+        let file_path = entry.path();\n+        if let Some(ext) = file_path.extension() {\n+            if ext == \"stderr\" || ext == \"stdout\" {\n+                // Test output filenames have one of the formats:\n+                // ```\n+                // $testname.stderr\n+                // $testname.$mode.stderr\n+                // $testname.$revision.stderr\n+                // $testname.$revision.$mode.stderr\n+                // ```\n+                //\n+                // For now, just make sure that there is a corresponding\n+                // `$testname.rs` file.\n+                //\n+                // NB: We do not use file_stem() as some file names have multiple `.`s and we\n+                // must strip all of them.\n+                let testname =\n+                    file_path.file_name().unwrap().to_str().unwrap().split_once('.').unwrap().0;\n+                if !file_path.with_file_name(testname).with_extension(\"rs\").exists() {\n+                    tidy_error!(bad, \"Stray file with UI testing output: {:?}\", file_path);\n+                }\n \n-                    if let Ok(metadata) = fs::metadata(file_path) {\n-                        if metadata.len() == 0 {\n-                            tidy_error!(bad, \"Empty file with UI testing output: {:?}\", file_path);\n-                        }\n+                if let Ok(metadata) = fs::metadata(file_path) {\n+                    if metadata.len() == 0 {\n+                        tidy_error!(bad, \"Empty file with UI testing output: {:?}\", file_path);\n                     }\n                 }\n             }\n-        });\n-    }\n+        }\n+    });\n }"}, {"sha": "2ade22c209f5aa157e2e39ac88b8913f9d98b212", "filename": "src/tools/tidy/src/walk.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fwalk.rs?ref=7ebf2cd2b8f1f8c11f9339ef337d336a91d6f7dc", "patch": "@@ -1,6 +1,6 @@\n use ignore::DirEntry;\n \n-use std::{fs::File, io::Read, path::Path};\n+use std::{ffi::OsStr, fs::File, io::Read, path::Path};\n \n /// The default directory filter.\n pub fn filter_dirs(path: &Path) -> bool {\n@@ -33,23 +33,26 @@ pub fn filter_dirs(path: &Path) -> bool {\n     skip.iter().any(|p| path.ends_with(p))\n }\n \n-pub fn walk_many(\n-    paths: &[&Path],\n+/// Filter for only files that end in `.rs`.\n+pub fn filter_not_rust(path: &Path) -> bool {\n+    path.extension() != Some(OsStr::new(\"rs\")) && !path.is_dir()\n+}\n+\n+pub fn walk(\n+    path: &Path,\n     skip: impl Clone + Send + Sync + 'static + Fn(&Path) -> bool,\n     f: &mut dyn FnMut(&DirEntry, &str),\n ) {\n-    for path in paths {\n-        walk(path, skip.clone(), f);\n-    }\n+    walk_many(&[path], skip, f);\n }\n \n-pub fn walk(\n-    path: &Path,\n-    skip: impl Send + Sync + 'static + Fn(&Path) -> bool,\n+pub fn walk_many(\n+    paths: &[&Path],\n+    skip: impl Clone + Send + Sync + 'static + Fn(&Path) -> bool,\n     f: &mut dyn FnMut(&DirEntry, &str),\n ) {\n     let mut contents = Vec::new();\n-    walk_no_read(path, skip, &mut |entry| {\n+    walk_no_read(paths, skip, &mut |entry| {\n         contents.clear();\n         let mut file = t!(File::open(entry.path()), entry.path());\n         t!(file.read_to_end(&mut contents), entry.path());\n@@ -62,11 +65,14 @@ pub fn walk(\n }\n \n pub(crate) fn walk_no_read(\n-    path: &Path,\n+    paths: &[&Path],\n     skip: impl Send + Sync + 'static + Fn(&Path) -> bool,\n     f: &mut dyn FnMut(&DirEntry),\n ) {\n-    let mut walker = ignore::WalkBuilder::new(path);\n+    let mut walker = ignore::WalkBuilder::new(paths[0]);\n+    for path in &paths[1..] {\n+        walker.add(path);\n+    }\n     let walker = walker.filter_entry(move |e| !skip(e.path()));\n     for entry in walker.build() {\n         if let Ok(entry) = entry {"}]}