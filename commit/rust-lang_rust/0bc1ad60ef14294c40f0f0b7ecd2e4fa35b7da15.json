{"sha": "0bc1ad60ef14294c40f0f0b7ecd2e4fa35b7da15", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYzFhZDYwZWYxNDI5NGM0MGYwZjBiN2VjZDJlNGZhMzViN2RhMTU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-01T16:36:22Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-01T16:36:22Z"}, "message": "Union is a more familiar term than sum.", "tree": {"sha": "a6943d41a6de7bce6d31cd02c3d0df888391b6ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6943d41a6de7bce6d31cd02c3d0df888391b6ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bc1ad60ef14294c40f0f0b7ecd2e4fa35b7da15", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc1ad60ef14294c40f0f0b7ecd2e4fa35b7da15", "html_url": "https://github.com/rust-lang/rust/commit/0bc1ad60ef14294c40f0f0b7ecd2e4fa35b7da15", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bc1ad60ef14294c40f0f0b7ecd2e4fa35b7da15/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb04275afa8c72a10ca5893de27dc0228d29ea8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb04275afa8c72a10ca5893de27dc0228d29ea8c", "html_url": "https://github.com/rust-lang/rust/commit/cb04275afa8c72a10ca5893de27dc0228d29ea8c"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "3796f75779503f73a1f102eeecd7672d3fd21a02", "filename": "doc/rust.texi", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0bc1ad60ef14294c40f0f0b7ecd2e4fa35b7da15/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/0bc1ad60ef14294c40f0f0b7ecd2e4fa35b7da15/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=0bc1ad60ef14294c40f0f0b7ecd2e4fa35b7da15", "patch": "@@ -1748,7 +1748,7 @@ built-in type or type-constructor name is reserved as a @emph{keyword} in\n Rust; they cannot be used as user-defined identifiers in any context.\n \n @menu\n-* Ref.Type.Any::                An open sum of every possible type.\n+* Ref.Type.Any::                An open union of every possible type.\n * Ref.Type.Mach::               Machine-level types.\n * Ref.Type.Int::                The machine-dependent integer types.\n * Ref.Type.Float::              The machine-dependent floating-point types.\n@@ -1758,7 +1758,7 @@ Rust; they cannot be used as user-defined identifiers in any context.\n * Ref.Type.Rec::                Labeled products of heterogeneous types.\n * Ref.Type.Tup::                Unlabeled products of homogeneous types.\n * Ref.Type.Vec::                Open products of homogeneous types.\n-* Ref.Type.Tag::                Disjoint sums of heterogeneous types.\n+* Ref.Type.Tag::                Disjoint unions of heterogeneous types.\n * Ref.Type.Fn::                 Subroutine types.\n * Ref.Type.Iter::               Scoped coroutine types.\n * Ref.Type.Port::               Unique inter-task message-receipt endpoints.\n@@ -1989,7 +1989,7 @@ vector is always bounds-checked.\n @node       Ref.Type.Tag\n @subsection Ref.Type.Tag\n \n-The @code{tag} type-constructor forms new heterogeneous disjoint sum\n+The @code{tag} type-constructor forms new heterogeneous disjoint union\n types.@footnote{The @code{tag} type is analogous to a @code{data} constructor\n declaration in ML or a @emph{pick ADT} in Limbo.} A @code{tag} type consists\n of a number of @emph{variants}, each of which is independently named and takes"}]}