{"sha": "ff64b420ecc1762dee6c9b9b211850be68cd9765", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNjRiNDIwZWNjMTc2MmRlZTZjOWI5YjIxMTg1MGJlNjhjZDk3NjU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-13T07:24:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-13T07:24:32Z"}, "message": "Merge pull request #387 from ecstatic-morse/eq-hash\n\nImplement `Eq`, `Clone` and `Hash` for MemoryData and Evaluator", "tree": {"sha": "5b97f5f94bac265baa3c1f219c5b2103fe6c6218", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b97f5f94bac265baa3c1f219c5b2103fe6c6218"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff64b420ecc1762dee6c9b9b211850be68cd9765", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbSFOwCRBK7hj4Ov3rIwAAdHIIAJGUovtwTYOu3XPdvjnMyYu2\n3BY2wakzGG42ahGwLVb03Y2arenPb92Dvgb7TJZj6iB/WaKWfqpV8XC2ZupTO13k\n4uA85aUvLL2IG+ULAUaFuhgoiJVn/W14ju1or28mr9Mh2wlZgIE3i0f672g0VVS1\nUp1qrme11zbm85yS4rh7Xomoao0nbe1h4Gd3K8DBFOr4+nTqXdeF5V8l2Sc+Ko24\nMBE0ccmp5lUh25TdnO9MPn6N7JK6NxPi6UPRX5x0+KPq7k9WgU2md5JIHGkO8O9s\nBjF4V3SbyR4DtrXb9uGUuyxLrk0LjSnpLJ6owt/B1/jAdZIn8QL2U0nZCUfrn8E=\n=WIT/\n-----END PGP SIGNATURE-----\n", "payload": "tree 5b97f5f94bac265baa3c1f219c5b2103fe6c6218\nparent 19e214e6ad3b67701549a821b3ba31b3164ecd67\nparent a2f4d84f73647ac755871a06570fee636897b8c7\nauthor Ralf Jung <post@ralfj.de> 1531466672 +0200\ncommitter GitHub <noreply@github.com> 1531466672 +0200\n\nMerge pull request #387 from ecstatic-morse/eq-hash\n\nImplement `Eq`, `Clone` and `Hash` for MemoryData and Evaluator"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff64b420ecc1762dee6c9b9b211850be68cd9765", "html_url": "https://github.com/rust-lang/rust/commit/ff64b420ecc1762dee6c9b9b211850be68cd9765", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff64b420ecc1762dee6c9b9b211850be68cd9765/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19e214e6ad3b67701549a821b3ba31b3164ecd67", "url": "https://api.github.com/repos/rust-lang/rust/commits/19e214e6ad3b67701549a821b3ba31b3164ecd67", "html_url": "https://github.com/rust-lang/rust/commit/19e214e6ad3b67701549a821b3ba31b3164ecd67"}, {"sha": "a2f4d84f73647ac755871a06570fee636897b8c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2f4d84f73647ac755871a06570fee636897b8c7", "html_url": "https://github.com/rust-lang/rust/commit/a2f4d84f73647ac755871a06570fee636897b8c7"}], "stats": {"total": 45, "additions": 40, "deletions": 5}, "files": [{"sha": "75397262b225a1d0d30b1d0b75e8c6f8d83fbae9", "filename": "src/lib.rs", "status": "modified", "additions": 38, "deletions": 3, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ff64b420ecc1762dee6c9b9b211850be68cd9765/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff64b420ecc1762dee6c9b9b211850be68cd9765/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=ff64b420ecc1762dee6c9b9b211850be68cd9765", "patch": "@@ -27,10 +27,13 @@ use rustc::ty::subst::Subst;\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n \n+use rustc_data_structures::fx::FxHasher;\n+\n use syntax::ast::Mutability;\n use syntax::codemap::Span;\n \n use std::collections::{HashMap, BTreeMap};\n+use std::hash::{Hash, Hasher};\n \n pub use rustc::mir::interpret::*;\n pub use rustc_mir::interpret::*;\n@@ -296,7 +299,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n     }\n }\n \n-#[derive(Default)]\n+#[derive(Clone, Default, PartialEq, Eq)]\n pub struct Evaluator<'tcx> {\n     /// Environment variables set by `setenv`\n     /// Miri does not expose env vars from the host to the emulated program\n@@ -306,15 +309,34 @@ pub struct Evaluator<'tcx> {\n     pub(crate) suspended: HashMap<DynamicLifetime, Vec<ValidationQuery<'tcx>>>,\n }\n \n+impl<'tcx> Hash for Evaluator<'tcx> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        let Evaluator {\n+            env_vars,\n+            suspended: _,\n+        } = self;\n+\n+        env_vars.iter()\n+            .map(|(env, ptr)| {\n+                let mut h = FxHasher::default();\n+                env.hash(&mut h);\n+                ptr.hash(&mut h);\n+                h.finish()\n+            })\n+            .fold(0u64, |acc, hash| acc.wrapping_add(hash))\n+            .hash(state);\n+    }\n+}\n+\n pub type TlsKey = u128;\n \n-#[derive(Copy, Clone, Debug)]\n+#[derive(Copy, Clone, Debug, Hash, PartialEq, Eq)]\n pub struct TlsEntry<'tcx> {\n     data: Scalar, // Will eventually become a map from thread IDs to `Scalar`s, if we ever support more than one thread.\n     dtor: Option<ty::Instance<'tcx>>,\n }\n \n-#[derive(Default)]\n+#[derive(Clone, Default, PartialEq, Eq)]\n pub struct MemoryData<'tcx> {\n     /// The Key to use for the next thread-local allocation.\n     next_thread_local: TlsKey,\n@@ -331,6 +353,19 @@ pub struct MemoryData<'tcx> {\n     statics: HashMap<GlobalId<'tcx>, AllocId>,\n }\n \n+impl<'tcx> Hash for MemoryData<'tcx> {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        let MemoryData {\n+            next_thread_local: _,\n+            thread_local,\n+            locks: _,\n+            statics: _,\n+        } = self;\n+\n+        thread_local.hash(state);\n+    }\n+}\n+\n impl<'mir, 'tcx: 'mir> Machine<'mir, 'tcx> for Evaluator<'tcx> {\n     type MemoryData = MemoryData<'tcx>;\n     type MemoryKinds = memory::MemoryKind;"}, {"sha": "9f4126ad82b60002e105863b78712e8f10ae5278", "filename": "src/locks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff64b420ecc1762dee6c9b9b211850be68cd9765/src%2Flocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff64b420ecc1762dee6c9b9b211850be68cd9765/src%2Flocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flocks.rs?ref=ff64b420ecc1762dee6c9b9b211850be68cd9765", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::layout::Size;\n ////////////////////////////////////////////////////////////////////////////////\n \n /// Information about a lock that is currently held.\n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq, Eq)]\n pub struct LockInfo<'tcx> {\n     /// Stores for which lifetimes (of the original write lock) we got\n     /// which suspensions."}, {"sha": "76d01ad19e3ab609e5bfafc80aed5ea3c7cf24c7", "filename": "src/range_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff64b420ecc1762dee6c9b9b211850be68cd9765/src%2Frange_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff64b420ecc1762dee6c9b9b211850be68cd9765/src%2Frange_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frange_map.rs?ref=ff64b420ecc1762dee6c9b9b211850be68cd9765", "patch": "@@ -7,7 +7,7 @@\n use std::collections::BTreeMap;\n use std::ops;\n \n-#[derive(Clone, Debug)]\n+#[derive(Clone, Debug, PartialEq, Eq)]\n pub struct RangeMap<T> {\n     map: BTreeMap<Range, T>,\n }"}]}