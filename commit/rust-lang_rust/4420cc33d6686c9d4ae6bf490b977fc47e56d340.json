{"sha": "4420cc33d6686c9d4ae6bf490b977fc47e56d340", "node_id": "C_kwDOAAsO6NoAKDQ0MjBjYzMzZDY2ODZjOWQ0YWU2YmY0OTBiOTc3ZmM0N2U1NmQzNDA", "commit": {"author": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2021-12-16T22:06:28Z"}, "committer": {"name": "Jane Lusby", "email": "jlusby@yaah.dev", "date": "2021-12-16T22:06:28Z"}, "message": "Update report output and fix examples", "tree": {"sha": "a69d9f2c019d32fa1b9198305340a34725979707", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a69d9f2c019d32fa1b9198305340a34725979707"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4420cc33d6686c9d4ae6bf490b977fc47e56d340", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4420cc33d6686c9d4ae6bf490b977fc47e56d340", "html_url": "https://github.com/rust-lang/rust/commit/4420cc33d6686c9d4ae6bf490b977fc47e56d340", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4420cc33d6686c9d4ae6bf490b977fc47e56d340/comments", "author": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yaahc", "id": 1993852, "node_id": "MDQ6VXNlcjE5OTM4NTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1993852?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yaahc", "html_url": "https://github.com/yaahc", "followers_url": "https://api.github.com/users/yaahc/followers", "following_url": "https://api.github.com/users/yaahc/following{/other_user}", "gists_url": "https://api.github.com/users/yaahc/gists{/gist_id}", "starred_url": "https://api.github.com/users/yaahc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yaahc/subscriptions", "organizations_url": "https://api.github.com/users/yaahc/orgs", "repos_url": "https://api.github.com/users/yaahc/repos", "events_url": "https://api.github.com/users/yaahc/events{/privacy}", "received_events_url": "https://api.github.com/users/yaahc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1386a15529f5241402125b37eda7a5bb03fbd247", "url": "https://api.github.com/repos/rust-lang/rust/commits/1386a15529f5241402125b37eda7a5bb03fbd247", "html_url": "https://github.com/rust-lang/rust/commit/1386a15529f5241402125b37eda7a5bb03fbd247"}], "stats": {"total": 327, "additions": 245, "deletions": 82}, "files": [{"sha": "a2b4eb2117dcc8dfe4ba239160604a94579906b6", "filename": "library/std/src/error.rs", "status": "modified", "additions": 160, "deletions": 35, "changes": 195, "blob_url": "https://github.com/rust-lang/rust/blob/4420cc33d6686c9d4ae6bf490b977fc47e56d340/library%2Fstd%2Fsrc%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4420cc33d6686c9d4ae6bf490b977fc47e56d340/library%2Fstd%2Fsrc%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror.rs?ref=4420cc33d6686c9d4ae6bf490b977fc47e56d340", "patch": "@@ -808,43 +808,63 @@ impl dyn Error + Send + Sync {\n     }\n }\n \n-/// An error reporter that exposes the entire error chain for printing.\n-/// It also exposes options for formatting the error chain, either entirely on a single line,\n-/// or in multi-line format with each cause in the error chain on a new line.\n+/// An error reporter that print's an error and its sources.\n+///\n+/// Report also exposes configuration options for formatting the error chain, either entirely on a\n+/// single line, or in multi-line format with each cause in the error chain on a new line.\n+///\n /// `Report` only requires that the wrapped error implements `Error`. It doesn't require that the\n /// wrapped error be `Send`, `Sync`, or `'static`.\n ///\n /// # Examples\n ///\n /// ```rust\n /// #![feature(error_reporter)]\n-/// #![feature(negative_impls)]\n-///\n /// use std::error::{Error, Report};\n /// use std::fmt;\n ///\n /// #[derive(Debug)]\n-/// struct SuperError<'a> {\n-///     side: &'a str,\n+/// struct SuperError {\n+///     source: SuperErrorSideKick,\n /// }\n ///\n-/// impl<'a> fmt::Display for SuperError<'a> {\n+/// impl fmt::Display for SuperError {\n ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-///         write!(f, \"SuperError is here: {}\", self.side)\n+///         write!(f, \"SuperError is here!\")\n ///     }\n /// }\n ///\n-/// impl<'a> Error for SuperError<'a> {}\n+/// impl Error for SuperError {\n+///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+///         Some(&self.source)\n+///     }\n+/// }\n ///\n-/// fn main() {\n-///     let msg = String::from(\"Huzzah!\");\n-///     let error = SuperError { side: &msg };\n-///     let report = Report::new(&error).pretty(true);\n+/// #[derive(Debug)]\n+/// struct SuperErrorSideKick;\n+///\n+/// impl fmt::Display for SuperErrorSideKick {\n+///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+///         write!(f, \"SuperErrorSideKick is here!\")\n+///     }\n+/// }\n+///\n+/// impl Error for SuperErrorSideKick {}\n ///\n-///     println!(\"{}\", report);\n+/// fn get_super_error() -> Result<(), SuperError> {\n+///     Err(SuperError { source: SuperErrorSideKick })\n+/// }\n+///\n+/// fn main() {\n+///     match get_super_error() {\n+///         Err(e) => {\n+///             let report = Report::new(e).pretty(true);\n+///             println!(\"Error: {}\", report);\n+///         }\n+///         _ => println!(\"No error\"),\n+///     }\n /// }\n /// ```\n-\n #[unstable(feature = \"error_reporter\", issue = \"90172\")]\n pub struct Report<E> {\n     /// The error being reported.\n@@ -865,14 +885,129 @@ where\n         Report { error, show_backtrace: false, pretty: false }\n     }\n \n-    /// Enable pretty-printing the report.\n+    /// Enable pretty-printing the report across multiple lines.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(error_reporter)]\n+    /// use std::error::Report;\n+    /// # use std::error::Error;\n+    /// # use std::fmt;\n+    /// # #[derive(Debug)]\n+    /// # struct SuperError {\n+    /// #     source: SuperErrorSideKick,\n+    /// # }\n+    /// # impl fmt::Display for SuperError {\n+    /// #     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    /// #         write!(f, \"SuperError is here!\")\n+    /// #     }\n+    /// # }\n+    /// # impl Error for SuperError {\n+    /// #     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+    /// #         Some(&self.source)\n+    /// #     }\n+    /// # }\n+    /// # #[derive(Debug)]\n+    /// # struct SuperErrorSideKick;\n+    /// # impl fmt::Display for SuperErrorSideKick {\n+    /// #     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    /// #         write!(f, \"SuperErrorSideKick is here!\")\n+    /// #     }\n+    /// # }\n+    /// # impl Error for SuperErrorSideKick {}\n+    ///\n+    /// let error = SuperError { source: SuperErrorSideKick };\n+    /// let report = Report::new(error).pretty(true);\n+    /// eprintln!(\"Error: {:?}\", report);\n+    /// ```\n+    ///\n+    /// This example produces the following output:\n+    ///\n+    /// ```console\n+    /// Error: SuperError is here!\n+    ///\n+    /// Caused by:\n+    ///       SuperErrorSideKick is here!\n+    /// ```\n     #[unstable(feature = \"error_reporter\", issue = \"90172\")]\n     pub fn pretty(mut self, pretty: bool) -> Self {\n         self.pretty = pretty;\n         self\n     }\n \n-    /// Enable showing a backtrace for the report.\n+    /// Display backtrace if available when using pretty output format.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// #![feature(error_reporter)]\n+    /// #![feature(backtrace)]\n+    /// use std::error::{Error, Report};\n+    /// use std::backtrace::Backtrace;\n+    /// use std::fmt;\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct SuperError {\n+    ///     source: SuperErrorSideKick,\n+    /// }\n+    ///\n+    /// impl fmt::Display for SuperError {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         write!(f, \"SuperError is here!\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for SuperError {\n+    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n+    ///         Some(&self.source)\n+    ///     }\n+    /// }\n+    ///\n+    /// #[derive(Debug)]\n+    /// struct SuperErrorSideKick {\n+    ///     backtrace: Backtrace,\n+    /// }\n+    ///\n+    /// impl fmt::Display for SuperErrorSideKick {\n+    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+    ///         write!(f, \"SuperErrorSideKick is here!\")\n+    ///     }\n+    /// }\n+    ///\n+    /// impl Error for SuperErrorSideKick {\n+    ///     fn backtrace(&self) -> Option<&Backtrace> {\n+    ///         Some(&self.backtrace)\n+    ///     }\n+    /// }\n+    ///\n+    /// let source = SuperErrorSideKick { backtrace: Backtrace::force_capture() };\n+    /// let error = SuperError { source };\n+    /// let report = Report::new(error).pretty(true).show_backtrace(true);\n+    /// eprintln!(\"Error: {:?}\", report);\n+    /// ```\n+    ///\n+    /// This example produces something similar to the following output:\n+    ///\n+    /// ```console\n+    /// Error: SuperError is here!\n+    ///\n+    /// Caused by:\n+    ///       SuperErrorSideKick is here!\n+    ///\n+    /// Stack backtrace:\n+    ///    0: rust_out::main::_doctest_main_src_error_rs_943_0\n+    ///    1: rust_out::main\n+    ///    2: core::ops::function::FnOnce::call_once\n+    ///    3: std::sys_common::backtrace::__rust_begin_short_backtrace\n+    ///    4: std::rt::lang_start::{{closure}}\n+    ///    5: std::panicking::try\n+    ///    6: std::rt::lang_start_internal\n+    ///    7: std::rt::lang_start\n+    ///    8: main\n+    ///    9: __libc_start_main\n+    ///   10: _start\n+    /// ```\n     #[unstable(feature = \"error_reporter\", issue = \"90172\")]\n     pub fn show_backtrace(mut self, show_backtrace: bool) -> Self {\n         self.show_backtrace = show_backtrace;\n@@ -922,10 +1057,12 @@ where\n                 writeln!(f)?;\n                 let mut indented = Indented {\n                     inner: f,\n-                    number: if multiple { Some(ind) } else { None },\n-                    started: false,\n                 };\n-                write!(indented, \"{}\", error)?;\n+                if multiple {\n+                    write!(indented, \"{: >4}: {}\", ind, error)?;\n+                } else {\n+                    write!(indented, \"      {}\", error)?;\n+                }\n             }\n         }\n \n@@ -979,8 +1116,6 @@ where\n /// Wrapper type for indenting the inner source.\n struct Indented<'a, D> {\n     inner: &'a mut D,\n-    number: Option<usize>,\n-    started: bool,\n }\n \n impl<T> Write for Indented<'_, T>\n@@ -989,19 +1124,9 @@ where\n {\n     fn write_str(&mut self, s: &str) -> fmt::Result {\n         for (i, line) in s.split('\\n').enumerate() {\n-            if !self.started {\n-                self.started = true;\n-                match self.number {\n-                    Some(number) => write!(self.inner, \"{: >5}: \", number)?,\n-                    None => self.inner.write_str(\"    \")?,\n-                }\n-            } else if i > 0 {\n+            if i > 0 {\n                 self.inner.write_char('\\n')?;\n-                if self.number.is_some() {\n-                    self.inner.write_str(\"       \")?;\n-                } else {\n-                    self.inner.write_str(\"    \")?;\n-                }\n+                self.inner.write_str(\"      \")?;\n             }\n \n             self.inner.write_str(line)?;"}, {"sha": "0835e282c46c3bec406e456cd9fe1023f730c552", "filename": "library/std/src/error/tests.rs", "status": "modified", "additions": 85, "deletions": 47, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/4420cc33d6686c9d4ae6bf490b977fc47e56d340/library%2Fstd%2Fsrc%2Ferror%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4420cc33d6686c9d4ae6bf490b977fc47e56d340/library%2Fstd%2Fsrc%2Ferror%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ferror%2Ftests.rs?ref=4420cc33d6686c9d4ae6bf490b977fc47e56d340", "patch": "@@ -82,8 +82,11 @@ fn multi_line_formatting() {\n     let error = SuperError { source: SuperErrorSideKick };\n     let report = Report::new(&error).pretty(true);\n     let actual = report.to_string();\n-    let expected =\n-        String::from(\"SuperError is here!\\n\\nCaused by:\\n    SuperErrorSideKick is here!\");\n+    let expected = String::from(\"\\\n+SuperError is here!\n+\n+Caused by:\n+      SuperErrorSideKick is here!\");\n \n     assert_eq!(expected, actual);\n }\n@@ -109,10 +112,11 @@ fn error_with_no_sources_formats_multi_line_correctly() {\n #[test]\n fn error_with_backtrace_outputs_correctly_with_one_source() {\n     let trace = Backtrace::force_capture();\n-    let expected = format!(\"The source of the error\n+    let expected = format!(\"\\\n+The source of the error\n \n Caused by:\n-    Error with backtrace\n+      Error with backtrace\n \n Stack backtrace:\n {}\", trace);\n@@ -129,11 +133,12 @@ Stack backtrace:\n #[test]\n fn error_with_backtrace_outputs_correctly_with_two_sources() {\n     let trace = Backtrace::force_capture();\n-    let expected = format!(\"Error with two sources\n+    let expected = format!(\"\\\n+Error with two sources\n \n Caused by:\n-    0: The source of the error\n-    1: Error with backtrace\n+   0: The source of the error\n+   1: Error with backtrace\n \n Stack backtrace:\n {}\", trace);\n@@ -211,7 +216,8 @@ fn error_formats_single_line_with_rude_display_impl() {\n     let error = GenericError::new_with_source(MyMessage, error);\n     let error = GenericError::new_with_source(MyMessage, error);\n     let report = Report::new(error);\n-    let expected = r#\"line 1\n+    let expected = \"\\\n+line 1\n line 2\n line 3\n line 4\n@@ -231,7 +237,7 @@ line 2\n line 3\n line 4\n line 5\n-line 6\"#;\n+line 6\";\n \n     let actual = report.to_string();\n     assert_eq!(expected, actual);\n@@ -256,32 +262,32 @@ fn error_formats_multi_line_with_rude_display_impl() {\n     let error = GenericError::new_with_source(MyMessage, error);\n     let error = GenericError::new_with_source(MyMessage, error);\n     let report = Report::new(error).pretty(true);\n-    let expected = r#\"line 1\n+    let expected = \"line 1\n line 2\n line 3\n line 4\n line 5\n line 6\n \n Caused by:\n-    0: line 1\n-       line 2\n-       line 3\n-       line 4\n-       line 5\n-       line 6\n-    1: line 1\n-       line 2\n-       line 3\n-       line 4\n-       line 5\n-       line 6\n-    2: line 1\n-       line 2\n-       line 3\n-       line 4\n-       line 5\n-       line 6\"#;\n+   0: line 1\n+      line 2\n+      line 3\n+      line 4\n+      line 5\n+      line 6\n+   1: line 1\n+      line 2\n+      line 3\n+      line 4\n+      line 5\n+      line 6\n+   2: line 1\n+      line 2\n+      line 3\n+      line 4\n+      line 5\n+      line 6\";\n \n     let actual = report.to_string();\n     assert_eq!(expected, actual);\n@@ -302,19 +308,48 @@ fn errors_that_start_with_newline_formats_correctly() {\n     let error = GenericError::new_with_source(MyMessage, error);\n     let error = GenericError::new_with_source(MyMessage, error);\n     let report = Report::new(error).pretty(true);\n-    let expected = r#\"\n+    let expected = \"\n The message\n \n \n Caused by:\n-    0: \n-       The message\n-       \n-    1: \n-       The message\n-       \"#;\n+   0: \n+      The message\n+      \n+   1: \n+      The message\n+      \";\n+\n+    let actual = report.to_string();\n+    assert_eq!(expected, actual);\n+}\n+\n+#[test]\n+fn errors_with_multiple_writes_on_same_line_dont_insert_erroneous_newlines() {\n+    #[derive(Debug)]\n+    struct MyMessage;\n+\n+    impl fmt::Display for MyMessage {\n+        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+            f.write_str(\"The message\")?;\n+            f.write_str(\" goes on\")?;\n+            f.write_str(\" and on.\")\n+        }\n+    }\n+\n+    let error = GenericError::new(MyMessage);\n+    let error = GenericError::new_with_source(MyMessage, error);\n+    let error = GenericError::new_with_source(MyMessage, error);\n+    let report = Report::new(error).pretty(true);\n+    let expected = \"\\\n+The message goes on and on.\n+\n+Caused by:\n+   0: The message goes on and on.\n+   1: The message goes on and on.\";\n \n     let actual = report.to_string();\n+    println!(\"{}\", actual);\n     assert_eq!(expected, actual);\n }\n \n@@ -333,10 +368,11 @@ fn errors_with_string_interpolation_formats_correctly() {\n     let error = GenericError::new(MyMessage(10));\n     let error = GenericError::new_with_source(MyMessage(20), error);\n     let report = Report::new(error).pretty(true);\n-    let expected = r#\"Got an error code: (20). What would you like to do in response?\n+    let expected = \"\\\n+Got an error code: (20). What would you like to do in response?\n \n Caused by:\n-    Got an error code: (10). What would you like to do in response?\"#;\n+      Got an error code: (10). What would you like to do in response?\";\n     let actual = report.to_string();\n     assert_eq!(expected, actual);\n }\n@@ -356,17 +392,18 @@ fn empty_lines_mid_message() {\n     let error = GenericError::new_with_source(MyMessage, error);\n     let error = GenericError::new_with_source(MyMessage, error);\n     let report = Report::new(error).pretty(true);\n-    let expected = r#\"line 1\n+    let expected = \"\\\n+line 1\n \n line 2\n \n Caused by:\n-    0: line 1\n-       \n-       line 2\n-    1: line 1\n-       \n-       line 2\"#;\n+   0: line 1\n+      \n+      line 2\n+   1: line 1\n+      \n+      line 2\";\n \n     let actual = report.to_string();\n     assert_eq!(expected, actual);\n@@ -386,12 +423,13 @@ fn only_one_source() {\n     let error = GenericError::new(MyMessage);\n     let error = GenericError::new_with_source(MyMessage, error);\n     let report = Report::new(error).pretty(true);\n-    let expected = r#\"line 1\n+    let expected = \"\\\n+line 1\n line 2\n \n Caused by:\n-    line 1\n-    line 2\"#;\n+      line 1\n+      line 2\";\n \n     let actual = report.to_string();\n     assert_eq!(expected, actual);"}]}