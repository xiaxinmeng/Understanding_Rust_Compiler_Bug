{"sha": "00652e429aaa2250f2561a457e46387bb5b16737", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwNjUyZTQyOWFhYTIyNTBmMjU2MWE0NTdlNDYzODdiYjViMTY3Mzc=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-25T23:54:04Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-25T23:54:04Z"}, "message": "Handle `pub(super)`", "tree": {"sha": "6075ebdb8e588b975a9a38b6001195106f9f9a57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6075ebdb8e588b975a9a38b6001195106f9f9a57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/00652e429aaa2250f2561a457e46387bb5b16737", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/00652e429aaa2250f2561a457e46387bb5b16737", "html_url": "https://github.com/rust-lang/rust/commit/00652e429aaa2250f2561a457e46387bb5b16737", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/00652e429aaa2250f2561a457e46387bb5b16737/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50c1c27fa6adbb20ce61fce7caaea489e3984265", "url": "https://api.github.com/repos/rust-lang/rust/commits/50c1c27fa6adbb20ce61fce7caaea489e3984265", "html_url": "https://github.com/rust-lang/rust/commit/50c1c27fa6adbb20ce61fce7caaea489e3984265"}], "stats": {"total": 10, "additions": 9, "deletions": 1}, "files": [{"sha": "a8eae52fc565ef223480b1470ec75635cce4aa6b", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00652e429aaa2250f2561a457e46387bb5b16737/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00652e429aaa2250f2561a457e46387bb5b16737/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=00652e429aaa2250f2561a457e46387bb5b16737", "patch": "@@ -1097,12 +1097,20 @@ impl clean::Visibility {\n             clean::Inherited => Ok(()),\n \n             clean::Visibility::Restricted(vis_did) => {\n-                if find_closest_parent_module(tcx, item_did) == Some(vis_did) {\n+                let parent_module = find_closest_parent_module(tcx, item_did);\n+\n+                if parent_module == Some(vis_did) {\n                     // `pub(in foo)` where `foo` is the parent module\n                     // is the same as no visibility modifier\n                     Ok(())\n                 } else if vis_did.index == CRATE_DEF_INDEX {\n                     write!(f, \"pub(crate) \")\n+                } else if parent_module\n+                    .map(|parent| find_closest_parent_module(tcx, parent))\n+                    .flatten()\n+                    == Some(vis_did)\n+                {\n+                    write!(f, \"pub(super) \")\n                 } else {\n                     f.write_str(\"pub(\")?;\n                     let path = tcx.def_path(vis_did);"}]}