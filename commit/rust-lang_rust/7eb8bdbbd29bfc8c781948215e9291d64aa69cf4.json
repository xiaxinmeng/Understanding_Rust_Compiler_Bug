{"sha": "7eb8bdbbd29bfc8c781948215e9291d64aa69cf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYjhiZGJiZDI5YmZjOGM3ODE5NDgyMTVlOTI5MWQ2NGFhNjljZjQ=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-14T04:04:15Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-05-14T04:04:15Z"}, "message": "Format attributes with paths", "tree": {"sha": "b5d3c649e3bf8648fa39fa09e62ef7ec9194f63f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5d3c649e3bf8648fa39fa09e62ef7ec9194f63f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7eb8bdbbd29bfc8c781948215e9291d64aa69cf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7eb8bdbbd29bfc8c781948215e9291d64aa69cf4", "html_url": "https://github.com/rust-lang/rust/commit/7eb8bdbbd29bfc8c781948215e9291d64aa69cf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7eb8bdbbd29bfc8c781948215e9291d64aa69cf4/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "634ca02fd88093b2223dd24f4b3269109ef2a917", "url": "https://api.github.com/repos/rust-lang/rust/commits/634ca02fd88093b2223dd24f4b3269109ef2a917", "html_url": "https://github.com/rust-lang/rust/commit/634ca02fd88093b2223dd24f4b3269109ef2a917"}], "stats": {"total": 34, "additions": 25, "deletions": 9}, "files": [{"sha": "e754144a72795eebcd4a1f59e5a7b777adaa7b0c", "filename": "src/attr.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7eb8bdbbd29bfc8c781948215e9291d64aa69cf4/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb8bdbbd29bfc8c781948215e9291d64aa69cf4/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=7eb8bdbbd29bfc8c781948215e9291d64aa69cf4", "patch": "@@ -20,6 +20,7 @@ use expr::rewrite_literal;\n use lists::{itemize_list, write_list, ListFormatting};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n+use types::{rewrite_path, PathContext};\n use utils::{count_newlines, mk_sp};\n \n /// Returns attributes on the given statement.\n@@ -200,17 +201,19 @@ fn allow_mixed_tactic_for_nested_metaitem_list(list: &[ast::NestedMetaItem]) ->\n impl Rewrite for ast::MetaItem {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         Some(match self.node {\n-            ast::MetaItemKind::Word => String::from(&*self.name().as_str()),\n+            ast::MetaItemKind::Word => {\n+                rewrite_path(context, PathContext::Type, None, &self.ident, shape)?\n+            }\n             ast::MetaItemKind::List(ref list) => {\n-                let name = self.name().as_str();\n+                let path = rewrite_path(context, PathContext::Type, None, &self.ident, shape)?;\n                 let item_shape = match context.config.indent_style() {\n                     IndentStyle::Block => shape\n                         .block_indent(context.config.tab_spaces())\n                         .with_max_width(context.config),\n                     // 1 = `(`, 2 = `]` and `)`\n                     IndentStyle::Visual => shape\n                         .visual_indent(0)\n-                        .shrink_left(name.len() + 1)\n+                        .shrink_left(path.len() + 1)\n                         .and_then(|s| s.sub_width(2))?,\n                 };\n                 let items = itemize_list(\n@@ -248,21 +251,21 @@ impl Rewrite for ast::MetaItem {\n                 };\n                 let item_str = write_list(&item_vec, &fmt)?;\n                 // 3 = \"()\" and \"]\"\n-                let one_line_budget = shape.offset_left(name.len())?.sub_width(3)?.width;\n+                let one_line_budget = shape.offset_left(path.len())?.sub_width(3)?.width;\n                 if context.config.indent_style() == IndentStyle::Visual\n                     || (!item_str.contains('\\n') && item_str.len() <= one_line_budget)\n                 {\n-                    format!(\"{}({})\", name, item_str)\n+                    format!(\"{}({})\", path, item_str)\n                 } else {\n                     let indent = shape.indent.to_string_with_newline(context.config);\n                     let nested_indent = item_shape.indent.to_string_with_newline(context.config);\n-                    format!(\"{}({}{}{})\", name, nested_indent, item_str, indent)\n+                    format!(\"{}({}{}{})\", path, nested_indent, item_str, indent)\n                 }\n             }\n             ast::MetaItemKind::NameValue(ref literal) => {\n-                let name = self.name().as_str();\n+                let path = rewrite_path(context, PathContext::Type, None, &self.ident, shape)?;\n                 // 3 = ` = `\n-                let lit_shape = shape.shrink_left(name.len() + 3)?;\n+                let lit_shape = shape.shrink_left(path.len() + 3)?;\n                 // `rewrite_literal` returns `None` when `literal` exceeds max\n                 // width. Since a literal is basically unformattable unless it\n                 // is a string literal (and only if `format_strings` is set),\n@@ -271,7 +274,7 @@ impl Rewrite for ast::MetaItem {\n                 // See #2479 for example.\n                 let value = rewrite_literal(context, literal, lit_shape)\n                     .unwrap_or_else(|| context.snippet(literal.span).to_owned());\n-                format!(\"{} = {}\", name, value)\n+                format!(\"{} = {}\", path, value)\n             }\n         })\n     }"}, {"sha": "409e5f5a4a9c38ead6de4790f31c051d4e84ee83", "filename": "tests/source/attrib.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7eb8bdbbd29bfc8c781948215e9291d64aa69cf4/tests%2Fsource%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb8bdbbd29bfc8c781948215e9291d64aa69cf4/tests%2Fsource%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fattrib.rs?ref=7eb8bdbbd29bfc8c781948215e9291d64aa69cf4", "patch": "@@ -161,3 +161,10 @@ struct A { #[doc = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n // #2647\n #[cfg(feature = \"this_line_is_101_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\")]\n pub fn foo() {}\n+\n+// path attrs\n+#[clippy::bar]\n+#[clippy::bar=foo]\n+#[clippy::bar(a, b, c)]\n+pub fn foo() {}\n+"}, {"sha": "b0b8ea89f82a2e6bb6a6d558ac84e826a2180d4f", "filename": "tests/target/attrib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7eb8bdbbd29bfc8c781948215e9291d64aa69cf4/tests%2Ftarget%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7eb8bdbbd29bfc8c781948215e9291d64aa69cf4/tests%2Ftarget%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fattrib.rs?ref=7eb8bdbbd29bfc8c781948215e9291d64aa69cf4", "patch": "@@ -171,3 +171,9 @@ struct A {\n     feature = \"this_line_is_101_characters_long_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n )]\n pub fn foo() {}\n+\n+// path attrs\n+#[clippy::bar]\n+#[clippy::bar=foo]\n+#[clippy::bar(a, b, c)]\n+pub fn foo() {}"}]}