{"sha": "b83b26bacb6371173cdec6bf68c7ffa69f858c84", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4M2IyNmJhY2I2MzcxMTczY2RlYzZiZjY4YzdmZmE2OWY4NThjODQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-09T21:02:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-09T21:02:50Z"}, "message": "Auto merge of #22561 - richo:as_slice-as_str, r=Manishearth\n\n\r\nThis may not be quite ready to go out, I fixed some docs but suspect I missed a bunch.\r\n\r\nI also wound up fixing a bunch of redundant `[]` suffixes, but on closer inspection I don't believe that can land until after a snapshot.", "tree": {"sha": "5657bd41b93f00786469b3fade19ff617c14c673", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5657bd41b93f00786469b3fade19ff617c14c673"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b83b26bacb6371173cdec6bf68c7ffa69f858c84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b83b26bacb6371173cdec6bf68c7ffa69f858c84", "html_url": "https://github.com/rust-lang/rust/commit/b83b26bacb6371173cdec6bf68c7ffa69f858c84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b83b26bacb6371173cdec6bf68c7ffa69f858c84/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "638832e64cc62ec46721161ca19731ba00d4da58", "url": "https://api.github.com/repos/rust-lang/rust/commits/638832e64cc62ec46721161ca19731ba00d4da58", "html_url": "https://github.com/rust-lang/rust/commit/638832e64cc62ec46721161ca19731ba00d4da58"}, {"sha": "7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee", "html_url": "https://github.com/rust-lang/rust/commit/7981aa6ac9165b0bb1a5f624b8802192b8ebc9ee"}], "stats": {"total": 126, "additions": 63, "deletions": 63}, "files": [{"sha": "d2fcf27e93cdf540627bf9e2c2e1255183493882", "filename": "src/doc/style/errors/ergonomics.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fstyle%2Ferrors%2Fergonomics.md?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -22,9 +22,9 @@ fn write_info(info: &Info) -> Result<(), IoError> {\n     let mut file = File::open_mode(&Path::new(\"my_best_friends.txt\"),\n                                    Open, Write);\n     // Early return on error\n-    try!(file.write_line(format!(\"name: {}\", info.name).as_slice()));\n-    try!(file.write_line(format!(\"age: {}\", info.age).as_slice()));\n-    try!(file.write_line(format!(\"rating: {}\", info.rating).as_slice()));\n+    try!(file.write_line(&format!(\"name: {}\", info.name)));\n+    try!(file.write_line(&format!(\"age: {}\", info.age)));\n+    try!(file.write_line(&format!(\"rating: {}\", info.rating)));\n     return Ok(());\n }\n ```\n@@ -44,15 +44,15 @@ fn write_info(info: &Info) -> Result<(), IoError> {\n     let mut file = File::open_mode(&Path::new(\"my_best_friends.txt\"),\n                                    Open, Write);\n     // Early return on error\n-    match file.write_line(format!(\"name: {}\", info.name).as_slice()) {\n+    match file.write_line(&format!(\"name: {}\", info.name)) {\n         Ok(_) => (),\n         Err(e) => return Err(e)\n     }\n-    match file.write_line(format!(\"age: {}\", info.age).as_slice()) {\n+    match file.write_line(&format!(\"age: {}\", info.age)) {\n         Ok(_) => (),\n         Err(e) => return Err(e)\n     }\n-    return file.write_line(format!(\"rating: {}\", info.rating).as_slice());\n+    return file.write_line(&format!(\"rating: {}\", info.rating));\n }\n ```\n "}, {"sha": "15a66bd80d02b32507286f2f174448a5412e113e", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -198,7 +198,7 @@\n //!         // for details, and the function `pad` can be used to pad strings.\n //!         let decimals = f.precision().unwrap_or(3);\n //!         let string = f64::to_str_exact(magnitude, decimals);\n-//!         f.pad_integral(true, \"\", string.as_slice())\n+//!         f.pad_integral(true, \"\", &string)\n //!     }\n //! }\n //!"}, {"sha": "83c63e47e506b8d977032561f5e531875b8ac28e", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -139,7 +139,7 @@ impl String {\n     /// ```rust\n     /// let input = b\"Hello \\xF0\\x90\\x80World\";\n     /// let output = String::from_utf8_lossy(input);\n-    /// assert_eq!(output.as_slice(), \"Hello \\u{FFFD}World\");\n+    /// assert_eq!(output, \"Hello \\u{FFFD}World\");\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn from_utf8_lossy<'a>(v: &'a [u8]) -> Cow<'a, str> {\n@@ -355,7 +355,7 @@ impl String {\n     /// ```\n     /// let mut s = String::from_str(\"foo\");\n     /// s.push_str(\"bar\");\n-    /// assert_eq!(s.as_slice(), \"foobar\");\n+    /// assert_eq!(s, \"foobar\");\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -450,7 +450,7 @@ impl String {\n     /// s.push('1');\n     /// s.push('2');\n     /// s.push('3');\n-    /// assert_eq!(s.as_slice(), \"abc123\");\n+    /// assert_eq!(s, \"abc123\");\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -503,7 +503,7 @@ impl String {\n     /// ```\n     /// let mut s = String::from_str(\"hello\");\n     /// s.truncate(2);\n-    /// assert_eq!(s.as_slice(), \"he\");\n+    /// assert_eq!(s, \"he\");\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -622,7 +622,7 @@ impl String {\n     ///     assert!(vec == &[104, 101, 108, 108, 111]);\n     ///     vec.reverse();\n     /// }\n-    /// assert_eq!(s.as_slice(), \"olleh\");\n+    /// assert_eq!(s, \"olleh\");\n     /// ```\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "6c3afdf884953ad0966eef3707fb5404cdcbfc9a", "filename": "src/libcore/result.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -178,13 +178,13 @@\n //! fn write_info(info: &Info) -> Result<(), IoError> {\n //!     let mut file = File::open_mode(&Path::new(\"my_best_friends.txt\"), Open, Write);\n //!     // Early return on error\n-//!     if let Err(e) = file.write_line(format!(\"name: {}\", info.name).as_slice()) {\n+//!     if let Err(e) = file.write_line(&format!(\"name: {}\", info.name)) {\n //!         return Err(e)\n //!     }\n-//!     if let Err(e) = file.write_line(format!(\"age: {}\", info.age).as_slice()) {\n+//!     if let Err(e) = file.write_line(&format!(\"age: {}\", info.age)) {\n //!         return Err(e)\n //!     }\n-//!     return file.write_line(format!(\"rating: {}\", info.rating).as_slice());\n+//!     return file.write_line(&format!(\"rating: {}\", info.rating));\n //! }\n //! ```\n //!\n@@ -202,9 +202,9 @@\n //! fn write_info(info: &Info) -> Result<(), IoError> {\n //!     let mut file = File::open_mode(&Path::new(\"my_best_friends.txt\"), Open, Write);\n //!     // Early return on error\n-//!     try!(file.write_line(format!(\"name: {}\", info.name).as_slice()));\n-//!     try!(file.write_line(format!(\"age: {}\", info.age).as_slice()));\n-//!     try!(file.write_line(format!(\"rating: {}\", info.rating).as_slice()));\n+//!     try!(file.write_line(&format!(\"name: {}\", info.name)));\n+//!     try!(file.write_line(&format!(\"age: {}\", info.age)));\n+//!     try!(file.write_line(&format!(\"rating: {}\", info.rating)));\n //!     return Ok(());\n //! }\n //! ```"}, {"sha": "38abf3881bdf63aaac1c47e870c1d44e6bd5996b", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -46,7 +46,7 @@\n //!\n //! fn print_usage(program: &str, opts: &[OptGroup]) {\n //!     let brief = format!(\"Usage: {} [options]\", program);\n-//!     print!(\"{}\", usage(brief.as_slice(), opts));\n+//!     print!(\"{}\", usage(brief, opts));\n //! }\n //!\n //! fn main() {\n@@ -63,17 +63,17 @@\n //!         Err(f) => { panic!(f.to_string()) }\n //!     };\n //!     if matches.opt_present(\"h\") {\n-//!         print_usage(program.as_slice(), opts);\n+//!         print_usage(program, opts);\n //!         return;\n //!     }\n //!     let output = matches.opt_str(\"o\");\n //!     let input = if !matches.free.is_empty() {\n //!         matches.free[0].clone()\n //!     } else {\n-//!         print_usage(program.as_slice(), opts);\n+//!         print_usage(program, opts);\n //!         return;\n //!     };\n-//!     do_work(input.as_slice(), output);\n+//!     do_work(input, output);\n //! }\n //! ```\n "}, {"sha": "00a47ce17dae070a76d2a001265b1056563a9968", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -493,7 +493,7 @@ impl<'a> CrateReader<'a> {\n         };\n \n         let dylib = library.dylib.clone();\n-        let register = should_link && self.existing_match(info.name.as_slice(),\n+        let register = should_link && self.existing_match(&info.name,\n                                                           None,\n                                                           PathKind::Crate).is_none();\n         let metadata = if register {"}, {"sha": "40bba6fb0ac7cde29edb64d4533206971b2971b7", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -276,7 +276,7 @@ fn check_for_static_nan(cx: &MatchCheckCtxt, pat: &Pat) {\n                     let subspan = p.span.lo <= err.span.lo && err.span.hi <= p.span.hi;\n                     cx.tcx.sess.span_err(err.span,\n                                          &format!(\"constant evaluation error: {}\",\n-                                                  err.description().as_slice()));\n+                                                  err.description()));\n                     if !subspan {\n                         cx.tcx.sess.span_note(p.span,\n                                               \"in pattern here\")"}, {"sha": "f215b59a6cd0eda1bad552523440ab5c66c31eb6", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -204,7 +204,7 @@ pub fn const_expr_to_pat(tcx: &ty::ctxt, expr: &Expr, span: Span) -> P<ast::Pat>\n pub fn eval_const_expr(tcx: &ty::ctxt, e: &Expr) -> const_val {\n     match eval_const_expr_partial(tcx, e, None) {\n         Ok(r) => r,\n-        Err(s) => tcx.sess.span_fatal(s.span, s.description().as_slice())\n+        Err(s) => tcx.sess.span_fatal(s.span, &s.description())\n     }\n }\n \n@@ -665,14 +665,14 @@ pub fn compare_lit_exprs<'tcx>(tcx: &ty::ctxt<'tcx>,\n     let a = match eval_const_expr_partial(tcx, a, ty_hint) {\n         Ok(a) => a,\n         Err(e) => {\n-            tcx.sess.span_err(a.span, e.description().as_slice());\n+            tcx.sess.span_err(a.span, &e.description());\n             return None;\n         }\n     };\n     let b = match eval_const_expr_partial(tcx, b, ty_hint) {\n         Ok(b) => b,\n         Err(e) => {\n-            tcx.sess.span_err(b.span, e.description().as_slice());\n+            tcx.sess.span_err(b.span, &e.description());\n             return None;\n         }\n     };"}, {"sha": "014da6983b5b42ea612a6e2abf9cf703bfafa618", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -5485,7 +5485,7 @@ pub fn enum_variants<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)\n                                         Err(err) => {\n                                             span_err!(cx.sess, err.span, E0305,\n                                                       \"constant evaluation error: {}\",\n-                                                      err.description().as_slice());\n+                                                      err.description());\n                                         }\n                                     }\n                                 } else {"}, {"sha": "f41d969c1a271ccf5da0cba4ae20d3003b1f7316", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -115,7 +115,7 @@ pub fn explain_region_and_span(cx: &ctxt, region: ty::Region)\n             region::CodeExtent::Misc(_) => tag,\n             region::CodeExtent::DestructionScope(_) => {\n                 new_string = format!(\"destruction scope surrounding {}\", tag);\n-                new_string.as_slice()\n+                &*new_string\n             }\n             region::CodeExtent::Remainder(r) => {\n                 new_string = format!(\"block suffix following statement {}\","}, {"sha": "0367130c1320fe3e65fc8b430a2d34ec69b81f30", "filename": "src/librustc_bitflags/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_bitflags%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_bitflags%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_bitflags%2Flib.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -86,7 +86,7 @@\n ///     let mut flags = FLAG_A | FLAG_B;\n ///     flags.clear();\n ///     assert!(flags.is_empty());\n-///     assert_eq!(format!(\"{:?}\", flags).as_slice(), \"hi!\");\n+///     assert_eq!(format!(\"{:?}\", flags), \"hi!\");\n /// }\n /// ```\n ///"}, {"sha": "b176d8d4118a394cf2186a27c976d9c8ce0d6e99", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -704,9 +704,9 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         self.tcx\n             .sess\n             .span_err(span,\n-                      (format!(\"partial reinitialization of uninitialized \\\n+                      &format!(\"partial reinitialization of uninitialized \\\n                                structure `{}`\",\n-                               self.loan_path_to_string(lp))).as_slice());\n+                               self.loan_path_to_string(lp)));\n     }\n \n     pub fn report_reassigned_immutable_variable(&self,"}, {"sha": "c24f170a381c6c92a3512614ec97fdecad799042", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -2080,7 +2080,7 @@ impl LintPass for InvalidNoMangleItems {\n                        !cx.exported_items.contains(&it.id) {\n                     let msg = format!(\"static {} is marked #[no_mangle], but not exported\",\n                                       it.ident);\n-                    cx.span_lint(PRIVATE_NO_MANGLE_STATICS, it.span, msg.as_slice());\n+                    cx.span_lint(PRIVATE_NO_MANGLE_STATICS, it.span, &msg);\n                 }\n             },\n             ast::ItemConst(..) => {"}, {"sha": "2c7a9bf8020c3f324602f7d7089511979b6f1c7a", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -1404,7 +1404,7 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n                         ast_ty.span.lo <= r.span.lo && r.span.hi <= ast_ty.span.hi;\n                     span_err!(tcx.sess, r.span, E0250,\n                               \"array length constant evaluation error: {}\",\n-                              r.description().as_slice());\n+                              r.description());\n                     if !subspan {\n                         span_note!(tcx.sess, ast_ty.span, \"for array length here\")\n                     }"}, {"sha": "9c48ac43ee468bb94c38cd3adb65b4766202981b", "filename": "src/librustc_typeck/check/dropck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdropck.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -298,8 +298,8 @@ fn iterate_over_potentially_unsafe_regions_in_type<'a, 'tcx>(\n                 match rcx.tcx().region_maps.opt_encl_scope(scope) {\n                     Some(parent_scope) => ty::ReScope(parent_scope),\n                     None => rcx.tcx().sess.span_bug(\n-                        span, format!(\"no enclosing scope found for scope: {:?}\",\n-                                      scope).as_slice()),\n+                        span, &format!(\"no enclosing scope found for scope: {:?}\",\n+                                       scope)),\n                 };\n \n             regionck::type_must_outlive(rcx, origin(), typ, parent_region);"}, {"sha": "44500ce0bbb7f01aed30d960944d14ac4059c409", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -4620,7 +4620,7 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n                         Err(ref err) => {\n                             span_err!(ccx.tcx.sess, err.span, E0080,\n                                       \"constant evaluation error: {}\",\n-                                      err.description().as_slice());\n+                                      err.description());\n                         }\n                     }\n                 },"}, {"sha": "e1bcad2af37d627f0590fd5cf216d508f39b6df5", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -963,9 +963,9 @@ fn check_safety_of_rvalue_destructor_if_necessary<'a, 'tcx>(rcx: &mut Rcx<'a, 't\n                     rcx.tcx()\n                        .sess\n                        .span_bug(span,\n-                                 format!(\"unexpected rvalue region in rvalue \\\n-                                          destructor safety checking: `{}`\",\n-                                         region.repr(rcx.tcx())).as_slice());\n+                                 &format!(\"unexpected rvalue region in rvalue \\\n+                                           destructor safety checking: `{}`\",\n+                                          region.repr(rcx.tcx())));\n                 }\n             }\n         }"}, {"sha": "32bd40ebda2de26d944e12a4130752af65419405", "filename": "src/librustc_typeck/check/wf.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwf.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -411,9 +411,9 @@ impl<'ccx, 'tcx> CheckTypeWellFormedVisitor<'ccx, 'tcx> {\n             Some(def_id) => {\n                 self.tcx().sess.fileline_help(\n                     span,\n-                    format!(\"consider removing `{}` or using a marker such as `{}`\",\n-                            param_name.user_string(self.tcx()),\n-                            ty::item_path_str(self.tcx(), def_id)).as_slice());\n+                    &format!(\"consider removing `{}` or using a marker such as `{}`\",\n+                             param_name.user_string(self.tcx()),\n+                             ty::item_path_str(self.tcx(), def_id)));\n             }\n             None => {\n                 // no lang items, no help!"}, {"sha": "460af67001989d83ad39304ad258e612b5da251a", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -1590,8 +1590,8 @@ fn compute_type_scheme_of_item<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n         ast::ItemMac(..) => {\n             tcx.sess.span_bug(\n                 it.span,\n-                format!(\"compute_type_scheme_of_item: unexpected item type: {:?}\",\n-                        it.node).as_slice());\n+                &format!(\"compute_type_scheme_of_item: unexpected item type: {:?}\",\n+                         it.node));\n         }\n     }\n }"}, {"sha": "6fc56522c6af1dbaa7198a214416b4388535449d", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -188,7 +188,7 @@\n //!     let json_str: String = json_obj.to_string();\n //!\n //!     // Deserialize like before\n-//!     let decoded: TestStruct = json::decode(json_str.as_slice()).unwrap();\n+//!     let decoded: TestStruct = json::decode(json_str)).unwrap();\n //! }\n //! ```\n "}, {"sha": "b2ef04a5d632c2e82a3de7f32d2d787ba9e404d3", "filename": "src/libstd/env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -780,8 +780,8 @@ mod tests {\n             i += 1;\n         }\n         let n = make_rand_name();\n-        set_var(&n, s.as_slice());\n-        eq(var_os(&n), Some(s.as_slice()));\n+        set_var(&n, &s);\n+        eq(var_os(&n), Some(&s));\n     }\n \n     #[test]\n@@ -799,7 +799,7 @@ mod tests {\n         let n = make_rand_name();\n         let s = repeat(\"x\").take(10000).collect::<String>();\n         set_var(&n, &s);\n-        eq(var_os(&n), Some(s.as_slice()));\n+        eq(var_os(&n), Some(&s));\n         remove_var(&n);\n         eq(var_os(&n), None);\n     }"}, {"sha": "9f9163eb9e69f1fdb5aa1379afe362d9dbdaac9c", "filename": "src/libstd/fs/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibstd%2Ffs%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibstd%2Ffs%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs%2Fmod.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -828,7 +828,7 @@ mod tests {\n     macro_rules! error { ($e:expr, $s:expr) => (\n         match $e {\n             Ok(_) => panic!(\"Unexpected success. Should've been: {:?}\", $s),\n-            Err(ref err) => assert!(err.to_string().contains($s.as_slice()),\n+            Err(ref err) => assert!(err.to_string().contains($s),\n                                     format!(\"`{}` did not contain `{}`\", err, $s))\n         }\n     ) }\n@@ -880,7 +880,7 @@ mod tests {\n                 -1|0 => panic!(\"shouldn't happen\"),\n                 n => str::from_utf8(&read_buf[..n]).unwrap().to_string()\n             };\n-            assert_eq!(read_str.as_slice(), message);\n+            assert_eq!(read_str, message);\n         }\n         check!(fs::remove_file(filename));\n     }\n@@ -1107,7 +1107,7 @@ mod tests {\n                 check!(check!(File::open(&f)).read(&mut mem));\n                 let read_str = str::from_utf8(&mem).unwrap();\n                 let expected = format!(\"{}{}\", prefix, n.to_str().unwrap());\n-                assert_eq!(expected.as_slice(), read_str);\n+                assert_eq!(expected, read_str);\n             }\n             check!(fs::remove_file(&f));\n         }"}, {"sha": "ec4fcec5556223d98fc73eef43e3ef90d3b2ef29", "filename": "src/libstd/process.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -812,7 +812,7 @@ mod tests {\n         for (ref k, ref v) in env::vars() {\n             // don't check windows magical empty-named variables\n             assert!(k.is_empty() ||\n-                    output.contains(format!(\"{}={}\", *k, *v).as_slice()),\n+                    output.contains(&format!(\"{}={}\", *k, *v)),\n                     \"output doesn't contain `{}={}`\\n{}\",\n                     k, v, output);\n         }\n@@ -830,12 +830,12 @@ mod tests {\n         for &(ref k, ref v) in &r {\n             // don't check android RANDOM variables\n             if *k != \"RANDOM\".to_string() {\n-                assert!(output.contains(format!(\"{}={}\",\n-                                                *k,\n-                                                *v).as_slice()) ||\n-                        output.contains(format!(\"{}=\\'{}\\'\",\n-                                                *k,\n-                                                *v).as_slice()));\n+                assert!(output.contains(&format!(\"{}={}\",\n+                                                 *k,\n+                                                 *v)) ||\n+                        output.contains(&format!(\"{}=\\'{}\\'\",\n+                                                 *k,\n+                                                 *v)));\n             }\n         }\n     }"}, {"sha": "7d0df679591079e8fa6d149973c0a58de5e30eba", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -284,7 +284,7 @@ impl Builder {\n                 stack::record_os_managed_stack_bounds(my_stack_bottom, my_stack_top);\n             }\n             match their_thread.name() {\n-                Some(name) => unsafe { imp::set_name(name.as_slice()); },\n+                Some(name) => unsafe { imp::set_name(name); },\n                 None => {}\n             }\n             thread_info::set("}, {"sha": "c3bac0cf57c758cb8921f9f5185462db8b9a7b63", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -403,11 +403,11 @@ impl<'a> Context<'a> {\n                                for the compiler\");\n         } else {\n             self.gate_feature(\"custom_attribute\", attr.span,\n-                       format!(\"The attribute `{}` is currently \\\n+                       &format!(\"The attribute `{}` is currently \\\n                                 unknown to the the compiler and \\\n                                 may have meaning \\\n                                 added to it in the future\",\n-                                name).as_slice());\n+                                name));\n         }\n     }\n }"}, {"sha": "a6cb9fe0324d7d7c5cde512aa9ce39506a04a46e", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b83b26bacb6371173cdec6bf68c7ffa69f858c84/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=b83b26bacb6371173cdec6bf68c7ffa69f858c84", "patch": "@@ -80,7 +80,7 @@ fn main() {\n                          .arg(format!(\"{} {}\",\n                                       rustc,\n                                       main_file.as_str()\n-                                               .unwrap()).as_slice())\n+                                               .unwrap()))\n                          .output().unwrap();\n \n     let err = String::from_utf8_lossy(result.error.as_slice());"}]}