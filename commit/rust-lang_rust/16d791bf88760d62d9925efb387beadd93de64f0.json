{"sha": "16d791bf88760d62d9925efb387beadd93de64f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2ZDc5MWJmODg3NjBkNjJkOTkyNWVmYjM4N2JlYWRkOTNkZTY0ZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-05T19:25:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-07-05T19:25:10Z"}, "message": "Auto merge of #825 - RalfJung:no-null, r=RalfJung\n\navoid Scalar::is_null_ptr, it is going away\n\nComparing pointers should be done more carefully than that", "tree": {"sha": "2e8a1f006bb375f069802c1261446bf14b63f626", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e8a1f006bb375f069802c1261446bf14b63f626"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16d791bf88760d62d9925efb387beadd93de64f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16d791bf88760d62d9925efb387beadd93de64f0", "html_url": "https://github.com/rust-lang/rust/commit/16d791bf88760d62d9925efb387beadd93de64f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16d791bf88760d62d9925efb387beadd93de64f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3525943794d2fee5b8a55c1a7bd27afceea317e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3525943794d2fee5b8a55c1a7bd27afceea317e6", "html_url": "https://github.com/rust-lang/rust/commit/3525943794d2fee5b8a55c1a7bd27afceea317e6"}, {"sha": "698b311a596b5d141b0c42f1b5400adc1f11150f", "url": "https://api.github.com/repos/rust-lang/rust/commits/698b311a596b5d141b0c42f1b5400adc1f11150f", "html_url": "https://github.com/rust-lang/rust/commit/698b311a596b5d141b0c42f1b5400adc1f11150f"}], "stats": {"total": 90, "additions": 55, "deletions": 35}, "files": [{"sha": "3503af43690f996fc3e02ba57dfe51840bac2153", "filename": "src/helpers.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/16d791bf88760d62d9925efb387beadd93de64f0/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d791bf88760d62d9925efb387beadd93de64f0/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=16d791bf88760d62d9925efb387beadd93de64f0", "patch": "@@ -43,6 +43,28 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             })\n     }\n \n+    /// Write a 0 of the appropriate size to `dest`.\n+    fn write_null(&mut self, dest: PlaceTy<'tcx, Tag>) -> InterpResult<'tcx> {\n+        self.eval_context_mut().write_scalar(Scalar::from_int(0, dest.layout.size), dest)\n+    }\n+\n+    /// Test if this immediate equals 0.\n+    fn is_null(&self, val: Scalar<Tag>) -> InterpResult<'tcx, bool> {\n+        let this = self.eval_context_ref();\n+        let null = Scalar::from_int(0, this.memory().pointer_size());\n+        this.ptr_eq(val, null)\n+    }\n+\n+    /// Turn a Scalar into an Option<NonNullScalar>\n+    fn test_null(&self, val: Scalar<Tag>) -> InterpResult<'tcx, Option<Scalar<Tag>>> {\n+        let this = self.eval_context_ref();\n+        Ok(if this.is_null(val)? {\n+            None\n+        } else {\n+            Some(val)\n+        })\n+    }\n+\n     /// Visits the memory covered by `place`, sensitive to freezing: the 3rd parameter\n     /// will be true if this is frozen, false if this is in an `UnsafeCell`.\n     fn visit_freeze_sensitive("}, {"sha": "d43374f1bcf8908b71a8d31f371194f3e0ead101", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/16d791bf88760d62d9925efb387beadd93de64f0/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d791bf88760d62d9925efb387beadd93de64f0/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=16d791bf88760d62d9925efb387beadd93de64f0", "patch": "@@ -49,7 +49,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         ptr: Scalar<Tag>,\n     ) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        if !ptr.is_null_ptr(this) {\n+        if !this.is_null(ptr)? {\n             this.memory_mut().deallocate(\n                 ptr.to_ptr()?,\n                 None,\n@@ -66,7 +66,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, Scalar<Tag>> {\n         let this = self.eval_context_mut();\n         let align = this.min_align();\n-        if old_ptr.is_null_ptr(this) {\n+        if this.is_null(old_ptr)? {\n             if new_size == 0 {\n                 Ok(Scalar::from_int(0, this.pointer_size()))\n             } else {\n@@ -427,7 +427,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let mut success = None;\n                 {\n                     let name_ptr = this.read_scalar(args[0])?.not_undef()?;\n-                    if !name_ptr.is_null_ptr(this) {\n+                    if !this.is_null(name_ptr)? {\n                         let name_ptr = name_ptr.to_ptr()?;\n                         let name = this\n                             .memory()\n@@ -455,7 +455,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     let name_ptr = this.read_scalar(args[0])?.not_undef()?;\n                     let value_ptr = this.read_scalar(args[1])?.to_ptr()?;\n                     let value = this.memory().get(value_ptr.alloc_id)?.read_c_str(tcx, value_ptr)?;\n-                    if !name_ptr.is_null_ptr(this) {\n+                    if !this.is_null(name_ptr)? {\n                         let name_ptr = name_ptr.to_ptr()?;\n                         let name = this.memory().get(name_ptr.alloc_id)?.read_c_str(tcx, name_ptr)?;\n                         if !name.is_empty() && !name.contains(&b'=') {\n@@ -638,14 +638,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let key_ptr = this.read_scalar(args[0])?.not_undef()?;\n \n                 // Extract the function type out of the signature (that seems easier than constructing it ourselves).\n-                let dtor = match this.read_scalar(args[1])?.not_undef()? {\n-                    Scalar::Ptr(dtor_ptr) => Some(this.memory().get_fn(dtor_ptr)?),\n-                    Scalar::Raw { data: 0, size } => {\n-                        // NULL pointer\n-                        assert_eq!(size as u64, this.memory().pointer_size().bytes());\n-                        None\n-                    },\n-                    Scalar::Raw { .. } => return err!(ReadBytesAsPointer),\n+                let dtor = match this.test_null(this.read_scalar(args[1])?.not_undef()?)? {\n+                    Some(dtor_ptr) => Some(this.memory().get_fn(dtor_ptr.to_ptr()?)?),\n+                    None => None,\n                 };\n \n                 // Figure out how large a pthread TLS key actually is.\n@@ -657,7 +652,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let key_layout = this.layout_of(key_type)?;\n \n                 // Create key and write it into the memory where `key_ptr` wants it.\n-                let key = this.machine.tls.create_tls_key(dtor, tcx) as u128;\n+                let key = this.machine.tls.create_tls_key(dtor) as u128;\n                 if key_layout.size.bits() < 128 && key >= (1u128 << key_layout.size.bits() as u128) {\n                     return err!(OutOfTls);\n                 }\n@@ -682,13 +677,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"pthread_getspecific\" => {\n                 let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n-                let ptr = this.machine.tls.load_tls(key)?;\n+                let ptr = this.machine.tls.load_tls(key, tcx)?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"pthread_setspecific\" => {\n                 let key = this.read_scalar(args[0])?.to_bits(args[0].layout.size)?;\n                 let new_ptr = this.read_scalar(args[1])?.not_undef()?;\n-                this.machine.tls.store_tls(key, new_ptr)?;\n+                this.machine.tls.store_tls(key, this.test_null(new_ptr)?)?;\n \n                 // Return success (`0`).\n                 this.write_null(dest)?;\n@@ -842,7 +837,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // This just creates a key; Windows does not natively support TLS destructors.\n \n                 // Create key and return it.\n-                let key = this.machine.tls.create_tls_key(None, tcx) as u128;\n+                let key = this.machine.tls.create_tls_key(None) as u128;\n \n                 // Figure out how large a TLS key actually is. This is `c::DWORD`.\n                 if dest.layout.size.bits() < 128\n@@ -853,13 +848,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n             \"TlsGetValue\" => {\n                 let key = this.read_scalar(args[0])?.to_u32()? as u128;\n-                let ptr = this.machine.tls.load_tls(key)?;\n+                let ptr = this.machine.tls.load_tls(key, tcx)?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"TlsSetValue\" => {\n                 let key = this.read_scalar(args[0])?.to_u32()? as u128;\n                 let new_ptr = this.read_scalar(args[1])?.not_undef()?;\n-                this.machine.tls.store_tls(key, new_ptr)?;\n+                this.machine.tls.store_tls(key, this.test_null(new_ptr)?)?;\n \n                 // Return success (`1`).\n                 this.write_scalar(Scalar::from_int(1, dest.layout.size), dest)?;\n@@ -936,10 +931,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(())\n     }\n \n-    fn write_null(&mut self, dest: PlaceTy<'tcx, Tag>) -> InterpResult<'tcx> {\n-        self.eval_context_mut().write_scalar(Scalar::from_int(0, dest.layout.size), dest)\n-    }\n-\n     /// Evaluates the scalar at the specified path. Returns Some(val)\n     /// if the path could be resolved, and None otherwise\n     fn eval_path_scalar(&mut self, path: &[&str]) -> InterpResult<'tcx, Option<ScalarMaybeUndef<Tag>>> {"}, {"sha": "9a22c03bf2f69c68279131aae285455cde273641", "filename": "src/shims/tls.rs", "status": "modified", "additions": 20, "deletions": 13, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/16d791bf88760d62d9925efb387beadd93de64f0/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16d791bf88760d62d9925efb387beadd93de64f0/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=16d791bf88760d62d9925efb387beadd93de64f0", "patch": "@@ -6,13 +6,17 @@ use rustc::{ty, ty::layout::HasDataLayout, mir};\n use crate::{\n     InterpResult, InterpError, StackPopCleanup,\n     MPlaceTy, Scalar, Tag,\n+    HelpersEvalContextExt,\n };\n \n pub type TlsKey = u128;\n \n #[derive(Copy, Clone, Debug)]\n pub struct TlsEntry<'tcx> {\n-    pub(crate) data: Scalar<Tag>, // Will eventually become a map from thread IDs to `Scalar`s, if we ever support more than one thread.\n+    /// The data for this key. None is used to represent NULL.\n+    /// (We normalize this early to avoid having to do a NULL-ptr-test each time we access the data.)\n+    /// Will eventually become a map from thread IDs to `Scalar`s, if we ever support more than one thread.\n+    pub(crate) data: Option<Scalar<Tag>>,\n     pub(crate) dtor: Option<ty::Instance<'tcx>>,\n }\n \n@@ -38,14 +42,13 @@ impl<'tcx> TlsData<'tcx> {\n     pub fn create_tls_key(\n         &mut self,\n         dtor: Option<ty::Instance<'tcx>>,\n-        cx: &impl HasDataLayout,\n     ) -> TlsKey {\n         let new_key = self.next_key;\n         self.next_key += 1;\n         self.keys.insert(\n             new_key,\n             TlsEntry {\n-                data: Scalar::ptr_null(cx).into(),\n+                data: None,\n                 dtor,\n             },\n         );\n@@ -63,17 +66,21 @@ impl<'tcx> TlsData<'tcx> {\n         }\n     }\n \n-    pub fn load_tls(&mut self, key: TlsKey) -> InterpResult<'tcx, Scalar<Tag>> {\n+    pub fn load_tls(\n+        &mut self,\n+        key: TlsKey,\n+        cx: &impl HasDataLayout,\n+    ) -> InterpResult<'tcx, Scalar<Tag>> {\n         match self.keys.get(&key) {\n             Some(&TlsEntry { data, .. }) => {\n                 trace!(\"TLS key {} loaded: {:?}\", key, data);\n-                Ok(data)\n+                Ok(data.unwrap_or_else(|| Scalar::ptr_null(cx).into()))\n             }\n             None => err!(TlsOutOfBounds),\n         }\n     }\n \n-    pub fn store_tls(&mut self, key: TlsKey, new_data: Scalar<Tag>) -> InterpResult<'tcx> {\n+    pub fn store_tls(&mut self, key: TlsKey, new_data: Option<Scalar<Tag>>) -> InterpResult<'tcx> {\n         match self.keys.get_mut(&key) {\n             Some(&mut TlsEntry { ref mut data, .. }) => {\n                 trace!(\"TLS key {} stored: {:?}\", key, new_data);\n@@ -105,7 +112,6 @@ impl<'tcx> TlsData<'tcx> {\n     fn fetch_tls_dtor(\n         &mut self,\n         key: Option<TlsKey>,\n-        cx: &impl HasDataLayout,\n     ) -> Option<(ty::Instance<'tcx>, Scalar<Tag>, TlsKey)> {\n         use std::collections::Bound::*;\n \n@@ -117,10 +123,10 @@ impl<'tcx> TlsData<'tcx> {\n         for (&key, &mut TlsEntry { ref mut data, dtor }) in\n             thread_local.range_mut((start, Unbounded))\n         {\n-            if !data.is_null_ptr(cx) {\n+            if let Some(data_scalar) = *data {\n                 if let Some(dtor) = dtor {\n-                    let ret = Some((dtor, *data, key));\n-                    *data = Scalar::ptr_null(cx);\n+                    let ret = Some((dtor, data_scalar, key));\n+                    *data = None;\n                     return ret;\n                 }\n             }\n@@ -133,10 +139,11 @@ impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tc\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn run_tls_dtors(&mut self) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n-        let mut dtor = this.machine.tls.fetch_tls_dtor(None, &*this.tcx);\n+        let mut dtor = this.machine.tls.fetch_tls_dtor(None);\n         // FIXME: replace loop by some structure that works with stepping\n         while let Some((instance, ptr, key)) = dtor {\n             trace!(\"Running TLS dtor {:?} on {:?}\", instance, ptr);\n+            assert!(!this.is_null(ptr).unwrap(), \"Data can't be NULL when dtor is called!\");\n             // TODO: Potentially, this has to support all the other possible instances?\n             // See eval_fn_call in interpret/terminator/mod.rs\n             let mir = this.load_mir(instance.def)?;\n@@ -157,9 +164,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             // step until out of stackframes\n             this.run()?;\n \n-            dtor = match this.machine.tls.fetch_tls_dtor(Some(key), &*this.tcx) {\n+            dtor = match this.machine.tls.fetch_tls_dtor(Some(key)) {\n                 dtor @ Some(_) => dtor,\n-                None => this.machine.tls.fetch_tls_dtor(None, &*this.tcx),\n+                None => this.machine.tls.fetch_tls_dtor(None),\n             };\n         }\n         // FIXME: On a windows target, call `unsafe extern \"system\" fn on_tls_callback`."}]}