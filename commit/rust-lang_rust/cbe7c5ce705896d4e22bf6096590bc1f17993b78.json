{"sha": "cbe7c5ce705896d4e22bf6096590bc1f17993b78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiZTdjNWNlNzA1ODk2ZDRlMjJiZjYwOTY1OTBiYzFmMTc5OTNiNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-11T15:38:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-08-11T15:38:14Z"}, "message": "Auto merge of #73656 - oli-obk:deaggregate-is-cleanup, r=wesleywiser\n\nmove Deaggregate pass to post_borrowck_cleanup\n\nReopen of #71946\n\nOnly the second commit is from this PR, the other commit is a bugfix that's in the process of getting merged. I'll rebase once that's done\n\nIn #70073 MIR pass handling got reorganized, but with the goal of not changing behavior (except for disabling some optimizations on opt-level = 0). But there we realized that the Deaggregator pass, while conceptually more of a \"cleanup\" pass (and one that should be run before optimizations), was run in the middle of the optimization chain. Likely this is an accident of history, so I suggest we try and clean that up by making it a proper cleanup pass.\n\nThis does change mir-opt output, because deaggregation now runs before const-prop instead of after.\n\nr? @wesleywiser @rust-lang/wg-mir-opt\n\ncc @RalfJung", "tree": {"sha": "dea646c83fccb7d18cff63570bf0c3eb03ae77ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dea646c83fccb7d18cff63570bf0c3eb03ae77ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbe7c5ce705896d4e22bf6096590bc1f17993b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe7c5ce705896d4e22bf6096590bc1f17993b78", "html_url": "https://github.com/rust-lang/rust/commit/cbe7c5ce705896d4e22bf6096590bc1f17993b78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbe7c5ce705896d4e22bf6096590bc1f17993b78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b9ac5161781ca6a376daab3d3b2f2623d8f3789", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b9ac5161781ca6a376daab3d3b2f2623d8f3789", "html_url": "https://github.com/rust-lang/rust/commit/4b9ac5161781ca6a376daab3d3b2f2623d8f3789"}, {"sha": "307d0d8f51e65d83274ff61072e15401ab852496", "url": "https://api.github.com/repos/rust-lang/rust/commits/307d0d8f51e65d83274ff61072e15401ab852496", "html_url": "https://github.com/rust-lang/rust/commit/307d0d8f51e65d83274ff61072e15401ab852496"}], "stats": {"total": 1150, "additions": 793, "deletions": 357}, "files": [{"sha": "93624c32d300c7adc58e18b9629844832f660f2c", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -74,7 +74,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         Ok(true)\n     }\n \n-    fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> InterpResult<'tcx> {\n+    /// Runs the interpretation logic for the given `mir::Statement` at the current frame and\n+    /// statement counter. This also moves the statement counter forward.\n+    crate fn statement(&mut self, stmt: &mir::Statement<'tcx>) -> InterpResult<'tcx> {\n         info!(\"{:?}\", stmt);\n \n         use rustc_middle::mir::StatementKind::*;"}, {"sha": "6cf296f2a3fda043fa41245e2da740717a959ea4", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -252,6 +252,11 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine<'mir, 'tcx>\n             throw_machine_stop_str!(\"tried to write to a local that is marked as not propagatable\")\n         }\n         if frame == 0 && ecx.machine.only_propagate_inside_block_locals.contains(local) {\n+            trace!(\n+                \"mutating local {:?} which is restricted to its block. \\\n+                Will remove it from const-prop after block is finished.\",\n+                local\n+            );\n             ecx.machine.written_only_inside_own_block_locals.insert(local);\n         }\n         ecx.machine.stack[frame].locals[local].access_mut()\n@@ -427,6 +432,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         match f(self) {\n             Ok(val) => Some(val),\n             Err(error) => {\n+                trace!(\"InterpCx operation failed: {:?}\", error);\n                 // Some errors shouldn't come up because creating them causes\n                 // an allocation, which we should avoid. When that happens,\n                 // dedicated error variants should be introduced instead.\n@@ -969,10 +975,10 @@ impl<'tcx> Visitor<'tcx> for CanConstProp {\n                         ConstPropMode::OnlyPropagateInto => {}\n                         other @ ConstPropMode::FullConstProp => {\n                             trace!(\n-                                \"local {:?} can't be propagated because of multiple assignments\",\n-                                local,\n+                                \"local {:?} can't be propagated because of multiple assignments. Previous state: {:?}\",\n+                                local, other,\n                             );\n-                            *other = ConstPropMode::OnlyPropagateInto;\n+                            *other = ConstPropMode::OnlyInsideOwnBlock;\n                         }\n                     }\n                 }\n@@ -1089,6 +1095,20 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n             }\n         } else {\n             match statement.kind {\n+                StatementKind::SetDiscriminant { ref place, .. } => {\n+                    match self.ecx.machine.can_const_prop[place.local] {\n+                        ConstPropMode::FullConstProp | ConstPropMode::OnlyInsideOwnBlock => {\n+                            if self.use_ecx(|this| this.ecx.statement(statement)).is_some() {\n+                                trace!(\"propped discriminant into {:?}\", place);\n+                            } else {\n+                                Self::remove_const(&mut self.ecx, place.local);\n+                            }\n+                        }\n+                        ConstPropMode::OnlyPropagateInto | ConstPropMode::NoPropagation => {\n+                            Self::remove_const(&mut self.ecx, place.local);\n+                        }\n+                    }\n+                }\n                 StatementKind::StorageLive(local) | StatementKind::StorageDead(local) => {\n                     let frame = self.ecx.frame_mut();\n                     frame.locals[local].value ="}, {"sha": "3803ee78fd4d9e5543550ab9bea710c2fb8c6c59", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -408,6 +408,9 @@ fn run_post_borrowck_cleanup_passes<'tcx>(\n         // but before optimizations begin.\n         &add_retag::AddRetag,\n         &simplify::SimplifyCfg::new(\"elaborate-drops\"),\n+        // `Deaggregator` is conceptually part of MIR building, some backends rely on it happening\n+        // and it can help optimizations.\n+        &deaggregator::Deaggregator,\n     ];\n \n     run_passes(\n@@ -439,11 +442,6 @@ fn run_optimization_passes<'tcx>(\n         &instcombine::InstCombine,\n         &const_prop::ConstProp,\n         &simplify_branches::SimplifyBranches::new(\"after-const-prop\"),\n-        // Run deaggregation here because:\n-        //   1. Some codegen backends require it\n-        //   2. It creates additional possibilities for some MIR optimizations to trigger\n-        // FIXME(#70073): Why is this done here and not in `post_borrowck_cleanup`?\n-        &deaggregator::Deaggregator,\n         &simplify_try::SimplifyArmIdentity,\n         &simplify_try::SimplifyBranchSame,\n         &copy_prop::CopyPropagation,\n@@ -460,9 +458,6 @@ fn run_optimization_passes<'tcx>(\n         &generator::StateTransform,\n         // FIXME(#70073): This pass is responsible for both optimization as well as some lints.\n         &const_prop::ConstProp,\n-        // Even if we don't do optimizations, still run deaggregation because some backends assume\n-        // that deaggregation always occurs.\n-        &deaggregator::Deaggregator,\n     ];\n \n     let pre_codegen_cleanup: &[&dyn MirPass<'tcx>] = &["}, {"sha": "318f9b0eec3a98ea9da9e05641fbe8098b86cee3", "filename": "src/test/codegen/consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fcodegen%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fcodegen%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fconsts.rs?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -10,11 +10,11 @@\n // CHECK: @STATIC = {{.*}}, align 4\n \n // This checks the constants from inline_enum_const\n-// CHECK: @alloc7 = {{.*}}, align 2\n+// CHECK: @alloc8 = {{.*}}, align 2\n \n // This checks the constants from {low,high}_align_const, they share the same\n // constant, but the alignment differs, so the higher one should be used\n-// CHECK: [[LOW_HIGH:@[0-9]+]] = {{.*}} getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* @alloc19, i32 0, i32 0, i32 0), {{.*}}\n+// CHECK: [[LOW_HIGH:@[0-9]+]] = {{.*}} getelementptr inbounds (<{ [8 x i8] }>, <{ [8 x i8] }>* @alloc20, i32 0, i32 0, i32 0), {{.*}}\n \n #[derive(Copy, Clone)]\n // repr(i16) is required for the {low,high}_align_const test"}, {"sha": "6992abae6c2bec1fb62db7204950cb87b2c4c144", "filename": "src/test/mir-opt/const_prop/aggregate.main.ConstProp.diff", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Faggregate.main.ConstProp.diff?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -14,19 +14,21 @@\n           StorageLive(_1);                 // scope 0 at $DIR/aggregate.rs:5:9: 5:10\n           StorageLive(_2);                 // scope 0 at $DIR/aggregate.rs:5:13: 5:24\n           StorageLive(_3);                 // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n-          _3 = (const 0_i32, const 1_i32, const 2_i32); // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n+          (_3.0: i32) = const 0_i32;       // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000000))\n                                            // mir::Constant\n                                            // + span: $DIR/aggregate.rs:5:14: 5:15\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+          (_3.1: i32) = const 1_i32;       // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n                                            // + span: $DIR/aggregate.rs:5:17: 5:18\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          (_3.2: i32) = const 2_i32;       // scope 0 at $DIR/aggregate.rs:5:13: 5:22\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000002))"}, {"sha": "be9b24bfde8aa528d268a442dace154e2dd23d50", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.diff.32bit", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.32bit?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -15,19 +15,16 @@\n           StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:11:9: 11:10\n           StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n           StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n--         _3 = std::option::Option::<bool>::Some(const true); // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n-+         _3 = const std::option::Option::<bool>::Some(true); // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n+          ((_3 as Some).0: bool) = const true; // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n                                            // ty::Const\n--                                          // + ty: bool\n-+                                          // + ty: std::option::Option<bool>\n+                                           // + ty: bool\n                                            // + val: Value(Scalar(0x01))\n                                            // mir::Constant\n--                                          // + span: $DIR/discriminant.rs:11:39: 11:43\n--                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+                                           // + span: $DIR/discriminant.rs:11:39: 11:43\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          discriminant(_3) = 1;            // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n -         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n -         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n-+                                          // + span: $DIR/discriminant.rs:11:34: 11:44\n-+                                          // + literal: Const { ty: std::option::Option<bool>, val: Value(Scalar(0x01)) }\n +         _4 = const 1_isize;              // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +                                          // ty::Const\n +                                          // + ty: isize\n@@ -56,14 +53,7 @@\n       }\n   \n       bb2: {\n--         switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n-+         switchInt(const true) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:11:26: 11:30\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n       }\n   \n       bb3: {"}, {"sha": "05b57a6c280750a2329b44645f685d6aede04366", "filename": "src/test/mir-opt/const_prop/discriminant.main.ConstProp.diff.64bit", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fdiscriminant.main.ConstProp.diff.64bit?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -15,19 +15,16 @@\n           StorageLive(_1);                 // scope 0 at $DIR/discriminant.rs:11:9: 11:10\n           StorageLive(_2);                 // scope 0 at $DIR/discriminant.rs:11:13: 11:64\n           StorageLive(_3);                 // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n--         _3 = std::option::Option::<bool>::Some(const true); // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n-+         _3 = const std::option::Option::<bool>::Some(true); // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n+          ((_3 as Some).0: bool) = const true; // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n                                            // ty::Const\n--                                          // + ty: bool\n-+                                          // + ty: std::option::Option<bool>\n+                                           // + ty: bool\n                                            // + val: Value(Scalar(0x01))\n                                            // mir::Constant\n--                                          // + span: $DIR/discriminant.rs:11:39: 11:43\n--                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+                                           // + span: $DIR/discriminant.rs:11:39: 11:43\n+                                           // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          discriminant(_3) = 1;            // scope 0 at $DIR/discriminant.rs:11:34: 11:44\n -         _4 = discriminant(_3);           // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n -         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n-+                                          // + span: $DIR/discriminant.rs:11:34: 11:44\n-+                                          // + literal: Const { ty: std::option::Option<bool>, val: Value(Scalar(0x01)) }\n +         _4 = const 1_isize;              // scope 0 at $DIR/discriminant.rs:11:21: 11:31\n +                                          // ty::Const\n +                                          // + ty: isize\n@@ -56,14 +53,7 @@\n       }\n   \n       bb2: {\n--         switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n-+         switchInt(const true) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n-+                                          // ty::Const\n-+                                          // + ty: bool\n-+                                          // + val: Value(Scalar(0x01))\n-+                                          // mir::Constant\n-+                                          // + span: $DIR/discriminant.rs:11:26: 11:30\n-+                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n+          switchInt(((_3 as Some).0: bool)) -> [false: bb1, otherwise: bb3]; // scope 0 at $DIR/discriminant.rs:11:26: 11:30\n       }\n   \n       bb3: {"}, {"sha": "59e5b207f120ce2a713505e71a430e019916f269", "filename": "src/test/mir-opt/const_prop/issue_66971.main.ConstProp.diff", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_66971.main.ConstProp.diff?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -11,21 +11,22 @@\n           StorageLive(_1);                 // scope 0 at $DIR/issue-66971.rs:16:5: 16:23\n           StorageLive(_2);                 // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n           StorageLive(_3);                 // scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n--         _3 = ();                         // scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n-+         _3 = const ();                   // scope 0 at $DIR/issue-66971.rs:16:13: 16:15\n+-         (_2.0: ()) = move _3;            // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n++         (_2.0: ()) = const ();           // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n +                                          // ty::Const\n +                                          // + ty: ()\n +                                          // + val: Value(Scalar(<ZST>))\n +                                          // mir::Constant\n-+                                          // + span: $DIR/issue-66971.rs:16:13: 16:15\n++                                          // + span: $DIR/issue-66971.rs:16:12: 16:22\n +                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-          _2 = (move _3, const 0_u8, const 0_u8); // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n+          (_2.1: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n                                            // + span: $DIR/issue-66971.rs:16:17: 16:18\n                                            // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n+          (_2.2: u8) = const 0_u8;         // scope 0 at $DIR/issue-66971.rs:16:12: 16:22\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x00))"}, {"sha": "d3e5e9fe5b4226c902f1419a18399135e1ed3f19", "filename": "src/test/mir-opt/const_prop/issue_67019.main.ConstProp.diff", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fissue_67019.main.ConstProp.diff?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -11,22 +11,34 @@\n           StorageLive(_1);                 // scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n           StorageLive(_2);                 // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n           StorageLive(_3);                 // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n-          _3 = (const 1_u8, const 2_u8);   // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n+          (_3.0: u8) = const 1_u8;         // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x01))\n                                            // mir::Constant\n--                                          // + span: $DIR/issue-67019.rs:11:12: 11:13\n-+                                          // + span: $DIR/issue-67019.rs:11:11: 11:17\n+                                           // + span: $DIR/issue-67019.rs:11:12: 11:13\n                                            // + literal: Const { ty: u8, val: Value(Scalar(0x01)) }\n+          (_3.1: u8) = const 2_u8;         // scope 0 at $DIR/issue-67019.rs:11:11: 11:17\n                                            // ty::Const\n                                            // + ty: u8\n                                            // + val: Value(Scalar(0x02))\n                                            // mir::Constant\n--                                          // + span: $DIR/issue-67019.rs:11:15: 11:16\n-+                                          // + span: $DIR/issue-67019.rs:11:11: 11:17\n+                                           // + span: $DIR/issue-67019.rs:11:15: 11:16\n                                            // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n-          _2 = (move _3,);                 // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n+-         (_2.0: (u8, u8)) = move _3;      // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n++         (_2.0: (u8, u8)) = (const 1_u8, const 2_u8); // scope 0 at $DIR/issue-67019.rs:11:10: 11:19\n++                                          // ty::Const\n++                                          // + ty: u8\n++                                          // + val: Value(Scalar(0x01))\n++                                          // mir::Constant\n++                                          // + span: $DIR/issue-67019.rs:11:10: 11:19\n++                                          // + literal: Const { ty: u8, val: Value(Scalar(0x01)) }\n++                                          // ty::Const\n++                                          // + ty: u8\n++                                          // + val: Value(Scalar(0x02))\n++                                          // mir::Constant\n++                                          // + span: $DIR/issue-67019.rs:11:10: 11:19\n++                                          // + literal: Const { ty: u8, val: Value(Scalar(0x02)) }\n           StorageDead(_3);                 // scope 0 at $DIR/issue-67019.rs:11:18: 11:19\n           _1 = const test(move _2) -> bb1; // scope 0 at $DIR/issue-67019.rs:11:5: 11:20\n                                            // ty::Const"}, {"sha": "617702a520912631b20ef5b1cba7b80d1b261040", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate.main.ConstProp.diff?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -14,20 +14,19 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate.rs:5:9: 5:14\n-          _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n+          (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n--                                          // + span: $DIR/mutable_variable_aggregate.rs:5:18: 5:20\n-+                                          // + span: $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n+                                           // + span: $DIR/mutable_variable_aggregate.rs:5:18: 5:20\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n+          (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002b))\n                                            // mir::Constant\n--                                          // + span: $DIR/mutable_variable_aggregate.rs:5:22: 5:24\n-+                                          // + span: $DIR/mutable_variable_aggregate.rs:5:17: 5:25\n+                                           // + span: $DIR/mutable_variable_aggregate.rs:5:22: 5:24\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002b)) }\n           (_1.1: i32) = const 99_i32;      // scope 1 at $DIR/mutable_variable_aggregate.rs:6:5: 6:13\n                                            // ty::Const"}, {"sha": "dbf77cf6b378b7ba0f6c4683c2e9b5a52562965f", "filename": "src/test/mir-opt/const_prop/mutable_variable_aggregate_mut_ref.main.ConstProp.diff", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_aggregate_mut_ref.main.ConstProp.diff?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -18,13 +18,14 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:9: 5:14\n-          _1 = (const 42_i32, const 43_i32); // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n+          (_1.0: i32) = const 42_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002a))\n                                            // mir::Constant\n                                            // + span: $DIR/mutable_variable_aggregate_mut_ref.rs:5:18: 5:20\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x0000002a)) }\n+          (_1.1: i32) = const 43_i32;      // scope 0 at $DIR/mutable_variable_aggregate_mut_ref.rs:5:17: 5:25\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x0000002b))"}, {"sha": "84e858debddc0ea83d95138c99a521e269055ce4", "filename": "src/test/mir-opt/const_prop/mutable_variable_unprop_assign.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Fmutable_variable_unprop_assign.main.ConstProp.diff?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -34,20 +34,19 @@\n   \n       bb1: {\n           StorageLive(_2);                 // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:9: 6:14\n-          _2 = (const 1_i32, const 2_i32); // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n+          (_2.0: i32) = const 1_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n--                                          // + span: $DIR/mutable_variable_unprop_assign.rs:6:30: 6:31\n-+                                          // + span: $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n+                                           // + span: $DIR/mutable_variable_unprop_assign.rs:6:30: 6:31\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          (_2.1: i32) = const 2_i32;       // scope 1 at $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n                                            // ty::Const\n                                            // + ty: i32\n                                            // + val: Value(Scalar(0x00000002))\n                                            // mir::Constant\n--                                          // + span: $DIR/mutable_variable_unprop_assign.rs:6:33: 6:34\n-+                                          // + span: $DIR/mutable_variable_unprop_assign.rs:6:29: 6:35\n+                                           // + span: $DIR/mutable_variable_unprop_assign.rs:6:33: 6:34\n                                            // + literal: Const { ty: i32, val: Value(Scalar(0x00000002)) }\n           StorageLive(_3);                 // scope 2 at $DIR/mutable_variable_unprop_assign.rs:7:11: 7:12\n           _3 = _1;                         // scope 2 at $DIR/mutable_variable_unprop_assign.rs:7:11: 7:12"}, {"sha": "c2381f3da90dd7e6562b00e62174d81d4357b9a6", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.diff.32bit", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.32bit?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -173,13 +173,14 @@\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n           StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n-          _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+          (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000000c))\n                                            // mir::Constant\n                                            // + span: $DIR/optimizes_into_variable.rs:14:25: 14:27\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x0000000c)) }\n+          (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000002a))"}, {"sha": "bc965b4ade7305d0dcc30691c94cdb3433050b4f", "filename": "src/test/mir-opt/const_prop/optimizes_into_variable.main.ConstProp.diff.64bit", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Foptimizes_into_variable.main.ConstProp.diff.64bit?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -173,13 +173,14 @@\n           StorageDead(_4);                 // scope 1 at $DIR/optimizes_into_variable.rs:13:34: 13:35\n           StorageLive(_8);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:9: 14:10\n           StorageLive(_9);                 // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n-          _9 = Point { x: const 12_u32, y: const 42_u32 }; // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n+          (_9.0: u32) = const 12_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000000c))\n                                            // mir::Constant\n                                            // + span: $DIR/optimizes_into_variable.rs:14:25: 14:27\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x0000000c)) }\n+          (_9.1: u32) = const 42_u32;      // scope 2 at $DIR/optimizes_into_variable.rs:14:13: 14:36\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x0000002a))"}, {"sha": "e4a0ef27b24edbed8ee417b723d5f6f06e2a0233", "filename": "src/test/mir-opt/const_prop/tuple_literal_propagation.main.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop%2Ftuple_literal_propagation.main.ConstProp.diff?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -12,20 +12,19 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/tuple_literal_propagation.rs:3:9: 3:10\n-          _1 = (const 1_u32, const 2_u32); // scope 0 at $DIR/tuple_literal_propagation.rs:3:13: 3:19\n+          (_1.0: u32) = const 1_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:3:13: 3:19\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n--                                          // + span: $DIR/tuple_literal_propagation.rs:3:14: 3:15\n-+                                          // + span: $DIR/tuple_literal_propagation.rs:3:13: 3:19\n+                                           // + span: $DIR/tuple_literal_propagation.rs:3:14: 3:15\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+          (_1.1: u32) = const 2_u32;       // scope 0 at $DIR/tuple_literal_propagation.rs:3:13: 3:19\n                                            // ty::Const\n                                            // + ty: u32\n                                            // + val: Value(Scalar(0x00000002))\n                                            // mir::Constant\n--                                          // + span: $DIR/tuple_literal_propagation.rs:3:17: 3:18\n-+                                          // + span: $DIR/tuple_literal_propagation.rs:3:13: 3:19\n+                                           // + span: $DIR/tuple_literal_propagation.rs:3:17: 3:18\n                                            // + literal: Const { ty: u32, val: Value(Scalar(0x00000002)) }\n           StorageLive(_2);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:5: 5:15\n           StorageLive(_3);                 // scope 1 at $DIR/tuple_literal_propagation.rs:5:13: 5:14"}, {"sha": "b4733b5ed39f9684b9e0970a8aaa880f5d2e2be4", "filename": "src/test/mir-opt/const_prop_miscompile.bar.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.bar.ConstProp.diff?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -19,17 +19,13 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:12:9: 12:14\n--         _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:12:17: 12:21\n-+         _1 = const (1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:12:17: 12:21\n+          (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/const_prop_miscompile.rs:12:17: 12:21\n                                            // ty::Const\n--                                          // + ty: i32\n-+                                          // + ty: (i32,)\n+                                           // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n--                                          // + span: $DIR/const_prop_miscompile.rs:12:18: 12:19\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-+                                          // + span: $DIR/const_prop_miscompile.rs:12:17: 12:21\n-+                                          // + literal: Const { ty: (i32,), val: Value(Scalar(0x00000001)) }\n+                                           // + span: $DIR/const_prop_miscompile.rs:12:18: 12:19\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:13:5: 15:6\n           StorageLive(_3);                 // scope 2 at $DIR/const_prop_miscompile.rs:14:10: 14:22\n           _3 = &raw mut (_1.0: i32);       // scope 2 at $DIR/const_prop_miscompile.rs:14:10: 14:22"}, {"sha": "b54fc41d0b496af7bae2b9f5de07d95cad10cb0e", "filename": "src/test/mir-opt/const_prop_miscompile.foo.ConstProp.diff", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_prop_miscompile.foo.ConstProp.diff?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -16,17 +16,13 @@\n   \n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/const_prop_miscompile.rs:5:9: 5:14\n--         _1 = (const 1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:5:17: 5:21\n-+         _1 = const (1_i32,);             // scope 0 at $DIR/const_prop_miscompile.rs:5:17: 5:21\n+          (_1.0: i32) = const 1_i32;       // scope 0 at $DIR/const_prop_miscompile.rs:5:17: 5:21\n                                            // ty::Const\n--                                          // + ty: i32\n-+                                          // + ty: (i32,)\n+                                           // + ty: i32\n                                            // + val: Value(Scalar(0x00000001))\n                                            // mir::Constant\n--                                          // + span: $DIR/const_prop_miscompile.rs:5:18: 5:19\n--                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n-+                                          // + span: $DIR/const_prop_miscompile.rs:5:17: 5:21\n-+                                          // + literal: Const { ty: (i32,), val: Value(Scalar(0x00000001)) }\n+                                           // + span: $DIR/const_prop_miscompile.rs:5:18: 5:19\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           StorageLive(_2);                 // scope 1 at $DIR/const_prop_miscompile.rs:6:6: 6:14\n           _2 = &mut (_1.0: i32);           // scope 1 at $DIR/const_prop_miscompile.rs:6:6: 6:14\n           (*_2) = const 5_i32;             // scope 1 at $DIR/const_prop_miscompile.rs:6:5: 6:18"}, {"sha": "5f928ea2a16297a860a159299f107fe86d03cb66", "filename": "src/test/mir-opt/funky_arms.float_to_exponential_common.ConstProp.diff", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.float_to_exponential_common.ConstProp.diff?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -0,0 +1,162 @@\n+- // MIR for `float_to_exponential_common` before ConstProp\n++ // MIR for `float_to_exponential_common` after ConstProp\n+  \n+  fn float_to_exponential_common(_1: &mut std::fmt::Formatter, _2: &T, _3: bool) -> std::result::Result<(), std::fmt::Error> {\n+      debug fmt => _1;                     // in scope 0 at $DIR/funky_arms.rs:11:35: 11:38\n+      debug num => _2;                     // in scope 0 at $DIR/funky_arms.rs:11:60: 11:63\n+      debug upper => _3;                   // in scope 0 at $DIR/funky_arms.rs:11:69: 11:74\n+      let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at $DIR/funky_arms.rs:11:85: 11:91\n+      let _4: bool;                        // in scope 0 at $DIR/funky_arms.rs:15:9: 15:19\n+      let mut _5: &std::fmt::Formatter;    // in scope 0 at $DIR/funky_arms.rs:15:22: 15:25\n+      let mut _7: std::option::Option<usize>; // in scope 0 at $DIR/funky_arms.rs:24:30: 24:45\n+      let mut _8: &std::fmt::Formatter;    // in scope 0 at $DIR/funky_arms.rs:24:30: 24:33\n+      let mut _9: isize;                   // in scope 0 at $DIR/funky_arms.rs:24:12: 24:27\n+      let mut _11: &mut std::fmt::Formatter; // in scope 0 at $DIR/funky_arms.rs:26:43: 26:46\n+      let mut _12: &T;                     // in scope 0 at $DIR/funky_arms.rs:26:48: 26:51\n+      let mut _13: core::num::flt2dec::Sign; // in scope 0 at $DIR/funky_arms.rs:26:53: 26:57\n+      let mut _14: u32;                    // in scope 0 at $DIR/funky_arms.rs:26:59: 26:79\n+      let mut _15: u32;                    // in scope 0 at $DIR/funky_arms.rs:26:59: 26:75\n+      let mut _16: usize;                  // in scope 0 at $DIR/funky_arms.rs:26:59: 26:68\n+      let mut _17: bool;                   // in scope 0 at $DIR/funky_arms.rs:26:81: 26:86\n+      let mut _18: &mut std::fmt::Formatter; // in scope 0 at $DIR/funky_arms.rs:28:46: 28:49\n+      let mut _19: &T;                     // in scope 0 at $DIR/funky_arms.rs:28:51: 28:54\n+      let mut _20: core::num::flt2dec::Sign; // in scope 0 at $DIR/funky_arms.rs:28:56: 28:60\n+      let mut _21: bool;                   // in scope 0 at $DIR/funky_arms.rs:28:62: 28:67\n+      scope 1 {\n+          debug force_sign => _4;          // in scope 1 at $DIR/funky_arms.rs:15:9: 15:19\n+          let _6: core::num::flt2dec::Sign; // in scope 1 at $DIR/funky_arms.rs:19:9: 19:13\n+          scope 2 {\n+              debug sign => _6;            // in scope 2 at $DIR/funky_arms.rs:19:9: 19:13\n+              let _10: usize;              // in scope 2 at $DIR/funky_arms.rs:24:17: 24:26\n+              scope 3 {\n+                  debug precision => _10;  // in scope 3 at $DIR/funky_arms.rs:24:17: 24:26\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_4);                 // scope 0 at $DIR/funky_arms.rs:15:9: 15:19\n+          StorageLive(_5);                 // scope 0 at $DIR/funky_arms.rs:15:22: 15:25\n+          _5 = &(*_1);                     // scope 0 at $DIR/funky_arms.rs:15:22: 15:25\n+          _4 = const std::fmt::Formatter::sign_plus(move _5) -> bb1; // scope 0 at $DIR/funky_arms.rs:15:22: 15:37\n+                                           // ty::Const\n+                                           // + ty: for<'r> fn(&'r std::fmt::Formatter) -> bool {std::fmt::Formatter::sign_plus}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/funky_arms.rs:15:26: 15:35\n+                                           // + literal: Const { ty: for<'r> fn(&'r std::fmt::Formatter) -> bool {std::fmt::Formatter::sign_plus}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // scope 0 at $DIR/funky_arms.rs:15:36: 15:37\n+          StorageLive(_6);                 // scope 1 at $DIR/funky_arms.rs:19:9: 19:13\n+          switchInt(_4) -> [false: bb3, otherwise: bb2]; // scope 1 at $DIR/funky_arms.rs:20:9: 20:14\n+      }\n+  \n+      bb2: {\n+          discriminant(_6) = 2;            // scope 1 at $DIR/funky_arms.rs:21:17: 21:41\n+          goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:19:16: 22:6\n+      }\n+  \n+      bb3: {\n+          discriminant(_6) = 0;            // scope 1 at $DIR/funky_arms.rs:20:18: 20:38\n+          goto -> bb4;                     // scope 1 at $DIR/funky_arms.rs:19:16: 22:6\n+      }\n+  \n+      bb4: {\n+          StorageLive(_7);                 // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n+          StorageLive(_8);                 // scope 2 at $DIR/funky_arms.rs:24:30: 24:33\n+          _8 = &(*_1);                     // scope 2 at $DIR/funky_arms.rs:24:30: 24:33\n+          _7 = const std::fmt::Formatter::precision(move _8) -> bb5; // scope 2 at $DIR/funky_arms.rs:24:30: 24:45\n+                                           // ty::Const\n+                                           // + ty: for<'r> fn(&'r std::fmt::Formatter) -> std::option::Option<usize> {std::fmt::Formatter::precision}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/funky_arms.rs:24:34: 24:43\n+                                           // + literal: Const { ty: for<'r> fn(&'r std::fmt::Formatter) -> std::option::Option<usize> {std::fmt::Formatter::precision}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb5: {\n+          StorageDead(_8);                 // scope 2 at $DIR/funky_arms.rs:24:44: 24:45\n+          _9 = discriminant(_7);           // scope 2 at $DIR/funky_arms.rs:24:12: 24:27\n+          switchInt(move _9) -> [1_isize: bb7, otherwise: bb6]; // scope 2 at $DIR/funky_arms.rs:24:12: 24:27\n+      }\n+  \n+      bb6: {\n+          StorageLive(_18);                // scope 2 at $DIR/funky_arms.rs:28:46: 28:49\n+          _18 = &mut (*_1);                // scope 2 at $DIR/funky_arms.rs:28:46: 28:49\n+          StorageLive(_19);                // scope 2 at $DIR/funky_arms.rs:28:51: 28:54\n+          _19 = _2;                        // scope 2 at $DIR/funky_arms.rs:28:51: 28:54\n+          StorageLive(_20);                // scope 2 at $DIR/funky_arms.rs:28:56: 28:60\n+          _20 = _6;                        // scope 2 at $DIR/funky_arms.rs:28:56: 28:60\n+          StorageLive(_21);                // scope 2 at $DIR/funky_arms.rs:28:62: 28:67\n+          _21 = _3;                        // scope 2 at $DIR/funky_arms.rs:28:62: 28:67\n+          _0 = const float_to_exponential_common_shortest::<T>(move _18, move _19, move _20, move _21) -> bb9; // scope 2 at $DIR/funky_arms.rs:28:9: 28:68\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/funky_arms.rs:28:9: 28:45\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_shortest::<T>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb7: {\n+          StorageLive(_10);                // scope 2 at $DIR/funky_arms.rs:24:17: 24:26\n+          _10 = ((_7 as Some).0: usize);   // scope 2 at $DIR/funky_arms.rs:24:17: 24:26\n+          StorageLive(_11);                // scope 3 at $DIR/funky_arms.rs:26:43: 26:46\n+          _11 = &mut (*_1);                // scope 3 at $DIR/funky_arms.rs:26:43: 26:46\n+          StorageLive(_12);                // scope 3 at $DIR/funky_arms.rs:26:48: 26:51\n+          _12 = _2;                        // scope 3 at $DIR/funky_arms.rs:26:48: 26:51\n+          StorageLive(_13);                // scope 3 at $DIR/funky_arms.rs:26:53: 26:57\n+          _13 = _6;                        // scope 3 at $DIR/funky_arms.rs:26:53: 26:57\n+          StorageLive(_14);                // scope 3 at $DIR/funky_arms.rs:26:59: 26:79\n+          StorageLive(_15);                // scope 3 at $DIR/funky_arms.rs:26:59: 26:75\n+          StorageLive(_16);                // scope 3 at $DIR/funky_arms.rs:26:59: 26:68\n+          _16 = _10;                       // scope 3 at $DIR/funky_arms.rs:26:59: 26:68\n+          _15 = move _16 as u32 (Misc);    // scope 3 at $DIR/funky_arms.rs:26:59: 26:75\n+          StorageDead(_16);                // scope 3 at $DIR/funky_arms.rs:26:74: 26:75\n+          _14 = Add(move _15, const 1_u32); // scope 3 at $DIR/funky_arms.rs:26:59: 26:79\n+                                           // ty::Const\n+                                           // + ty: u32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/funky_arms.rs:26:78: 26:79\n+                                           // + literal: Const { ty: u32, val: Value(Scalar(0x00000001)) }\n+          StorageDead(_15);                // scope 3 at $DIR/funky_arms.rs:26:78: 26:79\n+          StorageLive(_17);                // scope 3 at $DIR/funky_arms.rs:26:81: 26:86\n+          _17 = _3;                        // scope 3 at $DIR/funky_arms.rs:26:81: 26:86\n+          _0 = const float_to_exponential_common_exact::<T>(move _11, move _12, move _13, move _14, move _17) -> bb8; // scope 3 at $DIR/funky_arms.rs:26:9: 26:87\n+                                           // ty::Const\n+                                           // + ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, u32, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/funky_arms.rs:26:9: 26:42\n+                                           // + literal: Const { ty: for<'r, 's, 't0> fn(&'r mut std::fmt::Formatter<'s>, &'t0 T, core::num::flt2dec::Sign, u32, bool) -> std::result::Result<(), std::fmt::Error> {float_to_exponential_common_exact::<T>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb8: {\n+          StorageDead(_17);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n+          StorageDead(_14);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n+          StorageDead(_13);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n+          StorageDead(_12);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n+          StorageDead(_11);                // scope 3 at $DIR/funky_arms.rs:26:86: 26:87\n+          StorageDead(_10);                // scope 2 at $DIR/funky_arms.rs:27:5: 27:6\n+          goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:24:5: 29:6\n+      }\n+  \n+      bb9: {\n+          StorageDead(_21);                // scope 2 at $DIR/funky_arms.rs:28:67: 28:68\n+          StorageDead(_20);                // scope 2 at $DIR/funky_arms.rs:28:67: 28:68\n+          StorageDead(_19);                // scope 2 at $DIR/funky_arms.rs:28:67: 28:68\n+          StorageDead(_18);                // scope 2 at $DIR/funky_arms.rs:28:67: 28:68\n+          goto -> bb10;                    // scope 2 at $DIR/funky_arms.rs:24:5: 29:6\n+      }\n+  \n+      bb10: {\n+          StorageDead(_6);                 // scope 1 at $DIR/funky_arms.rs:30:1: 30:2\n+          StorageDead(_4);                 // scope 0 at $DIR/funky_arms.rs:30:1: 30:2\n+          StorageDead(_7);                 // scope 0 at $DIR/funky_arms.rs:30:1: 30:2\n+          return;                          // scope 0 at $DIR/funky_arms.rs:30:2: 30:2\n+      }\n+  }\n+  "}, {"sha": "3e70d85e0d47fca3c705e68a6136d85076c47f43", "filename": "src/test/mir-opt/funky_arms.rs", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Ffunky_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Ffunky_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Ffunky_arms.rs?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -0,0 +1,56 @@\n+// compile-flags: --crate-type lib -Cdebug-assertions=no\n+\n+#![feature(flt2dec)]\n+\n+extern crate core;\n+\n+use core::num::flt2dec;\n+use std::fmt::{Formatter, Result};\n+\n+// EMIT_MIR funky_arms.float_to_exponential_common.ConstProp.diff\n+fn float_to_exponential_common<T>(fmt: &mut Formatter<'_>, num: &T, upper: bool) -> Result\n+where\n+    T: flt2dec::DecodableFloat,\n+{\n+    let force_sign = fmt.sign_plus();\n+    // A bug in const propagation (never reached master, but during dev of a PR) caused the\n+    // `sign = Minus` assignment to get propagated into all future reads of `sign`. This is\n+    // wrong because `sign` could also have `MinusPlus` value.\n+    let sign = match force_sign {\n+        false => flt2dec::Sign::Minus,\n+        true => flt2dec::Sign::MinusPlus,\n+    };\n+\n+    if let Some(precision) = fmt.precision() {\n+        // 1 integral digit + `precision` fractional digits = `precision + 1` total digits\n+        float_to_exponential_common_exact(fmt, num, sign, precision as u32 + 1, upper)\n+    } else {\n+        float_to_exponential_common_shortest(fmt, num, sign, upper)\n+    }\n+}\n+#[inline(never)]\n+fn float_to_exponential_common_exact<T>(\n+    fmt: &mut Formatter<'_>,\n+    num: &T,\n+    sign: flt2dec::Sign,\n+    precision: u32,\n+    upper: bool,\n+) -> Result\n+where\n+    T: flt2dec::DecodableFloat,\n+{\n+    unimplemented!()\n+}\n+\n+#[inline(never)]\n+fn float_to_exponential_common_shortest<T>(\n+    fmt: &mut Formatter<'_>,\n+    num: &T,\n+    sign: flt2dec::Sign,\n+    upper: bool,\n+) -> Result\n+where\n+    T: flt2dec::DecodableFloat,\n+{\n+    unimplemented!()\n+}"}, {"sha": "356470f8fec8765661a5319de819e1c977b882a7", "filename": "src/test/mir-opt/generator_storage_dead_unwind.main-{{closure}}.StateTransform.before.mir", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_storage_dead_unwind.main-%7B%7Bclosure%7D%7D.StateTransform.before.mir?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -21,15 +21,15 @@ yields ()\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:13: 23:14\n-        _3 = Foo(const 5_i32);           // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n+        (_3.0: i32) = const 5_i32;       // scope 0 at $DIR/generator-storage-dead-unwind.rs:23:17: 23:23\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000005))\n                                          // mir::Constant\n                                          // + span: $DIR/generator-storage-dead-unwind.rs:23:21: 23:22\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000005)) }\n         StorageLive(_4);                 // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:13: 24:14\n-        _4 = Bar(const 6_i32);           // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n+        (_4.0: i32) = const 6_i32;       // scope 1 at $DIR/generator-storage-dead-unwind.rs:24:17: 24:23\n                                          // ty::Const\n                                          // + ty: i32\n                                          // + val: Value(Scalar(0x00000006))\n@@ -38,7 +38,6 @@ yields ()\n                                          // + literal: Const { ty: i32, val: Value(Scalar(0x00000006)) }\n         StorageLive(_5);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n         StorageLive(_6);                 // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n-        _6 = ();                         // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n         _5 = yield(move _6) -> [resume: bb2, drop: bb4]; // scope 2 at $DIR/generator-storage-dead-unwind.rs:25:9: 25:14\n     }\n "}, {"sha": "41fc04774dbca3c44cbcc3c2d2711bb3b1823648", "filename": "src/test/mir-opt/generator_tiny.main-{{closure}}.generator_resume.0.mir", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_tiny.main-%7B%7Bclosure%7D%7D.generator_resume.0.mir?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -1,17 +1,13 @@\n // MIR for `main::{{closure}}#0` 0 generator_resume\n /* generator_layout = GeneratorLayout {\n-    field_tys: {\n-        _0: HasDrop,\n-    },\n+    field_tys: {},\n     variant_fields: {\n         Unresumed(0): [],\n         Returned (1): [],\n         Panicked (2): [],\n-        Suspend0 (3): [_0],\n-    },\n-    storage_conflicts: BitMatrix(1x1) {\n-        (_0, _0),\n+        Suspend0 (3): [],\n     },\n+    storage_conflicts: BitMatrix(0x0) {},\n } */\n \n fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}]>, _2: u8) -> std::ops::GeneratorState<(), ()> {\n@@ -27,7 +23,7 @@ fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:\n     let _10: u8;                         // in scope 0 at $DIR/generator-tiny.rs:19:17: 19:19\n     let mut _11: u32;                    // in scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n     scope 1 {\n-        debug _d => (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}])) as variant#3).0: HasDrop); // in scope 1 at $DIR/generator-tiny.rs:20:13: 20:15\n+        debug _d => _3;                  // in scope 1 at $DIR/generator-tiny.rs:20:13: 20:15\n     }\n \n     bb0: {\n@@ -37,16 +33,14 @@ fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:\n \n     bb1: {\n         _10 = move _2;                   // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n-        nop;                             // scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n-        (((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}])) as variant#3).0: HasDrop) = HasDrop; // scope 0 at $DIR/generator-tiny.rs:20:18: 20:25\n+        StorageLive(_3);                 // scope 0 at $DIR/generator-tiny.rs:20:13: 20:15\n         StorageLive(_4);                 // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n         goto -> bb2;                     // scope 1 at $DIR/generator-tiny.rs:21:9: 24:10\n     }\n \n     bb2: {\n         StorageLive(_6);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n         StorageLive(_7);                 // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n-        _7 = ();                         // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n         _0 = std::ops::GeneratorState::<(), ()>::Yielded(move _7); // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n         discriminant((*(_1.0: &mut [generator@$DIR/generator-tiny.rs:19:16: 25:6 {u8, HasDrop, ()}]))) = 3; // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n         return;                          // scope 1 at $DIR/generator-tiny.rs:22:13: 22:18\n@@ -78,6 +72,7 @@ fn main::{{closure}}#0(_1: std::pin::Pin<&mut [generator@$DIR/generator-tiny.rs:\n     }\n \n     bb5: {\n+        StorageLive(_3);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n         StorageLive(_4);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n         StorageLive(_6);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6\n         StorageLive(_7);                 // scope 0 at $DIR/generator-tiny.rs:19:16: 25:6"}, {"sha": "b40a8047c4185fc9b427ece12cf19876b8c5a49f", "filename": "src/test/mir-opt/inline/inline_closure.foo.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -21,23 +21,15 @@ fn foo(_1: T, _2: i32) -> i32 {\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/inline-closure.rs:11:9: 11:10\n-        _3 = [closure@foo::<T>::{{closure}}#0]; // scope 0 at $DIR/inline-closure.rs:11:13: 11:24\n-                                         // closure\n-                                         // + def_id: DefId(0:6 ~ inline_closure[317d]::foo[0]::{{closure}}[0])\n-                                         // + substs: [\n-                                         //     T,\n-                                         //     i8,\n-                                         //     extern \"rust-call\" fn((i32, i32)) -> i32,\n-                                         //     (),\n-                                         // ]\n         StorageLive(_4);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:6\n         _4 = &_3;                        // scope 1 at $DIR/inline-closure.rs:12:5: 12:6\n         StorageLive(_5);                 // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         StorageLive(_6);                 // scope 1 at $DIR/inline-closure.rs:12:7: 12:8\n         _6 = _2;                         // scope 1 at $DIR/inline-closure.rs:12:7: 12:8\n         StorageLive(_7);                 // scope 1 at $DIR/inline-closure.rs:12:10: 12:11\n         _7 = _2;                         // scope 1 at $DIR/inline-closure.rs:12:10: 12:11\n-        _5 = (move _6, move _7);         // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n+        (_5.0: i32) = move _6;           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n+        (_5.1: i32) = move _7;           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         _8 = move (_5.0: i32);           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         _9 = move (_5.1: i32);           // scope 1 at $DIR/inline-closure.rs:12:5: 12:12\n         _0 = _8;                         // scope 2 at $DIR/inline-closure.rs:11:22: 11:24"}, {"sha": "f6dd7413640394762083bef4796d73391d0c6f33", "filename": "src/test/mir-opt/inline/inline_closure_borrows_arg.foo.Inline.after.mir", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -24,23 +24,15 @@ fn foo(_1: T, _2: &i32) -> i32 {\n \n     bb0: {\n         StorageLive(_3);                 // scope 0 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n-        _3 = [closure@foo::<T>::{{closure}}#0]; // scope 0 at $DIR/inline-closure-borrows-arg.rs:12:13: 15:6\n-                                         // closure\n-                                         // + def_id: DefId(0:6 ~ inline_closure_borrows_arg[317d]::foo[0]::{{closure}}[0])\n-                                         // + substs: [\n-                                         //     T,\n-                                         //     i8,\n-                                         //     for<'r, 's> extern \"rust-call\" fn((&'r i32, &'s i32)) -> i32,\n-                                         //     (),\n-                                         // ]\n         StorageLive(_4);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n         _4 = &_3;                        // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:6\n         StorageLive(_5);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         StorageLive(_6);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n         _6 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:7: 16:8\n         StorageLive(_7);                 // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n         _7 = &(*_2);                     // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:10: 16:11\n-        _5 = (move _6, move _7);         // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        (_5.0: &i32) = move _6;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n+        (_5.1: &i32) = move _7;          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         _8 = move (_5.0: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         _9 = move (_5.1: &i32);          // scope 1 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n         _0 = (*_8);                      // scope 3 at $DIR/inline-closure-borrows-arg.rs:14:9: 14:18"}, {"sha": "e2b5d6567c29900602a8fb028df200c87f4f60e7", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -28,23 +28,16 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n         _4 = &_2;                        // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n         StorageLive(_5);                 // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n         _5 = &_1;                        // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-        _3 = [closure@foo::<T>::{{closure}}#0] { q: move _4, t: move _5 }; // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n-                                         // closure\n-                                         // + def_id: DefId(0:6 ~ inline_closure_captures[317d]::foo[0]::{{closure}}[0])\n-                                         // + substs: [\n-                                         //     T,\n-                                         //     i8,\n-                                         //     extern \"rust-call\" fn((i32,)) -> (i32, T),\n-                                         //     (&i32, &T),\n-                                         // ]\n+        (_3.0: &i32) = move _4;          // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n+        (_3.1: &T) = move _5;            // scope 0 at $DIR/inline-closure-captures.rs:11:13: 11:24\n         StorageDead(_5);                 // scope 0 at $DIR/inline-closure-captures.rs:11:23: 11:24\n         StorageDead(_4);                 // scope 0 at $DIR/inline-closure-captures.rs:11:23: 11:24\n         StorageLive(_6);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:6\n         _6 = &_3;                        // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:6\n         StorageLive(_7);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageLive(_8);                 // scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n         _8 = _2;                         // scope 1 at $DIR/inline-closure-captures.rs:12:7: 12:8\n-        _7 = (move _8,);                 // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n+        (_7.0: i32) = move _8;           // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         _11 = move (_7.0: i32);          // scope 1 at $DIR/inline-closure-captures.rs:12:5: 12:9\n         StorageLive(_9);                 // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20\n         _9 = (*((*_6).0: &i32));         // scope 2 at $DIR/inline-closure-captures.rs:11:19: 11:20"}, {"sha": "919c37a5fc34178a0b906f4d6da44cf92f31d5b3", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.diff.32bit", "status": "modified", "additions": 79, "deletions": 82, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.32bit?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -11,22 +11,20 @@\n       let mut _9: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _11: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _12: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _13: &std::fmt::Arguments;       // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let _14: std::fmt::Arguments;        // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let mut _15: &[&str];                // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _16: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let _17: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let _18: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let mut _19: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let mut _20: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _21: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _22: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _23: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _12: &std::fmt::Arguments;       // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _13: std::fmt::Arguments;        // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _14: &[&str];                // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _15: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _16: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _17: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _18: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _19: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _20: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _21: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _24: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _25: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _26: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n       let mut _27: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _28: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let mut _29: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _2;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _3: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n@@ -37,28 +35,28 @@\n               scope 4 {\n                   debug left_val => _7;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   debug right_val => _8;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _24: &&i32;          // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _25: &&i32;          // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _22: &&i32;          // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _23: &&i32;          // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug arg0 => _24;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      debug arg1 => _25;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      debug arg0 => _22;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      debug arg1 => _23;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       scope 6 {\n-                          debug x => _24;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          debug f => _27;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _30: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          let mut _31: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          debug x => _22;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          debug f => _25;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          let mut _28: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _29: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                       }\n                       scope 8 {\n-                          debug x => _25;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          debug f => _29;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _32: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          let mut _33: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          debug x => _23;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          debug f => _27;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          let mut _30: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _31: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n                       }\n                   }\n                   scope 10 {\n-                      debug pieces => _15; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      debug args => _16;   // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      let mut _34: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      debug pieces => _14; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                      debug args => _15;   // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                      let mut _32: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n                   }\n               }\n           }\n@@ -103,16 +101,18 @@\n           StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _7 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _8 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _11 = (*_7);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _12 = (*_8);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _10 = Eq(move _11, move _12);    // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _10 = Eq(move _11, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _9 = Not(move _10);              // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -121,7 +121,6 @@\n   \n       bb1: {\n           StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n@@ -136,40 +135,38 @@\n       }\n   \n       bb2: {\n-          StorageLive(_14);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _15 = const main::promoted[0] as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _14 = const main::promoted[0] as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n                                            // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n+          StorageLive(_17);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageLive(_18);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageLive(_19);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _20 = _7;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _19 = &_20;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_21);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _21 = _7;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _20 = &_21;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_22);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_23);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _23 = _8;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _22 = &_23;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_19.0: &&i32) = move _20;       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          (_19.1: &&i32) = move _22;       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageDead(_22);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageDead(_20);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _24 = (_19.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _25 = (_19.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_26);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _27 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _21 = &_8;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_18.0: &&i32) = move _19;       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_18.1: &&i32) = move _21;       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_21);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_19);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _22 = (_18.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _23 = (_18.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_24);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _25 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_30);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _30 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_28);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _28 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _25) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -179,8 +176,8 @@\n       }\n   \n       bb3: {\n-          StorageLive(_31);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _31 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _24) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_29);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _29 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _22) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -190,20 +187,20 @@\n       }\n   \n       bb4: {\n-          (_26.0: &core::fmt::Opaque) = move _31; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_26.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _30; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_31);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_30);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_28);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _29 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_24.0: &core::fmt::Opaque) = move _29; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_24.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _28; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_29);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_28);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_26);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _27 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_32);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _32 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _29) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_30);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _30 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -213,8 +210,8 @@\n       }\n   \n       bb5: {\n-          StorageLive(_33);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _33 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _25) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_31);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _31 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _23) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -224,23 +221,23 @@\n       }\n   \n       bb6: {\n-          (_28.0: &core::fmt::Opaque) = move _33; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_28.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _32; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_33);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_32);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _18 = [move _26, move _28];      // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageDead(_28);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_26.0: &core::fmt::Opaque) = move _31; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_26.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _30; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_31);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_30);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _17 = [move _24, move _26];      // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_26);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _17 = &_18;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _16 = move _17 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageLive(_34);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          discriminant(_34) = 0;           // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_14.0: &[&str]) = move _15;     // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_14.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _34; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_14.2: &[std::fmt::ArgumentV1]) = move _16; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_34);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _13 = &_14;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          const std::rt::begin_panic_fmt(move _13); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_24);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _16 = &_17;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _15 = move _16 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_32);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          discriminant(_32) = 0;           // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_13.0: &[&str]) = move _14;     // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_13.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _32; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_13.2: &[std::fmt::ArgumentV1]) = move _15; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_32);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _12 = &_13;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          const std::rt::begin_panic_fmt(move _12); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n                                            // + val: Value(Scalar(<ZST>))"}, {"sha": "919c37a5fc34178a0b906f4d6da44cf92f31d5b3", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.diff.64bit", "status": "modified", "additions": 79, "deletions": 82, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.diff.64bit?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -11,22 +11,20 @@\n       let mut _9: bool;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _10: bool;                   // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _11: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _12: i32;                    // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _13: &std::fmt::Arguments;       // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let _14: std::fmt::Arguments;        // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let mut _15: &[&str];                // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _16: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let _17: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let _18: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let mut _19: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let mut _20: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _21: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _22: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let _23: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _12: &std::fmt::Arguments;       // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _13: std::fmt::Arguments;        // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _14: &[&str];                // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _15: &[std::fmt::ArgumentV1]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _16: &[std::fmt::ArgumentV1; 2]; // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let _17: [std::fmt::ArgumentV1; 2];  // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _18: (&&i32, &&i32);         // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _19: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let _20: &i32;                       // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _21: &&i32;                  // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+      let mut _24: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n+      let mut _25: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       let mut _26: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n       let mut _27: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-      let mut _28: std::fmt::ArgumentV1;   // in scope 0 at $SRC_DIR/std/src/macros.rs:LL:COL\n-      let mut _29: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n       scope 1 {\n           debug split => _2;               // in scope 1 at $DIR/issue-73223.rs:2:9: 2:14\n           let _3: std::option::Option<i32>; // in scope 1 at $DIR/issue-73223.rs:7:9: 7:14\n@@ -37,28 +35,28 @@\n               scope 4 {\n                   debug left_val => _7;    // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   debug right_val => _8;   // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _24: &&i32;          // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                  let _25: &&i32;          // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _22: &&i32;          // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                  let _23: &&i32;          // in scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                   scope 5 {\n-                      debug arg0 => _24;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      debug arg1 => _25;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      debug arg0 => _22;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                      debug arg1 => _23;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       scope 6 {\n-                          debug x => _24;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          debug f => _27;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _30: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          let mut _31: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          debug x => _22;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          debug f => _25;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          let mut _28: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _29: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                       }\n                       scope 8 {\n-                          debug x => _25;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          debug f => _29;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                          let mut _32: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n-                          let mut _33: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          debug x => _23;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          debug f => _27;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                          let mut _30: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                          let mut _31: &core::fmt::Opaque; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n                       }\n                   }\n                   scope 10 {\n-                      debug pieces => _15; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      debug args => _16;   // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-                      let mut _34: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n+                      debug pieces => _14; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                      debug args => _15;   // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+                      let mut _32: std::option::Option<&[std::fmt::rt::v1::Argument]>; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL\n                   }\n               }\n           }\n@@ -103,16 +101,18 @@\n           StorageDead(_6);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _7 = (_5.0: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _8 = (_5.1: &i32);               // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _11 = (*_7);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _12 = (*_8);                     // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _10 = Eq(move _11, move _12);    // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_12);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _10 = Eq(move _11, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           StorageDead(_11);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _9 = Not(move _10);              // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_10);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n@@ -121,7 +121,6 @@\n   \n       bb1: {\n           StorageDead(_9);                 // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageDead(_8);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_7);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_5);                 // scope 3 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _0 = const ();                   // scope 0 at $DIR/issue-73223.rs:1:11: 9:2\n@@ -136,40 +135,38 @@\n       }\n   \n       bb2: {\n-          StorageLive(_14);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _15 = const main::promoted[0] as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_13);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _14 = const main::promoted[0] as &[&str] (Pointer(Unsize)); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: &[&str; 3]\n                                            // + val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0]))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: &[&str; 3], val: Unevaluated(WithOptConstParam { did: DefId(0:3 ~ issue_73223[317d]::main[0]), const_param_did: None }, [], Some(promoted[0])) }\n+          StorageLive(_17);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageLive(_18);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageLive(_19);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_19);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_20);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _20 = _7;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _19 = &_20;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_21);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _21 = _7;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _20 = &_21;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_22);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_23);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _23 = _8;                        // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _22 = &_23;                      // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          (_19.0: &&i32) = move _20;       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          (_19.1: &&i32) = move _22;       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageDead(_22);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageDead(_20);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _24 = (_19.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _25 = (_19.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          StorageLive(_26);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _27 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _21 = &_8;                       // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_18.0: &&i32) = move _19;       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_18.1: &&i32) = move _21;       // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_21);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_19);                // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _22 = (_18.0: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _23 = (_18.1: &&i32);            // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          StorageLive(_24);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _25 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_30);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _30 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_28);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _28 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _25) -> bb3; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -179,8 +176,8 @@\n       }\n   \n       bb3: {\n-          StorageLive(_31);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _31 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _24) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_29);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _29 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _22) -> bb4; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -190,20 +187,20 @@\n       }\n   \n       bb4: {\n-          (_26.0: &core::fmt::Opaque) = move _31; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_26.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _30; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_31);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_30);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageLive(_28);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _29 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          (_24.0: &core::fmt::Opaque) = move _29; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_24.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _28; // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_29);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_28);                // scope 7 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_26);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _27 = const <&i32 as std::fmt::Debug>::fmt as for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> (Pointer(ReifyFnPointer)); // scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}\n                                            // + val: Value(Scalar(<ZST>))\n                                            // mir::Constant\n                                            // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                                            // + literal: Const { ty: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {<&i32 as std::fmt::Debug>::fmt}, val: Value(Scalar(<ZST>)) }\n-          StorageLive(_32);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _32 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _29) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_30);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _30 = const std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>(move _27) -> bb5; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: unsafe extern \"rust-intrinsic\" fn(for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) -> for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error> {std::intrinsics::transmute::<for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>, for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>>}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -213,8 +210,8 @@\n       }\n   \n       bb5: {\n-          StorageLive(_33);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _33 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _25) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageLive(_31);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _31 = const std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>(move _23) -> bb6; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: unsafe extern \"rust-intrinsic\" fn(&&i32) -> &core::fmt::Opaque {std::intrinsics::transmute::<&&i32, &core::fmt::Opaque>}\n                                            // + val: Value(Scalar(<ZST>))\n@@ -224,23 +221,23 @@\n       }\n   \n       bb6: {\n-          (_28.0: &core::fmt::Opaque) = move _33; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_28.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _32; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_33);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_32);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _18 = [move _26, move _28];      // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageDead(_28);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          (_26.0: &core::fmt::Opaque) = move _31; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_26.1: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>) = move _30; // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_31);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_30);                // scope 9 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _17 = [move _24, move _26];      // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n           StorageDead(_26);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _17 = &_18;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          _16 = move _17 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          StorageLive(_34);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          discriminant(_34) = 0;           // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_14.0: &[&str]) = move _15;     // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_14.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _34; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          (_14.2: &[std::fmt::ArgumentV1]) = move _16; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          StorageDead(_34);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n-          _13 = &_14;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n-          const std::rt::begin_panic_fmt(move _13); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageDead(_24);                // scope 5 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _16 = &_17;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          _15 = move _16 as &[std::fmt::ArgumentV1] (Pointer(Unsize)); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          StorageLive(_32);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          discriminant(_32) = 0;           // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_13.0: &[&str]) = move _14;     // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_13.1: std::option::Option<&[std::fmt::rt::v1::Argument]>) = move _32; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          (_13.2: &[std::fmt::ArgumentV1]) = move _15; // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          StorageDead(_32);                // scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n+          _12 = &_13;                      // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n+          const std::rt::begin_panic_fmt(move _12); // scope 4 at $SRC_DIR/std/src/macros.rs:LL:COL\n                                            // ty::Const\n                                            // + ty: for<'r, 's> fn(&'r std::fmt::Arguments<'s>) -> ! {std::rt::begin_panic_fmt}\n                                            // + val: Value(Scalar(<ZST>))"}, {"sha": "28d949be271e8984514b8adc1ce1e4ee5488e3c9", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff.32bit", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.32bit?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -165,8 +165,20 @@\n           StorageLive(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _17 = (*_13);                    // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = (*_14);                    // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = Eq(move _17, move _18);    // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = const 1_i32;               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          _16 = Eq(move _17, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           StorageDead(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _15 = Not(move _16);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "2b854850deaf1d376c5f26212eb451716a5d443e", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.diff.64bit", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.diff.64bit?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -165,8 +165,20 @@\n           StorageLive(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _17 = (*_13);                    // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageLive(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _18 = (*_14);                    // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-          _16 = Eq(move _17, move _18);    // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+          _18 = const 1_i32;               // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          _16 = Eq(move _17, const 1_i32); // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $SRC_DIR/core/src/macros/mod.rs:LL:COL\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n           StorageDead(_18);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           StorageDead(_17);                // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n           _15 = Not(move _16);             // scope 4 at $SRC_DIR/core/src/macros/mod.rs:LL:COL"}, {"sha": "b7b239ea414d6f6b8ce64e94819059f163e1b095", "filename": "src/test/mir-opt/simplify_arm_identity.main.SimplifyArmIdentity.diff.32bit", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.32bit?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -39,13 +39,14 @@\n       }\n   \n       bb1: {\n-          _2 = const Dst::Foo(0_u8);       // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n+          ((_2 as Foo).0: u8) = const 0_u8; // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n                                            // ty::Const\n-                                           // + ty: Dst\n+                                           // + ty: u8\n                                            // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-arm-identity.rs:21:21: 21:32\n-                                           // + literal: Const { ty: Dst, val: Value(Scalar(0x00)) }\n+                                           // + span: $DIR/simplify-arm-identity.rs:21:30: 21:31\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n+          discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n       }\n   "}, {"sha": "34282526da0fa920f05d7fab3b1724014353ad87", "filename": "src/test/mir-opt/simplify_arm_identity.main.SimplifyArmIdentity.diff.64bit", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm_identity.main.SimplifyArmIdentity.diff.64bit?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -39,13 +39,14 @@\n       }\n   \n       bb1: {\n-          _2 = const Dst::Foo(0_u8);       // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n+          ((_2 as Foo).0: u8) = const 0_u8; // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n                                            // ty::Const\n-                                           // + ty: Dst\n+                                           // + ty: u8\n                                            // + val: Value(Scalar(0x00))\n                                            // mir::Constant\n-                                           // + span: $DIR/simplify-arm-identity.rs:21:21: 21:32\n-                                           // + literal: Const { ty: Dst, val: Value(Scalar(0x00)) }\n+                                           // + span: $DIR/simplify-arm-identity.rs:21:30: 21:31\n+                                           // + literal: Const { ty: u8, val: Value(Scalar(0x00)) }\n+          discriminant(_2) = 0;            // scope 1 at $DIR/simplify-arm-identity.rs:21:21: 21:32\n           goto -> bb4;                     // scope 1 at $DIR/simplify-arm-identity.rs:19:18: 22:6\n       }\n   "}, {"sha": "8b5936116b3a734237b94b98321b6e19adc21dbc", "filename": "src/test/mir-opt/simplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "status": "modified", "additions": 14, "deletions": 28, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_consts.main.SimplifyLocals.diff?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -22,58 +22,44 @@\n       bb0: {\n -         StorageLive(_1);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n -         StorageLive(_2);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n--         _2 = const ();                   // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n+-         StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n+-         (_1.0: ()) = const ();           // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n +         StorageLive(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n +         _1 = const use_zst(const ((), ())) -> bb1; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n                                            // ty::Const\n -                                          // + ty: ()\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:13:21: 13:23\n+-                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         StorageLive(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n--         _3 = const ();                   // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n+-         (_1.1: ()) = const ();           // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n -                                          // ty::Const\n -                                          // + ty: ()\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:13:25: 13:27\n--                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         _1 = const ((), ());             // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n--                                          // ty::Const\n--                                          // + ty: ((), ())\n--                                          // + val: Value(Scalar(<ZST>))\n--                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:13:20: 13:28\n--                                          // + literal: Const { ty: ((), ()), val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         StorageDead(_3);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:27: 13:28\n -         StorageDead(_2);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:27: 13:28\n -         StorageDead(_1);                 // scope 0 at $DIR/simplify-locals-removes-unused-consts.rs:13:28: 13:29\n -         StorageLive(_4);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n -         StorageLive(_5);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n -         StorageLive(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n--         _6 = const ();                   // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n--                                          // ty::Const\n--                                          // + ty: ()\n--                                          // + val: Value(Scalar(<ZST>))\n--                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:14: 14:16\n--                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         StorageLive(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:18: 14:20\n--         _7 = const ();                   // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:18: 14:20\n+-         (_5.0: ()) = const ();           // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n -                                          // ty::Const\n -                                          // + ty: ()\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:18: 14:20\n+-                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n -                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n--         _5 = const ((), ());             // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n+-         (_5.1: ()) = const ();           // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n -                                          // ty::Const\n--                                          // + ty: ((), ())\n+-                                          // + ty: ()\n -                                          // + val: Value(Scalar(<ZST>))\n -                                          // mir::Constant\n -                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:14:13: 14:21\n--                                          // + literal: Const { ty: ((), ()), val: Value(Scalar(<ZST>)) }\n+-                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n -         StorageDead(_7);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n -         StorageDead(_6);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:20: 14:21\n -         _4 = const use_zst(const ((), ())) -> bb1; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:5: 14:22\n@@ -98,16 +84,16 @@\n -         StorageLive(_9);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:34\n -         StorageLive(_10);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -         StorageLive(_11);                // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n--         _11 = const Temp { x: 40_u8 };   // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n+-         (_11.0: u8) = const 40_u8;       // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n +         StorageDead(_1);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:14:22: 14:23\n +         StorageLive(_2);                 // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n +         _2 = const use_u8(const 42_u8) -> bb2; // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:5: 16:35\n                                            // ty::Const\n--                                          // + ty: Temp\n+-                                          // + ty: u8\n -                                          // + val: Value(Scalar(0x28))\n -                                          // mir::Constant\n--                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:28\n--                                          // + literal: Const { ty: Temp, val: Value(Scalar(0x28)) }\n+-                                          // + span: $DIR/simplify-locals-removes-unused-consts.rs:16:23: 16:25\n+-                                          // + literal: Const { ty: u8, val: Value(Scalar(0x28)) }\n -         _10 = const 40_u8;               // scope 1 at $DIR/simplify-locals-removes-unused-consts.rs:16:12: 16:30\n -                                          // ty::Const\n -                                          // + ty: u8"}, {"sha": "0bd13e009ddc8117e56269eefbc4e544579d1d22", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.32bit", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.32bit?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -39,13 +39,7 @@\n       }\n   \n       bb2: {\n-          _0 = const std::option::Option::<std::boxed::Box<()>>::None; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n-                                           // ty::Const\n-                                           // + ty: std::option::Option<std::boxed::Box<()>>\n-                                           // + val: Value(Scalar(0x00000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n-                                           // + literal: Const { ty: std::option::Option<std::boxed::Box<()>>, val: Value(Scalar(0x00000000)) }\n+          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n           goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n       }\n   "}, {"sha": "0bd13e009ddc8117e56269eefbc4e544579d1d22", "filename": "src/test/mir-opt/simplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.64bit", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_locals_removes_unused_discriminant_reads.map.SimplifyLocals.diff.64bit?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -39,13 +39,7 @@\n       }\n   \n       bb2: {\n-          _0 = const std::option::Option::<std::boxed::Box<()>>::None; // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n-                                           // ty::Const\n-                                           // + ty: std::option::Option<std::boxed::Box<()>>\n-                                           // + val: Value(Scalar(0x0000000000000000))\n-                                           // mir::Constant\n-                                           // + span: $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n-                                           // + literal: Const { ty: std::option::Option<std::boxed::Box<()>>, val: Value(Scalar(0x0000000000000000)) }\n+          discriminant(_0) = 0;            // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:3:17: 3:21\n           goto -> bb3;                     // scope 0 at $DIR/simplify-locals-removes-unused-discriminant-reads.rs:2:5: 5:6\n       }\n   "}, {"sha": "24fd26591bd82872558ed38c66417157a932e18a", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.SimplifyCfg-after-uninhabited-enum-branching.after.mir?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -15,7 +15,7 @@ fn main() -> () {\n     bb0: {\n         StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n         StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n-        _2 = Test1::C;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+        discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n         _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n         StorageLive(_5);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n         _5 = const \"C\";                  // scope 0 at $DIR/uninhabited_enum_branching.rs:23:21: 23:24\n@@ -31,7 +31,7 @@ fn main() -> () {\n         StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n         StorageLive(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n         StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n-        _7 = Test2::D;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+        discriminant(_7) = 0;            // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n         _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n         switchInt(move _8) -> [4_isize: bb2, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n     }"}, {"sha": "7e0a95edf3e7d9325705ae0da47e7401e54601a6", "filename": "src/test/mir-opt/uninhabited_enum_branching.main.UninhabitedEnumBranching.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Funinhabited_enum_branching.main.UninhabitedEnumBranching.diff?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -16,7 +16,7 @@\n       bb0: {\n           StorageLive(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:5: 24:6\n           StorageLive(_2);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n-          _2 = Test1::C;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n+          discriminant(_2) = 2;            // scope 0 at $DIR/uninhabited_enum_branching.rs:20:11: 20:19\n           _3 = discriminant(_2);           // scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n -         switchInt(move _3) -> [0_isize: bb2, 1_isize: bb3, otherwise: bb1]; // scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n +         switchInt(move _3) -> bb1;       // scope 0 at $DIR/uninhabited_enum_branching.rs:21:9: 21:20\n@@ -66,7 +66,7 @@\n           StorageDead(_1);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:24:6: 24:7\n           StorageLive(_6);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:5: 29:6\n           StorageLive(_7);                 // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n-          _7 = Test2::D;                   // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n+          discriminant(_7) = 0;            // scope 0 at $DIR/uninhabited_enum_branching.rs:26:11: 26:19\n           _8 = discriminant(_7);           // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n           switchInt(move _8) -> [4_isize: bb6, otherwise: bb5]; // scope 0 at $DIR/uninhabited_enum_branching.rs:27:9: 27:17\n       }"}, {"sha": "ff98b0e32268a22103fdc1ab18d51c732f91e5b1", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.diff.32bit", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.32bit?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -0,0 +1,84 @@\n+- // MIR for `change_loop_body` before ConstProp\n++ // MIR for `change_loop_body` after ConstProp\n+  \n+  fn change_loop_body() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/while_let_loops.rs:5:27: 5:27\n+      let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n+      let mut _2: ();                      // in scope 0 at $DIR/while_let_loops.rs:5:1: 11:2\n+      let mut _3: std::option::Option<u32>; // in scope 0 at $DIR/while_let_loops.rs:7:28: 7:32\n+      let mut _4: isize;                   // in scope 0 at $DIR/while_let_loops.rs:7:15: 7:25\n+      let mut _5: !;                       // in scope 0 at $DIR/while_let_loops.rs:7:33: 10:6\n+      let mut _6: !;                       // in scope 0 at $DIR/while_let_loops.rs:7:5: 10:6\n+      scope 1 {\n+          debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:6:9: 6:15\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n+          _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/while_let_loops.rs:6:18: 6:19\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+          StorageLive(_3);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n+          discriminant(_3) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n+-         _4 = discriminant(_3);           // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n+-         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n++         _4 = const 0_isize;              // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n++                                          // ty::Const\n++                                          // + ty: isize\n++                                          // + val: Value(Scalar(0x00000000))\n++                                          // mir::Constant\n++                                          // + span: $DIR/while_let_loops.rs:7:15: 7:25\n++                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000000)) }\n++         switchInt(const 0_isize) -> [1_isize: bb2, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n++                                          // ty::Const\n++                                          // + ty: isize\n++                                          // + val: Value(Scalar(0x00000000))\n++                                          // mir::Constant\n++                                          // + span: $DIR/while_let_loops.rs:7:15: 7:25\n++                                          // + literal: Const { ty: isize, val: Value(Scalar(0x00000000)) }\n+      }\n+  \n+      bb1: {\n+          _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/while_let_loops.rs:7:5: 10:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          goto -> bb4;                     // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n+      }\n+  \n+      bb2: {\n+          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb3, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:20: 7:24\n+      }\n+  \n+      bb3: {\n+          _1 = const 1_i32;                // scope 1 at $DIR/while_let_loops.rs:8:9: 8:15\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/while_let_loops.rs:8:14: 8:15\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/while_let_loops.rs:9:9: 9:14\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          goto -> bb4;                     // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n+      }\n+  \n+      bb4: {\n+          StorageDead(_3);                 // scope 1 at $DIR/while_let_loops.rs:10:5: 10:6\n+          StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:11:1: 11:2\n+          return;                          // scope 0 at $DIR/while_let_loops.rs:11:2: 11:2\n+      }\n+  }\n+  "}, {"sha": "612d44f413fe715579a9c025c135fd3701b640cd", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.ConstProp.diff.64bit", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.ConstProp.diff.64bit?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -0,0 +1,84 @@\n+- // MIR for `change_loop_body` before ConstProp\n++ // MIR for `change_loop_body` after ConstProp\n+  \n+  fn change_loop_body() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/while_let_loops.rs:5:27: 5:27\n+      let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n+      let mut _2: ();                      // in scope 0 at $DIR/while_let_loops.rs:5:1: 11:2\n+      let mut _3: std::option::Option<u32>; // in scope 0 at $DIR/while_let_loops.rs:7:28: 7:32\n+      let mut _4: isize;                   // in scope 0 at $DIR/while_let_loops.rs:7:15: 7:25\n+      let mut _5: !;                       // in scope 0 at $DIR/while_let_loops.rs:7:33: 10:6\n+      let mut _6: !;                       // in scope 0 at $DIR/while_let_loops.rs:7:5: 10:6\n+      scope 1 {\n+          debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:6:9: 6:15\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n+          _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000000))\n+                                           // mir::Constant\n+                                           // + span: $DIR/while_let_loops.rs:6:18: 6:19\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+          StorageLive(_3);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n+          discriminant(_3) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n+-         _4 = discriminant(_3);           // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n+-         switchInt(move _4) -> [1_isize: bb2, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n++         _4 = const 0_isize;              // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n++                                          // ty::Const\n++                                          // + ty: isize\n++                                          // + val: Value(Scalar(0x0000000000000000))\n++                                          // mir::Constant\n++                                          // + span: $DIR/while_let_loops.rs:7:15: 7:25\n++                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000000)) }\n++         switchInt(const 0_isize) -> [1_isize: bb2, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:15: 7:25\n++                                          // ty::Const\n++                                          // + ty: isize\n++                                          // + val: Value(Scalar(0x0000000000000000))\n++                                          // mir::Constant\n++                                          // + span: $DIR/while_let_loops.rs:7:15: 7:25\n++                                          // + literal: Const { ty: isize, val: Value(Scalar(0x0000000000000000)) }\n+      }\n+  \n+      bb1: {\n+          _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/while_let_loops.rs:7:5: 10:6\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          goto -> bb4;                     // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n+      }\n+  \n+      bb2: {\n+          switchInt(((_3 as Some).0: u32)) -> [0_u32: bb3, otherwise: bb1]; // scope 1 at $DIR/while_let_loops.rs:7:20: 7:24\n+      }\n+  \n+      bb3: {\n+          _1 = const 1_i32;                // scope 1 at $DIR/while_let_loops.rs:8:9: 8:15\n+                                           // ty::Const\n+                                           // + ty: i32\n+                                           // + val: Value(Scalar(0x00000001))\n+                                           // mir::Constant\n+                                           // + span: $DIR/while_let_loops.rs:8:14: 8:15\n+                                           // + literal: Const { ty: i32, val: Value(Scalar(0x00000001)) }\n+          _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n+                                           // ty::Const\n+                                           // + ty: ()\n+                                           // + val: Value(Scalar(<ZST>))\n+                                           // mir::Constant\n+                                           // + span: $DIR/while_let_loops.rs:9:9: 9:14\n+                                           // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+          goto -> bb4;                     // scope 1 at $DIR/while_let_loops.rs:9:9: 9:14\n+      }\n+  \n+      bb4: {\n+          StorageDead(_3);                 // scope 1 at $DIR/while_let_loops.rs:10:5: 10:6\n+          StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:11:1: 11:2\n+          return;                          // scope 0 at $DIR/while_let_loops.rs:11:2: 11:2\n+      }\n+  }\n+  "}, {"sha": "f6fe12489199daf378f4cf4c65df0f502b2030ca", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.mir.32bit", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.32bit", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.32bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.32bit?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -0,0 +1,33 @@\n+// MIR for `change_loop_body` after PreCodegen\n+\n+fn change_loop_body() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/while_let_loops.rs:5:27: 5:27\n+    let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n+    let mut _2: std::option::Option<u32>; // in scope 0 at $DIR/while_let_loops.rs:7:28: 7:32\n+    scope 1 {\n+        debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:6:9: 6:15\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n+        _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/while_let_loops.rs:6:18: 6:19\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+        StorageLive(_2);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n+        discriminant(_2) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n+        _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/while_let_loops.rs:7:5: 10:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+        StorageDead(_2);                 // scope 1 at $DIR/while_let_loops.rs:10:5: 10:6\n+        StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:11:1: 11:2\n+        return;                          // scope 0 at $DIR/while_let_loops.rs:11:2: 11:2\n+    }\n+}"}, {"sha": "f6fe12489199daf378f4cf4c65df0f502b2030ca", "filename": "src/test/mir-opt/while_let_loops.change_loop_body.PreCodegen.after.mir.64bit", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.64bit", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.64bit", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.change_loop_body.PreCodegen.after.mir.64bit?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -0,0 +1,33 @@\n+// MIR for `change_loop_body` after PreCodegen\n+\n+fn change_loop_body() -> () {\n+    let mut _0: ();                      // return place in scope 0 at $DIR/while_let_loops.rs:5:27: 5:27\n+    let mut _1: i32;                     // in scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n+    let mut _2: std::option::Option<u32>; // in scope 0 at $DIR/while_let_loops.rs:7:28: 7:32\n+    scope 1 {\n+        debug _x => _1;                  // in scope 1 at $DIR/while_let_loops.rs:6:9: 6:15\n+    }\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/while_let_loops.rs:6:9: 6:15\n+        _1 = const 0_i32;                // scope 0 at $DIR/while_let_loops.rs:6:18: 6:19\n+                                         // ty::Const\n+                                         // + ty: i32\n+                                         // + val: Value(Scalar(0x00000000))\n+                                         // mir::Constant\n+                                         // + span: $DIR/while_let_loops.rs:6:18: 6:19\n+                                         // + literal: Const { ty: i32, val: Value(Scalar(0x00000000)) }\n+        StorageLive(_2);                 // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n+        discriminant(_2) = 0;            // scope 1 at $DIR/while_let_loops.rs:7:28: 7:32\n+        _0 = const ();                   // scope 1 at $DIR/while_let_loops.rs:7:5: 10:6\n+                                         // ty::Const\n+                                         // + ty: ()\n+                                         // + val: Value(Scalar(<ZST>))\n+                                         // mir::Constant\n+                                         // + span: $DIR/while_let_loops.rs:7:5: 10:6\n+                                         // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n+        StorageDead(_2);                 // scope 1 at $DIR/while_let_loops.rs:10:5: 10:6\n+        StorageDead(_1);                 // scope 0 at $DIR/while_let_loops.rs:11:1: 11:2\n+        return;                          // scope 0 at $DIR/while_let_loops.rs:11:2: 11:2\n+    }\n+}"}, {"sha": "f320a218c852c345252882e6950dbf5cfb869a9b", "filename": "src/test/mir-opt/while_let_loops.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbe7c5ce705896d4e22bf6096590bc1f17993b78/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fwhile_let_loops.rs?ref=cbe7c5ce705896d4e22bf6096590bc1f17993b78", "patch": "@@ -0,0 +1,15 @@\n+// EMIT_MIR while_let_loops.change_loop_body.ConstProp.diff\n+// EMIT_MIR while_let_loops.change_loop_body.PreCodegen.after.mir\n+// EMIT_MIR_FOR_EACH_BIT_WIDTH\n+\n+pub fn change_loop_body() {\n+    let mut _x = 0;\n+    while let Some(0u32) = None {\n+        _x = 1;\n+        break;\n+    }\n+}\n+\n+fn main() {\n+    change_loop_body();\n+}"}]}