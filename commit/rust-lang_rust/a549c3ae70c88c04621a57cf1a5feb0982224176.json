{"sha": "a549c3ae70c88c04621a57cf1a5feb0982224176", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1NDljM2FlNzBjODhjMDQ2MjFhNTdjZjFhNWZlYjA5ODIyMjQxNzY=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-18T20:49:37Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-24T02:53:44Z"}, "message": "Use underscores instead of spaces", "tree": {"sha": "6008aa8f4bd1963c257a64f8231457010b2e36da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6008aa8f4bd1963c257a64f8231457010b2e36da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a549c3ae70c88c04621a57cf1a5feb0982224176", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a549c3ae70c88c04621a57cf1a5feb0982224176", "html_url": "https://github.com/rust-lang/rust/commit/a549c3ae70c88c04621a57cf1a5feb0982224176", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a549c3ae70c88c04621a57cf1a5feb0982224176/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2934fd0a48026dc8e4bdf496158f1ac337cdb5b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2934fd0a48026dc8e4bdf496158f1ac337cdb5b6", "html_url": "https://github.com/rust-lang/rust/commit/2934fd0a48026dc8e4bdf496158f1ac337cdb5b6"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "695ebbc0b903ff5bb084fc6b9c40ffa3086a7da0", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a549c3ae70c88c04621a57cf1a5feb0982224176/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a549c3ae70c88c04621a57cf1a5feb0982224176/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=a549c3ae70c88c04621a57cf1a5feb0982224176", "patch": "@@ -409,7 +409,7 @@ pub fn run_core(\n                 let hir = tcx.hir();\n                 let body = hir.body(hir.body_owned_by(hir.local_def_id_to_hir_id(def_id)));\n                 debug!(\"visiting body for {:?}\", def_id);\n-                tcx.sess.time(\"emit ignored resolution errors\", || {\n+                tcx.sess.time(\"emit_ignored_resolution_errors\", || {\n                 EmitIgnoredResolutionErrors::new(tcx).visit_body(body);\n                 });\n                 (rustc_interface::DEFAULT_QUERY_PROVIDERS.typeck)(tcx, def_id)\n@@ -433,7 +433,7 @@ pub fn run_core(\n                 // actually be loaded, just in case they're only referred to inside\n                 // intra-doc-links\n                 resolver.borrow_mut().access(|resolver| {\n-                    sess.time(\"load extern crates\", || {\n+                    sess.time(\"load_extern_crates\", || {\n                     for extern_name in &extern_names {\n                         resolver\n                             .resolve_str_path_error(\n@@ -551,7 +551,7 @@ fn run_global_ctxt(\n                 };\n                 debug!(\"crate: {:?}\", tcx.hir().krate());\n \n-                let mut krate = tcx.sess.time(\"clean crate\", || clean::krate(&mut ctxt));\n+    let mut krate = tcx.sess.time(\"clean_crate\", || clean::krate(&mut ctxt));\n \n                 if let Some(ref m) = krate.module {\n                     if let None | Some(\"\") = m.doc_value() {"}, {"sha": "6d79924a06b5b93dc23d6099b25c56330e7c9982", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a549c3ae70c88c04621a57cf1a5feb0982224176/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a549c3ae70c88c04621a57cf1a5feb0982224176/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a549c3ae70c88c04621a57cf1a5feb0982224176", "patch": "@@ -524,10 +524,10 @@ fn main_options(options: config::Options) -> MainResult {\n     let (error_format, edition, debugging_options) = diag_opts;\n     let diag = core::new_handler(error_format, None, &debugging_options);\n     match output_format {\n-        None | Some(config::OutputFormat::Html) => sess.time(\"render html\", || {\n+        None | Some(config::OutputFormat::Html) => sess.time(\"render_html\", || {\n             run_renderer::<html::render::Context>(krate, renderopts, renderinfo, &diag, edition)\n         }),\n-        Some(config::OutputFormat::Json) => sess.time(\"render json\", || {\n+        Some(config::OutputFormat::Json) => sess.time(\"render_json\", || {\n             run_renderer::<json::JsonRenderer>(krate, renderopts, renderinfo, &diag, edition)\n         }),\n     }"}, {"sha": "b2c4c30d8ff089f17f1797d95315eb557e492051", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a549c3ae70c88c04621a57cf1a5feb0982224176/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a549c3ae70c88c04621a57cf1a5feb0982224176/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=a549c3ae70c88c04621a57cf1a5feb0982224176", "patch": "@@ -29,7 +29,7 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n \n     for &cnum in cx.tcx.crates().iter() {\n         for &(did, _) in cx.tcx.all_trait_implementations(cnum).iter() {\n-            cx.tcx.sess.time(\"build extern trait impl\", || {\n+            cx.tcx.sess.time(\"build_extern_trait_impl\", || {\n                 inline::build_impl(cx, did, None, &mut new_items);\n             });\n         }\n@@ -89,7 +89,7 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n     for &trait_did in cx.tcx.all_traits(LOCAL_CRATE).iter() {\n         for &impl_node in cx.tcx.hir().trait_impls(trait_did) {\n             let impl_did = cx.tcx.hir().local_def_id(impl_node);\n-            cx.tcx.sess.time(\"build local trait impl\", || {\n+            cx.tcx.sess.time(\"build_local_trait_impl\", || {\n                 inline::build_impl(cx, impl_did.to_def_id(), None, &mut new_items);\n             });\n         }"}]}