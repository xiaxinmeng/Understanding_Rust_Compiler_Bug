{"sha": "dcdab2df67c97a34dd7d6a361e4e7213033e1373", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjZGFiMmRmNjdjOTdhMzRkZDdkNmEzNjFlNGU3MjEzMDMzZTEzNzM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-22T23:34:18Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-22T23:37:54Z"}, "message": "Fix label scopes.", "tree": {"sha": "78ada05d746337c96b9ff0e54ef71e6452431a74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78ada05d746337c96b9ff0e54ef71e6452431a74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dcdab2df67c97a34dd7d6a361e4e7213033e1373", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dcdab2df67c97a34dd7d6a361e4e7213033e1373", "html_url": "https://github.com/rust-lang/rust/commit/dcdab2df67c97a34dd7d6a361e4e7213033e1373", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dcdab2df67c97a34dd7d6a361e4e7213033e1373/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5f6d7ec2d4e231b9ef0c8a9e8e7ec8a7f67d2ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5f6d7ec2d4e231b9ef0c8a9e8e7ec8a7f67d2ae", "html_url": "https://github.com/rust-lang/rust/commit/b5f6d7ec2d4e231b9ef0c8a9e8e7ec8a7f67d2ae"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "c6f73b804e3c1c6378bd93a81c1d2bec9d71a6f9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 13, "deletions": 19, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/dcdab2df67c97a34dd7d6a361e4e7213033e1373/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdab2df67c97a34dd7d6a361e4e7213033e1373/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=dcdab2df67c97a34dd7d6a361e4e7213033e1373", "patch": "@@ -55,7 +55,7 @@ use rustc::util::nodemap::{NodeMap, NodeSet, FnvHashMap, FnvHashSet};\n \n use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::ast::{self, FloatTy};\n-use syntax::ast::{CRATE_NODE_ID, Name, NodeId, Ident, IntTy, UintTy};\n+use syntax::ast::{CRATE_NODE_ID, Name, NodeId, Ident, SpannedIdent, IntTy, UintTy};\n use syntax::ext::base::SyntaxExtension;\n use syntax::parse::token::{self, keywords};\n use syntax::util::lev_distance::find_best_match_for_name;\n@@ -2278,7 +2278,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn fresh_binding(&mut self,\n-                     ident: &ast::SpannedIdent,\n+                     ident: &SpannedIdent,\n                      pat_id: NodeId,\n                      outer_pat_id: NodeId,\n                      pat_src: PatternSource,\n@@ -2842,11 +2842,11 @@ impl<'a> Resolver<'a> {\n         } SuggestionType::NotFound\n     }\n \n-    fn resolve_labeled_block(&mut self, label: Option<Ident>, id: NodeId, block: &Block) {\n+    fn resolve_labeled_block(&mut self, label: Option<SpannedIdent>, id: NodeId, block: &Block) {\n         if let Some(label) = label {\n             let def = Def::Label(id);\n             self.with_label_rib(|this| {\n-                this.label_ribs.last_mut().unwrap().bindings.insert(label, def);\n+                this.label_ribs.last_mut().unwrap().bindings.insert(label.node, def);\n                 this.visit_block(block);\n             });\n         } else {\n@@ -3039,19 +3039,6 @@ impl<'a> Resolver<'a> {\n                 visit::walk_expr(self, expr);\n             }\n \n-            ExprKind::Loop(_, Some(label)) | ExprKind::While(.., Some(label)) => {\n-                self.with_label_rib(|this| {\n-                    let def = Def::Label(expr.id);\n-\n-                    {\n-                        let rib = this.label_ribs.last_mut().unwrap();\n-                        rib.bindings.insert(label.node, def);\n-                    }\n-\n-                    visit::walk_expr(this, expr);\n-                })\n-            }\n-\n             ExprKind::Break(Some(label)) | ExprKind::Continue(Some(label)) => {\n                 match self.search_label(label.node) {\n                     None => {\n@@ -3081,12 +3068,19 @@ impl<'a> Resolver<'a> {\n                 optional_else.as_ref().map(|expr| self.visit_expr(expr));\n             }\n \n+            ExprKind::Loop(ref block, label) => self.resolve_labeled_block(label, expr.id, &block),\n+\n+            ExprKind::While(ref subexpression, ref block, label) => {\n+                self.visit_expr(subexpression);\n+                self.resolve_labeled_block(label, expr.id, &block);\n+            }\n+\n             ExprKind::WhileLet(ref pattern, ref subexpression, ref block, label) => {\n                 self.visit_expr(subexpression);\n                 self.value_ribs.push(Rib::new(NormalRibKind));\n                 self.resolve_pattern(pattern, PatternSource::WhileLet, &mut FnvHashMap());\n \n-                self.resolve_labeled_block(label.map(|l| l.node), expr.id, block);\n+                self.resolve_labeled_block(label, expr.id, block);\n \n                 self.value_ribs.pop();\n             }\n@@ -3096,7 +3090,7 @@ impl<'a> Resolver<'a> {\n                 self.value_ribs.push(Rib::new(NormalRibKind));\n                 self.resolve_pattern(pattern, PatternSource::For, &mut FnvHashMap());\n \n-                self.resolve_labeled_block(label.map(|l| l.node), expr.id, block);\n+                self.resolve_labeled_block(label, expr.id, block);\n \n                 self.value_ribs.pop();\n             }"}, {"sha": "ed2c3e0e9b86054433fd656c746988ab10c225fb", "filename": "src/test/compile-fail/resolve-label.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dcdab2df67c97a34dd7d6a361e4e7213033e1373/src%2Ftest%2Fcompile-fail%2Fresolve-label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dcdab2df67c97a34dd7d6a361e4e7213033e1373/src%2Ftest%2Fcompile-fail%2Fresolve-label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fresolve-label.rs?ref=dcdab2df67c97a34dd7d6a361e4e7213033e1373", "patch": "@@ -16,6 +16,9 @@ fn f() {\n             }\n         }\n     }\n+\n+    // issue #37353\n+    loop { 'w: while break 'w { } } //~ ERROR use of undeclared label\n }\n \n fn main() {}"}]}