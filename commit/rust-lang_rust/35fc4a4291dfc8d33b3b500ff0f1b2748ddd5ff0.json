{"sha": "35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ZmM0YTQyOTFkZmM4ZDMzYjNiNTAwZmYwZjFiMjc0OGRkZDVmZjA=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-16T15:25:36Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-16T16:05:29Z"}, "message": "Check kind bounds when calling methods\n\nCloses #1915", "tree": {"sha": "96bcbca364f4cc4d68610271719017b0841c5f97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96bcbca364f4cc4d68610271719017b0841c5f97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0", "html_url": "https://github.com/rust-lang/rust/commit/35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25c2be0ff477c5bd6c71f4dc598d7a94c08bb724", "url": "https://api.github.com/repos/rust-lang/rust/commits/25c2be0ff477c5bd6c71f4dc598d7a94c08bb724", "html_url": "https://github.com/rust-lang/rust/commit/25c2be0ff477c5bd6c71f4dc598d7a94c08bb724"}], "stats": {"total": 56, "additions": 43, "deletions": 13}, "files": [{"sha": "760dab76643969e438786d28b00f165082868d49", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0", "patch": "@@ -330,7 +330,7 @@ fn uint_hash<V: copy>() -> hashmap<uint, V> {\n #[doc = \"\n Convenience function for adding keys to a hashmap with nil type keys\n \"]\n-fn set_add<K>(set: set<K>, key: K) -> bool { ret set.insert(key, ()); }\n+fn set_add<K: copy>(set: set<K>, key: K) -> bool { ret set.insert(key, ()); }\n \n #[cfg(test)]\n mod tests {"}, {"sha": "43059ca7828eef7e328eba3fac3be9e73ab35a6d", "filename": "src/libstd/serialization.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0/src%2Flibstd%2Fserialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0/src%2Flibstd%2Fserialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fserialization.rs?ref=35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0", "patch": "@@ -93,7 +93,7 @@ fn emit_from_vec<S: serializer, T>(s: S, v: [T], f: fn(T)) {\n     }\n }\n \n-fn read_to_vec<D: deserializer, T>(d: D, f: fn() -> T) -> [T] {\n+fn read_to_vec<D: deserializer, T: copy>(d: D, f: fn() -> T) -> [T] {\n     d.read_vec {|len|\n         vec::from_fn(len) {|i|\n             d.read_vec_elt(i) {|| f() }\n@@ -108,7 +108,7 @@ impl serializer_helpers<S: serializer> for S {\n }\n \n impl deserializer_helpers<D: deserializer> for D {\n-    fn read_to_vec<T>(f: fn() -> T) -> [T] {\n+    fn read_to_vec<T: copy>(f: fn() -> T) -> [T] {\n         read_to_vec(self, f)\n     }\n }\n@@ -252,7 +252,8 @@ fn serialize_option<S: serializer,T>(s: S, v: option<T>, st: fn(T)) {\n     }\n }\n \n-fn deserialize_option<D: deserializer,T>(d: D, st: fn() -> T) -> option<T> {\n+fn deserialize_option<D: deserializer,T: copy>(d: D, st: fn() -> T)\n+    -> option<T> {\n     d.read_enum(\"option\") {||\n         d.read_enum_variant {|i|\n             alt check i {"}, {"sha": "e33389c29b8b35f9dc53393ef3ebbe8951f2171a", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0", "patch": "@@ -180,22 +180,38 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n             i += 1u;\n         }\n       }\n-      expr_path(_) {\n+      expr_path(_) | expr_field(_, _, _) {\n         alt cx.tcx.node_type_substs.find(e.id) {\n           some(ts) {\n-            let did = ast_util::def_id_of_def(cx.tcx.def_map.get(e.id));\n-            let bounds = ty::lookup_item_type(cx.tcx, did).bounds;\n-            let i = 0u;\n-            for ty in ts {\n+            let bounds = alt check e.node {\n+              expr_path(_) {\n+                let did = ast_util::def_id_of_def(cx.tcx.def_map.get(e.id));\n+                ty::lookup_item_type(cx.tcx, did).bounds\n+              }\n+              expr_field(_, _, _) {\n+                alt cx.method_map.get(e.id) {\n+                  typeck::method_static(did) {\n+                    ty::lookup_item_type(cx.tcx, did).bounds\n+                  }\n+                  typeck::method_param(ifce_id, n_mth, _, _) |\n+                  typeck::method_iface(ifce_id, n_mth) {\n+                    let ifce_bounds =\n+                        ty::lookup_item_type(cx.tcx, ifce_id).bounds;\n+                    let mth = ty::iface_methods(cx.tcx, ifce_id)[n_mth];\n+                    @(*ifce_bounds + *mth.tps)\n+                  }\n+                }\n+              }\n+            };\n+            vec::iter2(ts, *bounds) {|ty, bound|\n                 let kind = ty::type_kind(cx.tcx, ty);\n-                let p_kind = ty::param_bounds_to_kind(bounds[i]);\n+                let p_kind = ty::param_bounds_to_kind(bound);\n                 if !ty::kind_lteq(p_kind, kind) {\n                     cx.tcx.sess.span_err(e.span, \"instantiating a \" +\n                                          kind_to_str(p_kind) +\n                                          \" type parameter with a \"\n                                          + kind_to_str(kind) + \" type\");\n                 }\n-                i += 1u;\n             }\n           }\n           none {}"}, {"sha": "3af8992a03f2dbc472887ac67f2e58caad6ec33f", "filename": "src/rustc/syntax/ext/auto_serialize.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0/src%2Frustc%2Fsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0/src%2Frustc%2Fsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fsyntax%2Fext%2Fauto_serialize.rs?ref=35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0", "patch": "@@ -723,8 +723,10 @@ fn mk_deser_fn(cx: ext_ctxt, span: span, name: str, tps: [ast::ty_param],\n     let deser_tps: [ast::ty_param] =\n         [{ident: \"__D\",\n           id: cx.next_id(),\n-          bounds: deser_bnds}] +\n-        vec::map(tps) {|tp| cx.clone_ty_param(tp) };\n+          bounds: deser_bnds}] + vec::map(tps) {|tp|\n+        let cloned = cx.clone_ty_param(tp);\n+        {bounds: @(*cloned.bounds + [ast::bound_copy]) with cloned}\n+    };\n \n     let deser_blk = cx.expr_blk(f(cx, tps_map, #ast(expr){__d}));\n "}, {"sha": "a5070ac569888dddbeb3f348ded247ca57a820d4", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=35fc4a4291dfc8d33b3b500ff0f1b2748ddd5ff0", "patch": "@@ -0,0 +1,11 @@\n+// error-pattern:instantiating a copyable type parameter with a noncopyable\n+fn foo<T>() {\n+    1u.bar::<T>();\n+}\n+\n+impl methods for uint {\n+    fn bar<T:copy>() {\n+    }\n+}\n+\n+fn main() {}"}]}