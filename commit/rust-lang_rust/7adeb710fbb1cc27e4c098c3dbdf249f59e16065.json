{"sha": "7adeb710fbb1cc27e4c098c3dbdf249f59e16065", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhZGViNzEwZmJiMWNjMjdlNGMwOThjM2RiZGYyNDlmNTllMTYwNjU=", "commit": {"author": {"name": "David Adler", "email": "adlerd@secundaverba.net", "date": "2020-12-27T00:39:38Z"}, "committer": {"name": "David Adler", "email": "adlerd@secundaverba.net", "date": "2020-12-27T00:39:38Z"}, "message": "Use the hashbrown::{HashMap,HashSet} `clone_from` impls.", "tree": {"sha": "19612ab74eaaf313d991f2b96c7510c450caff2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19612ab74eaaf313d991f2b96c7510c450caff2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7adeb710fbb1cc27e4c098c3dbdf249f59e16065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7adeb710fbb1cc27e4c098c3dbdf249f59e16065", "html_url": "https://github.com/rust-lang/rust/commit/7adeb710fbb1cc27e4c098c3dbdf249f59e16065", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7adeb710fbb1cc27e4c098c3dbdf249f59e16065/comments", "author": null, "committer": null, "parents": [{"sha": "0b644e419681835bd0f5871c3bfbd648aa04f157", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b644e419681835bd0f5871c3bfbd648aa04f157", "html_url": "https://github.com/rust-lang/rust/commit/0b644e419681835bd0f5871c3bfbd648aa04f157"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "4f24a8bb75a0ea6b14c3481e992df464ec449cf4", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7adeb710fbb1cc27e4c098c3dbdf249f59e16065/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7adeb710fbb1cc27e4c098c3dbdf249f59e16065/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=7adeb710fbb1cc27e4c098c3dbdf249f59e16065", "patch": "@@ -195,7 +195,6 @@ use crate::sys;\n /// // use the values stored in map\n /// ```\n \n-#[derive(Clone)]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"hashmap_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct HashMap<K, V, S = RandomState> {\n@@ -1029,6 +1028,24 @@ where\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<K, V, S> Clone for HashMap<K, V, S>\n+where\n+    K: Clone,\n+    V: Clone,\n+    S: Clone,\n+{\n+    #[inline]\n+    fn clone(&self) -> Self {\n+        Self { base: self.base.clone() }\n+    }\n+\n+    #[inline]\n+    fn clone_from(&mut self, other: &Self) {\n+        self.base.clone_from(&other.base);\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K, V, S> PartialEq for HashMap<K, V, S>\n where"}, {"sha": "27093c1a077b0929e8166b00e22aa3fc1afa0e06", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7adeb710fbb1cc27e4c098c3dbdf249f59e16065/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7adeb710fbb1cc27e4c098c3dbdf249f59e16065/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=7adeb710fbb1cc27e4c098c3dbdf249f59e16065", "patch": "@@ -106,7 +106,6 @@ use super::map::{map_try_reserve_error, RandomState};\n /// [`HashMap`]: crate::collections::HashMap\n /// [`RefCell`]: crate::cell::RefCell\n /// [`Cell`]: crate::cell::Cell\n-#[derive(Clone)]\n #[cfg_attr(not(test), rustc_diagnostic_item = \"hashset_type\")]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct HashSet<T, S = RandomState> {\n@@ -932,6 +931,23 @@ where\n     }\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T, S> Clone for HashSet<T, S>\n+where\n+    T: Clone,\n+    S: Clone,\n+{\n+    #[inline]\n+    fn clone(&self) -> Self {\n+        Self { base: self.base.clone() }\n+    }\n+\n+    #[inline]\n+    fn clone_from(&mut self, other: &Self) {\n+        self.base.clone_from(&other.base);\n+    }\n+}\n+\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T, S> PartialEq for HashSet<T, S>\n where"}]}