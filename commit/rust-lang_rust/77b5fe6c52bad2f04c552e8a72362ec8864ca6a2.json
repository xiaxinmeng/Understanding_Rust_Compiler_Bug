{"sha": "77b5fe6c52bad2f04c552e8a72362ec8864ca6a2", "node_id": "C_kwDOAAsO6NoAKDc3YjVmZTZjNTJiYWQyZjA0YzU1MmU4YTcyMzYyZWM4ODY0Y2E2YTI", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-12T12:56:19Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-10-12T15:05:59Z"}, "message": "impl PartialOrd codegen for record enum", "tree": {"sha": "6e467370cb9d6904301ff85dbf8c70a281a4cc13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e467370cb9d6904301ff85dbf8c70a281a4cc13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/77b5fe6c52bad2f04c552e8a72362ec8864ca6a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/77b5fe6c52bad2f04c552e8a72362ec8864ca6a2", "html_url": "https://github.com/rust-lang/rust/commit/77b5fe6c52bad2f04c552e8a72362ec8864ca6a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/77b5fe6c52bad2f04c552e8a72362ec8864ca6a2/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95eff43cc1af8dd1e0f85354b00d259a51256998", "url": "https://api.github.com/repos/rust-lang/rust/commits/95eff43cc1af8dd1e0f85354b00d259a51256998", "html_url": "https://github.com/rust-lang/rust/commit/95eff43cc1af8dd1e0f85354b00d259a51256998"}], "stats": {"total": 93, "additions": 77, "deletions": 16}, "files": [{"sha": "0f5a3843153728bd5f94481d69ed2c3c2c877c63", "filename": "crates/ide_assists/src/handlers/replace_derive_with_manual_impl.rs", "status": "modified", "additions": 62, "deletions": 11, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/77b5fe6c52bad2f04c552e8a72362ec8864ca6a2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b5fe6c52bad2f04c552e8a72362ec8864ca6a2/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_derive_with_manual_impl.rs?ref=77b5fe6c52bad2f04c552e8a72362ec8864ca6a2", "patch": "@@ -712,6 +712,35 @@ impl PartialOrd for Foo {\n         )\n     }\n \n+    #[test]\n+    fn add_custom_impl_partial_ord_tuple_struct() {\n+        check_assist(\n+            replace_derive_with_manual_impl,\n+            r#\"\n+//- minicore: ord\n+#[derive(Partial$0Ord)]\n+struct Foo(usize, usize, usize);\n+\"#,\n+            r#\"\n+struct Foo(usize, usize, usize);\n+\n+impl PartialOrd for Foo {\n+    $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n+        match self.0.partial_cmp(other.0) {\n+            Some(core::cmp::Ordering::Eq) => {}\n+            ord => return ord,\n+        }\n+        match self.1.partial_cmp(other.1) {\n+            Some(core::cmp::Ordering::Eq) => {}\n+            ord => return ord,\n+        }\n+        self.2.partial_cmp(other.2)\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn add_custom_impl_partial_ord_enum() {\n         check_assist(\n@@ -742,28 +771,50 @@ impl PartialOrd for Foo {\n     }\n \n     #[test]\n-    fn add_custom_impl_partial_ord_tuple_struct() {\n+    fn add_custom_impl_partial_ord_record_enum() {\n         check_assist(\n             replace_derive_with_manual_impl,\n             r#\"\n //- minicore: ord\n #[derive(Partial$0Ord)]\n-struct Foo(usize, usize, usize);\n+enum Foo {\n+    Bar {\n+        bin: String,\n+    },\n+    Baz {\n+        qux: String,\n+        fez: String,\n+    },\n+    Qux {},\n+    Bin,\n+}\n \"#,\n             r#\"\n-struct Foo(usize, usize, usize);\n+enum Foo {\n+    Bar {\n+        bin: String,\n+    },\n+    Baz {\n+        qux: String,\n+        fez: String,\n+    },\n+    Qux {},\n+    Bin,\n+}\n \n impl PartialOrd for Foo {\n     $0fn partial_cmp(&self, other: &Self) -> Option<core::cmp::Ordering> {\n-        match self.0.partial_cmp(other.0) {\n-            Some(core::cmp::Ordering::Eq) => {}\n-            ord => return ord,\n-        }\n-        match self.1.partial_cmp(other.1) {\n-            Some(core::cmp::Ordering::Eq) => {}\n-            ord => return ord,\n+        match (self, other) {\n+            (Self::Bar { bin: l_bin }, Self::Bar { bin: r_bin }) => l_bin.partial_cmp(r_bin),\n+            (Self::Baz { qux: l_qux, fez: l_fez }, Self::Baz { qux: r_qux, fez: r_fez }) => {\n+                match l_qux.partial_cmp(r_qux) {\n+                    Some(core::cmp::Ordering::Eq) => {}\n+                    ord => return ord,\n+                }\n+                l_fez.partial_cmp(r_fez)\n+            }\n+            _ => core::mem::discriminant(self).partial_cmp(core::mem::discriminant(other)),\n         }\n-        self.2.partial_cmp(other.2)\n     }\n }\n \"#,"}, {"sha": "9633fd263b63bf69a23c73ba6575fa10739833ba", "filename": "crates/ide_assists/src/utils/gen_trait_fn_body.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/77b5fe6c52bad2f04c552e8a72362ec8864ca6a2/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/77b5fe6c52bad2f04c552e8a72362ec8864ca6a2/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils%2Fgen_trait_fn_body.rs?ref=77b5fe6c52bad2f04c552e8a72362ec8864ca6a2", "patch": "@@ -644,7 +644,7 @@ fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n                 match variant.field_list() {\n                     // => (Self::Bar { bin: l_bin }, Self::Bar { bin: r_bin }) => l_bin == r_bin,\n                     Some(ast::FieldList::RecordFieldList(list)) => {\n-                        let mut expr = None;\n+                        let mut exprs = vec![];\n                         let mut l_fields = vec![];\n                         let mut r_fields = vec![];\n \n@@ -659,16 +659,26 @@ fn gen_partial_ord(adt: &ast::Adt, func: &ast::Fn) -> Option<()> {\n \n                             let lhs = make::expr_path(make::ext::ident_path(l_name));\n                             let rhs = make::expr_path(make::ext::ident_path(r_name));\n-                            let cmp = make::expr_op(ast::BinOp::EqualityTest, lhs, rhs);\n-                            expr = gen_eq_chain(expr, cmp);\n+                            let ord = gen_partial_cmp_call(lhs, rhs);\n+                            exprs.push(ord);\n                         }\n \n                         let left = gen_record_pat(gen_variant_path(&variant)?, l_fields);\n                         let right = gen_record_pat(gen_variant_path(&variant)?, r_fields);\n                         let tuple = make::tuple_pat(vec![left.into(), right.into()]);\n \n-                        if let Some(expr) = expr {\n-                            arms.push(make::match_arm(Some(tuple.into()), None, expr));\n+                        if let Some(tail) = exprs.pop() {\n+                            let stmts = exprs\n+                                .into_iter()\n+                                .map(gen_partial_eq_match)\n+                                .collect::<Option<Vec<ast::Stmt>>>()?;\n+                            let expr = match stmts.len() {\n+                                0 => tail,\n+                                _ => make::block_expr(stmts.into_iter(), Some(tail))\n+                                    .indent(ast::edit::IndentLevel(1))\n+                                    .into(),\n+                            };\n+                            arms.push(make::match_arm(Some(tuple.into()), None, expr.into()));\n                         }\n                     }\n "}]}