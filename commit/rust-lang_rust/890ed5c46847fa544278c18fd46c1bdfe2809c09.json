{"sha": "890ed5c46847fa544278c18fd46c1bdfe2809c09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5MGVkNWM0Njg0N2ZhNTQ0Mjc4YzE4ZmQ0NmMxYmRmZTI4MDljMDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-03-30T13:38:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-04-01T15:22:39Z"}, "message": "Fallout in tests", "tree": {"sha": "ea6fed75c457b9069780d86da7a5db175a761a61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea6fed75c457b9069780d86da7a5db175a761a61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/890ed5c46847fa544278c18fd46c1bdfe2809c09", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/890ed5c46847fa544278c18fd46c1bdfe2809c09", "html_url": "https://github.com/rust-lang/rust/commit/890ed5c46847fa544278c18fd46c1bdfe2809c09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/890ed5c46847fa544278c18fd46c1bdfe2809c09/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4edd0c8dfa51bf0466b88271e108705738e2c47", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4edd0c8dfa51bf0466b88271e108705738e2c47", "html_url": "https://github.com/rust-lang/rust/commit/c4edd0c8dfa51bf0466b88271e108705738e2c47"}], "stats": {"total": 296, "additions": 154, "deletions": 142}, "files": [{"sha": "32af6d9255e5bd959ff36375cee78111ee38a514", "filename": "src/test/auxiliary/issue-14422.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fauxiliary%2Fissue-14422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fauxiliary%2Fissue-14422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-14422.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -23,7 +23,7 @@ mod src {\n     pub mod hidden_core {\n         use super::aliases::B;\n \n-        #[derive(Copy)]\n+        #[derive(Copy, Clone)]\n         pub struct A;\n \n         pub fn make() -> B { A }"}, {"sha": "d0566a1e0914bff0230151abd5be41fdf5953419", "filename": "src/test/auxiliary/issue13213aux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fauxiliary%2Fissue13213aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fauxiliary%2Fissue13213aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue13213aux.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -13,13 +13,13 @@\n \n pub use private::P;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct S {\n     p: P,\n }\n \n mod private {\n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     pub struct P {\n         p: i32,\n     }"}, {"sha": "348b71faf0cdbd39632ff5ab9c98a677571b6d6c", "filename": "src/test/auxiliary/method_self_arg1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmethod_self_arg1.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -17,7 +17,7 @@ static mut COUNT: u64 = 1;\n \n pub fn get_count() -> u64 { unsafe { COUNT } }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Foo;\n \n impl Foo {"}, {"sha": "b67ec1b9bfc655e8014e923abbacc7f28d0df50d", "filename": "src/test/auxiliary/method_self_arg2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmethod_self_arg2.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -17,7 +17,7 @@ static mut COUNT: u64 = 1;\n \n pub fn get_count() -> u64 { unsafe { COUNT } }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Foo;\n \n impl Foo {"}, {"sha": "201f028b6b658acc981dbb5eca0f04ac44f75854", "filename": "src/test/auxiliary/struct_variant_xc_aux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -11,7 +11,7 @@\n #![crate_name=\"struct_variant_xc_aux\"]\n #![crate_type = \"lib\"]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Enum {\n     Variant(u8),\n     StructVariant { arg: u8 }"}, {"sha": "7a69be2b06c7cf2438a8f3c61fd2013871a76845", "filename": "src/test/auxiliary/xcrate_unit_struct.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxcrate_unit_struct.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -12,26 +12,26 @@\n \n // used by the rpass test\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Struct;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Unit {\n     UnitVariant,\n     Argument(Struct)\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct TupleStruct(pub usize, pub &'static str);\n \n // used by the cfail test\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct StructWithFields {\n     foo: isize,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum EnumWithVariants {\n     EnumVariant,\n     EnumVariantArg(isize)"}, {"sha": "83c39b3f3faf6c9e5b68d474b6b96464da7914c2", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -18,7 +18,7 @@ use std::f32::consts::PI;\n use std::num::Float;\n use std::rand::{Rng, StdRng};\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Vec2 {\n     x: f32,\n     y: f32,"}, {"sha": "72f3464cdb72d165d101cc5460845ac6bfda880d", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -54,7 +54,7 @@ fn print_complements() {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Color {\n     Red,\n     Yellow,\n@@ -72,7 +72,7 @@ impl fmt::Debug for Color {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct CreatureInfo {\n     name: usize,\n     color: Color"}, {"sha": "4489a124abe0f3cb50e8d699acca7f981b308848", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -63,12 +63,12 @@ fn next_permutation(perm: &mut [i32], count: &mut [i32]) {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct P {\n     p: [i32; 16],\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Perm {\n     cnt: [i32; 16],\n     fact: [u32; 16],"}, {"sha": "effdd67027a44b8a32b230a494451fbc2d8738cc", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -105,7 +105,7 @@ fn sum_and_scale(a: &'static [AminoAcid]) -> Vec<AminoAcid> {\n     result\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct AminoAcid {\n     c: u8,\n     p: f32,"}, {"sha": "db131bcfdc354e55c7e14922d89a59db92151db8", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -64,7 +64,7 @@ static OCCURRENCES: [&'static str;5] = [\n \n // Code implementation\n \n-#[derive(Copy, PartialEq, PartialOrd, Ord, Eq)]\n+#[derive(Copy, Clone, PartialEq, PartialOrd, Ord, Eq)]\n struct Code(u64);\n \n impl Code {"}, {"sha": "669a0e86f1e659406f8f9b232532f27ec1b32780", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -96,7 +96,7 @@ static BODIES: [Planet;N_BODIES] = [\n     },\n ];\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Planet {\n     x: f64, y: f64, z: f64,\n     vx: f64, vy: f64, vz: f64,"}, {"sha": "e5091a92581b45e613d792ee8057b16941309922", "filename": "src/test/compile-fail/borrowck-borrow-from-owned-ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-owned-ptr.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Foo {\n   bar1: Bar,\n   bar2: Bar\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Bar {\n   int1: isize,\n   int2: isize,"}, {"sha": "440be93dfdca18fea34311aa6aa08a007c22eeb8", "filename": "src/test/compile-fail/borrowck-borrow-from-stack-variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-from-stack-variable.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Foo {\n   bar1: Bar,\n   bar2: Bar\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Bar {\n   int1: isize,\n   int2: isize,"}, {"sha": "cce55b6c941b90e019add2efc7d328489a341a77", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -10,7 +10,7 @@\n \n use std::ops::Add;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Point {\n     x: isize,\n     y: isize,"}, {"sha": "c11e58651aa76a1f7979bafda0f0e12cd8100c1a", "filename": "src/test/compile-fail/borrowck-use-mut-borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-use-mut-borrow.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(box_syntax)]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct A { a: isize, b: isize }\n \n struct B { a: isize, b: Box<isize> }"}, {"sha": "5fc97536555ae7776897f904bf85a012f2ad42ef", "filename": "src/test/compile-fail/coherence-impls-copy.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-copy.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -22,7 +22,11 @@ struct NotSync;\n impl !Sync for NotSync {}\n \n impl Copy for TestE {}\n+impl Clone for TestE { fn clone(&self) -> Self { *self } }\n+\n impl Copy for MyType {}\n+impl Clone for MyType { fn clone(&self) -> Self { *self } }\n+\n impl Copy for (MyType, MyType) {}\n //~^ ERROR E0206\n \n@@ -31,6 +35,8 @@ impl Copy for &'static NotSync {}\n \n impl Copy for [MyType] {}\n //~^ ERROR E0206\n+//~| ERROR E0277\n+//~| ERROR E0277\n \n impl Copy for &'static [NotSync] {}\n //~^ ERROR E0206"}, {"sha": "c52458934bd1c90b378e9f15813201a8bc1e4378", "filename": "src/test/compile-fail/dst-index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-index.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -14,7 +14,7 @@\n use std::ops::Index;\n use std::fmt::Debug;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct S;\n \n impl Index<usize> for S {\n@@ -25,7 +25,7 @@ impl Index<usize> for S {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct T;\n \n impl Index<usize> for T {"}, {"sha": "460c396750ff0b6fda97337e1d46c12824a46822", "filename": "src/test/compile-fail/exclusive-drop-and-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fexclusive-drop-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fexclusive-drop-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fexclusive-drop-and-copy.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -12,14 +12,14 @@\n \n // issue #20126\n \n-#[derive(Copy)] //~ ERROR the trait `Copy` may not be implemented\n+#[derive(Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented\n struct Foo;\n \n impl Drop for Foo {\n     fn drop(&mut self) {}\n }\n \n-#[derive(Copy)] //~ ERROR the trait `Copy` may not be implemented\n+#[derive(Copy, Clone)] //~ ERROR the trait `Copy` may not be implemented\n struct Bar<T>(::std::marker::PhantomData<T>);\n \n #[unsafe_destructor]"}, {"sha": "dcd7a0ded812fcd7176d7143fe207ecfc34fb438", "filename": "src/test/compile-fail/feature-gate-simd-ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-simd-ffi.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -13,7 +13,7 @@\n \n use std::simd::f32x4;\n \n-#[simd] #[derive(Copy)] #[repr(C)] struct LocalSimd(u8, u8);\n+#[simd] #[derive(Copy, Clone)] #[repr(C)] struct LocalSimd(u8, u8);\n \n extern {\n     fn foo() -> f32x4; //~ ERROR use of SIMD type"}, {"sha": "883e1be04b22893e4b3b9f93171365e973e8f7c3", "filename": "src/test/compile-fail/gated-simd-ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fgated-simd-ffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fgated-simd-ffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-simd-ffi.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -13,7 +13,7 @@\n #![feature(simd)]\n \n #[repr(C)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n #[simd]\n pub struct f32x4(f32, f32, f32, f32);\n "}, {"sha": "1925caf6870eef80aab0daa80651683ffbbe46d8", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -17,7 +17,7 @@ fn assert_copy<T:Copy>() { }\n \n trait Dummy : MarkerTrait { }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct MyStruct {\n     x: isize,\n     y: isize,"}, {"sha": "066590252a54ad769fcb599e94f616d25770b598", "filename": "src/test/compile-fail/kindck-inherited-copy-bound.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-inherited-copy-bound.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -25,13 +25,13 @@ fn take_param<T:Foo>(foo: &T) { }\n \n fn a() {\n     let x: Box<_> = box 3;\n-    take_param(&x); //~ ERROR `core::marker::Copy` is not implemented\n+    take_param(&x); //~ ERROR E0277\n }\n \n fn b() {\n     let x: Box<_> = box 3;\n     let y = &x;\n-    let z = &x as &Foo; //~ ERROR `core::marker::Copy` is not implemented\n+    let z = &x as &Foo; //~ ERROR E0038\n }\n \n fn main() { }"}, {"sha": "be321b6290354197c03dfcd2c5b0447e271b0cc2", "filename": "src/test/compile-fail/opt-in-copy.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fopt-in-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fopt-in-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fopt-in-copy.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -16,6 +16,7 @@ struct IWantToCopyThis {\n \n impl Copy for IWantToCopyThis {}\n //~^ ERROR the trait `Copy` may not be implemented for this type\n+//~| ERROR E0277\n \n enum CantCopyThisEither {\n     A,\n@@ -28,5 +29,6 @@ enum IWantToCopyThisToo {\n \n impl Copy for IWantToCopyThisToo {}\n //~^ ERROR the trait `Copy` may not be implemented for this type\n+//~| ERROR E0277\n \n fn main() {}"}, {"sha": "198fa5b9aca0bf4009c238cc2ed2651278b86a15", "filename": "src/test/compile-fail/pub-method-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fpub-method-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fcompile-fail%2Fpub-method-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpub-method-macro.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -20,7 +20,7 @@ mod bleh {\n         )\n     }\n \n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     pub struct S;\n \n     impl S {"}, {"sha": "3024ca0fe69834142d101a102f98f220876f6228", "filename": "src/test/debuginfo/c-style-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -105,21 +105,21 @@ use self::AutoDiscriminant::{One, Two, Three};\n use self::ManualDiscriminant::{OneHundred, OneThousand, OneMillion};\n use self::SingleVariant::TheOnlyVariant;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum AutoDiscriminant {\n     One,\n     Two,\n     Three\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum ManualDiscriminant {\n     OneHundred = 100,\n     OneThousand = 1000,\n     OneMillion = 1000000\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum SingleVariant {\n     TheOnlyVariant\n }"}, {"sha": "fc9ef8e3a98ed01ae87b7621a896a80a6662d7c3", "filename": "src/test/debuginfo/generic-method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-method-on-generic-struct.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -114,7 +114,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Struct<T> {\n     x: T\n }"}, {"sha": "6468a36f8c61c703c39fe5b0a421d6a5f4770355", "filename": "src/test/debuginfo/method-on-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-enum.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -115,7 +115,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Enum {\n     Variant1 { x: u16, y: u16 },\n     Variant2 (u32)"}, {"sha": "975668baa12852163c2008a7cf88e1f8f229f6f4", "filename": "src/test/debuginfo/method-on-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-generic-struct.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -115,7 +115,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Struct<T> {\n     x: T\n }"}, {"sha": "28885d0ad9b79828bd10b5638242babaef775081", "filename": "src/test/debuginfo/method-on-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-struct.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -115,7 +115,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Struct {\n     x: isize\n }"}, {"sha": "b69a3856736c4521d8677d5331fc1230462487a3", "filename": "src/test/debuginfo/method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-trait.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -115,7 +115,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Struct {\n     x: isize\n }"}, {"sha": "97d4496cce12b3d34a78aa520e50bd9434746fac", "filename": "src/test/debuginfo/method-on-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmethod-on-tuple-struct.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -115,7 +115,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct TupleStruct(isize, f64);\n \n impl TupleStruct {"}, {"sha": "f16f236a0cb0612750600331e838bb786e0d03d1", "filename": "src/test/debuginfo/self-in-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-default-method.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -114,7 +114,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Struct {\n     x: isize\n }"}, {"sha": "56de877016deebdb3d42b22de9abe7b872c199be", "filename": "src/test/debuginfo/self-in-generic-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fself-in-generic-default-method.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -114,7 +114,7 @@\n #![feature(box_syntax)]\n #![omit_gdb_pretty_printer_section]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Struct {\n     x: isize\n }"}, {"sha": "3d5e6e78deaf15e4a601312396fd787217664a7e", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -19,7 +19,7 @@ fn test1() { let val = &0; { } *val; }\n \n fn test2() -> isize { let val = &0; { } *val }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct S { eax: isize }\n \n fn test3() {"}, {"sha": "a9e18f5a8f1e6b0dade592613e8579396a091dcd", "filename": "src/test/run-make/allow-non-lint-warnings-cmdline/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-make%2Fallow-non-lint-warnings-cmdline%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-make%2Fallow-non-lint-warnings-cmdline%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fallow-non-lint-warnings-cmdline%2Ffoo.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #[derive()]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Foo;\n \n pub fn main() { }"}, {"sha": "c0f55893a3abe4370e0a779081591bd56a3cdc71", "filename": "src/test/run-make/extern-fn-with-packed-struct/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #[repr(packed)]\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n struct Foo {\n     a: i8,\n     b: i16,"}, {"sha": "9d1ab00359dd955e28a36f7eb93f73c255b5aebf", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -179,7 +179,7 @@ enum SomeEnum<'a> {\n     MyTypes(MyType, MyType)\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum SomeOtherEnum {\n     SomeConst1,\n     SomeConst2,"}, {"sha": "3dffae99292c61b1c487c8c7d8e1f4d1e18dbffb", "filename": "src/test/run-pass/associated-types-normalize-unifield-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-unifield-struct.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -20,10 +20,10 @@ pub trait Offset {\n     fn dummy(&self) { }\n }\n \n-#[derive(Copy)] pub struct X;\n+#[derive(Copy, Clone)] pub struct X;\n impl Offset for X { type State = Y; }\n \n-#[derive(Copy)] pub struct Y;\n+#[derive(Copy, Clone)] pub struct Y;\n impl OffsetState for Y {}\n \n pub fn now() -> DateTime<X> { from_utc(Y) }"}, {"sha": "da7a3ae684c57aac9ca5c970d64cc2ad05d597f3", "filename": "src/test/run-pass/binops-issue-22743.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fbinops-issue-22743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fbinops-issue-22743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops-issue-22743.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -10,7 +10,7 @@\n \n use std::ops::Mul;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Foo {\n     x: f64,\n }"}, {"sha": "a5c68c5ecf97671d4f8584a5daa810da87de61ef", "filename": "src/test/run-pass/borrowck-univariant-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -13,7 +13,7 @@\n \n use std::cell::Cell;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum newtype {\n     newvar(isize)\n }"}, {"sha": "c026ffc6d318d76e1bcbedef18c823fb4464c47a", "filename": "src/test/run-pass/builtin-superkinds-in-metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-in-metadata.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -20,7 +20,7 @@ use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n use trait_superkinds_in_metadata::RequiresCopy;\n use std::marker;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct X<T>(T);\n \n impl<T:Sync> RequiresShare for X<T> { }"}, {"sha": "4c494293b517edbf83ca7de7439ebf42347a4844", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -11,7 +11,7 @@\n \n use std::cmp;\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n enum cat_type { tuxedo, tabby, tortoiseshell }\n \n impl cmp::PartialEq for cat_type {"}, {"sha": "b0630b516407b60f3490ce6d3f2bb920c9bff545", "filename": "src/test/run-pass/coherence-impl-in-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -11,7 +11,7 @@\n // pretty-expanded FIXME #23616\n \n pub fn main() {\n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     enum x { foo }\n     impl ::std::cmp::PartialEq for x {\n         fn eq(&self, other: &x) -> bool {"}, {"sha": "51926ececc2b1ff654334608cd8018bcace33459", "filename": "src/test/run-pass/const-nullary-univariant-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Foo {\n     Bar = 0xDEADBEE\n }"}, {"sha": "5c5765454d457adefd99ef00949d845a7302099d", "filename": "src/test/run-pass/copy-out-of-array-1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fcopy-out-of-array-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fcopy-out-of-array-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcopy-out-of-array-1.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -14,10 +14,9 @@\n \n // pretty-expanded FIXME #23616\n \n+#[derive(Copy, Clone)]\n struct C { _x: u8 }\n \n-impl Copy for C { }\n-\n fn main() {\n     fn d() -> C { C { _x: 0 } }\n "}, {"sha": "4204d9b5c3eaeb3006c3358e7b5ec6c6a31c2f89", "filename": "src/test/run-pass/deriving-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Test;\n \n pub fn main() {}"}, {"sha": "9bf286c434219ba504b4d51f1b37f46ec1401a53", "filename": "src/test/run-pass/dst-struct-sole.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -32,7 +32,7 @@ fn foo2<T:ToBar>(x: &Fat<[T]>) {\n     assert!(x.ptr[1].to_bar() == bar);\n }\n \n-#[derive(Copy, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n struct Bar;\n \n trait ToBar {"}, {"sha": "5198dd43d6db83380b0463ecd0c8bca4ce553d74", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -51,7 +51,7 @@ fn foo3(x: &Fat<Fat<[isize]>>) {\n }\n \n \n-#[derive(Copy, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n struct Bar;\n \n trait ToBar {"}, {"sha": "370bc2882271f5681d5a035af2db7daac2ea931c", "filename": "src/test/run-pass/dst-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -19,10 +19,10 @@ struct Fat<T: ?Sized> {\n     ptr: T\n }\n \n-#[derive(Copy, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n struct Bar;\n \n-#[derive(Copy, PartialEq, Eq)]\n+#[derive(Copy, Clone, PartialEq, Eq)]\n struct Bar1 {\n     f: isize\n }"}, {"sha": "e60cd02ce9994524f192f7392c8576c0452c7b7a", "filename": "src/test/run-pass/empty-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-tag.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n enum chan { chan_t, }\n \n impl PartialEq for chan {"}, {"sha": "46238c4572080837d90148a0c0962e0729088869", "filename": "src/test/run-pass/enum-discrim-width-stuff.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -12,7 +12,7 @@ macro_rules! check {\n     ($m:ident, $t:ty, $v:expr) => {{\n         mod $m {\n             use std::mem::size_of;\n-            #[derive(Copy, Debug)]\n+            #[derive(Copy, Clone, Debug)]\n             enum E {\n                 V = $v,\n                 A = 0"}, {"sha": "ee50d3bdf0ee8334278373fde4acf2d29ef30031", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -13,7 +13,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct LM { resize_at: usize, size: usize }\n \n enum HashMap<K,V> {"}, {"sha": "ca394f991f29b76f30b9259bf465a5cc779870a1", "filename": "src/test/run-pass/expr-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fexpr-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-copy.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -15,7 +15,7 @@ fn f(arg: &mut A) {\n     arg.a = 100;\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct A { a: isize }\n \n pub fn main() {"}, {"sha": "e79daed4c33d7bd9ea9df42ed5e496e59052bf12", "filename": "src/test/run-pass/expr-if-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -14,15 +14,15 @@\n \n // Tests for if as expressions returning nominal types\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct I { i: isize }\n \n fn test_rec() {\n     let rs = if true { I {i: 100} } else { I {i: 101} };\n     assert_eq!(rs.i, 100);\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n enum mood { happy, sad, }\n \n impl PartialEq for mood {"}, {"sha": "2dcb0f833e4b327bf384c90654e59bc17be003b6", "filename": "src/test/run-pass/expr-match-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -13,15 +13,15 @@\n \n \n // Tests for match as expressions resulting in struct types\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct R { i: isize }\n \n fn test_rec() {\n     let rs = match true { true => R {i: 100}, _ => panic!() };\n     assert_eq!(rs.i, 100);\n }\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n enum mood { happy, sad, }\n \n impl PartialEq for mood {"}, {"sha": "9a039e8bc3539e40dfff5eeabf1abb853a401735", "filename": "src/test/run-pass/exterior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fexterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fexterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexterior.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -13,7 +13,7 @@\n \n use std::cell::Cell;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Point {x: isize, y: isize, z: isize}\n \n fn f(p: &Cell<Point>) {"}, {"sha": "9d304ea9e10b64c8b927a17d7e676a58b89b68d2", "filename": "src/test/run-pass/extern-pass-TwoU16s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub struct TwoU16s {\n     one: u16, two: u16\n }"}, {"sha": "8dae0473fd5ed64b203a585c701c297820a4031b", "filename": "src/test/run-pass/extern-pass-TwoU32s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub struct TwoU32s {\n     one: u32, two: u32\n }"}, {"sha": "14aeea34657985a3773149c9fb9f1a20876a0d8f", "filename": "src/test/run-pass/extern-pass-TwoU64s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub struct TwoU64s {\n     one: u64, two: u64\n }"}, {"sha": "75a109e442911c9b3d33893e74f03414b2f8828e", "filename": "src/test/run-pass/extern-pass-TwoU8s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n pub struct TwoU8s {\n     one: u8, two: u8\n }"}, {"sha": "7883c22f909ddb40860c164be07fa3572b5615a3", "filename": "src/test/run-pass/foreign-fn-with-byval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-with-byval.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct S {\n     x: u64,\n     y: u64,"}, {"sha": "0ba0ed4bf7f979cae9cea0e8198c253757649d39", "filename": "src/test/run-pass/generic-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-fn.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -12,7 +12,7 @@\n \n fn id<T>(x: T) -> T { return x; }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Triple {x: isize, y: isize, z: isize}\n \n pub fn main() {"}, {"sha": "f5f80914937d3cf51140c2aba67dceb1b64d6479", "filename": "src/test/run-pass/guards-not-exhaustive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards-not-exhaustive.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Q { R(Option<usize>) }\n \n fn xyzzy(q: Q) -> usize {"}, {"sha": "11c67b8af8107e11451e336d54f208052f4bb437", "filename": "src/test/run-pass/guards.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fguards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fguards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fguards.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Pair { x: isize, y: isize }\n \n pub fn main() {"}, {"sha": "b40f4d27a9c4d63a86e0b6d953fb37122682d2dc", "filename": "src/test/run-pass/hrtb-opt-in-copy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -22,7 +22,7 @@\n \n use std::marker::PhantomData;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Foo<T> { x: T }\n \n type Ty<'tcx> = &'tcx TyS<'tcx>;\n@@ -31,7 +31,7 @@ enum TyS<'tcx> {\n     Boop(PhantomData<*mut &'tcx ()>)\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Bar<'tcx> {\n     Baz(Foo<Ty<'tcx>>)\n }"}, {"sha": "dddfb9bacf9e211e016d5c31de5c1c9f0aa9a4c9", "filename": "src/test/run-pass/issue-12860.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-12860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-12860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12860.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -16,7 +16,7 @@ extern crate collections;\n \n use std::collections::HashSet;\n \n-#[derive(Copy, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n struct XYZ {\n     x: isize,\n     y: isize,"}, {"sha": "7acabf31c85a17587ed16823161e47b8545becf3", "filename": "src/test/run-pass/issue-13264.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-13264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-13264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13264.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -24,7 +24,7 @@ impl Deref for Root {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct JSRef {\n     node: *const Node\n }"}, {"sha": "0fd4b4394dc271ab32e2df0e7b40deecbde298d7", "filename": "src/test/run-pass/issue-19100.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-19100.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-19100.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19100.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Foo {\n     Bar,\n     Baz"}, {"sha": "8b5e6f837d852f070591e1591ba25f302c6cb866", "filename": "src/test/run-pass/issue-20797.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-20797.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-20797.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20797.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -34,7 +34,7 @@ pub trait Strategy {\n }\n \n /// The basic fully-recursive strategy. Nothing is pruned.\n-#[derive(Copy, Default)]\n+#[derive(Copy, Clone, Default)]\n pub struct Recursive;\n \n impl Strategy for Recursive {"}, {"sha": "5e2ac61caa216e239291bd01c63eafd014cefd35", "filename": "src/test/run-pass/issue-21296.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-21296.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-21296.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21296.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -14,4 +14,8 @@\n #[derive(Copy)]\n struct Test(*const i32);\n \n+impl Clone for Test {\n+    fn clone(&self) -> Test { *self }\n+}\n+\n fn main() {}"}, {"sha": "8a0f04a2cf0e413fd366ef3869a2da13d722cd17", "filename": "src/test/run-pass/issue-22536-copy-mustnt-zero.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-22536-copy-mustnt-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-22536-copy-mustnt-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-22536-copy-mustnt-zero.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -22,12 +22,14 @@ struct BufferHandle<R: Resources> {\n     raw: <R as Resources>::Buffer,\n }\n impl<R: Resources> Copy for BufferHandle<R> {}\n+impl<R: Resources> Clone for BufferHandle<R> {\n+    fn clone(&self) -> BufferHandle<R> { *self }\n+}\n \n enum Res {}\n impl Resources for Res {\n     type Buffer = u32;\n }\n-impl Copy for Res { }\n \n fn main() {\n     let b: BufferHandle<Res> = BufferHandle { raw: 1 };"}, {"sha": "d16655a68554a2b654999f19ddda31c7e3efc848", "filename": "src/test/run-pass/issue-2288.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-2288.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2288.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -17,7 +17,7 @@ trait clam<A> {\n   fn chowder(&self, y: A);\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct foo<A> {\n   x: A,\n }"}, {"sha": "9b5ca23565e0d7710edf2d28806bae2809d750a3", "filename": "src/test/run-pass/issue-23550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-23550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-23550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23550.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -13,7 +13,7 @@\n \n use std::intrinsics;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Wrap(i64);\n \n // These volatile and atomic intrinsics used to cause an ICE"}, {"sha": "5841a9ec176cdc6c13690250852145acdd7a2a86", "filename": "src/test/run-pass/issue-2633.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-2633.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2633.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct cat {\n     meow: extern \"Rust\" fn(),\n }\n@@ -23,7 +23,7 @@ fn cat() -> cat {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct KittyInfo {kitty: cat}\n \n // Code compiles and runs successfully if we add a + before the first arg"}, {"sha": "777e5bf7a6dedfe37f1cbd02b7ddad32eb11a3dc", "filename": "src/test/run-pass/issue-3121.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-3121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3121.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -13,11 +13,11 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum side { mayo, catsup, vinegar }\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum order { hamburger, fries(side), shake }\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum meal { to_go(order), for_here(order) }\n \n fn foo(m: Box<meal>, cond: bool) {"}, {"sha": "cfdc54a362274e91c926e5b8b740909ecaba2558", "filename": "src/test/run-pass/issue-3563-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3563-3.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -29,21 +29,21 @@ use std::iter::repeat;\n use std::slice;\n \n // Represents a position on a canvas.\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Point {\n     x: isize,\n     y: isize,\n }\n \n // Represents an offset on a canvas. (This has the same structure as a Point.\n // but different semantics).\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Size {\n     width: isize,\n     height: isize,\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Rect {\n     top_left: Point,\n     size: Size,"}, {"sha": "cd62c04a32581ea28e9bf35799d938a75df36d11", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -13,7 +13,7 @@\n \n use std::ops::Mul;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Vec2 {\n     x: f64,\n     y: f64"}, {"sha": "e81025d8464507b1cd5ffc55b89d781062a3ca4f", "filename": "src/test/run-pass/issue-3753.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-3753.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3753.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -16,13 +16,13 @@\n \n use std::f64;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Point {\n     x: f64,\n     y: f64\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub enum Shape {\n     Circle(Point, f64),\n     Rectangle(Point, Point)"}, {"sha": "88ff103723c73265a9dcdc9fbe32f282e13146bc", "filename": "src/test/run-pass/issue-5688.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fissue-5688.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5688.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -17,7 +17,7 @@ with the representation of [isize; n] and [isize] somehow, or at least\n failed to typecheck correctly.\n */\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct X { vec: &'static [isize] }\n \n static V: &'static [X] = &[X { vec: &[1, 2, 3] }];"}, {"sha": "1b4dfb869d413dfb857aee0c1baa8412140f10d7", "filename": "src/test/run-pass/match-arm-statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-arm-statics.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -38,7 +38,7 @@ const VARIANT2_NORTH: EnumWithStructVariants = EnumWithStructVariants::Variant2\n     dir: Direction::North };\n \n pub mod glfw {\n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     pub struct InputState(usize);\n \n     pub const RELEASE  : InputState = InputState(0);"}, {"sha": "f0ca0a70acc96a4f828b835e99d4cb25b19d817f", "filename": "src/test/run-pass/method-self-arg-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg-trait.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -17,7 +17,7 @@\n \n static mut COUNT: u64 = 1;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Foo;\n \n trait Bar : Sized {"}, {"sha": "dfc121192228d4a21fa27bf8087d44c464c3d06d", "filename": "src/test/run-pass/method-self-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -17,7 +17,7 @@\n \n static mut COUNT: usize = 1;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Foo;\n \n impl Foo {"}, {"sha": "00e97ebc24e7ba5f5f1fa4b6a616a2cec0d6bc55", "filename": "src/test/run-pass/monomorphize-abi-alignment.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -18,7 +18,7 @@\n  * and apply the wrong instance of the method `unwrap`.\n  */\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct S<T> { i:u8, t:T }\n \n impl<T> S<T> {\n@@ -27,10 +27,10 @@ impl<T> S<T> {\n     }\n }\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n struct A((u32, u32));\n \n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n struct B(u64);\n \n pub fn main() {"}, {"sha": "fdf9f95b274d44fd61c4716188a693c4559797c1", "filename": "src/test/run-pass/multidispatch1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fmultidispatch1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fmultidispatch1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultidispatch1.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -16,7 +16,7 @@ trait MyTrait<T> {\n     fn get(&self) -> T;\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct MyType {\n     dummy: usize\n }"}, {"sha": "75c6c5ac7d16543338cf0f3484f41000afb45584", "filename": "src/test/run-pass/multidispatch2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -25,7 +25,7 @@ impl<T> MyTrait<T> for T\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct MyType {\n     dummy: usize\n }"}, {"sha": "818ea4c9f23262429aec69bc932fbad5d7cbce87", "filename": "src/test/run-pass/newtype.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fnewtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fnewtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct mytype(Mytype);\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Mytype {\n     compute: fn(mytype) -> isize,\n     val: isize,"}, {"sha": "045af79189acd36cb74f4200a8011bfd76b055de", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -13,7 +13,7 @@\n use std::cmp;\n use std::ops;\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n struct Point {\n     x: isize,\n     y: isize"}, {"sha": "0a58411041e640df28eb16c58b2134e7e8124123", "filename": "src/test/run-pass/out-pointer-aliasing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fout-pointer-aliasing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fout-pointer-aliasing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fout-pointer-aliasing.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Foo {\n     f1: isize,\n     _f2: isize,"}, {"sha": "6880032e69f66f5f2909a7ab25fd9c26ffedbeb4", "filename": "src/test/run-pass/overloaded-autoderef-order.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -13,7 +13,7 @@\n use std::rc::Rc;\n use std::ops::Deref;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct DerefWrapper<X, Y> {\n     x: X,\n     y: Y\n@@ -36,7 +36,7 @@ impl<X, Y> Deref for DerefWrapper<X, Y> {\n mod priv_test {\n     use std::ops::Deref;\n \n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     pub struct DerefWrapperHideX<X, Y> {\n         x: X,\n         pub y: Y"}, {"sha": "9a327eb567266bf0da01211ba00f160c4ebb0af1", "filename": "src/test/run-pass/packed-struct-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -13,7 +13,7 @@\n use std::mem;\n \n #[repr(packed)]\n-#[derive(Copy, PartialEq, Debug)]\n+#[derive(Copy, Clone, PartialEq, Debug)]\n struct Foo {\n     bar: u8,\n     baz: u64"}, {"sha": "1644a1694269adb77b86a1b46ad4be717498a1fa", "filename": "src/test/run-pass/rec-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Frec-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Frec-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-tup.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Point {x: isize, y: isize}\n \n type rect = (Point, Point);"}, {"sha": "a422aaba84b30677c7848ee57fa7930f40ecc290", "filename": "src/test/run-pass/rec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Frec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Frec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -10,7 +10,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Rect {x: isize, y: isize, w: isize, h: isize}\n \n fn f(r: Rect, x: isize, y: isize, w: isize, h: isize) {"}, {"sha": "123806a4d9d175d21fa0a7f70e29d77d4a204cb5", "filename": "src/test/run-pass/regions-dependent-addr-of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-dependent-addr-of.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -30,7 +30,7 @@ struct B {\n     v6: Option<C>\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct C {\n     f: isize\n }"}, {"sha": "6ad89951238893ea8fdbcf90ffbdd11e7b738d81", "filename": "src/test/run-pass/regions-early-bound-used-in-bound-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound-method.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -17,7 +17,7 @@ trait GetRef<'a> {\n     fn get(&self) -> &'a isize;\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Box<'a> {\n     t: &'a isize\n }"}, {"sha": "6ab95d6e497bc9455f313b08c7c90170da423421", "filename": "src/test/run-pass/regions-early-bound-used-in-bound.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-bound.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -17,12 +17,11 @@ trait GetRef<'a, T> {\n     fn get(&self) -> &'a T;\n }\n \n+#[derive(Copy, Clone)]\n struct Box<'a, T:'a> {\n     t: &'a T\n }\n \n-impl<'a,T:'a> Copy for Box<'a,T> {}\n-\n impl<'a,T:Clone> GetRef<'a,T> for Box<'a,T> {\n     fn get(&self) -> &'a T {\n         self.t"}, {"sha": "dc991e9493fe46cf569b3c1f4b596c3229b84413", "filename": "src/test/run-pass/regions-early-bound-used-in-type-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-early-bound-used-in-type-param.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -17,7 +17,7 @@ trait Get<T> {\n     fn get(&self) -> T;\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Box<T> {\n     t: T\n }"}, {"sha": "ed3cec465eff894ce54233eb78676666030b8150", "filename": "src/test/run-pass/regions-mock-tcx.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -29,7 +29,7 @@ use std::mem;\n \n type Type<'tcx> = &'tcx TypeStructure<'tcx>;\n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n enum TypeStructure<'tcx> {\n     TypeInt,\n     TypeFunction(Type<'tcx>, Type<'tcx>),\n@@ -94,20 +94,20 @@ impl<'tcx,'ast> TypeContext<'tcx, 'ast> {\n     }\n }\n \n-#[derive(Copy, PartialEq, Eq, Hash)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n struct NodeId {\n     id: usize\n }\n \n type Ast<'ast> = &'ast AstStructure<'ast>;\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct AstStructure<'ast> {\n     id: NodeId,\n     kind: AstKind<'ast>\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum AstKind<'ast> {\n     ExprInt,\n     ExprVar(usize),"}, {"sha": "fa9ad9f6517a609c6ddff771ad0141bf60a6ed43", "filename": "src/test/run-pass/self-in-mut-slot-immediate-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-immediate-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-immediate-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fself-in-mut-slot-immediate-value.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -13,7 +13,7 @@\n \n // pretty-expanded FIXME #23616\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Value {\n     n: isize\n }"}, {"sha": "867f028a3fb3c14aa977bca9dee19fbfa4f00025", "filename": "src/test/run-pass/simd-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-generics.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -16,7 +16,7 @@\n use std::ops;\n \n #[simd]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct f32x4(f32, f32, f32, f32);\n \n fn add<T: ops::Add<Output=T>>(lhs: T, rhs: T) -> T {"}, {"sha": "9515da6fcbc8d2207add789f4c3172cec508a5b2", "filename": "src/test/run-pass/small-enum-range-edge.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmall-enum-range-edge.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -18,14 +18,14 @@\n  */\n \n #[repr(u8)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Eu { Lu = 0, Hu = 255 }\n \n static CLu: Eu = Eu::Lu;\n static CHu: Eu = Eu::Hu;\n \n #[repr(i8)]\n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum Es { Ls = -128, Hs = 127 }\n \n static CLs: Es = Es::Ls;"}, {"sha": "1ff13d4eaeacb1c2129beb4835fb40ed722f0dbe", "filename": "src/test/run-pass/struct-return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fstruct-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-return.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -10,10 +10,10 @@\n //\n // ignore-lexer-test FIXME #15883\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Quad { a: u64, b: u64, c: u64, d: u64 }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n pub struct Floats { a: f64, b: u8, c: f64 }\n \n mod rustrt {"}, {"sha": "7974366c395fc922f0c4b2e728322a2e576f7d8d", "filename": "src/test/run-pass/structured-compare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructured-compare.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-#[derive(Copy, Debug)]\n+#[derive(Copy, Clone, Debug)]\n enum foo { large, small, }\n \n impl PartialEq for foo {"}, {"sha": "447b4de450bf1097e046d90761b2c287bcd50d5b", "filename": "src/test/run-pass/sync-send-iterators-in-libcollections.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsync-send-iterators-in-libcollections.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -77,7 +77,7 @@ fn main() {\n \n     all_sync_send!(LinkedList::<usize>::new(), iter, iter_mut, into_iter);\n \n-    #[derive(Copy)]\n+    #[derive(Copy, Clone)]\n     #[repr(usize)]\n     #[allow(dead_code)]\n     enum Foo { A, B, C }"}, {"sha": "a063801032e3decc613f8f016e4143780d6f6892", "filename": "src/test/run-pass/tag-variant-disr-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-variant-disr-val.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -11,7 +11,7 @@\n \n use color::{red, green, blue, black, white, imaginary, purple, orange};\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n enum color {\n     red = 0xff0000,\n     green = 0x00ff00,"}, {"sha": "f9a22d5ccec6d07a867ae5a24c27e5492f31a8e2", "filename": "src/test/run-pass/trait-coercion-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion-generic.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -12,7 +12,7 @@ trait Trait<T> {\n     fn f(&self, x: T);\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Struct {\n     x: isize,\n     y: isize,"}, {"sha": "fa31d9891aaf7c9a1b14e9e2377ba69a6e94b3aa", "filename": "src/test/run-pass/trait-coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-coercion.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -17,7 +17,7 @@ trait Trait {\n     fn f(&self);\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Struct {\n     x: isize,\n     y: isize,"}, {"sha": "bd09a311b70fb24d0fec3bc1669d0c3e87816311", "filename": "src/test/run-pass/ufcs-explicit-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890ed5c46847fa544278c18fd46c1bdfe2809c09/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fufcs-explicit-self.rs?ref=890ed5c46847fa544278c18fd46c1bdfe2809c09", "patch": "@@ -11,7 +11,7 @@\n #![allow(unknown_features)]\n #![feature(box_syntax)]\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Foo {\n     f: isize,\n }\n@@ -28,7 +28,7 @@ impl Foo {\n     }\n }\n \n-#[derive(Copy)]\n+#[derive(Copy, Clone)]\n struct Bar<T> {\n     f: T,\n }"}]}