{"sha": "3a5bc736ae4ece3dcf010138232658c61b95eb4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNWJjNzM2YWU0ZWNlM2RjZjAxMDEzODIzMjY1OGM2MWI5NWViNGU=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-16T05:18:47Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-07-16T05:18:47Z"}, "message": "Rollup merge of #26977 - brson:stddoc, r=Gankro\n\n Yet another attempt to make the prose on the std crate page\nclearer and more informative.\n\nThis does a lot of things: tightens up the opening, adds useful links\n(including a link to the search bar), offers guidance on how to use\nthe docs, and expands the prelude docs as a useful newbie entrypoint.\n\nr? @steveklabnik cc @aturon", "tree": {"sha": "20cd6e2f80db45b222b64f363b548d91296e301e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20cd6e2f80db45b222b64f363b548d91296e301e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a5bc736ae4ece3dcf010138232658c61b95eb4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a5bc736ae4ece3dcf010138232658c61b95eb4e", "html_url": "https://github.com/rust-lang/rust/commit/3a5bc736ae4ece3dcf010138232658c61b95eb4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a5bc736ae4ece3dcf010138232658c61b95eb4e/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ac3f4277163ff8b537b998ac1549111d32f8289", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac3f4277163ff8b537b998ac1549111d32f8289", "html_url": "https://github.com/rust-lang/rust/commit/9ac3f4277163ff8b537b998ac1549111d32f8289"}, {"sha": "2881bbad59633e77a26c60dcc38f5206bd79a5f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2881bbad59633e77a26c60dcc38f5206bd79a5f5", "html_url": "https://github.com/rust-lang/rust/commit/2881bbad59633e77a26c60dcc38f5206bd79a5f5"}], "stats": {"total": 264, "additions": 229, "deletions": 35}, "files": [{"sha": "f77e639f83319d0583cf69093004d5ce8d1475cb", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a5bc736ae4ece3dcf010138232658c61b95eb4e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/3a5bc736ae4ece3dcf010138232658c61b95eb4e/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=3a5bc736ae4ece3dcf010138232658c61b95eb4e", "patch": "@@ -951,3 +951,8 @@\n     }());\n \n }());\n+\n+// Sets the focus on the search bar at the top of the page\n+function focusSearchBar() {\n+    document.getElementsByName('search')[0].focus();\n+}"}, {"sha": "fa90670acfbefd399489327c85f51b5d981fc763", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 128, "deletions": 28, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/3a5bc736ae4ece3dcf010138232658c61b95eb4e/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5bc736ae4ece3dcf010138232658c61b95eb4e/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=3a5bc736ae4ece3dcf010138232658c61b95eb4e", "patch": "@@ -10,29 +10,116 @@\n \n //! # The Rust Standard Library\n //!\n-//! The Rust Standard Library provides the essential runtime\n-//! functionality for building portable Rust software.\n+//! The Rust Standard Library is the foundation of portable Rust\n+//! software, a set of minimal and battle-tested shared abstractions\n+//! for the [broader Rust ecosystem](https://crates.io). It offers\n+//! core types (e.g. [`Vec`](vec/index.html)\n+//! and [`Option`](option/index.html)), library-defined [operations on\n+//! language primitives](#primitive) (e.g. [`u32`](u32/index.html) and\n+//! [`str`](str/index.html)), [standard macros](#macros),\n+//! [I/O](io/index.html) and [multithreading](thread/index.html), among\n+//! [many other lovely\n+//! things](#what-is-in-the-standard-library-documentation?).\n //!\n-//! The Rust Standard Library is available to all Rust crates by\n-//! default, just as if contained an `extern crate std` import at the\n-//! crate root. Therefore the standard library can be accessed in\n-//! `use` statements through the path `std`, as in `use std::thread`,\n-//! or in expressions through the absolute path `::std`, as in\n-//! `::std::thread::sleep_ms(100)`.\n+//! `std` is available to all Rust crates by default, just as if each\n+//! one contained an `extern crate std` import at the [crate\n+//! root][book-crate-root]. Therefore the standard library can be\n+//! accessed in [`use`][book-use] statements through the path `std`,\n+//! as in [`use std::env`](env/index.html), or in expressions\n+//! through the absolute path `::std`, as in\n+//! [`::std::env::args()`](env/fn.args.html).\n //!\n-//! Furthermore, the standard library defines [The Rust\n-//! Prelude](prelude/index.html), a small collection of items, mostly\n-//! traits, that are imported into and available in every module.\n+//! [book-crate-root]: ../book/crates-and-modules.html#basic-terminology:-crates-and-modules\n+//! [book-use]: ../book/crates-and-modules.html#importing-modules-with-use\n //!\n-//! ## What is in the standard library\n+//! # How to read this documentation\n //!\n-//! The standard library is a set of minimal, battle-tested\n-//! core types and shared abstractions for the [broader Rust\n-//! ecosystem](https://crates.io) to build on.\n+//! If you already know the name of what you are looking for the\n+//! fastest way to find it is to use the <a href=\"#\"\n+//! onclick=\"focusSearchBar();\">search bar</a> at the top of the page.\n //!\n-//! The [primitive types](#primitives), though not defined in the\n-//! standard library, are documented here, as are the predefined\n-//! [macros](#macros).\n+//! Otherwise, you may want to jump to one of these useful sections:\n+//!\n+//! * [`std::*` modules](#modules)\n+//! * [Primitive types](#primitives)\n+//! * [Standard macros](#macros)\n+//! * [The Rust Prelude](prelude/index.html)\n+//!\n+//! If this is your first time, the documentation for the standard\n+//! library is written to be casually perused. Clicking on interesting\n+//! things should generally lead you to interesting places. Still,\n+//! there are important bits you don't want to miss, so read on for a\n+//! tour of the standard library and its documentation!\n+//!\n+//! Once you are familiar with the contents of the standard library\n+//! you may begin to find the verbosity of the prose distracting. At\n+//! this stage in your development you may want to press the **[-]**\n+//! button near the top of the page to collapse it into a more\n+//! skimmable view.\n+//!\n+//! While you are looking at that **[-]** button also notice the\n+//! **[src]** button. Rust's API documentation comes with the source\n+//! code and you are encouraged to read it. The standard library\n+//! source is generally high quality and a peek behind the curtains is\n+//! often enlightening.\n+//!\n+//! # What is in the standard library documentation?\n+//!\n+//! Lots of stuff. Well, broadly four things actually.\n+//!\n+//! First of all, The Rust Standard Library is divided into a number\n+//! of focused modules, [all listed further down this page](#modules).\n+//! These modules are the bedrock upon which all of Rust is forged,\n+//! and they have mighty names like [`std::slice`](slice/index.html)\n+//! and [`std::cmp`](cmp/index.html). Modules' documentation typically\n+//! includes an overview of the module along with examples, and are\n+//! a smart place to start familiarizing yourself with the library.\n+//!\n+//! Second, implicit methods on [primitive\n+//! types](../book/primitive-types.html) are documented here. This can\n+//! be a source of confusion for two reasons:\n+//!\n+//! 1. While primitives are implemented by the compiler, the standard\n+//!    library implements methods directly on the primitive types (and\n+//!    it is the only library that does so), which are [documented in\n+//!    the section on primitives](#primitives).\n+//! 2. The standard library exports many modules *with the same name\n+//!    as primitive types*. These define additional items related\n+//!    to the primitive type, but not the all-important methods.\n+//!\n+//! So for example there is a [page for the primitive type\n+//! `i32`](primitive.i32.html) that lists all the methods that can be\n+//! called on 32-bit integers (mega useful), and there is a [page for\n+//! the module `std::i32`](i32/index.html) that documents the constant\n+//! values `MIN` and `MAX` (rarely useful).\n+//!\n+//! Note the documentation for the primitives\n+//! [`str`](primitive.str.html) and [`[T]`](primitive.slice.html)\n+//! (also called 'slice'). Many method calls on\n+//! [`String`](string/struct.String.html) and\n+//! [`Vec`](vec/struct.Vec.html) are actually calls to methods on\n+//! `str` and `[T]` respectively, via [deref\n+//! coercions](../book/deref-coercions.html). *Accepting that\n+//! primitive types are documented on their own pages will bring you a\n+//! deep inner wisdom. Embrace it now before proceeding.*\n+//!\n+//! Third, the standard library defines [The Rust\n+//! Prelude](prelude/index.html), a small collection of items - mostly\n+//! traits - that are imported into every module of every crate. The\n+//! traits in the prelude are pervasive, making the prelude\n+//! documentation a good entry point to learning about the library.\n+//!\n+//! And finally, the standard library exports a number of standard\n+//! macros, and [lists them on this page](#macros) (technically, not\n+//! all of the standard macros are defined by the standard library -\n+//! some are defined by the compiler - but they are documented here\n+//! the same). Like the prelude, the standard macros are imported by\n+//! default into all crates.\n+//!\n+//! # A Tour of The Rust Standard Library\n+//!\n+//! The rest of this crate documentation is dedicated to pointing\n+//! out notable features of The Rust Standard Library.\n //!\n //! ## Containers and collections\n //!\n@@ -43,17 +130,29 @@\n //! [`Iterator`](iter/trait.Iterator.html), which works with the `for`\n //! loop to access collections.\n //!\n-//! The common container type, `Vec`, a growable vector backed by an array,\n-//! lives in the [`vec`](vec/index.html) module. Contiguous, unsized regions\n-//! of memory, `[T]`, commonly called \"slices\", and their borrowed versions,\n-//! `&[T]`, commonly called \"borrowed slices\", are built-in types for which the\n-//! [`slice`](slice/index.html) module defines many methods.\n+//! The standard library exposes 3 common ways to deal with contiguous\n+//! regions of memory:\n //!\n-//! `&str`, a UTF-8 string, is a built-in type, and the standard library\n-//! defines methods for it on a variety of traits in the\n-//! [`str`](str/index.html) module. Rust strings are immutable;\n-//! use the `String` type defined in [`string`](string/index.html)\n-//! for a mutable string builder.\n+//! * [`Vec<T>`](vec/index.html) - A heap-allocated *vector* that is\n+//! resizable at runtime.\n+//! * [`[T; n]`](primitive.array.html) - An inline *array* with a\n+//! fixed size at compile time.\n+//! * [`[T]`](primitive.slice.html) - A dynamically sized *slice* into\n+//! any other kind of contiguous storage, whether heap-allocated or\n+//! not.\n+//!\n+//! Slices can only be handled through some kind of *pointer*, and as\n+//! such come in many flavours such as:\n+//!\n+//! * `&[T]` - *shared slice*\n+//! * `&mut [T]` - *mutable slice*\n+//! * [`Box<[T]>`](boxed/index.html) - *owned slice*\n+//!\n+//! `str`, a UTF-8 string slice, is a primitive type, and the standard\n+//! library defines [many methods for it](primitive.str.html). Rust\n+//! `str`s are typically accessed as immutable references: `&str`. Use\n+//! the owned `String` type defined in [`string`](string/index.html)\n+//! for building and mutating strings.\n //!\n //! For converting to strings use the [`format!`](fmt/index.html)\n //! macro, and for converting from strings use the\n@@ -88,6 +187,7 @@\n //! [`atomic`](sync/atomic/index.html) and\n //! [`mpsc`](sync/mpsc/index.html), which contains the channel types\n //! for message passing.\n+//!\n \n // Do not remove on snapshot creation. Needed for bootstrap. (Issue #22364)\n #![cfg_attr(stage0, feature(custom_attribute))]"}, {"sha": "275f415c6fc800faafce6e502c2f9a219125d4e0", "filename": "src/libstd/prelude/mod.rs", "status": "modified", "additions": 96, "deletions": 7, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/3a5bc736ae4ece3dcf010138232658c61b95eb4e/src%2Flibstd%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a5bc736ae4ece3dcf010138232658c61b95eb4e/src%2Flibstd%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fmod.rs?ref=3a5bc736ae4ece3dcf010138232658c61b95eb4e", "patch": "@@ -22,18 +22,107 @@\n //! with the `std::` path prefix, as in `use std::vec`, `use std::thread::spawn`,\n //! etc.\n //!\n-//! Additionally, `std` contains a `prelude` module that reexports many of the\n-//! most common traits, types and functions. The contents of the prelude are\n-//! imported into every *module* by default.  Implicitly, all modules behave as if\n-//! they contained the following prologue:\n+//! Additionally, `std` contains a versioned *prelude* that reexports many of the\n+//! most common traits, types and functions. *The contents of the prelude are\n+//! imported into every module by default*.  Implicitly, all modules behave as if\n+//! they contained the following [`use` statement][book-use]:\n+//!\n+//! [book-use]: ../../book/crates-and-modules.html#importing-modules-with-use\n //!\n //! ```ignore\n //! use std::prelude::v1::*;\n //! ```\n //!\n-//! The prelude is primarily concerned with exporting *traits* that are so\n-//! pervasive that it would be obnoxious to import for every use, particularly\n-//! those that define methods on primitive types.\n+//! The prelude is primarily concerned with exporting *traits* that\n+//! are so pervasive that they would be onerous to import for every use,\n+//! particularly those that are commonly mentioned in [generic type\n+//! bounds][book-traits].\n+//!\n+//! The current version of the prelude (version 1) lives in\n+//! [`std::prelude::v1`](v1/index.html), and reexports the following.\n+//!\n+//! * `std::marker::`{\n+//!     [`Copy`](../marker/trait.Copy.html),\n+//!     [`Send`](../marker/trait.Send.html),\n+//!     [`Sized`](../marker/trait.Sized.html),\n+//!     [`Sync`](../marker/trait.Sync.html)\n+//!   }.\n+//!   The marker traits indicate fundamental properties of types.\n+//! * `std::ops::`{\n+//!     [`Drop`](../ops/trait.Drop.html),\n+//!     [`Fn`](../ops/trait.Fn.html),\n+//!     [`FnMut`](../ops/trait.FnMut.html),\n+//!     [`FnOnce`](../ops/trait.FnOnce.html)\n+//!   }.\n+//!   The [destructor][book-dtor] trait and the\n+//!   [closure][book-closures] traits, reexported from the same\n+//!   [module that also defines overloaded\n+//!   operators](../ops/index.html).\n+//! * `std::mem::`[`drop`](../mem/fn.drop.html).\n+//!   A convenience function for explicitly dropping a value.\n+//! * `std::boxed::`[`Box`](../boxed/struct.Box.html).\n+//!   The owned heap pointer.\n+//! * `std::borrow::`[`ToOwned`](../borrow/trait.ToOwned.html).\n+//!   The conversion trait that defines `to_owned`, the generic method\n+//!   for creating an owned type from a borrowed type.\n+//! * `std::clone::`[`Clone`](../clone/trait.Clone.html).\n+//!   The ubiquitous trait that defines `clone`, the method for\n+//!   producing copies of values that are consider expensive to copy.\n+//! * `std::cmp::`{\n+//!     [`PartialEq`](../cmp/trait.PartialEq.html),\n+//!     [`PartialOrd`](../cmp/trait.PartialOrd.html),\n+//!     [`Eq`](../cmp/trait.Eq.html),\n+//!     [`Ord`](../cmp/trait.Ord.html)\n+//!   }.\n+//!   The comparision traits, which implement the comparison operators\n+//!   and are often seen in trait bounds.\n+//! * `std::convert::`{\n+//!     [`AsRef`](../convert/trait.AsRef.html),\n+//!     [`AsMut`](../convert/trait.AsMut.html),\n+//!     [`Into`](../convert/trait.Into.html),\n+//!     [`From`](../convert/trait.From.html)\n+//!   }.\n+//!   Generic conversions, used by savvy API authors to create\n+//!   overloaded methods.\n+//! * `std::default::`[`Default`](../default/trait.Default).\n+//!   Types that have default values.\n+//! * `std::iter::`{\n+//!     [`Iterator`](../iter/trait.Iterator.html),\n+//!     [`Extend`](../iter/trait.Extend.html),\n+//!     [`IntoIterator`](../iter/trait.IntoIterator.html),\n+//!     [`DoubleEndedIterator`](../iter/trait.DoubleEndedIterator.html),\n+//!     [`ExactSizeIterator`](../iter/trait.ExactSizeIterator.html)\n+//!   }.\n+//!   [Iterators][book-iter].\n+//! * `std::option::Option::`{\n+//!     [`self`](../option/enum.Option.html),\n+//!     [`Some`](../option/enum.Option.html),\n+//!     [`None`](../option/enum.Option.html)\n+//!   }.\n+//!   The ubiquitous `Option` type and its two [variants][book-enums],\n+//!   `Some` and `None`.\n+//! * `std::result::Result::`{\n+//!     [`self`](../result/enum.Result.html),\n+//!     [`Some`](../result/enum.Result.html),\n+//!     [`None`](../result/enum.Result.html)\n+//!   }.\n+//!   The ubiquitous `Result` type and its two [variants][book-enums],\n+//!   `Ok` and `Err`.\n+//! * `std::slice::`[`SliceConcatExt`](../slice/trait.SliceConcatExt.html).\n+//!   An unstable extension to slices that shouldn't have to exist.\n+//! * `std::string::`{\n+//!     [`String`](../string/struct.String.html),\n+//!     [`ToString`](../string/trait.ToString.html)\n+//!   }.\n+//!   Heap allocated strings.\n+//! * `std::vec::`[`Vec`](../vec/struct.Vec.html).\n+//!   Heap allocated vectors.\n+//!\n+//! [book-traits]: ../../book/traits.html\n+//! [book-closures]: ../../book/closures.html\n+//! [book-dtor]: ../../book/drop.html\n+//! [book-iter]: ../../book/iterators.html\n+//! [book-enums]: ../../book/enums.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}