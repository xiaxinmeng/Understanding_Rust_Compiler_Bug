{"sha": "2090b534fc249a493823bb8e9039c0123aa0b90e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwOTBiNTM0ZmMyNDlhNDkzODIzYmI4ZTkwMzljMDEyM2FhMGI5MGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-06T14:19:18Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-06T14:19:18Z"}, "message": "Move ModPath->ast::Path function to IDE layer\n\ncloses #6092", "tree": {"sha": "f6f8469d5e4bbd37655aabb75edf32a392b0ed0c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6f8469d5e4bbd37655aabb75edf32a392b0ed0c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2090b534fc249a493823bb8e9039c0123aa0b90e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2090b534fc249a493823bb8e9039c0123aa0b90e", "html_url": "https://github.com/rust-lang/rust/commit/2090b534fc249a493823bb8e9039c0123aa0b90e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2090b534fc249a493823bb8e9039c0123aa0b90e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9507a01e9e76afca9f6f8d460089fc199703b820", "url": "https://api.github.com/repos/rust-lang/rust/commits/9507a01e9e76afca9f6f8d460089fc199703b820", "html_url": "https://github.com/rust-lang/rust/commit/9507a01e9e76afca9f6f8d460089fc199703b820"}], "stats": {"total": 111, "additions": 65, "deletions": 46}, "files": [{"sha": "ac72f3f02e24c7f43134f2c8b3e0b1acb2934f3c", "filename": "crates/assists/src/ast_transform.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2090b534fc249a493823bb8e9039c0123aa0b90e/crates%2Fassists%2Fsrc%2Fast_transform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2090b534fc249a493823bb8e9039c0123aa0b90e/crates%2Fassists%2Fsrc%2Fast_transform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fast_transform.rs?ref=2090b534fc249a493823bb8e9039c0123aa0b90e", "patch": "@@ -1,13 +1,14 @@\n //! `AstTransformer`s are functions that replace nodes in an AST and can be easily combined.\n-use rustc_hash::FxHashMap;\n-\n use hir::{HirDisplay, PathResolution, SemanticsScope};\n+use rustc_hash::FxHashMap;\n use syntax::{\n     algo::SyntaxRewriter,\n     ast::{self, AstNode},\n     SyntaxNode,\n };\n \n+use crate::utils::mod_path_to_ast;\n+\n pub fn apply<'a, N: AstNode>(transformer: &dyn AstTransform<'a>, node: N) -> N {\n     SyntaxRewriter::from_fn(|element| match element {\n         syntax::SyntaxElement::Node(n) => {\n@@ -189,7 +190,7 @@ impl<'a> AstTransform<'a> for QualifyPaths<'a> {\n         match resolution {\n             PathResolution::Def(def) => {\n                 let found_path = from.find_use_path(self.source_scope.db.upcast(), def)?;\n-                let mut path = path_to_ast(found_path);\n+                let mut path = mod_path_to_ast(&found_path);\n \n                 let type_args = p\n                     .segment()\n@@ -210,13 +211,3 @@ impl<'a> AstTransform<'a> for QualifyPaths<'a> {\n         }\n     }\n }\n-\n-pub(crate) fn path_to_ast(path: hir::ModPath) -> ast::Path {\n-    let parse = ast::SourceFile::parse(&path.to_string());\n-    parse\n-        .tree()\n-        .syntax()\n-        .descendants()\n-        .find_map(ast::Path::cast)\n-        .unwrap_or_else(|| panic!(\"failed to parse path {:?}, `{}`\", path, path))\n-}"}, {"sha": "4c400f287b0dae86b823732575e4e9745edd24e6", "filename": "crates/assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2090b534fc249a493823bb8e9039c0123aa0b90e/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2090b534fc249a493823bb8e9039c0123aa0b90e/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=2090b534fc249a493823bb8e9039c0123aa0b90e", "patch": "@@ -820,4 +820,29 @@ impl Tr for () {\n }\"#,\n         )\n     }\n+\n+    #[test]\n+    fn weird_path() {\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+trait Test {\n+    fn foo(&self, x: crate)\n+}\n+impl Test for () {\n+    <|>\n+}\n+\"#,\n+            r#\"\n+trait Test {\n+    fn foo(&self, x: crate)\n+}\n+impl Test for () {\n+    fn foo(&self, x: crate) {\n+        ${0:todo!()}\n+    }\n+}\n+\"#,\n+        )\n+    }\n }"}, {"sha": "d3ee98e5f3edf8df7e8ac995031ff2fb3f919257", "filename": "crates/assists/src/handlers/auto_import.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2090b534fc249a493823bb8e9039c0123aa0b90e/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2090b534fc249a493823bb8e9039c0123aa0b90e/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=2090b534fc249a493823bb8e9039c0123aa0b90e", "patch": "@@ -13,7 +13,10 @@ use syntax::{\n     SyntaxNode,\n };\n \n-use crate::{utils::insert_use, AssistContext, AssistId, AssistKind, Assists, GroupLabel};\n+use crate::{\n+    utils::insert_use, utils::mod_path_to_ast, AssistContext, AssistId, AssistKind, Assists,\n+    GroupLabel,\n+};\n \n // Assist: auto_import\n //\n@@ -54,7 +57,7 @@ pub(crate) fn auto_import(acc: &mut Assists, ctx: &AssistContext) -> Option<()>\n             range,\n             |builder| {\n                 let new_syntax =\n-                    insert_use(&scope, import.to_ast_path(), ctx.config.insert_use.merge);\n+                    insert_use(&scope, mod_path_to_ast(&import), ctx.config.insert_use.merge);\n                 builder.replace(syntax.text_range(), new_syntax.to_string())\n             },\n         );"}, {"sha": "7f4f80b237058e8dcd113ab2fe46ec5fc6e7325a", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2090b534fc249a493823bb8e9039c0123aa0b90e/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2090b534fc249a493823bb8e9039c0123aa0b90e/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=2090b534fc249a493823bb8e9039c0123aa0b90e", "patch": "@@ -10,9 +10,10 @@ use syntax::{\n };\n \n use crate::{\n-    assist_context::AssistBuilder, utils::insert_use, AssistContext, AssistId, AssistKind, Assists,\n+    assist_context::AssistBuilder,\n+    utils::{insert_use, mod_path_to_ast, ImportScope},\n+    AssistContext, AssistId, AssistKind, Assists,\n };\n-use insert_use::ImportScope;\n \n // Assist: extract_struct_from_enum_variant\n //\n@@ -111,7 +112,8 @@ fn insert_import(\n         let scope = ImportScope::find_insert_use_container(path.syntax(), ctx)?;\n         let syntax = scope.as_syntax_node();\n \n-        let new_syntax = insert_use(&scope, mod_path.to_ast_path(), ctx.config.insert_use.merge);\n+        let new_syntax =\n+            insert_use(&scope, mod_path_to_ast(&mod_path), ctx.config.insert_use.merge);\n         // FIXME: this will currently panic as multiple imports will have overlapping text ranges\n         builder.replace(syntax.text_range(), new_syntax.to_string())\n     }"}, {"sha": "676f5ad92600ac7660e7502b0a374b24f1257968", "filename": "crates/assists/src/handlers/fill_match_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2090b534fc249a493823bb8e9039c0123aa0b90e/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2090b534fc249a493823bb8e9039c0123aa0b90e/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Ffill_match_arms.rs?ref=2090b534fc249a493823bb8e9039c0123aa0b90e", "patch": "@@ -7,7 +7,7 @@ use syntax::ast::{self, make, AstNode, MatchArm, NameOwner, Pat};\n use test_utils::mark;\n \n use crate::{\n-    utils::{render_snippet, Cursor, FamousDefs},\n+    utils::{mod_path_to_ast, render_snippet, Cursor, FamousDefs},\n     AssistContext, AssistId, AssistKind, Assists,\n };\n \n@@ -192,7 +192,7 @@ fn resolve_tuple_of_enum_def(\n }\n \n fn build_pat(db: &RootDatabase, module: hir::Module, var: hir::EnumVariant) -> Option<ast::Pat> {\n-    let path = crate::ast_transform::path_to_ast(module.find_use_path(db, ModuleDef::from(var))?);\n+    let path = mod_path_to_ast(&module.find_use_path(db, ModuleDef::from(var))?);\n \n     // FIXME: use HIR for this; it doesn't currently expose struct vs. tuple vs. unit variants though\n     let pat: ast::Pat = match var.source(db).value.kind() {"}, {"sha": "eb69c49a499350fa542fb50c943ee69df2903db6", "filename": "crates/assists/src/utils.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/2090b534fc249a493823bb8e9039c0123aa0b90e/crates%2Fassists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2090b534fc249a493823bb8e9039c0123aa0b90e/crates%2Fassists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Futils.rs?ref=2090b534fc249a493823bb8e9039c0123aa0b90e", "patch": "@@ -19,6 +19,27 @@ use crate::assist_config::SnippetCap;\n pub use insert_use::MergeBehaviour;\n pub(crate) use insert_use::{insert_use, ImportScope};\n \n+pub fn mod_path_to_ast(path: &hir::ModPath) -> ast::Path {\n+    let mut segments = Vec::new();\n+    let mut is_abs = false;\n+    match path.kind {\n+        hir::PathKind::Plain => {}\n+        hir::PathKind::Super(0) => segments.push(make::path_segment_self()),\n+        hir::PathKind::Super(n) => segments.extend((0..n).map(|_| make::path_segment_super())),\n+        hir::PathKind::DollarCrate(_) | hir::PathKind::Crate => {\n+            segments.push(make::path_segment_crate())\n+        }\n+        hir::PathKind::Abs => is_abs = true,\n+    }\n+\n+    segments.extend(\n+        path.segments\n+            .iter()\n+            .map(|segment| make::path_segment(make::name_ref(&segment.to_string()))),\n+    );\n+    make::path_from_segments(segments, is_abs)\n+}\n+\n pub(crate) fn unwrap_trivial_block(block: ast::BlockExpr) -> ast::Expr {\n     extract_trivial_expression(&block)\n         .filter(|expr| !expr.syntax().text().contains_char('\\n'))"}, {"sha": "171118d98edb1cce5a9f3f144327bd44fb36109f", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2090b534fc249a493823bb8e9039c0123aa0b90e/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2090b534fc249a493823bb8e9039c0123aa0b90e/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=2090b534fc249a493823bb8e9039c0123aa0b90e", "patch": "@@ -51,7 +51,7 @@ pub use hir_def::{\n     find_path::PrefixKind,\n     item_scope::ItemInNs,\n     nameres::ModuleSource,\n-    path::ModPath,\n+    path::{ModPath, PathKind},\n     type_ref::{Mutability, TypeRef},\n };\n pub use hir_expand::{\n@@ -63,7 +63,4 @@ pub use hir_ty::display::HirDisplay;\n // These are negative re-exports: pub using these names is forbidden, they\n // should remain private to hir internals.\n #[allow(unused)]\n-use {\n-    hir_def::path::{Path, PathKind},\n-    hir_expand::hygiene::Hygiene,\n-};\n+use {hir_def::path::Path, hir_expand::hygiene::Hygiene};"}, {"sha": "5b8c1e449ea2954925c6778ebdb867d824bd79de", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/2090b534fc249a493823bb8e9039c0123aa0b90e/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2090b534fc249a493823bb8e9039c0123aa0b90e/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=2090b534fc249a493823bb8e9039c0123aa0b90e", "patch": "@@ -13,7 +13,7 @@ use hir_expand::{\n     hygiene::Hygiene,\n     name::{AsName, Name},\n };\n-use syntax::ast::{self, make};\n+use syntax::ast::{self};\n \n use crate::{\n     type_ref::{TypeBound, TypeRef},\n@@ -100,26 +100,6 @@ impl ModPath {\n         }\n         self.segments.first()\n     }\n-\n-    pub fn to_ast_path(&self) -> ast::Path {\n-        let mut segments = Vec::new();\n-        let mut is_abs = false;\n-        match self.kind {\n-            PathKind::Plain => {}\n-            PathKind::Super(0) => segments.push(make::path_segment_self()),\n-            PathKind::Super(n) => segments.extend((0..n).map(|_| make::path_segment_super())),\n-            PathKind::Crate => segments.push(make::path_segment_crate()),\n-            PathKind::Abs => is_abs = true,\n-            PathKind::DollarCrate(_) => (),\n-        }\n-\n-        segments.extend(\n-            self.segments\n-                .iter()\n-                .map(|segment| make::path_segment(make::name_ref(&segment.to_string()))),\n-        );\n-        make::path_from_segments(segments, is_abs)\n-    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]"}]}