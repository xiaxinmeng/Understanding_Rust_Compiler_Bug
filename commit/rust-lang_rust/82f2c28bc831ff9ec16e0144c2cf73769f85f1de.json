{"sha": "82f2c28bc831ff9ec16e0144c2cf73769f85f1de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZjJjMjhiYzgzMWZmOWVjMTZlMDE0NGMyY2Y3Mzc2OWY4NWYxZGU=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2017-10-13T15:37:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-10-13T15:37:53Z"}, "message": "Rollup merge of #45110 - Nashenas88:master, r=arielb1\n\nImprove newtype_index macro to handle description and constants consistently", "tree": {"sha": "c543879f6e69fcfa2aa635ed942ea2eb5ec18646", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c543879f6e69fcfa2aa635ed942ea2eb5ec18646"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82f2c28bc831ff9ec16e0144c2cf73769f85f1de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82f2c28bc831ff9ec16e0144c2cf73769f85f1de", "html_url": "https://github.com/rust-lang/rust/commit/82f2c28bc831ff9ec16e0144c2cf73769f85f1de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82f2c28bc831ff9ec16e0144c2cf73769f85f1de/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c43bd3c8334c0b8edf1c15e20bbd8daa877481a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c43bd3c8334c0b8edf1c15e20bbd8daa877481a", "html_url": "https://github.com/rust-lang/rust/commit/6c43bd3c8334c0b8edf1c15e20bbd8daa877481a"}, {"sha": "97fe353ce65c67401ef3a9ce2b90a216d982daba", "url": "https://api.github.com/repos/rust-lang/rust/commits/97fe353ce65c67401ef3a9ce2b90a216d982daba", "html_url": "https://github.com/rust-lang/rust/commit/97fe353ce65c67401ef3a9ce2b90a216d982daba"}], "stats": {"total": 96, "additions": 71, "deletions": 25}, "files": [{"sha": "0159a198bc64744db417eb1e329e0ef590434867", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/82f2c28bc831ff9ec16e0144c2cf73769f85f1de/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f2c28bc831ff9ec16e0144c2cf73769f85f1de/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=82f2c28bc831ff9ec16e0144c2cf73769f85f1de", "patch": "@@ -415,9 +415,11 @@ pub enum BorrowKind {\n ///////////////////////////////////////////////////////////////////////////\n // Variables and temps\n \n-newtype_index!(Local, \"_\");\n-\n-pub const RETURN_POINTER: Local = Local(0);\n+newtype_index!(Local\n+    {\n+        DEBUG_NAME = \"_\",\n+        const RETURN_POINTER = 0,\n+    });\n \n /// Classifies locals into categories. See `Mir::local_kind`.\n #[derive(PartialEq, Eq, Debug)]\n@@ -551,7 +553,7 @@ pub struct UpvarDecl {\n ///////////////////////////////////////////////////////////////////////////\n // BasicBlock\n \n-newtype_index!(BasicBlock, \"bb\");\n+newtype_index!(BasicBlock { DEBUG_NAME = \"bb\" });\n \n ///////////////////////////////////////////////////////////////////////////\n // BasicBlockData and Terminator\n@@ -1131,7 +1133,7 @@ pub type LvalueProjection<'tcx> = Projection<'tcx, Lvalue<'tcx>, Local, Ty<'tcx>\n /// and the index is a local.\n pub type LvalueElem<'tcx> = ProjectionElem<'tcx, Local, Ty<'tcx>>;\n \n-newtype_index!(Field, \"field\");\n+newtype_index!(Field { DEBUG_NAME = \"field\" });\n \n impl<'tcx> Lvalue<'tcx> {\n     pub fn field(self, f: Field, ty: Ty<'tcx>) -> Lvalue<'tcx> {\n@@ -1196,8 +1198,11 @@ impl<'tcx> Debug for Lvalue<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Scopes\n \n-newtype_index!(VisibilityScope, \"scope\");\n-pub const ARGUMENT_VISIBILITY_SCOPE : VisibilityScope = VisibilityScope(0);\n+newtype_index!(VisibilityScope\n+    {\n+        DEBUG_NAME = \"scope\",\n+        const ARGUMENT_VISIBILITY_SCOPE = 0,\n+    });\n \n #[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n pub struct VisibilityScopeData {\n@@ -1522,7 +1527,7 @@ pub struct Constant<'tcx> {\n     pub literal: Literal<'tcx>,\n }\n \n-newtype_index!(Promoted, \"promoted\");\n+newtype_index!(Promoted { DEBUG_NAME = \"promoted\" });\n \n #[derive(Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n pub enum Literal<'tcx> {"}, {"sha": "6c5a37aa1e5750ffb9b39daf67d86d578c585bdf", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 58, "deletions": 17, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/82f2c28bc831ff9ec16e0144c2cf73769f85f1de/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82f2c28bc831ff9ec16e0144c2cf73769f85f1de/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=82f2c28bc831ff9ec16e0144c2cf73769f85f1de", "patch": "@@ -40,39 +40,80 @@ impl Idx for u32 {\n \n #[macro_export]\n macro_rules! newtype_index {\n+    // ---- public rules ----\n+\n+    // Use default constants\n     ($name:ident) => (\n-        newtype_index!($name, unsafe { ::std::intrinsics::type_name::<$name>() });\n+        newtype_index!(\n+            @type[$name]\n+            @max[::std::u32::MAX]\n+            @debug_name[unsafe {::std::intrinsics::type_name::<$name>() }]);\n+    );\n+\n+    // Define any constants\n+    ($name:ident { $($tokens:tt)+ }) => (\n+        newtype_index!(\n+            @type[$name]\n+            @max[::std::u32::MAX]\n+            @debug_name[unsafe {::std::intrinsics::type_name::<$name>() }]\n+            $($tokens)+);\n     );\n \n-    ($name:ident, $debug_name:expr) => (\n+    // ---- private rules ----\n+\n+    // Base case, user-defined constants (if any) have already been defined\n+    (@type[$type:ident] @max[$max:expr] @debug_name[$debug_name:expr]) => (\n         #[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord,\n-         RustcEncodable, RustcDecodable)]\n-        pub struct $name(u32);\n-\n-        impl $name {\n-            // HACK use for constants\n-            #[allow(unused)]\n-            const fn const_new(x: u32) -> Self {\n-                $name(x)\n-            }\n-        }\n+            RustcEncodable, RustcDecodable)]\n+        pub struct $type(u32);\n \n-        impl Idx for $name {\n+        impl Idx for $type {\n             fn new(value: usize) -> Self {\n-                assert!(value < (::std::u32::MAX) as usize);\n-                $name(value as u32)\n+                assert!(value < ($max) as usize);\n+                $type(value as u32)\n             }\n             fn index(self) -> usize {\n                 self.0 as usize\n             }\n         }\n \n-        impl ::std::fmt::Debug for $name {\n+        impl ::std::fmt::Debug for $type {\n             fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n                 write!(fmt, \"{}{}\", $debug_name, self.0)\n             }\n         }\n-    )\n+    );\n+\n+    // Rewrite final without comma to one that includes comma\n+    (@type[$type:ident] @max[$max:expr] @debug_name[$debug_name:expr]\n+            $name:ident = $constant:expr) => (\n+        newtype_index!(@type[$type] @max[$max] @debug_name[$debug_name] $name = $constant,);\n+    );\n+\n+    // Rewrite final const without comma to one that includes comma\n+    (@type[$type:ident] @max[$_max:expr] @debug_name[$debug_name:expr]\n+            const $name:ident = $constant:expr) => (\n+        newtype_index!(@type[$type] @max[$max] @debug_name[$debug_name] const $name = $constant,);\n+    );\n+\n+    // Replace existing default for max\n+    (@type[$type:ident] @max[$_max:expr] @debug_name[$debug_name:expr]\n+            MAX = $max:expr, $($tokens:tt)*) => (\n+        newtype_index!(@type[$type] @max[$max] @debug_name[$debug_name] $(tokens)*);\n+    );\n+\n+    // Replace existing default for debug_name\n+    (@type[$type:ident] @max[$max:expr] @debug_name[$_debug_name:expr]\n+            DEBUG_NAME = $debug_name:expr, $($tokens:tt)*) => (\n+        newtype_index!(@type[$type] @max[$max] @debug_name[$debug_name] $($tokens)*);\n+    );\n+\n+    // Assign a user-defined constant (as final param)\n+    (@type[$type:ident] @max[$max:expr] @debug_name[$debug_name:expr]\n+            const $name:ident = $constant:expr, $($tokens:tt)*) => (\n+        pub const $name: $type = $type($constant);\n+        newtype_index!(@type[$type] @max[$max] @debug_name[$debug_name] $($tokens)*);\n+    );\n }\n \n #[derive(Clone, PartialEq, Eq)]"}]}