{"sha": "2b874f0242ee8e27af9961dd1a8712390832f1ad", "node_id": "C_kwDOAAsO6NoAKDJiODc0ZjAyNDJlZThlMjdhZjk5NjFkZDFhODcxMjM5MDgzMmYxYWQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-23T12:58:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-23T12:58:41Z"}, "message": "Rollup merge of #89829 - voidc:assoc-const-variance, r=lcnr\n\nConsider types appearing in const expressions to be invariant\n\nThis is an approach to fix #80977.\nCurrently, a type parameter which is only used in a constant expression is considered bivariant and will trigger error E0392 *\"parameter T is never used\"*.\nHere is a short example:\n\n```rust\npub trait Foo {\n    const N: usize;\n}\n\nstruct Bar<T: Foo>([u8; T::N])\nwhere [(); T::N]:;\n```\n([playgound](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2015&gist=b51a272853f75925e72efc1597478aa5))\n\nWhile it is possible to silence this error by adding a `PhantomData<T>` field, I think the better solution would be to make `T` invariant.\nThis would be analogous to the invariance constraints added for associated types.\nHowever, I'm quite new to the compiler and unsure whether this is the right approach.\n\nr? ``@varkor`` (since you authored #60058)", "tree": {"sha": "0e97a5e0b9723413f371d2b85221b3fd74ae5900", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e97a5e0b9723413f371d2b85221b3fd74ae5900"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b874f0242ee8e27af9961dd1a8712390832f1ad", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhdAcBCRBK7hj4Ov3rIwAA9eEIABIm7p06vaVZAby9NnS0Wpvh\nR4PDRVL4wG07JB2Rv9pj/kTve0p8aiaKx5qzAOnAx/ZVySkNEw2q5ZAYQUFnpKyS\nM212GHipjCT467I+e2+wthzqdMHy8zLLNyoEqY4AQZ8WKIh1dr2LzZmY/yBpAZYU\nIupYaRhgBuoUavJFCiAKvlHf8vd8DLT+uUUrNeoRRr3tMo6a+mohM16VPU2Lwtll\nvfqpcKCFpvfC2uA0D8uyS9CdlINtPhygjSBL7p491E/enAHeSOrV9wrnNd/q8P4C\nN31FY1NtZokTlH1KYGIaLQuiqZ38+5P9ykPAmweID2jIlt/YKhAz/urkdMmX4rY=\n=k0Ou\n-----END PGP SIGNATURE-----\n", "payload": "tree 0e97a5e0b9723413f371d2b85221b3fd74ae5900\nparent 17c602d423b7e881828f027e26357f750d2b0395\nparent a400f1058e53cf9603e82b7fd00d42df159b8361\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1634993921 +0200\ncommitter GitHub <noreply@github.com> 1634993921 +0200\n\nRollup merge of #89829 - voidc:assoc-const-variance, r=lcnr\n\nConsider types appearing in const expressions to be invariant\n\nThis is an approach to fix #80977.\nCurrently, a type parameter which is only used in a constant expression is considered bivariant and will trigger error E0392 *\"parameter T is never used\"*.\nHere is a short example:\n\n```rust\npub trait Foo {\n    const N: usize;\n}\n\nstruct Bar<T: Foo>([u8; T::N])\nwhere [(); T::N]:;\n```\n([playgound](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2015&gist=b51a272853f75925e72efc1597478aa5))\n\nWhile it is possible to silence this error by adding a `PhantomData<T>` field, I think the better solution would be to make `T` invariant.\nThis would be analogous to the invariance constraints added for associated types.\nHowever, I'm quite new to the compiler and unsure whether this is the right approach.\n\nr? ``@varkor`` (since you authored #60058)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b874f0242ee8e27af9961dd1a8712390832f1ad", "html_url": "https://github.com/rust-lang/rust/commit/2b874f0242ee8e27af9961dd1a8712390832f1ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b874f0242ee8e27af9961dd1a8712390832f1ad/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17c602d423b7e881828f027e26357f750d2b0395", "url": "https://api.github.com/repos/rust-lang/rust/commits/17c602d423b7e881828f027e26357f750d2b0395", "html_url": "https://github.com/rust-lang/rust/commit/17c602d423b7e881828f027e26357f750d2b0395"}, {"sha": "a400f1058e53cf9603e82b7fd00d42df159b8361", "url": "https://api.github.com/repos/rust-lang/rust/commits/a400f1058e53cf9603e82b7fd00d42df159b8361", "html_url": "https://github.com/rust-lang/rust/commit/a400f1058e53cf9603e82b7fd00d42df159b8361"}], "stats": {"total": 87, "additions": 57, "deletions": 30}, "files": [{"sha": "33c27ce86ddb5f8357f2a42a763b9559afbb3932", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/2b874f0242ee8e27af9961dd1a8712390832f1ad/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b874f0242ee8e27af9961dd1a8712390832f1ad/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=2b874f0242ee8e27af9961dd1a8712390832f1ad", "patch": "@@ -223,8 +223,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                     self.add_constraints_from_region(current, lt, variance_i)\n                 }\n                 GenericArgKind::Type(ty) => self.add_constraints_from_ty(current, ty, variance_i),\n-                GenericArgKind::Const(_) => {\n-                    // Consts impose no constraints.\n+                GenericArgKind::Const(val) => {\n+                    self.add_constraints_from_const(current, val, variance_i)\n                 }\n             }\n         }\n@@ -263,7 +263,8 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                 self.add_constraints_from_mt(current, &ty::TypeAndMut { ty, mutbl }, variance);\n             }\n \n-            ty::Array(typ, _) => {\n+            ty::Array(typ, len) => {\n+                self.add_constraints_from_const(current, len, variance);\n                 self.add_constraints_from_ty(current, typ, variance);\n             }\n \n@@ -385,13 +386,32 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n                     self.add_constraints_from_region(current, lt, variance_i)\n                 }\n                 GenericArgKind::Type(ty) => self.add_constraints_from_ty(current, ty, variance_i),\n-                GenericArgKind::Const(_) => {\n-                    // Consts impose no constraints.\n+                GenericArgKind::Const(val) => {\n+                    self.add_constraints_from_const(current, val, variance)\n                 }\n             }\n         }\n     }\n \n+    /// Adds constraints appropriate for a const expression `val`\n+    /// in a context with ambient variance `variance`\n+    fn add_constraints_from_const(\n+        &mut self,\n+        current: &CurrentItem,\n+        val: &ty::Const<'tcx>,\n+        variance: VarianceTermPtr<'a>,\n+    ) {\n+        debug!(\"add_constraints_from_const(val={:?}, variance={:?})\", val, variance);\n+\n+        match &val.val {\n+            ty::ConstKind::Unevaluated(uv) => {\n+                let substs = uv.substs(self.tcx());\n+                self.add_constraints_from_invariant_substs(current, substs, variance);\n+            }\n+            _ => {}\n+        }\n+    }\n+\n     /// Adds constraints appropriate for a function with signature\n     /// `sig` appearing in a context with ambient variance `variance`\n     fn add_constraints_from_sig("}, {"sha": "0cf69879a5c20fed0b30ab2f9524eb56a4424acf", "filename": "src/test/ui/const-generics/issues/issue-67375.full.stderr", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2b874f0242ee8e27af9961dd1a8712390832f1ad/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b874f0242ee8e27af9961dd1a8712390832f1ad/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.full.stderr?ref=2b874f0242ee8e27af9961dd1a8712390832f1ad", "patch": "@@ -8,15 +8,5 @@ LL |     inner: [(); { [|_: &T| {}; 0].len() }],\n    |\n    = help: consider moving this anonymous constant into a `const` function\n \n-error[E0392]: parameter `T` is never used\n-  --> $DIR/issue-67375.rs:5:12\n-   |\n-LL | struct Bug<T> {\n-   |            ^ unused parameter\n-   |\n-   = help: consider removing `T`, referring to it in a field, or using a marker such as `PhantomData`\n-   = help: if you intended `T` to be a const parameter, use `const T: usize` instead\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0392`."}, {"sha": "8b4b276bae0ba65ed5af74066ed724338da5ba86", "filename": "src/test/ui/const-generics/issues/issue-67375.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b874f0242ee8e27af9961dd1a8712390832f1ad/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b874f0242ee8e27af9961dd1a8712390832f1ad/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67375.rs?ref=2b874f0242ee8e27af9961dd1a8712390832f1ad", "patch": "@@ -3,7 +3,7 @@\n #![cfg_attr(full, feature(generic_const_exprs))]\n \n struct Bug<T> {\n-    //~^ ERROR parameter `T` is never used\n+    //[min]~^ ERROR parameter `T` is never used\n     inner: [(); { [|_: &T| {}; 0].len() }],\n     //[min]~^ ERROR generic parameters may not be used in const operations\n     //[full]~^^ ERROR overly complex generic constant"}, {"sha": "8e18fcdffab7063dea9fd34e6262d89d8e2b356d", "filename": "src/test/ui/const-generics/issues/issue-67945-1.full.stderr", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2b874f0242ee8e27af9961dd1a8712390832f1ad/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b874f0242ee8e27af9961dd1a8712390832f1ad/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.full.stderr?ref=2b874f0242ee8e27af9961dd1a8712390832f1ad", "patch": "@@ -12,16 +12,6 @@ LL |         let x: S = MaybeUninit::uninit();\n    = note: expected type parameter `S`\n                        found union `MaybeUninit<_>`\n \n-error[E0392]: parameter `S` is never used\n-  --> $DIR/issue-67945-1.rs:7:12\n-   |\n-LL | struct Bug<S> {\n-   |            ^ unused parameter\n-   |\n-   = help: consider removing `S`, referring to it in a field, or using a marker such as `PhantomData`\n-   = help: if you intended `S` to be a const parameter, use `const S: usize` instead\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0308, E0392.\n-For more information about an error, try `rustc --explain E0308`.\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "99f88bc8e1055a75d4cffab97501ca664b21a098", "filename": "src/test/ui/const-generics/issues/issue-67945-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2b874f0242ee8e27af9961dd1a8712390832f1ad/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b874f0242ee8e27af9961dd1a8712390832f1ad/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-67945-1.rs?ref=2b874f0242ee8e27af9961dd1a8712390832f1ad", "patch": "@@ -5,7 +5,7 @@\n use std::mem::MaybeUninit;\n \n struct Bug<S> {\n-    //~^ ERROR parameter `S` is never used\n+    //[min]~^ ERROR parameter `S` is never used\n     A: [(); {\n         let x: S = MaybeUninit::uninit();\n         //[min]~^ ERROR generic parameters may not be used in const operations"}, {"sha": "da55bc96244f2d0c5b1802348969354f9ff1ae38", "filename": "src/test/ui/variance/variance-associated-consts.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2b874f0242ee8e27af9961dd1a8712390832f1ad/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b874f0242ee8e27af9961dd1a8712390832f1ad/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-consts.rs?ref=2b874f0242ee8e27af9961dd1a8712390832f1ad", "patch": "@@ -0,0 +1,17 @@\n+// Test that the variance computation considers types that\n+// appear in const expressions to be invariant.\n+\n+#![feature(rustc_attrs)]\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+trait Trait {\n+    const Const: usize;\n+}\n+\n+#[rustc_variance]\n+struct Foo<T: Trait> { //~ ERROR [o]\n+    field: [u8; <T as Trait>::Const]\n+}\n+\n+fn main() { }"}, {"sha": "d1bf34781dfb29ff62196cdb761f2c227e46c140", "filename": "src/test/ui/variance/variance-associated-consts.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2b874f0242ee8e27af9961dd1a8712390832f1ad/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-consts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2b874f0242ee8e27af9961dd1a8712390832f1ad/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-consts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fvariance%2Fvariance-associated-consts.stderr?ref=2b874f0242ee8e27af9961dd1a8712390832f1ad", "patch": "@@ -0,0 +1,10 @@\n+error[E0208]: [o]\n+  --> $DIR/variance-associated-consts.rs:13:1\n+   |\n+LL | / struct Foo<T: Trait> {\n+LL | |     field: [u8; <T as Trait>::Const]\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}]}