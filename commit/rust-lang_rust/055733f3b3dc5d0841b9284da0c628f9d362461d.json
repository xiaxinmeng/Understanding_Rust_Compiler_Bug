{"sha": "055733f3b3dc5d0841b9284da0c628f9d362461d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NTczM2YzYjNkYzVkMDg0MWI5Mjg0ZGEwYzYyOGY5ZDM2MjQ2MWQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-05T06:54:22Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-10T07:32:34Z"}, "message": "parse: recover on `&'lt $expr` / `'lt $expr`.", "tree": {"sha": "08e0b7154750bb5b34271bb2e60b0802a4a4e4b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08e0b7154750bb5b34271bb2e60b0802a4a4e4b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/055733f3b3dc5d0841b9284da0c628f9d362461d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/055733f3b3dc5d0841b9284da0c628f9d362461d", "html_url": "https://github.com/rust-lang/rust/commit/055733f3b3dc5d0841b9284da0c628f9d362461d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/055733f3b3dc5d0841b9284da0c628f9d362461d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ee220c447911c519ebbd118e1415d961317b18d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ee220c447911c519ebbd118e1415d961317b18d", "html_url": "https://github.com/rust-lang/rust/commit/8ee220c447911c519ebbd118e1415d961317b18d"}], "stats": {"total": 148, "additions": 136, "deletions": 12}, "files": [{"sha": "5b39701001fddec46cdfacdca7d05688eb1e53b1", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 31, "deletions": 4, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/055733f3b3dc5d0841b9284da0c628f9d362461d/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/055733f3b3dc5d0841b9284da0c628f9d362461d/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=055733f3b3dc5d0841b9284da0c628f9d362461d", "patch": "@@ -673,10 +673,28 @@ impl<'a> Parser<'a> {\n     /// Parse `& mut? <expr>` or `& raw [ const | mut ] <expr>`.\n     fn parse_borrow_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n         self.expect_and()?;\n+        let has_lifetime = self.token.is_lifetime() && self.look_ahead(1, |t| t != &token::Colon);\n+        let lifetime = has_lifetime.then(|| self.expect_lifetime()); // For recovery, see below.\n         let (borrow_kind, mutbl) = self.parse_borrow_modifiers(lo);\n         let expr = self.parse_prefix_expr(None);\n-        let (span, expr) = self.interpolated_or_expr_span(expr)?;\n-        Ok((lo.to(span), ExprKind::AddrOf(borrow_kind, mutbl, expr)))\n+        let (hi, expr) = self.interpolated_or_expr_span(expr)?;\n+        let span = lo.to(hi);\n+        if let Some(lt) = lifetime {\n+            self.error_remove_borrow_lifetime(span, lt.ident.span);\n+        }\n+        Ok((span, ExprKind::AddrOf(borrow_kind, mutbl, expr)))\n+    }\n+\n+    fn error_remove_borrow_lifetime(&self, span: Span, lt_span: Span) {\n+        self.struct_span_err(span, \"borrow expressions cannot be annotated with lifetimes\")\n+            .span_label(lt_span, \"annotated with lifetime here\")\n+            .span_suggestion(\n+                lt_span,\n+                \"remove the lifetime annotation\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            )\n+            .emit();\n     }\n \n     /// Parse `mut?` or `raw [ const | mut ]`.\n@@ -1067,11 +1085,12 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n+    /// Parse `'label: $expr`. The label is already parsed.\n     fn parse_labeled_expr(&mut self, label: Label, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let lo = label.ident.span;\n         let label = Some(label);\n-        self.expect(&token::Colon)?;\n-        if self.eat_keyword(kw::While) {\n+        let ate_colon = self.eat(&token::Colon);\n+        let expr = if self.eat_keyword(kw::While) {\n             self.parse_while_expr(label, lo, attrs)\n         } else if self.eat_keyword(kw::For) {\n             self.parse_for_expr(label, lo, attrs)\n@@ -1084,7 +1103,15 @@ impl<'a> Parser<'a> {\n             self.struct_span_err(self.token.span, msg).span_label(self.token.span, msg).emit();\n             // Continue as an expression in an effort to recover on `'label: non_block_expr`.\n             self.parse_expr()\n+        }?;\n+\n+        if !ate_colon {\n+            self.struct_span_err(expr.span, \"labeled expression must be followed by `:`\")\n+                .span_label(lo, \"the label\")\n+                .emit();\n         }\n+\n+        Ok(expr)\n     }\n \n     /// Recover on the syntax `do catch { ... }` suggesting `try { ... }` instead."}, {"sha": "db9ef52c1aeec3a71e6aa4995b6d7bfeec122d8f", "filename": "src/test/ui/parser/labeled-no-colon-expr.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/055733f3b3dc5d0841b9284da0c628f9d362461d/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/055733f3b3dc5d0841b9284da0c628f9d362461d/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.rs?ref=055733f3b3dc5d0841b9284da0c628f9d362461d", "patch": "@@ -0,0 +1,17 @@\n+#![feature(label_break_value)]\n+\n+fn main() {\n+    'l0 while false {} //~ ERROR labeled expression must be followed by `:`\n+    'l1 for _ in 0..1 {} //~ ERROR labeled expression must be followed by `:`\n+    'l2 loop {} //~ ERROR labeled expression must be followed by `:`\n+    'l3 {} //~ ERROR labeled expression must be followed by `:`\n+    'l4 0; //~ ERROR labeled expression must be followed by `:`\n+    //~^ ERROR expected `while`, `for`, `loop` or `{`\n+\n+    macro_rules! m {\n+        ($b:block) => {\n+            'l5 $b; //~ ERROR cannot use a `block` macro fragment here\n+        }\n+    }\n+    m!({}); //~ ERROR labeled expression must be followed by `:`\n+}"}, {"sha": "8a9e2b324004e11ec9879f100544d30073d82f78", "filename": "src/test/ui/parser/labeled-no-colon-expr.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/055733f3b3dc5d0841b9284da0c628f9d362461d/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/055733f3b3dc5d0841b9284da0c628f9d362461d/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr?ref=055733f3b3dc5d0841b9284da0c628f9d362461d", "patch": "@@ -0,0 +1,70 @@\n+error: labeled expression must be followed by `:`\n+  --> $DIR/labeled-no-colon-expr.rs:4:5\n+   |\n+LL |     'l0 while false {}\n+   |     ---^^^^^^^^^^^^^^^\n+   |     |\n+   |     the label\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/labeled-no-colon-expr.rs:5:5\n+   |\n+LL |     'l1 for _ in 0..1 {}\n+   |     ---^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     the label\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/labeled-no-colon-expr.rs:6:5\n+   |\n+LL |     'l2 loop {}\n+   |     ---^^^^^^^^\n+   |     |\n+   |     the label\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/labeled-no-colon-expr.rs:7:5\n+   |\n+LL |     'l3 {}\n+   |     ---^^^\n+   |     |\n+   |     the label\n+\n+error: expected `while`, `for`, `loop` or `{` after a label\n+  --> $DIR/labeled-no-colon-expr.rs:8:9\n+   |\n+LL |     'l4 0;\n+   |         ^ expected `while`, `for`, `loop` or `{` after a label\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/labeled-no-colon-expr.rs:8:9\n+   |\n+LL |     'l4 0;\n+   |     --- ^\n+   |     |\n+   |     the label\n+\n+error: cannot use a `block` macro fragment here\n+  --> $DIR/labeled-no-colon-expr.rs:13:17\n+   |\n+LL |             'l5 $b;\n+   |             ----^^\n+   |             |\n+   |             the `block` fragment is within this context\n+...\n+LL |     m!({});\n+   |     ------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: labeled expression must be followed by `:`\n+  --> $DIR/labeled-no-colon-expr.rs:16:8\n+   |\n+LL |             'l5 $b;\n+   |             --- the label\n+...\n+LL |     m!({});\n+   |        ^^\n+\n+error: aborting due to 8 previous errors\n+"}, {"sha": "d223619e1de9ed3bdb23d80dc9ad9f9260b04874", "filename": "src/test/ui/parser/regions-out-of-scope-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/055733f3b3dc5d0841b9284da0c628f9d362461d/src%2Ftest%2Fui%2Fparser%2Fregions-out-of-scope-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/055733f3b3dc5d0841b9284da0c628f9d362461d/src%2Ftest%2Fui%2Fparser%2Fregions-out-of-scope-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fregions-out-of-scope-slice.rs?ref=055733f3b3dc5d0841b9284da0c628f9d362461d", "patch": "@@ -4,7 +4,7 @@ fn foo(cond: bool) {\n     let mut x;\n \n     if cond {\n-        x = &'blk [1,2,3]; //~ ERROR expected `:`, found `[`\n+        x = &'blk [1,2,3]; //~ ERROR borrow expressions cannot be annotated with lifetimes\n     }\n }\n "}, {"sha": "bbc657ffd614c40cac5689a7cca84156a72536c8", "filename": "src/test/ui/parser/regions-out-of-scope-slice.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/055733f3b3dc5d0841b9284da0c628f9d362461d/src%2Ftest%2Fui%2Fparser%2Fregions-out-of-scope-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/055733f3b3dc5d0841b9284da0c628f9d362461d/src%2Ftest%2Fui%2Fparser%2Fregions-out-of-scope-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fregions-out-of-scope-slice.stderr?ref=055733f3b3dc5d0841b9284da0c628f9d362461d", "patch": "@@ -1,8 +1,11 @@\n-error: expected `:`, found `[`\n-  --> $DIR/regions-out-of-scope-slice.rs:7:19\n+error: borrow expressions cannot be annotated with lifetimes\n+  --> $DIR/regions-out-of-scope-slice.rs:7:13\n    |\n LL |         x = &'blk [1,2,3];\n-   |                   ^ expected `:`\n+   |             ^----^^^^^^^^\n+   |              |\n+   |              annotated with lifetime here\n+   |              help: remove the lifetime annotation\n \n error: aborting due to previous error\n "}, {"sha": "dbed17f634ae77c261d66dec9175b448cca6cb8c", "filename": "src/test/ui/parser/trait-object-lifetime-parens.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/055733f3b3dc5d0841b9284da0c628f9d362461d/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/055733f3b3dc5d0841b9284da0c628f9d362461d/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.rs?ref=055733f3b3dc5d0841b9284da0c628f9d362461d", "patch": "@@ -8,7 +8,8 @@ fn check<'a>() {\n     let _: Box<Trait + ('a)>; //~ ERROR parenthesized lifetime bounds are not supported\n     let _: Box<('a) + Trait>;\n     //~^ ERROR expected type, found `'a`\n-    //~| ERROR expected `:`, found `)`\n+    //~| ERROR expected `while`, `for`, `loop` or `{` after a label\n+    //~| ERROR expected expression, found `)`\n }\n \n fn main() {}"}, {"sha": "367fcc2855580a8da4c2c072b47f9c94bbf3e67c", "filename": "src/test/ui/parser/trait-object-lifetime-parens.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/055733f3b3dc5d0841b9284da0c628f9d362461d/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/055733f3b3dc5d0841b9284da0c628f9d362461d/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-lifetime-parens.stderr?ref=055733f3b3dc5d0841b9284da0c628f9d362461d", "patch": "@@ -10,11 +10,17 @@ error: parenthesized lifetime bounds are not supported\n LL |     let _: Box<Trait + ('a)>;\n    |                        ^^^^ help: remove the parentheses\n \n-error: expected `:`, found `)`\n+error: expected `while`, `for`, `loop` or `{` after a label\n   --> $DIR/trait-object-lifetime-parens.rs:9:19\n    |\n LL |     let _: Box<('a) + Trait>;\n-   |                   ^ expected `:`\n+   |                   ^ expected `while`, `for`, `loop` or `{` after a label\n+\n+error: expected expression, found `)`\n+  --> $DIR/trait-object-lifetime-parens.rs:9:19\n+   |\n+LL |     let _: Box<('a) + Trait>;\n+   |                   ^ expected expression\n \n error: expected type, found `'a`\n   --> $DIR/trait-object-lifetime-parens.rs:9:17\n@@ -24,5 +30,5 @@ LL |     let _: Box<('a) + Trait>;\n    |         |\n    |         while parsing the type for `_`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n "}]}