{"sha": "9f338e18afd865e776d8f8cd7c763572a9a03ddf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmMzM4ZTE4YWZkODY1ZTc3NmQ4ZjhjZDdjNzYzNTcyYTlhMDNkZGY=", "commit": {"author": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2020-12-05T02:21:54Z"}, "committer": {"name": "Ivan Tham", "email": "pickfire@riseup.net", "date": "2021-01-20T15:41:56Z"}, "message": "Add more details explaning the Vec visualization\n\nSuggested by oli-obk", "tree": {"sha": "e06ac47580616726d54288b9c587b22d7e1dff67", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e06ac47580616726d54288b9c587b22d7e1dff67"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f338e18afd865e776d8f8cd7c763572a9a03ddf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f338e18afd865e776d8f8cd7c763572a9a03ddf", "html_url": "https://github.com/rust-lang/rust/commit/9f338e18afd865e776d8f8cd7c763572a9a03ddf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f338e18afd865e776d8f8cd7c763572a9a03ddf/comments", "author": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pickfire", "id": 4687791, "node_id": "MDQ6VXNlcjQ2ODc3OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4687791?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pickfire", "html_url": "https://github.com/pickfire", "followers_url": "https://api.github.com/users/pickfire/followers", "following_url": "https://api.github.com/users/pickfire/following{/other_user}", "gists_url": "https://api.github.com/users/pickfire/gists{/gist_id}", "starred_url": "https://api.github.com/users/pickfire/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pickfire/subscriptions", "organizations_url": "https://api.github.com/users/pickfire/orgs", "repos_url": "https://api.github.com/users/pickfire/repos", "events_url": "https://api.github.com/users/pickfire/events{/privacy}", "received_events_url": "https://api.github.com/users/pickfire/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e42d14927924036884734bd094747dd76b8b5f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e42d14927924036884734bd094747dd76b8b5f3", "html_url": "https://github.com/rust-lang/rust/commit/9e42d14927924036884734bd094747dd76b8b5f3"}], "stats": {"total": 42, "additions": 22, "deletions": 20}, "files": [{"sha": "e09c3e5d23b03fbd2b2db9b5138cec442d0997ea", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 22, "deletions": 20, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9f338e18afd865e776d8f8cd7c763572a9a03ddf/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f338e18afd865e776d8f8cd7c763572a9a03ddf/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=9f338e18afd865e776d8f8cd7c763572a9a03ddf", "patch": "@@ -253,26 +253,6 @@ mod spec_extend;\n /// can be slow. For this reason, it is recommended to use [`Vec::with_capacity`]\n /// whenever possible to specify how big the vector is expected to get.\n ///\n-/// A vector containing the elements `'a'` and `'b'` with capacity 4 can be\n-/// visualized as:\n-///\n-/// ```text\n-/// Stack       ptr      len  capacity\n-/// /Heap  +--------+--------+--------+\n-///        | 0x0123 |      2 |      4 |\n-///        +--------+--------+--------+\n-///             |\n-///             v\n-/// Heap   +--------+--------+--------+--------+\n-///        |    'a' |    'b' | uninit | uninit |\n-///        +--------+--------+--------+--------+\n-/// ```\n-///\n-/// - **uninit** represents memory that is not initialized, see [`MaybeUninit`].\n-/// - Note: the ABI is not stable and `Vec` makes no guarantees about its memory \n-///   layout (including the order of fields). See [the section about \n-///   guarantees](#guarantees).\n-///\n /// # Guarantees\n ///\n /// Due to its incredibly fundamental nature, `Vec` makes a lot of guarantees\n@@ -305,6 +285,28 @@ mod spec_extend;\n /// you would see if you coerced it to a slice), followed by [`capacity`]` -\n /// `[`len`] logically uninitialized, contiguous elements.\n ///\n+/// A vector containing the elements `'a'` and `'b'` with capacity 4 can be\n+/// visualized as below. The top part is the `Vec` struct, it contains a\n+/// pointer to the head of the allocation in the heap, length and capacity.\n+/// The bottom part is the allocation on the heap, a contiguous memory block.\n+///\n+/// ```text\n+///             ptr      len  capacity\n+///        +--------+--------+--------+\n+///        | 0x0123 |      2 |      4 |\n+///        +--------+--------+--------+\n+///             |\n+///             v\n+/// Heap   +--------+--------+--------+--------+\n+///        |    'a' |    'b' | uninit | uninit |\n+///        +--------+--------+--------+--------+\n+/// ```\n+///\n+/// - **uninit** represents memory that is not initialized, see [`MaybeUninit`].\n+/// - Note: the ABI is not stable and `Vec` makes no guarantees about its memory\n+///   layout (including the order of fields). See [the section about\n+///   guarantees](#guarantees).\n+///\n /// `Vec` will never perform a \"small optimization\" where elements are actually\n /// stored on the stack for two reasons:\n ///"}]}