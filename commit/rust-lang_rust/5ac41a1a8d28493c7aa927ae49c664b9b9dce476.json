{"sha": "5ac41a1a8d28493c7aa927ae49c664b9b9dce476", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYzQxYTFhOGQyODQ5M2M3YWE5MjdhZTQ5YzY2NGI5YjlkY2U0NzY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-07T20:51:34Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-03-07T20:51:34Z"}, "message": "Don't insert panic when generator can not unwind", "tree": {"sha": "55e1a95b282c03796f07588dee5101b21a5e36a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55e1a95b282c03796f07588dee5101b21a5e36a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ac41a1a8d28493c7aa927ae49c664b9b9dce476", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac41a1a8d28493c7aa927ae49c664b9b9dce476", "html_url": "https://github.com/rust-lang/rust/commit/5ac41a1a8d28493c7aa927ae49c664b9b9dce476", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ac41a1a8d28493c7aa927ae49c664b9b9dce476/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "425e7e5596c0ab6555fa75292d38863280d4a3d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/425e7e5596c0ab6555fa75292d38863280d4a3d7", "html_url": "https://github.com/rust-lang/rust/commit/425e7e5596c0ab6555fa75292d38863280d4a3d7"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "0502e57533d021e01e286d031afc6eb33397fe03", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5ac41a1a8d28493c7aa927ae49c664b9b9dce476/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac41a1a8d28493c7aa927ae49c664b9b9dce476/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=5ac41a1a8d28493c7aa927ae49c664b9b9dce476", "patch": "@@ -1008,6 +1008,45 @@ fn can_return<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> bool {\n     false\n }\n \n+fn can_unwind<'tcx>(tcx: TyCtxt<'tcx>, body: &Body<'tcx>) -> bool {\n+    // Nothing can unwind when landing pads are off.\n+    if tcx.sess.no_landing_pads() {\n+        return false;\n+    }\n+\n+    // Unwinds can only start at certain terminators.\n+    for block in body.basic_blocks() {\n+        match block.terminator().kind {\n+            // These never unwind.\n+            TerminatorKind::Goto { .. }\n+            | TerminatorKind::SwitchInt { .. }\n+            | TerminatorKind::Abort\n+            | TerminatorKind::Return\n+            | TerminatorKind::Unreachable\n+            | TerminatorKind::GeneratorDrop\n+            | TerminatorKind::FalseEdges { .. }\n+            | TerminatorKind::FalseUnwind { .. } => {}\n+\n+            // Resume will *continue* unwinding, but if there's no other unwinding terminator it\n+            // will never be reached.\n+            TerminatorKind::Resume => {}\n+\n+            TerminatorKind::Yield { .. } => {\n+                unreachable!(\"`can_unwind` called before generator transform\")\n+            }\n+\n+            // These may unwind.\n+            TerminatorKind::Drop { .. }\n+            | TerminatorKind::DropAndReplace { .. }\n+            | TerminatorKind::Call { .. }\n+            | TerminatorKind::Assert { .. } => return true,\n+        }\n+    }\n+\n+    // If we didn't find an unwinding terminator, the function cannot unwind.\n+    false\n+}\n+\n fn create_generator_resume_function<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     transform: TransformVisitor<'tcx>,\n@@ -1041,7 +1080,12 @@ fn create_generator_resume_function<'tcx>(\n         );\n     }\n \n-    cases.insert(2, (POISONED, insert_panic_block(tcx, body, ResumedAfterPanic(generator_kind))));\n+    if can_unwind(tcx, body) {\n+        cases.insert(\n+            2,\n+            (POISONED, insert_panic_block(tcx, body, ResumedAfterPanic(generator_kind))),\n+        );\n+    }\n \n     insert_switch(body, cases, &transform, TerminatorKind::Unreachable);\n "}]}