{"sha": "b875fe94859bbe37465219c0456583dbc0bed206", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4NzVmZTk0ODU5YmJlMzc0NjUyMTljMDQ1NjU4M2RiYzBiZWQyMDY=", "commit": {"author": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-14T18:23:55Z"}, "committer": {"name": "Ruben Schmidmeister", "email": "ruben.schmidmeister@icloud.com", "date": "2019-05-14T18:23:55Z"}, "message": "Name field more verbosely\n\nThis makes the comment above it obsolete", "tree": {"sha": "42a9eb3a46fcd7d9da9aea8947844204ca64b85f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42a9eb3a46fcd7d9da9aea8947844204ca64b85f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b875fe94859bbe37465219c0456583dbc0bed206", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEEU0FXzFYkrmfOhhqxKTh7Wnqvhj8FAlzbB9YACgkQKTh7Wnqv\nhj+oUwgApcsTCyoGY536ypZ7/FIiu8jAZrkFn9es7DL9yrblIvedMEIbNe2zvWE5\njGebpaWh+6BeH64dfFHYF7ne9qUNFGX22e3zH3mfRy7Jvu0LWfIBYc2wV8MbZlnP\nXd+nBV4aVpWt40TSBqzr1CdVWuOIEcLwfp5VriFx5ncRkNTqVpK6MTq57intVopi\nuYcJRIy8LwNWhNVWS0sbp0Ie1OZnPiWf2U4S+Orj/PE1+Q01v/7PLq8QrliqCwQ3\n0fB15Ba/bOA9EPi+Nivv6AjNW44ttlzgafv6oae0Yhgc90HsvpNqhpxjAACcDcFV\n1uGxsAMlkUr6Be5c5apwA+Jt7bNNCw==\n=R4xN\n-----END PGP SIGNATURE-----", "payload": "tree 42a9eb3a46fcd7d9da9aea8947844204ca64b85f\nparent cc97eaf9f9181aec5a1ba6459b204ed4a7fba62a\nauthor Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1557858235 +0200\ncommitter Ruben Schmidmeister <ruben.schmidmeister@icloud.com> 1557858235 +0200\n\nName field more verbosely\n\nThis makes the comment above it obsolete\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b875fe94859bbe37465219c0456583dbc0bed206", "html_url": "https://github.com/rust-lang/rust/commit/b875fe94859bbe37465219c0456583dbc0bed206", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b875fe94859bbe37465219c0456583dbc0bed206/comments", "author": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bash", "id": 4602612, "node_id": "MDQ6VXNlcjQ2MDI2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/4602612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bash", "html_url": "https://github.com/bash", "followers_url": "https://api.github.com/users/bash/followers", "following_url": "https://api.github.com/users/bash/following{/other_user}", "gists_url": "https://api.github.com/users/bash/gists{/gist_id}", "starred_url": "https://api.github.com/users/bash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bash/subscriptions", "organizations_url": "https://api.github.com/users/bash/orgs", "repos_url": "https://api.github.com/users/bash/repos", "events_url": "https://api.github.com/users/bash/events{/privacy}", "received_events_url": "https://api.github.com/users/bash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc97eaf9f9181aec5a1ba6459b204ed4a7fba62a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc97eaf9f9181aec5a1ba6459b204ed4a7fba62a", "html_url": "https://github.com/rust-lang/rust/commit/cc97eaf9f9181aec5a1ba6459b204ed4a7fba62a"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "47d885ef2e34741d34f8f697eaf24d986dd7ad89", "filename": "src/formatting.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b875fe94859bbe37465219c0456583dbc0bed206/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b875fe94859bbe37465219c0456583dbc0bed206/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=b875fe94859bbe37465219c0456583dbc0bed206", "patch": "@@ -458,8 +458,7 @@ struct FormatLines<'a> {\n     errors: Vec<FormattingError>,\n     issue_seeker: BadIssueSeeker,\n     line_buffer: String,\n-    // `true` if the current line contains a string literal.\n-    is_string: bool,\n+    current_line_contains_string_literal: bool,\n     format_line: bool,\n     allow_issue_seek: bool,\n     config: &'a Config,\n@@ -483,7 +482,7 @@ impl<'a> FormatLines<'a> {\n             allow_issue_seek: !issue_seeker.is_disabled(),\n             issue_seeker,\n             line_buffer: String::with_capacity(config.max_width() * 2),\n-            is_string: false,\n+            current_line_contains_string_literal: false,\n             format_line: config.file_lines().contains_line(name, 1),\n             config,\n         }\n@@ -547,7 +546,7 @@ impl<'a> FormatLines<'a> {\n                 && !self.is_skipped_line()\n                 && self.should_report_error(kind, &error_kind)\n             {\n-                let is_string = self.is_string;\n+                let is_string = self.current_line_contains_string_literal;\n                 self.push_err(error_kind, kind.is_comment(), is_string);\n             }\n         }\n@@ -561,7 +560,7 @@ impl<'a> FormatLines<'a> {\n         self.newline_count += 1;\n         self.last_was_space = false;\n         self.line_buffer.clear();\n-        self.is_string = false;\n+        self.current_line_contains_string_literal = false;\n     }\n \n     fn char(&mut self, c: char, kind: FullCodeCharKind) {\n@@ -574,7 +573,7 @@ impl<'a> FormatLines<'a> {\n         self.last_was_space = c.is_whitespace();\n         self.line_buffer.push(c);\n         if kind.is_string() {\n-            self.is_string = true;\n+            self.current_line_contains_string_literal = true;\n         }\n     }\n \n@@ -589,12 +588,14 @@ impl<'a> FormatLines<'a> {\n     }\n \n     fn should_report_error(&self, char_kind: FullCodeCharKind, error_kind: &ErrorKind) -> bool {\n-        let allow_error_report =\n-            if char_kind.is_comment() || self.is_string || error_kind.is_comment() {\n-                self.config.error_on_unformatted()\n-            } else {\n-                true\n-            };\n+        let allow_error_report = if char_kind.is_comment()\n+            || self.current_line_contains_string_literal\n+            || error_kind.is_comment()\n+        {\n+            self.config.error_on_unformatted()\n+        } else {\n+            true\n+        };\n \n         match error_kind {\n             ErrorKind::LineOverflow(..) => {"}]}