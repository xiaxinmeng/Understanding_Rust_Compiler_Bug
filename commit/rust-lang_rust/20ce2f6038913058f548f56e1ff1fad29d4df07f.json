{"sha": "20ce2f6038913058f548f56e1ff1fad29d4df07f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwY2UyZjYwMzg5MTMwNThmNTQ4ZjU2ZTFmZjFmYWQyOWQ0ZGYwN2Y=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-06T11:46:26Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2020-02-06T12:23:32Z"}, "message": "Move the `krate` method to Hir and remove the Krate dep node", "tree": {"sha": "1eec152f427152e543c6d6b8c372c845d4a59d2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1eec152f427152e543c6d6b8c372c845d4a59d2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20ce2f6038913058f548f56e1ff1fad29d4df07f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20ce2f6038913058f548f56e1ff1fad29d4df07f", "html_url": "https://github.com/rust-lang/rust/commit/20ce2f6038913058f548f56e1ff1fad29d4df07f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20ce2f6038913058f548f56e1ff1fad29d4df07f/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "513e326f5b87a671540ab7959d9205f0cb743491", "url": "https://api.github.com/repos/rust-lang/rust/commits/513e326f5b87a671540ab7959d9205f0cb743491", "html_url": "https://github.com/rust-lang/rust/commit/513e326f5b87a671540ab7959d9205f0cb743491"}], "stats": {"total": 103, "additions": 42, "deletions": 61}, "files": [{"sha": "29b94986a5f3a00b6effa877341231b78011b645", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=20ce2f6038913058f548f56e1ff1fad29d4df07f", "patch": "@@ -35,7 +35,7 @@\n //! \"infer\" some properties for each kind of `DepNode`:\n //!\n //! * Whether a `DepNode` of a given kind has any parameters at all. Some\n-//!   `DepNode`s, like `Krate`, represent global concepts with only one value.\n+//!   `DepNode`s, like `AllLocalTraitImpls`, represent global concepts with only one value.\n //! * Whether it is possible, in principle, to reconstruct a query key from a\n //!   given `DepNode`. Many `DepKind`s only require a single `DefId` parameter,\n //!   in which case it is possible to map the node's fingerprint back to the\n@@ -400,19 +400,6 @@ rustc_dep_node_append!([define_dep_nodes!][ <'tcx>\n     // We use this for most things when incr. comp. is turned off.\n     [] Null,\n \n-    // Represents the `Krate` as a whole (the `hir::Krate` value) (as\n-    // distinct from the krate module). This is basically a hash of\n-    // the entire krate, so if you read from `Krate` (e.g., by calling\n-    // `tcx.hir().krate()`), we will have to assume that any change\n-    // means that you need to be recompiled. This is because the\n-    // `Krate` value gives you access to all other items. To avoid\n-    // this fate, do not call `tcx.hir().krate()`; instead, prefer\n-    // wrappers like `tcx.visit_all_items_in_krate()`.  If there is no\n-    // suitable wrapper, you can use `tcx.dep_graph.ignore()` to gain\n-    // access to the krate, but you must remember to add suitable\n-    // edges yourself for the individual items that you read.\n-    [eval_always] Krate,\n-\n     // Represents the body of a function or method. The def-id is that of the\n     // function/method.\n     [eval_always] HirBody(DefId),"}, {"sha": "4c922654e02d57bd7ca836a5d4d780eb15806e87", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=20ce2f6038913058f548f56e1ff1fad29d4df07f", "patch": "@@ -223,12 +223,9 @@ impl<'a, 'hir> NodeCollector<'a, 'hir> {\n             (commandline_args_hash, crate_disambiguator.to_fingerprint()),\n         );\n \n-        let (_, crate_hash) = input_dep_node_and_hash(\n-            self.dep_graph,\n-            &mut self.hcx,\n-            DepNode::new_no_params(DepKind::Krate),\n-            crate_hash_input,\n-        );\n+        let mut stable_hasher = StableHasher::new();\n+        crate_hash_input.hash_stable(&mut self.hcx, &mut stable_hasher);\n+        let crate_hash: Fingerprint = stable_hasher.finish();\n \n         let svh = Svh::new(crate_hash.to_smaller_hash());\n         (self.map, svh)"}, {"sha": "da9695ec08a7913916aec029c9ec4fe7bfbc56d5", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=20ce2f6038913058f548f56e1ff1fad29d4df07f", "patch": "@@ -12,7 +12,7 @@ pub fn check_crate(hir_map: &Map<'_>) {\n \n     let errors = Lock::new(Vec::new());\n \n-    par_iter(&hir_map.krate().modules).for_each(|(module_id, _)| {\n+    par_iter(&hir_map.forest.krate.modules).for_each(|(module_id, _)| {\n         let local_def_id = hir_map.local_def_id(*module_id);\n         hir_map.visit_item_likes_in_module(\n             local_def_id,"}, {"sha": "0e74ccc63b8c6488a5609f4e909fca5656fe4379", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=20ce2f6038913058f548f56e1ff1fad29d4df07f", "patch": "@@ -140,11 +140,6 @@ impl Forest<'hir> {\n         Forest { krate, dep_graph: dep_graph.clone() }\n     }\n \n-    pub fn krate(&self) -> &Crate<'hir> {\n-        self.dep_graph.read(DepNode::new_no_params(DepKind::Krate));\n-        &self.krate\n-    }\n-\n     /// This is used internally in the dependency tracking system.\n     /// Use the `krate` method to ensure your dependency on the\n     /// crate is tracked.\n@@ -401,10 +396,6 @@ impl<'hir> Map<'hir> {\n         self.lookup(id).cloned()\n     }\n \n-    pub fn krate(&self) -> &'hir Crate<'hir> {\n-        self.forest.krate()\n-    }\n-\n     pub fn item(&self, id: HirId) -> &'hir Item<'hir> {\n         self.read(id);\n "}, {"sha": "259cee471603c1cf41701e4593914c714e1e9487", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=20ce2f6038913058f548f56e1ff1fad29d4df07f", "patch": "@@ -8,7 +8,9 @@ pub mod map;\n \n use crate::ty::query::Providers;\n use crate::ty::TyCtxt;\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::print;\n+use rustc_hir::Crate;\n use std::ops::Deref;\n \n /// A wrapper type which allows you to access HIR.\n@@ -18,6 +20,12 @@ pub struct Hir<'tcx> {\n     map: &'tcx map::Map<'tcx>,\n }\n \n+impl<'tcx> Hir<'tcx> {\n+    pub fn krate(&self) -> &'tcx Crate<'tcx> {\n+        self.tcx.hir_crate(LOCAL_CRATE)\n+    }\n+}\n+\n impl<'tcx> Deref for Hir<'tcx> {\n     type Target = &'tcx map::Map<'tcx>;\n "}, {"sha": "82ff7da13aea85fd24ad4bbeab2bf04d405ad9ca", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=20ce2f6038913058f548f56e1ff1fad29d4df07f", "patch": "@@ -43,6 +43,12 @@ rustc_queries! {\n     }\n \n     Other {\n+        // Represents crate as a whole (as distinct from the to-level crate module).\n+        // If you call `hir_crate` (e.g., indirectly by calling `tcx.hir().krate()`),\n+        // we will have to assume that any change means that you need to be recompiled.\n+        // This is because the `hir_crate` query gives you access to all other items.\n+        // To avoid this fate, do not call `tcx.hir().krate()`; instead,\n+        // prefer wrappers like `tcx.visit_all_items_in_krate()`.\n         query hir_crate(key: CrateNum) -> &'tcx Crate<'tcx> {\n             eval_always\n             no_hash"}, {"sha": "6d9fff351e9b80d5bb21d4e3a963498fa5352cd6", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=20ce2f6038913058f548f56e1ff1fad29d4df07f", "patch": "@@ -1177,7 +1177,6 @@ pub fn force_from_dep_node(tcx: TyCtxt<'_>, dep_node: &DepNode) -> bool {\n         // These are inputs that are expected to be pre-allocated and that\n         // should therefore always be red or green already.\n         DepKind::AllLocalTraitImpls |\n-        DepKind::Krate |\n         DepKind::CrateMetadata |\n         DepKind::HirBody |\n         DepKind::Hir |"}, {"sha": "d4f014904994102a7d30f06754104628b6fe08c9", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=20ce2f6038913058f548f56e1ff1fad29d4df07f", "patch": "@@ -69,19 +69,19 @@ where\n     match *ppmode {\n         PpmNormal => {\n             let annotation = NoAnn { sess: tcx.sess, tcx: Some(tcx) };\n-            f(&annotation, tcx.hir().forest.krate())\n+            f(&annotation, tcx.hir().krate())\n         }\n \n         PpmIdentified => {\n             let annotation = IdentifiedAnnotation { sess: tcx.sess, tcx: Some(tcx) };\n-            f(&annotation, tcx.hir().forest.krate())\n+            f(&annotation, tcx.hir().krate())\n         }\n         PpmTyped => {\n             abort_on_err(tcx.analysis(LOCAL_CRATE), tcx.sess);\n \n             let empty_tables = ty::TypeckTables::empty(None);\n             let annotation = TypedAnnotation { tcx, tables: Cell::new(&empty_tables) };\n-            tcx.dep_graph.with_ignore(|| f(&annotation, tcx.hir().forest.krate()))\n+            tcx.dep_graph.with_ignore(|| f(&annotation, tcx.hir().krate()))\n         }\n         _ => panic!(\"Should use call_with_pp_support\"),\n     }"}, {"sha": "87522d28d1e80fab52e2c292ddce4a36518d647d", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=20ce2f6038913058f548f56e1ff1fad29d4df07f", "patch": "@@ -612,7 +612,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                                 let parent_id = self.tcx.hir().get_parent_node(hir_id);\n                                 let parent_impl_id = hir::ImplItemId { hir_id: parent_id };\n                                 let parent_trait_id = hir::TraitItemId { hir_id: parent_id };\n-                                let krate = self.tcx.hir().forest.krate();\n+                                let krate = self.tcx.hir().krate();\n \n                                 if !(krate.items.contains_key(&parent_id)\n                                     || krate.impl_items.contains_key(&parent_impl_id)"}, {"sha": "80d3cc05fb7a71f2869785a03e55f1d5cb415193", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=20ce2f6038913058f548f56e1ff1fad29d4df07f", "patch": "@@ -87,7 +87,7 @@ pub fn run(options: Options) -> i32 {\n         compiler.enter(|queries| {\n             let lower_to_hir = queries.lower_to_hir()?;\n \n-            let mut opts = scrape_test_config(lower_to_hir.peek().0.krate());\n+            let mut opts = scrape_test_config(lower_to_hir.peek().0.untracked_krate());\n             opts.display_warnings |= options.display_warnings;\n             let enable_per_target_ignores = options.enable_per_target_ignores;\n             let mut collector = Collector::new("}, {"sha": "6e06e67b6682db41050e410695c07b8304f00f8d", "filename": "src/test/incremental/crate_hash_reorder.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Ftest%2Fincremental%2Fcrate_hash_reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Ftest%2Fincremental%2Fcrate_hash_reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fcrate_hash_reorder.rs?ref=20ce2f6038913058f548f56e1ff1fad29d4df07f", "patch": "@@ -7,11 +7,9 @@\n \n // Check that reordering otherwise identical items is not considered a\n // change at all.\n-#[rustc_clean(label=\"Krate\", cfg=\"rpass2\")]\n-\n+#[rustc_clean(label = \"hir_crate\", cfg = \"rpass2\")]\n // But removing an item, naturally, is.\n-#[rustc_dirty(label=\"Krate\", cfg=\"rpass3\")]\n-\n+#[rustc_dirty(label = \"hir_crate\", cfg = \"rpass3\")]\n #[cfg(rpass1)]\n pub struct X {\n     pub x: u32,\n@@ -26,4 +24,4 @@ pub struct X {\n     pub x: u32,\n }\n \n-pub fn main() { }\n+pub fn main() {}"}, {"sha": "20d4d4200bc1eefa008d49ee77352cd904152cfe", "filename": "src/test/incremental/issue-38222.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Ftest%2Fincremental%2Fissue-38222.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Ftest%2Fincremental%2Fissue-38222.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fissue-38222.rs?ref=20ce2f6038913058f548f56e1ff1fad29d4df07f", "patch": "@@ -1,18 +1,14 @@\n-// Test that debuginfo does not introduce a dependency edge to the Krate\n+// Test that debuginfo does not introduce a dependency edge to the hir_crate\n // dep-node.\n \n // revisions:rpass1 rpass2\n // compile-flags: -Z query-dep-graph\n \n-\n #![feature(rustc_attrs)]\n-\n-\n-#![rustc_partition_reused(module=\"issue_38222-mod1\", cfg=\"rpass2\")]\n-\n-// If codegen had added a dependency edge to the Krate dep-node, nothing would\n+#![rustc_partition_reused(module = \"issue_38222-mod1\", cfg = \"rpass2\")]\n+// If codegen had added a dependency edge to the hir_crate dep-node, nothing would\n // be re-used, so checking that this module was re-used is sufficient.\n-#![rustc_partition_reused(module=\"issue_38222\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module = \"issue_38222\", cfg = \"rpass2\")]\n \n //[rpass1] compile-flags: -C debuginfo=1\n //[rpass2] compile-flags: -C debuginfo=1"}, {"sha": "2c04e110525a653d15f903ab526fc98617d4ddf1", "filename": "src/test/incremental/krate-inherent.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Ftest%2Fincremental%2Fkrate-inherent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Ftest%2Fincremental%2Fkrate-inherent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fkrate-inherent.rs?ref=20ce2f6038913058f548f56e1ff1fad29d4df07f", "patch": "@@ -4,20 +4,20 @@\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n-#![rustc_partition_reused(module=\"krate_inherent-x\", cfg=\"cfail2\")]\n+#![rustc_partition_reused(module = \"krate_inherent-x\", cfg = \"cfail2\")]\n #![crate_type = \"rlib\"]\n \n pub mod x {\n     pub struct Foo;\n     impl Foo {\n-        pub fn foo(&self) { }\n+        pub fn foo(&self) {}\n     }\n \n     pub fn method() {\n         let x: Foo = Foo;\n-        x.foo(); // inherent methods used to add an edge from Krate\n+        x.foo(); // inherent methods used to add an edge from hir_crate\n     }\n }\n \n #[cfg(cfail1)]\n-pub fn bar() { } // remove this unrelated fn in cfail2, which should not affect `x::method`\n+pub fn bar() {} // remove this unrelated fn in cfail2, which should not affect `x::method`"}, {"sha": "6b1db74a37c66f43a33e84ff0df9c8cb7dc4d3f4", "filename": "src/test/incremental/krate-inlined.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Ftest%2Fincremental%2Fkrate-inlined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Ftest%2Fincremental%2Fkrate-inlined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fkrate-inlined.rs?ref=20ce2f6038913058f548f56e1ff1fad29d4df07f", "patch": "@@ -1,13 +1,13 @@\n // Regr. test that using HIR inlined from another krate does *not* add\n-// a dependency from the local Krate node. We can't easily test that\n+// a dependency from the local hir_crate node. We can't easily test that\n // directly anymore, so now we test that we get reuse.\n \n // revisions: rpass1 rpass2\n // compile-flags: -Z query-dep-graph\n \n #![allow(warnings)]\n #![feature(rustc_attrs)]\n-#![rustc_partition_reused(module=\"krate_inlined-x\", cfg=\"rpass2\")]\n+#![rustc_partition_reused(module = \"krate_inlined-x\", cfg = \"rpass2\")]\n \n fn main() {\n     x::method();"}, {"sha": "927ea5597783a5f716399e9ef318e2a2feb057f0", "filename": "src/test/ui/dep-graph/dep-graph-variance-alias.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.rs?ref=20ce2f6038913058f548f56e1ff1fad29d4df07f", "patch": "@@ -6,17 +6,16 @@\n #![feature(rustc_attrs)]\n #![allow(dead_code)]\n #![allow(unused_variables)]\n-\n-fn main() { }\n+#![rustc_if_this_changed(hir_crate)]\n+fn main() {}\n \n struct Foo<T> {\n-    f: T\n+    f: T,\n }\n \n-#[rustc_if_this_changed(Krate)]\n type TypeAlias<T> = Foo<T>;\n \n #[rustc_then_this_would_need(variances_of)] //~ ERROR OK\n struct Use<T> {\n-    x: TypeAlias<T>\n+    x: TypeAlias<T>,\n }"}, {"sha": "2422cb9bb2f52ed93695bd62f1a8f2c388299e30", "filename": "src/test/ui/dep-graph/dep-graph-variance-alias.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/20ce2f6038913058f548f56e1ff1fad29d4df07f/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdep-graph%2Fdep-graph-variance-alias.stderr?ref=20ce2f6038913058f548f56e1ff1fad29d4df07f", "patch": "@@ -1,5 +1,5 @@\n error: OK\n-  --> $DIR/dep-graph-variance-alias.rs:19:1\n+  --> $DIR/dep-graph-variance-alias.rs:18:1\n    |\n LL | #[rustc_then_this_would_need(variances_of)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}