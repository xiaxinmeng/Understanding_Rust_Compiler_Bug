{"sha": "b4e06b9e8899ed907a57d4ecea9dd1be6896a852", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0ZTA2YjllODg5OWVkOTA3YTU3ZDRlY2VhOWRkMWJlNjg5NmE4NTI=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-05-23T18:12:06Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-06-01T19:18:57Z"}, "message": "Call `skip_binder` or `no_bound_vars` before `self_ty`", "tree": {"sha": "df807fd86efb89e56bd0329e31d9b89e9f234fa3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df807fd86efb89e56bd0329e31d9b89e9f234fa3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b4e06b9e8899ed907a57d4ecea9dd1be6896a852", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b4e06b9e8899ed907a57d4ecea9dd1be6896a852", "html_url": "https://github.com/rust-lang/rust/commit/b4e06b9e8899ed907a57d4ecea9dd1be6896a852", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b4e06b9e8899ed907a57d4ecea9dd1be6896a852/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eaa57cfb712e0e61bbc61d2309c0fa708f4f297b", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaa57cfb712e0e61bbc61d2309c0fa708f4f297b", "html_url": "https://github.com/rust-lang/rust/commit/eaa57cfb712e0e61bbc61d2309c0fa708f4f297b"}], "stats": {"total": 66, "additions": 43, "deletions": 23}, "files": [{"sha": "3c9665e4c1414ce99fc222baed067a2985065311", "filename": "src/librustc_trait_selection/traits/error_reporting/mod.rs", "status": "modified", "additions": 21, "deletions": 11, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b4e06b9e8899ed907a57d4ecea9dd1be6896a852/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e06b9e8899ed907a57d4ecea9dd1be6896a852/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=b4e06b9e8899ed907a57d4ecea9dd1be6896a852", "patch": "@@ -289,7 +289,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             (\n                                 Some(format!(\n                                     \"`?` couldn't convert the error to `{}`\",\n-                                    trait_ref.self_ty(),\n+                                    trait_ref.skip_binder().self_ty(),\n                                 )),\n                                 Some(\n                                     \"the question mark operation (`?`) implicitly performs a \\\n@@ -339,7 +339,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                             if let Some(ret_span) = self.return_type_span(obligation) {\n                                 err.span_label(\n                                     ret_span,\n-                                    &format!(\"expected `{}` because of this\", trait_ref.self_ty()),\n+                                    &format!(\n+                                        \"expected `{}` because of this\",\n+                                        trait_ref.skip_binder().self_ty()\n+                                    ),\n                                 );\n                             }\n                         }\n@@ -352,7 +355,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                                     \"{}the trait `{}` is not implemented for `{}`\",\n                                     pre_message,\n                                     trait_ref.print_only_trait_path(),\n-                                    trait_ref.self_ty(),\n+                                    trait_ref.skip_binder().self_ty(),\n                                 )\n                             };\n \n@@ -642,7 +645,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     return;\n                 }\n \n-                let found_trait_ty = found_trait_ref.self_ty();\n+                let found_trait_ty = match found_trait_ref.self_ty().no_bound_vars() {\n+                    Some(ty) => ty,\n+                    None => return,\n+                };\n \n                 let found_did = match found_trait_ty.kind {\n                     ty::Closure(did, _) | ty::Foreign(did) | ty::FnDef(did, _) => Some(did),\n@@ -1359,11 +1365,15 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n     ) {\n         let get_trait_impl = |trait_def_id| {\n             let mut trait_impl = None;\n-            self.tcx.for_each_relevant_impl(trait_def_id, trait_ref.self_ty(), |impl_def_id| {\n-                if trait_impl.is_none() {\n-                    trait_impl = Some(impl_def_id);\n-                }\n-            });\n+            self.tcx.for_each_relevant_impl(\n+                trait_def_id,\n+                trait_ref.skip_binder().self_ty(),\n+                |impl_def_id| {\n+                    if trait_impl.is_none() {\n+                        trait_impl = Some(impl_def_id);\n+                    }\n+                },\n+            );\n             trait_impl\n         };\n         let required_trait_path = self.tcx.def_path_str(trait_ref.def_id());\n@@ -1434,7 +1444,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n         let mut err = match predicate.kind() {\n             ty::PredicateKind::Trait(ref data, _) => {\n                 let trait_ref = data.to_poly_trait_ref();\n-                let self_ty = trait_ref.self_ty();\n+                let self_ty = trait_ref.skip_binder().self_ty();\n                 debug!(\"self_ty {:?} {:?} trait_ref {:?}\", self_ty, self_ty.kind, trait_ref);\n \n                 if predicate.references_error() {\n@@ -1552,7 +1562,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             ty::PredicateKind::Projection(ref data) => {\n                 let trait_ref = data.to_poly_trait_ref(self.tcx);\n-                let self_ty = trait_ref.self_ty();\n+                let self_ty = trait_ref.skip_binder().self_ty();\n                 let ty = data.skip_binder().ty;\n                 if predicate.references_error() {\n                     return;"}, {"sha": "501cde40d245e97fb64cd2af6e11777a9469be7b", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b4e06b9e8899ed907a57d4ecea9dd1be6896a852/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e06b9e8899ed907a57d4ecea9dd1be6896a852/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b4e06b9e8899ed907a57d4ecea9dd1be6896a852", "patch": "@@ -318,7 +318,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         body_id: hir::HirId,\n     ) {\n-        let self_ty = trait_ref.self_ty();\n+        let self_ty = trait_ref.skip_binder().self_ty();\n         let (param_ty, projection) = match &self_ty.kind {\n             ty::Param(_) => (true, None),\n             ty::Projection(projection) => (false, Some(projection)),\n@@ -524,7 +524,11 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n         points_at_arg: bool,\n     ) {\n-        let self_ty = trait_ref.self_ty();\n+        let self_ty = match trait_ref.self_ty().no_bound_vars() {\n+            None => return,\n+            Some(ty) => ty,\n+        };\n+\n         let (def_id, output_ty, callable) = match self_ty.kind {\n             ty::Closure(def_id, substs) => (def_id, substs.as_closure().sig().output(), \"closure\"),\n             ty::FnDef(def_id, _) => (def_id, self_ty.fn_sig(self.tcx).output(), \"function\"),\n@@ -707,7 +711,10 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 return;\n             }\n \n-            let mut suggested_ty = trait_ref.self_ty();\n+            let mut suggested_ty = match trait_ref.self_ty().no_bound_vars() {\n+                Some(ty) => ty,\n+                None => return,\n+            };\n \n             for refs_remaining in 0..refs_number {\n                 if let ty::Ref(_, inner_ty, _) = suggested_ty.kind {\n@@ -829,6 +836,9 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         span: Span,\n         trait_ref: &ty::Binder<ty::TraitRef<'tcx>>,\n     ) {\n+        let is_empty_tuple =\n+            |ty: ty::Binder<Ty<'_>>| ty.skip_binder().kind == ty::Tuple(ty::List::empty());\n+\n         let hir = self.tcx.hir();\n         let parent_node = hir.get_parent_node(obligation.cause.body_id);\n         let node = hir.find(parent_node);\n@@ -840,7 +850,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             if let hir::ExprKind::Block(blk, _) = &body.value.kind {\n                 if sig.decl.output.span().overlaps(span)\n                     && blk.expr.is_none()\n-                    && \"()\" == &trait_ref.self_ty().to_string()\n+                    && is_empty_tuple(trait_ref.self_ty())\n                 {\n                     // FIXME(estebank): When encountering a method with a trait\n                     // bound not satisfied in the return type with a body that has\n@@ -1271,7 +1281,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 ObligationCauseCode::DerivedObligation(derived_obligation)\n                 | ObligationCauseCode::BuiltinDerivedObligation(derived_obligation)\n                 | ObligationCauseCode::ImplDerivedObligation(derived_obligation) => {\n-                    let ty = derived_obligation.parent_trait_ref.self_ty();\n+                    let ty = derived_obligation.parent_trait_ref.skip_binder().self_ty();\n                     debug!(\n                         \"maybe_note_obligation_cause_for_async_await: \\\n                             parent_trait_ref={:?} self_ty.kind={:?}\",\n@@ -1911,7 +1921,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n \n                 let impls_future = self.tcx.type_implements_trait((\n                     future_trait,\n-                    self_ty,\n+                    self_ty.skip_binder(),\n                     ty::List::empty(),\n                     obligation.param_env,\n                 ));\n@@ -1927,7 +1937,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 let projection_ty = ty::ProjectionTy {\n                     // `T`\n                     substs: self.tcx.mk_substs_trait(\n-                        trait_ref.self_ty(),\n+                        trait_ref.self_ty().skip_binder(),\n                         self.fresh_substs_for_item(span, item_def_id),\n                     ),\n                     // `Future::Output`"}, {"sha": "2b596be95426704a6a41526c81b4f1ba2ddeaa66", "filename": "src/librustc_trait_selection/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4e06b9e8899ed907a57d4ecea9dd1be6896a852/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e06b9e8899ed907a57d4ecea9dd1be6896a852/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs?ref=b4e06b9e8899ed907a57d4ecea9dd1be6896a852", "patch": "@@ -496,7 +496,7 @@ fn to_pretty_impl_header(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Option<String>\n     for (p, _) in predicates {\n         if let Some(poly_trait_ref) = p.to_opt_poly_trait_ref() {\n             if Some(poly_trait_ref.def_id()) == sized_trait {\n-                types_without_default_bounds.remove(poly_trait_ref.self_ty());\n+                types_without_default_bounds.remove(poly_trait_ref.self_ty().skip_binder());\n                 continue;\n             }\n         }"}, {"sha": "4e76fd4ca11fbc156262ccd442b8f65535edd511", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4e06b9e8899ed907a57d4ecea9dd1be6896a852/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e06b9e8899ed907a57d4ecea9dd1be6896a852/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=b4e06b9e8899ed907a57d4ecea9dd1be6896a852", "patch": "@@ -3812,7 +3812,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         trait_ref: ty::PolyTraitRef<'tcx>,\n         expected_vid: ty::TyVid,\n     ) -> bool {\n-        let self_ty = self.shallow_resolve(trait_ref.self_ty());\n+        let self_ty = self.shallow_resolve(trait_ref.skip_binder().self_ty());\n         debug!(\n             \"self_type_matches_expected_vid(trait_ref={:?}, self_ty={:?}, expected_vid={:?})\",\n             trait_ref, self_ty, expected_vid"}, {"sha": "dd4df11b1df3868af4450eb48ab46076e80a901b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b4e06b9e8899ed907a57d4ecea9dd1be6896a852/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e06b9e8899ed907a57d4ecea9dd1be6896a852/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=b4e06b9e8899ed907a57d4ecea9dd1be6896a852", "patch": "@@ -500,7 +500,7 @@ impl<'a> Clean<WherePredicate> for ty::PolyTraitPredicate<'a> {\n     fn clean(&self, cx: &DocContext<'_>) -> WherePredicate {\n         let poly_trait_ref = self.map_bound(|pred| pred.trait_ref);\n         WherePredicate::BoundPredicate {\n-            ty: poly_trait_ref.self_ty().clean(cx),\n+            ty: poly_trait_ref.skip_binder().self_ty().clean(cx),\n             bounds: vec![poly_trait_ref.clean(cx)],\n         }\n     }\n@@ -755,7 +755,7 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics, ty::GenericPredicates<'tcx\n                 let mut projection = None;\n                 let param_idx = (|| {\n                     if let Some(trait_ref) = p.to_opt_poly_trait_ref() {\n-                        if let ty::Param(param) = trait_ref.self_ty().kind {\n+                        if let ty::Param(param) = trait_ref.skip_binder().self_ty().kind {\n                             return Some(param.index);\n                         }\n                     } else if let Some(outlives) = p.to_opt_type_outlives() {"}, {"sha": "17dd3cd5493e7cbfb737fa94cfa7ef523ebcc3f5", "filename": "src/tools/clippy/clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b4e06b9e8899ed907a57d4ecea9dd1be6896a852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b4e06b9e8899ed907a57d4ecea9dd1be6896a852/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=b4e06b9e8899ed907a57d4ecea9dd1be6896a852", "patch": "@@ -95,7 +95,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for FutureNotSend {\n                                         let trait_ref = trait_pred.to_poly_trait_ref();\n                                         db.note(&*format!(\n                                             \"`{}` doesn't implement `{}`\",\n-                                            trait_ref.self_ty(),\n+                                            trait_ref.skip_binder().self_ty(),\n                                             trait_ref.print_only_trait_path(),\n                                         ));\n                                     }"}]}