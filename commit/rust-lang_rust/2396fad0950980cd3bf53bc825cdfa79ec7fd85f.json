{"sha": "2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzOTZmYWQwOTUwOTgwY2QzYmY1M2JjODI1Y2RmYTc5ZWM3ZmQ4NWY=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-22T15:27:18Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-08-22T15:27:18Z"}, "message": "Fix more \u201ca\u201d/\u201can\u201d typos", "tree": {"sha": "2d408c10f8e8430d936cc3c136b8b8189b51a37d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d408c10f8e8430d936cc3c136b8b8189b51a37d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "html_url": "https://github.com/rust-lang/rust/commit/2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b08b92eb42e4f19d95f99da854cf33008a7687b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b08b92eb42e4f19d95f99da854cf33008a7687b2", "html_url": "https://github.com/rust-lang/rust/commit/b08b92eb42e4f19d95f99da854cf33008a7687b2"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "042e6159aff8b220b4abe97ad372f1af027cf49f", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -307,7 +307,7 @@ where\n     /// relations between `'0` and `'a`).\n     ///\n     /// The variable `pair` can be either a `(vid, ty)` or `(ty, vid)`\n-    /// -- in other words, it is always a (unresolved) inference\n+    /// -- in other words, it is always an (unresolved) inference\n     /// variable `vid` and a type `ty` that are being related, but the\n     /// vid may appear either as the \"a\" type or the \"b\" type,\n     /// depending on where it appears in the tuple. The trait"}, {"sha": "89db8f464b4e7c7e41c2c003a4ab7def776c3341", "filename": "compiler/rustc_infer/src/infer/undo_log.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fundo_log.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -96,7 +96,7 @@ impl Default for InferCtxtUndoLogs<'_> {\n }\n \n /// The UndoLogs trait defines how we undo a particular kind of action (of type T). We can undo any\n-/// action that is convertable into a UndoLog (per the From impls above).\n+/// action that is convertable into an UndoLog (per the From impls above).\n impl<'tcx, T> UndoLogs<T> for InferCtxtUndoLogs<'tcx>\n where\n     UndoLog<'tcx>: From<T>,"}, {"sha": "b64a891cb2526402a421551b2050e2af390fc155", "filename": "compiler/rustc_lexer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lexer%2Fsrc%2Flib.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -489,7 +489,7 @@ impl Cursor<'_> {\n         // Start is already eaten, eat the rest of identifier.\n         self.eat_while(is_id_continue);\n         // Known prefixes must have been handled earlier. So if\n-        // we see a prefix here, it is definitely a unknown prefix.\n+        // we see a prefix here, it is definitely an unknown prefix.\n         match self.first() {\n             '#' | '\"' | '\\'' => UnknownPrefix,\n             _ => Ident,"}, {"sha": "03344973bb3e64372a72d66160fdce572f191287", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -118,7 +118,7 @@ fn to_camel_case(s: &str) -> String {\n         })\n         .fold((String::new(), None), |(acc, prev): (String, Option<String>), next| {\n             // separate two components with an underscore if their boundary cannot\n-            // be distinguished using a uppercase/lowercase case distinction\n+            // be distinguished using an uppercase/lowercase case distinction\n             let join = if let Some(prev) = prev {\n                 let l = prev.chars().last().unwrap();\n                 let f = next.chars().next().unwrap();"}, {"sha": "551b291468251727975e63e5d43d0093ab14e532", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -648,7 +648,7 @@ rustc_queries! {\n         }\n     }\n \n-    /// HACK: when evaluated, this reports a \"unsafe derive on repr(packed)\" error.\n+    /// HACK: when evaluated, this reports an \"unsafe derive on repr(packed)\" error.\n     ///\n     /// Unsafety checking is executed for each method separately, but we only want\n     /// to emit this error once per derive. As there are some impls with multiple"}, {"sha": "a78206034f08a50206d657980e4469f13641749b", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -681,7 +681,7 @@ impl<'tcx> ty::TyS<'tcx> {\n     }\n \n     /// Checks whether values of this type `T` implement the `Freeze`\n-    /// trait -- frozen types are those that do not contain a\n+    /// trait -- frozen types are those that do not contain an\n     /// `UnsafeCell` anywhere. This is a language concept used to\n     /// distinguish \"true immutability\", which is relevant to\n     /// optimization as well as the rules around static values. Note"}, {"sha": "f40a2db330a97062321e7ab72b26da575ab8a33f", "filename": "compiler/rustc_mir/src/borrow_check/diagnostics/explain_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fdiagnostics%2Fexplain_borrow.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -606,7 +606,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n \n     /// Checks if a borrowed value was captured by a trait object. We do this by\n     /// looking forward in the MIR from the reserve location and checking if we see\n-    /// a unsized cast to a trait object on our data.\n+    /// an unsized cast to a trait object on our data.\n     fn was_captured_by_trait_object(&self, borrow: &BorrowData<'tcx>) -> bool {\n         // Start at the reserve location, find the place that we want to see cast to a trait object.\n         let location = borrow.reserve_location;\n@@ -666,7 +666,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             }\n                             _ => {}\n                         },\n-                        // If we see a unsized cast, then if it is our data we should check\n+                        // If we see an unsized cast, then if it is our data we should check\n                         // whether it is being cast to a trait object.\n                         Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), operand, ty) => {\n                             match operand {"}, {"sha": "1dcb06765625899768022a79e169f4dfef0a690c", "filename": "compiler/rustc_mir/src/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Fmod.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -2003,7 +2003,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n \n             if let Some((prefix, mpi)) = shortest_uninit_seen {\n-                // Check for a reassignment into a uninitialized field of a union (for example,\n+                // Check for a reassignment into an uninitialized field of a union (for example,\n                 // after a move out). In this case, do not report an error here. There is an\n                 // exception, if this is the first assignment into the union (that is, there is\n                 // no move out from an earlier location) then this is an attempt at initialization"}, {"sha": "a559a6ce415a3b8d8aae04c07e46c8b25ab9d782", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -455,7 +455,7 @@ fn mono_item_visibility(\n         def_id\n     } else {\n         return if export_generics && is_generic {\n-            // If it is a upstream monomorphization and we export generics, we must make\n+            // If it is an upstream monomorphization and we export generics, we must make\n             // it available to downstream crates.\n             *can_be_internalized = false;\n             default_visibility(tcx, def_id, true)"}, {"sha": "8923d989b2944a63796842d5e1f6cbddf2e60e26", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -86,7 +86,7 @@ impl NonConstOp for FnCallNonConst {\n     }\n }\n \n-/// A call to a `#[unstable]` const fn or `#[rustc_const_unstable]` function.\n+/// A call to an `#[unstable]` const fn or `#[rustc_const_unstable]` function.\n ///\n /// Contains the name of the feature that would allow the use of this function.\n #[derive(Debug)]"}, {"sha": "344006e9fb4c902af74703640f3b0036b968db12", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -762,7 +762,7 @@ impl<'p, 'tcx> SubPatSet<'p, 'tcx> {\n                     for i in 0..*alt_count {\n                         let sub_set = subpats.get(&i).unwrap_or(&SubPatSet::Empty);\n                         if sub_set.is_empty() {\n-                            // Found a unreachable subpattern.\n+                            // Found an unreachable subpattern.\n                             spans.push(expanded[i].span);\n                         } else {\n                             fill_spans(sub_set, spans);"}, {"sha": "9f06bdcc135ba3d626d97fb418ffd18df84e859c", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -486,7 +486,7 @@ fn make_token_stream(\n         if let AttrAnnotatedTokenTree::Token(last_token) = last_token {\n             let unglued_first = last_token.kind.break_two_token_op().unwrap().0;\n \n-            // A 'unglued' token is always two ASCII characters\n+            // An 'unglued' token is always two ASCII characters\n             let mut first_span = last_token.span.shrink_to_lo();\n             first_span = first_span.with_hi(first_span.lo() + rustc_span::BytePos(1));\n "}, {"sha": "2e6af822043315c1871ad4d699198f4d499bb96f", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -3161,7 +3161,7 @@ impl<'a> Resolver<'a> {\n         }\n     }\n \n-    /// This function adds a suggestion to remove a unnecessary binding from an import that is\n+    /// This function adds a suggestion to remove an unnecessary binding from an import that is\n     /// nested. In the following example, this function will be invoked to remove the `a` binding\n     /// in the second use statement:\n     ///"}, {"sha": "f9b7bb8ea9915c0138c8724b47d01f478eb8a0b1", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2F_impl.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -743,7 +743,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     // possibly be referring to the current closure,\n                     // because we haven't produced the `Closure` for\n                     // this closure yet; this is exactly why the other\n-                    // code is looking for a self type of a unresolved\n+                    // code is looking for a self type of an unresolved\n                     // inference variable.\n                     ty::PredicateKind::ClosureKind(..) => None,\n                     ty::PredicateKind::TypeWellFormedFromEnv(..) => None,"}, {"sha": "0dadbdd1bd0543e4c08423b91c59363f8e777f7b", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -958,7 +958,7 @@ impl char {\n     /// Returns an iterator that yields the uppercase mapping of this `char` as one or more\n     /// `char`s.\n     ///\n-    /// If this `char` does not have a uppercase mapping, the iterator yields the same `char`.\n+    /// If this `char` does not have an uppercase mapping, the iterator yields the same `char`.\n     ///\n     /// If this `char` has a one-to-one uppercase mapping given by the [Unicode Character\n     /// Database][ucd] [`UnicodeData.txt`], the iterator yields that `char`."}, {"sha": "7c45c099304fa8b4f21ca6825685b354fc361ec3", "filename": "src/test/ui/lint/lint-nonstandard-style-unicode-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-nonstandard-style-unicode-1.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -30,7 +30,7 @@ struct \u5bf9__\u5426;\n struct \u30d2__\u03c7;\n //~^ ERROR type `\u30d2__\u03c7` should have an upper camel case name\n \n-// also cannot have lowercase letter next to a underscore.\n+// also cannot have lowercase letter next to an underscore.\n // so this triggers the lint:\n \n struct Hello_\u4f60\u597d;"}, {"sha": "4dd0ffe77ea49fbff542b3c20a48ad053aa94650", "filename": "src/tools/clippy/clippy_lints/src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fformatting.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -164,7 +164,7 @@ fn check_unop(cx: &EarlyContext<'_>, expr: &Expr) {\n         if !differing_macro_contexts(lhs.span, rhs.span) && !lhs.span.from_expansion();\n         // span between BinOp LHS and RHS\n         let binop_span = lhs.span.between(rhs.span);\n-        // if RHS is a UnOp\n+        // if RHS is an UnOp\n         if let ExprKind::Unary(op, ref un_rhs) = rhs.kind;\n         // from UnOp operator to UnOp operand\n         let unop_operand_span = rhs.span.until(un_rhs.span);"}, {"sha": "3f9110295fc6bcb4abe594e0fd6ec6dea2f17ee1", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2396fad0950980cd3bf53bc825cdfa79ec7fd85f/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=2396fad0950980cd3bf53bc825cdfa79ec7fd85f", "patch": "@@ -122,7 +122,7 @@ fn is_unfrozen<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n     // Ignore types whose layout is unknown since `is_freeze` reports every generic types as `!Freeze`,\n     // making it indistinguishable from `UnsafeCell`. i.e. it isn't a tool to prove a type is\n     // 'unfrozen'. However, this code causes a false negative in which\n-    // a type contains a layout-unknown type, but also a unsafe cell like `const CELL: Cell<T>`.\n+    // a type contains a layout-unknown type, but also an unsafe cell like `const CELL: Cell<T>`.\n     // Yet, it's better than `ty.has_type_flags(TypeFlags::HAS_TY_PARAM | TypeFlags::HAS_PROJECTION)`\n     // since it works when a pointer indirection involves (`Cell<*const T>`).\n     // Making up a `ParamEnv` where every generic params and assoc types are `Freeze`is another option;\n@@ -266,7 +266,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                 // in other words, lint consts whose value *could* be unfrozen, not definitely is.\n                 // This feels inconsistent with how the lint treats generic types,\n                 // which avoids linting types which potentially become unfrozen.\n-                // One could check whether a unfrozen type have a *frozen variant*\n+                // One could check whether an unfrozen type have a *frozen variant*\n                 // (like `body_id_opt.map_or_else(|| !has_frozen_variant(...), ...)`),\n                 // and do the same as the case of generic types at impl items.\n                 // Note that it isn't sufficient to check if it has an enum"}]}