{"sha": "bb55111c209a9d3a6249cab35308a506b7f22d53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiNTUxMTFjMjA5YTlkM2E2MjQ5Y2FiMzUzMDhhNTA2YjdmMjJkNTM=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-08T11:59:12Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-06-08T11:59:12Z"}, "message": "Merge #1385\n\n1385: Refactor and queryfy documentation handling in HIR r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "380c082f86c927b72c0bbda0ac2d9383c15df949", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/380c082f86c927b72c0bbda0ac2d9383c15df949"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb55111c209a9d3a6249cab35308a506b7f22d53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb55111c209a9d3a6249cab35308a506b7f22d53", "html_url": "https://github.com/rust-lang/rust/commit/bb55111c209a9d3a6249cab35308a506b7f22d53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb55111c209a9d3a6249cab35308a506b7f22d53/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "2a6b363b44e335af5f26ac503461ef15cca82ace", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a6b363b44e335af5f26ac503461ef15cca82ace", "html_url": "https://github.com/rust-lang/rust/commit/2a6b363b44e335af5f26ac503461ef15cca82ace"}, {"sha": "ac64967872507bb921ad69fc50ac3475c1fc26f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac64967872507bb921ad69fc50ac3475c1fc26f8", "html_url": "https://github.com/rust-lang/rust/commit/ac64967872507bb921ad69fc50ac3475c1fc26f8"}], "stats": {"total": 237, "additions": 109, "deletions": 128}, "files": [{"sha": "27850028b7d408bb1a2f5ae9d190706332defa2f", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 10, "deletions": 70, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=bb55111c209a9d3a6249cab35308a506b7f22d53", "patch": "@@ -12,7 +12,6 @@ use crate::{\n     ty::{TraitRef, InferenceResult, primitive::{IntTy, FloatTy, Signedness, IntBitness, FloatBitness}},\n     adt::{EnumVariantId, StructFieldId, VariantDef},\n     generics::HasGenericParams,\n-    docs::{Documentation, Docs, docs_from_ast},\n     ids::{FunctionId, StructId, EnumId, AstItemDef, ConstId, StaticId, TraitId, TypeAliasId, MacroDefId},\n     impl_block::ImplBlock,\n     resolve::Resolver,\n@@ -197,7 +196,7 @@ impl Module {\n     /// `None` for the crate root.\n     pub fn declaration_source(\n         self,\n-        db: &impl HirDatabase,\n+        db: &(impl DefDatabase + AstDatabase),\n     ) -> Option<(HirFileId, TreeArc<ast::Module>)> {\n         let def_map = db.crate_def_map(self.krate);\n         let decl = def_map[self.module_id].declaration?;\n@@ -319,12 +318,6 @@ impl Module {\n     }\n }\n \n-impl Docs for Module {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        self.declaration_source(db).and_then(|it| docs_from_ast(&*it.1))\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructField {\n     pub(crate) parent: VariantDef,\n@@ -355,15 +348,6 @@ impl StructField {\n     }\n }\n \n-impl Docs for StructField {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        match self.source(db).1 {\n-            FieldSource::Named(named) => docs_from_ast(&*named),\n-            FieldSource::Pos(..) => return None,\n-        }\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Struct {\n     pub(crate) id: StructId,\n@@ -425,12 +409,6 @@ impl Struct {\n     }\n }\n \n-impl Docs for Struct {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Union {\n     pub(crate) id: StructId,\n@@ -464,12 +442,6 @@ impl Union {\n     }\n }\n \n-impl Docs for Union {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Enum {\n     pub(crate) id: EnumId,\n@@ -519,12 +491,6 @@ impl Enum {\n     }\n }\n \n-impl Docs for Enum {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct EnumVariant {\n     pub(crate) parent: Enum,\n@@ -568,12 +534,6 @@ impl EnumVariant {\n     }\n }\n \n-impl Docs for EnumVariant {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n /// The defs which have a body.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub enum DefWithBody {\n@@ -757,12 +717,6 @@ impl Function {\n     }\n }\n \n-impl Docs for Function {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Const {\n     pub(crate) id: ConstId,\n@@ -806,12 +760,6 @@ impl Const {\n     }\n }\n \n-impl Docs for Const {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n /// The declared signature of a const.\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ConstSignature {\n@@ -884,12 +832,6 @@ impl Static {\n     }\n }\n \n-impl Docs for Static {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct Trait {\n     pub(crate) id: TraitId,\n@@ -936,12 +878,6 @@ impl Trait {\n     }\n }\n \n-impl Docs for Trait {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct TypeAlias {\n     pub(crate) id: TypeAliasId,\n@@ -998,16 +934,20 @@ impl TypeAlias {\n     }\n }\n \n-impl Docs for TypeAlias {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct MacroDef {\n     pub(crate) id: MacroDefId,\n }\n \n+impl MacroDef {\n+    pub fn source(\n+        &self,\n+        db: &(impl DefDatabase + AstDatabase),\n+    ) -> (HirFileId, TreeArc<ast::MacroCall>) {\n+        (self.id.0.file_id(), self.id.0.to_node(db))\n+    }\n+}\n+\n pub enum Container {\n     Trait(Trait),\n     ImplBlock(ImplBlock),"}, {"sha": "d2a372f3bd696424511c4e6f9c6247fb3a77458c", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=bb55111c209a9d3a6249cab35308a506b7f22d53", "patch": "@@ -127,6 +127,9 @@ pub trait DefDatabase: SourceDatabase {\n \n     #[salsa::invoke(crate::lang_item::LangItems::lang_item_query)]\n     fn lang_item(&self, start_crate: Crate, item: SmolStr) -> Option<LangItemTarget>;\n+\n+    #[salsa::invoke(crate::docs::documentation_query)]\n+    fn documentation(&self, def: crate::docs::DocDef) -> Option<crate::docs::Documentation>;\n }\n \n #[salsa::query_group(HirDatabaseStorage)]"}, {"sha": "1b0f84de5235609b9e453c02eb63d97d440f1d01", "filename": "crates/ra_hir/src/docs.rs", "status": "modified", "additions": 73, "deletions": 8, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_hir%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdocs.rs?ref=bb55111c209a9d3a6249cab35308a506b7f22d53", "patch": "@@ -1,24 +1,60 @@\n+use std::sync::Arc;\n+\n use ra_syntax::ast;\n \n-use crate::HirDatabase;\n+use crate::{\n+    HirDatabase, DefDatabase, AstDatabase,\n+    Module, StructField, Struct, Enum, EnumVariant, Static, Const, Function, Union, Trait, TypeAlias, FieldSource, MacroDef,\n+};\n+\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n+pub enum DocDef {\n+    Module(Module),\n+    StructField(StructField),\n+    Struct(Struct),\n+    Enum(Enum),\n+    EnumVariant(EnumVariant),\n+    Static(Static),\n+    Const(Const),\n+    Function(Function),\n+    Union(Union),\n+    Trait(Trait),\n+    TypeAlias(TypeAlias),\n+    MacroDef(MacroDef),\n+}\n+\n+impl_froms!(\n+    DocDef: Module,\n+    StructField,\n+    Struct,\n+    Enum,\n+    EnumVariant,\n+    Static,\n+    Const,\n+    Function,\n+    Union,\n+    Trait,\n+    TypeAlias,\n+    MacroDef\n+);\n \n /// Holds documentation\n-#[derive(Debug, Clone)]\n-pub struct Documentation(String);\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct Documentation(Arc<str>);\n \n impl Documentation {\n-    pub fn new(s: &str) -> Self {\n-        Self(s.into())\n+    fn new(s: &str) -> Documentation {\n+        Documentation(s.into())\n     }\n \n-    pub fn contents(&self) -> &str {\n-        &self.0\n+    pub fn as_str(&self) -> &str {\n+        &*self.0\n     }\n }\n \n impl Into<String> for Documentation {\n     fn into(self) -> String {\n-        self.contents().into()\n+        self.as_str().to_owned()\n     }\n }\n \n@@ -29,3 +65,32 @@ pub trait Docs {\n pub(crate) fn docs_from_ast(node: &impl ast::DocCommentsOwner) -> Option<Documentation> {\n     node.doc_comment_text().map(|it| Documentation::new(&it))\n }\n+\n+pub(crate) fn documentation_query(\n+    db: &(impl DefDatabase + AstDatabase),\n+    def: DocDef,\n+) -> Option<Documentation> {\n+    match def {\n+        DocDef::Module(it) => docs_from_ast(&*it.declaration_source(db)?.1),\n+        DocDef::StructField(it) => match it.source(db).1 {\n+            FieldSource::Named(named) => docs_from_ast(&*named),\n+            FieldSource::Pos(..) => return None,\n+        },\n+        DocDef::Struct(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Enum(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::EnumVariant(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Static(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Const(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Function(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Union(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::Trait(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::TypeAlias(it) => docs_from_ast(&*it.source(db).1),\n+        DocDef::MacroDef(it) => docs_from_ast(&*it.source(db).1),\n+    }\n+}\n+\n+impl<T: Into<DocDef> + Copy> Docs for T {\n+    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n+        db.documentation((*self).into())\n+    }\n+}"}, {"sha": "0e4aaf678ea49758b5030e8d53d4dee26bc829b4", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=bb55111c209a9d3a6249cab35308a506b7f22d53", "patch": "@@ -69,7 +69,7 @@ pub use self::{\n     expr::ExprScopes,\n     resolve::Resolution,\n     generics::{GenericParams, GenericParam, HasGenericParams},\n-    source_binder::{SourceAnalyzer, PathResolution, ScopeEntryWithSyntax,MacroByExampleDef},\n+    source_binder::{SourceAnalyzer, PathResolution, ScopeEntryWithSyntax},\n };\n \n pub use self::code_model::{"}, {"sha": "dc0dd23c9ed2a523d22b5c181cdd5d7037223018", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=bb55111c209a9d3a6249cab35308a506b7f22d53", "patch": "@@ -323,6 +323,8 @@ impl CrateDefMap {\n         (res.resolved_def, res.segment_index)\n     }\n \n+    // FIXME: This seems to do the same work as `resolve_path_with_macro`, but\n+    // using a completely different code path. Seems bad, huh?\n     pub(crate) fn find_macro(\n         &self,\n         db: &impl DefDatabase,"}, {"sha": "d6956f45e8c42426bd056293be9fceca4ab93808", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=bb55111c209a9d3a6249cab35308a506b7f22d53", "patch": "@@ -148,8 +148,8 @@ impl Resolver {\n             PathResult::from_resolution(self.resolve_name(db, &Name::self_param()))\n         } else {\n             let (item_map, module) = match self.module() {\n-                Some(m) => m,\n-                _ => return PathResult::empty(),\n+                Some(it) => it,\n+                None => return PathResult::empty(),\n             };\n             let (module_res, segment_index) = item_map.resolve_path(db, module, path);\n "}, {"sha": "410064d45acb721d1ee71039327f914c6ca56d83", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 6, "deletions": 24, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=bb55111c209a9d3a6249cab35308a506b7f22d53", "patch": "@@ -10,18 +10,17 @@ use std::sync::Arc;\n use rustc_hash::{FxHashSet, FxHashMap};\n use ra_db::{FileId, FilePosition};\n use ra_syntax::{\n-    SyntaxNode, AstPtr, TextUnit, SyntaxNodePtr, TextRange,TreeArc,\n+    SyntaxNode, AstPtr, TextUnit, SyntaxNodePtr, TextRange,\n     ast::{self, AstNode, NameOwner},\n     algo::find_node_at_offset,\n     SyntaxKind::*,\n };\n \n use crate::{\n     HirDatabase, Function, Struct, Enum, Const, Static, Either, DefWithBody, PerNs, Name,\n-    AsName, Module, HirFileId, Crate, Trait, Resolver, Ty,Path,\n+    AsName, Module, HirFileId, Crate, Trait, Resolver, Ty, Path, MacroDef,\n     expr::{BodySourceMap, scope::{ScopeId, ExprScopes}},\n-    ids::{LocationCtx, MacroDefId},\n-    docs::{docs_from_ast,Documentation},\n+    ids::LocationCtx,\n     expr, AstId,\n };\n \n@@ -182,27 +181,10 @@ pub enum PathResolution {\n     /// A generic parameter\n     GenericParam(u32),\n     SelfType(crate::ImplBlock),\n-    Macro(MacroByExampleDef),\n+    Macro(MacroDef),\n     AssocItem(crate::ImplItem),\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n-pub struct MacroByExampleDef {\n-    pub(crate) id: MacroDefId,\n-}\n-\n-impl MacroByExampleDef {\n-    pub fn source(&self, db: &impl HirDatabase) -> (HirFileId, TreeArc<ast::MacroCall>) {\n-        (self.id.0.file_id(), self.id.0.to_node(db))\n-    }\n-}\n-\n-impl crate::Docs for MacroByExampleDef {\n-    fn docs(&self, db: &impl HirDatabase) -> Option<Documentation> {\n-        docs_from_ast(&*self.source(db).1)\n-    }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ScopeEntryWithSyntax {\n     pub(crate) name: Name,\n@@ -284,10 +266,10 @@ impl SourceAnalyzer {\n         &self,\n         db: &impl HirDatabase,\n         macro_call: &ast::MacroCall,\n-    ) -> Option<MacroByExampleDef> {\n+    ) -> Option<MacroDef> {\n         let id =\n             self.resolver.resolve_macro_call(db, macro_call.path().and_then(Path::from_ast))?;\n-        Some(MacroByExampleDef { id })\n+        Some(MacroDef { id })\n     }\n \n     pub fn resolve_hir_path("}, {"sha": "45002d098baec428ac23a42f4fb6d3c49d128257", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=bb55111c209a9d3a6249cab35308a506b7f22d53", "patch": "@@ -238,10 +238,7 @@ impl NavigationTarget {\n         }\n     }\n \n-    pub(crate) fn from_macro_def(\n-        db: &RootDatabase,\n-        macro_call: hir::MacroByExampleDef,\n-    ) -> NavigationTarget {\n+    pub(crate) fn from_macro_def(db: &RootDatabase, macro_call: hir::MacroDef) -> NavigationTarget {\n         let (file_id, node) = macro_call.source(db);\n         log::debug!(\"nav target {}\", node.syntax().debug_dump());\n         NavigationTarget::from_named(file_id.original_file(db), &*node)"}, {"sha": "000036db423cdd288cad77086e9e243ddd6d2fc5", "filename": "crates/ra_ide_api/src/name_ref_kind.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs?ref=bb55111c209a9d3a6249cab35308a506b7f22d53", "patch": "@@ -1,11 +1,12 @@\n use ra_syntax::{AstNode, AstPtr, ast};\n use hir::Either;\n-use crate::db::RootDatabase;\n use test_utils::tested_by;\n \n+use crate::db::RootDatabase;\n+\n pub enum NameRefKind {\n     Method(hir::Function),\n-    Macro(hir::MacroByExampleDef),\n+    Macro(hir::MacroDef),\n     FieldAccess(hir::StructField),\n     AssocItem(hir::ImplItem),\n     Def(hir::ModuleDef),"}, {"sha": "25749258958c74b2d9aa136b6a7f9e1bff942477", "filename": "crates/ra_lsp_server/src/conv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fconv.rs?ref=bb55111c209a9d3a6249cab35308a506b7f22d53", "patch": "@@ -171,7 +171,7 @@ impl Conv for ra_ide_api::Documentation {\n     fn conv(self) -> Documentation {\n         Documentation::MarkupContent(MarkupContent {\n             kind: MarkupKind::Markdown,\n-            value: crate::markdown::sanitize_markdown(self).into(),\n+            value: crate::markdown::mark_fenced_blocks_as_rust(self.as_str()).into(),\n         })\n     }\n }"}, {"sha": "e382eee90c9032351a22ee2621f2131cf3e1dd6c", "filename": "crates/ra_lsp_server/src/markdown.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_lsp_server%2Fsrc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb55111c209a9d3a6249cab35308a506b7f22d53/crates%2Fra_lsp_server%2Fsrc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmarkdown.rs?ref=bb55111c209a9d3a6249cab35308a506b7f22d53", "patch": "@@ -1,26 +1,20 @@\n-use ra_ide_api::Documentation;\n-\n-pub(crate) fn sanitize_markdown(docs: Documentation) -> Documentation {\n-    let docs: String = docs.into();\n-\n-    // Massage markdown\n+pub(crate) fn mark_fenced_blocks_as_rust(src: &str) -> String {\n     let mut processed_lines = Vec::new();\n     let mut in_code_block = false;\n-    for line in docs.lines() {\n+    for line in src.lines() {\n         if line.starts_with(\"```\") {\n-            in_code_block = !in_code_block;\n+            in_code_block ^= true\n         }\n \n         let line = if in_code_block && line.starts_with(\"```\") && !line.contains(\"rust\") {\n-            \"```rust\".into()\n+            \"```rust\"\n         } else {\n-            line.to_string()\n+            line\n         };\n \n         processed_lines.push(line);\n     }\n-\n-    Documentation::new(&processed_lines.join(\"\\n\"))\n+    processed_lines.join(\"\\n\")\n }\n \n #[cfg(test)]\n@@ -30,9 +24,6 @@ mod tests {\n     #[test]\n     fn test_codeblock_adds_rust() {\n         let comment = \"```\\nfn some_rust() {}\\n```\";\n-        assert_eq!(\n-            sanitize_markdown(Documentation::new(comment)).contents(),\n-            \"```rust\\nfn some_rust() {}\\n```\"\n-        );\n+        assert_eq!(mark_fenced_blocks_as_rust(comment), \"```rust\\nfn some_rust() {}\\n```\");\n     }\n }"}]}