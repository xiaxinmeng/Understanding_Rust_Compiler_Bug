{"sha": "d7c451ed9523039d96daa3facfd0eb9137afbaed", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3YzQ1MWVkOTUyMzAzOWQ5NmRhYTNmYWNmZDBlYjkxMzdhZmJhZWQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-05-14T13:18:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-14T13:18:22Z"}, "message": "Merge #4455\n\n4455: Prioritize locals with correct types r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "feb465bcaa569115f3d7b5fab74ba395c8d9940d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feb465bcaa569115f3d7b5fab74ba395c8d9940d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7c451ed9523039d96daa3facfd0eb9137afbaed", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJevUUeCRBK7hj4Ov3rIwAAdHIIAJnLtnOlEbha17grPGp2nU58\nvnxGMljQCCd8KYvTHuioXESBNrFipiy0IVpB78JfSwejn3g+bgL2VHAYuvHkSJM3\nE0rKHM7Ofp2SW5krK5D0EUE/DBeopwW/NRUETFcTvrLzEX1s9kjN1EHlQJh+xMRL\n1JrgWmQe7rM6tDue1vUj0ECY14PMUQTBpq4Z6V6tpLC9G7vv7LDd7ITDQyiYUhYW\nS6N0G4I8Gf3V/tdWSCGyxAP9yta8qKZtx4OPm3qWTvM2lwaYyYr93/Bn/mKeYHo6\nRPfV3QGJ8H3Kcwwy6zrEF0MrkEz1gqROvkmK6FdklSsSjYFx2m9p9esuUIjSmqw=\n=k8Kh\n-----END PGP SIGNATURE-----\n", "payload": "tree feb465bcaa569115f3d7b5fab74ba395c8d9940d\nparent f1587ac26332c3378c41d3cc552b270ee6a45cc4\nparent 90c62bcee9d1950d0e4b642fc2bd3ae5374e40cb\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1589462302 +0000\ncommitter GitHub <noreply@github.com> 1589462302 +0000\n\nMerge #4455\n\n4455: Prioritize locals with correct types r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c451ed9523039d96daa3facfd0eb9137afbaed", "html_url": "https://github.com/rust-lang/rust/commit/d7c451ed9523039d96daa3facfd0eb9137afbaed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7c451ed9523039d96daa3facfd0eb9137afbaed/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1587ac26332c3378c41d3cc552b270ee6a45cc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1587ac26332c3378c41d3cc552b270ee6a45cc4", "html_url": "https://github.com/rust-lang/rust/commit/f1587ac26332c3378c41d3cc552b270ee6a45cc4"}, {"sha": "90c62bcee9d1950d0e4b642fc2bd3ae5374e40cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/90c62bcee9d1950d0e4b642fc2bd3ae5374e40cb", "html_url": "https://github.com/rust-lang/rust/commit/90c62bcee9d1950d0e4b642fc2bd3ae5374e40cb"}], "stats": {"total": 60, "additions": 55, "deletions": 5}, "files": [{"sha": "da336973c1801a35cb08c02bce6a298496056d35", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d7c451ed9523039d96daa3facfd0eb9137afbaed/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c451ed9523039d96daa3facfd0eb9137afbaed/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=d7c451ed9523039d96daa3facfd0eb9137afbaed", "patch": "@@ -34,7 +34,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) record_pat_syntax: Option<ast::RecordPat>,\n     pub(super) record_field_syntax: Option<ast::RecordField>,\n     pub(super) impl_def: Option<ast::ImplDef>,\n-    /// FIXME: `ActiveParameter` is string-based, which is very wrong\n+    /// FIXME: `ActiveParameter` is string-based, which is very very wrong\n     pub(super) active_parameter: Option<ActiveParameter>,\n     pub(super) is_param: bool,\n     /// If a name-binding or reference to a const in a pattern."}, {"sha": "077cf9647735f6add4d73d77cfa73132707182f6", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/d7c451ed9523039d96daa3facfd0eb9137afbaed/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7c451ed9523039d96daa3facfd0eb9137afbaed/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=d7c451ed9523039d96daa3facfd0eb9137afbaed", "patch": "@@ -17,12 +17,11 @@ use crate::{\n impl Completions {\n     pub(crate) fn add_field(&mut self, ctx: &CompletionContext, field: hir::Field, ty: &Type) {\n         let is_deprecated = is_deprecated(field, ctx.db);\n-        let ty = ty.display(ctx.db).to_string();\n         let name = field.name(ctx.db);\n         let mut completion_item =\n             CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.to_string())\n                 .kind(CompletionItemKind::Field)\n-                .detail(ty.clone())\n+                .detail(ty.display(ctx.db).to_string())\n                 .set_documentation(field.docs(ctx.db))\n                 .set_deprecated(is_deprecated);\n \n@@ -107,6 +106,12 @@ impl Completions {\n             }\n         };\n \n+        if let ScopeDef::Local(local) = resolution {\n+            if let Some(score) = compute_score(ctx, &local.ty(ctx.db), &local_name) {\n+                completion_item = completion_item.set_score(score);\n+            }\n+        }\n+\n         // Add `<>` for generic types\n         if ctx.is_path_type && !ctx.has_type_args && ctx.config.add_call_parenthesis {\n             if let Some(cap) = ctx.config.snippet_cap {\n@@ -319,10 +324,11 @@ impl Completions {\n \n pub(crate) fn compute_score(\n     ctx: &CompletionContext,\n-    // FIXME: this definitely should be a `Type`\n-    ty: &str,\n+    ty: &Type,\n     name: &str,\n ) -> Option<CompletionScore> {\n+    // FIXME: this should not fall back to string equality.\n+    let ty = &ty.display(ctx.db).to_string();\n     let (active_name, active_type) = if let Some(record_field) = &ctx.record_field_syntax {\n         tested_by!(test_struct_field_completion_in_record_lit);\n         let (struct_field, _local) = ctx.sema.resolve_record_field(record_field)?;\n@@ -1405,4 +1411,48 @@ mod tests {\n         \"###\n         );\n     }\n+\n+    #[test]\n+    fn prioritize_exact_ref_match() {\n+        assert_debug_snapshot!(\n+        do_reference_completion(\n+                r\"\n+                    struct WorldSnapshot { _f: () };\n+                    fn go(world: &WorldSnapshot) {\n+                        go(w<|>)\n+                    }\n+                    \",\n+        ),\n+            @r###\"\n+        [\n+            CompletionItem {\n+                label: \"WorldSnapshot\",\n+                source_range: 132..133,\n+                delete: 132..133,\n+                insert: \"WorldSnapshot\",\n+                kind: Struct,\n+            },\n+            CompletionItem {\n+                label: \"go(\u2026)\",\n+                source_range: 132..133,\n+                delete: 132..133,\n+                insert: \"go(${1:world})$0\",\n+                kind: Function,\n+                lookup: \"go\",\n+                detail: \"fn go(world: &WorldSnapshot)\",\n+                trigger_call_info: true,\n+            },\n+            CompletionItem {\n+                label: \"world\",\n+                source_range: 132..133,\n+                delete: 132..133,\n+                insert: \"world\",\n+                kind: Binding,\n+                detail: \"&WorldSnapshot\",\n+                score: TypeAndNameMatch,\n+            },\n+        ]\n+        \"###\n+        );\n+    }\n }"}]}