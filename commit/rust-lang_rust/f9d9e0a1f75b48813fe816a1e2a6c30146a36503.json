{"sha": "f9d9e0a1f75b48813fe816a1e2a6c30146a36503", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZDllMGExZjc1YjQ4ODEzZmU4MTZhMWUyYTZjMzAxNDZhMzY1MDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-19T12:53:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-07-19T13:09:32Z"}, "message": "several highlighting cleanups\n\n* make stuff more type-safe by using `BindPat` instead of just `Pat`\n* don't add `mut` into binding hash\n* reset shadow counter when we enter a function", "tree": {"sha": "254e13d1f0fb3072d02ba58f918de043a5cfcded", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/254e13d1f0fb3072d02ba58f918de043a5cfcded"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9d9e0a1f75b48813fe816a1e2a6c30146a36503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d9e0a1f75b48813fe816a1e2a6c30146a36503", "html_url": "https://github.com/rust-lang/rust/commit/f9d9e0a1f75b48813fe816a1e2a6c30146a36503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9d9e0a1f75b48813fe816a1e2a6c30146a36503/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4188899962774713707629d4e15255e3bc9c85e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4188899962774713707629d4e15255e3bc9c85e", "html_url": "https://github.com/rust-lang/rust/commit/e4188899962774713707629d4e15255e3bc9c85e"}], "stats": {"total": 160, "additions": 92, "deletions": 68}, "files": [{"sha": "55eb7da356541cf61ccb5da2112e7fffa38b796b", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f9d9e0a1f75b48813fe816a1e2a6c30146a36503/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d9e0a1f75b48813fe816a1e2a6c30146a36503/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=f9d9e0a1f75b48813fe816a1e2a6c30146a36503", "patch": "@@ -181,7 +181,7 @@ pub enum PathResolution {\n     /// An item\n     Def(crate::ModuleDef),\n     /// A local binding (only value namespace)\n-    LocalBinding(Either<AstPtr<ast::Pat>, AstPtr<ast::SelfParam>>),\n+    LocalBinding(Either<AstPtr<ast::BindPat>, AstPtr<ast::SelfParam>>),\n     /// A generic parameter\n     GenericParam(u32),\n     SelfType(crate::ImplBlock),\n@@ -307,7 +307,18 @@ impl SourceAnalyzer {\n         let res = match res {\n             crate::Resolution::Def(it) => PathResolution::Def(it),\n             crate::Resolution::LocalBinding(it) => {\n-                PathResolution::LocalBinding(self.body_source_map.as_ref()?.pat_syntax(it)?)\n+                // We get a `PatId` from resolver, but it actually can only\n+                // point at `BindPat`, and not at the arbitrary pattern.\n+                let pat_ptr = self.body_source_map.as_ref()?.pat_syntax(it)?;\n+                let pat_ptr = match pat_ptr {\n+                    Either::A(pat) => {\n+                        let pat: AstPtr<ast::BindPat> =\n+                            pat.cast_checking_kind(|kind| kind == BIND_PAT).unwrap();\n+                        Either::A(pat)\n+                    }\n+                    Either::B(self_param) => Either::B(self_param),\n+                };\n+                PathResolution::LocalBinding(pat_ptr)\n             }\n             crate::Resolution::GenericParam(it) => PathResolution::GenericParam(it),\n             crate::Resolution::SelfType(it) => PathResolution::SelfType(it),"}, {"sha": "8aff5f2cdf1b6d6cf3c66ff1b6919932cb3ecd99", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f9d9e0a1f75b48813fe816a1e2a6c30146a36503/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d9e0a1f75b48813fe816a1e2a6c30146a36503/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=f9d9e0a1f75b48813fe816a1e2a6c30146a36503", "patch": "@@ -91,24 +91,11 @@ impl NavigationTarget {\n     pub(crate) fn from_pat(\n         db: &RootDatabase,\n         file_id: FileId,\n-        pat: AstPtr<ast::Pat>,\n+        pat: AstPtr<ast::BindPat>,\n     ) -> NavigationTarget {\n         let parse = db.parse(file_id);\n-        let (name, full_range) = match pat.to_node(parse.tree().syntax()).kind() {\n-            ast::PatKind::BindPat(pat) => return NavigationTarget::from_bind_pat(file_id, &pat),\n-            _ => (\"_\".into(), pat.syntax_node_ptr().range()),\n-        };\n-\n-        NavigationTarget {\n-            file_id,\n-            name,\n-            full_range,\n-            focus_range: None,\n-            kind: NAME,\n-            container_name: None,\n-            description: None, //< No documentation for Description\n-            docs: None,        //< No documentation for Pattern\n-        }\n+        let pat = pat.to_node(parse.tree().syntax());\n+        NavigationTarget::from_bind_pat(file_id, &pat)\n     }\n \n     pub(crate) fn from_self_param("}, {"sha": "f7db6c826b03f2e0847bf107d2f3360ab11adf07", "filename": "crates/ra_ide_api/src/name_ref_kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9d9e0a1f75b48813fe816a1e2a6c30146a36503/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d9e0a1f75b48813fe816a1e2a6c30146a36503/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs?ref=f9d9e0a1f75b48813fe816a1e2a6c30146a36503", "patch": "@@ -11,7 +11,7 @@ pub enum NameRefKind {\n     AssocItem(hir::ImplItem),\n     Def(hir::ModuleDef),\n     SelfType(hir::Ty),\n-    Pat(AstPtr<ast::Pat>),\n+    Pat(AstPtr<ast::BindPat>),\n     SelfParam(AstPtr<ast::SelfParam>),\n     GenericParam(u32),\n }"}, {"sha": "ed664817e84ba3b786e52025cae53b4b5cb0e626", "filename": "crates/ra_ide_api/src/snapshots/rainbow_highlighting.html", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9d9e0a1f75b48813fe816a1e2a6c30146a36503/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "raw_url": "https://github.com/rust-lang/rust/raw/f9d9e0a1f75b48813fe816a1e2a6c30146a36503/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsnapshots%2Frainbow_highlighting.html?ref=f9d9e0a1f75b48813fe816a1e2a6c30146a36503", "patch": "@@ -26,4 +26,8 @@\n \n     <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"1903207544374197704\" style=\"color: hsl(58,61%,61%);\">x</span> = <span class=\"string\">\"other color please!\"</span>;\n     <span class=\"keyword\">let</span> <span class=\"variable\" data-binding-hash=\"14878783531007968800\" style=\"color: hsl(265,73%,83%);\">y</span> = <span class=\"variable\" data-binding-hash=\"1903207544374197704\" style=\"color: hsl(58,61%,61%);\">x</span>.<span class=\"text\">to_string</span>();\n+}\n+\n+<span class=\"keyword\">fn</span> <span class=\"function\">bar</span>() {\n+    <span class=\"keyword\">let</span> <span class=\"keyword\">mut</span> <span class=\"variable.mut\" data-binding-hash=\"3888301305669440875\" style=\"color: hsl(242,59%,59%);\">hello</span> = <span class=\"string\">\"hello\"</span>;\n }</code></pre>\n\\ No newline at end of file"}, {"sha": "0e5253025b691089b25abd3f59efa023086e8e2d", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 60, "deletions": 49, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/f9d9e0a1f75b48813fe816a1e2a6c30146a36503/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d9e0a1f75b48813fe816a1e2a6c30146a36503/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=f9d9e0a1f75b48813fe816a1e2a6c30146a36503", "patch": "@@ -4,10 +4,17 @@ use hir::{Mutability, Ty};\n use ra_db::SourceDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n-    ast, AstNode, Direction, SmolStr, SyntaxElement, SyntaxKind, SyntaxKind::*, TextRange, T,\n+    ast::{self, NameOwner},\n+    AstNode, Direction, SmolStr, SyntaxElement, SyntaxKind,\n+    SyntaxKind::*,\n+    TextRange, T,\n };\n \n-use crate::{db::RootDatabase, FileId};\n+use crate::{\n+    db::RootDatabase,\n+    name_ref_kind::{classify_name_ref, NameRefKind::*},\n+    FileId,\n+};\n \n #[derive(Debug)]\n pub struct HighlightedRange {\n@@ -31,25 +38,24 @@ fn is_control_keyword(kind: SyntaxKind) -> bool {\n     }\n }\n \n-fn is_variable_mutable(db: &RootDatabase, analyzer: &hir::SourceAnalyzer, pat: ast::Pat) -> bool {\n-    let ty = analyzer.type_of_pat(db, &pat).unwrap_or(Ty::Unknown);\n-    let is_ty_mut = {\n-        if let Some((_, mutability)) = ty.as_reference() {\n-            match mutability {\n-                Mutability::Shared => false,\n-                Mutability::Mut => true,\n-            }\n-        } else {\n-            false\n-        }\n-    };\n-\n-    let is_pat_mut = match pat.kind() {\n-        ast::PatKind::BindPat(bind_pat) => bind_pat.is_mutable(),\n-        _ => false,\n-    };\n+fn is_variable_mutable(\n+    db: &RootDatabase,\n+    analyzer: &hir::SourceAnalyzer,\n+    pat: ast::BindPat,\n+) -> bool {\n+    if pat.is_mutable() {\n+        return true;\n+    }\n \n-    is_ty_mut || is_pat_mut\n+    let ty = analyzer.type_of_pat(db, &pat.into()).unwrap_or(Ty::Unknown);\n+    if let Some((_, mutability)) = ty.as_reference() {\n+        match mutability {\n+            Mutability::Shared => false,\n+            Mutability::Mut => true,\n+        }\n+    } else {\n+        false\n+    }\n }\n \n pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRange> {\n@@ -81,44 +87,45 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n         }\n         let mut binding_hash = None;\n         let tag = match node.kind() {\n+            FN_DEF => {\n+                bindings_shadow_count.clear();\n+                continue;\n+            }\n             COMMENT => \"comment\",\n             STRING | RAW_STRING | RAW_BYTE_STRING | BYTE_STRING => \"string\",\n             ATTR => \"attribute\",\n             NAME_REF => {\n                 if let Some(name_ref) = node.as_node().cloned().and_then(ast::NameRef::cast) {\n-                    // FIXME: revisit this after #1340\n-                    use crate::name_ref_kind::{classify_name_ref, NameRefKind::*};\n-                    use hir::{ImplItem, ModuleDef};\n-\n                     // FIXME: try to reuse the SourceAnalyzers\n                     let analyzer = hir::SourceAnalyzer::new(db, file_id, name_ref.syntax(), None);\n                     match classify_name_ref(db, &analyzer, &name_ref) {\n                         Some(Method(_)) => \"function\",\n                         Some(Macro(_)) => \"macro\",\n                         Some(FieldAccess(_)) => \"field\",\n-                        Some(AssocItem(ImplItem::Method(_))) => \"function\",\n-                        Some(AssocItem(ImplItem::Const(_))) => \"constant\",\n-                        Some(AssocItem(ImplItem::TypeAlias(_))) => \"type\",\n-                        Some(Def(ModuleDef::Module(_))) => \"module\",\n-                        Some(Def(ModuleDef::Function(_))) => \"function\",\n-                        Some(Def(ModuleDef::Struct(_))) => \"type\",\n-                        Some(Def(ModuleDef::Union(_))) => \"type\",\n-                        Some(Def(ModuleDef::Enum(_))) => \"type\",\n-                        Some(Def(ModuleDef::EnumVariant(_))) => \"constant\",\n-                        Some(Def(ModuleDef::Const(_))) => \"constant\",\n-                        Some(Def(ModuleDef::Static(_))) => \"constant\",\n-                        Some(Def(ModuleDef::Trait(_))) => \"type\",\n-                        Some(Def(ModuleDef::TypeAlias(_))) => \"type\",\n-                        Some(Def(ModuleDef::BuiltinType(_))) => \"type\",\n+                        Some(AssocItem(hir::ImplItem::Method(_))) => \"function\",\n+                        Some(AssocItem(hir::ImplItem::Const(_))) => \"constant\",\n+                        Some(AssocItem(hir::ImplItem::TypeAlias(_))) => \"type\",\n+                        Some(Def(hir::ModuleDef::Module(_))) => \"module\",\n+                        Some(Def(hir::ModuleDef::Function(_))) => \"function\",\n+                        Some(Def(hir::ModuleDef::Struct(_))) => \"type\",\n+                        Some(Def(hir::ModuleDef::Union(_))) => \"type\",\n+                        Some(Def(hir::ModuleDef::Enum(_))) => \"type\",\n+                        Some(Def(hir::ModuleDef::EnumVariant(_))) => \"constant\",\n+                        Some(Def(hir::ModuleDef::Const(_))) => \"constant\",\n+                        Some(Def(hir::ModuleDef::Static(_))) => \"constant\",\n+                        Some(Def(hir::ModuleDef::Trait(_))) => \"type\",\n+                        Some(Def(hir::ModuleDef::TypeAlias(_))) => \"type\",\n+                        Some(Def(hir::ModuleDef::BuiltinType(_))) => \"type\",\n                         Some(SelfType(_)) => \"type\",\n                         Some(Pat(ptr)) => {\n-                            binding_hash = Some({\n-                                let text =\n-                                    ptr.syntax_node_ptr().to_node(&root).text().to_smol_string();\n+                            let pat = ptr.to_node(&root);\n+                            if let Some(name) = pat.name() {\n+                                let text = name.text();\n                                 let shadow_count =\n                                     bindings_shadow_count.entry(text.clone()).or_default();\n-                                calc_binding_hash(file_id, &text, *shadow_count)\n-                            });\n+                                binding_hash =\n+                                    Some(calc_binding_hash(file_id, &text, *shadow_count))\n+                            }\n \n                             if is_variable_mutable(db, &analyzer, ptr.to_node(&root)) {\n                                 \"variable.mut\"\n@@ -137,14 +144,14 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n             NAME => {\n                 if let Some(name) = node.as_node().cloned().and_then(ast::Name::cast) {\n                     let analyzer = hir::SourceAnalyzer::new(db, file_id, name.syntax(), None);\n-                    if let Some(pat) = name.syntax().ancestors().find_map(ast::Pat::cast) {\n-                        binding_hash = Some({\n-                            let text = name.syntax().text().to_smol_string();\n+                    if let Some(pat) = name.syntax().ancestors().find_map(ast::BindPat::cast) {\n+                        if let Some(name) = pat.name() {\n+                            let text = name.text();\n                             let shadow_count =\n-                                bindings_shadow_count.entry(text.clone()).or_insert(0);\n+                                bindings_shadow_count.entry(text.clone()).or_default();\n                             *shadow_count += 1;\n-                            calc_binding_hash(file_id, &text, *shadow_count)\n-                        });\n+                            binding_hash = Some(calc_binding_hash(file_id, &text, *shadow_count))\n+                        }\n \n                         if is_variable_mutable(db, &analyzer, pat) {\n                             \"variable.mut\"\n@@ -353,6 +360,10 @@ fn main() {\n     let x = \"other color please!\";\n     let y = x.to_string();\n }\n+\n+fn bar() {\n+    let mut hello = \"hello\";\n+}\n \"#\n             .trim(),\n         );"}, {"sha": "25824722f4070488d149159c4f8359ea6b5b1e84", "filename": "crates/ra_syntax/src/ptr.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f9d9e0a1f75b48813fe816a1e2a6c30146a36503/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9d9e0a1f75b48813fe816a1e2a6c30146a36503/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fptr.rs?ref=f9d9e0a1f75b48813fe816a1e2a6c30146a36503", "patch": "@@ -60,6 +60,17 @@ impl<N: AstNode> AstPtr<N> {\n     pub fn syntax_node_ptr(self) -> SyntaxNodePtr {\n         self.raw\n     }\n+\n+    // FIXME: extend AstNode to do this safely\n+    pub fn cast_checking_kind<U: AstNode>(\n+        self,\n+        cond: impl FnOnce(SyntaxKind) -> bool,\n+    ) -> Option<AstPtr<U>> {\n+        if !cond(self.raw.kind()) {\n+            return None;\n+        }\n+        Some(AstPtr { raw: self.raw, _ty: PhantomData })\n+    }\n }\n \n impl<N: AstNode> From<AstPtr<N>> for SyntaxNodePtr {"}]}