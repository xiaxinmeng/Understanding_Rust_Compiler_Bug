{"sha": "d31ce3b16cbd23950197d8992720b431e19b6af1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMWNlM2IxNmNiZDIzOTUwMTk3ZDg5OTI3MjBiNDMxZTE5YjZhZjE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-09T12:28:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-09T12:28:04Z"}, "message": "Use standard style for test code", "tree": {"sha": "0db348ea912c0fec3d8a09183bf739980858e625", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0db348ea912c0fec3d8a09183bf739980858e625"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d31ce3b16cbd23950197d8992720b431e19b6af1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d31ce3b16cbd23950197d8992720b431e19b6af1", "html_url": "https://github.com/rust-lang/rust/commit/d31ce3b16cbd23950197d8992720b431e19b6af1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d31ce3b16cbd23950197d8992720b431e19b6af1/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cecf78488a40638c8f6ea8b9482080d4bfafca4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cecf78488a40638c8f6ea8b9482080d4bfafca4", "html_url": "https://github.com/rust-lang/rust/commit/3cecf78488a40638c8f6ea8b9482080d4bfafca4"}], "stats": {"total": 1203, "additions": 635, "deletions": 568}, "files": [{"sha": "59e5debb13f9defc4696db2b95ddb1ae56e3f181", "filename": "crates/assists/src/handlers/wrap_return_type_in_result.rs", "status": "modified", "additions": 635, "deletions": 568, "changes": 1203, "blob_url": "https://github.com/rust-lang/rust/blob/d31ce3b16cbd23950197d8992720b431e19b6af1/crates%2Fassists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31ce3b16cbd23950197d8992720b431e19b6af1/crates%2Fassists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs?ref=d31ce3b16cbd23950197d8992720b431e19b6af1", "patch": "@@ -281,78 +281,87 @@ mod tests {\n     fn wrap_return_type_in_result_simple() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> i3<|>2 {\n-                let test = \"test\";\n-                return 42i32;\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                let test = \"test\";\n-                return Ok(42i32);\n-            }\"#,\n+            r#\"\n+fn foo() -> i3<|>2 {\n+    let test = \"test\";\n+    return 42i32;\n+}\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> {\n+    let test = \"test\";\n+    return Ok(42i32);\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_closure() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() {\n-                || -> i32<|> {\n-                    let test = \"test\";\n-                    return 42i32;\n-                };\n-            }\"#,\n-            r#\"fn foo() {\n-                || -> Result<i32, ${0:_}> {\n-                    let test = \"test\";\n-                    return Ok(42i32);\n-                };\n-            }\"#,\n+            r#\"\n+fn foo() {\n+    || -> i32<|> {\n+        let test = \"test\";\n+        return 42i32;\n+    };\n+}\n+\"#,\n+            r#\"\n+fn foo() {\n+    || -> Result<i32, ${0:_}> {\n+        let test = \"test\";\n+        return Ok(42i32);\n+    };\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_return_type_bad_cursor() {\n         check_assist_not_applicable(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> i32 {\n-                let test = \"test\";<|>\n-                return 42i32;\n-            }\"#,\n+            r#\"\n+fn foo() -> i32 {\n+    let test = \"test\";<|>\n+    return 42i32;\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_return_type_bad_cursor_closure() {\n         check_assist_not_applicable(\n             wrap_return_type_in_result,\n-            r#\"fn foo() {\n-                || -> i32 {\n-                    let test = \"test\";<|>\n-                    return 42i32;\n-                };\n-            }\"#,\n+            r#\"\n+fn foo() {\n+    || -> i32 {\n+        let test = \"test\";<|>\n+        return 42i32;\n+    };\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_closure_non_block() {\n-        check_assist_not_applicable(\n-            wrap_return_type_in_result,\n-            r#\"fn foo() {\n-                || -> i<|>32 3;\n-            }\"#,\n-        );\n+        check_assist_not_applicable(wrap_return_type_in_result, r#\"fn foo() { || -> i<|>32 3; }\"#);\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_return_type_already_result_std() {\n         check_assist_not_applicable(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> std::result::Result<i32<|>, String> {\n-                let test = \"test\";\n-                return 42i32;\n-            }\"#,\n+            r#\"\n+fn foo() -> std::result::Result<i32<|>, String> {\n+    let test = \"test\";\n+    return 42i32;\n+}\n+\"#,\n         );\n     }\n \n@@ -361,459 +370,502 @@ mod tests {\n         mark::check!(wrap_return_type_in_result_simple_return_type_already_result);\n         check_assist_not_applicable(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> Result<i32<|>, String> {\n-                let test = \"test\";\n-                return 42i32;\n-            }\"#,\n+            r#\"\n+fn foo() -> Result<i32<|>, String> {\n+    let test = \"test\";\n+    return 42i32;\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_return_type_already_result_closure() {\n         check_assist_not_applicable(\n             wrap_return_type_in_result,\n-            r#\"fn foo() {\n-                || -> Result<i32<|>, String> {\n-                    let test = \"test\";\n-                    return 42i32;\n-                };\n-            }\"#,\n+            r#\"\n+fn foo() {\n+    || -> Result<i32<|>, String> {\n+        let test = \"test\";\n+        return 42i32;\n+    };\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_cursor() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> <|>i32 {\n-                let test = \"test\";\n-                return 42i32;\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                let test = \"test\";\n-                return Ok(42i32);\n-            }\"#,\n+            r#\"\n+fn foo() -> <|>i32 {\n+    let test = \"test\";\n+    return 42i32;\n+}\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> {\n+    let test = \"test\";\n+    return Ok(42i32);\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -><|> i32 {\n-                let test = \"test\";\n-                42i32\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                let test = \"test\";\n-                Ok(42i32)\n-            }\"#,\n+            r#\"\n+fn foo() -><|> i32 {\n+    let test = \"test\";\n+    42i32\n+}\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> {\n+    let test = \"test\";\n+    Ok(42i32)\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_closure() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() {\n-                || -><|> i32 {\n-                    let test = \"test\";\n-                    42i32\n-                };\n-            }\"#,\n-            r#\"fn foo() {\n-                || -> Result<i32, ${0:_}> {\n-                    let test = \"test\";\n-                    Ok(42i32)\n-                };\n-            }\"#,\n+            r#\"\n+fn foo() {\n+    || -><|> i32 {\n+        let test = \"test\";\n+        42i32\n+    };\n+}\n+\"#,\n+            r#\"\n+fn foo() {\n+    || -> Result<i32, ${0:_}> {\n+        let test = \"test\";\n+        Ok(42i32)\n+    };\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_only() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> i32<|> {\n-                42i32\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                Ok(42i32)\n-            }\"#,\n+            r#\"fn foo() -> i32<|> { 42i32 }\"#,\n+            r#\"fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_block_like() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> i32<|> {\n-                if true {\n-                    42i32\n-                } else {\n-                    24i32\n-                }\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                if true {\n-                    Ok(42i32)\n-                } else {\n-                    Ok(24i32)\n-                }\n-            }\"#,\n+            r#\"\n+fn foo() -> i32<|> {\n+    if true {\n+        42i32\n+    } else {\n+        24i32\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> {\n+    if true {\n+        Ok(42i32)\n+    } else {\n+        Ok(24i32)\n+    }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_without_block_closure() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() {\n-                || -> i32<|> {\n-                    if true {\n-                        42i32\n-                    } else {\n-                        24i32\n-                    }\n-                };\n-            }\"#,\n-            r#\"fn foo() {\n-                || -> Result<i32, ${0:_}> {\n-                    if true {\n-                        Ok(42i32)\n-                    } else {\n-                        Ok(24i32)\n-                    }\n-                };\n-            }\"#,\n+            r#\"\n+fn foo() {\n+    || -> i32<|> {\n+        if true {\n+            42i32\n+        } else {\n+            24i32\n+        }\n+    };\n+}\n+\"#,\n+            r#\"\n+fn foo() {\n+    || -> Result<i32, ${0:_}> {\n+        if true {\n+            Ok(42i32)\n+        } else {\n+            Ok(24i32)\n+        }\n+    };\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_nested_if() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> i32<|> {\n-                if true {\n-                    if false {\n-                        1\n-                    } else {\n-                        2\n-                    }\n-                } else {\n-                    24i32\n-                }\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                if true {\n-                    if false {\n-                        Ok(1)\n-                    } else {\n-                        Ok(2)\n-                    }\n-                } else {\n-                    Ok(24i32)\n-                }\n-            }\"#,\n+            r#\"\n+fn foo() -> i32<|> {\n+    if true {\n+        if false {\n+            1\n+        } else {\n+            2\n+        }\n+    } else {\n+        24i32\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> {\n+    if true {\n+        if false {\n+            Ok(1)\n+        } else {\n+            Ok(2)\n+        }\n+    } else {\n+        Ok(24i32)\n+    }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_await() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"async fn foo() -> i<|>32 {\n-                if true {\n-                    if false {\n-                        1.await\n-                    } else {\n-                        2.await\n-                    }\n-                } else {\n-                    24i32.await\n-                }\n-            }\"#,\n-            r#\"async fn foo() -> Result<i32, ${0:_}> {\n-                if true {\n-                    if false {\n-                        Ok(1.await)\n-                    } else {\n-                        Ok(2.await)\n-                    }\n-                } else {\n-                    Ok(24i32.await)\n-                }\n-            }\"#,\n+            r#\"\n+async fn foo() -> i<|>32 {\n+    if true {\n+        if false {\n+            1.await\n+        } else {\n+            2.await\n+        }\n+    } else {\n+        24i32.await\n+    }\n+}\n+\"#,\n+            r#\"\n+async fn foo() -> Result<i32, ${0:_}> {\n+    if true {\n+        if false {\n+            Ok(1.await)\n+        } else {\n+            Ok(2.await)\n+        }\n+    } else {\n+        Ok(24i32.await)\n+    }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_array() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> [i32;<|> 3] {\n-                [1, 2, 3]\n-            }\"#,\n-            r#\"fn foo() -> Result<[i32; 3], ${0:_}> {\n-                Ok([1, 2, 3])\n-            }\"#,\n+            r#\"fn foo() -> [i32;<|> 3] { [1, 2, 3] }\"#,\n+            r#\"fn foo() -> Result<[i32; 3], ${0:_}> { Ok([1, 2, 3]) }\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_cast() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -<|>> i32 {\n-                if true {\n-                    if false {\n-                        1 as i32\n-                    } else {\n-                        2 as i32\n-                    }\n-                } else {\n-                    24 as i32\n-                }\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                if true {\n-                    if false {\n-                        Ok(1 as i32)\n-                    } else {\n-                        Ok(2 as i32)\n-                    }\n-                } else {\n-                    Ok(24 as i32)\n-                }\n-            }\"#,\n+            r#\"\n+fn foo() -<|>> i32 {\n+    if true {\n+        if false {\n+            1 as i32\n+        } else {\n+            2 as i32\n+        }\n+    } else {\n+        24 as i32\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> {\n+    if true {\n+        if false {\n+            Ok(1 as i32)\n+        } else {\n+            Ok(2 as i32)\n+        }\n+    } else {\n+        Ok(24 as i32)\n+    }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_block_like_match() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> i32<|> {\n-                let my_var = 5;\n-                match my_var {\n-                    5 => 42i32,\n-                    _ => 24i32,\n-                }\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                let my_var = 5;\n-                match my_var {\n-                    5 => Ok(42i32),\n-                    _ => Ok(24i32),\n-                }\n-            }\"#,\n+            r#\"\n+fn foo() -> i32<|> {\n+    let my_var = 5;\n+    match my_var {\n+        5 => 42i32,\n+        _ => 24i32,\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> {\n+    let my_var = 5;\n+    match my_var {\n+        5 => Ok(42i32),\n+        _ => Ok(24i32),\n+    }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_loop_with_tail() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> i32<|> {\n-                let my_var = 5;\n-                loop {\n-                    println!(\"test\");\n-                    5\n-                }\n-\n-                my_var\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                let my_var = 5;\n-                loop {\n-                    println!(\"test\");\n-                    5\n-                }\n-\n-                Ok(my_var)\n-            }\"#,\n+            r#\"\n+fn foo() -> i32<|> {\n+    let my_var = 5;\n+    loop {\n+        println!(\"test\");\n+        5\n+    }\n+    my_var\n+}\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> {\n+    let my_var = 5;\n+    loop {\n+        println!(\"test\");\n+        5\n+    }\n+    Ok(my_var)\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_loop_in_let_stmt() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> i32<|> {\n-                let my_var = let x = loop {\n-                    break 1;\n-                };\n-\n-                my_var\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                let my_var = let x = loop {\n-                    break 1;\n-                };\n-\n-                Ok(my_var)\n-            }\"#,\n+            r#\"\n+fn foo() -> i32<|> {\n+    let my_var = let x = loop {\n+        break 1;\n+    };\n+    my_var\n+}\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> {\n+    let my_var = let x = loop {\n+        break 1;\n+    };\n+    Ok(my_var)\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_block_like_match_return_expr() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> i32<|> {\n-                let my_var = 5;\n-                let res = match my_var {\n-                    5 => 42i32,\n-                    _ => return 24i32,\n-                };\n-\n-                res\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                let my_var = 5;\n-                let res = match my_var {\n-                    5 => 42i32,\n-                    _ => return Ok(24i32),\n-                };\n-\n-                Ok(res)\n-            }\"#,\n+            r#\"\n+fn foo() -> i32<|> {\n+    let my_var = 5;\n+    let res = match my_var {\n+        5 => 42i32,\n+        _ => return 24i32,\n+    };\n+    res\n+}\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> {\n+    let my_var = 5;\n+    let res = match my_var {\n+        5 => 42i32,\n+        _ => return Ok(24i32),\n+    };\n+    Ok(res)\n+}\n+\"#,\n         );\n \n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> i32<|> {\n-                let my_var = 5;\n-                let res = if my_var == 5 {\n-                    42i32\n-                } else {\n-                    return 24i32;\n-                };\n-\n-                res\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                let my_var = 5;\n-                let res = if my_var == 5 {\n-                    42i32\n-                } else {\n-                    return Ok(24i32);\n-                };\n-\n-                Ok(res)\n-            }\"#,\n+            r#\"\n+fn foo() -> i32<|> {\n+    let my_var = 5;\n+    let res = if my_var == 5 {\n+        42i32\n+    } else {\n+        return 24i32;\n+    };\n+    res\n+}\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> {\n+    let my_var = 5;\n+    let res = if my_var == 5 {\n+        42i32\n+    } else {\n+        return Ok(24i32);\n+    };\n+    Ok(res)\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_block_like_match_deeper() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> i32<|> {\n-                let my_var = 5;\n-                match my_var {\n-                    5 => {\n-                        if true {\n-                            42i32\n-                        } else {\n-                            25i32\n-                        }\n-                    },\n-                    _ => {\n-                        let test = \"test\";\n-                        if test == \"test\" {\n-                            return bar();\n-                        }\n-                        53i32\n-                    },\n-                }\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                let my_var = 5;\n-                match my_var {\n-                    5 => {\n-                        if true {\n-                            Ok(42i32)\n-                        } else {\n-                            Ok(25i32)\n-                        }\n-                    },\n-                    _ => {\n-                        let test = \"test\";\n-                        if test == \"test\" {\n-                            return Ok(bar());\n-                        }\n-                        Ok(53i32)\n-                    },\n-                }\n-            }\"#,\n+            r#\"\n+fn foo() -> i32<|> {\n+    let my_var = 5;\n+    match my_var {\n+        5 => {\n+            if true {\n+                42i32\n+            } else {\n+                25i32\n+            }\n+        },\n+        _ => {\n+            let test = \"test\";\n+            if test == \"test\" {\n+                return bar();\n+            }\n+            53i32\n+        },\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> {\n+    let my_var = 5;\n+    match my_var {\n+        5 => {\n+            if true {\n+                Ok(42i32)\n+            } else {\n+                Ok(25i32)\n+            }\n+        },\n+        _ => {\n+            let test = \"test\";\n+            if test == \"test\" {\n+                return Ok(bar());\n+            }\n+            Ok(53i32)\n+        },\n+    }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_tail_block_like_early_return() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> i<|>32 {\n-                let test = \"test\";\n-                if test == \"test\" {\n-                    return 24i32;\n-                }\n-                53i32\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                let test = \"test\";\n-                if test == \"test\" {\n-                    return Ok(24i32);\n-                }\n-                Ok(53i32)\n-            }\"#,\n+            r#\"\n+fn foo() -> i<|>32 {\n+    let test = \"test\";\n+    if test == \"test\" {\n+        return 24i32;\n+    }\n+    53i32\n+}\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> {\n+    let test = \"test\";\n+    if test == \"test\" {\n+        return Ok(24i32);\n+    }\n+    Ok(53i32)\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_closure() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo(the_field: u32) -><|> u32 {\n-                let true_closure = || {\n-                    return true;\n-                };\n-                if the_field < 5 {\n-                    let mut i = 0;\n-\n-\n-                    if true_closure() {\n-                        return 99;\n-                    } else {\n-                        return 0;\n-                    }\n-                }\n-\n-                the_field\n-            }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n-                let true_closure = || {\n-                    return true;\n-                };\n-                if the_field < 5 {\n-                    let mut i = 0;\n-\n-\n-                    if true_closure() {\n-                        return Ok(99);\n-                    } else {\n-                        return Ok(0);\n-                    }\n-                }\n-\n-                Ok(the_field)\n-            }\"#,\n+            r#\"\n+fn foo(the_field: u32) -><|> u32 {\n+    let true_closure = || { return true; };\n+    if the_field < 5 {\n+        let mut i = 0;\n+        if true_closure() {\n+            return 99;\n+        } else {\n+            return 0;\n+        }\n+    }\n+    the_field\n+}\n+\"#,\n+            r#\"\n+fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n+    let true_closure = || { return true; };\n+    if the_field < 5 {\n+        let mut i = 0;\n+        if true_closure() {\n+            return Ok(99);\n+        } else {\n+            return Ok(0);\n+        }\n+    }\n+    Ok(the_field)\n+}\n+\"#,\n         );\n \n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo(the_field: u32) -> u32<|> {\n+            r#\"\n+            fn foo(the_field: u32) -> u32<|> {\n                 let true_closure = || {\n                     return true;\n                 };\n@@ -830,8 +882,10 @@ mod tests {\n                 let t = None;\n \n                 t.unwrap_or_else(|| the_field)\n-            }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n+            }\n+            \"#,\n+            r#\"\n+            fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n                 let true_closure = || {\n                     return true;\n                 };\n@@ -848,244 +902,257 @@ mod tests {\n                 let t = None;\n \n                 Ok(t.unwrap_or_else(|| the_field))\n-            }\"#,\n+            }\n+            \"#,\n         );\n     }\n \n     #[test]\n     fn wrap_return_type_in_result_simple_with_weird_forms() {\n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> i32<|> {\n-                let test = \"test\";\n-                if test == \"test\" {\n-                    return 24i32;\n-                }\n-                let mut i = 0;\n-                loop {\n-                    if i == 1 {\n-                        break 55;\n-                    }\n-                    i += 1;\n-                }\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                let test = \"test\";\n-                if test == \"test\" {\n-                    return Ok(24i32);\n-                }\n-                let mut i = 0;\n-                loop {\n-                    if i == 1 {\n-                        break Ok(55);\n-                    }\n-                    i += 1;\n-                }\n-            }\"#,\n+            r#\"\n+fn foo() -> i32<|> {\n+    let test = \"test\";\n+    if test == \"test\" {\n+        return 24i32;\n+    }\n+    let mut i = 0;\n+    loop {\n+        if i == 1 {\n+            break 55;\n+        }\n+        i += 1;\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> {\n+    let test = \"test\";\n+    if test == \"test\" {\n+        return Ok(24i32);\n+    }\n+    let mut i = 0;\n+    loop {\n+        if i == 1 {\n+            break Ok(55);\n+        }\n+        i += 1;\n+    }\n+}\n+\"#,\n         );\n \n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> i32<|> {\n-                let test = \"test\";\n-                if test == \"test\" {\n-                    return 24i32;\n-                }\n-                let mut i = 0;\n-                loop {\n-                    loop {\n-                        if i == 1 {\n-                            break 55;\n-                        }\n-                        i += 1;\n-                    }\n-                }\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                let test = \"test\";\n-                if test == \"test\" {\n-                    return Ok(24i32);\n-                }\n-                let mut i = 0;\n-                loop {\n-                    loop {\n-                        if i == 1 {\n-                            break Ok(55);\n-                        }\n-                        i += 1;\n-                    }\n-                }\n-            }\"#,\n+            r#\"\n+fn foo() -> i32<|> {\n+    let test = \"test\";\n+    if test == \"test\" {\n+        return 24i32;\n+    }\n+    let mut i = 0;\n+    loop {\n+        loop {\n+            if i == 1 {\n+                break 55;\n+            }\n+            i += 1;\n+        }\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> {\n+    let test = \"test\";\n+    if test == \"test\" {\n+        return Ok(24i32);\n+    }\n+    let mut i = 0;\n+    loop {\n+        loop {\n+            if i == 1 {\n+                break Ok(55);\n+            }\n+            i += 1;\n+        }\n+    }\n+}\n+\"#,\n         );\n \n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo() -> i3<|>2 {\n-                let test = \"test\";\n-                let other = 5;\n-                if test == \"test\" {\n-                    let res = match other {\n-                        5 => 43,\n-                        _ => return 56,\n-                    };\n-                }\n-                let mut i = 0;\n-                loop {\n-                    loop {\n-                        if i == 1 {\n-                            break 55;\n-                        }\n-                        i += 1;\n-                    }\n-                }\n-            }\"#,\n-            r#\"fn foo() -> Result<i32, ${0:_}> {\n-                let test = \"test\";\n-                let other = 5;\n-                if test == \"test\" {\n-                    let res = match other {\n-                        5 => 43,\n-                        _ => return Ok(56),\n-                    };\n-                }\n-                let mut i = 0;\n-                loop {\n-                    loop {\n-                        if i == 1 {\n-                            break Ok(55);\n-                        }\n-                        i += 1;\n-                    }\n-                }\n-            }\"#,\n+            r#\"\n+fn foo() -> i3<|>2 {\n+    let test = \"test\";\n+    let other = 5;\n+    if test == \"test\" {\n+        let res = match other {\n+            5 => 43,\n+            _ => return 56,\n+        };\n+    }\n+    let mut i = 0;\n+    loop {\n+        loop {\n+            if i == 1 {\n+                break 55;\n+            }\n+            i += 1;\n+        }\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo() -> Result<i32, ${0:_}> {\n+    let test = \"test\";\n+    let other = 5;\n+    if test == \"test\" {\n+        let res = match other {\n+            5 => 43,\n+            _ => return Ok(56),\n+        };\n+    }\n+    let mut i = 0;\n+    loop {\n+        loop {\n+            if i == 1 {\n+                break Ok(55);\n+            }\n+            i += 1;\n+        }\n+    }\n+}\n+\"#,\n         );\n \n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo(the_field: u32) -> u32<|> {\n-                if the_field < 5 {\n-                    let mut i = 0;\n-                    loop {\n-                        if i > 5 {\n-                            return 55u32;\n-                        }\n-                        i += 3;\n-                    }\n-\n-                    match i {\n-                        5 => return 99,\n-                        _ => return 0,\n-                    };\n-                }\n-\n-                the_field\n-            }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n-                if the_field < 5 {\n-                    let mut i = 0;\n-                    loop {\n-                        if i > 5 {\n-                            return Ok(55u32);\n-                        }\n-                        i += 3;\n-                    }\n-\n-                    match i {\n-                        5 => return Ok(99),\n-                        _ => return Ok(0),\n-                    };\n-                }\n-\n-                Ok(the_field)\n-            }\"#,\n+            r#\"\n+fn foo(the_field: u32) -> u32<|> {\n+    if the_field < 5 {\n+        let mut i = 0;\n+        loop {\n+            if i > 5 {\n+                return 55u32;\n+            }\n+            i += 3;\n+        }\n+        match i {\n+            5 => return 99,\n+            _ => return 0,\n+        };\n+    }\n+    the_field\n+}\n+\"#,\n+            r#\"\n+fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n+    if the_field < 5 {\n+        let mut i = 0;\n+        loop {\n+            if i > 5 {\n+                return Ok(55u32);\n+            }\n+            i += 3;\n+        }\n+        match i {\n+            5 => return Ok(99),\n+            _ => return Ok(0),\n+        };\n+    }\n+    Ok(the_field)\n+}\n+\"#,\n         );\n \n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo(the_field: u32) -> u3<|>2 {\n-                if the_field < 5 {\n-                    let mut i = 0;\n-\n-                    match i {\n-                        5 => return 99,\n-                        _ => return 0,\n-                    }\n-                }\n-\n-                the_field\n-            }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n-                if the_field < 5 {\n-                    let mut i = 0;\n-\n-                    match i {\n-                        5 => return Ok(99),\n-                        _ => return Ok(0),\n-                    }\n-                }\n-\n-                Ok(the_field)\n-            }\"#,\n+            r#\"\n+fn foo(the_field: u32) -> u3<|>2 {\n+    if the_field < 5 {\n+        let mut i = 0;\n+        match i {\n+            5 => return 99,\n+            _ => return 0,\n+        }\n+    }\n+    the_field\n+}\n+\"#,\n+            r#\"\n+fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n+    if the_field < 5 {\n+        let mut i = 0;\n+        match i {\n+            5 => return Ok(99),\n+            _ => return Ok(0),\n+        }\n+    }\n+    Ok(the_field)\n+}\n+\"#,\n         );\n \n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo(the_field: u32) -> u32<|> {\n-                if the_field < 5 {\n-                    let mut i = 0;\n-\n-                    if i == 5 {\n-                        return 99\n-                    } else {\n-                        return 0\n-                    }\n-                }\n-\n-                the_field\n-            }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n-                if the_field < 5 {\n-                    let mut i = 0;\n-\n-                    if i == 5 {\n-                        return Ok(99)\n-                    } else {\n-                        return Ok(0)\n-                    }\n-                }\n-\n-                Ok(the_field)\n-            }\"#,\n+            r#\"\n+fn foo(the_field: u32) -> u32<|> {\n+    if the_field < 5 {\n+        let mut i = 0;\n+        if i == 5 {\n+            return 99\n+        } else {\n+            return 0\n+        }\n+    }\n+    the_field\n+}\n+\"#,\n+            r#\"\n+fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n+    if the_field < 5 {\n+        let mut i = 0;\n+        if i == 5 {\n+            return Ok(99)\n+        } else {\n+            return Ok(0)\n+        }\n+    }\n+    Ok(the_field)\n+}\n+\"#,\n         );\n \n         check_assist(\n             wrap_return_type_in_result,\n-            r#\"fn foo(the_field: u32) -> <|>u32 {\n-                if the_field < 5 {\n-                    let mut i = 0;\n-\n-                    if i == 5 {\n-                        return 99;\n-                    } else {\n-                        return 0;\n-                    }\n-                }\n-\n-                the_field\n-            }\"#,\n-            r#\"fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n-                if the_field < 5 {\n-                    let mut i = 0;\n-\n-                    if i == 5 {\n-                        return Ok(99);\n-                    } else {\n-                        return Ok(0);\n-                    }\n-                }\n-\n-                Ok(the_field)\n-            }\"#,\n+            r#\"\n+fn foo(the_field: u32) -> <|>u32 {\n+    if the_field < 5 {\n+        let mut i = 0;\n+        if i == 5 {\n+            return 99;\n+        } else {\n+            return 0;\n+        }\n+    }\n+    the_field\n+}\n+\"#,\n+            r#\"\n+fn foo(the_field: u32) -> Result<u32, ${0:_}> {\n+    if the_field < 5 {\n+        let mut i = 0;\n+        if i == 5 {\n+            return Ok(99);\n+        } else {\n+            return Ok(0);\n+        }\n+    }\n+    Ok(the_field)\n+}\n+\"#,\n         );\n     }\n }"}]}