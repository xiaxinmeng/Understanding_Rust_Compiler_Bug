{"sha": "62806f75369f810ddde1b28e6aca7b8a2792aac3", "node_id": "C_kwDOAAsO6NoAKDYyODA2Zjc1MzY5ZjgxMGRkZGUxYjI4ZTZhY2E3YjhhMjc5MmFhYzM", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-21T19:26:58Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-05-22T19:21:27Z"}, "message": "Use revisions for NLL in generator", "tree": {"sha": "d673cc87e23ba1938d6bd1be53060ac19aa1910c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d673cc87e23ba1938d6bd1be53060ac19aa1910c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62806f75369f810ddde1b28e6aca7b8a2792aac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62806f75369f810ddde1b28e6aca7b8a2792aac3", "html_url": "https://github.com/rust-lang/rust/commit/62806f75369f810ddde1b28e6aca7b8a2792aac3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62806f75369f810ddde1b28e6aca7b8a2792aac3/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "url": "https://api.github.com/repos/rust-lang/rust/commits/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb", "html_url": "https://github.com/rust-lang/rust/commit/12a2d7967c48f418e99ed4ff8fa5e662e1f34ffb"}], "stats": {"total": 63, "additions": 39, "deletions": 24}, "files": [{"sha": "d44c8eb1b8233a458b5ad8a69dbc88ef3f506855", "filename": "src/test/ui/generator/auto-trait-regions.base.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.base.stderr?ref=62806f75369f810ddde1b28e6aca7b8a2792aac3", "patch": "@@ -1,5 +1,5 @@\n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:31:5\n+  --> $DIR/auto-trait-regions.rs:35:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -8,7 +8,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:31:5\n+  --> $DIR/auto-trait-regions.rs:35:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -17,7 +17,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:50:5\n+  --> $DIR/auto-trait-regions.rs:56:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -26,7 +26,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `A<'_, '2>`, for some specific lifetime `'2`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:50:5\n+  --> $DIR/auto-trait-regions.rs:56:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^ implementation of `Foo` is not general enough", "previous_filename": "src/test/ui/generator/auto-trait-regions.stderr"}, {"sha": "25456881fa0ef319f60eefe2a6647ac5172be680", "filename": "src/test/ui/generator/auto-trait-regions.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.nll.stderr?ref=62806f75369f810ddde1b28e6aca7b8a2792aac3", "patch": "@@ -1,31 +1,31 @@\n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:46:24\n+  --> $DIR/auto-trait-regions.rs:50:24\n    |\n LL |         let a = A(&mut true, &mut true, No);\n    |                        ^^^^                - temporary value is freed at the end of this statement\n    |                        |\n    |                        creates a temporary which is freed while still in use\n-LL |         yield;\n+...\n LL |         assert_foo(a);\n    |                    - borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/auto-trait-regions.rs:46:35\n+  --> $DIR/auto-trait-regions.rs:50:35\n    |\n LL |         let a = A(&mut true, &mut true, No);\n    |                                   ^^^^     - temporary value is freed at the end of this statement\n    |                                   |\n    |                                   creates a temporary which is freed while still in use\n-LL |         yield;\n+...\n LL |         assert_foo(a);\n    |                    - borrow later used here\n    |\n    = note: consider using a `let` binding to create a longer lived value\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:31:5\n+  --> $DIR/auto-trait-regions.rs:35:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough\n@@ -34,7 +34,7 @@ LL |     assert_foo(gen);\n    = note: ...but `Foo` is actually implemented for the type `&'static OnlyFooIfStaticRef`\n \n error: implementation of `Foo` is not general enough\n-  --> $DIR/auto-trait-regions.rs:50:5\n+  --> $DIR/auto-trait-regions.rs:56:5\n    |\n LL |     assert_foo(gen);\n    |     ^^^^^^^^^^^^^^^ implementation of `Foo` is not general enough"}, {"sha": "98af4a39391630316c0f7d57283987b6371c6ea3", "filename": "src/test/ui/generator/auto-trait-regions.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fauto-trait-regions.rs?ref=62806f75369f810ddde1b28e6aca7b8a2792aac3", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n #![feature(generators)]\n #![feature(auto_traits)]\n #![feature(negative_impls)]\n@@ -30,7 +34,7 @@ fn main() {\n     };\n     assert_foo(gen);\n     //~^ ERROR implementation of `Foo` is not general enough\n-    //~| ERROR implementation of `Foo` is not general enough\n+    //[base]~^^ ERROR implementation of `Foo` is not general enough\n \n     // Allow impls which matches any lifetime\n     let x = &OnlyFooIfRef(No);\n@@ -44,10 +48,12 @@ fn main() {\n     // Disallow impls which relates lifetimes in the generator interior\n     let gen = || {\n         let a = A(&mut true, &mut true, No);\n+        //[nll]~^ temporary value dropped while borrowed\n+        //[nll]~| temporary value dropped while borrowed\n         yield;\n         assert_foo(a);\n     };\n     assert_foo(gen);\n     //~^ ERROR not general enough\n-    //~| ERROR not general enough\n+    //[base]~^^ ERROR not general enough\n }"}, {"sha": "89f6a81ad3b04d0bf6a37f6a3e536da5d5faa952", "filename": "src/test/ui/generator/generator-region-requirements.base.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.base.stderr?ref=62806f75369f810ddde1b28e6aca7b8a2792aac3", "patch": "@@ -1,5 +1,5 @@\n error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n-  --> $DIR/generator-region-requirements.rs:8:9\n+  --> $DIR/generator-region-requirements.rs:12:9\n    |\n LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n    |              -------- this data with an anonymous lifetime `'_`...", "previous_filename": "src/test/ui/generator/generator-region-requirements.stderr"}, {"sha": "9f54c6c9dc12d8ff3fd18e9f4a404857c059e824", "filename": "src/test/ui/generator/generator-region-requirements.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr?ref=62806f75369f810ddde1b28e6aca7b8a2792aac3", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/generator-region-requirements.rs:13:51\n+  --> $DIR/generator-region-requirements.rs:17:51\n    |\n LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n    |              - let's call the lifetime of this reference `'1`"}, {"sha": "ec718b174607e5cd05d32d40eeb06c86721f95ab", "filename": "src/test/ui/generator/generator-region-requirements.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs?ref=62806f75369f810ddde1b28e6aca7b8a2792aac3", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n #![feature(generators, generator_trait)]\n use std::ops::{Generator, GeneratorState};\n use std::pin::Pin;\n@@ -6,11 +10,12 @@ fn dangle(x: &mut i32) -> &'static mut i32 {\n     let mut g = || {\n         yield;\n         x\n-        //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+        //[base]~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n     };\n     loop {\n         match Pin::new(&mut g).resume(()) {\n             GeneratorState::Complete(c) => return c,\n+            //[nll]~^ ERROR lifetime may not live long enough\n             GeneratorState::Yielded(_) => (),\n         }\n     }"}, {"sha": "8521951d0c999beba32cdde742a3d27c20cdccfc", "filename": "src/test/ui/generator/resume-arg-late-bound.base.stderr", "status": "renamed", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.base.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.base.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.base.stderr?ref=62806f75369f810ddde1b28e6aca7b8a2792aac3", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/resume-arg-late-bound.rs:15:5\n+  --> $DIR/resume-arg-late-bound.rs:19:5\n    |\n LL |     test(gen);\n    |     ^^^^ lifetime mismatch\n    |\n    = note: expected type `for<'a> Generator<&'a mut bool>`\n               found type `Generator<&mut bool>`\n note: the required lifetime does not necessarily outlive the anonymous lifetime #1 defined here\n-  --> $DIR/resume-arg-late-bound.rs:11:15\n+  --> $DIR/resume-arg-late-bound.rs:15:15\n    |\n LL |       let gen = |arg: &mut bool| {\n    |  _______________^\n@@ -16,21 +16,21 @@ LL | |         *arg = true;\n LL | |     };\n    | |_____^\n note: the lifetime requirement is introduced here\n-  --> $DIR/resume-arg-late-bound.rs:8:17\n+  --> $DIR/resume-arg-late-bound.rs:12:17\n    |\n LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0308]: mismatched types\n-  --> $DIR/resume-arg-late-bound.rs:15:5\n+  --> $DIR/resume-arg-late-bound.rs:19:5\n    |\n LL |     test(gen);\n    |     ^^^^ lifetime mismatch\n    |\n    = note: expected type `for<'a> Generator<&'a mut bool>`\n               found type `Generator<&mut bool>`\n note: the anonymous lifetime #1 defined here doesn't meet the lifetime requirements\n-  --> $DIR/resume-arg-late-bound.rs:11:15\n+  --> $DIR/resume-arg-late-bound.rs:15:15\n    |\n LL |       let gen = |arg: &mut bool| {\n    |  _______________^\n@@ -39,7 +39,7 @@ LL | |         *arg = true;\n LL | |     };\n    | |_____^\n note: the lifetime requirement is introduced here\n-  --> $DIR/resume-arg-late-bound.rs:8:17\n+  --> $DIR/resume-arg-late-bound.rs:12:17\n    |\n LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "previous_filename": "src/test/ui/generator/resume-arg-late-bound.stderr"}, {"sha": "868d1352f25029074148c6fb9738823fbbe2f980", "filename": "src/test/ui/generator/resume-arg-late-bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.nll.stderr?ref=62806f75369f810ddde1b28e6aca7b8a2792aac3", "patch": "@@ -1,13 +1,13 @@\n error[E0308]: mismatched types\n-  --> $DIR/resume-arg-late-bound.rs:15:5\n+  --> $DIR/resume-arg-late-bound.rs:19:5\n    |\n LL |     test(gen);\n    |     ^^^^^^^^^ one type is more general than the other\n    |\n    = note: expected type `for<'a> Generator<&'a mut bool>`\n               found type `Generator<&mut bool>`\n note: the lifetime requirement is introduced here\n-  --> $DIR/resume-arg-late-bound.rs:8:17\n+  --> $DIR/resume-arg-late-bound.rs:12:17\n    |\n LL | fn test(a: impl for<'a> Generator<&'a mut bool>) {}\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "b973d8a300a5ed698262fbd1977ee5fd256ca980", "filename": "src/test/ui/generator/resume-arg-late-bound.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62806f75369f810ddde1b28e6aca7b8a2792aac3/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fresume-arg-late-bound.rs?ref=62806f75369f810ddde1b28e6aca7b8a2792aac3", "patch": "@@ -1,3 +1,7 @@\n+// ignore-compare-mode-nll\n+// revisions: base nll\n+// [nll]compile-flags: -Zborrowck=mir\n+\n //! Tests that we cannot produce a generator that accepts a resume argument\n //! with any lifetime and then stores it across a `yield`.\n \n@@ -14,5 +18,5 @@ fn main() {\n     };\n     test(gen);\n     //~^ ERROR mismatched types\n-    //~| ERROR mismatched types\n+    //[base]~^^ ERROR mismatched types\n }"}]}