{"sha": "73e56dec9305f1d9d80844f95763bcf76c77131a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczZTU2ZGVjOTMwNWYxZDlkODA4NDRmOTU3NjNiY2Y3NmM3NzEzMWE=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-13T18:23:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-13T18:23:33Z"}, "message": "Rollup merge of #71101 - RalfJung:miri-alignment-check, r=ecstatic-morse\n\nMiri: let machine hook dynamically decide about alignment checks\n\nThis is needed for https://github.com/rust-lang/miri/pull/1332.", "tree": {"sha": "075881a7c7153271f149a7e39727dea3c0a4702d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/075881a7c7153271f149a7e39727dea3c0a4702d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73e56dec9305f1d9d80844f95763bcf76c77131a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJelK4lCRBK7hj4Ov3rIwAAdHIIAIMhYPY+iC8ypNY8R7S2zpor\njzv9MzJGyDGz93tPHVNmyI6CGY43s7bYUbzPIt+r/xnXwt0nH15x71cvHfJUjLME\nZOVIeKWlXtI22++k+qFkHNsi9KCTnjcjQwgzMJbmUEU8bn+tVCfKJ7Ndp2NW3Lwa\n8fQM4hI9DQDJlc8LO2jmtHO+pd5pG6dXxNA1XqkoNDoO5eDjen9A9e4NfJbVpI0n\nqMrWmnwG9HWKWls4fztdj2AsNf62VMGqyy8RfNecqlGB+KARX3o+jQhflVMBe0C+\nZf58huVulnruT4brwHh4gBMOe00Zy+5gENOqpi1RKcSn1W2CEt8WMagGvohus4g=\n=DoXs\n-----END PGP SIGNATURE-----\n", "payload": "tree 075881a7c7153271f149a7e39727dea3c0a4702d\nparent eb49f7fd74b46f4646f0268c378b28a07433d4de\nparent 28e6b1a60262b494c8e2869648f74d0dd0ebd0c7\nauthor Dylan DPC <dylan.dpc@gmail.com> 1586802213 +0200\ncommitter GitHub <noreply@github.com> 1586802213 +0200\n\nRollup merge of #71101 - RalfJung:miri-alignment-check, r=ecstatic-morse\n\nMiri: let machine hook dynamically decide about alignment checks\n\nThis is needed for https://github.com/rust-lang/miri/pull/1332.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73e56dec9305f1d9d80844f95763bcf76c77131a", "html_url": "https://github.com/rust-lang/rust/commit/73e56dec9305f1d9d80844f95763bcf76c77131a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73e56dec9305f1d9d80844f95763bcf76c77131a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb49f7fd74b46f4646f0268c378b28a07433d4de", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb49f7fd74b46f4646f0268c378b28a07433d4de", "html_url": "https://github.com/rust-lang/rust/commit/eb49f7fd74b46f4646f0268c378b28a07433d4de"}, {"sha": "28e6b1a60262b494c8e2869648f74d0dd0ebd0c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/28e6b1a60262b494c8e2869648f74d0dd0ebd0c7", "html_url": "https://github.com/rust-lang/rust/commit/28e6b1a60262b494c8e2869648f74d0dd0ebd0c7"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "3f9aa9ed02d2aeee76907cf7f94bed3032b7478b", "filename": "src/librustc_mir/const_eval/machine.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/73e56dec9305f1d9d80844f95763bcf76c77131a/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73e56dec9305f1d9d80844f95763bcf76c77131a/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmachine.rs?ref=73e56dec9305f1d9d80844f95763bcf76c77131a", "patch": "@@ -179,9 +179,12 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter {\n \n     const GLOBAL_KIND: Option<!> = None; // no copying of globals from `tcx` to machine memory\n \n-    // We do not check for alignment to avoid having to carry an `Align`\n-    // in `ConstValue::ByRef`.\n-    const CHECK_ALIGN: bool = false;\n+    #[inline(always)]\n+    fn enforce_alignment(_memory_extra: &Self::MemoryExtra) -> bool {\n+        // We do not check for alignment to avoid having to carry an `Align`\n+        // in `ConstValue::ByRef`.\n+        false\n+    }\n \n     #[inline(always)]\n     fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {"}, {"sha": "dd3803eb96255ed41181a278f949f48c145d1f6c", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73e56dec9305f1d9d80844f95763bcf76c77131a/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73e56dec9305f1d9d80844f95763bcf76c77131a/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=73e56dec9305f1d9d80844f95763bcf76c77131a", "patch": "@@ -118,7 +118,7 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     const GLOBAL_KIND: Option<Self::MemoryKind>;\n \n     /// Whether memory accesses should be alignment-checked.\n-    const CHECK_ALIGN: bool;\n+    fn enforce_alignment(memory_extra: &Self::MemoryExtra) -> bool;\n \n     /// Whether to enforce the validity invariant\n     fn enforce_validity(ecx: &InterpCx<'mir, 'tcx, Self>) -> bool;"}, {"sha": "bcad7855c373690963870560eda95850fdee620e", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73e56dec9305f1d9d80844f95763bcf76c77131a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73e56dec9305f1d9d80844f95763bcf76c77131a/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=73e56dec9305f1d9d80844f95763bcf76c77131a", "patch": "@@ -323,12 +323,12 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         size: Size,\n         align: Align,\n     ) -> InterpResult<'tcx, Option<Pointer<M::PointerTag>>> {\n-        let align = M::CHECK_ALIGN.then_some(align);\n+        let align = M::enforce_alignment(&self.extra).then_some(align);\n         self.check_ptr_access_align(sptr, size, align, CheckInAllocMsg::MemoryAccessTest)\n     }\n \n     /// Like `check_ptr_access`, but *definitely* checks alignment when `align`\n-    /// is `Some` (overriding `M::CHECK_ALIGN`). Also lets the caller control\n+    /// is `Some` (overriding `M::enforce_alignment`). Also lets the caller control\n     /// the error message for the out-of-bounds case.\n     pub fn check_ptr_access_align(\n         &self,"}, {"sha": "9a6d5ab34a5ace5b5f3b6e7a7b86a7333f8b0100", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73e56dec9305f1d9d80844f95763bcf76c77131a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73e56dec9305f1d9d80844f95763bcf76c77131a/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=73e56dec9305f1d9d80844f95763bcf76c77131a", "patch": "@@ -173,7 +173,10 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for ConstPropMachine {\n \n     const GLOBAL_KIND: Option<!> = None; // no copying of globals from `tcx` to machine memory\n \n-    const CHECK_ALIGN: bool = false;\n+    #[inline(always)]\n+    fn enforce_alignment(_memory_extra: &Self::MemoryExtra) -> bool {\n+        false\n+    }\n \n     #[inline(always)]\n     fn enforce_validity(_ecx: &InterpCx<'mir, 'tcx, Self>) -> bool {"}]}