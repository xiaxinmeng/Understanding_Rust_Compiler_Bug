{"sha": "8a145a601eb97f9d32572fed23030bc1bc319105", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMTQ1YTYwMWViOTdmOWQzMjU3MmZlZDIzMDMwYmMxYmMzMTkxMDU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-21T07:31:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-22T02:10:31Z"}, "message": "rt: Don't swatch stacks during upcall_del_stack", "tree": {"sha": "063c499965cdf2a0dcaaa599ff60d3d300acd5bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/063c499965cdf2a0dcaaa599ff60d3d300acd5bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a145a601eb97f9d32572fed23030bc1bc319105", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a145a601eb97f9d32572fed23030bc1bc319105", "html_url": "https://github.com/rust-lang/rust/commit/8a145a601eb97f9d32572fed23030bc1bc319105", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a145a601eb97f9d32572fed23030bc1bc319105/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ba712fb8b00eda702be71048cda748877111ea7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ba712fb8b00eda702be71048cda748877111ea7", "html_url": "https://github.com/rust-lang/rust/commit/9ba712fb8b00eda702be71048cda748877111ea7"}], "stats": {"total": 93, "additions": 42, "deletions": 51}, "files": [{"sha": "7fa4d17f1258469cd6aa85e41c2bf60012095b6f", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 37, "deletions": 44, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/8a145a601eb97f9d32572fed23030bc1bc319105/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8a145a601eb97f9d32572fed23030bc1bc319105/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=8a145a601eb97f9d32572fed23030bc1bc319105", "patch": "@@ -520,17 +520,20 @@ rust_task::new_stack(size_t requested_sz) {\n     size_t min_sz = thread->min_stack_size;\n \n     // Try to reuse an existing stack segment\n-    if (stk != NULL && stk->prev != NULL) {\n+    while (stk != NULL && stk->prev != NULL) {\n         size_t prev_sz = user_stack_size(stk->prev);\n         if (min_sz <= prev_sz && requested_sz <= prev_sz) {\n             LOG(this, mem, \"reusing existing stack\");\n             stk = stk->prev;\n-            A(thread, stk->prev == NULL, \"Bogus stack ptr\");\n             return;\n         } else {\n             LOG(this, mem, \"existing stack is not big enough\");\n+            stk_seg *new_prev = stk->prev->prev;\n             free_stack(stk->prev);\n-            stk->prev = NULL;\n+            stk->prev = new_prev;\n+            if (new_prev) {\n+                new_prev->next = stk;\n+            }\n         }\n     }\n \n@@ -553,42 +556,15 @@ rust_task::new_stack(size_t requested_sz) {\n     LOGPTR(thread, \"new stk\", (uintptr_t)new_stk);\n     new_stk->prev = NULL;\n     new_stk->next = stk;\n+    if (stk) {\n+        stk->prev = new_stk;\n+    }\n     LOGPTR(thread, \"stk end\", new_stk->end);\n \n     stk = new_stk;\n     total_stack_sz += user_stack_size(new_stk);\n }\n \n-void\n-rust_task::del_stack() {\n-    stk_seg *old_stk = stk;\n-    ::check_stack_canary(old_stk);\n-\n-    stk = old_stk->next;\n-\n-    bool delete_stack = false;\n-    if (stk != NULL) {\n-        // Don't actually delete this stack. Save it to reuse later,\n-        // preventing the pathological case where we repeatedly reallocate\n-        // the stack for the next frame.\n-        stk->prev = old_stk;\n-    } else {\n-        // This is the last stack, delete it.\n-        delete_stack = true;\n-    }\n-\n-    // Delete the previous previous stack\n-    if (old_stk->prev != NULL) {\n-        free_stack(old_stk->prev);\n-        old_stk->prev = NULL;\n-    }\n-\n-    if (delete_stack) {\n-        free_stack(old_stk);\n-        A(thread, total_stack_sz == 0, \"Stack size should be 0\");\n-    }\n-}\n-\n void *\n rust_task::next_stack(size_t stk_sz, void *args_addr, size_t args_sz) {\n     stk_seg *maybe_next_stack = NULL;\n@@ -615,17 +591,18 @@ rust_task::next_stack(size_t stk_sz, void *args_addr, size_t args_sz) {\n     }\n \n     memcpy(new_sp, args_addr, args_sz);\n-    A(thread, rust_task_thread::get_task() == this,\n-      \"Recording the stack limit for the wrong thread\");\n     record_stack_limit();\n     return new_sp;\n }\n \n+// NB: This runs on the Rust stack\n void\n rust_task::prev_stack() {\n-    del_stack();\n-    A(thread, rust_task_thread::get_task() == this,\n-      \"Recording the stack limit for the wrong thread\");\n+    // We're not going to actually delete anything now because that would\n+    // require switching to the C stack and be costly. Instead we'll just move\n+    // up the link list and clean up later, either in new_stack or after our\n+    // turn ends on the scheduler.\n+    stk = stk->next;\n     record_stack_limit();\n }\n \n@@ -645,6 +622,18 @@ rust_task::record_stack_limit() {\n     record_sp(stk->data + LIMIT_OFFSET + RED_ZONE_SIZE);\n }\n \n+void\n+rust_task::cleanup_after_turn() {\n+    // Delete any spare stack segments that were left\n+    // behind by calls to prev_stack\n+    I(thread, stk);\n+    while (stk->prev) {\n+        stk_seg *new_prev = stk->prev->prev;\n+        free_stack(stk->prev);\n+        stk->prev = new_prev;\n+    }\n+}\n+\n static bool\n sp_in_stk_seg(uintptr_t sp, stk_seg *stk) {\n     // Not positive these bounds for sp are correct.  I think that the first\n@@ -666,25 +655,26 @@ reset_stack_limit_on_c_stack(reset_args *args) {\n     rust_task *task = args->task;\n     uintptr_t sp = args->sp;\n     while (!sp_in_stk_seg(sp, task->stk)) {\n-        task->del_stack();\n+        task->stk = task->stk->next;\n         A(task->thread, task->stk != NULL,\n           \"Failed to find the current stack\");\n     }\n     task->record_stack_limit();\n }\n \n /*\n-Called by landing pads during unwinding to figure out which\n-stack segment we are currently running on, delete the others,\n-and record the stack limit (which was not restored when unwinding\n-through __morestack).\n+Called by landing pads during unwinding to figure out which stack segment we\n+are currently running on and record the stack limit (which was not restored\n+when unwinding through __morestack).\n  */\n void\n rust_task::reset_stack_limit() {\n     I(thread, on_rust_stack());\n     uintptr_t sp = get_sp();\n     // Have to do the rest on the C stack because it involves\n     // freeing stack segments, logging, etc.\n+    // FIXME: This probably doesn't need to happen on the C\n+    // stack now\n     reset_args ra = {this, sp};\n     call_on_c_stack(&ra, (void*)reset_stack_limit_on_c_stack);\n }\n@@ -699,8 +689,11 @@ rust_task::delete_all_stacks() {\n     I(thread, !on_rust_stack());\n     // Delete all the stacks. There may be more than one if the task failed\n     // and no landing pads stopped to clean up.\n+    I(thread, stk->prev == NULL);\n     while (stk != NULL) {\n-        del_stack();\n+        stk_seg *next = stk->next;\n+        free_stack(stk);\n+        stk = next;\n     }\n }\n "}, {"sha": "6d8cd013a1d539522d9bbc7e2e8804695d8ccb90", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a145a601eb97f9d32572fed23030bc1bc319105/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/8a145a601eb97f9d32572fed23030bc1bc319105/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=8a145a601eb97f9d32572fed23030bc1bc319105", "patch": "@@ -115,7 +115,6 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void delete_this();\n \n     void new_stack(size_t sz);\n-    void del_stack();\n     void free_stack(stk_seg *stk);\n     size_t get_next_stack_size(size_t min, size_t current, size_t requested);\n \n@@ -209,6 +208,8 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     rust_task_state get_state() { return state; }\n     rust_cond *get_cond() { return cond; }\n     const char *get_cond_name() { return cond_name; }\n+\n+    void cleanup_after_turn();\n };\n \n // This stuff is on the stack-switching fast path"}, {"sha": "11b4c985138f0e88ebf3dfdd49fd5e334a4e88e0", "filename": "src/rt/rust_task_thread.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8a145a601eb97f9d32572fed23030bc1bc319105/src%2Frt%2Frust_task_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8a145a601eb97f9d32572fed23030bc1bc319105/src%2Frt%2Frust_task_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.cpp?ref=8a145a601eb97f9d32572fed23030bc1bc319105", "patch": "@@ -51,6 +51,7 @@ rust_task_thread::activate(rust_task *task) {\n     lock.unlock();\n     prepare_c_stack(task);\n     task->ctx.swap(c_context);\n+    task->cleanup_after_turn();\n     unprepare_c_stack();\n     lock.lock();\n     DLOG(this, task, \"task has returned\");"}, {"sha": "b5885cd9def27030cf43126af58ceec317ce3aa5", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a145a601eb97f9d32572fed23030bc1bc319105/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/8a145a601eb97f9d32572fed23030bc1bc319105/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=8a145a601eb97f9d32572fed23030bc1bc319105", "patch": "@@ -461,17 +461,13 @@ upcall_new_stack(size_t stk_sz, void *args_addr, size_t args_sz) {\n     return args.result;\n }\n \n+// NB: This needs to be blazing fast. Don't switch stacks\n extern \"C\" CDECL void\n-upcall_s_del_stack() {\n+upcall_del_stack() {\n     rust_task *task = rust_task_thread::get_task();\n     task->prev_stack();\n }\n \n-extern \"C\" CDECL void\n-upcall_del_stack() {\n-    UPCALL_SWITCH_STACK(NULL, upcall_s_del_stack);\n-}\n-\n // Landing pads need to call this to insert the\n // correct limit into TLS.\n // NB: This must run on the Rust stack because it"}]}