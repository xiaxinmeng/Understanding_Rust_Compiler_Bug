{"sha": "240fc255ef82f752f7b4bfaeae9f6024bad7c5e8", "node_id": "C_kwDOAAsO6NoAKDI0MGZjMjU1ZWY4MmY3NTJmN2I0YmZhZWFlOWY2MDI0YmFkN2M1ZTg", "commit": {"author": {"name": "Noritada Kobayashi", "email": "noritada.kobayashi@gmail.com", "date": "2022-12-10T09:22:57Z"}, "committer": {"name": "Noritada Kobayashi", "email": "noritada.kobayashi@gmail.com", "date": "2022-12-10T09:22:57Z"}, "message": "Add image/video media support in AsciiDoc-to-Markdown conversion", "tree": {"sha": "6e6d156cec560e9981c09e1720e231c011fb5983", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e6d156cec560e9981c09e1720e231c011fb5983"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/240fc255ef82f752f7b4bfaeae9f6024bad7c5e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/240fc255ef82f752f7b4bfaeae9f6024bad7c5e8", "html_url": "https://github.com/rust-lang/rust/commit/240fc255ef82f752f7b4bfaeae9f6024bad7c5e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/240fc255ef82f752f7b4bfaeae9f6024bad7c5e8/comments", "author": {"login": "noritada", "id": 20850, "node_id": "MDQ6VXNlcjIwODUw", "avatar_url": "https://avatars.githubusercontent.com/u/20850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noritada", "html_url": "https://github.com/noritada", "followers_url": "https://api.github.com/users/noritada/followers", "following_url": "https://api.github.com/users/noritada/following{/other_user}", "gists_url": "https://api.github.com/users/noritada/gists{/gist_id}", "starred_url": "https://api.github.com/users/noritada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noritada/subscriptions", "organizations_url": "https://api.github.com/users/noritada/orgs", "repos_url": "https://api.github.com/users/noritada/repos", "events_url": "https://api.github.com/users/noritada/events{/privacy}", "received_events_url": "https://api.github.com/users/noritada/received_events", "type": "User", "site_admin": false}, "committer": {"login": "noritada", "id": 20850, "node_id": "MDQ6VXNlcjIwODUw", "avatar_url": "https://avatars.githubusercontent.com/u/20850?v=4", "gravatar_id": "", "url": "https://api.github.com/users/noritada", "html_url": "https://github.com/noritada", "followers_url": "https://api.github.com/users/noritada/followers", "following_url": "https://api.github.com/users/noritada/following{/other_user}", "gists_url": "https://api.github.com/users/noritada/gists{/gist_id}", "starred_url": "https://api.github.com/users/noritada/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/noritada/subscriptions", "organizations_url": "https://api.github.com/users/noritada/orgs", "repos_url": "https://api.github.com/users/noritada/repos", "events_url": "https://api.github.com/users/noritada/events{/privacy}", "received_events_url": "https://api.github.com/users/noritada/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1efcb6ad9abc0ab0c1af8092ee73dce90e7ab8e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1efcb6ad9abc0ab0c1af8092ee73dce90e7ab8e3", "html_url": "https://github.com/rust-lang/rust/commit/1efcb6ad9abc0ab0c1af8092ee73dce90e7ab8e3"}], "stats": {"total": 128, "additions": 126, "deletions": 2}, "files": [{"sha": "c6b743ee038621e04412372ed8baa4d76ef5a756", "filename": "xtask/src/publish/notes.rs", "status": "modified", "additions": 126, "deletions": 2, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/240fc255ef82f752f7b4bfaeae9f6024bad7c5e8/xtask%2Fsrc%2Fpublish%2Fnotes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240fc255ef82f752f7b4bfaeae9f6024bad7c5e8/xtask%2Fsrc%2Fpublish%2Fnotes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fpublish%2Fnotes.rs?ref=240fc255ef82f752f7b4bfaeae9f6024bad7c5e8", "patch": "@@ -5,6 +5,8 @@ use std::{\n };\n \n const LISTING_DELIMITER: &'static str = \"----\";\n+const IMAGE_BLOCK_PREFIX: &'static str = \"image::\";\n+const VIDEO_BLOCK_PREFIX: &'static str = \"video::\";\n \n struct Converter<'a, 'b, R: BufRead> {\n     iter: &'a mut Peekable<Lines<R>>,\n@@ -33,6 +35,12 @@ impl<'a, 'b, R: BufRead> Converter<'a, 'b, R> {\n                 self.process_source_code_block(0)?;\n             } else if line.starts_with(LISTING_DELIMITER) {\n                 self.process_listing_block(None, 0)?;\n+            } else if line.starts_with('.') {\n+                self.process_block_with_title(0)?;\n+            } else if line.starts_with(IMAGE_BLOCK_PREFIX) {\n+                self.process_image_block(None, 0)?;\n+            } else if line.starts_with(VIDEO_BLOCK_PREFIX) {\n+                self.process_video_block(None, 0)?;\n             } else {\n                 self.process_paragraph(0)?;\n             }\n@@ -95,6 +103,15 @@ impl<'a, 'b, R: BufRead> Converter<'a, 'b, R> {\n                 } else if line.starts_with(LISTING_DELIMITER) {\n                     self.write_line(\"\", 0);\n                     self.process_listing_block(None, 1)?;\n+                } else if line.starts_with('.') {\n+                    self.write_line(\"\", 0);\n+                    self.process_block_with_title(1)?;\n+                } else if line.starts_with(IMAGE_BLOCK_PREFIX) {\n+                    self.write_line(\"\", 0);\n+                    self.process_image_block(None, 1)?;\n+                } else if line.starts_with(VIDEO_BLOCK_PREFIX) {\n+                    self.write_line(\"\", 0);\n+                    self.process_video_block(None, 1)?;\n                 } else {\n                     self.write_line(\"\", 0);\n                     self.process_paragraph(1)?;\n@@ -145,6 +162,75 @@ impl<'a, 'b, R: BufRead> Converter<'a, 'b, R> {\n         bail!(\"not a listing block\")\n     }\n \n+    fn process_block_with_title(&mut self, level: usize) -> anyhow::Result<()> {\n+        if let Some(Ok(line)) = self.iter.next() {\n+            let title =\n+                line.strip_prefix('.').ok_or_else(|| anyhow!(\"extraction of the title failed\"))?;\n+\n+            let line = self\n+                .iter\n+                .peek()\n+                .ok_or_else(|| anyhow!(\"target block for the title is not found\"))?;\n+            let line = line.as_deref().map_err(|e| anyhow!(\"{e}\"))?;\n+            if line.starts_with(IMAGE_BLOCK_PREFIX) {\n+                return self.process_image_block(Some(title), level);\n+            } else if line.starts_with(VIDEO_BLOCK_PREFIX) {\n+                return self.process_video_block(Some(title), level);\n+            } else {\n+                bail!(\"title for that block type is not supported\");\n+            }\n+        }\n+        bail!(\"not a title\")\n+    }\n+\n+    fn process_image_block(&mut self, caption: Option<&str>, level: usize) -> anyhow::Result<()> {\n+        if let Some(Ok(line)) = self.iter.next() {\n+            if let Some((url, attrs)) = parse_media_block(&line, IMAGE_BLOCK_PREFIX) {\n+                let alt = if let Some(stripped) =\n+                    attrs.strip_prefix('\"').and_then(|s| s.strip_suffix('\"'))\n+                {\n+                    stripped\n+                } else {\n+                    attrs\n+                };\n+                if let Some(caption) = caption {\n+                    self.write_caption_line(caption, level);\n+                }\n+                self.write_indent(level);\n+                self.output.push_str(\"![\");\n+                self.output.push_str(alt);\n+                self.output.push_str(\"](\");\n+                self.output.push_str(url);\n+                self.output.push_str(\")\\n\");\n+                return Ok(());\n+            }\n+        }\n+        bail!(\"not a image block\")\n+    }\n+\n+    fn process_video_block(&mut self, caption: Option<&str>, level: usize) -> anyhow::Result<()> {\n+        if let Some(Ok(line)) = self.iter.next() {\n+            if let Some((url, attrs)) = parse_media_block(&line, VIDEO_BLOCK_PREFIX) {\n+                let html_attrs = match attrs {\n+                    \"options=loop\" => \"controls loop\",\n+                    r#\"options=\"autoplay,loop\"\"# => \"autoplay controls loop\",\n+                    _ => bail!(\"unsupported video syntax\"),\n+                };\n+                if let Some(caption) = caption {\n+                    self.write_caption_line(caption, level);\n+                }\n+                self.write_indent(level);\n+                self.output.push_str(r#\"<video src=\"\"#);\n+                self.output.push_str(url);\n+                self.output.push_str(r#\"\" \"#);\n+                self.output.push_str(html_attrs);\n+                self.output.push_str(\">Your browser does not support the video tag.</video>\\n\");\n+                return Ok(());\n+            }\n+        }\n+        bail!(\"not a video block\")\n+    }\n+\n     fn process_paragraph(&mut self, level: usize) -> anyhow::Result<()> {\n         while let Some(line) = self.iter.peek() {\n             let line = line.as_deref().map_err(|e| anyhow!(\"{e}\"))?;\n@@ -192,6 +278,13 @@ impl<'a, 'b, R: BufRead> Converter<'a, 'b, R> {\n         self.output.push('\\n');\n     }\n \n+    fn write_caption_line(&mut self, caption: &str, level: usize) {\n+        self.write_indent(level);\n+        self.output.push('_');\n+        self.output.push_str(caption);\n+        self.output.push_str(\"_\\\\\\n\");\n+    }\n+\n     fn write_indent(&mut self, level: usize) {\n         for _ in 0..level {\n             self.output.push_str(\"  \");\n@@ -249,6 +342,17 @@ fn get_list_item(line: &str) -> Option<&str> {\n     }\n }\n \n+fn parse_media_block<'a>(line: &'a str, prefix: &str) -> Option<(&'a str, &'a str)> {\n+    if let Some(line) = line.strip_prefix(prefix) {\n+        if let Some((url, rest)) = line.split_once('[') {\n+            if let Some(attrs) = rest.strip_suffix(']') {\n+                return Some((url, attrs));\n+            }\n+        }\n+    }\n+    None\n+}\n+\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -272,8 +376,18 @@ Release: release:2022-01-01[]\n +\n image::https://example.com/animation.gif[]\n +\n+image::https://example.com/animation.gif[\\\"alt text\\\"]\n++\n+video::https://example.com/movie.mp4[options=loop]\n++\n video::https://example.com/movie.mp4[options=\\\"autoplay,loop\\\"]\n +\n+.Image\n+image::https://example.com/animation.gif[]\n++\n+.Video\n+video::https://example.com/movie.mp4[options=loop]\n++\n [source,bash]\n ----\n rustup update nightly\n@@ -325,9 +439,19 @@ Release: release:2022-01-01[]\n - pr:1111[] foo bar baz\n - pr:2222[] foo bar baz\n \n-  image::https://example.com/animation.gif[]\n+  ![](https://example.com/animation.gif)\n+\n+  ![alt text](https://example.com/animation.gif)\n+\n+  <video src=\\\"https://example.com/movie.mp4\\\" controls loop>Your browser does not support the video tag.</video>\n+\n+  <video src=\\\"https://example.com/movie.mp4\\\" autoplay controls loop>Your browser does not support the video tag.</video>\n+\n+  _Image_\\\\\n+  ![](https://example.com/animation.gif)\n \n-  video::https://example.com/movie.mp4[options=\\\"autoplay,loop\\\"]\n+  _Video_\\\\\n+  <video src=\\\"https://example.com/movie.mp4\\\" controls loop>Your browser does not support the video tag.</video>\n \n   ```bash\n   rustup update nightly"}]}