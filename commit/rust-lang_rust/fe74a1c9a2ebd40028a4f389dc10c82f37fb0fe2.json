{"sha": "fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlNzRhMWM5YTJlYmQ0MDAyOGE0ZjM4OWRjMTBjODJmMzdmYjBmZTI=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-13T14:45:45Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-03-20T03:24:04Z"}, "message": "core: rename vec::rev_each{,i} to vec::each{,i}_reverse\n\nI'm making this change because the _reverse suffix is more commonly\nused in libcore/libstd.", "tree": {"sha": "e8a9db11be0bd9a97c497a7ab73a292a9308936a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8a9db11be0bd9a97c497a7ab73a292a9308936a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2", "html_url": "https://github.com/rust-lang/rust/commit/fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cb9ca92962dbbe8ffd813c016e9d6f809dd285b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb9ca92962dbbe8ffd813c016e9d6f809dd285b", "html_url": "https://github.com/rust-lang/rust/commit/4cb9ca92962dbbe8ffd813c016e9d6f809dd285b"}], "stats": {"total": 51, "additions": 37, "deletions": 14}, "files": [{"sha": "e41aefc94e5f7d89da47acf5f1457296f9a6dc92", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 33, "deletions": 10, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2", "patch": "@@ -1005,7 +1005,7 @@ pub pure fn foldl<T, U>(z: T, v: &[U], p: &fn(t: T, u: &U) -> T) -> T {\n  */\n pub pure fn foldr<T, U: Copy>(v: &[T], z: U, p: &fn(t: &T, u: U) -> U) -> U {\n     let mut accum = z;\n-    for rev_each(v) |elt| {\n+    for v.each_reverse |elt| {\n         accum = p(elt, accum);\n     }\n     accum\n@@ -1411,8 +1411,8 @@ pub pure fn eachi<T>(v: &'r [T], f: &fn(uint, v: &'r T) -> bool) {\n  * Return true to continue, false to break.\n  */\n #[inline(always)]\n-pub pure fn rev_each<T>(v: &'r [T], blk: &fn(v: &'r T) -> bool) {\n-    rev_eachi(v, |_i, v| blk(v))\n+pub pure fn each_reverse<T>(v: &'r [T], blk: &fn(v: &'r T) -> bool) {\n+    eachi_reverse(v, |_i, v| blk(v))\n }\n \n /**\n@@ -1421,7 +1421,7 @@ pub pure fn rev_each<T>(v: &'r [T], blk: &fn(v: &'r T) -> bool) {\n  * Return true to continue, false to break.\n  */\n #[inline(always)]\n-pub pure fn rev_eachi<T>(v: &'r [T], blk: &fn(i: uint, v: &'r T) -> bool) {\n+pub pure fn eachi_reverse<T>(v: &'r [T], blk: &fn(i: uint, v: &'r T) -> bool) {\n     let mut i = v.len();\n     while i > 0 {\n         i -= 1;\n@@ -1736,6 +1736,8 @@ pub trait ImmutableVector<T> {\n     pure fn initn(&self, n: uint) -> &'self [T];\n     pure fn last(&self) -> &'self T;\n     pure fn last_opt(&self) -> Option<&'self T>;\n+    pure fn each_reverse(&self, blk: &fn(&T) -> bool);\n+    pure fn eachi_reverse(&self, blk: &fn(uint, &T) -> bool);\n     pure fn foldr<U: Copy>(&self, z: U, p: &fn(t: &T, u: U) -> U) -> U;\n     pure fn map<U>(&self, f: &fn(t: &T) -> U) -> ~[U];\n     pure fn mapi<U>(&self, f: &fn(uint, t: &T) -> U) -> ~[U];\n@@ -1785,6 +1787,18 @@ impl<T> ImmutableVector<T> for &'self [T] {\n     #[inline]\n     pure fn last_opt(&self) -> Option<&'self T> { last_opt(*self) }\n \n+    /// Iterates over a vector's elements in reverse.\n+    #[inline]\n+    pure fn each_reverse(&self, blk: &fn(&T) -> bool) {\n+        each_reverse(*self, blk)\n+    }\n+\n+    /// Iterates over a vector's elements and indices in reverse.\n+    #[inline]\n+    pure fn eachi_reverse(&self, blk: &fn(uint, &T) -> bool) {\n+        eachi_reverse(*self, blk)\n+    }\n+\n     /// Reduce a vector from right to left\n     #[inline]\n     pure fn foldr<U:Copy>(&self, z: U, p: &fn(t: &T, u: U) -> U) -> U {\n@@ -3131,33 +3145,42 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_reach_empty() {\n-        for rev_each::<int>(~[]) |_v| {\n+    fn test_each_reverse_empty() {\n+        let v: ~[int] = ~[];\n+        for v.each_reverse |_v| {\n             fail!(); // should never execute\n         }\n     }\n \n     #[test]\n-    fn test_reach_nonempty() {\n+    fn test_each_reverse_nonempty() {\n         let mut i = 0;\n-        for rev_each(~[1, 2, 3]) |v| {\n+        for each_reverse(~[1, 2, 3]) |v| {\n             if i == 0 { fail_unless!(*v == 3); }\n             i += *v\n         }\n         fail_unless!(i == 6);\n     }\n \n     #[test]\n-    fn test_reachi() {\n+    fn test_eachi_reverse() {\n         let mut i = 0;\n-        for rev_eachi(~[0, 1, 2]) |j, v| {\n+        for eachi_reverse(~[0, 1, 2]) |j, v| {\n             if i == 0 { fail_unless!(*v == 2); }\n             fail_unless!(j == *v as uint);\n             i += *v;\n         }\n         fail_unless!(i == 3);\n     }\n \n+    #[test]\n+    fn test_eachi_reverse_empty() {\n+        let v: ~[int] = ~[];\n+        for v.eachi_reverse |_i, _v| {\n+            fail!(); // should never execute\n+        }\n+    }\n+\n     #[test]\n     fn test_each_permutation() {\n         let mut results: ~[~[int]];"}, {"sha": "7b2ea956ebd675c6ad61ecee56141be048b9f473", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2", "patch": "@@ -1264,7 +1264,7 @@ pub fn trans_block_cleanups_(bcx: block,\n         bcx.ccx().sess.opts.debugging_opts & session::no_landing_pads != 0;\n     if bcx.unreachable && !no_lpads { return bcx; }\n     let mut bcx = bcx;\n-    for vec::rev_each(cleanups) |cu| {\n+    for cleanups.each_reverse |cu| {\n         match *cu {\n             clean(cfn, cleanup_type) | clean_temp(_, cfn, cleanup_type) => {\n                 // Some types don't need to be cleaned up during"}, {"sha": "cdc65de49871e6e4d00a9c6936027bb4dd8fdeea", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=fe74a1c9a2ebd40028a4f389dc10c82f37fb0fe2", "patch": "@@ -324,7 +324,7 @@ pub impl BigUint {\n         if s_len < o_len { return -1; }\n         if s_len > o_len { return  1;  }\n \n-        for vec::rev_eachi(self.data) |i, elm| {\n+        for self.data.eachi_reverse |i, elm| {\n             match (*elm, other.data[i]) {\n                 (l, r) if l < r => return -1,\n                 (l, r) if l > r => return  1,\n@@ -387,7 +387,7 @@ pub impl BigUint {\n             let bn = *b.data.last();\n             let mut d = ~[];\n             let mut carry = 0;\n-            for vec::rev_each(an) |elt| {\n+            for an.each_reverse |elt| {\n                 let ai = BigDigit::to_uint(carry, *elt);\n                 let di = ai / (bn as uint);\n                 fail_unless!(di < BigDigit::base);\n@@ -499,7 +499,7 @@ pub impl BigUint {\n \n         let mut borrow = 0;\n         let mut shifted = ~[];\n-        for vec::rev_each(self.data) |elem| {\n+        for self.data.each_reverse |elem| {\n             shifted = ~[(*elem >> n_bits) | borrow] + shifted;\n             borrow = *elem << (uint::bits - n_bits);\n         }"}]}