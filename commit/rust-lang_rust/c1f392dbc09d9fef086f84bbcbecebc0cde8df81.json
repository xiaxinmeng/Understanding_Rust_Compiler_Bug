{"sha": "c1f392dbc09d9fef086f84bbcbecebc0cde8df81", "node_id": "C_kwDOAAsO6NoAKGMxZjM5MmRiYzA5ZDlmZWYwODZmODRiYmNiZWNlYmMwY2RlOGRmODE", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-10-07T18:35:34Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-11-22T22:12:26Z"}, "message": "add tests for field ordering optimization", "tree": {"sha": "bca7364e3632628ff8a72100ef2a579e38066da7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bca7364e3632628ff8a72100ef2a579e38066da7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1f392dbc09d9fef086f84bbcbecebc0cde8df81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1f392dbc09d9fef086f84bbcbecebc0cde8df81", "html_url": "https://github.com/rust-lang/rust/commit/c1f392dbc09d9fef086f84bbcbecebc0cde8df81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1f392dbc09d9fef086f84bbcbecebc0cde8df81/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9128d89273be6f7b2bc58cd5b8bcd74382c7cd7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9128d89273be6f7b2bc58cd5b8bcd74382c7cd7", "html_url": "https://github.com/rust-lang/rust/commit/a9128d89273be6f7b2bc58cd5b8bcd74382c7cd7"}], "stats": {"total": 21, "additions": 21, "deletions": 0}, "files": [{"sha": "63e2f3150c01374ee13c5fe639c6833ff0cfd007", "filename": "src/test/ui/structs-enums/type-sizes.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c1f392dbc09d9fef086f84bbcbecebc0cde8df81/src%2Ftest%2Fui%2Fstructs-enums%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1f392dbc09d9fef086f84bbcbecebc0cde8df81/src%2Ftest%2Fui%2Fstructs-enums%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstructs-enums%2Ftype-sizes.rs?ref=c1f392dbc09d9fef086f84bbcbecebc0cde8df81", "patch": "@@ -3,6 +3,7 @@\n #![allow(non_camel_case_types)]\n #![allow(dead_code)]\n #![feature(never_type)]\n+#![feature(pointer_is_aligned)]\n \n use std::mem::size_of;\n use std::num::NonZeroU8;\n@@ -168,6 +169,18 @@ pub enum EnumManyVariant<X> {\n     _F0, _F1, _F2, _F3, _F4, _F5, _F6, _F7, _F8, _F9, _FA, _FB, _FC, _FD, _FE, _FF,\n }\n \n+struct Reorder4 {\n+    a: u32,\n+    b: u8,\n+    ary: [u8; 4],\n+}\n+\n+struct Reorder2 {\n+    a: u16,\n+    b: u8,\n+    ary: [u8; 6],\n+}\n+\n pub fn main() {\n     assert_eq!(size_of::<u8>(), 1 as usize);\n     assert_eq!(size_of::<u32>(), 4 as usize);\n@@ -249,4 +262,12 @@ pub fn main() {\n     assert_eq!(size_of::<EnumManyVariant<Option<NicheU16>>>(), 4);\n     assert_eq!(size_of::<EnumManyVariant<Option2<NicheU16,u8>>>(), 6);\n     assert_eq!(size_of::<EnumManyVariant<Option<(NicheU16,u8)>>>(), 6);\n+\n+\n+    let v = Reorder4 {a: 0, b: 0, ary: [0; 4]};\n+    assert_eq!(size_of::<Reorder4>(), 12);\n+    assert!((&v.ary).as_ptr().is_aligned_to(4), \"[u8; 4] should group with align-4 fields\");\n+    let v = Reorder2 {a: 0, b: 0, ary: [0; 6]};\n+    assert_eq!(size_of::<Reorder2>(), 10);\n+    assert!((&v.ary).as_ptr().is_aligned_to(2), \"[u8; 6] should group with align-2 fields\");\n }"}]}