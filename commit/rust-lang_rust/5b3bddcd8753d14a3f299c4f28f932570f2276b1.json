{"sha": "5b3bddcd8753d14a3f299c4f28f932570f2276b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViM2JkZGNkODc1M2QxNGEzZjI5OWM0ZjI4ZjkzMjU3MGYyMjc2YjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-10-12T19:29:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-11-02T21:13:22Z"}, "message": "start to isolate target strings so that they can be configured for\nx64 or other targets", "tree": {"sha": "5f7d7b0b9014ef9118df3a53f5a2b13a6d814e62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f7d7b0b9014ef9118df3a53f5a2b13a6d814e62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b3bddcd8753d14a3f299c4f28f932570f2276b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b3bddcd8753d14a3f299c4f28f932570f2276b1", "html_url": "https://github.com/rust-lang/rust/commit/5b3bddcd8753d14a3f299c4f28f932570f2276b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b3bddcd8753d14a3f299c4f28f932570f2276b1/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eed782c7783f3f7dd57323e238e674bf4cfe77a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/eed782c7783f3f7dd57323e238e674bf4cfe77a9", "html_url": "https://github.com/rust-lang/rust/commit/eed782c7783f3f7dd57323e238e674bf4cfe77a9"}], "stats": {"total": 188, "additions": 114, "deletions": 74}, "files": [{"sha": "d7b79e939be01993ad91b290e0979a1d5d286430", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 35, "deletions": 31, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/5b3bddcd8753d14a3f299c4f28f932570f2276b1/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3bddcd8753d14a3f299c4f28f932570f2276b1/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=5b3bddcd8753d14a3f299c4f28f932570f2276b1", "patch": "@@ -94,7 +94,8 @@ mod write {\n         if opts.stack_growth { llvm::LLVMRustEnableSegmentedStacks(); }\n         link_intrinsics(sess, llmod);\n         let pm = mk_pass_manager();\n-        let td = mk_target_data(x86::get_data_layout());\n+        let td = mk_target_data(\n+            sess.get_targ_cfg().target_strs.data_layout);\n         llvm::LLVMAddTargetData(td.lltd, pm.llpm);\n         // TODO: run the linter here also, once there are llvm-c bindings for\n         // it.\n@@ -199,16 +200,17 @@ mod write {\n                 // Save the assembly file if -S is used\n \n                 if opts.output_type == output_type_assembly {\n-                    let _: () = str::as_buf(x86::get_target_triple(), {|buf_t|\n-                        str::as_buf(output, {|buf_o|\n-                            llvm::LLVMRustWriteOutputFile(pm.llpm,\n-                                                          llmod,\n-                                                          buf_t,\n-                                                          buf_o,\n-                                                          LLVMAssemblyFile,\n-                                                          CodeGenOptLevel)\n-                        })\n-                    });\n+                    let _: () = str::as_buf(\n+                        sess.get_targ_cfg().target_strs.target_triple,\n+                        {|buf_t|\n+                            str::as_buf(output, {|buf_o|\n+                                llvm::LLVMRustWriteOutputFile(\n+                                    pm.llpm,\n+                                    llmod,\n+                                    buf_t,\n+                                    buf_o,\n+                                    LLVMAssemblyFile,\n+                                    CodeGenOptLevel)})});\n                 }\n \n \n@@ -217,32 +219,34 @@ mod write {\n                 if opts.output_type == output_type_object ||\n                        opts.output_type == output_type_exe {\n                     let _: () =\n-                        str::as_buf(x86::get_target_triple(), {|buf_t|\n-                            str::as_buf(output, {|buf_o|\n-                                llvm::LLVMRustWriteOutputFile(pm.llpm,\n-                                                              llmod,\n-                                                              buf_t,\n-                                                              buf_o,\n-                                                              LLVMObjectFile,\n-                                                              CodeGenOptLevel)\n-                            })\n-                        });\n+                        str::as_buf(\n+                            sess.get_targ_cfg().target_strs.target_triple,\n+                            {|buf_t|\n+                                str::as_buf(output, {|buf_o|\n+                                    llvm::LLVMRustWriteOutputFile(\n+                                        pm.llpm,\n+                                        llmod,\n+                                        buf_t,\n+                                        buf_o,\n+                                        LLVMObjectFile,\n+                                        CodeGenOptLevel)})});\n                 }\n             } else {\n                 // If we aren't saving temps then just output the file\n                 // type corresponding to the '-c' or '-S' flag used\n \n                 let _: () =\n-                    str::as_buf(x86::get_target_triple(), {|buf_t|\n-                        str::as_buf(output, {|buf_o|\n-                            llvm::LLVMRustWriteOutputFile(pm.llpm,\n-                                                          llmod,\n-                                                          buf_t,\n-                                                          buf_o,\n-                                                          FileType,\n-                                                          CodeGenOptLevel)\n-                        })\n-                    });\n+                    str::as_buf(\n+                        sess.get_targ_cfg().target_strs.target_triple,\n+                        {|buf_t|\n+                            str::as_buf(output, {|buf_o|\n+                                llvm::LLVMRustWriteOutputFile(\n+                                    pm.llpm,\n+                                    llmod,\n+                                    buf_t,\n+                                    buf_o,\n+                                    FileType,\n+                                    CodeGenOptLevel)})});\n             }\n             // Clean up and return\n "}, {"sha": "bf2458c2d6b6c36722723468b7d33ae37ca0e914", "filename": "src/comp/back/target_strs.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b3bddcd8753d14a3f299c4f28f932570f2276b1/src%2Fcomp%2Fback%2Ftarget_strs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3bddcd8753d14a3f299c4f28f932570f2276b1/src%2Fcomp%2Fback%2Ftarget_strs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Ftarget_strs.rs?ref=5b3bddcd8753d14a3f299c4f28f932570f2276b1", "patch": "@@ -0,0 +1,8 @@\n+import std::str;\n+\n+type t = {\n+    module_asm: str,\n+    meta_sect_name: str,\n+    data_layout: str,\n+    target_triple: str\n+};\n\\ No newline at end of file"}, {"sha": "50f7141985392d0ea3745d216204066fec3db7e6", "filename": "src/comp/back/x86.rs", "status": "modified", "additions": 30, "deletions": 22, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/5b3bddcd8753d14a3f299c4f28f932570f2276b1/src%2Fcomp%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3bddcd8753d14a3f299c4f28f932570f2276b1/src%2Fcomp%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fx86.rs?ref=5b3bddcd8753d14a3f299c4f28f932570f2276b1", "patch": "@@ -1,34 +1,42 @@\n-\n import lib::llvm::llvm;\n import lib::llvm::llvm::ModuleRef;\n import std::str;\n-import std::os::target_os;\n+import driver::session;\n \n-fn get_module_asm() -> str { ret \"\"; }\n+fn get_target_strs(target_os: session::os) -> target_strs::t {\n+    ret {\n+        module_asm: \"\",\n \n-fn get_meta_sect_name() -> str {\n-    if str::eq(target_os(), \"macos\") { ret \"__DATA,__note.rustc\"; }\n-    if str::eq(target_os(), \"win32\") { ret \".note.rustc\"; }\n-    ret \".note.rustc\";\n-}\n+        meta_sect_name: alt target_os {\n+          session::os_macos. { \"__DATA,__note.rustc\" }\n+          session::os_win32. { \".note.rustc\" }\n+          session::os_linux. { \".note.rustc\" }\n+        },\n \n-fn get_data_layout() -> str {\n-    if str::eq(target_os(), \"macos\") {\n-        ret \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16\" + \"-i32:32:32-i64:32:64\" +\n+        data_layout: alt target_os {\n+          session::os_macos. {\n+            \"e-p:32:32:32-i1:8:8-i8:8:8-i16:16:16\" + \"-i32:32:32-i64:32:64\" +\n                 \"-f32:32:32-f64:32:64-v64:64:64\" +\n-                \"-v128:128:128-a0:0:64-f80:128:128\" + \"-n8:16:32\";\n-    }\n-    if str::eq(target_os(), \"win32\") {\n-        ret \"e-p:32:32-f64:64:64-i64:64:64-f80:32:32-n8:16:32\";\n-    }\n-    ret \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\";\n-}\n+              \"-v128:128:128-a0:0:64-f80:128:128\" + \"-n8:16:32\"\n+          }\n \n-fn get_target_triple() -> str {\n-    if str::eq(target_os(), \"macos\") { ret \"i686-apple-darwin\"; }\n-    if str::eq(target_os(), \"win32\") { ret \"i686-pc-mingw32\"; }\n-    ret \"i686-unknown-linux-gnu\";\n+          session::os_win32. {\n+            \"e-p:32:32-f64:64:64-i64:64:64-f80:32:32-n8:16:32\"\n+          }\n+\n+          session::os_linux. {\n+            \"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\"\n+          }\n+        },\n+\n+        target_triple: alt target_os {\n+          session::os_macos. { \"i686-apple-darwin\" }\n+          session::os_win32. { \"i686-pc-mingw32\" }\n+          session::os_linux. { \"i686-unknown-linux-gnu\" }\n+        }\n+    };\n }\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "3fbe6aea5163ff76ee7efecd3af17c74ff9d0092", "filename": "src/comp/driver/rustc.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5b3bddcd8753d14a3f299c4f28f932570f2276b1/src%2Fcomp%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3bddcd8753d14a3f299c4f28f932570f2276b1/src%2Fcomp%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Frustc.rs?ref=5b3bddcd8753d14a3f299c4f28f932570f2276b1", "patch": "@@ -16,6 +16,7 @@ import std::map::mk_hashmap;\n import std::option::{some, none};\n import std::getopts::{optopt, optmulti, optflag, optflagopt, opt_present};\n import back::link::output_type;\n+import back::x86;\n \n tag pp_mode { ppm_normal; ppm_expanded; ppm_typed; ppm_identified; }\n \n@@ -302,12 +303,21 @@ fn get_arch(triple: str) -> session::arch {\n }\n \n fn build_target_config(sopts: @session::options) -> @session::config {\n+    let os = get_os(sopts.target_triple);\n+    let arch = get_arch(sopts.target_triple);\n+    let (int_type, uint_type, float_type) = alt arch {\n+      session::arch_x86. {(ast::ty_i32, ast::ty_u32, ast::ty_f64)}\n+      session::arch_x64. {(ast::ty_i64, ast::ty_u64, ast::ty_f64)}\n+      session::arch_arm. {(ast::ty_i32, ast::ty_u32, ast::ty_f64)}\n+    };\n+    let target_strs = alt arch {\n+      session::arch_x86. {x86::get_target_strs(os)}\n+      session::arch_x64. {x86::get_target_strs(os)}\n+      session::arch_arm. {x86::get_target_strs(os)}\n+    };\n     let target_cfg: @session::config =\n-        @{os: get_os(sopts.target_triple),\n-          arch: get_arch(sopts.target_triple),\n-          int_type: ast::ty_i32,\n-          uint_type: ast::ty_u32,\n-          float_type: ast::ty_f64};\n+        @{os: os, arch: arch, target_strs: target_strs, int_type: int_type,\n+          uint_type: uint_type, float_type: float_type};\n     ret target_cfg;\n }\n \n@@ -531,7 +541,10 @@ fn main(args: [str]) {\n       none::<pp_mode>. {/* continue */ }\n     }\n     let ls = opt_present(match, \"ls\");\n-    if ls { metadata::creader::list_file_metadata(ifile, io::stdout()); ret; }\n+    if ls {\n+        metadata::creader::list_file_metadata(sess, ifile, io::stdout());\n+        ret;\n+    }\n \n     let stop_after_codegen =\n         sopts.output_type != link::output_type_exe ||"}, {"sha": "d688a57831bf3b36c69f6787d9e515e79a134da6", "filename": "src/comp/driver/session.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b3bddcd8753d14a3f299c4f28f932570f2276b1/src%2Fcomp%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3bddcd8753d14a3f299c4f28f932570f2276b1/src%2Fcomp%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fsession.rs?ref=5b3bddcd8753d14a3f299c4f28f932570f2276b1", "patch": "@@ -7,6 +7,7 @@ import std::{uint, map, option, str};\n import std::option::{some, none};\n import syntax::parse::parser::parse_sess;\n import util::filesearch;\n+import back::target_strs;\n \n tag os { os_win32; os_macos; os_linux; }\n \n@@ -15,6 +16,7 @@ tag arch { arch_x86; arch_x64; arch_arm; }\n type config =\n     {os: os,\n      arch: arch,\n+     target_strs: target_strs::t,\n      int_type: ty_mach,\n      uint_type: ty_mach,\n      float_type: ty_mach};"}, {"sha": "9fac72e1ddb95ab9ab54f2f20fa80623adfe0cae", "filename": "src/comp/metadata/creader.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/5b3bddcd8753d14a3f299c4f28f932570f2276b1/src%2Fcomp%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3bddcd8753d14a3f299c4f28f932570f2276b1/src%2Fcomp%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fcreader.rs?ref=5b3bddcd8753d14a3f299c4f28f932570f2276b1", "patch": "@@ -72,8 +72,8 @@ fn visit_item(e: env, i: @ast::item) {\n }\n \n // A diagnostic function for dumping crate metadata to an output stream\n-fn list_file_metadata(path: str, out: io::writer) {\n-    alt get_metadata_section(path) {\n+fn list_file_metadata(sess: session::session, path: str, out: io::writer) {\n+    alt get_metadata_section(sess, path) {\n       option::some(bytes) { decoder::list_crate_metadata(bytes, out); }\n       option::none. {\n         out.write_str(\"Could not find metadata in \" + path + \".\\n\");\n@@ -126,13 +126,14 @@ fn find_library_crate(sess: session::session, ident: ast::ident,\n     }\n     let nn = default_native_lib_naming(sess, sess.get_opts().static);\n     let x =\n-        find_library_crate_aux(nn, metas, sess.filesearch());\n+        find_library_crate_aux(sess, nn, metas, sess.filesearch());\n     if x != none || sess.get_opts().static { ret x; }\n     let nn2 = default_native_lib_naming(sess, true);\n-    ret find_library_crate_aux(nn2, metas, sess.filesearch());\n+    ret find_library_crate_aux(sess, nn2, metas, sess.filesearch());\n }\n \n-fn find_library_crate_aux(nn: {prefix: str, suffix: str},\n+fn find_library_crate_aux(sess: session::session,\n+                          nn: {prefix: str, suffix: str},\n                           metas: [@ast::meta_item],\n                           filesearch: filesearch::filesearch) ->\n    option::t<{ident: str, data: @[u8]}> {\n@@ -148,7 +149,7 @@ fn find_library_crate_aux(nn: {prefix: str, suffix: str},\n             option::none\n         } else {\n             log #fmt(\"%s is a candidate\", path);\n-            alt get_metadata_section(path) {\n+            alt get_metadata_section(sess, path) {\n               option::some(cvec) {\n                 if !metadata_matches(cvec, metas) {\n                     log #fmt[\"skipping %s, metadata doesn't match\", path];\n@@ -167,7 +168,8 @@ fn find_library_crate_aux(nn: {prefix: str, suffix: str},\n     });\n }\n \n-fn get_metadata_section(filename: str) -> option::t<@[u8]> unsafe {\n+fn get_metadata_section(sess: session::session,\n+                        filename: str) -> option::t<@[u8]> {\n     let mb = str::as_buf(filename, {|buf|\n         llvm::LLVMRustCreateMemoryBufferWithContentsOfFile(buf)\n                                    });\n@@ -176,12 +178,14 @@ fn get_metadata_section(filename: str) -> option::t<@[u8]> unsafe {\n     let si = mk_section_iter(of.llof);\n     while llvm::LLVMIsSectionIteratorAtEnd(of.llof, si.llsi) == False {\n         let name_buf = llvm::LLVMGetSectionName(si.llsi);\n-        let name = str::str_from_cstr(name_buf);\n-        if str::eq(name, x86::get_meta_sect_name()) {\n+        let name = unsafe { str::str_from_cstr(name_buf) };\n+        if str::eq(name, sess.get_targ_cfg().target_strs.meta_sect_name) {\n             let cbuf = llvm::LLVMGetSectionContents(si.llsi);\n             let csz = llvm::LLVMGetSectionSize(si.llsi);\n-            let cvbuf: *u8 = std::unsafe::reinterpret_cast(cbuf);\n-            ret option::some::<@[u8]>(@vec::unsafe::from_buf(cvbuf, csz));\n+            unsafe {\n+                let cvbuf: *u8 = std::unsafe::reinterpret_cast(cbuf);\n+                ret option::some::<@[u8]>(@vec::unsafe::from_buf(cvbuf, csz));\n+            }\n         }\n         llvm::LLVMMoveToNextSection(si.llsi);\n     }"}, {"sha": "2670c9023a92762aa8f0f6c6ad88248862e217e3", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b3bddcd8753d14a3f299c4f28f932570f2276b1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b3bddcd8753d14a3f299c4f28f932570f2276b1/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=5b3bddcd8753d14a3f299c4f28f932570f2276b1", "patch": "@@ -5999,7 +5999,7 @@ fn write_metadata(cx: @crate_ctxt, crate: @ast::crate) {\n                     });\n     llvm::LLVMSetInitializer(llglobal, llconst);\n     let _: () =\n-        str::as_buf(x86::get_meta_sect_name(),\n+        str::as_buf(cx.sess.get_targ_cfg().target_strs.meta_sect_name,\n                     {|buf| llvm::LLVMSetSection(llglobal, buf) });\n     llvm::LLVMSetLinkage(llglobal,\n                          lib::llvm::LLVMInternalLinkage as llvm::Linkage);\n@@ -6031,12 +6031,12 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n             (buf, llvm::LLVMGetGlobalContext())\n     });\n     let _: () =\n-        str::as_buf(x86::get_data_layout(),\n+        str::as_buf(sess.get_targ_cfg().target_strs.data_layout,\n                     {|buf| llvm::LLVMSetDataLayout(llmod, buf) });\n     let _: () =\n-        str::as_buf(x86::get_target_triple(),\n+        str::as_buf(sess.get_targ_cfg().target_strs.target_triple,\n                     {|buf| llvm::LLVMSetTarget(llmod, buf) });\n-    let td = mk_target_data(x86::get_data_layout());\n+    let td = mk_target_data(sess.get_targ_cfg().target_strs.data_layout);\n     let tn = mk_type_names();\n     let intrinsics = declare_intrinsics(llmod);\n     let task_type = T_task();"}, {"sha": "af0358bff9ec61cae69f17cb32dd3686a027fd1d", "filename": "src/comp/rustc.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b3bddcd8753d14a3f299c4f28f932570f2276b1/src%2Fcomp%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5b3bddcd8753d14a3f299c4f28f932570f2276b1/src%2Fcomp%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Frustc.rc?ref=5b3bddcd8753d14a3f299c4f28f932570f2276b1", "patch": "@@ -93,6 +93,7 @@ mod back {\n     mod upcall;\n     mod x86;\n     mod rpath;\n+    mod target_strs;\n }\n \n mod metadata {"}]}