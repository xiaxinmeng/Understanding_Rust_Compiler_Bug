{"sha": "c1c76590cb4cf4afdc0545d8515cfc3a92078506", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYzc2NTkwY2I0Y2Y0YWZkYzA1NDVkODUxNWNmYzNhOTIwNzg1MDY=", "commit": {"author": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-06-08T05:27:00Z"}, "committer": {"name": "P1start", "email": "rewi-github@whanau.org", "date": "2014-06-08T05:56:09Z"}, "message": "update identifier naming warnings to give an example\n\nThis updates identifier warnings such as ``struct `foo_bar` should have a\ncamel case identifier`` to provide an example.\n\nCloses #14738.", "tree": {"sha": "8f335c2143fa59ad49c40a1666dede5a27dd015c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8f335c2143fa59ad49c40a1666dede5a27dd015c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1c76590cb4cf4afdc0545d8515cfc3a92078506", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1c76590cb4cf4afdc0545d8515cfc3a92078506", "html_url": "https://github.com/rust-lang/rust/commit/c1c76590cb4cf4afdc0545d8515cfc3a92078506", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1c76590cb4cf4afdc0545d8515cfc3a92078506/comments", "author": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ftxqxd", "id": 2055302, "node_id": "MDQ6VXNlcjIwNTUzMDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2055302?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ftxqxd", "html_url": "https://github.com/ftxqxd", "followers_url": "https://api.github.com/users/ftxqxd/followers", "following_url": "https://api.github.com/users/ftxqxd/following{/other_user}", "gists_url": "https://api.github.com/users/ftxqxd/gists{/gist_id}", "starred_url": "https://api.github.com/users/ftxqxd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ftxqxd/subscriptions", "organizations_url": "https://api.github.com/users/ftxqxd/orgs", "repos_url": "https://api.github.com/users/ftxqxd/repos", "events_url": "https://api.github.com/users/ftxqxd/events{/privacy}", "received_events_url": "https://api.github.com/users/ftxqxd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01eb0ce1227e3c7c2c32832508ea2930bd2cbb62", "url": "https://api.github.com/repos/rust-lang/rust/commits/01eb0ce1227e3c7c2c32832508ea2930bd2cbb62", "html_url": "https://github.com/rust-lang/rust/commit/01eb0ce1227e3c7c2c32832508ea2930bd2cbb62"}], "stats": {"total": 82, "additions": 58, "deletions": 24}, "files": [{"sha": "c0d856c8d09d17b083c0e847a6c32c8626acb7f2", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 40, "deletions": 6, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c1c76590cb4cf4afdc0545d8515cfc3a92078506/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c76590cb4cf4afdc0545d8515cfc3a92078506/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=c1c76590cb4cf4afdc0545d8515cfc3a92078506", "patch": "@@ -1326,12 +1326,21 @@ fn check_item_non_camel_case_types(cx: &Context, it: &ast::Item) {\n         !ident.char_at(0).is_lowercase() && !ident.contains_char('_')\n     }\n \n+    fn to_camel_case(s: &str) -> String {\n+        s.split('_').flat_map(|word| word.chars().enumerate().map(|(i, c)|\n+            if i == 0 { c.to_uppercase() }\n+            else { c }\n+        )).collect()\n+    }\n+\n     fn check_case(cx: &Context, sort: &str, ident: ast::Ident, span: Span) {\n+        let s = token::get_ident(ident);\n+\n         if !is_camel_case(ident) {\n             cx.span_lint(\n                 NonCamelCaseTypes, span,\n-                format!(\"{} `{}` should have a camel case identifier\",\n-                    sort, token::get_ident(ident)).as_slice());\n+                format!(\"{} `{}` should have a camel case name such as `{}`\",\n+                    sort, s, to_camel_case(s.get())).as_slice());\n         }\n     }\n \n@@ -1369,10 +1378,29 @@ fn check_snake_case(cx: &Context, sort: &str, ident: ast::Ident, span: Span) {\n         })\n     }\n \n+    fn to_snake_case(str: &str) -> String {\n+        let mut words = vec![];\n+        for s in str.split('_') {\n+            let mut buf = String::new();\n+            if s.is_empty() { continue; }\n+            for ch in s.chars() {\n+                if !buf.is_empty() && ch.is_uppercase() {\n+                    words.push(buf);\n+                    buf = String::new();\n+                }\n+                buf.push_char(ch.to_lowercase());\n+            }\n+            words.push(buf);\n+        }\n+        words.connect(\"_\")\n+    }\n+\n+    let s = token::get_ident(ident);\n+\n     if !is_snake_case(ident) {\n         cx.span_lint(NonSnakeCaseFunctions, span,\n-                    format!(\"{} `{}` should have a snake case identifier\",\n-                            sort, token::get_ident(ident)).as_slice());\n+                    format!(\"{} `{}` should have a snake case name such as `{}`\",\n+                            sort, s, to_snake_case(s.get())).as_slice());\n     }\n }\n \n@@ -1386,7 +1414,10 @@ fn check_item_non_uppercase_statics(cx: &Context, it: &ast::Item) {\n             // upper/lowercase)\n             if s.get().chars().any(|c| c.is_lowercase()) {\n                 cx.span_lint(NonUppercaseStatics, it.span,\n-                             \"static constant should have an uppercase identifier\");\n+                            format!(\"static constant `{}` should have an uppercase name \\\n+                                such as `{}`\", s.get(),\n+                                s.get().chars().map(|c| c.to_uppercase())\n+                                    .collect::<String>().as_slice()).as_slice());\n             }\n         }\n         _ => {}\n@@ -1402,7 +1433,10 @@ fn check_pat_non_uppercase_statics(cx: &Context, p: &ast::Pat) {\n             let s = token::get_ident(ident);\n             if s.get().chars().any(|c| c.is_lowercase()) {\n                 cx.span_lint(NonUppercasePatternStatics, path.span,\n-                             \"static constant in pattern should be all caps\");\n+                            format!(\"static constant in pattern `{}` should have an uppercase \\\n+                                name such as `{}`\", s.get(),\n+                                s.get().chars().map(|c| c.to_uppercase())\n+                                    .collect::<String>().as_slice()).as_slice());\n             }\n         }\n         _ => {}"}, {"sha": "537c7d625554fc89383be292a547c7d15c3f976f", "filename": "src/test/compile-fail/lint-non-camel-case-types.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c1c76590cb4cf4afdc0545d8515cfc3a92078506/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c76590cb4cf4afdc0545d8515cfc3a92078506/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs?ref=c1c76590cb4cf4afdc0545d8515cfc3a92078506", "patch": "@@ -11,25 +11,25 @@\n #![forbid(non_camel_case_types)]\n #![allow(dead_code)]\n \n-struct foo { //~ ERROR type `foo` should have a camel case identifier\n+struct foo { //~ ERROR type `foo` should have a camel case name such as `Foo`\n     bar: int,\n }\n \n-enum foo2 { //~ ERROR type `foo2` should have a camel case identifier\n+enum foo2 { //~ ERROR type `foo2` should have a camel case name such as `Foo2`\n     Bar\n }\n \n-struct foo3 { //~ ERROR type `foo3` should have a camel case identifier\n+struct foo3 { //~ ERROR type `foo3` should have a camel case name such as `Foo3`\n     bar: int\n }\n \n-type foo4 = int; //~ ERROR type `foo4` should have a camel case identifier\n+type foo4 = int; //~ ERROR type `foo4` should have a camel case name such as `Foo4`\n \n enum Foo5 {\n-    bar //~ ERROR variant `bar` should have a camel case identifier\n+    bar //~ ERROR variant `bar` should have a camel case name such as `Bar`\n }\n \n-trait foo6 { //~ ERROR trait `foo6` should have a camel case identifier\n+trait foo6 { //~ ERROR trait `foo6` should have a camel case name such as `Foo6`\n }\n \n fn main() { }"}, {"sha": "4253286996c5a9efca64688a18992d3e84618b6b", "filename": "src/test/compile-fail/lint-non-snake-case-functions.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c1c76590cb4cf4afdc0545d8515cfc3a92078506/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c76590cb4cf4afdc0545d8515cfc3a92078506/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-snake-case-functions.rs?ref=c1c76590cb4cf4afdc0545d8515cfc3a92078506", "patch": "@@ -15,25 +15,25 @@ struct Foo;\n \n impl Foo {\n     fn Foo_Method() {}\n-    //~^ ERROR method `Foo_Method` should have a snake case identifier\n+    //~^ ERROR method `Foo_Method` should have a snake case name such as `foo_method`\n \n     // Don't allow two underscores in a row\n     fn foo__method(&self) {}\n-    //~^ ERROR method `foo__method` should have a snake case identifier\n+    //~^ ERROR method `foo__method` should have a snake case name such as `foo_method`\n \n     pub fn xyZ(&mut self) {}\n-    //~^ ERROR method `xyZ` should have a snake case identifier\n+    //~^ ERROR method `xyZ` should have a snake case name such as `xy_z`\n }\n \n trait X {\n     fn ABC();\n-    //~^ ERROR trait method `ABC` should have a snake case identifier\n+    //~^ ERROR trait method `ABC` should have a snake case name such as `a_b_c`\n \n     fn a_b_C(&self) {}\n-    //~^ ERROR trait method `a_b_C` should have a snake case identifier\n+    //~^ ERROR trait method `a_b_C` should have a snake case name such as `a_b_c`\n \n     fn something__else(&mut self);\n-    //~^ ERROR trait method `something__else` should have a snake case identifier\n+    //~^ ERROR trait method `something__else` should have a snake case name such as `something_else`\n }\n \n impl X for Foo {\n@@ -43,9 +43,9 @@ impl X for Foo {\n }\n \n fn Cookie() {}\n-//~^ ERROR function `Cookie` should have a snake case identifier\n+//~^ ERROR function `Cookie` should have a snake case name such as `cookie`\n \n pub fn bi_S_Cuit() {}\n-//~^ ERROR function `bi_S_Cuit` should have a snake case identifier\n+//~^ ERROR function `bi_S_Cuit` should have a snake case name such as `bi_s_cuit`\n \n fn main() { }"}, {"sha": "2d9f2d8fc1c2a422e7219142f893bd3c917be832", "filename": "src/test/compile-fail/lint-non-uppercase-statics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c1c76590cb4cf4afdc0545d8515cfc3a92078506/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c76590cb4cf4afdc0545d8515cfc3a92078506/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs?ref=c1c76590cb4cf4afdc0545d8515cfc3a92078506", "patch": "@@ -11,6 +11,6 @@\n #![forbid(non_uppercase_statics)]\n #![allow(dead_code)]\n \n-static foo: int = 1; //~ ERROR static constant should have an uppercase identifier\n+static foo: int = 1; //~ ERROR static constant `foo` should have an uppercase name such as `FOO`\n \n fn main() { }"}, {"sha": "a409ae60ccaa1e8077b68253907fb4a63f37423a", "filename": "src/test/compile-fail/match-static-const-lc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c1c76590cb4cf4afdc0545d8515cfc3a92078506/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1c76590cb4cf4afdc0545d8515cfc3a92078506/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs?ref=c1c76590cb4cf4afdc0545d8515cfc3a92078506", "patch": "@@ -18,7 +18,7 @@ pub static a : int = 97;\n fn f() {\n     let r = match (0,0) {\n         (0, a) => 0,\n-        //~^ ERROR static constant in pattern should be all caps\n+        //~^ ERROR static constant in pattern `a` should have an uppercase name such as `A`\n         (x, y) => 1 + x + y,\n     };\n     assert!(r == 1);\n@@ -32,7 +32,7 @@ fn g() {\n     use self::m::aha;\n     let r = match (0,0) {\n         (0, aha) => 0,\n-        //~^ ERROR static constant in pattern should be all caps\n+        //~^ ERROR static constant in pattern `aha` should have an uppercase name such as `AHA`\n         (x, y)   => 1 + x + y,\n     };\n     assert!(r == 1);\n@@ -46,7 +46,7 @@ fn h() {\n     use not_okay = self::n::OKAY;\n     let r = match (0,0) {\n         (0, not_okay) => 0,\n-        //~^ ERROR static constant in pattern should be all caps\n+//~^ ERROR static constant in pattern `not_okay` should have an uppercase name such as `NOT_OKAY`\n         (x, y)   => 1 + x + y,\n     };\n     assert!(r == 1);"}]}