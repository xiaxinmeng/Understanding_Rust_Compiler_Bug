{"sha": "d9148311451d38e831dcaa15548fb6ac6f6450b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MTQ4MzExNDUxZDM4ZTgzMWRjYWExNTU0OGZiNmFjNmY2NDUwYjk=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-06-18T17:57:24Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-06-18T22:39:26Z"}, "message": "rustc: add more doc comments to ty::Lift and ty::with_ctxt.", "tree": {"sha": "1b692ec3ae979746ac7685418389c6f88cc46cfc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b692ec3ae979746ac7685418389c6f88cc46cfc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d9148311451d38e831dcaa15548fb6ac6f6450b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d9148311451d38e831dcaa15548fb6ac6f6450b9", "html_url": "https://github.com/rust-lang/rust/commit/d9148311451d38e831dcaa15548fb6ac6f6450b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d9148311451d38e831dcaa15548fb6ac6f6450b9/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b58fdf9252ccd08bf610e13625f49380e769e06", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b58fdf9252ccd08bf610e13625f49380e769e06", "html_url": "https://github.com/rust-lang/rust/commit/0b58fdf9252ccd08bf610e13625f49380e769e06"}], "stats": {"total": 10, "additions": 10, "deletions": 0}, "files": [{"sha": "170b98b88310ff1678c9926e50fdc799c8a7d41c", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d9148311451d38e831dcaa15548fb6ac6f6450b9/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d9148311451d38e831dcaa15548fb6ac6f6450b9/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d9148311451d38e831dcaa15548fb6ac6f6450b9", "patch": "@@ -816,6 +816,12 @@ impl<'tcx> ctxt<'tcx> {\n /// provided ty::ctxt<'tcx>.\n /// This can be done, for example, for Ty<'tcx> or &'tcx Substs<'tcx>\n /// by looking them up in their respective interners.\n+/// None is returned if the value or one of the components is not part\n+/// of the provided context.\n+/// For Ty, None can be returned if either the type interner doesn't\n+/// contain the TypeVariants key or if the address of the interned\n+/// pointer differs. The latter case is possible if a primitive type,\n+/// e.g. `()` or `u8`, was interned in a different context.\n pub trait Lift<'tcx> {\n     type Lifted;\n     fn lift_to_tcx(&self, tcx: &ctxt<'tcx>) -> Option<Self::Lifted>;\n@@ -3016,6 +3022,10 @@ impl<'tcx> CommonTypes<'tcx> {\n     }\n }\n \n+/// Create a type context and call the closure with a `&ty::ctxt` reference\n+/// to the context. The closure enforces that the type context and any interned\n+/// value (types, substs, etc.) can only be used while `ty::tls` has a valid\n+/// reference to the context, to allow formatting values that need it.\n pub fn with_ctxt<'tcx, F, R>(s: Session,\n                              arenas: &'tcx CtxtArenas<'tcx>,\n                              def_map: DefMap,"}]}