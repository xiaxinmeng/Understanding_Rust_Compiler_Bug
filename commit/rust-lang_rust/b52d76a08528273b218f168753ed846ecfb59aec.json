{"sha": "b52d76a08528273b218f168753ed846ecfb59aec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1MmQ3NmEwODUyODI3M2IyMThmMTY4NzUzZWQ4NDZlY2ZiNTlhZWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-27T11:00:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-27T11:00:16Z"}, "message": "Auto merge of #33214 - oli-obk:const_err_var_exprs, r=eddyb\n\nreport `const_err` on all expressions that can fail\n\nalso a drive-by fix for reporting an \"overflow in shift *left*\" when shifting an `i64` *right*\n\nThis increases the warning noise for shifting by more than the bitwidth and for `-T::MIN`. I can silence the bitwidth warnings explicitly and fix the const evaluator to make sure `--$expr` is treated exactly like `$expr` (which is kinda wrong, but mathematically right).\n\nr? @eddyb", "tree": {"sha": "8c036c70947192bfbff3f2147742bac1ba0a8907", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c036c70947192bfbff3f2147742bac1ba0a8907"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b52d76a08528273b218f168753ed846ecfb59aec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b52d76a08528273b218f168753ed846ecfb59aec", "html_url": "https://github.com/rust-lang/rust/commit/b52d76a08528273b218f168753ed846ecfb59aec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b52d76a08528273b218f168753ed846ecfb59aec/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80bff1eea750404e559887d435c03d21f2b25921", "url": "https://api.github.com/repos/rust-lang/rust/commits/80bff1eea750404e559887d435c03d21f2b25921", "html_url": "https://github.com/rust-lang/rust/commit/80bff1eea750404e559887d435c03d21f2b25921"}, {"sha": "5cdcad9d357aa59ce0423b4f68cb9386310aba73", "url": "https://api.github.com/repos/rust-lang/rust/commits/5cdcad9d357aa59ce0423b4f68cb9386310aba73", "html_url": "https://github.com/rust-lang/rust/commit/5cdcad9d357aa59ce0423b4f68cb9386310aba73"}], "stats": {"total": 183, "additions": 116, "deletions": 67}, "files": [{"sha": "c2ac3d838c8d071074982ad2997dcb84e083eeea", "filename": "src/librustc_const_eval/eval.rs", "status": "modified", "additions": 45, "deletions": 38, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/b52d76a08528273b218f168753ed846ecfb59aec/src%2Flibrustc_const_eval%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52d76a08528273b218f168753ed846ecfb59aec/src%2Flibrustc_const_eval%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Feval.rs?ref=b52d76a08528273b218f168753ed846ecfb59aec", "patch": "@@ -562,44 +562,51 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &TyCtxt<'tcx>,\n     let result = match e.node {\n       hir::ExprUnary(hir::UnNeg, ref inner) => {\n         // unary neg literals already got their sign during creation\n-        if let hir::ExprLit(ref lit) = inner.node {\n-            use syntax::ast::*;\n-            use syntax::ast::LitIntType::*;\n-            const I8_OVERFLOW: u64 = ::std::i8::MAX as u64 + 1;\n-            const I16_OVERFLOW: u64 = ::std::i16::MAX as u64 + 1;\n-            const I32_OVERFLOW: u64 = ::std::i32::MAX as u64 + 1;\n-            const I64_OVERFLOW: u64 = ::std::i64::MAX as u64 + 1;\n-            match (&lit.node, ety.map(|t| &t.sty)) {\n-                (&LitKind::Int(I8_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I8))) |\n-                (&LitKind::Int(I8_OVERFLOW, Signed(IntTy::I8)), _) => {\n-                    return Ok(Integral(I8(::std::i8::MIN)))\n-                },\n-                (&LitKind::Int(I16_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I16))) |\n-                (&LitKind::Int(I16_OVERFLOW, Signed(IntTy::I16)), _) => {\n-                    return Ok(Integral(I16(::std::i16::MIN)))\n-                },\n-                (&LitKind::Int(I32_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I32))) |\n-                (&LitKind::Int(I32_OVERFLOW, Signed(IntTy::I32)), _) => {\n-                    return Ok(Integral(I32(::std::i32::MIN)))\n-                },\n-                (&LitKind::Int(I64_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I64))) |\n-                (&LitKind::Int(I64_OVERFLOW, Signed(IntTy::I64)), _) => {\n-                    return Ok(Integral(I64(::std::i64::MIN)))\n-                },\n-                (&LitKind::Int(n, Unsuffixed), Some(&ty::TyInt(IntTy::Is))) |\n-                (&LitKind::Int(n, Signed(IntTy::Is)), _) => {\n-                    match tcx.sess.target.int_type {\n-                        IntTy::I32 => if n == I32_OVERFLOW {\n-                            return Ok(Integral(Isize(Is32(::std::i32::MIN))));\n-                        },\n-                        IntTy::I64 => if n == I64_OVERFLOW {\n-                            return Ok(Integral(Isize(Is64(::std::i64::MIN))));\n-                        },\n-                        _ => bug!(),\n-                    }\n-                },\n-                _ => {},\n-            }\n+        match inner.node {\n+            hir::ExprLit(ref lit) => {\n+                use syntax::ast::*;\n+                use syntax::ast::LitIntType::*;\n+                const I8_OVERFLOW: u64 = ::std::i8::MAX as u64 + 1;\n+                const I16_OVERFLOW: u64 = ::std::i16::MAX as u64 + 1;\n+                const I32_OVERFLOW: u64 = ::std::i32::MAX as u64 + 1;\n+                const I64_OVERFLOW: u64 = ::std::i64::MAX as u64 + 1;\n+                match (&lit.node, ety.map(|t| &t.sty)) {\n+                    (&LitKind::Int(I8_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I8))) |\n+                    (&LitKind::Int(I8_OVERFLOW, Signed(IntTy::I8)), _) => {\n+                        return Ok(Integral(I8(::std::i8::MIN)))\n+                    },\n+                    (&LitKind::Int(I16_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I16))) |\n+                    (&LitKind::Int(I16_OVERFLOW, Signed(IntTy::I16)), _) => {\n+                        return Ok(Integral(I16(::std::i16::MIN)))\n+                    },\n+                    (&LitKind::Int(I32_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I32))) |\n+                    (&LitKind::Int(I32_OVERFLOW, Signed(IntTy::I32)), _) => {\n+                        return Ok(Integral(I32(::std::i32::MIN)))\n+                    },\n+                    (&LitKind::Int(I64_OVERFLOW, Unsuffixed), Some(&ty::TyInt(IntTy::I64))) |\n+                    (&LitKind::Int(I64_OVERFLOW, Signed(IntTy::I64)), _) => {\n+                        return Ok(Integral(I64(::std::i64::MIN)))\n+                    },\n+                    (&LitKind::Int(n, Unsuffixed), Some(&ty::TyInt(IntTy::Is))) |\n+                    (&LitKind::Int(n, Signed(IntTy::Is)), _) => {\n+                        match tcx.sess.target.int_type {\n+                            IntTy::I32 => if n == I32_OVERFLOW {\n+                                return Ok(Integral(Isize(Is32(::std::i32::MIN))));\n+                            },\n+                            IntTy::I64 => if n == I64_OVERFLOW {\n+                                return Ok(Integral(Isize(Is64(::std::i64::MIN))));\n+                            },\n+                            _ => bug!(),\n+                        }\n+                    },\n+                    _ => {},\n+                }\n+            },\n+            hir::ExprUnary(hir::UnNeg, ref inner) => {\n+                // skip `--$expr`\n+                return eval_const_expr_partial(tcx, inner, ty_hint, fn_args);\n+            },\n+            _ => {},\n         }\n         match eval_const_expr_partial(tcx, &inner, ty_hint, fn_args)? {\n           Float(f) => Float(-f),"}, {"sha": "64f03be3b5f07454ba0c50e7ef106554d96bb2a4", "filename": "src/librustc_const_math/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52d76a08528273b218f168753ed846ecfb59aec/src%2Flibrustc_const_math%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52d76a08528273b218f168753ed846ecfb59aec/src%2Flibrustc_const_math%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Fint.rs?ref=b52d76a08528273b218f168753ed846ecfb59aec", "patch": "@@ -503,7 +503,7 @@ impl ::std::ops::Shr<ConstInt> for ConstInt {\n             I8(a) => Ok(I8(overflowing!(a.overflowing_shr(b), Op::Shr))),\n             I16(a) => Ok(I16(overflowing!(a.overflowing_shr(b), Op::Shr))),\n             I32(a) => Ok(I32(overflowing!(a.overflowing_shr(b), Op::Shr))),\n-            I64(a) => Ok(I64(overflowing!(a.overflowing_shr(b), Op::Shl))),\n+            I64(a) => Ok(I64(overflowing!(a.overflowing_shr(b), Op::Shr))),\n             Isize(Is32(a)) => Ok(Isize(Is32(overflowing!(a.overflowing_shr(b), Op::Shr)))),\n             Isize(Is64(a)) => Ok(Isize(Is64(overflowing!(a.overflowing_shr(b), Op::Shr)))),\n             U8(a) => Ok(U8(overflowing!(a.overflowing_shr(b), Op::Shr))),"}, {"sha": "59792d16e8bb6a484c1793de319d5d2965709ac6", "filename": "src/librustc_const_math/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52d76a08528273b218f168753ed846ecfb59aec/src%2Flibrustc_const_math%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52d76a08528273b218f168753ed846ecfb59aec/src%2Flibrustc_const_math%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_math%2Flib.rs?ref=b52d76a08528273b218f168753ed846ecfb59aec", "patch": "@@ -40,4 +40,4 @@ mod err;\n pub use int::*;\n pub use us::*;\n pub use is::*;\n-pub use err::ConstMathErr;\n+pub use err::{ConstMathErr, Op};"}, {"sha": "0c85ffd2e9c3967d6657510798733f868930381b", "filename": "src/librustc_passes/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b52d76a08528273b218f168753ed846ecfb59aec/src%2Flibrustc_passes%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b52d76a08528273b218f168753ed846ecfb59aec/src%2Flibrustc_passes%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2FCargo.toml?ref=b52d76a08528273b218f168753ed846ecfb59aec", "patch": "@@ -12,4 +12,5 @@ crate-type = [\"dylib\"]\n log = { path = \"../liblog\" }\n rustc = { path = \"../librustc\" }\n rustc_const_eval = { path = \"../librustc_const_eval\" }\n+rustc_const_math = { path = \"../librustc_const_math\" }\n syntax = { path = \"../libsyntax\" }"}, {"sha": "1f9c40856fd196875d06f6bc3b3e3afd53a3d185", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b52d76a08528273b218f168753ed846ecfb59aec/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52d76a08528273b218f168753ed846ecfb59aec/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=b52d76a08528273b218f168753ed846ecfb59aec", "patch": "@@ -28,9 +28,11 @@ use rustc::dep_graph::DepNode;\n use rustc::ty::cast::{CastKind};\n use rustc_const_eval::{ConstEvalErr, lookup_const_fn_by_id, compare_lit_exprs};\n use rustc_const_eval::{eval_const_expr_partial, lookup_const_by_id};\n-use rustc_const_eval::ErrKind::{IndexOpFeatureGated, UnimplementedConstVal};\n-use rustc_const_eval::ErrKind::ErroneousReferencedConstant;\n+use rustc_const_eval::ErrKind::{IndexOpFeatureGated, UnimplementedConstVal, MiscCatchAll, Math};\n+use rustc_const_eval::ErrKind::{ErroneousReferencedConstant, MiscBinaryOp, NonConstPath};\n+use rustc_const_eval::ErrKind::UnresolvedPath;\n use rustc_const_eval::EvalHint::ExprTypeChecked;\n+use rustc_const_math::{ConstMathErr, Op};\n use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n use rustc::middle::expr_use_visitor as euv;\n@@ -437,29 +439,6 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n                 }\n                 intravisit::walk_expr(self, ex);\n             }\n-            // Division by zero and overflow checking.\n-            hir::ExprBinary(op, _, _) => {\n-                intravisit::walk_expr(self, ex);\n-                let div_or_rem = op.node == hir::BiDiv || op.node == hir::BiRem;\n-                match node_ty.sty {\n-                    ty::TyUint(_) | ty::TyInt(_) if div_or_rem => {\n-                        if !self.qualif.intersects(ConstQualif::NOT_CONST) {\n-                            match eval_const_expr_partial(\n-                                    self.tcx, ex, ExprTypeChecked, None) {\n-                                Ok(_) => {}\n-                                Err(ConstEvalErr { kind: UnimplementedConstVal(_), ..}) |\n-                                Err(ConstEvalErr { kind: IndexOpFeatureGated, ..}) => {},\n-                                Err(msg) => {\n-                                    self.tcx.sess.add_lint(CONST_ERR, ex.id,\n-                                                           msg.span,\n-                                                           msg.description().into_owned())\n-                                }\n-                            }\n-                        }\n-                    }\n-                    _ => {}\n-                }\n-            }\n             _ => intravisit::walk_expr(self, ex)\n         }\n \n@@ -505,6 +484,27 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n             }\n             None => {}\n         }\n+\n+        if self.mode == Mode::Var && !self.qualif.intersects(ConstQualif::NOT_CONST) {\n+            match eval_const_expr_partial(self.tcx, ex, ExprTypeChecked, None) {\n+                Ok(_) => {}\n+                Err(ConstEvalErr { kind: UnimplementedConstVal(_), ..}) |\n+                Err(ConstEvalErr { kind: MiscCatchAll, ..}) |\n+                Err(ConstEvalErr { kind: MiscBinaryOp, ..}) |\n+                Err(ConstEvalErr { kind: NonConstPath, ..}) |\n+                Err(ConstEvalErr { kind: UnresolvedPath, ..}) |\n+                Err(ConstEvalErr { kind: ErroneousReferencedConstant(_), ..}) |\n+                Err(ConstEvalErr { kind: Math(ConstMathErr::Overflow(Op::Shr)), ..}) |\n+                Err(ConstEvalErr { kind: Math(ConstMathErr::Overflow(Op::Shl)), ..}) |\n+                Err(ConstEvalErr { kind: IndexOpFeatureGated, ..}) => {},\n+                Err(msg) => {\n+                    self.tcx.sess.add_lint(CONST_ERR, ex.id,\n+                                           msg.span,\n+                                           msg.description().into_owned())\n+                }\n+            }\n+        }\n+\n         self.tcx.const_qualif_map.borrow_mut().insert(ex.id, self.qualif);\n         // Don't propagate certain flags.\n         self.qualif = outer | (self.qualif - ConstQualif::HAS_STATIC_BORROWS);"}, {"sha": "b235962eb9a3dcf6fddfd86d06c85253cc1a8bcf", "filename": "src/librustc_passes/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b52d76a08528273b218f168753ed846ecfb59aec/src%2Flibrustc_passes%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52d76a08528273b218f168753ed846ecfb59aec/src%2Flibrustc_passes%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib.rs?ref=b52d76a08528273b218f168753ed846ecfb59aec", "patch": "@@ -30,6 +30,7 @@\n extern crate core;\n #[macro_use] extern crate rustc;\n extern crate rustc_const_eval;\n+extern crate rustc_const_math;\n \n #[macro_use] extern crate log;\n #[macro_use] extern crate syntax;"}, {"sha": "7567791c24066040bef4596f7a2fd7213f077a35", "filename": "src/test/compile-fail/const-err-early.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b52d76a08528273b218f168753ed846ecfb59aec/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52d76a08528273b218f168753ed846ecfb59aec/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err-early.rs?ref=b52d76a08528273b218f168753ed846ecfb59aec", "patch": "@@ -18,5 +18,5 @@ pub const D: u8 = 42u8 - (42u8 + 1); //~ ERROR attempted to subtract with overfl\n pub const E: u8 = [5u8][1]; //~ ERROR index out of bounds\n \n fn main() {\n-    let _e = [6u8][1];\n+    let _e = [6u8][1]; //~ ERROR: array index out of bounds\n }"}, {"sha": "3fb9a3f236cedf4fcef8b3aa89e2018632e84c6b", "filename": "src/test/compile-fail/const-err.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b52d76a08528273b218f168753ed846ecfb59aec/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52d76a08528273b218f168753ed846ecfb59aec/src%2Ftest%2Fcompile-fail%2Fconst-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err.rs?ref=b52d76a08528273b218f168753ed846ecfb59aec", "patch": "@@ -8,8 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// these errors are not actually \"const_err\", they occur in trans/consts\n+// and are unconditional warnings that can't be denied or allowed\n+\n #![feature(rustc_attrs)]\n #![allow(exceeding_bitshifts)]\n+#![allow(const_err)]\n \n fn black_box<T>(_: T) {\n     unimplemented!()\n@@ -21,7 +25,7 @@ fn main() {\n     //~^ WARN attempted to negate with overflow\n     let b = 200u8 + 200u8 + 200u8;\n     //~^ WARN attempted to add with overflow\n-    //~^^ WARN attempted to add with overflow\n+    //~| WARN attempted to add with overflow\n     let c = 200u8 * 4;\n     //~^ WARN attempted to multiply with overflow\n     let d = 42u8 - (42u8 + 1);"}, {"sha": "f0d65f1424c464bed7b4bc06b3bedb511fd66cfd", "filename": "src/test/compile-fail/const-err2.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b52d76a08528273b218f168753ed846ecfb59aec/src%2Ftest%2Fcompile-fail%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52d76a08528273b218f168753ed846ecfb59aec/src%2Ftest%2Fcompile-fail%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-err2.rs?ref=b52d76a08528273b218f168753ed846ecfb59aec", "patch": "@@ -0,0 +1,34 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+#![allow(exceeding_bitshifts)]\n+#![deny(const_err)]\n+\n+fn black_box<T>(_: T) {\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    let a = -std::i8::MIN;\n+    //~^ ERROR attempted to negate with overflow\n+    let b = 200u8 + 200u8 + 200u8;\n+    //~^ ERROR attempted to add with overflow\n+    //~| ERROR attempted to add with overflow\n+    let c = 200u8 * 4;\n+    //~^ ERROR attempted to multiply with overflow\n+    let d = 42u8 - (42u8 + 1);\n+    //~^ ERROR attempted to subtract with overflow\n+    let _e = [5u8][1];\n+    black_box(a);\n+    black_box(b);\n+    black_box(c);\n+    black_box(d);\n+}"}, {"sha": "6d5abc944e78f7dc2ca80ab94e150889c31897a1", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b52d76a08528273b218f168753ed846ecfb59aec/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52d76a08528273b218f168753ed846ecfb59aec/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=b52d76a08528273b218f168753ed846ecfb59aec", "patch": "@@ -53,6 +53,7 @@ fn main() {\n       let n = n << 8; //~ ERROR: bitshift exceeds the type's number of bits\n \n       let n = 1u8 << -8; //~ ERROR: bitshift exceeds the type's number of bits\n+      //~^ WARN: attempted to shift by a negative amount\n \n       let n = 1u8 << (4+3);\n       let n = 1u8 << (4+4); //~ ERROR: bitshift exceeds the type's number of bits"}, {"sha": "9499d732a38355b03802ed58fc79159a800d4772", "filename": "src/test/compile-fail/lint-type-overflow2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b52d76a08528273b218f168753ed846ecfb59aec/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b52d76a08528273b218f168753ed846ecfb59aec/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-overflow2.rs?ref=b52d76a08528273b218f168753ed846ecfb59aec", "patch": "@@ -10,6 +10,7 @@\n //\n \n #![deny(overflowing_literals)]\n+#![deny(const_err)]\n \n #[allow(unused_variables)]\n fn main() {"}]}