{"sha": "e84248921b44c9fdf3d6638c170ffde733074ff8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4NDI0ODkyMWI0NGM5ZmRmM2Q2NjM4YzE3MGZmZGU3MzMwNzRmZjg=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-10T14:57:36Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-01-12T15:37:50Z"}, "message": "Add backticks in appropriate places", "tree": {"sha": "c42f196f4d02b6976502b1fdd694716ef395fff9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c42f196f4d02b6976502b1fdd694716ef395fff9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e84248921b44c9fdf3d6638c170ffde733074ff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e84248921b44c9fdf3d6638c170ffde733074ff8", "html_url": "https://github.com/rust-lang/rust/commit/e84248921b44c9fdf3d6638c170ffde733074ff8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e84248921b44c9fdf3d6638c170ffde733074ff8/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8461fa51198ad5db1d070620fe4186aaec648438", "url": "https://api.github.com/repos/rust-lang/rust/commits/8461fa51198ad5db1d070620fe4186aaec648438", "html_url": "https://github.com/rust-lang/rust/commit/8461fa51198ad5db1d070620fe4186aaec648438"}], "stats": {"total": 143, "additions": 72, "deletions": 71}, "files": [{"sha": "fea0b012f91b3ba24a471b2b5b80e27d86e0d9cb", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -1959,21 +1959,24 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                         // return `Bound::Excluded`.  (And we have tests checking that we\n                         // handle the attribute correctly.)\n                         (Bound::Included(lo), _) if lo > 0 => {\n-                            return Some((format!(\"{} must be non-null\", ty), None));\n+                            return Some((format!(\"`{}` must be non-null\", ty), None));\n                         }\n                         (Bound::Included(_), _) | (_, Bound::Included(_))\n                             if init == InitKind::Uninit =>\n                         {\n                             return Some((\n-                                format!(\"{} must be initialized inside its custom valid range\", ty),\n+                                format!(\n+                                    \"`{}` must be initialized inside its custom valid range\",\n+                                    ty,\n+                                ),\n                                 None,\n                             ));\n                         }\n                         _ => {}\n                     }\n                     // Now, recurse.\n                     match adt_def.variants.len() {\n-                        0 => Some((format!(\"0-variant enums have no valid value\"), None)),\n+                        0 => Some((format!(\"enums with no variants have no valid value\"), None)),\n                         1 => {\n                             // Struct, or enum with exactly one variant.\n                             // Proceed recursively, check all fields."}, {"sha": "3d40b91a7bdc8e664f1d2bfe00f1c6a57a3123c7", "filename": "src/librustc_parse/parser/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Flibrustc_parse%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fattr.rs?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -236,8 +236,8 @@ impl<'a> Parser<'a> {\n             self.struct_span_err(lit.span, msg)\n                 .help(\n                     \"instead of using a suffixed literal \\\n-                                    (1u8, 1.0f32, etc.), use an unsuffixed version \\\n-                                    (1, 1.0, etc.).\",\n+                                    (`1u8`, `1.0f32`, etc.), use an unsuffixed version \\\n+                                    (`1`, `1.0`, etc.)\",\n                 )\n                 .emit()\n         }"}, {"sha": "9c80df367c09cbe5bf1c6982fce5c84a721e3fb9", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -963,7 +963,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                             .session\n                             .struct_span_err(\n                                 attr.span,\n-                                \"`macro_use` is not supported on `extern crate self`\",\n+                                \"`#[macro_use]` is not supported on `extern crate self`\",\n                             )\n                             .emit();\n                     }\n@@ -1054,7 +1054,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n     fn contains_macro_use(&mut self, attrs: &[ast::Attribute]) -> bool {\n         for attr in attrs {\n             if attr.check_name(sym::macro_escape) {\n-                let msg = \"macro_escape is a deprecated synonym for macro_use\";\n+                let msg = \"`#[macro_escape]` is a deprecated synonym for `#[macro_use]`\";\n                 let mut err = self.r.session.struct_span_warn(attr.span, msg);\n                 if let ast::AttrStyle::Inner = attr.style {\n                     err.help(\"consider an outer attribute, `#[macro_use]` mod ...\").emit();\n@@ -1066,7 +1066,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             }\n \n             if !attr.is_word() {\n-                self.r.session.span_err(attr.span, \"arguments to macro_use are not allowed here\");\n+                self.r.session.span_err(attr.span, \"arguments to `macro_use` are not allowed here\");\n             }\n             return true;\n         }"}, {"sha": "d6c0d9c77b4950a2963361724abc64a261c45ad3", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -479,7 +479,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     macro_rules! report_function {\n                         ($span:expr, $name:expr) => {\n                             err.note(&format!(\n-                                \"{} is a function, perhaps you wish to call it\",\n+                                \"`{}` is a function, perhaps you wish to call it\",\n                                 $name\n                             ));\n                         };"}, {"sha": "51e80bb8b118b60d996c4de0e20ae71e1c101636", "filename": "src/test/ui/consts/const-eval/validate_uninhabited_zsts.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fvalidate_uninhabited_zsts.stderr?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -45,7 +45,7 @@ LL | const BAR: [Empty; 3] = [unsafe { std::mem::transmute(()) }; 3];\n    |                                   this code causes undefined behavior when executed\n    |                                   help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: 0-variant enums have no valid value\n+   = note: enums with no variants have no valid value\n \n error: aborting due to previous error\n "}, {"sha": "e2957c422f6d5e94c8ac1ec02115166b43ad1b0e", "filename": "src/test/ui/deprecation/deprecated-macro_escape-inner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape-inner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape-inner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape-inner.rs?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n \n mod foo {\n-    #![macro_escape] //~ WARNING macro_escape is a deprecated synonym for macro_use\n+    #![macro_escape] //~ WARN `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n }\n \n fn main() {"}, {"sha": "65db62ce2635545d487e93c9c4498156ada27387", "filename": "src/test/ui/deprecation/deprecated-macro_escape-inner.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape-inner.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape-inner.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape-inner.stderr?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -1,4 +1,4 @@\n-warning: macro_escape is a deprecated synonym for macro_use\n+warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n   --> $DIR/deprecated-macro_escape-inner.rs:4:5\n    |\n LL |     #![macro_escape]"}, {"sha": "4a89b40625e68a036f4f8b66dec488c4b3b881a9", "filename": "src/test/ui/deprecation/deprecated-macro_escape.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape.rs?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -1,8 +1,6 @@\n // run-pass\n \n-#[macro_escape] //~ WARNING macro_escape is a deprecated synonym for macro_use\n-mod foo {\n-}\n+#[macro_escape] //~ WARNING `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n+mod foo {}\n \n-fn main() {\n-}\n+fn main() {}"}, {"sha": "70094083d4b34eaf25df057ced171f535515eb49", "filename": "src/test/ui/deprecation/deprecated-macro_escape.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdeprecation%2Fdeprecated-macro_escape.stderr?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -1,4 +1,4 @@\n-warning: macro_escape is a deprecated synonym for macro_use\n+warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n   --> $DIR/deprecated-macro_escape.rs:3:1\n    |\n LL | #[macro_escape]"}, {"sha": "8609108831e7cd859d9bc95dc9376362169b6b3a", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -464,10 +464,10 @@ mod reexport_test_harness_main {\n \n // Cannot feed \"2700\" to `#[macro_escape]` without signaling an error.\n #[macro_escape]\n-//~^ WARN macro_escape is a deprecated synonym for macro_use\n+//~^ WARN `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n mod macro_escape {\n     mod inner { #![macro_escape] }\n-    //~^ WARN macro_escape is a deprecated synonym for macro_use\n+    //~^ WARN `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n \n     #[macro_escape] fn f() { }\n     //~^ WARN unused attribute"}, {"sha": "6063aabd565bc44b7626d5415f4187df8f7cd479", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -172,13 +172,13 @@ warning: unknown lint: `x5100`\n LL |     #[deny(x5100)] impl S { }\n    |            ^^^^^\n \n-warning: macro_escape is a deprecated synonym for macro_use\n+warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:466:1\n    |\n LL | #[macro_escape]\n    | ^^^^^^^^^^^^^^^\n \n-warning: macro_escape is a deprecated synonym for macro_use\n+warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:469:17\n    |\n LL |     mod inner { #![macro_escape] }"}, {"sha": "de00bc4cbac0738d5cd42d68a8bfeb49776a8cbf", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.rs?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -6,6 +6,6 @@\n // check-pass\n \n #![macro_escape]\n-//~^ WARN macro_escape is a deprecated synonym for macro_use\n+//~^ WARN `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n \n fn main() {}"}, {"sha": "f2cc2f74e53e420bbb7d57a01219f62936048f16", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_escape.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_escape.stderr?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -1,4 +1,4 @@\n-warning: macro_escape is a deprecated synonym for macro_use\n+warning: `#[macro_escape]` is a deprecated synonym for `#[macro_use]`\n   --> $DIR/issue-43106-gating-of-macro_escape.rs:8:1\n    |\n LL | #![macro_escape]"}, {"sha": "6a7ef793924a4f56670784e2f77b3e70d11c9570", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_use.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.rs?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -4,13 +4,13 @@\n // get that warning; see issue-43106-gating-of-builtin-attrs.rs\n \n #![macro_use(my_macro)]\n-//~^ ERROR arguments to macro_use are not allowed here\n+//~^ ERROR arguments to `macro_use` are not allowed here\n \n #[macro_use(my_macro)]\n-//~^ ERROR arguments to macro_use are not allowed here\n+//~^ ERROR arguments to `macro_use` are not allowed here\n mod macro_escape {\n     mod inner { #![macro_use(my_macro)] }\n-    //~^ ERROR arguments to macro_use are not allowed here\n+    //~^ ERROR arguments to `macro_use` are not allowed here\n \n     #[macro_use = \"2700\"] struct S;\n     //~^ ERROR malformed `macro_use` attribute"}, {"sha": "52a682e4bfa874f8275b53e00d48ec51a365d123", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-macro_use.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-macro_use.stderr?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -1,16 +1,16 @@\n-error: arguments to macro_use are not allowed here\n+error: arguments to `macro_use` are not allowed here\n   --> $DIR/issue-43106-gating-of-macro_use.rs:6:1\n    |\n LL | #![macro_use(my_macro)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: arguments to macro_use are not allowed here\n+error: arguments to `macro_use` are not allowed here\n   --> $DIR/issue-43106-gating-of-macro_use.rs:9:1\n    |\n LL | #[macro_use(my_macro)]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: arguments to macro_use are not allowed here\n+error: arguments to `macro_use` are not allowed here\n   --> $DIR/issue-43106-gating-of-macro_use.rs:12:17\n    |\n LL |     mod inner { #![macro_use(my_macro)] }"}, {"sha": "1c0d3b4b964d6e23408e558d4bc94ef43d63fa74", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.rs?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -1,6 +1,6 @@\n extern crate self; //~ ERROR `extern crate self;` requires renaming\n \n-#[macro_use] //~ ERROR `macro_use` is not supported on `extern crate self`\n+#[macro_use] //~ ERROR `#[macro_use]` is not supported on `extern crate self`\n extern crate self as foo;\n \n fn main() {}"}, {"sha": "8f369f1b03831341284e28cfdd202efdb441ff97", "filename": "src/test/ui/imports/extern-crate-self/extern-crate-self-fail.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimports%2Fextern-crate-self%2Fextern-crate-self-fail.stderr?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -4,7 +4,7 @@ error: `extern crate self;` requires renaming\n LL | extern crate self;\n    | ^^^^^^^^^^^^^^^^^^ help: try: `extern crate self as name;`\n \n-error: `macro_use` is not supported on `extern crate self`\n+error: `#[macro_use]` is not supported on `extern crate self`\n   --> $DIR/extern-crate-self-fail.rs:3:1\n    |\n LL | #[macro_use]"}, {"sha": "42d89cd01a48e8ed3ef8edcc9262dbbbd9986c45", "filename": "src/test/ui/issues/issue-29124.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29124.stderr?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -4,15 +4,15 @@ error[E0599]: no method named `x` found for fn item `fn() -> Ret {Obj::func}` in\n LL |     Obj::func.x();\n    |               ^ method not found in `fn() -> Ret {Obj::func}`\n    |\n-   = note: Obj::func is a function, perhaps you wish to call it\n+   = note: `Obj::func` is a function, perhaps you wish to call it\n \n error[E0599]: no method named `x` found for fn item `fn() -> Ret {func}` in the current scope\n   --> $DIR/issue-29124.rs:17:10\n    |\n LL |     func.x();\n    |          ^ method not found in `fn() -> Ret {func}`\n    |\n-   = note: func is a function, perhaps you wish to call it\n+   = note: `func` is a function, perhaps you wish to call it\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ad596db13ccfd65e43152609ce19cd99d92f955a", "filename": "src/test/ui/issues/issue-57362-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-57362-1.stderr?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -4,7 +4,7 @@ error[E0599]: no method named `f` found for fn pointer `fn(&u8)` in the current\n LL |     a.f();\n    |       ^ method not found in `fn(&u8)`\n    |\n-   = note: a is a function, perhaps you wish to call it\n+   = note: `a` is a function, perhaps you wish to call it\n    = help: items from traits can only be used if the trait is implemented and in scope\n    = note: the following trait defines an item `f`, perhaps you need to implement it:\n            candidate #1: `Trait`"}, {"sha": "169e77c8fa05de9992cd730db5b1b90b544c3a18", "filename": "src/test/ui/lint/uninitialized-zeroed.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -108,7 +108,7 @@ LL |         let _val: Void = mem::zeroed();\n    |                          this code causes undefined behavior when executed\n    |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: 0-variant enums have no valid value\n+   = note: enums with no variants have no valid value\n \n error: the type `Void` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:47:26\n@@ -119,7 +119,7 @@ LL |         let _val: Void = mem::uninitialized();\n    |                          this code causes undefined behavior when executed\n    |                          help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: 0-variant enums have no valid value\n+   = note: enums with no variants have no valid value\n \n error: the type `&'static i32` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:49:34\n@@ -294,7 +294,7 @@ LL |         let _val: NonNull<i32> = mem::zeroed();\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: std::ptr::NonNull<i32> must be non-null\n+   = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `std::ptr::NonNull<i32>` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:68:34\n@@ -305,7 +305,7 @@ LL |         let _val: NonNull<i32> = mem::uninitialized();\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: std::ptr::NonNull<i32> must be non-null\n+   = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `*const dyn std::marker::Send` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:70:37\n@@ -364,7 +364,7 @@ LL |         let _val: NonBig = mem::uninitialized();\n    |                            this code causes undefined behavior when executed\n    |                            help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: NonBig must be initialized inside its custom valid range\n+   = note: `NonBig` must be initialized inside its custom valid range\n \n error: the type `&'static i32` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:84:34\n@@ -397,7 +397,7 @@ LL |         let _val: NonZeroU32 = mem::transmute(0);\n    |                                this code causes undefined behavior when executed\n    |                                help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: std::num::NonZeroU32 must be non-null\n+   = note: `std::num::NonZeroU32` must be non-null\n \n error: the type `std::ptr::NonNull<i32>` does not permit zero-initialization\n   --> $DIR/uninitialized-zeroed.rs:89:34\n@@ -408,7 +408,7 @@ LL |         let _val: NonNull<i32> = MaybeUninit::zeroed().assume_init();\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: std::ptr::NonNull<i32> must be non-null\n+   = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `std::ptr::NonNull<i32>` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:90:34\n@@ -419,7 +419,7 @@ LL |         let _val: NonNull<i32> = MaybeUninit::uninit().assume_init();\n    |                                  this code causes undefined behavior when executed\n    |                                  help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\n    |\n-   = note: std::ptr::NonNull<i32> must be non-null\n+   = note: `std::ptr::NonNull<i32>` must be non-null\n \n error: the type `bool` does not permit being left uninitialized\n   --> $DIR/uninitialized-zeroed.rs:91:26"}, {"sha": "6f6ad4508be017521ea21b37b77e0fe9ecccd75d", "filename": "src/test/ui/malformed/malformed-interpolated.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmalformed%2Fmalformed-interpolated.stderr?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -4,7 +4,7 @@ error: suffixed literals are not allowed in attributes\n LL | check!(0u8);\n    |        ^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: unexpected token: `-0`\n   --> $DIR/malformed-interpolated.rs:5:25"}, {"sha": "121b492e2543783edc5dc8a11ec9141ee85f145a", "filename": "src/test/ui/module-macro_use-arguments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fmodule-macro_use-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fmodule-macro_use-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodule-macro_use-arguments.rs?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -1,4 +1,4 @@\n-#[macro_use(foo, bar)] //~ ERROR arguments to macro_use are not allowed here\n+#[macro_use(foo, bar)] //~ ERROR arguments to `macro_use` are not allowed here\n mod foo {\n }\n "}, {"sha": "af799cb6ddf3ec6b1d3675b7b67a71df4555e067", "filename": "src/test/ui/module-macro_use-arguments.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fmodule-macro_use-arguments.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fmodule-macro_use-arguments.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmodule-macro_use-arguments.stderr?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -1,4 +1,4 @@\n-error: arguments to macro_use are not allowed here\n+error: arguments to `macro_use` are not allowed here\n   --> $DIR/module-macro_use-arguments.rs:1:1\n    |\n LL | #[macro_use(foo, bar)]"}, {"sha": "84fe91d662a8ba2f96854ee4d27d481f7c373476", "filename": "src/test/ui/suffixed-literal-meta.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuffixed-literal-meta.stderr?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -4,191 +4,191 @@ error: suffixed literals are not allowed in attributes\n LL | #[rustc_dummy = 1usize]\n    |                 ^^^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:5:17\n    |\n LL | #[rustc_dummy = 1u8]\n    |                 ^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:7:17\n    |\n LL | #[rustc_dummy = 1u16]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:9:17\n    |\n LL | #[rustc_dummy = 1u32]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:11:17\n    |\n LL | #[rustc_dummy = 1u64]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:13:17\n    |\n LL | #[rustc_dummy = 1isize]\n    |                 ^^^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:15:17\n    |\n LL | #[rustc_dummy = 1i8]\n    |                 ^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:17:17\n    |\n LL | #[rustc_dummy = 1i16]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:19:17\n    |\n LL | #[rustc_dummy = 1i32]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:21:17\n    |\n LL | #[rustc_dummy = 1i64]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:23:17\n    |\n LL | #[rustc_dummy = 1.0f32]\n    |                 ^^^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:25:17\n    |\n LL | #[rustc_dummy = 1.0f64]\n    |                 ^^^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:3:17\n    |\n LL | #[rustc_dummy = 1usize]\n    |                 ^^^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:5:17\n    |\n LL | #[rustc_dummy = 1u8]\n    |                 ^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:7:17\n    |\n LL | #[rustc_dummy = 1u16]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:9:17\n    |\n LL | #[rustc_dummy = 1u32]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:11:17\n    |\n LL | #[rustc_dummy = 1u64]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:13:17\n    |\n LL | #[rustc_dummy = 1isize]\n    |                 ^^^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:15:17\n    |\n LL | #[rustc_dummy = 1i8]\n    |                 ^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:17:17\n    |\n LL | #[rustc_dummy = 1i16]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:19:17\n    |\n LL | #[rustc_dummy = 1i32]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:21:17\n    |\n LL | #[rustc_dummy = 1i64]\n    |                 ^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:23:17\n    |\n LL | #[rustc_dummy = 1.0f32]\n    |                 ^^^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: suffixed literals are not allowed in attributes\n   --> $DIR/suffixed-literal-meta.rs:25:17\n    |\n LL | #[rustc_dummy = 1.0f64]\n    |                 ^^^^^^\n    |\n-   = help: instead of using a suffixed literal (1u8, 1.0f32, etc.), use an unsuffixed version (1, 1.0, etc.).\n+   = help: instead of using a suffixed literal (`1u8`, `1.0f32`, etc.), use an unsuffixed version (`1`, `1.0`, etc.)\n \n error: aborting due to 24 previous errors\n "}, {"sha": "0b6d94e71f0c7ba5a296ce7c4ad1623b607c4a2f", "filename": "src/test/ui/unboxed-closures/unboxed-closures-static-call-wrong-trait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e84248921b44c9fdf3d6638c170ffde733074ff8/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closures-static-call-wrong-trait.stderr?ref=e84248921b44c9fdf3d6638c170ffde733074ff8", "patch": "@@ -4,7 +4,7 @@ error[E0599]: no method named `call` found for closure `[closure@$DIR/unboxed-cl\n LL |     mut_.call((0, ));\n    |          ^^^^ method not found in `[closure@$DIR/unboxed-closures-static-call-wrong-trait.rs:6:26: 6:31]`\n    |\n-   = note: mut_ is a function, perhaps you wish to call it\n+   = note: `mut_` is a function, perhaps you wish to call it\n \n error: aborting due to previous error\n "}]}