{"sha": "c6537c3280ba1c5df27c1ced9d4944a2acb02b6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NTM3YzMyODBiYTFjNWRmMjdjMWNlZDlkNDk0NGEyYWNiMDJiNmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-31T17:50:16Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-05-31T17:50:16Z"}, "message": "add sync requests", "tree": {"sha": "18ad74c5e59ddda7413a94c4acee97e79df9e2a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18ad74c5e59ddda7413a94c4acee97e79df9e2a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6537c3280ba1c5df27c1ced9d4944a2acb02b6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6537c3280ba1c5df27c1ced9d4944a2acb02b6c", "html_url": "https://github.com/rust-lang/rust/commit/c6537c3280ba1c5df27c1ced9d4944a2acb02b6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6537c3280ba1c5df27c1ced9d4944a2acb02b6c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9697d8afadd96a8b18684e4967346f01a4343819", "url": "https://api.github.com/repos/rust-lang/rust/commits/9697d8afadd96a8b18684e4967346f01a4343819", "html_url": "https://github.com/rust-lang/rust/commit/9697d8afadd96a8b18684e4967346f01a4343819"}], "stats": {"total": 99, "additions": 56, "deletions": 43}, "files": [{"sha": "8a7c53d2c6cad47e3955e8c9e3259d3a0088e2b8", "filename": "crates/ra_lsp_server/src/main_loop.rs", "status": "modified", "additions": 56, "deletions": 39, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/c6537c3280ba1c5df27c1ced9d4944a2acb02b6c/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6537c3280ba1c5df27c1ced9d4944a2acb02b6c/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop.rs?ref=c6537c3280ba1c5df27c1ced9d4944a2acb02b6c", "patch": "@@ -2,7 +2,7 @@ mod handlers;\n mod subscriptions;\n pub(crate) mod pending_requests;\n \n-use std::{fmt, path::PathBuf, sync::Arc, time::Instant, any::TypeId};\n+use std::{fmt, path::PathBuf, sync::Arc, time::Instant};\n \n use crossbeam_channel::{select, unbounded, Receiver, RecvError, Sender};\n use failure::{bail, format_err};\n@@ -219,22 +219,15 @@ fn main_loop_inner(\n                         Some(req) => req,\n                         None => return Ok(()),\n                     };\n-                    match req.cast::<req::CollectGarbage>() {\n-                        Ok((id, ())) => {\n-                            state.collect_garbage();\n-                            let resp = RawResponse::ok::<req::CollectGarbage>(id, &());\n-                            msg_sender.send(resp.into()).unwrap()\n-                        }\n-                        Err(req) => on_request(\n-                            state,\n-                            pending_requests,\n-                            pool,\n-                            &task_sender,\n-                            msg_sender,\n-                            loop_start,\n-                            req,\n-                        )?,\n-                    }\n+                    on_request(\n+                        state,\n+                        pending_requests,\n+                        pool,\n+                        &task_sender,\n+                        msg_sender,\n+                        loop_start,\n+                        req,\n+                    )?\n                 }\n                 RawMessage::Notification(not) => {\n                     on_notification(msg_sender, state, pending_requests, subs, not)?;\n@@ -322,6 +315,7 @@ fn on_request(\n         request_received,\n     };\n     pool_dispatcher\n+        .on_sync::<req::CollectGarbage>(|state, ()| Ok(state.collect_garbage()))?\n         .on::<req::AnalyzerStatus>(handlers::handle_analyzer_status)?\n         .on::<req::SyntaxTree>(handlers::handle_syntax_tree)?\n         .on::<req::ExtendSelection>(handlers::handle_extend_selection)?\n@@ -434,37 +428,39 @@ struct PoolDispatcher<'a> {\n }\n \n impl<'a> PoolDispatcher<'a> {\n-    fn on<R>(&mut self, f: fn(ServerWorld, R::Params) -> Result<R::Result>) -> Result<&mut Self>\n+    fn on_sync<R>(\n+        &mut self,\n+        f: fn(&mut ServerWorldState, R::Params) -> Result<R::Result>,\n+    ) -> Result<&mut Self>\n     where\n         R: req::Request + 'static,\n         R::Params: DeserializeOwned + Send + 'static,\n         R::Result: Serialize + 'static,\n     {\n-        let req = match self.req.take() {\n-            None => return Ok(self),\n-            Some(req) => req,\n-        };\n-        let (id, params) = match req.cast::<R>() {\n-            Ok(it) => it,\n-            Err(req) => {\n-                self.req = Some(req);\n+        let (id, params) = match self.parse::<R>() {\n+            Some(it) => it,\n+            None => {\n                 return Ok(self);\n             }\n         };\n-        self.pending_requests.start(PendingRequest {\n-            id,\n-            method: R::METHOD.to_string(),\n-            received: self.request_received,\n-        });\n+        let result = f(self.world, params);\n+        let task = result_to_task::<R>(id, result);\n+        on_task(task, self.msg_sender, self.pending_requests, self.world);\n+        Ok(self)\n+    }\n \n-        // Real time requests block user typing, so we should react quickly to them.\n-        // Currently this means that we try to cancel background jobs if we don't have\n-        // a spare thread.\n-        let is_real_time = TypeId::of::<R>() == TypeId::of::<req::JoinLines>()\n-            || TypeId::of::<R>() == TypeId::of::<req::OnEnter>();\n-        if self.pool.queued_count() > 0 && is_real_time {\n-            self.world.cancel_requests();\n-        }\n+    fn on<R>(&mut self, f: fn(ServerWorld, R::Params) -> Result<R::Result>) -> Result<&mut Self>\n+    where\n+        R: req::Request + 'static,\n+        R::Params: DeserializeOwned + Send + 'static,\n+        R::Result: Serialize + 'static,\n+    {\n+        let (id, params) = match self.parse::<R>() {\n+            Some(it) => it,\n+            None => {\n+                return Ok(self);\n+            }\n+        };\n \n         self.pool.execute({\n             let world = self.world.snapshot();\n@@ -479,6 +475,27 @@ impl<'a> PoolDispatcher<'a> {\n         Ok(self)\n     }\n \n+    fn parse<R>(&mut self) -> Option<(u64, R::Params)>\n+    where\n+        R: req::Request + 'static,\n+        R::Params: DeserializeOwned + Send + 'static,\n+    {\n+        let req = self.req.take()?;\n+        let (id, params) = match req.cast::<R>() {\n+            Ok(it) => it,\n+            Err(req) => {\n+                self.req = Some(req);\n+                return None;\n+            }\n+        };\n+        self.pending_requests.start(PendingRequest {\n+            id,\n+            method: R::METHOD.to_string(),\n+            received: self.request_received,\n+        });\n+        Some((id, params))\n+    }\n+\n     fn finish(&mut self) {\n         match self.req.take() {\n             None => (),"}, {"sha": "6076a6cd6b268f18d4fca2920dbc913ac4b0a770", "filename": "crates/ra_lsp_server/src/server_world.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6537c3280ba1c5df27c1ced9d4944a2acb02b6c/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6537c3280ba1c5df27c1ced9d4944a2acb02b6c/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fserver_world.rs?ref=c6537c3280ba1c5df27c1ced9d4944a2acb02b6c", "patch": "@@ -136,10 +136,6 @@ impl ServerWorldState {\n         self.analysis_host.apply_change(change);\n     }\n \n-    pub fn cancel_requests(&mut self) {\n-        self.analysis_host.apply_change(AnalysisChange::new());\n-    }\n-\n     pub fn snapshot(&self) -> ServerWorld {\n         ServerWorld {\n             workspaces: Arc::clone(&self.workspaces),"}]}