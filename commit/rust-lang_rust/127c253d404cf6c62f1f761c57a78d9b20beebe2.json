{"sha": "127c253d404cf6c62f1f761c57a78d9b20beebe2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyN2MyNTNkNDA0Y2Y2YzYyZjFmNzYxYzU3YTc4ZDliMjBiZWViZTI=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-16T09:57:53Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-01-29T22:57:33Z"}, "message": "save-analysis: don't include the crate name in fully qualified paths", "tree": {"sha": "d8d295a682f5dbd9c00e65647230f8a024857faa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8d295a682f5dbd9c00e65647230f8a024857faa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/127c253d404cf6c62f1f761c57a78d9b20beebe2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/127c253d404cf6c62f1f761c57a78d9b20beebe2", "html_url": "https://github.com/rust-lang/rust/commit/127c253d404cf6c62f1f761c57a78d9b20beebe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/127c253d404cf6c62f1f761c57a78d9b20beebe2/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "265a23320dbeaeca45b889cfea684d71dec1b8e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/265a23320dbeaeca45b889cfea684d71dec1b8e6", "html_url": "https://github.com/rust-lang/rust/commit/265a23320dbeaeca45b889cfea684d71dec1b8e6"}], "stats": {"total": 21, "additions": 4, "deletions": 17}, "files": [{"sha": "8e6e5590bbb35e01cd974bb66de4a5ae51846e91", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/127c253d404cf6c62f1f761c57a78d9b20beebe2/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127c253d404cf6c62f1f761c57a78d9b20beebe2/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=127c253d404cf6c62f1f761c57a78d9b20beebe2", "patch": "@@ -44,7 +44,7 @@ use syntax::codemap::*;\n use syntax::parse::token::{self, get_ident, keywords};\n use syntax::owned_slice::OwnedSlice;\n use syntax::visit::{self, Visitor};\n-use syntax::print::pprust::{path_to_string,ty_to_string};\n+use syntax::print::pprust::{path_to_string, ty_to_string};\n use syntax::ptr::P;\n \n use self::span_utils::SpanUtils;\n@@ -123,7 +123,6 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n \n         let mut result: Vec<(Span, String)> = vec!();\n \n-\n         let mut segs = vec!();\n         for (seg, span) in path.segments.iter().zip(spans.iter()) {\n             segs.push(seg.clone());\n@@ -1568,8 +1567,7 @@ pub fn process_crate(sess: &Session,\n                         SpanUtils {\n                             sess: sess,\n                             err_count: Cell::new(0)\n-                        },\n-                        cratename.clone()),\n+                        }),\n         span: SpanUtils {\n             sess: sess,\n             err_count: Cell::new(0)"}, {"sha": "0fb249eb66037814313a8f8ce598a248a19c9eb5", "filename": "src/librustc_trans/save/recorder.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/127c253d404cf6c62f1f761c57a78d9b20beebe2/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/127c253d404cf6c62f1f761c57a78d9b20beebe2/src%2Flibrustc_trans%2Fsave%2Frecorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Frecorder.rs?ref=127c253d404cf6c62f1f761c57a78d9b20beebe2", "patch": "@@ -50,7 +50,6 @@ impl Recorder {\n pub struct FmtStrs<'a> {\n     pub recorder: Box<Recorder>,\n     span: SpanUtils<'a>,\n-    krate: String,\n }\n \n macro_rules! s { ($e:expr) => { format!(\"{}\", $e) }}\n@@ -92,11 +91,10 @@ pub enum Row {\n }\n \n impl<'a> FmtStrs<'a> {\n-    pub fn new(rec: Box<Recorder>, span: SpanUtils<'a>, krate: String) -> FmtStrs<'a> {\n+    pub fn new(rec: Box<Recorder>, span: SpanUtils<'a>) -> FmtStrs<'a> {\n         FmtStrs {\n             recorder: rec,\n             span: span,\n-            krate: krate,\n         }\n     }\n \n@@ -177,16 +175,7 @@ impl<'a> FmtStrs<'a> {\n         });\n \n         let pairs = fields.iter().zip(values);\n-        let strs = pairs.map(|(f, v)| format!(\",{},\\\"{}\\\"\", f, escape(\n-            if *f == \"qualname\" && v.len() > 0 {\n-                let mut n = self.krate.clone();\n-                n.push_str(\"::\");\n-                n.push_str(v);\n-                n\n-            } else {\n-                String::from_str(v)\n-            }\n-        )));\n+        let strs = pairs.map(|(f, v)| format!(\",{},\\\"{}\\\"\", f, escape(String::from_str(v))));\n         Some(strs.fold(String::new(), |mut s, ss| {\n             s.push_str(&ss[]);\n             s"}]}