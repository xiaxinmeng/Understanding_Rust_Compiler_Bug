{"sha": "0e84b6105376742072e85ae2b85a6a1fd9a9045d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlODRiNjEwNTM3Njc0MjA3MmU4NWFlMmI4NWE2YTFmZDlhOTA0NWQ=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-23T09:00:44Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-09-23T09:00:44Z"}, "message": "use relevant span when unifying `ConstVarValue`s", "tree": {"sha": "3b61515f401485d5d62cdfe06b3d59279e6fa204", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b61515f401485d5d62cdfe06b3d59279e6fa204"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e84b6105376742072e85ae2b85a6a1fd9a9045d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e84b6105376742072e85ae2b85a6a1fd9a9045d", "html_url": "https://github.com/rust-lang/rust/commit/0e84b6105376742072e85ae2b85a6a1fd9a9045d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e84b6105376742072e85ae2b85a6a1fd9a9045d/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3dbfdb0182c7b8bbace4b5d8d4445aac4291351a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a", "html_url": "https://github.com/rust-lang/rust/commit/3dbfdb0182c7b8bbace4b5d8d4445aac4291351a"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "b00adec822e510a0c37e251304d537aa9a5c6801", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e84b6105376742072e85ae2b85a6a1fd9a9045d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e84b6105376742072e85ae2b85a6a1fd9a9045d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=0e84b6105376742072e85ae2b85a6a1fd9a9045d", "patch": "@@ -309,7 +309,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         );\n                     }\n \n-                    Some(origin.span).filter(|s| !s.is_dummy())\n+                    debug_assert!(!origin.span.is_dummy());\n+                    Some(origin.span)\n                 } else {\n                     bug!(\"unexpect const: {:?}\", ct);\n                 };"}, {"sha": "4d884dde393876d5680f00b84269b1b5bc6dfebb", "filename": "compiler/rustc_middle/src/infer/unify_key.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0e84b6105376742072e85ae2b85a6a1fd9a9045d/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e84b6105376742072e85ae2b85a6a1fd9a9045d/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Funify_key.rs?ref=0e84b6105376742072e85ae2b85a6a1fd9a9045d", "patch": "@@ -6,7 +6,7 @@ use rustc_data_structures::unify::{\n };\n use rustc_span::def_id::DefId;\n use rustc_span::symbol::Symbol;\n-use rustc_span::{Span, DUMMY_SP};\n+use rustc_span::Span;\n \n use std::cmp;\n use std::marker::PhantomData;\n@@ -176,17 +176,17 @@ impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n     type Error = (&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>);\n \n     fn unify_values(value1: &Self, value2: &Self) -> Result<Self, Self::Error> {\n-        let val = match (value1.val, value2.val) {\n+        let (val, span) = match (value1.val, value2.val) {\n             (ConstVariableValue::Known { .. }, ConstVariableValue::Known { .. }) => {\n                 bug!(\"equating two const variables, both of which have known values\")\n             }\n \n             // If one side is known, prefer that one.\n             (ConstVariableValue::Known { .. }, ConstVariableValue::Unknown { .. }) => {\n-                Ok(value1.val)\n+                (value1.val, value1.origin.span)\n             }\n             (ConstVariableValue::Unknown { .. }, ConstVariableValue::Known { .. }) => {\n-                Ok(value2.val)\n+                (value2.val, value2.origin.span)\n             }\n \n             // If both sides are *unknown*, it hardly matters, does it?\n@@ -200,14 +200,14 @@ impl<'tcx> UnifyValue for ConstVarValue<'tcx> {\n                 // universe is the minimum of the two universes, because that is\n                 // the one which contains the fewest names in scope.\n                 let universe = cmp::min(universe1, universe2);\n-                Ok(ConstVariableValue::Unknown { universe })\n+                (ConstVariableValue::Unknown { universe }, value1.origin.span)\n             }\n-        }?;\n+        };\n \n         Ok(ConstVarValue {\n             origin: ConstVariableOrigin {\n                 kind: ConstVariableOriginKind::ConstInference,\n-                span: DUMMY_SP,\n+                span: span,\n             },\n             val,\n         })"}]}