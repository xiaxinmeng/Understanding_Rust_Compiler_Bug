{"sha": "e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyODA4MThjYjA2Zjk4YWQyMTAxYzBjYzk1YjJhOWUwNWYyZmE4OWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-07T17:30:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-07T17:30:07Z"}, "message": "Rollup merge of #60579 - varkor:typaram-index, r=eddyb\n\nRename `ParamTy::idx` to `ParamTy::index`\n\nThis makes it consistent with `ParamConst` and `EarlyBoundRegion`.", "tree": {"sha": "7fe3ee68636108354704f2fe479c1f7237a3e0af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fe3ee68636108354704f2fe479c1f7237a3e0af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc0cCgCRBK7hj4Ov3rIwAAdHIIAELBk6XfoFPAK6ArMXo/k2Iy\nOuy9kLQxxe6wbalysx9sj/JdlElSSiOwsn2ug6hFxQQUqPMhjLyWTj0DKupmKr7w\nkih1+oV/nNWTyrIvjMXwcN1Nyf5TEAE2+YtKn+V3TlsVzm9VC7hg9qrtIsVW+QB1\nlIvjlWIEU91nxDVoLSbHcERqzmgJB+jK8v7CuRSXQavnHgf3XzW/pz9sSAPiZzrq\nMvAQ7YEPRPDs6ecRf8RZqoxN1/55yRGH3f9bL/+LywexYBVM4uNNE5j8uBOAgNAV\nl7C+MEhs+F8/e/4T8wR2jhIDR7huftumY+YrKt+IE6+5rqsUwFcNYeOPEsWSr9c=\n=5KOs\n-----END PGP SIGNATURE-----\n", "payload": "tree 7fe3ee68636108354704f2fe479c1f7237a3e0af\nparent 535db2f357eaae4b42be783859df6233ab4beff1\nparent c3694e5ee69247eb1ac10c6d3b187f567303dc8d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1557250207 +0200\ncommitter GitHub <noreply@github.com> 1557250207 +0200\n\nRollup merge of #60579 - varkor:typaram-index, r=eddyb\n\nRename `ParamTy::idx` to `ParamTy::index`\n\nThis makes it consistent with `ParamConst` and `EarlyBoundRegion`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "html_url": "https://github.com/rust-lang/rust/commit/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "535db2f357eaae4b42be783859df6233ab4beff1", "url": "https://api.github.com/repos/rust-lang/rust/commits/535db2f357eaae4b42be783859df6233ab4beff1", "html_url": "https://github.com/rust-lang/rust/commit/535db2f357eaae4b42be783859df6233ab4beff1"}, {"sha": "c3694e5ee69247eb1ac10c6d3b187f567303dc8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3694e5ee69247eb1ac10c6d3b187f567303dc8d", "html_url": "https://github.com/rust-lang/rust/commit/c3694e5ee69247eb1ac10c6d3b187f567303dc8d"}], "stats": {"total": 51, "additions": 24, "deletions": 27}, "files": [{"sha": "d9ccbba69d5c09e61c11c63d7b996f6bb1a76e1d", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "patch": "@@ -1453,7 +1453,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             fn tcx<'b>(&'b self) -> TyCtxt<'b, 'gcx, 'tcx> { self.infcx.tcx }\n \n             fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n-                if let ty::Param(ty::ParamTy {name, ..}) = ty.sty {\n+                if let ty::Param(ty::ParamTy {name, .. }) = ty.sty {\n                     let infcx = self.infcx;\n                     self.var_map.entry(ty).or_insert_with(||\n                         infcx.next_ty_var("}, {"sha": "d68e2be9ea0860ef2439c4d6b5c9ee7873f6ebd7", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "patch": "@@ -3424,7 +3424,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 let mut found = false;\n                 for ty in field.walk() {\n                     if let ty::Param(p) = ty.sty {\n-                        ty_params.insert(p.idx as usize);\n+                        ty_params.insert(p.index as usize);\n                         found = true;\n                     }\n                 }"}, {"sha": "be29ea5701b2f70371fd80936639fc9e78ae5bbe", "filename": "src/librustc/traits/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Futil.rs?ref=e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "patch": "@@ -204,7 +204,7 @@ impl<'cx, 'gcx, 'tcx> Elaborator<'cx, 'gcx, 'tcx> {\n                            },\n \n                            Component::Param(p) => {\n-                               let ty = tcx.mk_ty_param(p.idx, p.name);\n+                               let ty = tcx.mk_ty_param(p.index, p.name);\n                                Some(ty::Predicate::TypeOutlives(\n                                    ty::Binder::dummy(ty::OutlivesPredicate(ty, r_min))))\n                            },"}, {"sha": "15524ca6e930ce322cd74cd3ad9050688e7bea76", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "patch": "@@ -2715,10 +2715,8 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn mk_ty_param(self,\n-                       index: u32,\n-                       name: InternedString) -> Ty<'tcx> {\n-        self.mk_ty(Param(ParamTy { idx: index, name: name }))\n+    pub fn mk_ty_param(self, index: u32, name: InternedString) -> Ty<'tcx> {\n+        self.mk_ty(Param(ParamTy { index, name: name }))\n     }\n \n     #[inline]"}, {"sha": "7b749957c3ff5e8f4ad728bcda0addc6f3a5cc85", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "patch": "@@ -979,7 +979,7 @@ impl<'a, 'gcx, 'tcx> Generics {\n                       param: &ParamTy,\n                       tcx: TyCtxt<'a, 'gcx, 'tcx>)\n                       -> &'tcx GenericParamDef {\n-        if let Some(index) = param.idx.checked_sub(self.parent_count as u32) {\n+        if let Some(index) = param.index.checked_sub(self.parent_count as u32) {\n             let param = &self.params[index as usize];\n             match param.kind {\n                 GenericParamDefKind::Type { .. } => param,"}, {"sha": "2049341327495bc822005f99a131df03f1ef1542", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "patch": "@@ -390,7 +390,7 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n         }\n \n         (&ty::Param(ref a_p), &ty::Param(ref b_p))\n-            if a_p.idx == b_p.idx =>\n+            if a_p.index == b_p.index =>\n         {\n             Ok(a)\n         }"}, {"sha": "cf04d6eac3ae0b608db0fd0168be15138edd7a83", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "patch": "@@ -240,7 +240,7 @@ impl fmt::Debug for Ty<'tcx> {\n \n impl fmt::Debug for ty::ParamTy {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"{}/#{}\", self.name, self.idx)\n+        write!(f, \"{}/#{}\", self.name, self.index)\n     }\n }\n "}, {"sha": "760f3d60d0571c3a6c8a375fc203a65269d0c901", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "patch": "@@ -1111,13 +1111,13 @@ pub type CanonicalPolyFnSig<'tcx> = Canonical<'tcx, Binder<FnSig<'tcx>>>;\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord,\n          Hash, RustcEncodable, RustcDecodable, HashStable)]\n pub struct ParamTy {\n-    pub idx: u32,\n+    pub index: u32,\n     pub name: InternedString,\n }\n \n impl<'a, 'gcx, 'tcx> ParamTy {\n     pub fn new(index: u32, name: InternedString) -> ParamTy {\n-        ParamTy { idx: index, name: name }\n+        ParamTy { index, name: name }\n     }\n \n     pub fn for_self() -> ParamTy {\n@@ -1129,14 +1129,14 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n     }\n \n     pub fn to_ty(self, tcx: TyCtxt<'a, 'gcx, 'tcx>) -> Ty<'tcx> {\n-        tcx.mk_ty_param(self.idx, self.name)\n+        tcx.mk_ty_param(self.index, self.name)\n     }\n \n     pub fn is_self(&self) -> bool {\n-        // FIXME(#50125): Ignoring `Self` with `idx != 0` might lead to weird behavior elsewhere,\n+        // FIXME(#50125): Ignoring `Self` with `index != 0` might lead to weird behavior elsewhere,\n         // but this should only be possible when using `-Z continue-parse-after-error` like\n         // `compile-fail/issue-36638.rs`.\n-        self.name == keywords::SelfUpper.name().as_str() && self.idx == 0\n+        self.name == keywords::SelfUpper.name().as_str() && self.index == 0\n     }\n }\n \n@@ -1763,7 +1763,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n \n     pub fn is_param(&self, index: u32) -> bool {\n         match self.sty {\n-            ty::Param(ref data) => data.idx == index,\n+            ty::Param(ref data) => data.index == index,\n             _ => false,\n         }\n     }"}, {"sha": "72dfe581ba73586082b7848f030c4c190158448a", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "patch": "@@ -547,7 +547,7 @@ impl<'a, 'gcx, 'tcx> TypeFolder<'gcx, 'tcx> for SubstFolder<'a, 'gcx, 'tcx> {\n impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n     fn ty_for_param(&self, p: ty::ParamTy, source_ty: Ty<'tcx>) -> Ty<'tcx> {\n         // Look up the type in the substitutions. It really should be in there.\n-        let opt_ty = self.substs.get(p.idx as usize).map(|k| k.unpack());\n+        let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());\n         let ty = match opt_ty {\n             Some(UnpackedKind::Type(ty)) => ty,\n             Some(kind) => {\n@@ -558,7 +558,7 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n                      when substituting (root type={:?}) substs={:?}\",\n                     p,\n                     source_ty,\n-                    p.idx,\n+                    p.index,\n                     kind,\n                     self.root_ty,\n                     self.substs,\n@@ -572,7 +572,7 @@ impl<'a, 'gcx, 'tcx> SubstFolder<'a, 'gcx, 'tcx> {\n                      when substituting (root type={:?}) substs={:?}\",\n                     p,\n                     source_ty,\n-                    p.idx,\n+                    p.index,\n                     self.root_ty,\n                     self.substs,\n                 );"}, {"sha": "251400e65f3839f74eecf1e1234e2fa5421df04f", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "patch": "@@ -757,8 +757,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n         });\n     }\n \n-    fn assemble_inherent_candidates_from_param(&mut self,\n-                                               param_ty: ty::ParamTy) {\n+    fn assemble_inherent_candidates_from_param(&mut self, param_ty: ty::ParamTy) {\n         // FIXME -- Do we want to commit to this behavior for param bounds?\n \n         let bounds = self.param_env"}, {"sha": "64c8ff8ff8630319c8fff4e1baf9ba582fb6ef87", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "patch": "@@ -5793,9 +5793,9 @@ pub fn check_bounds_are_used<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let mut types_used = vec![false; own_counts.types];\n \n     for leaf_ty in ty.walk() {\n-        if let ty::Param(ty::ParamTy { idx, .. }) = leaf_ty.sty {\n-            debug!(\"Found use of ty param num {}\", idx);\n-            types_used[idx as usize - own_counts.lifetimes] = true;\n+        if let ty::Param(ty::ParamTy { index, .. }) = leaf_ty.sty {\n+            debug!(\"Found use of ty param num {}\", index);\n+            types_used[index as usize - own_counts.lifetimes] = true;\n         } else if let ty::Error = leaf_ty.sty {\n             // If there is already another error, do not emit\n             // an error for not using a type Parameter."}, {"sha": "fd7d6fe694ccd747ca08de924ecab3e8a37b928a", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "patch": "@@ -494,7 +494,7 @@ fn check_where_clauses<'a, 'gcx, 'fcx, 'tcx>(\n         impl<'tcx> ty::fold::TypeVisitor<'tcx> for CountParams {\n             fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n                 if let ty::Param(param) = t.sty {\n-                    self.params.insert(param.idx);\n+                    self.params.insert(param.index);\n                 }\n                 t.super_visit_with(self)\n             }"}, {"sha": "49910e39fed200727d43a13f07010b9e0eb85801", "filename": "src/librustc_typeck/constrained_generic_params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fconstrained_generic_params.rs?ref=e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "patch": "@@ -8,7 +8,7 @@ use syntax::source_map::Span;\n pub struct Parameter(pub u32);\n \n impl From<ty::ParamTy> for Parameter {\n-    fn from(param: ty::ParamTy) -> Self { Parameter(param.idx) }\n+    fn from(param: ty::ParamTy) -> Self { Parameter(param.index) }\n }\n \n impl From<ty::EarlyBoundRegion> for Parameter {"}, {"sha": "4f82978f01a5d5f9cbdf4ce388ae3f21c271ea5d", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e280818cb06f98ad2101c0cc95b2a9e05f2fa89f/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=e280818cb06f98ad2101c0cc95b2a9e05f2fa89f", "patch": "@@ -324,7 +324,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             }\n \n             ty::Param(ref data) => {\n-                self.add_constraint(current, data.idx, variance);\n+                self.add_constraint(current, data.index, variance);\n             }\n \n             ty::FnPtr(sig) => {"}]}