{"sha": "186e42d088bb485c156cef93f2d27aa461523fad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NmU0MmQwODhiYjQ4NWMxNTZjZWY5M2YyZDI3YWE0NjE1MjNmYWQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-19T07:51:04Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-10-19T07:54:41Z"}, "message": "move resolve_path to helpers module", "tree": {"sha": "fd44b338c1e841da22a0d45257817876e2132bfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd44b338c1e841da22a0d45257817876e2132bfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/186e42d088bb485c156cef93f2d27aa461523fad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/186e42d088bb485c156cef93f2d27aa461523fad", "html_url": "https://github.com/rust-lang/rust/commit/186e42d088bb485c156cef93f2d27aa461523fad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/186e42d088bb485c156cef93f2d27aa461523fad/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d754e63ae7aa5dff9fec11a56de529d5d14db85", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d754e63ae7aa5dff9fec11a56de529d5d14db85", "html_url": "https://github.com/rust-lang/rust/commit/8d754e63ae7aa5dff9fec11a56de529d5d14db85"}], "stats": {"total": 99, "additions": 54, "deletions": 45}, "files": [{"sha": "ce5b17e7b5775dc2634275c5646999626dac017d", "filename": "src/fn_call.rs", "status": "modified", "additions": 1, "deletions": 39, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/186e42d088bb485c156cef93f2d27aa461523fad/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186e42d088bb485c156cef93f2d27aa461523fad/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=186e42d088bb485c156cef93f2d27aa461523fad", "patch": "@@ -1,11 +1,9 @@\n use rustc::ty;\n use rustc::ty::layout::{Align, LayoutOf, Size};\n-use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n+use rustc::hir::def_id::DefId;\n use rustc::mir;\n use syntax::attr;\n \n-use std::mem;\n-\n use super::*;\n \n pub trait EvalContextExt<'tcx, 'mir> {\n@@ -19,8 +17,6 @@ pub trait EvalContextExt<'tcx, 'mir> {\n         ret: mir::BasicBlock,\n     ) -> EvalResult<'tcx>;\n \n-    fn resolve_path(&self, path: &[&str]) -> EvalResult<'tcx, ty::Instance<'tcx>>;\n-\n     /// Emulate a function that should have MIR but does not.\n     /// This is solely to support execution without full MIR.\n     /// Fail if emulating this function is not supported.\n@@ -638,40 +634,6 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx, 'mir> for EvalContext<'a, '\n         Ok(())\n     }\n \n-    /// Get an instance for a path.\n-    fn resolve_path(&self, path: &[&str]) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n-        self.tcx\n-            .crates()\n-            .iter()\n-            .find(|&&krate| self.tcx.original_crate_name(krate) == path[0])\n-            .and_then(|krate| {\n-                let krate = DefId {\n-                    krate: *krate,\n-                    index: CRATE_DEF_INDEX,\n-                };\n-                let mut items = self.tcx.item_children(krate);\n-                let mut path_it = path.iter().skip(1).peekable();\n-\n-                while let Some(segment) = path_it.next() {\n-                    for item in mem::replace(&mut items, Default::default()).iter() {\n-                        if item.ident.name == *segment {\n-                            if path_it.peek().is_none() {\n-                                return Some(ty::Instance::mono(self.tcx.tcx, item.def.def_id()));\n-                            }\n-\n-                            items = self.tcx.item_children(item.def.def_id());\n-                            break;\n-                        }\n-                    }\n-                }\n-                None\n-            })\n-            .ok_or_else(|| {\n-                let path = path.iter().map(|&s| s.to_owned()).collect();\n-                EvalErrorKind::PathNotFound(path).into()\n-            })\n-    }\n-\n     fn emulate_missing_fn(\n         &mut self,\n         path: String,"}, {"sha": "1c63316f608062f2f8127b10db206a951381fa3a", "filename": "src/helpers.rs", "status": "modified", "additions": 50, "deletions": 4, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/186e42d088bb485c156cef93f2d27aa461523fad/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186e42d088bb485c156cef93f2d27aa461523fad/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=186e42d088bb485c156cef93f2d27aa461523fad", "patch": "@@ -1,13 +1,18 @@\n-use super::{Scalar, ScalarMaybeUndef, EvalResult};\n+use std::mem;\n \n-pub trait FalibleScalarExt {\n+use rustc::ty;\n+use rustc::hir::def_id::{DefId, CRATE_DEF_INDEX};\n+\n+use super::*;\n+\n+pub trait ScalarExt {\n     /// HACK: this function just extracts all bits if `defined != 0`\n     /// Mainly used for args of C-functions and we should totally correctly fetch the size\n     /// of their arguments\n     fn to_bytes(self) -> EvalResult<'static, u128>;\n }\n \n-impl FalibleScalarExt for Scalar {\n+impl ScalarExt for Scalar {\n     fn to_bytes(self) -> EvalResult<'static, u128> {\n         match self {\n             Scalar::Bits { bits, size } => {\n@@ -19,8 +24,49 @@ impl FalibleScalarExt for Scalar {\n     }\n }\n \n-impl FalibleScalarExt for ScalarMaybeUndef {\n+impl ScalarExt for ScalarMaybeUndef {\n     fn to_bytes(self) -> EvalResult<'static, u128> {\n         self.not_undef()?.to_bytes()\n     }\n }\n+\n+pub trait EvalContextExt<'tcx> {\n+    fn resolve_path(&self, path: &[&str]) -> EvalResult<'tcx, ty::Instance<'tcx>>;\n+}\n+\n+\n+impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super::Evaluator<'tcx>> {\n+    /// Get an instance for a path.\n+    fn resolve_path(&self, path: &[&str]) -> EvalResult<'tcx, ty::Instance<'tcx>> {\n+        self.tcx\n+            .crates()\n+            .iter()\n+            .find(|&&krate| self.tcx.original_crate_name(krate) == path[0])\n+            .and_then(|krate| {\n+                let krate = DefId {\n+                    krate: *krate,\n+                    index: CRATE_DEF_INDEX,\n+                };\n+                let mut items = self.tcx.item_children(krate);\n+                let mut path_it = path.iter().skip(1).peekable();\n+\n+                while let Some(segment) = path_it.next() {\n+                    for item in mem::replace(&mut items, Default::default()).iter() {\n+                        if item.ident.name == *segment {\n+                            if path_it.peek().is_none() {\n+                                return Some(ty::Instance::mono(self.tcx.tcx, item.def.def_id()));\n+                            }\n+\n+                            items = self.tcx.item_children(item.def.def_id());\n+                            break;\n+                        }\n+                    }\n+                }\n+                None\n+            })\n+            .ok_or_else(|| {\n+                let path = path.iter().map(|&s| s.to_owned()).collect();\n+                EvalErrorKind::PathNotFound(path).into()\n+            })\n+    }\n+}"}, {"sha": "9e209af98e3af0f7f150a97a532520160d6593bf", "filename": "src/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/186e42d088bb485c156cef93f2d27aa461523fad/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186e42d088bb485c156cef93f2d27aa461523fad/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=186e42d088bb485c156cef93f2d27aa461523fad", "patch": "@@ -7,7 +7,7 @@ use rustc_mir::interpret::{EvalContext, PlaceTy, OpTy};\n \n use super::{\n     Value, Scalar, ScalarMaybeUndef,\n-    FalibleScalarExt, OperatorEvalContextExt\n+    ScalarExt, OperatorEvalContextExt\n };\n \n pub trait EvalContextExt<'tcx> {"}, {"sha": "ec2bc4a69f4e63bb7e7dc2d7c9c5f2450facfda3", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/186e42d088bb485c156cef93f2d27aa461523fad/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/186e42d088bb485c156cef93f2d27aa461523fad/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=186e42d088bb485c156cef93f2d27aa461523fad", "patch": "@@ -43,7 +43,8 @@ use operator::EvalContextExt as OperatorEvalContextExt;\n use intrinsic::EvalContextExt as IntrinsicEvalContextExt;\n use tls::{EvalContextExt as TlsEvalContextExt, TlsData};\n use range_map::RangeMap;\n-use helpers::FalibleScalarExt;\n+#[allow(unused_imports)] // FIXME rustc bug https://github.com/rust-lang/rust/issues/53682\n+use helpers::{ScalarExt, EvalContextExt as HelpersEvalContextExt};\n use mono_hash_map::MonoHashMap;\n \n pub fn create_ecx<'a, 'mir: 'a, 'tcx: 'mir>("}]}