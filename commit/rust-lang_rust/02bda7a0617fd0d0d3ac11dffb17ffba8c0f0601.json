{"sha": "02bda7a0617fd0d0d3ac11dffb17ffba8c0f0601", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYmRhN2EwNjE3ZmQwZDBkM2FjMTFkZmZiMTdmZmJhOGMwZjA2MDE=", "commit": {"author": {"name": "Clar Fon", "email": "them@lightdark.xyz", "date": "2018-12-18T02:39:07Z"}, "committer": {"name": "Clar Fon", "email": "them@lightdark.xyz", "date": "2019-01-22T22:45:11Z"}, "message": "Move trivial constructors to inherent methods", "tree": {"sha": "b629c5c2d3dcc5b1fbf71cdf7b62ac6521831b11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b629c5c2d3dcc5b1fbf71cdf7b62ac6521831b11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02bda7a0617fd0d0d3ac11dffb17ffba8c0f0601", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02bda7a0617fd0d0d3ac11dffb17ffba8c0f0601", "html_url": "https://github.com/rust-lang/rust/commit/02bda7a0617fd0d0d3ac11dffb17ffba8c0f0601", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02bda7a0617fd0d0d3ac11dffb17ffba8c0f0601/comments", "author": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clarfonthey", "id": 15850505, "node_id": "MDQ6VXNlcjE1ODUwNTA1", "avatar_url": "https://avatars.githubusercontent.com/u/15850505?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clarfonthey", "html_url": "https://github.com/clarfonthey", "followers_url": "https://api.github.com/users/clarfonthey/followers", "following_url": "https://api.github.com/users/clarfonthey/following{/other_user}", "gists_url": "https://api.github.com/users/clarfonthey/gists{/gist_id}", "starred_url": "https://api.github.com/users/clarfonthey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clarfonthey/subscriptions", "organizations_url": "https://api.github.com/users/clarfonthey/orgs", "repos_url": "https://api.github.com/users/clarfonthey/repos", "events_url": "https://api.github.com/users/clarfonthey/events{/privacy}", "received_events_url": "https://api.github.com/users/clarfonthey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c28b2c4b171be143d2a5ca7c0c389e9d3d7f26a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c28b2c4b171be143d2a5ca7c0c389e9d3d7f26a", "html_url": "https://github.com/rust-lang/rust/commit/4c28b2c4b171be143d2a5ca7c0c389e9d3d7f26a"}], "stats": {"total": 102, "additions": 76, "deletions": 26}, "files": [{"sha": "f8d6bedeace255c25d61aaf70caab4f7bc887201", "filename": "src/libcore/iter/adapters/mod.rs", "status": "modified", "additions": 66, "deletions": 16, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/02bda7a0617fd0d0d3ac11dffb17ffba8c0f0601/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02bda7a0617fd0d0d3ac11dffb17ffba8c0f0601/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fadapters%2Fmod.rs?ref=02bda7a0617fd0d0d3ac11dffb17ffba8c0f0601", "patch": "@@ -26,7 +26,12 @@ pub(crate) use self::zip::TrustedRandomAccess;\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Rev<T> {\n-    pub(super) iter: T\n+    iter: T\n+}\n+impl<T> Rev<T> {\n+    pub(super) fn new(iter: T) -> Rev<T> {\n+        Rev { iter }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -127,7 +132,12 @@ unsafe impl<I> TrustedLen for Rev<I>\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[derive(Clone, Debug)]\n pub struct Copied<I> {\n-    pub(super) it: I,\n+    it: I,\n+}\n+impl<I> Copied<I> {\n+    pub(super) fn new(it: I) -> Copied<I> {\n+        Copied { it }\n+    }\n }\n \n #[unstable(feature = \"iter_copied\", issue = \"57127\")]\n@@ -227,7 +237,12 @@ unsafe impl<'a, I, T: 'a> TrustedLen for Copied<I>\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[derive(Clone, Debug)]\n pub struct Cloned<I> {\n-    pub(super) it: I,\n+    it: I,\n+}\n+impl<I> Cloned<I> {\n+    pub(super) fn new(it: I) -> Cloned<I> {\n+        Cloned { it }\n+    }\n }\n \n #[stable(feature = \"iter_cloned\", since = \"1.1.0\")]\n@@ -525,8 +540,13 @@ impl<I> ExactSizeIterator for StepBy<I> where I: ExactSizeIterator {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Map<I, F> {\n-    pub(super) iter: I,\n-    pub(super) f: F,\n+    iter: I,\n+    f: F,\n+}\n+impl<I, F> Map<I, F> {\n+    pub(super) fn new(iter: I, f: F) -> Map<I, F> {\n+        Map { iter, f }\n+    }\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n@@ -636,8 +656,13 @@ unsafe impl<B, I, F> TrustedRandomAccess for Map<I, F>\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Filter<I, P> {\n-    pub(super) iter: I,\n-    pub(super) predicate: P,\n+    iter: I,\n+    predicate: P,\n+}\n+impl<I, P> Filter<I, P> {\n+    pub(super) fn new(iter: I, predicate: P) -> Filter<I, P> {\n+        Filter { iter, predicate }\n+    }\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n@@ -768,8 +793,13 @@ impl<I: FusedIterator, P> FusedIterator for Filter<I, P>\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct FilterMap<I, F> {\n-    pub(super) iter: I,\n-    pub(super) f: F,\n+    iter: I,\n+    f: F,\n+}\n+impl<I, F> FilterMap<I, F> {\n+    pub(super) fn new(iter: I, f: F) -> FilterMap<I, F> {\n+        FilterMap { iter, f }\n+    }\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n@@ -1377,8 +1407,13 @@ impl<I, P> FusedIterator for TakeWhile<I, P>\n #[must_use = \"iterators are lazy and do nothing unless consumed\"]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Skip<I> {\n-    pub(super) iter: I,\n-    pub(super) n: usize\n+    iter: I,\n+    n: usize\n+}\n+impl<I> Skip<I> {\n+    pub(super) fn new(iter: I, n: usize) -> Skip<I> {\n+        Skip { iter, n }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1518,6 +1553,11 @@ pub struct Take<I> {\n     pub(super) iter: I,\n     pub(super) n: usize\n }\n+impl<I> Take<I> {\n+    pub(super) fn new(iter: I, n: usize) -> Take<I> {\n+        Take { iter, n }\n+    }\n+}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<I> Iterator for Take<I> where I: Iterator{\n@@ -1603,9 +1643,14 @@ unsafe impl<I: TrustedLen> TrustedLen for Take<I> {}\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Scan<I, St, F> {\n-    pub(super) iter: I,\n-    pub(super) f: F,\n-    pub(super) state: St,\n+    iter: I,\n+    f: F,\n+    state: St,\n+}\n+impl<I, St, F> Scan<I, St, F> {\n+    pub(super) fn new(iter: I, state: St, f: F) -> Scan<I, St, F> {\n+        Scan { iter, state, f }\n+    }\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]\n@@ -1893,8 +1938,13 @@ impl<I> ExactSizeIterator for Fuse<I> where I: ExactSizeIterator {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[derive(Clone)]\n pub struct Inspect<I, F> {\n-    pub(super) iter: I,\n-    pub(super) f: F,\n+    iter: I,\n+    f: F,\n+}\n+impl<I, F> Inspect<I, F> {\n+    pub(super) fn new(iter: I, f: F) -> Inspect<I, F> {\n+        Inspect { iter, f }\n+    }\n }\n \n #[stable(feature = \"core_impl_debug\", since = \"1.9.0\")]"}, {"sha": "9dfa83f473bafbd0a51e129abba75e707cc8685b", "filename": "src/libcore/iter/traits/iterator.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/02bda7a0617fd0d0d3ac11dffb17ffba8c0f0601/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02bda7a0617fd0d0d3ac11dffb17ffba8c0f0601/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Fiterator.rs?ref=02bda7a0617fd0d0d3ac11dffb17ffba8c0f0601", "patch": "@@ -558,7 +558,7 @@ pub trait Iterator {\n     fn map<B, F>(self, f: F) -> Map<Self, F> where\n         Self: Sized, F: FnMut(Self::Item) -> B,\n     {\n-        Map { iter: self, f }\n+        Map::new(self, f)\n     }\n \n     /// Calls a closure on each element of an iterator.\n@@ -669,7 +669,7 @@ pub trait Iterator {\n     fn filter<P>(self, predicate: P) -> Filter<Self, P> where\n         Self: Sized, P: FnMut(&Self::Item) -> bool,\n     {\n-        Filter {iter: self, predicate }\n+        Filter::new(self, predicate)\n     }\n \n     /// Creates an iterator that both filters and maps.\n@@ -726,7 +726,7 @@ pub trait Iterator {\n     fn filter_map<B, F>(self, f: F) -> FilterMap<Self, F> where\n         Self: Sized, F: FnMut(Self::Item) -> Option<B>,\n     {\n-        FilterMap { iter: self, f }\n+        FilterMap::new(self, f)\n     }\n \n     /// Creates an iterator which gives the current iteration count as well as\n@@ -981,7 +981,7 @@ pub trait Iterator {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn skip(self, n: usize) -> Skip<Self> where Self: Sized {\n-        Skip { iter: self, n }\n+        Skip::new(self, n)\n     }\n \n     /// Creates an iterator that yields its first `n` elements.\n@@ -1013,7 +1013,7 @@ pub trait Iterator {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn take(self, n: usize) -> Take<Self> where Self: Sized, {\n-        Take { iter: self, n }\n+        Take::new(self, n)\n     }\n \n     /// An iterator adaptor similar to [`fold`] that holds internal state and\n@@ -1058,7 +1058,7 @@ pub trait Iterator {\n     fn scan<St, B, F>(self, initial_state: St, f: F) -> Scan<Self, St, F>\n         where Self: Sized, F: FnMut(&mut St, Self::Item) -> Option<B>,\n     {\n-        Scan { iter: self, f, state: initial_state }\n+        Scan::new(self, initial_state, f)\n     }\n \n     /// Creates an iterator that works like map, but flattens nested structure.\n@@ -1307,7 +1307,7 @@ pub trait Iterator {\n     fn inspect<F>(self, f: F) -> Inspect<Self, F> where\n         Self: Sized, F: FnMut(&Self::Item),\n     {\n-        Inspect { iter: self, f }\n+        Inspect::new(self, f)\n     }\n \n     /// Borrows an iterator, rather than consuming it.\n@@ -2181,7 +2181,7 @@ pub trait Iterator {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn rev(self) -> Rev<Self> where Self: Sized + DoubleEndedIterator {\n-        Rev{iter: self}\n+        Rev::new(self)\n     }\n \n     /// Converts an iterator of pairs into a pair of containers.\n@@ -2249,7 +2249,7 @@ pub trait Iterator {\n     fn copied<'a, T: 'a>(self) -> Copied<Self>\n         where Self: Sized + Iterator<Item=&'a T>, T: Copy\n     {\n-        Copied { it: self }\n+        Copied::new(self)\n     }\n \n     /// Creates an iterator which [`clone`]s all of its elements.\n@@ -2278,7 +2278,7 @@ pub trait Iterator {\n     fn cloned<'a, T: 'a>(self) -> Cloned<Self>\n         where Self: Sized + Iterator<Item=&'a T>, T: Clone\n     {\n-        Cloned { it: self }\n+        Cloned::new(self)\n     }\n \n     /// Repeats an iterator endlessly."}]}