{"sha": "b1cf95f691cf919b3933d659e3f394f0e7f292cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxY2Y5NWY2OTFjZjkxOWIzOTMzZDY1OWUzZjM5NGYwZTdmMjkyY2Q=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-03T16:56:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-03T19:01:18Z"}, "message": "Generalize call parenthesis insertion", "tree": {"sha": "a58cea3bcb0b060df13802c2a2621550edff0e9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a58cea3bcb0b060df13802c2a2621550edff0e9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1cf95f691cf919b3933d659e3f394f0e7f292cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1cf95f691cf919b3933d659e3f394f0e7f292cd", "html_url": "https://github.com/rust-lang/rust/commit/b1cf95f691cf919b3933d659e3f394f0e7f292cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1cf95f691cf919b3933d659e3f394f0e7f292cd/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adbcedde1812b728726419f24000bf123b22fef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/adbcedde1812b728726419f24000bf123b22fef9", "html_url": "https://github.com/rust-lang/rust/commit/adbcedde1812b728726419f24000bf123b22fef9"}], "stats": {"total": 73, "additions": 46, "deletions": 27}, "files": [{"sha": "3930316b0c0732faa702dc8d81aae18f41885f43", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 46, "deletions": 27, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/b1cf95f691cf919b3933d659e3f394f0e7f292cd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cf95f691cf919b3933d659e3f394f0e7f292cd/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=b1cf95f691cf919b3933d659e3f394f0e7f292cd", "patch": "@@ -7,7 +7,8 @@ use test_utils::tested_by;\n \n use crate::{\n     completion::{\n-        CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n+        completion_item::Builder, CompletionContext, CompletionItem, CompletionItemKind,\n+        CompletionKind, Completions,\n     },\n     display::{const_label, macro_label, type_label, FunctionSignature},\n     RootDatabase,\n@@ -193,7 +194,6 @@ impl Completions {\n         func: hir::Function,\n     ) {\n         let has_self_param = func.has_self_param(ctx.db);\n-        let params = func.params(ctx.db);\n \n         let name = name.unwrap_or_else(|| func.name(ctx.db).to_string());\n         let ast_node = func.source(ctx.db).value;\n@@ -210,32 +210,14 @@ impl Completions {\n                 .set_deprecated(is_deprecated(func, ctx.db))\n                 .detail(function_signature.to_string());\n \n-        // If not an import, add parenthesis automatically.\n-        if ctx.use_item_syntax.is_none() && !ctx.is_call && ctx.config.add_call_parenthesis {\n-            tested_by!(inserts_parens_for_function_calls);\n+        let params = function_signature\n+            .parameter_names\n+            .iter()\n+            .skip(if function_signature.has_self_param { 1 } else { 0 })\n+            .cloned()\n+            .collect();\n \n-            let (snippet, label) = if params.is_empty() || has_self_param && params.len() == 1 {\n-                (format!(\"{}()$0\", name), format!(\"{}()\", name))\n-            } else {\n-                builder = builder.trigger_call_info();\n-                let snippet = if ctx.config.add_call_argument_snippets {\n-                    let to_skip = if has_self_param { 1 } else { 0 };\n-                    let function_params_snippet = function_signature\n-                        .parameter_names\n-                        .iter()\n-                        .skip(to_skip)\n-                        .enumerate()\n-                        .map(|(index, param_name)| format!(\"${{{}:{}}}\", index + 1, param_name))\n-                        .sep_by(\", \");\n-                    format!(\"{}({})$0\", name, function_params_snippet)\n-                } else {\n-                    format!(\"{}($0)\", name)\n-                };\n-\n-                (snippet, format!(\"{}(\u2026)\", name))\n-            };\n-            builder = builder.lookup_by(name).label(label).insert_snippet(snippet);\n-        }\n+        builder = builder.add_call_parens(ctx, name, params);\n \n         self.add(builder)\n     }\n@@ -300,6 +282,43 @@ impl Completions {\n     }\n }\n \n+impl Builder {\n+    fn add_call_parens(\n+        mut self,\n+        ctx: &CompletionContext,\n+        name: String,\n+        params: Vec<String>,\n+    ) -> Builder {\n+        if !ctx.config.add_call_parenthesis {\n+            return self;\n+        }\n+        if ctx.use_item_syntax.is_some() || ctx.is_call {\n+            return self;\n+        }\n+        // If not an import, add parenthesis automatically.\n+        tested_by!(inserts_parens_for_function_calls);\n+\n+        let (snippet, label) = if params.is_empty() {\n+            (format!(\"{}()$0\", name), format!(\"{}()\", name))\n+        } else {\n+            self = self.trigger_call_info();\n+            let snippet = if ctx.config.add_call_argument_snippets {\n+                let function_params_snippet = params\n+                    .iter()\n+                    .enumerate()\n+                    .map(|(index, param_name)| format!(\"${{{}:{}}}\", index + 1, param_name))\n+                    .sep_by(\", \");\n+                format!(\"{}({})$0\", name, function_params_snippet)\n+            } else {\n+                format!(\"{}($0)\", name)\n+            };\n+\n+            (snippet, format!(\"{}(\u2026)\", name))\n+        };\n+        self.lookup_by(name).label(label).insert_snippet(snippet)\n+    }\n+}\n+\n fn is_deprecated(node: impl HasAttrs, db: &RootDatabase) -> bool {\n     node.attrs(db).by_key(\"deprecated\").exists()\n }"}]}