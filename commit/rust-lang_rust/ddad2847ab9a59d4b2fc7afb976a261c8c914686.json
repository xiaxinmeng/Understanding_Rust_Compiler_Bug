{"sha": "ddad2847ab9a59d4b2fc7afb976a261c8c914686", "node_id": "C_kwDOAAsO6NoAKGRkYWQyODQ3YWI5YTU5ZDRiMmZjN2FmYjk3NmEyNjFjOGM5MTQ2ODY", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-24T12:32:39Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-07-26T07:27:22Z"}, "message": "Allow name querying for derive helpers", "tree": {"sha": "0165e2fec4a7254ba9410cd25f56f3a31aaf7bd7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0165e2fec4a7254ba9410cd25f56f3a31aaf7bd7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ddad2847ab9a59d4b2fc7afb976a261c8c914686", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ddad2847ab9a59d4b2fc7afb976a261c8c914686", "html_url": "https://github.com/rust-lang/rust/commit/ddad2847ab9a59d4b2fc7afb976a261c8c914686", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ddad2847ab9a59d4b2fc7afb976a261c8c914686/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa1491ecde22732329069773fed3e23f6b42e14d", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa1491ecde22732329069773fed3e23f6b42e14d", "html_url": "https://github.com/rust-lang/rust/commit/aa1491ecde22732329069773fed3e23f6b42e14d"}], "stats": {"total": 71, "additions": 53, "deletions": 18}, "files": [{"sha": "35c8708955a77757b56635b9c28845e1c3916514", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ddad2847ab9a59d4b2fc7afb976a261c8c914686/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddad2847ab9a59d4b2fc7afb976a261c8c914686/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=ddad2847ab9a59d4b2fc7afb976a261c8c914686", "patch": "@@ -12,7 +12,7 @@ use crate::{\n     db::DefDatabase,\n     intern::Interned,\n     item_tree::{self, AssocItem, FnFlags, ItemTree, ItemTreeId, ModItem, Param, TreeId},\n-    nameres::{attr_resolution::ResolvedAttr, DefMap},\n+    nameres::{attr_resolution::ResolvedAttr, proc_macro::ProcMacroKind, DefMap},\n     type_ref::{TraitRef, TypeBound, TypeRef},\n     visibility::RawVisibility,\n     AssocItemId, AstIdWithPath, ConstId, ConstLoc, FunctionId, FunctionLoc, HasModule, ImplId,\n@@ -348,7 +348,8 @@ impl MacroRulesData {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ProcMacroData {\n     pub name: Name,\n-    // FIXME: Record deriver helper here?\n+    /// Derive helpers, if this is a derive\n+    pub helpers: Option<Box<[Name]>>,\n }\n \n impl ProcMacroData {\n@@ -360,17 +361,23 @@ impl ProcMacroData {\n         let item_tree = loc.id.item_tree(db);\n         let makro = &item_tree[loc.id.value];\n \n-        let name = if let Some(def) = item_tree\n+        let (name, helpers) = if let Some(def) = item_tree\n             .attrs(db, loc.container.krate(), ModItem::from(loc.id.value).into())\n             .parse_proc_macro_decl(&makro.name)\n         {\n-            def.name\n+            (\n+                def.name,\n+                match def.kind {\n+                    ProcMacroKind::CustomDerive { helpers } => Some(helpers),\n+                    ProcMacroKind::FnLike | ProcMacroKind::Attr => None,\n+                },\n+            )\n         } else {\n             // eeeh...\n             stdx::never!(\"proc macro declaration is not a proc macro\");\n-            makro.name.clone()\n+            (makro.name.clone(), None)\n         };\n-        Arc::new(ProcMacroData { name })\n+        Arc::new(ProcMacroData { name, helpers })\n     }\n }\n "}, {"sha": "45f631936d2ab5a0cdaa41a9a86f0ede11274b5c", "filename": "crates/hir-def/src/nameres.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ddad2847ab9a59d4b2fc7afb976a261c8c914686/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddad2847ab9a59d4b2fc7afb976a261c8c914686/crates%2Fhir-def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres.rs?ref=ddad2847ab9a59d4b2fc7afb976a261c8c914686", "patch": "@@ -48,11 +48,11 @@\n //! the result\n \n pub mod attr_resolution;\n-mod collector;\n+pub mod proc_macro;\n pub mod diagnostics;\n+mod collector;\n mod mod_resolution;\n mod path_resolution;\n-mod proc_macro;\n \n #[cfg(test)]\n mod tests;"}, {"sha": "d4925455d7bd2dcf4c7d90df5a0d2d6bfb41e9bc", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ddad2847ab9a59d4b2fc7afb976a261c8c914686/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddad2847ab9a59d4b2fc7afb976a261c8c914686/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=ddad2847ab9a59d4b2fc7afb976a261c8c914686", "patch": "@@ -2255,12 +2255,27 @@ impl Local {\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub struct DeriveHelper {\n     pub(crate) derive: MacroId,\n+    pub(crate) idx: usize,\n }\n \n impl DeriveHelper {\n     pub fn derive(&self) -> Macro {\n         Macro { id: self.derive.into() }\n     }\n+\n+    pub fn name(&self, db: &dyn HirDatabase) -> Name {\n+        match self.derive {\n+            MacroId::Macro2Id(_) => None,\n+            MacroId::MacroRulesId(_) => None,\n+            MacroId::ProcMacroId(proc_macro) => db\n+                .proc_macro_data(proc_macro)\n+                .helpers\n+                .as_ref()\n+                .and_then(|it| it.get(self.idx))\n+                .cloned(),\n+        }\n+        .unwrap_or_else(|| Name::missing())\n+    }\n }\n \n // FIXME: Wrong name? This is could also be a registered attribute"}, {"sha": "1eb51b20c356b602efa8057b9b09a4447a2f9e93", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ddad2847ab9a59d4b2fc7afb976a261c8c914686/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddad2847ab9a59d4b2fc7afb976a261c8c914686/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=ddad2847ab9a59d4b2fc7afb976a261c8c914686", "patch": "@@ -35,6 +35,7 @@ use hir_ty::{\n     method_resolution, Adjust, Adjustment, AutoBorrow, InferenceResult, Interner, Substitution,\n     TyExt, TyKind, TyLoweringContext,\n };\n+use itertools::Itertools;\n use smallvec::SmallVec;\n use syntax::{\n     ast::{self, AstNode},\n@@ -487,10 +488,16 @@ impl SourceAnalyzer {\n                         {\n                             // FIXME: Multiple derives can have the same helper\n                             let name_ref = name_ref.as_name();\n-                            if let Some(&(_, derive, _)) =\n-                                helpers.iter().find(|(name, ..)| *name == name_ref)\n+                            for (macro_id, mut helpers) in\n+                                helpers.iter().group_by(|(_, macro_id, ..)| macro_id).into_iter()\n                             {\n-                                return Some(PathResolution::DeriveHelper(DeriveHelper { derive }));\n+                                if let Some(idx) = helpers.position(|(name, ..)| *name == name_ref)\n+                                {\n+                                    return Some(PathResolution::DeriveHelper(DeriveHelper {\n+                                        derive: *macro_id,\n+                                        idx,\n+                                    }));\n+                                }\n                             }\n                         }\n                     }"}, {"sha": "aeaca00ec65cc3aeb053cf2731ddfd26e877fccf", "filename": "crates/ide-db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ddad2847ab9a59d4b2fc7afb976a261c8c914686/crates%2Fide-db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddad2847ab9a59d4b2fc7afb976a261c8c914686/crates%2Fide-db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fdefs.rs?ref=ddad2847ab9a59d4b2fc7afb976a261c8c914686", "patch": "@@ -121,7 +121,7 @@ impl Definition {\n             Definition::Label(it) => it.name(db),\n             Definition::BuiltinAttr(_) => return None, // FIXME\n             Definition::ToolModule(_) => return None,  // FIXME\n-            Definition::DeriveHelper(_) => return None, // FIXME\n+            Definition::DeriveHelper(it) => it.name(db),\n         };\n         Some(name)\n     }"}, {"sha": "bd038cdaa068261e3738849a930ff0ec59c74e91", "filename": "crates/ide-db/src/search.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ddad2847ab9a59d4b2fc7afb976a261c8c914686/crates%2Fide-db%2Fsrc%2Fsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddad2847ab9a59d4b2fc7afb976a261c8c914686/crates%2Fide-db%2Fsrc%2Fsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-db%2Fsrc%2Fsearch.rs?ref=ddad2847ab9a59d4b2fc7afb976a261c8c914686", "patch": "@@ -278,16 +278,16 @@ impl Definition {\n                     }\n                 }\n                 hir::MacroKind::BuiltIn => SearchScope::crate_graph(db),\n-                // FIXME: We don't actually see derives in derive attributes as these do not\n-                // expand to something that references the derive macro in the output.\n-                // We could get around this by doing pseudo expansions for proc_macro_derive like we\n-                // do for the derive attribute\n                 hir::MacroKind::Derive | hir::MacroKind::Attr | hir::MacroKind::ProcMacro => {\n                     SearchScope::reverse_dependencies(db, module.krate())\n                 }\n             };\n         }\n \n+        if let Definition::DeriveHelper(_) = self {\n+            return SearchScope::reverse_dependencies(db, module.krate());\n+        }\n+\n         let vis = self.visibility(db);\n         if let Some(Visibility::Public) = vis {\n             return SearchScope::reverse_dependencies(db, module.krate());"}, {"sha": "6c50a4e6adc0ef663856331f022dcc63000e0f77", "filename": "crates/ide/src/hover/render.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ddad2847ab9a59d4b2fc7afb976a261c8c914686/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddad2847ab9a59d4b2fc7afb976a261c8c914686/crates%2Fide%2Fsrc%2Fhover%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Frender.rs?ref=ddad2847ab9a59d4b2fc7afb976a261c8c914686", "patch": "@@ -370,8 +370,7 @@ pub(super) fn definition(\n         // FIXME: We should be able to show more info about these\n         Definition::BuiltinAttr(it) => return render_builtin_attr(db, it),\n         Definition::ToolModule(it) => return Some(Markup::fenced_block(&it.name(db))),\n-        // FIXME: it.name(db)\n-        Definition::DeriveHelper(_it) => (\"derive-helper\".to_owned(), None),\n+        Definition::DeriveHelper(it) => (format!(\"derive_helper {}\", it.name(db)), None),\n     };\n \n     let docs = match config.documentation {"}, {"sha": "d013d6f4b19ff95b0ef03e178ed3a194983ca09a", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ddad2847ab9a59d4b2fc7afb976a261c8c914686/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ddad2847ab9a59d4b2fc7afb976a261c8c914686/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=ddad2847ab9a59d4b2fc7afb976a261c8c914686", "patch": "@@ -432,6 +432,13 @@ fn traverse(\n                 // let the editor do its highlighting for these tokens instead\n                 continue;\n             }\n+            if highlight.tag == HlTag::UnresolvedReference\n+                && matches!(attr_or_derive_item, Some(AttrOrDerive::Derive(_)) if inside_attribute)\n+            {\n+                // do not emit unresolved references in derive helpers if the token mapping maps to\n+                // something unresolvable. FIXME: There should be a way to prevent that\n+                continue;\n+            }\n             if inside_attribute {\n                 highlight |= HlMod::Attribute\n             }"}]}