{"sha": "749ee53c6d23ae1467568d6e0280a4f59e4e952b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0OWVlNTNjNmQyM2FlMTQ2NzU2OGQ2ZTAyODBhNGY1OWU0ZTk1MmI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-22T07:36:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-11-26T16:25:27Z"}, "message": "librustc: Make `||` lambdas not infer to `proc`s", "tree": {"sha": "8ff17ad29a91e3b5d625db08d2d7d9e039ed484a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ff17ad29a91e3b5d625db08d2d7d9e039ed484a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/749ee53c6d23ae1467568d6e0280a4f59e4e952b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/749ee53c6d23ae1467568d6e0280a4f59e4e952b", "html_url": "https://github.com/rust-lang/rust/commit/749ee53c6d23ae1467568d6e0280a4f59e4e952b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/749ee53c6d23ae1467568d6e0280a4f59e4e952b/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38efa17bb8b9c1077e7b8cd9d67da08dec3f0bda", "url": "https://api.github.com/repos/rust-lang/rust/commits/38efa17bb8b9c1077e7b8cd9d67da08dec3f0bda", "html_url": "https://github.com/rust-lang/rust/commit/38efa17bb8b9c1077e7b8cd9d67da08dec3f0bda"}], "stats": {"total": 265, "additions": 139, "deletions": 126}, "files": [{"sha": "41cd796325c32b71d375a3f3027524d424553537", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -76,7 +76,7 @@ fn print_message() { println(\"I am running in a different task!\"); }\n spawn(print_message);\n \n // Print something more profound in a different task using a lambda expression\n-spawn( || println(\"I am also running in a different task!\") );\n+spawn(proc() println(\"I am also running in a different task!\") );\n \n // The canonical way to spawn is using `do` notation\n do spawn {\n@@ -278,7 +278,7 @@ fn fib(n: u64) -> u64 {\n     12586269025\n }\n \n-let mut delayed_fib = extra::future::Future::spawn (|| fib(50) );\n+let mut delayed_fib = extra::future::Future::spawn(proc() fib(50));\n make_a_sandwich();\n println!(\"fib(50) = {:?}\", delayed_fib.get())\n ~~~"}, {"sha": "0f39b29c60a9e80d96b45e767a81ef3289b3c84e", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -333,13 +333,15 @@ pub fn make_test_closure(config: &config, testfile: &Path) -> test::TestFn {\n     let config = Cell::new((*config).clone());\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     let testfile = Cell::new(testfile.as_str().unwrap().to_owned());\n-    test::DynTestFn(|| { runtest::run(config.take(), testfile.take()) })\n+    test::DynTestFn(proc() { runtest::run(config.take(), testfile.take()) })\n }\n \n pub fn make_metrics_test_closure(config: &config, testfile: &Path) -> test::TestFn {\n     use std::cell::Cell;\n     let config = Cell::new((*config).clone());\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     let testfile = Cell::new(testfile.as_str().unwrap().to_owned());\n-    test::DynMetricFn(|mm| { runtest::run_metrics(config.take(), testfile.take(), mm) })\n+    test::DynMetricFn(proc(mm) {\n+        runtest::run_metrics(config.take(), testfile.take(), mm)\n+    })\n }"}, {"sha": "5fd720c501801ed1b27ed8f9c0b3f018cf7bb2c9", "filename": "src/libextra/future.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -161,7 +161,7 @@ mod test {\n \n     #[test]\n     fn test_from_fn() {\n-        let mut f = Future::from_fn(|| ~\"brail\");\n+        let mut f = Future::from_fn(proc() ~\"brail\");\n         assert_eq!(f.get(), ~\"brail\");\n     }\n \n@@ -185,14 +185,14 @@ mod test {\n \n     #[test]\n     fn test_spawn() {\n-        let mut f = Future::spawn(|| ~\"bale\");\n+        let mut f = Future::spawn(proc() ~\"bale\");\n         assert_eq!(f.get(), ~\"bale\");\n     }\n \n     #[test]\n     #[should_fail]\n     fn test_futurefail() {\n-        let mut f = Future::spawn(|| fail!());\n+        let mut f = Future::spawn(proc() fail!());\n         let _x: ~str = f.get();\n     }\n "}, {"sha": "bda6935643f04ad514f111d4d437dde64ed559c8", "filename": "src/libextra/task_pool.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibextra%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibextra%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftask_pool.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -57,7 +57,7 @@ impl<T> TaskPool<T> {\n             let (port, chan) = comm::stream::<Msg<T>>();\n             let init_fn = init_fn_factory();\n \n-            let task_body: proc() = || {\n+            let task_body: proc() = proc() {\n                 let local_data = init_fn(i);\n                 loop {\n                     match port.recv() {\n@@ -98,11 +98,11 @@ impl<T> TaskPool<T> {\n #[test]\n fn test_task_pool() {\n     let f: || -> proc(uint) -> uint = || {\n-        let g: proc(uint) -> uint = |i| i;\n+        let g: proc(uint) -> uint = proc(i) i;\n         g\n     };\n     let mut pool = TaskPool::new(4, Some(SingleThreaded), f);\n     8.times(|| {\n-        pool.execute(|i| println!(\"Hello from thread {}!\", *i));\n+        pool.execute(proc(i) println!(\"Hello from thread {}!\", *i));\n     })\n }"}, {"sha": "16e9ea8ece48cdcb31233369e9e3e709fec46b88", "filename": "src/libextra/test.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -912,7 +912,7 @@ pub fn run_test(force_ignore: bool,\n             return;\n         }\n         DynTestFn(f) => run_test_inner(desc, monitor_ch, f),\n-        StaticTestFn(f) => run_test_inner(desc, monitor_ch, || f())\n+        StaticTestFn(f) => run_test_inner(desc, monitor_ch, proc() f())\n     }\n }\n \n@@ -1209,7 +1209,7 @@ mod tests {\n                 ignore: true,\n                 should_fail: false\n             },\n-            testfn: DynTestFn(|| f()),\n+            testfn: DynTestFn(proc() f()),\n         };\n         let (p, ch) = stream();\n         let ch = SharedChan::new(ch);\n@@ -1227,7 +1227,7 @@ mod tests {\n                 ignore: true,\n                 should_fail: false\n             },\n-            testfn: DynTestFn(|| f()),\n+            testfn: DynTestFn(proc() f()),\n         };\n         let (p, ch) = stream();\n         let ch = SharedChan::new(ch);\n@@ -1245,7 +1245,7 @@ mod tests {\n                 ignore: false,\n                 should_fail: true\n             },\n-            testfn: DynTestFn(|| f()),\n+            testfn: DynTestFn(proc() f()),\n         };\n         let (p, ch) = stream();\n         let ch = SharedChan::new(ch);\n@@ -1263,7 +1263,7 @@ mod tests {\n                 ignore: false,\n                 should_fail: true\n             },\n-            testfn: DynTestFn(|| f()),\n+            testfn: DynTestFn(proc() f()),\n         };\n         let (p, ch) = stream();\n         let ch = SharedChan::new(ch);\n@@ -1318,15 +1318,15 @@ mod tests {\n                     ignore: true,\n                     should_fail: false,\n                 },\n-                testfn: DynTestFn(|| {}),\n+                testfn: DynTestFn(proc() {}),\n             },\n             TestDescAndFn {\n                 desc: TestDesc {\n                     name: StaticTestName(\"2\"),\n                     ignore: false,\n                     should_fail: false\n                 },\n-                testfn: DynTestFn(|| {}),\n+                testfn: DynTestFn(proc() {}),\n             },\n         ];\n         let filtered = filter_tests(&opts, tests);"}, {"sha": "dc1aa1f41cbfb4708a2b238fa804ed8aad14a861", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -345,7 +345,7 @@ pub fn monitor(f: proc(@diagnostic::Emitter)) {\n         task_builder.opts.stack_size = Some(STACK_SIZE);\n     }\n \n-    match task_builder.try(|| {\n+    match task_builder.try(proc() {\n         let ch = ch_capture.clone();\n         // The 'diagnostics emitter'. Every error, warning, etc. should\n         // go through this function.\n@@ -403,6 +403,6 @@ pub fn main() {\n \n pub fn main_args(args: &[~str]) -> int {\n     let owned_args = args.to_owned();\n-    monitor(|demitter| run_compiler(owned_args, demitter));\n+    monitor(proc(demitter) run_compiler(owned_args, demitter));\n     0\n }"}, {"sha": "6bd8226258bd68e377e9e91ea620fcca1e92e3f9", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -2905,8 +2905,13 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n         _match::check_match(fcx, expr, discrim, *arms);\n       }\n       ast::ExprFnBlock(ref decl, ref body) => {\n-        check_expr_fn(fcx, expr, None,\n-                      decl, body, Vanilla, expected);\n+        check_expr_fn(fcx,\n+                      expr,\n+                      Some(ast::BorrowedSigil),\n+                      decl,\n+                      body,\n+                      Vanilla,\n+                      expected);\n       }\n       ast::ExprProc(ref decl, ref body) => {\n         check_expr_fn(fcx,"}, {"sha": "2308f314b14a120c23eaa4a2d6beb691ad1493e9", "filename": "src/librustpkg/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibrustpkg%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibrustpkg%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Flib.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -474,7 +474,7 @@ impl CtxMethods for BuildContext {\n                     let psp = package_script_path.clone();\n                     let ws = workspace.clone();\n                     let pid = pkgid.clone();\n-                    prep.exec(|exec| {\n+                    prep.exec(proc(exec) {\n                         let mut pscript = PkgScript::parse(subsysroot.clone(),\n                                                            psp.clone(),\n                                                            &ws,\n@@ -636,7 +636,7 @@ impl CtxMethods for BuildContext {\n             let sub_target_ex = target_exec.clone();\n             let sub_target_lib = target_lib.clone();\n             let sub_build_inputs = build_inputs.to_owned();\n-            prep.exec(|exe_thing| {\n+            prep.exec(proc(exe_thing) {\n                 let mut outputs = ~[];\n                 // Declare all the *inputs* to the declared input too, as inputs\n                 for executable in subex.iter() {"}, {"sha": "b93199e2c61793343910cc44f46effe0d69ea034", "filename": "src/librustpkg/package_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibrustpkg%2Fpackage_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibrustpkg%2Fpackage_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_source.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -412,7 +412,7 @@ impl PkgSrc {\n                 let sub_deps = deps.clone();\n                 let inputs = inputs_to_discover.map(|&(ref k, ref p)|\n                                                     (k.clone(), p.as_str().unwrap().to_owned()));\n-                prep.exec(|exec| {\n+                prep.exec(proc(exec) {\n                     for &(ref kind, ref p) in inputs.iter() {\n                         let pth = Path::new(p.clone());\n                         exec.discover_input(*kind, *p, if *kind == ~\"file\" {"}, {"sha": "8372127c6714649da768296e80019aba503f17db", "filename": "src/librustuv/net.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibrustuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibrustuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fnet.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -1092,7 +1092,7 @@ mod test {\n             let handle2 = Cell::new(sched2.make_handle());\n             let tasksFriendHandle = Cell::new(sched2.make_handle());\n \n-            let on_exit: proc(UnwindResult) = |exit_status| {\n+            let on_exit: proc(UnwindResult) = proc(exit_status) {\n                 handle1.take().send(Shutdown);\n                 handle2.take().send(Shutdown);\n                 assert!(exit_status.is_success());\n@@ -1106,7 +1106,7 @@ mod test {\n                 })\n             }\n \n-            let test_function: proc() = || {\n+            let test_function: proc() = proc() {\n                 let io = unsafe { local_io() };\n                 let addr = next_test_ip4();\n                 let maybe_socket = io.udp_bind(addr);"}, {"sha": "6d2deccaa4cfe738bab906d8d5c17957f040f512", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -214,29 +214,29 @@ mod tests {\n \n     #[test]\n     fn smoke() {\n-        smalltest(|mut server| {\n+        smalltest(proc(mut server) {\n             let mut buf = [0];\n             server.read(buf);\n             assert!(buf[0] == 99);\n-        }, |mut client| {\n+        }, proc(mut client) {\n             client.write([99]);\n         })\n     }\n \n     #[test]\n     fn read_eof() {\n-        smalltest(|mut server| {\n+        smalltest(proc(mut server) {\n             let mut buf = [0];\n             assert!(server.read(buf).is_none());\n             assert!(server.read(buf).is_none());\n-        }, |_client| {\n+        }, proc(_client) {\n             // drop the client\n         })\n     }\n \n     #[test]\n     fn write_begone() {\n-        smalltest(|mut server| {\n+        smalltest(proc(mut server) {\n             let buf = [0];\n             let mut stop = false;\n             while !stop{\n@@ -248,7 +248,7 @@ mod tests {\n                     server.write(buf);\n                 })\n             }\n-        }, |_client| {\n+        }, proc(_client) {\n             // drop the client\n         })\n     }"}, {"sha": "3e4072e617a4e1656ea31cb7052bf1e0a526d351", "filename": "src/libstd/rt/local.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibstd%2Frt%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibstd%2Frt%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -134,7 +134,7 @@ mod test {\n         do run_in_bare_thread {\n             local_ptr::init_tls_key();\n             let mut sched = ~new_test_uv_sched();\n-            let task = ~Task::new_root(&mut sched.stack_pool, None, || {});\n+            let task = ~Task::new_root(&mut sched.stack_pool, None, proc(){});\n             Local::put(task);\n             let task: ~Task = Local::take();\n             cleanup_task(task);\n@@ -146,11 +146,11 @@ mod test {\n         do run_in_bare_thread {\n             local_ptr::init_tls_key();\n             let mut sched = ~new_test_uv_sched();\n-            let task = ~Task::new_root(&mut sched.stack_pool, None, || {});\n+            let task = ~Task::new_root(&mut sched.stack_pool, None, proc(){});\n             Local::put(task);\n             let task: ~Task = Local::take();\n             cleanup_task(task);\n-            let task = ~Task::new_root(&mut sched.stack_pool, None, || {});\n+            let task = ~Task::new_root(&mut sched.stack_pool, None, proc(){});\n             Local::put(task);\n             let task: ~Task = Local::take();\n             cleanup_task(task);\n@@ -163,7 +163,7 @@ mod test {\n         do run_in_bare_thread {\n             local_ptr::init_tls_key();\n             let mut sched = ~new_test_uv_sched();\n-            let task = ~Task::new_root(&mut sched.stack_pool, None, || {});\n+            let task = ~Task::new_root(&mut sched.stack_pool, None, proc(){});\n             Local::put(task);\n \n             unsafe {\n@@ -179,7 +179,7 @@ mod test {\n         do run_in_bare_thread {\n             local_ptr::init_tls_key();\n             let mut sched = ~new_test_uv_sched();\n-            let task = ~Task::new_root(&mut sched.stack_pool, None, || {});\n+            let task = ~Task::new_root(&mut sched.stack_pool, None, proc(){});\n             Local::put(task);\n \n             let res = Local::borrow(|_task: &mut Task| {"}, {"sha": "a8b510cbed7885fe67cd3379af131d3befed2333", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -340,14 +340,14 @@ fn run_(main: proc(), use_main_sched: bool) -> int {\n \n     // When the main task exits, after all the tasks in the main\n     // task tree, shut down the schedulers and set the exit code.\n-    let handles = Cell::new(handles);\n-    let on_exit: proc(UnwindResult) = |exit_success| {\n+    let handles = handles;\n+    let on_exit: proc(UnwindResult) = proc(exit_success) {\n         unsafe {\n             assert!(!(*exited_already.get()).swap(true, SeqCst),\n                     \"the runtime already exited\");\n         }\n \n-        let mut handles = handles.take();\n+        let mut handles = handles;\n         for handle in handles.mut_iter() {\n             handle.send(Shutdown);\n         }"}, {"sha": "9a48fc51329994773d0a923bfe7c08a8398060ab", "filename": "src/libstd/rt/sched.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibstd%2Frt%2Fsched.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibstd%2Frt%2Fsched.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fsched.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -979,7 +979,7 @@ mod test {\n                 assert!(Task::on_appropriate_sched());\n             };\n \n-            let on_exit: proc(UnwindResult) = |exit_status| {\n+            let on_exit: proc(UnwindResult) = proc(exit_status) {\n                 rtassert!(exit_status.is_success())\n             };\n             task.death.on_exit = Some(on_exit);\n@@ -1193,12 +1193,15 @@ mod test {\n \n                 let thread = do Thread::start {\n                     let mut sched = sched.take();\n-                    let bootstrap_task = ~Task::new_root(&mut sched.stack_pool, None, ||());\n+                    let bootstrap_task =\n+                        ~Task::new_root(&mut sched.stack_pool,\n+                                        None,\n+                                        proc()());\n                     sched.bootstrap(bootstrap_task);\n                 };\n \n                 let mut stack_pool = StackPool::new();\n-                let task = ~Task::new_root(&mut stack_pool, None, ||());\n+                let task = ~Task::new_root(&mut stack_pool, None, proc()());\n                 handle.send(TaskFromFriend(task));\n \n                 handle.send(Shutdown);"}, {"sha": "68164eb93459a321c6b21b74bf72c479db8786d0", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -425,7 +425,7 @@ impl Coroutine {\n \n     fn build_start_wrapper(start: proc()) -> proc() {\n         let start_cell = Cell::new(start);\n-        let wrapper: proc() = || {\n+        let wrapper: proc() = proc() {\n             // First code after swap to this new context. Run our\n             // cleanup job.\n             unsafe {\n@@ -712,10 +712,10 @@ mod test {\n     #[test]\n     fn unwind() {\n         do run_in_newsched_task() {\n-            let result = spawntask_try(||());\n+            let result = spawntask_try(proc()());\n             rtdebug!(\"trying first assert\");\n             assert!(result.is_ok());\n-            let result = spawntask_try(|| fail!());\n+            let result = spawntask_try(proc() fail!());\n             rtdebug!(\"trying second assert\");\n             assert!(result.is_err());\n         }"}, {"sha": "867d997e98d15a357f31048ae8d59da9402321e5", "filename": "src/libstd/rt/test.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibstd%2Frt%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibstd%2Frt%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftest.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -83,10 +83,11 @@ pub fn run_in_uv_task_core(f: proc()) {\n     use rt::sched::Shutdown;\n \n     let mut sched = ~new_test_uv_sched();\n-    let exit_handle = Cell::new(sched.make_handle());\n+    let exit_handle = sched.make_handle();\n \n-    let on_exit: proc(UnwindResult) = |exit_status| {\n-        exit_handle.take().send(Shutdown);\n+    let on_exit: proc(UnwindResult) = proc(exit_status: UnwindResult) {\n+        let mut exit_handle = exit_handle;\n+        exit_handle.send(Shutdown);\n         rtassert!(exit_status.is_success());\n     };\n     let mut task = ~Task::new_root(&mut sched.stack_pool, None, f);\n@@ -99,10 +100,11 @@ pub fn run_in_newsched_task_core(f: proc()) {\n     use rt::sched::Shutdown;\n \n     let mut sched = ~new_test_sched();\n-    let exit_handle = Cell::new(sched.make_handle());\n+    let exit_handle = sched.make_handle();\n \n-    let on_exit: proc(UnwindResult) = |exit_status| {\n-        exit_handle.take().send(Shutdown);\n+    let on_exit: proc(UnwindResult) = proc(exit_status: UnwindResult) {\n+        let mut exit_handle = exit_handle;\n+        exit_handle.send(Shutdown);\n         rtassert!(exit_status.is_success());\n     };\n     let mut task = ~Task::new_root(&mut sched.stack_pool, None, f);\n@@ -244,10 +246,10 @@ pub fn run_in_mt_newsched_task(f: proc()) {\n             scheds.push(sched);\n         }\n \n-        let handles = Cell::new(handles);\n-        let on_exit: proc(UnwindResult) = |exit_status| {\n-            let mut handles = handles.take();\n+        let handles = handles;  // Work around not being able to capture mut\n+        let on_exit: proc(UnwindResult) = proc(exit_status: UnwindResult) {\n             // Tell schedulers to exit\n+            let mut handles = handles;\n             for handle in handles.mut_iter() {\n                 handle.send(Shutdown);\n             }\n@@ -319,8 +321,9 @@ pub fn spawntask_random(f: proc()) {\n pub fn spawntask_try(f: proc()) -> Result<(),()> {\n \n     let (port, chan) = oneshot();\n-    let chan = Cell::new(chan);\n-    let on_exit: proc(UnwindResult) = |exit_status| chan.take().send(exit_status);\n+    let on_exit: proc(UnwindResult) = proc(exit_status) {\n+        chan.send(exit_status)\n+    };\n \n     let mut new_task = Task::build_root(None, f);\n     new_task.death.on_exit = Some(on_exit);\n@@ -348,7 +351,9 @@ pub fn spawntask_thread(f: proc()) -> Thread {\n pub fn with_test_task(blk: proc(~Task) -> ~Task) {\n     do run_in_bare_thread {\n         let mut sched = ~new_test_sched();\n-        let task = blk(~Task::new_root(&mut sched.stack_pool, None, ||{}));\n+        let task = blk(~Task::new_root(&mut sched.stack_pool,\n+                                       None,\n+                                       proc() {}));\n         cleanup_task(task);\n     }\n }"}, {"sha": "a587515bb16269211906ea583ddbb89a5804b07b", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -280,13 +280,13 @@ impl TaskBuilder {\n         let prev_gen_body = match prev_gen_body {\n             Some(gen) => gen,\n             None => {\n-                let f: proc(proc()) -> proc() = |body| body;\n+                let f: proc(proc()) -> proc() = proc(body) body;\n                 f\n             }\n         };\n         let prev_gen_body = Cell::new(prev_gen_body);\n         let next_gen_body = {\n-            let f: proc(proc()) -> proc() = |body| {\n+            let f: proc(proc()) -> proc() = proc(body) {\n                 let prev_gen_body = prev_gen_body.take();\n                 wrapper(prev_gen_body(body))\n             };\n@@ -551,7 +551,7 @@ fn test_add_wrapper() {\n     let ch = Cell::new(ch);\n     do b0.add_wrapper |body| {\n         let ch = Cell::new(ch.take());\n-        let result: proc() = || {\n+        let result: proc() = proc() {\n             let ch = ch.take();\n             body();\n             ch.send(());\n@@ -765,7 +765,7 @@ fn test_child_doesnt_ref_parent() {\n     // valgrind-friendly. try this at home, instead..!)\n     static generations: uint = 16;\n     fn child_no(x: uint) -> proc() {\n-        return || {\n+        return proc() {\n             if x < generations {\n                 let mut t = task();\n                 t.unwatched();\n@@ -783,7 +783,7 @@ fn test_simple_newsched_spawn() {\n     use rt::test::run_in_uv_task;\n \n     do run_in_uv_task {\n-        spawn(||())\n+        spawn(proc()())\n     }\n }\n "}, {"sha": "6c1c28c980559dd8f725bd07e69d52dd32d9dc88", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -180,7 +180,7 @@ pub fn spawn_raw(mut opts: TaskOpts, f: proc()) {\n     if opts.notify_chan.is_some() {\n         let notify_chan = opts.notify_chan.take_unwrap();\n         let notify_chan = Cell::new(notify_chan);\n-        let on_exit: proc(UnwindResult) = |task_result| {\n+        let on_exit: proc(UnwindResult) = proc(task_result) {\n             notify_chan.take().send(task_result)\n         };\n         task.death.on_exit = Some(on_exit);"}, {"sha": "07e1b149932a06755c98e436db5eb76c879f5540", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -46,7 +46,7 @@ fn fib(n: int) -> int {\n \n     let (p, ch) = stream();\n     let ch = SharedChan::new(ch);\n-    let _t = task::spawn(|| pfib(&ch, n) );\n+    let _t = task::spawn(proc() pfib(&ch, n) );\n     p.recv()\n }\n "}, {"sha": "ef749960eb924acdcc71cec09817ba871b5bc0eb", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -33,5 +33,5 @@ fn main() {\n     };\n     let n = from_str::<uint>(args[1]).unwrap();\n     let mut i = 0u;\n-    while i < n { task::spawn(|| f(n) ); i += 1u; }\n+    while i < n { task::spawn(proc() f(n) ); i += 1u; }\n }"}, {"sha": "c935c9deeac1ce3de65c51107473cf519dfbbcbb", "filename": "src/test/compile-fail/borrowck-loan-blocks-move-cc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-blocks-move-cc.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -24,7 +24,7 @@ fn box_imm() {\n \n     let v = ~3;\n     let _w = &v;\n-    task::spawn(|| {\n+    task::spawn(proc() {\n         info!(\"v={}\", *v);\n         //~^ ERROR cannot move\n     });"}, {"sha": "ac565e9bfd694241ddf24ecb9278945177256b7c", "filename": "src/test/compile-fail/borrowck-move-by-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-by-capture.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -3,6 +3,6 @@ pub fn main() {\n     // you get two error reports here.\n     let bar = ~3;\n     let _g = || { //~ ERROR capture of moved value\n-        let _h: proc() -> int = || *bar; //~ ERROR capture of moved value\n+        let _h: proc() -> int = proc() *bar; //~ ERROR capture of moved value\n     };\n }"}, {"sha": "6e6a779840e761dbe352bf1159a628bacbde8d04", "filename": "src/test/compile-fail/borrowck-move-moved-value-into-closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-moved-value-into-closure.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -5,6 +5,6 @@ fn call_f(f: proc() -> int) -> int {\n fn main() {\n     let t = ~3;\n \n-    call_f(|| { *t + 1 });\n-    call_f(|| { *t + 1 }); //~ ERROR capture of moved value\n+    call_f(proc() { *t + 1 });\n+    call_f(proc() { *t + 1 }); //~ ERROR capture of moved value\n }"}, {"sha": "02c58ba5ee3676ee467f77b2934079b9d724f35e", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -14,7 +14,7 @@ fn foo(_x: @uint) {}\n \n fn main() {\n     let x = @3u;\n-    let _: proc() = || foo(x); //~ ERROR does not fulfill `Send`\n-    let _: proc() = || foo(x); //~ ERROR does not fulfill `Send`\n-    let _: proc() = || foo(x); //~ ERROR does not fulfill `Send`\n+    let _: proc() = proc() foo(x); //~ ERROR does not fulfill `Send`\n+    let _: proc() = proc() foo(x); //~ ERROR does not fulfill `Send`\n+    let _: proc() = proc() foo(x); //~ ERROR does not fulfill `Send`\n }"}, {"sha": "190d3f17543b416d399887bb224ed5346a9ff60c", "filename": "src/test/run-fail/unwind-box-fn-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-box-fn-unique.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -18,7 +18,7 @@ fn failfn() {\n \n fn main() {\n     let y = ~0;\n-    let x: @proc() = @(|| {\n+    let x: @proc() = @(proc() {\n         error!(\"{:?}\", y.clone());\n     });\n     failfn();"}, {"sha": "5d5a5843a646f13b2acf55cc02239a089303c56a", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -19,7 +19,7 @@ fn asBlock(f: || -> uint) -> uint {\n }\n \n pub fn main() {\n-   let x = asSendfn(|| 22u);\n+   let x = asSendfn(proc() 22u);\n    assert_eq!(x, 22u);\n    let x = asBlock(|| 22u);\n    assert_eq!(x, 22u);"}, {"sha": "5e8a92cd1c236cdf86579968c81ecd4391f8780b", "filename": "src/test/run-pass/borrowck-move-by-capture-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-move-by-capture-ok.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -1,5 +1,5 @@\n pub fn main() {\n     let bar = ~3;\n-    let h: proc() -> int = || *bar;\n+    let h: proc() -> int = proc() *bar;\n     assert_eq!(h(), 3);\n }"}, {"sha": "1fa78628d8ae2f67610489704d9936e2966a3af8", "filename": "src/test/run-pass/cap-clause-move.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -13,11 +13,11 @@ use std::ptr;\n pub fn main() {\n     let x = ~3;\n     let y = ptr::to_unsafe_ptr(&(*x)) as uint;\n-    let snd_move: proc() -> uint = || ptr::to_unsafe_ptr(&(*x)) as uint;\n+    let snd_move: proc() -> uint = proc() ptr::to_unsafe_ptr(&(*x)) as uint;\n     assert_eq!(snd_move(), y);\n \n     let x = ~4;\n     let y = ptr::to_unsafe_ptr(&(*x)) as uint;\n-    let lam_move: proc() -> uint = || ptr::to_unsafe_ptr(&(*x)) as uint;\n+    let lam_move: proc() -> uint = proc() ptr::to_unsafe_ptr(&(*x)) as uint;\n     assert_eq!(lam_move(), y);\n }"}, {"sha": "a97b81a4e8b9aa3a4d359ee6d432d083f32bb583", "filename": "src/test/run-pass/child-outlives-parent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -15,5 +15,5 @@ use std::task;\n fn child2(_s: ~str) { }\n \n pub fn main() {\n-    let _x = task::spawn(|| child2(~\"hi\"));\n+    let _x = task::spawn(proc() child2(~\"hi\"));\n }"}, {"sha": "738878527bf8e9efc4bda18ee90de6a51bb96337", "filename": "src/test/run-pass/cleanup-copy-mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -15,7 +15,7 @@ use std::task;\n fn adder(x: @int, y: @int) -> int { return *x + *y; }\n fn failer() -> @int { fail!(); }\n pub fn main() {\n-    assert!(task::try(|| {\n+    assert!(task::try(proc() {\n         adder(@2, failer()); ()\n     }).is_err());\n }"}, {"sha": "6fab709543a0aff7c3aa8c5bcbc5bad07e7e5576", "filename": "src/test/run-pass/clone-with-exterior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -19,7 +19,7 @@ struct Pair {\n pub fn main() {\n     let z = ~Pair { a : 10, b : 12};\n \n-    let f: proc() = || {\n+    let f: proc() = proc() {\n         assert_eq!(z.a, 10);\n         assert_eq!(z.b, 12);\n     };"}, {"sha": "5eb3e247d672c2358eedb37923ac8138cdf5da1b", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -12,7 +12,7 @@ use std::task;\n \n pub fn main() {\n     let (p, ch) = stream();\n-    let _t = task::spawn(|| child(&ch) );\n+    let _t = task::spawn(proc() child(&ch));\n     let y = p.recv();\n     error!(\"received\");\n     error!(\"{:?}\", y);"}, {"sha": "682ab844a47f1a57cdc9c2bae1f6a57988bced0c", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -34,7 +34,7 @@ mod map_reduce {\n         for i in inputs.iter() {\n             let ctrl = ctrl.clone();\n             let i = i.clone();\n-            task::spawn(|| map_task(ctrl.clone(), i.clone()) );\n+            task::spawn(proc() map_task(ctrl.clone(), i.clone()) );\n         }\n     }\n "}, {"sha": "02aaee1d01fdab554555e9f3f3206438a5a2844c", "filename": "src/test/run-pass/issue-3424.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fissue-3424.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3424.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -21,7 +21,7 @@ type rsrc_loader = proc(path: &Path) -> result::Result<~str, ~str>;\n \n fn tester()\n {\n-    let loader: rsrc_loader = |_path| {result::Ok(~\"more blah\")};\n+    let loader: rsrc_loader = proc(_path) {result::Ok(~\"more blah\")};\n \n     let path = path::Path::new(\"blah\");\n     assert!(loader(&path).is_ok());"}, {"sha": "ab641e51960d3caafb224d7579aac939c2b79a32", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -14,13 +14,11 @@ enum Msg\n fn foo(name: ~str, samples_chan: Chan<Msg>) {\n     do task::spawn\n     {\n-        let callback: SamplesFn =\n-            |buffer|\n-            {\n-                for i in range(0u, buffer.len()) {\n-                    error!(\"{}: {}\", i, buffer[i])\n-                }\n-            };\n+        let callback: SamplesFn = proc(buffer) {\n+            for i in range(0u, buffer.len()) {\n+                error!(\"{}: {}\", i, buffer[i])\n+            }\n+        };\n         samples_chan.send(GetSamples(name.clone(), callback));\n     };\n }"}, {"sha": "c7d5a2f77dae1a9a62f5f93fc7a331a8ec23bb40", "filename": "src/test/run-pass/ivec-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fivec-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fivec-tag.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -8,7 +8,7 @@ fn producer(c: &Chan<~[u8]>) {\n \n pub fn main() {\n     let (p, ch) = stream::<~[u8]>();\n-    let _prod = task::spawn(|| producer(&ch) );\n+    let _prod = task::spawn(proc() producer(&ch) );\n \n     let _data: ~[u8] = p.recv();\n }"}, {"sha": "84d49820239d28e77730bed5b1a80e733b9f8376", "filename": "src/test/run-pass/newlambdas-ret-infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -11,7 +11,7 @@\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n-fn unique() -> proc() { return || (); }\n+fn unique() -> proc() { return proc() (); }\n \n pub fn main() {\n }"}, {"sha": "86ad53c0228e8ca6bc31f35c707e3675fb38ba45", "filename": "src/test/run-pass/newlambdas-ret-infer2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewlambdas-ret-infer2.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -11,7 +11,7 @@\n // Test that the lambda kind is inferred correctly as a return\n // expression\n \n-fn unique() -> proc() { || () }\n+fn unique() -> proc() { proc() () }\n \n pub fn main() {\n }"}, {"sha": "b27da3912d399e9b398e4381f2514fa2b6ac5c10", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -69,6 +69,6 @@ pub fn main() {\n     assert_eq!(q.y, !(p.y));\n \n     // Issue #1733\n-    let result: proc(int) = |_|();\n+    let result: proc(int) = proc(_)();\n     result(p[true]);\n }"}, {"sha": "963f62a20a048f314f9bf02e624c9f5856ec7595", "filename": "src/test/run-pass/sendfn-spawn-with-fn-arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsendfn-spawn-with-fn-arg.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -19,12 +19,12 @@ fn test05_start(f: proc(int)) {\n \n fn test05() {\n     let three = ~3;\n-    let fn_to_send: proc(int) = |n| {\n+    let fn_to_send: proc(int) = proc(n) {\n         error!(\"{}\", *three + n); // will copy x into the closure\n         assert_eq!(*three, 3);\n     };\n     let fn_to_send = Cell::new(fn_to_send);\n-    task::spawn(|| {\n+    task::spawn(proc() {\n         test05_start(fn_to_send.take());\n     });\n }"}, {"sha": "8c9de64687e2738bdcfa93867a41d83046b49553", "filename": "src/test/run-pass/spawn-fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fspawn-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-fn.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -16,9 +16,9 @@ fn x(s: ~str, n: int) {\n }\n \n pub fn main() {\n-    task::spawn(|| x(~\"hello from first spawned fn\", 65) );\n-    task::spawn(|| x(~\"hello from second spawned fn\", 66) );\n-    task::spawn(|| x(~\"hello from third spawned fn\", 67) );\n+    task::spawn(proc() x(~\"hello from first spawned fn\", 65) );\n+    task::spawn(proc() x(~\"hello from second spawned fn\", 66) );\n+    task::spawn(proc() x(~\"hello from third spawned fn\", 67) );\n     let mut i: int = 30;\n     while i > 0 { i = i - 1; info!(\"parent sleeping\"); task::deschedule(); }\n }"}, {"sha": "18459b7a3a31207f9de86155965ffad9099e197f", "filename": "src/test/run-pass/spawn-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fspawn-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn-types.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -24,5 +24,5 @@ fn iotask(_cx: &ctx, ip: ~str) {\n \n pub fn main() {\n     let (_p, ch) = stream::<int>();\n-    task::spawn(|| iotask(&ch, ~\"localhost\") );\n+    task::spawn(proc() iotask(&ch, ~\"localhost\") );\n }"}, {"sha": "d95f032e8143838ce67082137b335f72c9fa6b67", "filename": "src/test/run-pass/spawn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -13,7 +13,7 @@ extern mod extra;\n use std::task;\n \n pub fn main() {\n-    task::spawn(|| child(10) );\n+    task::spawn(proc() child(10) );\n }\n \n fn child(i: int) { error!(\"{}\", i); assert!((i == 10)); }"}, {"sha": "8530c583b165475e97ab4522d600b2c7d915c25c", "filename": "src/test/run-pass/spawn2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fspawn2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fspawn2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawn2.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -10,7 +10,7 @@\n \n use std::task;\n \n-pub fn main() { task::spawn(|| child((10, 20, 30, 40, 50, 60, 70, 80, 90)) ); }\n+pub fn main() { task::spawn(proc() child((10, 20, 30, 40, 50, 60, 70, 80, 90)) ); }\n \n fn child(args: (int, int, int, int, int, int, int, int, int)) {\n     let (i1, i2, i3, i4, i5, i6, i7, i8, i9) = args;"}, {"sha": "76975d15c1d0c12dd6e141f62f853e8a2c174dca", "filename": "src/test/run-pass/spawning-with-debug.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fspawning-with-debug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fspawning-with-debug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fspawning-with-debug.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -18,5 +18,5 @@ use std::task;\n fn main() {\n     let mut t = task::task();\n     t.sched_mode(task::SingleThreaded);\n-    t.spawn(|| ());\n+    t.spawn(proc() ());\n }"}, {"sha": "42f3089a87a193f43f083c017910900b27e2f60c", "filename": "src/test/run-pass/swap-overlapping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fswap-overlapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fswap-overlapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fswap-overlapping.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -18,7 +18,7 @@ pub fn main() {\n             name: DynTestName(~\"test\"),\n             should_fail: false\n         },\n-        testfn: DynTestFn(|| ()),\n+        testfn: DynTestFn(proc() ()),\n     };\n     do_swap(&mut test);\n }"}, {"sha": "bcdb56a45fdb384df789e6bfe3540cf667fa1108", "filename": "src/test/run-pass/task-comm-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-0.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -29,7 +29,7 @@ fn test05_start(ch : &Chan<int>) {\n \n fn test05() {\n     let (po, ch) = comm::stream();\n-    task::spawn(|| test05_start(&ch) );\n+    task::spawn(proc() test05_start(&ch) );\n     let mut value: int = po.recv();\n     error!(\"{}\", value);\n     value = po.recv();"}, {"sha": "830aecfa86cc98a4dbd73cb9abd0d45b7d0baf6d", "filename": "src/test/run-pass/task-comm-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-1.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -15,6 +15,6 @@ pub fn main() { test00(); }\n fn start() { info!(\"Started / Finished task.\"); }\n \n fn test00() {\n-    task::try(|| start() );\n+    task::try(proc() start() );\n     info!(\"Completing.\");\n }"}, {"sha": "76948913288779b252a9e0f92921565f16753054", "filename": "src/test/run-pass/task-comm-10.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-10.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -31,7 +31,7 @@ fn start(c: &comm::Chan<comm::Chan<~str>>) {\n \n pub fn main() {\n     let (p, ch) = comm::stream();\n-    let _child = task::spawn(|| start(&ch) );\n+    let _child = task::spawn(proc() start(&ch) );\n \n     let c = p.recv();\n     c.send(~\"A\");"}, {"sha": "e87809b2e98f1f89e37b635141df6cceee53adb3", "filename": "src/test/run-pass/task-comm-11.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-11.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -22,6 +22,6 @@ fn start(c: &comm::Chan<comm::Chan<int>>) {\n \n pub fn main() {\n     let (p, ch) = comm::stream();\n-    let _child = task::spawn(|| start(&ch) );\n+    let _child = task::spawn(proc() start(&ch) );\n     let _c = p.recv();\n }"}, {"sha": "c8234aefbe577ee7e585004e667740cd52516678", "filename": "src/test/run-pass/task-comm-13.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-13.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -23,6 +23,6 @@ fn start(c: &comm::Chan<int>, start: int, number_of_messages: int) {\n pub fn main() {\n     info!(\"Check that we don't deadlock.\");\n     let (_p, ch) = comm::stream();\n-    task::try(|| start(&ch, 0, 10) );\n+    task::try(proc() start(&ch, 0, 10) );\n     info!(\"Joined task\");\n }"}, {"sha": "8ef7f85e76827b17250e4806e4eb0663db5597f3", "filename": "src/test/run-pass/task-comm-14.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-14.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n     while (i > 0) {\n         info!(\"{}\", i);\n         let ch = ch.clone();\n-        task::spawn({let i = i; || child(i, &ch)});\n+        task::spawn({let i = i; proc() child(i, &ch)});\n         i = i - 1;\n     }\n "}, {"sha": "66b7b4db5bea7c3a7482729b19aaa3c9f8acbaaa", "filename": "src/test/run-pass/task-comm-15.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-15.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -29,6 +29,6 @@ pub fn main() {\n     // the child's point of view the receiver may die. We should\n     // drop messages on the floor in this case, and not crash!\n     let (p, ch) = comm::stream();\n-    task::spawn(|| start(&ch, 10));\n+    task::spawn(proc() start(&ch, 10));\n     p.recv();\n }"}, {"sha": "4f9285d30b9e07063008ac447f4eba2efbec1c44", "filename": "src/test/run-pass/task-comm-17.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-17.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -20,5 +20,5 @@ fn f() {\n }\n \n pub fn main() {\n-    task::spawn(|| f() );\n+    task::spawn(proc() f() );\n }"}, {"sha": "030b70924f69ce8a257fbac4a571432c8332fbae", "filename": "src/test/run-pass/task-comm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-3.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -48,7 +48,7 @@ fn test00() {\n         results.push(builder.future_result());\n         builder.spawn({\n             let i = i;\n-            || test00_start(&ch, i, number_of_messages)\n+            proc() test00_start(&ch, i, number_of_messages)\n         });\n         i = i + 1;\n     }"}, {"sha": "b60e3f2a4eebab39f77d92e56e6f0a77581d629a", "filename": "src/test/run-pass/task-life-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-life-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-life-0.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -13,7 +13,7 @@ extern mod extra;\n use std::task;\n \n pub fn main() {\n-    task::spawn(|| child(~\"Hello\") );\n+    task::spawn(proc() child(~\"Hello\") );\n }\n \n fn child(_s: ~str) {"}, {"sha": "aeca54c1fb566b17352885da8acde09510937bbf", "filename": "src/test/run-pass/task-spawn-move-and-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-spawn-move-and-copy.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -17,7 +17,7 @@ pub fn main() {\n     let x = ~1;\n     let x_in_parent = ptr::to_unsafe_ptr(&(*x)) as uint;\n \n-    task::spawn(|| {\n+    task::spawn(proc() {\n         let x_in_child = ptr::to_unsafe_ptr(&(*x)) as uint;\n         ch.send(x_in_child);\n     });"}, {"sha": "3ab0fe1c058d878e38ae018e31264ab7d74748a0", "filename": "src/test/run-pass/tempfile.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftempfile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Ftempfile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftempfile.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -40,7 +40,7 @@ fn test_tempdir() {\n \n fn test_rm_tempdir() {\n     let (rd, wr) = stream();\n-    let f: proc() = || {\n+    let f: proc() = proc() {\n         let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n         wr.send(tmp.path().clone());\n         fail!(\"fail to unwind past `tmp`\");\n@@ -52,7 +52,7 @@ fn test_rm_tempdir() {\n     let tmp = TempDir::new(\"test_rm_tempdir\").unwrap();\n     let path = tmp.path().clone();\n     let cell = Cell::new(tmp);\n-    let f: proc() = || {\n+    let f: proc() = proc() {\n         let _tmp = cell.take();\n         fail!(\"fail to unwind past `tmp`\");\n     };\n@@ -61,7 +61,7 @@ fn test_rm_tempdir() {\n \n     let path;\n     {\n-        let f: proc() -> TempDir = || {\n+        let f: proc() -> TempDir = proc() {\n             TempDir::new(\"test_rm_tempdir\").unwrap()\n         };\n         let tmp = task::try(f).expect(\"test_rm_tmdir\");"}, {"sha": "aaedb2d322be10aadedc6b5152889298883bfec9", "filename": "src/test/run-pass/terminate-in-initializer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fterminate-in-initializer.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -25,13 +25,13 @@ fn test_ret() { let _x: @int = return; }\n \n fn test_fail() {\n     fn f() { let _x: @int = fail!(); }\n-    task::try(|| f() );\n+    task::try(proc() f() );\n }\n \n fn test_fail_indirect() {\n     fn f() -> ! { fail!(); }\n     fn g() { let _x: @int = f(); }\n-    task::try(|| g() );\n+    task::try(proc() g() );\n }\n \n pub fn main() {"}, {"sha": "7df9dac219a1f5deb06347ffedbf1ce4f20c6769", "filename": "src/test/run-pass/threads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthreads.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -14,7 +14,7 @@ use std::task;\n \n pub fn main() {\n     let mut i = 10;\n-    while i > 0 { task::spawn({let i = i; || child(i)}); i = i - 1; }\n+    while i > 0 { task::spawn({let i = i; proc() child(i)}); i = i - 1; }\n     info!(\"main thread exiting\");\n }\n "}, {"sha": "ebf3da60db8f3c0a913875f9b8485a74d8e906b6", "filename": "src/test/run-pass/uniq-cc-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc-generic.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -23,7 +23,7 @@ struct Pointy {\n }\n \n fn make_uniq_closure<A:Send>(a: A) -> proc() -> uint {\n-    let result: proc() -> uint = || ptr::to_unsafe_ptr(&a) as uint;\n+    let result: proc() -> uint = proc() ptr::to_unsafe_ptr(&a) as uint;\n     result\n }\n "}, {"sha": "20b5761e6bdb660e25188214cfa7ae205875e70d", "filename": "src/test/run-pass/uniq-cc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Funiq-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funiq-cc.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -25,7 +25,7 @@ fn empty_pointy() -> @mut Pointy {\n     return @mut Pointy {\n         a : none,\n         c : ~22,\n-        d : || {},\n+        d : proc() {},\n     }\n }\n "}, {"sha": "f44802a9b34cfb1b6d926e555f963d892ce94d17", "filename": "src/test/run-pass/unique-send-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Funique-send-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-send-2.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -22,7 +22,7 @@ pub fn main() {\n     let mut expected = 0u;\n     for i in range(0u, n) {\n         let ch = ch.clone();\n-        task::spawn(|| child(&ch, i) );\n+        task::spawn(proc() child(&ch, i) );\n         expected += i;\n     }\n "}, {"sha": "2e01eef1c69616d37dd3f358fb2785f8045126c6", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/749ee53c6d23ae1467568d6e0280a4f59e4e952b/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=749ee53c6d23ae1467568d6e0280a4f59e4e952b", "patch": "@@ -42,7 +42,7 @@ fn f(c: SharedChan<bool>) {\n pub fn main() {\n     let (p, c) = stream();\n     let c = SharedChan::new(c);\n-    task::spawn(|| f(c.clone()) );\n+    task::spawn(proc() f(c.clone()));\n     error!(\"hiiiiiiiii\");\n     assert!(p.recv());\n }"}]}