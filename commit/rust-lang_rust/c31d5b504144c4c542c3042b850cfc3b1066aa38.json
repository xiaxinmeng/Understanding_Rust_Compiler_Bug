{"sha": "c31d5b504144c4c542c3042b850cfc3b1066aa38", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMWQ1YjUwNDE0NGM0YzU0MmMzMDQyYjg1MGNmYzNiMTA2NmFhMzg=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2017-01-27T18:45:18Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2017-01-27T18:45:18Z"}, "message": "Use less syscalls in `anon_pipe()`\n\nSave a `ENOSYS` failure from `pipe2` and don't try again.\n\nUse `cvt` instead of `cvt_r` for `pipe2` - `EINTR` is not an error\n`pipe2` can return.", "tree": {"sha": "90d7339668c7f7f6c5c558471e536031d5d7e2e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90d7339668c7f7f6c5c558471e536031d5d7e2e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c31d5b504144c4c542c3042b850cfc3b1066aa38", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c31d5b504144c4c542c3042b850cfc3b1066aa38", "html_url": "https://github.com/rust-lang/rust/commit/c31d5b504144c4c542c3042b850cfc3b1066aa38", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c31d5b504144c4c542c3042b850cfc3b1066aa38/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fece9c735678d152da721711f6f4aba1f0b8ab15", "url": "https://api.github.com/repos/rust-lang/rust/commits/fece9c735678d152da721711f6f4aba1f0b8ab15", "html_url": "https://github.com/rust-lang/rust/commit/fece9c735678d152da721711f6f4aba1f0b8ab15"}], "stats": {"total": 38, "additions": 19, "deletions": 19}, "files": [{"sha": "a5d60c257ed637e849b53fea4594f289afce61fe", "filename": "src/libstd/sys/unix/pipe.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c31d5b504144c4c542c3042b850cfc3b1066aa38/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c31d5b504144c4c542c3042b850cfc3b1066aa38/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fpipe.rs?ref=c31d5b504144c4c542c3042b850cfc3b1066aa38", "patch": "@@ -13,7 +13,8 @@ use io;\n use libc::{self, c_int};\n use mem;\n use ptr;\n-use sys::cvt_r;\n+use sync::atomic::{AtomicBool, Ordering};\n+use sys::{cvt, cvt_r};\n use sys::fd::FileDesc;\n \n ////////////////////////////////////////////////////////////////////////////////\n@@ -29,34 +30,33 @@ pub fn anon_pipe() -> io::Result<(AnonPipe, AnonPipe)> {\n     // CLOEXEC flag is to use the `pipe2` syscall on Linux. This was added in\n     // 2.6.27, however, and because we support 2.6.18 we must detect this\n     // support dynamically.\n-    if cfg!(target_os = \"linux\") {\n+    static TRY_PIPE2: AtomicBool = AtomicBool::new(cfg!(target_os = \"linux\"));\n+    if TRY_PIPE2.load(Ordering::Relaxed) {\n         weak! { fn pipe2(*mut c_int, c_int) -> c_int }\n         if let Some(pipe) = pipe2.get() {\n-            match cvt_r(|| unsafe { pipe(fds.as_mut_ptr(), libc::O_CLOEXEC) }) {\n-                Ok(_) => {\n+            match cvt(unsafe { pipe(fds.as_mut_ptr(), libc::O_CLOEXEC) }) {\n+                Err(ref e) if e.raw_os_error() == Some(libc::ENOSYS) => {\n+                    TRY_PIPE2.store(false, Ordering::Relaxed);\n+                    // Fall through\n+                },\n+                res => {\n+                    res?;\n                     return Ok((AnonPipe(FileDesc::new(fds[0])),\n-                               AnonPipe(FileDesc::new(fds[1]))))\n+                               AnonPipe(FileDesc::new(fds[1]))));\n                 }\n-                Err(ref e) if e.raw_os_error() == Some(libc::ENOSYS) => {}\n-                Err(e) => return Err(e),\n             }\n         }\n     }\n-    if unsafe { libc::pipe(fds.as_mut_ptr()) == 0 } {\n-        let fd0 = FileDesc::new(fds[0]);\n-        let fd1 = FileDesc::new(fds[1]);\n-        Ok((AnonPipe::from_fd(fd0)?, AnonPipe::from_fd(fd1)?))\n-    } else {\n-        Err(io::Error::last_os_error())\n-    }\n+    cvt(unsafe { libc::pipe(fds.as_mut_ptr()) })?;\n+\n+    let fd0 = FileDesc::new(fds[0]);\n+    let fd1 = FileDesc::new(fds[1]);\n+    fd0.set_cloexec()?;\n+    fd1.set_cloexec()?;\n+    Ok((AnonPipe(fd0), AnonPipe(fd1)))\n }\n \n impl AnonPipe {\n-    pub fn from_fd(fd: FileDesc) -> io::Result<AnonPipe> {\n-        fd.set_cloexec()?;\n-        Ok(AnonPipe(fd))\n-    }\n-\n     pub fn read(&self, buf: &mut [u8]) -> io::Result<usize> {\n         self.0.read(buf)\n     }"}]}