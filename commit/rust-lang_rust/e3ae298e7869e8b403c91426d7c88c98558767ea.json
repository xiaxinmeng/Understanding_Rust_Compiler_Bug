{"sha": "e3ae298e7869e8b403c91426d7c88c98558767ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYWUyOThlNzg2OWU4YjQwM2M5MTQyNmQ3Yzg4Yzk4NTU4NzY3ZWE=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-05-19T21:22:38Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2020-05-19T21:22:38Z"}, "message": "Fill code action capabilities with a function", "tree": {"sha": "a4ec857de712ac799226588ec5454d20da088d6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4ec857de712ac799226588ec5454d20da088d6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3ae298e7869e8b403c91426d7c88c98558767ea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3ae298e7869e8b403c91426d7c88c98558767ea", "html_url": "https://github.com/rust-lang/rust/commit/e3ae298e7869e8b403c91426d7c88c98558767ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3ae298e7869e8b403c91426d7c88c98558767ea/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bf4fc27d923207df36d06da295d815d768f3a0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf4fc27d923207df36d06da295d815d768f3a0b", "html_url": "https://github.com/rust-lang/rust/commit/6bf4fc27d923207df36d06da295d815d768f3a0b"}], "stats": {"total": 56, "additions": 27, "deletions": 29}, "files": [{"sha": "4effc82ca118cee76c32818e83bfa2d454225b22", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 27, "deletions": 29, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/e3ae298e7869e8b403c91426d7c88c98558767ea/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3ae298e7869e8b403c91426d7c88c98558767ea/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=e3ae298e7869e8b403c91426d7c88c98558767ea", "patch": "@@ -15,35 +15,7 @@ use lsp_types::{\n };\n \n pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabilities {\n-    let mut code_action_provider = CodeActionProviderCapability::Simple(true);\n-\n-    match client_caps.text_document.as_ref() {\n-        Some(it) => {\n-            match it.code_action.as_ref().and_then(|c| c.code_action_literal_support.as_ref()) {\n-                Some(_literal_support) => {\n-                    code_action_provider =\n-                        CodeActionProviderCapability::Options(CodeActionOptions {\n-                            // Advertise support for all built-in CodeActionKinds.\n-                            // Ideally we would base this off of the client capabilities\n-                            // but the client is supposed to fall back gracefully for unknown values.\n-                            code_action_kinds: Some(vec![\n-                                lsp_types::code_action_kind::EMPTY.to_string(),\n-                                lsp_types::code_action_kind::QUICKFIX.to_string(),\n-                                lsp_types::code_action_kind::REFACTOR.to_string(),\n-                                lsp_types::code_action_kind::REFACTOR_EXTRACT.to_string(),\n-                                lsp_types::code_action_kind::REFACTOR_INLINE.to_string(),\n-                                lsp_types::code_action_kind::REFACTOR_REWRITE.to_string(),\n-                                lsp_types::code_action_kind::SOURCE.to_string(),\n-                                lsp_types::code_action_kind::SOURCE_ORGANIZE_IMPORTS.to_string(),\n-                            ]),\n-                            work_done_progress_options: Default::default(),\n-                        });\n-                }\n-                None => {}\n-            }\n-        }\n-        None => {}\n-    };\n+    let code_action_provider = code_action_capabilities(client_caps);\n \n     ServerCapabilities {\n         text_document_sync: Some(TextDocumentSyncCapability::Options(TextDocumentSyncOptions {\n@@ -112,3 +84,29 @@ pub fn server_capabilities(client_caps: &ClientCapabilities) -> ServerCapabiliti\n         experimental: Default::default(),\n     }\n }\n+\n+fn code_action_capabilities(client_caps: &ClientCapabilities) -> CodeActionProviderCapability {\n+    client_caps\n+        .text_document\n+        .as_ref()\n+        .and_then(|it| it.code_action.as_ref())\n+        .and_then(|it| it.code_action_literal_support.as_ref())\n+        .map_or(CodeActionProviderCapability::Simple(true), |_| {\n+            CodeActionProviderCapability::Options(CodeActionOptions {\n+                // Advertise support for all built-in CodeActionKinds.\n+                // Ideally we would base this off of the client capabilities\n+                // but the client is supposed to fall back gracefully for unknown values.\n+                code_action_kinds: Some(vec![\n+                    lsp_types::code_action_kind::EMPTY.to_string(),\n+                    lsp_types::code_action_kind::QUICKFIX.to_string(),\n+                    lsp_types::code_action_kind::REFACTOR.to_string(),\n+                    lsp_types::code_action_kind::REFACTOR_EXTRACT.to_string(),\n+                    lsp_types::code_action_kind::REFACTOR_INLINE.to_string(),\n+                    lsp_types::code_action_kind::REFACTOR_REWRITE.to_string(),\n+                    lsp_types::code_action_kind::SOURCE.to_string(),\n+                    lsp_types::code_action_kind::SOURCE_ORGANIZE_IMPORTS.to_string(),\n+                ]),\n+                work_done_progress_options: Default::default(),\n+            })\n+        })\n+}"}]}