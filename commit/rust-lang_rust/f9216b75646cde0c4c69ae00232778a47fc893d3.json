{"sha": "f9216b75646cde0c4c69ae00232778a47fc893d3", "node_id": "C_kwDOAAsO6NoAKGY5MjE2Yjc1NjQ2Y2RlMGM0YzY5YWUwMDIzMjc3OGE0N2ZjODkzZDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-22T02:39:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-02-22T02:39:09Z"}, "message": "Auto merge of #108325 - matthiaskrgr:rollup-73qihie, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #104239 (Better debug logs for borrowck constraint graph)\n - #108202 (Make sure `test_type_match` doesn't ICE with late-bound types)\n - #108295 (Use DefKind to give more item kind information during BindingObligation note )\n - #108306 (compiletest: up deps)\n - #108313 (Fix compiletest possible crash in option only-modified)\n - #108322 (Clean ConstProp)\n - #108323 (hir-analysis: make one diagnostic translatable)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "17f92fa0faec4c81769be4cf6e57a074a70829b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17f92fa0faec4c81769be4cf6e57a074a70829b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9216b75646cde0c4c69ae00232778a47fc893d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9216b75646cde0c4c69ae00232778a47fc893d3", "html_url": "https://github.com/rust-lang/rust/commit/f9216b75646cde0c4c69ae00232778a47fc893d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9216b75646cde0c4c69ae00232778a47fc893d3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "375d5ace705f8494af06b545291d64486fbada06", "url": "https://api.github.com/repos/rust-lang/rust/commits/375d5ace705f8494af06b545291d64486fbada06", "html_url": "https://github.com/rust-lang/rust/commit/375d5ace705f8494af06b545291d64486fbada06"}, {"sha": "d39fc2111bd16f78d7ad79c06ce1eb774a4bfa2e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d39fc2111bd16f78d7ad79c06ce1eb774a4bfa2e", "html_url": "https://github.com/rust-lang/rust/commit/d39fc2111bd16f78d7ad79c06ce1eb774a4bfa2e"}], "stats": {"total": 1258, "additions": 818, "deletions": 440}, "files": [{"sha": "4d6530508b3d7b5ef01afb7f0a6a633759592872", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -891,11 +891,11 @@ dependencies = [\n  \"diff\",\n  \"getopts\",\n  \"glob\",\n- \"lazy_static\",\n  \"lazycell\",\n  \"libc\",\n- \"miow 0.3.7\",\n+ \"miow 0.5.0\",\n  \"miropt-test-tools\",\n+ \"once_cell\",\n  \"regex\",\n  \"rustfix\",\n  \"serde\","}, {"sha": "f370c02161b115590e2333b39f4d1c6866e653e2", "filename": "compiler/rustc_borrowck/src/constraints/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fconstraints%2Fmod.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -17,7 +17,7 @@ pub(crate) mod graph;\n /// constraints of the form `R1: R2`. Each constraint is identified by\n /// a unique `OutlivesConstraintIndex` and you can index into the set\n /// (`constraint_set[i]`) to access the constraint details.\n-#[derive(Clone, Default)]\n+#[derive(Clone, Debug, Default)]\n pub(crate) struct OutlivesConstraintSet<'tcx> {\n     outlives: IndexVec<OutlivesConstraintIndex, OutlivesConstraint<'tcx>>,\n }"}, {"sha": "622b57c7b7f2b20f73b6b59835dce177748529c2", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 89, "deletions": 9, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -25,7 +25,9 @@ use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_index::bit_set::ChunkedBitSet;\n use rustc_index::vec::IndexVec;\n-use rustc_infer::infer::{DefiningAnchor, InferCtxt, TyCtxtInferExt};\n+use rustc_infer::infer::{\n+    DefiningAnchor, InferCtxt, NllRegionVariableOrigin, RegionVariableOrigin, TyCtxtInferExt,\n+};\n use rustc_middle::mir::{\n     traversal, Body, ClearCrossCrate, Local, Location, Mutability, NonDivergingIntrinsic, Operand,\n     Place, PlaceElem, PlaceRef, VarDebugInfoContents,\n@@ -43,6 +45,7 @@ use smallvec::SmallVec;\n use std::cell::OnceCell;\n use std::cell::RefCell;\n use std::collections::BTreeMap;\n+use std::ops::Deref;\n use std::rc::Rc;\n \n use rustc_mir_dataflow::impls::{\n@@ -94,6 +97,7 @@ use nll::{PoloniusOutput, ToRegionVid};\n use place_ext::PlaceExt;\n use places_conflict::{places_conflict, PlaceConflictBias};\n use region_infer::RegionInferenceContext;\n+use renumber::RegionCtxt;\n \n // FIXME(eddyb) perhaps move this somewhere more centrally.\n #[derive(Debug)]\n@@ -167,10 +171,10 @@ fn do_mir_borrowck<'tcx>(\n     return_body_with_facts: bool,\n ) -> (BorrowCheckResult<'tcx>, Option<Box<BodyWithBorrowckFacts<'tcx>>>) {\n     let def = input_body.source.with_opt_param().as_local().unwrap();\n-\n     debug!(?def);\n \n     let tcx = infcx.tcx;\n+    let infcx = BorrowckInferCtxt::new(infcx);\n     let param_env = tcx.param_env(def.did);\n \n     let mut local_names = IndexVec::from_elem(None, &input_body.local_decls);\n@@ -218,7 +222,7 @@ fn do_mir_borrowck<'tcx>(\n     let mut body_owned = input_body.clone();\n     let mut promoted = input_promoted.clone();\n     let free_regions =\n-        nll::replace_regions_in_mir(infcx, param_env, &mut body_owned, &mut promoted);\n+        nll::replace_regions_in_mir(&infcx, param_env, &mut body_owned, &mut promoted);\n     let body = &body_owned; // no further changes\n \n     let location_table_owned = LocationTable::new(body);\n@@ -256,7 +260,7 @@ fn do_mir_borrowck<'tcx>(\n         opt_closure_req,\n         nll_errors,\n     } = nll::compute_regions(\n-        infcx,\n+        &infcx,\n         free_regions,\n         body,\n         &promoted,\n@@ -271,12 +275,12 @@ fn do_mir_borrowck<'tcx>(\n \n     // Dump MIR results into a file, if that is enabled. This let us\n     // write unit-tests, as well as helping with debugging.\n-    nll::dump_mir_results(infcx, &body, &regioncx, &opt_closure_req);\n+    nll::dump_mir_results(&infcx, &body, &regioncx, &opt_closure_req);\n \n     // We also have a `#[rustc_regions]` annotation that causes us to dump\n     // information.\n     nll::dump_annotation(\n-        infcx,\n+        &infcx,\n         &body,\n         &regioncx,\n         &opt_closure_req,\n@@ -320,7 +324,7 @@ fn do_mir_borrowck<'tcx>(\n \n         if let Err((move_data, move_errors)) = move_data_results {\n             let mut promoted_mbcx = MirBorrowckCtxt {\n-                infcx,\n+                infcx: &infcx,\n                 param_env,\n                 body: promoted_body,\n                 move_data: &move_data,\n@@ -349,7 +353,7 @@ fn do_mir_borrowck<'tcx>(\n     }\n \n     let mut mbcx = MirBorrowckCtxt {\n-        infcx,\n+        infcx: &infcx,\n         param_env,\n         body,\n         move_data: &mdpe.move_data,\n@@ -481,8 +485,84 @@ pub struct BodyWithBorrowckFacts<'tcx> {\n     pub location_table: LocationTable,\n }\n \n+pub struct BorrowckInferCtxt<'cx, 'tcx> {\n+    pub(crate) infcx: &'cx InferCtxt<'tcx>,\n+    pub(crate) reg_var_to_origin: RefCell<FxHashMap<ty::RegionVid, RegionCtxt>>,\n+}\n+\n+impl<'cx, 'tcx> BorrowckInferCtxt<'cx, 'tcx> {\n+    pub(crate) fn new(infcx: &'cx InferCtxt<'tcx>) -> Self {\n+        BorrowckInferCtxt { infcx, reg_var_to_origin: RefCell::new(Default::default()) }\n+    }\n+\n+    pub(crate) fn next_region_var<F>(\n+        &self,\n+        origin: RegionVariableOrigin,\n+        get_ctxt_fn: F,\n+    ) -> ty::Region<'tcx>\n+    where\n+        F: Fn() -> RegionCtxt,\n+    {\n+        let next_region = self.infcx.next_region_var(origin);\n+        let vid = next_region\n+            .as_var()\n+            .unwrap_or_else(|| bug!(\"expected RegionKind::RegionVar on {:?}\", next_region));\n+\n+        if cfg!(debug_assertions) {\n+            debug!(\"inserting vid {:?} with origin {:?} into var_to_origin\", vid, origin);\n+            let ctxt = get_ctxt_fn();\n+            let mut var_to_origin = self.reg_var_to_origin.borrow_mut();\n+            let prev = var_to_origin.insert(vid, ctxt);\n+\n+            // This only makes sense if not called in a canonicalization context. If this\n+            // ever changes we either want to get rid of `BorrowckInferContext::reg_var_to_origin`\n+            // or modify how we track nll region vars for that map.\n+            assert!(matches!(prev, None));\n+        }\n+\n+        next_region\n+    }\n+\n+    #[instrument(skip(self, get_ctxt_fn), level = \"debug\")]\n+    pub(crate) fn next_nll_region_var<F>(\n+        &self,\n+        origin: NllRegionVariableOrigin,\n+        get_ctxt_fn: F,\n+    ) -> ty::Region<'tcx>\n+    where\n+        F: Fn() -> RegionCtxt,\n+    {\n+        let next_region = self.infcx.next_nll_region_var(origin.clone());\n+        let vid = next_region\n+            .as_var()\n+            .unwrap_or_else(|| bug!(\"expected RegionKind::RegionVar on {:?}\", next_region));\n+\n+        if cfg!(debug_assertions) {\n+            debug!(\"inserting vid {:?} with origin {:?} into var_to_origin\", vid, origin);\n+            let ctxt = get_ctxt_fn();\n+            let mut var_to_origin = self.reg_var_to_origin.borrow_mut();\n+            let prev = var_to_origin.insert(vid, ctxt);\n+\n+            // This only makes sense if not called in a canonicalization context. If this\n+            // ever changes we either want to get rid of `BorrowckInferContext::reg_var_to_origin`\n+            // or modify how we track nll region vars for that map.\n+            assert!(matches!(prev, None));\n+        }\n+\n+        next_region\n+    }\n+}\n+\n+impl<'cx, 'tcx> Deref for BorrowckInferCtxt<'cx, 'tcx> {\n+    type Target = InferCtxt<'tcx>;\n+\n+    fn deref(&self) -> &'cx Self::Target {\n+        self.infcx\n+    }\n+}\n+\n struct MirBorrowckCtxt<'cx, 'tcx> {\n-    infcx: &'cx InferCtxt<'tcx>,\n+    infcx: &'cx BorrowckInferCtxt<'cx, 'tcx>,\n     param_env: ParamEnv<'tcx>,\n     body: &'cx Body<'tcx>,\n     move_data: &'cx MoveData<'tcx>,"}, {"sha": "e5dbb83dd0728e6951daa40bef2a62e1bde61d1f", "filename": "compiler/rustc_borrowck/src/nll.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fnll.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -5,7 +5,6 @@\n use rustc_data_structures::vec_map::VecMap;\n use rustc_hir::def_id::LocalDefId;\n use rustc_index::vec::IndexVec;\n-use rustc_infer::infer::InferCtxt;\n use rustc_middle::mir::{create_dump_file, dump_enabled, dump_mir, PassWhere};\n use rustc_middle::mir::{\n     BasicBlock, Body, ClosureOutlivesSubject, ClosureRegionRequirements, LocalKind, Location,\n@@ -37,7 +36,7 @@ use crate::{\n     renumber,\n     type_check::{self, MirTypeckRegionConstraints, MirTypeckResults},\n     universal_regions::UniversalRegions,\n-    Upvar,\n+    BorrowckInferCtxt, Upvar,\n };\n \n pub type PoloniusOutput = Output<RustcFacts>;\n@@ -58,7 +57,7 @@ pub(crate) struct NllOutput<'tcx> {\n /// `compute_regions`.\n #[instrument(skip(infcx, param_env, body, promoted), level = \"debug\")]\n pub(crate) fn replace_regions_in_mir<'tcx>(\n-    infcx: &InferCtxt<'tcx>,\n+    infcx: &BorrowckInferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &mut Body<'tcx>,\n     promoted: &mut IndexVec<Promoted, Body<'tcx>>,\n@@ -157,7 +156,7 @@ fn populate_polonius_move_facts(\n ///\n /// This may result in errors being reported.\n pub(crate) fn compute_regions<'cx, 'tcx>(\n-    infcx: &InferCtxt<'tcx>,\n+    infcx: &BorrowckInferCtxt<'_, 'tcx>,\n     universal_regions: UniversalRegions<'tcx>,\n     body: &Body<'tcx>,\n     promoted: &IndexVec<Promoted, Body<'tcx>>,\n@@ -259,6 +258,7 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n     );\n \n     let mut regioncx = RegionInferenceContext::new(\n+        infcx,\n         var_origins,\n         universal_regions,\n         placeholder_indices,\n@@ -322,7 +322,7 @@ pub(crate) fn compute_regions<'cx, 'tcx>(\n }\n \n pub(super) fn dump_mir_results<'tcx>(\n-    infcx: &InferCtxt<'tcx>,\n+    infcx: &BorrowckInferCtxt<'_, 'tcx>,\n     body: &Body<'tcx>,\n     regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,\n@@ -372,7 +372,7 @@ pub(super) fn dump_mir_results<'tcx>(\n #[allow(rustc::diagnostic_outside_of_impl)]\n #[allow(rustc::untranslatable_diagnostic)]\n pub(super) fn dump_annotation<'tcx>(\n-    infcx: &InferCtxt<'tcx>,\n+    infcx: &BorrowckInferCtxt<'_, 'tcx>,\n     body: &Body<'tcx>,\n     regioncx: &RegionInferenceContext<'tcx>,\n     closure_region_requirements: &Option<ClosureRegionRequirements<'_>>,"}, {"sha": "8c374c2164c7b2942c148999cabc4d73ec539da6", "filename": "compiler/rustc_borrowck/src/region_infer/mod.rs", "status": "modified", "additions": 76, "deletions": 1, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fmod.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -34,6 +34,7 @@ use crate::{\n     },\n     type_check::{free_region_relations::UniversalRegionRelations, Locations},\n     universal_regions::UniversalRegions,\n+    BorrowckInferCtxt,\n };\n \n mod dump_mir;\n@@ -243,6 +244,70 @@ pub enum ExtraConstraintInfo {\n     PlaceholderFromPredicate(Span),\n }\n \n+#[instrument(skip(infcx, sccs), level = \"debug\")]\n+fn sccs_info<'cx, 'tcx>(\n+    infcx: &'cx BorrowckInferCtxt<'cx, 'tcx>,\n+    sccs: Rc<Sccs<RegionVid, ConstraintSccIndex>>,\n+) {\n+    use crate::renumber::RegionCtxt;\n+\n+    let var_to_origin = infcx.reg_var_to_origin.borrow();\n+\n+    let mut var_to_origin_sorted = var_to_origin.clone().into_iter().collect::<Vec<_>>();\n+    var_to_origin_sorted.sort_by(|a, b| a.0.cmp(&b.0));\n+    let mut debug_str = \"region variables to origins:\\n\".to_string();\n+    for (reg_var, origin) in var_to_origin_sorted.into_iter() {\n+        debug_str.push_str(&format!(\"{:?}: {:?}\\n\", reg_var, origin));\n+    }\n+    debug!(debug_str);\n+\n+    let num_components = sccs.scc_data().ranges().len();\n+    let mut components = vec![FxHashSet::default(); num_components];\n+\n+    for (reg_var_idx, scc_idx) in sccs.scc_indices().iter().enumerate() {\n+        let reg_var = ty::RegionVid::from_usize(reg_var_idx);\n+        let origin = var_to_origin.get(&reg_var).unwrap_or_else(|| &RegionCtxt::Unknown);\n+        components[scc_idx.as_usize()].insert((reg_var, *origin));\n+    }\n+\n+    let mut components_str = \"strongly connected components:\".to_string();\n+    for (scc_idx, reg_vars_origins) in components.iter().enumerate() {\n+        let regions_info = reg_vars_origins.clone().into_iter().collect::<Vec<_>>();\n+        components_str.push_str(&format!(\n+            \"{:?}: {:?})\",\n+            ConstraintSccIndex::from_usize(scc_idx),\n+            regions_info,\n+        ))\n+    }\n+    debug!(components_str);\n+\n+    // calculate the best representative for each component\n+    let components_representatives = components\n+        .into_iter()\n+        .enumerate()\n+        .map(|(scc_idx, region_ctxts)| {\n+            let repr = region_ctxts\n+                .into_iter()\n+                .map(|reg_var_origin| reg_var_origin.1)\n+                .max_by(|x, y| x.preference_value().cmp(&y.preference_value()))\n+                .unwrap();\n+\n+            (ConstraintSccIndex::from_usize(scc_idx), repr)\n+        })\n+        .collect::<FxHashMap<_, _>>();\n+\n+    let mut scc_node_to_edges = FxHashMap::default();\n+    for (scc_idx, repr) in components_representatives.iter() {\n+        let edges_range = sccs.scc_data().ranges()[*scc_idx].clone();\n+        let edges = &sccs.scc_data().all_successors()[edges_range];\n+        let edge_representatives =\n+            edges.iter().map(|scc_idx| components_representatives[scc_idx]).collect::<Vec<_>>();\n+        scc_node_to_edges.insert((scc_idx, repr), edge_representatives);\n+    }\n+\n+    debug!(\"SCC edges {:#?}\", scc_node_to_edges);\n+}\n+\n impl<'tcx> RegionInferenceContext<'tcx> {\n     /// Creates a new region inference context with a total of\n     /// `num_region_variables` valid inference variables; the first N\n@@ -251,7 +316,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n     ///\n     /// The `outlives_constraints` and `type_tests` are an initial set\n     /// of constraints produced by the MIR type check.\n-    pub(crate) fn new(\n+    pub(crate) fn new<'cx>(\n+        _infcx: &BorrowckInferCtxt<'cx, 'tcx>,\n         var_infos: VarInfos,\n         universal_regions: Rc<UniversalRegions<'tcx>>,\n         placeholder_indices: Rc<PlaceholderIndices>,\n@@ -263,6 +329,11 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         liveness_constraints: LivenessValues<RegionVid>,\n         elements: &Rc<RegionValueElements>,\n     ) -> Self {\n+        debug!(\"universal_regions: {:#?}\", universal_regions);\n+        debug!(\"outlives constraints: {:#?}\", outlives_constraints);\n+        debug!(\"placeholder_indices: {:#?}\", placeholder_indices);\n+        debug!(\"type tests: {:#?}\", type_tests);\n+\n         // Create a RegionDefinition for each inference variable.\n         let definitions: IndexVec<_, _> = var_infos\n             .iter()\n@@ -274,6 +345,10 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let fr_static = universal_regions.fr_static;\n         let constraint_sccs = Rc::new(constraints.compute_sccs(&constraint_graph, fr_static));\n \n+        if cfg!(debug_assertions) {\n+            sccs_info(_infcx, constraint_sccs.clone());\n+        }\n+\n         let mut scc_values =\n             RegionValues::new(elements, universal_regions.len(), &placeholder_indices);\n "}, {"sha": "c361357ca2134462f55a0be0b281010362b409c8", "filename": "compiler/rustc_borrowck/src/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fvalues.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -181,7 +181,7 @@ impl<N: Idx> LivenessValues<N> {\n /// Maps from `ty::PlaceholderRegion` values that are used in the rest of\n /// rustc to the internal `PlaceholderIndex` values that are used in\n /// NLL.\n-#[derive(Default)]\n+#[derive(Debug, Default)]\n pub(crate) struct PlaceholderIndices {\n     indices: FxIndexSet<ty::PlaceholderRegion>,\n }"}, {"sha": "960dedc74efbbaf6db2dc869b964f26b91a31f16", "filename": "compiler/rustc_borrowck/src/renumber.rs", "status": "modified", "additions": 55, "deletions": 12, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Frenumber.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -1,18 +1,20 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n+use crate::BorrowckInferCtxt;\n use rustc_index::vec::IndexVec;\n-use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n+use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::mir::visit::{MutVisitor, TyContext};\n use rustc_middle::mir::Constant;\n use rustc_middle::mir::{Body, Location, Promoted};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc_span::{Span, Symbol};\n \n /// Replaces all free regions appearing in the MIR with fresh\n /// inference variables, returning the number of variables created.\n #[instrument(skip(infcx, body, promoted), level = \"debug\")]\n pub fn renumber_mir<'tcx>(\n-    infcx: &InferCtxt<'tcx>,\n+    infcx: &BorrowckInferCtxt<'_, 'tcx>,\n     body: &mut Body<'tcx>,\n     promoted: &mut IndexVec<Promoted, Body<'tcx>>,\n ) {\n@@ -29,27 +31,68 @@ pub fn renumber_mir<'tcx>(\n \n /// Replaces all regions appearing in `value` with fresh inference\n /// variables.\n-#[instrument(skip(infcx), level = \"debug\")]\n-pub fn renumber_regions<'tcx, T>(infcx: &InferCtxt<'tcx>, value: T) -> T\n+#[instrument(skip(infcx, get_ctxt_fn), level = \"debug\")]\n+pub(crate) fn renumber_regions<'tcx, T, F>(\n+    infcx: &BorrowckInferCtxt<'_, 'tcx>,\n+    value: T,\n+    get_ctxt_fn: F,\n+) -> T\n where\n     T: TypeFoldable<'tcx>,\n+    F: Fn() -> RegionCtxt,\n {\n     infcx.tcx.fold_regions(value, |_region, _depth| {\n         let origin = NllRegionVariableOrigin::Existential { from_forall: false };\n-        infcx.next_nll_region_var(origin)\n+        infcx.next_nll_region_var(origin, || get_ctxt_fn())\n     })\n }\n \n+#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n+pub(crate) enum BoundRegionInfo {\n+    Name(Symbol),\n+    Span(Span),\n+}\n+\n+#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]\n+pub(crate) enum RegionCtxt {\n+    Location(Location),\n+    TyContext(TyContext),\n+    Free(Symbol),\n+    Bound(BoundRegionInfo),\n+    LateBound(BoundRegionInfo),\n+    Existential(Option<Symbol>),\n+    Placeholder(BoundRegionInfo),\n+    Unknown,\n+}\n+\n+impl RegionCtxt {\n+    /// Used to determine the representative of a component in the strongly connected\n+    /// constraint graph\n+    pub(crate) fn preference_value(self) -> usize {\n+        let _anon = Symbol::intern(\"anon\");\n+\n+        match self {\n+            RegionCtxt::Unknown => 1,\n+            RegionCtxt::Existential(None) => 2,\n+            RegionCtxt::Existential(Some(_anon)) | RegionCtxt::Free(_anon) => 2,\n+            RegionCtxt::Location(_) => 3,\n+            RegionCtxt::TyContext(_) => 4,\n+            _ => 5,\n+        }\n+    }\n+}\n+\n struct NllVisitor<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'tcx>,\n+    infcx: &'a BorrowckInferCtxt<'a, 'tcx>,\n }\n \n impl<'a, 'tcx> NllVisitor<'a, 'tcx> {\n-    fn renumber_regions<T>(&mut self, value: T) -> T\n+    fn renumber_regions<T, F>(&mut self, value: T, region_ctxt_fn: F) -> T\n     where\n         T: TypeFoldable<'tcx>,\n+        F: Fn() -> RegionCtxt,\n     {\n-        renumber_regions(self.infcx, value)\n+        renumber_regions(self.infcx, value, region_ctxt_fn)\n     }\n }\n \n@@ -60,30 +103,30 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NllVisitor<'a, 'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_ty(&mut self, ty: &mut Ty<'tcx>, ty_context: TyContext) {\n-        *ty = self.renumber_regions(*ty);\n+        *ty = self.renumber_regions(*ty, || RegionCtxt::TyContext(ty_context));\n \n         debug!(?ty);\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_substs(&mut self, substs: &mut SubstsRef<'tcx>, location: Location) {\n-        *substs = self.renumber_regions(*substs);\n+        *substs = self.renumber_regions(*substs, || RegionCtxt::Location(location));\n \n         debug!(?substs);\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_region(&mut self, region: &mut ty::Region<'tcx>, location: Location) {\n         let old_region = *region;\n-        *region = self.renumber_regions(old_region);\n+        *region = self.renumber_regions(old_region, || RegionCtxt::Location(location));\n \n         debug!(?region);\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn visit_constant(&mut self, constant: &mut Constant<'tcx>, _location: Location) {\n         let literal = constant.literal;\n-        constant.literal = self.renumber_regions(literal);\n+        constant.literal = self.renumber_regions(literal, || RegionCtxt::Location(_location));\n         debug!(\"constant: {:#?}\", constant);\n     }\n }"}, {"sha": "f14f8f1906be737e048f49aa23072d4103db9a3b", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 32, "deletions": 9, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -64,7 +64,7 @@ use crate::{\n     region_infer::TypeTest,\n     type_check::free_region_relations::{CreateResult, UniversalRegionRelations},\n     universal_regions::{DefiningTy, UniversalRegions},\n-    Upvar,\n+    BorrowckInferCtxt, Upvar,\n };\n \n macro_rules! span_mirbug {\n@@ -123,7 +123,7 @@ mod relate_tys;\n /// - `move_data` -- move-data constructed when performing the maybe-init dataflow analysis\n /// - `elements` -- MIR region map\n pub(crate) fn type_check<'mir, 'tcx>(\n-    infcx: &InferCtxt<'tcx>,\n+    infcx: &BorrowckInferCtxt<'_, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     body: &Body<'tcx>,\n     promoted: &IndexVec<Promoted, Body<'tcx>>,\n@@ -866,7 +866,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n /// way, it accrues region constraints -- these can later be used by\n /// NLL region checking.\n struct TypeChecker<'a, 'tcx> {\n-    infcx: &'a InferCtxt<'tcx>,\n+    infcx: &'a BorrowckInferCtxt<'a, 'tcx>,\n     param_env: ty::ParamEnv<'tcx>,\n     last_span: Span,\n     body: &'a Body<'tcx>,\n@@ -1019,7 +1019,7 @@ impl Locations {\n \n impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn new(\n-        infcx: &'a InferCtxt<'tcx>,\n+        infcx: &'a BorrowckInferCtxt<'a, 'tcx>,\n         body: &'a Body<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         region_bound_pairs: &'a RegionBoundPairs<'tcx>,\n@@ -1356,11 +1356,34 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                     }\n                 };\n                 let (sig, map) = tcx.replace_late_bound_regions(sig, |br| {\n-                    self.infcx.next_region_var(LateBoundRegion(\n-                        term.source_info.span,\n-                        br.kind,\n-                        LateBoundRegionConversionTime::FnCall,\n-                    ))\n+                    use crate::renumber::{BoundRegionInfo, RegionCtxt};\n+                    use rustc_span::Symbol;\n+\n+                    let region_ctxt_fn = || {\n+                        let reg_info = match br.kind {\n+                            ty::BoundRegionKind::BrAnon(_, Some(span)) => {\n+                                BoundRegionInfo::Span(span)\n+                            }\n+                            ty::BoundRegionKind::BrAnon(..) => {\n+                                BoundRegionInfo::Name(Symbol::intern(\"anon\"))\n+                            }\n+                            ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),\n+                            ty::BoundRegionKind::BrEnv => {\n+                                BoundRegionInfo::Name(Symbol::intern(\"env\"))\n+                            }\n+                        };\n+\n+                        RegionCtxt::LateBound(reg_info)\n+                    };\n+\n+                    self.infcx.next_region_var(\n+                        LateBoundRegion(\n+                            term.source_info.span,\n+                            br.kind,\n+                            LateBoundRegionConversionTime::FnCall,\n+                        ),\n+                        region_ctxt_fn,\n+                    )\n                 });\n                 debug!(?sig);\n                 // IMPORTANT: We have to prove well formed for the function signature before"}, {"sha": "d96372fb99baab5c4c38b4228dee79ca0bb340c3", "filename": "compiler/rustc_borrowck/src/type_check/relate_tys.rs", "status": "modified", "additions": 50, "deletions": 7, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Frelate_tys.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -4,11 +4,12 @@ use rustc_infer::traits::PredicateObligations;\n use rustc_middle::mir::ConstraintCategory;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{self, Ty};\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n use rustc_trait_selection::traits::query::Fallible;\n \n use crate::constraints::OutlivesConstraint;\n use crate::diagnostics::UniverseInfo;\n+use crate::renumber::{BoundRegionInfo, RegionCtxt};\n use crate::type_check::{InstantiateOpaqueType, Locations, TypeChecker};\n \n impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n@@ -100,23 +101,65 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for NllTypeRelatingDelegate<'_, '_, 'tcx>\n         universe\n     }\n \n-    fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n+    #[instrument(skip(self), level = \"debug\")]\n+    fn next_existential_region_var(\n+        &mut self,\n+        from_forall: bool,\n+        _name: Option<Symbol>,\n+    ) -> ty::Region<'tcx> {\n         let origin = NllRegionVariableOrigin::Existential { from_forall };\n-        self.type_checker.infcx.next_nll_region_var(origin)\n+\n+        let reg_var =\n+            self.type_checker.infcx.next_nll_region_var(origin, || RegionCtxt::Existential(_name));\n+\n+        reg_var\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n     fn next_placeholder_region(&mut self, placeholder: ty::PlaceholderRegion) -> ty::Region<'tcx> {\n-        self.type_checker\n+        let reg = self\n+            .type_checker\n             .borrowck_context\n             .constraints\n-            .placeholder_region(self.type_checker.infcx, placeholder)\n+            .placeholder_region(self.type_checker.infcx, placeholder);\n+\n+        let reg_info = match placeholder.name {\n+            ty::BoundRegionKind::BrAnon(_, Some(span)) => BoundRegionInfo::Span(span),\n+            ty::BoundRegionKind::BrAnon(..) => BoundRegionInfo::Name(Symbol::intern(\"anon\")),\n+            ty::BoundRegionKind::BrNamed(_, name) => BoundRegionInfo::Name(name),\n+            ty::BoundRegionKind::BrEnv => BoundRegionInfo::Name(Symbol::intern(\"env\")),\n+        };\n+\n+        let reg_var =\n+            reg.as_var().unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n+        let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n+        let prev = var_to_origin.insert(reg_var, RegionCtxt::Placeholder(reg_info));\n+        assert!(matches!(prev, None));\n+\n+        reg\n     }\n \n+    #[instrument(skip(self), level = \"debug\")]\n     fn generalize_existential(&mut self, universe: ty::UniverseIndex) -> ty::Region<'tcx> {\n-        self.type_checker.infcx.next_nll_region_var_in_universe(\n+        let reg = self.type_checker.infcx.next_nll_region_var_in_universe(\n             NllRegionVariableOrigin::Existential { from_forall: false },\n             universe,\n-        )\n+        );\n+\n+        let reg_var =\n+            reg.as_var().unwrap_or_else(|| bug!(\"expected region {:?} to be of kind ReVar\", reg));\n+\n+        if cfg!(debug_assertions) {\n+            let mut var_to_origin = self.type_checker.infcx.reg_var_to_origin.borrow_mut();\n+            let prev = var_to_origin.insert(reg_var, RegionCtxt::Existential(None));\n+\n+            // It only makes sense to track region vars in non-canonicalization contexts. If this\n+            // ever changes we either want to get rid of `BorrowckInferContext::reg_var_to_origin`\n+            // or modify how we track nll region vars for that map.\n+            assert!(matches!(prev, None));\n+        }\n+\n+        reg\n     }\n \n     fn push_outlives("}, {"sha": "f3ca896cd0de1d3598261a3ec8c6d48cefe2eacb", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 88, "deletions": 15, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -20,15 +20,18 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{BodyOwnerKind, HirId};\n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_infer::infer::{InferCtxt, NllRegionVariableOrigin};\n+use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::{\n     self, DefIdTree, InlineConstSubsts, InlineConstSubstsParts, RegionVid, Ty, TyCtxt,\n };\n use rustc_middle::ty::{InternalSubsts, SubstsRef};\n+use rustc_span::Symbol;\n use std::iter;\n \n use crate::nll::ToRegionVid;\n+use crate::renumber::{BoundRegionInfo, RegionCtxt};\n+use crate::BorrowckInferCtxt;\n \n #[derive(Debug)]\n pub struct UniversalRegions<'tcx> {\n@@ -224,7 +227,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n     /// signature. This will also compute the relationships that are\n     /// known between those regions.\n     pub fn new(\n-        infcx: &InferCtxt<'tcx>,\n+        infcx: &BorrowckInferCtxt<'_, 'tcx>,\n         mir_def: ty::WithOptConstParam<LocalDefId>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n@@ -385,7 +388,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n }\n \n struct UniversalRegionsBuilder<'cx, 'tcx> {\n-    infcx: &'cx InferCtxt<'tcx>,\n+    infcx: &'cx BorrowckInferCtxt<'cx, 'tcx>,\n     mir_def: ty::WithOptConstParam<LocalDefId>,\n     mir_hir_id: HirId,\n     param_env: ty::ParamEnv<'tcx>,\n@@ -403,7 +406,10 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         assert_eq!(FIRST_GLOBAL_INDEX, self.infcx.num_region_vars());\n \n         // Create the \"global\" region that is always free in all contexts: 'static.\n-        let fr_static = self.infcx.next_nll_region_var(FR).to_region_vid();\n+        let fr_static = self\n+            .infcx\n+            .next_nll_region_var(FR, || RegionCtxt::Free(Symbol::intern(\"static\")))\n+            .to_region_vid();\n \n         // We've now added all the global regions. The next ones we\n         // add will be external.\n@@ -435,7 +441,17 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                 |r| {\n                     debug!(?r);\n                     if !indices.indices.contains_key(&r) {\n-                        let region_vid = self.infcx.next_nll_region_var(FR);\n+                        let region_vid = {\n+                            let name = match r.get_name() {\n+                                Some(name) => name,\n+                                _ => Symbol::intern(\"anon\"),\n+                            };\n+\n+                            self.infcx.next_nll_region_var(FR, || {\n+                                RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n+                            })\n+                        };\n+\n                         debug!(?region_vid);\n                         indices.insert_late_bound_region(r, region_vid.to_region_vid());\n                     }\n@@ -463,7 +479,17 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n         for_each_late_bound_region_in_item(self.infcx.tcx, self.mir_def.did, |r| {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n-                let region_vid = self.infcx.next_nll_region_var(FR);\n+                let region_vid = {\n+                    let name = match r.get_name() {\n+                        Some(name) => name,\n+                        _ => Symbol::intern(\"anon\"),\n+                    };\n+\n+                    self.infcx.next_nll_region_var(FR, || {\n+                        RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n+                    })\n+                };\n+\n                 debug!(?region_vid);\n                 indices.insert_late_bound_region(r, region_vid.to_region_vid());\n             }\n@@ -480,8 +506,13 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                     LangItem::VaList,\n                     Some(self.infcx.tcx.def_span(self.mir_def.did)),\n                 );\n-                let region =\n-                    self.infcx.tcx.mk_re_var(self.infcx.next_nll_region_var(FR).to_region_vid());\n+\n+                let reg_vid = self\n+                    .infcx\n+                    .next_nll_region_var(FR, || RegionCtxt::Free(Symbol::intern(\"c-variadic\")))\n+                    .to_region_vid();\n+\n+                let region = self.infcx.tcx.mk_re_var(reg_vid);\n                 let va_list_ty =\n                     self.infcx.tcx.type_of(va_list_did).subst(self.infcx.tcx, &[region.into()]);\n \n@@ -491,7 +522,11 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             }\n         }\n \n-        let fr_fn_body = self.infcx.next_nll_region_var(FR).to_region_vid();\n+        let fr_fn_body = self\n+            .infcx\n+            .next_nll_region_var(FR, || RegionCtxt::Free(Symbol::intern(\"fn_body\")))\n+            .to_region_vid();\n+\n         let num_universals = self.infcx.num_region_vars();\n \n         debug!(\"build: global regions = {}..{}\", FIRST_GLOBAL_INDEX, first_extern_index);\n@@ -718,7 +753,8 @@ trait InferCtxtExt<'tcx> {\n     );\n }\n \n-impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n+impl<'cx, 'tcx> InferCtxtExt<'tcx> for BorrowckInferCtxt<'cx, 'tcx> {\n+    #[instrument(skip(self), level = \"debug\")]\n     fn replace_free_regions_with_nll_infer_vars<T>(\n         &self,\n         origin: NllRegionVariableOrigin,\n@@ -727,7 +763,17 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n     where\n         T: TypeFoldable<'tcx>,\n     {\n-        self.tcx.fold_regions(value, |_region, _depth| self.next_nll_region_var(origin))\n+        self.infcx.tcx.fold_regions(value, |region, _depth| {\n+            let name = match region.get_name() {\n+                Some(name) => name,\n+                _ => Symbol::intern(\"anon\"),\n+            };\n+            debug!(?region, ?name);\n+\n+            let reg_var = self.next_nll_region_var(origin, || RegionCtxt::Free(name));\n+\n+            reg_var\n+        })\n     }\n \n     #[instrument(level = \"debug\", skip(self, indices))]\n@@ -744,7 +790,15 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         let (value, _map) = self.tcx.replace_late_bound_regions(value, |br| {\n             debug!(?br);\n             let liberated_region = self.tcx.mk_re_free(all_outlive_scope.to_def_id(), br.kind);\n-            let region_vid = self.next_nll_region_var(origin);\n+            let region_vid = {\n+                let name = match br.kind.get_name() {\n+                    Some(name) => name,\n+                    _ => Symbol::intern(\"anon\"),\n+                };\n+\n+                self.next_nll_region_var(origin, || RegionCtxt::Bound(BoundRegionInfo::Name(name)))\n+            };\n+\n             indices.insert_late_bound_region(liberated_region, region_vid.to_region_vid());\n             debug!(?liberated_region, ?region_vid);\n             region_vid\n@@ -770,7 +824,17 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         for_each_late_bound_region_in_recursive_scope(self.tcx, mir_def_id, |r| {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n-                let region_vid = self.next_nll_region_var(FR);\n+                let region_vid = {\n+                    let name = match r.get_name() {\n+                        Some(name) => name,\n+                        _ => Symbol::intern(\"anon\"),\n+                    };\n+\n+                    self.next_nll_region_var(FR, || {\n+                        RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n+                    })\n+                };\n+\n                 debug!(?region_vid);\n                 indices.insert_late_bound_region(r, region_vid.to_region_vid());\n             }\n@@ -786,8 +850,17 @@ impl<'tcx> InferCtxtExt<'tcx> for InferCtxt<'tcx> {\n         for_each_late_bound_region_in_item(self.tcx, mir_def_id, |r| {\n             debug!(?r);\n             if !indices.indices.contains_key(&r) {\n-                let region_vid = self.next_nll_region_var(FR);\n-                debug!(?region_vid);\n+                let region_vid = {\n+                    let name = match r.get_name() {\n+                        Some(name) => name,\n+                        _ => Symbol::intern(\"anon\"),\n+                    };\n+\n+                    self.next_nll_region_var(FR, || {\n+                        RegionCtxt::LateBound(BoundRegionInfo::Name(name))\n+                    })\n+                };\n+\n                 indices.insert_late_bound_region(r, region_vid.to_region_vid());\n             }\n         });"}, {"sha": "c4b11951ab7a08d477005d57ea2e2eb03a032887", "filename": "compiler/rustc_data_structures/src/graph/scc/mod.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fscc%2Fmod.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -27,7 +27,7 @@ pub struct Sccs<N: Idx, S: Idx> {\n     scc_data: SccData<S>,\n }\n \n-struct SccData<S: Idx> {\n+pub struct SccData<S: Idx> {\n     /// For each SCC, the range of `all_successors` where its\n     /// successors can be found.\n     ranges: IndexVec<S, Range<usize>>,\n@@ -43,6 +43,14 @@ impl<N: Idx, S: Idx + Ord> Sccs<N, S> {\n         SccsConstruction::construct(graph)\n     }\n \n+    pub fn scc_indices(&self) -> &IndexVec<N, S> {\n+        &self.scc_indices\n+    }\n+\n+    pub fn scc_data(&self) -> &SccData<S> {\n+        &self.scc_data\n+    }\n+\n     /// Returns the number of SCCs in the graph.\n     pub fn num_sccs(&self) -> usize {\n         self.scc_data.len()\n@@ -115,6 +123,14 @@ impl<S: Idx> SccData<S> {\n         self.ranges.len()\n     }\n \n+    pub fn ranges(&self) -> &IndexVec<S, Range<usize>> {\n+        &self.ranges\n+    }\n+\n+    pub fn all_successors(&self) -> &Vec<S> {\n+        &self.all_successors\n+    }\n+\n     /// Returns the successors of the given SCC.\n     fn successors(&self, scc: S) -> &[S] {\n         // Annoyingly, `range` does not implement `Copy`, so we have"}, {"sha": "f8d28817fec88a70a784ba3e1868e251f1291782", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -124,3 +124,6 @@ hir_analysis_linkage_type =\n hir_analysis_auto_deref_reached_recursion_limit = reached the recursion limit while auto-dereferencing `{$ty}`\n     .label = deref recursion limit reached\n     .help = consider increasing the recursion limit by adding a `#![recursion_limit = \"{$suggested_limit}\"]` attribute to your crate (`{$crate_name}`)\n+\n+hir_analysis_track_caller_on_main = `main` function is not allowed to be `#[track_caller]`\n+    .label = `main` function is not allowed to be `#[track_caller]`"}, {"sha": "f3c3c02a05f3fda70ec7a0535c0a03f8d64c4c99", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -312,3 +312,12 @@ pub struct AutoDerefReachedRecursionLimit<'a> {\n     pub suggested_limit: rustc_session::Limit,\n     pub crate_name: Symbol,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_track_caller_on_main)]\n+pub(crate) struct TrackCallerOnMain {\n+    #[primary_span]\n+    pub span: Span,\n+    #[label]\n+    pub annotated: Span,\n+}"}, {"sha": "73a7137666264093ee974e891c68cc09c116e828", "filename": "compiler/rustc_hir_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Flib.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -297,10 +297,7 @@ fn check_main_fn_ty(tcx: TyCtxt<'_>, main_def_id: DefId) {\n     }\n \n     for attr in tcx.get_attrs(main_def_id, sym::track_caller) {\n-        tcx.sess\n-            .struct_span_err(attr.span, \"`main` function is not allowed to be `#[track_caller]`\")\n-            .span_label(main_span, \"`main` function is not allowed to be `#[track_caller]`\")\n-            .emit();\n+        tcx.sess.emit_err(errors::TrackCallerOnMain { span: attr.span, annotated: main_span });\n         error = true;\n     }\n "}, {"sha": "e993fb4c22bb989d33c73d2f60e2190696284ff9", "filename": "compiler/rustc_infer/src/infer/canonical/query_response.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcanonical%2Fquery_response.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -27,7 +27,7 @@ use rustc_middle::ty::fold::TypeFoldable;\n use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, BoundVar, ToPredicate, Ty, TyCtxt};\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n use std::fmt::Debug;\n use std::iter;\n \n@@ -683,7 +683,11 @@ impl<'tcx> TypeRelatingDelegate<'tcx> for QueryTypeRelatingDelegate<'_, 'tcx> {\n         self.infcx.create_next_universe()\n     }\n \n-    fn next_existential_region_var(&mut self, from_forall: bool) -> ty::Region<'tcx> {\n+    fn next_existential_region_var(\n+        &mut self,\n+        from_forall: bool,\n+        _name: Option<Symbol>,\n+    ) -> ty::Region<'tcx> {\n         let origin = NllRegionVariableOrigin::Existential { from_forall };\n         self.infcx.next_nll_region_var(origin)\n     }"}, {"sha": "29c9af5c43fb9b227cf4a6ae9001ff7c1f0362aa", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -1111,11 +1111,13 @@ impl<'tcx> InferCtxt<'tcx> {\n     }\n \n     /// Just a convenient wrapper of `next_region_var` for using during NLL.\n+    #[instrument(skip(self), level = \"debug\")]\n     pub fn next_nll_region_var(&self, origin: NllRegionVariableOrigin) -> ty::Region<'tcx> {\n         self.next_region_var(RegionVariableOrigin::Nll(origin))\n     }\n \n     /// Just a convenient wrapper of `next_region_var` for using during NLL.\n+    #[instrument(skip(self), level = \"debug\")]\n     pub fn next_nll_region_var_in_universe(\n         &self,\n         origin: NllRegionVariableOrigin,"}, {"sha": "954334e88b0cbf7d87dd2cb19c63d6c81750fa62", "filename": "compiler/rustc_infer/src/infer/nll_relate/mod.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fnll_relate%2Fmod.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -31,7 +31,7 @@ use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::relate::{self, Relate, RelateResult, TypeRelation};\n use rustc_middle::ty::visit::{ir::TypeVisitor, TypeSuperVisitable, TypeVisitable};\n use rustc_middle::ty::{self, InferConst, Ty, TyCtxt};\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n use std::fmt::Debug;\n use std::ops::ControlFlow;\n \n@@ -100,7 +100,11 @@ pub trait TypeRelatingDelegate<'tcx> {\n     /// we will invoke this method to instantiate `'a` with an\n     /// inference variable (though `'b` would be instantiated first,\n     /// as a placeholder).\n-    fn next_existential_region_var(&mut self, was_placeholder: bool) -> ty::Region<'tcx>;\n+    fn next_existential_region_var(\n+        &mut self,\n+        was_placeholder: bool,\n+        name: Option<Symbol>,\n+    ) -> ty::Region<'tcx>;\n \n     /// Creates a new region variable representing a\n     /// higher-ranked region that is instantiated universally.\n@@ -188,7 +192,7 @@ where\n                     let placeholder = ty::PlaceholderRegion { universe, name: br.kind };\n                     delegate.next_placeholder_region(placeholder)\n                 } else {\n-                    delegate.next_existential_region_var(true)\n+                    delegate.next_existential_region_var(true, br.kind.get_name())\n                 }\n             }\n         };"}, {"sha": "2f7c496161bca1d29ab46ca7c3c397392105cb30", "filename": "compiler/rustc_infer/src/infer/outlives/test_type_match.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Ftest_type_match.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -186,7 +186,8 @@ impl<'tcx> TypeRelation<'tcx> for Match<'tcx> {\n \n     #[instrument(skip(self), level = \"debug\")]\n     fn tys(&mut self, pattern: Ty<'tcx>, value: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n-        if let ty::Error(_) = pattern.kind() {\n+        // FIXME(non_lifetime_binders): What to do here?\n+        if matches!(pattern.kind(), ty::Error(_) | ty::Bound(..)) {\n             // Unlike normal `TypeRelation` rules, `ty::Error` does not equal any type.\n             self.no_match()\n         } else if pattern == value {"}, {"sha": "7f0935fb149fa4863020777bf93a5ead94eb315a", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -1214,7 +1214,7 @@ impl<'tcx> MirVisitable<'tcx> for Option<Terminator<'tcx>> {\n \n /// Extra information passed to `visit_ty` and friends to give context\n /// about where the type etc appears.\n-#[derive(Debug)]\n+#[derive(Copy, Clone, Debug, Hash, Eq, PartialEq)]\n pub enum TyContext {\n     LocalDecl {\n         /// The index of the local variable we are visiting."}, {"sha": "35ff71d888501915dfd7f02c8a0ab34e0dac4158", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -1751,6 +1751,13 @@ impl<'tcx> Region<'tcx> {\n     pub fn is_var(self) -> bool {\n         matches!(self.kind(), ty::ReVar(_))\n     }\n+\n+    pub fn as_var(self) -> Option<RegionVid> {\n+        match self.kind() {\n+            ty::ReVar(vid) => Some(vid),\n+            _ => None,\n+        }\n+    }\n }\n \n /// Type utilities"}, {"sha": "cff3da720fc5c79cfb32a490644cd35c269d3fbd", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 105, "deletions": 132, "changes": 237, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -13,11 +13,7 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::{\n     MutVisitor, MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor,\n };\n-use rustc_middle::mir::{\n-    BasicBlock, BinOp, Body, Constant, ConstantKind, Local, LocalDecl, LocalKind, Location,\n-    Operand, Place, Rvalue, SourceInfo, Statement, StatementKind, Terminator, TerminatorKind,\n-    RETURN_PLACE,\n-};\n+use rustc_middle::mir::*;\n use rustc_middle::ty::layout::{LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::InternalSubsts;\n use rustc_middle::ty::{self, ConstKind, Instance, ParamEnv, Ty, TyCtxt, TypeVisitable};\n@@ -456,27 +452,6 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         };\n     }\n \n-    fn use_ecx<F, T>(&mut self, f: F) -> Option<T>\n-    where\n-        F: FnOnce(&mut Self) -> InterpResult<'tcx, T>,\n-    {\n-        match f(self) {\n-            Ok(val) => Some(val),\n-            Err(error) => {\n-                trace!(\"InterpCx operation failed: {:?}\", error);\n-                // Some errors shouldn't come up because creating them causes\n-                // an allocation, which we should avoid. When that happens,\n-                // dedicated error variants should be introduced instead.\n-                assert!(\n-                    !error.kind().formatted_string(),\n-                    \"const-prop encountered formatting error: {}\",\n-                    error\n-                );\n-                None\n-            }\n-        }\n-    }\n-\n     /// Returns the value, if any, of evaluating `c`.\n     fn eval_constant(&mut self, c: &Constant<'tcx>) -> Option<OpTy<'tcx>> {\n         // FIXME we need to revisit this for #67176\n@@ -491,7 +466,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     /// Returns the value, if any, of evaluating `place`.\n     fn eval_place(&mut self, place: Place<'tcx>) -> Option<OpTy<'tcx>> {\n         trace!(\"eval_place(place={:?})\", place);\n-        self.use_ecx(|this| this.ecx.eval_place_to_op(place, None))\n+        self.ecx.eval_place_to_op(place, None).ok()\n     }\n \n     /// Returns the value, if any, of evaluating `op`. Calls upon `eval_constant`\n@@ -595,52 +570,54 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         rvalue: &Rvalue<'tcx>,\n         place: Place<'tcx>,\n     ) -> Option<()> {\n-        self.use_ecx(|this| match rvalue {\n+        match rvalue {\n             Rvalue::BinaryOp(op, box (left, right))\n             | Rvalue::CheckedBinaryOp(op, box (left, right)) => {\n-                let l = this.ecx.eval_operand(left, None).and_then(|x| this.ecx.read_immediate(&x));\n+                let l = self.ecx.eval_operand(left, None).and_then(|x| self.ecx.read_immediate(&x));\n                 let r =\n-                    this.ecx.eval_operand(right, None).and_then(|x| this.ecx.read_immediate(&x));\n+                    self.ecx.eval_operand(right, None).and_then(|x| self.ecx.read_immediate(&x));\n \n                 let const_arg = match (l, r) {\n                     (Ok(x), Err(_)) | (Err(_), Ok(x)) => x, // exactly one side is known\n-                    (Err(e), Err(_)) => return Err(e),      // neither side is known\n-                    (Ok(_), Ok(_)) => return this.ecx.eval_rvalue_into_place(rvalue, place), // both sides are known\n+                    (Err(_), Err(_)) => return None,        // neither side is known\n+                    (Ok(_), Ok(_)) => return self.ecx.eval_rvalue_into_place(rvalue, place).ok(), // both sides are known\n                 };\n \n                 if !matches!(const_arg.layout.abi, abi::Abi::Scalar(..)) {\n                     // We cannot handle Scalar Pair stuff.\n                     // No point in calling `eval_rvalue_into_place`, since only one side is known\n-                    throw_machine_stop_str!(\"cannot optimize this\")\n+                    return None;\n                 }\n \n-                let arg_value = const_arg.to_scalar().to_bits(const_arg.layout.size)?;\n-                let dest = this.ecx.eval_place(place)?;\n+                let arg_value = const_arg.to_scalar().to_bits(const_arg.layout.size).ok()?;\n+                let dest = self.ecx.eval_place(place).ok()?;\n \n                 match op {\n-                    BinOp::BitAnd if arg_value == 0 => this.ecx.write_immediate(*const_arg, &dest),\n+                    BinOp::BitAnd if arg_value == 0 => {\n+                        self.ecx.write_immediate(*const_arg, &dest).ok()\n+                    }\n                     BinOp::BitOr\n                         if arg_value == const_arg.layout.size.truncate(u128::MAX)\n                             || (const_arg.layout.ty.is_bool() && arg_value == 1) =>\n                     {\n-                        this.ecx.write_immediate(*const_arg, &dest)\n+                        self.ecx.write_immediate(*const_arg, &dest).ok()\n                     }\n                     BinOp::Mul if const_arg.layout.ty.is_integral() && arg_value == 0 => {\n                         if let Rvalue::CheckedBinaryOp(_, _) = rvalue {\n                             let val = Immediate::ScalarPair(\n                                 const_arg.to_scalar(),\n                                 Scalar::from_bool(false),\n                             );\n-                            this.ecx.write_immediate(val, &dest)\n+                            self.ecx.write_immediate(val, &dest).ok()\n                         } else {\n-                            this.ecx.write_immediate(*const_arg, &dest)\n+                            self.ecx.write_immediate(*const_arg, &dest).ok()\n                         }\n                     }\n-                    _ => throw_machine_stop_str!(\"cannot optimize this\"),\n+                    _ => None,\n                 }\n             }\n-            _ => this.ecx.eval_rvalue_into_place(rvalue, place),\n-        })\n+            _ => self.ecx.eval_rvalue_into_place(rvalue, place).ok(),\n+        }\n     }\n \n     /// Creates a new `Operand::Constant` from a `Scalar` value\n@@ -682,7 +659,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n         }\n \n         // FIXME> figure out what to do when read_immediate_raw fails\n-        let imm = self.use_ecx(|this| this.ecx.read_immediate_raw(value));\n+        let imm = self.ecx.read_immediate_raw(value).ok();\n \n         if let Some(Right(imm)) = imm {\n             match *imm {\n@@ -702,25 +679,23 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                     if let ty::Tuple(types) = ty.kind() {\n                         // Only do it if tuple is also a pair with two scalars\n                         if let [ty1, ty2] = types[..] {\n-                            let alloc = self.use_ecx(|this| {\n-                                let ty_is_scalar = |ty| {\n-                                    this.ecx.layout_of(ty).ok().map(|layout| layout.abi.is_scalar())\n-                                        == Some(true)\n-                                };\n-                                if ty_is_scalar(ty1) && ty_is_scalar(ty2) {\n-                                    let alloc = this\n-                                        .ecx\n-                                        .intern_with_temp_alloc(value.layout, |ecx, dest| {\n-                                            ecx.write_immediate(*imm, dest)\n-                                        })\n-                                        .unwrap();\n-                                    Ok(Some(alloc))\n-                                } else {\n-                                    Ok(None)\n-                                }\n-                            });\n-\n-                            if let Some(Some(alloc)) = alloc {\n+                            let ty_is_scalar = |ty| {\n+                                self.ecx.layout_of(ty).ok().map(|layout| layout.abi.is_scalar())\n+                                    == Some(true)\n+                            };\n+                            let alloc = if ty_is_scalar(ty1) && ty_is_scalar(ty2) {\n+                                let alloc = self\n+                                    .ecx\n+                                    .intern_with_temp_alloc(value.layout, |ecx, dest| {\n+                                        ecx.write_immediate(*imm, dest)\n+                                    })\n+                                    .unwrap();\n+                                Some(alloc)\n+                            } else {\n+                                None\n+                            };\n+\n+                            if let Some(alloc) = alloc {\n                                 // Assign entire constant in a single statement.\n                                 // We can't use aggregates, as we run after the aggregate-lowering `MirPhase`.\n                                 let const_val = ConstValue::ByRef { alloc, offset: Size::ZERO };\n@@ -921,84 +896,80 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n         trace!(\"visit_statement: {:?}\", statement);\n         let source_info = statement.source_info;\n         self.source_info = Some(source_info);\n-        if let StatementKind::Assign(box (place, ref mut rval)) = statement.kind {\n-            let can_const_prop = self.ecx.machine.can_const_prop[place.local];\n-            if let Some(()) = self.const_prop(rval, place) {\n-                // This will return None if the above `const_prop` invocation only \"wrote\" a\n-                // type whose creation requires no write. E.g. a generator whose initial state\n-                // consists solely of uninitialized memory (so it doesn't capture any locals).\n-                if let Some(ref value) = self.get_const(place) && self.should_const_prop(value) {\n-                    trace!(\"replacing {:?} with {:?}\", rval, value);\n-                    self.replace_with_const(rval, value, source_info);\n-                    if can_const_prop == ConstPropMode::FullConstProp\n-                        || can_const_prop == ConstPropMode::OnlyInsideOwnBlock\n-                    {\n-                        trace!(\"propagated into {:?}\", place);\n+        match statement.kind {\n+            StatementKind::Assign(box (place, ref mut rval)) => {\n+                let can_const_prop = self.ecx.machine.can_const_prop[place.local];\n+                if let Some(()) = self.const_prop(rval, place) {\n+                    // This will return None if the above `const_prop` invocation only \"wrote\" a\n+                    // type whose creation requires no write. E.g. a generator whose initial state\n+                    // consists solely of uninitialized memory (so it doesn't capture any locals).\n+                    if let Some(ref value) = self.get_const(place) && self.should_const_prop(value) {\n+                        trace!(\"replacing {:?} with {:?}\", rval, value);\n+                        self.replace_with_const(rval, value, source_info);\n+                        if can_const_prop == ConstPropMode::FullConstProp\n+                            || can_const_prop == ConstPropMode::OnlyInsideOwnBlock\n+                        {\n+                            trace!(\"propagated into {:?}\", place);\n+                        }\n                     }\n-                }\n-                match can_const_prop {\n-                    ConstPropMode::OnlyInsideOwnBlock => {\n-                        trace!(\n-                            \"found local restricted to its block. \\\n+                    match can_const_prop {\n+                        ConstPropMode::OnlyInsideOwnBlock => {\n+                            trace!(\n+                                \"found local restricted to its block. \\\n                                 Will remove it from const-prop after block is finished. Local: {:?}\",\n-                            place.local\n-                        );\n-                    }\n-                    ConstPropMode::OnlyPropagateInto | ConstPropMode::NoPropagation => {\n-                        trace!(\"can't propagate into {:?}\", place);\n-                        if place.local != RETURN_PLACE {\n-                            Self::remove_const(&mut self.ecx, place.local);\n+                                place.local\n+                            );\n                         }\n-                    }\n-                    ConstPropMode::FullConstProp => {}\n-                }\n-            } else {\n-                // Const prop failed, so erase the destination, ensuring that whatever happens\n-                // from here on, does not know about the previous value.\n-                // This is important in case we have\n-                // ```rust\n-                // let mut x = 42;\n-                // x = SOME_MUTABLE_STATIC;\n-                // // x must now be uninit\n-                // ```\n-                // FIXME: we overzealously erase the entire local, because that's easier to\n-                // implement.\n-                trace!(\n-                    \"propagation into {:?} failed.\n-                        Nuking the entire site from orbit, it's the only way to be sure\",\n-                    place,\n-                );\n-                Self::remove_const(&mut self.ecx, place.local);\n-            }\n-        } else {\n-            match statement.kind {\n-                StatementKind::SetDiscriminant { ref place, .. } => {\n-                    match self.ecx.machine.can_const_prop[place.local] {\n-                        ConstPropMode::FullConstProp | ConstPropMode::OnlyInsideOwnBlock => {\n-                            if self.use_ecx(|this| this.ecx.statement(statement)).is_some() {\n-                                trace!(\"propped discriminant into {:?}\", place);\n-                            } else {\n+                        ConstPropMode::OnlyPropagateInto | ConstPropMode::NoPropagation => {\n+                            trace!(\"can't propagate into {:?}\", place);\n+                            if place.local != RETURN_PLACE {\n                                 Self::remove_const(&mut self.ecx, place.local);\n                             }\n                         }\n-                        ConstPropMode::OnlyPropagateInto | ConstPropMode::NoPropagation => {\n-                            Self::remove_const(&mut self.ecx, place.local);\n-                        }\n+                        ConstPropMode::FullConstProp => {}\n                     }\n+                } else {\n+                    // Const prop failed, so erase the destination, ensuring that whatever happens\n+                    // from here on, does not know about the previous value.\n+                    // This is important in case we have\n+                    // ```rust\n+                    // let mut x = 42;\n+                    // x = SOME_MUTABLE_STATIC;\n+                    // // x must now be uninit\n+                    // ```\n+                    // FIXME: we overzealously erase the entire local, because that's easier to\n+                    // implement.\n+                    trace!(\n+                        \"propagation into {:?} failed.\n+                        Nuking the entire site from orbit, it's the only way to be sure\",\n+                        place,\n+                    );\n+                    Self::remove_const(&mut self.ecx, place.local);\n                 }\n-                StatementKind::StorageLive(local) | StatementKind::StorageDead(local) => {\n-                    let frame = self.ecx.frame_mut();\n-                    frame.locals[local].value =\n-                        if let StatementKind::StorageLive(_) = statement.kind {\n-                            LocalValue::Live(interpret::Operand::Immediate(\n-                                interpret::Immediate::Uninit,\n-                            ))\n+            }\n+            StatementKind::SetDiscriminant { ref place, .. } => {\n+                match self.ecx.machine.can_const_prop[place.local] {\n+                    ConstPropMode::FullConstProp | ConstPropMode::OnlyInsideOwnBlock => {\n+                        if self.ecx.statement(statement).is_ok() {\n+                            trace!(\"propped discriminant into {:?}\", place);\n                         } else {\n-                            LocalValue::Dead\n-                        };\n+                            Self::remove_const(&mut self.ecx, place.local);\n+                        }\n+                    }\n+                    ConstPropMode::OnlyPropagateInto | ConstPropMode::NoPropagation => {\n+                        Self::remove_const(&mut self.ecx, place.local);\n+                    }\n                 }\n-                _ => {}\n             }\n+            StatementKind::StorageLive(local) | StatementKind::StorageDead(local) => {\n+                let frame = self.ecx.frame_mut();\n+                frame.locals[local].value = if let StatementKind::StorageLive(_) = statement.kind {\n+                    LocalValue::Live(interpret::Operand::Immediate(interpret::Immediate::Uninit))\n+                } else {\n+                    LocalValue::Dead\n+                };\n+            }\n+            _ => {}\n         }\n \n         self.super_statement(statement, location);\n@@ -1008,12 +979,10 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n         let source_info = terminator.source_info;\n         self.source_info = Some(source_info);\n         self.super_terminator(terminator, location);\n-        // Do NOT early return in this function, it does some crucial fixup of the state at the end!\n+\n         match &mut terminator.kind {\n             TerminatorKind::Assert { expected, ref mut cond, .. } => {\n                 if let Some(ref value) = self.eval_operand(&cond)\n-                    // FIXME should be used use_ecx rather than a local match... but we have\n-                    // quite a few of these read_scalar/read_immediate that need fixing.\n                     && let Ok(value_const) = self.ecx.read_scalar(&value)\n                     && self.should_const_prop(value)\n                 {\n@@ -1050,6 +1019,10 @@ impl<'tcx> MutVisitor<'tcx> for ConstPropagator<'_, 'tcx> {\n             // gated on `mir_opt_level=3`.\n             TerminatorKind::Call { .. } => {}\n         }\n+    }\n+\n+    fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) {\n+        self.super_basic_block_data(block, data);\n \n         // We remove all Locals which are restricted in propagation to their containing blocks and\n         // which were modified in the current block."}, {"sha": "824264c21d0d083839332a1b147eee600d268a2f", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -2784,7 +2784,13 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                             _ => true,\n                         };\n                     if ident.span.is_visible(sm) && !ident.span.overlaps(span) && !same_line {\n-                        multispan.push_span_label(ident.span, \"required by a bound in this\");\n+                        multispan.push_span_label(\n+                            ident.span,\n+                            format!(\n+                                \"required by a bound in this {}\",\n+                                tcx.def_kind(item_def_id).descr(item_def_id)\n+                            ),\n+                        );\n                     }\n                 }\n                 let descr = format!(\"required by a bound in `{item_name}`\");"}, {"sha": "0db043a4fcade009e5ff1c21fc26a50d2d4cb902", "filename": "src/tools/compiletest/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/src%2Ftools%2Fcompiletest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/src%2Ftools%2Fcompiletest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2FCargo.toml?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -16,7 +16,7 @@ regex = \"1.0\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n rustfix = \"0.6.0\"\n-lazy_static = \"1.0\"\n+once_cell = \"1.16.0\"\n walkdir = \"2\"\n glob = \"0.3.0\"\n lazycell = \"1.3.0\"\n@@ -25,5 +25,5 @@ lazycell = \"1.3.0\"\n libc = \"0.2\"\n \n [target.'cfg(windows)'.dependencies]\n-miow = \"0.3\"\n+miow = \"0.5\"\n winapi = { version = \"0.3\", features = [\"winerror\"] }"}, {"sha": "c33e66e02ac41aca979c531f3aa5b7e091d9ce72", "filename": "src/tools/compiletest/src/errors.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Ferrors.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -7,7 +7,7 @@ use std::io::BufReader;\n use std::path::Path;\n use std::str::FromStr;\n \n-use lazy_static::lazy_static;\n+use once_cell::sync::Lazy;\n use regex::Regex;\n use tracing::*;\n \n@@ -117,10 +117,8 @@ fn parse_expected(\n     //     //~^^^^^\n     //     //[cfg1]~\n     //     //[cfg1,cfg2]~^^\n-    lazy_static! {\n-        static ref RE: Regex =\n-            Regex::new(r\"//(?:\\[(?P<cfgs>[\\w,]+)])?~(?P<adjust>\\||\\^*)\").unwrap();\n-    }\n+    static RE: Lazy<Regex> =\n+        Lazy::new(|| Regex::new(r\"//(?:\\[(?P<cfgs>[\\w,]+)])?~(?P<adjust>\\||\\^*)\").unwrap());\n \n     let captures = RE.captures(line)?;\n "}, {"sha": "1760c29ec66b7b92d0d695259f4bc7bad15f29f7", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -588,7 +588,8 @@ fn modified_tests(config: &Config, dir: &Path) -> Result<Vec<PathBuf>, String> {\n     let full_paths = {\n         let mut full_paths: Vec<PathBuf> = all_paths\n             .into_iter()\n-            .map(|f| fs::canonicalize(&f).unwrap().with_extension(\"\").with_extension(\"rs\"))\n+            .map(|f| PathBuf::from(f).with_extension(\"\").with_extension(\"rs\"))\n+            .filter_map(|f| if Path::new(&f).exists() { f.canonicalize().ok() } else { None })\n             .collect();\n         full_paths.dedup();\n         full_paths.sort_unstable();"}, {"sha": "7824ef81d7a939c3d31c8a8341a106795e610974", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 33, "deletions": 38, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -32,7 +32,7 @@ use std::process::{Child, Command, ExitStatus, Output, Stdio};\n use std::str;\n \n use glob::glob;\n-use lazy_static::lazy_static;\n+use once_cell::sync::Lazy;\n use tracing::*;\n \n use crate::extract_gdb_version;\n@@ -52,9 +52,8 @@ fn disable_error_reporting<F: FnOnce() -> R, R>(f: F) -> R {\n     use winapi::um::errhandlingapi::SetErrorMode;\n     use winapi::um::winbase::SEM_NOGPFAULTERRORBOX;\n \n-    lazy_static! {\n-        static ref LOCK: Mutex<()> = Mutex::new(());\n-    }\n+    static LOCK: Mutex<()> = Mutex::new(());\n+\n     // Error mode is a global variable, so lock it so only one thread will change it\n     let _lock = LOCK.lock().unwrap();\n \n@@ -2848,11 +2847,10 @@ impl<'test> TestCx<'test> {\n         // the form <crate-name1>.<crate-disambiguator1>-in-<crate-name2>.<crate-disambiguator2>,\n         // remove all crate-disambiguators.\n         fn remove_crate_disambiguator_from_cgu(cgu: &str) -> String {\n-            lazy_static! {\n-                static ref RE: Regex =\n-                    Regex::new(r\"^[^\\.]+(?P<d1>\\.[[:alnum:]]+)(-in-[^\\.]+(?P<d2>\\.[[:alnum:]]+))?\")\n-                        .unwrap();\n-            }\n+            static RE: Lazy<Regex> = Lazy::new(|| {\n+                Regex::new(r\"^[^\\.]+(?P<d1>\\.[[:alnum:]]+)(-in-[^\\.]+(?P<d2>\\.[[:alnum:]]+))?\")\n+                    .unwrap()\n+            });\n \n             let captures =\n                 RE.captures(cgu).unwrap_or_else(|| panic!(\"invalid cgu name encountered: {}\", cgu));\n@@ -3170,12 +3168,12 @@ impl<'test> TestCx<'test> {\n                 // 'uploaded \"$TEST_BUILD_DIR/<test_executable>, waiting for result\"'\n                 // is printed to stdout by the client and then captured in the ProcRes,\n                 // so it needs to be removed when comparing the run-pass test execution output\n-                lazy_static! {\n-                    static ref REMOTE_TEST_RE: Regex = Regex::new(\n+                static REMOTE_TEST_RE: Lazy<Regex> = Lazy::new(|| {\n+                    Regex::new(\n                         \"^uploaded \\\"\\\\$TEST_BUILD_DIR(/[[:alnum:]_\\\\-.]+)+\\\", waiting for result\\n\"\n                     )\n-                    .unwrap();\n-                }\n+                    .unwrap()\n+                });\n                 REMOTE_TEST_RE\n                     .replace(\n                         &self.normalize_output(&proc_res.stdout, &self.props.normalize_stdout),\n@@ -3620,10 +3618,8 @@ impl<'test> TestCx<'test> {\n         // with placeholders as we do not want tests needing updated when compiler source code\n         // changes.\n         // eg. $SRC_DIR/libcore/mem.rs:323:14 becomes $SRC_DIR/libcore/mem.rs:LL:COL\n-        lazy_static! {\n-            static ref SRC_DIR_RE: Regex =\n-                Regex::new(\"SRC_DIR(.+):\\\\d+:\\\\d+(: \\\\d+:\\\\d+)?\").unwrap();\n-        }\n+        static SRC_DIR_RE: Lazy<Regex> =\n+            Lazy::new(|| Regex::new(\"SRC_DIR(.+):\\\\d+:\\\\d+(: \\\\d+:\\\\d+)?\").unwrap());\n \n         normalized = SRC_DIR_RE.replace_all(&normalized, \"SRC_DIR$1:LL:COL\").into_owned();\n \n@@ -3634,19 +3630,17 @@ impl<'test> TestCx<'test> {\n         // since they duplicate actual errors and make the output hard to read.\n         // This mirrors the regex in src/tools/tidy/src/style.rs, please update\n         // both if either are changed.\n-        lazy_static! {\n-            static ref ANNOTATION_RE: Regex = Regex::new(\"\\\\s*//(\\\\[.*\\\\])?~.*\").unwrap();\n-        }\n+        static ANNOTATION_RE: Lazy<Regex> =\n+            Lazy::new(|| Regex::new(\"\\\\s*//(\\\\[.*\\\\])?~.*\").unwrap());\n \n         normalized = ANNOTATION_RE.replace_all(&normalized, \"\").into_owned();\n \n         // This code normalizes various hashes in v0 symbol mangling that is\n         // emitted in the ui and mir-opt tests.\n-        lazy_static! {\n-            static ref V0_CRATE_HASH_PREFIX_RE: Regex =\n-                Regex::new(r\"_R.*?Cs[0-9a-zA-Z]+_\").unwrap();\n-            static ref V0_CRATE_HASH_RE: Regex = Regex::new(r\"Cs[0-9a-zA-Z]+_\").unwrap();\n-        }\n+        static V0_CRATE_HASH_PREFIX_RE: Lazy<Regex> =\n+            Lazy::new(|| Regex::new(r\"_R.*?Cs[0-9a-zA-Z]+_\").unwrap());\n+        static V0_CRATE_HASH_RE: Lazy<Regex> =\n+            Lazy::new(|| Regex::new(r\"Cs[0-9a-zA-Z]+_\").unwrap());\n \n         const V0_CRATE_HASH_PLACEHOLDER: &str = r\"CsCRATE_HASH_\";\n         if V0_CRATE_HASH_PREFIX_RE.is_match(&normalized) {\n@@ -3655,10 +3649,9 @@ impl<'test> TestCx<'test> {\n                 V0_CRATE_HASH_RE.replace_all(&normalized, V0_CRATE_HASH_PLACEHOLDER).into_owned();\n         }\n \n-        lazy_static! {\n-            static ref V0_BACK_REF_PREFIX_RE: Regex = Regex::new(r\"\\(_R.*?B[0-9a-zA-Z]_\").unwrap();\n-            static ref V0_BACK_REF_RE: Regex = Regex::new(r\"B[0-9a-zA-Z]_\").unwrap();\n-        }\n+        static V0_BACK_REF_PREFIX_RE: Lazy<Regex> =\n+            Lazy::new(|| Regex::new(r\"\\(_R.*?B[0-9a-zA-Z]_\").unwrap());\n+        static V0_BACK_REF_RE: Lazy<Regex> = Lazy::new(|| Regex::new(r\"B[0-9a-zA-Z]_\").unwrap());\n \n         const V0_BACK_REF_PLACEHOLDER: &str = r\"B<REF>_\";\n         if V0_BACK_REF_PREFIX_RE.is_match(&normalized) {\n@@ -3681,21 +3674,23 @@ impl<'test> TestCx<'test> {\n     /// Replaces backslashes in paths with forward slashes, and replaces CRLF line endings\n     /// with LF.\n     fn normalize_platform_differences(output: &str) -> String {\n-        lazy_static! {\n-            /// Used to find Windows paths.\n-            ///\n-            /// It's not possible to detect paths in the error messages generally, but this is a\n-            /// decent enough heuristic.\n-            static ref PATH_BACKSLASH_RE: Regex = Regex::new(r#\"(?x)\n+        /// Used to find Windows paths.\n+        ///\n+        /// It's not possible to detect paths in the error messages generally, but this is a\n+        /// decent enough heuristic.\n+        static PATH_BACKSLASH_RE: Lazy<Regex> = Lazy::new(|| {\n+            Regex::new(\n+                r#\"(?x)\n                 (?:\n                   # Match paths that don't include spaces.\n                   (?:\\\\[\\pL\\pN\\.\\-_']+)+\\.\\pL+\n                 |\n                   # If the path starts with a well-known root, then allow spaces.\n                   \\$(?:DIR|SRC_DIR|TEST_BUILD_DIR|BUILD_DIR|LIB_DIR)(?:\\\\[\\pL\\pN\\.\\-_' ]+)+\n-                )\"#\n-            ).unwrap();\n-        }\n+                )\"#,\n+            )\n+            .unwrap()\n+        });\n \n         let output = output.replace(r\"\\\\\", r\"\\\");\n "}, {"sha": "3e1142d5d9560b3f3432b536b859267f30abb249", "filename": "tests/ui/associated-types/associated-types-eq-hr.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fassociated-types-eq-hr.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -15,7 +15,7 @@ note: required by a bound in `foo`\n   --> $DIR/associated-types-eq-hr.rs:45:36\n    |\n LL | fn foo<T>()\n-   |    --- required by a bound in this\n+   |    --- required by a bound in this function\n LL | where\n LL |     T: for<'x> TheTrait<&'x isize, A = &'x isize>,\n    |                                    ^^^^^^^^^^^^^ required by this bound in `foo`\n@@ -37,7 +37,7 @@ note: required by a bound in `bar`\n   --> $DIR/associated-types-eq-hr.rs:52:36\n    |\n LL | fn bar<T>()\n-   |    --- required by a bound in this\n+   |    --- required by a bound in this function\n LL | where\n LL |     T: for<'x> TheTrait<&'x isize, A = &'x usize>,\n    |                                    ^^^^^^^^^^^^^ required by this bound in `bar`"}, {"sha": "2485758757b9bd80b49aee2a03b4c8a3b48d4117", "filename": "tests/ui/associated-types/defaults-suitability.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fdefaults-suitability.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -27,7 +27,7 @@ LL |     Self::Ty: Clone,\n    |               ^^^^^ required by this bound in `Tr2::Ty`\n LL | {\n LL |     type Ty = NotClone;\n-   |          -- required by a bound in this\n+   |          -- required by a bound in this associated type\n help: consider annotating `NotClone` with `#[derive(Clone)]`\n    |\n LL | #[derive(Clone)]\n@@ -75,7 +75,7 @@ LL |     Self::Assoc: IsU8<Self::Assoc>,\n    |                  ^^^^^^^^^^^^^^^^^ required by this bound in `D::Assoc`\n ...\n LL |     type Assoc = NotClone;\n-   |          ----- required by a bound in this\n+   |          ----- required by a bound in this associated type\n \n error[E0277]: the trait bound `<Self as Foo2<T>>::Baz: Clone` is not satisfied\n   --> $DIR/defaults-suitability.rs:65:23\n@@ -124,7 +124,7 @@ LL |     Self::Baz: Clone,\n    |                ^^^^^ required by this bound in `Foo3::Baz`\n ...\n LL |     type Baz = T;\n-   |          --- required by a bound in this\n+   |          --- required by a bound in this associated type\n help: consider further restricting type parameter `T`\n    |\n LL |     Self::Baz: Clone, T: std::clone::Clone"}, {"sha": "b380a1b6f06582ca977855f6aa0cba2b7a766f4b", "filename": "tests/ui/associated-types/hr-associated-type-bound-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-1.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-1.rs:3:33\n    |\n LL | trait X<'a>\n-   |       - required by a bound in this\n+   |       - required by a bound in this trait\n LL | where\n LL |     for<'b> <Self as X<'b>>::U: Clone,\n    |                                 ^^^^^ required by this bound in `X`"}, {"sha": "a0a6f76a58371f0ab9f4082f86a0e4a201bb6233", "filename": "tests/ui/associated-types/hr-associated-type-bound-object.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-object.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -8,7 +8,7 @@ note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-object.rs:3:33\n    |\n LL | trait X<'a>\n-   |       - required by a bound in this\n+   |       - required by a bound in this trait\n LL | where\n LL |     for<'b> <Self as X<'b>>::U: Clone,\n    |                                 ^^^^^ required by this bound in `X`"}, {"sha": "e249f2e0c27999e5122cf9b4c53b58f85b347553", "filename": "tests/ui/associated-types/hr-associated-type-bound-param-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-1.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `Y`\n   --> $DIR/hr-associated-type-bound-param-1.rs:4:36\n    |\n LL | trait Y<'a, T: ?Sized>\n-   |       - required by a bound in this\n+   |       - required by a bound in this trait\n ...\n LL |     for<'b> <Self as Y<'b, T>>::V: Clone,\n    |                                    ^^^^^ required by this bound in `Y`"}, {"sha": "366670269d7cd449bf8802569ec4e9e02f1e56a6", "filename": "tests/ui/associated-types/hr-associated-type-bound-param-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `Z`\n   --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |\n LL | trait Z<'a, T: ?Sized>\n-   |       - required by a bound in this\n+   |       - required by a bound in this trait\n ...\n LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n    |                                   ^^^^^ required by this bound in `Z`\n@@ -25,7 +25,7 @@ note: required by a bound in `Z`\n   --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |\n LL | trait Z<'a, T: ?Sized>\n-   |       - required by a bound in this\n+   |       - required by a bound in this trait\n ...\n LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n    |                                   ^^^^^ required by this bound in `Z`\n@@ -41,7 +41,7 @@ note: required by a bound in `Z`\n   --> $DIR/hr-associated-type-bound-param-2.rs:6:35\n    |\n LL | trait Z<'a, T: ?Sized>\n-   |       - required by a bound in this\n+   |       - required by a bound in this trait\n ...\n LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n    |                                   ^^^^^ required by this bound in `Z`"}, {"sha": "f49439d3573d3b01bf5f87d1ca0a18c0ca08520e", "filename": "tests/ui/associated-types/hr-associated-type-bound-param-3.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-3.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-3.rs:4:33\n    |\n LL | trait X<'a, T>\n-   |       - required by a bound in this\n+   |       - required by a bound in this trait\n ...\n LL |     for<'b> <T as X<'b, T>>::U: Clone,\n    |                                 ^^^^^ required by this bound in `X`"}, {"sha": "f8733b423d778f78eec1e7085b8a1e57a1e2f649", "filename": "tests/ui/associated-types/hr-associated-type-bound-param-4.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-4.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-4.rs:4:36\n    |\n LL | trait X<'a, T>\n-   |       - required by a bound in this\n+   |       - required by a bound in this trait\n ...\n LL |     for<'b> <(T,) as X<'b, T>>::U: Clone,\n    |                                    ^^^^^ required by this bound in `X`"}, {"sha": "aae80a9b2e196b87684a6713fe96e1b89963af6c", "filename": "tests/ui/associated-types/hr-associated-type-bound-param-5.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-5.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-5.rs:17:45\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n-   |       - required by a bound in this\n+   |       - required by a bound in this trait\n ...\n LL |     for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n    |                                             ^^^^^ required by this bound in `X`\n@@ -25,7 +25,7 @@ note: required by a bound in `X`\n   --> $DIR/hr-associated-type-bound-param-5.rs:17:45\n    |\n LL | trait X<'a, T: Cycle + for<'b> X<'b, T>>\n-   |       - required by a bound in this\n+   |       - required by a bound in this trait\n ...\n LL |     for<'b> <T::Next as X<'b, T::Next>>::U: Clone,\n    |                                             ^^^^^ required by this bound in `X`"}, {"sha": "dd0389c34e6942347f4f8e7f833875040a15ff45", "filename": "tests/ui/associated-types/hr-associated-type-projection-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fhr-associated-type-projection-1.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -10,7 +10,7 @@ note: required by a bound in `UnsafeCopy`\n   --> $DIR/hr-associated-type-projection-1.rs:3:64\n    |\n LL | trait UnsafeCopy<'a, T: Copy>\n-   |       ---------- required by a bound in this\n+   |       ---------- required by a bound in this trait\n LL | where\n LL |     for<'b> <Self as UnsafeCopy<'b, T>>::Item: std::ops::Deref<Target = T>,\n    |                                                                ^^^^^^^^^^ required by this bound in `UnsafeCopy`"}, {"sha": "3b4689e08ccfa1c7a27c74dfcace3493ab8b2e55", "filename": "tests/ui/associated-types/point-at-type-on-obligation-failure-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassociated-types%2Fpoint-at-type-on-obligation-failure-2.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -23,7 +23,7 @@ LL |     Self::Assoc: Bar,\n    |                  ^^^ required by this bound in `Baz::Assoc`\n LL | {\n LL |     type Assoc;\n-   |          ----- required by a bound in this\n+   |          ----- required by a bound in this associated type\n \n error[E0277]: the trait bound `bool: Bar` is not satisfied\n   --> $DIR/point-at-type-on-obligation-failure-2.rs:30:18\n@@ -38,7 +38,7 @@ LL |     <Self as Bat>::Assoc: Bar,\n    |                           ^^^ required by this bound in `Bat::Assoc`\n LL | {\n LL |     type Assoc;\n-   |          ----- required by a bound in this\n+   |          ----- required by a bound in this associated type\n \n error: aborting due to 3 previous errors\n "}, {"sha": "c5089295063dd85ffc7b194a2342b4764ac102c1", "filename": "tests/ui/closure-expected-type/expect-infer-var-appearing-twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fclosure-expected-type%2Fexpect-infer-var-appearing-twice.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -12,7 +12,7 @@ note: required by a bound in `with_closure`\n   --> $DIR/expect-infer-var-appearing-twice.rs:2:14\n    |\n LL | fn with_closure<F, A>(_: F)\n-   |    ------------ required by a bound in this\n+   |    ------------ required by a bound in this function\n LL |     where F: FnOnce(A, A)\n    |              ^^^^^^^^^^^^ required by this bound in `with_closure`\n "}, {"sha": "bd9bfcd7dadf60745a34afbc6ff9db82d2e3a0cc", "filename": "tests/ui/const-generics/defaults/wfness.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fdefaults%2Fwfness.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -23,7 +23,7 @@ note: required by a bound in `WhereClause`\n   --> $DIR/wfness.rs:8:9\n    |\n LL | struct WhereClause<const N: u8 = 2>\n-   |        ----------- required by a bound in this\n+   |        ----------- required by a bound in this struct\n LL | where\n LL |     (): Trait<N>;\n    |         ^^^^^^^^ required by this bound in `WhereClause`"}, {"sha": "ab2871ff28127171384fa98dfbeaf775701bc424", "filename": "tests/ui/const-generics/ensure_is_evaluatable.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Fensure_is_evaluatable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Fensure_is_evaluatable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fensure_is_evaluatable.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `bar`\n   --> $DIR/ensure_is_evaluatable.rs:15:10\n    |\n LL | fn bar<const N: usize>() -> [(); N]\n-   |    --- required by a bound in this\n+   |    --- required by a bound in this function\n LL | where\n LL |     [(); N + 1]:,\n    |          ^^^^^ required by this bound in `bar`"}, {"sha": "c124010aab05b920b2fb4c7ec028460e97446ac1", "filename": "tests/ui/const-generics/fn_with_two_const_inputs.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Ffn_with_two_const_inputs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Ffn_with_two_const_inputs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Ffn_with_two_const_inputs.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `bar`\n   --> $DIR/fn_with_two_const_inputs.rs:18:10\n    |\n LL | fn bar<const N: usize>() -> [(); N]\n-   |    --- required by a bound in this\n+   |    --- required by a bound in this function\n LL | where\n LL |     [(); N + 1]:,\n    |          ^^^^^ required by this bound in `bar`"}, {"sha": "996b75493e618f92f55794dad818ae7e1824f961", "filename": "tests/ui/const-generics/generic_const_exprs/issue-72819-generic-in-const-eval.full.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fissue-72819-generic-in-const-eval.full.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -10,7 +10,7 @@ note: required by a bound in `Arr`\n   --> $DIR/issue-72819-generic-in-const-eval.rs:8:39\n    |\n LL | struct Arr<const N: usize>\n-   |        --- required by a bound in this\n+   |        --- required by a bound in this struct\n LL | where Assert::<{N < usize::MAX / 2}>: IsTrue,\n    |                                       ^^^^^^ required by this bound in `Arr`\n \n@@ -26,7 +26,7 @@ note: required by a bound in `Arr`\n   --> $DIR/issue-72819-generic-in-const-eval.rs:8:39\n    |\n LL | struct Arr<const N: usize>\n-   |        --- required by a bound in this\n+   |        --- required by a bound in this struct\n LL | where Assert::<{N < usize::MAX / 2}>: IsTrue,\n    |                                       ^^^^^^ required by this bound in `Arr`\n "}, {"sha": "63e6fcc8e119b65219a47f3b518ff289c4b1750b", "filename": "tests/ui/const-generics/generic_const_exprs/obligation-cause.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobligation-cause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobligation-cause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fobligation-cause.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -10,7 +10,7 @@ note: required by a bound in `g`\n   --> $DIR/obligation-cause.rs:13:44\n    |\n LL | fn g<T>()\n-   |    - required by a bound in this\n+   |    - required by a bound in this function\n ...\n LL |     Is<{ std::mem::size_of::<T>() == 0 }>: True,\n    |                                            ^^^^ required by this bound in `g`"}, {"sha": "032b0c41047fc9d04dd4390d5297e3a0f41baf2d", "filename": "tests/ui/const-generics/issues/issue-67185-2.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-67185-2.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -35,7 +35,7 @@ note: required by a bound in `Foo`\n   --> $DIR/issue-67185-2.rs:15:25\n    |\n LL | trait Foo\n-   |       --- required by a bound in this\n+   |       --- required by a bound in this trait\n ...\n LL |     <u8 as Baz>::Quaks: Bar,\n    |                         ^^^ required by this bound in `Foo`\n@@ -53,7 +53,7 @@ note: required by a bound in `Foo`\n   --> $DIR/issue-67185-2.rs:14:30\n    |\n LL | trait Foo\n-   |       --- required by a bound in this\n+   |       --- required by a bound in this trait\n LL | where\n LL |     [<u8 as Baz>::Quaks; 2]: Bar,\n    |                              ^^^ required by this bound in `Foo`\n@@ -71,7 +71,7 @@ note: required by a bound in `Foo`\n   --> $DIR/issue-67185-2.rs:14:30\n    |\n LL | trait Foo\n-   |       --- required by a bound in this\n+   |       --- required by a bound in this trait\n LL | where\n LL |     [<u8 as Baz>::Quaks; 2]: Bar,\n    |                              ^^^ required by this bound in `Foo`\n@@ -89,7 +89,7 @@ note: required by a bound in `Foo`\n   --> $DIR/issue-67185-2.rs:15:25\n    |\n LL | trait Foo\n-   |       --- required by a bound in this\n+   |       --- required by a bound in this trait\n ...\n LL |     <u8 as Baz>::Quaks: Bar,\n    |                         ^^^ required by this bound in `Foo`"}, {"sha": "c56b45cc8faf16b11e0692ed8ca117d8fe5c151b", "filename": "tests/ui/const-generics/issues/issue-73260.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-73260.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -10,7 +10,7 @@ note: required by a bound in `Arr`\n   --> $DIR/issue-73260.rs:5:37\n    |\n LL | struct Arr<const N: usize>\n-   |        --- required by a bound in this\n+   |        --- required by a bound in this struct\n LL | where\n LL |     Assert::<{N < usize::MAX / 2}>: IsTrue,\n    |                                     ^^^^^^ required by this bound in `Arr`\n@@ -27,7 +27,7 @@ note: required by a bound in `Arr`\n   --> $DIR/issue-73260.rs:5:37\n    |\n LL | struct Arr<const N: usize>\n-   |        --- required by a bound in this\n+   |        --- required by a bound in this struct\n LL | where\n LL |     Assert::<{N < usize::MAX / 2}>: IsTrue,\n    |                                     ^^^^^^ required by this bound in `Arr`"}, {"sha": "ba7fd2ca3ccf3692a72d91faa79403da6534808c", "filename": "tests/ui/const-generics/issues/issue-79674.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-79674.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-79674.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-79674.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -10,7 +10,7 @@ note: required by a bound in `requires_distinct`\n   --> $DIR/issue-79674.rs:23:37\n    |\n LL | fn requires_distinct<A, B>(_a: A, _b: B) where\n-   |    ----------------- required by a bound in this\n+   |    ----------------- required by a bound in this function\n LL |     A: MiniTypeId, B: MiniTypeId,\n LL |     Lift<{is_same_type::<A, B>()}>: IsFalse {}\n    |                                     ^^^^^^^ required by this bound in `requires_distinct`"}, {"sha": "620ed4f0fb2cc5e65e55c22ff56623a3ae809b1a", "filename": "tests/ui/const-generics/issues/issue-86530.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -10,7 +10,7 @@ note: required by a bound in `z`\n   --> $DIR/issue-86530.rs:10:8\n    |\n LL | fn z<T>(t: T)\n-   |    - required by a bound in this\n+   |    - required by a bound in this function\n LL | where\n LL |     T: X,\n    |        ^ required by this bound in `z`"}, {"sha": "51ef354e3ed4a779fbd4e58d45c06897f7d7926d", "filename": "tests/ui/const-generics/occurs-check/unused-substs-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Foccurs-check%2Funused-substs-1.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `A`\n   --> $DIR/unused-substs-1.rs:9:11\n    |\n LL | struct A<const N: usize>\n-   |        - required by a bound in this\n+   |        - required by a bound in this unit struct\n LL | where\n LL |     A<N>: Bar<N>;\n    |           ^^^^^^ required by this bound in `A`"}, {"sha": "d4d78b5962789bd83e4dd422c15266867d9bcc42", "filename": "tests/ui/const-generics/unify_with_nested_expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Funify_with_nested_expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconst-generics%2Funify_with_nested_expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconst-generics%2Funify_with_nested_expr.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -8,7 +8,7 @@ note: required by a bound in `bar`\n   --> $DIR/unify_with_nested_expr.rs:14:10\n    |\n LL | fn bar<const N: usize>()\n-   |    --- required by a bound in this\n+   |    --- required by a bound in this function\n LL | where\n LL |     [(); N + 1]:,\n    |          ^^^^^ required by this bound in `bar`"}, {"sha": "fa20077da7efeeacbe03219990d18edf252d6775", "filename": "tests/ui/consts/ct-var-in-collect_all_mismatches.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconsts%2Fct-var-in-collect_all_mismatches.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fconsts%2Fct-var-in-collect_all_mismatches.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fct-var-in-collect_all_mismatches.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -8,7 +8,7 @@ note: required by a bound in `Foo::<T, N>::unsatisfied`\n   --> $DIR/ct-var-in-collect_all_mismatches.rs:15:12\n    |\n LL |     fn unsatisfied(self)\n-   |        ----------- required by a bound in this\n+   |        ----------- required by a bound in this associated function\n LL |     where\n LL |         T: Bar<N>,\n    |            ^^^^^^ required by this bound in `Foo::<T, N>::unsatisfied`"}, {"sha": "a26dbf3f27c466aa8c1c3a30a76e69fc38d15b25", "filename": "tests/ui/generator/generator-yielding-or-returning-itself.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerator%2Fgenerator-yielding-or-returning-itself.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -19,7 +19,7 @@ note: required by a bound in `want_cyclic_generator_return`\n   --> $DIR/generator-yielding-or-returning-itself.rs:10:36\n    |\n LL | pub fn want_cyclic_generator_return<T>(_: T)\n-   |        ---------------------------- required by a bound in this\n+   |        ---------------------------- required by a bound in this function\n LL |     where T: Generator<Yield = (), Return = T>\n    |                                    ^^^^^^^^^^ required by this bound in `want_cyclic_generator_return`\n \n@@ -44,7 +44,7 @@ note: required by a bound in `want_cyclic_generator_yield`\n   --> $DIR/generator-yielding-or-returning-itself.rs:23:24\n    |\n LL | pub fn want_cyclic_generator_yield<T>(_: T)\n-   |        --------------------------- required by a bound in this\n+   |        --------------------------- required by a bound in this function\n LL |     where T: Generator<Yield = T, Return = ()>\n    |                        ^^^^^^^^^ required by this bound in `want_cyclic_generator_yield`\n "}, {"sha": "a2047f103d488810f73b7f462ac808d5aa9641a9", "filename": "tests/ui/generic-associated-types/bugs/issue-88460.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88460.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `test`\n   --> $DIR/issue-88460.rs:15:27\n    |\n LL | fn test<T>(value: T)\n-   |    ---- required by a bound in this\n+   |    ---- required by a bound in this function\n ...\n LL |     for<'a> T::Assoc<'a>: Marker,\n    |                           ^^^^^^ required by this bound in `test`"}, {"sha": "5c8db617c173163fe08f99c46bc481f99d36efb0", "filename": "tests/ui/generic-associated-types/issue-101020.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fgeneric-associated-types%2Fissue-101020.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fgeneric-associated-types%2Fissue-101020.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgeneric-associated-types%2Fissue-101020.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -13,7 +13,7 @@ note: required by a bound in `LendingIterator::consume`\n   --> $DIR/issue-101020.rs:9:33\n    |\n LL |     fn consume<F>(self, _f: F)\n-   |        ------- required by a bound in this\n+   |        ------- required by a bound in this associated function\n ...\n LL |         for<'a> Self::Item<'a>: FuncInput<'a, Self::Item<'a>>,\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `LendingIterator::consume`"}, {"sha": "b1b8ffa8c548336a75f06f80439a71f174492fd1", "filename": "tests/ui/higher-rank-trait-bounds/hrtb-higher-ranker-supertraits-transitive.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits-transitive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits-transitive.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -10,7 +10,7 @@ note: required by a bound in `want_bar_for_any_ccx`\n   --> $DIR/hrtb-higher-ranker-supertraits-transitive.rs:32:15\n    |\n LL | fn want_bar_for_any_ccx<B>(b: &B)\n-   |    -------------------- required by a bound in this\n+   |    -------------------- required by a bound in this function\n LL |     where B : for<'ccx> Bar<'ccx>\n    |               ^^^^^^^^^^^^^^^^^^^ required by this bound in `want_bar_for_any_ccx`\n help: consider further restricting this bound"}, {"sha": "7f96909b6e76e3afc51cd0854a2c4c5a58b1a3d0", "filename": "tests/ui/higher-rank-trait-bounds/hrtb-higher-ranker-supertraits.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fhrtb-higher-ranker-supertraits.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -10,7 +10,7 @@ note: required by a bound in `want_foo_for_any_tcx`\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:22:15\n    |\n LL | fn want_foo_for_any_tcx<F>(f: &F)\n-   |    -------------------- required by a bound in this\n+   |    -------------------- required by a bound in this function\n LL |     where F : for<'tcx> Foo<'tcx>\n    |               ^^^^^^^^^^^^^^^^^^^ required by this bound in `want_foo_for_any_tcx`\n help: consider further restricting this bound\n@@ -30,7 +30,7 @@ note: required by a bound in `want_bar_for_any_ccx`\n   --> $DIR/hrtb-higher-ranker-supertraits.rs:39:15\n    |\n LL | fn want_bar_for_any_ccx<B>(b: &B)\n-   |    -------------------- required by a bound in this\n+   |    -------------------- required by a bound in this function\n LL |     where B : for<'ccx> Bar<'ccx>\n    |               ^^^^^^^^^^^^^^^^^^^ required by this bound in `want_bar_for_any_ccx`\n help: consider further restricting this bound"}, {"sha": "4d470ae70229f1f5fe1fd4804433073bb4e8c598", "filename": "tests/ui/higher-rank-trait-bounds/issue-62203-hrtb-ice.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fissue-62203-hrtb-ice.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -25,7 +25,7 @@ note: required by a bound in `T1::m`\n   --> $DIR/issue-62203-hrtb-ice.rs:27:51\n    |\n LL |     fn m<'a, B: Ty<'a>, F>(&self, f: F) -> Unit1\n-   |        - required by a bound in this\n+   |        - required by a bound in this associated function\n LL |     where\n LL |         F: for<'r> T0<'r, (<Self as Ty<'r>>::V,), O = <B as Ty<'r>>::V>,\n    |                                                   ^^^^^^^^^^^^^^^^^^^^ required by this bound in `T1::m`\n@@ -56,7 +56,7 @@ note: required by a bound in `T1::m`\n   --> $DIR/issue-62203-hrtb-ice.rs:27:12\n    |\n LL |     fn m<'a, B: Ty<'a>, F>(&self, f: F) -> Unit1\n-   |        - required by a bound in this\n+   |        - required by a bound in this associated function\n LL |     where\n LL |         F: for<'r> T0<'r, (<Self as Ty<'r>>::V,), O = <B as Ty<'r>>::V>,\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `T1::m`"}, {"sha": "edef6ccd34e615acea21e604eac409dcb7d13541", "filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-89118.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -15,7 +15,7 @@ note: required by a bound in `StackContext`\n   --> $DIR/issue-89118.rs:9:14\n    |\n LL | trait StackContext\n-   |       ------------ required by a bound in this\n+   |       ------------ required by a bound in this trait\n LL | where\n LL |     Ctx<()>: for<'a> BufferUdpStateContext<&'a ()>,\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `StackContext`\n@@ -37,7 +37,7 @@ note: required by a bound in `EthernetWorker`\n   --> $DIR/issue-89118.rs:28:14\n    |\n LL | struct EthernetWorker<C>(C)\n-   |        -------------- required by a bound in this\n+   |        -------------- required by a bound in this struct\n LL | where\n LL |     Ctx<()>: for<'a> BufferUdpStateContext<&'a ()>;\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `EthernetWorker`\n@@ -59,7 +59,7 @@ note: required by a bound in `StackContext`\n   --> $DIR/issue-89118.rs:9:14\n    |\n LL | trait StackContext\n-   |       ------------ required by a bound in this\n+   |       ------------ required by a bound in this trait\n LL | where\n LL |     Ctx<()>: for<'a> BufferUdpStateContext<&'a ()>,\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `StackContext`"}, {"sha": "5be33bccdc317cb403b374e711d51da901bcc055", "filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/issue-90950.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-90950.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -11,7 +11,7 @@ note: required by a bound in `upcast`\n   --> $DIR/issue-90950.rs:27:42\n    |\n LL | fn upcast<Y>(x: Yoke<Y>) -> Yoke<Box<dyn IsCovariant<'static> + 'static>> where\n-   |    ------ required by a bound in this\n+   |    ------ required by a bound in this function\n LL |     Y: for<'a> Yokeable<'a>,\n LL |     for<'a> <Y as Yokeable<'a>>::Output: IsCovariant<'a>\n    |                                          ^^^^^^^^^^^^^^^ required by this bound in `upcast`"}, {"sha": "73388a72574e2bbbe193b83523ced04b2e3d5b8b", "filename": "tests/ui/higher-rank-trait-bounds/normalize-under-binder/norm-before-method-resolution.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fnorm-before-method-resolution.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -8,7 +8,7 @@ note: required by a bound in `weird_bound`\n   --> $DIR/norm-before-method-resolution.rs:18:40\n    |\n LL | fn weird_bound<X>() -> X\n-   |    ----------- required by a bound in this\n+   |    ----------- required by a bound in this function\n ...\n LL |         for<'a> <X as Trait<'a>>::Out: Copy\n    |                                        ^^^^ required by this bound in `weird_bound`"}, {"sha": "dba0353377fa2cd7dfc874da0a243696dd5d3efa", "filename": "tests/ui/implied-bounds/issue-100690.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fimplied-bounds%2Fissue-100690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fimplied-bounds%2Fissue-100690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplied-bounds%2Fissue-100690.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -12,7 +12,7 @@ note: required by a bound in `real_dispatch`\n   --> $DIR/issue-100690.rs:9:8\n    |\n LL | fn real_dispatch<T, F>(f: F) -> Result<(), io::Error>\n-   |    ------------- required by a bound in this\n+   |    ------------- required by a bound in this function\n ...\n LL |     F: FnOnce(&mut UIView<T>) -> Result<(), io::Error> + Send + 'static,\n    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `real_dispatch`"}, {"sha": "563690c9a5d6d090eecd52cd40f2490e9e7428e9", "filename": "tests/ui/issues/issue-60218.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fissues%2Fissue-60218.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fissues%2Fissue-60218.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-60218.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -10,7 +10,7 @@ note: required by a bound in `trigger_error`\n   --> $DIR/issue-60218.rs:13:72\n    |\n LL | pub fn trigger_error<I, F>(iterable: I, functor: F)\n-   |        ------------- required by a bound in this\n+   |        ------------- required by a bound in this function\n ...\n LL | for<'t> <Map<<&'t I as IntoIterator>::IntoIter, F> as Iterator>::Item: Foo,\n    |                                                                        ^^^ required by this bound in `trigger_error`"}, {"sha": "c428ea9ea2c5beeb543d6388ff5729c808c66d54", "filename": "tests/ui/issues/issue-69683.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fissues%2Fissue-69683.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fissues%2Fissue-69683.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-69683.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -31,7 +31,7 @@ LL |     u8: Element<I>,\n    |         ^^^^^^^^^^ required by this bound in `Foo::foo`\n LL | {\n LL |     fn foo(self, x: <u8 as Element<I>>::Array);\n-   |        --- required by a bound in this\n+   |        --- required by a bound in this associated function\n help: try using a fully qualified path to specify the expected types\n    |\n LL |     <u16 as Foo<I>>::foo(0u16, b);"}, {"sha": "69d6ee5cbd5a04d2092190baf10709f093303ca2", "filename": "tests/ui/mismatched_types/issue-47706.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fmismatched_types%2Fissue-47706.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fmismatched_types%2Fissue-47706.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmismatched_types%2Fissue-47706.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -27,7 +27,7 @@ note: required by a bound in `foo`\n   --> $DIR/issue-47706.rs:22:8\n    |\n LL | fn foo<F>(f: F)\n-   |    --- required by a bound in this\n+   |    --- required by a bound in this function\n LL | where\n LL |     F: Fn(),\n    |        ^^^^ required by this bound in `foo`"}, {"sha": "fc5a521746a51c39c15cb6fa576b06a0b95664b3", "filename": "tests/ui/suggestions/imm-ref-trait-object-literal-bound-regions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fimm-ref-trait-object-literal-bound-regions.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -12,7 +12,7 @@ note: required by a bound in `foo`\n   --> $DIR/imm-ref-trait-object-literal-bound-regions.rs:11:20\n    |\n LL | fn foo<X>(_: X)\n-   |    --- required by a bound in this\n+   |    --- required by a bound in this function\n LL | where\n LL |     for<'b> &'b X: Trait,\n    |                    ^^^^^ required by this bound in `foo`"}, {"sha": "55c89884a5f6ca56cd7dbfc545087738ae69d43f", "filename": "tests/ui/suggestions/issue-84973.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fsuggestions%2Fissue-84973.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fsuggestions%2Fissue-84973.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-84973.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -13,7 +13,7 @@ LL |     G: SomeTrait,\n    |        ^^^^^^^^^ required by this bound in `Other::<'a, G>::new`\n LL | {\n LL |     pub fn new(g: G) -> Self {\n-   |            --- required by a bound in this\n+   |            --- required by a bound in this associated function\n help: consider borrowing here\n    |\n LL |     let o = Other::new(&f);"}, {"sha": "e927f26e96dd9f1c38301cea011e6a5aef1b7ec5", "filename": "tests/ui/traits/multidispatch-convert-ambig-dest.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fmultidispatch-convert-ambig-dest.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -29,7 +29,7 @@ note: required by a bound in `test`\n   --> $DIR/multidispatch-convert-ambig-dest.rs:21:11\n    |\n LL | fn test<T,U>(_: T, _: U)\n-   |    ---- required by a bound in this\n+   |    ---- required by a bound in this function\n LL | where T : Convert<U>\n    |           ^^^^^^^^^^ required by this bound in `test`\n help: consider specifying the generic arguments"}, {"sha": "ed9b57cb1bd59d1abe1406b0046a27dc23b8ea4d", "filename": "tests/ui/traits/non_lifetime_binders/bad-sized-cond.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-sized-cond.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-sized-cond.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Fbad-sized-cond.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -18,7 +18,7 @@ note: required by a bound in `foo`\n   --> $DIR/bad-sized-cond.rs:6:15\n    |\n LL | pub fn foo()\n-   |        --- required by a bound in this\n+   |        --- required by a bound in this function\n LL | where\n LL |     for<V> V: Sized,\n    |               ^^^^^ required by this bound in `foo`\n@@ -35,7 +35,7 @@ note: required by a bound in `bar`\n   --> $DIR/bad-sized-cond.rs:12:15\n    |\n LL | pub fn bar()\n-   |        --- required by a bound in this\n+   |        --- required by a bound in this function\n LL | where\n LL |     for<V> V: IntoIterator,\n    |               ^^^^^^^^^^^^ required by this bound in `bar`\n@@ -52,7 +52,7 @@ note: required by a bound in `bar`\n   --> $DIR/bad-sized-cond.rs:12:15\n    |\n LL | pub fn bar()\n-   |        --- required by a bound in this\n+   |        --- required by a bound in this function\n LL | where\n LL |     for<V> V: IntoIterator,\n    |               ^^^^^^^^^^^^ required by this bound in `bar`"}, {"sha": "7bd02550fb3849be754007e6ef4e25b517a82aeb", "filename": "tests/ui/traits/non_lifetime_binders/fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ffail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ffail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ffail.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -17,7 +17,7 @@ note: required by a bound in `fail`\n   --> $DIR/fail.rs:10:15\n    |\n LL | fn fail()\n-   |    ---- required by a bound in this\n+   |    ---- required by a bound in this function\n LL | where\n LL |     for<T> T: Trait,\n    |               ^^^^^ required by this bound in `fail`\n@@ -33,7 +33,7 @@ note: required by a bound in `auto_trait`\n   --> $DIR/fail.rs:15:15\n    |\n LL | fn auto_trait()\n-   |    ---------- required by a bound in this\n+   |    ---------- required by a bound in this function\n LL | where\n LL |     for<T> T: Send,\n    |               ^^^^ required by this bound in `auto_trait`"}, {"sha": "5ff7089b993a828f29ce8bfc49a578b467cc19ff", "filename": "tests/ui/traits/non_lifetime_binders/type-match-with-late-bound.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ftype-match-with-late-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ftype-match-with-late-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ftype-match-with-late-bound.rs?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -0,0 +1,14 @@\n+// edition:2021\n+// check-pass\n+\n+// Checks that test_type_match code doesn't ICE when predicates have late-bound types\n+\n+#![feature(non_lifetime_binders)]\n+//~^ WARN is incomplete and may not be safe to use\n+\n+async fn walk2<'a, T: 'a>(_: T)\n+where\n+    for<F> F: 'a,\n+{}\n+\n+fn main() {}"}, {"sha": "3609bed28dffb92f0e588c6298a415fccb4ade5b", "filename": "tests/ui/traits/non_lifetime_binders/type-match-with-late-bound.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ftype-match-with-late-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ftype-match-with-late-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnon_lifetime_binders%2Ftype-match-with-late-bound.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `non_lifetime_binders` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/type-match-with-late-bound.rs:6:12\n+   |\n+LL | #![feature(non_lifetime_binders)]\n+   |            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #108185 <https://github.com/rust-lang/rust/issues/108185> for more information\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "848b4e69a4bb846b0243c8eca52ed35d35cf9500", "filename": "tests/ui/traits/object/enforce-supertrait-projection.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fobject%2Fenforce-supertrait-projection.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -16,7 +16,7 @@ note: required by a bound in `foo`\n   --> $DIR/enforce-supertrait-projection.rs:15:8\n    |\n LL | fn foo<A, B, T: ?Sized>(x: T::A) -> B\n-   |    --- required by a bound in this\n+   |    --- required by a bound in this function\n LL | where\n LL |     T: Trait<B = B>,\n    |        ^^^^^^^^^^^^ required by this bound in `foo`"}, {"sha": "164e88ede202f3020a2d4ceca992de0d7ad10ce5", "filename": "tests/ui/transmutability/arrays/should_require_well_defined_layout.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Farrays%2Fshould_require_well_defined_layout.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -31,7 +31,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -53,7 +53,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -75,7 +75,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -97,7 +97,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -119,7 +119,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^"}, {"sha": "0f0f77f168372a57929f947edfe639097f172a62", "filename": "tests/ui/transmutability/enums/repr/primitive_reprs_should_have_correct_length.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fprimitive_reprs_should_have_correct_length.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -32,7 +32,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -55,7 +55,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -78,7 +78,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -101,7 +101,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -124,7 +124,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -147,7 +147,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -170,7 +170,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -193,7 +193,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -216,7 +216,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -239,7 +239,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -262,7 +262,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -285,7 +285,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -308,7 +308,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -331,7 +331,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -354,7 +354,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -377,7 +377,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -400,7 +400,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -423,7 +423,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -446,7 +446,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/primitive_reprs_should_have_correct_length.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^"}, {"sha": "d456a746f5ebd1b65350f6e0876bd1d342eaed79", "filename": "tests/ui/transmutability/enums/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fenums%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -32,7 +32,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -55,7 +55,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -78,7 +78,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -101,7 +101,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -124,7 +124,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:14:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^"}, {"sha": "f4988239df943ac7970cdf9f087e454641aa20b1", "filename": "tests/ui/transmutability/enums/should_pad_variants.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_pad_variants.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/should_pad_variants.rs:13:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^"}, {"sha": "350583b0b8515cdf63aa1eefe3947d7ee3f85f3f", "filename": "tests/ui/transmutability/enums/should_respect_endianness.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fenums%2Fshould_respect_endianness.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/should_respect_endianness.rs:14:14\n    |\n LL |       pub fn is_transmutable<Src, Dst>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^"}, {"sha": "22decf15e546b0eccddec8cb62acbcd15df78933", "filename": "tests/ui/transmutability/primitives/bool.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fbool.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/bool.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`"}, {"sha": "c04a0e82aa283ccf719c167121dd6cef35519ef2", "filename": "tests/ui/transmutability/primitives/numbers.stderr", "status": "modified", "additions": 57, "deletions": 57, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Fnumbers.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -25,7 +25,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -41,7 +41,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -57,7 +57,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -73,7 +73,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -89,7 +89,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -105,7 +105,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -121,7 +121,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -137,7 +137,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -153,7 +153,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -169,7 +169,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -185,7 +185,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -201,7 +201,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -217,7 +217,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -233,7 +233,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -249,7 +249,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -265,7 +265,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -281,7 +281,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -297,7 +297,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -313,7 +313,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -329,7 +329,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -345,7 +345,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -361,7 +361,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -377,7 +377,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -393,7 +393,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -409,7 +409,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -425,7 +425,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -441,7 +441,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -457,7 +457,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -473,7 +473,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -489,7 +489,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -505,7 +505,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -521,7 +521,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -537,7 +537,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -553,7 +553,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -569,7 +569,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -585,7 +585,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -601,7 +601,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -617,7 +617,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -633,7 +633,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -649,7 +649,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -665,7 +665,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -681,7 +681,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -697,7 +697,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -713,7 +713,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -729,7 +729,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -745,7 +745,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -761,7 +761,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -777,7 +777,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -793,7 +793,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -809,7 +809,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -825,7 +825,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -841,7 +841,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -857,7 +857,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -873,7 +873,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -889,7 +889,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -905,7 +905,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/numbers.rs:12:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`"}, {"sha": "988cd33b3bf7be1801ba9e2e13b78484151a4681", "filename": "tests/ui/transmutability/primitives/unit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fprimitives%2Funit.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/unit.rs:12:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^"}, {"sha": "eb3bd03fd3169e5db1e9e4d8bdc57a1364009f6f", "filename": "tests/ui/transmutability/references.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Freferences.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Freferences.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Freferences.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/references.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^"}, {"sha": "d9aebac6417b35206a77a7d6d77481d172f9d8fa", "filename": "tests/ui/transmutability/structs/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fstructs%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -32,7 +32,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -55,7 +55,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -78,7 +78,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -101,7 +101,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -124,7 +124,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -147,7 +147,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -170,7 +170,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -193,7 +193,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -216,7 +216,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -239,7 +239,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -262,7 +262,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^"}, {"sha": "aa0cbc51b1b227b38d2aea0cc0c433e380778292", "filename": "tests/ui/transmutability/unions/repr/should_require_well_defined_layout.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Frepr%2Fshould_require_well_defined_layout.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^\n@@ -32,7 +32,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_require_well_defined_layout.rs:13:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^"}, {"sha": "f4988239df943ac7970cdf9f087e454641aa20b1", "filename": "tests/ui/transmutability/unions/should_pad_variants.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Fshould_pad_variants.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/should_pad_variants.rs:13:14\n    |\n LL |       pub fn is_transmutable<Src, Dst, Context>()\n-   |              --------------- required by a bound in this\n+   |              --------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<Src, Context, {\n    |  ______________^"}, {"sha": "fa7dcc3d22a9bf603e98abe84b28d6f5db81a144", "filename": "tests/ui/transmutability/unions/should_reject_contraction.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_contraction.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_contraction.rs:13:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`"}, {"sha": "880e4cd89403e8cda995322513c74385e80f9a3b", "filename": "tests/ui/transmutability/unions/should_reject_disjoint.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_disjoint.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_reject_disjoint.rs:13:14\n    |\n LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n+   |            --------------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY.and(Assume::VALIDITY) }>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`\n@@ -25,7 +25,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/should_reject_disjoint.rs:13:14\n    |\n LL |     pub fn is_maybe_transmutable<Src, Dst>()\n-   |            --------------------- required by a bound in this\n+   |            --------------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY.and(Assume::VALIDITY) }>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_maybe_transmutable`"}, {"sha": "501760b0809607df773c3b68dc7d723014e5defb", "filename": "tests/ui/transmutability/unions/should_reject_intersecting.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Funions%2Fshould_reject_intersecting.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_intersecting.rs:14:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`\n@@ -25,7 +25,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_intersecting.rs:14:14\n    |\n LL |     pub fn is_transmutable<Src, Dst>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context, { Assume::SAFETY }>\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`"}, {"sha": "afbba653b83458d46ea0a5e2c0343017c7aa59a7", "filename": "tests/ui/transmutability/visibility/should_reject_if_dst_has_private_field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_field.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_private_field.rs:13:14\n    |\n LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`"}, {"sha": "f14b5d8b2cb588514be95c6035f354649ac7b00e", "filename": "tests/ui/transmutability/visibility/should_reject_if_dst_has_private_variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_private_variant.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_private_variant.rs:13:14\n    |\n LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`"}, {"sha": "01ae8bea25618fc3f1dee25d7de3170412ceba48", "filename": "tests/ui/transmutability/visibility/should_reject_if_dst_has_unreachable_field.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_field.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_unreachable_field.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`"}, {"sha": "20a680a748456ed8cb934cd3241dad11fdc1eae9", "filename": "tests/ui/transmutability/visibility/should_reject_if_dst_has_unreachable_ty.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fvisibility%2Fshould_reject_if_dst_has_unreachable_ty.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -21,7 +21,7 @@ note: required by a bound in `is_transmutable`\n   --> $DIR/should_reject_if_dst_has_unreachable_ty.rs:15:14\n    |\n LL |     pub fn is_transmutable<Src, Dst, Context>()\n-   |            --------------- required by a bound in this\n+   |            --------------- required by a bound in this function\n LL |     where\n LL |         Dst: BikeshedIntrinsicFrom<Src, Context> // safety is NOT assumed\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `is_transmutable`"}, {"sha": "87fd4fb663086db48699457537f2db6f07ea82bf", "filename": "tests/ui/transmute/transmute-padding-ice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmute%2Ftransmute-padding-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Ftransmute%2Ftransmute-padding-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute%2Ftransmute-padding-ice.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -9,7 +9,7 @@ note: required by a bound in `is_maybe_transmutable`\n   --> $DIR/transmute-padding-ice.rs:11:14\n    |\n LL |       pub fn is_maybe_transmutable<Src, Dst>()\n-   |              --------------------- required by a bound in this\n+   |              --------------------- required by a bound in this function\n LL |       where\n LL |           Dst: BikeshedIntrinsicFrom<\n    |  ______________^"}, {"sha": "846a44ce4d7a94b7c8a8606f886e309e4914b7b0", "filename": "tests/ui/unboxed-closures/unboxed-closures-infer-fn-once-move-from-projection.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fn-once-move-from-projection.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fn-once-move-from-projection.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funboxed-closures%2Funboxed-closures-infer-fn-once-move-from-projection.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -14,7 +14,7 @@ note: required by a bound in `foo`\n   --> $DIR/unboxed-closures-infer-fn-once-move-from-projection.rs:4:14\n    |\n LL | fn foo<F>(f: F)\n-   |    --- required by a bound in this\n+   |    --- required by a bound in this function\n LL |     where F: Fn()\n    |              ^^^^ required by this bound in `foo`\n "}, {"sha": "b57b3015e475d98bd2ffe761613a645987ea8d07", "filename": "tests/ui/unsized/issue-71659.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Funsized%2Fissue-71659.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Funsized%2Fissue-71659.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funsized%2Fissue-71659.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -8,7 +8,7 @@ note: required by a bound in `Cast::cast`\n   --> $DIR/issue-71659.rs:19:15\n    |\n LL |     fn cast<T: ?Sized>(&self) -> &T\n-   |        ---- required by a bound in this\n+   |        ---- required by a bound in this associated function\n LL |     where\n LL |         Self: CastTo<T>,\n    |               ^^^^^^^^^ required by this bound in `Cast::cast`"}, {"sha": "191a8ca8ebcf37c44eeb535c964ff87ee034e0cf", "filename": "tests/ui/where-clauses/higher-ranked-fn-type.quiet.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.quiet.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.quiet.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.quiet.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -8,7 +8,7 @@ note: required by a bound in `called`\n   --> $DIR/higher-ranked-fn-type.rs:12:25\n    |\n LL | fn called()\n-   |    ------ required by a bound in this\n+   |    ------ required by a bound in this function\n LL | where\n LL |     for<'b> fn(&'b ()): Foo,\n    |                         ^^^ required by this bound in `called`"}, {"sha": "f4c7acd5c58971967ebe1d32764d45712e3b5763", "filename": "tests/ui/where-clauses/higher-ranked-fn-type.verbose.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.verbose.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f9216b75646cde0c4c69ae00232778a47fc893d3/tests%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.verbose.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwhere-clauses%2Fhigher-ranked-fn-type.verbose.stderr?ref=f9216b75646cde0c4c69ae00232778a47fc893d3", "patch": "@@ -8,7 +8,7 @@ note: required by a bound in `called`\n   --> $DIR/higher-ranked-fn-type.rs:12:25\n    |\n LL | fn called()\n-   |    ------ required by a bound in this\n+   |    ------ required by a bound in this function\n LL | where\n LL |     for<'b> fn(&'b ()): Foo,\n    |                         ^^^ required by this bound in `called`"}]}