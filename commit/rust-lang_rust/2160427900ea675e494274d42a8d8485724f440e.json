{"sha": "2160427900ea675e494274d42a8d8485724f440e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNjA0Mjc5MDBlYTY3NWU0OTQyNzRkNDJhOGQ4NDg1NzI0ZjQ0MGU=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-08T13:35:34Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:47Z"}, "message": "Fix benches", "tree": {"sha": "4d812e07d8130a6b1a2ff6038722ac9024764885", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d812e07d8130a6b1a2ff6038722ac9024764885"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2160427900ea675e494274d42a8d8485724f440e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2160427900ea675e494274d42a8d8485724f440e", "html_url": "https://github.com/rust-lang/rust/commit/2160427900ea675e494274d42a8d8485724f440e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2160427900ea675e494274d42a8d8485724f440e/comments", "author": null, "committer": null, "parents": [{"sha": "cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b", "html_url": "https://github.com/rust-lang/rust/commit/cdbb3ca9b776b066e2c93acfb60da8537d2b1c9b"}], "stats": {"total": 23, "additions": 14, "deletions": 9}, "files": [{"sha": "112d4fd0912d4e3e2aa1f8b478d270e6a05e6fe9", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2160427900ea675e494274d42a8d8485724f440e/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2160427900ea675e494274d42a8d8485724f440e/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=2160427900ea675e494274d42a8d8485724f440e", "patch": "@@ -8,13 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unboxed_closures)]\n+\n use std::collections::{TrieMap, TreeMap, HashMap, HashSet};\n use std::os;\n use std::rand::{Rng, IsaacRng, SeedableRng};\n use std::time::Duration;\n use std::uint;\n \n-fn timed(label: &str, f: ||) {\n+fn timed<F>(label: &str, f: F) where F: FnMut() {\n     println!(\"  {}: {}\", label, Duration::span(f));\n }\n "}, {"sha": "38c31da1a6d32eef344851d48d10f3aa9cb3436f", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2160427900ea675e494274d42a8d8485724f440e/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2160427900ea675e494274d42a8d8485724f440e/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=2160427900ea675e494274d42a8d8485724f440e", "patch": "@@ -10,6 +10,8 @@\n \n // ignore-pretty very bad with line comments\n \n+#![feature(unboxed_closures)]\n+\n extern crate collections;\n extern crate rand;\n \n@@ -31,7 +33,7 @@ struct Results {\n     delete_strings: Duration,\n }\n \n-fn timed(result: &mut Duration, op: ||) {\n+fn timed<F>(result: &mut Duration, op: F) where F: FnOnce() {\n     *result = Duration::span(op);\n }\n \n@@ -66,7 +68,7 @@ impl Results {\n                      rand_cap: uint,\n                      f: || -> T) { {\n             let mut set = f();\n-            timed(&mut self.sequential_ints, || {\n+            timed(&mut self.sequential_ints, move || {\n                 for i in range(0u, num_keys) {\n                     set.insert(i);\n                 }\n@@ -79,7 +81,7 @@ impl Results {\n \n         {\n             let mut set = f();\n-            timed(&mut self.random_ints, || {\n+            timed(&mut self.random_ints, move || {\n                 for _ in range(0, num_keys) {\n                     set.insert(rng.gen::<uint>() % rand_cap);\n                 }\n@@ -92,7 +94,7 @@ impl Results {\n                 set.insert(i);\n             }\n \n-            timed(&mut self.delete_ints, || {\n+            timed(&mut self.delete_ints, move || {\n                 for i in range(0u, num_keys) {\n                     assert!(set.remove(&i));\n                 }\n@@ -108,7 +110,7 @@ impl Results {\n                      f: || -> T) {\n         {\n             let mut set = f();\n-            timed(&mut self.sequential_strings, || {\n+            timed(&mut self.sequential_strings, move || {\n                 for i in range(0u, num_keys) {\n                     set.insert(i.to_string());\n                 }\n@@ -121,7 +123,7 @@ impl Results {\n \n         {\n             let mut set = f();\n-            timed(&mut self.random_strings, || {\n+            timed(&mut self.random_strings, move || {\n                 for _ in range(0, num_keys) {\n                     let s = rng.gen::<uint>().to_string();\n                     set.insert(s);\n@@ -134,7 +136,7 @@ impl Results {\n             for i in range(0u, num_keys) {\n                 set.insert(i.to_string());\n             }\n-            timed(&mut self.delete_strings, || {\n+            timed(&mut self.delete_strings, move || {\n                 for i in range(0u, num_keys) {\n                     assert!(set.remove(&i.to_string()));\n                 }"}, {"sha": "6e2cd508291e0305f25c3c53fafbd89ac3650ac7", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2160427900ea675e494274d42a8d8485724f440e/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2160427900ea675e494274d42a8d8485724f440e/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=2160427900ea675e494274d42a8d8485724f440e", "patch": "@@ -12,6 +12,7 @@\n // Microbenchmarks for various functions in std and extra\n \n #![feature(macro_rules)]\n+#![feature(unboxed_closures)]\n \n use std::io::File;\n use std::mem::swap;\n@@ -41,7 +42,7 @@ fn main() {\n     bench!(is_utf8_multibyte);\n }\n \n-fn maybe_run_test(argv: &[String], name: String, test: ||) {\n+fn maybe_run_test<F>(argv: &[String], name: String, test: F) where F: FnOnce() {\n     let mut run_test = false;\n \n     if os::getenv(\"RUST_BENCH\").is_some() {"}]}