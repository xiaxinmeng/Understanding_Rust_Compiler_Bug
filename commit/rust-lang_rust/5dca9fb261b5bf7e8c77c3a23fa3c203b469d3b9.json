{"sha": "5dca9fb261b5bf7e8c77c3a23fa3c203b469d3b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkY2E5ZmIyNjFiNWJmN2U4Yzc3YzNhMjNmYTNjMjAzYjQ2OWQzYjk=", "commit": {"author": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-08-05T01:58:06Z"}, "committer": {"name": "Luqman Aden", "email": "me@luqman.ca", "date": "2014-08-09T14:32:33Z"}, "message": "librustc: Also use new alloca if matching on an arg or upvar which we reassign in the arm body.", "tree": {"sha": "b33b90e1b4f72478f030d652244b440bfc2acd07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b33b90e1b4f72478f030d652244b440bfc2acd07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dca9fb261b5bf7e8c77c3a23fa3c203b469d3b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dca9fb261b5bf7e8c77c3a23fa3c203b469d3b9", "html_url": "https://github.com/rust-lang/rust/commit/5dca9fb261b5bf7e8c77c3a23fa3c203b469d3b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dca9fb261b5bf7e8c77c3a23fa3c203b469d3b9/comments", "author": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "committer": {"login": "luqmana", "id": 287063, "node_id": "MDQ6VXNlcjI4NzA2Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/287063?v=4", "gravatar_id": "", "url": "https://api.github.com/users/luqmana", "html_url": "https://github.com/luqmana", "followers_url": "https://api.github.com/users/luqmana/followers", "following_url": "https://api.github.com/users/luqmana/following{/other_user}", "gists_url": "https://api.github.com/users/luqmana/gists{/gist_id}", "starred_url": "https://api.github.com/users/luqmana/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/luqmana/subscriptions", "organizations_url": "https://api.github.com/users/luqmana/orgs", "repos_url": "https://api.github.com/users/luqmana/repos", "events_url": "https://api.github.com/users/luqmana/events{/privacy}", "received_events_url": "https://api.github.com/users/luqmana/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7c0f7d1c07a060b6d06bdd60b24c78bd2c9a6c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7c0f7d1c07a060b6d06bdd60b24c78bd2c9a6c3", "html_url": "https://github.com/rust-lang/rust/commit/d7c0f7d1c07a060b6d06bdd60b24c78bd2c9a6c3"}], "stats": {"total": 55, "additions": 51, "deletions": 4}, "files": [{"sha": "85b6294ae34e6d270c4bf49d39f2922d639d204d", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5dca9fb261b5bf7e8c77c3a23fa3c203b469d3b9/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dca9fb261b5bf7e8c77c3a23fa3c203b469d3b9/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=5dca9fb261b5bf7e8c77c3a23fa3c203b469d3b9", "patch": "@@ -1298,7 +1298,8 @@ pub fn trans_match<'a>(\n fn is_discr_reassigned(bcx: &Block, discr: &ast::Expr, body: &ast::Expr) -> bool {\n     match discr.node {\n         ast::ExprPath(..) => match bcx.def(discr.id) {\n-            def::DefLocal(vid, _) | def::DefBinding(vid, _) => {\n+            def::DefArg(vid, _) | def::DefBinding(vid, _) |\n+            def::DefLocal(vid, _) | def::DefUpvar(vid, _, _, _) => {\n                 let mut rc = ReassignmentChecker {\n                     node: vid,\n                     reassigned: false\n@@ -1326,9 +1327,11 @@ impl euv::Delegate for ReassignmentChecker {\n     fn borrow(&mut self, _: ast::NodeId, _: Span, _: mc::cmt, _: ty::Region,\n               _: ty::BorrowKind, _: euv::LoanCause) {}\n     fn decl_without_init(&mut self, _: ast::NodeId, _: Span) {}\n+\n     fn mutate(&mut self, _: ast::NodeId, _: Span, cmt: mc::cmt, _: euv::MutateMode) {\n         match cmt.cat {\n-            mc::cat_local(vid) => self.reassigned = self.node == vid,\n+            mc::cat_copied_upvar(mc::CopiedUpvar { upvar_id: vid, .. }) |\n+            mc::cat_arg(vid) | mc::cat_local(vid) => self.reassigned = self.node == vid,\n             _ => {}\n         }\n     }"}, {"sha": "0ef0fc83c94565ca23300abadb44e72cbf69e4a7", "filename": "src/test/run-pass/issue-15571.rs", "status": "modified", "additions": 46, "deletions": 2, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/5dca9fb261b5bf7e8c77c3a23fa3c203b469d3b9/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dca9fb261b5bf7e8c77c3a23fa3c203b469d3b9/src%2Ftest%2Frun-pass%2Fissue-15571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15571.rs?ref=5dca9fb261b5bf7e8c77c3a23fa3c203b469d3b9", "patch": "@@ -8,13 +8,57 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+fn match_on_local() {\n     let mut foo = Some(box 5i);\n     match foo {\n         None => {},\n         Some(x) => {\n             foo = Some(x);\n         }\n-    };\n+    }\n     println!(\"'{}'\", foo.unwrap());\n }\n+\n+fn match_on_arg(mut foo: Option<Box<int>>) {\n+    match foo {\n+        None => {}\n+        Some(x) => {\n+            foo = Some(x);\n+        }\n+    }\n+    println!(\"'{}'\", foo.unwrap());\n+}\n+\n+fn match_on_binding() {\n+    match Some(box 7i) {\n+        mut foo => {\n+            match foo {\n+                None => {},\n+                Some(x) => {\n+                    foo = Some(x);\n+                }\n+            }\n+            println!(\"'{}'\", foo.unwrap());\n+        }\n+    }\n+}\n+\n+fn match_on_upvar() {\n+    let mut foo = Some(box 8i);\n+    (proc() {\n+        match foo {\n+            None => {},\n+            Some(x) => {\n+                foo = Some(x);\n+            }\n+        }\n+        println!(\"'{}'\", foo.unwrap());\n+    })();\n+}\n+\n+fn main() {\n+    match_on_local();\n+    match_on_arg(Some(box 6i));\n+    match_on_binding();\n+    match_on_upvar();\n+}"}]}