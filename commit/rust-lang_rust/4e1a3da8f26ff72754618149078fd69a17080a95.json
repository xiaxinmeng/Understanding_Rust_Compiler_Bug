{"sha": "4e1a3da8f26ff72754618149078fd69a17080a95", "node_id": "C_kwDOAAsO6NoAKDRlMWEzZGE4ZjI2ZmY3Mjc1NDYxODE0OTA3OGZkNjlhMTcwODBhOTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-08T16:38:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-08T16:38:40Z"}, "message": "Auto merge of #13158 - jonas-schievink:inlayhint-links, r=jonas-schievink\n\nfeat: make clicking a closing brace inlay hint go to the opening brace", "tree": {"sha": "cec7a423227fcffd85b3d766fe3c21f421c08a60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cec7a423227fcffd85b3d766fe3c21f421c08a60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e1a3da8f26ff72754618149078fd69a17080a95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e1a3da8f26ff72754618149078fd69a17080a95", "html_url": "https://github.com/rust-lang/rust/commit/4e1a3da8f26ff72754618149078fd69a17080a95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e1a3da8f26ff72754618149078fd69a17080a95/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "690955643504b0dea0d49ab5c9d5fd45ce96230f", "url": "https://api.github.com/repos/rust-lang/rust/commits/690955643504b0dea0d49ab5c9d5fd45ce96230f", "html_url": "https://github.com/rust-lang/rust/commit/690955643504b0dea0d49ab5c9d5fd45ce96230f"}, {"sha": "c4eadab016cf16bd32b90ba7ecc71361592a4f28", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4eadab016cf16bd32b90ba7ecc71361592a4f28", "html_url": "https://github.com/rust-lang/rust/commit/c4eadab016cf16bd32b90ba7ecc71361592a4f28"}], "stats": {"total": 245, "additions": 192, "deletions": 53}, "files": [{"sha": "d1b1d2c331a513d3ca6a17d4de2609f672f6ed92", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 146, "deletions": 36, "changes": 182, "blob_url": "https://github.com/rust-lang/rust/blob/4e1a3da8f26ff72754618149078fd69a17080a95/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1a3da8f26ff72754618149078fd69a17080a95/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=4e1a3da8f26ff72754618149078fd69a17080a95", "patch": "@@ -1,3 +1,5 @@\n+use std::fmt;\n+\n use either::Either;\n use hir::{known, Callable, HasVisibility, HirDisplay, Mutability, Semantics, TypeInfo};\n use ide_db::{\n@@ -69,7 +71,7 @@ pub enum InlayKind {\n pub struct InlayHint {\n     pub range: TextRange,\n     pub kind: InlayKind,\n-    pub label: String,\n+    pub label: InlayHintLabel,\n     pub tooltip: Option<InlayTooltip>,\n }\n \n@@ -80,6 +82,83 @@ pub enum InlayTooltip {\n     HoverOffset(FileId, TextSize),\n }\n \n+pub struct InlayHintLabel {\n+    pub parts: Vec<InlayHintLabelPart>,\n+}\n+\n+impl InlayHintLabel {\n+    pub fn as_simple_str(&self) -> Option<&str> {\n+        match &*self.parts {\n+            [part] => part.as_simple_str(),\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn prepend_str(&mut self, s: &str) {\n+        match &mut *self.parts {\n+            [part, ..] if part.as_simple_str().is_some() => part.text = format!(\"{s}{}\", part.text),\n+            _ => self.parts.insert(0, InlayHintLabelPart { text: s.into(), linked_location: None }),\n+        }\n+    }\n+\n+    pub fn append_str(&mut self, s: &str) {\n+        match &mut *self.parts {\n+            [.., part] if part.as_simple_str().is_some() => part.text.push_str(s),\n+            _ => self.parts.push(InlayHintLabelPart { text: s.into(), linked_location: None }),\n+        }\n+    }\n+}\n+\n+impl From<String> for InlayHintLabel {\n+    fn from(s: String) -> Self {\n+        Self { parts: vec![InlayHintLabelPart { text: s, linked_location: None }] }\n+    }\n+}\n+\n+impl fmt::Display for InlayHintLabel {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(f, \"{}\", self.parts.iter().map(|part| &part.text).format(\"\"))\n+    }\n+}\n+\n+impl fmt::Debug for InlayHintLabel {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_list().entries(&self.parts).finish()\n+    }\n+}\n+\n+pub struct InlayHintLabelPart {\n+    pub text: String,\n+    /// Source location represented by this label part. The client will use this to fetch the part's\n+    /// hover tooltip, and Ctrl+Clicking the label part will navigate to the definition the location\n+    /// refers to (not necessarily the location itself).\n+    /// When setting this, no tooltip must be set on the containing hint, or VS Code will display\n+    /// them both.\n+    pub linked_location: Option<FileRange>,\n+}\n+\n+impl InlayHintLabelPart {\n+    pub fn as_simple_str(&self) -> Option<&str> {\n+        match self {\n+            Self { text, linked_location: None } => Some(text),\n+            _ => None,\n+        }\n+    }\n+}\n+\n+impl fmt::Debug for InlayHintLabelPart {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self.as_simple_str() {\n+            Some(string) => string.fmt(f),\n+            None => f\n+                .debug_struct(\"InlayHintLabelPart\")\n+                .field(\"text\", &self.text)\n+                .field(\"linked_location\", &self.linked_location)\n+                .finish(),\n+        }\n+    }\n+}\n+\n // Feature: Inlay Hints\n //\n // rust-analyzer shows additional information inline with the source code.\n@@ -192,10 +271,10 @@ fn closing_brace_hints(\n ) -> Option<()> {\n     let min_lines = config.closing_brace_hints_min_lines?;\n \n-    let name = |it: ast::Name| it.syntax().text_range().start();\n+    let name = |it: ast::Name| it.syntax().text_range();\n \n     let mut closing_token;\n-    let (label, name_offset) = if let Some(item_list) = ast::AssocItemList::cast(node.clone()) {\n+    let (label, name_range) = if let Some(item_list) = ast::AssocItemList::cast(node.clone()) {\n         closing_token = item_list.r_curly_token()?;\n \n         let parent = item_list.syntax().parent()?;\n@@ -205,11 +284,11 @@ fn closing_brace_hints(\n                     let imp = sema.to_def(&imp)?;\n                     let ty = imp.self_ty(sema.db);\n                     let trait_ = imp.trait_(sema.db);\n-\n-                    (match trait_ {\n+                    let hint_text = match trait_ {\n                         Some(tr) => format!(\"impl {} for {}\", tr.name(sema.db), ty.display_truncated(sema.db, config.max_length)),\n                         None => format!(\"impl {}\", ty.display_truncated(sema.db, config.max_length)),\n-                    }, None)\n+                    };\n+                    (hint_text, None)\n                 },\n                 ast::Trait(tr) => {\n                     (format!(\"trait {}\", tr.name()?), tr.name().map(name))\n@@ -253,7 +332,7 @@ fn closing_brace_hints(\n \n         (\n             format!(\"{}!\", mac.path()?),\n-            mac.path().and_then(|it| it.segment()).map(|it| it.syntax().text_range().start()),\n+            mac.path().and_then(|it| it.segment()).map(|it| it.syntax().text_range()),\n         )\n     } else {\n         return None;\n@@ -278,11 +357,12 @@ fn closing_brace_hints(\n         return None;\n     }\n \n+    let linked_location = name_range.map(|range| FileRange { file_id, range });\n     acc.push(InlayHint {\n         range: closing_token.text_range(),\n         kind: InlayKind::ClosingBraceHint,\n-        label,\n-        tooltip: name_offset.map(|it| InlayTooltip::HoverOffset(file_id, it)),\n+        label: InlayHintLabel { parts: vec![InlayHintLabelPart { text: label, linked_location }] },\n+        tooltip: None, // provided by label part location\n     });\n \n     None\n@@ -311,7 +391,7 @@ fn implicit_static_hints(\n             acc.push(InlayHint {\n                 range: t.text_range(),\n                 kind: InlayKind::LifetimeHint,\n-                label: \"'static\".to_owned(),\n+                label: \"'static\".to_owned().into(),\n                 tooltip: Some(InlayTooltip::String(\"Elided static lifetime\".into())),\n             });\n         }\n@@ -329,10 +409,10 @@ fn fn_lifetime_fn_hints(\n         return None;\n     }\n \n-    let mk_lt_hint = |t: SyntaxToken, label| InlayHint {\n+    let mk_lt_hint = |t: SyntaxToken, label: String| InlayHint {\n         range: t.text_range(),\n         kind: InlayKind::LifetimeHint,\n-        label,\n+        label: label.into(),\n         tooltip: Some(InlayTooltip::String(\"Elided lifetime\".into())),\n     };\n \n@@ -486,7 +566,8 @@ fn fn_lifetime_fn_hints(\n                     \"{}{}\",\n                     allocated_lifetimes.iter().format(\", \"),\n                     if is_empty { \"\" } else { \", \" }\n-                ),\n+                )\n+                .into(),\n                 tooltip: Some(InlayTooltip::String(\"Elided lifetimes\".into())),\n             });\n         }\n@@ -535,7 +616,8 @@ fn closure_ret_hints(\n         range: param_list.syntax().text_range(),\n         kind: InlayKind::ClosureReturnTypeHint,\n         label: hint_iterator(sema, &famous_defs, config, &ty)\n-            .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string()),\n+            .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string())\n+            .into(),\n         tooltip: Some(InlayTooltip::HoverRanged(file_id, param_list.syntax().text_range())),\n     });\n     Some(())\n@@ -562,7 +644,7 @@ fn reborrow_hints(\n     acc.push(InlayHint {\n         range: expr.syntax().text_range(),\n         kind: InlayKind::ImplicitReborrowHint,\n-        label: label.to_string(),\n+        label: label.to_string().into(),\n         tooltip: Some(InlayTooltip::String(\"Compiler inserted reborrow\".into())),\n     });\n     Some(())\n@@ -620,9 +702,9 @@ fn chaining_hints(\n             acc.push(InlayHint {\n                 range: expr.syntax().text_range(),\n                 kind: InlayKind::ChainingHint,\n-                label: hint_iterator(sema, &famous_defs, config, &ty).unwrap_or_else(|| {\n-                    ty.display_truncated(sema.db, config.max_length).to_string()\n-                }),\n+                label: hint_iterator(sema, &famous_defs, config, &ty)\n+                    .unwrap_or_else(|| ty.display_truncated(sema.db, config.max_length).to_string())\n+                    .into(),\n                 tooltip: Some(InlayTooltip::HoverRanged(file_id, expr.syntax().text_range())),\n             });\n         }\n@@ -674,7 +756,7 @@ fn param_name_hints(\n             InlayHint {\n                 range,\n                 kind: InlayKind::ParameterHint,\n-                label: param_name,\n+                label: param_name.into(),\n                 tooltip: tooltip.map(|it| InlayTooltip::HoverOffset(it.file_id, it.range.start())),\n             }\n         });\n@@ -705,7 +787,7 @@ fn binding_mode_hints(\n         acc.push(InlayHint {\n             range,\n             kind: InlayKind::BindingModeHint,\n-            label: r.to_string(),\n+            label: r.to_string().into(),\n             tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n         });\n     });\n@@ -720,7 +802,7 @@ fn binding_mode_hints(\n             acc.push(InlayHint {\n                 range,\n                 kind: InlayKind::BindingModeHint,\n-                label: bm.to_string(),\n+                label: bm.to_string().into(),\n                 tooltip: Some(InlayTooltip::String(\"Inferred binding mode\".into())),\n             });\n         }\n@@ -772,7 +854,7 @@ fn bind_pat_hints(\n             None => pat.syntax().text_range(),\n         },\n         kind: InlayKind::TypeHint,\n-        label,\n+        label: label.into(),\n         tooltip: pat\n             .name()\n             .map(|it| it.syntax().text_range())\n@@ -2223,7 +2305,9 @@ fn main() {\n                     InlayHint {\n                         range: 147..172,\n                         kind: ChainingHint,\n-                        label: \"B\",\n+                        label: [\n+                            \"B\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2236,7 +2320,9 @@ fn main() {\n                     InlayHint {\n                         range: 147..154,\n                         kind: ChainingHint,\n-                        label: \"A\",\n+                        label: [\n+                            \"A\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2294,7 +2380,9 @@ fn main() {\n                     InlayHint {\n                         range: 143..190,\n                         kind: ChainingHint,\n-                        label: \"C\",\n+                        label: [\n+                            \"C\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2307,7 +2395,9 @@ fn main() {\n                     InlayHint {\n                         range: 143..179,\n                         kind: ChainingHint,\n-                        label: \"B\",\n+                        label: [\n+                            \"B\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2350,7 +2440,9 @@ fn main() {\n                     InlayHint {\n                         range: 246..283,\n                         kind: ChainingHint,\n-                        label: \"B<X<i32, bool>>\",\n+                        label: [\n+                            \"B<X<i32, bool>>\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2363,7 +2455,9 @@ fn main() {\n                     InlayHint {\n                         range: 246..265,\n                         kind: ChainingHint,\n-                        label: \"A<X<i32, bool>>\",\n+                        label: [\n+                            \"A<X<i32, bool>>\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2408,7 +2502,9 @@ fn main() {\n                     InlayHint {\n                         range: 174..241,\n                         kind: ChainingHint,\n-                        label: \"impl Iterator<Item = ()>\",\n+                        label: [\n+                            \"impl Iterator<Item = ()>\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2421,7 +2517,9 @@ fn main() {\n                     InlayHint {\n                         range: 174..224,\n                         kind: ChainingHint,\n-                        label: \"impl Iterator<Item = ()>\",\n+                        label: [\n+                            \"impl Iterator<Item = ()>\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2434,7 +2532,9 @@ fn main() {\n                     InlayHint {\n                         range: 174..206,\n                         kind: ChainingHint,\n-                        label: \"impl Iterator<Item = ()>\",\n+                        label: [\n+                            \"impl Iterator<Item = ()>\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2447,7 +2547,9 @@ fn main() {\n                     InlayHint {\n                         range: 174..189,\n                         kind: ChainingHint,\n-                        label: \"&mut MyIter\",\n+                        label: [\n+                            \"&mut MyIter\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2489,7 +2591,9 @@ fn main() {\n                     InlayHint {\n                         range: 124..130,\n                         kind: TypeHint,\n-                        label: \"Struct\",\n+                        label: [\n+                            \"Struct\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2502,7 +2606,9 @@ fn main() {\n                     InlayHint {\n                         range: 145..185,\n                         kind: ChainingHint,\n-                        label: \"Struct\",\n+                        label: [\n+                            \"Struct\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2515,7 +2621,9 @@ fn main() {\n                     InlayHint {\n                         range: 145..168,\n                         kind: ChainingHint,\n-                        label: \"Struct\",\n+                        label: [\n+                            \"Struct\",\n+                        ],\n                         tooltip: Some(\n                             HoverRanged(\n                                 FileId(\n@@ -2528,7 +2636,9 @@ fn main() {\n                     InlayHint {\n                         range: 222..228,\n                         kind: ParameterHint,\n-                        label: \"self\",\n+                        label: [\n+                            \"self\",\n+                        ],\n                         tooltip: Some(\n                             HoverOffset(\n                                 FileId("}, {"sha": "0552330814aa4b1bd85762119136531489c20086", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e1a3da8f26ff72754618149078fd69a17080a95/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1a3da8f26ff72754618149078fd69a17080a95/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=4e1a3da8f26ff72754618149078fd69a17080a95", "patch": "@@ -82,8 +82,8 @@ pub use crate::{\n     highlight_related::{HighlightRelatedConfig, HighlightedRange},\n     hover::{HoverAction, HoverConfig, HoverDocFormat, HoverGotoTypeData, HoverResult},\n     inlay_hints::{\n-        ClosureReturnTypeHints, InlayHint, InlayHintsConfig, InlayKind, InlayTooltip,\n-        LifetimeElisionHints, ReborrowHints,\n+        ClosureReturnTypeHints, InlayHint, InlayHintLabel, InlayHintsConfig, InlayKind,\n+        InlayTooltip, LifetimeElisionHints, ReborrowHints,\n     },\n     join_lines::JoinLinesConfig,\n     markup::Markup,"}, {"sha": "e79cf3d3fd6e9ffe535e5ff9aee9f007c52ec157", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e1a3da8f26ff72754618149078fd69a17080a95/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1a3da8f26ff72754618149078fd69a17080a95/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=4e1a3da8f26ff72754618149078fd69a17080a95", "patch": "@@ -1362,7 +1362,7 @@ pub(crate) fn handle_inlay_hints(\n             .map(|it| {\n                 to_proto::inlay_hint(&snap, &line_index, inlay_hints_config.render_colons, it)\n             })\n-            .collect(),\n+            .collect::<Result<Vec<_>>>()?,\n     ))\n }\n "}, {"sha": "e083b9d0e33789ae448a42bd698dcee79a46f6c8", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/4e1a3da8f26ff72754618149078fd69a17080a95/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e1a3da8f26ff72754618149078fd69a17080a95/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=4e1a3da8f26ff72754618149078fd69a17080a95", "patch": "@@ -9,8 +9,9 @@ use ide::{\n     Annotation, AnnotationKind, Assist, AssistKind, Cancellable, CompletionItem,\n     CompletionItemKind, CompletionRelevance, Documentation, FileId, FileRange, FileSystemEdit,\n     Fold, FoldKind, Highlight, HlMod, HlOperator, HlPunct, HlRange, HlTag, Indel, InlayHint,\n-    InlayKind, Markup, NavigationTarget, ReferenceCategory, RenameError, Runnable, Severity,\n-    SignatureHelp, SourceChange, StructureNodeKind, SymbolKind, TextEdit, TextRange, TextSize,\n+    InlayHintLabel, InlayKind, Markup, NavigationTarget, ReferenceCategory, RenameError, Runnable,\n+    Severity, SignatureHelp, SourceChange, StructureNodeKind, SymbolKind, TextEdit, TextRange,\n+    TextSize,\n };\n use itertools::Itertools;\n use serde_json::to_value;\n@@ -426,9 +427,16 @@ pub(crate) fn inlay_hint(\n     snap: &GlobalStateSnapshot,\n     line_index: &LineIndex,\n     render_colons: bool,\n-    inlay_hint: InlayHint,\n-) -> lsp_types::InlayHint {\n-    lsp_types::InlayHint {\n+    mut inlay_hint: InlayHint,\n+) -> Result<lsp_types::InlayHint> {\n+    match inlay_hint.kind {\n+        InlayKind::ParameterHint if render_colons => inlay_hint.label.append_str(\":\"),\n+        InlayKind::TypeHint if render_colons => inlay_hint.label.prepend_str(\": \"),\n+        InlayKind::ClosureReturnTypeHint => inlay_hint.label.prepend_str(\" -> \"),\n+        _ => {}\n+    }\n+\n+    Ok(lsp_types::InlayHint {\n         position: match inlay_hint.kind {\n             // before annotated thing\n             InlayKind::ParameterHint\n@@ -459,15 +467,9 @@ pub(crate) fn inlay_hint(\n             | InlayKind::ImplicitReborrowHint\n             | InlayKind::TypeHint\n             | InlayKind::ClosingBraceHint => false,\n-            InlayKind::BindingModeHint => inlay_hint.label != \"&\",\n+            InlayKind::BindingModeHint => inlay_hint.label.as_simple_str() != Some(\"&\"),\n             InlayKind::ParameterHint | InlayKind::LifetimeHint => true,\n         }),\n-        label: lsp_types::InlayHintLabel::String(match inlay_hint.kind {\n-            InlayKind::ParameterHint if render_colons => format!(\"{}:\", inlay_hint.label),\n-            InlayKind::TypeHint if render_colons => format!(\": {}\", inlay_hint.label),\n-            InlayKind::ClosureReturnTypeHint => format!(\" -> {}\", inlay_hint.label),\n-            _ => inlay_hint.label.clone(),\n-        }),\n         kind: match inlay_hint.kind {\n             InlayKind::ParameterHint => Some(lsp_types::InlayHintKind::PARAMETER),\n             InlayKind::ClosureReturnTypeHint | InlayKind::TypeHint | InlayKind::ChainingHint => {\n@@ -506,9 +508,36 @@ pub(crate) fn inlay_hint(\n         })(),\n         tooltip: Some(match inlay_hint.tooltip {\n             Some(ide::InlayTooltip::String(s)) => lsp_types::InlayHintTooltip::String(s),\n-            _ => lsp_types::InlayHintTooltip::String(inlay_hint.label),\n+            _ => lsp_types::InlayHintTooltip::String(inlay_hint.label.to_string()),\n         }),\n-    }\n+        label: inlay_hint_label(snap, inlay_hint.label)?,\n+    })\n+}\n+\n+fn inlay_hint_label(\n+    snap: &GlobalStateSnapshot,\n+    label: InlayHintLabel,\n+) -> Result<lsp_types::InlayHintLabel> {\n+    Ok(match label.as_simple_str() {\n+        Some(s) => lsp_types::InlayHintLabel::String(s.into()),\n+        None => lsp_types::InlayHintLabel::LabelParts(\n+            label\n+                .parts\n+                .into_iter()\n+                .map(|part| {\n+                    Ok(lsp_types::InlayHintLabelPart {\n+                        value: part.text,\n+                        tooltip: None,\n+                        location: part\n+                            .linked_location\n+                            .map(|range| location(snap, range))\n+                            .transpose()?,\n+                        command: None,\n+                    })\n+                })\n+                .collect::<Result<Vec<_>>>()?,\n+        ),\n+    })\n }\n \n static TOKEN_RESULT_COUNTER: AtomicU32 = AtomicU32::new(1);"}]}