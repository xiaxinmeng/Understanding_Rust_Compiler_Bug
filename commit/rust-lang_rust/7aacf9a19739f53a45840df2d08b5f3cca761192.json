{"sha": "7aacf9a19739f53a45840df2d08b5f3cca761192", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhYWNmOWExOTczOWY1M2E0NTg0MGRmMmQwOGI1ZjNjY2E3NjExOTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-08T11:20:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-12-08T11:24:21Z"}, "message": "Drop some unused methods", "tree": {"sha": "e8ab5c5a7168e9c7068e34609456a543dad3e00e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e8ab5c5a7168e9c7068e34609456a543dad3e00e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7aacf9a19739f53a45840df2d08b5f3cca761192", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7aacf9a19739f53a45840df2d08b5f3cca761192", "html_url": "https://github.com/rust-lang/rust/commit/7aacf9a19739f53a45840df2d08b5f3cca761192", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7aacf9a19739f53a45840df2d08b5f3cca761192/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "200bda3daf66f338e9bb1d833146f06fb81f829e", "url": "https://api.github.com/repos/rust-lang/rust/commits/200bda3daf66f338e9bb1d833146f06fb81f829e", "html_url": "https://github.com/rust-lang/rust/commit/200bda3daf66f338e9bb1d833146f06fb81f829e"}], "stats": {"total": 54, "additions": 5, "deletions": 49}, "files": [{"sha": "9cbea024a75e529fdc7b377b088485891fe56f52", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 47, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/7aacf9a19739f53a45840df2d08b5f3cca761192/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aacf9a19739f53a45840df2d08b5f3cca761192/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=7aacf9a19739f53a45840df2d08b5f3cca761192", "patch": "@@ -158,13 +158,6 @@ impl Module {\n         self.with_module_id(def_map.root)\n     }\n \n-    /// Finds a child module with the specified name.\n-    pub fn child(self, db: &impl DefDatabase, name: &Name) -> Option<Module> {\n-        let def_map = db.crate_def_map(self.id.krate);\n-        let child_id = def_map[self.id.local_id].children.get(name)?;\n-        Some(self.with_module_id(*child_id))\n-    }\n-\n     /// Iterates over all child modules.\n     pub fn children(self, db: &impl DefDatabase) -> impl Iterator<Item = Module> {\n         let def_map = db.crate_def_map(self.id.krate);\n@@ -238,7 +231,7 @@ impl Module {\n         def_map[self.id.local_id].impls.iter().copied().map(ImplBlock::from).collect()\n     }\n \n-    fn with_module_id(self, module_id: LocalModuleId) -> Module {\n+    pub(crate) fn with_module_id(self, module_id: LocalModuleId) -> Module {\n         Module::new(self.krate(), module_id)\n     }\n }\n@@ -303,23 +296,10 @@ impl Struct {\n             .collect()\n     }\n \n-    pub fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n-        db.struct_data(self.id.into())\n-            .variant_data\n-            .fields()\n-            .iter()\n-            .find(|(_id, data)| data.name == *name)\n-            .map(|(id, _)| StructField { parent: self.into(), id })\n-    }\n-\n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n         Type::from_def(db, self.id.module(db).krate, self.id)\n     }\n \n-    pub fn constructor_ty(self, db: &impl HirDatabase) -> Ty {\n-        db.value_ty(self.id.into())\n-    }\n-\n     fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n         db.struct_data(self.id.into()).variant_data.clone()\n     }\n@@ -352,15 +332,6 @@ impl Union {\n             .collect()\n     }\n \n-    pub fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n-        db.union_data(self.id)\n-            .variant_data\n-            .fields()\n-            .iter()\n-            .find(|(_id, data)| data.name == *name)\n-            .map(|(id, _)| StructField { parent: self.into(), id })\n-    }\n-\n     fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n         db.union_data(self.id).variant_data.clone()\n     }\n@@ -392,11 +363,6 @@ impl Enum {\n             .collect()\n     }\n \n-    pub fn variant(self, db: &impl DefDatabase, name: &Name) -> Option<EnumVariant> {\n-        let id = db.enum_data(self.id).variant(name)?;\n-        Some(EnumVariant { parent: self, id })\n-    }\n-\n     pub fn ty(self, db: &impl HirDatabase) -> Type {\n         Type::from_def(db, self.id.module(db).krate, self.id)\n     }\n@@ -428,14 +394,6 @@ impl EnumVariant {\n             .collect()\n     }\n \n-    pub fn field(self, db: &impl HirDatabase, name: &Name) -> Option<StructField> {\n-        self.variant_data(db)\n-            .fields()\n-            .iter()\n-            .find(|(_id, data)| data.name == *name)\n-            .map(|(id, _)| StructField { parent: self.into(), id })\n-    }\n-\n     pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n         db.enum_data(self.parent.id).variants[self.id].variant_data.clone()\n     }\n@@ -561,10 +519,6 @@ impl Function {\n         db.body(self.id.into())\n     }\n \n-    pub fn ty(self, db: &impl HirDatabase) -> Ty {\n-        db.value_ty(self.id.into())\n-    }\n-\n     pub fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n         db.infer(self.id.into())\n     }"}, {"sha": "307f3d5bfff743634dd26472d4dfae00a3672d1c", "filename": "crates/ra_hir/src/from_source.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7aacf9a19739f53a45840df2d08b5f3cca761192/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7aacf9a19739f53a45840df2d08b5f3cca761192/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_source.rs?ref=7aacf9a19739f53a45840df2d08b5f3cca761192", "patch": "@@ -216,8 +216,10 @@ impl Module {\n             }\n         }?;\n \n-        let child_name = src.value.name()?;\n-        parent_module.child(db, &child_name.as_name())\n+        let child_name = src.value.name()?.as_name();\n+        let def_map = db.crate_def_map(parent_module.id.krate);\n+        let child_id = def_map[parent_module.id.local_id].children.get(&child_name)?;\n+        Some(parent_module.with_module_id(*child_id))\n     }\n \n     pub fn from_definition(db: &impl DefDatabase, src: InFile<ModuleSource>) -> Option<Self> {"}]}