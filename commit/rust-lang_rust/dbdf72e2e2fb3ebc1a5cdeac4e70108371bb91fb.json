{"sha": "dbdf72e2e2fb3ebc1a5cdeac4e70108371bb91fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZGY3MmUyZTJmYjNlYmMxYTVjZGVhYzRlNzAxMDgzNzFiYjkxZmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-11T08:31:07Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-15T21:00:05Z"}, "message": "fix dep tracking", "tree": {"sha": "cd8a42d7e0ccc98ea0b94210589b881781047ee3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd8a42d7e0ccc98ea0b94210589b881781047ee3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbdf72e2e2fb3ebc1a5cdeac4e70108371bb91fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbdf72e2e2fb3ebc1a5cdeac4e70108371bb91fb", "html_url": "https://github.com/rust-lang/rust/commit/dbdf72e2e2fb3ebc1a5cdeac4e70108371bb91fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbdf72e2e2fb3ebc1a5cdeac4e70108371bb91fb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c81d0d51bf05791b6ed39376d67d6e2876dd2a1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c81d0d51bf05791b6ed39376d67d6e2876dd2a1e", "html_url": "https://github.com/rust-lang/rust/commit/c81d0d51bf05791b6ed39376d67d6e2876dd2a1e"}], "stats": {"total": 49, "additions": 18, "deletions": 31}, "files": [{"sha": "2f344f788789f099c520b7e4f072e07d310c7709", "filename": "crates/libanalysis/src/db.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/dbdf72e2e2fb3ebc1a5cdeac4e70108371bb91fb/crates%2Flibanalysis%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbdf72e2e2fb3ebc1a5cdeac4e70108371bb91fb/crates%2Flibanalysis%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fdb.rs?ref=dbdf72e2e2fb3ebc1a5cdeac4e70108371bb91fb", "patch": "@@ -113,7 +113,7 @@ impl Cache {\n \n pub(crate) struct QueryCtx {\n     db: Arc<Db>,\n-    stack: RefCell<Vec<QueryInvocationId>>,\n+    stack: RefCell<Vec<(QueryInvocationId, Vec<(QueryInvocationId, OutputHash)>)>>,\n     pub(crate) trace: RefCell<Vec<TraceEvent>>,\n }\n \n@@ -131,22 +131,16 @@ pub(crate) enum TraceEventKind {\n impl QueryCtx {\n     pub(crate) fn get<Q: Get>(&self, params: &Q::Params) -> Q::Output {\n         let me = id::<Q>(params);\n-        eprintln!(\"eval: {:?}\", me);\n-        let parent = self.stack.borrow().last().map(|&id| id);\n-        self.stack.borrow_mut().push(me);\n         self.trace(TraceEvent { query_id: Q::ID, kind: TraceEventKind::Start });\n         let res = Q::get(self, params);\n         self.trace(TraceEvent { query_id: Q::ID, kind: TraceEventKind::Finish });\n-        if let Some(parent) = parent {\n-            let h = output_hash::<Q>(&res);\n-            let mut cache = self.db.cache.lock();\n-            cache.deps\n-                .entry(parent)\n-                .or_insert(Vec::new())\n-                .push((me, h))\n+        {\n+            let mut stack = self.stack.borrow_mut();\n+            if let Some((_, ref mut deps)) = stack.last_mut() {\n+                deps.push((me, output_hash::<Q>(&res)));\n+            }\n         }\n-        let also_me = self.stack.borrow_mut().pop();\n-        assert_eq!(also_me, Some(me));\n+\n         res\n     }\n     fn trace(&self, event: TraceEvent) {\n@@ -179,10 +173,14 @@ where\n             return res;\n         }\n \n+        let me = id::<Q>(params);\n         ctx.trace(TraceEvent { query_id: Q::ID, kind: TraceEventKind::Evaluating });\n+        ctx.stack.borrow_mut().push((me, Vec::new()));\n         let res = Self::eval(ctx, params);\n-\n+        let (also_me, deps) = ctx.stack.borrow_mut().pop().unwrap();\n+        assert_eq!(also_me, me);\n         let mut cache = ctx.db.cache.lock();\n+        cache.deps.insert(me, deps);\n         let gen = cache.gen;\n         let output_hash = output_hash::<Q>(&res);\n         let id = id::<Q>(params);"}, {"sha": "72173c7bcf0a31a5875e6d08eeedf0cd1c75c0ff", "filename": "crates/libanalysis/src/module_map_db.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dbdf72e2e2fb3ebc1a5cdeac4e70108371bb91fb/crates%2Flibanalysis%2Fsrc%2Fmodule_map_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbdf72e2e2fb3ebc1a5cdeac4e70108371bb91fb/crates%2Flibanalysis%2Fsrc%2Fmodule_map_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fmodule_map_db.rs?ref=dbdf72e2e2fb3ebc1a5cdeac4e70108371bb91fb", "patch": "@@ -169,7 +169,6 @@ mod tests {\n             expected: &[FileId],\n             queries: &[(u32, u64)]\n         ) {\n-            eprintln!();\n             let ctx = self.db.query_ctx();\n             let actual = ctx.get::<ParentModule>(&file_id);\n             assert_eq!(actual.as_slice(), expected);\n@@ -194,23 +193,14 @@ mod tests {\n     fn test_parent_module() {\n         let mut f = Fixture::new();\n         let foo = f.add_file(\"/foo.rs\", \"\");\n-        f.check_parent_modules(foo, &[], &[\n-            (ModuleDescr::ID, 1),\n-            (FileSyntax::ID, 1),\n-        ]);\n+        // f.check_parent_modules(foo, &[], &[(ModuleDescr::ID, 1)]);\n \n         let lib = f.add_file(\"/lib.rs\", \"mod foo;\");\n-        f.check_parent_modules(foo, &[lib], &[\n-            (ModuleDescr::ID, 1),\n-            (FileSyntax::ID, 2),\n-        ]);\n-        // f.check_parent_modules(foo, &[lib], &[\n-        //     (ModuleDescr::ID, 0),\n-        //     (FileSyntax::ID, 2),\n-        // ]);\n-\n-        // f.change_file(lib, \"\");\n-        // f.check_parent_modules(foo, &[], &[(ModuleDescr::ID, 2)]);\n+        f.check_parent_modules(foo, &[lib], &[(ModuleDescr::ID, 2)]);\n+        f.check_parent_modules(foo, &[lib], &[(ModuleDescr::ID, 0)]);\n+\n+        f.change_file(lib, \"\");\n+        f.check_parent_modules(foo, &[], &[(ModuleDescr::ID, 2)]);\n \n         // f.change_file(lib, \"mod foo;\");\n         // f.check_parent_modules(foo, &[lib], &[(ModuleDescr::ID, 2)]);\n@@ -224,5 +214,4 @@ mod tests {\n         // f.remove_file(lib);\n         // f.check_parent_modules(foo, &[], &[(ModuleDescr::ID, 1)]);\n     }\n-\n }"}]}