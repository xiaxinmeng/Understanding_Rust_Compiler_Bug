{"sha": "4a0ab832f315344199bd7b7197fc8ae3ca2b7a1c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMGFiODMyZjMxNTM0NDE5OWJkN2I3MTk3ZmM4YWUzY2EyYjdhMWM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-15T16:23:08Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-15T16:23:08Z"}, "message": "unqualfied_path completions aren't responsible for pattern completions", "tree": {"sha": "ebf9f1bf0c24e480ed3a484da4b42e72b1761a51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ebf9f1bf0c24e480ed3a484da4b42e72b1761a51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a0ab832f315344199bd7b7197fc8ae3ca2b7a1c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a0ab832f315344199bd7b7197fc8ae3ca2b7a1c", "html_url": "https://github.com/rust-lang/rust/commit/4a0ab832f315344199bd7b7197fc8ae3ca2b7a1c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a0ab832f315344199bd7b7197fc8ae3ca2b7a1c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f6d71cf0c41ac063bdb35dffe7ec713b1dbac42", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f6d71cf0c41ac063bdb35dffe7ec713b1dbac42", "html_url": "https://github.com/rust-lang/rust/commit/5f6d71cf0c41ac063bdb35dffe7ec713b1dbac42"}], "stats": {"total": 240, "additions": 120, "deletions": 120}, "files": [{"sha": "46cef58f011a01688c16425298c765aefcc66e86", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 101, "deletions": 15, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/4a0ab832f315344199bd7b7197fc8ae3ca2b7a1c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a0ab832f315344199bd7b7197fc8ae3ca2b7a1c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=4a0ab832f315344199bd7b7197fc8ae3ca2b7a1c", "patch": "@@ -11,10 +11,13 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n         return;\n     }\n \n-    if let Some(ty) = &ctx.expected_type {\n-        super::complete_enum_variants(acc, ctx, ty, |acc, ctx, variant, path| {\n-            acc.add_qualified_variant_pat(ctx, variant, path)\n-        });\n+    if !ctx.is_irrefutable_pat_binding {\n+        if let Some(ty) = ctx.expected_type.as_ref() {\n+            super::complete_enum_variants(acc, ctx, ty, |acc, ctx, variant, path| {\n+                acc.add_qualified_variant_pat(ctx, variant, path.clone());\n+                acc.add_qualified_enum_variant(ctx, variant, path);\n+            });\n+        }\n     }\n \n     // FIXME: ideally, we should look at the type we are matching against and\n@@ -85,7 +88,7 @@ static FOO: E = E::X;\n struct Bar { f: u32 }\n \n fn foo() {\n-   match E::X { $0 }\n+   match E::X { a$0 }\n }\n \"#,\n             expect![[r#\"\n@@ -106,10 +109,11 @@ macro_rules! m { ($e:expr) => { $e } }\n enum E { X }\n \n fn foo() {\n-   m!(match E::X { $0 })\n+   m!(match E::X { a$0 })\n }\n \"#,\n             expect![[r#\"\n+                ev E::X  ()\n                 en E\n                 ma m!(\u2026) macro_rules! m\n             \"#]],\n@@ -129,7 +133,7 @@ static FOO: E = E::X;\n struct Bar { f: u32 }\n \n fn foo() {\n-   let $0\n+   let a$0\n }\n \"#,\n             expect![[r#\"\n@@ -147,7 +151,7 @@ enum E { X }\n static FOO: E = E::X;\n struct Bar { f: u32 }\n \n-fn foo($0) {\n+fn foo(a$0) {\n }\n \"#,\n             expect![[r#\"\n@@ -163,7 +167,7 @@ fn foo($0) {\n struct Bar { f: u32 }\n \n fn foo() {\n-   let $0\n+   let a$0\n }\n \"#,\n             expect![[r#\"\n@@ -179,7 +183,7 @@ fn foo() {\n struct Foo { bar: String, baz: String }\n struct Bar(String, String);\n struct Baz;\n-fn outer($0) {}\n+fn outer(a$0) {}\n \"#,\n             expect![[r#\"\n                 bn Foo Foo { bar$1, baz$2 }: Foo$0\n@@ -196,7 +200,7 @@ struct Foo { bar: String, baz: String }\n struct Bar(String, String);\n struct Baz;\n fn outer() {\n-    let $0\n+    let a$0\n }\n \"#,\n             expect![[r#\"\n@@ -215,7 +219,7 @@ struct Bar(String, String);\n struct Baz;\n fn outer() {\n     match () {\n-        $0\n+        a$0\n     }\n }\n \"#,\n@@ -239,7 +243,7 @@ use foo::*;\n \n fn outer() {\n     match () {\n-        $0\n+        a$0\n     }\n }\n \"#,\n@@ -258,7 +262,7 @@ fn outer() {\n struct Foo(i32);\n fn main() {\n     match Foo(92) {\n-        $0(92) => (),\n+        a$0(92) => (),\n     }\n }\n \"#,\n@@ -281,7 +285,7 @@ struct Foo(i32);\n impl Foo {\n     fn foo() {\n         match () {\n-            $0\n+            a$0\n         }\n     }\n }\n@@ -314,4 +318,86 @@ impl Foo {\n             \"#]],\n         )\n     }\n+\n+    #[test]\n+    fn completes_enum_variant_matcharm() {\n+        check(\n+            r#\"\n+enum Foo { Bar, Baz, Quux }\n+\n+fn main() {\n+    let foo = Foo::Quux;\n+    match foo { Qu$0 }\n+}\n+\"#,\n+            expect![[r#\"\n+                ev Foo::Bar  ()\n+                ev Foo::Baz  ()\n+                ev Foo::Quux ()\n+                en Foo\n+            \"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn completes_enum_variant_matcharm_ref() {\n+        check(\n+            r#\"\n+enum Foo { Bar, Baz, Quux }\n+\n+fn main() {\n+    let foo = Foo::Quux;\n+    match &foo { Qu$0 }\n+}\n+\"#,\n+            expect![[r#\"\n+                ev Foo::Bar  ()\n+                ev Foo::Baz  ()\n+                ev Foo::Quux ()\n+                en Foo\n+            \"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn completes_enum_variant_iflet() {\n+        check(\n+            r#\"\n+enum Foo { Bar, Baz, Quux }\n+\n+fn main() {\n+    let foo = Foo::Quux;\n+    if let Qu$0 = foo { }\n+}\n+\"#,\n+            expect![[r#\"\n+                ev Foo::Bar  ()\n+                ev Foo::Baz  ()\n+                ev Foo::Quux ()\n+                en Foo\n+            \"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn completes_enum_variant_impl() {\n+        check(\n+            r#\"\n+enum Foo { Bar, Baz, Quux }\n+impl Foo {\n+    fn foo() { match Foo::Bar { Q$0 } }\n+}\n+\"#,\n+            expect![[r#\"\n+                ev Self::Bar  ()\n+                ev Self::Baz  ()\n+                ev Self::Quux ()\n+                ev Foo::Bar   ()\n+                ev Foo::Baz   ()\n+                ev Foo::Quux  ()\n+                sp Self\n+                en Foo\n+            \"#]],\n+        )\n+    }\n }"}, {"sha": "5ef80f6a72b0d105122ab526b691b2c1e9525e26", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 1, "deletions": 87, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/4a0ab832f315344199bd7b7197fc8ae3ca2b7a1c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a0ab832f315344199bd7b7197fc8ae3ca2b7a1c/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=4a0ab832f315344199bd7b7197fc8ae3ca2b7a1c", "patch": "@@ -6,7 +6,7 @@ use syntax::AstNode;\n use crate::{CompletionContext, Completions};\n \n pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n-    if !(ctx.is_trivial_path || ctx.is_pat_binding_or_const) {\n+    if !ctx.is_trivial_path {\n         return;\n     }\n     if ctx.record_lit_syntax.is_some()\n@@ -23,10 +23,6 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         });\n     }\n \n-    if ctx.is_pat_binding_or_const {\n-        return;\n-    }\n-\n     ctx.scope.process_all_names(&mut |name, res| {\n         if let ScopeDef::GenericParam(hir::GenericParam::LifetimeParam(_)) = res {\n             cov_mark::hit!(skip_lifetime_completion);\n@@ -608,66 +604,6 @@ fn main() { $0 }\n         );\n     }\n \n-    #[test]\n-    fn completes_enum_variant_matcharm() {\n-        check(\n-            r#\"\n-enum Foo { Bar, Baz, Quux }\n-\n-fn main() {\n-    let foo = Foo::Quux;\n-    match foo { Qu$0 }\n-}\n-\"#,\n-            expect![[r#\"\n-                ev Foo::Bar  ()\n-                ev Foo::Baz  ()\n-                ev Foo::Quux ()\n-                en Foo\n-            \"#]],\n-        )\n-    }\n-\n-    #[test]\n-    fn completes_enum_variant_matcharm_ref() {\n-        check(\n-            r#\"\n-enum Foo { Bar, Baz, Quux }\n-\n-fn main() {\n-    let foo = Foo::Quux;\n-    match &foo { Qu$0 }\n-}\n-\"#,\n-            expect![[r#\"\n-                ev Foo::Bar  ()\n-                ev Foo::Baz  ()\n-                ev Foo::Quux ()\n-                en Foo\n-            \"#]],\n-        )\n-    }\n-\n-    #[test]\n-    fn completes_enum_variant_iflet() {\n-        check(\n-            r#\"\n-enum Foo { Bar, Baz, Quux }\n-\n-fn main() {\n-    let foo = Foo::Quux;\n-    if let Qu$0 = foo { }\n-}\n-\"#,\n-            expect![[r#\"\n-                ev Foo::Bar  ()\n-                ev Foo::Baz  ()\n-                ev Foo::Quux ()\n-                en Foo\n-            \"#]],\n-        )\n-    }\n-\n     #[test]\n     fn completes_enum_variant_basic_expr() {\n         check(\n@@ -700,28 +636,6 @@ fn f() -> m::E { V$0 }\n         )\n     }\n \n-    #[test]\n-    fn completes_enum_variant_impl() {\n-        check(\n-            r#\"\n-enum Foo { Bar, Baz, Quux }\n-impl Foo {\n-    fn foo() { match Foo::Bar { Q$0 } }\n-}\n-\"#,\n-            expect![[r#\"\n-                ev Self::Bar  ()\n-                ev Self::Baz  ()\n-                ev Self::Quux ()\n-                ev Foo::Bar   ()\n-                ev Foo::Baz   ()\n-                ev Foo::Quux  ()\n-                sp Self\n-                en Foo\n-            \"#]],\n-        )\n-    }\n-\n     #[test]\n     fn dont_complete_attr() {\n         check("}, {"sha": "b4e80f424a2019641c1f908c31bd002ee235e8dc", "filename": "crates/ide_completion/src/render/pattern.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/4a0ab832f315344199bd7b7197fc8ae3ca2b7a1c/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a0ab832f315344199bd7b7197fc8ae3ca2b7a1c/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fpattern.rs?ref=4a0ab832f315344199bd7b7197fc8ae3ca2b7a1c", "patch": "@@ -6,24 +6,6 @@ use itertools::Itertools;\n \n use crate::{item::CompletionKind, render::RenderContext, CompletionItem, CompletionItemKind};\n \n-fn visible_fields(\n-    ctx: &RenderContext<'_>,\n-    fields: &[hir::Field],\n-    item: impl HasAttrs,\n-) -> Option<(Vec<hir::Field>, bool)> {\n-    let module = ctx.completion.scope.module()?;\n-    let n_fields = fields.len();\n-    let fields = fields\n-        .into_iter()\n-        .filter(|field| field.is_visible_from(ctx.db(), module))\n-        .copied()\n-        .collect::<Vec<_>>();\n-\n-    let fields_omitted =\n-        n_fields - fields.len() > 0 || item.attrs(ctx.db()).by_key(\"non_exhaustive\").exists();\n-    Some((fields, fields_omitted))\n-}\n-\n pub(crate) fn render_struct_pat(\n     ctx: RenderContext<'_>,\n     strukt: hir::Struct,\n@@ -148,3 +130,21 @@ fn render_tuple_as_pat(fields: &[hir::Field], name: &str, fields_omitted: bool)\n         name = name\n     )\n }\n+\n+fn visible_fields(\n+    ctx: &RenderContext<'_>,\n+    fields: &[hir::Field],\n+    item: impl HasAttrs,\n+) -> Option<(Vec<hir::Field>, bool)> {\n+    let module = ctx.completion.scope.module()?;\n+    let n_fields = fields.len();\n+    let fields = fields\n+        .into_iter()\n+        .filter(|field| field.is_visible_from(ctx.db(), module))\n+        .copied()\n+        .collect::<Vec<_>>();\n+\n+    let fields_omitted =\n+        n_fields - fields.len() > 0 || item.attrs(ctx.db()).by_key(\"non_exhaustive\").exists();\n+    Some((fields, fields_omitted))\n+}"}]}