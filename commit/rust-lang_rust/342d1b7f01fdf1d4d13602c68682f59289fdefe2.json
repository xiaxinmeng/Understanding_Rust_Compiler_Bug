{"sha": "342d1b7f01fdf1d4d13602c68682f59289fdefe2", "node_id": "C_kwDOAAsO6NoAKDM0MmQxYjdmMDFmZGYxZDRkMTM2MDJjNjg2ODJmNTkyODlmZGVmZTI", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev+love@gmail.com", "date": "2022-12-21T23:32:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-12-21T23:32:09Z"}, "message": "Rollup merge of #105584 - raffimolero:patch-1, r=JohnTitor\n\nadd assert messages if chunks/windows are length 0", "tree": {"sha": "7e52db2879393acaaac7c4d7ff71e6584af98b27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e52db2879393acaaac7c4d7ff71e6584af98b27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/342d1b7f01fdf1d4d13602c68682f59289fdefe2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjo5d5CRBK7hj4Ov3rIwAAf9UIAKkrJ2w56dPO2F/A29+satFq\nwTw9EFn7DOI//RlVdXule5bbH10jgBIAb3gB0xGBfbhmLXSXJ6LxgKBGLrA27++s\nJKGbDOLyNZ1b6dBJI+GajQY+Lt/fumVGcTp7Y3W1+ce7hF+UDJNA5Gfb78F0SAN9\n9mBHiw4s4bkF4LfS9o0tk3u1NqzDo1TgR1lggfLAMrUtGWlWXRN11aJCKgLvUhsg\nPcglEzfRe5yZhC1CdPj42AIbAVs35UviNSd2Q6RkOFMvQHEPluWtpY6bUyTq7dtS\n/PBsBxTHaxjRD2UfyRuEufLY+Q5XuCR4u+c6O91Vbiyz7IKgYc7DozZfW0+8Mr4=\n=+GXD\n-----END PGP SIGNATURE-----\n", "payload": "tree 7e52db2879393acaaac7c4d7ff71e6584af98b27\nparent b569c9dc57ee22b6ff94563af856909763dfa24b\nparent 46f6e39ac61241729b81671ed8fb917b8bb2e9e5\nauthor Yuki Okushi <huyuumi.dev+love@gmail.com> 1671665529 +0900\ncommitter GitHub <noreply@github.com> 1671665529 +0900\n\nRollup merge of #105584 - raffimolero:patch-1, r=JohnTitor\n\nadd assert messages if chunks/windows are length 0\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/342d1b7f01fdf1d4d13602c68682f59289fdefe2", "html_url": "https://github.com/rust-lang/rust/commit/342d1b7f01fdf1d4d13602c68682f59289fdefe2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/342d1b7f01fdf1d4d13602c68682f59289fdefe2/comments", "author": null, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b569c9dc57ee22b6ff94563af856909763dfa24b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b569c9dc57ee22b6ff94563af856909763dfa24b", "html_url": "https://github.com/rust-lang/rust/commit/b569c9dc57ee22b6ff94563af856909763dfa24b"}, {"sha": "46f6e39ac61241729b81671ed8fb917b8bb2e9e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/46f6e39ac61241729b81671ed8fb917b8bb2e9e5", "html_url": "https://github.com/rust-lang/rust/commit/46f6e39ac61241729b81671ed8fb917b8bb2e9e5"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "2995cf0c6443f8a03eb37ae1201a0ecffeb1b272", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/342d1b7f01fdf1d4d13602c68682f59289fdefe2/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342d1b7f01fdf1d4d13602c68682f59289fdefe2/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=342d1b7f01fdf1d4d13602c68682f59289fdefe2", "patch": "@@ -893,7 +893,7 @@ impl<T> [T] {\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n     pub fn chunks_exact(&self, chunk_size: usize) -> ChunksExact<'_, T> {\n-        assert_ne!(chunk_size, 0);\n+        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n         ChunksExact::new(self, chunk_size)\n     }\n \n@@ -935,7 +935,7 @@ impl<T> [T] {\n     #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n     #[inline]\n     pub fn chunks_exact_mut(&mut self, chunk_size: usize) -> ChunksExactMut<'_, T> {\n-        assert_ne!(chunk_size, 0);\n+        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n         ChunksExactMut::new(self, chunk_size)\n     }\n \n@@ -1017,7 +1017,7 @@ impl<T> [T] {\n     #[inline]\n     #[must_use]\n     pub fn as_chunks<const N: usize>(&self) -> (&[[T; N]], &[T]) {\n-        assert_ne!(N, 0);\n+        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n         let len = self.len() / N;\n         let (multiple_of_n, remainder) = self.split_at(len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1048,7 +1048,7 @@ impl<T> [T] {\n     #[inline]\n     #[must_use]\n     pub fn as_rchunks<const N: usize>(&self) -> (&[T], &[[T; N]]) {\n-        assert_ne!(N, 0);\n+        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n         let len = self.len() / N;\n         let (remainder, multiple_of_n) = self.split_at(self.len() - len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1087,7 +1087,7 @@ impl<T> [T] {\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     #[inline]\n     pub fn array_chunks<const N: usize>(&self) -> ArrayChunks<'_, T, N> {\n-        assert_ne!(N, 0);\n+        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n         ArrayChunks::new(self)\n     }\n \n@@ -1166,7 +1166,7 @@ impl<T> [T] {\n     #[inline]\n     #[must_use]\n     pub fn as_chunks_mut<const N: usize>(&mut self) -> (&mut [[T; N]], &mut [T]) {\n-        assert_ne!(N, 0);\n+        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n         let len = self.len() / N;\n         let (multiple_of_n, remainder) = self.split_at_mut(len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1203,7 +1203,7 @@ impl<T> [T] {\n     #[inline]\n     #[must_use]\n     pub fn as_rchunks_mut<const N: usize>(&mut self) -> (&mut [T], &mut [[T; N]]) {\n-        assert_ne!(N, 0);\n+        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n         let len = self.len() / N;\n         let (remainder, multiple_of_n) = self.split_at_mut(self.len() - len * N);\n         // SAFETY: We already panicked for zero, and ensured by construction\n@@ -1244,7 +1244,7 @@ impl<T> [T] {\n     #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n     #[inline]\n     pub fn array_chunks_mut<const N: usize>(&mut self) -> ArrayChunksMut<'_, T, N> {\n-        assert_ne!(N, 0);\n+        assert_ne!(N, 0, \"chunks cannot have a size of zero\");\n         ArrayChunksMut::new(self)\n     }\n \n@@ -1276,7 +1276,7 @@ impl<T> [T] {\n     #[unstable(feature = \"array_windows\", issue = \"75027\")]\n     #[inline]\n     pub fn array_windows<const N: usize>(&self) -> ArrayWindows<'_, T, N> {\n-        assert_ne!(N, 0);\n+        assert_ne!(N, 0, \"windows cannot have a size of zero\");\n         ArrayWindows::new(self)\n     }\n "}]}