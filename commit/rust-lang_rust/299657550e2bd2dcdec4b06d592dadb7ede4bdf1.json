{"sha": "299657550e2bd2dcdec4b06d592dadb7ede4bdf1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5OTY1NzU1MGUyYmQyZGNkZWM0YjA2ZDU5MmRhZGI3ZWRlNGJkZjE=", "commit": {"author": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-04T01:57:44Z"}, "committer": {"name": "Roy Frostig", "email": "rfrostig@mozilla.com", "date": "2010-08-04T01:57:54Z"}, "message": "Have hashmap's insert method overwrite on existing-key insertion and return true iff overwrite did not occur.", "tree": {"sha": "990164b540c63cb10809406e649e9a8377319dd9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/990164b540c63cb10809406e649e9a8377319dd9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/299657550e2bd2dcdec4b06d592dadb7ede4bdf1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/299657550e2bd2dcdec4b06d592dadb7ede4bdf1", "html_url": "https://github.com/rust-lang/rust/commit/299657550e2bd2dcdec4b06d592dadb7ede4bdf1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/299657550e2bd2dcdec4b06d592dadb7ede4bdf1/comments", "author": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "froystig", "id": 123903, "node_id": "MDQ6VXNlcjEyMzkwMw==", "avatar_url": "https://avatars.githubusercontent.com/u/123903?v=4", "gravatar_id": "", "url": "https://api.github.com/users/froystig", "html_url": "https://github.com/froystig", "followers_url": "https://api.github.com/users/froystig/followers", "following_url": "https://api.github.com/users/froystig/following{/other_user}", "gists_url": "https://api.github.com/users/froystig/gists{/gist_id}", "starred_url": "https://api.github.com/users/froystig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/froystig/subscriptions", "organizations_url": "https://api.github.com/users/froystig/orgs", "repos_url": "https://api.github.com/users/froystig/repos", "events_url": "https://api.github.com/users/froystig/events{/privacy}", "received_events_url": "https://api.github.com/users/froystig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c014748c0191b711e2adf5a5db224474ea4e75d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c014748c0191b711e2adf5a5db224474ea4e75d3", "html_url": "https://github.com/rust-lang/rust/commit/c014748c0191b711e2adf5a5db224474ea4e75d3"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "f95741761c0c6c1fc40e9cfee9b4036aa421845b", "filename": "src/lib/map.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/299657550e2bd2dcdec4b06d592dadb7ede4bdf1/src%2Flib%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/299657550e2bd2dcdec4b06d592dadb7ede4bdf1/src%2Flib%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fmap.rs?ref=299657550e2bd2dcdec4b06d592dadb7ede4bdf1", "patch": "@@ -13,7 +13,7 @@ type hashfn[K] = fn(&K) -> uint;\n type eqfn[K] = fn(&K, &K) -> bool;\n \n type hashmap[K, V] = obj {\n-  fn insert(&K key, &V val);\n+  fn insert(&K key, &V val) -> bool;\n   fn contains_key(&K key) -> bool;\n   fn get(&K key) -> V;\n   fn find(&K key) -> util.option[V];\n@@ -80,6 +80,7 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n       alt (bkts.(j)) {\n         case (some[K, V](k, _)) {\n           if (eqer(key, k)) {\n+            bkts.(j) = some[K, V](k, val);\n             ret false;\n           }\n           i += 1u;\n@@ -143,7 +144,7 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n                     mutable uint nelts,\n                     util.rational lf)\n   {\n-    fn insert(&K key, &V val) {\n+    fn insert(&K key, &V val) -> bool {\n       let util.rational load = rec(num=(nelts + 1u) as int, den=nbkts as int);\n       if (!util.rational_leq(load, lf)) {\n         let uint nnewbkts = _int.next_power_of_two(nbkts + 1u);\n@@ -154,8 +155,11 @@ fn mk_hashmap[K, V](&hashfn[K] hasher, &eqfn[K] eqer) -> hashmap[K, V] {\n         let vec[mutable bucket[K, V]] newbkts = make_buckets[K, V](nnewbkts);\n         rehash[K, V](hasher, eqer, bkts, nbkts, newbkts, nnewbkts);\n       }\n-      insert_common[K, V](hasher, eqer, bkts, nbkts, key, val);\n-      nelts += 1u;\n+      if (insert_common[K, V](hasher, eqer, bkts, nbkts, key, val)) {\n+        nelts += 1u;\n+        ret true;\n+      }\n+      ret false;\n     }\n \n     fn contains_key(&K key) -> bool {"}]}