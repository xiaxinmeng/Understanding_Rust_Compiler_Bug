{"sha": "ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNDFmMmJhZjc0NzhkZjZiNWM0YmViZTFlOWE4ZmY4MTA0NzRiM2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-25T09:01:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-25T09:01:41Z"}, "message": "Auto merge of #6788 - matthiaskrgr:upper_case_acronyms, r=flip1995\n\nmove upper_case_acronyms back to style, but make the default behaviour less aggressive by default (can be unleashed via config option)\n\nPrevious discussion in the bi-weekly clippy meeting for reference: https://rust-lang.zulipchat.com/#narrow/stream/257328-clippy/topic/Meeting.202021-02-23/near/227458019\n\nMove the `upper_case_acronyms` lint back to the style group.\nOnly warn on fully-capitalized names by default.\nAdd add a clippy-config option `upper-case-acronyms-aggressive: true/false` to enabled more aggressive linting on\nall substrings that could be capitalized acronyms.\n\n---\nchangelog: reenable upper_case_acronyms by default but make the more aggressive linting opt-in via config option", "tree": {"sha": "79c1464305d751209edb6daaad75098eb4b05d0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79c1464305d751209edb6daaad75098eb4b05d0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d", "html_url": "https://github.com/rust-lang/rust/commit/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76a689d8c21ca22aa3c892647dbd729fa69d2db9", "url": "https://api.github.com/repos/rust-lang/rust/commits/76a689d8c21ca22aa3c892647dbd729fa69d2db9", "html_url": "https://github.com/rust-lang/rust/commit/76a689d8c21ca22aa3c892647dbd729fa69d2db9"}, {"sha": "2a6b06108d88830d3a6d5a50f733b8f7cf2799ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a6b06108d88830d3a6d5a50f733b8f7cf2799ab", "html_url": "https://github.com/rust-lang/rust/commit/2a6b06108d88830d3a6d5a50f733b8f7cf2799ab"}], "stats": {"total": 174, "additions": 139, "deletions": 35}, "files": [{"sha": "176eeadcc630a99cf2974c61bf34d1cb0d634e03", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d", "patch": "@@ -1216,7 +1216,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let enum_variant_name_threshold = conf.enum_variant_name_threshold;\n     store.register_early_pass(move || box enum_variants::EnumVariantNames::new(enum_variant_name_threshold));\n     store.register_early_pass(|| box tabs_in_doc_comments::TabsInDocComments);\n-    store.register_early_pass(|| box upper_case_acronyms::UpperCaseAcronyms);\n+    let upper_case_acronyms_aggressive = conf.upper_case_acronyms_aggressive;\n+    store.register_early_pass(move || box upper_case_acronyms::UpperCaseAcronyms::new(upper_case_acronyms_aggressive));\n     store.register_late_pass(|| box default::Default::default());\n     store.register_late_pass(|| box unused_self::UnusedSelf);\n     store.register_late_pass(|| box mutable_debug_assertion::DebugAssertWithMutCall);\n@@ -1416,7 +1417,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unnecessary_wraps::UNNECESSARY_WRAPS),\n         LintId::of(&unnested_or_patterns::UNNESTED_OR_PATTERNS),\n         LintId::of(&unused_self::UNUSED_SELF),\n-        LintId::of(&upper_case_acronyms::UPPER_CASE_ACRONYMS),\n         LintId::of(&wildcard_imports::ENUM_GLOB_USE),\n         LintId::of(&wildcard_imports::WILDCARD_IMPORTS),\n         LintId::of(&zero_sized_map_values::ZERO_SIZED_MAP_VALUES),\n@@ -1716,6 +1716,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unused_unit::UNUSED_UNIT),\n         LintId::of(&unwrap::PANICKING_UNWRAP),\n         LintId::of(&unwrap::UNNECESSARY_UNWRAP),\n+        LintId::of(&upper_case_acronyms::UPPER_CASE_ACRONYMS),\n         LintId::of(&useless_conversion::USELESS_CONVERSION),\n         LintId::of(&vec::USELESS_VEC),\n         LintId::of(&vec_init_then_push::VEC_INIT_THEN_PUSH),\n@@ -1835,6 +1836,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::FN_TO_NUMERIC_CAST_WITH_TRUNCATION),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n         LintId::of(&unused_unit::UNUSED_UNIT),\n+        LintId::of(&upper_case_acronyms::UPPER_CASE_ACRONYMS),\n         LintId::of(&write::PRINTLN_EMPTY_STRING),\n         LintId::of(&write::PRINT_LITERAL),\n         LintId::of(&write::PRINT_WITH_NEWLINE),"}, {"sha": "0470e1dbbb8122ae9804b2634f05986e9458a372", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d", "patch": "@@ -5,16 +5,20 @@ use rustc_ast::ast::{Item, ItemKind, Variant};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::Ident;\n \n declare_clippy_lint! {\n-    /// **What it does:** Checks for camel case name containing a capitalized acronym.\n+    /// **What it does:** Checks for fully capitalized names and optionally names containing a capitalized acronym.\n     ///\n     /// **Why is this bad?** In CamelCase, acronyms count as one word.\n     /// See [naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#casing-conforms-to-rfc-430-c-case)\n     /// for more.\n     ///\n+    /// By default, the lint only triggers on fully-capitalized names.\n+    /// You can use the `upper-case-acronyms-aggressive: true` config option to enable linting\n+    /// on all camel case names\n+    ///\n     /// **Known problems:** When two acronyms are contiguous, the lint can't tell where\n     /// the first acronym ends and the second starts, so it suggests to lowercase all of\n     /// the letters in the second acronym.\n@@ -29,11 +33,24 @@ declare_clippy_lint! {\n     /// struct HttpResponse;\n     /// ```\n     pub UPPER_CASE_ACRONYMS,\n-    pedantic,\n+    style,\n     \"capitalized acronyms are against the naming convention\"\n }\n \n-declare_lint_pass!(UpperCaseAcronyms => [UPPER_CASE_ACRONYMS]);\n+#[derive(Default)]\n+pub struct UpperCaseAcronyms {\n+    upper_case_acronyms_aggressive: bool,\n+}\n+\n+impl UpperCaseAcronyms {\n+    pub fn new(aggressive: bool) -> Self {\n+        Self {\n+            upper_case_acronyms_aggressive: aggressive,\n+        }\n+    }\n+}\n+\n+impl_lint_pass!(UpperCaseAcronyms => [UPPER_CASE_ACRONYMS]);\n \n fn correct_ident(ident: &str) -> String {\n     let ident = ident.chars().rev().collect::<String>();\n@@ -56,11 +73,18 @@ fn correct_ident(ident: &str) -> String {\n     ident\n }\n \n-fn check_ident(cx: &EarlyContext<'_>, ident: &Ident) {\n+fn check_ident(cx: &EarlyContext<'_>, ident: &Ident, be_aggressive: bool) {\n     let span = ident.span;\n     let ident = &ident.as_str();\n     let corrected = correct_ident(ident);\n-    if ident != &corrected {\n+    // warn if we have pure-uppercase idents\n+    // assume that two-letter words are some kind of valid abbreviation like FP for false positive\n+    // (and don't warn)\n+    if (ident.chars().all(|c| c.is_ascii_uppercase()) && ident.len() > 2)\n+    // otherwise, warn if we have SOmeTHING lIKE THIs but only warn with the aggressive \n+    // upper-case-acronyms-aggressive config option enabled\n+    || (be_aggressive && ident != &corrected)\n+    {\n         span_lint_and_sugg(\n             cx,\n             UPPER_CASE_ACRONYMS,\n@@ -82,12 +106,12 @@ impl EarlyLintPass for UpperCaseAcronyms {\n                 ItemKind::TyAlias(..) | ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Trait(..)\n             );\n             then {\n-                check_ident(cx, &it.ident);\n+                check_ident(cx, &it.ident, self.upper_case_acronyms_aggressive);\n             }\n         }\n     }\n \n     fn check_variant(&mut self, cx: &EarlyContext<'_>, v: &Variant) {\n-        check_ident(cx, &v.ident);\n+        check_ident(cx, &v.ident, self.upper_case_acronyms_aggressive);\n     }\n }"}, {"sha": "9139a0966c55785f335c602cb427cd75fdaf5194", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d", "patch": "@@ -173,6 +173,8 @@ define_Conf! {\n     (disallowed_methods, \"disallowed_methods\": Vec<String>, Vec::<String>::new()),\n     /// Lint: UNREADABLE_LITERAL. Should the fraction of a decimal be linted to include separators.\n     (unreadable_literal_lint_fractions, \"unreadable_literal_lint_fractions\": bool, true),\n+    /// Lint: UPPER_CASE_ACRONYMS. Enables verbose mode. Triggers if there is more than one uppercase char next to each other\n+    (upper_case_acronyms_aggressive, \"upper_case_acronyms_aggressive\": bool, false),\n     /// Lint: _CARGO_COMMON_METADATA. For internal testing only, ignores the current `publish` settings in the Cargo manifest.\n     (cargo_ignore_publish, \"cargo_ignore_publish\": bool, false),\n }"}, {"sha": "d83080b69f5e5311b68bc8ccd21d3c42bf107f51", "filename": "tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d", "patch": "@@ -1,4 +1,4 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `unreadable-literal-lint-fractions`, `cargo-ignore-publish`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `third-party` at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "cc94ec53e1358fb6006ba16e506a96484122e669", "filename": "tests/ui-toml/upper_case_acronyms_aggressive/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fclippy.toml?ref=ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d", "patch": "@@ -0,0 +1 @@\n+upper-case-acronyms-aggressive = true"}, {"sha": "fdf8905f812f6fbc1fa587f9aad0fc5116fa893d", "filename": "tests/ui-toml/upper_case_acronyms_aggressive/upper_case_acronyms.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.rs?ref=ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d", "patch": "@@ -0,0 +1,22 @@\n+#![warn(clippy::upper_case_acronyms)]\n+\n+struct HTTPResponse; // not linted by default, but with cfg option\n+\n+struct CString; // not linted\n+\n+enum Flags {\n+    NS, // not linted\n+    CWR,\n+    ECE,\n+    URG,\n+    ACK,\n+    PSH,\n+    RST,\n+    SYN,\n+    FIN,\n+}\n+\n+struct GCCLLVMSomething; // linted with cfg option, beware that lint suggests `GccllvmSomething` instead of\n+                         // `GccLlvmSomething`\n+\n+fn main() {}"}, {"sha": "1cc59dc45f2aa6c05d35da735c9ae2e83b53923f", "filename": "tests/ui-toml/upper_case_acronyms_aggressive/upper_case_acronyms.stderr", "status": "added", "additions": 70, "deletions": 0, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fupper_case_acronyms_aggressive%2Fupper_case_acronyms.stderr?ref=ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d", "patch": "@@ -0,0 +1,70 @@\n+error: name `HTTPResponse` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:3:8\n+   |\n+LL | struct HTTPResponse; // not linted by default, but with cfg option\n+   |        ^^^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `HttpResponse`\n+   |\n+   = note: `-D clippy::upper-case-acronyms` implied by `-D warnings`\n+\n+error: name `NS` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:8:5\n+   |\n+LL |     NS, // not linted\n+   |     ^^ help: consider making the acronym lowercase, except the initial letter (notice the capitalization): `Ns`\n+\n+error: name `CWR` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:9:5\n+   |\n+LL |     CWR,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Cwr`\n+\n+error: name `ECE` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:10:5\n+   |\n+LL |     ECE,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Ece`\n+\n+error: name `URG` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:11:5\n+   |\n+LL |     URG,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Urg`\n+\n+error: name `ACK` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:12:5\n+   |\n+LL |     ACK,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter (notice the capitalization): `Ack`\n+\n+error: name `PSH` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:13:5\n+   |\n+LL |     PSH,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Psh`\n+\n+error: name `RST` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:14:5\n+   |\n+LL |     RST,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Rst`\n+\n+error: name `SYN` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:15:5\n+   |\n+LL |     SYN,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Syn`\n+\n+error: name `FIN` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:16:5\n+   |\n+LL |     FIN,\n+   |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Fin`\n+\n+error: name `GCCLLVMSomething` contains a capitalized acronym\n+  --> $DIR/upper_case_acronyms.rs:19:8\n+   |\n+LL | struct GCCLLVMSomething; // linted with cfg option, beware that lint suggests `GccllvmSomething` instead of\n+   |        ^^^^^^^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `GccllvmSomething`\n+\n+error: aborting due to 11 previous errors\n+"}, {"sha": "fdf8905f812f6fbc1fa587f9aad0fc5116fa893d", "filename": "tests/ui/upper_case_acronyms.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/tests%2Fui%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/tests%2Fui%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fupper_case_acronyms.rs?ref=ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d", "patch": "@@ -1,11 +1,11 @@\n #![warn(clippy::upper_case_acronyms)]\n \n-struct HTTPResponse; // linted\n+struct HTTPResponse; // not linted by default, but with cfg option\n \n struct CString; // not linted\n \n enum Flags {\n-    NS, // linted\n+    NS, // not linted\n     CWR,\n     ECE,\n     URG,\n@@ -16,6 +16,7 @@ enum Flags {\n     FIN,\n }\n \n-struct GCCLLVMSomething; // linted, beware that lint suggests `GccllvmSomething` instead of `GccLlvmSomething`\n+struct GCCLLVMSomething; // linted with cfg option, beware that lint suggests `GccllvmSomething` instead of\n+                         // `GccLlvmSomething`\n \n fn main() {}"}, {"sha": "bbe38991e52714a89faff46fd844bbc4a8adb346", "filename": "tests/ui/upper_case_acronyms.stderr", "status": "modified", "additions": 3, "deletions": 21, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/tests%2Fui%2Fupper_case_acronyms.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d/tests%2Fui%2Fupper_case_acronyms.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fupper_case_acronyms.stderr?ref=ef41f2baf7478df6b5c4bebe1e9a8ff810474b3d", "patch": "@@ -1,22 +1,10 @@\n-error: name `HTTPResponse` contains a capitalized acronym\n-  --> $DIR/upper_case_acronyms.rs:3:8\n-   |\n-LL | struct HTTPResponse; // linted\n-   |        ^^^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `HttpResponse`\n-   |\n-   = note: `-D clippy::upper-case-acronyms` implied by `-D warnings`\n-\n-error: name `NS` contains a capitalized acronym\n-  --> $DIR/upper_case_acronyms.rs:8:5\n-   |\n-LL |     NS, // linted\n-   |     ^^ help: consider making the acronym lowercase, except the initial letter (notice the capitalization): `Ns`\n-\n error: name `CWR` contains a capitalized acronym\n   --> $DIR/upper_case_acronyms.rs:9:5\n    |\n LL |     CWR,\n    |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Cwr`\n+   |\n+   = note: `-D clippy::upper-case-acronyms` implied by `-D warnings`\n \n error: name `ECE` contains a capitalized acronym\n   --> $DIR/upper_case_acronyms.rs:10:5\n@@ -60,11 +48,5 @@ error: name `FIN` contains a capitalized acronym\n LL |     FIN,\n    |     ^^^ help: consider making the acronym lowercase, except the initial letter: `Fin`\n \n-error: name `GCCLLVMSomething` contains a capitalized acronym\n-  --> $DIR/upper_case_acronyms.rs:19:8\n-   |\n-LL | struct GCCLLVMSomething; // linted, beware that lint suggests `GccllvmSomething` instead of `GccLlvmSomething`\n-   |        ^^^^^^^^^^^^^^^^ help: consider making the acronym lowercase, except the initial letter: `GccllvmSomething`\n-\n-error: aborting due to 11 previous errors\n+error: aborting due to 8 previous errors\n "}]}