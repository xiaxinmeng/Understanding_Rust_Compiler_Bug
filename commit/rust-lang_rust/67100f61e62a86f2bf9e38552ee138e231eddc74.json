{"sha": "67100f61e62a86f2bf9e38552ee138e231eddc74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3MTAwZjYxZTYyYTg2ZjJiZjllMzg1NTJlZTEzOGUyMzFlZGRjNzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-24T19:33:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-06-24T19:33:02Z"}, "message": "Auto merge of #73660 - flip1995:clippyup, r=nikomatsakis\n\nUpdate Clippy", "tree": {"sha": "e4a5fe83e7355ea412b3a7f1383a45860f1021a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4a5fe83e7355ea412b3a7f1383a45860f1021a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67100f61e62a86f2bf9e38552ee138e231eddc74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67100f61e62a86f2bf9e38552ee138e231eddc74", "html_url": "https://github.com/rust-lang/rust/commit/67100f61e62a86f2bf9e38552ee138e231eddc74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67100f61e62a86f2bf9e38552ee138e231eddc74/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8ed1b03c202d77248eb0d335062f46026fc29c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8ed1b03c202d77248eb0d335062f46026fc29c4", "html_url": "https://github.com/rust-lang/rust/commit/d8ed1b03c202d77248eb0d335062f46026fc29c4"}, {"sha": "a2c0499b39b19563acaaffb9c54179b4208ec146", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2c0499b39b19563acaaffb9c54179b4208ec146", "html_url": "https://github.com/rust-lang/rust/commit/a2c0499b39b19563acaaffb9c54179b4208ec146"}], "stats": {"total": 1370, "additions": 1077, "deletions": 293}, "files": [{"sha": "15006a07b44f2b1831ea8a685c47aeb75634729f", "filename": "src/tools/clippy/.github/ISSUE_TEMPLATE.md", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE.md", "raw_url": "https://github.com/rust-lang/rust/raw/d8ed1b03c202d77248eb0d335062f46026fc29c4/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE.md?ref=d8ed1b03c202d77248eb0d335062f46026fc29c4", "patch": "@@ -1,8 +0,0 @@\n-<!--\n-Hi there! Whether you've come to make a suggestion for a new lint, an improvement to an existing lint or to report a bug or a false positive in Clippy, you've come to the right place.\n-\n-For bug reports and false positives, please include the output of `cargo clippy -V` in the report.\n-\n-Thank you for using Clippy!\n-\n-Write your comment below this line: -->"}, {"sha": "9aef3ebe637a1d1b325266165389786032876f93", "filename": "src/tools/clippy/.github/ISSUE_TEMPLATE/blank_issue.md", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fblank_issue.md", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fblank_issue.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fblank_issue.md?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -0,0 +1,4 @@\n+---\n+name: Blank Issue\n+about: Create a blank issue.\n+---"}, {"sha": "d8f0c44148cae9d64ffe41a24f8b840126a8a6dd", "filename": "src/tools/clippy/.github/ISSUE_TEMPLATE/bug_report.md", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fbug_report.md", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fbug_report.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fbug_report.md?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -0,0 +1,47 @@\n+---\n+name: Bug Report\n+about: Create a bug report for Clippy\n+labels: L-bug\n+---\n+<!--\n+Thank you for filing a bug report! \ud83d\udc1b Please provide a short summary of the bug,\n+along with any information you feel relevant to replicating the bug.\n+-->\n+\n+I tried this code:\n+\n+```rust\n+<code>\n+```\n+\n+I expected to see this happen: *explanation*\n+\n+Instead, this happened: *explanation*\n+\n+### Meta\n+\n+- `cargo clippy -V`: e.g. clippy 0.0.212 (f455e46 2020-06-20)\n+- `rustc -Vv`:\n+  ```\n+  rustc 1.46.0-nightly (f455e46ea 2020-06-20)\n+  binary: rustc\n+  commit-hash: f455e46eae1a227d735091091144601b467e1565\n+  commit-date: 2020-06-20\n+  host: x86_64-unknown-linux-gnu\n+  release: 1.46.0-nightly\n+  LLVM version: 10.0\n+  ```\n+\n+<!--\n+Include a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\n+environment. E.g. `RUST_BACKTRACE=1 cargo clippy`.\n+-->\n+<details><summary>Backtrace</summary>\n+  <p>\n+  \n+  ```\n+  <backtrace>\n+  ```\n+  \n+  </p>\n+</details>"}, {"sha": "bd7dc0ac95c1fc6a4c96c7357315f779daf77aef", "filename": "src/tools/clippy/.github/ISSUE_TEMPLATE/config.yml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fconfig.yml", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fconfig.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fconfig.yml?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -0,0 +1,5 @@\n+blank_issues_enabled: true\n+contact_links:\n+  - name: Rust Programming Language Forum\n+    url: https://users.rust-lang.org\n+    about: Please ask and answer questions about Rust here."}, {"sha": "3abe76bf2c49723fee4bdd125861ce3a461c1d93", "filename": "src/tools/clippy/.github/ISSUE_TEMPLATE/ice.md", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fice.md", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fice.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fice.md?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -0,0 +1,53 @@\n+---\n+name: Internal Compiler Error\n+about: Create a report for an internal compiler error in Clippy.\n+labels: L-bug, L-crash\n+---\n+<!--\n+Thank you for finding an Internal Compiler Error! \ud83e\uddca  If possible, try to provide\n+a minimal verifiable example. You can read \"Rust Bug Minimization Patterns\" for\n+how to create smaller examples.\n+\n+http://blog.pnkfx.org/blog/2019/11/18/rust-bug-minimization-patterns/\n+\n+-->\n+\n+### Code\n+\n+```rust\n+<code>\n+```\n+\n+### Meta\n+\n+- `cargo clippy -V`: e.g. clippy 0.0.212 (f455e46 2020-06-20)\n+- `rustc -Vv`:\n+  ```\n+  rustc 1.46.0-nightly (f455e46ea 2020-06-20)\n+  binary: rustc\n+  commit-hash: f455e46eae1a227d735091091144601b467e1565\n+  commit-date: 2020-06-20\n+  host: x86_64-unknown-linux-gnu\n+  release: 1.46.0-nightly\n+  LLVM version: 10.0\n+  ```\n+\n+### Error output\n+\n+```\n+<output>\n+```\n+\n+<!--\n+Include a backtrace in the code block by setting `RUST_BACKTRACE=1` in your\n+environment. E.g. `RUST_BACKTRACE=1 cargo clippy`.\n+-->\n+<details><summary>Backtrace</summary>\n+  <p>\n+  \n+  ```\n+  <backtrace>\n+  ```\n+  \n+  </p>\n+</details>"}, {"sha": "70445d7ef2503df26d21d5de4700a35054aa595b", "filename": "src/tools/clippy/.github/ISSUE_TEMPLATE/new_lint.md", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fnew_lint.md", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fnew_lint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2FISSUE_TEMPLATE%2Fnew_lint.md?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -0,0 +1,35 @@\n+---\n+name: New lint suggestion\n+about: Suggest a new Clippy lint.\n+labels: L-lint\n+---\n+\n+### What it does\n+\n+*What does this lint do?*\n+\n+### Categories (optional)\n+\n+- Kind: *See <https://github.com/rust-lang/rust-clippy/blob/master/README.md#clippy> for list of lint kinds*\n+\n+*What benefit of this lint over old code?*\n+\n+For example:\n+- Remove bounce checking inserted by ...\n+- Remove the need to duplicating/storing/typo ...\n+\n+### Drawbacks\n+\n+None.\n+\n+### Example\n+\n+```rust\n+<code>\n+```\n+\n+Could be written as:\n+\n+```rust\n+<code>\n+```"}, {"sha": "137a73630940a4a69d2f77949fefc76ea177dcca", "filename": "src/tools/clippy/.github/PULL_REQUEST_TEMPLATE.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2F.github%2FPULL_REQUEST_TEMPLATE.md", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2F.github%2FPULL_REQUEST_TEMPLATE.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2FPULL_REQUEST_TEMPLATE.md?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -28,4 +28,5 @@ Delete this line and everything above before opening your PR.\n \n ---\n \n+*Please keep the line below*\n changelog: none"}, {"sha": "2c17c4203ae5c737e8005ae3454656e99619bd99", "filename": "src/tools/clippy/.github/driver.sh", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2F.github%2Fdriver.sh", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2F.github%2Fdriver.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2Fdriver.sh?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -26,4 +26,16 @@ unset CARGO_MANIFEST_DIR\n sed -e \"s,tests/ui,\\$DIR,\" -e \"/= help/d\" cstring.stderr > normalized.stderr\n diff normalized.stderr tests/ui/cstring.stderr\n \n+\n+# make sure \"clippy-driver --rustc --arg\" and \"rustc --arg\" behave the same\n+SYSROOT=`rustc --print sysroot`\n+diff <(LD_LIBRARY_PATH=${SYSROOT}/lib ./target/debug/clippy-driver --rustc --version --verbose) <(rustc --version --verbose)\n+\n+\n+echo \"fn main() {}\" > target/driver_test.rs\n+# we can't run 2 rustcs on the same file at the same time\n+CLIPPY=`LD_LIBRARY_PATH=${SYSROOT}/lib ./target/debug/clippy-driver ./target/driver_test.rs --rustc`\n+RUSTC=`rustc ./target/driver_test.rs`\n+diff <($CLIPPY) <($RUSTC)\n+\n # TODO: CLIPPY_CONF_DIR / CARGO_MANIFEST_DIR"}, {"sha": "550752396c7324f7f857199be2c37c34844b605f", "filename": "src/tools/clippy/clippy_lints/src/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fconsts.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -396,7 +396,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n         let l = self.expr(left)?;\n         let r = self.expr(right);\n         match (l, r) {\n-            (Constant::Int(l), Some(Constant::Int(r))) => match self.tables.expr_ty(left).kind {\n+            (Constant::Int(l), Some(Constant::Int(r))) => match self.tables.expr_ty_opt(left)?.kind {\n                 ty::Int(ity) => {\n                     let l = sext(self.lcx.tcx, l, ity);\n                     let r = sext(self.lcx.tcx, r, ity);"}, {"sha": "77e90eeac49589ecfcdfcb1c9488f61dc54fe832", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_target::abi::LayoutOf;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceWithHirId, PlaceBase};\n+use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n use crate::utils::span_lint;\n "}, {"sha": "7838e8e8ab774c8d6e456fabb552e42e6faa0cf7", "filename": "src/tools/clippy/clippy_lints/src/len_zero.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flen_zero.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -211,7 +211,8 @@ fn check_impl_items(cx: &LateContext<'_, '_>, item: &Item<'_>, impl_items: &[Imp\n }\n \n fn check_cmp(cx: &LateContext<'_, '_>, span: Span, method: &Expr<'_>, lit: &Expr<'_>, op: &str, compare_to: u32) {\n-    if let (&ExprKind::MethodCall(ref method_path, _, ref args, _), &ExprKind::Lit(ref lit)) = (&method.kind, &lit.kind) {\n+    if let (&ExprKind::MethodCall(ref method_path, _, ref args, _), &ExprKind::Lit(ref lit)) = (&method.kind, &lit.kind)\n+    {\n         // check if we are in an is_empty() method\n         if let Some(name) = get_item_name(cx, method) {\n             if name.as_str() == \"is_empty\" {"}, {"sha": "acd628bbaca596b92ca4f34eed5df3c8bc6fb9fe", "filename": "src/tools/clippy/clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flet_underscore.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -35,7 +35,7 @@ declare_clippy_lint! {\n     /// **What it does:** Checks for `let _ = sync_lock`\n     ///\n     /// **Why is this bad?** This statement immediately drops the lock instead of\n-    /// extending it's lifetime to the end of the scope, which is often not intended.\n+    /// extending its lifetime to the end of the scope, which is often not intended.\n     /// To extend lock lifetime to the end of the scope, use an underscore-prefixed\n     /// name instead (i.e. _lock). If you want to explicitly drop the lock,\n     /// `std::mem::drop` conveys your intention better and is less error-prone."}, {"sha": "501220f28e5db4d2fb57facf9825dcd142392432", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 15, "deletions": 39, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -1,63 +1,44 @@\n // error-pattern:cargo-clippy\n \n #![feature(bindings_after_at)]\n-#![feature(box_syntax)]\n #![feature(box_patterns)]\n+#![feature(box_syntax)]\n+#![feature(concat_idents)]\n+#![feature(crate_visibility_modifier)]\n+#![feature(drain_filter)]\n #![feature(or_patterns)]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]\n-#![allow(clippy::missing_docs_in_private_items, clippy::must_use_candidate)]\n #![recursion_limit = \"512\"]\n-#![warn(rust_2018_idioms, trivial_casts, trivial_numeric_casts)]\n-#![deny(rustc::internal)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n-#![feature(crate_visibility_modifier)]\n-#![feature(concat_idents)]\n-#![feature(drain_filter)]\n+#![allow(clippy::missing_docs_in_private_items, clippy::must_use_candidate)]\n+#![warn(trivial_casts, trivial_numeric_casts)]\n+// warn on lints, that are included in `rust-lang/rust`s bootstrap\n+#![warn(rust_2018_idioms, unused_lifetimes)]\n+// warn on rustc internal lints\n+#![deny(rustc::internal)]\n \n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)\n-#[allow(unused_extern_crates)]\n extern crate rustc_ast;\n-#[allow(unused_extern_crates)]\n extern crate rustc_ast_pretty;\n-#[allow(unused_extern_crates)]\n extern crate rustc_attr;\n-#[allow(unused_extern_crates)]\n extern crate rustc_data_structures;\n-#[allow(unused_extern_crates)]\n-extern crate rustc_driver;\n-#[allow(unused_extern_crates)]\n extern crate rustc_errors;\n-#[allow(unused_extern_crates)]\n extern crate rustc_hir;\n-#[allow(unused_extern_crates)]\n extern crate rustc_hir_pretty;\n-#[allow(unused_extern_crates)]\n extern crate rustc_index;\n-#[allow(unused_extern_crates)]\n extern crate rustc_infer;\n-#[allow(unused_extern_crates)]\n extern crate rustc_lexer;\n-#[allow(unused_extern_crates)]\n extern crate rustc_lint;\n-#[allow(unused_extern_crates)]\n extern crate rustc_middle;\n-#[allow(unused_extern_crates)]\n extern crate rustc_mir;\n-#[allow(unused_extern_crates)]\n extern crate rustc_parse;\n-#[allow(unused_extern_crates)]\n extern crate rustc_parse_format;\n-#[allow(unused_extern_crates)]\n extern crate rustc_session;\n-#[allow(unused_extern_crates)]\n extern crate rustc_span;\n-#[allow(unused_extern_crates)]\n extern crate rustc_target;\n-#[allow(unused_extern_crates)]\n extern crate rustc_trait_selection;\n-#[allow(unused_extern_crates)]\n extern crate rustc_typeck;\n \n use rustc_data_structures::fx::FxHashSet;\n@@ -82,14 +63,10 @@ use rustc_session::Session;\n /// # Example\n ///\n /// ```\n-/// # #![feature(rustc_private)]\n-/// # #[allow(unused_extern_crates)]\n-/// # extern crate rustc_middle;\n-/// # #[allow(unused_extern_crates)]\n-/// # extern crate rustc_session;\n-/// # #[macro_use]\n-/// # use clippy_lints::declare_clippy_lint;\n+/// #![feature(rustc_private)]\n+/// extern crate rustc_session;\n /// use rustc_session::declare_tool_lint;\n+/// use clippy_lints::declare_clippy_lint;\n ///\n /// declare_clippy_lint! {\n ///     /// **What it does:** Checks for ... (describe what the lint matches).\n@@ -1062,7 +1039,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_early_pass(|| box option_env_unwrap::OptionEnvUnwrap);\n     let warn_on_all_wildcard_imports = conf.warn_on_all_wildcard_imports;\n     store.register_late_pass(move || box wildcard_imports::WildcardImports::new(warn_on_all_wildcard_imports));\n-    store.register_early_pass(|| box macro_use::MacroUseImports);\n     store.register_late_pass(|| box verbose_file_reads::VerboseFileReads);\n     store.register_late_pass(|| box redundant_pub_crate::RedundantPubCrate::default());\n     store.register_late_pass(|| box unnamed_address::UnnamedAddress);\n@@ -1080,6 +1056,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         single_char_binding_names_threshold,\n     });\n     store.register_early_pass(|| box unnested_or_patterns::UnnestedOrPatterns);\n+    store.register_late_pass(|| box macro_use::MacroUseImports::default());\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1187,6 +1164,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::OPTION_OPTION),\n         LintId::of(&unicode::NON_ASCII_LITERAL),\n         LintId::of(&unicode::UNICODE_NOT_NFC),\n+        LintId::of(&unnested_or_patterns::UNNESTED_OR_PATTERNS),\n         LintId::of(&unused_self::UNUSED_SELF),\n         LintId::of(&wildcard_imports::ENUM_GLOB_USE),\n         LintId::of(&wildcard_imports::WILDCARD_IMPORTS),\n@@ -1440,7 +1418,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n-        LintId::of(&unnested_or_patterns::UNNESTED_OR_PATTERNS),\n         LintId::of(&unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),\n         LintId::of(&unwrap::PANICKING_UNWRAP),\n@@ -1624,7 +1601,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::UNNECESSARY_CAST),\n         LintId::of(&types::VEC_BOX),\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n-        LintId::of(&unnested_or_patterns::UNNESTED_OR_PATTERNS),\n         LintId::of(&unwrap::UNNECESSARY_UNWRAP),\n         LintId::of(&useless_conversion::USELESS_CONVERSION),\n         LintId::of(&zero_div_zero::ZERO_DIVIDED_BY_ZERO),"}, {"sha": "9c8e8d8fabf4e99aabbc5da3180e26f528bfdfb4", "filename": "src/tools/clippy/clippy_lints/src/loops.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -28,7 +28,7 @@ use rustc_middle::ty::{self, Ty, TyS};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceWithHirId, PlaceBase};\n+use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use std::iter::{once, Iterator};\n use std::mem;\n \n@@ -1497,7 +1497,7 @@ struct MutatePairDelegate<'a, 'tcx> {\n     span_high: Option<Span>,\n }\n \n-impl<'a, 'tcx> Delegate<'tcx> for MutatePairDelegate<'a, 'tcx> {\n+impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n     fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: ConsumeMode) {}\n \n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, bk: ty::BorrowKind) {\n@@ -1525,7 +1525,7 @@ impl<'a, 'tcx> Delegate<'tcx> for MutatePairDelegate<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> MutatePairDelegate<'a, 'tcx> {\n+impl MutatePairDelegate<'_, '_> {\n     fn mutation_span(&self) -> (Option<Span>, Option<Span>) {\n         (self.span_low, self.span_high)\n     }\n@@ -1580,13 +1580,13 @@ fn check_for_mutability(cx: &LateContext<'_, '_>, bound: &Expr<'_>) -> Option<Hi\n     None\n }\n \n-fn check_for_mutation<'a, 'tcx> (\n+fn check_for_mutation<'a, 'tcx>(\n     cx: &LateContext<'a, 'tcx>,\n     body: &Expr<'_>,\n     bound_ids: &[Option<HirId>],\n ) -> (Option<Span>, Option<Span>) {\n     let mut delegate = MutatePairDelegate {\n-        cx: cx,\n+        cx,\n         hir_id_low: bound_ids[0],\n         hir_id_high: bound_ids[1],\n         span_low: None,\n@@ -2042,7 +2042,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n         if self.state == VarState::DontWarn {\n             return;\n         }\n-        if SpanlessEq::new(self.cx).eq_expr(&expr, self.end_expr) {\n+        if expr.hir_id == self.end_expr.hir_id {\n             self.past_loop = true;\n             return;\n         }\n@@ -2292,7 +2292,7 @@ struct HasBreakOrReturnVisitor {\n     has_break_or_return: bool,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for HasBreakOrReturnVisitor {\n+impl<'tcx> Visitor<'tcx> for HasBreakOrReturnVisitor {\n     type Map = Map<'tcx>;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {"}, {"sha": "b845b20d2c012c6dc6b4193d36a1b79da03ee2b2", "filename": "src/tools/clippy/clippy_lints/src/macro_use.rs", "status": "modified", "additions": 196, "deletions": 17, "changes": 213, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -1,18 +1,21 @@\n-use crate::utils::{snippet, span_lint_and_sugg};\n+use crate::utils::{in_macro, snippet, span_lint_and_sugg};\n+use hir::def::{DefKind, Res};\n use if_chain::if_chain;\n use rustc_ast::ast;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n-use rustc_lint::{EarlyContext, EarlyLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::edition::Edition;\n+use rustc_hir as hir;\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{edition::Edition, Span};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `#[macro_use] use...`.\n     ///\n     /// **Why is this bad?** Since the Rust 2018 edition you can import\n     /// macro's directly, this is considered idiomatic.\n     ///\n-    /// **Known problems:** This lint does not generate an auto-applicable suggestion.\n+    /// **Known problems:** None.\n     ///\n     /// **Example:**\n     /// ```rust\n@@ -24,29 +27,205 @@ declare_clippy_lint! {\n     \"#[macro_use] is no longer needed\"\n }\n \n-declare_lint_pass!(MacroUseImports => [MACRO_USE_IMPORTS]);\n+const BRACKETS: &[char] = &['<', '>'];\n \n-impl EarlyLintPass for MacroUseImports {\n-    fn check_item(&mut self, ecx: &EarlyContext<'_>, item: &ast::Item) {\n+#[derive(Clone, Debug, PartialEq, Eq)]\n+struct PathAndSpan {\n+    path: String,\n+    span: Span,\n+}\n+\n+/// `MacroRefData` includes the name of the macro\n+/// and the path from `SourceMap::span_to_filename`.\n+#[derive(Debug, Clone)]\n+pub struct MacroRefData {\n+    name: String,\n+    path: String,\n+}\n+\n+impl MacroRefData {\n+    pub fn new(name: String, callee: Span, cx: &LateContext<'_, '_>) -> Self {\n+        let mut path = cx.sess().source_map().span_to_filename(callee).to_string();\n+\n+        // std lib paths are <::std::module::file type>\n+        // so remove brackets, space and type.\n+        if path.contains('<') {\n+            path = path.replace(BRACKETS, \"\");\n+        }\n+        if path.contains(' ') {\n+            path = path.split(' ').next().unwrap().to_string();\n+        }\n+        Self { name, path }\n+    }\n+}\n+\n+#[derive(Default)]\n+#[allow(clippy::module_name_repetitions)]\n+pub struct MacroUseImports {\n+    /// the actual import path used and the span of the attribute above it.\n+    imports: Vec<(String, Span)>,\n+    /// the span of the macro reference, kept to ensure only one reference is used per macro call.\n+    collected: FxHashSet<Span>,\n+    mac_refs: Vec<MacroRefData>,\n+}\n+\n+impl_lint_pass!(MacroUseImports => [MACRO_USE_IMPORTS]);\n+\n+impl MacroUseImports {\n+    fn push_unique_macro(&mut self, cx: &LateContext<'_, '_>, span: Span) {\n+        let call_site = span.source_callsite();\n+        let name = snippet(cx, cx.sess().source_map().span_until_char(call_site, '!'), \"_\");\n+        if let Some(callee) = span.source_callee() {\n+            if !self.collected.contains(&call_site) {\n+                let name = if name.contains(\"::\") {\n+                    name.split(\"::\").last().unwrap().to_string()\n+                } else {\n+                    name.to_string()\n+                };\n+\n+                self.mac_refs.push(MacroRefData::new(name, callee.def_site, cx));\n+                self.collected.insert(call_site);\n+            }\n+        }\n+    }\n+\n+    fn push_unique_macro_pat_ty(&mut self, cx: &LateContext<'_, '_>, span: Span) {\n+        let call_site = span.source_callsite();\n+        let name = snippet(cx, cx.sess().source_map().span_until_char(call_site, '!'), \"_\");\n+        if let Some(callee) = span.source_callee() {\n+            if !self.collected.contains(&call_site) {\n+                self.mac_refs\n+                    .push(MacroRefData::new(name.to_string(), callee.def_site, cx));\n+                self.collected.insert(call_site);\n+            }\n+        }\n+    }\n+}\n+\n+impl<'l, 'txc> LateLintPass<'l, 'txc> for MacroUseImports {\n+    fn check_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::Item<'_>) {\n         if_chain! {\n-            if ecx.sess.opts.edition == Edition::Edition2018;\n-            if let ast::ItemKind::Use(use_tree) = &item.kind;\n+            if cx.sess().opts.edition == Edition::Edition2018;\n+            if let hir::ItemKind::Use(path, _kind) = &item.kind;\n             if let Some(mac_attr) = item\n                 .attrs\n                 .iter()\n                 .find(|attr| attr.ident().map(|s| s.to_string()) == Some(\"macro_use\".to_string()));\n+            if let Res::Def(DefKind::Mod, id) = path.res;\n             then {\n-                let msg = \"`macro_use` attributes are no longer needed in the Rust 2018 edition\";\n-                let help = format!(\"use {}::<macro name>\", snippet(ecx, use_tree.span, \"_\"));\n+                for kid in cx.tcx.item_children(id).iter() {\n+                    if let Res::Def(DefKind::Macro(_mac_type), mac_id) = kid.res {\n+                        let span = mac_attr.span;\n+                        let def_path = cx.tcx.def_path_str(mac_id);\n+                        self.imports.push((def_path, span));\n+                    }\n+                }\n+            } else {\n+                if in_macro(item.span) {\n+                    self.push_unique_macro_pat_ty(cx, item.span);\n+                }\n+            }\n+        }\n+    }\n+    fn check_attribute(&mut self, cx: &LateContext<'_, '_>, attr: &ast::Attribute) {\n+        if in_macro(attr.span) {\n+            self.push_unique_macro(cx, attr.span);\n+        }\n+    }\n+    fn check_expr(&mut self, cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>) {\n+        if in_macro(expr.span) {\n+            self.push_unique_macro(cx, expr.span);\n+        }\n+    }\n+    fn check_stmt(&mut self, cx: &LateContext<'_, '_>, stmt: &hir::Stmt<'_>) {\n+        if in_macro(stmt.span) {\n+            self.push_unique_macro(cx, stmt.span);\n+        }\n+    }\n+    fn check_pat(&mut self, cx: &LateContext<'_, '_>, pat: &hir::Pat<'_>) {\n+        if in_macro(pat.span) {\n+            self.push_unique_macro_pat_ty(cx, pat.span);\n+        }\n+    }\n+    fn check_ty(&mut self, cx: &LateContext<'_, '_>, ty: &hir::Ty<'_>) {\n+        if in_macro(ty.span) {\n+            self.push_unique_macro_pat_ty(cx, ty.span);\n+        }\n+    }\n+    #[allow(clippy::too_many_lines)]\n+    fn check_crate_post(&mut self, cx: &LateContext<'_, '_>, _krate: &hir::Crate<'_>) {\n+        let mut used = FxHashMap::default();\n+        let mut check_dup = vec![];\n+        for (import, span) in &self.imports {\n+            let found_idx = self.mac_refs.iter().position(|mac| import.ends_with(&mac.name));\n+\n+            if let Some(idx) = found_idx {\n+                let _ = self.mac_refs.remove(idx);\n+                let seg = import.split(\"::\").collect::<Vec<_>>();\n+\n+                match seg.as_slice() {\n+                    // an empty path is impossible\n+                    // a path should always consist of 2 or more segments\n+                    [] | [_] => return,\n+                    [root, item] => {\n+                        if !check_dup.contains(&(*item).to_string()) {\n+                            used.entry(((*root).to_string(), span))\n+                                .or_insert_with(Vec::new)\n+                                .push((*item).to_string());\n+                            check_dup.push((*item).to_string());\n+                        }\n+                    },\n+                    [root, rest @ ..] => {\n+                        if rest.iter().all(|item| !check_dup.contains(&(*item).to_string())) {\n+                            let filtered = rest\n+                                .iter()\n+                                .filter_map(|item| {\n+                                    if check_dup.contains(&(*item).to_string()) {\n+                                        None\n+                                    } else {\n+                                        Some((*item).to_string())\n+                                    }\n+                                })\n+                                .collect::<Vec<_>>();\n+                            used.entry(((*root).to_string(), span))\n+                                .or_insert_with(Vec::new)\n+                                .push(filtered.join(\"::\"));\n+                            check_dup.extend(filtered);\n+                        } else {\n+                            let rest = rest.to_vec();\n+                            used.entry(((*root).to_string(), span))\n+                                .or_insert_with(Vec::new)\n+                                .push(rest.join(\"::\"));\n+                            check_dup.extend(rest.iter().map(ToString::to_string));\n+                        }\n+                    },\n+                }\n+            }\n+        }\n+\n+        let mut suggestions = vec![];\n+        for ((root, span), path) in used {\n+            if path.len() == 1 {\n+                suggestions.push((span, format!(\"{}::{}\", root, path[0])))\n+            } else {\n+                suggestions.push((span, format!(\"{}::{{{}}}\", root, path.join(\", \"))))\n+            }\n+        }\n+\n+        // If mac_refs is not empty we have encountered an import we could not handle\n+        // such as `std::prelude::v1::foo` or some other macro that expands to an import.\n+        if self.mac_refs.is_empty() {\n+            for (span, import) in suggestions {\n+                let help = format!(\"use {};\", import);\n                 span_lint_and_sugg(\n-                    ecx,\n+                    cx,\n                     MACRO_USE_IMPORTS,\n-                    mac_attr.span,\n-                    msg,\n+                    *span,\n+                    \"`macro_use` attributes are no longer needed in the Rust 2018 edition\",\n                     \"remove the attribute and import the macro directly, try\",\n                     help,\n-                    Applicability::HasPlaceholders,\n-                );\n+                    Applicability::MaybeIncorrect,\n+                )\n             }\n         }\n     }"}, {"sha": "e2672e02b36da586d004b85d4d5241050369eecb", "filename": "src/tools/clippy/clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 54, "deletions": 28, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_replace.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -135,33 +135,59 @@ fn check_replace_option_with_none(cx: &LateContext<'_, '_>, src: &Expr<'_>, dest\n     }\n }\n \n-fn check_replace_with_uninit(cx: &LateContext<'_, '_>, src: &Expr<'_>, expr_span: Span) {\n-    if let ExprKind::Call(ref repl_func, ref repl_args) = src.kind {\n-        if_chain! {\n-            if repl_args.is_empty();\n-            if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n-            if let Some(repl_def_id) = cx.tables.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n-            then {\n-                if cx.tcx.is_diagnostic_item(sym::mem_uninitialized, repl_def_id) {\n-                    span_lint_and_help(\n-                        cx,\n-                        MEM_REPLACE_WITH_UNINIT,\n-                        expr_span,\n-                        \"replacing with `mem::uninitialized()`\",\n-                        None,\n-                        \"consider using the `take_mut` crate instead\",\n-                    );\n-                } else if cx.tcx.is_diagnostic_item(sym::mem_zeroed, repl_def_id) &&\n-                        !cx.tables.expr_ty(src).is_primitive() {\n-                    span_lint_and_help(\n-                        cx,\n-                        MEM_REPLACE_WITH_UNINIT,\n-                        expr_span,\n-                        \"replacing with `mem::zeroed()`\",\n-                        None,\n-                        \"consider using a default value or the `take_mut` crate instead\",\n-                    );\n-                }\n+fn check_replace_with_uninit(cx: &LateContext<'_, '_>, src: &Expr<'_>, dest: &Expr<'_>, expr_span: Span) {\n+    if_chain! {\n+        // check if replacement is mem::MaybeUninit::uninit().assume_init()\n+        if let Some(method_def_id) = cx.tables.type_dependent_def_id(src.hir_id);\n+        if cx.tcx.is_diagnostic_item(sym::assume_init, method_def_id);\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            span_lint_and_sugg(\n+                cx,\n+                MEM_REPLACE_WITH_UNINIT,\n+                expr_span,\n+                \"replacing with `mem::MaybeUninit::uninit().assume_init()`\",\n+                \"consider using\",\n+                format!(\n+                    \"std::ptr::read({})\",\n+                    snippet_with_applicability(cx, dest.span, \"\", &mut applicability)\n+                ),\n+                applicability,\n+            );\n+            return;\n+        }\n+    }\n+\n+    if_chain! {\n+        if let ExprKind::Call(ref repl_func, ref repl_args) = src.kind;\n+        if repl_args.is_empty();\n+        if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n+        if let Some(repl_def_id) = cx.tables.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n+        then {\n+            if cx.tcx.is_diagnostic_item(sym::mem_uninitialized, repl_def_id) {\n+                let mut applicability = Applicability::MachineApplicable;\n+                span_lint_and_sugg(\n+                    cx,\n+                    MEM_REPLACE_WITH_UNINIT,\n+                    expr_span,\n+                    \"replacing with `mem::uninitialized()`\",\n+                    \"consider using\",\n+                    format!(\n+                        \"std::ptr::read({})\",\n+                        snippet_with_applicability(cx, dest.span, \"\", &mut applicability)\n+                    ),\n+                    applicability,\n+                );\n+            } else if cx.tcx.is_diagnostic_item(sym::mem_zeroed, repl_def_id) &&\n+                    !cx.tables.expr_ty(src).is_primitive() {\n+                span_lint_and_help(\n+                    cx,\n+                    MEM_REPLACE_WITH_UNINIT,\n+                    expr_span,\n+                    \"replacing with `mem::zeroed()`\",\n+                    None,\n+                    \"consider using a default value or the `take_mut` crate instead\",\n+                );\n             }\n         }\n     }\n@@ -209,7 +235,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemReplace {\n             if let [dest, src] = &**func_args;\n             then {\n                 check_replace_option_with_none(cx, src, dest, expr.span);\n-                check_replace_with_uninit(cx, src, expr.span);\n+                check_replace_with_uninit(cx, src, dest, expr.span);\n                 check_replace_with_default(cx, src, dest, expr.span);\n             }\n         }"}, {"sha": "42200385932b0ee5612e2b9d9c5a28add04d4dbb", "filename": "src/tools/clippy/clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -33,7 +33,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     ///\n-    /// To fix the lint, and a `Default` implementation that delegates to `new`:\n+    /// To fix the lint, add a `Default` implementation that delegates to `new`:\n     ///\n     /// ```ignore\n     /// struct Foo(Bar);"}, {"sha": "3c528a295b044ba34b2176638d2761de37ad3aad", "filename": "src/tools/clippy/clippy_lints/src/redundant_pattern_matching.rs", "status": "modified", "additions": 62, "deletions": 18, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_pattern_matching.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -1,10 +1,13 @@\n-use crate::utils::{match_qpath, match_trait_method, paths, snippet, span_lint_and_then};\n+use crate::utils::{in_constant, match_qpath, match_trait_method, paths, snippet, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n-use rustc_hir::{Arm, Expr, ExprKind, MatchSource, PatKind, QPath};\n+use rustc_hir::{Arm, Expr, ExprKind, HirId, MatchSource, PatKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty;\n+use rustc_mir::const_eval::is_const_fn;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::source_map::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Lint for redundant pattern matching over `Result` or\n@@ -64,26 +67,37 @@ fn find_sugg_for_if_let<'a, 'tcx>(\n     arms: &[Arm<'_>],\n     keyword: &'static str,\n ) {\n+    fn find_suggestion(cx: &LateContext<'_, '_>, hir_id: HirId, path: &QPath<'_>) -> Option<&'static str> {\n+        if match_qpath(path, &paths::RESULT_OK) && can_suggest(cx, hir_id, sym!(result_type), \"is_ok\") {\n+            return Some(\"is_ok()\");\n+        }\n+        if match_qpath(path, &paths::RESULT_ERR) && can_suggest(cx, hir_id, sym!(result_type), \"is_err\") {\n+            return Some(\"is_err()\");\n+        }\n+        if match_qpath(path, &paths::OPTION_SOME) && can_suggest(cx, hir_id, sym!(option_type), \"is_some\") {\n+            return Some(\"is_some()\");\n+        }\n+        if match_qpath(path, &paths::OPTION_NONE) && can_suggest(cx, hir_id, sym!(option_type), \"is_none\") {\n+            return Some(\"is_none()\");\n+        }\n+        None\n+    }\n+\n+    let hir_id = expr.hir_id;\n     let good_method = match arms[0].pat.kind {\n         PatKind::TupleStruct(ref path, ref patterns, _) if patterns.len() == 1 => {\n             if let PatKind::Wild = patterns[0].kind {\n-                if match_qpath(path, &paths::RESULT_OK) {\n-                    \"is_ok()\"\n-                } else if match_qpath(path, &paths::RESULT_ERR) {\n-                    \"is_err()\"\n-                } else if match_qpath(path, &paths::OPTION_SOME) {\n-                    \"is_some()\"\n-                } else {\n-                    return;\n-                }\n+                find_suggestion(cx, hir_id, path)\n             } else {\n-                return;\n+                None\n             }\n         },\n-\n-        PatKind::Path(ref path) if match_qpath(path, &paths::OPTION_NONE) => \"is_none()\",\n-\n-        _ => return,\n+        PatKind::Path(ref path) => find_suggestion(cx, hir_id, path),\n+        _ => None,\n+    };\n+    let good_method = match good_method {\n+        Some(method) => method,\n+        None => return,\n     };\n \n     // check that `while_let_on_iterator` lint does not trigger\n@@ -128,6 +142,7 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n     if arms.len() == 2 {\n         let node_pair = (&arms[0].pat.kind, &arms[1].pat.kind);\n \n+        let hir_id = expr.hir_id;\n         let found_good_method = match node_pair {\n             (\n                 PatKind::TupleStruct(ref path_left, ref patterns_left, _),\n@@ -142,6 +157,8 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n                         &paths::RESULT_ERR,\n                         \"is_ok()\",\n                         \"is_err()\",\n+                        || can_suggest(cx, hir_id, sym!(result_type), \"is_ok\"),\n+                        || can_suggest(cx, hir_id, sym!(result_type), \"is_err\"),\n                     )\n                 } else {\n                     None\n@@ -160,6 +177,8 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n                         &paths::OPTION_NONE,\n                         \"is_some()\",\n                         \"is_none()\",\n+                        || can_suggest(cx, hir_id, sym!(option_type), \"is_some\"),\n+                        || can_suggest(cx, hir_id, sym!(option_type), \"is_none\"),\n                     )\n                 } else {\n                     None\n@@ -188,6 +207,7 @@ fn find_sugg_for_match<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n     }\n }\n \n+#[allow(clippy::too_many_arguments)]\n fn find_good_method_for_match<'a>(\n     arms: &[Arm<'_>],\n     path_left: &QPath<'_>,\n@@ -196,6 +216,8 @@ fn find_good_method_for_match<'a>(\n     expected_right: &[&str],\n     should_be_left: &'a str,\n     should_be_right: &'a str,\n+    can_suggest_left: impl Fn() -> bool,\n+    can_suggest_right: impl Fn() -> bool,\n ) -> Option<&'a str> {\n     let body_node_pair = if match_qpath(path_left, expected_left) && match_qpath(path_right, expected_right) {\n         (&(*arms[0].body).kind, &(*arms[1].body).kind)\n@@ -207,10 +229,32 @@ fn find_good_method_for_match<'a>(\n \n     match body_node_pair {\n         (ExprKind::Lit(ref lit_left), ExprKind::Lit(ref lit_right)) => match (&lit_left.node, &lit_right.node) {\n-            (LitKind::Bool(true), LitKind::Bool(false)) => Some(should_be_left),\n-            (LitKind::Bool(false), LitKind::Bool(true)) => Some(should_be_right),\n+            (LitKind::Bool(true), LitKind::Bool(false)) if can_suggest_left() => Some(should_be_left),\n+            (LitKind::Bool(false), LitKind::Bool(true)) if can_suggest_right() => Some(should_be_right),\n             _ => None,\n         },\n         _ => None,\n     }\n }\n+\n+fn can_suggest(cx: &LateContext<'_, '_>, hir_id: HirId, diag_item: Symbol, name: &str) -> bool {\n+    if !in_constant(cx, hir_id) {\n+        return true;\n+    }\n+\n+    // Avoid suggesting calls to non-`const fn`s in const contexts, see #5697.\n+    cx.tcx\n+        .get_diagnostic_item(diag_item)\n+        .and_then(|def_id| {\n+            cx.tcx.inherent_impls(def_id).iter().find_map(|imp| {\n+                cx.tcx\n+                    .associated_items(*imp)\n+                    .in_definition_order()\n+                    .find_map(|item| match item.kind {\n+                        ty::AssocKind::Fn if item.ident.name.as_str() == name => Some(item.def_id),\n+                        _ => None,\n+                    })\n+            })\n+        })\n+        .map_or(false, |def_id| is_const_fn(cx.tcx, def_id))\n+}"}, {"sha": "cf71c3144a2ebebac537498f2748d45ca23d1211", "filename": "src/tools/clippy/clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -184,7 +184,7 @@ struct BinaryExprVisitor {\n     in_binary_expr: bool,\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for BinaryExprVisitor {\n+impl<'tcx> Visitor<'tcx> for BinaryExprVisitor {\n     type Map = Map<'tcx>;\n \n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {"}, {"sha": "146ac4b09d5a4ff503bbf43ea09b52f3e4e5366a", "filename": "src/tools/clippy/clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -58,7 +58,7 @@ pub struct TriviallyCopyPassByRef {\n     limit: u64,\n }\n \n-impl<'a, 'tcx> TriviallyCopyPassByRef {\n+impl<'tcx> TriviallyCopyPassByRef {\n     pub fn new(limit: Option<u64>, target: &SessionConfig) -> Self {\n         let limit = limit.unwrap_or_else(|| {\n             let bit_width = u64::from(target.ptr_width);"}, {"sha": "98de08f79f3d7872a61a3b18c878a7f8b222c40b", "filename": "src/tools/clippy/clippy_lints/src/types.rs", "status": "modified", "additions": 12, "deletions": 46, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -1945,16 +1945,12 @@ fn detect_extreme_expr<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_\n \n     let which = match (&ty.kind, cv) {\n         (&ty::Bool, Constant::Bool(false)) | (&ty::Uint(_), Constant::Int(0)) => Minimum,\n-        (&ty::Int(ity), Constant::Int(i))\n-            if i == unsext(cx.tcx, i128::MIN >> (128 - int_bits(cx.tcx, ity)), ity) =>\n-        {\n+        (&ty::Int(ity), Constant::Int(i)) if i == unsext(cx.tcx, i128::MIN >> (128 - int_bits(cx.tcx, ity)), ity) => {\n             Minimum\n         },\n \n         (&ty::Bool, Constant::Bool(true)) => Maximum,\n-        (&ty::Int(ity), Constant::Int(i))\n-            if i == unsext(cx.tcx, i128::MAX >> (128 - int_bits(cx.tcx, ity)), ity) =>\n-        {\n+        (&ty::Int(ity), Constant::Int(i)) if i == unsext(cx.tcx, i128::MAX >> (128 - int_bits(cx.tcx, ity)), ity) => {\n             Maximum\n         },\n         (&ty::Uint(uty), Constant::Int(i)) if clip(cx.tcx, u128::MAX, uty) == i => Maximum,\n@@ -2083,50 +2079,20 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext<'_, '_>, expr: &'a Expr<'_>)\n         }\n         match pre_cast_ty.kind {\n             ty::Int(int_ty) => Some(match int_ty {\n-                IntTy::I8 => (\n-                    FullInt::S(i128::from(i8::MIN)),\n-                    FullInt::S(i128::from(i8::MAX)),\n-                ),\n-                IntTy::I16 => (\n-                    FullInt::S(i128::from(i16::MIN)),\n-                    FullInt::S(i128::from(i16::MAX)),\n-                ),\n-                IntTy::I32 => (\n-                    FullInt::S(i128::from(i32::MIN)),\n-                    FullInt::S(i128::from(i32::MAX)),\n-                ),\n-                IntTy::I64 => (\n-                    FullInt::S(i128::from(i64::MIN)),\n-                    FullInt::S(i128::from(i64::MAX)),\n-                ),\n+                IntTy::I8 => (FullInt::S(i128::from(i8::MIN)), FullInt::S(i128::from(i8::MAX))),\n+                IntTy::I16 => (FullInt::S(i128::from(i16::MIN)), FullInt::S(i128::from(i16::MAX))),\n+                IntTy::I32 => (FullInt::S(i128::from(i32::MIN)), FullInt::S(i128::from(i32::MAX))),\n+                IntTy::I64 => (FullInt::S(i128::from(i64::MIN)), FullInt::S(i128::from(i64::MAX))),\n                 IntTy::I128 => (FullInt::S(i128::MIN), FullInt::S(i128::MAX)),\n-                IntTy::Isize => (\n-                    FullInt::S(isize::MIN as i128),\n-                    FullInt::S(isize::MAX as i128),\n-                ),\n+                IntTy::Isize => (FullInt::S(isize::MIN as i128), FullInt::S(isize::MAX as i128)),\n             }),\n             ty::Uint(uint_ty) => Some(match uint_ty {\n-                UintTy::U8 => (\n-                    FullInt::U(u128::from(u8::MIN)),\n-                    FullInt::U(u128::from(u8::MAX)),\n-                ),\n-                UintTy::U16 => (\n-                    FullInt::U(u128::from(u16::MIN)),\n-                    FullInt::U(u128::from(u16::MAX)),\n-                ),\n-                UintTy::U32 => (\n-                    FullInt::U(u128::from(u32::MIN)),\n-                    FullInt::U(u128::from(u32::MAX)),\n-                ),\n-                UintTy::U64 => (\n-                    FullInt::U(u128::from(u64::MIN)),\n-                    FullInt::U(u128::from(u64::MAX)),\n-                ),\n+                UintTy::U8 => (FullInt::U(u128::from(u8::MIN)), FullInt::U(u128::from(u8::MAX))),\n+                UintTy::U16 => (FullInt::U(u128::from(u16::MIN)), FullInt::U(u128::from(u16::MAX))),\n+                UintTy::U32 => (FullInt::U(u128::from(u32::MIN)), FullInt::U(u128::from(u32::MAX))),\n+                UintTy::U64 => (FullInt::U(u128::from(u64::MIN)), FullInt::U(u128::from(u64::MAX))),\n                 UintTy::U128 => (FullInt::U(u128::MIN), FullInt::U(u128::MAX)),\n-                UintTy::Usize => (\n-                    FullInt::U(usize::MIN as u128),\n-                    FullInt::U(usize::MAX as u128),\n-                ),\n+                UintTy::Usize => (FullInt::U(usize::MIN as u128), FullInt::U(usize::MAX as u128)),\n             }),\n             _ => None,\n         }"}, {"sha": "6ac6a12529c868c13e0c903bcb8b8c6b68660e83", "filename": "src/tools/clippy/clippy_lints/src/unnecessary_sort_by.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnecessary_sort_by.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -95,7 +95,10 @@ fn mirrored_exprs(\n         // The two exprs are method calls.\n         // Check to see that the function is the same and the arguments are mirrored\n         // This is enough because the receiver of the method is listed in the arguments\n-        (ExprKind::MethodCall(left_segment, _, left_args, _), ExprKind::MethodCall(right_segment, _, right_args, _)) => {\n+        (\n+            ExprKind::MethodCall(left_segment, _, left_args, _),\n+            ExprKind::MethodCall(right_segment, _, right_args, _),\n+        ) => {\n             left_segment.ident == right_segment.ident\n                 && left_args\n                     .iter()"}, {"sha": "4d3682263f14fdedc14be9209e1806147937190d", "filename": "src/tools/clippy/clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -45,7 +45,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     pub UNNESTED_OR_PATTERNS,\n-    complexity,\n+    pedantic,\n     \"unnested or-patterns, e.g., `Foo(Bar) | Foo(Baz) instead of `Foo(Bar | Baz)`\"\n }\n "}, {"sha": "910b665ccb75ea2fcc1a4682df2e021fd0be9a55", "filename": "src/tools/clippy/clippy_lints/src/utils/author.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -251,7 +251,10 @@ impl<'tcx> Visitor<'tcx> for PrintVisitor {\n                 }\n             },\n             ExprKind::MethodCall(ref _method_name, ref _generics, ref _args, ref _fn_span) => {\n-                println!(\"MethodCall(ref method_name, ref generics, ref args, ref fn_span) = {};\", current);\n+                println!(\n+                    \"MethodCall(ref method_name, ref generics, ref args, ref fn_span) = {};\",\n+                    current\n+                );\n                 println!(\"    // unimplemented: `ExprKind::MethodCall` is not further destructured at the moment\");\n             },\n             ExprKind::Tup(ref elements) => {"}, {"sha": "c41befbf147b8c2e1567b86f50262ec0c9359009", "filename": "src/tools/clippy/clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -106,8 +106,8 @@ macro_rules! define_Conf {\n \n pub use self::helpers::Conf;\n define_Conf! {\n-    /// Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about\n-    (blacklisted_names, \"blacklisted_names\": Vec<String>, [\"foo\", \"bar\", \"baz\", \"quux\"].iter().map(ToString::to_string).collect()),\n+    /// Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about. NB: `bar` is not here since it has legitimate uses\n+    (blacklisted_names, \"blacklisted_names\": Vec<String>, [\"foo\", \"baz\", \"quux\"].iter().map(ToString::to_string).collect()),\n     /// Lint: COGNITIVE_COMPLEXITY. The maximum cognitive complexity a function can have\n     (cognitive_complexity_threshold, \"cognitive_complexity_threshold\": u64, 25),\n     /// DEPRECATED LINT: CYCLOMATIC_COMPLEXITY. Use the Cognitive Complexity lint instead."}, {"sha": "9a9aa3f94eb4b64ad6bfe491d82aee84442ddd02", "filename": "src/tools/clippy/clippy_lints/src/utils/hir_utils.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fhir_utils.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -309,18 +309,15 @@ fn swap_binop<'a>(\n     rhs: &'a Expr<'a>,\n ) -> Option<(BinOpKind, &'a Expr<'a>, &'a Expr<'a>)> {\n     match binop {\n-        BinOpKind::Add\n-        | BinOpKind::Mul\n-        | BinOpKind::Eq\n-        | BinOpKind::Ne\n-        | BinOpKind::BitAnd\n-        | BinOpKind::BitXor\n-        | BinOpKind::BitOr => Some((binop, rhs, lhs)),\n+        BinOpKind::Add | BinOpKind::Eq | BinOpKind::Ne | BinOpKind::BitAnd | BinOpKind::BitXor | BinOpKind::BitOr => {\n+            Some((binop, rhs, lhs))\n+        },\n         BinOpKind::Lt => Some((BinOpKind::Gt, rhs, lhs)),\n         BinOpKind::Le => Some((BinOpKind::Ge, rhs, lhs)),\n         BinOpKind::Ge => Some((BinOpKind::Le, rhs, lhs)),\n         BinOpKind::Gt => Some((BinOpKind::Lt, rhs, lhs)),\n-        BinOpKind::Shl\n+        BinOpKind::Mul // Not always commutative, e.g. with matrices. See issue #5698\n+        | BinOpKind::Shl\n         | BinOpKind::Shr\n         | BinOpKind::Rem\n         | BinOpKind::Sub"}, {"sha": "e919b1522d89a04f12c0140b2e45dfc9a8901a6c", "filename": "src/tools/clippy/clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -509,7 +509,7 @@ fn indentation<T: LintContext>(cx: &T, span: Span) -> Option<String> {\n }\n \n /// Convenience extension trait for `DiagnosticBuilder`.\n-pub trait DiagnosticBuilderExt<'a, T: LintContext> {\n+pub trait DiagnosticBuilderExt<T: LintContext> {\n     /// Suggests to add an attribute to an item.\n     ///\n     /// Correctly handles indentation of the attribute and item.\n@@ -556,7 +556,7 @@ pub trait DiagnosticBuilderExt<'a, T: LintContext> {\n     fn suggest_remove_item(&mut self, cx: &T, item: Span, msg: &str, applicability: Applicability);\n }\n \n-impl<'a, 'b, 'c, T: LintContext> DiagnosticBuilderExt<'c, T> for rustc_errors::DiagnosticBuilder<'b> {\n+impl<T: LintContext> DiagnosticBuilderExt<T> for rustc_errors::DiagnosticBuilder<'_> {\n     fn suggest_item_with_attr<D: Display + ?Sized>(\n         &mut self,\n         cx: &T,"}, {"sha": "0492878fc272f19a8028fa6ac04a168fd76c6a8b", "filename": "src/tools/clippy/clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -8,7 +8,7 @@ use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n use rustc_span::symbol::{Ident, Symbol};\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceWithHirId, PlaceBase};\n+use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n /// Returns a set of mutated local variable IDs, or `None` if mutations could not be determined.\n pub fn mutated_variables<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &'a LateContext<'a, 'tcx>) -> Option<FxHashSet<HirId>> {"}, {"sha": "79f7705e281e542806d081fdae55c5e6549220e0", "filename": "src/tools/clippy/clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -36,7 +36,7 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     /// **What it does:** Checks for wildcard imports `use _::*`.\n     ///\n-    /// **Why is this bad?** wildcard imports can polute the namespace. This is especially bad if\n+    /// **Why is this bad?** wildcard imports can pollute the namespace. This is especially bad if\n     /// you try to import something through a wildcard, that already has been imported by name from\n     /// a different source:\n     ///"}, {"sha": "decd3a79cce180c839320dc158f5714c095150c2", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 31, "deletions": 13, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -1,15 +1,16 @@\n-#![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![feature(rustc_private)]\n+#![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n+// warn on lints, that are included in `rust-lang/rust`s bootstrap\n+#![warn(rust_2018_idioms, unused_lifetimes)]\n+// warn on rustc internal lints\n+#![deny(rustc::internal)]\n \n // FIXME: switch to something more ergonomic here, once available.\n // (Currently there is no way to opt into sysroot crates without `extern crate`.)\n-#[allow(unused_extern_crates)]\n+extern crate rustc_data_structures;\n extern crate rustc_driver;\n-#[allow(unused_extern_crates)]\n extern crate rustc_errors;\n-#[allow(unused_extern_crates)]\n extern crate rustc_interface;\n-#[allow(unused_extern_crates)]\n extern crate rustc_middle;\n \n use rustc_interface::interface;\n@@ -93,7 +94,7 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n #[allow(clippy::find_map, clippy::filter_map)]\n fn describe_lints() {\n     use lintlist::{Level, Lint, ALL_LINTS, LINT_LEVELS};\n-    use std::collections::HashSet;\n+    use rustc_data_structures::fx::FxHashSet;\n \n     println!(\n         \"\n@@ -137,7 +138,7 @@ Available lint options:\n \n     let scoped = |x: &str| format!(\"clippy::{}\", x);\n \n-    let lint_groups: HashSet<_> = lints.iter().map(|lint| lint.group).collect();\n+    let lint_groups: FxHashSet<_> = lints.iter().map(|lint| lint.group).collect();\n \n     println!(\"Lint checks provided by clippy:\\n\");\n     println!(\"    {}  {:7.7}  meaning\", padded(\"name\"), \"default\");\n@@ -207,6 +208,7 @@ Usage:\n \n Common options:\n     -h, --help               Print this message\n+        --rustc              Pass all args to rustc\n     -V, --version            Print version info and exit\n \n Other options are the same as `cargo check`.\n@@ -297,12 +299,6 @@ pub fn main() {\n     exit(rustc_driver::catch_with_exit_code(move || {\n         let mut orig_args: Vec<String> = env::args().collect();\n \n-        if orig_args.iter().any(|a| a == \"--version\" || a == \"-V\") {\n-            let version_info = rustc_tools_util::get_version_info!();\n-            println!(\"{}\", version_info);\n-            exit(0);\n-        }\n-\n         // Get the sysroot, looking from most specific to this invocation to the least:\n         // - command line\n         // - runtime environment\n@@ -348,6 +344,28 @@ pub fn main() {\n             .map(|pb| pb.to_string_lossy().to_string())\n             .expect(\"need to specify SYSROOT env var during clippy compilation, or use rustup or multirust\");\n \n+        // make \"clippy-driver --rustc\" work like a subcommand that passes further args to \"rustc\"\n+        // for example `clippy-driver --rustc --version` will print the rustc version that clippy-driver\n+        // uses\n+        if let Some(pos) = orig_args.iter().position(|arg| arg == \"--rustc\") {\n+            orig_args.remove(pos);\n+            orig_args[0] = \"rustc\".to_string();\n+\n+            // if we call \"rustc\", we need to pass --sysroot here as well\n+            let mut args: Vec<String> = orig_args.clone();\n+            if !have_sys_root_arg {\n+                args.extend(vec![\"--sysroot\".into(), sys_root]);\n+            };\n+\n+            return rustc_driver::run_compiler(&args, &mut DefaultCallbacks, None, None);\n+        }\n+\n+        if orig_args.iter().any(|a| a == \"--version\" || a == \"-V\") {\n+            let version_info = rustc_tools_util::get_version_info!();\n+            println!(\"{}\", version_info);\n+            exit(0);\n+        }\n+\n         // Setting RUSTC_WRAPPER causes Cargo to pass 'rustc' as the first argument.\n         // We're invoking the compiler programmatically, so we ignore this/\n         let wrapper_mode = orig_args.get(1).map(Path::new).and_then(Path::file_stem) == Some(\"rustc\".as_ref());"}, {"sha": "edceb75518008e798915dc815e52561662431a31", "filename": "src/tools/clippy/src/lintlist/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fsrc%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fsrc%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Flintlist%2Fmod.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -2329,7 +2329,7 @@ pub static ref ALL_LINTS: Vec<Lint> = vec![\n     },\n     Lint {\n         name: \"unnested_or_patterns\",\n-        group: \"complexity\",\n+        group: \"pedantic\",\n         desc: \"unnested or-patterns, e.g., `Foo(Bar) | Foo(Baz) instead of `Foo(Bar | Baz)`\",\n         deprecation: None,\n         module: \"unnested_or_patterns\","}, {"sha": "6739a4cf2245e5e16a7aed73e135edf3d9ab9424", "filename": "src/tools/clippy/src/main.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fmain.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -1,4 +1,6 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n+// warn on lints, that are included in `rust-lang/rust`s bootstrap\n+#![warn(rust_2018_idioms, unused_lifetimes)]\n \n use rustc_tools_util::VersionInfo;\n use std::env;"}, {"sha": "ecb55d8cb48d5bbcb6f32ba3223d6ef8671793ed", "filename": "src/tools/clippy/tests/ui/auxiliary/macro_use_helper.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fmacro_use_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fmacro_use_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fmacro_use_helper.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -0,0 +1,60 @@\n+extern crate macro_rules;\n+\n+// STMT\n+#[macro_export]\n+macro_rules! pub_macro {\n+    () => {\n+        let _ = \"hello Mr. Vonnegut\";\n+    };\n+}\n+\n+pub mod inner {\n+    pub use super::*;\n+\n+    // RE-EXPORT\n+    // this will stick in `inner` module\n+    pub use macro_rules::foofoo;\n+    pub use macro_rules::try_err;\n+\n+    pub mod nested {\n+        pub use macro_rules::string_add;\n+    }\n+\n+    // ITEM\n+    #[macro_export]\n+    macro_rules! inner_mod_macro {\n+        () => {\n+            #[allow(dead_code)]\n+            pub struct Tardis;\n+        };\n+    }\n+}\n+\n+// EXPR\n+#[macro_export]\n+macro_rules! function_macro {\n+    () => {\n+        if true {\n+        } else {\n+        }\n+    };\n+}\n+\n+// TYPE\n+#[macro_export]\n+macro_rules! ty_macro {\n+    () => {\n+        Vec<u8>\n+    };\n+}\n+\n+mod extern_exports {\n+    pub(super) mod private_inner {\n+        #[macro_export]\n+        macro_rules! pub_in_private_macro {\n+            ($name:ident) => {\n+                let $name = String::from(\"secrets and lies\");\n+            };\n+        }\n+    }\n+}"}, {"sha": "cb15bdd2f1b2d4cca8383b2967a535ee3d3ae20f", "filename": "src/tools/clippy/tests/ui/blacklisted_name.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fblacklisted_name.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -12,29 +12,34 @@ fn test(foo: ()) {}\n \n fn main() {\n     let foo = 42;\n-    let bar = 42;\n     let baz = 42;\n+    let quux = 42;\n+    // Unlike these others, `bar` is actually considered an acceptable name.\n+    // Among many other legitimate uses, bar commonly refers to a period of time in music.\n+    // See https://github.com/rust-lang/rust-clippy/issues/5225.\n+    let bar = 42;\n \n-    let barb = 42;\n-    let barbaric = 42;\n+    let food = 42;\n+    let foodstuffs = 42;\n+    let bazaar = 42;\n \n     match (42, Some(1337), Some(0)) {\n-        (foo, Some(bar), baz @ Some(_)) => (),\n+        (foo, Some(baz), quux @ Some(_)) => (),\n         _ => (),\n     }\n }\n \n fn issue_1647(mut foo: u8) {\n-    let mut bar = 0;\n-    if let Some(mut baz) = Some(42) {}\n+    let mut baz = 0;\n+    if let Some(mut quux) = Some(42) {}\n }\n \n fn issue_1647_ref() {\n-    let ref bar = 0;\n-    if let Some(ref baz) = Some(42) {}\n+    let ref baz = 0;\n+    if let Some(ref quux) = Some(42) {}\n }\n \n fn issue_1647_ref_mut() {\n-    let ref mut bar = 0;\n-    if let Some(ref mut baz) = Some(42) {}\n+    let ref mut baz = 0;\n+    if let Some(ref mut quux) = Some(42) {}\n }"}, {"sha": "70dbdaece8b6bb37083a79cb0d0bafc9b6c00a86", "filename": "src/tools/clippy/tests/ui/blacklisted_name.stderr", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fblacklisted_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fblacklisted_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fblacklisted_name.stderr?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -12,77 +12,77 @@ error: use of a blacklisted/placeholder name `foo`\n LL |     let foo = 42;\n    |         ^^^\n \n-error: use of a blacklisted/placeholder name `bar`\n+error: use of a blacklisted/placeholder name `baz`\n   --> $DIR/blacklisted_name.rs:15:9\n    |\n-LL |     let bar = 42;\n+LL |     let baz = 42;\n    |         ^^^\n \n-error: use of a blacklisted/placeholder name `baz`\n+error: use of a blacklisted/placeholder name `quux`\n   --> $DIR/blacklisted_name.rs:16:9\n    |\n-LL |     let baz = 42;\n-   |         ^^^\n+LL |     let quux = 42;\n+   |         ^^^^\n \n error: use of a blacklisted/placeholder name `foo`\n-  --> $DIR/blacklisted_name.rs:22:10\n+  --> $DIR/blacklisted_name.rs:27:10\n    |\n-LL |         (foo, Some(bar), baz @ Some(_)) => (),\n+LL |         (foo, Some(baz), quux @ Some(_)) => (),\n    |          ^^^\n \n-error: use of a blacklisted/placeholder name `bar`\n-  --> $DIR/blacklisted_name.rs:22:20\n+error: use of a blacklisted/placeholder name `baz`\n+  --> $DIR/blacklisted_name.rs:27:20\n    |\n-LL |         (foo, Some(bar), baz @ Some(_)) => (),\n+LL |         (foo, Some(baz), quux @ Some(_)) => (),\n    |                    ^^^\n \n-error: use of a blacklisted/placeholder name `baz`\n-  --> $DIR/blacklisted_name.rs:22:26\n+error: use of a blacklisted/placeholder name `quux`\n+  --> $DIR/blacklisted_name.rs:27:26\n    |\n-LL |         (foo, Some(bar), baz @ Some(_)) => (),\n-   |                          ^^^\n+LL |         (foo, Some(baz), quux @ Some(_)) => (),\n+   |                          ^^^^\n \n error: use of a blacklisted/placeholder name `foo`\n-  --> $DIR/blacklisted_name.rs:27:19\n+  --> $DIR/blacklisted_name.rs:32:19\n    |\n LL | fn issue_1647(mut foo: u8) {\n    |                   ^^^\n \n-error: use of a blacklisted/placeholder name `bar`\n-  --> $DIR/blacklisted_name.rs:28:13\n+error: use of a blacklisted/placeholder name `baz`\n+  --> $DIR/blacklisted_name.rs:33:13\n    |\n-LL |     let mut bar = 0;\n+LL |     let mut baz = 0;\n    |             ^^^\n \n-error: use of a blacklisted/placeholder name `baz`\n-  --> $DIR/blacklisted_name.rs:29:21\n+error: use of a blacklisted/placeholder name `quux`\n+  --> $DIR/blacklisted_name.rs:34:21\n    |\n-LL |     if let Some(mut baz) = Some(42) {}\n-   |                     ^^^\n+LL |     if let Some(mut quux) = Some(42) {}\n+   |                     ^^^^\n \n-error: use of a blacklisted/placeholder name `bar`\n-  --> $DIR/blacklisted_name.rs:33:13\n+error: use of a blacklisted/placeholder name `baz`\n+  --> $DIR/blacklisted_name.rs:38:13\n    |\n-LL |     let ref bar = 0;\n+LL |     let ref baz = 0;\n    |             ^^^\n \n-error: use of a blacklisted/placeholder name `baz`\n-  --> $DIR/blacklisted_name.rs:34:21\n+error: use of a blacklisted/placeholder name `quux`\n+  --> $DIR/blacklisted_name.rs:39:21\n    |\n-LL |     if let Some(ref baz) = Some(42) {}\n-   |                     ^^^\n+LL |     if let Some(ref quux) = Some(42) {}\n+   |                     ^^^^\n \n-error: use of a blacklisted/placeholder name `bar`\n-  --> $DIR/blacklisted_name.rs:38:17\n+error: use of a blacklisted/placeholder name `baz`\n+  --> $DIR/blacklisted_name.rs:43:17\n    |\n-LL |     let ref mut bar = 0;\n+LL |     let ref mut baz = 0;\n    |                 ^^^\n \n-error: use of a blacklisted/placeholder name `baz`\n-  --> $DIR/blacklisted_name.rs:39:25\n+error: use of a blacklisted/placeholder name `quux`\n+  --> $DIR/blacklisted_name.rs:44:25\n    |\n-LL |     if let Some(ref mut baz) = Some(42) {}\n-   |                         ^^^\n+LL |     if let Some(ref mut quux) = Some(42) {}\n+   |                         ^^^^\n \n error: aborting due to 14 previous errors\n "}, {"sha": "de262199004b025dd1dfebd5c16c98a8ed459589", "filename": "src/tools/clippy/tests/ui/crashes/ice-5389.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-5389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-5389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-5389.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -0,0 +1,13 @@\n+#![allow(clippy::explicit_counter_loop)]\n+\n+fn main() {\n+    let v = vec![1, 2, 3];\n+    let mut i = 0;\n+    let max_storage_size = [0; 128 * 1024];\n+    for item in &v {\n+        bar(i, *item);\n+        i += 1;\n+    }\n+}\n+\n+fn bar(_: usize, _: u32) {}"}, {"sha": "9c5fe02f7519bd25b178af70bf7b01da77520463", "filename": "src/tools/clippy/tests/ui/if_same_then_else.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fif_same_then_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fif_same_then_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fif_same_then_else.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -142,4 +142,16 @@ fn func() {\n \n fn f(val: &[u8]) {}\n \n+mod issue_5698 {\n+    fn mul_not_always_commutative(x: i32, y: i32) -> i32 {\n+        if x == 42 {\n+            x * y\n+        } else if x == 21 {\n+            y * x\n+        } else {\n+            0\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "91e34c62160a129672ce3c9f08da34e3943ffd04", "filename": "src/tools/clippy/tests/ui/macro_use_imports.fixed", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.fixed?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -0,0 +1,43 @@\n+// compile-flags: --edition 2018\n+// aux-build:macro_rules.rs\n+// aux-build:macro_use_helper.rs\n+// run-rustfix\n+// ignore-32bit\n+\n+#![allow(unused_imports, unreachable_code, unused_variables, dead_code)]\n+#![allow(clippy::single_component_path_imports)]\n+#![warn(clippy::macro_use_imports)]\n+\n+#[macro_use]\n+extern crate macro_use_helper as mac;\n+\n+#[macro_use]\n+extern crate clippy_mini_macro_test as mini_mac;\n+\n+mod a {\n+    use mac::{pub_macro, inner_mod_macro, function_macro, ty_macro, pub_in_private_macro};\n+    use mac;\n+    use mini_mac::ClippyMiniMacroTest;\n+    use mini_mac;\n+    use mac::{inner::foofoo, inner::try_err};\n+    use mac::inner;\n+    use mac::inner::nested::string_add;\n+    use mac::inner::nested;\n+\n+    #[derive(ClippyMiniMacroTest)]\n+    struct Test;\n+\n+    fn test() {\n+        pub_macro!();\n+        inner_mod_macro!();\n+        pub_in_private_macro!(_var);\n+        function_macro!();\n+        let v: ty_macro!() = Vec::default();\n+\n+        inner::try_err!();\n+        inner::foofoo!();\n+        nested::string_add!();\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "9c3c50c5d49f29b0a03eea1ca77c583a71686597", "filename": "src/tools/clippy/tests/ui/macro_use_imports.rs", "status": "modified", "additions": 38, "deletions": 6, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -1,11 +1,43 @@\n-// edition:2018\n+// compile-flags: --edition 2018\n+// aux-build:macro_rules.rs\n+// aux-build:macro_use_helper.rs\n+// run-rustfix\n+// ignore-32bit\n+\n+#![allow(unused_imports, unreachable_code, unused_variables, dead_code)]\n+#![allow(clippy::single_component_path_imports)]\n #![warn(clippy::macro_use_imports)]\n \n-use std::collections::HashMap;\n #[macro_use]\n-use std::prelude;\n+extern crate macro_use_helper as mac;\n+\n+#[macro_use]\n+extern crate clippy_mini_macro_test as mini_mac;\n+\n+mod a {\n+    #[macro_use]\n+    use mac;\n+    #[macro_use]\n+    use mini_mac;\n+    #[macro_use]\n+    use mac::inner;\n+    #[macro_use]\n+    use mac::inner::nested;\n \n-fn main() {\n-    let _ = HashMap::<u8, u8>::new();\n-    println!();\n+    #[derive(ClippyMiniMacroTest)]\n+    struct Test;\n+\n+    fn test() {\n+        pub_macro!();\n+        inner_mod_macro!();\n+        pub_in_private_macro!(_var);\n+        function_macro!();\n+        let v: ty_macro!() = Vec::default();\n+\n+        inner::try_err!();\n+        inner::foofoo!();\n+        nested::string_add!();\n+    }\n }\n+\n+fn main() {}"}, {"sha": "f8c86c8d9179f8af918b684eb9294c18ea4a7008", "filename": "src/tools/clippy/tests/ui/macro_use_imports.stderr", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmacro_use_imports.stderr?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -1,10 +1,28 @@\n error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n-  --> $DIR/macro_use_imports.rs:5:1\n+  --> $DIR/macro_use_imports.rs:18:5\n    |\n-LL | #[macro_use]\n-   | ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use std::prelude::<macro name>`\n+LL |     #[macro_use]\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{pub_macro, inner_mod_macro, function_macro, ty_macro, pub_in_private_macro};`\n    |\n    = note: `-D clippy::macro-use-imports` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n+  --> $DIR/macro_use_imports.rs:20:5\n+   |\n+LL |     #[macro_use]\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mini_mac::ClippyMiniMacroTest;`\n+\n+error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n+  --> $DIR/macro_use_imports.rs:22:5\n+   |\n+LL |     #[macro_use]\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::{inner::foofoo, inner::try_err};`\n+\n+error: `macro_use` attributes are no longer needed in the Rust 2018 edition\n+  --> $DIR/macro_use_imports.rs:24:5\n+   |\n+LL |     #[macro_use]\n+   |     ^^^^^^^^^^^^ help: remove the attribute and import the macro directly, try: `use mac::inner::nested::string_add;`\n+\n+error: aborting due to 4 previous errors\n "}, {"sha": "6ba5cfb1d7177bef814da42575f40ea9b6301a8a", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.fixed", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.fixed?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![feature(const_if_match)]\n+#![feature(const_loop)]\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(clippy::unit_arg, unused_must_use, clippy::needless_bool, deprecated)]\n@@ -67,6 +69,7 @@ fn main() {\n     takes_bool(x);\n \n     issue5504();\n+    issue5697();\n \n     let _ = if gen_opt().is_some() {\n         1\n@@ -117,3 +120,42 @@ fn issue5504() {\n     if m!().is_some() {}\n     while m!().is_some() {}\n }\n+\n+// None of these should be linted because none of the suggested methods\n+// are `const fn` without toggling a feature.\n+const fn issue5697() {\n+    if let Ok(_) = Ok::<i32, i32>(42) {}\n+\n+    if let Err(_) = Err::<i32, i32>(42) {}\n+\n+    if let Some(_) = Some(42) {}\n+\n+    if let None = None::<()> {}\n+\n+    while let Ok(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Err(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    match Ok::<i32, i32>(42) {\n+        Ok(_) => true,\n+        Err(_) => false,\n+    };\n+\n+    match Err::<i32, i32>(42) {\n+        Ok(_) => false,\n+        Err(_) => true,\n+    };\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+}"}, {"sha": "17de66f9ad0ebaef6c44f8124879c2550e690e47", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.rs", "status": "modified", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -1,5 +1,7 @@\n // run-rustfix\n \n+#![feature(const_if_match)]\n+#![feature(const_loop)]\n #![warn(clippy::all)]\n #![warn(clippy::redundant_pattern_matching)]\n #![allow(clippy::unit_arg, unused_must_use, clippy::needless_bool, deprecated)]\n@@ -88,6 +90,7 @@ fn main() {\n     takes_bool(x);\n \n     issue5504();\n+    issue5697();\n \n     let _ = if let Some(_) = gen_opt() {\n         1\n@@ -138,3 +141,42 @@ fn issue5504() {\n     if let Some(_) = m!() {}\n     while let Some(_) = m!() {}\n }\n+\n+// None of these should be linted because none of the suggested methods\n+// are `const fn` without toggling a feature.\n+const fn issue5697() {\n+    if let Ok(_) = Ok::<i32, i32>(42) {}\n+\n+    if let Err(_) = Err::<i32, i32>(42) {}\n+\n+    if let Some(_) = Some(42) {}\n+\n+    if let None = None::<()> {}\n+\n+    while let Ok(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Err(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    match Ok::<i32, i32>(42) {\n+        Ok(_) => true,\n+        Err(_) => false,\n+    };\n+\n+    match Err::<i32, i32>(42) {\n+        Ok(_) => false,\n+        Err(_) => true,\n+    };\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+}"}, {"sha": "1b9a4b40a2f0210da797e4a7d39a7485bfe20205", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching.stderr", "status": "modified", "additions": 28, "deletions": 28, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching.stderr?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -1,73 +1,73 @@\n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:8:12\n+  --> $DIR/redundant_pattern_matching.rs:10:12\n    |\n LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n    |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n    |\n    = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:10:12\n+  --> $DIR/redundant_pattern_matching.rs:12:12\n    |\n LL |     if let Err(_) = Err::<i32, i32>(42) {}\n    |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:12:12\n+  --> $DIR/redundant_pattern_matching.rs:14:12\n    |\n LL |     if let None = None::<()> {}\n    |     -------^^^^------------- help: try this: `if None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:14:12\n+  --> $DIR/redundant_pattern_matching.rs:16:12\n    |\n LL |     if let Some(_) = Some(42) {}\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:16:12\n+  --> $DIR/redundant_pattern_matching.rs:18:12\n    |\n LL |     if let Some(_) = Some(42) {\n    |     -------^^^^^^^----------- help: try this: `if Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:22:15\n+  --> $DIR/redundant_pattern_matching.rs:24:15\n    |\n LL |     while let Some(_) = Some(42) {}\n    |     ----------^^^^^^^----------- help: try this: `while Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:24:15\n+  --> $DIR/redundant_pattern_matching.rs:26:15\n    |\n LL |     while let None = Some(42) {}\n    |     ----------^^^^----------- help: try this: `while Some(42).is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:26:15\n+  --> $DIR/redundant_pattern_matching.rs:28:15\n    |\n LL |     while let None = None::<()> {}\n    |     ----------^^^^------------- help: try this: `while None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:28:15\n+  --> $DIR/redundant_pattern_matching.rs:30:15\n    |\n LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:30:15\n+  --> $DIR/redundant_pattern_matching.rs:32:15\n    |\n LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n    |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:33:15\n+  --> $DIR/redundant_pattern_matching.rs:35:15\n    |\n LL |     while let Some(_) = v.pop() {\n    |     ----------^^^^^^^---------- help: try this: `while v.pop().is_some()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:49:5\n+  --> $DIR/redundant_pattern_matching.rs:51:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -76,7 +76,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:54:5\n+  --> $DIR/redundant_pattern_matching.rs:56:5\n    |\n LL | /     match Ok::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -85,7 +85,7 @@ LL | |     };\n    | |_____^ help: try this: `Ok::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:59:5\n+  --> $DIR/redundant_pattern_matching.rs:61:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => false,\n@@ -94,7 +94,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:64:5\n+  --> $DIR/redundant_pattern_matching.rs:66:5\n    |\n LL | /     match Err::<i32, i32>(42) {\n LL | |         Ok(_) => true,\n@@ -103,7 +103,7 @@ LL | |     };\n    | |_____^ help: try this: `Err::<i32, i32>(42).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:69:5\n+  --> $DIR/redundant_pattern_matching.rs:71:5\n    |\n LL | /     match Some(42) {\n LL | |         Some(_) => true,\n@@ -112,7 +112,7 @@ LL | |     };\n    | |_____^ help: try this: `Some(42).is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:74:5\n+  --> $DIR/redundant_pattern_matching.rs:76:5\n    |\n LL | /     match None::<()> {\n LL | |         Some(_) => false,\n@@ -121,7 +121,7 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:79:13\n+  --> $DIR/redundant_pattern_matching.rs:81:13\n    |\n LL |       let _ = match None::<()> {\n    |  _____________^\n@@ -131,61 +131,61 @@ LL | |     };\n    | |_____^ help: try this: `None::<()>.is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:84:20\n+  --> $DIR/redundant_pattern_matching.rs:86:20\n    |\n LL |     let _ = if let Ok(_) = Ok::<usize, ()>(4) { true } else { false };\n    |             -------^^^^^--------------------- help: try this: `if Ok::<usize, ()>(4).is_ok()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:87:20\n+  --> $DIR/redundant_pattern_matching.rs:89:20\n    |\n LL |     let x = if let Some(_) = opt { true } else { false };\n    |             -------^^^^^^^------ help: try this: `if opt.is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:92:20\n+  --> $DIR/redundant_pattern_matching.rs:95:20\n    |\n LL |     let _ = if let Some(_) = gen_opt() {\n    |             -------^^^^^^^------------ help: try this: `if gen_opt().is_some()`\n \n error: redundant pattern matching, consider using `is_none()`\n-  --> $DIR/redundant_pattern_matching.rs:94:19\n+  --> $DIR/redundant_pattern_matching.rs:97:19\n    |\n LL |     } else if let None = gen_opt() {\n    |            -------^^^^------------ help: try this: `if gen_opt().is_none()`\n \n error: redundant pattern matching, consider using `is_ok()`\n-  --> $DIR/redundant_pattern_matching.rs:96:19\n+  --> $DIR/redundant_pattern_matching.rs:99:19\n    |\n LL |     } else if let Ok(_) = gen_res() {\n    |            -------^^^^^------------ help: try this: `if gen_res().is_ok()`\n \n error: redundant pattern matching, consider using `is_err()`\n-  --> $DIR/redundant_pattern_matching.rs:98:19\n+  --> $DIR/redundant_pattern_matching.rs:101:19\n    |\n LL |     } else if let Err(_) = gen_res() {\n    |            -------^^^^^^------------ help: try this: `if gen_res().is_err()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:131:19\n+  --> $DIR/redundant_pattern_matching.rs:134:19\n    |\n LL |         while let Some(_) = r#try!(result_opt()) {}\n    |         ----------^^^^^^^----------------------- help: try this: `while r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:132:16\n+  --> $DIR/redundant_pattern_matching.rs:135:16\n    |\n LL |         if let Some(_) = r#try!(result_opt()) {}\n    |         -------^^^^^^^----------------------- help: try this: `if r#try!(result_opt()).is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:138:12\n+  --> $DIR/redundant_pattern_matching.rs:141:12\n    |\n LL |     if let Some(_) = m!() {}\n    |     -------^^^^^^^------- help: try this: `if m!().is_some()`\n \n error: redundant pattern matching, consider using `is_some()`\n-  --> $DIR/redundant_pattern_matching.rs:139:15\n+  --> $DIR/redundant_pattern_matching.rs:142:15\n    |\n LL |     while let Some(_) = m!() {}\n    |     ----------^^^^^^^------- help: try this: `while m!().is_some()`"}, {"sha": "c8bc5458067d35bf1ac7c8e2472f3896423c0990", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_const_result.fixed", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.fixed?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -0,0 +1,46 @@\n+// run-rustfix\n+\n+#![feature(const_if_match)]\n+#![feature(const_loop)]\n+#![feature(const_result)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(unused)]\n+\n+// Test that results are linted with the feature enabled.\n+\n+const fn issue_5697() {\n+    if Ok::<i32, i32>(42).is_ok() {}\n+\n+    if Err::<i32, i32>(42).is_err() {}\n+\n+    while Ok::<i32, i32>(10).is_ok() {}\n+\n+    while Ok::<i32, i32>(10).is_err() {}\n+\n+    Ok::<i32, i32>(42).is_ok();\n+\n+    Err::<i32, i32>(42).is_err();\n+\n+    // These should not be linted until `const_option` is implemented.\n+    // See https://github.com/rust-lang/rust/issues/67441\n+\n+    if let Some(_) = Some(42) {}\n+\n+    if let None = None::<()> {}\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "75f37ec15c6222ea894999b3e483bb12e86c07f5", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_const_result.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -0,0 +1,52 @@\n+// run-rustfix\n+\n+#![feature(const_if_match)]\n+#![feature(const_loop)]\n+#![feature(const_result)]\n+#![warn(clippy::redundant_pattern_matching)]\n+#![allow(unused)]\n+\n+// Test that results are linted with the feature enabled.\n+\n+const fn issue_5697() {\n+    if let Ok(_) = Ok::<i32, i32>(42) {}\n+\n+    if let Err(_) = Err::<i32, i32>(42) {}\n+\n+    while let Ok(_) = Ok::<i32, i32>(10) {}\n+\n+    while let Err(_) = Ok::<i32, i32>(10) {}\n+\n+    match Ok::<i32, i32>(42) {\n+        Ok(_) => true,\n+        Err(_) => false,\n+    };\n+\n+    match Err::<i32, i32>(42) {\n+        Ok(_) => false,\n+        Err(_) => true,\n+    };\n+\n+    // These should not be linted until `const_option` is implemented.\n+    // See https://github.com/rust-lang/rust/issues/67441\n+\n+    if let Some(_) = Some(42) {}\n+\n+    if let None = None::<()> {}\n+\n+    while let Some(_) = Some(42) {}\n+\n+    while let None = None::<()> {}\n+\n+    match Some(42) {\n+        Some(_) => true,\n+        None => false,\n+    };\n+\n+    match None::<()> {\n+        Some(_) => false,\n+        None => true,\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "c32292f0eee8b473e47e8360d3ddde92dba55dbf", "filename": "src/tools/clippy/tests/ui/redundant_pattern_matching_const_result.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_pattern_matching_const_result.stderr?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -0,0 +1,46 @@\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:12:12\n+   |\n+LL |     if let Ok(_) = Ok::<i32, i32>(42) {}\n+   |     -------^^^^^--------------------- help: try this: `if Ok::<i32, i32>(42).is_ok()`\n+   |\n+   = note: `-D clippy::redundant-pattern-matching` implied by `-D warnings`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:14:12\n+   |\n+LL |     if let Err(_) = Err::<i32, i32>(42) {}\n+   |     -------^^^^^^---------------------- help: try this: `if Err::<i32, i32>(42).is_err()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:16:15\n+   |\n+LL |     while let Ok(_) = Ok::<i32, i32>(10) {}\n+   |     ----------^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:18:15\n+   |\n+LL |     while let Err(_) = Ok::<i32, i32>(10) {}\n+   |     ----------^^^^^^--------------------- help: try this: `while Ok::<i32, i32>(10).is_err()`\n+\n+error: redundant pattern matching, consider using `is_ok()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:20:5\n+   |\n+LL | /     match Ok::<i32, i32>(42) {\n+LL | |         Ok(_) => true,\n+LL | |         Err(_) => false,\n+LL | |     };\n+   | |_____^ help: try this: `Ok::<i32, i32>(42).is_ok()`\n+\n+error: redundant pattern matching, consider using `is_err()`\n+  --> $DIR/redundant_pattern_matching_const_result.rs:25:5\n+   |\n+LL | /     match Err::<i32, i32>(42) {\n+LL | |         Ok(_) => false,\n+LL | |         Err(_) => true,\n+LL | |     };\n+   | |_____^ help: try this: `Err::<i32, i32>(42).is_err()`\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "ad5b8e4857d173f50bcbcd2bc9565e8b6c2d5b6a", "filename": "src/tools/clippy/tests/ui/repl_uninit.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frepl_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frepl_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frepl_uninit.rs?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -17,6 +17,12 @@ fn main() {\n         std::mem::forget(mem::replace(&mut v, new_v));\n     }\n \n+    unsafe {\n+        let taken_v = mem::replace(&mut v, mem::MaybeUninit::uninit().assume_init());\n+        let new_v = might_panic(taken_v);\n+        std::mem::forget(mem::replace(&mut v, new_v));\n+    }\n+\n     unsafe {\n         let taken_v = mem::replace(&mut v, mem::zeroed());\n         let new_v = might_panic(taken_v);"}, {"sha": "09468eeaea4bf9d18dacd1c5c03809c5032909bd", "filename": "src/tools/clippy/tests/ui/repl_uninit.stderr", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frepl_uninit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/67100f61e62a86f2bf9e38552ee138e231eddc74/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frepl_uninit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frepl_uninit.stderr?ref=67100f61e62a86f2bf9e38552ee138e231eddc74", "patch": "@@ -2,26 +2,29 @@ error: replacing with `mem::uninitialized()`\n   --> $DIR/repl_uninit.rs:15:23\n    |\n LL |         let taken_v = mem::replace(&mut v, mem::uninitialized());\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::ptr::read(&mut v)`\n    |\n    = note: `-D clippy::mem-replace-with-uninit` implied by `-D warnings`\n-   = help: consider using the `take_mut` crate instead\n \n-error: replacing with `mem::zeroed()`\n+error: replacing with `mem::MaybeUninit::uninit().assume_init()`\n   --> $DIR/repl_uninit.rs:21:23\n    |\n+LL |         let taken_v = mem::replace(&mut v, mem::MaybeUninit::uninit().assume_init());\n+   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::ptr::read(&mut v)`\n+\n+error: replacing with `mem::zeroed()`\n+  --> $DIR/repl_uninit.rs:27:23\n+   |\n LL |         let taken_v = mem::replace(&mut v, mem::zeroed());\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a default value or the `take_mut` crate instead\n \n error: replacing with `mem::uninitialized()`\n-  --> $DIR/repl_uninit.rs:33:28\n+  --> $DIR/repl_uninit.rs:39:28\n    |\n LL |     let taken_u = unsafe { mem::replace(uref, mem::uninitialized()) };\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: consider using the `take_mut` crate instead\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `std::ptr::read(uref)`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n "}]}