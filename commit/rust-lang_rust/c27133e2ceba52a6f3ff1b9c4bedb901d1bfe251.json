{"sha": "c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNzEzM2UyY2ViYTUyYTZmM2ZmMWI5YzRiZWRiOTAxZDFiZmUyNTE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-06T14:26:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-07T23:34:56Z"}, "message": "Preliminary feature staging\n\nThis partially implements the feature staging described in the\n[release channel RFC][rc]. It does not yet fully conform to the RFC as\nwritten, but does accomplish its goals sufficiently for the 1.0 alpha\nrelease.\n\nIt has three primary user-visible effects:\n\n* On the nightly channel, use of unstable APIs generates a warning.\n* On the beta channel, use of unstable APIs generates a warning.\n* On the beta channel, use of feature gates generates a warning.\n\nCode that does not trigger these warnings is considered 'stable',\nmodulo pre-1.0 bugs.\n\nDisabling the warnings for unstable APIs continues to be done in the\nexisting (i.e. old) style, via `#[allow(...)]`, not that specified in\nthe RFC. I deem this marginally acceptable since any code that must do\nthis is not using the stable dialect of Rust.\n\nUse of feature gates is itself gated with the new 'unstable_features'\nlint, on nightly set to 'allow', and on beta 'warn'.\n\nThe attribute scheme used here corresponds to an older version of the\nRFC, with the `#[staged_api]` crate attribute toggling the staging\nbehavior of the stability attributes, but the user impact is only\nin-tree so I'm not concerned about having to make design changes later\n(and I may ultimately prefer the scheme here after all, with the\n`#[staged_api]` crate attribute).\n\nSince the Rust codebase itself makes use of unstable features the\ncompiler and build system to a midly elaborate dance to allow it to\nbootstrap while disobeying these lints (which would otherwise be\nerrors because Rust builds with `-D warnings`).\n\nThis patch includes one significant hack that causes a\nregression. Because the `format_args!` macro emits calls to unstable\nAPIs it would trigger the lint.  I added a hack to the lint to make it\nnot trigger, but this in turn causes arguments to `println!` not to be\nchecked for feature gates. I don't presently understand macro\nexpansion well enough to fix. This is bug #20661.\n\nCloses #16678\n\n[rc]: https://github.com/rust-lang/rfcs/blob/master/text/0507-release-channels.md", "tree": {"sha": "c1ddc9c448623138fe79a15b0c68eda00f9ba3a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1ddc9c448623138fe79a15b0c68eda00f9ba3a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "html_url": "https://github.com/rust-lang/rust/commit/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "html_url": "https://github.com/rust-lang/rust/commit/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972"}], "stats": {"total": 306, "additions": 272, "deletions": 34}, "files": [{"sha": "61c737e0fd3afcca25d862fd1d1ac788ca71218a", "filename": "configure", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/configure", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -599,6 +599,18 @@ then\n fi\n putvar CFG_RELEASE_CHANNEL\n \n+# A magic value that allows the compiler to use unstable features\n+# during the bootstrap even when doing so would normally be an error\n+# because of feature staging or because the build turns on\n+# warnings-as-errors and unstable features default to warnings.  The\n+# build has to match this key in an env var. Meant to be a mild\n+# deterrent from users just turning on unstable features on the stable\n+# channel.\n+# Basing CFG_BOOTSTRAP_KEY on CFG_BOOTSTRAP_KEY lets it get picked up\n+# during a Makefile reconfig.\n+CFG_BOOTSTRAP_KEY=\"${CFG_BOOTSTRAP_KEY-`date +%N`}\"\n+putvar CFG_BOOTSTRAP_KEY\n+\n step_msg \"looking for build programs\"\n \n probe_need CFG_PERL        perl"}, {"sha": "e892286f7fd3e1d7a753e4ff75f7011eec4b83c2", "filename": "mk/main.mk", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/mk%2Fmain.mk", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/mk%2Fmain.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fmain.mk?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -25,11 +25,13 @@ ifeq ($(CFG_RELEASE_CHANNEL),stable)\n CFG_RELEASE=$(CFG_RELEASE_NUM)\n # This is the string used in dist artifact file names, e.g. \"0.12.0\", \"nightly\"\n CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)\n+CFG_DISABLE_UNSTABLE_FEATURES=1\n endif\n ifeq ($(CFG_RELEASE_CHANNEL),beta)\n # The beta channel is temporarily called 'alpha'\n CFG_RELEASE=$(CFG_RELEASE_NUM)-alpha$(CFG_BETA_CYCLE)\n CFG_PACKAGE_VERS=$(CFG_RELEASE_NUM)-alpha$(CFG_BETA_CYCLE)\n+CFG_DISABLE_UNSTABLE_FEATURES=1\n endif\n ifeq ($(CFG_RELEASE_CHANNEL),nightly)\n CFG_RELEASE=$(CFG_RELEASE_NUM)-nightly\n@@ -319,11 +321,20 @@ export CFG_VERSION_WIN\n export CFG_RELEASE\n export CFG_PACKAGE_NAME\n export CFG_BUILD\n+export CFG_RELEASE_CHANNEL\n export CFG_LLVM_ROOT\n export CFG_PREFIX\n export CFG_LIBDIR\n export CFG_LIBDIR_RELATIVE\n export CFG_DISABLE_INJECT_STD_VERSION\n+ifdef CFG_DISABLE_UNSTABLE_FEATURES\n+CFG_INFO := $(info cfg: disabling unstable features (CFG_DISABLE_UNSTABLE_FEATURES))\n+# Turn on feature-staging\n+export CFG_DISABLE_UNSTABLE_FEATURES\n+endif\n+# Subvert unstable feature lints to do the self-build\n+export CFG_BOOTSTRAP_KEY\n+export RUSTC_BOOTSTRAP_KEY:=$(CFG_BOOTSTRAP_KEY)\n \n ######################################################################\n # Per-stage targets and runner"}, {"sha": "a5153f64aecfb5d99869f8df490a89730ac439f6", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -58,6 +58,7 @@\n \n #![crate_name = \"alloc\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\","}, {"sha": "79e43b9cc64d8dacbfb0cd211a0f350dc129286a", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -21,6 +21,7 @@\n \n #![crate_name = \"arena\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "0cf5170b1b69ad774e772190b2426d4f671cbef2", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -15,6 +15,7 @@\n \n #![crate_name = \"collections\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\","}, {"sha": "95b3e59c2c37e562900a3575001d1fb329ab6ee0", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -49,6 +49,7 @@\n \n #![crate_name = \"core\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\","}, {"sha": "1896bdd182ae01e3b586ddd10bd495e2a5943d0b", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -16,6 +16,7 @@\n \n #![crate_name = \"flate\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "a703bfbb8fe2ad111b5fb059b12003c5c1f3be5c", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -16,6 +16,7 @@\n \n #![crate_name = \"fmt_macros\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "0dd6a430a88defde895609aa0c18b1299c69f514", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -79,6 +79,7 @@\n \n #![crate_name = \"getopts\"]\n #![experimental = \"use the crates.io `getopts` library instead\"]\n+#![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "21a8ba03454f53defd8c5afa85ea41274504de95", "filename": "src/libgraphviz/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibgraphviz%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibgraphviz%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgraphviz%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -266,6 +266,7 @@\n \n #![crate_name = \"graphviz\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "32e635e445d798e81dd8e95907a6845c0a023415", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -11,6 +11,7 @@\n #![crate_name = \"libc\"]\n #![crate_type = \"rlib\"]\n #![cfg_attr(not(feature = \"cargo-build\"), experimental)]\n+#![cfg_attr(not(feature = \"cargo-build\"), staged_api)]\n #![no_std]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\","}, {"sha": "6bfbbb99fc7f33347ec77801bcc1e23f62236d48", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -157,6 +157,7 @@\n \n #![crate_name = \"log\"]\n #![experimental = \"use the crates.io `log` library instead\"]\n+#![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "3dd0a1e32dfa75880ec7fe5fd3ff805e14f2cdd1", "filename": "src/librand/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -25,6 +25,7 @@\n \n #![no_std]\n #![experimental]\n+#![staged_api]\n \n #[macro_use]\n extern crate core;"}, {"sha": "66f4f2321fd4f2254915e3340a7e0565a5d008cb", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -17,6 +17,7 @@\n \n #![crate_name = \"rbml\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "bd376528a0e5148129ef4134c086af8b2789ef79", "filename": "src/libregex/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibregex%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibregex%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibregex%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -17,6 +17,7 @@\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![experimental = \"use the crates.io `regex` library instead\"]\n+#![staged_api]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n        html_root_url = \"http://doc.rust-lang.org/nightly/\","}, {"sha": "5525874a614500e7f605b0f92fa52e82074d68ea", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -16,6 +16,7 @@\n \n #![crate_name = \"rustc\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "9d7e833e711da7a79c73f70210e0340116f0cb38", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 67, "deletions": 10, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -34,7 +34,7 @@ use middle::{def, pat_util, stability};\n use middle::const_eval::{eval_const_expr_partial, const_int, const_uint};\n use util::ppaux::{ty_to_string};\n use util::nodemap::{FnvHashMap, NodeSet};\n-use lint::{Context, LintPass, LintArray};\n+use lint::{Context, LintPass, LintArray, Lint};\n \n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::num::SignedInt;\n@@ -1643,19 +1643,27 @@ declare_lint! {\n     \"detects use of #[unstable] items (incl. items with no stability attribute)\"\n }\n \n+declare_lint!(STAGED_EXPERIMENTAL, Warn,\n+              \"detects use of #[experimental] items in staged builds\");\n+\n+declare_lint!(STAGED_UNSTABLE, Warn,\n+              \"detects use of #[unstable] items (incl. items with no stability attribute) \\\n+               in staged builds\");\n+\n /// Checks for use of items with `#[deprecated]`, `#[experimental]` and\n /// `#[unstable]` attributes, or no stability attribute.\n #[derive(Copy)]\n pub struct Stability;\n \n impl Stability {\n     fn lint(&self, cx: &Context, id: ast::DefId, span: Span) {\n-        let stability = stability::lookup(cx.tcx, id);\n+\n+        let ref stability = stability::lookup(cx.tcx, id);\n         let cross_crate = !ast_util::is_local(id);\n \n         // stability attributes are promises made across crates; only\n         // check DEPRECATED for crate-local usage.\n-        let (lint, label) = match stability {\n+        let (lint, label) = match *stability {\n             // no stability attributes == Unstable\n             None if cross_crate => (UNSTABLE, \"unmarked\"),\n             Some(attr::Stability { level: attr::Unstable, .. }) if cross_crate =>\n@@ -1667,24 +1675,53 @@ impl Stability {\n             _ => return\n         };\n \n-        let msg = match stability {\n-            Some(attr::Stability { text: Some(ref s), .. }) => {\n-                format!(\"use of {} item: {}\", label, *s)\n+        output(cx, span, stability, lint, label);\n+        if cross_crate && stability::is_staged_api(cx.tcx, id) {\n+            if lint.name == UNSTABLE.name {\n+                output(cx, span, stability, STAGED_UNSTABLE, label);\n+            } else if lint.name == EXPERIMENTAL.name {\n+                output(cx, span, stability, STAGED_EXPERIMENTAL, label);\n             }\n-            _ => format!(\"use of {} item\", label)\n-        };\n+        }\n \n-        cx.span_lint(lint, span, msg.index(&FullRange));\n+        fn output(cx: &Context, span: Span, stability: &Option<attr::Stability>,\n+                  lint: &'static Lint, label: &'static str) {\n+            let msg = match *stability {\n+                Some(attr::Stability { text: Some(ref s), .. }) => {\n+                    format!(\"use of {} item: {}\", label, *s)\n+                }\n+                _ => format!(\"use of {} item\", label)\n+            };\n+\n+            cx.span_lint(lint, span, msg.index(&FullRange));\n+        }\n     }\n \n+\n     fn is_internal(&self, cx: &Context, span: Span) -> bool {\n         cx.tcx.sess.codemap().span_is_internal(span)\n     }\n+\n }\n \n impl LintPass for Stability {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(DEPRECATED, EXPERIMENTAL, UNSTABLE)\n+        lint_array!(DEPRECATED, EXPERIMENTAL, UNSTABLE, STAGED_EXPERIMENTAL, STAGED_UNSTABLE)\n+    }\n+\n+    fn check_crate(&mut self, _: &Context, c: &ast::Crate) {\n+        // Just mark the #[staged_api] attribute used, though nothing else is done\n+        // with it during this pass over the source.\n+        for attr in c.attrs.iter() {\n+            if attr.name().get() == \"staged_api\" {\n+                match attr.node.value.node {\n+                    ast::MetaWord(_) => {\n+                        attr::mark_used(attr);\n+                    }\n+                    _ => (/*pass*/)\n+                }\n+            }\n+        }\n     }\n \n     fn check_view_item(&mut self, cx: &Context, item: &ast::ViewItem) {\n@@ -1746,6 +1783,7 @@ impl LintPass for Stability {\n             }\n             _ => return\n         };\n+\n         self.lint(cx, id, span);\n     }\n \n@@ -1878,3 +1916,22 @@ impl LintPass for HardwiredLints {\n         )\n     }\n }\n+\n+/// Forbids using the `#[feature(...)]` attribute\n+#[deriving(Copy)]\n+pub struct UnstableFeatures;\n+\n+declare_lint!(UNSTABLE_FEATURES, Allow,\n+              \"enabling unstable features\");\n+\n+impl LintPass for UnstableFeatures {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!(UNSTABLE_FEATURES)\n+    }\n+    fn check_attribute(&mut self, ctx: &Context, attr: &ast::Attribute) {\n+        use syntax::attr;\n+        if attr::contains_name(&[attr.node.value.clone()], \"feature\") {\n+            ctx.span_lint(UNSTABLE_FEATURES, attr.span, \"unstable feature\");\n+        }\n+    }\n+}"}, {"sha": "7d58b04a7f4903095f6af32b1165f2693afd529a", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 43, "deletions": 3, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -28,8 +28,9 @@ use self::TargetLint::*;\n use middle::privacy::ExportedItems;\n use middle::ty::{self, Ty};\n use session::{early_error, Session};\n+use session::config::UnstableFeatures;\n use lint::{Level, LevelSource, Lint, LintId, LintArray, LintPass, LintPassObject};\n-use lint::{Default, CommandLine, Node, Allow, Warn, Deny, Forbid};\n+use lint::{Default, CommandLine, Node, Allow, Warn, Deny, Forbid, ReleaseChannel};\n use lint::builtin;\n use util::nodemap::FnvHashMap;\n \n@@ -210,6 +211,7 @@ impl LintStore {\n                      UnusedAllocation,\n                      Stability,\n                      MissingCopyImplementations,\n+                     UnstableFeatures,\n         );\n \n         add_builtin_with_new!(sess,\n@@ -298,6 +300,29 @@ impl LintStore {\n             }\n         }\n     }\n+\n+    fn maybe_stage_features(&mut self, sess: &Session) {\n+        let lvl = match sess.opts.unstable_features {\n+            UnstableFeatures::Default => return,\n+            UnstableFeatures::Disallow => Warn,\n+            UnstableFeatures::Cheat => Allow\n+        };\n+        match self.by_name.get(\"unstable_features\") {\n+            Some(&Id(lint_id)) => self.set_level(lint_id, (lvl, ReleaseChannel)),\n+            Some(&Renamed(_, lint_id)) => self.set_level(lint_id, (lvl, ReleaseChannel)),\n+            None => unreachable!()\n+        }\n+        match self.by_name.get(\"staged_unstable\") {\n+            Some(&Id(lint_id)) => self.set_level(lint_id, (lvl, ReleaseChannel)),\n+            Some(&Renamed(_, lint_id)) => self.set_level(lint_id, (lvl, ReleaseChannel)),\n+            None => unreachable!()\n+        }\n+        match self.by_name.get(\"staged_experimental\") {\n+            Some(&Id(lint_id)) => self.set_level(lint_id, (lvl, ReleaseChannel)),\n+            Some(&Renamed(_, lint_id)) => self.set_level(lint_id, (lvl, ReleaseChannel)),\n+            None => unreachable!()\n+        }\n+    }\n }\n \n /// Context for lint checking.\n@@ -380,6 +405,7 @@ pub fn raw_emit_lint(sess: &Session, lint: &'static Lint,\n     if level == Allow { return }\n \n     let name = lint.name_lower();\n+    let mut def = None;\n     let mut note = None;\n     let msg = match source {\n         Default => {\n@@ -394,7 +420,13 @@ pub fn raw_emit_lint(sess: &Session, lint: &'static Lint,\n                     }, name.replace(\"_\", \"-\"))\n         },\n         Node(src) => {\n-            note = Some(src);\n+            def = Some(src);\n+            msg.to_string()\n+        }\n+        ReleaseChannel => {\n+            let release_channel = option_env!(\"CFG_RELEASE_CHANNEL\").unwrap_or(\"(unknown)\");\n+            note = Some(format!(\"this feature may not be used in the {} release channel\",\n+                                release_channel));\n             msg.to_string()\n         }\n     };\n@@ -410,7 +442,11 @@ pub fn raw_emit_lint(sess: &Session, lint: &'static Lint,\n         _ => sess.bug(\"impossible level in raw_emit_lint\"),\n     }\n \n-    for span in note.into_iter() {\n+    for note in note.into_iter() {\n+        sess.note(note.index(&FullRange));\n+    }\n+\n+    for span in def.into_iter() {\n         sess.span_note(span, \"lint level defined here\");\n     }\n }\n@@ -767,6 +803,10 @@ impl LintPass for GatherNodeLevels {\n /// Consumes the `lint_store` field of the `Session`.\n pub fn check_crate(tcx: &ty::ctxt,\n                    exported_items: &ExportedItems) {\n+\n+    // If this is a feature-staged build of rustc then flip several lints to 'forbid'\n+    tcx.sess.lint_store.borrow_mut().maybe_stage_features(&tcx.sess);\n+\n     let krate = tcx.map.krate();\n     let mut cx = Context::new(tcx, krate, exported_items);\n "}, {"sha": "31cde1cb8a10aa69e75231f77c8671abd891f0cf", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -248,6 +248,9 @@ pub enum LintSource {\n \n     /// Lint level was set by a command-line flag.\n     CommandLine,\n+\n+    /// Lint level was set by the release channel.\n+    ReleaseChannel\n }\n \n pub type LevelSource = (Level, LintSource);"}, {"sha": "39c7f80703d055a3a8b5a9bd4533fcf671c6e91a", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -27,6 +27,7 @@ use std::rc::Rc;\n use syntax::ast;\n use syntax::ast_map;\n use syntax::attr;\n+use syntax::attr::AttrMetaMethods;\n use syntax::diagnostic::expect;\n use syntax::parse::token;\n \n@@ -375,6 +376,18 @@ pub fn get_stability(cstore: &cstore::CStore,\n     decoder::get_stability(&*cdata, def.node)\n }\n \n+pub fn is_staged_api(cstore: &cstore::CStore, def: ast::DefId) -> bool {\n+    let cdata = cstore.get_crate_data(def.krate);\n+    let attrs = decoder::get_crate_attributes(cdata.data());\n+    for attr in attrs.iter() {\n+        if attr.name().get() == \"staged_api\" {\n+            match attr.node.value.node { ast::MetaWord(_) => return true, _ => (/*pass*/) }\n+        }\n+    }\n+\n+    return false;\n+}\n+\n pub fn get_repr_attrs(cstore: &cstore::CStore, def: ast::DefId)\n                       -> Vec<attr::ReprAttr> {\n     let cdata = cstore.get_crate_data(def.krate);"}, {"sha": "e712f510d9dc825c63a5c96e2f2a803c5a81e70a", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -189,3 +189,19 @@ pub fn lookup(tcx: &ty::ctxt, id: DefId) -> Option<Stability> {\n         }\n     })\n }\n+\n+pub fn is_staged_api(tcx: &ty::ctxt, id: DefId) -> bool {\n+    match ty::trait_item_of_item(tcx, id) {\n+        Some(ty::MethodTraitItemId(trait_method_id))\n+            if trait_method_id != id => {\n+                is_staged_api(tcx, trait_method_id)\n+            }\n+        _ if is_local(id) => {\n+            // Unused case\n+            unreachable!()\n+        }\n+        _ => {\n+            csearch::is_staged_api(&tcx.sess.cstore, id)\n+        }\n+    }\n+}"}, {"sha": "ff0bc69c5bf20b6b724deeaca125cb3cde398f0a", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -111,7 +111,24 @@ pub struct Options {\n     /// An optional name to use as the crate for std during std injection,\n     /// written `extern crate std = \"name\"`. Default to \"std\". Used by\n     /// out-of-tree drivers.\n-    pub alt_std_name: Option<String>\n+    pub alt_std_name: Option<String>,\n+    /// Indicates how the compiler should treat unstable features\n+    pub unstable_features: UnstableFeatures\n+}\n+\n+#[deriving(Clone, Copy)]\n+pub enum UnstableFeatures {\n+    /// Hard errors for unstable features are active, as on\n+    /// beta/stable channels.\n+    Disallow,\n+    /// Use the default lint levels\n+    Default,\n+    /// Errors are bypassed for bootstrapping. This is required any time\n+    /// during the build that feature-related lints are set to warn or above\n+    /// because the build turns on warnings-as-errors and uses lots of unstable\n+    /// features. As a result, this this is always required for building Rust\n+    /// itself.\n+    Cheat\n }\n \n #[derive(Clone, PartialEq, Eq)]\n@@ -217,6 +234,7 @@ pub fn basic_options() -> Options {\n         crate_name: None,\n         alt_std_name: None,\n         libs: Vec::new(),\n+        unstable_features: UnstableFeatures::Disallow\n     }\n }\n \n@@ -1149,6 +1167,7 @@ pub fn build_session_options(matches: &getopts::Matches) -> Options {\n         crate_name: crate_name,\n         alt_std_name: None,\n         libs: libs,\n+        unstable_features: UnstableFeatures::Disallow\n     }\n }\n "}, {"sha": "5d863def32e812d9c03f92a858b3d98f9a818471", "filename": "src/librustc_back/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc_back%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc_back%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -23,6 +23,7 @@\n \n #![crate_name = \"rustc_back\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "452eaaaa52dab7bb6e4b58f46403a25b5b51e347", "filename": "src/librustc_borrowck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc_borrowck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc_borrowck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -10,6 +10,7 @@\n \n #![crate_name = \"rustc_borrowck\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "1c2d956e2797f08ecb86c5feecf04403ce605c07", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -16,6 +16,7 @@\n \n #![crate_name = \"rustc_driver\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n@@ -46,7 +47,7 @@ pub use syntax::diagnostic;\n \n use rustc_trans::back::link;\n use rustc::session::{config, Session, build_session};\n-use rustc::session::config::{Input, PrintRequest};\n+use rustc::session::config::{Input, PrintRequest, UnstableFeatures};\n use rustc::lint::Lint;\n use rustc::lint;\n use rustc::metadata;\n@@ -132,7 +133,11 @@ fn run_compiler(args: &[String]) {\n         _ => early_error(\"multiple input filenames provided\")\n     };\n \n+    let mut sopts = sopts;\n+    sopts.unstable_features = get_unstable_features_setting();\n+\n     let mut sess = build_session(sopts, input_file_path, descriptions);\n+\n     let cfg = config::build_configuration(&sess);\n     if print_crate_info(&sess, Some(&input), &odir, &ofile) {\n         return\n@@ -181,6 +186,21 @@ fn run_compiler(args: &[String]) {\n     driver::compile_input(sess, cfg, &input, &odir, &ofile, None);\n }\n \n+pub fn get_unstable_features_setting() -> UnstableFeatures {\n+    // Whether this is a feature-staged build, i.e. on the beta or stable channel\n+    let disable_unstable_features = option_env!(\"CFG_DISABLE_UNSTABLE_FEATURES\").is_some();\n+    // The secret key needed to get through the rustc build itself by\n+    // subverting the unstable features lints\n+    let bootstrap_secret_key = option_env!(\"CFG_BOOTSTRAP_KEY\");\n+    // The matching key to the above, only known by the build system\n+    let bootstrap_provided_key = os::getenv(\"RUSTC_BOOTSTRAP_KEY\");\n+    match (disable_unstable_features, bootstrap_secret_key, bootstrap_provided_key) {\n+        (_, Some(ref s), Some(ref p)) if s == p => UnstableFeatures::Cheat,\n+        (true, _, _) => UnstableFeatures::Disallow,\n+        (false, _, _) => UnstableFeatures::Default\n+    }\n+}\n+\n /// Returns a version string such as \"0.12.0-dev\".\n pub fn release_str() -> Option<&'static str> {\n     option_env!(\"CFG_RELEASE\")"}, {"sha": "961d3a6cfa1ee8891aa93bc6288baf43c1dd0dc4", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -15,6 +15,7 @@\n \n #![crate_name = \"rustc_llvm\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "845db8aa5df9619eb0ea5848f59e476798670854", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -10,6 +10,7 @@\n \n #![crate_name = \"rustc_resolve\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "3497ff2221c19c42c289f21ef09146f3cef515e7", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -16,6 +16,7 @@\n \n #![crate_name = \"rustc_trans\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "85221c2e91315f58388f33470d8402fb651b7741", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -65,6 +65,7 @@ This API is completely unstable and subject to change.\n \n #![crate_name = \"rustc_typeck\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "4885bd373eb1dfd74e57fa43062be708ec013d0f", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -11,6 +11,7 @@ pub use self::MaybeTyped::*;\n \n use rustc_driver::driver;\n use rustc::session::{self, config};\n+use rustc::session::config::UnstableFeatures;\n use rustc::session::search_paths::SearchPaths;\n use rustc::middle::{privacy, ty};\n use rustc::lint;\n@@ -95,10 +96,11 @@ pub fn run_core(search_paths: SearchPaths, cfgs: Vec<String>, externs: Externs,\n         externs: externs,\n         target_triple: triple.unwrap_or(config::host_triple().to_string()),\n         cfg: config::parse_cfgspecs(cfgs),\n+        // Ensure that rustdoc works even if rustc is feature-staged\n+        unstable_features: UnstableFeatures::Default,\n         ..config::basic_options().clone()\n     };\n \n-\n     let codemap = codemap::CodeMap::new();\n     let diagnostic_handler = diagnostic::default_handler(diagnostic::Auto, None);\n     let span_diagnostic_handler ="}, {"sha": "daa930fddcb8cde1df22da4898984cba562f020f", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -10,6 +10,7 @@\n \n #![crate_name = \"rustdoc\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "8e0f4b2d4436486954a80901f54c89a9d46e0f26", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -22,6 +22,7 @@ use std::collections::{HashSet, HashMap};\n use testing;\n use rustc::session::{self, config};\n use rustc::session::search_paths::{SearchPaths, PathKind};\n+use rustc_driver::get_unstable_features_setting;\n use rustc_driver::driver;\n use syntax::ast;\n use syntax::codemap::{CodeMap, dummy_spanned};\n@@ -52,6 +53,7 @@ pub fn run(input: &str,\n         search_paths: libs.clone(),\n         crate_types: vec!(config::CrateTypeDylib),\n         externs: externs.clone(),\n+        unstable_features: get_unstable_features_setting(),\n         ..config::basic_options().clone()\n     };\n \n@@ -128,6 +130,7 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n             .. config::basic_codegen_options()\n         },\n         test: as_test_harness,\n+        unstable_features: get_unstable_features_setting(),\n         ..config::basic_options().clone()\n     };\n "}, {"sha": "c45cb515f66283d7a17886521a5748d18019f054", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -16,6 +16,7 @@ Core encoding and decoding interfaces.\n \n #![crate_name = \"serialize\"]\n #![unstable = \"deprecated in favor of rustc-serialize on crates.io\"]\n+#![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "3d782968a40afc45fc8d4ab629b2802a7afb56a2", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -96,6 +96,7 @@\n \n #![crate_name = \"std\"]\n #![stable]\n+#![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "e4460ca865b84df3150387bc306b36ecd8146030", "filename": "src/libsyntax/codemap.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fcodemap.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -590,7 +590,12 @@ impl CodeMap {\n                 Some(ref info) => {\n                     // save the parent expn_id for next loop iteration\n                     expnid = info.call_site.expn_id;\n-                    if info.callee.span.is_none() {\n+                    if info.callee.name == \"format_args\" {\n+                        // This is a hack because the format_args builtin calls unstable APIs.\n+                        // I spent like 6 hours trying to solve this more generally but am stupid.\n+                        is_internal = true;\n+                        false\n+                    } else if info.callee.span.is_none() {\n                         // it's a compiler built-in, we *really* don't want to mess with it\n                         // so we skip it, unless it was called by a regular macro, in which case\n                         // we will handle the caller macro next turn"}, {"sha": "7c8ccf3a1a122ab751544963230765d2509bb39c", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -16,6 +16,7 @@\n \n #![crate_name = \"syntax\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"dylib\"]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "8e1a58602596b93253b2a7066afc4117b04b028f", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -48,7 +48,7 @@ fn no_prelude(attrs: &[ast::Attribute]) -> bool {\n }\n \n struct StandardLibraryInjector<'a> {\n-    alt_std_name: Option<String>,\n+    alt_std_name: Option<String>\n }\n \n impl<'a> fold::Folder for StandardLibraryInjector<'a> {\n@@ -84,14 +84,13 @@ impl<'a> fold::Folder for StandardLibraryInjector<'a> {\n \n fn inject_crates_ref(krate: ast::Crate, alt_std_name: Option<String>) -> ast::Crate {\n     let mut fold = StandardLibraryInjector {\n-        alt_std_name: alt_std_name,\n+        alt_std_name: alt_std_name\n     };\n     fold.fold_crate(krate)\n }\n \n struct PreludeInjector<'a>;\n \n-\n impl<'a> fold::Folder for PreludeInjector<'a> {\n     fn fold_crate(&mut self, mut krate: ast::Crate) -> ast::Crate {\n         // Add #![no_std] here, so we don't re-inject when compiling pretty-printed source.\n@@ -104,20 +103,10 @@ impl<'a> fold::Folder for PreludeInjector<'a> {\n         attr::mark_used(&no_std_attr);\n         krate.attrs.push(no_std_attr);\n \n+        // only add `use std::prelude::*;` if there wasn't a\n+        // `#![no_implicit_prelude]` at the crate level.\n+        // fold_mod() will insert glob path.\n         if !no_prelude(krate.attrs.index(&FullRange)) {\n-            // only add `use std::prelude::*;` if there wasn't a\n-            // `#![no_implicit_prelude]` at the crate level.\n-            // fold_mod() will insert glob path.\n-            let globs_attr = attr::mk_attr_inner(attr::mk_attr_id(),\n-                                                 attr::mk_list_item(\n-                InternedString::new(\"feature\"),\n-                vec!(\n-                    attr::mk_word_item(InternedString::new(\"globs\")),\n-                )));\n-            // std_inject runs after feature checking so manually mark this attr\n-            attr::mark_used(&globs_attr);\n-            krate.attrs.push(globs_attr);\n-\n             krate.module = self.fold_mod(krate.module);\n         }\n         krate"}, {"sha": "44ae00d997c5f70ae36e3e8544bd59a0308d7640", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -40,6 +40,7 @@\n \n #![crate_name = \"term\"]\n #![experimental = \"use the crates.io `term` library instead\"]\n+#![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "d21a73de6df5f26106bee23ac57dd4dc619642ad", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -25,6 +25,7 @@\n \n #![crate_name = \"test\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"rlib\"]\n #![crate_type = \"dylib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\","}, {"sha": "33b5bc4b5a432e7413e0bf106a0508a1cd850cbc", "filename": "src/libunicode/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibunicode%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Flibunicode%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunicode%2Flib.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -22,6 +22,7 @@\n \n #![crate_name = \"unicode\"]\n #![experimental]\n+#![staged_api]\n #![crate_type = \"rlib\"]\n #![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n        html_favicon_url = \"http://www.rust-lang.org/favicon.ico\","}, {"sha": "b903b29658bbb6c2e243cc298415bbd27e0839b5", "filename": "src/test/compile-fail/feature-gate-feature-gate.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Ftest%2Fcompile-fail%2Ffeature-gate-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Ftest%2Fcompile-fail%2Ffeature-gate-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-feature-gate.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![forbid(unstable_features)]\n+#![feature(intrinsics)] //~ ERROR unstable feature\n+\n+fn main() { }"}, {"sha": "1e15e67876ed44f140e63b877fae4e5158baba79", "filename": "src/test/compile-fail/feature-gated-feature-in-macro-arg.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Ftest%2Fcompile-fail%2Ffeature-gated-feature-in-macro-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Ftest%2Fcompile-fail%2Ffeature-gated-feature-in-macro-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gated-feature-in-macro-arg.rs?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -8,6 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// FIXME #20661: format_args! emits calls to the unstable std::fmt::rt\n+// module, so the compiler has some hacks to make that possible\n+// (in span_is_internal). Unnfortunately those hacks defeat this\n+// particular scenario of checking feature gates in arguments to\n+// println!().\n+\n+// ignore-test\n+\n // tests that input to a macro is checked for use of gated features. If this\n // test succeeds due to the acceptance of a feature, pick a new feature to\n // test. Not ideal, but oh well :("}, {"sha": "dac6e628d10d5421c10823aaba51cd715335de2e", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=c27133e2ceba52a6f3ff1b9c4bedb901d1bfe251", "patch": "@@ -1,5 +1,4 @@\n #![no_std]\n-#![feature(globs)]\n #[macro_use]\n extern crate \"std\" as std;\n #[prelude_import]"}]}