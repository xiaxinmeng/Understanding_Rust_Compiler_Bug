{"sha": "8b2e80b47b8cf3cb8f056d7dfc9ff74914168144", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiMmU4MGI0N2I4Y2YzY2I4ZjA1NmQ3ZGZjOWZmNzQ5MTQxNjgxNDQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2016-10-30T18:35:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-10-30T18:35:32Z"}, "message": "Merge pull request #1299 from Manishearth/clippy-toml\n\nSearch for `clippy.toml` recursively", "tree": {"sha": "d7cf6548eff39ec8814e479b00d1ed9ce6aa1e57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7cf6548eff39ec8814e479b00d1ed9ce6aa1e57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b2e80b47b8cf3cb8f056d7dfc9ff74914168144", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b2e80b47b8cf3cb8f056d7dfc9ff74914168144", "html_url": "https://github.com/rust-lang/rust/commit/8b2e80b47b8cf3cb8f056d7dfc9ff74914168144", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b2e80b47b8cf3cb8f056d7dfc9ff74914168144/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20b7559558c7140b0c4d6deed50023cdbbb77de7", "url": "https://api.github.com/repos/rust-lang/rust/commits/20b7559558c7140b0c4d6deed50023cdbbb77de7", "html_url": "https://github.com/rust-lang/rust/commit/20b7559558c7140b0c4d6deed50023cdbbb77de7"}, {"sha": "d52af53e04379adbdef6cdaef5d43e64c45d6a2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d52af53e04379adbdef6cdaef5d43e64c45d6a2a", "html_url": "https://github.com/rust-lang/rust/commit/d52af53e04379adbdef6cdaef5d43e64c45d6a2a"}], "stats": {"total": 70, "additions": 55, "deletions": 15}, "files": [{"sha": "79256b0a7a4cf9d7b1caf2fab4f4d9d0ec45c95f", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8b2e80b47b8cf3cb8f056d7dfc9ff74914168144/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2e80b47b8cf3cb8f056d7dfc9ff74914168144/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=8b2e80b47b8cf3cb8f056d7dfc9ff74914168144", "patch": "@@ -137,17 +137,23 @@ mod reexport {\n \n #[cfg_attr(rustfmt, rustfmt_skip)]\n pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n-    let conf = match utils::conf::file(reg.args()) {\n+    let conf = match utils::conf::file_from_args(reg.args()) {\n         Ok(file_name) => {\n             // if the user specified a file, it must exist, otherwise default to `clippy.toml` but\n             // do not require the file to exist\n-            let (file_name, must_exist) = if let Some(ref file_name) = file_name {\n-                (&**file_name, true)\n+            let file_name = if let Some(file_name) = file_name {\n+                Some(file_name)\n             } else {\n-                (\"clippy.toml\", false)\n+                match utils::conf::lookup_conf_file() {\n+                    Ok(path) => path,\n+                    Err(error) => {\n+                        reg.sess.struct_err(&format!(\"error reading Clippy's configuration file: {}\", error)).emit();\n+                        None\n+                    }\n+                }\n             };\n \n-            let (conf, errors) = utils::conf::read(file_name, must_exist);\n+            let (conf, errors) = utils::conf::read(file_name.as_ref().map(|p| p.as_ref()));\n \n             // all conf errors are non-fatal, we just use the default conf in case of error\n             for error in errors {"}, {"sha": "0dccaec8ed8c1b6ce09814dcf03bef4aebe0604a", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/8b2e80b47b8cf3cb8f056d7dfc9ff74914168144/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b2e80b47b8cf3cb8f056d7dfc9ff74914168144/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=8b2e80b47b8cf3cb8f056d7dfc9ff74914168144", "patch": "@@ -2,14 +2,13 @@\n \n #![deny(missing_docs_in_private_items)]\n \n-use std::{fmt, fs, io};\n+use std::{env, fmt, fs, io, path};\n use std::io::Read;\n use syntax::{ast, codemap};\n-use syntax::parse::token;\n use toml;\n \n /// Get the configuration file from arguments.\n-pub fn file(args: &[codemap::Spanned<ast::NestedMetaItemKind>]) -> Result<Option<token::InternedString>, (&'static str, codemap::Span)> {\n+pub fn file_from_args(args: &[codemap::Spanned<ast::NestedMetaItemKind>]) -> Result<Option<path::PathBuf>, (&'static str, codemap::Span)> {\n     for arg in args.iter().filter_map(|a| a.meta_item()) {\n         match arg.node {\n             ast::MetaItemKind::Word(ref name) |\n@@ -21,7 +20,7 @@ pub fn file(args: &[codemap::Spanned<ast::NestedMetaItemKind>]) -> Result<Option\n             ast::MetaItemKind::NameValue(ref name, ref value) => {\n                 if name == &\"conf_file\" {\n                     return if let ast::LitKind::Str(ref file, _) = value.node {\n-                        Ok(Some(file.clone()))\n+                        Ok(Some(file.to_string().into()))\n                     } else {\n                         Err((\"`conf_file` value must be a string\", value.span))\n                     };\n@@ -179,13 +178,51 @@ define_Conf! {\n     (\"enum-variant-name-threshold\", enum_variant_name_threshold, 3 => u64),\n }\n \n-/// Read the `toml` configuration file. The function will ignore \u201cFile not found\u201d errors iif\n-/// `!must_exist`, in which case, it will return the default configuration.\n+/// Search for the configuration file.\n+pub fn lookup_conf_file() -> io::Result<Option<path::PathBuf>> {\n+    /// Possible filename to search for.\n+    const CONFIG_FILE_NAMES: [&'static str; 2] = [\".clippy.toml\", \"clippy.toml\"];\n+\n+    let mut current = try!(env::current_dir());\n+\n+    loop {\n+        for config_file_name in &CONFIG_FILE_NAMES {\n+            let config_file = current.join(config_file_name);\n+            match fs::metadata(&config_file) {\n+                // Only return if it's a file to handle the unlikely situation of a directory named\n+                // `clippy.toml`.\n+                Ok(ref md) if md.is_file() => return Ok(Some(config_file)),\n+                // Return the error if it's something other than `NotFound`; otherwise we didn't\n+                // find the project file yet, and continue searching.\n+                Err(e) => {\n+                    if e.kind() != io::ErrorKind::NotFound {\n+                        return Err(e);\n+                    }\n+                }\n+                _ => (),\n+            }\n+        }\n+\n+        // If the current directory has no parent, we're done searching.\n+        if !current.pop() {\n+            return Ok(None);\n+        }\n+    }\n+}\n+\n+/// Read the `toml` configuration file.\n+///\n /// In case of error, the function tries to continue as much as possible.\n-pub fn read(path: &str, must_exist: bool) -> (Conf, Vec<Error>) {\n+pub fn read(path: Option<&path::Path>) -> (Conf, Vec<Error>) {\n     let mut conf = Conf::default();\n     let mut errors = Vec::new();\n \n+    let path = if let Some(path) = path {\n+        path\n+    } else {\n+        return (conf, errors);\n+    };\n+\n     let file = match fs::File::open(path) {\n         Ok(mut file) => {\n             let mut buf = String::new();\n@@ -197,9 +234,6 @@ pub fn read(path: &str, must_exist: bool) -> (Conf, Vec<Error>) {\n \n             buf\n         }\n-        Err(ref err) if !must_exist && err.kind() == io::ErrorKind::NotFound => {\n-            return (conf, errors);\n-        }\n         Err(err) => {\n             errors.push(err.into());\n             return (conf, errors);"}]}