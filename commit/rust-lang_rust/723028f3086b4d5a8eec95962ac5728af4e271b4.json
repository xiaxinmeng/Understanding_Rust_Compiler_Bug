{"sha": "723028f3086b4d5a8eec95962ac5728af4e271b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyMzAyOGYzMDg2YjRkNWE4ZWVjOTU5NjJhYzU3MjhhZjRlMjcxYjQ=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-16T14:26:00Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2017-11-16T14:26:00Z"}, "message": "incr.comp.: Remove some code duplication around TyDecoder by factoring things into a macro.", "tree": {"sha": "a3ea506e312e9e82b534ab2785fbe1f42fbb16e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3ea506e312e9e82b534ab2785fbe1f42fbb16e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/723028f3086b4d5a8eec95962ac5728af4e271b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/723028f3086b4d5a8eec95962ac5728af4e271b4", "html_url": "https://github.com/rust-lang/rust/commit/723028f3086b4d5a8eec95962ac5728af4e271b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/723028f3086b4d5a8eec95962ac5728af4e271b4/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f44ef282e7495c17c3771732e37621e7377d33e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f44ef282e7495c17c3771732e37621e7377d33e", "html_url": "https://github.com/rust-lang/rust/commit/2f44ef282e7495c17c3771732e37621e7377d33e"}], "stats": {"total": 364, "additions": 142, "deletions": 222}, "files": [{"sha": "4739ea34e6fc18d4f83a1b647fb0acd751c20c1b", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/723028f3086b4d5a8eec95962ac5728af4e271b4/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723028f3086b4d5a8eec95962ac5728af4e271b4/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=723028f3086b4d5a8eec95962ac5728af4e271b4", "patch": "@@ -138,6 +138,7 @@ pub trait TyDecoder<'a, 'tcx: 'a>: Decoder {\n     }\n }\n \n+#[inline]\n pub fn decode_cnum<'a, 'tcx, D>(decoder: &mut D) -> Result<CrateNum, D::Error>\n     where D: TyDecoder<'a, 'tcx>,\n           'tcx: 'a,\n@@ -146,6 +147,7 @@ pub fn decode_cnum<'a, 'tcx, D>(decoder: &mut D) -> Result<CrateNum, D::Error>\n     Ok(decoder.map_encoded_cnum_to_current(cnum))\n }\n \n+#[inline]\n pub fn decode_ty<'a, 'tcx, D>(decoder: &mut D) -> Result<Ty<'tcx>, D::Error>\n     where D: TyDecoder<'a, 'tcx>,\n           'tcx: 'a,\n@@ -165,6 +167,7 @@ pub fn decode_ty<'a, 'tcx, D>(decoder: &mut D) -> Result<Ty<'tcx>, D::Error>\n     }\n }\n \n+#[inline]\n pub fn decode_predicates<'a, 'tcx, D>(decoder: &mut D)\n                                       -> Result<ty::GenericPredicates<'tcx>, D::Error>\n     where D: TyDecoder<'a, 'tcx>,\n@@ -188,6 +191,7 @@ pub fn decode_predicates<'a, 'tcx, D>(decoder: &mut D)\n     })\n }\n \n+#[inline]\n pub fn decode_substs<'a, 'tcx, D>(decoder: &mut D) -> Result<&'tcx Substs<'tcx>, D::Error>\n     where D: TyDecoder<'a, 'tcx>,\n           'tcx: 'a,\n@@ -197,13 +201,15 @@ pub fn decode_substs<'a, 'tcx, D>(decoder: &mut D) -> Result<&'tcx Substs<'tcx>,\n     Ok(tcx.mk_substs((0..len).map(|_| Decodable::decode(decoder)))?)\n }\n \n+#[inline]\n pub fn decode_region<'a, 'tcx, D>(decoder: &mut D) -> Result<ty::Region<'tcx>, D::Error>\n     where D: TyDecoder<'a, 'tcx>,\n           'tcx: 'a,\n {\n     Ok(decoder.tcx().mk_region(Decodable::decode(decoder)?))\n }\n \n+#[inline]\n pub fn decode_ty_slice<'a, 'tcx, D>(decoder: &mut D)\n                                     -> Result<&'tcx ty::Slice<Ty<'tcx>>, D::Error>\n     where D: TyDecoder<'a, 'tcx>,\n@@ -213,6 +219,7 @@ pub fn decode_ty_slice<'a, 'tcx, D>(decoder: &mut D)\n     Ok(decoder.tcx().mk_type_list((0..len).map(|_| Decodable::decode(decoder)))?)\n }\n \n+#[inline]\n pub fn decode_adt_def<'a, 'tcx, D>(decoder: &mut D)\n                                    -> Result<&'tcx ty::AdtDef, D::Error>\n     where D: TyDecoder<'a, 'tcx>,\n@@ -222,6 +229,7 @@ pub fn decode_adt_def<'a, 'tcx, D>(decoder: &mut D)\n     Ok(decoder.tcx().adt_def(def_id))\n }\n \n+#[inline]\n pub fn decode_existential_predicate_slice<'a, 'tcx, D>(decoder: &mut D)\n     -> Result<&'tcx ty::Slice<ty::ExistentialPredicate<'tcx>>, D::Error>\n     where D: TyDecoder<'a, 'tcx>,\n@@ -232,6 +240,7 @@ pub fn decode_existential_predicate_slice<'a, 'tcx, D>(decoder: &mut D)\n               .mk_existential_predicates((0..len).map(|_| Decodable::decode(decoder)))?)\n }\n \n+#[inline]\n pub fn decode_byte_array<'a, 'tcx, D>(decoder: &mut D)\n                                       -> Result<ByteArray<'tcx>, D::Error>\n     where D: TyDecoder<'a, 'tcx>,\n@@ -242,10 +251,138 @@ pub fn decode_byte_array<'a, 'tcx, D>(decoder: &mut D)\n     })\n }\n \n+#[inline]\n pub fn decode_const<'a, 'tcx, D>(decoder: &mut D)\n                                  -> Result<&'tcx ty::Const<'tcx>, D::Error>\n     where D: TyDecoder<'a, 'tcx>,\n           'tcx: 'a,\n {\n     Ok(decoder.tcx().mk_const(Decodable::decode(decoder)?))\n }\n+\n+#[macro_export]\n+macro_rules! __impl_decoder_methods {\n+    ($($name:ident -> $ty:ty;)*) => {\n+        $(fn $name(&mut self) -> Result<$ty, Self::Error> {\n+            self.opaque.$name()\n+        })*\n+    }\n+}\n+\n+#[macro_export]\n+macro_rules! implement_ty_decoder {\n+    ($DecoderName:ident <$($typaram:tt),*>) => {\n+        mod __ty_decoder_impl {\n+            use super::$DecoderName;\n+            use $crate::ty;\n+            use $crate::ty::codec::*;\n+            use $crate::ty::subst::Substs;\n+            use $crate::hir::def_id::{CrateNum};\n+            use $crate::middle::const_val::ByteArray;\n+            use rustc_serialize::{Decoder, SpecializedDecoder};\n+            use std::borrow::Cow;\n+\n+            impl<$($typaram ),*> Decoder for $DecoderName<$($typaram),*> {\n+                type Error = String;\n+\n+                __impl_decoder_methods! {\n+                    read_nil -> ();\n+\n+                    read_u128 -> u128;\n+                    read_u64 -> u64;\n+                    read_u32 -> u32;\n+                    read_u16 -> u16;\n+                    read_u8 -> u8;\n+                    read_usize -> usize;\n+\n+                    read_i128 -> i128;\n+                    read_i64 -> i64;\n+                    read_i32 -> i32;\n+                    read_i16 -> i16;\n+                    read_i8 -> i8;\n+                    read_isize -> isize;\n+\n+                    read_bool -> bool;\n+                    read_f64 -> f64;\n+                    read_f32 -> f32;\n+                    read_char -> char;\n+                    read_str -> Cow<str>;\n+                }\n+\n+                fn error(&mut self, err: &str) -> Self::Error {\n+                    self.opaque.error(err)\n+                }\n+            }\n+\n+            // FIXME(#36588) These impls are horribly unsound as they allow\n+            // the caller to pick any lifetime for 'tcx, including 'static,\n+            // by using the unspecialized proxies to them.\n+\n+            impl<$($typaram),*> SpecializedDecoder<CrateNum> for $DecoderName<$($typaram),*> {\n+                fn specialized_decode(&mut self) -> Result<CrateNum, Self::Error> {\n+                    decode_cnum(self)\n+                }\n+            }\n+\n+            impl<$($typaram),*> SpecializedDecoder<ty::Ty<'tcx>> for $DecoderName<$($typaram),*> {\n+                fn specialized_decode(&mut self) -> Result<ty::Ty<'tcx>, Self::Error> {\n+                    decode_ty(self)\n+                }\n+            }\n+\n+            impl<$($typaram),*> SpecializedDecoder<ty::GenericPredicates<'tcx>>\n+            for $DecoderName<$($typaram),*> {\n+                fn specialized_decode(&mut self) -> Result<ty::GenericPredicates<'tcx>, Self::Error> {\n+                    decode_predicates(self)\n+                }\n+            }\n+\n+            impl<$($typaram),*> SpecializedDecoder<&'tcx Substs<'tcx>> for $DecoderName<$($typaram),*> {\n+                fn specialized_decode(&mut self) -> Result<&'tcx Substs<'tcx>, Self::Error> {\n+                    decode_substs(self)\n+                }\n+            }\n+\n+            impl<$($typaram),*> SpecializedDecoder<ty::Region<'tcx>> for $DecoderName<$($typaram),*> {\n+                fn specialized_decode(&mut self) -> Result<ty::Region<'tcx>, Self::Error> {\n+                    decode_region(self)\n+                }\n+            }\n+\n+            impl<$($typaram),*> SpecializedDecoder<&'tcx ty::Slice<ty::Ty<'tcx>>>\n+            for $DecoderName<$($typaram),*> {\n+                fn specialized_decode(&mut self) -> Result<&'tcx ty::Slice<ty::Ty<'tcx>>, Self::Error> {\n+                    decode_ty_slice(self)\n+                }\n+            }\n+\n+            impl<$($typaram),*> SpecializedDecoder<&'tcx ty::AdtDef> for $DecoderName<$($typaram),*> {\n+                fn specialized_decode(&mut self) -> Result<&'tcx ty::AdtDef, Self::Error> {\n+                    decode_adt_def(self)\n+                }\n+            }\n+\n+            impl<$($typaram),*> SpecializedDecoder<&'tcx ty::Slice<ty::ExistentialPredicate<'tcx>>>\n+                for $DecoderName<$($typaram),*> {\n+                fn specialized_decode(&mut self)\n+                    -> Result<&'tcx ty::Slice<ty::ExistentialPredicate<'tcx>>, Self::Error> {\n+                    decode_existential_predicate_slice(self)\n+                }\n+            }\n+\n+            impl<$($typaram),*> SpecializedDecoder<ByteArray<'tcx>> for $DecoderName<$($typaram),*> {\n+                fn specialized_decode(&mut self) -> Result<ByteArray<'tcx>, Self::Error> {\n+                    decode_byte_array(self)\n+                }\n+            }\n+\n+            impl<$($typaram),*> SpecializedDecoder<&'tcx $crate::ty::Const<'tcx>>\n+            for $DecoderName<$($typaram),*> {\n+                fn specialized_decode(&mut self) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {\n+                    decode_const(self)\n+                }\n+            }\n+        }\n+    }\n+}\n+"}, {"sha": "8c234e632e9fb4b92081ed0a2a0119473105b593", "filename": "src/librustc/ty/maps/on_disk_cache.rs", "status": "modified", "additions": 2, "deletions": 109, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/723028f3086b4d5a8eec95962ac5728af4e271b4/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723028f3086b4d5a8eec95962ac5728af4e271b4/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fon_disk_cache.rs?ref=723028f3086b4d5a8eec95962ac5728af4e271b4", "patch": "@@ -14,15 +14,13 @@ use hir;\n use hir::def_id::{CrateNum, DefIndex, DefId, LocalDefId,\n                   RESERVED_FOR_INCR_COMP_CACHE, LOCAL_CRATE};\n use hir::map::definitions::DefPathHash;\n-use middle::const_val::ByteArray;\n use middle::cstore::CrateStore;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder, opaque,\n                       SpecializedDecoder, SpecializedEncoder,\n                       UseSpecializedDecodable, UseSpecializedEncodable};\n use session::{CrateDisambiguator, Session};\n-use std::borrow::Cow;\n use std::cell::RefCell;\n use std::collections::BTreeMap;\n use std::mem;\n@@ -32,7 +30,6 @@ use syntax_pos::{BytePos, Span, NO_EXPANSION, DUMMY_SP};\n use ty;\n use ty::codec::{self as ty_codec, TyDecoder, TyEncoder};\n use ty::context::TyCtxt;\n-use ty::subst::Substs;\n \n // Some magic values used for verifying that encoding and decoding. These are\n // basically random numbers.\n@@ -359,46 +356,6 @@ impl<'a, 'tcx, 'x> CacheDecoder<'a, 'tcx, 'x> {\n     }\n }\n \n-macro_rules! decoder_methods {\n-    ($($name:ident -> $ty:ty;)*) => {\n-        $(fn $name(&mut self) -> Result<$ty, Self::Error> {\n-            self.opaque.$name()\n-        })*\n-    }\n-}\n-\n-impl<'a, 'tcx, 'x> Decoder for CacheDecoder<'a, 'tcx, 'x> {\n-    type Error = String;\n-\n-    decoder_methods! {\n-        read_nil -> ();\n-\n-        read_u128 -> u128;\n-        read_u64 -> u64;\n-        read_u32 -> u32;\n-        read_u16 -> u16;\n-        read_u8 -> u8;\n-        read_usize -> usize;\n-\n-        read_i128 -> i128;\n-        read_i64 -> i64;\n-        read_i32 -> i32;\n-        read_i16 -> i16;\n-        read_i8 -> i8;\n-        read_isize -> isize;\n-\n-        read_bool -> bool;\n-        read_f64 -> f64;\n-        read_f32 -> f32;\n-        read_char -> char;\n-        read_str -> Cow<str>;\n-    }\n-\n-    fn error(&mut self, err: &str) -> Self::Error {\n-        self.opaque.error(err)\n-    }\n-}\n-\n // Decode something that was encoded with encode_tagged() and verify that the\n // tag matches and the correct amount of bytes was read.\n fn decode_tagged<'a, 'tcx, D, T, V>(decoder: &mut D,\n@@ -481,6 +438,8 @@ impl<'a, 'tcx: 'a, 'x> ty_codec::TyDecoder<'a, 'tcx> for CacheDecoder<'a, 'tcx,\n     }\n }\n \n+implement_ty_decoder!( CacheDecoder<'a, 'tcx, 'x> );\n+\n impl<'a, 'tcx, 'x> SpecializedDecoder<Span> for CacheDecoder<'a, 'tcx, 'x> {\n     fn specialized_decode(&mut self) -> Result<Span, Self::Error> {\n         let lo = BytePos::decode(self)?;\n@@ -498,12 +457,6 @@ impl<'a, 'tcx, 'x> SpecializedDecoder<Span> for CacheDecoder<'a, 'tcx, 'x> {\n     }\n }\n \n-impl<'a, 'tcx, 'x> SpecializedDecoder<CrateNum> for CacheDecoder<'a, 'tcx, 'x> {\n-    fn specialized_decode(&mut self) -> Result<CrateNum, Self::Error> {\n-        ty_codec::decode_cnum(self)\n-    }\n-}\n-\n // This impl makes sure that we get a runtime error when we try decode a\n // DefIndex that is not contained in a DefId. Such a case would be problematic\n // because we would not know how to transform the DefIndex to the current\n@@ -567,66 +520,6 @@ impl<'a, 'tcx, 'x> SpecializedDecoder<NodeId> for CacheDecoder<'a, 'tcx, 'x> {\n     }\n }\n \n-impl<'a, 'tcx, 'x> SpecializedDecoder<ty::Ty<'tcx>> for CacheDecoder<'a, 'tcx, 'x> {\n-    fn specialized_decode(&mut self) -> Result<ty::Ty<'tcx>, Self::Error> {\n-        ty_codec::decode_ty(self)\n-    }\n-}\n-\n-impl<'a, 'tcx, 'x> SpecializedDecoder<ty::GenericPredicates<'tcx>>\n-for CacheDecoder<'a, 'tcx, 'x> {\n-    fn specialized_decode(&mut self) -> Result<ty::GenericPredicates<'tcx>, Self::Error> {\n-        ty_codec::decode_predicates(self)\n-    }\n-}\n-\n-impl<'a, 'tcx, 'x> SpecializedDecoder<&'tcx Substs<'tcx>> for CacheDecoder<'a, 'tcx, 'x> {\n-    fn specialized_decode(&mut self) -> Result<&'tcx Substs<'tcx>, Self::Error> {\n-        ty_codec::decode_substs(self)\n-    }\n-}\n-\n-impl<'a, 'tcx, 'x> SpecializedDecoder<ty::Region<'tcx>> for CacheDecoder<'a, 'tcx, 'x> {\n-    fn specialized_decode(&mut self) -> Result<ty::Region<'tcx>, Self::Error> {\n-        ty_codec::decode_region(self)\n-    }\n-}\n-\n-impl<'a, 'tcx, 'x> SpecializedDecoder<&'tcx ty::Slice<ty::Ty<'tcx>>>\n-for CacheDecoder<'a, 'tcx, 'x> {\n-    fn specialized_decode(&mut self) -> Result<&'tcx ty::Slice<ty::Ty<'tcx>>, Self::Error> {\n-        ty_codec::decode_ty_slice(self)\n-    }\n-}\n-\n-impl<'a, 'tcx, 'x> SpecializedDecoder<&'tcx ty::AdtDef> for CacheDecoder<'a, 'tcx, 'x> {\n-    fn specialized_decode(&mut self) -> Result<&'tcx ty::AdtDef, Self::Error> {\n-        ty_codec::decode_adt_def(self)\n-    }\n-}\n-\n-impl<'a, 'tcx, 'x> SpecializedDecoder<&'tcx ty::Slice<ty::ExistentialPredicate<'tcx>>>\n-    for CacheDecoder<'a, 'tcx, 'x> {\n-    fn specialized_decode(&mut self)\n-        -> Result<&'tcx ty::Slice<ty::ExistentialPredicate<'tcx>>, Self::Error> {\n-        ty_codec::decode_existential_predicate_slice(self)\n-    }\n-}\n-\n-impl<'a, 'tcx, 'x> SpecializedDecoder<ByteArray<'tcx>> for CacheDecoder<'a, 'tcx, 'x> {\n-    fn specialized_decode(&mut self) -> Result<ByteArray<'tcx>, Self::Error> {\n-        ty_codec::decode_byte_array(self)\n-    }\n-}\n-\n-impl<'a, 'tcx, 'x> SpecializedDecoder<&'tcx ty::Const<'tcx>>\n-for CacheDecoder<'a, 'tcx, 'x> {\n-    fn specialized_decode(&mut self) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {\n-        ty_codec::decode_const(self)\n-    }\n-}\n-\n-\n //- ENCODING -------------------------------------------------------------------\n \n struct CacheEncoder<'enc, 'a, 'tcx, E>"}, {"sha": "abf2a1b0c00a4feba9733418786b076cd17d91cc", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/723028f3086b4d5a8eec95962ac5728af4e271b4/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723028f3086b4d5a8eec95962ac5728af4e271b4/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=723028f3086b4d5a8eec95962ac5728af4e271b4", "patch": "@@ -89,6 +89,7 @@ pub use self::maps::queries;\n pub mod adjustment;\n pub mod binding;\n pub mod cast;\n+#[macro_use]\n pub mod codec;\n pub mod error;\n mod erase_regions;"}, {"sha": "ddc8b6abfacce21de81e0b6282debdd57e4c54cd", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 113, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/723028f3086b4d5a8eec95962ac5728af4e271b4/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/723028f3086b4d5a8eec95962ac5728af4e271b4/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=723028f3086b4d5a8eec95962ac5728af4e271b4", "patch": "@@ -15,8 +15,6 @@ use schema::*;\n \n use rustc::hir::map::{DefKey, DefPath, DefPathData, DefPathHash};\n use rustc::hir;\n-\n-use rustc::middle::const_val::ByteArray;\n use rustc::middle::cstore::{LinkagePreference, ExternConstBody,\n                             ExternBodyNestedBodies};\n use rustc::hir::def::{self, Def, CtorKind};\n@@ -25,19 +23,15 @@ use rustc::ich::Fingerprint;\n use rustc::middle::lang_items;\n use rustc::session::Session;\n use rustc::ty::{self, Ty, TyCtxt};\n-use rustc::ty::codec::{self as ty_codec, TyDecoder};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::codec::TyDecoder;\n use rustc::util::nodemap::DefIdSet;\n-\n use rustc::mir::Mir;\n \n-use std::borrow::Cow;\n use std::cell::Ref;\n use std::collections::BTreeMap;\n use std::io;\n use std::mem;\n use std::rc::Rc;\n-use std::str;\n use std::u32;\n \n use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n@@ -174,47 +168,6 @@ impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n     }\n }\n \n-macro_rules! decoder_methods {\n-    ($($name:ident -> $ty:ty;)*) => {\n-        $(fn $name(&mut self) -> Result<$ty, Self::Error> {\n-            self.opaque.$name()\n-        })*\n-    }\n-}\n-\n-impl<'doc, 'tcx> Decoder for DecodeContext<'doc, 'tcx> {\n-    type Error = <opaque::Decoder<'doc> as Decoder>::Error;\n-\n-    decoder_methods! {\n-        read_nil -> ();\n-\n-        read_u128 -> u128;\n-        read_u64 -> u64;\n-        read_u32 -> u32;\n-        read_u16 -> u16;\n-        read_u8 -> u8;\n-        read_usize -> usize;\n-\n-        read_i128 -> i128;\n-        read_i64 -> i64;\n-        read_i32 -> i32;\n-        read_i16 -> i16;\n-        read_i8 -> i8;\n-        read_isize -> isize;\n-\n-        read_bool -> bool;\n-        read_f64 -> f64;\n-        read_f32 -> f32;\n-        read_char -> char;\n-        read_str -> Cow<str>;\n-    }\n-\n-    fn error(&mut self, err: &str) -> Self::Error {\n-        self.opaque.error(err)\n-    }\n-}\n-\n-\n impl<'a, 'tcx: 'a> TyDecoder<'a, 'tcx> for DecodeContext<'a, 'tcx> {\n \n     #[inline]\n@@ -293,12 +246,6 @@ impl<'a, 'tcx, T> SpecializedDecoder<LazySeq<T>> for DecodeContext<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> SpecializedDecoder<CrateNum> for DecodeContext<'a, 'tcx> {\n-    fn specialized_decode(&mut self) -> Result<CrateNum, Self::Error> {\n-        ty_codec::decode_cnum(self)\n-    }\n-}\n-\n impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Span, Self::Error> {\n         let lo = BytePos::decode(self)?;\n@@ -359,65 +306,7 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n     }\n }\n \n-// FIXME(#36588) These impls are horribly unsound as they allow\n-// the caller to pick any lifetime for 'tcx, including 'static,\n-// by using the unspecialized proxies to them.\n-\n-impl<'a, 'tcx> SpecializedDecoder<Ty<'tcx>> for DecodeContext<'a, 'tcx> {\n-    fn specialized_decode(&mut self) -> Result<Ty<'tcx>, Self::Error> {\n-        ty_codec::decode_ty(self)\n-    }\n-}\n-\n-impl<'a, 'tcx> SpecializedDecoder<ty::GenericPredicates<'tcx>> for DecodeContext<'a, 'tcx> {\n-    fn specialized_decode(&mut self) -> Result<ty::GenericPredicates<'tcx>, Self::Error> {\n-        ty_codec::decode_predicates(self)\n-    }\n-}\n-\n-impl<'a, 'tcx> SpecializedDecoder<&'tcx Substs<'tcx>> for DecodeContext<'a, 'tcx> {\n-    fn specialized_decode(&mut self) -> Result<&'tcx Substs<'tcx>, Self::Error> {\n-        ty_codec::decode_substs(self)\n-    }\n-}\n-\n-impl<'a, 'tcx> SpecializedDecoder<ty::Region<'tcx>> for DecodeContext<'a, 'tcx> {\n-    fn specialized_decode(&mut self) -> Result<ty::Region<'tcx>, Self::Error> {\n-        ty_codec::decode_region(self)\n-    }\n-}\n-\n-impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::Slice<Ty<'tcx>>> for DecodeContext<'a, 'tcx> {\n-    fn specialized_decode(&mut self) -> Result<&'tcx ty::Slice<Ty<'tcx>>, Self::Error> {\n-        ty_codec::decode_ty_slice(self)\n-    }\n-}\n-\n-impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::AdtDef> for DecodeContext<'a, 'tcx> {\n-    fn specialized_decode(&mut self) -> Result<&'tcx ty::AdtDef, Self::Error> {\n-        ty_codec::decode_adt_def(self)\n-    }\n-}\n-\n-impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::Slice<ty::ExistentialPredicate<'tcx>>>\n-    for DecodeContext<'a, 'tcx> {\n-    fn specialized_decode(&mut self)\n-        -> Result<&'tcx ty::Slice<ty::ExistentialPredicate<'tcx>>, Self::Error> {\n-        ty_codec::decode_existential_predicate_slice(self)\n-    }\n-}\n-\n-impl<'a, 'tcx> SpecializedDecoder<ByteArray<'tcx>> for DecodeContext<'a, 'tcx> {\n-    fn specialized_decode(&mut self) -> Result<ByteArray<'tcx>, Self::Error> {\n-        ty_codec::decode_byte_array(self)\n-    }\n-}\n-\n-impl<'a, 'tcx> SpecializedDecoder<&'tcx ty::Const<'tcx>> for DecodeContext<'a, 'tcx> {\n-    fn specialized_decode(&mut self) -> Result<&'tcx ty::Const<'tcx>, Self::Error> {\n-        ty_codec::decode_const(self)\n-    }\n-}\n+implement_ty_decoder!( DecodeContext<'a, 'tcx> );\n \n impl<'a, 'tcx> MetadataBlob {\n     pub fn is_compatible(&self) -> bool {"}]}