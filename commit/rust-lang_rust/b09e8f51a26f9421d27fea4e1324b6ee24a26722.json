{"sha": "b09e8f51a26f9421d27fea4e1324b6ee24a26722", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwOWU4ZjUxYTI2Zjk0MjFkMjdmZWE0ZTEzMjRiNmVlMjRhMjY3MjI=", "commit": {"author": {"name": "angelsl", "email": "hidingfromhidden@gmail.com", "date": "2015-10-23T16:31:12Z"}, "committer": {"name": "angelsl", "email": "hidingfromhidden@gmail.com", "date": "2015-10-28T07:23:20Z"}, "message": "Build compiler-rt/builtins with MSVC", "tree": {"sha": "38bf1e5686cc7d7f9004e8935ece8fab6b6b5908", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38bf1e5686cc7d7f9004e8935ece8fab6b6b5908"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b09e8f51a26f9421d27fea4e1324b6ee24a26722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b09e8f51a26f9421d27fea4e1324b6ee24a26722", "html_url": "https://github.com/rust-lang/rust/commit/b09e8f51a26f9421d27fea4e1324b6ee24a26722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b09e8f51a26f9421d27fea4e1324b6ee24a26722/comments", "author": {"login": "angelsl", "id": 235432, "node_id": "MDQ6VXNlcjIzNTQzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/235432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angelsl", "html_url": "https://github.com/angelsl", "followers_url": "https://api.github.com/users/angelsl/followers", "following_url": "https://api.github.com/users/angelsl/following{/other_user}", "gists_url": "https://api.github.com/users/angelsl/gists{/gist_id}", "starred_url": "https://api.github.com/users/angelsl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angelsl/subscriptions", "organizations_url": "https://api.github.com/users/angelsl/orgs", "repos_url": "https://api.github.com/users/angelsl/repos", "events_url": "https://api.github.com/users/angelsl/events{/privacy}", "received_events_url": "https://api.github.com/users/angelsl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "angelsl", "id": 235432, "node_id": "MDQ6VXNlcjIzNTQzMg==", "avatar_url": "https://avatars.githubusercontent.com/u/235432?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angelsl", "html_url": "https://github.com/angelsl", "followers_url": "https://api.github.com/users/angelsl/followers", "following_url": "https://api.github.com/users/angelsl/following{/other_user}", "gists_url": "https://api.github.com/users/angelsl/gists{/gist_id}", "starred_url": "https://api.github.com/users/angelsl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angelsl/subscriptions", "organizations_url": "https://api.github.com/users/angelsl/orgs", "repos_url": "https://api.github.com/users/angelsl/repos", "events_url": "https://api.github.com/users/angelsl/events{/privacy}", "received_events_url": "https://api.github.com/users/angelsl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e61c6f11902c686a637207a78aa1ccaad24f9b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e61c6f11902c686a637207a78aa1ccaad24f9b6", "html_url": "https://github.com/rust-lang/rust/commit/6e61c6f11902c686a637207a78aa1ccaad24f9b6"}], "stats": {"total": 85, "additions": 51, "deletions": 34}, "files": [{"sha": "8caf6abed781bfca5dbcca56c5edc5d86b55e774", "filename": "configure", "status": "modified", "additions": 27, "deletions": 19, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/b09e8f51a26f9421d27fea4e1324b6ee24a26722/configure", "raw_url": "https://github.com/rust-lang/rust/raw/b09e8f51a26f9421d27fea4e1324b6ee24a26722/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=b09e8f51a26f9421d27fea4e1324b6ee24a26722", "patch": "@@ -1498,25 +1498,9 @@ do\n         done\n     fi\n \n-    if [ ${do_reconfigure} -ne 0 ] && [ ${is_msvc} -ne 0 ]\n+    # We need the generator later on for compiler-rt even if LLVM's not built\n+    if [ ${is_msvc} -ne 0 ]\n     then\n-        msg \"configuring LLVM for $t with cmake\"\n-\n-        CMAKE_ARGS=\"-DLLVM_INCLUDE_TESTS=OFF\"\n-        if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug\"\n-        else\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release\"\n-        fi\n-        if [ -z \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]\n-        then\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=OFF\"\n-        else\n-            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=ON\"\n-        fi\n-\n-        msg \"configuring LLVM with:\"\n-        msg \"$CMAKE_ARGS\"\n         case \"$CFG_MSVC_ROOT\" in\n             *14.0*)\n                 generator=\"Visual Studio 14 2015\"\n@@ -1538,8 +1522,32 @@ do\n                 err \"can only build LLVM for x86 platforms\"\n                 ;;\n         esac\n+        CFG_CMAKE_GENERATOR=$generator\n+        putvar CFG_CMAKE_GENERATOR\n+    fi\n+\n+    if [ ${do_reconfigure} -ne 0 ] && [ ${is_msvc} -ne 0 ]\n+    then\n+        msg \"configuring LLVM for $t with cmake\"\n+\n+        CMAKE_ARGS=\"-DLLVM_INCLUDE_TESTS=OFF\"\n+        if [ -n \"$CFG_DISABLE_OPTIMIZE_LLVM\" ]; then\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Debug\"\n+        else\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DCMAKE_BUILD_TYPE=Release\"\n+        fi\n+        if [ -z \"$CFG_ENABLE_LLVM_ASSERTIONS\" ]\n+        then\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=OFF\"\n+        else\n+            CMAKE_ARGS=\"$CMAKE_ARGS -DLLVM_ENABLE_ASSERTIONS=ON\"\n+        fi\n+\n+        msg \"configuring LLVM with:\"\n+        msg \"$CMAKE_ARGS\"\n+\n         (cd $LLVM_BUILD_DIR && \"$CFG_CMAKE\" $CFG_LLVM_SRC_DIR \\\n-                                            -G \"$generator\" \\\n+                                            -G \"$CFG_CMAKE_GENERATOR\" \\\n                                             $CMAKE_ARGS)\n         need_ok \"LLVM cmake configure failed\"\n     fi"}, {"sha": "d8b5aeccdcd444559c883f7aaac4494c6659cfaf", "filename": "mk/rt.mk", "status": "modified", "additions": 24, "deletions": 15, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b09e8f51a26f9421d27fea4e1324b6ee24a26722/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b09e8f51a26f9421d27fea4e1324b6ee24a26722/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=b09e8f51a26f9421d27fea4e1324b6ee24a26722", "patch": "@@ -216,22 +216,31 @@ COMPRT_NAME_$(1) := $$(call CFG_STATIC_LIB_NAME_$(1),compiler-rt)\n COMPRT_LIB_$(1) := $$(RT_OUTPUT_DIR_$(1))/$$(COMPRT_NAME_$(1))\n COMPRT_BUILD_DIR_$(1) := $$(RT_OUTPUT_DIR_$(1))/compiler-rt\n \n-# Note that on MSVC-targeting builds we hardwire CC/AR to gcc/ar even though\n-# we're targeting MSVC. This is because although compiler-rt has a CMake build\n-# config I can't actually figure out how to use it, so I'm not sure how to use\n-# cl.exe to build the objects. Additionally, the compiler-rt library when built\n-# with gcc has the same ABI as cl.exe, so they're largely compatible\n-COMPRT_CC_$(1) := $$(CC_$(1))\n-COMPRT_AR_$(1) := $$(AR_$(1))\n-COMPRT_CFLAGS_$(1) := $$(CFG_GCCISH_CFLAGS_$(1))\n ifeq ($$(findstring msvc,$(1)),msvc)\n-COMPRT_CC_$(1) := gcc\n-COMPRT_AR_$(1) := ar\n-ifeq ($$(findstring i686,$(1)),i686)\n-COMPRT_CFLAGS_$(1) := $$(CFG_GCCISH_CFLAGS_$(1)) -m32\n+$$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS) $$(LLVM_CONFIG_$(1))\n+\t@$$(call E, cmake: compiler-rt)\n+\t$$(Q)cd \"$$(COMPRT_BUILD_DIR_$(1))\"; $$(CFG_CMAKE) \"$(S)src/compiler-rt\" \\\n+\t\t-DCMAKE_BUILD_TYPE=$$(LLVM_BUILD_CONFIG_MODE) \\\n+\t\t-DLLVM_CONFIG_PATH=$$(LLVM_CONFIG_$(1)) \\\n+\t\t-G\"$$(CFG_CMAKE_GENERATOR)\"\n+\t$$(Q)$$(CFG_CMAKE) --build \"$$(COMPRT_BUILD_DIR_$(1))\" \\\n+\t\t--target lib/builtins/builtins \\\n+\t\t--config $$(LLVM_BUILD_CONFIG_MODE) \\\n+\t\t-- //v:m //nologo\n+\t$$(Q)cp $$(COMPRT_BUILD_DIR_$(1))/lib/windows/$$(LLVM_BUILD_CONFIG_MODE)/clang_rt.builtins-$$(HOST_$(1)).lib $$@\n else\n-COMPRT_CFLAGS_$(1) := $$(CFG_GCCISH_CFLAGS_$(1)) -m64\n-endif\n+COMPRT_CC_$(1) := $$(CC_$(1))\n+COMPRT_AR_$(1) := $$(AR_$(1))\n+# We chomp -Werror here because GCC warns about the type signature of\n+# builtins not matching its own and the build fails. It's a bit hacky,\n+# but what can we do, we're building libclang-rt using GCC ......\n+COMPRT_CFLAGS_$(1) := $$(subst -Werror,,$$(CFG_GCCISH_CFLAGS_$(1))) -std=c99\n+\n+# FreeBSD Clang's packaging is problematic; it doesn't copy unwind.h to\n+# the standard include directory. This should really be in our changes to\n+# compiler-rt, but we override the CFLAGS here so there isn't much choice\n+ifeq ($$(findstring freebsd,$(1)),freebsd)\n+\tCOMPRT_CFLAGS_$(1) += -I/usr/include/c++/v1\n endif\n \n $$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS)\n@@ -246,7 +255,7 @@ $$(COMPRT_LIB_$(1)): $$(COMPRT_DEPS) $$(MKFILE_DEPS)\n \t\tTargetTriple=$(1) \\\n \t\ttriple-builtins\n \t$$(Q)cp $$(COMPRT_BUILD_DIR_$(1))/triple/builtins/libcompiler_rt.a $$@\n-\n+endif\n ################################################################################\n # libbacktrace\n #"}]}