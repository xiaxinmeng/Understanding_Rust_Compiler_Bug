{"sha": "f94bc7124cd1b33239cfb65412414a4f548f08dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5NGJjNzEyNGNkMWIzMzIzOWNmYjY1NDEyNDE0YTRmNTQ4ZjA4ZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-10T13:47:44Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-10T13:47:44Z"}, "message": "Auto merge of #1080 - rust-lang:stacked_borrow_tracing, r=RalfJung\n\nAdd a scheme to find the place where an id was destroyed\n\ncc https://github.com/rust-lang/miri/issues/974\n\nI'm not too happy with it, but since stacked borrows don't have access to the current call stack, I can't just report a warning as per https://github.com/rust-lang/miri/issues/797\n\nWe could add some global mutex that we can throw strings at and `step` will clear out that mutex and report warnings before moving the `statement_id` or the `block_id`, not sure how well that would work. For now I think this is sufficient", "tree": {"sha": "533a19d5e1036de50ed841397704e9614912f049", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/533a19d5e1036de50ed841397704e9614912f049"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f94bc7124cd1b33239cfb65412414a4f548f08dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f94bc7124cd1b33239cfb65412414a4f548f08dc", "html_url": "https://github.com/rust-lang/rust/commit/f94bc7124cd1b33239cfb65412414a4f548f08dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f94bc7124cd1b33239cfb65412414a4f548f08dc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ebc0306ecb5a593ad9c329fa2fc636ab4a176ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ebc0306ecb5a593ad9c329fa2fc636ab4a176ac", "html_url": "https://github.com/rust-lang/rust/commit/4ebc0306ecb5a593ad9c329fa2fc636ab4a176ac"}, {"sha": "8d409a7b593b32b6b1fa1914ce352efea1bb8095", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d409a7b593b32b6b1fa1914ce352efea1bb8095", "html_url": "https://github.com/rust-lang/rust/commit/8d409a7b593b32b6b1fa1914ce352efea1bb8095"}], "stats": {"total": 57, "additions": 46, "deletions": 11}, "files": [{"sha": "bbf26ff6f71e693e9844c552bc2942d32a14f3c2", "filename": "README.md", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f94bc7124cd1b33239cfb65412414a4f548f08dc/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/f94bc7124cd1b33239cfb65412414a4f548f08dc/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=f94bc7124cd1b33239cfb65412414a4f548f08dc", "patch": "@@ -160,7 +160,7 @@ Several `-Z` flags are relevant for Miri:\n   the program has access to host resources such as environment variables and\n   randomness (and, eventually, file systems and more).\n * `-Zmiri-ignore-leaks` disables the memory leak checker.\n-* `-Zmiri-env-exclude=<var>` keeps the `var` environment variable isolated from \n+* `-Zmiri-env-exclude=<var>` keeps the `var` environment variable isolated from\n   the host. Can be used multiple times to exclude several variables. The `TERM`\n   environment variable is excluded by default.\n * `-Zmir-opt-level` controls how many MIR optimizations are performed.  Miri\n@@ -171,6 +171,11 @@ Several `-Z` flags are relevant for Miri:\n   sets this flag per default.\n * `-Zmir-emit-retag` controls whether `Retag` statements are emitted. Miri\n   enables this per default because it is needed for validation.\n+* `-Zmiri-track-pointer-tag=<tag>` aborts interpretation with a backtrace when the\n+  given pointer tag is popped from a borrow stack (which is where the tag\n+  becomes invalid and any future use of it will error anyway).  This helps you\n+  in finding out why UB is happening and where in your code would be a good\n+  place to look for it.\n \n Moreover, Miri recognizes some environment variables:\n "}, {"sha": "e2951110acdf9e536147ec0c155e748ee3cd2e50", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f94bc7124cd1b33239cfb65412414a4f548f08dc/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f94bc7124cd1b33239cfb65412414a4f548f08dc/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=f94bc7124cd1b33239cfb65412414a4f548f08dc", "patch": "@@ -32,6 +32,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls<'_> {\n                     excluded_env_vars: vec![],\n                     args: vec![],\n                     seed: None,\n+                    tracked_pointer_tag: None,\n                 };\n                 eval_main(tcx, entry_def_id, config);\n             });"}, {"sha": "370d2a206178eef4e20567b210a53dc7b52d3320", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f94bc7124cd1b33239cfb65412414a4f548f08dc/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f94bc7124cd1b33239cfb65412414a4f548f08dc/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=f94bc7124cd1b33239cfb65412414a4f548f08dc", "patch": "@@ -45,6 +45,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                                     excluded_env_vars: vec![],\n                                     args: vec![],\n                                     seed: None,\n+                                    tracked_pointer_tag: None,\n                                 };\n                                 let did = self.0.hir().body_owner_def_id(body_id);\n                                 println!(\"running test: {}\", self.0.def_path_debug_str(did));\n@@ -64,7 +65,8 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                     ignore_leaks: false,\n                     excluded_env_vars: vec![],\n                     args: vec![],\n-                    seed: None\n+                    seed: None,\n+                    tracked_pointer_tag: None,\n                 };\n                 miri::eval_main(tcx, entry_def_id, config);\n "}, {"sha": "48af812962575b37435ca85422f8a97f32e33ab7", "filename": "src/bin/miri.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f94bc7124cd1b33239cfb65412414a4f548f08dc/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f94bc7124cd1b33239cfb65412414a4f548f08dc/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=f94bc7124cd1b33239cfb65412414a4f548f08dc", "patch": "@@ -126,6 +126,7 @@ fn main() {\n     let mut communicate = false;\n     let mut ignore_leaks = false;\n     let mut seed: Option<u64> = None;\n+    let mut tracked_pointer_tag: Option<miri::PtrId> = None;\n     let mut rustc_args = vec![];\n     let mut miri_args = vec![];\n     let mut after_dashdash = false;\n@@ -176,6 +177,17 @@ fn main() {\n                 arg if arg.starts_with(\"-Zmiri-env-exclude=\") => {\n                     excluded_env_vars.push(arg.trim_start_matches(\"-Zmiri-env-exclude=\").to_owned());\n                 },\n+                arg if arg.starts_with(\"-Zmiri-track-pointer-tag=\") => {\n+                    let id: u64 = match arg.trim_start_matches(\"-Zmiri-track-pointer-tag=\").parse() {\n+                        Ok(id) => id,\n+                        Err(err) => panic!(\"-Zmiri-track-pointer-tag requires a valid `u64` as the argument: {}\", err),\n+                    };\n+                    if let Some(id) = miri::PtrId::new(id) {\n+                        tracked_pointer_tag = Some(id);\n+                    } else {\n+                        panic!(\"-Zmiri-track-pointer-tag must be a nonzero id\");\n+                    }\n+                },\n                 _ => {\n                     rustc_args.push(arg);\n                 }\n@@ -208,6 +220,7 @@ fn main() {\n         excluded_env_vars,\n         seed,\n         args: miri_args,\n+        tracked_pointer_tag,\n     };\n     rustc_driver::install_ice_hook();\n     let result = rustc_driver::catch_fatal_errors(move || {"}, {"sha": "9a70663716d61ccff0829527e7e35de50ff34017", "filename": "src/eval.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f94bc7124cd1b33239cfb65412414a4f548f08dc/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f94bc7124cd1b33239cfb65412414a4f548f08dc/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=f94bc7124cd1b33239cfb65412414a4f548f08dc", "patch": "@@ -26,11 +26,14 @@ pub struct MiriConfig {\n     pub args: Vec<String>,\n     /// The seed to use when non-determinism or randomness are required (e.g. ptr-to-int cast, `getrandom()`).\n     pub seed: Option<u64>,\n+    /// The stacked borrow id to report about\n+    pub tracked_pointer_tag: Option<PtrId>,\n }\n \n /// Details of premature program termination.\n pub enum TerminationInfo {\n     Exit(i64),\n+    PoppedTrackedPointerTag(Item),\n     Abort,\n }\n \n@@ -47,7 +50,7 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         tcx.at(syntax::source_map::DUMMY_SP),\n         ty::ParamEnv::reveal_all(),\n         Evaluator::new(config.communicate),\n-        MemoryExtra::new(StdRng::seed_from_u64(config.seed.unwrap_or(0)), config.validate),\n+        MemoryExtra::new(StdRng::seed_from_u64(config.seed.unwrap_or(0)), config.validate, config.tracked_pointer_tag),\n     );\n     // Complete initialization.\n     EnvVars::init(&mut ecx, config.excluded_env_vars);\n@@ -216,6 +219,8 @@ pub fn eval_main<'tcx>(tcx: TyCtxt<'tcx>, main_id: DefId, config: MiriConfig) ->\n                         .expect(\"invalid MachineStop payload\");\n                     match info {\n                         TerminationInfo::Exit(code) => return Some(*code),\n+                        TerminationInfo::PoppedTrackedPointerTag(item) =>\n+                            format!(\"popped tracked tag for item {:?}\", item),\n                         TerminationInfo::Abort =>\n                             format!(\"the evaluated program aborted execution\")\n                     }"}, {"sha": "ee13631727d2cf773fc4e34169a353dcbe3a3853", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f94bc7124cd1b33239cfb65412414a4f548f08dc/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f94bc7124cd1b33239cfb65412414a4f548f08dc/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=f94bc7124cd1b33239cfb65412414a4f548f08dc", "patch": "@@ -43,7 +43,10 @@ pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n pub use crate::range_map::RangeMap;\n pub use crate::helpers::{EvalContextExt as HelpersEvalContextExt};\n pub use crate::mono_hash_map::MonoHashMap;\n-pub use crate::stacked_borrows::{EvalContextExt as StackedBorEvalContextExt, Tag, Permission, Stack, Stacks, Item};\n+pub use crate::stacked_borrows::{\n+    EvalContextExt as StackedBorEvalContextExt, Tag, Permission, Stack, Stacks, Item, PtrId,\n+    GlobalState,\n+};\n pub use crate::machine::{\n     PAGE_SIZE, STACK_ADDR, STACK_SIZE, NUM_CPUS,\n     MemoryExtra, AllocExtra, FrameData, MiriMemoryKind, Evaluator, MiriEvalContext, MiriEvalContextExt,"}, {"sha": "d5cd86d97878bbfc8963dabe641828f2766192ae", "filename": "src/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f94bc7124cd1b33239cfb65412414a4f548f08dc/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f94bc7124cd1b33239cfb65412414a4f548f08dc/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=f94bc7124cd1b33239cfb65412414a4f548f08dc", "patch": "@@ -77,9 +77,9 @@ pub struct MemoryExtra {\n }\n \n impl MemoryExtra {\n-    pub fn new(rng: StdRng, validate: bool) -> Self {\n+    pub fn new(rng: StdRng, validate: bool, tracked_pointer_tag: Option<PtrId>) -> Self {\n         MemoryExtra {\n-            stacked_borrows: Default::default(),\n+            stacked_borrows: Rc::new(RefCell::new(GlobalState::new(tracked_pointer_tag))),\n             intptrcast: Default::default(),\n             rng: RefCell::new(rng),\n             validate,"}, {"sha": "8782eb83d1835c978a5a6fd357dae70c7cb6676b", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f94bc7124cd1b33239cfb65412414a4f548f08dc/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f94bc7124cd1b33239cfb65412414a4f548f08dc/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=f94bc7124cd1b33239cfb65412414a4f548f08dc", "patch": "@@ -12,7 +12,7 @@ use rustc::hir::Mutability::{Mutable, Immutable};\n use rustc::mir::RetagKind;\n \n use crate::{\n-    InterpResult, HelpersEvalContextExt,\n+    InterpResult, HelpersEvalContextExt, TerminationInfo,\n     MemoryKind, MiriMemoryKind, RangeMap, AllocId, Pointer, Immediate, ImmTy, PlaceTy, MPlaceTy,\n };\n \n@@ -105,6 +105,8 @@ pub struct GlobalState {\n     next_call_id: CallId,\n     /// Those call IDs corresponding to functions that are still running.\n     active_calls: HashSet<CallId>,\n+    /// The id to trace in this execution run\n+    tracked_pointer_tag: Option<PtrId>,\n }\n /// Memory extra state gives us interior mutable access to the global state.\n pub type MemoryExtra = Rc<RefCell<GlobalState>>;\n@@ -151,18 +153,17 @@ impl fmt::Display for RefKind {\n }\n \n /// Utilities for initialization and ID generation\n-impl Default for GlobalState {\n-    fn default() -> Self {\n+impl GlobalState {\n+    pub fn new(tracked_pointer_tag: Option<PtrId>) -> Self {\n         GlobalState {\n             next_ptr_id: NonZeroU64::new(1).unwrap(),\n             base_ptr_ids: HashMap::default(),\n             next_call_id: NonZeroU64::new(1).unwrap(),\n             active_calls: HashSet::default(),\n+            tracked_pointer_tag,\n         }\n     }\n-}\n \n-impl GlobalState {\n     fn new_ptr(&mut self) -> PtrId {\n         let id = self.next_ptr_id;\n         self.next_ptr_id = NonZeroU64::new(id.get() + 1).unwrap();\n@@ -270,6 +271,11 @@ impl<'tcx> Stack {\n \n     /// Check if the given item is protected.\n     fn check_protector(item: &Item, tag: Option<Tag>, global: &GlobalState) -> InterpResult<'tcx> {\n+        if let Tag::Tagged(id) = item.tag {\n+            if Some(id) == global.tracked_pointer_tag {\n+                throw_machine_stop!(TerminationInfo::PoppedTrackedPointerTag(item.clone()));\n+            }\n+        }\n         if let Some(call) = item.protector {\n             if global.is_active(call) {\n                 if let Some(tag) = tag {"}]}