{"sha": "ae98d5a78dfe5f9d45d69d49f4f0776bdf8afab5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlOThkNWE3OGRmZTVmOWQ0NWQ2OWQ0OWY0ZjA3NzZiZGY4YWZhYjU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-02T10:07:08Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-07-02T10:07:08Z"}, "message": "Don't use data object for non-primitive scalars\n\nFixes #1041", "tree": {"sha": "d3d537f43dd0ee480324649fdfa0eee316717882", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3d537f43dd0ee480324649fdfa0eee316717882"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae98d5a78dfe5f9d45d69d49f4f0776bdf8afab5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae98d5a78dfe5f9d45d69d49f4f0776bdf8afab5", "html_url": "https://github.com/rust-lang/rust/commit/ae98d5a78dfe5f9d45d69d49f4f0776bdf8afab5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae98d5a78dfe5f9d45d69d49f4f0776bdf8afab5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0f3ad21188f82f98de1cbaf679828dafa66b7a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f3ad21188f82f98de1cbaf679828dafa66b7a4", "html_url": "https://github.com/rust-lang/rust/commit/e0f3ad21188f82f98de1cbaf679828dafa66b7a4"}], "stats": {"total": 126, "additions": 66, "deletions": 60}, "files": [{"sha": "481ba38f74d26097b0e10dab8e069174f4ec9062", "filename": "src/constant.rs", "status": "modified", "additions": 66, "deletions": 60, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/ae98d5a78dfe5f9d45d69d49f4f0776bdf8afab5/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae98d5a78dfe5f9d45d69d49f4f0776bdf8afab5/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=ae98d5a78dfe5f9d45d69d49f4f0776bdf8afab5", "patch": "@@ -1,16 +1,13 @@\n //! Handling of `static`s, `const`s and promoted allocations\n \n-use rustc_span::DUMMY_SP;\n-\n-use rustc_ast::Mutability;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::ErrorReported;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n-    alloc_range, read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc,\n-    Scalar,\n+    read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n };\n use rustc_middle::ty::ConstKind;\n+use rustc_span::DUMMY_SP;\n \n use cranelift_codegen::ir::GlobalValueData;\n use cranelift_module::*;\n@@ -171,65 +168,74 @@ pub(crate) fn codegen_const_value<'tcx>(\n     }\n \n     match const_val {\n-        ConstValue::Scalar(x) => {\n-            if fx.clif_type(layout.ty).is_none() {\n-                let (size, align) = (layout.size, layout.align.pref);\n-                let mut alloc = Allocation::from_bytes(\n-                    std::iter::repeat(0).take(size.bytes_usize()).collect::<Vec<u8>>(),\n-                    align,\n-                    Mutability::Not,\n-                );\n-                alloc.write_scalar(fx, alloc_range(Size::ZERO, size), x.into()).unwrap();\n-                let alloc = fx.tcx.intern_const_alloc(alloc);\n-                return CValue::by_ref(pointer_for_allocation(fx, alloc), layout);\n-            }\n-\n-            match x {\n-                Scalar::Int(int) => CValue::const_val(fx, layout, int),\n-                Scalar::Ptr(ptr) => {\n-                    let alloc_kind = fx.tcx.get_global_alloc(ptr.alloc_id);\n-                    let base_addr = match alloc_kind {\n-                        Some(GlobalAlloc::Memory(alloc)) => {\n-                            let data_id = data_id_for_alloc_id(\n-                                &mut fx.constants_cx,\n-                                fx.module,\n-                                ptr.alloc_id,\n-                                alloc.mutability,\n-                            );\n-                            let local_data_id =\n-                                fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-                            if fx.clif_comments.enabled() {\n-                                fx.add_comment(local_data_id, format!(\"{:?}\", ptr.alloc_id));\n-                            }\n-                            fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n-                        }\n-                        Some(GlobalAlloc::Function(instance)) => {\n-                            let func_id = crate::abi::import_function(fx.tcx, fx.module, instance);\n-                            let local_func_id =\n-                                fx.module.declare_func_in_func(func_id, &mut fx.bcx.func);\n-                            fx.bcx.ins().func_addr(fx.pointer_type, local_func_id)\n-                        }\n-                        Some(GlobalAlloc::Static(def_id)) => {\n-                            assert!(fx.tcx.is_static(def_id));\n-                            let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);\n-                            let local_data_id =\n-                                fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n-                            if fx.clif_comments.enabled() {\n-                                fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n-                            }\n-                            fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n+        ConstValue::Scalar(x) => match x {\n+            Scalar::Int(int) => {\n+                if fx.clif_type(layout.ty).is_some() {\n+                    return CValue::const_val(fx, layout, int);\n+                } else {\n+                    let raw_val = int.to_bits(int.size()).unwrap();\n+                    let val = match int.size().bytes() {\n+                        1 => fx.bcx.ins().iconst(types::I8, raw_val as i64),\n+                        2 => fx.bcx.ins().iconst(types::I16, raw_val as i64),\n+                        4 => fx.bcx.ins().iconst(types::I32, raw_val as i64),\n+                        8 => fx.bcx.ins().iconst(types::I64, raw_val as i64),\n+                        16 => {\n+                            let lsb = fx.bcx.ins().iconst(types::I64, raw_val as u64 as i64);\n+                            let msb =\n+                                fx.bcx.ins().iconst(types::I64, (raw_val >> 64) as u64 as i64);\n+                            fx.bcx.ins().iconcat(lsb, msb)\n                         }\n-                        None => bug!(\"missing allocation {:?}\", ptr.alloc_id),\n-                    };\n-                    let val = if ptr.offset.bytes() != 0 {\n-                        fx.bcx.ins().iadd_imm(base_addr, i64::try_from(ptr.offset.bytes()).unwrap())\n-                    } else {\n-                        base_addr\n+                        _ => unreachable!(),\n                     };\n-                    CValue::by_val(val, layout)\n+\n+                    let place = CPlace::new_stack_slot(fx, layout);\n+                    place.to_ptr().store(fx, val, MemFlags::trusted());\n+                    place.to_cvalue(fx)\n                 }\n             }\n-        }\n+            Scalar::Ptr(ptr) => {\n+                let alloc_kind = fx.tcx.get_global_alloc(ptr.alloc_id);\n+                let base_addr = match alloc_kind {\n+                    Some(GlobalAlloc::Memory(alloc)) => {\n+                        let data_id = data_id_for_alloc_id(\n+                            &mut fx.constants_cx,\n+                            fx.module,\n+                            ptr.alloc_id,\n+                            alloc.mutability,\n+                        );\n+                        let local_data_id =\n+                            fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+                        if fx.clif_comments.enabled() {\n+                            fx.add_comment(local_data_id, format!(\"{:?}\", ptr.alloc_id));\n+                        }\n+                        fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n+                    }\n+                    Some(GlobalAlloc::Function(instance)) => {\n+                        let func_id = crate::abi::import_function(fx.tcx, fx.module, instance);\n+                        let local_func_id =\n+                            fx.module.declare_func_in_func(func_id, &mut fx.bcx.func);\n+                        fx.bcx.ins().func_addr(fx.pointer_type, local_func_id)\n+                    }\n+                    Some(GlobalAlloc::Static(def_id)) => {\n+                        assert!(fx.tcx.is_static(def_id));\n+                        let data_id = data_id_for_static(fx.tcx, fx.module, def_id, false);\n+                        let local_data_id =\n+                            fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+                        if fx.clif_comments.enabled() {\n+                            fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n+                        }\n+                        fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n+                    }\n+                    None => bug!(\"missing allocation {:?}\", ptr.alloc_id),\n+                };\n+                let val = if ptr.offset.bytes() != 0 {\n+                    fx.bcx.ins().iadd_imm(base_addr, i64::try_from(ptr.offset.bytes()).unwrap())\n+                } else {\n+                    base_addr\n+                };\n+                CValue::by_val(val, layout)\n+            }\n+        },\n         ConstValue::ByRef { alloc, offset } => CValue::by_ref(\n             pointer_for_allocation(fx, alloc)\n                 .offset_i64(fx, i64::try_from(offset.bytes()).unwrap()),"}]}