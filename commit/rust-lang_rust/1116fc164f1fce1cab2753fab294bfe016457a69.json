{"sha": "1116fc164f1fce1cab2753fab294bfe016457a69", "node_id": "C_kwDOAAsO6NoAKDExMTZmYzE2NGYxZmNlMWNhYjI3NTNmYWIyOTRiZmUwMTY0NTdhNjk", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-07-21T22:11:21Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-07-29T17:30:25Z"}, "message": "Box FunctionItem, TyMethodItem, MethodItem, ForeignFunctionItem\n\nThis reduces ItemKind size from 160 bytes to 112 bytes", "tree": {"sha": "3c90c1d131dc7ef7f25cfe7918744b6dd1114227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c90c1d131dc7ef7f25cfe7918744b6dd1114227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1116fc164f1fce1cab2753fab294bfe016457a69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1116fc164f1fce1cab2753fab294bfe016457a69", "html_url": "https://github.com/rust-lang/rust/commit/1116fc164f1fce1cab2753fab294bfe016457a69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1116fc164f1fce1cab2753fab294bfe016457a69/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96c051fd0743e52403f0c3dcdbdbb8297da4ac99", "url": "https://api.github.com/repos/rust-lang/rust/commits/96c051fd0743e52403f0c3dcdbdbb8297da4ac99", "html_url": "https://github.com/rust-lang/rust/commit/96c051fd0743e52403f0c3dcdbdbb8297da4ac99"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "55d77a63f61418d19f51e0443f61501720019651", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1116fc164f1fce1cab2753fab294bfe016457a69/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1116fc164f1fce1cab2753fab294bfe016457a69/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=1116fc164f1fce1cab2753fab294bfe016457a69", "patch": "@@ -218,7 +218,7 @@ pub(crate) fn build_external_trait(cx: &mut DocContext<'_>, did: DefId) -> clean\n     clean::Trait { def_id: did, generics, items: trait_items, bounds: supertrait_bounds }\n }\n \n-fn build_external_function<'tcx>(cx: &mut DocContext<'tcx>, did: DefId) -> clean::Function {\n+fn build_external_function<'tcx>(cx: &mut DocContext<'tcx>, did: DefId) -> Box<clean::Function> {\n     let sig = cx.tcx.fn_sig(did);\n \n     let predicates = cx.tcx.predicates_of(did);\n@@ -228,7 +228,7 @@ fn build_external_function<'tcx>(cx: &mut DocContext<'tcx>, did: DefId) -> clean\n         let decl = clean_fn_decl_from_did_and_sig(cx, Some(did), sig);\n         (generics, decl)\n     });\n-    clean::Function { decl, generics }\n+    Box::new(clean::Function { decl, generics })\n }\n \n fn build_enum(cx: &mut DocContext<'_>, did: DefId) -> clean::Enum {"}, {"sha": "10676aca480dd2506c1fc2791874fb3e1aaf13f5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1116fc164f1fce1cab2753fab294bfe016457a69/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1116fc164f1fce1cab2753fab294bfe016457a69/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1116fc164f1fce1cab2753fab294bfe016457a69", "patch": "@@ -908,15 +908,15 @@ fn clean_function<'tcx>(\n     sig: &hir::FnSig<'tcx>,\n     generics: &hir::Generics<'tcx>,\n     body_id: hir::BodyId,\n-) -> Function {\n+) -> Box<Function> {\n     let (generics, decl) = enter_impl_trait(cx, |cx| {\n         // NOTE: generics must be cleaned before args\n         let generics = generics.clean(cx);\n         let args = clean_args_from_types_and_body_id(cx, sig.decl.inputs, body_id);\n         let decl = clean_fn_decl_with_args(cx, sig.decl, args);\n         (generics, decl)\n     });\n-    Function { decl, generics }\n+    Box::new(Function { decl, generics })\n }\n \n fn clean_args_from_types_and_names<'tcx>(\n@@ -1061,7 +1061,7 @@ impl<'tcx> Clean<'tcx, Item> for hir::TraitItem<'tcx> {\n                         let decl = clean_fn_decl_with_args(cx, sig.decl, args);\n                         (generics, decl)\n                     });\n-                    TyMethodItem(Function { decl, generics })\n+                    TyMethodItem(Box::new(Function { decl, generics }))\n                 }\n                 hir::TraitItemKind::Type(bounds, Some(default)) => {\n                     let generics = enter_impl_trait(cx, |cx| self.generics.clean(cx));\n@@ -1186,9 +1186,9 @@ impl<'tcx> Clean<'tcx, Item> for ty::AssocItem {\n                         ty::ImplContainer(_) => Some(self.defaultness),\n                         ty::TraitContainer(_) => None,\n                     };\n-                    MethodItem(Function { generics, decl }, defaultness)\n+                    MethodItem(Box::new(Function { generics, decl }), defaultness)\n                 } else {\n-                    TyMethodItem(Function { generics, decl })\n+                    TyMethodItem(Box::new(Function { generics, decl }))\n                 }\n             }\n             ty::AssocKind::Type => {\n@@ -2243,7 +2243,7 @@ fn clean_maybe_renamed_foreign_item<'tcx>(\n                     let decl = clean_fn_decl_with_args(cx, decl, args);\n                     (generics, decl)\n                 });\n-                ForeignFunctionItem(Function { decl, generics })\n+                ForeignFunctionItem(Box::new(Function { decl, generics }))\n             }\n             hir::ForeignItemKind::Static(ty, mutability) => {\n                 ForeignStaticItem(Static { type_: clean_ty(ty, cx), mutability, expr: None })"}, {"sha": "874cf5508d174300c29fdaef52c9262aed19eb4f", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1116fc164f1fce1cab2753fab294bfe016457a69/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1116fc164f1fce1cab2753fab294bfe016457a69/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=1116fc164f1fce1cab2753fab294bfe016457a69", "patch": "@@ -730,7 +730,7 @@ pub(crate) enum ItemKind {\n     StructItem(Struct),\n     UnionItem(Union),\n     EnumItem(Enum),\n-    FunctionItem(Function),\n+    FunctionItem(Box<Function>),\n     ModuleItem(Module),\n     TypedefItem(Box<Typedef>),\n     OpaqueTyItem(OpaqueTy),\n@@ -740,15 +740,15 @@ pub(crate) enum ItemKind {\n     TraitAliasItem(TraitAlias),\n     ImplItem(Box<Impl>),\n     /// A required method in a trait declaration meaning it's only a function signature.\n-    TyMethodItem(Function),\n+    TyMethodItem(Box<Function>),\n     /// A method in a trait impl or a provided method in a trait declaration.\n     ///\n     /// Compared to [TyMethodItem], it also contains a method body.\n-    MethodItem(Function, Option<hir::Defaultness>),\n+    MethodItem(Box<Function>, Option<hir::Defaultness>),\n     StructFieldItem(Type),\n     VariantItem(Variant),\n     /// `fn`s from an extern block\n-    ForeignFunctionItem(Function),\n+    ForeignFunctionItem(Box<Function>),\n     /// `static`s from an extern block\n     ForeignStaticItem(Static),\n     /// `type`s from an extern block"}, {"sha": "716a4c9ea4319d1d56ab74535fab1465f4b75bde", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1116fc164f1fce1cab2753fab294bfe016457a69/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1116fc164f1fce1cab2753fab294bfe016457a69/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=1116fc164f1fce1cab2753fab294bfe016457a69", "patch": "@@ -602,11 +602,11 @@ impl FromWithTcx<Box<clean::Impl>> for Impl {\n }\n \n pub(crate) fn from_function(\n-    function: clean::Function,\n+    function: Box<clean::Function>,\n     header: rustc_hir::FnHeader,\n     tcx: TyCtxt<'_>,\n ) -> Function {\n-    let clean::Function { decl, generics } = function;\n+    let clean::Function { decl, generics } = *function;\n     Function {\n         decl: decl.into_tcx(tcx),\n         generics: generics.into_tcx(tcx),\n@@ -615,12 +615,12 @@ pub(crate) fn from_function(\n }\n \n pub(crate) fn from_function_method(\n-    function: clean::Function,\n+    function: Box<clean::Function>,\n     has_body: bool,\n     header: rustc_hir::FnHeader,\n     tcx: TyCtxt<'_>,\n ) -> Method {\n-    let clean::Function { decl, generics } = function;\n+    let clean::Function { decl, generics } = *function;\n     Method {\n         decl: decl.into_tcx(tcx),\n         generics: generics.into_tcx(tcx),"}]}