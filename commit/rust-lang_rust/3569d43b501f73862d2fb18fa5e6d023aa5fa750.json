{"sha": "3569d43b501f73862d2fb18fa5e6d023aa5fa750", "node_id": "C_kwDOAAsO6NoAKDM1NjlkNDNiNTAxZjczODYyZDJmYjE4ZmE1ZTZkMDIzYWE1ZmE3NTA", "commit": {"author": {"name": "Scott Mabin", "email": "scott@mabez.dev", "date": "2022-04-07T11:07:46Z"}, "committer": {"name": "Scott Mabin", "email": "scott@mabez.dev", "date": "2022-04-19T16:00:09Z"}, "message": "espidf: fix stat\n\n* corect type usage with new type definitions in libc", "tree": {"sha": "e01f0192a7e75589c90c13c9f9a65b5792bedd20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e01f0192a7e75589c90c13c9f9a65b5792bedd20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3569d43b501f73862d2fb18fa5e6d023aa5fa750", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3569d43b501f73862d2fb18fa5e6d023aa5fa750", "html_url": "https://github.com/rust-lang/rust/commit/3569d43b501f73862d2fb18fa5e6d023aa5fa750", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3569d43b501f73862d2fb18fa5e6d023aa5fa750/comments", "author": {"login": "MabezDev", "id": 6977289, "node_id": "MDQ6VXNlcjY5NzcyODk=", "avatar_url": "https://avatars.githubusercontent.com/u/6977289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MabezDev", "html_url": "https://github.com/MabezDev", "followers_url": "https://api.github.com/users/MabezDev/followers", "following_url": "https://api.github.com/users/MabezDev/following{/other_user}", "gists_url": "https://api.github.com/users/MabezDev/gists{/gist_id}", "starred_url": "https://api.github.com/users/MabezDev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MabezDev/subscriptions", "organizations_url": "https://api.github.com/users/MabezDev/orgs", "repos_url": "https://api.github.com/users/MabezDev/repos", "events_url": "https://api.github.com/users/MabezDev/events{/privacy}", "received_events_url": "https://api.github.com/users/MabezDev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "MabezDev", "id": 6977289, "node_id": "MDQ6VXNlcjY5NzcyODk=", "avatar_url": "https://avatars.githubusercontent.com/u/6977289?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MabezDev", "html_url": "https://github.com/MabezDev", "followers_url": "https://api.github.com/users/MabezDev/followers", "following_url": "https://api.github.com/users/MabezDev/following{/other_user}", "gists_url": "https://api.github.com/users/MabezDev/gists{/gist_id}", "starred_url": "https://api.github.com/users/MabezDev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MabezDev/subscriptions", "organizations_url": "https://api.github.com/users/MabezDev/orgs", "repos_url": "https://api.github.com/users/MabezDev/repos", "events_url": "https://api.github.com/users/MabezDev/events{/privacy}", "received_events_url": "https://api.github.com/users/MabezDev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f565016eddc3cb812e647d54b06cfe74bdee2900", "url": "https://api.github.com/repos/rust-lang/rust/commits/f565016eddc3cb812e647d54b06cfe74bdee2900", "html_url": "https://github.com/rust-lang/rust/commit/f565016eddc3cb812e647d54b06cfe74bdee2900"}], "stats": {"total": 45, "additions": 30, "deletions": 15}, "files": [{"sha": "9a6778c0e869b1ea6852b3ff091b84367b7b2fb0", "filename": "library/std/src/os/unix/process.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3569d43b501f73862d2fb18fa5e6d023aa5fa750/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3569d43b501f73862d2fb18fa5e6d023aa5fa750/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fprocess.rs?ref=3569d43b501f73862d2fb18fa5e6d023aa5fa750", "patch": "@@ -24,26 +24,26 @@ pub trait CommandExt: Sealed {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn uid(\n         &mut self,\n-        #[cfg(not(target_os = \"vxworks\"))] id: u32,\n-        #[cfg(target_os = \"vxworks\")] id: u16,\n+        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] id: u32,\n+        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] id: u16,\n     ) -> &mut process::Command;\n \n     /// Similar to `uid`, but sets the group ID of the child process. This has\n     /// the same semantics as the `uid` field.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn gid(\n         &mut self,\n-        #[cfg(not(target_os = \"vxworks\"))] id: u32,\n-        #[cfg(target_os = \"vxworks\")] id: u16,\n+        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] id: u32,\n+        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] id: u16,\n     ) -> &mut process::Command;\n \n     /// Sets the supplementary group IDs for the calling process. Translates to\n     /// a `setgroups` call in the child process.\n     #[unstable(feature = \"setgroups\", issue = \"90747\")]\n     fn groups(\n         &mut self,\n-        #[cfg(not(target_os = \"vxworks\"))] groups: &[u32],\n-        #[cfg(target_os = \"vxworks\")] groups: &[u16],\n+        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] groups: &[u32],\n+        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] groups: &[u16],\n     ) -> &mut process::Command;\n \n     /// Schedules a closure to be run just before the `exec` function is\n@@ -160,26 +160,26 @@ pub trait CommandExt: Sealed {\n impl CommandExt for process::Command {\n     fn uid(\n         &mut self,\n-        #[cfg(not(target_os = \"vxworks\"))] id: u32,\n-        #[cfg(target_os = \"vxworks\")] id: u16,\n+        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] id: u32,\n+        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] id: u16,\n     ) -> &mut process::Command {\n         self.as_inner_mut().uid(id);\n         self\n     }\n \n     fn gid(\n         &mut self,\n-        #[cfg(not(target_os = \"vxworks\"))] id: u32,\n-        #[cfg(target_os = \"vxworks\")] id: u16,\n+        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] id: u32,\n+        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] id: u16,\n     ) -> &mut process::Command {\n         self.as_inner_mut().gid(id);\n         self\n     }\n \n     fn groups(\n         &mut self,\n-        #[cfg(not(target_os = \"vxworks\"))] groups: &[u32],\n-        #[cfg(target_os = \"vxworks\")] groups: &[u16],\n+        #[cfg(not(any(target_os = \"vxworks\", target_os = \"espidf\")))] groups: &[u32],\n+        #[cfg(any(target_os = \"vxworks\", target_os = \"espidf\"))] groups: &[u16],\n     ) -> &mut process::Command {\n         self.as_inner_mut().groups(groups);\n         self"}, {"sha": "40a645858025012070792daa8745473b903dedb5", "filename": "library/std/src/sys/unix/fd.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3569d43b501f73862d2fb18fa5e6d023aa5fa750/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3569d43b501f73862d2fb18fa5e6d023aa5fa750/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffd.rs?ref=3569d43b501f73862d2fb18fa5e6d023aa5fa750", "patch": "@@ -11,6 +11,21 @@ use crate::sys_common::{AsInner, FromInner, IntoInner};\n \n use libc::{c_int, c_void};\n \n+#[cfg(any(\n+    target_os = \"android\",\n+    target_os = \"linux\",\n+    target_os = \"emscripten\",\n+    target_os = \"l4re\"\n+))]\n+use libc::off64_t;\n+#[cfg(not(any(\n+    target_os = \"linux\",\n+    target_os = \"emscripten\",\n+    target_os = \"l4re\",\n+    target_os = \"android\"\n+)))]\n+use libc::off_t as off64_t;\n+\n #[derive(Debug)]\n pub struct FileDesc(OwnedFd);\n \n@@ -109,7 +124,7 @@ impl FileDesc {\n                 self.as_raw_fd(),\n                 buf.as_mut_ptr() as *mut c_void,\n                 cmp::min(buf.len(), READ_LIMIT),\n-                offset as i64,\n+                offset as off64_t,\n             ))\n             .map(|n| n as usize)\n         }\n@@ -176,7 +191,7 @@ impl FileDesc {\n                 self.as_raw_fd(),\n                 buf.as_ptr() as *const c_void,\n                 cmp::min(buf.len(), READ_LIMIT),\n-                offset as i64,\n+                offset as off64_t,\n             ))\n             .map(|n| n as usize)\n         }"}, {"sha": "a5732f3e946a43b6a39de6ca35660e430d382ba7", "filename": "library/std/src/sys/unix/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3569d43b501f73862d2fb18fa5e6d023aa5fa750/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3569d43b501f73862d2fb18fa5e6d023aa5fa750/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ffs.rs?ref=3569d43b501f73862d2fb18fa5e6d023aa5fa750", "patch": "@@ -966,7 +966,7 @@ impl File {\n             SeekFrom::End(off) => (libc::SEEK_END, off),\n             SeekFrom::Current(off) => (libc::SEEK_CUR, off),\n         };\n-        let n = cvt(unsafe { lseek64(self.as_raw_fd(), pos, whence) })?;\n+        let n = cvt(unsafe { lseek64(self.as_raw_fd(), pos as off64_t, whence) })?;\n         Ok(n as u64)\n     }\n "}]}