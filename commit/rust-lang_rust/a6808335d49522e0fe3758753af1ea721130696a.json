{"sha": "a6808335d49522e0fe3758753af1ea721130696a", "node_id": "C_kwDOAAsO6NoAKGE2ODA4MzM1ZDQ5NTIyZTBmZTM3NTg3NTNhZjFlYTcyMTEzMDY5NmE", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-10-17T20:20:30Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-10-17T20:20:30Z"}, "message": "rustc_span: `Ident::invalid` -> `Ident::empty`\n\nThe equivalent for `Symbol`s was renamed some time ago (`kw::Invalid` -> `kw::Empty`), and it makes sense to do the same thing for `Ident`s.", "tree": {"sha": "6a4eb7ff2977871cc35ef4d3a36b320c478da390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a4eb7ff2977871cc35ef4d3a36b320c478da390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6808335d49522e0fe3758753af1ea721130696a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6808335d49522e0fe3758753af1ea721130696a", "html_url": "https://github.com/rust-lang/rust/commit/a6808335d49522e0fe3758753af1ea721130696a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6808335d49522e0fe3758753af1ea721130696a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8db8f48ea8c2443e969050fe4b6c829585048d5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8db8f48ea8c2443e969050fe4b6c829585048d5c", "html_url": "https://github.com/rust-lang/rust/commit/8db8f48ea8c2443e969050fe4b6c829585048d5c"}], "stats": {"total": 69, "additions": 34, "deletions": 35}, "files": [{"sha": "927d7c6aaf6a4508549aa35a85790f6fa55ae5b3", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -62,7 +62,7 @@ impl NestedMetaItem {\n         self.meta_item().and_then(|meta_item| meta_item.ident())\n     }\n     pub fn name_or_empty(&self) -> Symbol {\n-        self.ident().unwrap_or_else(Ident::invalid).name\n+        self.ident().unwrap_or_else(Ident::empty).name\n     }\n \n     /// Gets the string value if `self` is a `MetaItem` and the `MetaItem` is a\n@@ -131,7 +131,7 @@ impl Attribute {\n         }\n     }\n     pub fn name_or_empty(&self) -> Symbol {\n-        self.ident().unwrap_or_else(Ident::invalid).name\n+        self.ident().unwrap_or_else(Ident::empty).name\n     }\n \n     pub fn value_str(&self) -> Option<Symbol> {\n@@ -166,7 +166,7 @@ impl MetaItem {\n         if self.path.segments.len() == 1 { Some(self.path.segments[0].ident) } else { None }\n     }\n     pub fn name_or_empty(&self) -> Symbol {\n-        self.ident().unwrap_or_else(Ident::invalid).name\n+        self.ident().unwrap_or_else(Ident::empty).name\n     }\n \n     // Example:"}, {"sha": "f673ab2f3efde30221843fb59968b5f80d4cdd09", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -1060,7 +1060,7 @@ pub fn noop_visit_crate<T: MutVisitor>(krate: &mut Crate, vis: &mut T) {\n         let item_vis =\n             Visibility { kind: VisibilityKind::Public, span: span.shrink_to_lo(), tokens: None };\n         let item = P(Item {\n-            ident: Ident::invalid(),\n+            ident: Ident::empty(),\n             attrs,\n             id: DUMMY_NODE_ID,\n             vis: item_vis,"}, {"sha": "92b482e90ee2fffefa66562b61e8edbd74bda385", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -1435,7 +1435,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         trace!(\"registering opaque type with id {:#?}\", opaque_ty_id);\n         let opaque_ty_item = hir::Item {\n             def_id: opaque_ty_id,\n-            ident: Ident::invalid(),\n+            ident: Ident::empty(),\n             kind: opaque_ty_item_kind,\n             vis: respan(self.lower_span(span.shrink_to_lo()), hir::VisibilityKind::Inherited),\n             span: self.lower_span(opaque_ty_span),"}, {"sha": "198287f608e3973d318d9d4e6e869be0dbd48c26", "filename": "compiler/rustc_builtin_macros/src/asm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fasm.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -812,7 +812,7 @@ pub fn expand_global_asm<'cx>(\n         Ok(args) => {\n             if let Some(inline_asm) = expand_preparsed_asm(ecx, args) {\n                 MacEager::items(smallvec![P(ast::Item {\n-                    ident: Ident::invalid(),\n+                    ident: Ident::empty(),\n                     attrs: Vec::new(),\n                     id: ast::DUMMY_NODE_ID,\n                     kind: ast::ItemKind::GlobalAsm(inline_asm),"}, {"sha": "31a35b9b7b45ed86662168e575f9ecae9eb3b330", "filename": "compiler/rustc_builtin_macros/src/derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderive.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -85,7 +85,7 @@ impl MultiItemModifier for Expander {\n fn dummy_annotatable() -> Annotatable {\n     Annotatable::GenericParam(ast::GenericParam {\n         id: ast::DUMMY_NODE_ID,\n-        ident: Ident::invalid(),\n+        ident: Ident::empty(),\n         attrs: Default::default(),\n         bounds: Default::default(),\n         is_placeholder: false,"}, {"sha": "a225b328ab6a4fc205c260e5bce01e440866384c", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -724,7 +724,7 @@ impl<'a> TraitDef<'a> {\n \n         cx.item(\n             self.span,\n-            Ident::invalid(),\n+            Ident::empty(),\n             a,\n             ast::ItemKind::Impl(Box::new(ast::ImplKind {\n                 unsafety,"}, {"sha": "fa389a51115782696ef49c9d7a7c860aaab1e624", "filename": "compiler/rustc_builtin_macros/src/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fmod.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -178,7 +178,7 @@ fn inject_impl_of_structural_trait(\n \n     let newitem = cx.item(\n         span,\n-        Ident::invalid(),\n+        Ident::empty(),\n         attrs,\n         ItemKind::Impl(Box::new(ImplKind {\n             unsafety: ast::Unsafe::No,"}, {"sha": "e106f6014a31d597a0a84f18db3473a43d79b9b1", "filename": "compiler/rustc_builtin_macros/src/standard_library_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fstandard_library_imports.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -77,7 +77,7 @@ pub fn inject(\n \n     let use_item = cx.item(\n         span,\n-        Ident::invalid(),\n+        Ident::empty(),\n         vec![cx.attribute(cx.meta_word(span, sym::prelude_import))],\n         ast::ItemKind::Use(ast::UseTree {\n             prefix: cx.path(span, import_path),"}, {"sha": "65f0719ba99c246334f1d3252c5ca25e5804dff8", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -383,7 +383,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 Unsafe::No,\n                 ModKind::Loaded(krate.items, Inline::Yes, krate.span)\n             ),\n-            ident: Ident::invalid(),\n+            ident: Ident::empty(),\n             id: ast::DUMMY_NODE_ID,\n             vis: ast::Visibility {\n                 span: krate.span.shrink_to_lo(),\n@@ -1426,7 +1426,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n                     _ => unreachable!(),\n                 })\n             }\n-            ast::ItemKind::Mod(_, ref mut mod_kind) if ident != Ident::invalid() => {\n+            ast::ItemKind::Mod(_, ref mut mod_kind) if ident != Ident::empty() => {\n                 let (file_path, dir_path, dir_ownership) = match mod_kind {\n                     ModKind::Loaded(_, inline, _) => {\n                         // Inline `mod foo { ... }`, but we still need to push directories.\n@@ -1508,7 +1508,7 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             _ => {\n                 item.attrs = attrs;\n                 // The crate root is special - don't assign an ID to it.\n-                if !(matches!(item.kind, ast::ItemKind::Mod(..)) && ident == Ident::invalid()) {\n+                if !(matches!(item.kind, ast::ItemKind::Mod(..)) && ident == Ident::empty()) {\n                     assign_id!(self, &mut item.id, || noop_flat_map_item(item, self))\n                 } else {\n                     noop_flat_map_item(item, self)"}, {"sha": "dedc6c618b9a482442828018babc4780bcff0e6e", "filename": "compiler/rustc_expand/src/mbe/quoted.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fquoted.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -204,7 +204,7 @@ fn parse_tree(\n                         pprust::token_to_string(&token),\n                     );\n                     sess.span_diagnostic.span_err(token.span, &msg);\n-                    TokenTree::MetaVar(token.span, Ident::invalid())\n+                    TokenTree::MetaVar(token.span, Ident::empty())\n                 }\n \n                 // There are no more tokens. Just return the `$` we already have."}, {"sha": "12b6bc7bbe7689efffaca0447e1e11af197a7e1f", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -23,7 +23,7 @@ pub fn placeholder(\n         }\n     }\n \n-    let ident = Ident::invalid();\n+    let ident = Ident::empty();\n     let attrs = Vec::new();\n     let vis = vis.unwrap_or(ast::Visibility {\n         span: DUMMY_SP,"}, {"sha": "f0ee21645f3c170f3c87c995b79604e50cbe9bc9", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -121,7 +121,7 @@ impl LifetimeName {\n         match *self {\n             LifetimeName::ImplicitObjectLifetimeDefault\n             | LifetimeName::Implicit\n-            | LifetimeName::Error => Ident::invalid(),\n+            | LifetimeName::Error => Ident::empty(),\n             LifetimeName::Underscore => Ident::with_dummy_span(kw::UnderscoreLifetime),\n             LifetimeName::Static => Ident::with_dummy_span(kw::StaticLifetime),\n             LifetimeName::Param(param_name) => param_name.ident(),\n@@ -233,7 +233,7 @@ impl<'hir> PathSegment<'hir> {\n     }\n \n     pub fn invalid() -> Self {\n-        Self::from_ident(Ident::invalid())\n+        Self::from_ident(Ident::empty())\n     }\n \n     pub fn args(&self) -> &GenericArgs<'hir> {\n@@ -310,7 +310,7 @@ impl GenericArg<'_> {\n     }\n \n     pub fn is_synthetic(&self) -> bool {\n-        matches!(self, GenericArg::Lifetime(lifetime) if lifetime.name.ident() == Ident::invalid())\n+        matches!(self, GenericArg::Lifetime(lifetime) if lifetime.name.ident() == Ident::empty())\n     }\n \n     pub fn descr(&self) -> &'static str {"}, {"sha": "c30ab4c957a1912e5495a2fc6cb989d0565fbbdb", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -443,7 +443,7 @@ impl<'hir> Map<'hir> {\n     pub fn body_param_names(&self, id: BodyId) -> impl Iterator<Item = Ident> + 'hir {\n         self.body(id).params.iter().map(|arg| match arg.pat.kind {\n             PatKind::Binding(_, _, ident, _) => ident,\n-            _ => Ident::new(kw::Empty, rustc_span::DUMMY_SP),\n+            _ => Ident::empty(),\n         })\n     }\n "}, {"sha": "1d9c3a4f3cf2b207292c9498de795584ad2f8a96", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -216,7 +216,7 @@ impl<'a> Parser<'a> {\n                 return Err(e);\n             }\n \n-            (Ident::invalid(), ItemKind::Use(tree))\n+            (Ident::empty(), ItemKind::Use(tree))\n         } else if self.check_fn_front_matter(def_final) {\n             // FUNCTION ITEM\n             let (ident, sig, generics, body) = self.parse_fn(attrs, req_name, lo)?;\n@@ -287,7 +287,7 @@ impl<'a> Parser<'a> {\n             return Ok(None);\n         } else if macros_allowed && self.check_path() {\n             // MACRO INVOCATION ITEM\n-            (Ident::invalid(), ItemKind::MacCall(self.parse_item_macro(vis)?))\n+            (Ident::empty(), ItemKind::MacCall(self.parse_item_macro(vis)?))\n         } else {\n             return Ok(None);\n         };\n@@ -586,7 +586,7 @@ impl<'a> Parser<'a> {\n             }\n         };\n \n-        Ok((Ident::invalid(), item_kind))\n+        Ok((Ident::empty(), item_kind))\n     }\n \n     fn parse_item_list<T>(\n@@ -933,7 +933,7 @@ impl<'a> Parser<'a> {\n         let abi = self.parse_abi(); // ABI?\n         let items = self.parse_item_list(attrs, |p| p.parse_foreign_item(ForceCollect::No))?;\n         let module = ast::ForeignMod { unsafety, abi, items };\n-        Ok((Ident::invalid(), ItemKind::ForeignMod(module)))\n+        Ok((Ident::empty(), ItemKind::ForeignMod(module)))\n     }\n \n     /// Parses a foreign item (one in an `extern { ... }` block)."}, {"sha": "38fb1c760bd4e5fd9f30d62dcc941d4bd580aef5", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -1327,7 +1327,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                 if fst.ident.span.rust_2018() && !fst.ident.is_path_segment_keyword() =>\n             {\n                 // Insert a placeholder that's later replaced by `self`/`super`/etc.\n-                path.insert(0, Segment::from_ident(Ident::invalid()));\n+                path.insert(0, Segment::from_ident(Ident::empty()));\n             }\n             _ => return None,\n         }"}, {"sha": "936ab81914a99be5cfe57cf9b900c46d96d1e606", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -978,7 +978,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     // HACK(eddyb) `lint_if_path_starts_with_module` needs at least\n                     // 2 segments, so the `resolve_path` above won't trigger it.\n                     let mut full_path = import.module_path.clone();\n-                    full_path.push(Segment::from_ident(Ident::invalid()));\n+                    full_path.push(Segment::from_ident(Ident::empty()));\n                     self.r.lint_if_path_starts_with_module(\n                         import.crate_lint(),\n                         &full_path,"}, {"sha": "ae148624a906884bafd28f5292a2cd1ff7d136f3", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -1453,7 +1453,7 @@ impl Ident {\n     }\n \n     #[inline]\n-    pub fn invalid() -> Ident {\n+    pub fn empty() -> Ident {\n         Ident::with_dummy_span(kw::Empty)\n     }\n "}, {"sha": "95b8c6dfe89eea23435b45dfd0ae6386ae34367a", "filename": "src/tools/clippy/tests/ui-internal/unnecessary_symbol_str.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.fixed?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -11,6 +11,6 @@ fn main() {\n     Symbol::intern(\"foo\") == rustc_span::sym::clippy;\n     Symbol::intern(\"foo\") == rustc_span::symbol::kw::SelfLower;\n     Symbol::intern(\"foo\") != rustc_span::symbol::kw::SelfUpper;\n-    Ident::invalid().name == rustc_span::sym::clippy;\n-    rustc_span::sym::clippy == Ident::invalid().name;\n+    Ident::empty().name == rustc_span::sym::clippy;\n+    rustc_span::sym::clippy == Ident::empty().name;\n }"}, {"sha": "ad6937cf60a65c71035adde5ff4ea9a6681ce63b", "filename": "src/tools/clippy/tests/ui-internal/unnecessary_symbol_str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.rs?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -11,6 +11,6 @@ fn main() {\n     Symbol::intern(\"foo\").as_str() == \"clippy\";\n     Symbol::intern(\"foo\").to_string() == \"self\";\n     Symbol::intern(\"foo\").to_ident_string() != \"Self\";\n-    &*Ident::invalid().as_str() == \"clippy\";\n-    \"clippy\" == Ident::invalid().to_string();\n+    &*Ident::empty().as_str() == \"clippy\";\n+    \"clippy\" == Ident::empty().to_string();\n }"}, {"sha": "8e04d447fbcaaa3de92c81f26ff4cc450c5f39cd", "filename": "src/tools/clippy/tests/ui-internal/unnecessary_symbol_str.stderr", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a6808335d49522e0fe3758753af1ea721130696a/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a6808335d49522e0fe3758753af1ea721130696a/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-internal%2Funnecessary_symbol_str.stderr?ref=a6808335d49522e0fe3758753af1ea721130696a", "patch": "@@ -26,14 +26,13 @@ LL |     Symbol::intern(\"foo\").to_ident_string() != \"Self\";\n error: unnecessary `Symbol` to string conversion\n   --> $DIR/unnecessary_symbol_str.rs:14:5\n    |\n-LL |     &*Ident::invalid().as_str() == \"clippy\";\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Ident::invalid().name == rustc_span::sym::clippy`\n+LL |     &*Ident::empty().as_str() == \"clippy\";\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Ident::empty().name == rustc_span::sym::clippy`\n \n error: unnecessary `Symbol` to string conversion\n   --> $DIR/unnecessary_symbol_str.rs:15:5\n    |\n-LL |     \"clippy\" == Ident::invalid().to_string();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::sym::clippy == Ident::invalid().name`\n+LL |     \"clippy\" == Ident::empty().to_string();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `rustc_span::sym::clippy == Ident::empty().name`\n \n error: aborting due to 5 previous errors\n-"}]}