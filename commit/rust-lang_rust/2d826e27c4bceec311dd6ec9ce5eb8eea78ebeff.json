{"sha": "2d826e27c4bceec311dd6ec9ce5eb8eea78ebeff", "node_id": "C_kwDOAAsO6NoAKDJkODI2ZTI3YzRiY2VlYzMxMWRkNmVjOWNlNWViOGVlYTc4ZWJlZmY", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-02T21:04:37Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T14:26:57Z"}, "message": "Capture things as Lifetime object to simplify things", "tree": {"sha": "178078d161ce60738e8b928b3d7294ffc283f4b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/178078d161ce60738e8b928b3d7294ffc283f4b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2d826e27c4bceec311dd6ec9ce5eb8eea78ebeff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmLr1zEACgkQgTGiTgx5\n76+4uA//Yhd+ETzmf8BqUW3B+XvQDJXO/pjVXd6ROJFPIP/l/Vys48Tn0q+Wu+xi\nelWFVjbEIk0GQzw0PJmkdQQd2i3DxiHK12sz0acKTJWGjpuBaFR7r5Wj4cZ9XFOB\nQxR702nseFbSmKVnHtMv+IwdhOLacJFe03+B6aMT7BKaFT/jcyR5nwL5pRDJ6V0M\ny/W0A0+axmVoMfn3u8jurAGXcPE0+Oo4FJJ/4xdMBHF2cajGcrWuq99QVFtqhtxq\neID8uKm47OmtKefi9IGdCjmtfVidJgJao+BXjblw/Rkdw1WKWnamLsxW6Gg+slVz\nZeTojN6+DjHRXxu02bW1/9y+6lhNWoGzmA9/v6sgNdp22e0sRt0n2fH8HgxTIyyw\nHWgUuIn6zZxm34at0M+gJeCtNHweLhh6hunx2Pv7+12p3UnXG11Fn9iKIiao3h22\nOP92PtHREHpoDwYZ4q+CDmOaxBwJSYJdRit4Cefn1qqnqyYjAQ4EPdy2/AH95cxx\nF/4t7cOJd6rv+Lu11tHAMhtgbknvrhlPl7u7BQ4FDKxKpFXzvHq3aSjtx6hiLez4\n7ES9BrGP3BUm+WT6+qXVa4LBGOpbuamB8M6A4fMhmXuSqFsc6fUUbjMrXvtfX9h1\ncW8riWy06TJRbcRc3E3pFqwVw9j1TBYxKnssZbe2Sh8gRhYSfe0=\n=jbts\n-----END PGP SIGNATURE-----", "payload": "tree 178078d161ce60738e8b928b3d7294ffc283f4b7\nparent f6b4dd15417db0303da361a38531a45444948c55\nauthor Santiago Pastorino <spastorino@gmail.com> 1659474277 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1659623217 -0300\n\nCapture things as Lifetime object to simplify things\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2d826e27c4bceec311dd6ec9ce5eb8eea78ebeff", "html_url": "https://github.com/rust-lang/rust/commit/2d826e27c4bceec311dd6ec9ce5eb8eea78ebeff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2d826e27c4bceec311dd6ec9ce5eb8eea78ebeff/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6b4dd15417db0303da361a38531a45444948c55", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6b4dd15417db0303da361a38531a45444948c55", "html_url": "https://github.com/rust-lang/rust/commit/f6b4dd15417db0303da361a38531a45444948c55"}], "stats": {"total": 108, "additions": 59, "deletions": 49}, "files": [{"sha": "1e8978e6e83f42deb2674c791830ead30edc3ec7", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 59, "deletions": 49, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/2d826e27c4bceec311dd6ec9ce5eb8eea78ebeff/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2d826e27c4bceec311dd6ec9ce5eb8eea78ebeff/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=2d826e27c4bceec311dd6ec9ce5eb8eea78ebeff", "patch": "@@ -140,9 +140,7 @@ struct LifetimeCaptureContext {\n     captures: FxHashMap<\n         LocalDefId, // original parameter id\n         (\n-            Span,        // Span\n-            NodeId,      // synthetized parameter id\n-            ParamName,   // parameter name\n+            Lifetime,    // Lifetime parameter\n             LifetimeRes, // original resolution\n         ),\n     >,\n@@ -1363,20 +1361,20 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             debug!(?collected_lifetimes);\n \n             let lifetime_defs = lctx.arena.alloc_from_iter(collected_lifetimes.iter().map(\n-                |(_, &(span, p_id, p_name, _))| {\n-                    let hir_id = lctx.lower_node_id(p_id);\n-                    debug_assert_ne!(lctx.opt_local_def_id(p_id), None);\n+                |(_, &(lifetime, _))| {\n+                    let hir_id = lctx.lower_node_id(lifetime.id);\n+                    debug_assert_ne!(lctx.opt_local_def_id(lifetime.id), None);\n \n-                    let kind = if p_name.ident().name == kw::UnderscoreLifetime {\n-                        hir::LifetimeParamKind::Elided\n+                    let (name, kind) = if lifetime.ident.name == kw::UnderscoreLifetime {\n+                        (hir::ParamName::Fresh, hir::LifetimeParamKind::Elided)\n                     } else {\n-                        hir::LifetimeParamKind::Explicit\n+                        (hir::ParamName::Plain(lifetime.ident), hir::LifetimeParamKind::Explicit)\n                     };\n \n                     hir::GenericParam {\n                         hir_id,\n-                        name: p_name,\n-                        span,\n+                        name,\n+                        span: lifetime.ident.span,\n                         pure_wrt_drop: false,\n                         kind: hir::GenericParamKind::Lifetime { kind },\n                         colon_span: None,\n@@ -1403,9 +1401,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         });\n \n         let lifetimes = self.arena.alloc_from_iter(collected_lifetimes.into_iter().map(\n-            |(_, (span, _, p_name, res))| {\n+            |(_, (lifetime, res))| {\n                 let id = self.next_node_id();\n-                let ident = Ident::new(p_name.ident().name, span);\n+                let span = lifetime.ident.span;\n+\n+                let ident = if lifetime.ident.name == kw::UnderscoreLifetime {\n+                    Ident::with_dummy_span(kw::UnderscoreLifetime)\n+                } else {\n+                    lifetime.ident\n+                };\n+\n                 let l = self.new_named_lifetime_with_res(id, span, ident, res);\n                 hir::GenericArg::Lifetime(l)\n             },\n@@ -1446,9 +1451,6 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         remapping: &mut FxHashMap<LocalDefId, LocalDefId>,\n     ) {\n         for lifetime in lifetimes_in_bounds {\n-            let ident = lifetime.ident;\n-            let span = ident.span;\n-\n             let res = self.resolver.get_lifetime_res(lifetime.id).unwrap_or(LifetimeRes::Error);\n             debug!(?res);\n \n@@ -1457,39 +1459,34 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                     LifetimeRes::Param { param: old_def_id, binder: _ } => {\n                         if remapping.get(&old_def_id).is_none() {\n                             let node_id = self.next_node_id();\n-                            let name = ParamName::Plain(ident);\n \n                             let new_def_id = self.create_def(\n                                 parent_def_id,\n                                 node_id,\n-                                DefPathData::LifetimeNs(name.ident().name),\n+                                DefPathData::LifetimeNs(lifetime.ident.name),\n                             );\n-\n                             remapping.insert(old_def_id, new_def_id);\n-                            captured_lifetimes\n-                                .captures\n-                                .insert(old_def_id, (span, node_id, name, res));\n+\n+                            let new_lifetime = Lifetime { id: node_id, ident: lifetime.ident };\n+                            captured_lifetimes.captures.insert(old_def_id, (new_lifetime, res));\n                         }\n                     }\n \n                     LifetimeRes::Fresh { param, binder: _ } => {\n-                        debug_assert_eq!(ident.name, kw::UnderscoreLifetime);\n+                        debug_assert_eq!(lifetime.ident.name, kw::UnderscoreLifetime);\n                         let old_def_id = self.local_def_id(param);\n                         if remapping.get(&old_def_id).is_none() {\n                             let node_id = self.next_node_id();\n \n-                            let name = ParamName::Fresh;\n-\n                             let new_def_id = self.create_def(\n                                 parent_def_id,\n                                 node_id,\n                                 DefPathData::LifetimeNs(kw::UnderscoreLifetime),\n                             );\n-\n                             remapping.insert(old_def_id, new_def_id);\n-                            captured_lifetimes\n-                                .captures\n-                                .insert(old_def_id, (span, node_id, name, res));\n+\n+                            let new_lifetime = Lifetime { id: node_id, ident: lifetime.ident };\n+                            captured_lifetimes.captures.insert(old_def_id, (new_lifetime, res));\n                         }\n                     }\n \n@@ -1703,31 +1700,37 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         let extra_lifetime_params = self.resolver.take_extra_lifetime_params(opaque_ty_node_id);\n         debug!(?extra_lifetime_params);\n         for (ident, outer_node_id, outer_res) in extra_lifetime_params {\n-            let Ident { name, span } = ident;\n             let outer_def_id = self.local_def_id(outer_node_id);\n             let inner_node_id = self.next_node_id();\n \n             // Add a definition for the in scope lifetime def.\n-            let inner_def_id =\n-                self.create_def(opaque_ty_def_id, inner_node_id, DefPathData::LifetimeNs(name));\n+            let inner_def_id = self.create_def(\n+                opaque_ty_def_id,\n+                inner_node_id,\n+                DefPathData::LifetimeNs(ident.name),\n+            );\n             new_remapping.insert(outer_def_id, inner_def_id);\n \n-            let (p_name, inner_res) = match outer_res {\n+            let inner_res = match outer_res {\n                 // Input lifetime like `'a`:\n                 LifetimeRes::Param { param, .. } => {\n-                    (hir::ParamName::Plain(ident), LifetimeRes::Param { param, binder: fn_node_id })\n+                    LifetimeRes::Param { param, binder: fn_node_id }\n                 }\n                 // Input lifetime like `'1`:\n                 LifetimeRes::Fresh { param, .. } => {\n-                    (hir::ParamName::Fresh, LifetimeRes::Fresh { param, binder: fn_node_id })\n+                    LifetimeRes::Fresh { param, binder: fn_node_id }\n                 }\n                 LifetimeRes::Static | LifetimeRes::Error => continue,\n                 res => {\n-                    panic!(\"Unexpected lifetime resolution {:?} for {:?} at {:?}\", res, ident, span)\n+                    panic!(\n+                        \"Unexpected lifetime resolution {:?} for {:?} at {:?}\",\n+                        res, ident, ident.span\n+                    )\n                 }\n             };\n \n-            captures.insert(outer_def_id, (span, inner_node_id, p_name, inner_res));\n+            let new_lifetime = Lifetime { id: inner_node_id, ident };\n+            captures.insert(outer_def_id, (new_lifetime, inner_res));\n         }\n \n         debug!(?captures);\n@@ -1765,20 +1768,20 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             let future_bound = ret;\n \n             let generic_params =\n-                this.arena.alloc_from_iter(captures.iter().map(|(_, &(span, p_id, p_name, _))| {\n-                    let hir_id = this.lower_node_id(p_id);\n-                    debug_assert_ne!(this.opt_local_def_id(p_id), None);\n+                this.arena.alloc_from_iter(captures.iter().map(|(_, &(lifetime, _))| {\n+                    let hir_id = this.lower_node_id(lifetime.id);\n+                    debug_assert_ne!(this.opt_local_def_id(lifetime.id), None);\n \n-                    let kind = if p_name.ident().name == kw::UnderscoreLifetime {\n-                        hir::LifetimeParamKind::Elided\n+                    let (name, kind) = if lifetime.ident.name == kw::UnderscoreLifetime {\n+                        (hir::ParamName::Fresh, hir::LifetimeParamKind::Elided)\n                     } else {\n-                        hir::LifetimeParamKind::Explicit\n+                        (hir::ParamName::Plain(lifetime.ident), hir::LifetimeParamKind::Explicit)\n                     };\n \n                     hir::GenericParam {\n                         hir_id,\n-                        name: p_name,\n-                        span,\n+                        name,\n+                        span: lifetime.ident.span,\n                         pure_wrt_drop: false,\n                         kind: hir::GenericParamKind::Lifetime { kind },\n                         colon_span: None,\n@@ -1818,9 +1821,16 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         // For the \"output\" lifetime parameters, we just want to\n         // generate `'_`.\n         let generic_args =\n-            self.arena.alloc_from_iter(captures.into_iter().map(|(_, (span, _, p_name, res))| {\n+            self.arena.alloc_from_iter(captures.into_iter().map(|(_, (lifetime, res))| {\n                 let id = self.next_node_id();\n-                let ident = Ident::new(p_name.ident().name, span);\n+                let span = lifetime.ident.span;\n+\n+                let ident = if lifetime.ident.name == kw::UnderscoreLifetime {\n+                    Ident::with_dummy_span(kw::UnderscoreLifetime)\n+                } else {\n+                    lifetime.ident\n+                };\n+\n                 let l = self.new_named_lifetime_with_res(id, span, ident, res);\n                 hir::GenericArg::Lifetime(l)\n             }));\n@@ -1912,7 +1922,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let p_name = ParamName::Plain(ident);\n                 if let Some(mut captured_lifetimes) = self.captured_lifetimes.take() {\n                     if let Entry::Occupied(o) = captured_lifetimes.captures.entry(param) {\n-                        param = self.local_def_id(o.get().1);\n+                        param = self.local_def_id(o.get().0.id);\n                     }\n \n                     self.captured_lifetimes = Some(captured_lifetimes);\n@@ -1926,7 +1936,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                 let mut param = self.local_def_id(param);\n                 if let Some(mut captured_lifetimes) = self.captured_lifetimes.take() {\n                     if let Entry::Occupied(o) = captured_lifetimes.captures.entry(param) {\n-                        param = self.local_def_id(o.get().1);\n+                        param = self.local_def_id(o.get().0.id);\n                     }\n \n                     self.captured_lifetimes = Some(captured_lifetimes);"}]}