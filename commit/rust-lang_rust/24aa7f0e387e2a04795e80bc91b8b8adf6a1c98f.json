{"sha": "24aa7f0e387e2a04795e80bc91b8b8adf6a1c98f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0YWE3ZjBlMzg3ZTJhMDQ3OTVlODBiYzkxYjhiOGFkZjZhMWM5OGY=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-12-21T07:02:38Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-01-05T20:00:57Z"}, "message": "creader: Use a single struct", "tree": {"sha": "cfe1ecc23d63447416191eb9111a916ad7ec38c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfe1ecc23d63447416191eb9111a916ad7ec38c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24aa7f0e387e2a04795e80bc91b8b8adf6a1c98f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24aa7f0e387e2a04795e80bc91b8b8adf6a1c98f", "html_url": "https://github.com/rust-lang/rust/commit/24aa7f0e387e2a04795e80bc91b8b8adf6a1c98f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24aa7f0e387e2a04795e80bc91b8b8adf6a1c98f/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5171b325bd2c5600649cc98e65db0ef2e72c3f89", "url": "https://api.github.com/repos/rust-lang/rust/commits/5171b325bd2c5600649cc98e65db0ef2e72c3f89", "html_url": "https://github.com/rust-lang/rust/commit/5171b325bd2c5600649cc98e65db0ef2e72c3f89"}], "stats": {"total": 104, "additions": 46, "deletions": 58}, "files": [{"sha": "2e6dbf077eed193fea30f602226fb4253cc89d0f", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 41, "deletions": 53, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/24aa7f0e387e2a04795e80bc91b8b8adf6a1c98f/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa7f0e387e2a04795e80bc91b8b8adf6a1c98f/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=24aa7f0e387e2a04795e80bc91b8b8adf6a1c98f", "patch": "@@ -37,32 +37,12 @@ use syntax::visit;\n use util::fs;\n use log;\n \n-struct Env<'a> {\n+pub struct CrateReader<'a> {\n     sess: &'a Session,\n     next_crate_num: ast::CrateNum,\n }\n \n-// Traverses an AST, reading all the information about use'd crates and extern\n-// libraries necessary for later resolving, typechecking, linking, etc.\n-pub fn read_crates(sess: &Session,\n-                   krate: &ast::Crate) {\n-    let mut e = Env {\n-        sess: sess,\n-        next_crate_num: sess.cstore.next_crate_num(),\n-    };\n-    e.visit_crate(krate);\n-    visit::walk_crate(&mut e, krate);\n-    if log_enabled!(log::DEBUG) {\n-        dump_crates(&sess.cstore);\n-    }\n-    warn_if_multiple_versions(sess.diagnostic(), &sess.cstore);\n-\n-    for &(ref name, kind) in sess.opts.libs.iter() {\n-        register_native_lib(sess, None, name.clone(), kind);\n-    }\n-}\n-\n-impl<'a, 'v> visit::Visitor<'v> for Env<'a> {\n+impl<'a, 'v> visit::Visitor<'v> for CrateReader<'a> {\n     fn visit_view_item(&mut self, a: &ast::ViewItem) {\n         self.process_view_item(a);\n         visit::walk_view_item(self, a);\n@@ -173,8 +153,31 @@ fn register_native_lib(sess: &Session,\n     sess.cstore.add_used_library(name, kind);\n }\n \n-impl<'a> Env<'a> {\n-    fn visit_crate(&self, c: &ast::Crate) {\n+impl<'a> CrateReader<'a> {\n+    pub fn new(sess: &'a Session) -> CrateReader<'a> {\n+        CrateReader {\n+            sess: sess,\n+            next_crate_num: sess.cstore.next_crate_num(),\n+        }\n+    }\n+\n+    // Traverses an AST, reading all the information about use'd crates and extern\n+    // libraries necessary for later resolving, typechecking, linking, etc.\n+    pub fn read_crates(&mut self, krate: &ast::Crate) {\n+        self.process_crate(krate);\n+        visit::walk_crate(self, krate);\n+\n+        if log_enabled!(log::DEBUG) {\n+            dump_crates(&self.sess.cstore);\n+        }\n+        warn_if_multiple_versions(self.sess.diagnostic(), &self.sess.cstore);\n+\n+        for &(ref name, kind) in self.sess.opts.libs.iter() {\n+            register_native_lib(self.sess, None, name.clone(), kind);\n+        }\n+    }\n+\n+    fn process_crate(&self, c: &ast::Crate) {\n         for a in c.attrs.iter().filter(|m| m.name() == \"link_args\") {\n             match a.value_str() {\n                 Some(ref linkarg) => self.sess.cstore.add_used_link_args(linkarg.get()),\n@@ -445,35 +448,20 @@ impl<'a> Env<'a> {\n             (dep.cnum, local_cnum)\n         }).collect()\n     }\n-}\n-\n-pub struct PluginMetadataReader<'a> {\n-    env: Env<'a>,\n-}\n-\n-impl<'a> PluginMetadataReader<'a> {\n-    pub fn new(sess: &'a Session) -> PluginMetadataReader<'a> {\n-        PluginMetadataReader {\n-            env: Env {\n-                sess: sess,\n-                next_crate_num: sess.cstore.next_crate_num(),\n-            }\n-        }\n-    }\n \n     pub fn read_plugin_metadata(&mut self,\n                                 krate: &ast::ViewItem) -> PluginMetadata {\n-        let info = self.env.extract_crate_info(krate).unwrap();\n-        let target_triple = self.env.sess.opts.target_triple[];\n+        let info = self.extract_crate_info(krate).unwrap();\n+        let target_triple = self.sess.opts.target_triple[];\n         let is_cross = target_triple != config::host_triple();\n         let mut should_link = info.should_link && !is_cross;\n         let mut load_ctxt = loader::Context {\n-            sess: self.env.sess,\n+            sess: self.sess,\n             span: krate.span,\n             ident: info.ident[],\n             crate_name: info.name[],\n             hash: None,\n-            filesearch: self.env.sess.host_filesearch(PathKind::Crate),\n+            filesearch: self.sess.host_filesearch(PathKind::Crate),\n             triple: config::host_triple(),\n             root: &None,\n             rejected_via_hash: vec!(),\n@@ -486,17 +474,17 @@ impl<'a> PluginMetadataReader<'a> {\n                 // try loading from target crates (only valid if there are\n                 // no syntax extensions)\n                 load_ctxt.triple = target_triple;\n-                load_ctxt.filesearch = self.env.sess.target_filesearch(PathKind::Crate);\n+                load_ctxt.filesearch = self.sess.target_filesearch(PathKind::Crate);\n                 let lib = load_ctxt.load_library_crate();\n                 if decoder::get_plugin_registrar_fn(lib.metadata.as_slice()).is_some() {\n                     let message = format!(\"crate `{}` contains a plugin_registrar fn but \\\n-                                  only a version for triple `{}` could be found (need {})\",\n-                                  info.ident, target_triple, config::host_triple());\n-                    self.env.sess.span_err(krate.span, message[]);\n+                                           only a version for triple `{}` could be found (need {})\",\n+                                           info.ident, target_triple, config::host_triple());\n+                    self.sess.span_err(krate.span, message[]);\n                     // need to abort now because the syntax expansion\n                     // code will shortly attempt to load and execute\n                     // code from the found library.\n-                    self.env.sess.abort_if_errors();\n+                    self.sess.abort_if_errors();\n                 }\n                 should_link = info.should_link;\n                 lib\n@@ -510,8 +498,8 @@ impl<'a> PluginMetadataReader<'a> {\n         if library.dylib.is_none() && registrar.is_some() {\n             let message = format!(\"plugin crate `{}` only found in rlib format, \\\n                                    but must be available in dylib format\",\n-                                  info.ident);\n-            self.env.sess.span_err(krate.span, message[]);\n+                                   info.ident);\n+            self.sess.span_err(krate.span, message[]);\n             // No need to abort because the loading code will just ignore this\n             // empty dylib.\n         }\n@@ -520,10 +508,10 @@ impl<'a> PluginMetadataReader<'a> {\n             macros: macros,\n             registrar_symbol: registrar,\n         };\n-        if should_link && self.env.existing_match(info.name[], None).is_none() {\n+        if should_link && self.existing_match(info.name[], None).is_none() {\n             // register crate now to avoid double-reading metadata\n-            self.env.register_crate(&None, info.ident[],\n-                                    info.name[], krate.span, library);\n+            self.register_crate(&None, info.ident[],\n+                                info.name[], krate.span, library);\n         }\n         pc\n     }"}, {"sha": "19d7c24c9536f938758c00b42389a969096c1d10", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24aa7f0e387e2a04795e80bc91b8b8adf6a1c98f/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa7f0e387e2a04795e80bc91b8b8adf6a1c98f/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=24aa7f0e387e2a04795e80bc91b8b8adf6a1c98f", "patch": "@@ -11,7 +11,7 @@\n //! Used by `rustc` when loading a plugin.\n \n use session::Session;\n-use metadata::creader::PluginMetadataReader;\n+use metadata::creader::CrateReader;\n use plugin::registry::Registry;\n \n use std::mem;\n@@ -48,15 +48,15 @@ pub struct Plugins {\n \n struct PluginLoader<'a> {\n     sess: &'a Session,\n-    reader: PluginMetadataReader<'a>,\n+    reader: CrateReader<'a>,\n     plugins: Plugins,\n }\n \n impl<'a> PluginLoader<'a> {\n     fn new(sess: &'a Session) -> PluginLoader<'a> {\n         PluginLoader {\n             sess: sess,\n-            reader: PluginMetadataReader::new(sess),\n+            reader: CrateReader::new(sess),\n             plugins: Plugins {\n                 macros: vec!(),\n                 registrars: vec!(),"}, {"sha": "f23cddf833cc94d2d5c09ea29fc75ecba1eb7621", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/24aa7f0e387e2a04795e80bc91b8b8adf6a1c98f/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24aa7f0e387e2a04795e80bc91b8b8adf6a1c98f/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=24aa7f0e387e2a04795e80bc91b8b8adf6a1c98f", "patch": "@@ -12,7 +12,7 @@ use rustc::session::Session;\n use rustc::session::config::{self, Input, OutputFilenames};\n use rustc::session::search_paths::PathKind;\n use rustc::lint;\n-use rustc::metadata::creader;\n+use rustc::metadata::creader::CrateReader;\n use rustc::middle::{stability, ty, reachable};\n use rustc::middle::dependency_format;\n use rustc::middle;\n@@ -354,7 +354,7 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n     let krate = ast_map.krate();\n \n     time(time_passes, \"external crate/lib resolution\", (), |_|\n-         creader::read_crates(&sess, krate));\n+         CrateReader::new(&sess).read_crates(krate));\n \n     let lang_items = time(time_passes, \"language item collection\", (), |_|\n                           middle::lang_items::collect_language_items(krate, &sess));"}]}