{"sha": "85e4866320e992126e73d1c640f16a4c755a66b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZTQ4NjYzMjBlOTkyMTI2ZTczZDFjNjQwZjE2YTRjNzU1YTY2YjM=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-06-22T06:24:51Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-06-22T06:24:51Z"}, "message": "PathParameters -> GenericArgs fixes", "tree": {"sha": "cdf3456cd2f6526028f2c5d2291bab6d728d37aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdf3456cd2f6526028f2c5d2291bab6d728d37aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85e4866320e992126e73d1c640f16a4c755a66b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85e4866320e992126e73d1c640f16a4c755a66b3", "html_url": "https://github.com/rust-lang/rust/commit/85e4866320e992126e73d1c640f16a4c755a66b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85e4866320e992126e73d1c640f16a4c755a66b3/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "083a7eaa1a18ddb9073909432dea903bff983d29", "url": "https://api.github.com/repos/rust-lang/rust/commits/083a7eaa1a18ddb9073909432dea903bff983d29", "html_url": "https://github.com/rust-lang/rust/commit/083a7eaa1a18ddb9073909432dea903bff983d29"}], "stats": {"total": 64, "additions": 26, "deletions": 38}, "files": [{"sha": "ad8da5a4350bb6291da72528849bef7672ec0fda", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/85e4866320e992126e73d1c640f16a4c755a66b3/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e4866320e992126e73d1c640f16a4c755a66b3/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=85e4866320e992126e73d1c640f16a4c755a66b3", "patch": "@@ -168,7 +168,7 @@ pub trait Resolver {\n         span: Span,\n         crate_root: Option<&str>,\n         components: &[&str],\n-        params: Option<P<hir::PathParameters>>\n+        params: Option<P<hir::GenericArgs>>,\n         is_value: bool,\n     ) -> hir::Path;\n }\n@@ -1176,7 +1176,8 @@ impl<'a> LoweringContext<'a> {\n                         // Set the name to `impl Bound1 + Bound2`\n                         let exist_ty_name = Symbol::intern(&pprust::ty_to_string(t));\n                         self.lower_existential_impl_trait(\n-                            span, fn_def_id, exist_ty_name, |this| this.lower_bounds(bounds, itctx))\n+                            span, fn_def_id, exist_ty_name,\n+                            |this| this.lower_param_bounds(bounds, itctx))\n                     }\n                     ImplTraitContext::Universal(def_id) => {\n                         let def_node_id = self.next_id().node_id;\n@@ -1245,7 +1246,7 @@ impl<'a> LoweringContext<'a> {\n         span: Span,\n         fn_def_id: DefId,\n         exist_ty_name: Name,\n-        lower_bounds: impl FnOnce(&mut LoweringContext) -> hir::TyParamBounds,\n+        lower_bounds: impl FnOnce(&mut LoweringContext) -> hir::GenericBounds,\n     ) -> hir::Ty_ {\n         // We need to manually repeat the code of `next_id` because the lowering\n         // needs to happen while the owner_id is pointing to the item itself,\n@@ -1970,15 +1971,15 @@ impl<'a> LoweringContext<'a> {\n                 hir::intravisit::NestedVisitorMap::None\n             }\n \n-            fn visit_path_parameters(&mut self, span: Span, parameters: &'v hir::PathParameters) {\n+            fn visit_generic_args(&mut self, span: Span, parameters: &'v hir::GenericArgs) {\n                 // Don't collect elided lifetimes used inside of `Fn()` syntax.\n                 if parameters.parenthesized {\n                     let old_collect_elided_lifetimes = self.collect_elided_lifetimes;\n                     self.collect_elided_lifetimes = false;\n-                    hir::intravisit::walk_path_parameters(self, span, parameters);\n+                    hir::intravisit::walk_generic_args(self, span, parameters);\n                     self.collect_elided_lifetimes = old_collect_elided_lifetimes;\n                 } else {\n-                    hir::intravisit::walk_path_parameters(self, span, parameters);\n+                    hir::intravisit::walk_generic_args(self, span, parameters);\n                 }\n             }\n \n@@ -2013,11 +2014,12 @@ impl<'a> LoweringContext<'a> {\n             }\n \n             fn visit_generic_param(&mut self, param: &'v hir::GenericParam) {\n-                // Record the introduction of 'a in `for<'a> ...`\n-                if let hir::GenericParam::Lifetime(ref lt_def) = *param {\n+                 // Record the introduction of 'a in `for<'a> ...`\n+                if let hir::GenericParamKind::Lifetime { .. } = param.kind {\n                     // Introduce lifetimes one at a time so that we can handle\n                     // cases like `fn foo<'d>() -> impl for<'a, 'b: 'a, 'c: 'b + 'd>`\n-                    self.currently_bound_lifetimes.push(lt_def.lifetime.name);\n+                    let lt_name = hir::LifetimeName::Param(param.name);\n+                    self.currently_bound_lifetimes.push(lt_name);\n                 }\n \n                 hir::intravisit::walk_generic_param(self, param);\n@@ -2034,8 +2036,7 @@ impl<'a> LoweringContext<'a> {\n                             return;\n                         }\n                     }\n-                    name @ hir::LifetimeName::Fresh(_) => name,\n-                    name @ hir::LifetimeName::Name(_) => name,\n+                    hir::LifetimeName::Param(_) => lifetime.name,\n                     hir::LifetimeName::Static => return,\n                 };\n \n@@ -2117,9 +2118,8 @@ impl<'a> LoweringContext<'a> {\n             };\n \n             // \"<Output = T>\"\n-            let future_params = P(hir::PathParameters {\n-                lifetimes: hir_vec![],\n-                types: hir_vec![],\n+            let future_params = P(hir::GenericArgs {\n+                args: hir_vec![],\n                 bindings: hir_vec![hir::TypeBinding {\n                     name: Symbol::intern(FN_OUTPUT_NAME),\n                     ty: output_ty,\n@@ -2129,13 +2129,11 @@ impl<'a> LoweringContext<'a> {\n                 parenthesized: false,\n             });\n \n-            let let future_path =\n+            let future_path =\n                 this.std_path(span, &[\"future\", \"Future\"], Some(future_params), false);\n \n-            // FIXME(cramertj) collect input lifetimes to function and add them to\n-            // the output `impl Trait` type here.\n             let mut bounds = vec![\n-                hir::TyParamBound::TraitTyParamBound(\n+                hir::GenericBound::Trait(\n                     hir::PolyTraitRef {\n                         trait_ref: hir::TraitRef {\n                             path: future_path,\n@@ -2149,7 +2147,7 @@ impl<'a> LoweringContext<'a> {\n             ];\n \n             if let Some((name, span)) = bound_lifetime {\n-                bounds.push(hir::RegionTyParamBound(\n+                bounds.push(hir::GenericBound::Outlives(\n                     hir::Lifetime { id: this.next_id().node_id, name, span }));\n             }\n \n@@ -4366,7 +4364,7 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         span: Span,\n         components: &[&str],\n-        params: Option<P<hir::PathParameters>>,\n+        params: Option<P<hir::GenericArgs>>,\n         attrs: ThinVec<Attribute>,\n     ) -> hir::Expr {\n         let path = self.std_path(span, components, params, true);\n@@ -4545,7 +4543,7 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         span: Span,\n         components: &[&str],\n-        params: Option<P<hir::PathParameters>>,\n+        params: Option<P<hir::GenericArgs>>,\n         is_value: bool\n     ) -> hir::Path {\n         self.resolver"}, {"sha": "1e03381861b9b82d4ecc3f556385515dcd2a2aaa", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85e4866320e992126e73d1c640f16a4c755a66b3/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e4866320e992126e73d1c640f16a4c755a66b3/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=85e4866320e992126e73d1c640f16a4c755a66b3", "patch": "@@ -174,7 +174,7 @@ impl<'hir> MapEntry<'hir> {\n         match self {\n             EntryItem(_, _, ref item) => {\n                 match item.node {\n-                    ItemFn(ref fn_decl, _, _, _, _, _) => Some(&fn_decl),\n+                    ItemFn(ref fn_decl, _, _, _) => Some(&fn_decl),\n                     _ => None,\n                 }\n             }"}, {"sha": "b99a4a03de9d5cc43f8264294bd9d05cc7bdecc4", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/85e4866320e992126e73d1c640f16a4c755a66b3/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e4866320e992126e73d1c640f16a4c755a66b3/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=85e4866320e992126e73d1c640f16a4c755a66b3", "patch": "@@ -245,16 +245,6 @@ pub enum LifetimeName {\n }\n \n impl LifetimeName {\n-    pub fn is_elided(self) -> bool {\n-        match self {\n-            LifetimeName::Implicit\n-            | LifetimeName::Underscore => true,\n-            LifetimeName::Fresh(_)\n-            | LifetimeName::Static\n-            | LifetimeName::Name(_) => false,\n-        }\n-    }\n-\n     pub fn name(&self) -> Name {\n         use self::LifetimeName::*;\n         match *self {\n@@ -265,7 +255,7 @@ impl LifetimeName {\n         }\n     }\n \n-    fn is_elided(&self) -> bool {\n+    pub fn is_elided(&self) -> bool {\n         use self::LifetimeName::*;\n         match self {\n             Implicit | Underscore => true,"}, {"sha": "792edf4d12b1d25a3cc28ea7463ee30a0bd6852b", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85e4866320e992126e73d1c640f16a4c755a66b3/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85e4866320e992126e73d1c640f16a4c755a66b3/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=85e4866320e992126e73d1c640f16a4c755a66b3", "patch": "@@ -55,7 +55,7 @@ use syntax::util::lev_distance::find_best_match_for_name;\n \n use syntax::visit::{self, FnKind, Visitor};\n use syntax::attr;\n-use syntax::ast::{Arm, IsAsync, BindingMode, Block, Crate, Expr, ExprKind, FnHeader};\n+use syntax::ast::{Arm, IsAsync, BindingMode, Block, Crate, Expr, ExprKind};\n use syntax::ast::{FnDecl, ForeignItem, ForeignItemKind, GenericParamKind, Generics};\n use syntax::ast::{Item, ItemKind, ImplItem, ImplItemKind};\n use syntax::ast::{Label, Local, Mutability, Pat, PatKind, Path};\n@@ -1494,7 +1494,7 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n         span: Span,\n         crate_root: Option<&str>,\n         components: &[&str],\n-        params: Option<hir::PathParameters>,\n+        args: Option<P<hir::GenericArgs>>,\n         is_value: bool\n     ) -> hir::Path {\n         let mut segments = iter::once(keywords::CrateRoot.name())\n@@ -1504,11 +1504,11 @@ impl<'a> hir::lowering::Resolver for Resolver<'a> {\n                     .map(Symbol::intern)\n             ).map(hir::PathSegment::from_name).collect::<Vec<_>>();\n \n-        if let Some(parameters) = params {\n-            let last_name = segments.last().unwrap().name;\n+        if let Some(args) = args {\n+            let name = segments.last().unwrap().name;\n             *segments.last_mut().unwrap() = hir::PathSegment {\n                 name,\n-                parameters,\n+                args: Some(args),\n                 infer_types: true,\n             };\n         }"}]}