{"sha": "38638d37f70667d8ac5ea6e5cc47e0e04f94d247", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NjM4ZDM3ZjcwNjY3ZDhhYzVlYTZlNWNjNDdlMGUwNGY5NGQyNDc=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-08T12:29:46Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-03-17T19:51:54Z"}, "message": "trans: Take a &Builder in call_memcpy, like call_memset.", "tree": {"sha": "0d5771449ac9b79b8b2e9d39cb02cdf231650545", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d5771449ac9b79b8b2e9d39cb02cdf231650545"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38638d37f70667d8ac5ea6e5cc47e0e04f94d247", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38638d37f70667d8ac5ea6e5cc47e0e04f94d247", "html_url": "https://github.com/rust-lang/rust/commit/38638d37f70667d8ac5ea6e5cc47e0e04f94d247", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38638d37f70667d8ac5ea6e5cc47e0e04f94d247/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b63a5eed6e8a2379aabe4eb0328ad238c057c60f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b63a5eed6e8a2379aabe4eb0328ad238c057c60f", "html_url": "https://github.com/rust-lang/rust/commit/b63a5eed6e8a2379aabe4eb0328ad238c057c60f"}], "stats": {"total": 73, "additions": 38, "deletions": 35}, "files": [{"sha": "46a76b609892bbb04c923a72cb389588dbef4722", "filename": "src/librustc_trans/trans/abi.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/38638d37f70667d8ac5ea6e5cc47e0e04f94d247/src%2Flibrustc_trans%2Ftrans%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38638d37f70667d8ac5ea6e5cc47e0e04f94d247/src%2Flibrustc_trans%2Ftrans%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fabi.rs?ref=38638d37f70667d8ac5ea6e5cc47e0e04f94d247", "patch": "@@ -10,7 +10,8 @@\n \n use llvm::{self, ValueRef};\n use trans::base;\n-use trans::build::*;\n+use trans::build::B;\n+use trans::builder::Builder;\n use trans::common::{type_is_fat_ptr, Block};\n use trans::context::CrateContext;\n use trans::cabi_x86;\n@@ -145,27 +146,26 @@ impl ArgType {\n     /// lvalue for the original Rust type of this argument/return.\n     /// Can be used for both storing formal arguments into Rust variables\n     /// or results of call/invoke instructions into their destinations.\n-    pub fn store(&self, bcx: Block, mut val: ValueRef, dst: ValueRef) {\n+    pub fn store(&self, b: &Builder, mut val: ValueRef, dst: ValueRef) {\n         if self.is_ignore() {\n             return;\n         }\n         if self.is_indirect() {\n-            let llsz = llsize_of(bcx.ccx(), self.ty);\n-            let llalign = llalign_of_min(bcx.ccx(), self.ty);\n-            base::call_memcpy(bcx, dst, val, llsz, llalign as u32);\n+            let llsz = llsize_of(b.ccx, self.ty);\n+            let llalign = llalign_of_min(b.ccx, self.ty);\n+            base::call_memcpy(b, dst, val, llsz, llalign as u32);\n         } else if let Some(ty) = self.cast {\n-            let store = Store(bcx, val, PointerCast(bcx, dst, ty.ptr_to()));\n-            let llalign = llalign_of_min(bcx.ccx(), self.ty);\n-            if !bcx.unreachable.get() {\n-                unsafe {\n-                    llvm::LLVMSetAlignment(store, llalign);\n-                }\n+            let cast_dst = b.pointercast(dst, ty.ptr_to());\n+            let store = b.store(val, cast_dst);\n+            let llalign = llalign_of_min(b.ccx, self.ty);\n+            unsafe {\n+                llvm::LLVMSetAlignment(store, llalign);\n             }\n         } else {\n-            if self.original_ty == Type::i1(bcx.ccx()) {\n-                val = ZExt(bcx, val, Type::i8(bcx.ccx()));\n+            if self.original_ty == Type::i1(b.ccx) {\n+                val = b.zext(val, Type::i8(b.ccx));\n             }\n-            Store(bcx, val, dst);\n+            b.store(val, dst);\n         }\n     }\n \n@@ -178,7 +178,9 @@ impl ArgType {\n         }\n         let val = llvm::get_param(bcx.fcx.llfn, *idx as c_uint);\n         *idx += 1;\n-        self.store(bcx, val, dst);\n+        if !bcx.unreachable.get() {\n+            self.store(&B(bcx), val, dst);\n+        }\n     }\n }\n "}, {"sha": "8e1ea73566954fa85d723f2cb34a5328a0bad732", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/38638d37f70667d8ac5ea6e5cc47e0e04f94d247/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38638d37f70667d8ac5ea6e5cc47e0e04f94d247/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=38638d37f70667d8ac5ea6e5cc47e0e04f94d247", "patch": "@@ -1096,37 +1096,37 @@ pub fn trans_unwind_resume(bcx: Block, lpval: ValueRef) {\n     }\n }\n \n-\n-pub fn call_memcpy(cx: Block, dst: ValueRef, src: ValueRef, n_bytes: ValueRef, align: u32) {\n+pub fn call_memcpy<'bcx, 'tcx>(b: &Builder<'bcx, 'tcx>,\n+                               dst: ValueRef,\n+                               src: ValueRef,\n+                               n_bytes: ValueRef,\n+                               align: u32) {\n     let _icx = push_ctxt(\"call_memcpy\");\n-    let ccx = cx.ccx();\n+    let ccx = b.ccx;\n     let ptr_width = &ccx.sess().target.target.target_pointer_width[..];\n     let key = format!(\"llvm.memcpy.p0i8.p0i8.i{}\", ptr_width);\n     let memcpy = ccx.get_intrinsic(&key);\n-    let src_ptr = PointerCast(cx, src, Type::i8p(ccx));\n-    let dst_ptr = PointerCast(cx, dst, Type::i8p(ccx));\n-    let size = IntCast(cx, n_bytes, ccx.int_type());\n+    let src_ptr = b.pointercast(src, Type::i8p(ccx));\n+    let dst_ptr = b.pointercast(dst, Type::i8p(ccx));\n+    let size = b.intcast(n_bytes, ccx.int_type());\n     let align = C_i32(ccx, align as i32);\n     let volatile = C_bool(ccx, false);\n-    Call(cx,\n-         memcpy,\n-         &[dst_ptr, src_ptr, size, align, volatile],\n-         DebugLoc::None);\n+    b.call(memcpy, &[dst_ptr, src_ptr, size, align, volatile], None);\n }\n \n pub fn memcpy_ty<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, dst: ValueRef, src: ValueRef, t: Ty<'tcx>) {\n     let _icx = push_ctxt(\"memcpy_ty\");\n     let ccx = bcx.ccx();\n \n-    if type_is_zero_size(ccx, t) {\n+    if type_is_zero_size(ccx, t) || bcx.unreachable.get() {\n         return;\n     }\n \n     if t.is_structural() {\n         let llty = type_of::type_of(ccx, t);\n         let llsz = llsize_of(ccx, llty);\n         let llalign = type_of::align_of(ccx, t);\n-        call_memcpy(bcx, dst, src, llsz, llalign as u32);\n+        call_memcpy(&B(bcx), dst, src, llsz, llalign as u32);\n     } else if common::type_is_fat_ptr(bcx.tcx(), t) {\n         let (data, extra) = load_fat_ptr(bcx, src, t);\n         store_fat_ptr(bcx, data, extra, dst, t);\n@@ -1746,7 +1746,7 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n                 assert_eq!(cast_ty, None);\n                 let llsz = llsize_of(self.ccx, self.fn_ty.ret.ty);\n                 let llalign = llalign_of_min(self.ccx, self.fn_ty.ret.ty);\n-                call_memcpy(ret_cx, get_param(self.llfn, 0),\n+                call_memcpy(&B(ret_cx), get_param(self.llfn, 0),\n                             retslot, llsz, llalign as u32);\n                 RetVoid(ret_cx, ret_debug_location)\n             }"}, {"sha": "fcf2f4705ca18f9aa7b87a3d5744b36a0f5d6efa", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/38638d37f70667d8ac5ea6e5cc47e0e04f94d247/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38638d37f70667d8ac5ea6e5cc47e0e04f94d247/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=38638d37f70667d8ac5ea6e5cc47e0e04f94d247", "patch": "@@ -739,8 +739,11 @@ fn trans_call_inner<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n             let llrust_align = llalign_of_min(ccx, llrust_ret_ty);\n             let llalign = cmp::min(llforeign_align, llrust_align);\n             debug!(\"llrust_size={}\", llrust_size);\n-            base::call_memcpy(bcx, llretptr_i8, llscratch_i8,\n-                              C_uint(ccx, llrust_size), llalign as u32);\n+\n+            if !bcx.unreachable.get() {\n+                base::call_memcpy(&B(bcx), llretptr_i8, llscratch_i8,\n+                                  C_uint(ccx, llrust_size), llalign as u32);\n+            }\n             base::call_lifetime_end(bcx, llscratch);\n         } else if let Some(llretslot) = opt_llretslot {\n             base::store_ty(bcx, llret, llretslot, output.unwrap());"}, {"sha": "7a0ca86f5a27087656df902e288232868287dbbd", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38638d37f70667d8ac5ea6e5cc47e0e04f94d247/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38638d37f70667d8ac5ea6e5cc47e0e04f94d247/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=38638d37f70667d8ac5ea6e5cc47e0e04f94d247", "patch": "@@ -174,11 +174,9 @@ fn write_content<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                             let bytes = s.len();\n                             let llbytes = C_uint(bcx.ccx(), bytes);\n                             let llcstr = C_cstr(bcx.ccx(), (*s).clone(), false);\n-                            base::call_memcpy(bcx,\n-                                              lldest,\n-                                              llcstr,\n-                                              llbytes,\n-                                              1);\n+                            if !bcx.unreachable.get() {\n+                                base::call_memcpy(&B(bcx), lldest, llcstr, llbytes, 1);\n+                            }\n                             return bcx;\n                         }\n                     }"}]}