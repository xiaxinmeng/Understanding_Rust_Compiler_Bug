{"sha": "ec3d9934103ae33d2116bb5791b38921902c8539", "node_id": "C_kwDOAAsO6NoAKGVjM2Q5OTM0MTAzYWUzM2QyMTE2YmI1NzkxYjM4OTIxOTAyYzg1Mzk", "commit": {"author": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2023-01-13T16:32:54Z"}, "committer": {"name": "Jakob Degen", "email": "jakob.e.degen@gmail.com", "date": "2023-01-16T22:51:33Z"}, "message": "Add cycle checking to cleanup control flow validation", "tree": {"sha": "48d037899037f0ec0e9a0a658006c19175b03d85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48d037899037f0ec0e9a0a658006c19175b03d85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec3d9934103ae33d2116bb5791b38921902c8539", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec3d9934103ae33d2116bb5791b38921902c8539", "html_url": "https://github.com/rust-lang/rust/commit/ec3d9934103ae33d2116bb5791b38921902c8539", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec3d9934103ae33d2116bb5791b38921902c8539/comments", "author": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JakobDegen", "id": 51179609, "node_id": "MDQ6VXNlcjUxMTc5NjA5", "avatar_url": "https://avatars.githubusercontent.com/u/51179609?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JakobDegen", "html_url": "https://github.com/JakobDegen", "followers_url": "https://api.github.com/users/JakobDegen/followers", "following_url": "https://api.github.com/users/JakobDegen/following{/other_user}", "gists_url": "https://api.github.com/users/JakobDegen/gists{/gist_id}", "starred_url": "https://api.github.com/users/JakobDegen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JakobDegen/subscriptions", "organizations_url": "https://api.github.com/users/JakobDegen/orgs", "repos_url": "https://api.github.com/users/JakobDegen/repos", "events_url": "https://api.github.com/users/JakobDegen/events{/privacy}", "received_events_url": "https://api.github.com/users/JakobDegen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f49126e3d612ec5f7e571a7ccfb3e4447cfa427c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f49126e3d612ec5f7e571a7ccfb3e4447cfa427c", "html_url": "https://github.com/rust-lang/rust/commit/f49126e3d612ec5f7e571a7ccfb3e4447cfa427c"}], "stats": {"total": 76, "additions": 54, "deletions": 22}, "files": [{"sha": "b4f1ab6226714953626f58a734e427e37eb4177d", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 47, "deletions": 18, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/ec3d9934103ae33d2116bb5791b38921902c8539/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec3d9934103ae33d2116bb5791b38921902c8539/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=ec3d9934103ae33d2116bb5791b38921902c8539", "patch": "@@ -1,9 +1,8 @@\n //! Validates the MIR to ensure that invariants are upheld.\n \n-use std::collections::hash_map::Entry;\n-\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_index::bit_set::BitSet;\n+use rustc_index::vec::IndexVec;\n use rustc_infer::traits::Reveal;\n use rustc_middle::mir::interpret::Scalar;\n use rustc_middle::mir::visit::NonUseContext::VarDebugInfo;\n@@ -140,23 +139,27 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n     fn check_cleanup_control_flow(&self) {\n         let doms = self.body.basic_blocks.dominators();\n         let mut post_contract_node = FxHashMap::default();\n+        // Reusing the allocation across invocations of the closure\n+        let mut dom_path = vec![];\n         let mut get_post_contract_node = |mut bb| {\n-            if let Some(res) = post_contract_node.get(&bb) {\n-                return *res;\n-            }\n-            let mut dom_path = vec![];\n-            while self.body.basic_blocks[bb].is_cleanup {\n+            let root = loop {\n+                if let Some(root) = post_contract_node.get(&bb) {\n+                    break *root;\n+                }\n+                let parent = doms.immediate_dominator(bb);\n                 dom_path.push(bb);\n-                bb = doms.immediate_dominator(bb);\n-            }\n-            let root = *dom_path.last().unwrap();\n-            for bb in dom_path {\n+                if !self.body.basic_blocks[parent].is_cleanup {\n+                    break bb;\n+                }\n+                bb = parent;\n+            };\n+            for bb in dom_path.drain(..) {\n                 post_contract_node.insert(bb, root);\n             }\n             root\n         };\n \n-        let mut parent = FxHashMap::default();\n+        let mut parent = IndexVec::from_elem(None, &self.body.basic_blocks);\n         for (bb, bb_data) in self.body.basic_blocks.iter_enumerated() {\n             if !bb_data.is_cleanup || !self.reachable_blocks.contains(bb) {\n                 continue;\n@@ -167,23 +170,49 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n                 if s == bb {\n                     continue;\n                 }\n-                match parent.entry(bb) {\n-                    Entry::Vacant(e) => {\n-                        e.insert(s);\n+                let parent = &mut parent[bb];\n+                match parent {\n+                    None => {\n+                        *parent = Some(s);\n                     }\n-                    Entry::Occupied(e) if s != *e.get() => self.fail(\n+                    Some(e) if *e == s => (),\n+                    Some(e) => self.fail(\n                         Location { block: bb, statement_index: 0 },\n                         format!(\n                             \"Cleanup control flow violation: The blocks dominated by {:?} have edges to both {:?} and {:?}\",\n                             bb,\n                             s,\n-                            *e.get()\n+                            *e\n                         )\n                     ),\n-                    Entry::Occupied(_) => (),\n                 }\n             }\n         }\n+\n+        // Check for cycles\n+        let mut stack = FxHashSet::default();\n+        for i in 0..parent.len() {\n+            let mut bb = BasicBlock::from_usize(i);\n+            stack.clear();\n+            stack.insert(bb);\n+            loop {\n+                let Some(parent )= parent[bb].take() else {\n+                    break\n+                };\n+                let no_cycle = stack.insert(parent);\n+                if !no_cycle {\n+                    self.fail(\n+                        Location { block: bb, statement_index: 0 },\n+                        format!(\n+                            \"Cleanup control flow violation: Cycle involving edge {:?} -> {:?}\",\n+                            bb, parent,\n+                        ),\n+                    );\n+                    break;\n+                }\n+                bb = parent;\n+            }\n+        }\n     }\n \n     /// Check if src can be assigned into dest."}, {"sha": "52c2b10cbbea97e286650d84ce8bf4a79be35a23", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec3d9934103ae33d2116bb5791b38921902c8539/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec3d9934103ae33d2116bb5791b38921902c8539/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=ec3d9934103ae33d2116bb5791b38921902c8539", "patch": "@@ -512,13 +512,16 @@ pub struct CopyNonOverlapping<'tcx> {\n ///     must also be `cleanup`. This is a part of the type system and checked statically, so it is\n ///     still an error to have such an edge in the CFG even if it's known that it won't be taken at\n ///     runtime.\n-///  4. The induced subgraph on cleanup blocks must look roughly like an upside down tree. This is\n-///     necessary to ensure that landing pad information can be correctly codegened. More precisely:\n+///  4. The control flow between cleanup blocks must look like an upside down tree. Roughly\n+///     speaking, this means that control flow that looks like a V is allowed, while control flow\n+///     that looks like a W is not. This is necessary to ensure that landing pad information can be\n+///     correctly codegened on MSVC. More precisely:\n ///\n ///     Begin with the standard control flow graph `G`. Modify `G` as follows: for any two cleanup\n ///     vertices `u` and `v` such that `u` dominates `v`, contract `u` and `v` into a single vertex,\n-///     deleting self edges and duplicate edges in the process. The cleanup blocks of the resulting\n-///     graph must form an inverted forest.\n+///     deleting self edges and duplicate edges in the process. Now remove all vertices from `G`\n+///     that are not cleanup vertices or are not reachable. The resulting graph must be an inverted\n+///     tree, that is each vertex may have at most one successor and there may be no cycles.\n #[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, TypeFoldable, TypeVisitable)]\n pub enum TerminatorKind<'tcx> {\n     /// Block has one successor; we continue execution there."}]}