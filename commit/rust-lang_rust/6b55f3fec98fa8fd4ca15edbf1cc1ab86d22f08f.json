{"sha": "6b55f3fec98fa8fd4ca15edbf1cc1ab86d22f08f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiNTVmM2ZlYzk4ZmE4ZmQ0Y2ExNWVkYmYxY2MxYWI4NmQyMmYwOGY=", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-09-26T07:27:10Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "matsujika@gmail.com", "date": "2020-11-17T16:28:37Z"}, "message": "Add test case", "tree": {"sha": "6d32acad9de2dfc84c0c2bac787234f46c3dfc9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d32acad9de2dfc84c0c2bac787234f46c3dfc9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b55f3fec98fa8fd4ca15edbf1cc1ab86d22f08f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b55f3fec98fa8fd4ca15edbf1cc1ab86d22f08f", "html_url": "https://github.com/rust-lang/rust/commit/6b55f3fec98fa8fd4ca15edbf1cc1ab86d22f08f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b55f3fec98fa8fd4ca15edbf1cc1ab86d22f08f/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdb72df6f9f9d6946b0614b01e70bc9c46edfe89", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdb72df6f9f9d6946b0614b01e70bc9c46edfe89", "html_url": "https://github.com/rust-lang/rust/commit/cdb72df6f9f9d6946b0614b01e70bc9c46edfe89"}], "stats": {"total": 68, "additions": 53, "deletions": 15}, "files": [{"sha": "6037f5807d3e222b516c8c40db6ff6da4fe7efb8", "filename": "tests/ui/unnecessary_wrap.rs", "status": "modified", "additions": 20, "deletions": 8, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6b55f3fec98fa8fd4ca15edbf1cc1ab86d22f08f/tests%2Fui%2Funnecessary_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b55f3fec98fa8fd4ca15edbf1cc1ab86d22f08f/tests%2Fui%2Funnecessary_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wrap.rs?ref=6b55f3fec98fa8fd4ca15edbf1cc1ab86d22f08f", "patch": "@@ -17,8 +17,20 @@ fn func1(a: bool, b: bool) -> Option<i32> {\n     }\n }\n \n+// should be linted\n+fn func2(a: bool, b: bool) -> Option<i32> {\n+    if a && b {\n+        return Some(10);\n+    }\n+    if a {\n+        Some(20)\n+    } else {\n+        Some(30)\n+    }\n+}\n+\n // public fns should not be linted\n-pub fn func2(a: bool) -> Option<i32> {\n+pub fn func3(a: bool) -> Option<i32> {\n     if a {\n         Some(1)\n     } else {\n@@ -27,7 +39,7 @@ pub fn func2(a: bool) -> Option<i32> {\n }\n \n // should not be linted\n-fn func3(a: bool) -> Option<i32> {\n+fn func4(a: bool) -> Option<i32> {\n     if a {\n         Some(1)\n     } else {\n@@ -36,22 +48,22 @@ fn func3(a: bool) -> Option<i32> {\n }\n \n // should be linted\n-fn func4() -> Option<i32> {\n+fn func5() -> Option<i32> {\n     Some(1)\n }\n \n // should not be linted\n-fn func5() -> Option<i32> {\n+fn func6() -> Option<i32> {\n     None\n }\n \n // should be linted\n-fn func6() -> Result<i32, ()> {\n+fn func7() -> Result<i32, ()> {\n     Ok(1)\n }\n \n // should not be linted\n-fn func7(a: bool) -> Result<i32, ()> {\n+fn func8(a: bool) -> Result<i32, ()> {\n     if a {\n         Ok(1)\n     } else {\n@@ -60,12 +72,12 @@ fn func7(a: bool) -> Result<i32, ()> {\n }\n \n // should not be linted\n-fn func8(a: bool) -> Result<i32, ()> {\n+fn func9(a: bool) -> Result<i32, ()> {\n     Err(())\n }\n \n fn main() {\n     // method calls are not linted\n     func1(true, true);\n-    func2(true);\n+    func2(true, true);\n }"}, {"sha": "a3481330e99b53f7a86e0719cec2215df0a0e482", "filename": "tests/ui/unnecessary_wrap.stderr", "status": "modified", "additions": 33, "deletions": 7, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6b55f3fec98fa8fd4ca15edbf1cc1ab86d22f08f/tests%2Fui%2Funnecessary_wrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6b55f3fec98fa8fd4ca15edbf1cc1ab86d22f08f/tests%2Fui%2Funnecessary_wrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_wrap.stderr?ref=6b55f3fec98fa8fd4ca15edbf1cc1ab86d22f08f", "patch": "@@ -26,38 +26,64 @@ LL |     } else {\n  ...\n \n error: this function returns unnecessarily wrapping data\n-  --> $DIR/unnecessary_wrap.rs:39:1\n+  --> $DIR/unnecessary_wrap.rs:21:1\n    |\n-LL | / fn func4() -> Option<i32> {\n+LL | / fn func2(a: bool, b: bool) -> Option<i32> {\n+LL | |     if a && b {\n+LL | |         return Some(10);\n+LL | |     }\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+help: remove `Option` from the return type...\n+   |\n+LL | fn func2(a: bool, b: bool) -> i32 {\n+   |                               ^^^\n+help: ...and change the returning expressions\n+   |\n+LL |         return 10;\n+LL |     }\n+LL |     if a {\n+LL |         20\n+LL |     } else {\n+LL |         30\n+   |\n+\n+error: this function returns unnecessarily wrapping data\n+  --> $DIR/unnecessary_wrap.rs:51:1\n+   |\n+LL | / fn func5() -> Option<i32> {\n LL | |     Some(1)\n LL | | }\n    | |_^\n    |\n help: remove `Option` from the return type...\n    |\n-LL | fn func4() -> i32 {\n+LL | fn func5() -> i32 {\n    |               ^^^\n help: ...and change the returning expressions\n    |\n LL |     1\n    |\n \n error: this function returns unnecessarily wrapping data\n-  --> $DIR/unnecessary_wrap.rs:49:1\n+  --> $DIR/unnecessary_wrap.rs:61:1\n    |\n-LL | / fn func6() -> Result<i32, ()> {\n+LL | / fn func7() -> Result<i32, ()> {\n LL | |     Ok(1)\n LL | | }\n    | |_^\n    |\n help: remove `Result` from the return type...\n    |\n-LL | fn func6() -> i32 {\n+LL | fn func7() -> i32 {\n    |               ^^^\n help: ...and change the returning expressions\n    |\n LL |     1\n    |\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 4 previous errors\n "}]}