{"sha": "e3d113eca91d639c697d925d9de38b5efde70c1b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzZDExM2VjYTkxZDYzOWM2OTdkOTI1ZDlkZTM4YjVlZmRlNzBjMWI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-06-27T22:24:09Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-06-30T13:36:03Z"}, "message": "Do not allow LLVM to increase a TLS's alignment on macOS.", "tree": {"sha": "bfe39108033af4008303a51360546f20c68cc2ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfe39108033af4008303a51360546f20c68cc2ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3d113eca91d639c697d925d9de38b5efde70c1b", "comment_count": 5, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAls3h0UACgkQ/vbIBR0O\nATz5qw//ZYptODodQn4Q9vxraFot9EWYLEvhYyctW3IxHS5hLcTWjYeUGHc9otEH\njaTFZDkXBWAzcBnlC+HfOj7Ig0C9eUsSZW2TVQ0oWyN6F0gLre9fdwANt2YHVtQM\n+FxAt0OBsOny8PU13rybqJOIa/hRP38soR3BqEHWUcm09cEkrUOlbuFUSVTsH7tH\nhil3tImDdmMZrTiqHe1zXRQi8YpTCy5oJDkeelHSBkvhAU+8ZLRo73iiJMH3ahUT\nh1FhSEgYon7TIPbRkbFuZRq+pv66zoyEyiqu7j/FEjUqxJpGjGofAYXoyi8l9epN\npYw1YZhLnsls1aq8dJ0N0TgnOBtPZHXUss6VGwITwmrvvvIpBJQwO++JZRIvlZFN\n2+u6HtwnZ/YzRBEl+CHbA2kBxlS8yjqr+28z0ew2V9CPmwxwBTVQ3U2i1bahKASp\nVdhFjt6QERFgt8s3umLD+VjJaOfz3CfAOpy24UCGrzQo07ahgJ3Nwm4XXv2Fp3mI\naHxceaHF4F8/bj8jC/Rlp2h+zgxeStYkfQh9YfUP1jzYZGwdQGFJ1exEgNL/166Q\n8f5AQNmvm1pSHEClkJMApqahDj3ZHBeVGWA3kR5WZ+BfR9MQSd/I/Yt2J6UtP8Sm\nRBWLkXaxnphbHkshEykocSvAbfQt1RhhVWe/hqkElx/4U6/Nt3s=\n=89wM\n-----END PGP SIGNATURE-----", "payload": "tree bfe39108033af4008303a51360546f20c68cc2ef\nparent 3b50455c61847c4a417b5fb002a5258dbaf4a868\nauthor kennytm <kennytm@gmail.com> 1530138249 +0800\ncommitter kennytm <kennytm@gmail.com> 1530365763 +0800\n\nDo not allow LLVM to increase a TLS's alignment on macOS.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3d113eca91d639c697d925d9de38b5efde70c1b", "html_url": "https://github.com/rust-lang/rust/commit/e3d113eca91d639c697d925d9de38b5efde70c1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3d113eca91d639c697d925d9de38b5efde70c1b/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b50455c61847c4a417b5fb002a5258dbaf4a868", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b50455c61847c4a417b5fb002a5258dbaf4a868", "html_url": "https://github.com/rust-lang/rust/commit/3b50455c61847c4a417b5fb002a5258dbaf4a868"}], "stats": {"total": 99, "additions": 96, "deletions": 3}, "files": [{"sha": "199c40bb704ea3d62ec2e10e469b5a5a4bae5a94", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e3d113eca91d639c697d925d9de38b5efde70c1b/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d113eca91d639c697d925d9de38b5efde70c1b/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=e3d113eca91d639c697d925d9de38b5efde70c1b", "patch": "@@ -250,7 +250,7 @@ pub fn codegen_static<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n     unsafe {\n         let g = get_static(cx, def_id);\n \n-        let v = match ::mir::codegen_static_initializer(cx, def_id) {\n+        let (v, alloc) = match ::mir::codegen_static_initializer(cx, def_id) {\n             Ok(v) => v,\n             // Error has already been reported\n             Err(_) => return,\n@@ -309,6 +309,44 @@ pub fn codegen_static<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n         if attr::contains_name(attrs, \"thread_local\") {\n             llvm::set_thread_local_mode(g, cx.tls_model);\n+\n+            // Do not allow LLVM to change the alignment of a TLS on macOS.\n+            //\n+            // By default a global's alignment can be freely increased.\n+            // This allows LLVM to generate more performant instructions\n+            // e.g. using load-aligned into a SIMD register.\n+            //\n+            // However, on macOS 10.10 or below, the dynamic linker does not\n+            // respect any alignment given on the TLS (radar 24221680).\n+            // This will violate the alignment assumption, and causing segfault at runtime.\n+            //\n+            // This bug is very easy to trigger. In `println!` and `panic!`,\n+            // the `LOCAL_STDOUT`/`LOCAL_STDERR` handles are stored in a TLS,\n+            // which the values would be `mem::replace`d on initialization.\n+            // The implementation of `mem::replace` will use SIMD\n+            // whenever the size is 32 bytes or higher. LLVM notices SIMD is used\n+            // and tries to align `LOCAL_STDOUT`/`LOCAL_STDERR` to a 32-byte boundary,\n+            // which macOS's dyld disregarded and causing crashes\n+            // (see issues #51794, #51758, #50867, #48866 and #44056).\n+            //\n+            // To workaround the bug, we trick LLVM into not increasing\n+            // the global's alignment by explicitly assigning a section to it\n+            // (equivalent to automatically generating a `#[link_section]` attribute).\n+            // See the comment in the `GlobalValue::canIncreaseAlignment()` function\n+            // of `lib/IR/Globals.cpp` for why this works.\n+            //\n+            // When the alignment is not increased, the optimized `mem::replace`\n+            // will use load-unaligned instructions instead, and thus avoiding the crash.\n+            //\n+            // We could remove this hack whenever we decide to drop macOS 10.10 support.\n+            if cx.tcx.sess.target.target.options.is_like_osx {\n+                let sect_name = if alloc.bytes.iter().all(|b| *b == 0) {\n+                    CStr::from_bytes_with_nul_unchecked(b\"__DATA,__thread_bss\\0\")\n+                } else {\n+                    CStr::from_bytes_with_nul_unchecked(b\"__DATA,__thread_data\\0\")\n+                };\n+                llvm::LLVMSetSection(g, sect_name.as_ptr());\n+            }\n         }\n \n         base::set_link_section(cx, g, attrs);"}, {"sha": "d7939bd2ab224d547f35705e0957de4a9d80c696", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3d113eca91d639c697d925d9de38b5efde70c1b/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d113eca91d639c697d925d9de38b5efde70c1b/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=e3d113eca91d639c697d925d9de38b5efde70c1b", "patch": "@@ -118,7 +118,7 @@ pub fn const_alloc_to_llvm(cx: &CodegenCx, alloc: &Allocation) -> ValueRef {\n pub fn codegen_static_initializer<'a, 'tcx>(\n     cx: &CodegenCx<'a, 'tcx>,\n     def_id: DefId)\n-    -> Result<ValueRef, Lrc<ConstEvalErr<'tcx>>>\n+    -> Result<(ValueRef, &'tcx Allocation), Lrc<ConstEvalErr<'tcx>>>\n {\n     let instance = ty::Instance::mono(cx.tcx, def_id);\n     let cid = GlobalId {\n@@ -132,7 +132,7 @@ pub fn codegen_static_initializer<'a, 'tcx>(\n         ConstValue::ByRef(alloc, n) if n.bytes() == 0 => alloc,\n         _ => bug!(\"static const eval returned {:#?}\", static_),\n     };\n-    Ok(const_alloc_to_llvm(cx, alloc))\n+    Ok((const_alloc_to_llvm(cx, alloc), alloc))\n }\n \n impl<'a, 'tcx> FunctionCx<'a, 'tcx> {"}, {"sha": "3235ef0bb3335134f6a250aa0d618b6b042504c1", "filename": "src/test/codegen/issue-44056-macos-tls-align.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e3d113eca91d639c697d925d9de38b5efde70c1b/src%2Ftest%2Fcodegen%2Fissue-44056-macos-tls-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d113eca91d639c697d925d9de38b5efde70c1b/src%2Ftest%2Fcodegen%2Fissue-44056-macos-tls-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-44056-macos-tls-align.rs?ref=e3d113eca91d639c697d925d9de38b5efde70c1b", "patch": "@@ -0,0 +1,40 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-tidy-linelength\n+// only-macos\n+// no-system-llvm\n+// min-llvm-version 6.0\n+// compile-flags: -O\n+\n+#![crate_type = \"rlib\"]\n+#![feature(thread_local)]\n+\n+// CHECK: @STATIC_VAR_1 = internal thread_local unnamed_addr global <{ [32 x i8] }> zeroinitializer, section \"__DATA,__thread_bss\", align 4\n+#[no_mangle]\n+#[allow(private_no_mangle_statics)]\n+#[thread_local]\n+static mut STATIC_VAR_1: [u32; 8] = [0; 8];\n+\n+// CHECK: @STATIC_VAR_2 = internal thread_local unnamed_addr global <{ [32 x i8] }> <{{[^>]*}}>, section \"__DATA,__thread_data\", align 4\n+#[no_mangle]\n+#[allow(private_no_mangle_statics)]\n+#[thread_local]\n+static mut STATIC_VAR_2: [u32; 8] = [4; 8];\n+\n+#[no_mangle]\n+pub unsafe fn f(x: &mut [u32; 8]) {\n+    std::mem::swap(x, &mut STATIC_VAR_1)\n+}\n+\n+#[no_mangle]\n+pub unsafe fn g(x: &mut [u32; 8]) {\n+    std::mem::swap(x, &mut STATIC_VAR_2)\n+}"}, {"sha": "dcaa0bf86294a4f6a7aa3fe8209dc527ce739449", "filename": "src/test/run-pass/issue-44056.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e3d113eca91d639c697d925d9de38b5efde70c1b/src%2Ftest%2Frun-pass%2Fissue-44056.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3d113eca91d639c697d925d9de38b5efde70c1b/src%2Ftest%2Frun-pass%2Fissue-44056.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-44056.rs?ref=e3d113eca91d639c697d925d9de38b5efde70c1b", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// only-x86_64\n+// no-prefer-dynamic\n+// compile-flags: -Ctarget-feature=+avx -Clto\n+\n+fn main() {}"}]}