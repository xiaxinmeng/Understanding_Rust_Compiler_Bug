{"sha": "48f4f2734d221f06990613ad364e1065608463f4", "node_id": "C_kwDOAAsO6NoAKDQ4ZjRmMjczNGQyMjFmMDY5OTA2MTNhZDM2NGUxMDY1NjA4NDYzZjQ", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-04-29T22:55:55Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-04-29T22:56:27Z"}, "message": "Resolve clippy::redundant_closure\n\n    error: redundant closure\n       --> src/data_race.rs:787:18\n        |\n    787 |             .map(|idx| VectorIdx::new(idx))\n        |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `VectorIdx::new`\n        |\n        = note: `-D clippy::redundant-closure` implied by `-D clippy::all`\n        = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n\n    error: redundant closure\n      --> src/thread.rs:61:31\n       |\n    61 |         u32::try_from(id).map(|id_u32| Self(id_u32))\n       |                               ^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `Self`\n       |\n       = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure", "tree": {"sha": "7fcbc9102b7e14f5cc53e6c198f6848ff16047af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7fcbc9102b7e14f5cc53e6c198f6848ff16047af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48f4f2734d221f06990613ad364e1065608463f4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmJsbRsACgkQ+boUO5X/\nbYKPWBAAoM7X6tn0hyPSstvSyZS36fr19D2UtDwQ/7DnovpNbMp5dhQI3xhB3pJx\nzdkXfvTuO5L0EMaAAqpnQzJV3m2kgBoc/7cOghXK6OI2sPUk8QTR4oWT5rxNJyRa\nlNmH/tXw/A7RJa9yN1MF60nqocqQdrRZYQl4tpzbbhmQ741b50usYGR2p4tABgDi\nc7SB3uAMvnlZ07jqAuIEdwIJ+ByFBZ9eTJNIHaQKFnwZviTISBqJaP7MYTdS4Ouh\nLM2VzBoMFxpkrAIVJU7PetfzdP6F9fit43zy0aEki5Vpkdl5hOunWegrOi1cX6lg\njwsBosgGXdSwg0WcYvzwe3L4PCGS1G95HbmmZRDx0loXAlq+rW48GOkltwh3+sJQ\n9QFA6nASSagGl1HuHZBGPFUS+Sbnp3IU7eSJkTbg8A7hx5Yy7m800L590O1RPlhE\nVnb29rXPHdyWLtPzuCz5SUfNN5KHydPVA0PLAw26LfZdcZR/steNpiZPGg0xIkhd\n6Rqvx0lSW+UawnkVCsqcsU0lWw+GTnwk4Z2Y0W7vijuvNbCk/5FJnxRtjks11sDq\nIn5qkddeXPqyFUobGqVfMqfQ3rCs23bKrpoU8UCT9egQi1miZoRNW5EmnsAGmqJW\nESsCdtAgK8kr3Weksm9CfXCbhCs8AmPw3Hpdpe4Cx9XVxi00aDQ=\n=VBTW\n-----END PGP SIGNATURE-----", "payload": "tree 7fcbc9102b7e14f5cc53e6c198f6848ff16047af\nparent 95510587ff5d827cf2fd9aea130f2f0113d09e20\nauthor David Tolnay <dtolnay@gmail.com> 1651272955 -0700\ncommitter David Tolnay <dtolnay@gmail.com> 1651272987 -0700\n\nResolve clippy::redundant_closure\n\n    error: redundant closure\n       --> src/data_race.rs:787:18\n        |\n    787 |             .map(|idx| VectorIdx::new(idx))\n        |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `VectorIdx::new`\n        |\n        = note: `-D clippy::redundant-closure` implied by `-D clippy::all`\n        = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n\n    error: redundant closure\n      --> src/thread.rs:61:31\n       |\n    61 |         u32::try_from(id).map(|id_u32| Self(id_u32))\n       |                               ^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the function itself: `Self`\n       |\n       = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48f4f2734d221f06990613ad364e1065608463f4", "html_url": "https://github.com/rust-lang/rust/commit/48f4f2734d221f06990613ad364e1065608463f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48f4f2734d221f06990613ad364e1065608463f4/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95510587ff5d827cf2fd9aea130f2f0113d09e20", "url": "https://api.github.com/repos/rust-lang/rust/commits/95510587ff5d827cf2fd9aea130f2f0113d09e20", "html_url": "https://github.com/rust-lang/rust/commit/95510587ff5d827cf2fd9aea130f2f0113d09e20"}], "stats": {"total": 5, "additions": 2, "deletions": 3}, "files": [{"sha": "d249d28d03f54ca027e11a5f89a2a3f601f4b065", "filename": "src/data_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48f4f2734d221f06990613ad364e1065608463f4/src%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f4f2734d221f06990613ad364e1065608463f4/src%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdata_race.rs?ref=48f4f2734d221f06990613ad364e1065608463f4", "patch": "@@ -784,7 +784,7 @@ impl VClockAlloc {\n                     None\n                 }\n             })\n-            .map(|idx| VectorIdx::new(idx))\n+            .map(VectorIdx::new)\n     }\n \n     /// Report a data-race found in the program."}, {"sha": "262c4e2e28989bd6e028a43d2ec54fe0e02ff6ea", "filename": "src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/48f4f2734d221f06990613ad364e1065608463f4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f4f2734d221f06990613ad364e1065608463f4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=48f4f2734d221f06990613ad364e1065608463f4", "patch": "@@ -20,7 +20,6 @@\n     clippy::manual_map,\n     clippy::needless_lifetimes,\n     clippy::new_without_default,\n-    clippy::redundant_closure,\n     clippy::redundant_field_names,\n     clippy::single_char_add_str,\n     clippy::single_char_pattern,"}, {"sha": "0d15f60c23bfede93c491d4a0a64d8a2487f6c1d", "filename": "src/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/48f4f2734d221f06990613ad364e1065608463f4/src%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48f4f2734d221f06990613ad364e1065608463f4/src%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthread.rs?ref=48f4f2734d221f06990613ad364e1065608463f4", "patch": "@@ -58,7 +58,7 @@ impl Idx for ThreadId {\n impl TryFrom<u64> for ThreadId {\n     type Error = TryFromIntError;\n     fn try_from(id: u64) -> Result<Self, Self::Error> {\n-        u32::try_from(id).map(|id_u32| Self(id_u32))\n+        u32::try_from(id).map(Self)\n     }\n }\n "}]}