{"sha": "2f274d11ba48f0da6158f1da732645dc32bfe1f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmMjc0ZDExYmE0OGYwZGE2MTU4ZjFkYTczMjY0NWRjMzJiZmUxZjQ=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-06-19T00:26:14Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2014-06-24T18:36:28Z"}, "message": "Implement lint plugins", "tree": {"sha": "116e81ef1996273fffea1e13301788360c6f8dc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/116e81ef1996273fffea1e13301788360c6f8dc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f274d11ba48f0da6158f1da732645dc32bfe1f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f274d11ba48f0da6158f1da732645dc32bfe1f4", "html_url": "https://github.com/rust-lang/rust/commit/2f274d11ba48f0da6158f1da732645dc32bfe1f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f274d11ba48f0da6158f1da732645dc32bfe1f4/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51d438e568dc128af47f4ac77ea1416c29b7402c", "url": "https://api.github.com/repos/rust-lang/rust/commits/51d438e568dc128af47f4ac77ea1416c29b7402c", "html_url": "https://github.com/rust-lang/rust/commit/51d438e568dc128af47f4ac77ea1416c29b7402c"}], "stats": {"total": 49, "additions": 39, "deletions": 10}, "files": [{"sha": "9a7be85bdd7479f53eed78aa442b148f7a13885c", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/2f274d11ba48f0da6158f1da732645dc32bfe1f4/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f274d11ba48f0da6158f1da732645dc32bfe1f4/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=2f274d11ba48f0da6158f1da732645dc32bfe1f4", "patch": "@@ -216,12 +216,18 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         }\n     });\n \n-    let Registry { syntax_exts, .. } = registry;\n+    let Registry { syntax_exts, lint_passes, .. } = registry;\n \n-    // Process command line flags for lints.\n-    // Do this here because we will have lint plugins eventually.\n+    {\n+        let mut ls = sess.lint_store.borrow_mut();\n+        for pass in lint_passes.move_iter() {\n+            ls.register_pass(Some(sess), true, pass);\n+        }\n+    }\n+\n+    // Lint plugins are registered; now we can process command line flags.\n     if sess.opts.describe_lints {\n-        super::describe_lints(&*sess.lint_store.borrow());\n+        super::describe_lints(&*sess.lint_store.borrow(), true);\n         return None;\n     }\n     sess.lint_store.borrow_mut().process_command_line(sess);"}, {"sha": "cfde4ad52afa6c9556a44959c5fa13525bbedc62", "filename": "src/librustc/driver/mod.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2f274d11ba48f0da6158f1da732645dc32bfe1f4/src%2Flibrustc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f274d11ba48f0da6158f1da732645dc32bfe1f4/src%2Flibrustc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fmod.rs?ref=2f274d11ba48f0da6158f1da732645dc32bfe1f4", "patch": "@@ -56,7 +56,7 @@ fn run_compiler(args: &[String]) {\n             if sopts.describe_lints {\n                 let mut ls = lint::LintStore::new();\n                 ls.register_builtin(None);\n-                describe_lints(&ls);\n+                describe_lints(&ls, false);\n                 return;\n             }\n             early_error(\"no input filename given\");\n@@ -132,7 +132,7 @@ Additional help:\n                              config::optgroups().as_slice()));\n }\n \n-fn describe_lints(lint_store: &lint::LintStore) {\n+fn describe_lints(lint_store: &lint::LintStore, loaded_plugins: bool) {\n     println!(\"\n Available lint options:\n     -W <foo>           Warn about <foo>\n@@ -154,13 +154,13 @@ Available lint options:\n         lints\n     }\n \n-    let (_plugin, builtin) = lint_store.get_lints().partitioned(|&(_, p)| p);\n-    // let plugin = sort_lints(plugin);\n+    let (plugin, builtin) = lint_store.get_lints().partitioned(|&(_, p)| p);\n+    let plugin = sort_lints(plugin);\n     let builtin = sort_lints(builtin);\n \n     // FIXME (#7043): We should use the width in character cells rather than\n     // the number of codepoints.\n-    let max_name_len = builtin.iter()\n+    let max_name_len = plugin.iter().chain(builtin.iter())\n         .map(|&s| s.name.char_len())\n         .max().unwrap_or(0);\n     let padded = |x: &str| {\n@@ -182,7 +182,18 @@ Available lint options:\n \n     print_lints(builtin);\n \n-    // Describe lint plugins here once they exist.\n+    match (loaded_plugins, plugin.len()) {\n+        (false, 0) => {\n+            println!(\"Compiler plugins can provide additional lints. To see a listing of these, \\\n+                      re-run `rustc -W help` with a crate filename.\");\n+        }\n+        (false, _) => fail!(\"didn't load lint plugins but got them anyway!\"),\n+        (true, 0) => println!(\"This crate does not load any lint plugins.\"),\n+        (true, _) => {\n+            println!(\"Lint checks provided by plugins loaded by this crate:\\n\");\n+            print_lints(plugin);\n+        }\n+    }\n }\n \n fn describe_debug_flags() {"}, {"sha": "5aa10b5ab8e8ac9c91db7890ca68d13d3cc317bb", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2f274d11ba48f0da6158f1da732645dc32bfe1f4/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f274d11ba48f0da6158f1da732645dc32bfe1f4/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=2f274d11ba48f0da6158f1da732645dc32bfe1f4", "patch": "@@ -19,6 +19,7 @@\n //! Most lints can be written as `LintPass` instances. These run just before\n //! translation to LLVM bytecode. The `LintPass`es built into rustc are defined\n //! within `builtin.rs`, which has further comments on how to add such a lint.\n+//! rustc can also load user-defined lint plugins via the plugin mechanism.\n //!\n //! Some of rustc's lints are defined elsewhere in the compiler and work by\n //! calling `add_lint()` on the overall `Session` object. This works when"}, {"sha": "587bedd502e15015d7920fc7110126c152f02512", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/2f274d11ba48f0da6158f1da732645dc32bfe1f4/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f274d11ba48f0da6158f1da732645dc32bfe1f4/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=2f274d11ba48f0da6158f1da732645dc32bfe1f4", "patch": "@@ -10,6 +10,8 @@\n \n //! Used by plugin crates to tell `rustc` about the plugins they provide.\n \n+use lint::LintPassObject;\n+\n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT};\n use syntax::ext::base::{IdentTT, ItemDecorator, ItemModifier, BasicMacroExpander};\n use syntax::ext::base::{MacroExpanderFn};\n@@ -31,6 +33,9 @@ pub struct Registry {\n \n     #[doc(hidden)]\n     pub syntax_exts: Vec<NamedSyntaxExtension>,\n+\n+    #[doc(hidden)]\n+    pub lint_passes: Vec<LintPassObject>,\n }\n \n impl Registry {\n@@ -39,6 +44,7 @@ impl Registry {\n         Registry {\n             krate_span: krate.span,\n             syntax_exts: vec!(),\n+            lint_passes: vec!(),\n         }\n     }\n \n@@ -67,4 +73,9 @@ impl Registry {\n                 span: None,\n             }, None));\n     }\n+\n+    /// Register a compiler lint pass.\n+    pub fn register_lint_pass(&mut self, lint_pass: LintPassObject) {\n+        self.lint_passes.push(lint_pass);\n+    }\n }"}]}