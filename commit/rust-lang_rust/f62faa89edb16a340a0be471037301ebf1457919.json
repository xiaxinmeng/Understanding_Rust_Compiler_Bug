{"sha": "f62faa89edb16a340a0be471037301ebf1457919", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2MmZhYTg5ZWRiMTZhMzQwYTBiZTQ3MTAzNzMwMWViZjE0NTc5MTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-22T22:51:06Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:37Z"}, "message": "librustc: De-`@mut` `outputs` in the session", "tree": {"sha": "a09be1bd618d11816c9890fe8ea5219fdfb36711", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a09be1bd618d11816c9890fe8ea5219fdfb36711"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f62faa89edb16a340a0be471037301ebf1457919", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f62faa89edb16a340a0be471037301ebf1457919", "html_url": "https://github.com/rust-lang/rust/commit/f62faa89edb16a340a0be471037301ebf1457919", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f62faa89edb16a340a0be471037301ebf1457919/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4815b6c3f6b22fc41d4d04c28be4f3484f8099f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4815b6c3f6b22fc41d4d04c28be4f3484f8099f", "html_url": "https://github.com/rust-lang/rust/commit/e4815b6c3f6b22fc41d4d04c28be4f3484f8099f"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "a85d5f35b5a3de8aae23719813e2f882222fd2c4", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f62faa89edb16a340a0be471037301ebf1457919/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62faa89edb16a340a0be471037301ebf1457919/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=f62faa89edb16a340a0be471037301ebf1457919", "patch": "@@ -208,8 +208,9 @@ pub mod write {\n             // Emit the bytecode if we're either saving our temporaries or\n             // emitting an rlib. Whenever an rlib is create, the bytecode is\n             // inserted into the archive in order to allow LTO against it.\n+            let outputs = sess.outputs.borrow();\n             if sess.opts.save_temps ||\n-               sess.outputs.iter().any(|&o| o == session::OutputRlib) {\n+               outputs.get().iter().any(|&o| o == session::OutputRlib) {\n                 output.with_extension(\"bc\").with_c_str(|buf| {\n                     llvm::LLVMWriteBitcodeToFile(llmod, buf);\n                 })\n@@ -745,7 +746,8 @@ pub fn link_binary(sess: Session,\n                    out_filename: &Path,\n                    lm: &LinkMeta) -> ~[Path] {\n     let mut out_filenames = ~[];\n-    for &output in sess.outputs.iter() {\n+    let outputs = sess.outputs.borrow();\n+    for &output in outputs.get().iter() {\n         let out_file = link_binary_output(sess, trans, output, obj_filename,\n                                           out_filename, lm);\n         out_filenames.push(out_file);"}, {"sha": "2425b36687e2dacc951b123036449156d549acf8", "filename": "src/librustc/back/lto.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f62faa89edb16a340a0be471037301ebf1457919/src%2Flibrustc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62faa89edb16a340a0be471037301ebf1457919/src%2Flibrustc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flto.rs?ref=f62faa89edb16a340a0be471037301ebf1457919", "patch": "@@ -20,7 +20,8 @@ use std::libc;\n pub fn run(sess: session::Session, llmod: ModuleRef,\n            tm: TargetMachineRef, reachable: &[~str]) {\n     // Make sure we actually can run LTO\n-    for output in sess.outputs.iter() {\n+    let outputs = sess.outputs.borrow();\n+    for output in outputs.get().iter() {\n         match *output {\n             session::OutputExecutable | session::OutputStaticlib => {}\n             _ => {"}, {"sha": "2b9acb1db9d546407ac65901379af00586ed3032", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f62faa89edb16a340a0be471037301ebf1457919/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62faa89edb16a340a0be471037301ebf1457919/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=f62faa89edb16a340a0be471037301ebf1457919", "patch": "@@ -167,7 +167,7 @@ pub fn phase_2_configure_and_expand(sess: Session,\n     let time_passes = sess.time_passes();\n \n     sess.building_library.set(session::building_library(sess.opts, &crate));\n-    *sess.outputs = session::collect_outputs(sess.opts, crate.attrs);\n+    sess.outputs.set(session::collect_outputs(sess.opts, crate.attrs));\n \n     time(time_passes, \"gated feature checking\", (), |_|\n          front::feature_gate::check_crate(sess, &crate));\n@@ -882,7 +882,7 @@ pub fn build_session_(sopts: @session::options,\n         working_dir: os::getcwd(),\n         lints: RefCell::new(HashMap::new()),\n         node_id: Cell::new(1),\n-        outputs: @mut ~[],\n+        outputs: @RefCell::new(~[]),\n     }\n }\n "}, {"sha": "e3167dee0680986b634d974eca7f6968cfbd6fdf", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f62faa89edb16a340a0be471037301ebf1457919/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f62faa89edb16a340a0be471037301ebf1457919/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=f62faa89edb16a340a0be471037301ebf1457919", "patch": "@@ -215,7 +215,7 @@ pub struct Session_ {\n     lints: RefCell<HashMap<ast::NodeId,\n                            ~[(lint::lint, codemap::Span, ~str)]>>,\n     node_id: Cell<ast::NodeId>,\n-    outputs: @mut ~[OutputStyle],\n+    outputs: @RefCell<~[OutputStyle]>,\n }\n \n pub type Session = @Session_;"}]}