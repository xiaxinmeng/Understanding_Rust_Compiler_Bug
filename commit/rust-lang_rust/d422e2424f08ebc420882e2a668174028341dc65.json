{"sha": "d422e2424f08ebc420882e2a668174028341dc65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MjJlMjQyNGYwOGViYzQyMDg4MmUyYTY2ODE3NDAyODM0MWRjNjU=", "commit": {"author": {"name": "Abhijit Gadgil", "email": "gabhijit@iitbombay.org", "date": "2020-11-01T13:23:22Z"}, "committer": {"name": "Abhijit Gadgil", "email": "gabhijit@iitbombay.org", "date": "2020-11-01T13:23:22Z"}, "message": "documentation examples fixes in rustfmt convention", "tree": {"sha": "51332b6f0e98afb7b1107ad36227df8b8bbe8f6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/51332b6f0e98afb7b1107ad36227df8b8bbe8f6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d422e2424f08ebc420882e2a668174028341dc65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d422e2424f08ebc420882e2a668174028341dc65", "html_url": "https://github.com/rust-lang/rust/commit/d422e2424f08ebc420882e2a668174028341dc65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d422e2424f08ebc420882e2a668174028341dc65/comments", "author": {"login": "gabhijit", "id": 387214, "node_id": "MDQ6VXNlcjM4NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/387214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabhijit", "html_url": "https://github.com/gabhijit", "followers_url": "https://api.github.com/users/gabhijit/followers", "following_url": "https://api.github.com/users/gabhijit/following{/other_user}", "gists_url": "https://api.github.com/users/gabhijit/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabhijit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabhijit/subscriptions", "organizations_url": "https://api.github.com/users/gabhijit/orgs", "repos_url": "https://api.github.com/users/gabhijit/repos", "events_url": "https://api.github.com/users/gabhijit/events{/privacy}", "received_events_url": "https://api.github.com/users/gabhijit/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gabhijit", "id": 387214, "node_id": "MDQ6VXNlcjM4NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/387214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gabhijit", "html_url": "https://github.com/gabhijit", "followers_url": "https://api.github.com/users/gabhijit/followers", "following_url": "https://api.github.com/users/gabhijit/following{/other_user}", "gists_url": "https://api.github.com/users/gabhijit/gists{/gist_id}", "starred_url": "https://api.github.com/users/gabhijit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gabhijit/subscriptions", "organizations_url": "https://api.github.com/users/gabhijit/orgs", "repos_url": "https://api.github.com/users/gabhijit/repos", "events_url": "https://api.github.com/users/gabhijit/events{/privacy}", "received_events_url": "https://api.github.com/users/gabhijit/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c88bcc3f6a055093eafff8d4cfb1dfcd813ebbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c88bcc3f6a055093eafff8d4cfb1dfcd813ebbe", "html_url": "https://github.com/rust-lang/rust/commit/7c88bcc3f6a055093eafff8d4cfb1dfcd813ebbe"}], "stats": {"total": 30, "additions": 19, "deletions": 11}, "files": [{"sha": "51f804381734545f946fe411bdb123197ac5f6e6", "filename": "library/core/src/ops/bit.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/d422e2424f08ebc420882e2a668174028341dc65/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d422e2424f08ebc420882e2a668174028341dc65/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fbit.rs?ref=d422e2424f08ebc420882e2a668174028341dc65", "patch": "@@ -109,10 +109,12 @@ not_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n ///     fn bitand(self, Self(rhs): Self) -> Self::Output {\n ///         let Self(lhs) = self;\n ///         assert_eq!(lhs.len(), rhs.len());\n-///         Self(lhs.iter()\n+///         Self(\n+///             lhs.iter()\n ///                 .zip(rhs.iter())\n ///                 .map(|(x, y)| *x & *y)\n-///                 .collect())\n+///                 .collect()\n+///         )\n ///     }\n /// }\n ///\n@@ -207,10 +209,12 @@ bitand_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n ///     fn bitor(self, Self(rhs): Self) -> Self::Output {\n ///         let Self(lhs) = self;\n ///         assert_eq!(lhs.len(), rhs.len());\n-///         Self(lhs.iter()\n+///         Self(\n+///             lhs.iter()\n ///                 .zip(rhs.iter())\n ///                 .map(|(x, y)| *x | *y)\n-///                 .collect())\n+///                 .collect()\n+///         )\n ///     }\n /// }\n ///\n@@ -305,10 +309,12 @@ bitor_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n ///     fn bitxor(self, Self(rhs): Self) -> Self::Output {\n ///         let Self(lhs) = self;\n ///         assert_eq!(lhs.len(), rhs.len());\n-///         Self(lhs.iter()\n+///         Self(\n+///             lhs.iter()\n ///                 .zip(rhs.iter())\n ///                 .map(|(x, y)| *x ^ *y)\n-///                 .collect())\n+///                 .collect()\n+///         )\n ///     }\n /// }\n ///\n@@ -646,11 +652,13 @@ shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n ///     // `rhs` is the \"right-hand side\" of the expression `a &= b`.\n ///     fn bitand_assign(&mut self, rhs: Self) {\n ///         assert_eq!(self.0.len(), rhs.0.len());\n-///         *self = Self(self.0\n-///                          .iter()\n-///                          .zip(rhs.0.iter())\n-///                          .map(|(x, y)| *x & *y)\n-///                          .collect());\n+///         *self = Self(\n+///             self.0\n+///                 .iter()\n+///                 .zip(rhs.0.iter())\n+///                 .map(|(x, y)| *x & *y)\n+///                 .collect()\n+///         );\n ///     }\n /// }\n ///"}]}