{"sha": "7530c7d1bdae3fc511294369e10dabf259996272", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MzBjN2QxYmRhZTNmYzUxMTI5NDM2OWUxMGRhYmYyNTk5OTYyNzI=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-07T06:21:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-07T06:21:05Z"}, "message": "Rollup merge of #86081 - LingMan:try_into, r=jyn514\n\nUse `try_into` instead of asserting manually\n\n`@rustbot` modify labels +C-cleanup +T-compiler", "tree": {"sha": "04a4e52b11f473366d5aba11f245c0caaa77b408", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04a4e52b11f473366d5aba11f245c0caaa77b408"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7530c7d1bdae3fc511294369e10dabf259996272", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgvbrSCRBK7hj4Ov3rIwAAe0oIACRy4onfn+5LocbZiJalvMR0\nMApLm4Po46GRQkTfn2o7yZx4Nv7kMzfdXcCAYwfHlj13j34ses6ebqtNtJtxpZHQ\n/zgyuGQ1vE9nNjsSlGITHCZ5RBcXvt6830eNbhuQAbbLOaAC8JcmM9qMXC8W44OL\nZX8YKTWgsS1K7g0AC2rntgBHKWXbWe23YKLw8w9fy9dMvUvsLUaKg+6+l3JH4fT/\ns49L7vg2r83m+vuUcRm2iD90ooSzh6wXy3U+MRKzZD5L+cK47MqioS+IeNH1j+QG\nv6WezYxnzbsjQCeysGfKCeGUla43WeE6ndovck3rzkiN8r60xwNp4yJyL2ZRH4M=\n=SWP4\n-----END PGP SIGNATURE-----\n", "payload": "tree 04a4e52b11f473366d5aba11f245c0caaa77b408\nparent fa38fad5a2f111eb17b8beb833a053c30b61846a\nparent 07dbd4d39826b1c4a4e0bcd7501dae9236be8bbe\nauthor Yuki Okushi <jtitor@2k36.org> 1623046865 +0900\ncommitter GitHub <noreply@github.com> 1623046865 +0900\n\nRollup merge of #86081 - LingMan:try_into, r=jyn514\n\nUse `try_into` instead of asserting manually\n\n`@rustbot` modify labels +C-cleanup +T-compiler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7530c7d1bdae3fc511294369e10dabf259996272", "html_url": "https://github.com/rust-lang/rust/commit/7530c7d1bdae3fc511294369e10dabf259996272", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7530c7d1bdae3fc511294369e10dabf259996272/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fa38fad5a2f111eb17b8beb833a053c30b61846a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fa38fad5a2f111eb17b8beb833a053c30b61846a", "html_url": "https://github.com/rust-lang/rust/commit/fa38fad5a2f111eb17b8beb833a053c30b61846a"}, {"sha": "07dbd4d39826b1c4a4e0bcd7501dae9236be8bbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/07dbd4d39826b1c4a4e0bcd7501dae9236be8bbe", "html_url": "https://github.com/rust-lang/rust/commit/07dbd4d39826b1c4a4e0bcd7501dae9236be8bbe"}], "stats": {"total": 12, "additions": 2, "deletions": 10}, "files": [{"sha": "8e71ded3d1de6a7dfbbc006d4d7e8525df3d4866", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7530c7d1bdae3fc511294369e10dabf259996272/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7530c7d1bdae3fc511294369e10dabf259996272/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=7530c7d1bdae3fc511294369e10dabf259996272", "patch": "@@ -753,11 +753,7 @@ impl FieldsShape {\n         match *self {\n             FieldsShape::Primitive => 0,\n             FieldsShape::Union(count) => count.get(),\n-            FieldsShape::Array { count, .. } => {\n-                let usize_count = count as usize;\n-                assert_eq!(usize_count as u64, count);\n-                usize_count\n-            }\n+            FieldsShape::Array { count, .. } => count.try_into().unwrap(),\n             FieldsShape::Arbitrary { ref offsets, .. } => offsets.len(),\n         }\n     }\n@@ -791,11 +787,7 @@ impl FieldsShape {\n                 unreachable!(\"FieldsShape::memory_index: `Primitive`s have no fields\")\n             }\n             FieldsShape::Union(_) | FieldsShape::Array { .. } => i,\n-            FieldsShape::Arbitrary { ref memory_index, .. } => {\n-                let r = memory_index[i];\n-                assert_eq!(r as usize as u32, r);\n-                r as usize\n-            }\n+            FieldsShape::Arbitrary { ref memory_index, .. } => memory_index[i].try_into().unwrap(),\n         }\n     }\n "}]}