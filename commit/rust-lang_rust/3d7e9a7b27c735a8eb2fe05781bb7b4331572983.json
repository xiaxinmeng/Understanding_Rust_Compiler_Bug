{"sha": "3d7e9a7b27c735a8eb2fe05781bb7b4331572983", "node_id": "C_kwDOAAsO6NoAKDNkN2U5YTdiMjdjNzM1YThlYjJmZTA1NzgxYmI3YjQzMzE1NzI5ODM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-23T00:49:25Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-24T19:26:54Z"}, "message": "Only record extra lifetime params for async trait fn with no body", "tree": {"sha": "d9f903e8a61ad4254e1fa80d28a5f277a8932fdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9f903e8a61ad4254e1fa80d28a5f277a8932fdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d7e9a7b27c735a8eb2fe05781bb7b4331572983", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d7e9a7b27c735a8eb2fe05781bb7b4331572983", "html_url": "https://github.com/rust-lang/rust/commit/3d7e9a7b27c735a8eb2fe05781bb7b4331572983", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d7e9a7b27c735a8eb2fe05781bb7b4331572983/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59c4a92bafaf19e2d9039436294aa805d748ce0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/59c4a92bafaf19e2d9039436294aa805d748ce0f", "html_url": "https://github.com/rust-lang/rust/commit/59c4a92bafaf19e2d9039436294aa805d748ce0f"}], "stats": {"total": 132, "additions": 44, "deletions": 88}, "files": [{"sha": "558db003867d29e8d42e526943a9f6f8b1dcd9d6", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 40, "deletions": 38, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/3d7e9a7b27c735a8eb2fe05781bb7b4331572983/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7e9a7b27c735a8eb2fe05781bb7b4331572983/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=3d7e9a7b27c735a8eb2fe05781bb7b4331572983", "patch": "@@ -789,8 +789,9 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n         let previous_value = self.diagnostic_metadata.current_function;\n         match fn_kind {\n             // Bail if the function is foreign, and thus cannot validly have\n-            // a body.\n-            FnKind::Fn(FnCtxt::Foreign, _, sig, _, generics, _) => {\n+            // a body, or if there's no body for some other reason.\n+            FnKind::Fn(FnCtxt::Foreign, _, sig, _, generics, _)\n+            | FnKind::Fn(_, _, sig, _, generics, None) => {\n                 self.visit_fn_header(&sig.header);\n                 self.visit_generics(generics);\n                 self.with_lifetime_rib(\n@@ -804,7 +805,12 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             sig.decl.has_self(),\n                             sig.decl.inputs.iter().map(|Param { ty, .. }| (None, &**ty)),\n                             &sig.decl.output,\n-                        )\n+                        );\n+\n+                        this.record_lifetime_params_for_async(\n+                            fn_id,\n+                            sig.header.asyncness.opt_return_id(),\n+                        );\n                     },\n                 );\n                 return;\n@@ -846,41 +852,7 @@ impl<'a: 'ast, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                             },\n                         );\n \n-                        // Construct the list of in-scope lifetime parameters for async lowering.\n-                        // We include all lifetime parameters, either named or \"Fresh\".\n-                        // The order of those parameters does not matter, as long as it is\n-                        // deterministic.\n-                        if let Some((async_node_id, _)) = async_node_id {\n-                            let mut extra_lifetime_params = this\n-                                .r\n-                                .extra_lifetime_params_map\n-                                .get(&fn_id)\n-                                .cloned()\n-                                .unwrap_or_default();\n-                            for rib in this.lifetime_ribs.iter().rev() {\n-                                extra_lifetime_params.extend(\n-                                    rib.bindings\n-                                        .iter()\n-                                        .map(|(&ident, &(node_id, res))| (ident, node_id, res)),\n-                                );\n-                                match rib.kind {\n-                                    LifetimeRibKind::Item => break,\n-                                    LifetimeRibKind::AnonymousCreateParameter {\n-                                        binder, ..\n-                                    } => {\n-                                        if let Some(earlier_fresh) =\n-                                            this.r.extra_lifetime_params_map.get(&binder)\n-                                        {\n-                                            extra_lifetime_params.extend(earlier_fresh);\n-                                        }\n-                                    }\n-                                    _ => {}\n-                                }\n-                            }\n-                            this.r\n-                                .extra_lifetime_params_map\n-                                .insert(async_node_id, extra_lifetime_params);\n-                        }\n+                        this.record_lifetime_params_for_async(fn_id, async_node_id);\n \n                         if let Some(body) = body {\n                             // Ignore errors in function bodies if this is rustdoc\n@@ -3925,6 +3897,36 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             Some((ident.name, ns)),\n         )\n     }\n+\n+    /// Construct the list of in-scope lifetime parameters for async lowering.\n+    /// We include all lifetime parameters, either named or \"Fresh\".\n+    /// The order of those parameters does not matter, as long as it is\n+    /// deterministic.\n+    fn record_lifetime_params_for_async(\n+        &mut self,\n+        fn_id: NodeId,\n+        async_node_id: Option<(NodeId, Span)>,\n+    ) {\n+        if let Some((async_node_id, _)) = async_node_id {\n+            let mut extra_lifetime_params =\n+                self.r.extra_lifetime_params_map.get(&fn_id).cloned().unwrap_or_default();\n+            for rib in self.lifetime_ribs.iter().rev() {\n+                extra_lifetime_params.extend(\n+                    rib.bindings.iter().map(|(&ident, &(node_id, res))| (ident, node_id, res)),\n+                );\n+                match rib.kind {\n+                    LifetimeRibKind::Item => break,\n+                    LifetimeRibKind::AnonymousCreateParameter { binder, .. } => {\n+                        if let Some(earlier_fresh) = self.r.extra_lifetime_params_map.get(&binder) {\n+                            extra_lifetime_params.extend(earlier_fresh);\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+            self.r.extra_lifetime_params_map.insert(async_node_id, extra_lifetime_params);\n+        }\n+    }\n }\n \n struct LifetimeCountVisitor<'a, 'b> {"}, {"sha": "91a14523c63b2ecad25327dcd2cd2df036146e04", "filename": "src/test/ui/async-await/issue-102138.rs", "status": "removed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/59c4a92bafaf19e2d9039436294aa805d748ce0f/src%2Ftest%2Fui%2Fasync-await%2Fissue-102138.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59c4a92bafaf19e2d9039436294aa805d748ce0f/src%2Ftest%2Fui%2Fasync-await%2Fissue-102138.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-102138.rs?ref=59c4a92bafaf19e2d9039436294aa805d748ce0f", "patch": "@@ -1,46 +0,0 @@\n-// check-pass\n-// edition:2021\n-\n-#![feature(return_position_impl_trait_in_trait)]\n-#![allow(incomplete_features)]\n-\n-use std::future::Future;\n-\n-async fn yield_now() {}\n-\n-trait AsyncIterator {\n-    type Item;\n-    async fn next(&mut self) -> Option<Self::Item>;\n-}\n-\n-struct YieldingRange {\n-    counter: u32,\n-    stop: u32,\n-}\n-\n-impl AsyncIterator for YieldingRange {\n-    type Item = u32;\n-\n-    async fn next(&mut self) -> Option<Self::Item> {\n-        if self.counter == self.stop {\n-            None\n-        } else {\n-            let c = self.counter;\n-            self.counter += 1;\n-            yield_now().await;\n-            Some(c)\n-        }\n-    }\n-}\n-\n-async fn async_main() {\n-    let mut x = YieldingRange { counter: 0, stop: 10 };\n-\n-    while let Some(v) = x.next().await {\n-        println!(\"Hi: {v}\");\n-    }\n-}\n-\n-fn main() {\n-    let _ = async_main();\n-}"}, {"sha": "c377ecea94d0c4ab2deda58974bae6077bb08506", "filename": "src/test/ui/resolve/issue-69401-trait-fn-no-body-ty-local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d7e9a7b27c735a8eb2fe05781bb7b4331572983/src%2Ftest%2Fui%2Fresolve%2Fissue-69401-trait-fn-no-body-ty-local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d7e9a7b27c735a8eb2fe05781bb7b4331572983/src%2Ftest%2Fui%2Fresolve%2Fissue-69401-trait-fn-no-body-ty-local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-69401-trait-fn-no-body-ty-local.rs?ref=3d7e9a7b27c735a8eb2fe05781bb7b4331572983", "patch": "@@ -2,5 +2,5 @@ fn main() {}\n \n trait Foo {\n     fn fn_with_type_named_same_as_local_in_param(b: b);\n-    //~^ ERROR expected type, found local variable `b`\n+    //~^ ERROR cannot find type `b` in this scope [E0412]\n }"}, {"sha": "109409d2731c5b4717b6450ebc7e9bed57f3198f", "filename": "src/test/ui/resolve/issue-69401-trait-fn-no-body-ty-local.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3d7e9a7b27c735a8eb2fe05781bb7b4331572983/src%2Ftest%2Fui%2Fresolve%2Fissue-69401-trait-fn-no-body-ty-local.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3d7e9a7b27c735a8eb2fe05781bb7b4331572983/src%2Ftest%2Fui%2Fresolve%2Fissue-69401-trait-fn-no-body-ty-local.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-69401-trait-fn-no-body-ty-local.stderr?ref=3d7e9a7b27c735a8eb2fe05781bb7b4331572983", "patch": "@@ -1,9 +1,9 @@\n-error[E0573]: expected type, found local variable `b`\n+error[E0412]: cannot find type `b` in this scope\n   --> $DIR/issue-69401-trait-fn-no-body-ty-local.rs:4:53\n    |\n LL |     fn fn_with_type_named_same_as_local_in_param(b: b);\n-   |                                                     ^ not a type\n+   |                                                     ^ not found in this scope\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0573`.\n+For more information about this error, try `rustc --explain E0412`."}]}