{"sha": "02b22323f129446c9e2255d0eeab6c7ab17aac52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyYjIyMzIzZjEyOTQ0NmM5ZTIyNTVkMGVlYWI2YzdhYjE3YWFjNTI=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-03T12:03:05Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:17:36Z"}, "message": "Make sure the initialization of constrained int range newtypes is unsafe", "tree": {"sha": "93ab14678f78998875c30fe591f048599b5ea5b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93ab14678f78998875c30fe591f048599b5ea5b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02b22323f129446c9e2255d0eeab6c7ab17aac52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02b22323f129446c9e2255d0eeab6c7ab17aac52", "html_url": "https://github.com/rust-lang/rust/commit/02b22323f129446c9e2255d0eeab6c7ab17aac52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02b22323f129446c9e2255d0eeab6c7ab17aac52/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc3470ce3b0ef74eab0f46d865d4d6021911b284", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc3470ce3b0ef74eab0f46d865d4d6021911b284", "html_url": "https://github.com/rust-lang/rust/commit/cc3470ce3b0ef74eab0f46d865d4d6021911b284"}], "stats": {"total": 181, "additions": 169, "deletions": 12}, "files": [{"sha": "d070160609d291a771283b9edd6229316c1b58b0", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=02b22323f129446c9e2255d0eeab6c7ab17aac52", "patch": "@@ -93,6 +93,7 @@\n #![feature(never_type)]\n #![feature(nll)]\n #![feature(exhaustive_patterns)]\n+#![cfg_attr(not(stage0), feature(min_const_unsafe_fn))]\n #![feature(no_core)]\n #![feature(on_unimplemented)]\n #![feature(optin_builtin_traits)]"}, {"sha": "22d93a5301efa870f47d7cb2a0384c178677ebf1", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=02b22323f129446c9e2255d0eeab6c7ab17aac52", "patch": "@@ -15,10 +15,18 @@ use ops::{CoerceUnsized, DispatchFromDyn};\n /// A wrapper type for raw pointers and integers that will never be\n /// NULL or 0 that might allow certain optimizations.\n #[rustc_layout_scalar_valid_range_start(1)]\n-#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]\n+#[derive(Copy, Eq, PartialEq, Ord, PartialOrd, Hash)]\n #[repr(transparent)]\n pub(crate) struct NonZero<T>(pub(crate) T);\n \n+// Do not call `T::clone` as theoretically it could turn the field into `0`\n+// invalidating `NonZero`'s invariant.\n+impl<T: Copy> Clone for NonZero<T> {\n+    fn clone(&self) -> Self {\n+        unsafe { NonZero(self.0) }\n+    }\n+}\n+\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<NonZero<U>> for NonZero<T> {}\n \n impl<T: DispatchFromDyn<U>, U> DispatchFromDyn<NonZero<U>> for NonZero<T> {}"}, {"sha": "7f5d596b220b9e99fdf604d86467a7d28c51f351", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=02b22323f129446c9e2255d0eeab6c7ab17aac52", "patch": "@@ -70,15 +70,15 @@ assert_eq!(size_of::<Option<std::num::\", stringify!($Ty), \">>(), size_of::<\", st\n                 #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n                 #[inline]\n                 pub const unsafe fn new_unchecked(n: $Int) -> Self {\n-                    $Ty(NonZero(n))\n+                    $Ty(unsafe { NonZero(n) })\n                 }\n \n                 /// Create a non-zero if the given value is not zero.\n                 #[stable(feature = \"nonzero\", since = \"1.28.0\")]\n                 #[inline]\n                 pub fn new(n: $Int) -> Option<Self> {\n                     if n != 0 {\n-                        Some($Ty(NonZero(n)))\n+                        Some($Ty(unsafe { NonZero(n) }))\n                     } else {\n                         None\n                     }"}, {"sha": "a07c7260f712ce36fac6c53ee5739c517d2f3e56", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=02b22323f129446c9e2255d0eeab6c7ab17aac52", "patch": "@@ -2759,7 +2759,7 @@ impl<T: ?Sized> Unique<T> {\n     /// Creates a new `Unique` if `ptr` is non-null.\n     pub fn new(ptr: *mut T) -> Option<Self> {\n         if !ptr.is_null() {\n-            Some(Unique { pointer: NonZero(ptr as _), _marker: PhantomData })\n+            Some(Unique { pointer: unsafe { NonZero(ptr as _) }, _marker: PhantomData })\n         } else {\n             None\n         }\n@@ -2815,14 +2815,14 @@ impl<T: ?Sized> fmt::Pointer for Unique<T> {\n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<&'a mut T> for Unique<T> {\n     fn from(reference: &'a mut T) -> Self {\n-        Unique { pointer: NonZero(reference as _), _marker: PhantomData }\n+        Unique { pointer: unsafe { NonZero(reference as _) }, _marker: PhantomData }\n     }\n }\n \n #[unstable(feature = \"ptr_internals\", issue = \"0\")]\n impl<'a, T: ?Sized> From<&'a T> for Unique<T> {\n     fn from(reference: &'a T) -> Self {\n-        Unique { pointer: NonZero(reference as _), _marker: PhantomData }\n+        Unique { pointer: unsafe { NonZero(reference as _) }, _marker: PhantomData }\n     }\n }\n \n@@ -2895,15 +2895,15 @@ impl<T: ?Sized> NonNull<T> {\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n     pub const unsafe fn new_unchecked(ptr: *mut T) -> Self {\n-        NonNull { pointer: NonZero(ptr as _) }\n+        NonNull { pointer: unsafe { NonZero(ptr as _) } }\n     }\n \n     /// Creates a new `NonNull` if `ptr` is non-null.\n     #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n     #[inline]\n     pub fn new(ptr: *mut T) -> Option<Self> {\n         if !ptr.is_null() {\n-            Some(NonNull { pointer: NonZero(ptr as _) })\n+            Some(NonNull { pointer: unsafe { NonZero(ptr as _) } })\n         } else {\n             None\n         }\n@@ -3025,14 +3025,14 @@ impl<T: ?Sized> From<Unique<T>> for NonNull<T> {\n impl<'a, T: ?Sized> From<&'a mut T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &'a mut T) -> Self {\n-        NonNull { pointer: NonZero(reference as _) }\n+        NonNull { pointer: unsafe { NonZero(reference as _) } }\n     }\n }\n \n #[stable(feature = \"nonnull\", since = \"1.25.0\")]\n impl<'a, T: ?Sized> From<&'a T> for NonNull<T> {\n     #[inline]\n     fn from(reference: &'a T) -> Self {\n-        NonNull { pointer: NonZero(reference as _) }\n+        NonNull { pointer: unsafe { NonZero(reference as _) } }\n     }\n }"}, {"sha": "2c80e573749991e38c7e646ce154698088c7a930", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=02b22323f129446c9e2255d0eeab6c7ab17aac52", "patch": "@@ -24,6 +24,8 @@ use rustc::mir::visit::{PlaceContext, Visitor, MutatingUseContext};\n use syntax::ast;\n use syntax::symbol::Symbol;\n \n+use std::ops::Bound;\n+\n use util;\n \n pub struct UnsafetyChecker<'a, 'tcx: 'a> {\n@@ -136,8 +138,18 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n         if let &Rvalue::Aggregate(box ref aggregate, _) = rvalue {\n             match aggregate {\n                 &AggregateKind::Array(..) |\n-                &AggregateKind::Tuple |\n-                &AggregateKind::Adt(..) => {}\n+                &AggregateKind::Tuple => {}\n+                &AggregateKind::Adt(ref def, ..) => {\n+                    match self.tcx.layout_scalar_valid_range(def.did) {\n+                        (Bound::Unbounded, Bound::Unbounded) => {},\n+                        _ => self.require_unsafe(\n+                            \"initializing type with `rustc_layout_scalar_valid_range` attr\",\n+                            \"initializing `NonZero` with a `0` violates layout constraints \\\n+                            and is undefined behavior\",\n+                            UnsafetyViolationKind::MinConstFn,\n+                        ),\n+                    }\n+                }\n                 &AggregateKind::Closure(def_id, _) |\n                 &AggregateKind::Generator(def_id, _, _) => {\n                     let UnsafetyCheckResult {"}, {"sha": "f559c23ff0f541c10479b6fc0cd4b943c1dff94f", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.rs?ref=02b22323f129446c9e2255d0eeab6c7ab17aac52", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![unstable(feature = \"humans\",\n+            reason = \"who ever let humans program computers,\n+            we're apparently really bad at it\",\n+            issue = \"0\")]\n+\n+#![feature(rustc_const_unstable, const_fn, foo, foo2)]\n+#![feature(min_const_unsafe_fn)]\n+#![feature(staged_api)]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature=\"foo\")]\n+const unsafe fn foo() -> u32 { 42 }\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// can't call non-min_const_fn\n+const unsafe fn bar() -> u32 { unsafe { foo() } } //~ ERROR can only call other `min_const_fn`\n+\n+#[unstable(feature = \"rust1\", issue=\"0\")]\n+const unsafe fn foo2() -> u32 { 42 }\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// can't call non-min_const_fn\n+const unsafe fn bar2() -> u32 { unsafe { foo2() } } //~ ERROR can only call other `min_const_fn`\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// conformity is required, even with `const_fn` feature gate\n+const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 } //~ ERROR only int, `bool` and `char` op\n+\n+// check whether this function cannot be called even with the feature gate active\n+#[unstable(feature = \"foo2\", issue=\"0\")]\n+const unsafe fn foo2_gated() -> u32 { 42 }\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// can't call non-min_const_fn\n+const unsafe fn bar2_gated() -> u32 { unsafe { foo2_gated() } } //~ ERROR can only call other\n+\n+fn main() {}"}, {"sha": "37be2889173f851d620821a50d86b1c18e919327", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability.stderr?ref=02b22323f129446c9e2255d0eeab6c7ab17aac52", "patch": "@@ -0,0 +1,26 @@\n+error: can only call other `min_const_fn` within a `min_const_fn`\n+  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:26:41\n+   |\n+LL | const unsafe fn bar() -> u32 { unsafe { foo() } } //~ ERROR can only call other `min_const_fn`\n+   |                                         ^^^^^\n+\n+error: can only call other `min_const_fn` within a `min_const_fn`\n+  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:33:42\n+   |\n+LL | const unsafe fn bar2() -> u32 { unsafe { foo2() } } //~ ERROR can only call other `min_const_fn`\n+   |                                          ^^^^^^\n+\n+error: only int, `bool` and `char` operations are stable in const fn\n+  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:37:33\n+   |\n+LL | const unsafe fn bar3() -> u32 { (5f32 + 6f32) as u32 } //~ ERROR only int, `bool` and `char` op\n+   |                                 ^^^^^^^^^^^^^\n+\n+error: can only call other `min_const_fn` within a `min_const_fn`\n+  --> $DIR/min_const_unsafe_fn_libstd_stability.rs:45:48\n+   |\n+LL | const unsafe fn bar2_gated() -> u32 { unsafe { foo2_gated() } } //~ ERROR can only call other\n+   |                                                ^^^^^^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "131bc97c85a2a23bc34aa1ef5acb769653b1a28e", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.rs?ref=02b22323f129446c9e2255d0eeab6c7ab17aac52", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![unstable(feature = \"humans\",\n+            reason = \"who ever let humans program computers,\n+            we're apparently really bad at it\",\n+            issue = \"0\")]\n+\n+#![feature(rustc_const_unstable, const_fn, foo, foo2)]\n+#![feature(min_const_unsafe_fn)]\n+#![feature(staged_api)]\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_const_unstable(feature=\"foo\")]\n+const fn foo() -> u32 { 42 }\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// can't call non-min_const_fn\n+const unsafe fn bar() -> u32 { foo() } //~ ERROR can only call other `min_const_fn`\n+\n+#[unstable(feature = \"rust1\", issue=\"0\")]\n+const fn foo2() -> u32 { 42 }\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// can't call non-min_const_fn\n+const unsafe fn bar2() -> u32 { foo2() } //~ ERROR can only call other `min_const_fn`\n+\n+// check whether this function cannot be called even with the feature gate active\n+#[unstable(feature = \"foo2\", issue=\"0\")]\n+const fn foo2_gated() -> u32 { 42 }\n+\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+// can't call non-min_const_fn\n+const unsafe fn bar2_gated() -> u32 { foo2_gated() } //~ ERROR can only call other `min_const_fn`\n+\n+fn main() {}"}, {"sha": "0b58dc1294be0f7aa4b07a5c95ad8b648eaa0b52", "filename": "src/test/ui/consts/min_const_fn/min_const_unsafe_fn_libstd_stability2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/02b22323f129446c9e2255d0eeab6c7ab17aac52/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Fmin_const_unsafe_fn_libstd_stability2.stderr?ref=02b22323f129446c9e2255d0eeab6c7ab17aac52", "patch": "@@ -0,0 +1,20 @@\n+error: can only call other `min_const_fn` within a `min_const_fn`\n+  --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:26:32\n+   |\n+LL | const unsafe fn bar() -> u32 { foo() } //~ ERROR can only call other `min_const_fn`\n+   |                                ^^^^^\n+\n+error: can only call other `min_const_fn` within a `min_const_fn`\n+  --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:33:33\n+   |\n+LL | const unsafe fn bar2() -> u32 { foo2() } //~ ERROR can only call other `min_const_fn`\n+   |                                 ^^^^^^\n+\n+error: can only call other `min_const_fn` within a `min_const_fn`\n+  --> $DIR/min_const_unsafe_fn_libstd_stability2.rs:41:39\n+   |\n+LL | const unsafe fn bar2_gated() -> u32 { foo2_gated() } //~ ERROR can only call other `min_const_fn`\n+   |                                       ^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}