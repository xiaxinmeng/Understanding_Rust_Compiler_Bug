{"sha": "d19f3ac83441420365bff5e4ce21d1d2175bd8c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxOWYzYWM4MzQ0MTQyMDM2NWJmZjVlNGNlMjFkMWQyMTc1YmQ4YzI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T12:35:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T12:35:53Z"}, "message": "workspace symbols", "tree": {"sha": "0523dc698784bb2501998956f8111b31f4e0387b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0523dc698784bb2501998956f8111b31f4e0387b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d19f3ac83441420365bff5e4ce21d1d2175bd8c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d19f3ac83441420365bff5e4ce21d1d2175bd8c2", "html_url": "https://github.com/rust-lang/rust/commit/d19f3ac83441420365bff5e4ce21d1d2175bd8c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "133d001d8296e51bcb4d0dc0982671f55c2c77d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/133d001d8296e51bcb4d0dc0982671f55c2c77d9", "html_url": "https://github.com/rust-lang/rust/commit/133d001d8296e51bcb4d0dc0982671f55c2c77d9"}], "stats": {"total": 118, "additions": 75, "deletions": 43}, "files": [{"sha": "bb724539d2e41a652066aad04d866304ceb3332b", "filename": "code/src/extension.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/code%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/code%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/code%2Fsrc%2Fextension.ts?ref=d19f3ac83441420365bff5e4ce21d1d2175bd8c2", "patch": "@@ -61,9 +61,9 @@ export function deactivate(): Thenable<void> {\n \n function startServer() {\n     let run: lc.Executable = {\n-        command: \"cargo\",\n-        args: [\"run\", \"--package\", \"m\"],\n-        // command: \"m\",\n+        // command: \"cargo\",\n+        // args: [\"run\", \"--package\", \"m\"],\n+        command: \"m\",\n         options: { cwd: \".\" }\n     }\n     let serverOptions: lc.ServerOptions = {"}, {"sha": "acaadb8a2e6b163979428f3ad2bd40e30ed06e2a", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=d19f3ac83441420365bff5e4ce21d1d2175bd8c2", "patch": "@@ -89,14 +89,15 @@ impl World {\n         Ok(index.clone())\n     }\n \n-    pub fn world_symbols(&self, query: &str, f: &mut FnMut(&Path, &FileSymbol) -> Search) {\n+    pub fn world_symbols<'a>(&'a self, query: &str) -> impl Iterator<Item=(&'a Path, &'a FileSymbol)> + 'a\n+    {\n         let q = Query::new(query);\n-        for (path, data) in self.data.file_map.iter() {\n-            let symbols = data.symbols(path.as_path());\n-            if q.process(symbols, &mut |symbol| f(path, symbol)) == Search::Break {\n-                break;\n-            }\n-        }\n+        self.data.file_map.iter()\n+            .flat_map(move |(path, data)| {\n+                let path: &'a Path = path.as_path();\n+                let symbols = data.symbols(path);\n+                q.process(symbols).map(move |s| (path, s))\n+            })\n     }\n \n     fn file_data(&self, path: &Path) -> Result<Arc<FileData>> {\n@@ -107,11 +108,15 @@ impl World {\n     }\n }\n \n-#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n-pub enum Search {\n-    Continue,\n-    Break,\n-}\n+\n+pub type SearchResult = ::std::result::Result<Continue, Break>;\n+\n+pub struct Continue;\n+\n+pub struct Break;\n+\n+pub const CONTINUE: SearchResult = Ok(Continue);\n+pub const BREAK: SearchResult = Err(Break);\n \n \n #[derive(Default, Debug)]"}, {"sha": "4d90aac0c65e97d578bfd1ddcb988b8190da40e9", "filename": "crates/libanalysis/src/symbol_index.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs?ref=d19f3ac83441420365bff5e4ce21d1d2175bd8c2", "patch": "@@ -5,8 +5,6 @@ use libsyntax2::{\n };\n use fst::{self, IntoStreamer};\n \n-use Search;\n-\n #[derive(Debug)]\n pub(crate) struct FileSymbols {\n     symbols: Vec<FileSymbol>,\n@@ -47,28 +45,26 @@ impl Query {\n         Query { query, all_symbols }\n     }\n \n-    pub(crate) fn process(\n+    pub(crate) fn process<'a>(\n         &self,\n-        file: &FileSymbols,\n-        acc: &mut FnMut(&FileSymbol) -> Search,\n-    ) -> Search {\n+        file: &'a FileSymbols,\n+    ) -> impl Iterator<Item=&'a FileSymbol> + 'a {\n         fn is_type(kind: SyntaxKind) -> bool {\n             match kind {\n                 STRUCT | ENUM | TRAIT | TYPE_ITEM => true,\n                 _ => false,\n             }\n         }\n         let automaton = fst::automaton::Subsequence::new(&self.query);\n-        for idx in file.map.search(automaton).into_stream().into_values() {\n-            let idx = idx as usize;\n-            let symbol = &file.symbols[idx];\n-            if self.all_symbols || is_type(symbol.kind) {\n-                if acc(&symbol) == Search::Break {\n-                    return Search::Break;\n-                }\n-            }\n-        }\n-        Search::Continue\n+        let all_symbols = self.all_symbols;\n+        file.map.search(automaton).into_stream()\n+            .into_values()\n+            .into_iter()\n+            .map(move |idx| {\n+                let idx = idx as usize;\n+                &file.symbols[idx]\n+            })\n+            .filter(move |s| all_symbols || is_type(s.kind))\n     }\n }\n "}, {"sha": "4fd28b7c8856333effc7d8f5b1fa019b795f8299", "filename": "crates/server/src/caps.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/crates%2Fserver%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/crates%2Fserver%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fcaps.rs?ref=d19f3ac83441420365bff5e4ce21d1d2175bd8c2", "patch": "@@ -26,7 +26,7 @@ pub fn server_capabilities() -> ServerCapabilities {\n         references_provider: None,\n         document_highlight_provider: None,\n         document_symbol_provider: Some(true),\n-        workspace_symbol_provider: None,\n+        workspace_symbol_provider: Some(true),\n         code_action_provider: Some(true),\n         code_lens_provider: None,\n         document_formatting_provider: None,"}, {"sha": "d8cca48d06ba5b3851dc08ff6798fd9c11fa219f", "filename": "crates/server/src/dispatch.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/crates%2Fserver%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/crates%2Fserver%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fdispatch.rs?ref=d19f3ac83441420365bff5e4ce21d1d2175bd8c2", "patch": "@@ -30,8 +30,12 @@ impl<R: ClientRequest> Responder<R> {\n                     error: serde_json::Value::Null,\n                 }\n             }\n-            Err(_) => {\n-                error_response(self.id, ErrorCode::InternalError, \"internal error\")?\n+            Err(e) => {\n+                error_response(\n+                    self.id,\n+                    ErrorCode::InternalError,\n+                    format!(\"internal error: {}\", e),\n+                )?\n             }\n         };\n         Ok(res)\n@@ -115,21 +119,20 @@ pub fn send_notification<N>(params: N::Params) -> RawNotification\n \n pub fn unknown_method(id: u64) -> Result<RawResponse> {\n     error_response(id, ErrorCode::MethodNotFound, \"unknown method\")\n-\n }\n \n-fn error_response(id: u64, code: ErrorCode, message: &'static str) -> Result<RawResponse> {\n+fn error_response(id: u64, code: ErrorCode, message: impl Into<String>) -> Result<RawResponse> {\n     #[derive(Serialize)]\n     struct Error {\n         code: i32,\n-        message: &'static str,\n+        message: String,\n     }\n     let resp = RawResponse {\n         id,\n         result: serde_json::Value::Null,\n         error: serde_json::to_value(Error {\n             code: code as i32,\n-            message,\n+            message: message.into(),\n         })?,\n     };\n     Ok(resp)"}, {"sha": "9c044d5a9f425869da4e325ff505f6d9c687e729", "filename": "crates/server/src/main.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/crates%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/crates%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain.rs?ref=d19f3ac83441420365bff5e4ce21d1d2175bd8c2", "patch": "@@ -27,8 +27,6 @@ mod conv;\n mod main_loop;\n mod vfs;\n \n-use std::path::PathBuf;\n-\n use threadpool::ThreadPool;\n use crossbeam_channel::bounded;\n use flexi_logger::{Logger, Duplicate};\n@@ -120,7 +118,7 @@ fn initialized(io: &mut Io) -> Result<()> {\n         let mut pool = ThreadPool::new(4);\n         let (task_sender, task_receiver) = bounded::<Task>(16);\n         let (fs_events_receiver, watcher) = vfs::watch(vec![\n-            PathBuf::from(\"./\")\n+            ::std::env::current_dir()?,\n         ]);\n         info!(\"lifecycle: handshake finished, server ready to serve requests\");\n         let res = main_loop::main_loop("}, {"sha": "bd0e6825bca5ae93652bbb51573ac35891f22a35", "filename": "crates/server/src/main_loop/handlers.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=d19f3ac83441420365bff5e4ce21d1d2175bd8c2", "patch": "@@ -2,9 +2,10 @@ use std::collections::HashMap;\n \n use languageserver_types::{\n     Diagnostic, DiagnosticSeverity, Url, DocumentSymbol,\n-    Command, TextDocumentIdentifier, WorkspaceEdit\n+    Command, TextDocumentIdentifier, WorkspaceEdit,\n+    SymbolInformation, Location,\n };\n-use libanalysis::World;\n+use libanalysis::{World};\n use libeditor;\n use libsyntax2::TextUnit;\n use serde_json::{to_value, from_value};\n@@ -94,6 +95,30 @@ pub fn handle_code_action(\n     Ok(ret)\n }\n \n+pub fn handle_workspace_symbol(\n+    world: World,\n+    params: req::WorkspaceSymbolParams,\n+) -> Result<Option<Vec<SymbolInformation>>> {\n+    let mut acc = Vec::new();\n+    for (path, symbol) in world.world_symbols(&params.query).take(128) {\n+        let line_index = world.file_line_index(path)?;\n+\n+        let info = SymbolInformation {\n+            name: symbol.name.to_string(),\n+            kind: symbol.kind.conv(),\n+            location: Location::new(\n+                Url::from_file_path(path)\n+                    .map_err(|()| format_err!(\"invalid url\"))?,\n+                symbol.node_range.conv_with(&line_index),\n+            ),\n+            container_name: None,\n+        };\n+        acc.push(info);\n+    };\n+\n+    Ok(Some(acc))\n+}\n+\n pub fn handle_execute_command(\n     world: World,\n     mut params: req::ExecuteCommandParams,"}, {"sha": "e8b24355c5cc0ad58b3fb488b4a9869fc1c0b8d6", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=d19f3ac83441420365bff5e4ce21d1d2175bd8c2", "patch": "@@ -25,6 +25,7 @@ use {\n         handle_document_symbol,\n         handle_code_action,\n         handle_execute_command,\n+        handle_workspace_symbol,\n     },\n };\n \n@@ -148,6 +149,9 @@ fn on_request(\n     handle_request_on_threadpool::<req::CodeActionRequest>(\n         &mut req, pool, world, sender, handle_code_action,\n     )?;\n+    handle_request_on_threadpool::<req::WorkspaceSymbol>(\n+        &mut req, pool, world, sender, handle_workspace_symbol,\n+    )?;\n     dispatch::handle_request::<req::ExecuteCommand, _>(&mut req, |params, resp| {\n         io.send(RawMsg::Response(resp.into_response(Ok(None))?));\n "}, {"sha": "a8cc9b537bd92f2278bab0db6610dac496711c7f", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d19f3ac83441420365bff5e4ce21d1d2175bd8c2/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=d19f3ac83441420365bff5e4ce21d1d2175bd8c2", "patch": "@@ -8,6 +8,7 @@ pub use languageserver_types::{\n     DocumentSymbolParams, DocumentSymbolResponse,\n     CodeActionParams, ApplyWorkspaceEditParams,\n     ExecuteCommandParams,\n+    WorkspaceSymbolParams,\n };\n \n "}]}