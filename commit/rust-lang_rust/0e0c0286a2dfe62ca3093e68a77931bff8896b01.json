{"sha": "0e0c0286a2dfe62ca3093e68a77931bff8896b01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlMGMwMjg2YTJkZmU2MmNhMzA5M2U2OGE3NzkzMWJmZjg4OTZiMDE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T16:35:29Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T19:57:12Z"}, "message": "fuse extern & associated item parsing up to defaultness", "tree": {"sha": "6e61ae4d51ca4882262e6b31c0f48f2fe95a5b28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6e61ae4d51ca4882262e6b31c0f48f2fe95a5b28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e0c0286a2dfe62ca3093e68a77931bff8896b01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e0c0286a2dfe62ca3093e68a77931bff8896b01", "html_url": "https://github.com/rust-lang/rust/commit/0e0c0286a2dfe62ca3093e68a77931bff8896b01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e0c0286a2dfe62ca3093e68a77931bff8896b01/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91110fda27b2d227a5c5b20e3be01a47f7e39910", "url": "https://api.github.com/repos/rust-lang/rust/commits/91110fda27b2d227a5c5b20e3be01a47f7e39910", "html_url": "https://github.com/rust-lang/rust/commit/91110fda27b2d227a5c5b20e3be01a47f7e39910"}], "stats": {"total": 196, "additions": 81, "deletions": 115}, "files": [{"sha": "20d6182ddc19b2b528998e4d87ffb5263bbc0ac2", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 39, "deletions": 77, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -13,7 +13,7 @@ use syntax::ast::{AssocItem, AssocItemKind, Item, ItemKind, UseTree, UseTreeKind\n use syntax::ast::{Async, Const, Defaultness, IsAuto, PathSegment, Unsafe};\n use syntax::ast::{BindingMode, Block, FnDecl, FnSig, Mac, MacArgs, MacDelimiter, Param, SelfKind};\n use syntax::ast::{EnumDef, Generics, StructField, TraitRef, Ty, TyKind, Variant, VariantData};\n-use syntax::ast::{FnHeader, ForeignItem, ForeignItemKind, Mutability, Visibility, VisibilityKind};\n+use syntax::ast::{FnHeader, ForeignItem, Mutability, Visibility, VisibilityKind};\n use syntax::ptr::P;\n use syntax::token;\n use syntax::tokenstream::{DelimSpan, TokenStream, TokenTree};\n@@ -333,29 +333,19 @@ impl<'a> Parser<'a> {\n         self.token.is_keyword(kw::Async) && self.is_keyword_ahead(1, &[kw::Fn])\n     }\n \n-    fn missing_assoc_item_kind_err(\n-        &self,\n-        item_type: &str,\n-        prev_span: Span,\n-    ) -> DiagnosticBuilder<'a> {\n-        let expected_kinds = if item_type == \"extern\" {\n-            \"missing `fn`, `type`, or `static`\"\n-        } else {\n-            \"missing `fn`, `type`, or `const`\"\n-        };\n-\n-        // Given this code `path(`, it seems like this is not\n-        // setting the visibility of a macro invocation, but rather\n-        // a mistyped method declaration.\n-        // Create a diagnostic pointing out that `fn` is missing.\n-        //\n-        // x |     pub path(&self) {\n-        //   |        ^ missing `fn`, `type`, or `const`\n-        //     pub  path(\n-        //        ^^ `sp` below will point to this\n+    /// Given this code `path(`, it seems like this is not\n+    /// setting the visibility of a macro invocation,\n+    /// but rather a mistyped method declaration.\n+    /// Create a diagnostic pointing out that `fn` is missing.\n+    ///\n+    /// ```\n+    /// x |     pub   path(&self) {\n+    ///   |         ^ missing `fn`, `type`, `const`, or `static`\n+    /// ```\n+    fn missing_nested_item_kind_err(&self, prev_span: Span) -> DiagnosticBuilder<'a> {\n         let sp = prev_span.between(self.token.span);\n-        let mut err = self\n-            .struct_span_err(sp, &format!(\"{} for {}-item declaration\", expected_kinds, item_type));\n+        let expected_kinds = \"missing `fn`, `type`, `const`, or `static`\";\n+        let mut err = self.struct_span_err(sp, &format!(\"{} for item declaration\", expected_kinds));\n         err.span_label(sp, expected_kinds);\n         err\n     }\n@@ -639,7 +629,7 @@ impl<'a> Parser<'a> {\n     fn parse_assoc_item(\n         &mut self,\n         at_end: &mut bool,\n-        req_name: fn(&token::Token) -> bool,\n+        req_name: ReqName,\n     ) -> PResult<'a, P<AssocItem>> {\n         let attrs = self.parse_outer_attributes()?;\n         let mut unclosed_delims = vec![];\n@@ -660,39 +650,47 @@ impl<'a> Parser<'a> {\n         &mut self,\n         at_end: &mut bool,\n         mut attrs: Vec<Attribute>,\n-        req_name: fn(&token::Token) -> bool,\n+        req_name: ReqName,\n     ) -> PResult<'a, AssocItem> {\n         let lo = self.token.span;\n         let vis = self.parse_visibility(FollowedByType::No)?;\n         let defaultness = self.parse_defaultness();\n+        let (ident, kind) = self.parse_assoc_item_kind(at_end, &mut attrs, req_name, &vis)?;\n+        let span = lo.to(self.prev_span);\n+        let id = DUMMY_NODE_ID;\n+        Ok(AssocItem { id, span, ident, attrs, vis, defaultness, kind, tokens: None })\n+    }\n \n-        let (ident, kind) = if self.eat_keyword(kw::Type) {\n-            self.parse_assoc_ty()?\n+    fn parse_assoc_item_kind(\n+        &mut self,\n+        at_end: &mut bool,\n+        attrs: &mut Vec<Attribute>,\n+        req_name: ReqName,\n+        vis: &Visibility,\n+    ) -> PResult<'a, (Ident, AssocItemKind)> {\n+        if self.eat_keyword(kw::Type) {\n+            self.parse_assoc_ty()\n         } else if self.check_fn_front_matter() {\n-            let (ident, sig, generics, body) = self.parse_fn(at_end, &mut attrs, req_name)?;\n-            (ident, AssocItemKind::Fn(sig, generics, body))\n+            let (ident, sig, generics, body) = self.parse_fn(at_end, attrs, req_name)?;\n+            Ok((ident, AssocItemKind::Fn(sig, generics, body)))\n         } else if self.is_static_global() {\n             self.bump(); // `static`\n             let mutbl = self.parse_mutability();\n             let (ident, ty, expr) = self.parse_item_const_common(Some(mutbl))?;\n-            (ident, AssocItemKind::Static(ty, mutbl, expr))\n+            Ok((ident, AssocItemKind::Static(ty, mutbl, expr)))\n         } else if self.eat_keyword(kw::Const) {\n             let (ident, ty, expr) = self.parse_item_const_common(None)?;\n-            (ident, AssocItemKind::Const(ty, expr))\n+            Ok((ident, AssocItemKind::Const(ty, expr)))\n         } else if self.isnt_macro_invocation() {\n-            return Err(self.missing_assoc_item_kind_err(\"associated\", self.prev_span));\n+            Err(self.missing_nested_item_kind_err(self.prev_span))\n         } else if self.token.is_path_start() {\n             let mac = self.parse_item_macro(&vis)?;\n             *at_end = true;\n-            (Ident::invalid(), AssocItemKind::Macro(mac))\n+            Ok((Ident::invalid(), AssocItemKind::Macro(mac)))\n         } else {\n-            self.recover_attrs_no_item(&attrs)?;\n-            self.unexpected()?\n-        };\n-\n-        let span = lo.to(self.prev_span);\n-        let id = DUMMY_NODE_ID;\n-        Ok(AssocItem { id, span, ident, attrs, vis, defaultness, kind, tokens: None })\n+            self.recover_attrs_no_item(attrs)?;\n+            self.unexpected()\n+        }\n     }\n \n     /// Parses the following grammar:\n@@ -869,46 +867,10 @@ impl<'a> Parser<'a> {\n         let mut attrs = self.parse_outer_attributes()?;\n         let lo = self.token.span;\n         let vis = self.parse_visibility(FollowedByType::No)?;\n-\n-        let (ident, kind) = if self.eat_keyword(kw::Type) {\n-            // FOREIGN TYPE ITEM\n-            self.parse_item_foreign_type()?\n-        } else if self.check_fn_front_matter() {\n-            // FOREIGN FUNCTION ITEM\n-            let (ident, sig, generics, body) = self.parse_fn(at_end, &mut attrs, |_| true)?;\n-            (ident, ForeignItemKind::Fn(sig, generics, body))\n-        } else if self.is_static_global() {\n-            // FOREIGN STATIC ITEM\n-            self.bump(); // `static`\n-            let mutbl = self.parse_mutability();\n-            let (ident, ty, expr) = self.parse_item_const_common(Some(mutbl))?;\n-            (ident, ForeignItemKind::Static(ty, mutbl, expr))\n-        } else if self.eat_keyword(kw::Const) {\n-            let (ident, ty, expr) = self.parse_item_const_common(None)?;\n-            (ident, ForeignItemKind::Const(ty, expr))\n-        } else if self.isnt_macro_invocation() {\n-            return Err(self.missing_assoc_item_kind_err(\"extern\", self.prev_span));\n-        } else if self.token.is_path_start() {\n-            let mac = self.parse_item_macro(&vis)?;\n-            *at_end = true;\n-            (Ident::invalid(), ForeignItemKind::Macro(mac))\n-        } else {\n-            self.recover_attrs_no_item(&attrs)?;\n-            self.unexpected()?\n-        };\n+        let (ident, kind) = self.parse_assoc_item_kind(at_end, &mut attrs, |_| true, &vis)?;\n         Ok(P(self.mk_item(lo, ident, kind, vis, attrs)))\n     }\n \n-    /// Parses a type from a foreign module.\n-    fn parse_item_foreign_type(&mut self) -> PResult<'a, (Ident, ForeignItemKind)> {\n-        let (ident, kind) = self.parse_assoc_ty()?;\n-        let kind = match kind {\n-            AssocItemKind::TyAlias(g, b, d) => ForeignItemKind::TyAlias(g, b, d),\n-            _ => unreachable!(),\n-        };\n-        Ok((ident, kind))\n-    }\n-\n     fn is_static_global(&mut self) -> bool {\n         if self.check_keyword(kw::Static) {\n             // Check if this could be a closure."}, {"sha": "2ed682cea9503ac592d86cc257560d04f8d4ae1f", "filename": "src/test/ui/did_you_mean/issue-40006.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.rs?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -18,10 +18,10 @@ trait A { //~ ERROR missing\n trait B {\n     fn xxx() { ### } //~ ERROR expected\n }\n-trait C { //~ ERROR missing `fn`, `type`, or `const` for associated-item declaration\n+trait C { //~ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n     L = M;\n }\n-trait D { //~ ERROR missing `fn`, `type`, or `const` for associated-item declaration\n+trait D { //~ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n     Z = { 2 + 3 };\n }\n trait E {"}, {"sha": "119e30a3e0f57fcdbaea075cacce6d6ae2155a1f", "filename": "src/test/ui/did_you_mean/issue-40006.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-40006.stderr?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -1,60 +1,60 @@\n-error: missing `fn`, `type`, or `const` for associated-item declaration\n+error: missing `fn`, `type`, `const`, or `static` for item declaration\n   --> $DIR/issue-40006.rs:1:13\n    |\n LL |   impl dyn A {\n    |  _____________^\n LL | |     Y\n-   | |____^ missing `fn`, `type`, or `const`\n+   | |____^ missing `fn`, `type`, `const`, or `static`\n \n-error: missing `fn`, `type`, or `const` for associated-item declaration\n+error: missing `fn`, `type`, `const`, or `static` for item declaration\n   --> $DIR/issue-40006.rs:7:10\n    |\n LL |   trait X {\n    |  __________^\n LL | |     X() {}\n-   | |____^ missing `fn`, `type`, or `const`\n+   | |____^ missing `fn`, `type`, `const`, or `static`\n \n-error: missing `fn`, `type`, or `const` for associated-item declaration\n+error: missing `fn`, `type`, `const`, or `static` for item declaration\n   --> $DIR/issue-40006.rs:15:10\n    |\n LL |   trait A {\n    |  __________^\n LL | |     X() {}\n-   | |____^ missing `fn`, `type`, or `const`\n+   | |____^ missing `fn`, `type`, `const`, or `static`\n \n error: expected `[`, found `#`\n   --> $DIR/issue-40006.rs:19:17\n    |\n LL |     fn xxx() { ### }\n    |                 ^ expected `[`\n \n-error: missing `fn`, `type`, or `const` for associated-item declaration\n+error: missing `fn`, `type`, `const`, or `static` for item declaration\n   --> $DIR/issue-40006.rs:21:10\n    |\n LL |   trait C {\n    |  __________^\n LL | |     L = M;\n-   | |____^ missing `fn`, `type`, or `const`\n+   | |____^ missing `fn`, `type`, `const`, or `static`\n \n-error: missing `fn`, `type`, or `const` for associated-item declaration\n+error: missing `fn`, `type`, `const`, or `static` for item declaration\n   --> $DIR/issue-40006.rs:24:10\n    |\n LL |   trait D {\n    |  __________^\n LL | |     Z = { 2 + 3 };\n-   | |____^ missing `fn`, `type`, or `const`\n+   | |____^ missing `fn`, `type`, `const`, or `static`\n \n error: expected one of `!` or `::`, found `(`\n   --> $DIR/issue-40006.rs:28:9\n    |\n LL |     ::Y ();\n    |         ^ expected one of `!` or `::`\n \n-error: missing `fn`, `type`, or `const` for associated-item declaration\n+error: missing `fn`, `type`, `const`, or `static` for item declaration\n   --> $DIR/issue-40006.rs:32:8\n    |\n LL |     pub hello_method(&self) {\n-   |        ^ missing `fn`, `type`, or `const`\n+   |        ^ missing `fn`, `type`, `const`, or `static`\n \n error[E0599]: no method named `hello_method` found for struct `S` in the current scope\n   --> $DIR/issue-40006.rs:38:7"}, {"sha": "5570f081b157dd58867f0426781809e177b1a455", "filename": "src/test/ui/macros/issue-54441.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.rs?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -1,5 +1,5 @@\n macro_rules! m {\n-    //~^ ERROR missing `fn`, `type`, or `static` for extern-item declaration\n+    //~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n     () => {\n         let\n     };"}, {"sha": "5857aacb431769af35ad7aa7c6716b407d45ea56", "filename": "src/test/ui/macros/issue-54441.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fissue-54441.stderr?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -1,11 +1,11 @@\n-error: missing `fn`, `type`, or `static` for extern-item declaration\n+error: missing `fn`, `type`, `const`, or `static` for item declaration\n   --> $DIR/issue-54441.rs:1:1\n    |\n LL | / macro_rules! m {\n LL | |\n LL | |     () => {\n LL | |         let\n-   | |________^ missing `fn`, `type`, or `static`\n+   | |________^ missing `fn`, `type`, `const`, or `static`\n \n error: aborting due to previous error\n "}, {"sha": "50952eef22f5c0df259a6393792b41a6c4877949", "filename": "src/test/ui/parser/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.rs?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -20,7 +20,7 @@ impl Foo for u16 {\n \n impl Foo for u32 { //~ ERROR not all trait items implemented, missing: `foo`\n     default pub fn foo<T: Default>() -> T { T::default() }\n-    //~^ ERROR missing `fn`, `type`, or `const` for associated-item declaration\n+    //~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n }\n \n fn main() {}"}, {"sha": "07b051ece2b5de8d87e34c784b0499195ef8c880", "filename": "src/test/ui/parser/default.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdefault.stderr?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -1,8 +1,8 @@\n-error: missing `fn`, `type`, or `const` for associated-item declaration\n+error: missing `fn`, `type`, `const`, or `static` for item declaration\n   --> $DIR/default.rs:22:12\n    |\n LL |     default pub fn foo<T: Default>() -> T { T::default() }\n-   |            ^ missing `fn`, `type`, or `const`\n+   |            ^ missing `fn`, `type`, `const`, or `static`\n \n error[E0449]: unnecessary visibility qualifier\n   --> $DIR/default.rs:16:5"}, {"sha": "f6e7f7e6abe8f98c3d71ad3cdf467583db98684e", "filename": "src/test/ui/parser/duplicate-visibility.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.rs?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -2,5 +2,5 @@ fn main() {}\n \n extern {\n     pub pub fn foo();\n-    //~^ ERROR missing `fn`, `type`, or `static` for extern-item declaration\n+    //~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n }"}, {"sha": "398ba65c9e1d89de4ca22ae073fab751b2059040", "filename": "src/test/ui/parser/duplicate-visibility.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fduplicate-visibility.stderr?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -1,8 +1,8 @@\n-error: missing `fn`, `type`, or `static` for extern-item declaration\n+error: missing `fn`, `type`, `const`, or `static` for item declaration\n   --> $DIR/duplicate-visibility.rs:4:8\n    |\n LL |     pub pub fn foo();\n-   |        ^ missing `fn`, `type`, or `static`\n+   |        ^ missing `fn`, `type`, `const`, or `static`\n \n error: aborting due to previous error\n "}, {"sha": "dc47f7410730c5c61c85c6f9d1534fee3733f7bb", "filename": "src/test/ui/parser/extern-no-fn.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.rs?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -1,4 +1,5 @@\n-extern { //~ ERROR missing `fn`, `type`, or `static` for extern-item declaration\n+extern {\n+//~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n     f();\n }\n "}, {"sha": "8d55eefc8d0ecab06db34026229a733a6d86692a", "filename": "src/test/ui/parser/extern-no-fn.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fextern-no-fn.stderr?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -1,10 +1,11 @@\n-error: missing `fn`, `type`, or `static` for extern-item declaration\n+error: missing `fn`, `type`, `const`, or `static` for item declaration\n   --> $DIR/extern-no-fn.rs:1:9\n    |\n LL |   extern {\n    |  _________^\n+LL | |\n LL | |     f();\n-   | |____^ missing `fn`, `type`, or `static`\n+   | |____^ missing `fn`, `type`, `const`, or `static`\n \n error: aborting due to previous error\n "}, {"sha": "014c930ef82053290f49ead17de30754cdf76c24", "filename": "src/test/ui/parser/issue-19398.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19398.rs?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -1,5 +1,5 @@\n trait T {\n-    //~^ ERROR missing `fn`, `type`, or `const` for associated-item declaration\n+    //~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n     extern \"Rust\" unsafe fn foo();\n }\n "}, {"sha": "b38b39f9bd99f21a311d64b34df77d56a07699be", "filename": "src/test/ui/parser/issue-19398.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-19398.stderr?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -1,11 +1,11 @@\n-error: missing `fn`, `type`, or `const` for associated-item declaration\n+error: missing `fn`, `type`, `const`, or `static` for item declaration\n   --> $DIR/issue-19398.rs:1:10\n    |\n LL |   trait T {\n    |  __________^\n LL | |\n LL | |     extern \"Rust\" unsafe fn foo();\n-   | |____^ missing `fn`, `type`, or `const`\n+   | |____^ missing `fn`, `type`, `const`, or `static`\n \n error: aborting due to previous error\n "}, {"sha": "4fe05e6f041550d7d905f0516529f82610c1a80d", "filename": "src/test/ui/parser/issue-21153.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fissue-21153.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fissue-21153.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-21153.rs?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -1,4 +1,5 @@\n-trait MyTrait<T>: Iterator { //~ ERROR missing `fn`, `type`, or `const`\n+trait MyTrait<T>: Iterator {\n+    //~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n     Item = T;\n }\n "}, {"sha": "e9824bd72908189437e8114325e40597e5fcf3aa", "filename": "src/test/ui/parser/issue-21153.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fissue-21153.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fissue-21153.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-21153.stderr?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -1,10 +1,11 @@\n-error: missing `fn`, `type`, or `const` for associated-item declaration\n+error: missing `fn`, `type`, `const`, or `static` for item declaration\n   --> $DIR/issue-21153.rs:1:29\n    |\n LL |   trait MyTrait<T>: Iterator {\n    |  _____________________________^\n+LL | |\n LL | |     Item = T;\n-   | |____^ missing `fn`, `type`, or `const`\n+   | |____^ missing `fn`, `type`, `const`, or `static`\n \n error: aborting due to previous error\n "}, {"sha": "748db8983b59573286eab122d89d0e85775e4ef6", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.rs?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -3,7 +3,7 @@ fn main() {}\n impl T for () { //~ ERROR cannot find trait `T` in this scope\n \n fn foo(&self) {}\n-//~^ ERROR missing `fn`, `type`, or `const`\n+//~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n \n trait T {\n     fn foo(&self);"}, {"sha": "240be39eacef423e897d0f6f1dc98246e1697eb2", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-impl-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-impl-trait.stderr?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -7,15 +7,15 @@ LL | impl T for () {\n LL |\n    |                                                    ^\n \n-error: missing `fn`, `type`, or `const` for associated-item declaration\n+error: missing `fn`, `type`, `const`, or `static` for item declaration\n   --> $DIR/missing-close-brace-in-impl-trait.rs:5:17\n    |\n LL |   fn foo(&self) {}\n    |  _________________^\n LL | |\n LL | |\n LL | | trait T {\n-   | |_ missing `fn`, `type`, or `const`\n+   | |_ missing `fn`, `type`, `const`, or `static`\n \n error[E0405]: cannot find trait `T` in this scope\n   --> $DIR/missing-close-brace-in-impl-trait.rs:3:6"}, {"sha": "4e8cc6489bc64c276a4fc08e1333a8d76a325af7", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.rs?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -3,7 +3,7 @@ trait T {\n     fn foo(&self);\n \n pub(crate) struct Bar<T>();\n-//~^ ERROR missing `fn`, `type`, or `const`\n+//~^ ERROR missing `fn`, `type`, `const`, or `static` for item declaration\n \n impl T for Bar<usize> {\n fn foo(&self) {}"}, {"sha": "54afad5755b1587ed6643d55a4be78fbb3643c4b", "filename": "src/test/ui/parser/mismatched-braces/missing-close-brace-in-trait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0e0c0286a2dfe62ca3093e68a77931bff8896b01/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmismatched-braces%2Fmissing-close-brace-in-trait.stderr?ref=0e0c0286a2dfe62ca3093e68a77931bff8896b01", "patch": "@@ -7,11 +7,11 @@ LL | trait T {\n LL | fn main() {}\n    |                                                                 ^\n \n-error: missing `fn`, `type`, or `const` for associated-item declaration\n+error: missing `fn`, `type`, `const`, or `static` for item declaration\n   --> $DIR/missing-close-brace-in-trait.rs:5:11\n    |\n LL | pub(crate) struct Bar<T>();\n-   |           ^ missing `fn`, `type`, or `const`\n+   |           ^ missing `fn`, `type`, `const`, or `static`\n \n error[E0601]: `main` function not found in crate `missing_close_brace_in_trait`\n   --> $DIR/missing-close-brace-in-trait.rs:1:1"}]}