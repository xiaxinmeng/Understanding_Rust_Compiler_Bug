{"sha": "291c84aad48d09e31e84045c1ffccf82e7c2d443", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5MWM4NGFhZDQ4ZDA5ZTMxZTg0MDQ1YzFmZmNjZjgyZTdjMmQ0NDM=", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-01-05T15:48:02Z"}, "committer": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2017-01-05T15:48:02Z"}, "message": "Un-remove E0001, put a notice on it instead", "tree": {"sha": "ef515808f8c8b279cbe01400680269f3f04ea752", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef515808f8c8b279cbe01400680269f3f04ea752"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/291c84aad48d09e31e84045c1ffccf82e7c2d443", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/291c84aad48d09e31e84045c1ffccf82e7c2d443", "html_url": "https://github.com/rust-lang/rust/commit/291c84aad48d09e31e84045c1ffccf82e7c2d443", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/291c84aad48d09e31e84045c1ffccf82e7c2d443/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70b7bd94cc90c9e7a67a367859c1c2b66d989fda", "url": "https://api.github.com/repos/rust-lang/rust/commits/70b7bd94cc90c9e7a67a367859c1c2b66d989fda", "html_url": "https://github.com/rust-lang/rust/commit/70b7bd94cc90c9e7a67a367859c1c2b66d989fda"}], "stats": {"total": 31, "additions": 29, "deletions": 2}, "files": [{"sha": "ff0976afc0ce744d06e8cf9ac8caea0d36bde420", "filename": "src/librustc_const_eval/diagnostics.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/291c84aad48d09e31e84045c1ffccf82e7c2d443/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c84aad48d09e31e84045c1ffccf82e7c2d443/src%2Flibrustc_const_eval%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fdiagnostics.rs?ref=291c84aad48d09e31e84045c1ffccf82e7c2d443", "patch": "@@ -15,6 +15,33 @@\n // In vim you can `:set tw=80` and use `gq` to wrap paragraphs. Use `:set tw=0` to disable.\n register_long_diagnostics! {\n \n+E0001: r##\"\n+## Note: this error code is no longer emitted by the compiler.\n+\n+This error suggests that the expression arm corresponding to the noted pattern\n+will never be reached as for all possible values of the expression being\n+matched, one of the preceding patterns will match.\n+\n+This means that perhaps some of the preceding patterns are too general, this\n+one is too specific or the ordering is incorrect.\n+\n+For example, the following `match` block has too many arms:\n+\n+```compile_fail,E0001\n+match Some(0) {\n+    Some(bar) => {/* ... */}\n+    x => {/* ... */} // This handles the `None` case\n+    _ => {/* ... */} // All possible cases have already been handled\n+}\n+```\n+\n+`match` blocks have their patterns matched in order, so, for example, putting\n+a wildcard arm above a more specific arm will make the latter arm irrelevant.\n+\n+Ensure the ordering of the match arm is correct and remove any superfluous\n+arms.\n+\"##,\n+\n E0002: r##\"\n ## Note: this error code is no longer emitted by the compiler.\n "}, {"sha": "8286d833e8d22cd2000af6243629feee8c87df95", "filename": "src/test/compile-fail/feature-gate-rustc-diagnostic-macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/291c84aad48d09e31e84045c1ffccf82e7c2d443/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rustc-diagnostic-macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/291c84aad48d09e31e84045c1ffccf82e7c2d443/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rustc-diagnostic-macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-rustc-diagnostic-macros.rs?ref=291c84aad48d09e31e84045c1ffccf82e7c2d443", "patch": "@@ -11,11 +11,11 @@\n // Test that diagnostic macros are gated by `rustc_diagnostic_macros` feature\n // gate\n \n-__register_diagnostic!(E0002);\n+__register_diagnostic!(E0001);\n //~^ ERROR macro undefined: '__register_diagnostic!'\n \n fn main() {\n-    __diagnostic_used!(E0002);\n+    __diagnostic_used!(E0001);\n     //~^ ERROR macro undefined: '__diagnostic_used!'\n }\n "}]}