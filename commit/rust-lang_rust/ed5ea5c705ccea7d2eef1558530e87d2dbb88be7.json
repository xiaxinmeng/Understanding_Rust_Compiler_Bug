{"sha": "ed5ea5c705ccea7d2eef1558530e87d2dbb88be7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNWVhNWM3MDVjY2VhN2QyZWVmMTU1ODUzMGU4N2QyZGJiODhiZTc=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-03-17T19:08:18Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-03-17T19:08:18Z"}, "message": "Reject `_` in `ident` matcher", "tree": {"sha": "6355c3fb56ca99996d6ea171c41d4a8c12b66a98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6355c3fb56ca99996d6ea171c41d4a8c12b66a98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed5ea5c705ccea7d2eef1558530e87d2dbb88be7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed5ea5c705ccea7d2eef1558530e87d2dbb88be7", "html_url": "https://github.com/rust-lang/rust/commit/ed5ea5c705ccea7d2eef1558530e87d2dbb88be7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed5ea5c705ccea7d2eef1558530e87d2dbb88be7/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d06c890fececc6f6779cd65ca83cef4647b8fdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d06c890fececc6f6779cd65ca83cef4647b8fdd", "html_url": "https://github.com/rust-lang/rust/commit/5d06c890fececc6f6779cd65ca83cef4647b8fdd"}], "stats": {"total": 65, "additions": 46, "deletions": 19}, "files": [{"sha": "667653b5f7f26686f62a9f245ee65a053b86bd52", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/ed5ea5c705ccea7d2eef1558530e87d2dbb88be7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5ea5c705ccea7d2eef1558530e87d2dbb88be7/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=ed5ea5c705ccea7d2eef1558530e87d2dbb88be7", "patch": "@@ -86,7 +86,7 @@ use self::TokenTreeOrTokenTreeVec::*;\n \n use ast::Ident;\n use syntax_pos::{self, BytePos, Span};\n-use codemap::Spanned;\n+use codemap::respan;\n use errors::FatalError;\n use ext::tt::quoted::{self, TokenTree};\n use parse::{Directory, ParseSess};\n@@ -709,6 +709,15 @@ pub fn parse(\n     }\n }\n \n+/// The token is an identifier, but not `_`.\n+/// We prohibit passing `_` to macros expecting `ident` for now.\n+fn get_macro_ident(token: &Token) -> Option<Ident> {\n+    match *token {\n+        token::Ident(ident) if ident.name != keywords::Underscore.name() => Some(ident),\n+        _ => None,\n+    }\n+}\n+\n /// Checks whether a non-terminal may begin with a particular token.\n ///\n /// Returning `false` is a *stability guarantee* that such a matcher will *never* begin with that\n@@ -725,7 +734,7 @@ fn may_begin_with(name: &str, token: &Token) -> bool {\n     match name {\n         \"expr\" => token.can_begin_expr(),\n         \"ty\" => token.can_begin_type(),\n-        \"ident\" => token.is_ident(),\n+        \"ident\" => get_macro_ident(token).is_some(),\n         \"vis\" => match *token {\n             // The follow-set of :vis + \"priv\" keyword + interpolated\n             Token::Comma | Token::Ident(_) | Token::Interpolated(_) => true,\n@@ -814,21 +823,14 @@ fn parse_nt<'a>(p: &mut Parser<'a>, sp: Span, name: &str) -> Nonterminal {\n         \"expr\" => token::NtExpr(panictry!(p.parse_expr())),\n         \"ty\" => token::NtTy(panictry!(p.parse_ty())),\n         // this could be handled like a token, since it is one\n-        \"ident\" => match p.token {\n-            token::Ident(sn) => {\n-                p.bump();\n-                token::NtIdent(Spanned::<Ident> {\n-                    node: sn,\n-                    span: p.prev_span,\n-                })\n-            }\n-            _ => {\n-                let token_str = pprust::token_to_string(&p.token);\n-                p.fatal(&format!(\"expected ident, found {}\", &token_str[..]))\n-                    .emit();\n-                FatalError.raise()\n-            }\n-        },\n+        \"ident\" => if let Some(ident) = get_macro_ident(&p.token) {\n+            p.bump();\n+            token::NtIdent(respan(p.prev_span, ident))\n+        } else {\n+            let token_str = pprust::token_to_string(&p.token);\n+            p.fatal(&format!(\"expected ident, found {}\", &token_str)).emit();\n+            FatalError.raise()\n+        }\n         \"path\" => token::NtPath(panictry!(p.parse_path_common(PathStyle::Type, false))),\n         \"meta\" => token::NtMeta(panictry!(p.parse_meta_item())),\n         \"vis\" => token::NtVis(panictry!(p.parse_visibility(true))),"}, {"sha": "48e521de57e90e94f0d7c187c8fb21c0d88968ac", "filename": "src/test/run-pass/macro-pat.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed5ea5c705ccea7d2eef1558530e87d2dbb88be7/src%2Ftest%2Frun-pass%2Fmacro-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5ea5c705ccea7d2eef1558530e87d2dbb88be7/src%2Ftest%2Frun-pass%2Fmacro-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-pat.rs?ref=ed5ea5c705ccea7d2eef1558530e87d2dbb88be7", "patch": "@@ -71,6 +71,4 @@ pub fn main() {\n         let ident_pat!(x) = 2;\n         x+1\n     });\n-\n-    let ident_pat!(_) = 2; // OK\n }"}, {"sha": "eee99296c7941e7fee70c1ea60841548a9b6f5f1", "filename": "src/test/ui/underscore-ident-matcher.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ed5ea5c705ccea7d2eef1558530e87d2dbb88be7/src%2Ftest%2Fui%2Funderscore-ident-matcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed5ea5c705ccea7d2eef1558530e87d2dbb88be7/src%2Ftest%2Fui%2Funderscore-ident-matcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-ident-matcher.rs?ref=ed5ea5c705ccea7d2eef1558530e87d2dbb88be7", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! identity {\n+    ($i: ident) => (\n+        $i\n+    )\n+}\n+\n+fn main() {\n+    let identity!(_) = 10; //~ ERROR no rules expected the token `_`\n+}"}, {"sha": "7f2b6ac30b0dae46ec14f42c6cb60ab14d9aa316", "filename": "src/test/ui/underscore-ident-matcher.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed5ea5c705ccea7d2eef1558530e87d2dbb88be7/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed5ea5c705ccea7d2eef1558530e87d2dbb88be7/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-ident-matcher.stderr?ref=ed5ea5c705ccea7d2eef1558530e87d2dbb88be7", "patch": "@@ -0,0 +1,8 @@\n+error: no rules expected the token `_`\n+  --> $DIR/underscore-ident-matcher.rs:18:19\n+   |\n+LL |     let identity!(_) = 10; //~ ERROR no rules expected the token `_`\n+   |                   ^\n+\n+error: aborting due to previous error\n+"}]}