{"sha": "c655348f26a179193f5d6d1a3a2fbe000a046699", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NTUzNDhmMjZhMTc5MTkzZjVkNmQxYTNhMmZiZTAwMGEwNDY2OTk=", "commit": {"author": {"name": "Felix Raimundo", "email": "felix.raimundo@tweag.io", "date": "2017-05-09T11:20:04Z"}, "committer": {"name": "Felix Raimundo", "email": "felix.raimundo@tweag.io", "date": "2017-05-09T11:20:04Z"}, "message": "Add more examples to `thread::spawn`\n\nPart of #29378", "tree": {"sha": "3d3abf5d6de20a82bbae6182771db8f570417af7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d3abf5d6de20a82bbae6182771db8f570417af7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c655348f26a179193f5d6d1a3a2fbe000a046699", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c655348f26a179193f5d6d1a3a2fbe000a046699", "html_url": "https://github.com/rust-lang/rust/commit/c655348f26a179193f5d6d1a3a2fbe000a046699", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c655348f26a179193f5d6d1a3a2fbe000a046699/comments", "author": null, "committer": null, "parents": [{"sha": "ced823e267c132fab172b1890b24073995e79ffa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ced823e267c132fab172b1890b24073995e79ffa", "html_url": "https://github.com/rust-lang/rust/commit/ced823e267c132fab172b1890b24073995e79ffa"}], "stats": {"total": 57, "additions": 51, "deletions": 6}, "files": [{"sha": "c1e894510b9125ccbbd9e9bf5684dd55a2ecbf57", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 51, "deletions": 6, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/c655348f26a179193f5d6d1a3a2fbe000a046699/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c655348f26a179193f5d6d1a3a2fbe000a046699/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=c655348f26a179193f5d6d1a3a2fbe000a046699", "patch": "@@ -315,6 +315,8 @@ impl Builder {\n     /// thread finishes). The join handle can be used to block on\n     /// termination of the child thread, including recovering its panics.\n     ///\n+    /// For a more complete documentation see [`thread::spawn`][`spawn`].\n+    ///\n     /// # Errors\n     ///\n     /// Unlike the [`spawn`] free function, this method yields an\n@@ -392,14 +394,10 @@ impl Builder {\n /// Panics if the OS fails to create a thread; use [`Builder::spawn`]\n /// to recover from such errors.\n ///\n-/// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n-/// [`join`]: ../../std/thread/struct.JoinHandle.html#method.join\n-/// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n-/// [`panic`]: ../../std/macro.panic.html\n-/// [`Builder::spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n-///\n /// # Examples\n ///\n+/// Simple thread creation.\n+///\n /// ```\n /// use std::thread;\n ///\n@@ -409,6 +407,53 @@ impl Builder {\n ///\n /// handler.join().unwrap();\n /// ```\n+///\n+/// As mentionned in the module documentation, threads are usualy made to\n+/// communicate using [`channel`s][`channels`], here is how it usually looks.\n+///\n+/// This example also shows how to use `move`, in order to give ownership\n+/// of values to a thread.\n+///\n+/// ```\n+/// use std::thread;\n+/// use std::sync::mpsc::channel;\n+///\n+/// let (tx, rx) = channel();\n+///\n+/// let sender = thread::spawn(move || {\n+///     tx.send(\"Hello, thread\".to_owned());\n+/// });\n+///\n+/// let receiver = thread::spawn(move || {\n+///     println!(\"{}\", rx.recv().unwrap());\n+/// });\n+///\n+/// sender.join();\n+/// receiver.join();\n+/// ```\n+///\n+/// A thread can also return a value through its [`JoinHandle`], you can use\n+/// this to make asynchronous computations (futures might be more appropriate\n+/// though).\n+///\n+/// ```\n+/// use std::thread;\n+///\n+/// let computation = thread::spawn(|| {\n+///     // Some expensive computation.\n+///     42\n+/// });\n+///\n+/// let result = computation.join().unwrap();\n+/// println!(\"{}\", v);\n+/// ```\n+///\n+/// [`channels`]: ../../std/sync/mpsc/index.html\n+/// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n+/// [`join`]: ../../std/thread/struct.JoinHandle.html#method.join\n+/// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+/// [`panic`]: ../../std/macro.panic.html\n+/// [`Builder::spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn spawn<F, T>(f: F) -> JoinHandle<T> where\n     F: FnOnce() -> T, F: Send + 'static, T: Send + 'static"}]}