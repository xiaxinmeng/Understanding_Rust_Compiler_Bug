{"sha": "1b642bf02f23d48c93047ae2fca9ebd7c2bdc518", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNjQyYmYwMmYyM2Q0OGM5MzA0N2FlMmZjYTllYmQ3YzJiZGM1MTg=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-18T20:49:20Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-21T03:12:14Z"}, "message": "Change core::comm to use classes instead of resources\n\nPorts now are represented internally as classes.", "tree": {"sha": "9a1a72ccadda56aacd62b6e146c158b2a1aeae32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a1a72ccadda56aacd62b6e146c158b2a1aeae32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b642bf02f23d48c93047ae2fca9ebd7c2bdc518", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b642bf02f23d48c93047ae2fca9ebd7c2bdc518", "html_url": "https://github.com/rust-lang/rust/commit/1b642bf02f23d48c93047ae2fca9ebd7c2bdc518", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b642bf02f23d48c93047ae2fca9ebd7c2bdc518/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b02172971fa658f2e6d3cdb3cbf3bf663801d656", "url": "https://api.github.com/repos/rust-lang/rust/commits/b02172971fa658f2e6d3cdb3cbf3bf663801d656", "html_url": "https://github.com/rust-lang/rust/commit/b02172971fa658f2e6d3cdb3cbf3bf663801d656"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "7f43f6f308cf4d0ce47a9f2fd26c7a1b10620bfe", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 30, "deletions": 21, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/1b642bf02f23d48c93047ae2fca9ebd7c2bdc518/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b642bf02f23d48c93047ae2fca9ebd7c2bdc518/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=1b642bf02f23d48c93047ae2fca9ebd7c2bdc518", "patch": "@@ -94,27 +94,31 @@ fn listen<T: send, U>(f: fn(chan<T>) -> U) -> U {\n     f(po.chan())\n }\n \n-resource port_ptr<T: send>(po: *rust_port) unsafe {\n+class port_ptr<T:send> {\n+  let po: *rust_port;\n+  new(po: *rust_port) { self.po = po; }\n+  drop unsafe {\n     task::unkillable {||\n         // Once the port is detached it's guaranteed not to receive further\n         // messages\n         let yield = 0u;\n         let yieldp = ptr::addr_of(yield);\n-        rustrt::rust_port_begin_detach(po, yieldp);\n+        rustrt::rust_port_begin_detach(self.po, yieldp);\n         if yield != 0u {\n             // Need to wait for the port to be detached\n             // FIXME: If this fails then we're going to leave our port\n             // in a bogus state. (Issue #1988)\n             task::yield();\n         }\n-        rustrt::rust_port_end_detach(po);\n+        rustrt::rust_port_end_detach(self.po);\n \n         // Drain the port so that all the still-enqueued items get dropped\n-        while rustrt::rust_port_size(po) > 0u as size_t {\n-            recv_::<T>(po);\n+        while rustrt::rust_port_size(self.po) > 0u as size_t {\n+            recv_::<T>(self.po);\n         }\n-        rustrt::del_port(po);\n+        rustrt::del_port(self.po);\n     }\n+  }\n }\n \n #[doc = \"\n@@ -126,29 +130,34 @@ Fails if the port is detached or dead. Fails if the port\n is owned by a different task.\n \"]\n fn as_raw_port<T: send, U>(ch: comm::chan<T>, f: fn(*rust_port) -> U) -> U {\n-    resource portref(p: *rust_port) {\n-        if !ptr::is_null(p) {\n-            rustrt::rust_port_drop(p);\n-        }\n+\n+    class portref {\n+       let p: *rust_port;\n+       new(p: *rust_port) { self.p = p; }\n+       drop {\n+         if !ptr::is_null(self.p) {\n+           rustrt::rust_port_drop(self.p);\n+         }\n+       }\n     }\n \n     let p = portref(rustrt::rust_port_take(*ch));\n \n-    if ptr::is_null(*p) {\n+    if ptr::is_null(p.p) {\n         fail \"unable to locate port for channel\"\n-    } else if rustrt::get_task_id() != rustrt::rust_port_task(*p) {\n+    } else if rustrt::get_task_id() != rustrt::rust_port_task(p.p) {\n         fail \"unable to access unowned port\"\n     }\n \n-    f(*p)\n+    f(p.p)\n }\n \n #[doc = \"\n Constructs a channel. The channel is bound to the port used to\n construct it.\n \"]\n fn chan<T: send>(p: port<T>) -> chan<T> {\n-    chan_t(rustrt::get_port_id(***p))\n+    chan_t(rustrt::get_port_id((**p).po))\n }\n \n #[doc = \"\n@@ -170,10 +179,10 @@ fn send<T: send>(ch: chan<T>, -data: T) {\n Receive from a port.  If no data is available on the port then the\n task will block until data becomes available.\n \"]\n-fn recv<T: send>(p: port<T>) -> T { recv_(***p) }\n+fn recv<T: send>(p: port<T>) -> T { recv_((**p).po) }\n \n #[doc = \"Returns true if there are messages available\"]\n-fn peek<T: send>(p: port<T>) -> bool { peek_(***p) }\n+fn peek<T: send>(p: port<T>) -> bool { peek_((**p).po) }\n \n #[doc(hidden)]\n fn recv_chan<T: send>(ch: comm::chan<T>) -> T {\n@@ -196,7 +205,7 @@ fn recv_<T: send>(p: *rust_port) -> T {\n         // Data isn't available yet, so res has not been initialized.\n         task::yield();\n     } else {\n-        // In the absense of compiler-generated preemption points\n+        // In the absence of compiler-generated preemption points\n         // this is a good place to yield\n         task::yield();\n     }\n@@ -210,7 +219,7 @@ fn peek_(p: *rust_port) -> bool unsafe {\n #[doc = \"Receive on one of two ports\"]\n fn select2<A: send, B: send>(p_a: port<A>, p_b: port<B>)\n     -> either<A, B> unsafe {\n-    let ports = [***p_a, ***p_b];\n+    let ports = [(**p_a).po, (**p_b).po];\n     let n_ports = 2 as libc::size_t;\n     let yield = 0u, yieldp = ptr::addr_of(yield);\n \n@@ -233,9 +242,9 @@ fn select2<A: send, B: send>(p_a: port<A>, p_b: port<B>)\n     // Now we know the port we're supposed to receive from\n     assert resport != ptr::null();\n \n-    if resport == ***p_a {\n+    if resport == (**p_a).po {\n         either::left(recv(p_a))\n-    } else if resport == ***p_b {\n+    } else if resport == (**p_b).po {\n         either::right(recv(p_b))\n     } else {\n         fail \"unexpected result from rust_port_select\";\n@@ -482,4 +491,4 @@ fn test_port_detach_fail() {\n             }\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}]}