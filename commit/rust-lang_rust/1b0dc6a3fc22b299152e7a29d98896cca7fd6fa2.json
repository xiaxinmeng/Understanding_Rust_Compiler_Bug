{"sha": "1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiMGRjNmEzZmMyMmIyOTkxNTJlN2EyOWQ5ODg5NmNjYTdmZDZmYTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-30T05:06:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-30T05:06:41Z"}, "message": "auto merge of #16092 : alexcrichton/rust/rollup, r=alexcrichton", "tree": {"sha": "cb3e627709c7fc8e956689b296dcea720665be2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb3e627709c7fc8e956689b296dcea720665be2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "html_url": "https://github.com/rust-lang/rust/commit/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ebf4813a6503d5312f457b8a6ba7b6998a45f2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebf4813a6503d5312f457b8a6ba7b6998a45f2b", "html_url": "https://github.com/rust-lang/rust/commit/5ebf4813a6503d5312f457b8a6ba7b6998a45f2b"}, {"sha": "f91a964ef18cb3242e2b7e9c04f788e21377a859", "url": "https://api.github.com/repos/rust-lang/rust/commits/f91a964ef18cb3242e2b7e9c04f788e21377a859", "html_url": "https://github.com/rust-lang/rust/commit/f91a964ef18cb3242e2b7e9c04f788e21377a859"}], "stats": {"total": 546, "additions": 455, "deletions": 91}, "files": [{"sha": "aa96f3e272712e87165309ab37f122e01f122dbf", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -36,6 +36,10 @@ pub struct TestProps {\n     pub no_prefer_dynamic: bool,\n     // Don't run --pretty expanded when running pretty printing tests\n     pub no_pretty_expanded: bool,\n+    // Which pretty mode are we testing with, default to 'normal'\n+    pub pretty_mode: String,\n+    // Only compare pretty output and don't try compiling\n+    pub pretty_compare_only: bool,\n }\n \n // Load any test directives embedded in the file\n@@ -51,6 +55,8 @@ pub fn load_props(testfile: &Path) -> TestProps {\n     let mut check_stdout = false;\n     let mut no_prefer_dynamic = false;\n     let mut no_pretty_expanded = false;\n+    let mut pretty_mode = None;\n+    let mut pretty_compare_only = false;\n     iter_header(testfile, |ln| {\n         match parse_error_pattern(ln) {\n           Some(ep) => error_patterns.push(ep),\n@@ -85,6 +91,14 @@ pub fn load_props(testfile: &Path) -> TestProps {\n             no_pretty_expanded = parse_no_pretty_expanded(ln);\n         }\n \n+        if pretty_mode.is_none() {\n+            pretty_mode = parse_pretty_mode(ln);\n+        }\n+\n+        if !pretty_compare_only {\n+            pretty_compare_only = parse_pretty_compare_only(ln);\n+        }\n+\n         match parse_aux_build(ln) {\n             Some(ab) => { aux_builds.push(ab); }\n             None => {}\n@@ -115,6 +129,8 @@ pub fn load_props(testfile: &Path) -> TestProps {\n         check_stdout: check_stdout,\n         no_prefer_dynamic: no_prefer_dynamic,\n         no_pretty_expanded: no_pretty_expanded,\n+        pretty_mode: pretty_mode.unwrap_or(\"normal\".to_string()),\n+        pretty_compare_only: pretty_compare_only\n     }\n }\n \n@@ -205,6 +221,14 @@ fn parse_no_pretty_expanded(line: &str) -> bool {\n     parse_name_directive(line, \"no-pretty-expanded\")\n }\n \n+fn parse_pretty_mode(line: &str) -> Option<String> {\n+    parse_name_value_directive(line, \"pretty-mode\")\n+}\n+\n+fn parse_pretty_compare_only(line: &str) -> bool {\n+    parse_name_directive(line, \"pretty-compare-only\")\n+}\n+\n fn parse_exec_env(line: &str) -> Option<(String, String)> {\n     parse_name_value_directive(line, \"exec-env\").map(|nv| {\n         // nv is either FOO or FOO=BAR"}, {"sha": "b8a55fb234dfa28696890833d5cd7ef6652c94a3", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -168,7 +168,7 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n                                     props,\n                                     testfile,\n                                     srcs[round].to_string(),\n-                                    \"normal\");\n+                                    props.pretty_mode.as_slice());\n \n         if !proc_res.status.success() {\n             fatal_proc_rec(format!(\"pretty-printing failed in round {}\",\n@@ -200,6 +200,9 @@ fn run_pretty_test(config: &Config, props: &TestProps, testfile: &Path) {\n \n     compare_source(expected.as_slice(), actual.as_slice());\n \n+    // If we're only making sure that the output matches then just stop here\n+    if props.pretty_compare_only { return; }\n+\n     // Finally, let's make sure it actually appears to remain valid code\n     let proc_res = typecheck_source(config, props, testfile, actual);\n "}, {"sha": "c96f10a0be8e6502ebe83bc3dfd744e43892aa9c", "filename": "src/doc/index.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -84,6 +84,7 @@ as that for which this documentation was generated.*\n \n * [Reddit](http://reddit.com/r/rust)\n * [Stack Overflow](http://stackoverflow.com/questions/tagged/rust)\n+* [Developer Forum](http://discuss.rust-lang.org/)\n * The Rust IRC channels on [irc.mozilla.org](http://irc.mozilla.org/):\n     * [`#rust`](http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust) - general discussion\n     * [`#rust-gamedev`](http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust-gamedev) - game development"}, {"sha": "128d5c9d320595230ffa1d63caf406ef3fc10295", "filename": "src/doc/intro.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -36,8 +36,8 @@ int add_one(void)\n }\n ```\n \n-**Note: obviously this is very simple and non-idiomatic C++.\n-You wouldn't write it in practice; it is for illustrative purposes.**\n+**Note: The above C++ code is deliberately simple and non-idiomatic for the purpose\n+of demonstration. It is not representative of production-quality C++ code.**\n \n This function allocates an integer on the stack,\n and stores it in a variable, `i`."}, {"sha": "79222112b9294ad6add35d24805e6308caf51bfa", "filename": "src/doc/rust.md", "status": "modified", "additions": 71, "deletions": 5, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -1950,6 +1950,12 @@ interpreted:\n - `unsafe_no_drop_flag` - on structs, remove the flag that prevents\n   destructors from being run twice. Destructors might be run multiple times on\n   the same object with this attribute.\n+- `phase` - on `extern crate` statements, allows specifying which \"phase\" of\n+  compilation the crate should be loaded for. Currently, there are two\n+  choices: `link` and `plugin`. `link` is the default. `plugin` will load the\n+  crate at compile-time and use any syntax extensions or lints that the crate\n+  defines. They can both be specified, `#[phase(link, plugin)]` to use a crate\n+  both at runtime and compiletime.\n \n ### Conditional compilation\n \n@@ -2395,17 +2401,17 @@ The currently implemented features of the reference compiler are:\n                closure as `once` is unlikely to be supported going forward. So\n                they are hidden behind this feature until they are to be removed.\n \n-* `managed_boxes` - Usage of `@` pointers is gated due to many\n+* `asm` - The `asm!` macro provides a means for inline assembly. This is often\n+          useful, but the exact syntax for this feature along with its semantics\n+          are likely to change, so this macro usage must be opted into.\n+\n+* `managed_boxes` - Usage of `@` is gated due to many\n                     planned changes to this feature. In the past, this has meant\n                     \"a GC pointer\", but the current implementation uses\n                     reference counting and will likely change drastically over\n                     time. Additionally, the `@` syntax will no longer be used to\n                     create GC boxes.\n \n-* `asm` - The `asm!` macro provides a means for inline assembly. This is often\n-          useful, but the exact syntax for this feature along with its semantics\n-          are likely to change, so this macro usage must be opted into.\n-\n * `non_ascii_idents` - The compiler supports the use of non-ascii identifiers,\n                        but the implementation is a little rough around the\n                        edges, so this can be seen as an experimental feature for\n@@ -2427,6 +2433,66 @@ The currently implemented features of the reference compiler are:\n                 if the system linker is not used then specifying custom flags\n                 doesn't have much meaning.\n \n+* `phase` - Usage of the `#[phase]` attribute allows loading compiler plugins\n+            for custom lints or syntax extensions. The implementation is considered\n+            unwholesome and in need of overhaul, and it is not clear what they\n+            will look like moving forward.\n+\n+* `plugin_registrar` - Indicates that a crate has compiler plugins that it\n+                       wants to load. As with `phase`, the implementation is\n+                       in need of a overhaul, and it is not clear that plugins\n+                       defined using this will continue to work.\n+\n+* `log_syntax` - Allows use of the `log_syntax` macro attribute, which is a\n+                 nasty hack that will certainly be removed.\n+\n+* `trace_macros` - Allows use of the `trace_macros` macro, which is a nasty\n+                   hack that will certainly be removed.\n+\n+* `concat_idents` - Allows use of the `concat_idents` macro, which is in many\n+                    ways insufficient for concatenating identifiers, and may\n+                    be removed entirely for something more wholsome.\n+\n+* `unsafe_destructor` - Allows use of the `#[unsafe_destructor]` attribute,\n+                        which is considered wildly unsafe and will be\n+                        obsoleted by language improvements.\n+\n+* `intrinsics` - Allows use of the \"rust-intrinsics\" ABI. Compiler intrinsics\n+                 are inherently unstable and no promise about them is made.\n+\n+* `lang_items` - Allows use of the `#[lang]` attribute. Like `intrinsics`,\n+                 lang items are inherently unstable and no promise about\n+                 them is made.\n+\n+* `simd` - Allows use of the `#[simd]` attribute, which is overly simple and\n+           not the SIMD interface we want to expose in the long term.\n+\n+* `default_type_params` - Allows use of default type parameters. The future of\n+                          this feature is uncertain.\n+\n+* `quote` - Allows use of the `quote_*!` family of macros, which are\n+            implemented very poorly and will likely change significantly\n+            with a proper implementation.\n+\n+* `linkage` - Allows use of the `linkage` attribute, which is not portable.\n+\n+* `struct_inherit` - Allows using struct inheritance, which is barely\n+                     implemented and will probably be removed. Don't use this.\n+\n+* `overloaded_calls` - Allow implementing the `Fn*` family of traits on user\n+                       types, allowing overloading the call operator (`()`).\n+                       This feature may still undergo changes before being\n+                       stabilized.\n+\n+* `unboxed_closure_sugar` - Allows using `|Foo| -> Bar` as a trait bound\n+                            meaning one of the `Fn` traits.  Still\n+                            experimental.\n+\n+* `rustc_diagnostic_macros`- A mysterious feature, used in the implementation\n+                             of rustc, not meant for mortals.\n+\n+* `unboxed_closures` - A work in progress feature with many known bugs.\n+\n If a feature is promoted to a language feature, then all existing programs will\n start to receive compilation warnings about #[feature] directives which enabled\n the new feature (because the directive is no longer necessary). However, if"}, {"sha": "a934c426857e879f3eec4ca0e4bbefb5920119ba", "filename": "src/etc/gedit/share/gtksourceview-3.0/language-specs/rust.lang", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fgedit%2Fshare%2Fgtksourceview-3.0%2Flanguage-specs%2Frust.lang?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -269,6 +269,14 @@\n       <match>\\\\\\%{common_escape}</match>\n     </context>\n \n+    <context id=\"raw-string\" style-ref=\"string\" class=\"string\" class-disabled=\"no-spell-check\">\n+      <start>r(#*)\"</start>\n+      <end>\"\\%{1@start}</end>\n+      <include>\n+        <context ref=\"def:line-continue\"/>\n+      </include>\n+    </context>\n+\n     <context id=\"string\" style-ref=\"string\" class=\"string\" class-disabled=\"no-spell-check\">\n       <start>\"</start>\n       <end>\"</end>\n@@ -287,6 +295,8 @@\n       <end>\\]</end>\n       <include>\n         <context ref=\"def:in-comment\"/>\n+        <context ref=\"string\"/>\n+        <context ref=\"raw-string\"/>\n       </include>\n     </context>\n \n@@ -305,6 +315,7 @@\n         <context ref=\"number\"/>\n         <context ref=\"scope\"/>\n         <context ref=\"string\"/>\n+        <context ref=\"raw-string\"/>\n         <context ref=\"char\"/>\n         <context ref=\"lifetime\"/>\n         <context ref=\"attribute\"/>"}, {"sha": "bf477781aabf6a8207d61956fc5682013783bb46", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -92,7 +92,7 @@ impl<T: Share + Send> Arc<T> {\n     }\n \n     #[inline]\n-    fn inner<'a>(&'a self) -> &'a ArcInner<T> {\n+    fn inner(&self) -> &ArcInner<T> {\n         // This unsafety is ok because while this arc is alive we're guaranteed\n         // that the inner pointer is valid. Furthermore, we know that the\n         // `ArcInner` structure itself is `Share` because the inner data is\n@@ -142,7 +142,7 @@ impl<T: Share + Send> Clone for Arc<T> {\n #[experimental = \"Deref is experimental.\"]\n impl<T: Send + Share> Deref<T> for Arc<T> {\n     #[inline]\n-    fn deref<'a>(&'a self) -> &'a T {\n+    fn deref(&self) -> &T {\n         &self.inner().data\n     }\n }\n@@ -155,7 +155,7 @@ impl<T: Send + Share + Clone> Arc<T> {\n     /// data is cloned if the reference count is greater than one.\n     #[inline]\n     #[experimental]\n-    pub fn make_unique<'a>(&'a mut self) -> &'a mut T {\n+    pub fn make_unique(&mut self) -> &mut T {\n         // Note that we hold a strong reference, which also counts as\n         // a weak reference, so we only clone if there is an\n         // additional reference of either kind.\n@@ -238,7 +238,7 @@ impl<T: Share + Send> Weak<T> {\n     }\n \n     #[inline]\n-    fn inner<'a>(&'a self) -> &'a ArcInner<T> {\n+    fn inner(&self) -> &ArcInner<T> {\n         // See comments above for why this is \"safe\"\n         unsafe { &*self._ptr }\n     }"}, {"sha": "5e3ce75eb9586bc56a085d28536b4bf3df4780ec", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -29,6 +29,7 @@ use core::fmt;\n use core::iter;\n use core::mem;\n use core::ptr;\n+use std::hash::{Writer, Hash};\n \n use {Collection, Mutable, Deque, MutableSeq};\n \n@@ -707,10 +708,20 @@ impl<A: fmt::Show> fmt::Show for DList<A> {\n     }\n }\n \n+impl<S: Writer, A: Hash<S>> Hash<S> for DList<A> {\n+    fn hash(&self, state: &mut S) {\n+        self.len().hash(state);\n+        for elt in self.iter() {\n+            elt.hash(state);\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use std::prelude::*;\n     use std::rand;\n+    use std::hash;\n     use test::Bencher;\n     use test;\n \n@@ -1075,6 +1086,24 @@ mod tests {\n         assert!(n != m);\n     }\n \n+    #[test]\n+    fn test_hash() {\n+      let mut x = DList::new();\n+      let mut y = DList::new();\n+\n+      assert!(hash::hash(&x) == hash::hash(&y));\n+\n+      x.push_back(1i);\n+      x.push_back(2);\n+      x.push_back(3);\n+\n+      y.push_front(3i);\n+      y.push_front(2);\n+      y.push_front(1);\n+\n+      assert!(hash::hash(&x) == hash::hash(&y));\n+    }\n+\n     #[test]\n     fn test_ord() {\n         let n: DList<int> = list_from([]);"}, {"sha": "5b1722b2769168d396a86de7f23a20cc3480c66d", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -579,7 +579,7 @@ pub trait MutableVectorAllocating<'a, T> {\n      *\n      * * src - A mutable vector of `T`\n      * * start - The index into `src` to start copying from\n-     * * end - The index into `str` to stop copying from\n+     * * end - The index into `src` to stop copying from\n      */\n     fn move_from(self, src: Vec<T>, start: uint, end: uint) -> uint;\n }"}, {"sha": "d4cf10b384f39aba8abeb08c6864cfeb4c76c4be", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -117,23 +117,23 @@ impl Float for f32 {\n     #[inline]\n     fn neg_zero() -> f32 { -0.0 }\n \n-    /// Returns `true` if the number is NaN\n+    /// Returns `true` if the number is NaN.\n     #[inline]\n     fn is_nan(self) -> bool { self != self }\n \n-    /// Returns `true` if the number is infinite\n+    /// Returns `true` if the number is infinite.\n     #[inline]\n     fn is_infinite(self) -> bool {\n         self == Float::infinity() || self == Float::neg_infinity()\n     }\n \n-    /// Returns `true` if the number is neither infinite or NaN\n+    /// Returns `true` if the number is neither infinite or NaN.\n     #[inline]\n     fn is_finite(self) -> bool {\n         !(self.is_nan() || self.is_infinite())\n     }\n \n-    /// Returns `true` if the number is neither zero, infinite, subnormal or NaN\n+    /// Returns `true` if the number is neither zero, infinite, subnormal or NaN.\n     #[inline]\n     fn is_normal(self) -> bool {\n         self.classify() == FPNormal\n@@ -195,25 +195,25 @@ impl Float for f32 {\n         (mantissa as u64, exponent, sign)\n     }\n \n-    /// Round half-way cases toward `NEG_INFINITY`\n+    /// Rounds towards minus infinity.\n     #[inline]\n     fn floor(self) -> f32 {\n         unsafe { intrinsics::floorf32(self) }\n     }\n \n-    /// Round half-way cases toward `INFINITY`\n+    /// Rounds towards plus infinity.\n     #[inline]\n     fn ceil(self) -> f32 {\n         unsafe { intrinsics::ceilf32(self) }\n     }\n \n-    /// Round half-way cases away from `0.0`\n+    /// Rounds to nearest integer. Rounds half-way cases away from zero.\n     #[inline]\n     fn round(self) -> f32 {\n         unsafe { intrinsics::roundf32(self) }\n     }\n \n-    /// The integer part of the number (rounds towards `0.0`)\n+    /// Returns the integer part of the number (rounds towards zero).\n     #[inline]\n     fn trunc(self) -> f32 {\n         unsafe { intrinsics::truncf32(self) }\n@@ -236,7 +236,7 @@ impl Float for f32 {\n         unsafe { intrinsics::fmaf32(self, a, b) }\n     }\n \n-    /// The reciprocal (multiplicative inverse) of the number\n+    /// Returns the reciprocal (multiplicative inverse) of the number.\n     #[inline]\n     fn recip(self) -> f32 { 1.0 / self }\n \n@@ -325,45 +325,45 @@ impl Float for f32 {\n     #[inline]\n     fn ln_10() -> f32 { consts::LN_10 }\n \n-    /// Returns the exponential of the number\n+    /// Returns the exponential of the number.\n     #[inline]\n     fn exp(self) -> f32 {\n         unsafe { intrinsics::expf32(self) }\n     }\n \n-    /// Returns 2 raised to the power of the number\n+    /// Returns 2 raised to the power of the number.\n     #[inline]\n     fn exp2(self) -> f32 {\n         unsafe { intrinsics::exp2f32(self) }\n     }\n \n-    /// Returns the natural logarithm of the number\n+    /// Returns the natural logarithm of the number.\n     #[inline]\n     fn ln(self) -> f32 {\n         unsafe { intrinsics::logf32(self) }\n     }\n \n-    /// Returns the logarithm of the number with respect to an arbitrary base\n+    /// Returns the logarithm of the number with respect to an arbitrary base.\n     #[inline]\n     fn log(self, base: f32) -> f32 { self.ln() / base.ln() }\n \n-    /// Returns the base 2 logarithm of the number\n+    /// Returns the base 2 logarithm of the number.\n     #[inline]\n     fn log2(self) -> f32 {\n         unsafe { intrinsics::log2f32(self) }\n     }\n \n-    /// Returns the base 10 logarithm of the number\n+    /// Returns the base 10 logarithm of the number.\n     #[inline]\n     fn log10(self) -> f32 {\n         unsafe { intrinsics::log10f32(self) }\n     }\n \n-    /// Converts to degrees, assuming the number is in radians\n+    /// Converts to degrees, assuming the number is in radians.\n     #[inline]\n     fn to_degrees(self) -> f32 { self * (180.0f32 / Float::pi()) }\n \n-    /// Converts to radians, assuming the number is in degrees\n+    /// Converts to radians, assuming the number is in degrees.\n     #[inline]\n     fn to_radians(self) -> f32 {\n         let value: f32 = Float::pi();"}, {"sha": "a3ae8e7c79ea355309dc9189cf13c822966b3b21", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 17, "deletions": 18, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -123,23 +123,23 @@ impl Float for f64 {\n     #[inline]\n     fn neg_zero() -> f64 { -0.0 }\n \n-    /// Returns `true` if the number is NaN\n+    /// Returns `true` if the number is NaN.\n     #[inline]\n     fn is_nan(self) -> bool { self != self }\n \n-    /// Returns `true` if the number is infinite\n+    /// Returns `true` if the number is infinite.\n     #[inline]\n     fn is_infinite(self) -> bool {\n         self == Float::infinity() || self == Float::neg_infinity()\n     }\n \n-    /// Returns `true` if the number is neither infinite or NaN\n+    /// Returns `true` if the number is neither infinite or NaN.\n     #[inline]\n     fn is_finite(self) -> bool {\n         !(self.is_nan() || self.is_infinite())\n     }\n \n-    /// Returns `true` if the number is neither zero, infinite, subnormal or NaN\n+    /// Returns `true` if the number is neither zero, infinite, subnormal or NaN.\n     #[inline]\n     fn is_normal(self) -> bool {\n         self.classify() == FPNormal\n@@ -201,25 +201,25 @@ impl Float for f64 {\n         (mantissa, exponent, sign)\n     }\n \n-    /// Round half-way cases toward `NEG_INFINITY`\n+    /// Rounds towards minus infinity.\n     #[inline]\n     fn floor(self) -> f64 {\n         unsafe { intrinsics::floorf64(self) }\n     }\n \n-    /// Round half-way cases toward `INFINITY`\n+    /// Rounds towards plus infinity.\n     #[inline]\n     fn ceil(self) -> f64 {\n         unsafe { intrinsics::ceilf64(self) }\n     }\n \n-    /// Round half-way cases away from `0.0`\n+    /// Rounds to nearest integer. Rounds half-way cases away from zero.\n     #[inline]\n     fn round(self) -> f64 {\n         unsafe { intrinsics::roundf64(self) }\n     }\n \n-    /// The integer part of the number (rounds towards `0.0`)\n+    /// Returns the integer part of the number (rounds towards zero).\n     #[inline]\n     fn trunc(self) -> f64 {\n         unsafe { intrinsics::truncf64(self) }\n@@ -242,7 +242,7 @@ impl Float for f64 {\n         unsafe { intrinsics::fmaf64(self, a, b) }\n     }\n \n-    /// The reciprocal (multiplicative inverse) of the number\n+    /// Returns the reciprocal (multiplicative inverse) of the number.\n     #[inline]\n     fn recip(self) -> f64 { 1.0 / self }\n \n@@ -332,46 +332,45 @@ impl Float for f64 {\n     #[inline]\n     fn ln_10() -> f64 { consts::LN_10 }\n \n-    /// Returns the exponential of the number\n+    /// Returns the exponential of the number.\n     #[inline]\n     fn exp(self) -> f64 {\n         unsafe { intrinsics::expf64(self) }\n     }\n \n-    /// Returns 2 raised to the power of the number\n+    /// Returns 2 raised to the power of the number.\n     #[inline]\n     fn exp2(self) -> f64 {\n         unsafe { intrinsics::exp2f64(self) }\n     }\n \n-    /// Returns the natural logarithm of the number\n+    /// Returns the natural logarithm of the number.\n     #[inline]\n     fn ln(self) -> f64 {\n         unsafe { intrinsics::logf64(self) }\n     }\n \n-    /// Returns the logarithm of the number with respect to an arbitrary base\n+    /// Returns the logarithm of the number with respect to an arbitrary base.\n     #[inline]\n     fn log(self, base: f64) -> f64 { self.ln() / base.ln() }\n \n-    /// Returns the base 2 logarithm of the number\n+    /// Returns the base 2 logarithm of the number.\n     #[inline]\n     fn log2(self) -> f64 {\n         unsafe { intrinsics::log2f64(self) }\n     }\n \n-    /// Returns the base 10 logarithm of the number\n+    /// Returns the base 10 logarithm of the number.\n     #[inline]\n     fn log10(self) -> f64 {\n         unsafe { intrinsics::log10f64(self) }\n     }\n \n-\n-    /// Converts to degrees, assuming the number is in radians\n+    /// Converts to degrees, assuming the number is in radians.\n     #[inline]\n     fn to_degrees(self) -> f64 { self * (180.0f64 / Float::pi()) }\n \n-    /// Converts to radians, assuming the number is in degrees\n+    /// Converts to radians, assuming the number is in degrees.\n     #[inline]\n     fn to_radians(self) -> f64 {\n         let value: f64 = Float::pi();"}, {"sha": "4dd3817e475ed7ade94875bfb85b1773bc1736f5", "filename": "src/libnum/bigint.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fbigint.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -514,9 +514,14 @@ impl Integer for BigUint {\n     #[inline]\n     fn lcm(&self, other: &BigUint) -> BigUint { ((*self * *other) / self.gcd(other)) }\n \n-    /// Returns `true` if the number can be divided by `other` without leaving a remainder.\n+    /// Deprecated, use `is_multiple_of` instead.\n+    #[deprecated = \"function renamed to `is_multiple_of`\"]\n     #[inline]\n-    fn divides(&self, other: &BigUint) -> bool { (*self % *other).is_zero() }\n+    fn divides(&self, other: &BigUint) -> bool { return self.is_multiple_of(other); }\n+\n+    /// Returns `true` if the number is a multiple of `other`.\n+    #[inline]\n+    fn is_multiple_of(&self, other: &BigUint) -> bool { (*self % *other).is_zero() }\n \n     /// Returns `true` if the number is divisible by `2`.\n     #[inline]\n@@ -1112,9 +1117,14 @@ impl Integer for BigInt {\n         BigInt::from_biguint(Plus, self.data.lcm(&other.data))\n     }\n \n-    /// Returns `true` if the number can be divided by `other` without leaving a remainder.\n+    /// Deprecated, use `is_multiple_of` instead.\n+    #[deprecated = \"function renamed to `is_multiple_of`\"]\n+    #[inline]\n+    fn divides(&self, other: &BigInt) -> bool { return self.is_multiple_of(other); }\n+\n+    /// Returns `true` if the number is a multiple of `other`.\n     #[inline]\n-    fn divides(&self, other: &BigInt) -> bool { self.data.divides(&other.data) }\n+    fn is_multiple_of(&self, other: &BigInt) -> bool { self.data.is_multiple_of(&other.data) }\n \n     /// Returns `true` if the number is divisible by `2`.\n     #[inline]"}, {"sha": "b06e2b448d46387ca39ba467d0d32d9f19552837", "filename": "src/libnum/integer.rs", "status": "modified", "additions": 29, "deletions": 16, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibnum%2Finteger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibnum%2Finteger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Finteger.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -77,16 +77,20 @@ pub trait Integer: Num + PartialOrd\n     /// ~~~\n     fn lcm(&self, other: &Self) -> Self;\n \n-    /// Returns `true` if `other` divides evenly into `self`.\n+    /// Deprecated, use `is_multiple_of` instead.\n+    #[deprecated = \"function renamed to `is_multiple_of`\"]\n+    fn divides(&self, other: &Self) -> bool;\n+\n+    /// Returns `true` if `other` is a multiple of `self`.\n     ///\n     /// # Examples\n     ///\n     /// ~~~\n     /// # use num::Integer;\n-    /// assert_eq!(9i.divides(&3), true);\n-    /// assert_eq!(3i.divides(&9), false);\n+    /// assert_eq!(9i.is_multiple_of(&3), true);\n+    /// assert_eq!(3i.is_multiple_of(&9), false);\n     /// ~~~\n-    fn divides(&self, other: &Self) -> bool;\n+    fn is_multiple_of(&self, other: &Self) -> bool;\n \n     /// Returns `true` if the number is even.\n     ///\n@@ -231,10 +235,14 @@ macro_rules! impl_integer_for_int {\n                 ((*self * *other) / self.gcd(other)).abs()\n             }\n \n-            /// Returns `true` if the number can be divided by `other` without\n-            /// leaving a remainder\n+            /// Deprecated, use `is_multiple_of` instead.\n+            #[deprecated = \"function renamed to `is_multiple_of`\"]\n+            #[inline]\n+            fn divides(&self, other: &$T) -> bool { return self.is_multiple_of(other); }\n+\n+            /// Returns `true` if the number is a multiple of `other`.\n             #[inline]\n-            fn divides(&self, other: &$T) -> bool { *self % *other == 0 }\n+            fn is_multiple_of(&self, other: &$T) -> bool { *self % *other == 0 }\n \n             /// Returns `true` if the number is divisible by `2`\n             #[inline]\n@@ -393,21 +401,26 @@ macro_rules! impl_integer_for_uint {\n                 n\n             }\n \n-            /// Calculates the Lowest Common Multiple (LCM) of the number and `other`\n+            /// Calculates the Lowest Common Multiple (LCM) of the number and `other`.\n             #[inline]\n             fn lcm(&self, other: &$T) -> $T {\n                 (*self * *other) / self.gcd(other)\n             }\n \n-            /// Returns `true` if the number can be divided by `other` without leaving a remainder\n+            /// Deprecated, use `is_multiple_of` instead.\n+            #[deprecated = \"function renamed to `is_multiple_of`\"]\n             #[inline]\n-            fn divides(&self, other: &$T) -> bool { *self % *other == 0 }\n+            fn divides(&self, other: &$T) -> bool { return self.is_multiple_of(other); }\n \n-            /// Returns `true` if the number is divisible by `2`\n+            /// Returns `true` if the number is a multiple of `other`.\n+            #[inline]\n+            fn is_multiple_of(&self, other: &$T) -> bool { *self % *other == 0 }\n+\n+            /// Returns `true` if the number is divisible by `2`.\n             #[inline]\n             fn is_even(&self) -> bool { self & 1 == 0 }\n \n-            /// Returns `true` if the number is not divisible by `2`\n+            /// Returns `true` if the number is not divisible by `2`.\n             #[inline]\n             fn is_odd(&self) -> bool { !self.is_even() }\n         }\n@@ -449,10 +462,10 @@ macro_rules! impl_integer_for_uint {\n             }\n \n             #[test]\n-            fn test_divides() {\n-                assert!((6 as $T).divides(&(6 as $T)));\n-                assert!((6 as $T).divides(&(3 as $T)));\n-                assert!((6 as $T).divides(&(1 as $T)));\n+            fn test_is_multiple_of() {\n+                assert!((6 as $T).is_multiple_of(&(6 as $T)));\n+                assert!((6 as $T).is_multiple_of(&(3 as $T)));\n+                assert!((6 as $T).is_multiple_of(&(1 as $T)));\n             }\n \n             #[test]"}, {"sha": "e0f6b4fb9af66a12ccb06e6f4282d12f6ed65890", "filename": "src/libnum/rational.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibnum%2Frational.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibnum%2Frational.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Frational.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -38,13 +38,13 @@ pub type BigRational = Ratio<BigInt>;\n \n impl<T: Clone + Integer + PartialOrd>\n     Ratio<T> {\n-    /// Create a ratio representing the integer `t`.\n+    /// Creates a ratio representing the integer `t`.\n     #[inline]\n     pub fn from_integer(t: T) -> Ratio<T> {\n         Ratio::new_raw(t, One::one())\n     }\n \n-    /// Create a ratio without checking for `denom == 0` or reducing.\n+    /// Creates a ratio without checking for `denom == 0` or reducing.\n     #[inline]\n     pub fn new_raw(numer: T, denom: T) -> Ratio<T> {\n         Ratio { numer: numer, denom: denom }\n@@ -61,7 +61,7 @@ impl<T: Clone + Integer + PartialOrd>\n         ret\n     }\n \n-    /// Convert to an integer.\n+    /// Converts to an integer.\n     #[inline]\n     pub fn to_integer(&self) -> T {\n         self.trunc().numer\n@@ -79,7 +79,7 @@ impl<T: Clone + Integer + PartialOrd>\n         &self.denom\n     }\n \n-    /// Return true if the rational number is an integer (denominator is 1).\n+    /// Returns true if the rational number is an integer (denominator is 1).\n     #[inline]\n     pub fn is_integer(&self) -> bool {\n         self.denom == One::one()\n@@ -103,19 +103,21 @@ impl<T: Clone + Integer + PartialOrd>\n         }\n     }\n \n-    /// Return a `reduce`d copy of self.\n+    /// Returns a `reduce`d copy of self.\n     pub fn reduced(&self) -> Ratio<T> {\n         let mut ret = self.clone();\n         ret.reduce();\n         ret\n     }\n \n-    /// Return the reciprocal\n+    /// Returns the reciprocal.\n     #[inline]\n     pub fn recip(&self) -> Ratio<T> {\n         Ratio::new_raw(self.denom.clone(), self.numer.clone())\n     }\n \n+    /// Rounds towards minus infinity.\n+    #[inline]\n     pub fn floor(&self) -> Ratio<T> {\n         if *self < Zero::zero() {\n             Ratio::from_integer((self.numer - self.denom + One::one()) / self.denom)\n@@ -124,6 +126,8 @@ impl<T: Clone + Integer + PartialOrd>\n         }\n     }\n \n+    /// Rounds towards plus infinity.\n+    #[inline]\n     pub fn ceil(&self) -> Ratio<T> {\n         if *self < Zero::zero() {\n             Ratio::from_integer(self.numer / self.denom)\n@@ -132,27 +136,34 @@ impl<T: Clone + Integer + PartialOrd>\n         }\n     }\n \n+    /// Rounds to the nearest integer. Rounds half-way cases away from zero.\n+    ///\n+    /// Note: This function is currently broken and always rounds away from zero.\n     #[inline]\n     pub fn round(&self) -> Ratio<T> {\n+        // FIXME(#15826)\n         if *self < Zero::zero() {\n             Ratio::from_integer((self.numer - self.denom + One::one()) / self.denom)\n         } else {\n             Ratio::from_integer((self.numer + self.denom - One::one()) / self.denom)\n         }\n     }\n \n+    /// Rounds towards zero.\n     #[inline]\n     pub fn trunc(&self) -> Ratio<T> {\n         Ratio::from_integer(self.numer / self.denom)\n     }\n \n+    ///Returns the fractional part of a number.\n+    #[inline]\n     pub fn fract(&self) -> Ratio<T> {\n         Ratio::new_raw(self.numer % self.denom, self.denom.clone())\n     }\n }\n \n impl Ratio<BigInt> {\n-    /// Converts a float into a rational number\n+    /// Converts a float into a rational number.\n     pub fn from_float<T: Float>(f: T) -> Option<BigRational> {\n         if !f.is_finite() {\n             return None;\n@@ -328,7 +339,7 @@ impl<T: ToStrRadix> ToStrRadix for Ratio<T> {\n \n impl<T: FromStr + Clone + Integer + PartialOrd>\n     FromStr for Ratio<T> {\n-    /// Parses `numer/denom` or just `numer`\n+    /// Parses `numer/denom` or just `numer`.\n     fn from_str(s: &str) -> Option<Ratio<T>> {\n         let mut split = s.splitn('/', 1);\n "}, {"sha": "0a8aae5d1390fff3456ad6d1cc231b95a9f2d41b", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -1230,7 +1230,7 @@ fn link_natively(sess: &Session, trans: &CrateTranslation, dylib: bool,\n     // the symbols\n     if (sess.targ_cfg.os == abi::OsMacos || sess.targ_cfg.os == abi::OsiOS)\n         && (sess.opts.debuginfo != NoDebugInfo) {\n-            match Command::new(\"dsymutil\").arg(out_filename).status() {\n+            match Command::new(\"dsymutil\").arg(out_filename).output() {\n                 Ok(..) => {}\n                 Err(e) => {\n                     sess.err(format!(\"failed to run dsymutil: {}\", e).as_slice());"}, {"sha": "99855c7345cb4e5269a35959944a4edc71e66389", "filename": "src/librustc/front/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibrustc%2Ffront%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ffeature_gate.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -69,6 +69,8 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"rustc_diagnostic_macros\", Active),\n     (\"unboxed_closures\", Active),\n \n+    // if you change this list without updating src/doc/rust.md, cmr will be sad\n+\n     // A temporary feature gate used to enable parser extensions needed\n     // to bootstrap fix for #5723.\n     (\"issue_5723_bootstrap\", Active),"}, {"sha": "1667f2b6d5f0a7ec9cc17f1cc5e6f3ec27bc4661", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -358,9 +358,9 @@ impl LintPass for CTypes {\n                         def::DefTy(def_id) => {\n                             if !adt::is_ffi_safe(cx.tcx, def_id) {\n                                 cx.span_lint(CTYPES, ty.span,\n-                                             \"found enum type without foreign-function-safe \\\n-                                              representation annotation in foreign module\");\n-                                // hmm... this message could be more helpful\n+                                             \"found enum type without foreign-function-safe\n+                                             representation annotation in foreign module, consider \\\n+                                             adding a #[repr(...)] attribute to the enumeration\");\n                             }\n                         }\n                         _ => ()"}, {"sha": "5e7426f3ae749ccddeba3f06a56c000c71409e5b", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -877,6 +877,7 @@ pub fn ast_ty_to_ty<AC:AstConv, RS:RegionScope>(\n                 }\n             }\n             ast::TyFixedLengthVec(ty, e) => {\n+                typeck::write_ty_to_tcx(tcx, e.id, ty::mk_uint());\n                 match const_eval::eval_const_expr_partial(tcx, &*e) {\n                     Ok(ref r) => {\n                         match *r {"}, {"sha": "bbb6e162ecb992e9ff7ebabbbe9976dc074f047d", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -430,6 +430,18 @@ impl<'a> Visitor<()> for GatherLocalsVisitor<'a> {\n         self.fcx.with_region_lb(b.id, || visit::walk_block(self, b, ()));\n     }\n \n+    // Since an expr occurs as part of the type fixed size arrays we\n+    // need to record the type for that node\n+    fn visit_ty(&mut self, t: &ast::Ty, _: ()) {\n+        match t.node {\n+            ast::TyFixedLengthVec(ref ty, ref count_expr) => {\n+                self.visit_ty(&**ty, ());\n+                check_expr_with_hint(self.fcx, &**count_expr, ty::mk_uint());\n+            }\n+            _ => visit::walk_ty(self, t, ())\n+        }\n+    }\n+\n     // Don't descend into fns and items\n     fn visit_fn(&mut self, _: &visit::FnKind, _: &ast::FnDecl,\n                 _: &ast::Block, _: Span, _: ast::NodeId, _: ()) { }\n@@ -3444,6 +3456,12 @@ fn check_expr_with_unifier(fcx: &FnCtxt,\n         }\n       }\n       ast::ExprCast(ref e, ref t) => {\n+        match t.node {\n+            ast::TyFixedLengthVec(_, ref count_expr) => {\n+                check_expr_with_hint(fcx, &**count_expr, ty::mk_uint());\n+            }\n+            _ => {}\n+        }\n         check_cast(fcx, &**e, &**t, id, expr.span);\n       }\n       ast::ExprVec(ref args) => {"}, {"sha": "d94ac103ceb731ed37f18d15a5e80f5c5c68fcfb", "filename": "src/librustc/middle/typeck/check/writeback.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fwriteback.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -181,8 +181,14 @@ impl<'cx> Visitor<()> for WritebackCx<'cx> {\n         visit::walk_local(self, l, ());\n     }\n \n-    fn visit_ty(&mut self, _t: &ast::Ty, _: ()) {\n-        // ignore\n+    fn visit_ty(&mut self, t: &ast::Ty, _: ()) {\n+        match t.node {\n+            ast::TyFixedLengthVec(ref ty, ref count_expr) => {\n+                self.visit_ty(&**ty, ());\n+                write_ty_to_tcx(self.tcx(), count_expr.id, ty::mk_uint());\n+            }\n+            _ => visit::walk_ty(self, t, ())\n+        }\n     }\n }\n "}, {"sha": "45e6694853cb407d73061daf2a00eea6b776acd8", "filename": "src/librustdoc/html/static/main.css", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.css?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -129,6 +129,14 @@ pre {\n     padding: 20px;\n }\n \n+.content.source {\n+    margin-top: 50px;\n+    max-width: none;\n+    overflow: visible;\n+    margin-left: 0px;\n+    min-width: 70em;\n+}\n+\n nav.sub {\n     font-size: 16px;\n     text-transform: uppercase;"}, {"sha": "fcb41c8f6fcc7a5be96e5fbd5c56feb4a8f2bf67", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -114,7 +114,7 @@ impl File {\n     /// `FileMode` and `FileAccess` provide information about the permissions\n     /// context in which a given stream is created. More information about them\n     /// can be found in `std::io`'s docs. If a file is opened with `Write`\n-    /// or `ReadWrite` access, then it will be created it does not already\n+    /// or `ReadWrite` access, then it will be created if it does not already\n     /// exist.\n     ///\n     /// Note that, with this function, a `File` is returned regardless of the"}, {"sha": "1e9ec32d759435baebbc3122097421f182676728", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -178,16 +178,13 @@ pub trait GenericPath: Clone + GenericPathUnsafe {\n     fn into_vec(self) -> Vec<u8>;\n \n     /// Returns an object that implements `Show` for printing paths\n-    ///\n-    /// This will print the equivalent of `to_display_str()` when used with a {} format parameter.\n     fn display<'a>(&'a self) -> Display<'a, Self> {\n         Display{ path: self, filename: false }\n     }\n \n     /// Returns an object that implements `Show` for printing filenames\n     ///\n-    /// This will print the equivalent of `to_filename_display_str()` when used with a {}\n-    /// format parameter. If there is no filename, nothing will be printed.\n+    /// If there is no filename, nothing will be printed.\n     fn filename_display<'a>(&'a self) -> Display<'a, Self> {\n         Display{ path: self, filename: true }\n     }"}, {"sha": "a51a79b6d582009f106dc3d6d07b28ef829af432", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -536,13 +536,16 @@ fn expand_non_macro_stmt(s: &Stmt, fld: &mut MacroExpander)\n                 } => {\n                     // take it apart:\n                     let Local {\n-                        ty: _,\n+                        ty: ty,\n                         pat: pat,\n                         init: init,\n                         id: id,\n                         span: span,\n                         source: source,\n                     } = **local;\n+                    // expand the ty since TyFixedLengthVec contains an Expr\n+                    // and thus may have a macro use\n+                    let expanded_ty = fld.fold_ty(ty);\n                     // expand the pat (it might contain macro uses):\n                     let expanded_pat = fld.fold_pat(pat);\n                     // find the PatIdents in the pattern:\n@@ -566,7 +569,7 @@ fn expand_non_macro_stmt(s: &Stmt, fld: &mut MacroExpander)\n                     let new_init_opt = init.map(|e| fld.fold_expr(e));\n                     let rewritten_local =\n                         box(GC) Local {\n-                            ty: local.ty,\n+                            ty: expanded_ty,\n                             pat: rewritten_pat,\n                             init: new_init_opt,\n                             id: id,"}, {"sha": "0d999e5b315b6ff78fcea772466d985ce53fd8dc", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -1 +1 @@\n-Subproject commit cd24b5c6633b27df2b84249a65a46a610b734494\n+Subproject commit 0d999e5b315b6ff78fcea772466d985ce53fd8dc"}, {"sha": "afba5a4dfd8c2fa0cd6176d4b6ae2d633d3722dd", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2014-07-22\n+2014-07-29"}, {"sha": "a9f57a48f442c3645b3b84d9f22d273e48d913a0", "filename": "src/test/pretty/issue-4264.pp", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -0,0 +1,95 @@\n+#![feature(phase)]\n+#![no_std]\n+#![feature(globs)]\n+#[phase(plugin, link)]\n+extern crate std = \"std\";\n+extern crate rt = \"native\";\n+use std::prelude::*;\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pretty-compare-only\n+// pretty-mode:typed\n+// pp-exact:issue-4264.pp\n+\n+// #4264 fixed-length vector types\n+\n+pub fn foo(_: [int, ..(3 as uint)]) { }\n+\n+pub fn bar() {\n+    static FOO: uint = ((5u as uint) - (4u as uint) as uint);\n+    let _: [(), ..(FOO as uint)] = ([(() as ())] as [(), .. 1]);\n+\n+    let _: [(), ..(1u as uint)] = ([(() as ())] as [(), .. 1]);\n+\n+    let _ =\n+        (((&((([(1i as int), (2 as int), (3 as int)] as [int, .. 3])) as\n+                [int, .. 3]) as &[int, .. 3]) as *const _ as\n+             *const [int, .. 3]) as *const [int, ..(3u as uint)] as\n+            *const [int, .. 3]);\n+    (match (() as ()) {\n+         () => {\n+             #[inline]\n+             #[allow(dead_code)]\n+             static __STATIC_FMTSTR:\n+                    [::std::fmt::rt::Piece<'static>, ..(1u as uint)] =\n+                 ([((::std::fmt::rt::String as\n+                        fn(&'static str) -> core::fmt::rt::Piece<'static>)((\"test\"\n+                                                                               as\n+                                                                               &'static str))\n+                       as core::fmt::rt::Piece<'static>)] as\n+                     [core::fmt::rt::Piece<'static>, .. 1]);\n+             let __args_vec =\n+                 (&([] as &'static [core::fmt::Argument<'static>]) as\n+                     &'static [core::fmt::Argument<'static>]);\n+             let __args =\n+                 (unsafe {\n+                      ((::std::fmt::Arguments::new as\n+                           unsafe fn(&'static [core::fmt::rt::Piece<'static>], &'a [core::fmt::Argument<'a>]) -> core::fmt::Arguments<'a>)((__STATIC_FMTSTR\n+                                                                                                                                               as\n+                                                                                                                                               [core::fmt::rt::Piece<'static>, .. 1]),\n+                                                                                                                                           (__args_vec\n+                                                                                                                                               as\n+                                                                                                                                               &'static [core::fmt::Argument<'static>]))\n+                          as core::fmt::Arguments<'static>)\n+                  } as core::fmt::Arguments<'static>);\n+\n+\n+\n+\n+\n+\n+\n+\n+             ((::std::fmt::format as\n+                  fn(&core::fmt::Arguments<'_>) -> collections::string::String)((&(__args\n+                                                                                      as\n+                                                                                      core::fmt::Arguments<'static>)\n+                                                                                    as\n+                                                                                    &core::fmt::Arguments<'static>))\n+                 as collections::string::String)\n+         }\n+     } as collections::string::String);\n+}\n+pub type Foo = [int, ..(3u as uint)];\n+pub struct Bar {\n+    pub x: [int, ..(3u as uint)],\n+}\n+pub struct TupleBar([int, ..(4u as uint)]);\n+pub enum Baz { BazVariant([int, ..(5u as uint)]), }\n+pub fn id<T>(x: T) -> T { (x as T) }\n+pub fn use_id() {\n+    let _ =\n+        ((id::<[int, ..(3u as uint)]> as\n+             fn([int, .. 3]) -> [int, .. 3])(([(1 as int), (2 as int),\n+                                               (3 as int)] as [int, .. 3])) as\n+            [int, .. 3]);\n+}\n+fn main() { }"}, {"sha": "ad407f48a7ae313f84b5123a81c1ae307c0cc5ea", "filename": "src/test/pretty/issue-4264.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Ftest%2Fpretty%2Fissue-4264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Ftest%2Fpretty%2Fissue-4264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -0,0 +1,49 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// pretty-compare-only\n+// pretty-mode:typed\n+// pp-exact:issue-4264.pp\n+\n+// #4264 fixed-length vector types\n+\n+pub fn foo(_: [int, ..3]) {}\n+\n+pub fn bar() {\n+    static FOO: uint = 5u - 4u;\n+    let _: [(), ..FOO] = [()];\n+\n+    let _ : [(), ..1u] = [()];\n+\n+    let _ = &([1i,2,3]) as *const _ as *const [int, ..3u];\n+\n+    format!(\"test\");\n+}\n+\n+pub type Foo = [int, ..3u];\n+\n+pub struct Bar {\n+    pub x: [int, ..3u]\n+}\n+\n+pub struct TupleBar([int, ..4u]);\n+\n+pub enum Baz {\n+    BazVariant([int, ..5u])\n+}\n+\n+pub fn id<T>(x: T) -> T { x }\n+\n+pub fn use_id() {\n+    let _ = id::<[int, ..3u]>([1,2,3]);\n+}\n+\n+\n+fn main() {}"}, {"sha": "847024d42baca7caeb6a1418f364399ba021de02", "filename": "src/test/run-pass/macro-invocation-in-count-expr-fixed-array-type.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Ftest%2Frun-pass%2Fmacro-invocation-in-count-expr-fixed-array-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2/src%2Ftest%2Frun-pass%2Fmacro-invocation-in-count-expr-fixed-array-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-invocation-in-count-expr-fixed-array-type.rs?ref=1b0dc6a3fc22b299152e7a29d98896cca7fd6fa2", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(macro_rules)]\n+\n+macro_rules! four (\n+    () => (4)\n+)\n+fn main() {\n+    let _x: [u16, ..four!()];\n+}"}]}