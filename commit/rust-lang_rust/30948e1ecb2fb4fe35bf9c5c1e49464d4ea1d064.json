{"sha": "30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOTQ4ZTFlY2IyZmI0ZmUzNWJmOWM1YzFlNDk0NjRkNGVhMWQwNjQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-27T01:47:20Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-27T01:47:20Z"}, "message": "simplify", "tree": {"sha": "3192e07f5e0bd772e47f65be732fa8fd590b3e8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3192e07f5e0bd772e47f65be732fa8fd590b3e8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064", "html_url": "https://github.com/rust-lang/rust/commit/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ec4ea8d9eb9ad6ad8b91968bde09121b5b791a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ec4ea8d9eb9ad6ad8b91968bde09121b5b791a0", "html_url": "https://github.com/rust-lang/rust/commit/6ec4ea8d9eb9ad6ad8b91968bde09121b5b791a0"}], "stats": {"total": 73, "additions": 37, "deletions": 36}, "files": [{"sha": "be9cfbded9bb8d406176a245234aa63e8b49a504", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064", "patch": "@@ -110,12 +110,7 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n     if !ctx.config.enable_imports_on_the_fly {\n         return None;\n     }\n-    if ctx.use_item_syntax.is_some()\n-        || ctx.attribute_under_caret.is_some()\n-        || ctx.mod_declaration_under_caret.is_some()\n-        || ctx.record_lit_syntax.is_some()\n-        || ctx.has_impl_or_trait_parent()\n-    {\n+    if ctx.use_item_syntax.is_some() || ctx.is_path_disallowed() {\n         return None;\n     }\n     let potential_import_name = {"}, {"sha": "5f6285b849723e7f0ef81f56eb85a44d3ec04187", "filename": "crates/ide_completion/src/completions/lifetime.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064", "patch": "@@ -8,19 +8,24 @@ pub(crate) fn complete_lifetime(acc: &mut Completions, ctx: &CompletionContext)\n     if !ctx.lifetime_allowed {\n         return;\n     }\n+    let lp_string;\n     let param_lifetime = match (\n         &ctx.lifetime_syntax,\n         ctx.lifetime_param_syntax.as_ref().and_then(|lp| lp.lifetime()),\n     ) {\n         (Some(lt), Some(lp)) if lp == lt.clone() => return,\n-        (Some(_), Some(lp)) => Some(lp.to_string()),\n+        (Some(_), Some(lp)) => {\n+            lp_string = lp.to_string();\n+            Some(&lp_string)\n+        }\n         _ => None,\n     };\n \n     ctx.scope.process_all_names(&mut |name, res| {\n         if let ScopeDef::GenericParam(hir::GenericParam::LifetimeParam(_)) = res {\n-            if param_lifetime != Some(name.to_string()) {\n-                acc.add_resolution(ctx, name.to_string(), &res);\n+            let name = name.to_string();\n+            if param_lifetime != Some(&name) {\n+                acc.add_resolution(ctx, name, &res);\n             }\n         }\n     });"}, {"sha": "c5e377500053c11b639d1f42c5f3f4ba723f7396", "filename": "crates/ide_completion/src/completions/macro_in_item_position.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmacro_in_item_position.rs?ref=30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064", "patch": "@@ -4,13 +4,15 @@ use crate::{CompletionContext, Completions};\n \n pub(crate) fn complete_macro_in_item_position(acc: &mut Completions, ctx: &CompletionContext) {\n     // Show only macros in top level.\n-    if ctx.is_new_item {\n-        ctx.scope.process_all_names(&mut |name, res| {\n-            if let hir::ScopeDef::MacroDef(mac) = res {\n-                acc.add_macro(ctx, Some(name.to_string()), mac);\n-            }\n-        })\n+    if !ctx.is_new_item {\n+        return;\n     }\n+\n+    ctx.scope.process_all_names(&mut |name, res| {\n+        if let hir::ScopeDef::MacroDef(mac) = res {\n+            acc.add_macro(ctx, Some(name.to_string()), mac);\n+        }\n+    })\n }\n \n #[cfg(test)]"}, {"sha": "ed48f61af60d8e8198863d90df4929ea096e986a", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064", "patch": "@@ -7,21 +7,19 @@ use syntax::AstNode;\n use crate::{CompletionContext, Completions};\n \n pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionContext) {\n+    if ctx.is_path_disallowed() {\n+        return;\n+    }\n     let path = match &ctx.path_qual {\n         Some(path) => path.clone(),\n         None => return,\n     };\n \n-    if ctx.attribute_under_caret.is_some() || ctx.mod_declaration_under_caret.is_some() {\n-        return;\n-    }\n-\n-    let context_module = ctx.scope.module();\n-\n     let resolution = match ctx.sema.resolve_path(&path) {\n         Some(res) => res,\n         None => return,\n     };\n+    let context_module = ctx.scope.module();\n \n     // Add associated types on type parameters and `Self`.\n     resolution.assoc_type_shorthand_candidates(ctx.db, |_, alias| {"}, {"sha": "e1526b70b8c89c556cf68ef39527f8bb6c0a691d", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064", "patch": "@@ -13,20 +13,19 @@ pub(crate) fn complete_record(acc: &mut Completions, ctx: &CompletionContext) ->\n             let ty = ctx.sema.type_of_expr(&Expr::RecordExpr(record_lit.clone()));\n             let default_trait = FamousDefs(&ctx.sema, ctx.krate).core_default_Default();\n             let impl_default_trait = default_trait\n-                .and_then(|default_trait| ty.map(|ty| ty.impls_trait(ctx.db, default_trait, &[])))\n-                .unwrap_or(false);\n+                .zip(ty)\n+                .map_or(false, |(default_trait, ty)| ty.impls_trait(ctx.db, default_trait, &[]));\n \n             let missing_fields = ctx.sema.record_literal_missing_fields(record_lit);\n             if impl_default_trait && !missing_fields.is_empty() {\n                 let completion_text = \"..Default::default()\";\n-                let completion_text = completion_text\n-                    .strip_prefix(ctx.token.to_string().as_str())\n-                    .unwrap_or(completion_text);\n                 let mut item = CompletionItem::new(\n                     CompletionKind::Snippet,\n                     ctx.source_range(),\n-                    \"..Default::default()\",\n+                    completion_text,\n                 );\n+                let completion_text =\n+                    completion_text.strip_prefix(ctx.token.text()).unwrap_or(completion_text);\n                 item.insert_text(completion_text).kind(SymbolKind::Field);\n                 item.add_to(acc);\n             }"}, {"sha": "046a393aeceb325530cf3b73bb9b1a3361ef575e", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064", "patch": "@@ -9,12 +9,7 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n     if !ctx.is_trivial_path {\n         return;\n     }\n-    if ctx.record_lit_syntax.is_some()\n-        || ctx.record_pat_syntax.is_some()\n-        || ctx.attribute_under_caret.is_some()\n-        || ctx.mod_declaration_under_caret.is_some()\n-        || ctx.has_impl_or_trait_parent()\n-    {\n+    if ctx.is_path_disallowed() {\n         return;\n     }\n "}, {"sha": "66577df941da0e19e48c1f98c348994b24a6ee2c", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=30948e1ecb2fb4fe35bf9c5c1e49464d4ea1d064", "patch": "@@ -115,14 +115,13 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) is_path_type: bool,\n     pub(super) has_type_args: bool,\n     pub(super) attribute_under_caret: Option<ast::Attr>,\n-    pub(super) locals: Vec<(String, Local)>,\n-\n     pub(super) mod_declaration_under_caret: Option<ast::Module>,\n+    pub(super) locals: Vec<(String, Local)>,\n \n     // keyword patterns\n     pub(super) previous_token: Option<SyntaxToken>,\n-    pub(super) in_loop_body: bool,\n     pub(super) prev_sibling: Option<PrevSibling>,\n+    pub(super) in_loop_body: bool,\n     pub(super) is_match_arm: bool,\n     pub(super) incomplete_let: bool,\n \n@@ -316,6 +315,14 @@ impl<'a> CompletionContext<'a> {\n         self.prev_sibling.is_some()\n     }\n \n+    pub(crate) fn is_path_disallowed(&self) -> bool {\n+        self.record_lit_syntax.is_some()\n+            || self.record_pat_syntax.is_some()\n+            || self.attribute_under_caret.is_some()\n+            || self.mod_declaration_under_caret.is_some()\n+            || self.has_impl_or_trait_parent()\n+    }\n+\n     fn fill_keyword_patterns(&mut self, file_with_fake_ident: &SyntaxNode, offset: TextSize) {\n         let fake_ident_token = file_with_fake_ident.token_at_offset(offset).right_biased().unwrap();\n         let syntax_element = NodeOrToken::Token(fake_ident_token);"}]}