{"sha": "1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhNmZjOGI3Yjg0MGZiMzgxYjFhZWZhMzViOWIzZDRjNzM2YmFlNTA=", "commit": {"author": {"name": "Niels Sascha Reedijk", "email": "niels.reedijk@gmail.com", "date": "2016-09-25T04:38:56Z"}, "committer": {"name": "Alexander von Gluck IV", "email": "kallisti5@unixzen.com", "date": "2016-09-25T16:12:23Z"}, "message": "Add support for the Haiku operating system on x86 and x86_64 machines\n\n* Hand rebased from Niels original work on 1.9.0", "tree": {"sha": "0e05d41032bc801ce69ce359645da9a437260469", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e05d41032bc801ce69ce359645da9a437260469"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "html_url": "https://github.com/rust-lang/rust/commit/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/comments", "author": {"login": "nielx", "id": 324054, "node_id": "MDQ6VXNlcjMyNDA1NA==", "avatar_url": "https://avatars.githubusercontent.com/u/324054?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nielx", "html_url": "https://github.com/nielx", "followers_url": "https://api.github.com/users/nielx/followers", "following_url": "https://api.github.com/users/nielx/following{/other_user}", "gists_url": "https://api.github.com/users/nielx/gists{/gist_id}", "starred_url": "https://api.github.com/users/nielx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nielx/subscriptions", "organizations_url": "https://api.github.com/users/nielx/orgs", "repos_url": "https://api.github.com/users/nielx/repos", "events_url": "https://api.github.com/users/nielx/events{/privacy}", "received_events_url": "https://api.github.com/users/nielx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kallisti5", "id": 100110, "node_id": "MDQ6VXNlcjEwMDExMA==", "avatar_url": "https://avatars.githubusercontent.com/u/100110?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kallisti5", "html_url": "https://github.com/kallisti5", "followers_url": "https://api.github.com/users/kallisti5/followers", "following_url": "https://api.github.com/users/kallisti5/following{/other_user}", "gists_url": "https://api.github.com/users/kallisti5/gists{/gist_id}", "starred_url": "https://api.github.com/users/kallisti5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kallisti5/subscriptions", "organizations_url": "https://api.github.com/users/kallisti5/orgs", "repos_url": "https://api.github.com/users/kallisti5/repos", "events_url": "https://api.github.com/users/kallisti5/events{/privacy}", "received_events_url": "https://api.github.com/users/kallisti5/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d1d4d199471dbdf0828acbc06cfe452463569af", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d1d4d199471dbdf0828acbc06cfe452463569af", "html_url": "https://github.com/rust-lang/rust/commit/2d1d4d199471dbdf0828acbc06cfe452463569af"}], "stats": {"total": 479, "additions": 468, "deletions": 11}, "files": [{"sha": "cbacbff070e881c38fa1eb95fd365097bd3c06a3", "filename": "mk/cfg/i686-unknown-haiku.mk", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/mk%2Fcfg%2Fi686-unknown-haiku.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/mk%2Fcfg%2Fi686-unknown-haiku.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi686-unknown-haiku.mk?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -0,0 +1,27 @@\n+# i686-unknown-haiku configuration\n+CROSS_PREFIX_i686-unknown-haiku=i586-pc-haiku-\n+CC_i686-unknown-haiku=$(CC)\n+CXX_i686-unknown-haiku=$(CXX)\n+CPP_i686-unknown-haiku=$(CPP)\n+AR_i686-unknown-haiku=$(AR)\n+CFG_LIB_NAME_i686-unknown-haiku=lib$(1).so\n+CFG_STATIC_LIB_NAME_i686-unknown-haiku=lib$(1).a\n+CFG_LIB_GLOB_i686-unknown-haiku=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_i686-unknown-haiku=lib$(1)-*.dylib.dSYM\n+CFG_CFLAGS_i686-unknown-haiku := -m32 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_i686-unknown-haiku := -Wall -Werror -g -fPIC -m32 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_i686-unknown-haiku := -fno-rtti $(CXXFLAGS)\n+CFG_GCCISH_LINK_FLAGS_i686-unknown-haiku := -shared -fPIC -ldl -pthread  -lrt -g -m32\n+CFG_GCCISH_PRE_LIB_FLAGS_i686-unknown-haiku := -Wl,-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_i686-unknown-haiku := -Wl,-no-whole-archive\n+CFG_DEF_SUFFIX_i686-unknown-haiku := .linux.def\n+CFG_LLC_FLAGS_i686-unknown-haiku :=\n+CFG_INSTALL_NAME_i686-unknown-haiku =\n+CFG_EXE_SUFFIX_i686-unknown-haiku =\n+CFG_WINDOWSY_i686-unknown-haiku :=\n+CFG_UNIXY_i686-unknown-haiku := 1\n+CFG_PATH_MUNGE_i686-unknown-haiku := true\n+CFG_LDPATH_i686-unknown-haiku :=\n+CFG_RUN_i686-unknown-haiku=$(2)\n+CFG_RUN_TARG_i686-unknown-haiku=$(call CFG_RUN_i686-unknown-haiku,,$(2))\n+CFG_GNU_TRIPLE_i686-unknown-haiku := i686-unknown-haiku"}, {"sha": "4c2d888be06fbb6a52eacad88eae1572c678a6e4", "filename": "mk/cfg/x86_64-unknown-haiku.mk", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/mk%2Fcfg%2Fx86_64-unknown-haiku.mk", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/mk%2Fcfg%2Fx86_64-unknown-haiku.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fx86_64-unknown-haiku.mk?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -0,0 +1,27 @@\n+# x86_64-unknown-haiku configuration\n+CROSS_PREFIX_x86_64-unknown-haiku=x86_64-unknown-haiku-\n+CC_x86_64-unknown-haiku=$(CC)\n+CXX_x86_64-unknown-haiku=$(CXX)\n+CPP_x86_64-unknown-haiku=$(CPP)\n+AR_x86_64-unknown-haiku=$(AR)\n+CFG_LIB_NAME_x86_64-unknown-haiku=lib$(1).so\n+CFG_STATIC_LIB_NAME_x86_64-unknown-haiku=lib$(1).a\n+CFG_LIB_GLOB_x86_64-unknown-haiku=lib$(1)-*.so\n+CFG_LIB_DSYM_GLOB_x86_64-unknown-haiku=lib$(1)-*.dylib.dSYM\n+CFG_CFLAGS_x86_64-unknown-haiku := -m64 $(CFLAGS)\n+CFG_GCCISH_CFLAGS_x86_64-unknown-haiku := -Wall -Werror -g -fPIC -m64 $(CFLAGS)\n+CFG_GCCISH_CXXFLAGS_x86_64-unknown-haiku := -fno-rtti $(CXXFLAGS)\n+CFG_GCCISH_LINK_FLAGS_x86_64-unknown-haiku := -shared -fPIC -ldl -pthread -lrt -g -m64\n+CFG_GCCISH_PRE_LIB_FLAGS_x86_64-unknown-haiku := -Wl,-whole-archive\n+CFG_GCCISH_POST_LIB_FLAGS_x86_64-unknown-haiku := -Wl,-no-whole-archive\n+CFG_DEF_SUFFIX_x86_64-unknown-haiku := .linux.def\n+CFG_LLC_FLAGS_x86_64-unknown-haiku :=\n+CFG_INSTALL_NAME_x86_64-unknown-haiku =\n+CFG_EXE_SUFFIX_x86_64-unknown-haiku =\n+CFG_WINDOWSY_x86_64-unknown-haiku :=\n+CFG_UNIXY_x86_64-unknown-haiku := 1\n+CFG_PATH_MUNGE_x86_64-unknown-haiku := true\n+CFG_LDPATH_x86_64-unknown-haiku :=\n+CFG_RUN_x86_64-unknown-haiku=$(2)\n+CFG_RUN_TARG_x86_64-unknown-haiku=$(call CFG_RUN_x86_64-unknown-haiku,,$(2))\n+CFG_GNU_TRIPLE_x86_64-unknown-haiku := x86_64-unknown-haiku"}, {"sha": "6ec4e750ded5475db29f647d3d1dea360913e501", "filename": "src/librustc_back/target/i686_unknown_haiku.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fi686_unknown_haiku.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+use target::TargetOptions;\n+use std::default::Default;\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"i686-unknown-haiku\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128\".to_string(),\n+        arch: \"x86\".to_string(),\n+        target_os: \"haiku\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: TargetOptions {\n+            linker: \"cc\".to_string(),\n+            dynamic_linking: true,\n+            executables: true,\n+            has_rpath: true,\n+            .. Default::default()\n+        },\n+    }\n+}"}, {"sha": "493466c25e0f5b4b6b9ea2524b2d9cf303c0bccc", "filename": "src/librustc_back/target/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibrustc_back%2Ftarget%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fmod.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -165,6 +165,9 @@ supported_targets! {\n     (\"x86_64-unknown-netbsd\", x86_64_unknown_netbsd),\n     (\"x86_64-rumprun-netbsd\", x86_64_rumprun_netbsd),\n \n+    (\"i686_unknown_haiku\", i686_unknown_haiku),\n+    (\"x86_64_unknown_haiku\", x86_64_unknown_haiku),\n+\n     (\"x86_64-apple-darwin\", x86_64_apple_darwin),\n     (\"i686-apple-darwin\", i686_apple_darwin),\n "}, {"sha": "2bcd8af2888dd7468cd4603c41eae550ad1bf8c0", "filename": "src/librustc_back/target/x86_64_unknown_haiku.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_haiku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_haiku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_back%2Ftarget%2Fx86_64_unknown_haiku.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use target::Target;\n+use target::TargetOptions;\n+use std::default::Default;\n+\n+pub fn target() -> Target {\n+    Target {\n+        llvm_target: \"x86_64-unknown-haiku\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        target_os: \"haiku\".to_string(),\n+        target_env: \"\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        options: TargetOptions {\n+            linker: \"cc\".to_string(),\n+            dynamic_linking: true,\n+            executables: true,\n+            has_rpath: true,\n+            .. Default::default()\n+        },\n+    }\n+}"}, {"sha": "510c9ceef0960a8c8b6a20e3625ee6c2e10b4052", "filename": "src/librustc_data_structures/flock.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibrustc_data_structures%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibrustc_data_structures%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fflock.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -94,6 +94,27 @@ mod imp {\n         pub const F_SETLKW: libc::c_int = 9;\n     }\n \n+    #[cfg(target_os = \"haiku\")]\n+    mod os {\n+        use libc;\n+\n+        pub struct flock {\n+            pub l_type: libc::c_short,\n+            pub l_whence: libc::c_short,\n+            pub l_start: libc::off_t,\n+            pub l_len: libc::off_t,\n+            pub l_pid: libc::pid_t,\n+\n+            // not actually here, but brings in line with freebsd\n+            pub l_sysid: libc::c_int,\n+        }\n+\n+        pub const F_UNLCK: libc::c_short = 0x0200;\n+        pub const F_WRLCK: libc::c_short = 0x0400;\n+        pub const F_SETLK: libc::c_int = 0x0080;\n+        pub const F_SETLKW: libc::c_int = 0x0100;\n+    }\n+\n     #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     mod os {\n         use libc;"}, {"sha": "5171fbdf03e80702f3b44fda48151af5ba5dba1d", "filename": "src/libstd/env.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -903,6 +903,17 @@ mod os {\n     pub const EXE_EXTENSION: &'static str = \"js\";\n }\n \n+#[cfg(target_os = \"haiku\")]\n+mod os {\n+    pub const FAMILY: &'static str = \"unix\";\n+    pub const OS: &'static str = \"haiku\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n+}\n+\n #[cfg(target_arch = \"x86\")]\n mod arch {\n     pub const ARCH: &'static str = \"x86\";"}, {"sha": "54f8ea1b71b3effa9556cb0cc6672b95579831d0", "filename": "src/libstd/os/haiku/fs.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fos%2Fhaiku%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fos%2Fhaiku%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fhaiku%2Ffs.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -0,0 +1,138 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+\n+use libc;\n+\n+use fs::Metadata;\n+use sys_common::AsInner;\n+\n+#[allow(deprecated)]\n+use os::haiku::raw;\n+\n+/// OS-specific extension methods for `fs::Metadata`\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+pub trait MetadataExt {\n+    /// Gain a reference to the underlying `stat` structure which contains\n+    /// the raw information returned by the OS.\n+    ///\n+    /// The contents of the returned `stat` are **not** consistent across\n+    /// Unix platforms. The `os::unix::fs::MetadataExt` trait contains the\n+    /// cross-Unix abstractions contained within the raw stat.\n+    #[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+    #[rustc_deprecated(since = \"1.8.0\",\n+                       reason = \"deprecated in favor of the accessor \\\n+                                 methods of this trait\")]\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat;\n+\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_dev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ino(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mode(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_nlink(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_uid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_gid(&self) -> u32;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_rdev(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_size(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_atime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_mtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_ctime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_crtime(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_crtime_nsec(&self) -> i64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blksize(&self) -> u64;\n+    #[stable(feature = \"metadata_ext2\", since = \"1.8.0\")]\n+    fn st_blocks(&self) -> u64;\n+}\n+\n+#[stable(feature = \"metadata_ext\", since = \"1.1.0\")]\n+impl MetadataExt for Metadata {\n+    #[allow(deprecated)]\n+    fn as_raw_stat(&self) -> &raw::stat {\n+        unsafe {\n+            &*(self.as_inner().as_inner() as *const libc::stat\n+                                          as *const raw::stat)\n+        }\n+    }\n+    fn st_dev(&self) -> u64 {\n+        self.as_inner().as_inner().st_dev as u64\n+    }\n+    fn st_ino(&self) -> u64 {\n+        self.as_inner().as_inner().st_ino as u64\n+    }\n+    fn st_mode(&self) -> u32 {\n+        self.as_inner().as_inner().st_mode as u32\n+    }\n+    fn st_nlink(&self) -> u64 {\n+        self.as_inner().as_inner().st_nlink as u64\n+    }\n+    fn st_uid(&self) -> u32 {\n+        self.as_inner().as_inner().st_uid as u32\n+    }\n+    fn st_gid(&self) -> u32 {\n+        self.as_inner().as_inner().st_gid as u32\n+    }\n+    fn st_rdev(&self) -> u64 {\n+        self.as_inner().as_inner().st_rdev as u64\n+    }\n+    fn st_size(&self) -> u64 {\n+        self.as_inner().as_inner().st_size as u64\n+    }\n+    fn st_atime(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime as i64\n+    }\n+    fn st_atime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_atime_nsec as i64\n+    }\n+    fn st_mtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime as i64\n+    }\n+    fn st_mtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_mtime_nsec as i64\n+    }\n+    fn st_ctime(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime as i64\n+    }\n+    fn st_ctime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_ctime_nsec as i64\n+    }\n+    fn st_crtime(&self) -> i64 {\n+        self.as_inner().as_inner().st_crtime as i64\n+    }\n+    fn st_crtime_nsec(&self) -> i64 {\n+        self.as_inner().as_inner().st_crtime_nsec as i64\n+    }\n+    fn st_blksize(&self) -> u64 {\n+        self.as_inner().as_inner().st_blksize as u64\n+    }\n+    fn st_blocks(&self) -> u64 {\n+        self.as_inner().as_inner().st_blocks as u64\n+    }\n+}"}, {"sha": "dd1675cc9b51f2ecf54ed08c951d2eaa1356c4ea", "filename": "src/libstd/os/haiku/mod.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fos%2Fhaiku%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fos%2Fhaiku%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fhaiku%2Fmod.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Haiku-specific definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+pub mod raw;\n+pub mod fs;"}, {"sha": "ce7450d5d5a49b69841071c1b162e76e1a8d927e", "filename": "src/libstd/os/haiku/raw.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fos%2Fhaiku%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fos%2Fhaiku%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fhaiku%2Fraw.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -0,0 +1,74 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Haiku-specific raw type definitions\n+\n+#![stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+\n+#![allow(deprecated)]\n+\n+use os::raw::{c_long};\n+use os::unix::raw::{uid_t, gid_t};\n+\n+// Use the direct definition of usize, instead of uintptr_t like in libc\n+#[unstable(feature = \"pthread_t\", issue = \"29791\")] pub type pthread_t = usize;\n+\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blkcnt_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type blksize_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type dev_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type ino_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type mode_t = u32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type nlink_t = i32;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type off_t = i64;\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")] pub type time_t = i32;\n+\n+#[repr(C)]\n+#[derive(Clone)]\n+#[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+pub struct stat {\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_dev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ino: ino_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mode: mode_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_nlink: nlink_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_uid: uid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_gid: gid_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_size: off_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_rdev: dev_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blksize: blksize_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_atime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_mtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_ctime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_crtime: time_t,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_crtime_nsec: c_long,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_type: u32,\n+    #[stable(feature = \"raw_ext\", since = \"1.1.0\")]\n+    pub st_blocks: blkcnt_t,\n+}"}, {"sha": "7622ef886935c3e601328a6dafe01d9a1f3e560e", "filename": "src/libstd/os/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fos%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fos%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fmod.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -24,6 +24,7 @@ pub use sys::ext as windows;\n #[cfg(target_os = \"bitrig\")]    pub mod bitrig;\n #[cfg(target_os = \"dragonfly\")] pub mod dragonfly;\n #[cfg(target_os = \"freebsd\")]   pub mod freebsd;\n+#[cfg(target_os = \"haiku\")]     pub mod haiku;\n #[cfg(target_os = \"ios\")]       pub mod ios;\n #[cfg(target_os = \"linux\")]     pub mod linux;\n #[cfg(target_os = \"macos\")]     pub mod macos;"}, {"sha": "5dc6ee2bc8c660921d7f1cac3062ce41525d0e47", "filename": "src/libstd/rtdeps.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Frtdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Frtdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frtdeps.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -62,3 +62,7 @@ extern {}\n #[cfg(target_os = \"ios\")]\n #[link(name = \"System\")]\n extern {}\n+\n+#[cfg(target_os = \"haiku\")]\n+#[link(name = \"network\")]\n+extern {}"}, {"sha": "b5330463e30c475cdfc45ed19b99dcf8854d6d9c", "filename": "src/libstd/sys/common/args.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fargs.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -38,7 +38,8 @@ pub fn clone() -> Option<Vec<Vec<u8>>> { imp::clone() }\n           target_os = \"netbsd\",\n           target_os = \"openbsd\",\n           target_os = \"solaris\",\n-          target_os = \"emscripten\"))]\n+          target_os = \"emscripten\",\n+          target_os = \"haiku\"))]\n mod imp {\n     use libc::c_char;\n     use mem;"}, {"sha": "18280e497db1d949092cb1f6697909f1762e978f", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -24,22 +24,22 @@ use time::Duration;\n #[cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n           target_os = \"ios\", target_os = \"macos\",\n           target_os = \"openbsd\", target_os = \"netbsd\",\n-          target_os = \"solaris\"))]\n+          target_os = \"solaris\", target_os = \"haiku\"))]\n use sys::net::netc::IPV6_JOIN_GROUP as IPV6_ADD_MEMBERSHIP;\n #[cfg(not(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n               target_os = \"ios\", target_os = \"macos\",\n               target_os = \"openbsd\", target_os = \"netbsd\",\n-              target_os = \"solaris\")))]\n+              target_os = \"solaris\", taget_os = \"haiku\")))]\n use sys::net::netc::IPV6_ADD_MEMBERSHIP;\n #[cfg(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n           target_os = \"ios\", target_os = \"macos\",\n           target_os = \"openbsd\", target_os = \"netbsd\",\n-          target_os = \"solaris\"))]\n+          target_os = \"solaris\", target_os = \"haiku\"))]\n use sys::net::netc::IPV6_LEAVE_GROUP as IPV6_DROP_MEMBERSHIP;\n #[cfg(not(any(target_os = \"dragonfly\", target_os = \"freebsd\",\n               target_os = \"ios\", target_os = \"macos\",\n               target_os = \"openbsd\", target_os = \"netbsd\",\n-              target_os = \"solaris\")))]\n+              target_os = \"solaris\", target_os = \"haiku\")))]\n use sys::net::netc::IPV6_DROP_MEMBERSHIP;\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "8bca6d469b7371faed045253df37e65f66c3f740", "filename": "src/libstd/sys/unix/fd.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fsys%2Funix%2Ffd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffd.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -104,9 +104,9 @@ impl FileDesc {\n         // resolve so we at least compile this.\n         //\n         // [1]: http://comments.gmane.org/gmane.linux.lib.musl.general/2963\n-        #[cfg(target_os = \"android\")]\n+        #[cfg(any(target_os = \"android\", target_os = \"haiku\"))]\n         use libc::F_DUPFD as F_DUPFD_CLOEXEC;\n-        #[cfg(not(target_os = \"android\"))]\n+        #[cfg(not(any(target_os = \"android\", target_os=\"haiku\")))]\n         use libc::F_DUPFD_CLOEXEC;\n \n         let make_filedesc = |fd| {"}, {"sha": "d015aeee338dba7a3699bdf7509ef9ddd8e73c6c", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -279,7 +279,12 @@ impl DirEntry {\n         stat(&self.path()).map(|m| m.file_type())\n     }\n \n-    #[cfg(not(target_os = \"solaris\"))]\n+    #[cfg(target_os = \"haiku\")]\n+    pub fn file_type(&self) -> io::Result<FileType> {\n+        lstat(&self.path()).map(|m| m.file_type())\n+    }\n+\n+    #[cfg(not(any(target_os = \"solaris\", target_os = \"haiku\")))]\n     pub fn file_type(&self) -> io::Result<FileType> {\n         match self.entry.d_type {\n             libc::DT_CHR => Ok(FileType { mode: libc::S_IFCHR }),\n@@ -298,7 +303,8 @@ impl DirEntry {\n               target_os = \"linux\",\n               target_os = \"emscripten\",\n               target_os = \"android\",\n-              target_os = \"solaris\"))]\n+              target_os = \"solaris\",\n+              target_os = \"haiku\"))]\n     pub fn ino(&self) -> u64 {\n         self.entry.d_ino as u64\n     }\n@@ -327,7 +333,8 @@ impl DirEntry {\n     }\n     #[cfg(any(target_os = \"android\",\n               target_os = \"linux\",\n-              target_os = \"emscripten\"))]\n+              target_os = \"emscripten\",\n+              target_os = \"haiku\"))]\n     fn name_bytes(&self) -> &[u8] {\n         unsafe {\n             CStr::from_ptr(self.entry.d_name.as_ptr()).to_bytes()"}, {"sha": "3fbeda58e821d2b2614a944629f33d79f473e608", "filename": "src/libstd/sys/unix/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fsys%2Funix%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fmod.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -17,6 +17,7 @@ use libc;\n #[cfg(target_os = \"bitrig\")]    pub use os::bitrig as platform;\n #[cfg(target_os = \"dragonfly\")] pub use os::dragonfly as platform;\n #[cfg(target_os = \"freebsd\")]   pub use os::freebsd as platform;\n+#[cfg(target_os = \"haiku\")]     pub use os::haiku as platform;\n #[cfg(target_os = \"ios\")]       pub use os::ios as platform;\n #[cfg(target_os = \"linux\")]     pub use os::linux as platform;\n #[cfg(target_os = \"macos\")]     pub use os::macos as platform;"}, {"sha": "850c3d52715365aa5ba290565d226526d48a6166", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -51,6 +51,7 @@ extern {\n                    target_os = \"ios\",\n                    target_os = \"freebsd\"),\n                link_name = \"__error\")]\n+    #[cfg_attr(target_os = \"haiku\", link_name = \"_errnop\")]\n     fn errno_location() -> *mut c_int;\n }\n \n@@ -303,6 +304,49 @@ pub fn current_exe() -> io::Result<PathBuf> {\n     }\n }\n \n+#[cfg(target_os = \"haiku\")]\n+pub fn current_exe() -> io::Result<PathBuf> {\n+    // Use Haiku's image info functions\n+    #[repr(C)]\n+    struct image_info {\n+        id: i32,\n+        type_: i32,\n+        sequence: i32,\n+        init_order: i32,\n+        init_routine: *mut libc::c_void,    // function pointer\n+        term_routine: *mut libc::c_void,    // function pointer\n+        device: libc::dev_t,\n+        node: libc::ino_t,\n+        name: [libc::c_char; 1024],         // MAXPATHLEN\n+        text: *mut libc::c_void,\n+        data: *mut libc::c_void,\n+        text_size: i32,\n+        data_size: i32,\n+        api_version: i32,\n+        abi: i32,\n+    }\n+\n+    unsafe {\n+        extern {\n+            fn _get_next_image_info(team_id: i32, cookie: *mut i32,\n+                info: *mut image_info, size: i32) -> i32;\n+        }\n+\n+        let mut info: image_info = mem::zeroed();\n+        let mut cookie: i32 = 0;\n+        // the executable can be found at team id 0\n+        let result = _get_next_image_info(0, &mut cookie, &mut info,\n+            mem::size_of::<image_info>() as i32);\n+        if result != 0 {\n+            use io::ErrorKind;\n+            Err(io::Error::new(ErrorKind::Other, \"Error getting executable path\"))\n+        } else {\n+            let name = CStr::from_ptr(info.name.as_ptr()).to_bytes();\n+            Ok(PathBuf::from(OsStr::from_bytes(name)))\n+        }\n+    }\n+}\n+\n pub struct Args {\n     iter: vec::IntoIter<OsString>,\n     _dont_send_or_sync_me: PhantomData<*mut ()>,\n@@ -412,7 +456,8 @@ pub fn args() -> Args {\n           target_os = \"openbsd\",\n           target_os = \"solaris\",\n           target_os = \"nacl\",\n-          target_os = \"emscripten\"))]\n+          target_os = \"emscripten\",\n+          target_os = \"haiku\"))]\n pub fn args() -> Args {\n     use sys_common;\n     let bytes = sys_common::args::clone().unwrap_or(Vec::new());"}, {"sha": "98a4168d4fd347e641e0b6d99b0faa23425222bb", "filename": "src/libstd/sys/unix/thread.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibstd%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fthread.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -120,6 +120,11 @@ impl Thread {\n         // Newlib, Illumos and Emscripten have no way to set a thread name.\n     }\n \n+    #[cfg(target_os = \"haiku\")]\n+    pub fn set_name(_name: &CStr) {\n+        // Haiku has no way to set a thread name.\n+    }\n+\n     pub fn sleep(dur: Duration) {\n         let mut secs = dur.as_secs();\n         let mut nsecs = dur.subsec_nanos() as libc::c_long;"}, {"sha": "1f2dc228ded3468250cbc08ca6b49cc7a33cdd0f", "filename": "src/libsyntax/abi.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibsyntax%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibsyntax%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fabi.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -24,6 +24,7 @@ pub enum Os {\n     Netbsd,\n     Openbsd,\n     NaCl,\n+    Haiku,\n     Solaris,\n }\n \n@@ -146,6 +147,7 @@ impl fmt::Display for Os {\n             Os::Netbsd => \"netbsd\".fmt(f),\n             Os::Openbsd => \"openbsd\".fmt(f),\n             Os::NaCl => \"nacl\".fmt(f),\n+            Os::Haiku => \"haiku\".fmt(f),\n             Os::Solaris => \"solaris\".fmt(f),\n         }\n     }"}, {"sha": "cf7af97dc7a4c3de54acc1197396389210638bf3", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -1080,6 +1080,12 @@ fn get_concurrency() -> usize {\n         }\n         cpus as usize\n     }\n+\n+    #[cfg(target_os = \"haiku\")]\n+    fn num_cpus() -> usize {\n+        // TODO: implement\n+        1\n+    }\n }\n \n pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescAndFn> {"}, {"sha": "30de859f1501aeee01176cba6daca382bbca09d5", "filename": "src/libunwind/libunwind.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibunwind%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Flibunwind%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibunwind%2Flibunwind.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -241,6 +241,7 @@ if #[cfg(not(all(target_os = \"ios\", target_arch = \"arm\")))] {\n #[cfg_attr(any(all(target_os = \"linux\", not(target_env = \"musl\")),\n                target_os = \"freebsd\",\n                target_os = \"solaris\",\n+               target_os = \"haiku\",\n                all(target_os = \"linux\",\n                    target_env = \"musl\",\n                    not(target_arch = \"x86\"),"}, {"sha": "428bbcfe5761d6d00acadc632fea0f7c0c5685ef", "filename": "src/tools/compiletest/src/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Futil.rs?ref=1a6fc8b7b840fb381b1aefa35b9b3d4c736bae50", "patch": "@@ -17,6 +17,7 @@ const OS_TABLE: &'static [(&'static str, &'static str)] = &[(\"android\", \"android\n                                                             (\"darwin\", \"macos\"),\n                                                             (\"dragonfly\", \"dragonfly\"),\n                                                             (\"freebsd\", \"freebsd\"),\n+                                                            (\"haiku\", \"haiku\"),\n                                                             (\"ios\", \"ios\"),\n                                                             (\"linux\", \"linux\"),\n                                                             (\"mingw32\", \"windows\"),"}]}