{"sha": "ceac273e60447014038e511e5af43841c359547c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYWMyNzNlNjA0NDcwMTQwMzhlNTExZTVhZjQzODQxYzM1OTU0N2M=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-13T18:37:25Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-07-20T09:28:12Z"}, "message": "wf: check foreign fn decls for well-formedness\n\nThis commit extends current well-formedness checking to apply to foreign\nfunction declarations, re-using the existing machinery for regular\nfunctions. In doing this, later parts of the compiler (such as the\n`improper_ctypes` lint) can rely on being operations not failing as a\nresult of invalid code which would normally be caught earlier.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "e98e9448955656f43736ec024a740b808fb62295", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e98e9448955656f43736ec024a740b808fb62295"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceac273e60447014038e511e5af43841c359547c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl8VY64ACgkQJZLnbIc4\nH9m2KBAArGwTe3TDrZsJzerKRDYXlJ0t7cnGXmmPDbC1pNl9BQ9HSHBUEFsHOIPD\nfqEzB7llCQVFW968n8xLgIdDEGEIuca289fXbd93ii6FV/pXBS8FYHlc9g8/yX6w\nI+SJ3Pm2G3Z2ufRhF4VBDhtIY0rVWk0CSY3LlJ2K0mxC4B6qpijuTNh1ipo4OT9N\n7T+rGdBD3BVLYQ95+Gdp5F1pKMESfDjXlteDmWGAXEj04DlMi8T6PGoFfVJbrucl\nspMhvkywHW6D9pums+RtIEbgugeB1e0xPkU8DsVcGPBdoXuGXOkI1nMtKu/g7p0t\ndk3JFPRLydLYnTep9VBfnkRq1LybqBLMOmQi65fat9XP6Ya9gsH1UUTZ15FBvw3v\nuTqROBsJUu8Qnem3869oFsF3nesSjjuY5ruEUtOrTIMvvba0JUR5cAgEzvAen1/f\nXOYQ2Jf4W4bYQ8ii+8lV3xoEwEd7ck8CvFqNkyGSDebJyLmLI6rihiEz7qz91oAt\nFosvaTW2gSQcVAHxgE2gudYMidkV7R6XkqYz5VO5R+XvemYW+3fCq1BHfhoimWhs\nfe7toIY6a0mjlUC3PL9lYmGMk7WGQR+JUOkYlCz9WrYBtIa2iuaewhX66+NvRHJ9\nSpTtvnrphUP0oj5n+hn5nDEnxoW0X/r1Q7TwUdg0EM8jPLv2ebM=\n=8Q/T\n-----END PGP SIGNATURE-----", "payload": "tree e98e9448955656f43736ec024a740b808fb62295\nparent 891e6fee572009ff2be4d4057fb33483610c36a7\nauthor David Wood <david@davidtw.co> 1592073445 +0100\ncommitter David Wood <david@davidtw.co> 1595237292 +0100\n\nwf: check foreign fn decls for well-formedness\n\nThis commit extends current well-formedness checking to apply to foreign\nfunction declarations, re-using the existing machinery for regular\nfunctions. In doing this, later parts of the compiler (such as the\n`improper_ctypes` lint) can rely on being operations not failing as a\nresult of invalid code which would normally be caught earlier.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceac273e60447014038e511e5af43841c359547c", "html_url": "https://github.com/rust-lang/rust/commit/ceac273e60447014038e511e5af43841c359547c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceac273e60447014038e511e5af43841c359547c/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "891e6fee572009ff2be4d4057fb33483610c36a7", "url": "https://api.github.com/repos/rust-lang/rust/commits/891e6fee572009ff2be4d4057fb33483610c36a7", "html_url": "https://github.com/rust-lang/rust/commit/891e6fee572009ff2be4d4057fb33483610c36a7"}], "stats": {"total": 149, "additions": 97, "deletions": 52}, "files": [{"sha": "dabae6cbc41377a3fdf75e55101086b8c8da6dd8", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 28, "deletions": 20, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/ceac273e60447014038e511e5af43841c359547c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac273e60447014038e511e5af43841c359547c/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=ceac273e60447014038e511e5af43841c359547c", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::ty::{\n     self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n use rustc_session::parse::feature_err;\n-use rustc_span::symbol::{sym, Symbol};\n+use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::Span;\n use rustc_trait_selection::opaque_types::may_define_opaque_type;\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -142,8 +142,8 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                 _ => unreachable!(),\n             }\n         }\n-        hir::ItemKind::Fn(..) => {\n-            check_item_fn(tcx, item);\n+        hir::ItemKind::Fn(ref sig, ..) => {\n+            check_item_fn(tcx, item.hir_id, item.ident, item.span, sig.decl);\n         }\n         hir::ItemKind::Static(ref ty, ..) => {\n             check_item_type(tcx, item.hir_id, ty.span, false);\n@@ -153,8 +153,14 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         }\n         hir::ItemKind::ForeignMod(ref module) => {\n             for it in module.items.iter() {\n-                if let hir::ForeignItemKind::Static(ref ty, ..) = it.kind {\n-                    check_item_type(tcx, it.hir_id, ty.span, true);\n+                match it.kind {\n+                    hir::ForeignItemKind::Fn(ref decl, ..) => {\n+                        check_item_fn(tcx, it.hir_id, it.ident, it.span, decl)\n+                    }\n+                    hir::ForeignItemKind::Static(ref ty, ..) => {\n+                        check_item_type(tcx, it.hir_id, ty.span, true)\n+                    }\n+                    hir::ForeignItemKind::Type => (),\n                 }\n             }\n         }\n@@ -303,7 +309,7 @@ fn check_associated_item(\n                     fcx,\n                     item.ident.span,\n                     sig,\n-                    hir_sig,\n+                    hir_sig.decl,\n                     item.def_id,\n                     &mut implied_bounds,\n                 );\n@@ -564,22 +570,24 @@ fn check_associated_type_defaults(fcx: &FnCtxt<'_, '_>, trait_def_id: DefId) {\n     }\n }\n \n-fn check_item_fn(tcx: TyCtxt<'_>, item: &hir::Item<'_>) {\n-    for_item(tcx, item).with_fcx(|fcx, tcx| {\n-        let def_id = fcx.tcx.hir().local_def_id(item.hir_id);\n+fn check_item_fn(\n+    tcx: TyCtxt<'_>,\n+    item_id: hir::HirId,\n+    ident: Ident,\n+    span: Span,\n+    decl: &hir::FnDecl<'_>,\n+) {\n+    for_id(tcx, item_id, span).with_fcx(|fcx, tcx| {\n+        let def_id = fcx.tcx.hir().local_def_id(item_id);\n         let sig = fcx.tcx.fn_sig(def_id);\n-        let sig = fcx.normalize_associated_types_in(item.span, &sig);\n+        let sig = fcx.normalize_associated_types_in(span, &sig);\n         let mut implied_bounds = vec![];\n-        let hir_sig = match &item.kind {\n-            ItemKind::Fn(sig, ..) => sig,\n-            _ => bug!(\"expected `ItemKind::Fn`, found `{:?}`\", item.kind),\n-        };\n         check_fn_or_method(\n             tcx,\n             fcx,\n-            item.ident.span,\n+            ident.span,\n             sig,\n-            hir_sig,\n+            decl,\n             def_id.to_def_id(),\n             &mut implied_bounds,\n         );\n@@ -835,28 +843,28 @@ fn check_fn_or_method<'fcx, 'tcx>(\n     fcx: &FnCtxt<'fcx, 'tcx>,\n     span: Span,\n     sig: ty::PolyFnSig<'tcx>,\n-    hir_sig: &hir::FnSig<'_>,\n+    hir_decl: &hir::FnDecl<'_>,\n     def_id: DefId,\n     implied_bounds: &mut Vec<Ty<'tcx>>,\n ) {\n     let sig = fcx.normalize_associated_types_in(span, &sig);\n     let sig = fcx.tcx.liberate_late_bound_regions(def_id, &sig);\n \n-    for (&input_ty, span) in sig.inputs().iter().zip(hir_sig.decl.inputs.iter().map(|t| t.span)) {\n+    for (&input_ty, span) in sig.inputs().iter().zip(hir_decl.inputs.iter().map(|t| t.span)) {\n         fcx.register_wf_obligation(input_ty.into(), span, ObligationCauseCode::MiscObligation);\n     }\n     implied_bounds.extend(sig.inputs());\n \n     fcx.register_wf_obligation(\n         sig.output().into(),\n-        hir_sig.decl.output.span(),\n+        hir_decl.output.span(),\n         ObligationCauseCode::ReturnType,\n     );\n \n     // FIXME(#25759) return types should not be implied bounds\n     implied_bounds.push(sig.output());\n \n-    check_where_clauses(tcx, fcx, span, def_id, Some((sig.output(), hir_sig.decl.output.span())));\n+    check_where_clauses(tcx, fcx, span, def_id, Some((sig.output(), hir_decl.output.span())));\n }\n \n /// Checks \"defining uses\" of opaque `impl Trait` types to ensure that they meet the restrictions"}, {"sha": "f485766bcd34e32d049ff3dd36ee7273bec8fa7d", "filename": "src/test/ui/lint/lint-ctypes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ceac273e60447014038e511e5af43841c359547c/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac273e60447014038e511e5af43841c359547c/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.rs?ref=ceac273e60447014038e511e5af43841c359547c", "patch": "@@ -7,6 +7,7 @@ extern crate libc;\n \n use std::marker::PhantomData;\n \n+trait Bar { }\n trait Mirror { type It: ?Sized; }\n impl<T: ?Sized> Mirror for T { type It = Self; }\n #[repr(C)]\n@@ -53,7 +54,7 @@ extern {\n     pub fn char_type(p: char); //~ ERROR uses type `char`\n     pub fn i128_type(p: i128); //~ ERROR uses type `i128`\n     pub fn u128_type(p: u128); //~ ERROR uses type `u128`\n-    pub fn trait_type(p: &dyn Clone); //~ ERROR uses type `dyn std::clone::Clone`\n+    pub fn trait_type(p: &dyn Bar); //~ ERROR uses type `dyn Bar`\n     pub fn tuple_type(p: (i32, i32)); //~ ERROR uses type `(i32, i32)`\n     pub fn tuple_type2(p: I32Pair); //~ ERROR uses type `(i32, i32)`\n     pub fn zero_size(p: ZeroSize); //~ ERROR uses type `ZeroSize`"}, {"sha": "a54226a7fc4a2c7e9ebd557becc123166541d797", "filename": "src/test/ui/lint/lint-ctypes.stderr", "status": "modified", "additions": 31, "deletions": 31, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ceac273e60447014038e511e5af43841c359547c/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceac273e60447014038e511e5af43841c359547c/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes.stderr?ref=ceac273e60447014038e511e5af43841c359547c", "patch": "@@ -1,5 +1,5 @@\n error: `extern` block uses type `Foo`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:46:28\n+  --> $DIR/lint-ctypes.rs:47:28\n    |\n LL |     pub fn ptr_type1(size: *const Foo);\n    |                            ^^^^^^^^^^ not FFI-safe\n@@ -12,27 +12,27 @@ LL | #![deny(improper_ctypes)]\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n note: the type is defined here\n-  --> $DIR/lint-ctypes.rs:24:1\n+  --> $DIR/lint-ctypes.rs:25:1\n    |\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `Foo`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:47:28\n+  --> $DIR/lint-ctypes.rs:48:28\n    |\n LL |     pub fn ptr_type2(size: *const Foo);\n    |                            ^^^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n    = note: this struct has unspecified layout\n note: the type is defined here\n-  --> $DIR/lint-ctypes.rs:24:1\n+  --> $DIR/lint-ctypes.rs:25:1\n    |\n LL | pub struct Foo;\n    | ^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `[u32]`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:48:26\n+  --> $DIR/lint-ctypes.rs:49:26\n    |\n LL |     pub fn slice_type(p: &[u32]);\n    |                          ^^^^^^ not FFI-safe\n@@ -41,7 +41,7 @@ LL |     pub fn slice_type(p: &[u32]);\n    = note: slices have no C equivalent\n \n error: `extern` block uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:49:24\n+  --> $DIR/lint-ctypes.rs:50:24\n    |\n LL |     pub fn str_type(p: &str);\n    |                        ^^^^ not FFI-safe\n@@ -50,7 +50,7 @@ LL |     pub fn str_type(p: &str);\n    = note: string slices have no C equivalent\n \n error: `extern` block uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:50:24\n+  --> $DIR/lint-ctypes.rs:51:24\n    |\n LL |     pub fn box_type(p: Box<u32>);\n    |                        ^^^^^^^^ not FFI-safe\n@@ -59,7 +59,7 @@ LL |     pub fn box_type(p: Box<u32>);\n    = note: this struct has unspecified layout\n \n error: `extern` block uses type `std::option::Option<std::boxed::Box<u32>>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:51:28\n+  --> $DIR/lint-ctypes.rs:52:28\n    |\n LL |     pub fn opt_box_type(p: Option<Box<u32>>);\n    |                            ^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -68,7 +68,7 @@ LL |     pub fn opt_box_type(p: Option<Box<u32>>);\n    = note: enum has no representation hint\n \n error: `extern` block uses type `char`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:53:25\n+  --> $DIR/lint-ctypes.rs:54:25\n    |\n LL |     pub fn char_type(p: char);\n    |                         ^^^^ not FFI-safe\n@@ -77,31 +77,31 @@ LL |     pub fn char_type(p: char);\n    = note: the `char` type has no C equivalent\n \n error: `extern` block uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:54:25\n+  --> $DIR/lint-ctypes.rs:55:25\n    |\n LL |     pub fn i128_type(p: i128);\n    |                         ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:55:25\n+  --> $DIR/lint-ctypes.rs:56:25\n    |\n LL |     pub fn u128_type(p: u128);\n    |                         ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n-error: `extern` block uses type `dyn std::clone::Clone`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:56:26\n+error: `extern` block uses type `dyn Bar`, which is not FFI-safe\n+  --> $DIR/lint-ctypes.rs:57:26\n    |\n-LL |     pub fn trait_type(p: &dyn Clone);\n-   |                          ^^^^^^^^^^ not FFI-safe\n+LL |     pub fn trait_type(p: &dyn Bar);\n+   |                          ^^^^^^^^ not FFI-safe\n    |\n    = note: trait objects have no C equivalent\n \n error: `extern` block uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:57:26\n+  --> $DIR/lint-ctypes.rs:58:26\n    |\n LL |     pub fn tuple_type(p: (i32, i32));\n    |                          ^^^^^^^^^^ not FFI-safe\n@@ -110,7 +110,7 @@ LL |     pub fn tuple_type(p: (i32, i32));\n    = note: tuples have unspecified layout\n \n error: `extern` block uses type `(i32, i32)`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:58:27\n+  --> $DIR/lint-ctypes.rs:59:27\n    |\n LL |     pub fn tuple_type2(p: I32Pair);\n    |                           ^^^^^^^ not FFI-safe\n@@ -119,42 +119,42 @@ LL |     pub fn tuple_type2(p: I32Pair);\n    = note: tuples have unspecified layout\n \n error: `extern` block uses type `ZeroSize`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:59:25\n+  --> $DIR/lint-ctypes.rs:60:25\n    |\n LL |     pub fn zero_size(p: ZeroSize);\n    |                         ^^^^^^^^ not FFI-safe\n    |\n    = help: consider adding a member to this struct\n    = note: this struct has no fields\n note: the type is defined here\n-  --> $DIR/lint-ctypes.rs:20:1\n+  --> $DIR/lint-ctypes.rs:21:1\n    |\n LL | pub struct ZeroSize;\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:60:33\n+  --> $DIR/lint-ctypes.rs:61:33\n    |\n LL |     pub fn zero_size_phantom(p: ZeroSizeWithPhantomData);\n    |                                 ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n note: the type is defined here\n-  --> $DIR/lint-ctypes.rs:43:1\n+  --> $DIR/lint-ctypes.rs:44:1\n    |\n LL | pub struct ZeroSizeWithPhantomData(::std::marker::PhantomData<i32>);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: `extern` block uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:63:12\n+  --> $DIR/lint-ctypes.rs:64:12\n    |\n LL |         -> ::std::marker::PhantomData<bool>;\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: composed only of `PhantomData`\n \n error: `extern` block uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:64:23\n+  --> $DIR/lint-ctypes.rs:65:23\n    |\n LL |     pub fn fn_type(p: RustFn);\n    |                       ^^^^^^ not FFI-safe\n@@ -163,7 +163,7 @@ LL |     pub fn fn_type(p: RustFn);\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` block uses type `fn()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:65:24\n+  --> $DIR/lint-ctypes.rs:66:24\n    |\n LL |     pub fn fn_type2(p: fn());\n    |                        ^^^^ not FFI-safe\n@@ -172,7 +172,7 @@ LL |     pub fn fn_type2(p: fn());\n    = note: this function pointer has Rust-specific calling convention\n \n error: `extern` block uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:66:28\n+  --> $DIR/lint-ctypes.rs:67:28\n    |\n LL |     pub fn fn_contained(p: RustBadRet);\n    |                            ^^^^^^^^^^ not FFI-safe\n@@ -181,15 +181,15 @@ LL |     pub fn fn_contained(p: RustBadRet);\n    = note: this struct has unspecified layout\n \n error: `extern` block uses type `i128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:67:32\n+  --> $DIR/lint-ctypes.rs:68:32\n    |\n LL |     pub fn transparent_i128(p: TransparentI128);\n    |                                ^^^^^^^^^^^^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `str`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:68:31\n+  --> $DIR/lint-ctypes.rs:69:31\n    |\n LL |     pub fn transparent_str(p: TransparentStr);\n    |                               ^^^^^^^^^^^^^^ not FFI-safe\n@@ -198,7 +198,7 @@ LL |     pub fn transparent_str(p: TransparentStr);\n    = note: string slices have no C equivalent\n \n error: `extern` block uses type `std::boxed::Box<u32>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:69:30\n+  --> $DIR/lint-ctypes.rs:70:30\n    |\n LL |     pub fn transparent_fn(p: TransparentBadFn);\n    |                              ^^^^^^^^^^^^^^^^ not FFI-safe\n@@ -207,7 +207,7 @@ LL |     pub fn transparent_fn(p: TransparentBadFn);\n    = note: this struct has unspecified layout\n \n error: `extern` block uses type `[u8; 8]`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:70:27\n+  --> $DIR/lint-ctypes.rs:71:27\n    |\n LL |     pub fn raw_array(arr: [u8; 8]);\n    |                           ^^^^^^^ not FFI-safe\n@@ -216,15 +216,15 @@ LL |     pub fn raw_array(arr: [u8; 8]);\n    = note: passing raw arrays by value is not FFI-safe\n \n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:72:34\n+  --> $DIR/lint-ctypes.rs:73:34\n    |\n LL |     pub static static_u128_type: u128;\n    |                                  ^^^^ not FFI-safe\n    |\n    = note: 128-bit integers don't currently have a known stable ABI\n \n error: `extern` block uses type `u128`, which is not FFI-safe\n-  --> $DIR/lint-ctypes.rs:73:40\n+  --> $DIR/lint-ctypes.rs:74:40\n    |\n LL |     pub static static_u128_array_type: [u128; 16];\n    |                                        ^^^^^^^^^^ not FFI-safe"}, {"sha": "b9d956c0568694574bd096482027c0ef11283ad4", "filename": "src/test/ui/wf/wf-foreign-fn-decl-ret.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ceac273e60447014038e511e5af43841c359547c/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceac273e60447014038e511e5af43841c359547c/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.rs?ref=ceac273e60447014038e511e5af43841c359547c", "patch": "@@ -0,0 +1,18 @@\n+pub trait Unsatisfied {}\n+\n+#[repr(transparent)]\n+pub struct Bar<T: Unsatisfied>(T);\n+\n+pub trait Foo {\n+    type Assoc;\n+}\n+\n+extern \"C\" {\n+    pub fn lint_me() -> <() as Foo>::Assoc;\n+    //~^ ERROR: the trait bound `(): Foo` is not satisfied [E0277]\n+\n+    pub fn lint_me_aswell() -> Bar<u32>;\n+    //~^ ERROR: the trait bound `u32: Unsatisfied` is not satisfied [E0277]\n+}\n+\n+fn main() {}"}, {"sha": "9081b7929d935676221fddc052407f4c487a4592", "filename": "src/test/ui/wf/wf-foreign-fn-decl-ret.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ceac273e60447014038e511e5af43841c359547c/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceac273e60447014038e511e5af43841c359547c/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fwf%2Fwf-foreign-fn-decl-ret.stderr?ref=ceac273e60447014038e511e5af43841c359547c", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `(): Foo` is not satisfied\n+  --> $DIR/wf-foreign-fn-decl-ret.rs:11:5\n+   |\n+LL |     pub fn lint_me() -> <() as Foo>::Assoc;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n+\n+error[E0277]: the trait bound `u32: Unsatisfied` is not satisfied\n+  --> $DIR/wf-foreign-fn-decl-ret.rs:14:32\n+   |\n+LL | pub struct Bar<T: Unsatisfied>(T);\n+   |                   ----------- required by this bound in `Bar`\n+...\n+LL |     pub fn lint_me_aswell() -> Bar<u32>;\n+   |                                ^^^^^^^^ the trait `Unsatisfied` is not implemented for `u32`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}]}