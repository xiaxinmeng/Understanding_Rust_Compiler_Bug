{"sha": "f38d0da89389c45067d37ba15e783c024088a09a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOGQwZGE4OTM4OWM0NTA2N2QzN2JhMTVlNzgzYzAyNDA4OGEwOWE=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2018-10-27T12:29:06Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2019-01-24T18:13:50Z"}, "message": "Implement optimize(size) and optimize(speed)", "tree": {"sha": "75260423c9caa95661d32a8bbdef5888f8591fa4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75260423c9caa95661d32a8bbdef5888f8591fa4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f38d0da89389c45067d37ba15e783c024088a09a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f38d0da89389c45067d37ba15e783c024088a09a", "html_url": "https://github.com/rust-lang/rust/commit/f38d0da89389c45067d37ba15e783c024088a09a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f38d0da89389c45067d37ba15e783c024088a09a/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "095b44c83b540bb4dbf74be1cae604f4bae87989", "url": "https://api.github.com/repos/rust-lang/rust/commits/095b44c83b540bb4dbf74be1cae604f4bae87989", "html_url": "https://github.com/rust-lang/rust/commit/095b44c83b540bb4dbf74be1cae604f4bae87989"}], "stats": {"total": 366, "additions": 259, "deletions": 107}, "files": [{"sha": "05f331145afe27edc89930d2f3cdd92d509f546e", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -642,6 +642,7 @@ define_dep_nodes!( <'tcx>\n     [eval_always] CollectAndPartitionMonoItems,\n     [] IsCodegenedItem(DefId),\n     [] CodegenUnit(InternedString),\n+    [] BackendOptimizationLevel(CrateNum),\n     [] CompileCodegenUnit(InternedString),\n     [input] OutputFilenames,\n     [] NormalizeProjectionTy(CanonicalProjectionGoal<'tcx>),"}, {"sha": "657e6e5dcde3534cfd9cfd797519f1092e7ee3cd", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -21,7 +21,7 @@ use syntax::source_map::Spanned;\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{self, CrateSugar, Ident, Name, NodeId, DUMMY_NODE_ID, AsmDialect};\n use syntax::ast::{Attribute, Label, Lit, StrStyle, FloatTy, IntTy, UintTy};\n-use syntax::attr::InlineAttr;\n+use syntax::attr::{InlineAttr, OptimizeAttr};\n use syntax::ext::hygiene::SyntaxContext;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, keywords};\n@@ -2416,6 +2416,8 @@ pub struct CodegenFnAttrs {\n     pub flags: CodegenFnAttrFlags,\n     /// Parsed representation of the `#[inline]` attribute\n     pub inline: InlineAttr,\n+    /// Parsed representation of the `#[optimize]` attribute\n+    pub optimize: OptimizeAttr,\n     /// The `#[export_name = \"...\"]` attribute, indicating a custom symbol a\n     /// function should be exported under\n     pub export_name: Option<Symbol>,\n@@ -2476,6 +2478,7 @@ impl CodegenFnAttrs {\n         CodegenFnAttrs {\n             flags: CodegenFnAttrFlags::empty(),\n             inline: InlineAttr::None,\n+            optimize: OptimizeAttr::None,\n             export_name: None,\n             link_name: None,\n             target_features: vec![],"}, {"sha": "9022cabe7798d3d5fa92dcef892ba537dc9e03cc", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -1159,6 +1159,7 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for hir::TraitCandidate {\n impl_stable_hash_for!(struct hir::CodegenFnAttrs {\n     flags,\n     inline,\n+    optimize,\n     export_name,\n     link_name,\n     target_features,\n@@ -1183,6 +1184,14 @@ impl<'hir> HashStable<StableHashingContext<'hir>> for attr::InlineAttr {\n     }\n }\n \n+impl<'hir> HashStable<StableHashingContext<'hir>> for attr::OptimizeAttr {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'hir>,\n+                                          hasher: &mut StableHasher<W>) {\n+        mem::discriminant(self).hash_stable(hcx, hasher);\n+    }\n+}\n+\n impl_stable_hash_for!(struct hir::Freevar {\n     def,\n     span"}, {"sha": "d4bc50a6fc623c7b63cfdd6addfb87bb091b5618", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -58,6 +58,8 @@ pub enum OptLevel {\n     SizeMin,    // -Oz\n }\n \n+impl_stable_hash_via_hash!(OptLevel);\n+\n /// This is what the `LtoCli` values get mapped to after resolving defaults and\n /// and taking other command line options into account.\n #[derive(Clone, Copy, PartialEq, Hash, Debug)]"}, {"sha": "c4757574ffe4d8c1ccee71e0597f91233f3889b5", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -967,6 +967,12 @@ impl<'tcx> QueryDescription<'tcx> for queries::dllimport_foreign_items<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription<'tcx> for queries::backend_optimization_level<'tcx> {\n+    fn describe(_tcx: TyCtxt<'_, '_, '_>, _: CrateNum) -> Cow<'static, str> {\n+        \"optimization level used by backend\".into()\n+    }\n+}\n+\n macro_rules! impl_disk_cacheable_query(\n     ($query_name:ident, |$key:tt| $cond:expr) => {\n         impl<'tcx> QueryDescription<'tcx> for queries::$query_name<'tcx> {"}, {"sha": "ec1103b0ae58859b271abb4f9ed098929a3625e0", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -22,7 +22,7 @@ use mir::mono::CodegenUnit;\n use mir;\n use mir::interpret::GlobalId;\n use session::{CompileResult, CrateDisambiguator};\n-use session::config::{EntryFnType, OutputFilenames};\n+use session::config::{EntryFnType, OutputFilenames, OptLevel};\n use traits::{self, Vtable};\n use traits::query::{\n     CanonicalPredicateGoal, CanonicalProjectionGoal,\n@@ -573,6 +573,7 @@ define_queries! { <'tcx>\n             -> (Arc<DefIdSet>, Arc<Vec<Arc<CodegenUnit<'tcx>>>>),\n         [] fn is_codegened_item: IsCodegenedItem(DefId) -> bool,\n         [] fn codegen_unit: CodegenUnit(InternedString) -> Arc<CodegenUnit<'tcx>>,\n+        [] fn backend_optimization_level: BackendOptimizationLevel(CrateNum) -> OptLevel,\n     },\n \n     Other {"}, {"sha": "541f5b75aa5c7e214f4accfe1b58203bbcc63474", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -1410,6 +1410,9 @@ pub fn force_from_dep_node<'a, 'gcx, 'lcx>(tcx: TyCtxt<'a, 'gcx, 'lcx>,\n         DepKind::UpstreamMonomorphizationsFor => {\n             force!(upstream_monomorphizations_for, def_id!());\n         }\n+        DepKind::BackendOptimizationLevel => {\n+            force!(backend_optimization_level, krate!());\n+        }\n     }\n \n     true"}, {"sha": "5a39e4f8b7ffabc428650145df7fb0249933c089", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -5,7 +5,7 @@ use std::ffi::CString;\n use rustc::hir::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::Session;\n-use rustc::session::config::Sanitizer;\n+use rustc::session::config::{Sanitizer, OptLevel};\n use rustc::ty::{self, TyCtxt, PolyFnSig};\n use rustc::ty::layout::HasTyCtxt;\n use rustc::ty::query::Providers;\n@@ -20,7 +20,7 @@ use attributes;\n use llvm::{self, Attribute};\n use llvm::AttributePlace::Function;\n use llvm_util;\n-pub use syntax::attr::{self, InlineAttr};\n+pub use syntax::attr::{self, InlineAttr, OptimizeAttr};\n \n use context::CodegenCx;\n use value::Value;\n@@ -57,13 +57,6 @@ fn unwind(val: &'ll Value, can_unwind: bool) {\n     Attribute::NoUnwind.toggle_llfn(Function, val, !can_unwind);\n }\n \n-/// Tell LLVM whether it should optimize function for size.\n-#[inline]\n-#[allow(dead_code)] // possibly useful function\n-pub fn set_optimize_for_size(val: &'ll Value, optimize: bool) {\n-    Attribute::OptimizeForSize.toggle_llfn(Function, val, optimize);\n-}\n-\n /// Tell LLVM if this function should be 'naked', i.e., skip the epilogue and prologue.\n #[inline]\n pub fn naked(val: &'ll Value, is_naked: bool) {\n@@ -164,6 +157,39 @@ pub fn from_fn_attrs(\n \n     inline(cx, llfn, codegen_fn_attrs.inline);\n \n+    match codegen_fn_attrs.optimize {\n+        OptimizeAttr::None => {\n+            match cx.tcx.sess.opts.optimize {\n+                OptLevel::Size => {\n+                    llvm::Attribute::MinSize.unapply_llfn(Function, llfn);\n+                    llvm::Attribute::OptimizeForSize.apply_llfn(Function, llfn);\n+                    llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n+                },\n+                OptLevel::SizeMin => {\n+                    llvm::Attribute::MinSize.apply_llfn(Function, llfn);\n+                    llvm::Attribute::OptimizeForSize.apply_llfn(Function, llfn);\n+                    llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n+                }\n+                OptLevel::No => {\n+                    llvm::Attribute::MinSize.unapply_llfn(Function, llfn);\n+                    llvm::Attribute::OptimizeForSize.unapply_llfn(Function, llfn);\n+                    llvm::Attribute::OptimizeNone.apply_llfn(Function, llfn);\n+                }\n+                _ => {}\n+            }\n+        }\n+        OptimizeAttr::Speed => {\n+            llvm::Attribute::MinSize.unapply_llfn(Function, llfn);\n+            llvm::Attribute::OptimizeForSize.unapply_llfn(Function, llfn);\n+            llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n+        }\n+        OptimizeAttr::Size => {\n+            llvm::Attribute::MinSize.apply_llfn(Function, llfn);\n+            llvm::Attribute::OptimizeForSize.apply_llfn(Function, llfn);\n+            llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n+        }\n+    }\n+\n     // The `uwtable` attribute according to LLVM is:\n     //\n     //     This attribute indicates that the ABI being targeted requires that an"}, {"sha": "3e51078dc643668fa263f27dfa97487c2204fb1a", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -3,7 +3,7 @@ use rustc_codegen_ssa::back::symbol_export;\n use rustc_codegen_ssa::back::write::{ModuleConfig, CodegenContext, pre_lto_bitcode_filename};\n use rustc_codegen_ssa::back::lto::{SerializedModule, LtoModuleCodegen, ThinShared, ThinModule};\n use rustc_codegen_ssa::traits::*;\n-use back::write::{self, DiagnosticHandlers, with_llvm_pmb, save_temp_bitcode, get_llvm_opt_level};\n+use back::write::{self, DiagnosticHandlers, with_llvm_pmb, save_temp_bitcode, to_llvm_opt_settings};\n use errors::{FatalError, Handler};\n use llvm::archive_ro::ArchiveRO;\n use llvm::{self, True, False};\n@@ -532,7 +532,7 @@ pub(crate) fn run_pass_manager(cgcx: &CodegenContext<LlvmCodegenBackend>,\n         // Note that in general this shouldn't matter too much as you typically\n         // only turn on ThinLTO when you're compiling with optimizations\n         // otherwise.\n-        let opt_level = config.opt_level.map(get_llvm_opt_level)\n+        let opt_level = config.opt_level.map(|x| to_llvm_opt_settings(x).0)\n             .unwrap_or(llvm::CodeGenOptLevel::None);\n         let opt_level = match opt_level {\n             llvm::CodeGenOptLevel::None => llvm::CodeGenOptLevel::Less,"}, {"sha": "47637f3c5d705f970efb57d3567ae3ac382fc862", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -5,8 +5,10 @@ use rustc_codegen_ssa::back::write::{CodegenContext, ModuleConfig, run_assembler\n use rustc_codegen_ssa::traits::*;\n use base;\n use consts;\n+use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::session::config::{self, OutputType, Passes, Lto};\n use rustc::session::Session;\n+use rustc::ty::TyCtxt;\n use time_graph::Timeline;\n use llvm::{self, DiagnosticInfo, PassManager, SMDiagnostic};\n use llvm_util;\n@@ -81,42 +83,46 @@ pub fn write_output_file(\n     }\n }\n \n-pub(crate) fn get_llvm_opt_level(optimize: config::OptLevel) -> llvm::CodeGenOptLevel {\n-    match optimize {\n-      config::OptLevel::No => llvm::CodeGenOptLevel::None,\n-      config::OptLevel::Less => llvm::CodeGenOptLevel::Less,\n-      config::OptLevel::Default => llvm::CodeGenOptLevel::Default,\n-      config::OptLevel::Aggressive => llvm::CodeGenOptLevel::Aggressive,\n-      _ => llvm::CodeGenOptLevel::Default,\n-    }\n-}\n-\n-pub(crate) fn get_llvm_opt_size(optimize: config::OptLevel) -> llvm::CodeGenOptSize {\n-    match optimize {\n-      config::OptLevel::Size => llvm::CodeGenOptSizeDefault,\n-      config::OptLevel::SizeMin => llvm::CodeGenOptSizeAggressive,\n-      _ => llvm::CodeGenOptSizeNone,\n-    }\n+pub fn create_target_machine(\n+    tcx: TyCtxt,\n+    find_features: bool,\n+) -> &'static mut llvm::TargetMachine {\n+    target_machine_factory(tcx.sess, tcx.backend_optimization_level(LOCAL_CRATE), find_features)()\n+        .unwrap_or_else(|err| llvm_err(tcx.sess.diagnostic(), &err).raise() )\n }\n \n-pub fn create_target_machine(\n+pub fn create_informational_target_machine(\n     sess: &Session,\n     find_features: bool,\n ) -> &'static mut llvm::TargetMachine {\n-    target_machine_factory(sess, find_features)().unwrap_or_else(|err| {\n+    target_machine_factory(sess, config::OptLevel::No, find_features)().unwrap_or_else(|err| {\n         llvm_err(sess.diagnostic(), &err).raise()\n     })\n }\n \n+\n+pub fn to_llvm_opt_settings(cfg: config::OptLevel) -> (llvm::CodeGenOptLevel, llvm::CodeGenOptSize)\n+{\n+    use self::config::OptLevel::*;\n+    match cfg {\n+        No => (llvm::CodeGenOptLevel::None, llvm::CodeGenOptSizeNone),\n+        Less => (llvm::CodeGenOptLevel::Less, llvm::CodeGenOptSizeNone),\n+        Default => (llvm::CodeGenOptLevel::Default, llvm::CodeGenOptSizeNone),\n+        Aggressive => (llvm::CodeGenOptLevel::Aggressive, llvm::CodeGenOptSizeNone),\n+        Size => (llvm::CodeGenOptLevel::Default, llvm::CodeGenOptSizeDefault),\n+        SizeMin => (llvm::CodeGenOptLevel::Default, llvm::CodeGenOptSizeAggressive),\n+    }\n+}\n+\n // If find_features is true this won't access `sess.crate_types` by assuming\n // that `is_pie_binary` is false. When we discover LLVM target features\n // `sess.crate_types` is uninitialized so we cannot access it.\n-pub fn target_machine_factory(sess: &Session, find_features: bool)\n+pub fn target_machine_factory(sess: &Session, optlvl: config::OptLevel, find_features: bool)\n     -> Arc<dyn Fn() -> Result<&'static mut llvm::TargetMachine, String> + Send + Sync>\n {\n     let reloc_model = get_reloc_model(sess);\n \n-    let opt_level = get_llvm_opt_level(sess.opts.optimize);\n+    let (opt_level, _) = to_llvm_opt_settings(optlvl);\n     let use_softfp = sess.opts.cg.soft_float;\n \n     let ffunction_sections = sess.target.target.options.function_sections;\n@@ -357,7 +363,7 @@ pub(crate) unsafe fn optimize(cgcx: &CodegenContext<LlvmCodegenBackend>,\n             if !config.no_prepopulate_passes {\n                 llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n                 llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);\n-                let opt_level = config.opt_level.map(get_llvm_opt_level)\n+                let opt_level = config.opt_level.map(|x| to_llvm_opt_settings(x).0)\n                     .unwrap_or(llvm::CodeGenOptLevel::None);\n                 let prepare_for_thin_lto = cgcx.lto == Lto::Thin || cgcx.lto == Lto::ThinLocal ||\n                     (cgcx.lto != Lto::Fat && cgcx.opts.debugging_opts.cross_lang_lto.enabled());\n@@ -689,7 +695,8 @@ pub unsafe fn with_llvm_pmb(llmod: &llvm::Module,\n     // reasonable defaults and prepare it to actually populate the pass\n     // manager.\n     let builder = llvm::LLVMPassManagerBuilderCreate();\n-    let opt_size = config.opt_size.map(get_llvm_opt_size).unwrap_or(llvm::CodeGenOptSizeNone);\n+    let opt_size = config.opt_size.map(|x| to_llvm_opt_settings(x).1)\n+        .unwrap_or(llvm::CodeGenOptSizeNone);\n     let inline_threshold = config.inline_threshold;\n \n     let pgo_gen_path = config.pgo_gen.as_ref().map(|s| {"}, {"sha": "6e1ef440a3f3f39c021c171a9c284343929e7cb0", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -136,7 +136,7 @@ pub fn iter_globals(llmod: &'ll llvm::Module) -> ValueIter<'ll> {\n     }\n }\n \n-pub fn compile_codegen_unit<'ll, 'tcx>(tcx: TyCtxt<'ll, 'tcx, 'tcx>,\n+pub fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                   cgu_name: InternedString)\n                                   -> Stats {\n     let start_time = Instant::now();\n@@ -164,7 +164,7 @@ pub fn compile_codegen_unit<'ll, 'tcx>(tcx: TyCtxt<'ll, 'tcx, 'tcx>,\n         let backend = LlvmCodegenBackend(());\n         let cgu = tcx.codegen_unit(cgu_name);\n         // Instantiate monomorphizations without filling out definitions yet...\n-        let llvm_module = backend.new_metadata(tcx.sess, &cgu_name.as_str());\n+        let llvm_module = backend.new_metadata(tcx, &cgu_name.as_str());\n         let stats = {\n             let cx = CodegenCx::new(tcx, cgu, &llvm_module);\n             let mono_items = cx.codegen_unit"}, {"sha": "1d7f14b02e199ef2728b7c3030c3a7d85b3ebf96", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -144,16 +144,17 @@ pub fn is_pie_binary(sess: &Session) -> bool {\n }\n \n pub unsafe fn create_module(\n-    sess: &Session,\n+    tcx: TyCtxt,\n     llcx: &'ll llvm::Context,\n     mod_name: &str,\n ) -> &'ll llvm::Module {\n+    let sess = tcx.sess;\n     let mod_name = SmallCStr::new(mod_name);\n     let llmod = llvm::LLVMModuleCreateWithNameInContext(mod_name.as_ptr(), llcx);\n \n     // Ensure the data-layout values hardcoded remain the defaults.\n     if sess.target.target.options.is_builtin {\n-        let tm = ::back::write::create_target_machine(sess, false);\n+        let tm = ::back::write::create_target_machine(tcx, false);\n         llvm::LLVMRustSetDataLayoutFromTargetMachine(llmod, tm);\n         llvm::LLVMRustDisposeTargetMachine(tm);\n "}, {"sha": "166c6ab9ae9cb82cadb22432e9f7736bb14bb192", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -15,7 +15,7 @@ use llvm;\n use llvm::AttributePlace::Function;\n use rustc::ty::{self, PolyFnSig};\n use rustc::ty::layout::LayoutOf;\n-use rustc::session::config::Sanitizer;\n+use rustc::session::config::{Sanitizer, OptLevel};\n use rustc_data_structures::small_c_str::SmallCStr;\n use abi::{FnType, FnTypeExt};\n use attributes;\n@@ -65,15 +65,24 @@ fn declare_raw_fn(\n         }\n     }\n \n-    match cx.tcx.sess.opts.cg.opt_level.as_ref().map(String::as_ref) {\n-        Some(\"s\") => {\n+    // FIXME(opt): this is kinda duplicated with similar code in attributes::from_fm_attrs\u2026\n+    match cx.tcx.sess.opts.optimize {\n+        OptLevel::Size => {\n+            llvm::Attribute::MinSize.unapply_llfn(Function, llfn);\n             llvm::Attribute::OptimizeForSize.apply_llfn(Function, llfn);\n+            llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n         },\n-        Some(\"z\") => {\n+        OptLevel::SizeMin => {\n             llvm::Attribute::MinSize.apply_llfn(Function, llfn);\n             llvm::Attribute::OptimizeForSize.apply_llfn(Function, llfn);\n-        },\n-        _ => {},\n+            llvm::Attribute::OptimizeNone.unapply_llfn(Function, llfn);\n+        }\n+        OptLevel::No => {\n+            llvm::Attribute::MinSize.unapply_llfn(Function, llfn);\n+            llvm::Attribute::OptimizeForSize.unapply_llfn(Function, llfn);\n+            llvm::Attribute::OptimizeNone.apply_llfn(Function, llfn);\n+        }\n+        _ => {}\n     }\n \n     attributes::non_lazy_bind(cx.sess(), llfn);"}, {"sha": "662b84b3a910fa9c16e007588aba5e0d2aadea7e", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -73,7 +73,7 @@ use rustc::dep_graph::DepGraph;\n use rustc::middle::allocator::AllocatorKind;\n use rustc::middle::cstore::{EncodedMetadata, MetadataLoader};\n use rustc::session::{Session, CompileIncomplete};\n-use rustc::session::config::{OutputFilenames, OutputType, PrintRequest};\n+use rustc::session::config::{OutputFilenames, OutputType, PrintRequest, OptLevel};\n use rustc::ty::{self, TyCtxt};\n use rustc::util::time_graph;\n use rustc::util::profiling::ProfileCategory;\n@@ -122,8 +122,8 @@ mod va_arg;\n pub struct LlvmCodegenBackend(());\n \n impl ExtraBackendMethods for LlvmCodegenBackend {\n-    fn new_metadata(&self, sess: &Session, mod_name: &str) -> ModuleLlvm {\n-        ModuleLlvm::new(sess, mod_name)\n+    fn new_metadata(&self, tcx: TyCtxt, mod_name: &str) -> ModuleLlvm {\n+        ModuleLlvm::new(tcx, mod_name)\n     }\n     fn write_metadata<'b, 'gcx>(\n         &self,\n@@ -145,10 +145,11 @@ impl ExtraBackendMethods for LlvmCodegenBackend {\n     fn target_machine_factory(\n         &self,\n         sess: &Session,\n+        optlvl: OptLevel,\n         find_features: bool\n     ) -> Arc<dyn Fn() ->\n         Result<&'static mut llvm::TargetMachine, String> + Send + Sync> {\n-        back::write::target_machine_factory(sess, find_features)\n+        back::write::target_machine_factory(sess, optlvl, find_features)\n     }\n     fn target_cpu<'b>(&self, sess: &'b Session) -> &'b str {\n         llvm_util::target_cpu(sess)\n@@ -364,15 +365,15 @@ unsafe impl Send for ModuleLlvm { }\n unsafe impl Sync for ModuleLlvm { }\n \n impl ModuleLlvm {\n-    fn new(sess: &Session, mod_name: &str) -> Self {\n+    fn new(tcx: TyCtxt, mod_name: &str) -> Self {\n         unsafe {\n-            let llcx = llvm::LLVMRustContextCreate(sess.fewer_names());\n-            let llmod_raw = context::create_module(sess, llcx, mod_name) as *const _;\n+            let llcx = llvm::LLVMRustContextCreate(tcx.sess.fewer_names());\n+            let llmod_raw = context::create_module(tcx, llcx, mod_name) as *const _;\n \n             ModuleLlvm {\n                 llmod_raw,\n                 llcx,\n-                tm: create_target_machine(sess, false),\n+                tm: create_target_machine(tcx, false),\n             }\n         }\n     }"}, {"sha": "fe2aed09ebca656d66ffa6ad4d5b3d3031060106", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -115,6 +115,7 @@ pub enum Attribute {\n     SanitizeAddress = 21,\n     SanitizeMemory  = 22,\n     NonLazyBind     = 23,\n+    OptimizeNone    = 24,\n }\n \n /// LLVMIntPredicate"}, {"sha": "e2d0e558d3b7840959b4aa19232fcd661255a273", "filename": "src/librustc_codegen_llvm/llvm_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm_util.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -1,5 +1,5 @@\n use syntax_pos::symbol::Symbol;\n-use back::write::create_target_machine;\n+use back::write::create_informational_target_machine;\n use llvm;\n use rustc::session::Session;\n use rustc::session::config::PrintRequest;\n@@ -223,7 +223,7 @@ pub fn to_llvm_feature<'a>(sess: &Session, s: &'a str) -> &'a str {\n }\n \n pub fn target_features(sess: &Session) -> Vec<Symbol> {\n-    let target_machine = create_target_machine(sess, true);\n+    let target_machine = create_informational_target_machine(sess, true);\n     target_feature_whitelist(sess)\n         .iter()\n         .filter_map(|&(feature, gate)| {\n@@ -276,7 +276,7 @@ pub fn print_passes() {\n \n pub(crate) fn print(req: PrintRequest, sess: &Session) {\n     require_inited();\n-    let tm = create_target_machine(sess, true);\n+    let tm = create_informational_target_machine(sess, true);\n     unsafe {\n         match req {\n             PrintRequest::TargetCPUs => llvm::LLVMRustPrintTargetCPUs(tm),"}, {"sha": "67d4d408babfaad8271611de8c9de40453386321", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -982,6 +982,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         None\n     };\n \n+    let ol = tcx.backend_optimization_level(LOCAL_CRATE);\n     let cgcx = CodegenContext::<B> {\n         backend: backend.clone(),\n         crate_types: sess.crate_types.borrow().clone(),\n@@ -1005,7 +1006,7 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         regular_module_config: modules_config,\n         metadata_module_config: metadata_config,\n         allocator_module_config: allocator_config,\n-        tm_factory: TargetMachineFactory(backend.target_machine_factory(tcx.sess, false)),\n+        tm_factory: TargetMachineFactory(backend.target_machine_factory(tcx.sess, ol, false)),\n         total_cgus,\n         msvc_imps_needed: msvc_imps_needed(tcx),\n         target_pointer_width: tcx.sess.target.target.target_pointer_width.clone(),"}, {"sha": "84e55ce0f22c6a6bbfa39dab0e2470f1d719af03", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -551,7 +551,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n                                                             &[\"crate\"],\n                                                             Some(\"metadata\")).as_str()\n                                                                              .to_string();\n-    let metadata_llvm_module = backend.new_metadata(tcx.sess, &metadata_cgu_name);\n+    let metadata_llvm_module = backend.new_metadata(tcx, &metadata_cgu_name);\n     let metadata = time(tcx.sess, \"write metadata\", || {\n         backend.write_metadata(tcx, &metadata_llvm_module)\n     });\n@@ -636,7 +636,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n                                                        &[\"crate\"],\n                                                        Some(\"allocator\")).as_str()\n                                                                          .to_string();\n-        let modules = backend.new_metadata(tcx.sess, &llmod_id);\n+        let modules = backend.new_metadata(tcx, &llmod_id);\n         time(tcx.sess, \"write allocator module\", || {\n             backend.codegen_allocator(tcx, &modules, kind)\n         });\n@@ -897,6 +897,39 @@ fn is_codegened_item(tcx: TyCtxt, id: DefId) -> bool {\n }\n \n pub fn provide_both(providers: &mut Providers) {\n+    providers.backend_optimization_level = |tcx, cratenum| {\n+        let for_speed = match tcx.sess.opts.optimize {\n+            // If globally no optimisation is done, #[optimize] has no effect.\n+            //\n+            // This is done because if we ended up \"upgrading\" to `-O2` here, we\u2019d populate the\n+            // pass manager and it is likely that some module-wide passes (such as inliner or\n+            // cross-function constant propagation) would ignore the `optnone` annotation we put\n+            // on the functions, thus necessarily involving these functions into optimisations.\n+            config::OptLevel::No => return config::OptLevel::No,\n+            // If globally optimise-speed is already specified, just use that level.\n+            config::OptLevel::Less => return config::OptLevel::Less,\n+            config::OptLevel::Default => return config::OptLevel::Default,\n+            config::OptLevel::Aggressive => return config::OptLevel::Aggressive,\n+            // If globally optimize-for-size has been requested, use -O2 instead (if optimize(size)\n+            // are present).\n+            config::OptLevel::Size => config::OptLevel::Default,\n+            config::OptLevel::SizeMin => config::OptLevel::Default,\n+        };\n+\n+        let (defids, _) = tcx.collect_and_partition_mono_items(cratenum);\n+        for id in &*defids {\n+            let hir::CodegenFnAttrs { optimize, .. } = tcx.codegen_fn_attrs(*id);\n+            match optimize {\n+                attr::OptimizeAttr::None => continue,\n+                attr::OptimizeAttr::Size => continue,\n+                attr::OptimizeAttr::Speed => {\n+                    return for_speed;\n+                }\n+            }\n+        }\n+        return tcx.sess.opts.optimize;\n+    };\n+\n     providers.dllimport_foreign_items = |tcx, krate| {\n         let module_map = tcx.foreign_modules(krate);\n         let module_map = module_map.iter()"}, {"sha": "73c7614d913933b7c0668fa8ee9c53c55f69a2b2", "filename": "src/librustc_codegen_ssa/traits/backend.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fbackend.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -6,7 +6,7 @@ use super::CodegenObject;\n use rustc::middle::allocator::AllocatorKind;\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::mir::mono::Stats;\n-use rustc::session::Session;\n+use rustc::session::{Session, config};\n use rustc::ty::TyCtxt;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n use std::sync::Arc;\n@@ -32,7 +32,7 @@ impl<'tcx, T> Backend<'tcx> for T where\n }\n \n pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Send {\n-    fn new_metadata(&self, sess: &Session, mod_name: &str) -> Self::Module;\n+    fn new_metadata(&self, sess: TyCtxt, mod_name: &str) -> Self::Module;\n     fn write_metadata<'b, 'gcx>(\n         &self,\n         tcx: TyCtxt<'b, 'gcx, 'gcx>,\n@@ -50,6 +50,7 @@ pub trait ExtraBackendMethods: CodegenBackend + WriteBackendMethods + Sized + Se\n     fn target_machine_factory(\n         &self,\n         sess: &Session,\n+        opt_level: config::OptLevel,\n         find_features: bool,\n     ) -> Arc<dyn Fn() -> Result<Self::TargetMachine, String> + Send + Sync>;\n     fn target_cpu<'b>(&self, sess: &'b Session) -> &'b str;"}, {"sha": "2256dbcec002b99d6f3e5820b2f92f64761f7d2c", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 71, "deletions": 44, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -36,7 +36,7 @@ use rustc_target::spec::abi;\n \n use syntax::ast;\n use syntax::ast::{Ident, MetaItemKind};\n-use syntax::attr::{InlineAttr, list_contains_name, mark_used};\n+use syntax::attr::{InlineAttr, OptimizeAttr, list_contains_name, mark_used};\n use syntax::source_map::Spanned;\n use syntax::feature_gate;\n use syntax::symbol::{keywords, Symbol};\n@@ -2286,49 +2286,6 @@ fn codegen_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> Codegen\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::USED;\n         } else if attr.check_name(\"thread_local\") {\n             codegen_fn_attrs.flags |= CodegenFnAttrFlags::THREAD_LOCAL;\n-        } else if attr.check_name(\"inline\") {\n-            codegen_fn_attrs.inline = attrs.iter().fold(InlineAttr::None, |ia, attr| {\n-                if attr.path != \"inline\" {\n-                    return ia;\n-                }\n-                let meta = match attr.meta() {\n-                    Some(meta) => meta.node,\n-                    None => return ia,\n-                };\n-                match meta {\n-                    MetaItemKind::Word => {\n-                        mark_used(attr);\n-                        InlineAttr::Hint\n-                    }\n-                    MetaItemKind::List(ref items) => {\n-                        mark_used(attr);\n-                        inline_span = Some(attr.span);\n-                        if items.len() != 1 {\n-                            span_err!(\n-                                tcx.sess.diagnostic(),\n-                                attr.span,\n-                                E0534,\n-                                \"expected one argument\"\n-                            );\n-                            InlineAttr::None\n-                        } else if list_contains_name(&items[..], \"always\") {\n-                            InlineAttr::Always\n-                        } else if list_contains_name(&items[..], \"never\") {\n-                            InlineAttr::Never\n-                        } else {\n-                            span_err!(\n-                                tcx.sess.diagnostic(),\n-                                items[0].span,\n-                                E0535,\n-                                \"invalid argument\"\n-                            );\n-\n-                            InlineAttr::None\n-                        }\n-                    }\n-                    _ => ia,\n-                }\n-            });\n         } else if attr.check_name(\"export_name\") {\n             if let Some(s) = attr.value_str() {\n                 if s.as_str().contains(\"\\0\") {\n@@ -2378,6 +2335,76 @@ fn codegen_fn_attrs<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, id: DefId) -> Codegen\n         }\n     }\n \n+    codegen_fn_attrs.inline = attrs.iter().fold(InlineAttr::None, |ia, attr| {\n+        if attr.path != \"inline\" {\n+            return ia;\n+        }\n+        match attr.meta().map(|i| i.node) {\n+            Some(MetaItemKind::Word) => {\n+                mark_used(attr);\n+                InlineAttr::Hint\n+            }\n+            Some(MetaItemKind::List(ref items)) => {\n+                mark_used(attr);\n+                inline_span = Some(attr.span);\n+                if items.len() != 1 {\n+                    span_err!(\n+                        tcx.sess.diagnostic(),\n+                        attr.span,\n+                        E0534,\n+                        \"expected one argument\"\n+                    );\n+                    InlineAttr::None\n+                } else if list_contains_name(&items[..], \"always\") {\n+                    InlineAttr::Always\n+                } else if list_contains_name(&items[..], \"never\") {\n+                    InlineAttr::Never\n+                } else {\n+                    span_err!(\n+                        tcx.sess.diagnostic(),\n+                        items[0].span,\n+                        E0535,\n+                        \"invalid argument\"\n+                    );\n+\n+                    InlineAttr::None\n+                }\n+            }\n+            Some(MetaItemKind::NameValue(_)) => ia,\n+            None => ia,\n+        }\n+    });\n+\n+    codegen_fn_attrs.optimize = attrs.iter().fold(OptimizeAttr::None, |ia, attr| {\n+        if attr.path != \"optimize\" {\n+            return ia;\n+        }\n+        let err = |sp, s| span_err!(tcx.sess.diagnostic(), sp, E0720, \"{}\", s);\n+        match attr.meta().map(|i| i.node) {\n+            Some(MetaItemKind::Word) => {\n+                err(attr.span, \"expected one argument\");\n+                ia\n+            }\n+            Some(MetaItemKind::List(ref items)) => {\n+                mark_used(attr);\n+                inline_span = Some(attr.span);\n+                if items.len() != 1 {\n+                    err(attr.span, \"expected one argument\");\n+                    OptimizeAttr::None\n+                } else if list_contains_name(&items[..], \"size\") {\n+                    OptimizeAttr::Size\n+                } else if list_contains_name(&items[..], \"speed\") {\n+                    OptimizeAttr::Speed\n+                } else {\n+                    err(items[0].span, \"invalid argument\");\n+                    OptimizeAttr::None\n+                }\n+            }\n+            Some(MetaItemKind::NameValue(_)) => ia,\n+            None => ia,\n+        }\n+    });\n+\n     // If a function uses #[target_feature] it can't be inlined into general\n     // purpose functions as they wouldn't have the right target features\n     // enabled. For that reason we also forbid #[inline(always)] as it can't be"}, {"sha": "21dcdaf4fa0e7fe6cc9616e105adda0dcf8c4cbf", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -4719,4 +4719,5 @@ register_diagnostics! {\n     E0645, // trait aliases not finished\n     E0698, // type inside generator must be known in this context\n     E0719, // duplicate values for associated type binding\n+    E0720, // Malformed #[optimize] attribute\n }"}, {"sha": "1a4b45e76b42dcab6536493e2699b1eabfe77a42", "filename": "src/libsyntax/attr/builtin.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibsyntax%2Fattr%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fbuiltin.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -63,6 +63,13 @@ pub enum InlineAttr {\n     Never,\n }\n \n+#[derive(Copy, Clone, Hash, PartialEq, RustcEncodable, RustcDecodable)]\n+pub enum OptimizeAttr {\n+    None,\n+    Speed,\n+    Size,\n+}\n+\n #[derive(Copy, Clone, PartialEq)]\n pub enum UnwindAttr {\n     Allowed,"}, {"sha": "58be7c3e085c3faaca4f110bce89b6b63d0e285b", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -4,8 +4,8 @@ mod builtin;\n \n pub use self::builtin::{\n     cfg_matches, contains_feature_attr, eval_condition, find_crate_name, find_deprecation,\n-    find_repr_attrs, find_stability, find_unwind_attr, Deprecation, InlineAttr, IntType, ReprAttr,\n-    RustcDeprecation, Stability, StabilityLevel, UnwindAttr,\n+    find_repr_attrs, find_stability, find_unwind_attr, Deprecation, InlineAttr, OptimizeAttr,\n+    IntType, ReprAttr, RustcDeprecation, Stability, StabilityLevel, UnwindAttr,\n };\n pub use self::IntType::*;\n pub use self::ReprAttr::*;"}, {"sha": "abbcf24fca50fbebaeb6e9c990516c60bd344c3c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -462,6 +462,9 @@ declare_features! (\n \n     // Re-Rebalance coherence\n     (active, re_rebalance_coherence, \"1.32.0\", Some(55437), None),\n+\n+    // #[optimize(X)]\n+    (active, optimize_attribute, \"1.34.0\", Some(54882), None),\n );\n \n declare_features! (\n@@ -1215,6 +1218,12 @@ pub const BUILTIN_ATTRIBUTES: &[(&str, AttributeType, AttributeTemplate, Attribu\n                            \"#[alloc_error_handler] is an unstable feature\",\n                            cfg_fn!(alloc_error_handler))),\n \n+    // RFC 2412\n+    (\"optimize\", Whitelisted, Gated(Stability::Unstable,\n+                               \"optimize_attribute\",\n+                               \"#[optimize] attribute is an unstable feature\",\n+                               cfg_fn!(optimize_attribute))),\n+\n     // Crate level attributes\n     (\"crate_name\", CrateLevel, template!(NameValueStr: \"name\"), Ungated),\n     (\"crate_type\", CrateLevel, template!(NameValueStr: \"bin|lib|...\"), Ungated),"}, {"sha": "474e771c1f0111b7205ab23bfb66fb5b0862ef53", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -188,6 +188,8 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::SanitizeMemory;\n   case NonLazyBind:\n     return Attribute::NonLazyBind;\n+  case OptimizeNone:\n+    return Attribute::OptimizeNone;\n   }\n   report_fatal_error(\"bad AttributeKind\");\n }"}, {"sha": "933266b402526856ed6d62b2c3e05c4b64d38cd5", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f38d0da89389c45067d37ba15e783c024088a09a/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/f38d0da89389c45067d37ba15e783c024088a09a/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=f38d0da89389c45067d37ba15e783c024088a09a", "patch": "@@ -84,6 +84,7 @@ enum LLVMRustAttribute {\n   SanitizeAddress = 21,\n   SanitizeMemory = 22,\n   NonLazyBind = 23,\n+  OptimizeNone = 24,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}]}