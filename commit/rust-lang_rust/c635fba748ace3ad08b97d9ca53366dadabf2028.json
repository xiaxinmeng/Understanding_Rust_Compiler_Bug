{"sha": "c635fba748ace3ad08b97d9ca53366dadabf2028", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MzVmYmE3NDhhY2UzYWQwOGI5N2Q5Y2E1MzM2NmRhZGFiZjIwMjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-28T14:31:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-28T14:31:02Z"}, "message": "auto merge of #9583 : blake2-ppc/rust/connect-vec, r=huonw\n\nstd::vec: Sane implementations for connect_vec and concat_vec\r\n\r\nAvoid unnecessary copying of subvectors, and calculate the needed space\r\nbeforehand. These implementations are simple but better than the\r\nprevious.\r\n\r\nAlso only implement it once, for all `Vector<T>` using:\r\n\r\n    impl<'self, T: Clone, V: Vector<T>> VectorVector<T> for &'self [V]\r\n\r\nCloses #9581", "tree": {"sha": "31b79b40028815a61184aac81f0363fcb3eab728", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31b79b40028815a61184aac81f0363fcb3eab728"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c635fba748ace3ad08b97d9ca53366dadabf2028", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c635fba748ace3ad08b97d9ca53366dadabf2028", "html_url": "https://github.com/rust-lang/rust/commit/c635fba748ace3ad08b97d9ca53366dadabf2028", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c635fba748ace3ad08b97d9ca53366dadabf2028/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "058a5d97a278ddd40791b911c28d993d4a34f885", "url": "https://api.github.com/repos/rust-lang/rust/commits/058a5d97a278ddd40791b911c28d993d4a34f885", "html_url": "https://github.com/rust-lang/rust/commit/058a5d97a278ddd40791b911c28d993d4a34f885"}, {"sha": "3709aa78d8fc75ed739e837d7c96205b8494188d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3709aa78d8fc75ed739e837d7c96205b8494188d", "html_url": "https://github.com/rust-lang/rust/commit/3709aa78d8fc75ed739e837d7c96205b8494188d"}], "stats": {"total": 99, "additions": 45, "deletions": 54}, "files": [{"sha": "c9eded645fa2d84a45f8690285b1a71036fce532", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c635fba748ace3ad08b97d9ca53366dadabf2028/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c635fba748ace3ad08b97d9ca53366dadabf2028/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=c635fba748ace3ad08b97d9ca53366dadabf2028", "patch": "@@ -773,12 +773,12 @@ pub fn specialize(cx: &MatchCheckCtxt,\n                         let num_elements = before.len() + after.len();\n                         if num_elements < arity && slice.is_some() {\n                             Some(vec::append(\n-                                vec::concat(&[\n+                                [\n                                     before,\n                                     vec::from_elem(\n                                         arity - num_elements, wild()),\n                                     after\n-                                ]),\n+                                ].concat_vec(),\n                                 r.tail()\n                             ))\n                         } else if num_elements == arity {"}, {"sha": "70f1815b462ed60d7fc41cfe41da1cb9a9850619", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c635fba748ace3ad08b97d9ca53366dadabf2028/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c635fba748ace3ad08b97d9ca53366dadabf2028/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=c635fba748ace3ad08b97d9ca53366dadabf2028", "patch": "@@ -173,12 +173,11 @@ impl Clean<Item> for doctree::Module {\n             visibility: self.vis.clean(),\n             id: self.id,\n             inner: ModuleItem(Module {\n-               items: std::vec::concat(&[self.structs.clean(),\n-                              self.enums.clean(), self.fns.clean(),\n-                              std::vec::concat(self.foreigns.clean()),\n-                              self.mods.clean(), self.typedefs.clean(),\n-                              self.statics.clean(), self.traits.clean(),\n-                              self.impls.clean(), self.view_items.clean()])\n+               items: [self.structs.clean(), self.enums.clean(),\n+                       self.fns.clean(), self.foreigns.clean().concat_vec(),\n+                       self.mods.clean(), self.typedefs.clean(),\n+                       self.statics.clean(), self.traits.clean(),\n+                       self.impls.clean(), self.view_items.clean()].concat_vec()\n             })\n         }\n     }"}, {"sha": "409aa919252d937f63c165477c691246417653f6", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 38, "deletions": 46, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c635fba748ace3ad08b97d9ca53366dadabf2028/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c635fba748ace3ad08b97d9ca53366dadabf2028/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=c635fba748ace3ad08b97d9ca53366dadabf2028", "patch": "@@ -340,59 +340,36 @@ pub fn flat_map<T, U>(v: &[T], f: &fn(t: &T) -> ~[U]) -> ~[U] {\n     result\n }\n \n-/// Flattens a vector of vectors of T into a single vector of T.\n-pub fn concat<T:Clone>(v: &[~[T]]) -> ~[T] { v.concat_vec() }\n-\n-/// Concatenate a vector of vectors, placing a given separator between each\n-pub fn connect<T:Clone>(v: &[~[T]], sep: &T) -> ~[T] { v.connect_vec(sep) }\n-\n-/// Flattens a vector of vectors of T into a single vector of T.\n-pub fn concat_slices<T:Clone>(v: &[&[T]]) -> ~[T] { v.concat_vec() }\n-\n-/// Concatenate a vector of vectors, placing a given separator between each\n-pub fn connect_slices<T:Clone>(v: &[&[T]], sep: &T) -> ~[T] { v.connect_vec(sep) }\n-\n #[allow(missing_doc)]\n pub trait VectorVector<T> {\n     // FIXME #5898: calling these .concat and .connect conflicts with\n     // StrVector::con{cat,nect}, since they have generic contents.\n+    /// Flattens a vector of vectors of T into a single vector of T.\n     fn concat_vec(&self) -> ~[T];\n-    fn connect_vec(&self, sep: &T) -> ~[T];\n-}\n-\n-impl<'self, T:Clone> VectorVector<T> for &'self [~[T]] {\n-    /// Flattens a vector of slices of T into a single vector of T.\n-    fn concat_vec(&self) -> ~[T] {\n-        self.flat_map(|inner| (*inner).clone())\n-    }\n \n     /// Concatenate a vector of vectors, placing a given separator between each.\n-    fn connect_vec(&self, sep: &T) -> ~[T] {\n-        let mut r = ~[];\n-        let mut first = true;\n-        for inner in self.iter() {\n-            if first { first = false; } else { r.push((*sep).clone()); }\n-            r.push_all((*inner).clone());\n-        }\n-        r\n-    }\n+    fn connect_vec(&self, sep: &T) -> ~[T];\n }\n \n-impl<'self,T:Clone> VectorVector<T> for &'self [&'self [T]] {\n-    /// Flattens a vector of slices of T into a single vector of T.\n+impl<'self, T: Clone, V: Vector<T>> VectorVector<T> for &'self [V] {\n     fn concat_vec(&self) -> ~[T] {\n-        self.flat_map(|&inner| inner.to_owned())\n+        let size = self.iter().fold(0u, |acc, v| acc + v.as_slice().len());\n+        let mut result = with_capacity(size);\n+        for v in self.iter() {\n+            result.push_all(v.as_slice())\n+        }\n+        result\n     }\n \n-    /// Concatenate a vector of slices, placing a given separator between each.\n     fn connect_vec(&self, sep: &T) -> ~[T] {\n-        let mut r = ~[];\n+        let size = self.iter().fold(0u, |acc, v| acc + v.as_slice().len());\n+        let mut result = with_capacity(size + self.len());\n         let mut first = true;\n-        for &inner in self.iter() {\n-            if first { first = false; } else { r.push((*sep).clone()); }\n-            r.push_all(inner);\n+        for v in self.iter() {\n+            if first { first = false } else { result.push(sep.clone()) }\n+            result.push_all(v.as_slice())\n         }\n-        r\n+        result\n     }\n }\n \n@@ -3109,24 +3086,21 @@ mod tests {\n \n     #[test]\n     fn test_concat() {\n-        assert_eq!(concat([~[1], ~[2,3]]), ~[1, 2, 3]);\n+        let v: [~[int], ..0] = [];\n+        assert_eq!(v.concat_vec(), ~[]);\n         assert_eq!([~[1], ~[2,3]].concat_vec(), ~[1, 2, 3]);\n \n-        assert_eq!(concat_slices([&[1], &[2,3]]), ~[1, 2, 3]);\n         assert_eq!([&[1], &[2,3]].concat_vec(), ~[1, 2, 3]);\n     }\n \n     #[test]\n     fn test_connect() {\n-        assert_eq!(connect([], &0), ~[]);\n-        assert_eq!(connect([~[1], ~[2, 3]], &0), ~[1, 0, 2, 3]);\n-        assert_eq!(connect([~[1], ~[2], ~[3]], &0), ~[1, 0, 2, 0, 3]);\n+        let v: [~[int], ..0] = [];\n+        assert_eq!(v.connect_vec(&0), ~[]);\n         assert_eq!([~[1], ~[2, 3]].connect_vec(&0), ~[1, 0, 2, 3]);\n         assert_eq!([~[1], ~[2], ~[3]].connect_vec(&0), ~[1, 0, 2, 0, 3]);\n \n-        assert_eq!(connect_slices([], &0), ~[]);\n-        assert_eq!(connect_slices([&[1], &[2, 3]], &0), ~[1, 0, 2, 3]);\n-        assert_eq!(connect_slices([&[1], &[2], &[3]], &0), ~[1, 0, 2, 0, 3]);\n+        assert_eq!(v.connect_vec(&0), ~[]);\n         assert_eq!([&[1], &[2, 3]].connect_vec(&0), ~[1, 0, 2, 3]);\n         assert_eq!([&[1], &[2], &[3]].connect_vec(&0), ~[1, 0, 2, 0, 3]);\n     }\n@@ -3758,7 +3732,9 @@ mod tests {\n #[cfg(test)]\n mod bench {\n     use extra::test::BenchHarness;\n+    use iter::range;\n     use vec;\n+    use vec::VectorVector;\n     use option::*;\n \n     #[bench]\n@@ -3798,4 +3774,20 @@ mod bench {\n             xs + ys;\n         }\n     }\n+\n+    #[bench]\n+    fn concat(bh: &mut BenchHarness) {\n+        let xss: &[~[uint]] = vec::from_fn(100, |i| range(0, i).collect());\n+        do bh.iter {\n+            xss.concat_vec();\n+        }\n+    }\n+\n+    #[bench]\n+    fn connect(bh: &mut BenchHarness) {\n+        let xss: &[~[uint]] = vec::from_fn(100, |i| range(0, i).collect());\n+        do bh.iter {\n+            xss.connect_vec(&0);\n+        }\n+    }\n }"}]}