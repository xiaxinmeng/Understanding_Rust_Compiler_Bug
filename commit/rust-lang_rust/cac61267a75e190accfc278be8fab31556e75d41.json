{"sha": "cac61267a75e190accfc278be8fab31556e75d41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhYzYxMjY3YTc1ZTE5MGFjY2ZjMjc4YmU4ZmFiMzE1NTZlNzVkNDE=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-06-07T13:25:08Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-06-19T17:38:37Z"}, "message": "Thread info about form of variable bindings, including spans of arg types, down into `mir::LocalDecls`.\n\nAs a drive-by: the ref_for_guards created by `fn declare_binding`\nshould not have been tagged as user_variables in the first\nplace. These secret internal locals are *pointers* to user variables,\nbut themselves are not such (IMO. For now at least.)", "tree": {"sha": "fab47d32d96603605126cd775dc82456d8838c35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fab47d32d96603605126cd775dc82456d8838c35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cac61267a75e190accfc278be8fab31556e75d41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cac61267a75e190accfc278be8fab31556e75d41", "html_url": "https://github.com/rust-lang/rust/commit/cac61267a75e190accfc278be8fab31556e75d41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cac61267a75e190accfc278be8fab31556e75d41/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ec1b626ba06b51fc8c23ee1cd7e2788163c2265", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ec1b626ba06b51fc8c23ee1cd7e2788163c2265", "html_url": "https://github.com/rust-lang/rust/commit/6ec1b626ba06b51fc8c23ee1cd7e2788163c2265"}], "stats": {"total": 112, "additions": 85, "deletions": 27}, "files": [{"sha": "c109020496cfac6d16a7c05a4f248421f9969ba6", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 52, "deletions": 9, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=cac61267a75e190accfc278be8fab31556e75d41", "patch": "@@ -228,7 +228,7 @@ impl<'tcx> Mir<'tcx> {\n     pub fn temps_iter<'a>(&'a self) -> impl Iterator<Item=Local> + 'a {\n         (self.arg_count+1..self.local_decls.len()).filter_map(move |index| {\n             let local = Local::new(index);\n-            if self.local_decls[local].is_user_variable {\n+            if self.local_decls[local].is_user_variable.is_some() {\n                 None\n             } else {\n                 Some(local)\n@@ -241,7 +241,7 @@ impl<'tcx> Mir<'tcx> {\n     pub fn vars_iter<'a>(&'a self) -> impl Iterator<Item=Local> + 'a {\n         (self.arg_count+1..self.local_decls.len()).filter_map(move |index| {\n             let local = Local::new(index);\n-            if self.local_decls[local].is_user_variable {\n+            if self.local_decls[local].is_user_variable.is_some() {\n                 Some(local)\n             } else {\n                 None\n@@ -255,7 +255,7 @@ impl<'tcx> Mir<'tcx> {\n         (1..self.local_decls.len()).filter_map(move |index| {\n             let local = Local::new(index);\n             let decl = &self.local_decls[local];\n-            if (decl.is_user_variable || index < self.arg_count + 1)\n+            if (decl.is_user_variable.is_some() || index < self.arg_count + 1)\n                && decl.mutability == Mutability::Mut\n             {\n                 Some(local)\n@@ -351,7 +351,7 @@ impl<'tcx> IndexMut<BasicBlock> for Mir<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug)]\n+#[derive(Copy, Clone, Debug)]\n pub enum ClearCrossCrate<T> {\n     Clear,\n     Set(T)\n@@ -382,6 +382,16 @@ pub enum Mutability {\n     Not,\n }\n \n+impl From<Mutability> for hir::Mutability {\n+    fn from(m: Mutability) -> Self {\n+        match m {\n+            Mutability::Mut => hir::MutMutable,\n+            Mutability::Not => hir::MutImmutable,\n+        }\n+    }\n+}\n+\n+\n #[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n pub enum BorrowKind {\n     /// Data must be immutable and is aliasable.\n@@ -463,6 +473,33 @@ pub enum LocalKind {\n     ReturnPointer,\n }\n \n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+pub struct VarBindingForm {\n+    /// Is variable bound via `x`, `mut x`, `ref x`, or `ref mut x`?\n+    pub binding_mode: ty::BindingMode,\n+    /// If an explicit type was provided for this variable binding,\n+    /// this holds the source Span of that type.\n+    ///\n+    /// NOTE: If you want to change this to a `HirId`, be wary that\n+    /// doing so breaks incremental compilation (as of this writing),\n+    /// while a `Span` does not cause our tests to fail.\n+    pub opt_ty_info: Option<Span>,\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+pub enum BindingForm {\n+    /// This is a binding for a non-`self` binding, or a `self` that has an explicit type.\n+    Var(VarBindingForm),\n+    /// Binding for a `self`/`&self`/`&mut self` binding where the type is implicit.\n+    ImplicitSelf,\n+}\n+\n+CloneTypeFoldableAndLiftImpls! { BindingForm, }\n+\n+impl_stable_hash_for!(struct self::VarBindingForm { binding_mode, opt_ty_info });\n+\n+impl_stable_hash_for!(enum self::BindingForm { Var(binding), ImplicitSelf, });\n+\n /// A MIR local.\n ///\n /// This can be a binding declared by the user, a temporary inserted by the compiler, a function\n@@ -474,8 +511,14 @@ pub struct LocalDecl<'tcx> {\n     /// Temporaries and the return place are always mutable.\n     pub mutability: Mutability,\n \n-    /// True if this corresponds to a user-declared local variable.\n-    pub is_user_variable: bool,\n+    /// Some(binding_mode) if this corresponds to a user-declared local variable.\n+    ///\n+    /// This is solely used for local diagnostics when generating\n+    /// warnings/errors when compiling the current crate, and\n+    /// therefore it need not be visible across crates. pnkfelix\n+    /// currently hypothesized we *need* to wrap this in a\n+    /// `ClearCrossCrate` as long as it carries as `HirId`.\n+    pub is_user_variable: Option<ClearCrossCrate<BindingForm>>,\n \n     /// True if this is an internal local\n     ///\n@@ -605,7 +648,7 @@ impl<'tcx> LocalDecl<'tcx> {\n             },\n             visibility_scope: OUTERMOST_SOURCE_SCOPE,\n             internal: false,\n-            is_user_variable: false\n+            is_user_variable: None,\n         }\n     }\n \n@@ -622,7 +665,7 @@ impl<'tcx> LocalDecl<'tcx> {\n             },\n             visibility_scope: OUTERMOST_SOURCE_SCOPE,\n             internal: true,\n-            is_user_variable: false\n+            is_user_variable: None,\n         }\n     }\n \n@@ -641,7 +684,7 @@ impl<'tcx> LocalDecl<'tcx> {\n             visibility_scope: OUTERMOST_SOURCE_SCOPE,\n             internal: false,\n             name: None,     // FIXME maybe we do want some name here?\n-            is_user_variable: false\n+            is_user_variable: None,\n         }\n     }\n }"}, {"sha": "971b3c3d14aebe3b88ed5ad042b34c5e4e92c23b", "filename": "src/librustc/ty/binding.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc%2Fty%2Fbinding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc%2Fty%2Fbinding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fbinding.rs?ref=cac61267a75e190accfc278be8fab31556e75d41", "patch": "@@ -18,6 +18,8 @@ pub enum BindingMode {\n     BindByValue(Mutability),\n }\n \n+CloneTypeFoldableAndLiftImpls! { BindingMode, }\n+\n impl BindingMode {\n     pub fn convert(ba: BindingAnnotation) -> BindingMode {\n         match ba {"}, {"sha": "a1c773637ec3fb64001dc615123a4aecc39bffc2", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=cac61267a75e190accfc278be8fab31556e75d41", "patch": "@@ -278,7 +278,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n     // to the set.\n     let temporary_used_locals: FxHashSet<Local> =\n         mbcx.used_mut.iter()\n-            .filter(|&local| !mbcx.mir.local_decls[*local].is_user_variable)\n+            .filter(|&local| !mbcx.mir.local_decls[*local].is_user_variable.is_some())\n             .cloned()\n             .collect();\n "}, {"sha": "0fd55f752b84f38869e97b2e9da370ce62111226", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=cac61267a75e190accfc278be8fab31556e75d41", "patch": "@@ -137,7 +137,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             }\n                         }\n \n-                        this.visit_bindings(&pattern, &mut |this, _, _, node, span, _| {\n+                        this.visit_bindings(&pattern, &mut |this, _, _, _, node, span, _| {\n                             this.storage_live_binding(block, node, span, OutsideGuard);\n                             this.schedule_drop_for_binding(node, span, OutsideGuard);\n                         })"}, {"sha": "94b387abe3c13e7d06ed13f103acc0ef1bda7c35", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=cac61267a75e190accfc278be8fab31556e75d41", "patch": "@@ -249,7 +249,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         source_info,\n                         visibility_scope: source_info.scope,\n                         internal: true,\n-                        is_user_variable: false\n+                        is_user_variable: None,\n                     });\n                     let ptr_temp = Place::Local(ptr_temp);\n                     let block = unpack!(this.into(&ptr_temp, block, ptr));"}, {"sha": "b6af0ed2a4a1c448ebdf65d964a2ecc9fd3b80a9", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=cac61267a75e190accfc278be8fab31556e75d41", "patch": "@@ -307,7 +307,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         assert!(!(visibility_scope.is_some() && lint_level.is_explicit()),\n                 \"can't have both a visibility and a lint scope at the same time\");\n         let mut scope = self.source_scope;\n-        self.visit_bindings(pattern, &mut |this, mutability, name, var, span, ty| {\n+        self.visit_bindings(pattern, &mut |this, mutability, name, mode, var, span, ty| {\n             if visibility_scope.is_none() {\n                 visibility_scope = Some(this.new_source_scope(scope_span,\n                                                            LintLevel::Inherited,\n@@ -325,7 +325,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 scope,\n             };\n             let visibility_scope = visibility_scope.unwrap();\n-            this.declare_binding(source_info, visibility_scope, mutability, name, var,\n+            this.declare_binding(source_info, visibility_scope, mutability, name, mode, var,\n                                  ty, has_guard);\n         });\n         visibility_scope\n@@ -359,11 +359,11 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn visit_bindings<F>(&mut self, pattern: &Pattern<'tcx>, f: &mut F)\n-        where F: FnMut(&mut Self, Mutability, Name, NodeId, Span, Ty<'tcx>)\n+        where F: FnMut(&mut Self, Mutability, Name, BindingMode, NodeId, Span, Ty<'tcx>)\n     {\n         match *pattern.kind {\n-            PatternKind::Binding { mutability, name, var, ty, ref subpattern, .. } => {\n-                f(self, mutability, name, var, pattern.span, ty);\n+            PatternKind::Binding { mutability, name, mode, var, ty, ref subpattern, .. } => {\n+                f(self, mutability, name, mode, var, pattern.span, ty);\n                 if let Some(subpattern) = subpattern.as_ref() {\n                     self.visit_bindings(subpattern, f);\n                 }\n@@ -1118,23 +1118,35 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                        visibility_scope: SourceScope,\n                        mutability: Mutability,\n                        name: Name,\n+                       mode: BindingMode,\n                        var_id: NodeId,\n                        var_ty: Ty<'tcx>,\n                        has_guard: ArmHasGuard)\n     {\n-        debug!(\"declare_binding(var_id={:?}, name={:?}, var_ty={:?}, visibility_scope={:?}, \\\n-                source_info={:?})\",\n-               var_id, name, var_ty, visibility_scope, source_info);\n+        debug!(\"declare_binding(var_id={:?}, name={:?}, mode={:?}, var_ty={:?}, \\\n+                visibility_scope={:?}, source_info={:?})\",\n+               var_id, name, mode, var_ty, visibility_scope, source_info);\n \n         let tcx = self.hir.tcx();\n+        let binding_mode = match mode {\n+            BindingMode::ByValue => ty::BindingMode::BindByValue(mutability.into()),\n+            BindingMode::ByRef { .. } => ty::BindingMode::BindByReference(mutability.into()),\n+        };\n         let local = LocalDecl::<'tcx> {\n             mutability,\n             ty: var_ty.clone(),\n             name: Some(name),\n             source_info,\n             visibility_scope,\n             internal: false,\n-            is_user_variable: true,\n+            is_user_variable: Some(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n+                binding_mode,\n+                // hypothetically, `visit_bindings` could try to unzip\n+                // an outermost hir::Ty as we descend, matching up\n+                // idents in pat; but complex w/ unclear UI payoff.\n+                // Instead, just abandon providing diagnostic info.\n+                opt_ty_info: None,\n+            }))),\n         };\n         let for_arm_body = self.local_decls.push(local.clone());\n         let locals = if has_guard.0 && tcx.all_pat_vars_are_implicit_refs_within_guards() {\n@@ -1145,8 +1157,9 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 name: Some(name),\n                 source_info,\n                 visibility_scope,\n+                // FIXME: should these secretly injected ref_for_guard's be marked as `internal`?\n                 internal: false,\n-                is_user_variable: true,\n+                is_user_variable: None,\n             });\n             LocalsForNode::Three { val_for_guard, ref_for_guard, for_arm_body }\n         } else {"}, {"sha": "35760efbabe6cf37d47ef4ce0102c9ce2e181b5a", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=cac61267a75e190accfc278be8fab31556e75d41", "patch": "@@ -668,7 +668,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 visibility_scope: source_info.scope,\n                 name,\n                 internal: false,\n-                is_user_variable: false,\n+                is_user_variable: None,\n             });\n         }\n "}, {"sha": "c703486560dcd204b3dd51000e853eedf4654365", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=cac61267a75e190accfc278be8fab31556e75d41", "patch": "@@ -144,7 +144,7 @@ fn temp_decl(mutability: Mutability, ty: Ty, span: Span) -> LocalDecl {\n         source_info,\n         visibility_scope: source_info.scope,\n         internal: false,\n-        is_user_variable: false\n+        is_user_variable: None,\n     }\n }\n "}, {"sha": "a6017fafcc8d4621cbe87204329c084cbc9b76e3", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cac61267a75e190accfc278be8fab31556e75d41/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=cac61267a75e190accfc278be8fab31556e75d41", "patch": "@@ -303,7 +303,7 @@ fn replace_result_variable<'tcx>(ret_ty: Ty<'tcx>,\n         source_info,\n         visibility_scope: source_info.scope,\n         internal: false,\n-        is_user_variable: false,\n+        is_user_variable: None,\n     };\n     let new_ret_local = Local::new(mir.local_decls.len());\n     mir.local_decls.push(new_ret);\n@@ -644,7 +644,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         source_info,\n         visibility_scope: source_info.scope,\n         internal: false,\n-        is_user_variable: false,\n+        is_user_variable: None,\n     };\n \n     make_generator_state_argument_indirect(tcx, def_id, &mut mir);\n@@ -660,7 +660,7 @@ fn create_generator_drop_shim<'a, 'tcx>(\n         source_info,\n         visibility_scope: source_info.scope,\n         internal: false,\n-        is_user_variable: false,\n+        is_user_variable: None,\n     };\n \n     no_landing_pads(tcx, &mut mir);"}]}