{"sha": "7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df", "node_id": "C_kwDOAAsO6NoAKDdhNDY2OTI4NWFjMjcwYTRhM2RlYjljZjEwYmM5ZDVlNDBlNmIyZGY", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-08T04:42:12Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-12-08T04:42:57Z"}, "message": "Remove `UnsafetyState`.\n\n`FnCtxt::ps` is the only occurrence. It gets updated during HIR\ntypechecking, but is never looked at.", "tree": {"sha": "e4e288f27a29a38426eb2ee8bb80efd252fe3fea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4e288f27a29a38426eb2ee8bb80efd252fe3fea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df", "html_url": "https://github.com/rust-lang/rust/commit/7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e491d2b24da8c11c902bb836d189590600f26caf", "url": "https://api.github.com/repos/rust-lang/rust/commits/e491d2b24da8c11c902bb836d189590600f26caf", "html_url": "https://github.com/rust-lang/rust/commit/e491d2b24da8c11c902bb836d189590600f26caf"}], "stats": {"total": 43, "additions": 2, "deletions": 41}, "files": [{"sha": "32f86b8042c11c39d36baa268dc8cb40d1c1a1c3", "filename": "compiler/rustc_hir_typeck/src/check.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcheck.rs?ref=7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df", "patch": "@@ -1,7 +1,7 @@\n use crate::coercion::CoerceMany;\n use crate::gather_locals::GatherLocalsVisitor;\n use crate::FnCtxt;\n-use crate::{GeneratorTypes, UnsafetyState};\n+use crate::GeneratorTypes;\n use rustc_hir as hir;\n use rustc_hir::def::DefKind;\n use rustc_hir::intravisit::Visitor;\n@@ -30,7 +30,6 @@ pub(super) fn check_fn<'a, 'tcx>(\n     can_be_generator: Option<hir::Movability>,\n ) -> Option<GeneratorTypes<'tcx>> {\n     let fn_id = fcx.tcx.hir().local_def_id_to_hir_id(fn_def_id);\n-    fcx.ps.set(UnsafetyState::function(fn_sig.unsafety, fn_id));\n \n     let tcx = fcx.tcx;\n     let hir = tcx.hir();"}, {"sha": "60fec05d36d6d57545a223bda2a4d1c7d73af4d5", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df", "patch": "@@ -1393,8 +1393,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         blk: &'tcx hir::Block<'tcx>,\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n-        let prev = self.ps.replace(self.ps.get().recurse(blk));\n-\n         // In some cases, blocks have just one exit, but other blocks\n         // can be targeted by multiple breaks. This can happen both\n         // with labeled blocks as well as when we desugar\n@@ -1558,7 +1556,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         self.write_ty(blk.hir_id, ty);\n \n-        self.ps.set(prev);\n         ty\n     }\n "}, {"sha": "30b59da7852d46f1e96543ef7566668e00834910", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fmod.rs?ref=7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df", "patch": "@@ -8,7 +8,7 @@ use rustc_errors::ErrorGuaranteed;\n pub use suggestions::*;\n \n use crate::coercion::DynamicCoerceMany;\n-use crate::{Diverges, EnclosingBreakables, Inherited, UnsafetyState};\n+use crate::{Diverges, EnclosingBreakables, Inherited};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir_analysis::astconv::AstConv;\n@@ -74,8 +74,6 @@ pub struct FnCtxt<'a, 'tcx> {\n \n     pub(super) resume_yield_tys: Option<(Ty<'tcx>, Ty<'tcx>)>,\n \n-    pub(super) ps: Cell<UnsafetyState>,\n-\n     /// Whether the last checked node generates a divergence (e.g.,\n     /// `return` will set this to `Always`). In general, when entering\n     /// an expression or other node in the tree, the initial value\n@@ -129,7 +127,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             ret_coercion: None,\n             ret_coercion_span: Cell::new(None),\n             resume_yield_tys: None,\n-            ps: Cell::new(UnsafetyState::function(hir::Unsafety::Normal, hir::CRATE_HIR_ID)),\n             diverges: Cell::new(Diverges::Maybe),\n             enclosing_breakables: RefCell::new(EnclosingBreakables {\n                 stack: Vec::new(),"}, {"sha": "5b2352cda34b3ee5fa9bcfa2f98d11acee4af2c4", "filename": "compiler/rustc_hir_typeck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Flib.rs?ref=7a4669285ac270a4a3deb9cf10bc9d5e40e6b2df", "patch": "@@ -89,38 +89,6 @@ pub struct LocalTy<'tcx> {\n     revealed_ty: Ty<'tcx>,\n }\n \n-#[derive(Copy, Clone)]\n-pub struct UnsafetyState {\n-    pub def: hir::HirId,\n-    pub unsafety: hir::Unsafety,\n-    from_fn: bool,\n-}\n-\n-impl UnsafetyState {\n-    pub fn function(unsafety: hir::Unsafety, def: hir::HirId) -> UnsafetyState {\n-        UnsafetyState { def, unsafety, from_fn: true }\n-    }\n-\n-    pub fn recurse(self, blk: &hir::Block<'_>) -> UnsafetyState {\n-        use hir::BlockCheckMode;\n-        match self.unsafety {\n-            // If this unsafe, then if the outer function was already marked as\n-            // unsafe we shouldn't attribute the unsafe'ness to the block. This\n-            // way the block can be warned about instead of ignoring this\n-            // extraneous block (functions are never warned about).\n-            hir::Unsafety::Unsafe if self.from_fn => self,\n-\n-            unsafety => {\n-                let (unsafety, def) = match blk.rules {\n-                    BlockCheckMode::UnsafeBlock(..) => (hir::Unsafety::Unsafe, blk.hir_id),\n-                    BlockCheckMode::DefaultBlock => (unsafety, self.def),\n-                };\n-                UnsafetyState { def, unsafety, from_fn: false }\n-            }\n-        }\n-    }\n-}\n-\n /// If this `DefId` is a \"primary tables entry\", returns\n /// `Some((body_id, body_ty, fn_sig))`. Otherwise, returns `None`.\n ///"}]}