{"sha": "033f1ec7975a920aac0c33da9a5e4af0f699b7a0", "node_id": "C_kwDOAAsO6NoAKDAzM2YxZWM3OTc1YTkyMGFhYzBjMzNkYTlhNWU0YWYwZjY5OWI3YTA", "commit": {"author": {"name": "chansuke", "email": "moonset20@gmail.com", "date": "2022-12-12T16:18:44Z"}, "committer": {"name": "chansuke", "email": "moonset20@gmail.com", "date": "2022-12-17T11:26:41Z"}, "message": "Add 2018/2021 edition tests for wildcard_imports", "tree": {"sha": "b6a4ce4241bad688ee6b5604e9cc9184fa832252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6a4ce4241bad688ee6b5604e9cc9184fa832252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/033f1ec7975a920aac0c33da9a5e4af0f699b7a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/033f1ec7975a920aac0c33da9a5e4af0f699b7a0", "html_url": "https://github.com/rust-lang/rust/commit/033f1ec7975a920aac0c33da9a5e4af0f699b7a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/comments", "author": {"login": "chansuke", "id": 501052, "node_id": "MDQ6VXNlcjUwMTA1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/501052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chansuke", "html_url": "https://github.com/chansuke", "followers_url": "https://api.github.com/users/chansuke/followers", "following_url": "https://api.github.com/users/chansuke/following{/other_user}", "gists_url": "https://api.github.com/users/chansuke/gists{/gist_id}", "starred_url": "https://api.github.com/users/chansuke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chansuke/subscriptions", "organizations_url": "https://api.github.com/users/chansuke/orgs", "repos_url": "https://api.github.com/users/chansuke/repos", "events_url": "https://api.github.com/users/chansuke/events{/privacy}", "received_events_url": "https://api.github.com/users/chansuke/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chansuke", "id": 501052, "node_id": "MDQ6VXNlcjUwMTA1Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/501052?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chansuke", "html_url": "https://github.com/chansuke", "followers_url": "https://api.github.com/users/chansuke/followers", "following_url": "https://api.github.com/users/chansuke/following{/other_user}", "gists_url": "https://api.github.com/users/chansuke/gists{/gist_id}", "starred_url": "https://api.github.com/users/chansuke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chansuke/subscriptions", "organizations_url": "https://api.github.com/users/chansuke/orgs", "repos_url": "https://api.github.com/users/chansuke/repos", "events_url": "https://api.github.com/users/chansuke/events{/privacy}", "received_events_url": "https://api.github.com/users/chansuke/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b67e6af9ef74ed854184b4e772b8c0141c26ad5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b67e6af9ef74ed854184b4e772b8c0141c26ad5", "html_url": "https://github.com/rust-lang/rust/commit/3b67e6af9ef74ed854184b4e772b8c0141c26ad5"}], "stats": {"total": 1161, "additions": 1138, "deletions": 23}, "files": [{"sha": "0baec6f0b641e7b7297dda743bbcba37c46e4207", "filename": "tests/ui/wildcard_imports.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.fixed?ref=033f1ec7975a920aac0c33da9a5e4af0f699b7a0", "patch": "@@ -5,7 +5,6 @@\n // the 2015 edition here is needed because edition 2018 changed the module system\n // (see https://doc.rust-lang.org/edition-guide/rust-2018/path-changes.html) which means the lint\n // no longer detects some of the cases starting with Rust 2018.\n-// FIXME: We should likely add another edition 2021 test case for this lint\n \n #![warn(clippy::wildcard_imports)]\n #![allow(unused, clippy::unnecessary_wraps, clippy::let_unit_value)]"}, {"sha": "db591d56ab4d17f24e7e16f95518c9201470cad3", "filename": "tests/ui/wildcard_imports.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.rs?ref=033f1ec7975a920aac0c33da9a5e4af0f699b7a0", "patch": "@@ -5,7 +5,6 @@\n // the 2015 edition here is needed because edition 2018 changed the module system\n // (see https://doc.rust-lang.org/edition-guide/rust-2018/path-changes.html) which means the lint\n // no longer detects some of the cases starting with Rust 2018.\n-// FIXME: We should likely add another edition 2021 test case for this lint\n \n #![warn(clippy::wildcard_imports)]\n #![allow(unused, clippy::unnecessary_wraps, clippy::let_unit_value)]"}, {"sha": "6b469cdfc444926355f72b614ca0787658a95aae", "filename": "tests/ui/wildcard_imports.stderr", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports.stderr?ref=033f1ec7975a920aac0c33da9a5e4af0f699b7a0", "patch": "@@ -1,129 +1,129 @@\n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:16:5\n+  --> $DIR/wildcard_imports.rs:15:5\n    |\n LL | use crate::fn_mod::*;\n    |     ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n    |\n    = note: `-D clippy::wildcard-imports` implied by `-D warnings`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:17:5\n+  --> $DIR/wildcard_imports.rs:16:5\n    |\n LL | use crate::mod_mod::*;\n    |     ^^^^^^^^^^^^^^^^^ help: try: `crate::mod_mod::inner_mod`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:18:5\n+  --> $DIR/wildcard_imports.rs:17:5\n    |\n LL | use crate::multi_fn_mod::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:20:5\n+  --> $DIR/wildcard_imports.rs:19:5\n    |\n LL | use crate::struct_mod::*;\n    |     ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::struct_mod::{A, inner_struct_mod}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:24:5\n+  --> $DIR/wildcard_imports.rs:23:5\n    |\n LL | use wildcard_imports_helper::inner::inner_for_self_import::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:25:5\n+  --> $DIR/wildcard_imports.rs:24:5\n    |\n LL | use wildcard_imports_helper::*;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:96:13\n+  --> $DIR/wildcard_imports.rs:95:13\n    |\n LL |         use crate::fn_mod::*;\n    |             ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:102:75\n+  --> $DIR/wildcard_imports.rs:101:75\n    |\n LL |         use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n    |                                                                           ^ help: try: `inner_extern_foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:103:13\n+  --> $DIR/wildcard_imports.rs:102:13\n    |\n LL |         use wildcard_imports_helper::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:114:20\n+  --> $DIR/wildcard_imports.rs:113:20\n    |\n LL |         use self::{inner::*, inner2::*};\n    |                    ^^^^^^^^ help: try: `inner::inner_foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:114:30\n+  --> $DIR/wildcard_imports.rs:113:30\n    |\n LL |         use self::{inner::*, inner2::*};\n    |                              ^^^^^^^^^ help: try: `inner2::inner_bar`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:121:13\n+  --> $DIR/wildcard_imports.rs:120:13\n    |\n LL |         use wildcard_imports_helper::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:150:9\n+  --> $DIR/wildcard_imports.rs:149:9\n    |\n LL |     use crate::in_fn_test::*;\n    |         ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::in_fn_test::{ExportedEnum, ExportedStruct, exported}`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:159:9\n+  --> $DIR/wildcard_imports.rs:158:9\n    |\n LL |     use crate:: in_fn_test::  * ;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate:: in_fn_test::exported`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:160:9\n+  --> $DIR/wildcard_imports.rs:159:9\n    |\n LL |       use crate:: fn_mod::\n    |  _________^\n LL | |         *;\n    | |_________^ help: try: `crate:: fn_mod::foo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:171:13\n+  --> $DIR/wildcard_imports.rs:170:13\n    |\n LL |         use super::*;\n    |             ^^^^^^^^ help: try: `super::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:206:17\n+  --> $DIR/wildcard_imports.rs:205:17\n    |\n LL |             use super::*;\n    |                 ^^^^^^^^ help: try: `super::insidefoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:214:13\n+  --> $DIR/wildcard_imports.rs:213:13\n    |\n LL |         use super_imports::*;\n    |             ^^^^^^^^^^^^^^^^ help: try: `super_imports::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:223:17\n+  --> $DIR/wildcard_imports.rs:222:17\n    |\n LL |             use super::super::*;\n    |                 ^^^^^^^^^^^^^^^ help: try: `super::super::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:232:13\n+  --> $DIR/wildcard_imports.rs:231:13\n    |\n LL |         use super::super::super_imports::*;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::super_imports::foofoo`\n \n error: usage of wildcard import\n-  --> $DIR/wildcard_imports.rs:240:13\n+  --> $DIR/wildcard_imports.rs:239:13\n    |\n LL |         use super::*;\n    |             ^^^^^^^^ help: try: `super::foofoo`"}, {"sha": "6d534a10edcd13a3514405a751367a68b8f1941a", "filename": "tests/ui/wildcard_imports_2021.edition2018.fixed", "status": "added", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports_2021.edition2018.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports_2021.edition2018.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports_2021.edition2018.fixed?ref=033f1ec7975a920aac0c33da9a5e4af0f699b7a0", "patch": "@@ -0,0 +1,240 @@\n+// revisions: edition2018 edition2021\n+//[edition2018] edition:2018\n+//[edition2021] edition:2021\n+// run-rustfix\n+// aux-build:wildcard_imports_helper.rs\n+\n+#![warn(clippy::wildcard_imports)]\n+#![allow(unused, clippy::unnecessary_wraps, clippy::let_unit_value)]\n+#![warn(unused_imports)]\n+\n+extern crate wildcard_imports_helper;\n+\n+use crate::fn_mod::foo;\n+use crate::mod_mod::inner_mod;\n+use crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod};\n+use crate::struct_mod::{A, inner_struct_mod};\n+\n+#[allow(unused_imports)]\n+use wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar;\n+use wildcard_imports_helper::prelude::v1::*;\n+use wildcard_imports_helper::{ExternA, extern_foo};\n+\n+use std::io::prelude::*;\n+\n+struct ReadFoo;\n+\n+impl Read for ReadFoo {\n+    fn read(&mut self, _buf: &mut [u8]) -> std::io::Result<usize> {\n+        Ok(0)\n+    }\n+}\n+\n+mod fn_mod {\n+    pub fn foo() {}\n+}\n+\n+mod mod_mod {\n+    pub mod inner_mod {\n+        pub fn foo() {}\n+    }\n+}\n+\n+mod multi_fn_mod {\n+    pub fn multi_foo() {}\n+    pub fn multi_bar() {}\n+    pub fn multi_baz() {}\n+    pub mod multi_inner_mod {\n+        pub fn foo() {}\n+    }\n+}\n+\n+mod struct_mod {\n+    pub struct A;\n+    pub struct B;\n+    pub mod inner_struct_mod {\n+        pub struct C;\n+    }\n+\n+    #[macro_export]\n+    macro_rules! double_struct_import_test {\n+        () => {\n+            let _ = A;\n+        };\n+    }\n+}\n+\n+fn main() {\n+    foo();\n+    multi_foo();\n+    multi_bar();\n+    multi_inner_mod::foo();\n+    inner_mod::foo();\n+    extern_foo();\n+    inner_extern_bar();\n+\n+    let _ = A;\n+    let _ = inner_struct_mod::C;\n+    let _ = ExternA;\n+    let _ = PreludeModAnywhere;\n+\n+    double_struct_import_test!();\n+    double_struct_import_test!();\n+}\n+\n+mod in_fn_test {\n+    pub use self::inner_exported::*;\n+    #[allow(unused_imports)]\n+    pub(crate) use self::inner_exported2::*;\n+\n+    fn test_intern() {\n+        use crate::fn_mod::foo;\n+\n+        foo();\n+    }\n+\n+    fn test_extern() {\n+        use wildcard_imports_helper::inner::inner_for_self_import::{self, inner_extern_foo};\n+        use wildcard_imports_helper::{ExternA, extern_foo};\n+\n+        inner_for_self_import::inner_extern_foo();\n+        inner_extern_foo();\n+\n+        extern_foo();\n+\n+        let _ = ExternA;\n+    }\n+\n+    fn test_inner_nested() {\n+        use self::{inner::inner_foo, inner2::inner_bar};\n+\n+        inner_foo();\n+        inner_bar();\n+    }\n+\n+    fn test_extern_reexported() {\n+        use wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported};\n+\n+        extern_exported();\n+        let _ = ExternExportedStruct;\n+        let _ = ExternExportedEnum::A;\n+    }\n+\n+    mod inner_exported {\n+        pub fn exported() {}\n+        pub struct ExportedStruct;\n+        pub enum ExportedEnum {\n+            A,\n+        }\n+    }\n+\n+    mod inner_exported2 {\n+        pub(crate) fn exported2() {}\n+    }\n+\n+    mod inner {\n+        pub fn inner_foo() {}\n+    }\n+\n+    mod inner2 {\n+        pub fn inner_bar() {}\n+    }\n+}\n+\n+fn test_reexported() {\n+    use crate::in_fn_test::{ExportedEnum, ExportedStruct, exported};\n+\n+    exported();\n+    let _ = ExportedStruct;\n+    let _ = ExportedEnum::A;\n+}\n+\n+#[rustfmt::skip]\n+fn test_weird_formatting() {\n+    use crate:: in_fn_test::exported;\n+    use crate:: fn_mod::foo;\n+\n+    exported();\n+    foo();\n+}\n+\n+mod super_imports {\n+    fn foofoo() {}\n+\n+    mod should_be_replaced {\n+        use super::foofoo;\n+\n+        fn with_super() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass {\n+        use super::*;\n+\n+        fn with_super() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass_inside_function {\n+        fn with_super_inside_function() {\n+            use super::*;\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass_further_inside {\n+        fn insidefoo() {}\n+        mod inner {\n+            use super::*;\n+            fn with_super() {\n+                let _ = insidefoo();\n+            }\n+        }\n+    }\n+\n+    mod should_be_replaced_further_inside {\n+        fn insidefoo() {}\n+        mod inner {\n+            use super::insidefoo;\n+            fn with_super() {\n+                let _ = insidefoo();\n+            }\n+        }\n+    }\n+\n+    mod use_explicit_should_be_replaced {\n+        use crate::super_imports::foofoo;\n+\n+        fn with_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod use_double_super_should_be_replaced {\n+        mod inner {\n+            use super::super::foofoo;\n+\n+            fn with_double_super() {\n+                let _ = foofoo();\n+            }\n+        }\n+    }\n+\n+    mod use_super_explicit_should_be_replaced {\n+        use super::super::super_imports::foofoo;\n+\n+        fn with_super_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod attestation_should_be_replaced {\n+        use super::foofoo;\n+\n+        fn with_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+}"}, {"sha": "acca9f651b47482368d1a775046258374b88441d", "filename": "tests/ui/wildcard_imports_2021.edition2018.stderr", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports_2021.edition2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports_2021.edition2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports_2021.edition2018.stderr?ref=033f1ec7975a920aac0c33da9a5e4af0f699b7a0", "patch": "@@ -0,0 +1,132 @@\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:13:5\n+   |\n+LL | use crate::fn_mod::*;\n+   |     ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n+   |\n+   = note: `-D clippy::wildcard-imports` implied by `-D warnings`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:14:5\n+   |\n+LL | use crate::mod_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^ help: try: `crate::mod_mod::inner_mod`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:15:5\n+   |\n+LL | use crate::multi_fn_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:16:5\n+   |\n+LL | use crate::struct_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::struct_mod::{A, inner_struct_mod}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:19:5\n+   |\n+LL | use wildcard_imports_helper::inner::inner_for_self_import::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:21:5\n+   |\n+LL | use wildcard_imports_helper::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:91:13\n+   |\n+LL |         use crate::fn_mod::*;\n+   |             ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:97:75\n+   |\n+LL |         use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n+   |                                                                           ^ help: try: `inner_extern_foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:98:13\n+   |\n+LL |         use wildcard_imports_helper::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:109:20\n+   |\n+LL |         use self::{inner::*, inner2::*};\n+   |                    ^^^^^^^^ help: try: `inner::inner_foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:109:30\n+   |\n+LL |         use self::{inner::*, inner2::*};\n+   |                              ^^^^^^^^^ help: try: `inner2::inner_bar`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:116:13\n+   |\n+LL |         use wildcard_imports_helper::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:145:9\n+   |\n+LL |     use crate::in_fn_test::*;\n+   |         ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::in_fn_test::{ExportedEnum, ExportedStruct, exported}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:154:9\n+   |\n+LL |     use crate:: in_fn_test::  * ;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate:: in_fn_test::exported`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:155:9\n+   |\n+LL |       use crate:: fn_mod::\n+   |  _________^\n+LL | |         *;\n+   | |_________^ help: try: `crate:: fn_mod::foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:166:13\n+   |\n+LL |         use super::*;\n+   |             ^^^^^^^^ help: try: `super::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:201:17\n+   |\n+LL |             use super::*;\n+   |                 ^^^^^^^^ help: try: `super::insidefoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:209:13\n+   |\n+LL |         use crate::super_imports::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::super_imports::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:218:17\n+   |\n+LL |             use super::super::*;\n+   |                 ^^^^^^^^^^^^^^^ help: try: `super::super::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:227:13\n+   |\n+LL |         use super::super::super_imports::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::super_imports::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:235:13\n+   |\n+LL |         use super::*;\n+   |             ^^^^^^^^ help: try: `super::foofoo`\n+\n+error: aborting due to 21 previous errors\n+"}, {"sha": "6d534a10edcd13a3514405a751367a68b8f1941a", "filename": "tests/ui/wildcard_imports_2021.edition2021.fixed", "status": "added", "additions": 240, "deletions": 0, "changes": 240, "blob_url": "https://github.com/rust-lang/rust/blob/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports_2021.edition2021.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports_2021.edition2021.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports_2021.edition2021.fixed?ref=033f1ec7975a920aac0c33da9a5e4af0f699b7a0", "patch": "@@ -0,0 +1,240 @@\n+// revisions: edition2018 edition2021\n+//[edition2018] edition:2018\n+//[edition2021] edition:2021\n+// run-rustfix\n+// aux-build:wildcard_imports_helper.rs\n+\n+#![warn(clippy::wildcard_imports)]\n+#![allow(unused, clippy::unnecessary_wraps, clippy::let_unit_value)]\n+#![warn(unused_imports)]\n+\n+extern crate wildcard_imports_helper;\n+\n+use crate::fn_mod::foo;\n+use crate::mod_mod::inner_mod;\n+use crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod};\n+use crate::struct_mod::{A, inner_struct_mod};\n+\n+#[allow(unused_imports)]\n+use wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar;\n+use wildcard_imports_helper::prelude::v1::*;\n+use wildcard_imports_helper::{ExternA, extern_foo};\n+\n+use std::io::prelude::*;\n+\n+struct ReadFoo;\n+\n+impl Read for ReadFoo {\n+    fn read(&mut self, _buf: &mut [u8]) -> std::io::Result<usize> {\n+        Ok(0)\n+    }\n+}\n+\n+mod fn_mod {\n+    pub fn foo() {}\n+}\n+\n+mod mod_mod {\n+    pub mod inner_mod {\n+        pub fn foo() {}\n+    }\n+}\n+\n+mod multi_fn_mod {\n+    pub fn multi_foo() {}\n+    pub fn multi_bar() {}\n+    pub fn multi_baz() {}\n+    pub mod multi_inner_mod {\n+        pub fn foo() {}\n+    }\n+}\n+\n+mod struct_mod {\n+    pub struct A;\n+    pub struct B;\n+    pub mod inner_struct_mod {\n+        pub struct C;\n+    }\n+\n+    #[macro_export]\n+    macro_rules! double_struct_import_test {\n+        () => {\n+            let _ = A;\n+        };\n+    }\n+}\n+\n+fn main() {\n+    foo();\n+    multi_foo();\n+    multi_bar();\n+    multi_inner_mod::foo();\n+    inner_mod::foo();\n+    extern_foo();\n+    inner_extern_bar();\n+\n+    let _ = A;\n+    let _ = inner_struct_mod::C;\n+    let _ = ExternA;\n+    let _ = PreludeModAnywhere;\n+\n+    double_struct_import_test!();\n+    double_struct_import_test!();\n+}\n+\n+mod in_fn_test {\n+    pub use self::inner_exported::*;\n+    #[allow(unused_imports)]\n+    pub(crate) use self::inner_exported2::*;\n+\n+    fn test_intern() {\n+        use crate::fn_mod::foo;\n+\n+        foo();\n+    }\n+\n+    fn test_extern() {\n+        use wildcard_imports_helper::inner::inner_for_self_import::{self, inner_extern_foo};\n+        use wildcard_imports_helper::{ExternA, extern_foo};\n+\n+        inner_for_self_import::inner_extern_foo();\n+        inner_extern_foo();\n+\n+        extern_foo();\n+\n+        let _ = ExternA;\n+    }\n+\n+    fn test_inner_nested() {\n+        use self::{inner::inner_foo, inner2::inner_bar};\n+\n+        inner_foo();\n+        inner_bar();\n+    }\n+\n+    fn test_extern_reexported() {\n+        use wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported};\n+\n+        extern_exported();\n+        let _ = ExternExportedStruct;\n+        let _ = ExternExportedEnum::A;\n+    }\n+\n+    mod inner_exported {\n+        pub fn exported() {}\n+        pub struct ExportedStruct;\n+        pub enum ExportedEnum {\n+            A,\n+        }\n+    }\n+\n+    mod inner_exported2 {\n+        pub(crate) fn exported2() {}\n+    }\n+\n+    mod inner {\n+        pub fn inner_foo() {}\n+    }\n+\n+    mod inner2 {\n+        pub fn inner_bar() {}\n+    }\n+}\n+\n+fn test_reexported() {\n+    use crate::in_fn_test::{ExportedEnum, ExportedStruct, exported};\n+\n+    exported();\n+    let _ = ExportedStruct;\n+    let _ = ExportedEnum::A;\n+}\n+\n+#[rustfmt::skip]\n+fn test_weird_formatting() {\n+    use crate:: in_fn_test::exported;\n+    use crate:: fn_mod::foo;\n+\n+    exported();\n+    foo();\n+}\n+\n+mod super_imports {\n+    fn foofoo() {}\n+\n+    mod should_be_replaced {\n+        use super::foofoo;\n+\n+        fn with_super() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass {\n+        use super::*;\n+\n+        fn with_super() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass_inside_function {\n+        fn with_super_inside_function() {\n+            use super::*;\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass_further_inside {\n+        fn insidefoo() {}\n+        mod inner {\n+            use super::*;\n+            fn with_super() {\n+                let _ = insidefoo();\n+            }\n+        }\n+    }\n+\n+    mod should_be_replaced_further_inside {\n+        fn insidefoo() {}\n+        mod inner {\n+            use super::insidefoo;\n+            fn with_super() {\n+                let _ = insidefoo();\n+            }\n+        }\n+    }\n+\n+    mod use_explicit_should_be_replaced {\n+        use crate::super_imports::foofoo;\n+\n+        fn with_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod use_double_super_should_be_replaced {\n+        mod inner {\n+            use super::super::foofoo;\n+\n+            fn with_double_super() {\n+                let _ = foofoo();\n+            }\n+        }\n+    }\n+\n+    mod use_super_explicit_should_be_replaced {\n+        use super::super::super_imports::foofoo;\n+\n+        fn with_super_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod attestation_should_be_replaced {\n+        use super::foofoo;\n+\n+        fn with_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+}"}, {"sha": "acca9f651b47482368d1a775046258374b88441d", "filename": "tests/ui/wildcard_imports_2021.edition2021.stderr", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports_2021.edition2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports_2021.edition2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports_2021.edition2021.stderr?ref=033f1ec7975a920aac0c33da9a5e4af0f699b7a0", "patch": "@@ -0,0 +1,132 @@\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:13:5\n+   |\n+LL | use crate::fn_mod::*;\n+   |     ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n+   |\n+   = note: `-D clippy::wildcard-imports` implied by `-D warnings`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:14:5\n+   |\n+LL | use crate::mod_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^ help: try: `crate::mod_mod::inner_mod`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:15:5\n+   |\n+LL | use crate::multi_fn_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:16:5\n+   |\n+LL | use crate::struct_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::struct_mod::{A, inner_struct_mod}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:19:5\n+   |\n+LL | use wildcard_imports_helper::inner::inner_for_self_import::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:21:5\n+   |\n+LL | use wildcard_imports_helper::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:91:13\n+   |\n+LL |         use crate::fn_mod::*;\n+   |             ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:97:75\n+   |\n+LL |         use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n+   |                                                                           ^ help: try: `inner_extern_foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:98:13\n+   |\n+LL |         use wildcard_imports_helper::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:109:20\n+   |\n+LL |         use self::{inner::*, inner2::*};\n+   |                    ^^^^^^^^ help: try: `inner::inner_foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:109:30\n+   |\n+LL |         use self::{inner::*, inner2::*};\n+   |                              ^^^^^^^^^ help: try: `inner2::inner_bar`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:116:13\n+   |\n+LL |         use wildcard_imports_helper::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:145:9\n+   |\n+LL |     use crate::in_fn_test::*;\n+   |         ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::in_fn_test::{ExportedEnum, ExportedStruct, exported}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:154:9\n+   |\n+LL |     use crate:: in_fn_test::  * ;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate:: in_fn_test::exported`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:155:9\n+   |\n+LL |       use crate:: fn_mod::\n+   |  _________^\n+LL | |         *;\n+   | |_________^ help: try: `crate:: fn_mod::foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:166:13\n+   |\n+LL |         use super::*;\n+   |             ^^^^^^^^ help: try: `super::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:201:17\n+   |\n+LL |             use super::*;\n+   |                 ^^^^^^^^ help: try: `super::insidefoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:209:13\n+   |\n+LL |         use crate::super_imports::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::super_imports::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:218:17\n+   |\n+LL |             use super::super::*;\n+   |                 ^^^^^^^^^^^^^^^ help: try: `super::super::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:227:13\n+   |\n+LL |         use super::super::super_imports::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::super_imports::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:235:13\n+   |\n+LL |         use super::*;\n+   |             ^^^^^^^^ help: try: `super::foofoo`\n+\n+error: aborting due to 21 previous errors\n+"}, {"sha": "b5ed58e68136ff55b73ac19dd3a29a5e42e41c76", "filename": "tests/ui/wildcard_imports_2021.rs", "status": "added", "additions": 241, "deletions": 0, "changes": 241, "blob_url": "https://github.com/rust-lang/rust/blob/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports_2021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports_2021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports_2021.rs?ref=033f1ec7975a920aac0c33da9a5e4af0f699b7a0", "patch": "@@ -0,0 +1,241 @@\n+// revisions: edition2018 edition2021\n+//[edition2018] edition:2018\n+//[edition2021] edition:2021\n+// run-rustfix\n+// aux-build:wildcard_imports_helper.rs\n+\n+#![warn(clippy::wildcard_imports)]\n+#![allow(unused, clippy::unnecessary_wraps, clippy::let_unit_value)]\n+#![warn(unused_imports)]\n+\n+extern crate wildcard_imports_helper;\n+\n+use crate::fn_mod::*;\n+use crate::mod_mod::*;\n+use crate::multi_fn_mod::*;\n+use crate::struct_mod::*;\n+\n+#[allow(unused_imports)]\n+use wildcard_imports_helper::inner::inner_for_self_import::*;\n+use wildcard_imports_helper::prelude::v1::*;\n+use wildcard_imports_helper::*;\n+\n+use std::io::prelude::*;\n+\n+struct ReadFoo;\n+\n+impl Read for ReadFoo {\n+    fn read(&mut self, _buf: &mut [u8]) -> std::io::Result<usize> {\n+        Ok(0)\n+    }\n+}\n+\n+mod fn_mod {\n+    pub fn foo() {}\n+}\n+\n+mod mod_mod {\n+    pub mod inner_mod {\n+        pub fn foo() {}\n+    }\n+}\n+\n+mod multi_fn_mod {\n+    pub fn multi_foo() {}\n+    pub fn multi_bar() {}\n+    pub fn multi_baz() {}\n+    pub mod multi_inner_mod {\n+        pub fn foo() {}\n+    }\n+}\n+\n+mod struct_mod {\n+    pub struct A;\n+    pub struct B;\n+    pub mod inner_struct_mod {\n+        pub struct C;\n+    }\n+\n+    #[macro_export]\n+    macro_rules! double_struct_import_test {\n+        () => {\n+            let _ = A;\n+        };\n+    }\n+}\n+\n+fn main() {\n+    foo();\n+    multi_foo();\n+    multi_bar();\n+    multi_inner_mod::foo();\n+    inner_mod::foo();\n+    extern_foo();\n+    inner_extern_bar();\n+\n+    let _ = A;\n+    let _ = inner_struct_mod::C;\n+    let _ = ExternA;\n+    let _ = PreludeModAnywhere;\n+\n+    double_struct_import_test!();\n+    double_struct_import_test!();\n+}\n+\n+mod in_fn_test {\n+    pub use self::inner_exported::*;\n+    #[allow(unused_imports)]\n+    pub(crate) use self::inner_exported2::*;\n+\n+    fn test_intern() {\n+        use crate::fn_mod::*;\n+\n+        foo();\n+    }\n+\n+    fn test_extern() {\n+        use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n+        use wildcard_imports_helper::*;\n+\n+        inner_for_self_import::inner_extern_foo();\n+        inner_extern_foo();\n+\n+        extern_foo();\n+\n+        let _ = ExternA;\n+    }\n+\n+    fn test_inner_nested() {\n+        use self::{inner::*, inner2::*};\n+\n+        inner_foo();\n+        inner_bar();\n+    }\n+\n+    fn test_extern_reexported() {\n+        use wildcard_imports_helper::*;\n+\n+        extern_exported();\n+        let _ = ExternExportedStruct;\n+        let _ = ExternExportedEnum::A;\n+    }\n+\n+    mod inner_exported {\n+        pub fn exported() {}\n+        pub struct ExportedStruct;\n+        pub enum ExportedEnum {\n+            A,\n+        }\n+    }\n+\n+    mod inner_exported2 {\n+        pub(crate) fn exported2() {}\n+    }\n+\n+    mod inner {\n+        pub fn inner_foo() {}\n+    }\n+\n+    mod inner2 {\n+        pub fn inner_bar() {}\n+    }\n+}\n+\n+fn test_reexported() {\n+    use crate::in_fn_test::*;\n+\n+    exported();\n+    let _ = ExportedStruct;\n+    let _ = ExportedEnum::A;\n+}\n+\n+#[rustfmt::skip]\n+fn test_weird_formatting() {\n+    use crate:: in_fn_test::  * ;\n+    use crate:: fn_mod::\n+        *;\n+\n+    exported();\n+    foo();\n+}\n+\n+mod super_imports {\n+    fn foofoo() {}\n+\n+    mod should_be_replaced {\n+        use super::*;\n+\n+        fn with_super() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass {\n+        use super::*;\n+\n+        fn with_super() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass_inside_function {\n+        fn with_super_inside_function() {\n+            use super::*;\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod test_should_pass_further_inside {\n+        fn insidefoo() {}\n+        mod inner {\n+            use super::*;\n+            fn with_super() {\n+                let _ = insidefoo();\n+            }\n+        }\n+    }\n+\n+    mod should_be_replaced_further_inside {\n+        fn insidefoo() {}\n+        mod inner {\n+            use super::*;\n+            fn with_super() {\n+                let _ = insidefoo();\n+            }\n+        }\n+    }\n+\n+    mod use_explicit_should_be_replaced {\n+        use crate::super_imports::*;\n+\n+        fn with_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod use_double_super_should_be_replaced {\n+        mod inner {\n+            use super::super::*;\n+\n+            fn with_double_super() {\n+                let _ = foofoo();\n+            }\n+        }\n+    }\n+\n+    mod use_super_explicit_should_be_replaced {\n+        use super::super::super_imports::*;\n+\n+        fn with_super_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+\n+    mod attestation_should_be_replaced {\n+        use super::*;\n+\n+        fn with_explicit() {\n+            let _ = foofoo();\n+        }\n+    }\n+}"}, {"sha": "92f6d31530fa8ac0aa2a973f3b1eda1e984f40d3", "filename": "tests/ui/wildcard_imports_2021.stderr", "status": "added", "additions": 132, "deletions": 0, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports_2021.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/033f1ec7975a920aac0c33da9a5e4af0f699b7a0/tests%2Fui%2Fwildcard_imports_2021.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fwildcard_imports_2021.stderr?ref=033f1ec7975a920aac0c33da9a5e4af0f699b7a0", "patch": "@@ -0,0 +1,132 @@\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:9:5\n+   |\n+LL | use crate::fn_mod::*;\n+   |     ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n+   |\n+   = note: `-D clippy::wildcard-imports` implied by `-D warnings`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:10:5\n+   |\n+LL | use crate::mod_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^ help: try: `crate::mod_mod::inner_mod`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:11:5\n+   |\n+LL | use crate::multi_fn_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::multi_fn_mod::{multi_bar, multi_foo, multi_inner_mod}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:12:5\n+   |\n+LL | use crate::struct_mod::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::struct_mod::{A, inner_struct_mod}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:15:5\n+   |\n+LL | use wildcard_imports_helper::inner::inner_for_self_import::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::inner::inner_for_self_import::inner_extern_bar`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:17:5\n+   |\n+LL | use wildcard_imports_helper::*;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:87:13\n+   |\n+LL |         use crate::fn_mod::*;\n+   |             ^^^^^^^^^^^^^^^^ help: try: `crate::fn_mod::foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:93:75\n+   |\n+LL |         use wildcard_imports_helper::inner::inner_for_self_import::{self, *};\n+   |                                                                           ^ help: try: `inner_extern_foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:94:13\n+   |\n+LL |         use wildcard_imports_helper::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternA, extern_foo}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:105:20\n+   |\n+LL |         use self::{inner::*, inner2::*};\n+   |                    ^^^^^^^^ help: try: `inner::inner_foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:105:30\n+   |\n+LL |         use self::{inner::*, inner2::*};\n+   |                              ^^^^^^^^^ help: try: `inner2::inner_bar`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:112:13\n+   |\n+LL |         use wildcard_imports_helper::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `wildcard_imports_helper::{ExternExportedEnum, ExternExportedStruct, extern_exported}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:141:9\n+   |\n+LL |     use crate::in_fn_test::*;\n+   |         ^^^^^^^^^^^^^^^^^^^^ help: try: `crate::in_fn_test::{ExportedEnum, ExportedStruct, exported}`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:150:9\n+   |\n+LL |     use crate:: in_fn_test::  * ;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate:: in_fn_test::exported`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:151:9\n+   |\n+LL |       use crate:: fn_mod::\n+   |  _________^\n+LL | |         *;\n+   | |_________^ help: try: `crate:: fn_mod::foo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:162:13\n+   |\n+LL |         use super::*;\n+   |             ^^^^^^^^ help: try: `super::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:197:17\n+   |\n+LL |             use super::*;\n+   |                 ^^^^^^^^ help: try: `super::insidefoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:205:13\n+   |\n+LL |         use crate::super_imports::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `crate::super_imports::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:214:17\n+   |\n+LL |             use super::super::*;\n+   |                 ^^^^^^^^^^^^^^^ help: try: `super::super::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:223:13\n+   |\n+LL |         use super::super::super_imports::*;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `super::super::super_imports::foofoo`\n+\n+error: usage of wildcard import\n+  --> $DIR/wildcard_imports_2021.rs:231:13\n+   |\n+LL |         use super::*;\n+   |             ^^^^^^^^ help: try: `super::foofoo`\n+\n+error: aborting due to 21 previous errors\n+"}]}