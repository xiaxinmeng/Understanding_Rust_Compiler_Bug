{"sha": "3436979b175496a3936f00e90748e2fad0343ae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MzY5NzliMTc1NDk2YTM5MzZmMDBlOTA3NDhlMmZhZDAzNDNhZTk=", "commit": {"author": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-14T20:56:03Z"}, "committer": {"name": "Rafael \u00c1vila de Esp\u00edndola", "email": "respindola@mozilla.com", "date": "2011-03-14T20:56:03Z"}, "message": "Split trans' collection in two passes. This allows us to handle tags\nthat are defined after use in a block.\n\nThis is really inefficient, but for now it lets us compile the included test.", "tree": {"sha": "644b108a195f87675199311905ff5799889caec5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/644b108a195f87675199311905ff5799889caec5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3436979b175496a3936f00e90748e2fad0343ae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3436979b175496a3936f00e90748e2fad0343ae9", "html_url": "https://github.com/rust-lang/rust/commit/3436979b175496a3936f00e90748e2fad0343ae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3436979b175496a3936f00e90748e2fad0343ae9/comments", "author": null, "committer": null, "parents": [{"sha": "fdc22ef1a1cef77dedb9c0429c746a81688a5979", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdc22ef1a1cef77dedb9c0429c746a81688a5979", "html_url": "https://github.com/rust-lang/rust/commit/fdc22ef1a1cef77dedb9c0429c746a81688a5979"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "de19a01acb882f507450e9a3c9677b0f0247d1c2", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 32, "deletions": 16, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3436979b175496a3936f00e90748e2fad0343ae9/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3436979b175496a3936f00e90748e2fad0343ae9/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=3436979b175496a3936f00e90748e2fad0343ae9", "patch": "@@ -5484,6 +5484,25 @@ fn collect_native_item(&@crate_ctxt cx, @ast.native_item i) -> @crate_ctxt {\n \n fn collect_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n \n+    alt (i.node) {\n+        case (ast.item_const(?name, _, _, ?cid, _)) {\n+            cx.items.insert(cid, i);\n+        }\n+\n+        case (ast.item_mod(?name, ?m, ?mid)) {\n+            cx.items.insert(mid, i);\n+        }\n+\n+        case (ast.item_tag(_, ?variants, ?tps, ?tag_id)) {\n+            cx.items.insert(tag_id, i);\n+        }\n+\n+        case (_) { /* fall through */ }\n+    }\n+    ret cx;\n+}\n+\n+fn collect_item_pass2(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n     alt (i.node) {\n         case (ast.item_fn(?name, ?f, ?tps, ?fid, ?ann)) {\n             cx.items.insert(fid, i);\n@@ -5500,18 +5519,6 @@ fn collect_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n             }\n         }\n \n-        case (ast.item_const(?name, _, _, ?cid, _)) {\n-            cx.items.insert(cid, i);\n-        }\n-\n-        case (ast.item_mod(?name, ?m, ?mid)) {\n-            cx.items.insert(mid, i);\n-        }\n-\n-        case (ast.item_tag(_, ?variants, ?tps, ?tag_id)) {\n-            cx.items.insert(tag_id, i);\n-        }\n-\n         case (_) { /* fall through */ }\n     }\n     ret cx;\n@@ -5523,11 +5530,20 @@ fn collect_items(@crate_ctxt cx, @ast.crate crate) {\n     let fold.ast_fold[@crate_ctxt] fld =\n         fold.new_identity_fold[@crate_ctxt]();\n \n-    fld = @rec( update_env_for_item = bind collect_item(_,_),\n-                update_env_for_native_item = bind collect_native_item(_,_)\n-                with *fld );\n+    // FIXME: if ty_tag had a pointer directly to the definition instead\n+    // of a def_id, we wouldn't need the second pass.\n \n-    fold.fold_crate[@crate_ctxt](cx, fld, crate);\n+    auto fld1 =\n+        @rec( update_env_for_item = bind collect_item(_,_),\n+              update_env_for_native_item = bind collect_native_item(_,_)\n+              with *fld );\n+\n+    fold.fold_crate[@crate_ctxt](cx, fld1, crate);\n+\n+    auto fld2 = @rec( update_env_for_item = bind collect_item_pass2(_,_)\n+                      with *fld );\n+\n+    fold.fold_crate[@crate_ctxt](cx, fld2, crate);\n }\n \n fn collect_tag_ctor(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {"}, {"sha": "3ee7b740dcabbf80af24136558cf01ad4bca425e", "filename": "src/test/run-pass/tag-in-block.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3436979b175496a3936f00e90748e2fad0343ae9/src%2Ftest%2Frun-pass%2Ftag-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3436979b175496a3936f00e90748e2fad0343ae9/src%2Ftest%2Frun-pass%2Ftag-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-in-block.rs?ref=3436979b175496a3936f00e90748e2fad0343ae9", "patch": "@@ -0,0 +1,13 @@\n+fn foo() {\n+  fn zed(bar z) {\n+  }\n+  tag bar {\n+    nil;\n+  }\n+  fn baz() {\n+    zed(nil);\n+  }\n+}\n+\n+fn main(vec[str] args) {\n+}"}]}