{"sha": "9a94ecde04306986dac1b7ca88b4b327b67ea499", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhOTRlY2RlMDQzMDY5ODZkYWMxYjdjYTg4YjRiMzI3YjY3ZWE0OTk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2019-07-13T19:52:57Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2019-09-24T18:11:50Z"}, "message": "improve and add tests", "tree": {"sha": "10135d2f21717552b9614ee4ca5337c05751f758", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10135d2f21717552b9614ee4ca5337c05751f758"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a94ecde04306986dac1b7ca88b4b327b67ea499", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a94ecde04306986dac1b7ca88b4b327b67ea499", "html_url": "https://github.com/rust-lang/rust/commit/9a94ecde04306986dac1b7ca88b4b327b67ea499", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a94ecde04306986dac1b7ca88b4b327b67ea499/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3", "html_url": "https://github.com/rust-lang/rust/commit/5d79e8c4c97388dd1201135b8d6cfadccfd3c8e3"}], "stats": {"total": 86, "additions": 85, "deletions": 1}, "files": [{"sha": "9d16015bdc129bd5e0a5c43ccb674ca1727a98e0", "filename": "src/test/ui/never-from-impl-is-reserved.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/9a94ecde04306986dac1b7ca88b4b327b67ea499/src%2Ftest%2Fui%2Fnever-from-impl-is-reserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a94ecde04306986dac1b7ca88b4b327b67ea499/src%2Ftest%2Fui%2Fnever-from-impl-is-reserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever-from-impl-is-reserved.rs?ref=9a94ecde04306986dac1b7ca88b4b327b67ea499", "previous_filename": "src/test/ui/never-impl-is-reserved.rs"}, {"sha": "7e9b21a542933facaf7e47eaf5fa635a2b47f112", "filename": "src/test/ui/never-from-impl-is-reserved.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a94ecde04306986dac1b7ca88b4b327b67ea499/src%2Ftest%2Fui%2Fnever-from-impl-is-reserved.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a94ecde04306986dac1b7ca88b4b327b67ea499/src%2Ftest%2Fui%2Fnever-from-impl-is-reserved.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnever-from-impl-is-reserved.stderr?ref=9a94ecde04306986dac1b7ca88b4b327b67ea499", "patch": "@@ -1,5 +1,5 @@\n error[E0119]: conflicting implementations of trait `MyTrait` for type `MyFoo`:\n-  --> $DIR/never-impl-is-reserved.rs:10:1\n+  --> $DIR/never-from-impl-is-reserved.rs:10:1\n    |\n LL | impl MyTrait for MyFoo {}\n    | ---------------------- first implementation here", "previous_filename": "src/test/ui/never-impl-is-reserved.stderr"}, {"sha": "1a5266f5583d6a6db6c9fc8a908c1a322bbcd275", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-coherence-conflict.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9a94ecde04306986dac1b7ca88b4b327b67ea499/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a94ecde04306986dac1b7ca88b4b327b67ea499/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.rs?ref=9a94ecde04306986dac1b7ca88b4b327b67ea499", "patch": "@@ -0,0 +1,16 @@\n+// compile-fail\n+\n+// check that reservation impls are accounted for in negative reasoning.\n+\n+#![feature(rustc_attrs)]\n+\n+trait MyTrait {}\n+#[rustc_reservation_impl]\n+impl MyTrait for () {}\n+\n+trait OtherTrait {}\n+impl OtherTrait for () {}\n+impl<T: MyTrait> OtherTrait for T {}\n+//~^ ERROR conflicting implementations\n+\n+fn main() {}"}, {"sha": "7b88d2b42db1b2b13c5a1763bb695a045a3c75f5", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-coherence-conflict.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9a94ecde04306986dac1b7ca88b4b327b67ea499/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a94ecde04306986dac1b7ca88b4b327b67ea499/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-coherence-conflict.stderr?ref=9a94ecde04306986dac1b7ca88b4b327b67ea499", "patch": "@@ -0,0 +1,11 @@\n+error[E0119]: conflicting implementations of trait `OtherTrait` for type `()`:\n+  --> $DIR/reservation-impl-coherence-conflict.rs:13:1\n+   |\n+LL | impl OtherTrait for () {}\n+   | ---------------------- first implementation here\n+LL | impl<T: MyTrait> OtherTrait for T {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0119`."}, {"sha": "f08338bdc1c91b665e6ca93c8ecc8bd4fc7f3bb5", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-no-use.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9a94ecde04306986dac1b7ca88b4b327b67ea499/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a94ecde04306986dac1b7ca88b4b327b67ea499/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.rs?ref=9a94ecde04306986dac1b7ca88b4b327b67ea499", "patch": "@@ -0,0 +1,14 @@\n+// compile-fail\n+\n+// check that reservation impls can't be used as normal impls in positive reasoning.\n+\n+#![feature(rustc_attrs)]\n+\n+trait MyTrait { fn foo(&self); }\n+#[rustc_reservation_impl]\n+impl MyTrait for () { fn foo(&self) {} }\n+\n+fn main() {\n+    <() as MyTrait>::foo(&());\n+    //~^ ERROR the trait bound `(): MyTrait` is not satisfied\n+}"}, {"sha": "8a86f53086dd530144aca85508e3ec49589c01d3", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-no-use.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9a94ecde04306986dac1b7ca88b4b327b67ea499/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9a94ecde04306986dac1b7ca88b4b327b67ea499/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-no-use.stderr?ref=9a94ecde04306986dac1b7ca88b4b327b67ea499", "patch": "@@ -0,0 +1,15 @@\n+error[E0277]: the trait bound `(): MyTrait` is not satisfied\n+  --> $DIR/reservation-impl-no-use.rs:12:5\n+   |\n+LL | trait MyTrait { fn foo(&self); }\n+   |                 -------------- required by `MyTrait::foo`\n+...\n+LL |     <() as MyTrait>::foo(&());\n+   |     ^^^^^^^^^^^^^^^^^^^^ the trait `MyTrait` is not implemented for `()`\n+   |\n+   = help: the following implementations were found:\n+             <() as MyTrait>\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "febd14b792297c7ef45ce5d4df1f8b6475618a0e", "filename": "src/test/ui/traits/reservation-impls/reservation-impl-ok.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9a94ecde04306986dac1b7ca88b4b327b67ea499/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a94ecde04306986dac1b7ca88b4b327b67ea499/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Freservation-impls%2Freservation-impl-ok.rs?ref=9a94ecde04306986dac1b7ca88b4b327b67ea499", "patch": "@@ -0,0 +1,28 @@\n+// run-pass\n+\n+// rpass test for reservation impls. Not 100% required because `From` uses them,\n+// but still.\n+\n+#![feature(rustc_attrs)]\n+\n+use std::mem;\n+\n+trait MyTrait<S> {\n+    fn foo(&self, s: S) -> usize;\n+}\n+\n+#[rustc_reservation_impl]\n+impl<T> MyTrait<u64> for T {\n+    fn foo(&self, _x: u64) -> usize { 0 }\n+}\n+\n+// reservation impls don't create coherence conflicts, even with\n+// non-chain overlap.\n+impl<S> MyTrait<S> for u32 {\n+    fn foo(&self, _x: S) -> usize { mem::size_of::<S>() }\n+}\n+\n+fn main() {\n+    // ...and the non-reservation impl gets picked.XS\n+    assert_eq!(0u32.foo(0u64), mem::size_of::<u64>());\n+}"}]}