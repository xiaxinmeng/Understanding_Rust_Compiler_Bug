{"sha": "974192cd98b3efca8e5cd293f641f561e7487b30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3NDE5MmNkOThiM2VmY2E4ZTVjZDI5M2Y2NDFmNTYxZTc0ODdiMzA=", "commit": {"author": {"name": "Cheng XU", "email": "git@xuc.me", "date": "2021-03-30T02:24:23Z"}, "committer": {"name": "Cheng XU", "email": "git@xuc.me", "date": "2021-03-30T02:24:23Z"}, "message": "Disallow octal format in Ipv4 string\n\nIn its original specification, leading zero in Ipv4 string is interpreted\nas octal literals. So a IP address 0127.0.0.1 actually means 87.0.0.1.\n\nThis confusion can lead to many security vulnerabilities. Therefore, in\n[IETF RFC 6943], it suggests to disallow octal/hexadecimal format in Ipv4\nstring all together.\n\nExisting implementation already disallows hexadecimal numbers. This commit\nmakes Parser reject octal numbers.\n\nFixes #83648.\n\n[IETF RFC 6943]: https://tools.ietf.org/html/rfc6943#section-3.1.1", "tree": {"sha": "24dcd22450f5d66a050914c2e3f37a2021efcc99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24dcd22450f5d66a050914c2e3f37a2021efcc99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/974192cd98b3efca8e5cd293f641f561e7487b30", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQQMYHRMWe9yVY/QcCqHlLXXo8Z/cAUCYGKL1wAKCRCHlLXXo8Z/\ncAyQAQCv7yy1b1AOxNQ8AqRJkioCYrkAqsXyDK+NCOyWxewDhAEA+sVXLf9eY3Ju\nvt4RUVbylpSh4Zazh5ccjjwObNuEpQA=\n=LO/H\n-----END PGP SIGNATURE-----", "payload": "tree 24dcd22450f5d66a050914c2e3f37a2021efcc99\nparent 3aedcf06b73fc36feeebca3d579e1d2a6c40acc5\nauthor Cheng XU <git@xuc.me> 1617071063 +0800\ncommitter Cheng XU <git@xuc.me> 1617071063 +0800\n\nDisallow octal format in Ipv4 string\n\nIn its original specification, leading zero in Ipv4 string is interpreted\nas octal literals. So a IP address 0127.0.0.1 actually means 87.0.0.1.\n\nThis confusion can lead to many security vulnerabilities. Therefore, in\n[IETF RFC 6943], it suggests to disallow octal/hexadecimal format in Ipv4\nstring all together.\n\nExisting implementation already disallows hexadecimal numbers. This commit\nmakes Parser reject octal numbers.\n\nFixes #83648.\n\n[IETF RFC 6943]: https://tools.ietf.org/html/rfc6943#section-3.1.1\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/974192cd98b3efca8e5cd293f641f561e7487b30", "html_url": "https://github.com/rust-lang/rust/commit/974192cd98b3efca8e5cd293f641f561e7487b30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/974192cd98b3efca8e5cd293f641f561e7487b30/comments", "author": {"login": "xu-cheng", "id": 3105373, "node_id": "MDQ6VXNlcjMxMDUzNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3105373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xu-cheng", "html_url": "https://github.com/xu-cheng", "followers_url": "https://api.github.com/users/xu-cheng/followers", "following_url": "https://api.github.com/users/xu-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/xu-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/xu-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xu-cheng/subscriptions", "organizations_url": "https://api.github.com/users/xu-cheng/orgs", "repos_url": "https://api.github.com/users/xu-cheng/repos", "events_url": "https://api.github.com/users/xu-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/xu-cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "xu-cheng", "id": 3105373, "node_id": "MDQ6VXNlcjMxMDUzNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/3105373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/xu-cheng", "html_url": "https://github.com/xu-cheng", "followers_url": "https://api.github.com/users/xu-cheng/followers", "following_url": "https://api.github.com/users/xu-cheng/following{/other_user}", "gists_url": "https://api.github.com/users/xu-cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/xu-cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/xu-cheng/subscriptions", "organizations_url": "https://api.github.com/users/xu-cheng/orgs", "repos_url": "https://api.github.com/users/xu-cheng/repos", "events_url": "https://api.github.com/users/xu-cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/xu-cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aedcf06b73fc36feeebca3d579e1d2a6c40acc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aedcf06b73fc36feeebca3d579e1d2a6c40acc5", "html_url": "https://github.com/rust-lang/rust/commit/3aedcf06b73fc36feeebca3d579e1d2a6c40acc5"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "7f8c33dac561ff11546e95f433ea512eecf00daa", "filename": "library/std/src/net/ip.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/974192cd98b3efca8e5cd293f641f561e7487b30/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974192cd98b3efca8e5cd293f641f561e7487b30/library%2Fstd%2Fsrc%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fip.rs?ref=974192cd98b3efca8e5cd293f641f561e7487b30", "patch": "@@ -67,7 +67,9 @@ pub enum IpAddr {\n ///\n /// `Ipv4Addr` provides a [`FromStr`] implementation. The four octets are in decimal\n /// notation, divided by `.` (this is called \"dot-decimal notation\").\n+/// Notably, octal numbers and hexadecimal numbers are not allowed per [IETF RFC 6943].\n ///\n+/// [IETF RFC 6943]: https://tools.ietf.org/html/rfc6943#section-3.1.1\n /// [`FromStr`]: crate::str::FromStr\n ///\n /// # Examples"}, {"sha": "88a8cb76befbf61b794cbf994efa6cbeefafa964", "filename": "library/std/src/net/parser.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/974192cd98b3efca8e5cd293f641f561e7487b30/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974192cd98b3efca8e5cd293f641f561e7487b30/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser.rs?ref=974192cd98b3efca8e5cd293f641f561e7487b30", "patch": "@@ -67,6 +67,11 @@ impl<'a> Parser<'a> {\n         if self.state.is_empty() { result } else { None }.ok_or(AddrParseError(()))\n     }\n \n+    /// Peek the next character from the input\n+    fn peek_char(&self) -> Option<char> {\n+        self.state.first().map(|&b| char::from(b))\n+    }\n+\n     /// Read the next character from the input\n     fn read_char(&mut self) -> Option<char> {\n         self.state.split_first().map(|(&b, tail)| {\n@@ -132,7 +137,14 @@ impl<'a> Parser<'a> {\n             let mut groups = [0; 4];\n \n             for (i, slot) in groups.iter_mut().enumerate() {\n-                *slot = p.read_separator('.', i, |p| p.read_number(10, None))?;\n+                *slot = p.read_separator('.', i, |p| {\n+                    // Disallow octal number in IP string.\n+                    // https://tools.ietf.org/html/rfc6943#section-3.1.1\n+                    match (p.peek_char(), p.read_number(10, None)) {\n+                        (Some('0'), Some(number)) if number != 0 => None,\n+                        (_, number) => number,\n+                    }\n+                })?;\n             }\n \n             Some(groups.into())"}, {"sha": "6d2d48ecad02f8775a23f17f3d8436a5b334d82e", "filename": "library/std/src/net/parser/tests.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/974192cd98b3efca8e5cd293f641f561e7487b30/library%2Fstd%2Fsrc%2Fnet%2Fparser%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/974192cd98b3efca8e5cd293f641f561e7487b30/library%2Fstd%2Fsrc%2Fnet%2Fparser%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fnet%2Fparser%2Ftests.rs?ref=974192cd98b3efca8e5cd293f641f561e7487b30", "patch": "@@ -8,11 +8,15 @@ const SCOPE_ID: u32 = 1337;\n const IPV4: Ipv4Addr = Ipv4Addr::new(192, 168, 0, 1);\n const IPV4_STR: &str = \"192.168.0.1\";\n const IPV4_STR_PORT: &str = \"192.168.0.1:8080\";\n+const IPV4_STR_WITH_OCTAL: &str = \"0127.0.0.1\";\n+const IPV4_STR_WITH_HEX: &str = \"0x10.0.0.1\";\n \n const IPV6: Ipv6Addr = Ipv6Addr::new(0x2001, 0xdb8, 0, 0, 0, 0, 0xc0a8, 0x1);\n const IPV6_STR_FULL: &str = \"2001:db8:0:0:0:0:c0a8:1\";\n const IPV6_STR_COMPRESS: &str = \"2001:db8::c0a8:1\";\n const IPV6_STR_V4: &str = \"2001:db8::192.168.0.1\";\n+const IPV6_STR_V4_WITH_OCTAL: &str = \"2001:db8::0127.0.0.1\";\n+const IPV6_STR_V4_WITH_HEX: &str = \"2001:db8::0x10.0.0.1\";\n const IPV6_STR_PORT: &str = \"[2001:db8::c0a8:1]:8080\";\n const IPV6_STR_PORT_SCOPE_ID: &str = \"[2001:db8::c0a8:1%1337]:8080\";\n \n@@ -22,6 +26,8 @@ fn parse_ipv4() {\n     assert_eq!(result, IPV4);\n \n     assert!(Ipv4Addr::from_str(IPV4_STR_PORT).is_err());\n+    assert!(Ipv4Addr::from_str(IPV4_STR_WITH_OCTAL).is_err());\n+    assert!(Ipv4Addr::from_str(IPV4_STR_WITH_HEX).is_err());\n     assert!(Ipv4Addr::from_str(IPV6_STR_FULL).is_err());\n     assert!(Ipv4Addr::from_str(IPV6_STR_COMPRESS).is_err());\n     assert!(Ipv4Addr::from_str(IPV6_STR_V4).is_err());\n@@ -39,6 +45,8 @@ fn parse_ipv6() {\n     let result: Ipv6Addr = IPV6_STR_V4.parse().unwrap();\n     assert_eq!(result, IPV6);\n \n+    assert!(Ipv6Addr::from_str(IPV6_STR_V4_WITH_OCTAL).is_err());\n+    assert!(Ipv6Addr::from_str(IPV6_STR_V4_WITH_HEX).is_err());\n     assert!(Ipv6Addr::from_str(IPV4_STR).is_err());\n     assert!(Ipv6Addr::from_str(IPV4_STR_PORT).is_err());\n     assert!(Ipv6Addr::from_str(IPV6_STR_PORT).is_err());"}]}