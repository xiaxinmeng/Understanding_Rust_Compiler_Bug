{"sha": "82173c8de4b1283b6b54bd0def25b9c432614841", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMTczYzhkZTRiMTI4M2I2YjU0YmQwZGVmMjViOWM0MzI2MTQ4NDE=", "commit": {"author": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-21T16:49:03Z"}, "committer": {"name": "Ville Penttinen", "email": "villem.penttinen@gmail.com", "date": "2019-02-21T16:49:03Z"}, "message": "Move `non_trivia_sibling` to `ra_syntax::algo`", "tree": {"sha": "fdf55d583a4bac9a8e66fbbe48aeed1096f55f1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdf55d583a4bac9a8e66fbbe48aeed1096f55f1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82173c8de4b1283b6b54bd0def25b9c432614841", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82173c8de4b1283b6b54bd0def25b9c432614841", "html_url": "https://github.com/rust-lang/rust/commit/82173c8de4b1283b6b54bd0def25b9c432614841", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82173c8de4b1283b6b54bd0def25b9c432614841/comments", "author": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vipentti", "id": 4726680, "node_id": "MDQ6VXNlcjQ3MjY2ODA=", "avatar_url": "https://avatars.githubusercontent.com/u/4726680?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vipentti", "html_url": "https://github.com/vipentti", "followers_url": "https://api.github.com/users/vipentti/followers", "following_url": "https://api.github.com/users/vipentti/following{/other_user}", "gists_url": "https://api.github.com/users/vipentti/gists{/gist_id}", "starred_url": "https://api.github.com/users/vipentti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vipentti/subscriptions", "organizations_url": "https://api.github.com/users/vipentti/orgs", "repos_url": "https://api.github.com/users/vipentti/repos", "events_url": "https://api.github.com/users/vipentti/events{/privacy}", "received_events_url": "https://api.github.com/users/vipentti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c22c64725a4a2ea13a30422a4f822fb1259e7b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c22c64725a4a2ea13a30422a4f822fb1259e7b5", "html_url": "https://github.com/rust-lang/rust/commit/3c22c64725a4a2ea13a30422a4f822fb1259e7b5"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "0d4a789fc884923498b0ac01f358ac1fb21681c9", "filename": "crates/ra_assists/src/flip_comma.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82173c8de4b1283b6b54bd0def25b9c432614841/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82173c8de4b1283b6b54bd0def25b9c432614841/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fflip_comma.rs?ref=82173c8de4b1283b6b54bd0def25b9c432614841", "patch": "@@ -2,9 +2,10 @@ use hir::db::HirDatabase;\n use ra_syntax::{\n     Direction,\n     SyntaxKind::COMMA,\n+    algo::non_trivia_sibling,\n };\n \n-use crate::{AssistCtx, Assist, non_trivia_sibling};\n+use crate::{AssistCtx, Assist};\n \n pub(crate) fn flip_comma(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let comma = ctx.leaf_at_offset().find(|leaf| leaf.kind() == COMMA)?;"}, {"sha": "e1e899edce6ca912f05668b2f3045e65778ebdec", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82173c8de4b1283b6b54bd0def25b9c432614841/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82173c8de4b1283b6b54bd0def25b9c432614841/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=82173c8de4b1283b6b54bd0def25b9c432614841", "patch": "@@ -10,7 +10,7 @@ mod assist_ctx;\n use itertools::Itertools;\n \n use ra_text_edit::TextEdit;\n-use ra_syntax::{TextRange, TextUnit, SyntaxNode, Direction};\n+use ra_syntax::{TextRange, TextUnit};\n use ra_db::FileRange;\n use hir::db::HirDatabase;\n \n@@ -104,10 +104,6 @@ fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assis\n     ]\n }\n \n-fn non_trivia_sibling(node: &SyntaxNode, direction: Direction) -> Option<&SyntaxNode> {\n-    node.siblings(direction).skip(1).find(|node| !node.kind().is_trivia())\n-}\n-\n #[cfg(test)]\n mod helpers {\n     use hir::mock::MockDatabase;"}, {"sha": "b5bcd62fb211ae44dc740803bb802b5b4ca69b98", "filename": "crates/ra_ide_api_light/src/join_lines.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82173c8de4b1283b6b54bd0def25b9c432614841/crates%2Fra_ide_api_light%2Fsrc%2Fjoin_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82173c8de4b1283b6b54bd0def25b9c432614841/crates%2Fra_ide_api_light%2Fsrc%2Fjoin_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api_light%2Fsrc%2Fjoin_lines.rs?ref=82173c8de4b1283b6b54bd0def25b9c432614841", "patch": "@@ -2,8 +2,9 @@ use itertools::Itertools;\n use ra_syntax::{\n     SourceFile, TextRange, TextUnit, AstNode, SyntaxNode,\n     SyntaxKind::{self, WHITESPACE, COMMA, R_CURLY, R_PAREN, R_BRACK},\n-    algo::find_covering_node,\n+    algo::{find_covering_node, non_trivia_sibling},\n     ast,\n+    Direction,\n };\n use ra_fmt::{\n     compute_ws, extract_trivial_expression\n@@ -121,13 +122,8 @@ fn remove_newline(\n }\n \n fn has_comma_after(node: &SyntaxNode) -> bool {\n-    let next = node.next_sibling();\n-    let nnext = node.next_sibling().and_then(|n| n.next_sibling());\n-\n-    match (next, nnext) {\n-        // Whitespace followed by a comma is fine\n-        (Some(ws), Some(comma)) if ws.kind() == WHITESPACE && comma.kind() == COMMA => true,\n-        (Some(n), _) => n.kind() == COMMA,\n+    match non_trivia_sibling(node, Direction::Next) {\n+        Some(n) => n.kind() == COMMA,\n         _ => false,\n     }\n }"}, {"sha": "e2b4f0388182144f19f5604bc34c730355e88596", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/82173c8de4b1283b6b54bd0def25b9c432614841/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82173c8de4b1283b6b54bd0def25b9c432614841/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=82173c8de4b1283b6b54bd0def25b9c432614841", "patch": "@@ -2,7 +2,7 @@ pub mod visit;\n \n use rowan::TransparentNewType;\n \n-use crate::{SyntaxNode, TextRange, TextUnit, AstNode};\n+use crate::{SyntaxNode, TextRange, TextUnit, AstNode, Direction};\n \n pub use rowan::LeafAtOffset;\n \n@@ -29,6 +29,11 @@ pub fn find_node_at_offset<N: AstNode>(syntax: &SyntaxNode, offset: TextUnit) ->\n     find_leaf_at_offset(syntax, offset).find_map(|leaf| leaf.ancestors().find_map(N::cast))\n }\n \n+/// Finds the first sibling in the given direction which is not `trivia`\n+pub fn non_trivia_sibling(node: &SyntaxNode, direction: Direction) -> Option<&SyntaxNode> {\n+    node.siblings(direction).skip(1).find(|node| !node.kind().is_trivia())\n+}\n+\n pub fn find_covering_node(root: &SyntaxNode, range: TextRange) -> &SyntaxNode {\n     SyntaxNode::from_repr(root.0.covering_node(range))\n }"}]}