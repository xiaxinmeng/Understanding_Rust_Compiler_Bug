{"sha": "46f9e878f68e6ece9e8dad54c67e97e5dd5838e1", "node_id": "C_kwDOAAsO6NoAKDQ2ZjllODc4ZjY4ZTZlY2U5ZThkYWQ1NGM2N2U5N2U1ZGQ1ODM4ZTE", "commit": {"author": {"name": "Nicholas Bishop", "email": "nicholasbishop@google.com", "date": "2022-12-16T20:02:22Z"}, "committer": {"name": "Nicholas Bishop", "email": "nbishop@nbishop.net", "date": "2023-01-12T01:42:13Z"}, "message": "Stabilize `abi_efiapi` feature\n\nTracking issue: https://github.com/rust-lang/rust/issues/65815", "tree": {"sha": "f6faefe37de2a628430421329cc1125d38fb6d91", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6faefe37de2a628430421329cc1125d38fb6d91"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1", "html_url": "https://github.com/rust-lang/rust/commit/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/comments", "author": {"login": "nicholasbishop", "id": 1023208, "node_id": "MDQ6VXNlcjEwMjMyMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1023208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicholasbishop", "html_url": "https://github.com/nicholasbishop", "followers_url": "https://api.github.com/users/nicholasbishop/followers", "following_url": "https://api.github.com/users/nicholasbishop/following{/other_user}", "gists_url": "https://api.github.com/users/nicholasbishop/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicholasbishop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicholasbishop/subscriptions", "organizations_url": "https://api.github.com/users/nicholasbishop/orgs", "repos_url": "https://api.github.com/users/nicholasbishop/repos", "events_url": "https://api.github.com/users/nicholasbishop/events{/privacy}", "received_events_url": "https://api.github.com/users/nicholasbishop/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nicholasbishop", "id": 1023208, "node_id": "MDQ6VXNlcjEwMjMyMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/1023208?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicholasbishop", "html_url": "https://github.com/nicholasbishop", "followers_url": "https://api.github.com/users/nicholasbishop/followers", "following_url": "https://api.github.com/users/nicholasbishop/following{/other_user}", "gists_url": "https://api.github.com/users/nicholasbishop/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicholasbishop/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicholasbishop/subscriptions", "organizations_url": "https://api.github.com/users/nicholasbishop/orgs", "repos_url": "https://api.github.com/users/nicholasbishop/repos", "events_url": "https://api.github.com/users/nicholasbishop/events{/privacy}", "received_events_url": "https://api.github.com/users/nicholasbishop/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e4f90061cc4bc566f99ab21b1f101182b10cf0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e4f90061cc4bc566f99ab21b1f101182b10cf0c", "html_url": "https://github.com/rust-lang/rust/commit/1e4f90061cc4bc566f99ab21b1f101182b10cf0c"}], "stats": {"total": 151, "additions": 11, "deletions": 140}, "files": [{"sha": "3f6e81a7ce1e6f441607da3a33de30318c0c8582", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=46f9e878f68e6ece9e8dad54c67e97e5dd5838e1", "patch": "@@ -48,6 +48,8 @@ declare_features! (\n \n     /// Allows `#[target_feature(...)]` on aarch64 platforms\n     (accepted, aarch64_target_feature, \"1.61.0\", Some(44839), None),\n+    /// Allows using the `efiapi` ABI.\n+    (accepted, abi_efiapi, \"CURRENT_RUSTC_VERSION\", Some(65815), None),\n     /// Allows the sysV64 ABI to be specified on all platforms\n     /// instead of just the platforms on which it is the C ABI.\n     (accepted, abi_sysv64, \"1.24.0\", Some(36167), None),"}, {"sha": "2a79bd28d80ef726d095d6a4ee8290daa6d91da7", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=46f9e878f68e6ece9e8dad54c67e97e5dd5838e1", "patch": "@@ -282,8 +282,6 @@ declare_features! (\n     (active, abi_avr_interrupt, \"1.45.0\", Some(69664), None),\n     /// Allows `extern \"C-cmse-nonsecure-call\" fn()`.\n     (active, abi_c_cmse_nonsecure_call, \"1.51.0\", Some(81391), None),\n-    /// Allows using the `efiapi` ABI.\n-    (active, abi_efiapi, \"1.40.0\", Some(65815), None),\n     /// Allows `extern \"msp430-interrupt\" fn()`.\n     (active, abi_msp430_interrupt, \"1.16.0\", Some(38487), None),\n     /// Allows `extern \"ptx-*\" fn()`."}, {"sha": "d4f7ed31b895c8b8f05b7e6ba52577bb1bf51380", "filename": "compiler/rustc_target/src/spec/abi.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fabi.rs?ref=46f9e878f68e6ece9e8dad54c67e97e5dd5838e1", "patch": "@@ -149,7 +149,7 @@ pub fn is_stable(name: &str) -> Result<(), AbiDisabled> {\n     match name {\n         // Stable\n         \"Rust\" | \"C\" | \"cdecl\" | \"stdcall\" | \"fastcall\" | \"aapcs\" | \"win64\" | \"sysv64\"\n-        | \"system\" => Ok(()),\n+        | \"system\" | \"efiapi\" => Ok(()),\n         \"rust-intrinsic\" => Err(AbiDisabled::Unstable {\n             feature: sym::intrinsics,\n             explain: \"intrinsics are subject to change\",\n@@ -198,10 +198,6 @@ pub fn is_stable(name: &str) -> Result<(), AbiDisabled> {\n             feature: sym::abi_avr_interrupt,\n             explain: \"avr-interrupt and avr-non-blocking-interrupt ABIs are experimental and subject to change\",\n         }),\n-        \"efiapi\" => Err(AbiDisabled::Unstable {\n-            feature: sym::abi_efiapi,\n-            explain: \"efiapi ABI is experimental and subject to change\",\n-        }),\n         \"C-cmse-nonsecure-call\" => Err(AbiDisabled::Unstable {\n             feature: sym::abi_c_cmse_nonsecure_call,\n             explain: \"C-cmse-nonsecure-call ABI is experimental and subject to change\","}, {"sha": "b492da88474ee297d63fa6fbafc08fbd9c1f8ae5", "filename": "src/doc/unstable-book/src/language-features/abi-efiapi.md", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1e4f90061cc4bc566f99ab21b1f101182b10cf0c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-efiapi.md", "raw_url": "https://github.com/rust-lang/rust/raw/1e4f90061cc4bc566f99ab21b1f101182b10cf0c/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-efiapi.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fabi-efiapi.md?ref=1e4f90061cc4bc566f99ab21b1f101182b10cf0c", "patch": "@@ -1,23 +0,0 @@\n-# `abi_efiapi`\n-\n-The tracking issue for this feature is: [#65815]\n-\n-[#65815]: https://github.com/rust-lang/rust/issues/65815\n-\n-------------------------\n-\n-The `efiapi` calling convention can be used for defining a function with\n-an ABI compatible with the UEFI Interfaces as defined in the [UEFI\n-Specification].\n-\n-Example:\n-\n-```rust,ignore (not-all-targets-support-uefi)\n-#![feature(abi_efiapi)]\n-\n-extern \"efiapi\" { fn f1(); }\n-\n-extern \"efiapi\" fn f2() { todo!() }\n-```\n-\n-[UEFI Specification]: https://uefi.org/specs/UEFI/2.10/"}, {"sha": "9502ebf59af72779b8597b55c9e964642c28211e", "filename": "tests/codegen/abi-efiapi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/tests%2Fcodegen%2Fabi-efiapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/tests%2Fcodegen%2Fabi-efiapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fabi-efiapi.rs?ref=46f9e878f68e6ece9e8dad54c67e97e5dd5838e1", "patch": "@@ -14,7 +14,7 @@\n // compile-flags: -C no-prepopulate-passes\n \n #![crate_type = \"lib\"]\n-#![feature(no_core, lang_items, abi_efiapi)]\n+#![feature(no_core, lang_items)]\n #![no_core]\n \n #[lang=\"sized\"]"}, {"sha": "fce6210b2f436b281506da33122b0cae032a4248", "filename": "tests/ui/c-variadic/feature-gate-extended_varargs_abi_support.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/tests%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/tests%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.rs?ref=46f9e878f68e6ece9e8dad54c67e97e5dd5838e1", "patch": "@@ -1,5 +1,3 @@\n-#![feature(abi_efiapi)]\n-\n fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n     //~^ ERROR: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n     //~^^ ERROR: using calling conventions other than `C` or `cdecl` for varargs functions is unstable"}, {"sha": "5b97b396fb1204917b7a649b824438d60b3521d1", "filename": "tests/ui/c-variadic/feature-gate-extended_varargs_abi_support.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/tests%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/tests%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fc-variadic%2Ffeature-gate-extended_varargs_abi_support.stderr?ref=46f9e878f68e6ece9e8dad54c67e97e5dd5838e1", "patch": "@@ -1,5 +1,5 @@\n error[E0658]: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n-  --> $DIR/feature-gate-extended_varargs_abi_support.rs:3:14\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:1:14\n    |\n LL | fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -8,13 +8,13 @@ LL | fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n    = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable\n \n error[E0045]: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n-  --> $DIR/feature-gate-extended_varargs_abi_support.rs:3:14\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:1:14\n    |\n LL | fn efiapi(f: extern \"efiapi\" fn(usize, ...)) {\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n \n error[E0658]: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n-  --> $DIR/feature-gate-extended_varargs_abi_support.rs:8:12\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:6:12\n    |\n LL | fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -23,13 +23,13 @@ LL | fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n    = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable\n \n error[E0045]: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n-  --> $DIR/feature-gate-extended_varargs_abi_support.rs:8:12\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:6:12\n    |\n LL | fn sysv(f: extern \"sysv64\" fn(usize, ...)) {\n    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention\n \n error[E0658]: using calling conventions other than `C` or `cdecl` for varargs functions is unstable\n-  --> $DIR/feature-gate-extended_varargs_abi_support.rs:13:11\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:11:11\n    |\n LL | fn win(f: extern \"win64\" fn(usize, ...)) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -38,7 +38,7 @@ LL | fn win(f: extern \"win64\" fn(usize, ...)) {\n    = help: add `#![feature(extended_varargs_abi_support)]` to the crate attributes to enable\n \n error[E0045]: C-variadic function must have a compatible calling convention, like `C` or `cdecl`\n-  --> $DIR/feature-gate-extended_varargs_abi_support.rs:13:11\n+  --> $DIR/feature-gate-extended_varargs_abi_support.rs:11:11\n    |\n LL | fn win(f: extern \"win64\" fn(usize, ...)) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention"}, {"sha": "c34b7e55f6ae1bdf670817dfe64c53fe191f3296", "filename": "tests/ui/c-variadic/variadic-ffi-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-2.rs?ref=46f9e878f68e6ece9e8dad54c67e97e5dd5838e1", "patch": "@@ -1,6 +1,5 @@\n // ignore-arm stdcall isn't supported\n #![feature(extended_varargs_abi_support)]\n-#![feature(abi_efiapi)]\n \n fn baz(f: extern \"stdcall\" fn(usize, ...)) {\n     //~^ ERROR: C-variadic function must have a compatible calling convention,"}, {"sha": "e21001ecaf8b34de2108481e8d844f07f065e904", "filename": "tests/ui/c-variadic/variadic-ffi-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/46f9e878f68e6ece9e8dad54c67e97e5dd5838e1/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fc-variadic%2Fvariadic-ffi-2.stderr?ref=46f9e878f68e6ece9e8dad54c67e97e5dd5838e1", "patch": "@@ -1,5 +1,5 @@\n error[E0045]: C-variadic function must have a compatible calling convention, like `C`, `cdecl`, `win64`, `sysv64` or `efiapi`\n-  --> $DIR/variadic-ffi-2.rs:5:11\n+  --> $DIR/variadic-ffi-2.rs:4:11\n    |\n LL | fn baz(f: extern \"stdcall\" fn(usize, ...)) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ C-variadic function must have a compatible calling convention"}, {"sha": "0c0d736acd0484a34b2ffac4893254fdb0cccf99", "filename": "tests/ui/feature-gates/feature-gate-abi-efiapi.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1e4f90061cc4bc566f99ab21b1f101182b10cf0c/tests%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e4f90061cc4bc566f99ab21b1f101182b10cf0c/tests%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.rs?ref=1e4f90061cc4bc566f99ab21b1f101182b10cf0c", "patch": "@@ -1,33 +0,0 @@\n-// needs-llvm-components: x86\n-// compile-flags: --target=x86_64-unknown-linux-gnu --crate-type=rlib\n-#![no_core]\n-#![feature(no_core, lang_items)]\n-#[lang=\"sized\"]\n-trait Sized { }\n-\n-// Functions\n-extern \"efiapi\" fn f1() {} //~ ERROR efiapi ABI is experimental\n-\n-// Methods in trait defintion\n-trait Tr {\n-    extern \"efiapi\" fn f2(); //~ ERROR efiapi ABI is experimental\n-    extern \"efiapi\" fn f3() {} //~ ERROR efiapi ABI is experimental\n-}\n-\n-struct S;\n-\n-// Methods in trait impl\n-impl Tr for S {\n-    extern \"efiapi\" fn f2() {} //~ ERROR efiapi ABI is experimental\n-}\n-\n-// Methods in inherent impl\n-impl S {\n-    extern \"efiapi\" fn f4() {} //~ ERROR efiapi ABI is experimental\n-}\n-\n-// Function pointer types\n-type A = extern \"efiapi\" fn(); //~ ERROR efiapi ABI is experimental\n-\n-// Foreign modules\n-extern \"efiapi\" {} //~ ERROR efiapi ABI is experimental"}, {"sha": "5b01dcc6d85952aeaa6dcffcf6206921a1d7bac7", "filename": "tests/ui/feature-gates/feature-gate-abi-efiapi.stderr", "status": "removed", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/1e4f90061cc4bc566f99ab21b1f101182b10cf0c/tests%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1e4f90061cc4bc566f99ab21b1f101182b10cf0c/tests%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-abi-efiapi.stderr?ref=1e4f90061cc4bc566f99ab21b1f101182b10cf0c", "patch": "@@ -1,66 +0,0 @@\n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-efiapi.rs:9:8\n-   |\n-LL | extern \"efiapi\" fn f1() {}\n-   |        ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-efiapi.rs:13:12\n-   |\n-LL |     extern \"efiapi\" fn f2();\n-   |            ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-efiapi.rs:14:12\n-   |\n-LL |     extern \"efiapi\" fn f3() {}\n-   |            ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-efiapi.rs:21:12\n-   |\n-LL |     extern \"efiapi\" fn f2() {}\n-   |            ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-efiapi.rs:26:12\n-   |\n-LL |     extern \"efiapi\" fn f4() {}\n-   |            ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-efiapi.rs:30:17\n-   |\n-LL | type A = extern \"efiapi\" fn();\n-   |                 ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n-error[E0658]: efiapi ABI is experimental and subject to change\n-  --> $DIR/feature-gate-abi-efiapi.rs:33:8\n-   |\n-LL | extern \"efiapi\" {}\n-   |        ^^^^^^^^\n-   |\n-   = note: see issue #65815 <https://github.com/rust-lang/rust/issues/65815> for more information\n-   = help: add `#![feature(abi_efiapi)]` to the crate attributes to enable\n-\n-error: aborting due to 7 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}]}