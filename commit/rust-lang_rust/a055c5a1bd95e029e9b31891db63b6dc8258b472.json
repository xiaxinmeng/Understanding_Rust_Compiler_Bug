{"sha": "a055c5a1bd95e029e9b31891db63b6dc8258b472", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNTVjNWExYmQ5NWUwMjllOWIzMTg5MWRiNjNiNmRjODI1OGI0NzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-13T13:36:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-09-13T13:36:31Z"}, "message": "Auto merge of #76623 - slightlyoutofphase:master, r=jyn514\n\nUse `is_unstable_const_fn` instead of `is_min_const_fn` in rustdoc where appropriate\n\nThis closes #76501. Specifically, it allows for nightly users with the `#![feature(const_fn)]` flag enabled to still have their `const fn` declarations documented as such, while retaining the desired behavior that rustdoc *not* document functions that have the `rustc_const_unstable` attribute as `const`.", "tree": {"sha": "a1f712beb19d2006eca2848624445c1c9eb40a27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1f712beb19d2006eca2848624445c1c9eb40a27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a055c5a1bd95e029e9b31891db63b6dc8258b472", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a055c5a1bd95e029e9b31891db63b6dc8258b472", "html_url": "https://github.com/rust-lang/rust/commit/a055c5a1bd95e029e9b31891db63b6dc8258b472", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a055c5a1bd95e029e9b31891db63b6dc8258b472/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17d32770649fefe8efe6510f7dbff6123f544ba6", "url": "https://api.github.com/repos/rust-lang/rust/commits/17d32770649fefe8efe6510f7dbff6123f544ba6", "html_url": "https://github.com/rust-lang/rust/commit/17d32770649fefe8efe6510f7dbff6123f544ba6"}, {"sha": "8a1288be747bf3a777997e260e3788f27984f93a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a1288be747bf3a777997e260e3788f27984f93a", "html_url": "https://github.com/rust-lang/rust/commit/8a1288be747bf3a777997e260e3788f27984f93a"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "7385cccbe95700a446cb715fdf650cb837c5b147", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a055c5a1bd95e029e9b31891db63b6dc8258b472/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a055c5a1bd95e029e9b31891db63b6dc8258b472/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a055c5a1bd95e029e9b31891db63b6dc8258b472", "patch": "@@ -23,7 +23,7 @@ use rustc_middle::middle::stability;\n use rustc_middle::ty::fold::TypeFolder;\n use rustc_middle::ty::subst::InternalSubsts;\n use rustc_middle::ty::{self, AdtKind, Lift, Ty, TyCtxt};\n-use rustc_mir::const_eval::is_min_const_fn;\n+use rustc_mir::const_eval::{is_const_fn, is_min_const_fn, is_unstable_const_fn};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{self, Pos};\n@@ -900,7 +900,9 @@ impl Clean<Item> for doctree::Function<'_> {\n             enter_impl_trait(cx, || (self.generics.clean(cx), (self.decl, self.body).clean(cx)));\n \n         let did = cx.tcx.hir().local_def_id(self.id);\n-        let constness = if is_min_const_fn(cx.tcx, did.to_def_id()) {\n+        let constness = if is_const_fn(cx.tcx, did.to_def_id())\n+            && !is_unstable_const_fn(cx.tcx, did.to_def_id()).is_some()\n+        {\n             hir::Constness::Const\n         } else {\n             hir::Constness::NotConst\n@@ -1108,7 +1110,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n             hir::TraitItemKind::Fn(ref sig, hir::TraitFn::Provided(body)) => {\n                 let mut m = (sig, &self.generics, body, None).clean(cx);\n                 if m.header.constness == hir::Constness::Const\n-                    && !is_min_const_fn(cx.tcx, local_did.to_def_id())\n+                    && is_unstable_const_fn(cx.tcx, local_did.to_def_id()).is_some()\n                 {\n                     m.header.constness = hir::Constness::NotConst;\n                 }\n@@ -1121,7 +1123,7 @@ impl Clean<Item> for hir::TraitItem<'_> {\n                 let (all_types, ret_types) = get_all_types(&generics, &decl, cx);\n                 let mut t = TyMethod { header: sig.header, decl, generics, all_types, ret_types };\n                 if t.header.constness == hir::Constness::Const\n-                    && !is_min_const_fn(cx.tcx, local_did.to_def_id())\n+                    && is_unstable_const_fn(cx.tcx, local_did.to_def_id()).is_some()\n                 {\n                     t.header.constness = hir::Constness::NotConst;\n                 }\n@@ -1154,7 +1156,7 @@ impl Clean<Item> for hir::ImplItem<'_> {\n             hir::ImplItemKind::Fn(ref sig, body) => {\n                 let mut m = (sig, &self.generics, body, Some(self.defaultness)).clean(cx);\n                 if m.header.constness == hir::Constness::Const\n-                    && !is_min_const_fn(cx.tcx, local_did.to_def_id())\n+                    && is_unstable_const_fn(cx.tcx, local_did.to_def_id()).is_some()\n                 {\n                     m.header.constness = hir::Constness::NotConst;\n                 }"}, {"sha": "b3fbe377f0b9669e7a05d732679a4971113fc399", "filename": "src/test/rustdoc/const-display.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a055c5a1bd95e029e9b31891db63b6dc8258b472/src%2Ftest%2Frustdoc%2Fconst-display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a055c5a1bd95e029e9b31891db63b6dc8258b472/src%2Ftest%2Frustdoc%2Fconst-display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-display.rs?ref=a055c5a1bd95e029e9b31891db63b6dc8258b472", "patch": "@@ -12,7 +12,7 @@\n #[rustc_const_unstable(feature=\"foo\", issue = \"none\")]\n pub const unsafe fn foo() -> u32 { 42 }\n \n-// @has 'foo/fn.foo2.html' '//pre' 'pub fn foo2() -> u32'\n+// @has 'foo/fn.foo2.html' '//pre' 'pub const fn foo2() -> u32'\n #[unstable(feature = \"humans\", issue = \"none\")]\n pub const fn foo2() -> u32 { 42 }\n \n@@ -21,7 +21,7 @@ pub const fn foo2() -> u32 { 42 }\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const fn bar2() -> u32 { 42 }\n \n-// @has 'foo/fn.foo2_gated.html' '//pre' 'pub unsafe fn foo2_gated() -> u32'\n+// @has 'foo/fn.foo2_gated.html' '//pre' 'pub const unsafe fn foo2_gated() -> u32'\n #[unstable(feature = \"foo2\", issue = \"none\")]\n pub const unsafe fn foo2_gated() -> u32 { 42 }\n \n@@ -30,7 +30,7 @@ pub const unsafe fn foo2_gated() -> u32 { 42 }\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n pub const unsafe fn bar2_gated() -> u32 { 42 }\n \n-// @has 'foo/fn.bar_not_gated.html' '//pre' 'pub unsafe fn bar_not_gated() -> u32'\n+// @has 'foo/fn.bar_not_gated.html' '//pre' 'pub const unsafe fn bar_not_gated() -> u32'\n pub const unsafe fn bar_not_gated() -> u32 { 42 }\n \n pub struct Foo;"}, {"sha": "605059fe0dd8dd65a5a72159c8c05e46a8b9d68c", "filename": "src/test/rustdoc/issue-76501.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a055c5a1bd95e029e9b31891db63b6dc8258b472/src%2Ftest%2Frustdoc%2Fissue-76501.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a055c5a1bd95e029e9b31891db63b6dc8258b472/src%2Ftest%2Frustdoc%2Fissue-76501.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-76501.rs?ref=a055c5a1bd95e029e9b31891db63b6dc8258b472", "patch": "@@ -0,0 +1,18 @@\n+#![feature(const_fn)]\n+\n+// @has 'issue_76501/fn.bloop.html' '//pre' 'pub const fn bloop() -> i32'\n+/// A useless function that always returns 1.\n+pub const fn bloop() -> i32 {\n+    1\n+}\n+\n+/// A struct.\n+pub struct Struct {}\n+\n+impl Struct {\n+    // @has 'issue_76501/struct.Struct.html' '//*[@class=\"method\"]' 'pub const fn blurp() -> i32'\n+    /// A useless function that always returns 1.\n+    pub const fn blurp() -> i32 {\n+        1\n+    }\n+}"}]}