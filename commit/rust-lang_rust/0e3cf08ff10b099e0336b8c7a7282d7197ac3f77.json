{"sha": "0e3cf08ff10b099e0336b8c7a7282d7197ac3f77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlM2NmMDhmZjEwYjA5OWUwMzM2YjhjN2E3MjgyZDcxOTdhYzNmNzc=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2019-06-09T12:28:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-09T12:28:57Z"}, "message": "Release 1.3.0 (#3611)", "tree": {"sha": "4900d3bf9351eadc8bbdabc1c48bb265c4e42e3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4900d3bf9351eadc8bbdabc1c48bb265c4e42e3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc/PuJCRBK7hj4Ov3rIwAAdHIIAGs1zBCh7e1fspjRkWht0cVY\nfJ9dZSMDOmrL+aFyaYVBI0QVdunFYUgof+75oonf/s937gTYIiw4gs1Vx/x+V1vU\n1Bg31kw8LHR1qQK3SXRjzUChOFhss6d0LnjtC9syD5f31Ry9t2/l/qVxj6MnRIh4\ngA5sIWRWfhKY3qvWGADOlWvOyqfNJh8M944iYLIx+jmUlNdhFKnSwWUz50KaUtks\nOoAjFQSkYMIFYi630A9T9iPwA8SnKMhQr5v079xmUcn4SCyCHjRx3T5yIsaSIVvw\nYtKDfb7Yn2fJiYvkHPha9fRuTQ6Vf728dtJNhCxgx0fxcsZUxmOITqtZwdnMUvU=\n=Oy/W\n-----END PGP SIGNATURE-----\n", "payload": "tree 4900d3bf9351eadc8bbdabc1c48bb265c4e42e3d\nparent 47a11cd5166a605897beb678095d17abc66c136f\nauthor Seiichi Uchida <seuchida@gmail.com> 1560083337 +0900\ncommitter GitHub <noreply@github.com> 1560083337 +0900\n\nRelease 1.3.0 (#3611)\n\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77", "html_url": "https://github.com/rust-lang/rust/commit/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47a11cd5166a605897beb678095d17abc66c136f", "url": "https://api.github.com/repos/rust-lang/rust/commits/47a11cd5166a605897beb678095d17abc66c136f", "html_url": "https://github.com/rust-lang/rust/commit/47a11cd5166a605897beb678095d17abc66c136f"}], "stats": {"total": 487, "additions": 268, "deletions": 219}, "files": [{"sha": "3b07550bd21d0d91d3b0a43d85ff1506e9da0119", "filename": "Cargo.lock", "status": "modified", "additions": 105, "deletions": 104, "changes": 209, "blob_url": "https://github.com/rust-lang/rust/blob/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=0e3cf08ff10b099e0336b8c7a7282d7197ac3f77", "patch": "@@ -46,7 +46,7 @@ name = \"atty\"\n version = \"0.2.11\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"termion 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -58,14 +58,14 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"backtrace\"\n-version = \"0.3.26\"\n+version = \"0.3.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"autocfg 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"backtrace-sys 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-demangle 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-demangle 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -74,12 +74,12 @@ version = \"0.1.28\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cc 1.0.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"bitflags\"\n-version = \"1.0.4\"\n+version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -119,8 +119,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"error-chain 0.12.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -141,7 +141,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"ansi_term 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -153,7 +153,7 @@ name = \"cloudabi\"\n version = \"0.0.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -162,7 +162,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -226,7 +226,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -239,7 +239,7 @@ name = \"dirs\"\n version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_users 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -266,15 +266,15 @@ dependencies = [\n  \"humantime 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"termcolor 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"error-chain\"\n version = \"0.12.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace 0.3.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"version_check 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -283,7 +283,7 @@ name = \"failure\"\n version = \"0.1.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"backtrace 0.3.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"backtrace 0.3.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure_derive 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -294,7 +294,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"synstructure 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -384,7 +384,7 @@ name = \"jobserver\"\n version = \"0.1.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -396,7 +396,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.55\"\n+version = \"0.2.58\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -436,7 +436,7 @@ name = \"num_cpus\"\n version = \"1.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -474,7 +474,7 @@ name = \"parking_lot_core\"\n version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_version 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -508,7 +508,7 @@ version = \"0.6.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"autocfg 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_chacha 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_hc 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -563,7 +563,7 @@ name = \"rand_jitter\"\n version = \"0.1.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -575,7 +575,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cloudabi 0.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fuchsia-cprng 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rand_core 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rdrand 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -652,31 +652,31 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-arena\"\n-version = \"486.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-ap-rustc_data_structures 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-graphviz\"\n-version = \"486.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustc-ap-rustc_cratesio_shim\"\n-version = \"486.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_data_structures\"\n-version = \"486.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -686,9 +686,9 @@ dependencies = [\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"parking_lot 0.7.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-graphviz 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-graphviz 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-rayon-core 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -698,47 +698,48 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-rustc_errors\"\n-version = \"486.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n+ \"annotate-snippets 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"termcolor 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_macros\"\n-version = \"486.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"itertools 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"synstructure 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-rustc_target\"\n-version = \"486.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_cratesio_shim 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_cratesio_shim 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-serialize\"\n-version = \"486.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"indexmap 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -747,39 +748,39 @@ dependencies = [\n \n [[package]]\n name = \"rustc-ap-syntax\"\n-version = \"486.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_errors 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_errors 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-ap-syntax_pos\"\n-version = \"486.0.0\"\n+version = \"491.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"cfg-if 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-arena 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_data_structures 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_macros 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-serialize 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-arena 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_data_structures 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_macros 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-serialize 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-width 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"rustc-demangle\"\n-version = \"0.1.14\"\n+version = \"0.1.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -807,7 +808,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"crossbeam-deque 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.10.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -826,7 +827,7 @@ dependencies = [\n \n [[package]]\n name = \"rustfmt-nightly\"\n-version = \"1.2.2\"\n+version = \"1.3.0\"\n dependencies = [\n  \"annotate-snippets 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -844,13 +845,13 @@ dependencies = [\n  \"lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 1.1.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-rustc_target 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-ap-syntax_pos 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-rustc_target 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc-ap-syntax_pos 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-workspace-hack 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"structopt 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"structopt 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -892,7 +893,7 @@ version = \"0.9.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -902,20 +903,20 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.91\"\n+version = \"1.0.92\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde_derive 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.91\"\n+version = \"1.0.92\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -925,7 +926,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ryu 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -945,27 +946,27 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"structopt\"\n-version = \"0.2.15\"\n+version = \"0.2.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"clap 2.33.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"structopt-derive 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"structopt-derive 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"structopt-derive\"\n-version = \"0.2.15\"\n+version = \"0.2.17\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"heck 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"syn\"\n-version = \"0.15.34\"\n+version = \"0.15.35\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -980,7 +981,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"proc-macro2 0.4.30 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quote 0.6.12 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syn 0.15.35 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -996,7 +997,7 @@ dependencies = [\n \n [[package]]\n name = \"termcolor\"\n-version = \"1.0.4\"\n+version = \"1.0.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"wincolor 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1007,7 +1008,7 @@ name = \"termion\"\n version = \"1.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"numtoa 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_syscall 0.1.54 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"redox_termios 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1034,7 +1035,7 @@ name = \"toml\"\n version = \"0.5.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1131,9 +1132,9 @@ dependencies = [\n \"checksum arrayvec 0.4.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"92c7fb76bc8826a8b33b4ee5bb07a247a81e76764ab4d55e8f73e3a4d8808c71\"\n \"checksum atty 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9a7d5b8723950951411ee34d271d99dddcc2035a16ab25310ea2c8cfd4369652\"\n \"checksum autocfg 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0e49efa51329a5fd37e7c79db4621af617cd4e3e5bc224939808d076077077bf\"\n-\"checksum backtrace 0.3.26 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1a13fc43f04daf08ab4f71e3d27e1fc27fc437d3e95ac0063a796d92fb40f39b\"\n+\"checksum backtrace 0.3.30 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ada4c783bb7e7443c14e0480f429ae2cc99da95065aeab7ee1b81ada0419404f\"\n \"checksum backtrace-sys 0.1.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"797c830ac25ccc92a7f8a7b9862bde440715531514594a6154e3d4a54dd769b6\"\n-\"checksum bitflags 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"228047a76f468627ca71776ecdebd732a3423081fcf5125585bcd7c49886ce12\"\n+\"checksum bitflags 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d155346769a6855b86399e9bc3814ab343cd3d62c7e985113d46a0ec3c281fd\"\n \"checksum blake2-rfc 0.2.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5d6d530bdd2d52966a6d03b7a964add7ae1a288d25214066fd4b600f0f796400\"\n \"checksum bstr 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"59604ece62a407dc9164732e5adea02467898954c3a5811fd2dc140af14ef15b\"\n \"checksum bytecount 0.5.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be0fdd54b507df8f22012890aadd099979befdba27713c767993f8380112ca7c\"\n@@ -1170,7 +1171,7 @@ dependencies = [\n \"checksum itoa 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"501266b7edd0174f8530248f87f99c88fbe60ca4ef3dd486835b8d8d53136f7f\"\n \"checksum jobserver 0.1.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3d51e24009d966c8285d524dbaf6d60926636b2a89caee9ce0bd612494ddc16\"\n \"checksum lazy_static 1.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bc5729f27f159ddd61f4df6228e827e86643d4d3e7c32183cb30a1c08f604a14\"\n-\"checksum libc 0.2.55 (registry+https://github.com/rust-lang/crates.io-index)\" = \"42914d39aad277d9e176efbdad68acb1d5443ab65afe0e0e4f0d49352a950880\"\n+\"checksum libc 0.2.58 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6281b86796ba5e4366000be6e9e18bf35580adf9e63fbe2294aadb587613a319\"\n \"checksum lock_api 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"62ebf1391f6acad60e5c8b43706dde4582df75c06698ab44511d15016bc2442c\"\n \"checksum log 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c84ec4b527950aa83a329754b01dbe3f58361d1c5efacd1f6d68c494d08a17c6\"\n \"checksum memchr 2.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2efc7bc57c883d4a4d6e3246905283d8dae951bb3bd32f49d6ef297f546e1c39\"\n@@ -1201,17 +1202,17 @@ dependencies = [\n \"checksum redox_users 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3fe5204c3a17e97dde73f285d49be585df59ed84b50a872baf416e73b62c3828\"\n \"checksum regex 1.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8f0a0bcab2fd7d1d7c54fa9eae6f43eddeb9ce2e7352f8518a814a4f65d60c58\"\n \"checksum regex-syntax 0.6.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcfd8681eebe297b81d98498869d4aae052137651ad7b96822f09ceb690d0a96\"\n-\"checksum rustc-ap-arena 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"af30808ea1dad5e3967d1997d97f32829ff9a999686768aac694ca20a8ca5507\"\n-\"checksum rustc-ap-graphviz 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4c8c4bc0c92187923ced8e6d1cbdde129b0fce020af817d8a889fddc36d81429\"\n-\"checksum rustc-ap-rustc_cratesio_shim 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"724100fb95b88e6f2a870cd957d60fc4f62d7a26f1e5b889ebcb090965118d33\"\n-\"checksum rustc-ap-rustc_data_structures 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d178c2ffcacf8e95d3af281b23d382ef8efce581bdd487a8fac38624a52344f\"\n-\"checksum rustc-ap-rustc_errors 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"229720cd73ce22a76e763f6554653863f91667c624bc92f89422beeb72002ebb\"\n-\"checksum rustc-ap-rustc_macros 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cd85f5873ed31ab1d511e132743e08f14c88d912dfcf1d7949b7d5666ba030e7\"\n-\"checksum rustc-ap-rustc_target 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"190dbb1a01e51b2280387cc18985382e785da2264473ff9a86ad6917c8343a6e\"\n-\"checksum rustc-ap-serialize 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9de6ea7e67ea3b8ddee324339bf4369c9af5c72a664b98f33083f8480c1df3b4\"\n-\"checksum rustc-ap-syntax 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4620f48399b89ab3eee54e81c0206e60645ce7b658269f09a7a9752f66c78fa1\"\n-\"checksum rustc-ap-syntax_pos 486.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3bf89da0ea5cde2c8ab974aaf7941ac4e1c9ba9cd2e00e3814974bd4a2bfe68\"\n-\"checksum rustc-demangle 0.1.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ccc78bfd5acd7bf3e89cffcf899e5cb1a52d6fafa8dec2739ad70c9577a57288\"\n+\"checksum rustc-ap-arena 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc0ad4318f3425229ed7b117275368b83269bec75f9609d4965dcb9752483c86\"\n+\"checksum rustc-ap-graphviz 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b80b7ea7902919f397c4bb12d102abe896fced7893d09d84bcac233e555bb388\"\n+\"checksum rustc-ap-rustc_cratesio_shim 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"752463d2b80039d23e42e667a9f6fe08213bd865f6ea301fb35f8068d94955ac\"\n+\"checksum rustc-ap-rustc_data_structures 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5c3d6a14181e11c132d0ef97a6c27e1bb1d4da09682d02222393875c10d1c364\"\n+\"checksum rustc-ap-rustc_errors 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"55caea8426565de362e8df0df737e43b9f22d632e0e52710cbfe316acc6ce2f0\"\n+\"checksum rustc-ap-rustc_macros 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"071420d762d2c779d1d4972356f37f5d049dcdd6c49e78f1b037e04c5a0f1a19\"\n+\"checksum rustc-ap-rustc_target 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d5464696d0748e3019b9e5daca5fcadc53889dc2bca1dc26bf42001fd1c4194f\"\n+\"checksum rustc-ap-serialize 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9464445c11c15cf32ef27815b3ec89315b0ed73c6c771cbcf8543be59a3c1502\"\n+\"checksum rustc-ap-syntax 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff53245ae370d8e8073dc9cc13f8921e6110d0ccd208b64c388c5653fa6b9c83\"\n+\"checksum rustc-ap-syntax_pos 491.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"41896f0eb2eb2f4ddba406939aa6b07386160fa38bee8cde3f7f0d85663e3d47\"\n+\"checksum rustc-demangle 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7f4dccf6f4891ebcc0c39f9b6eb1a83b9bf5d747cb439ec6fba4f3b977038af\"\n \"checksum rustc-hash 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7540fc8b0c49f096ee9c961cda096467dce8084bec6bdca2fc83895fd9b28cb8\"\n \"checksum rustc-rayon 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0d2e07e19601f21c59aad953c2632172ba70cb27e685771514ea66e4062b3363\"\n \"checksum rustc-rayon-core 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"79d38ca7cbc22fa59f09d8534ea4b27f67b0facf0cbe274433aceea227a02543\"\n@@ -1224,18 +1225,18 @@ dependencies = [\n \"checksum scopeguard 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94258f53601af11e6a49f722422f6e3425c52b06245a5cf9bc09908b174f5e27\"\n \"checksum semver 0.9.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1d7eb9ef2c18661902cc47e535f9bc51b78acd254da71d375c2f6720d9a40403\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n-\"checksum serde 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a72e9b96fa45ce22a4bc23da3858dfccfd60acd28a25bcd328a98fdd6bea43fd\"\n-\"checksum serde_derive 1.0.91 (registry+https://github.com/rust-lang/crates.io-index)\" = \"101b495b109a3e3ca8c4cbe44cf62391527cdfb6ba15821c5ce80bcd5ea23f9f\"\n+\"checksum serde 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\" = \"32746bf0f26eab52f06af0d0aa1984f641341d06d8d673c693871da2d188c9be\"\n+\"checksum serde_derive 1.0.92 (registry+https://github.com/rust-lang/crates.io-index)\" = \"46a3223d0c9ba936b61c0d2e3e559e3217dbfb8d65d06d26e8b3c25de38bae3e\"\n \"checksum serde_json 1.0.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5a23aa71d4a4d43fdbfaac00eff68ba8a06a51759a89ac3304323e800c4dd40d\"\n \"checksum smallvec 0.6.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c4488ae950c49d403731982257768f48fada354a5203fe81f9bb6f43ca9002be\"\n \"checksum stable_deref_trait 1.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dba1a27d3efae4351c8051072d619e3ade2820635c3958d826bfea39d59b54c8\"\n \"checksum strsim 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n-\"checksum structopt 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3d0760c312538987d363c36c42339b55f5ee176ea8808bbe4543d484a291c8d1\"\n-\"checksum structopt-derive 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"528aeb7351d042e6ffbc2a6fb76a86f9b622fdf7c25932798e7a82cb03bc94c6\"\n-\"checksum syn 0.15.34 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1393e4a97a19c01e900df2aec855a29f71cf02c402e2f443b8d2747c25c5dbe\"\n+\"checksum structopt 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c767a8971f53d7324583085deee2e230903be09e52fb27df9af94c5cb2b43c31\"\n+\"checksum structopt-derive 0.2.17 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c57a30c87454ced2186f62f940e981746e8cbbe026d52090c8c4352b636f8235\"\n+\"checksum syn 0.15.35 (registry+https://github.com/rust-lang/crates.io-index)\" = \"641e117d55514d6d918490e47102f7e08d096fdde360247e4a10f7a91a8478d3\"\n \"checksum synstructure 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02353edf96d6e4dc81aea2d8490a7e9db177bf8acb0e951c24940bf866cb313f\"\n \"checksum term 0.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"edd106a334b7657c10b7c540a0106114feadeb4dc314513e97df481d5d966f42\"\n-\"checksum termcolor 1.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4096add70612622289f2fdcdbd5086dc81c1e2675e6ae58d6c4f62a16c6d7f2f\"\n+\"checksum termcolor 1.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"96d6098003bde162e4277c70665bd87c326f5a0c3f3fbfb285787fa482d54e6e\"\n \"checksum termion 1.5.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dde0593aeb8d47accea5392b39350015b5eccb12c0d98044d856983d89548dea\"\n \"checksum textwrap 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d326610f408c7a4eb6f51c37c330e496b08506c9457c9d34287ecc38809fb060\"\n \"checksum thread_local 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c6b53e329000edc2b34dbe8545fd20e55a333362d0a321909685a19bd28c3f1b\""}, {"sha": "251399510bab58fbc0bb0b415d5465aaf2037628", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=0e3cf08ff10b099e0336b8c7a7282d7197ac3f77", "patch": "@@ -1,7 +1,7 @@\n [package]\n \n name = \"rustfmt-nightly\"\n-version = \"1.2.2\"\n+version = \"1.3.0\"\n authors = [\"Nicholas Cameron <ncameron@mozilla.com>\", \"The Rustfmt developers\"]\n description = \"Tool to find and fix Rust formatting issues\"\n repository = \"https://github.com/rust-lang/rustfmt\"\n@@ -48,9 +48,9 @@ env_logger = \"0.6\"\n getopts = \"0.2\"\n derive-new = \"0.5\"\n cargo_metadata = \"0.7\"\n-rustc-ap-rustc_target = \"486.0.0\"\n-rustc-ap-syntax = \"486.0.0\"\n-rustc-ap-syntax_pos = \"486.0.0\"\n+rustc-ap-rustc_target = \"491.0.0\"\n+rustc-ap-syntax = \"491.0.0\"\n+rustc-ap-syntax_pos = \"491.0.0\"\n failure = \"0.1.3\"\n bytecount = \"0.5\"\n unicode-width = \"0.1.5\""}, {"sha": "27044ee18d6569925ff1535b52ae6fe0f0fb2b99", "filename": "src/config/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=0e3cf08ff10b099e0336b8c7a7282d7197ac3f77", "patch": "@@ -519,7 +519,7 @@ use_field_init_shorthand = false\n force_explicit_abi = true\n condense_wildcard_suffixes = false\n color = \"Auto\"\n-required_version = \"1.2.2\"\n+required_version = \"1.3.0\"\n unstable_features = false\n disable_all_formatting = false\n skip_children = false"}, {"sha": "ac00e4452a796eb2d80ef113d949c081a15fb0a8", "filename": "src/macros.rs", "status": "modified", "additions": 124, "deletions": 88, "changes": 212, "blob_url": "https://github.com/rust-lang/rust/blob/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=0e3cf08ff10b099e0336b8c7a7282d7197ac3f77", "patch": "@@ -14,14 +14,14 @@ use std::panic::{catch_unwind, AssertUnwindSafe};\n \n use syntax::parse::new_parser_from_tts;\n use syntax::parse::parser::Parser;\n-use syntax::parse::token::{BinOpToken, DelimToken, Token};\n+use syntax::parse::token::{BinOpToken, DelimToken, Token, TokenKind};\n use syntax::print::pprust;\n use syntax::source_map::{BytePos, Span};\n use syntax::symbol::kw;\n use syntax::tokenstream::{Cursor, TokenStream, TokenTree};\n use syntax::ThinVec;\n use syntax::{ast, parse, ptr};\n-use syntax_pos::Symbol;\n+use syntax_pos::{Symbol, DUMMY_SP};\n \n use crate::comment::{\n     contains_comment, CharClasses, FindUncommented, FullCodeCharKind, LineClasses,\n@@ -235,13 +235,14 @@ fn check_keyword<'a, 'b: 'a>(parser: &'a mut Parser<'b>) -> Option<MacroArg> {\n     for &keyword in RUST_KW.iter() {\n         if parser.token.is_keyword(keyword)\n             && parser.look_ahead(1, |t| {\n-                *t == Token::Eof\n-                    || *t == Token::Comma\n-                    || *t == Token::CloseDelim(DelimToken::NoDelim)\n+                t.kind == TokenKind::Eof\n+                    || t.kind == TokenKind::Comma\n+                    || t.kind == TokenKind::CloseDelim(DelimToken::NoDelim)\n             })\n         {\n-            let macro_arg = MacroArg::Keyword(ast::Ident::with_empty_ctxt(keyword), parser.span);\n             parser.bump();\n+            let macro_arg =\n+                MacroArg::Keyword(ast::Ident::with_empty_ctxt(keyword), parser.prev_span);\n             return Some(macro_arg);\n         }\n     }\n@@ -311,19 +312,19 @@ fn rewrite_macro_inner(\n                 return return_macro_parse_failure_fallback(context, shape.indent, mac.span);\n             }\n \n-            match parser.token {\n-                Token::Eof => break,\n-                Token::Comma => (),\n-                Token::Semi => {\n+            match parser.token.kind {\n+                TokenKind::Eof => break,\n+                TokenKind::Comma => (),\n+                TokenKind::Semi => {\n                     // Try to parse `vec![expr; expr]`\n                     if FORCED_BRACKET_MACROS.contains(&&macro_name[..]) {\n                         parser.bump();\n-                        if parser.token != Token::Eof {\n+                        if parser.token.kind != TokenKind::Eof {\n                             match parse_macro_arg(&mut parser) {\n                                 Some(arg) => {\n                                     arg_vec.push(arg);\n                                     parser.bump();\n-                                    if parser.token == Token::Eof && arg_vec.len() == 2 {\n+                                    if parser.token.kind == TokenKind::Eof && arg_vec.len() == 2 {\n                                         vec_with_semi = true;\n                                         break;\n                                     }\n@@ -346,7 +347,7 @@ fn rewrite_macro_inner(\n \n             parser.bump();\n \n-            if parser.token == Token::Eof {\n+            if parser.token.kind == TokenKind::Eof {\n                 trailing_comma = true;\n                 break;\n             }\n@@ -629,7 +630,7 @@ fn replace_names(input: &str) -> Option<(String, HashMap<String, String>)> {\n #[derive(Debug, Clone)]\n enum MacroArgKind {\n     /// e.g., `$x: expr`.\n-    MetaVariable(ast::Ident, String),\n+    MetaVariable(ast::Name, String),\n     /// e.g., `$($foo: expr),*`\n     Repeat(\n         /// `()`, `[]` or `{}`.\n@@ -737,9 +738,7 @@ impl MacroArgKind {\n         };\n \n         match *self {\n-            MacroArgKind::MetaVariable(ty, ref name) => {\n-                Some(format!(\"${}:{}\", name, ty.name.as_str()))\n-            }\n+            MacroArgKind::MetaVariable(ty, ref name) => Some(format!(\"${}:{}\", name, ty)),\n             MacroArgKind::Repeat(delim_tok, ref args, ref another, ref tok) => {\n                 let (lhs, inner, rhs) = rewrite_delimited_inner(delim_tok, args)?;\n                 let another = another\n@@ -797,8 +796,11 @@ struct MacroArgParser {\n \n fn last_tok(tt: &TokenTree) -> Token {\n     match *tt {\n-        TokenTree::Token(_, ref t) => t.clone(),\n-        TokenTree::Delimited(_, delim, _) => Token::CloseDelim(delim),\n+        TokenTree::Token(ref t) => t.clone(),\n+        TokenTree::Delimited(delim_span, delim, _) => Token {\n+            kind: TokenKind::CloseDelim(delim),\n+            span: delim_span.close,\n+        },\n     }\n }\n \n@@ -809,8 +811,14 @@ impl MacroArgParser {\n             hi: BytePos(0),\n             buf: String::new(),\n             is_meta_var: false,\n-            last_tok: Token::Eof,\n-            start_tok: Token::Eof,\n+            last_tok: Token {\n+                kind: TokenKind::Eof,\n+                span: DUMMY_SP,\n+            },\n+            start_tok: Token {\n+                kind: TokenKind::Eof,\n+                span: DUMMY_SP,\n+            },\n             result: vec![],\n         }\n     }\n@@ -848,10 +856,13 @@ impl MacroArgParser {\n \n     fn add_meta_variable(&mut self, iter: &mut Cursor) -> Option<()> {\n         match iter.next() {\n-            Some(TokenTree::Token(sp, Token::Ident(ref ident, _))) => {\n+            Some(TokenTree::Token(Token {\n+                kind: TokenKind::Ident(name, _),\n+                span,\n+            })) => {\n                 self.result.push(ParsedMacroArg {\n-                    kind: MacroArgKind::MetaVariable(*ident, self.buf.clone()),\n-                    span: mk_sp(self.lo, sp.hi()),\n+                    kind: MacroArgKind::MetaVariable(name, self.buf.clone()),\n+                    span: mk_sp(self.lo, span.hi()),\n                 });\n \n                 self.buf.clear();\n@@ -891,14 +902,23 @@ impl MacroArgParser {\n             }\n \n             match tok {\n-                TokenTree::Token(_, Token::BinOp(BinOpToken::Plus))\n-                | TokenTree::Token(_, Token::Question)\n-                | TokenTree::Token(_, Token::BinOp(BinOpToken::Star)) => {\n+                TokenTree::Token(Token {\n+                    kind: TokenKind::BinOp(BinOpToken::Plus),\n+                    ..\n+                })\n+                | TokenTree::Token(Token {\n+                    kind: TokenKind::Question,\n+                    ..\n+                })\n+                | TokenTree::Token(Token {\n+                    kind: TokenKind::BinOp(BinOpToken::Star),\n+                    ..\n+                }) => {\n                     break;\n                 }\n-                TokenTree::Token(sp, ref t) => {\n-                    buffer.push_str(&pprust::token_to_string(t));\n-                    hi = sp.hi();\n+                TokenTree::Token(ref t) => {\n+                    buffer.push_str(&pprust::token_to_string(&t.kind));\n+                    hi = t.span.hi();\n                 }\n                 _ => return None,\n             }\n@@ -921,9 +941,9 @@ impl MacroArgParser {\n         Some(())\n     }\n \n-    fn update_buffer(&mut self, lo: BytePos, t: &Token) {\n+    fn update_buffer(&mut self, t: &Token) {\n         if self.buf.is_empty() {\n-            self.lo = lo;\n+            self.lo = t.span.lo();\n             self.start_tok = t.clone();\n         } else {\n             let needs_space = match next_space(&self.last_tok) {\n@@ -950,7 +970,7 @@ impl MacroArgParser {\n             if ident_like(&self.start_tok) {\n                 return true;\n             }\n-            if self.start_tok == Token::Colon {\n+            if self.start_tok.kind == TokenKind::Colon {\n                 return true;\n             }\n         }\n@@ -968,21 +988,30 @@ impl MacroArgParser {\n \n         while let Some(tok) = iter.next() {\n             match tok {\n-                TokenTree::Token(sp, Token::Dollar) => {\n+                TokenTree::Token(Token {\n+                    kind: TokenKind::Dollar,\n+                    span,\n+                }) => {\n                     // We always want to add a separator before meta variables.\n                     if !self.buf.is_empty() {\n                         self.add_separator();\n                     }\n \n                     // Start keeping the name of this metavariable in the buffer.\n                     self.is_meta_var = true;\n-                    self.lo = sp.lo();\n-                    self.start_tok = Token::Dollar;\n+                    self.lo = span.lo();\n+                    self.start_tok = Token {\n+                        kind: TokenKind::Dollar,\n+                        span,\n+                    };\n                 }\n-                TokenTree::Token(_, Token::Colon) if self.is_meta_var => {\n+                TokenTree::Token(Token {\n+                    kind: TokenKind::Colon,\n+                    ..\n+                }) if self.is_meta_var => {\n                     self.add_meta_variable(&mut iter)?;\n                 }\n-                TokenTree::Token(sp, ref t) => self.update_buffer(sp.lo(), t),\n+                TokenTree::Token(ref t) => self.update_buffer(t),\n                 TokenTree::Delimited(delimited_span, delimited, ref tts) => {\n                     if !self.buf.is_empty() {\n                         if next_space(&self.last_tok) == SpaceState::Always {\n@@ -1102,63 +1131,63 @@ enum SpaceState {\n     Always,\n }\n \n-fn force_space_before(tok: &Token) -> bool {\n+fn force_space_before(tok: &TokenKind) -> bool {\n     debug!(\"tok: force_space_before {:?}\", tok);\n \n     match tok {\n-        Token::Eq\n-        | Token::Lt\n-        | Token::Le\n-        | Token::EqEq\n-        | Token::Ne\n-        | Token::Ge\n-        | Token::Gt\n-        | Token::AndAnd\n-        | Token::OrOr\n-        | Token::Not\n-        | Token::Tilde\n-        | Token::BinOpEq(_)\n-        | Token::At\n-        | Token::RArrow\n-        | Token::LArrow\n-        | Token::FatArrow\n-        | Token::BinOp(_)\n-        | Token::Pound\n-        | Token::Dollar => true,\n+        TokenKind::Eq\n+        | TokenKind::Lt\n+        | TokenKind::Le\n+        | TokenKind::EqEq\n+        | TokenKind::Ne\n+        | TokenKind::Ge\n+        | TokenKind::Gt\n+        | TokenKind::AndAnd\n+        | TokenKind::OrOr\n+        | TokenKind::Not\n+        | TokenKind::Tilde\n+        | TokenKind::BinOpEq(_)\n+        | TokenKind::At\n+        | TokenKind::RArrow\n+        | TokenKind::LArrow\n+        | TokenKind::FatArrow\n+        | TokenKind::BinOp(_)\n+        | TokenKind::Pound\n+        | TokenKind::Dollar => true,\n         _ => false,\n     }\n }\n \n fn ident_like(tok: &Token) -> bool {\n-    match tok {\n-        Token::Ident(..) | Token::Literal(..) | Token::Lifetime(_) => true,\n+    match tok.kind {\n+        TokenKind::Ident(..) | TokenKind::Literal(..) | TokenKind::Lifetime(_) => true,\n         _ => false,\n     }\n }\n \n-fn next_space(tok: &Token) -> SpaceState {\n+fn next_space(tok: &TokenKind) -> SpaceState {\n     debug!(\"next_space: {:?}\", tok);\n \n     match tok {\n-        Token::Not\n-        | Token::BinOp(BinOpToken::And)\n-        | Token::Tilde\n-        | Token::At\n-        | Token::Comma\n-        | Token::Dot\n-        | Token::DotDot\n-        | Token::DotDotDot\n-        | Token::DotDotEq\n-        | Token::Question => SpaceState::Punctuation,\n-\n-        Token::ModSep\n-        | Token::Pound\n-        | Token::Dollar\n-        | Token::OpenDelim(_)\n-        | Token::CloseDelim(_)\n-        | Token::Whitespace => SpaceState::Never,\n-\n-        Token::Literal(..) | Token::Ident(..) | Token::Lifetime(_) => SpaceState::Ident,\n+        TokenKind::Not\n+        | TokenKind::BinOp(BinOpToken::And)\n+        | TokenKind::Tilde\n+        | TokenKind::At\n+        | TokenKind::Comma\n+        | TokenKind::Dot\n+        | TokenKind::DotDot\n+        | TokenKind::DotDotDot\n+        | TokenKind::DotDotEq\n+        | TokenKind::Question => SpaceState::Punctuation,\n+\n+        TokenKind::ModSep\n+        | TokenKind::Pound\n+        | TokenKind::Dollar\n+        | TokenKind::OpenDelim(_)\n+        | TokenKind::CloseDelim(_)\n+        | TokenKind::Whitespace => SpaceState::Never,\n+\n+        TokenKind::Literal(..) | TokenKind::Ident(..) | TokenKind::Lifetime(_) => SpaceState::Ident,\n \n         _ => SpaceState::Always,\n     }\n@@ -1225,7 +1254,10 @@ impl MacroParser {\n         };\n         let args = tok.joint();\n         match self.toks.next()? {\n-            TokenTree::Token(_, Token::FatArrow) => {}\n+            TokenTree::Token(Token {\n+                kind: TokenKind::FatArrow,\n+                ..\n+            }) => {}\n             _ => return None,\n         }\n         let (mut hi, body, whole_body) = match self.toks.next()? {\n@@ -1239,9 +1271,13 @@ impl MacroParser {\n                 )\n             }\n         };\n-        if let Some(TokenTree::Token(sp, Token::Semi)) = self.toks.look_ahead(0) {\n+        if let Some(TokenTree::Token(Token {\n+            kind: TokenKind::Semi,\n+            span,\n+        })) = self.toks.look_ahead(0)\n+        {\n             self.toks.next();\n-            hi = sp.hi();\n+            hi = span.hi();\n         }\n         Some(MacroBranch {\n             span: mk_sp(lo, hi),\n@@ -1423,17 +1459,17 @@ fn format_lazy_static(\n         }\n     }\n \n-    while parser.token != Token::Eof {\n+    while parser.token.kind != TokenKind::Eof {\n         // Parse a `lazy_static!` item.\n         let vis = crate::utils::format_visibility(context, &parse_or!(parse_visibility, false));\n         parser.eat_keyword(kw::Static);\n         parser.eat_keyword(kw::Ref);\n         let id = parse_or!(parse_ident);\n-        parser.eat(&Token::Colon);\n+        parser.eat(&TokenKind::Colon);\n         let ty = parse_or!(parse_ty);\n-        parser.eat(&Token::Eq);\n+        parser.eat(&TokenKind::Eq);\n         let expr = parse_or!(parse_expr);\n-        parser.eat(&Token::Semi);\n+        parser.eat(&TokenKind::Semi);\n \n         // Rewrite as a static item.\n         let mut stmt = String::with_capacity(128);\n@@ -1450,7 +1486,7 @@ fn format_lazy_static(\n             nested_shape.sub_width(1)?,\n         )?);\n         result.push(';');\n-        if parser.token != Token::Eof {\n+        if parser.token.kind != TokenKind::Eof {\n             result.push_str(&nested_shape.indent.to_string_with_newline(context.config));\n         }\n     }"}, {"sha": "5f7e4310a07408d3bf70726e9938b7da8ba48c63", "filename": "src/modules.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=0e3cf08ff10b099e0336b8c7a7282d7197ac3f77", "patch": "@@ -5,7 +5,7 @@ use std::path::{Path, PathBuf};\n use syntax::ast;\n use syntax::attr;\n use syntax::parse::{\n-    new_sub_parser_from_file, parser, token, DirectoryOwnership, PResult, ParseSess,\n+    new_sub_parser_from_file, parser, token::TokenKind, DirectoryOwnership, PResult, ParseSess,\n };\n use syntax::source_map::{self, Span};\n use syntax::symbol::sym;\n@@ -380,7 +380,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n                 DUMMY_SP,\n             );\n             parser.cfg_mods = false;\n-            let lo = parser.span;\n+            let lo = parser.token.span;\n             // FIXME(topecongiro) Format inner attributes (#3606).\n             let _mod_attrs = match parse_inner_attributes(&mut parser) {\n                 Ok(attrs) => attrs,\n@@ -429,20 +429,20 @@ fn find_path_value(attrs: &[ast::Attribute]) -> Option<Symbol> {\n fn parse_inner_attributes<'a>(parser: &mut parser::Parser<'a>) -> PResult<'a, Vec<ast::Attribute>> {\n     let mut attrs: Vec<ast::Attribute> = vec![];\n     loop {\n-        match parser.token {\n-            token::Pound => {\n+        match parser.token.kind {\n+            TokenKind::Pound => {\n                 // Don't even try to parse if it's not an inner attribute.\n-                if !parser.look_ahead(1, |t| t == &token::Not) {\n+                if !parser.look_ahead(1, |t| t == &TokenKind::Not) {\n                     break;\n                 }\n \n                 let attr = parser.parse_attribute(true)?;\n                 assert_eq!(attr.style, ast::AttrStyle::Inner);\n                 attrs.push(attr);\n             }\n-            token::DocComment(s) => {\n+            TokenKind::DocComment(s) => {\n                 // we need to get the position of this token before we bump.\n-                let attr = attr::mk_sugared_doc_attr(attr::mk_attr_id(), s, parser.span);\n+                let attr = attr::mk_sugared_doc_attr(attr::mk_attr_id(), s, parser.token.span);\n                 if attr.style == ast::AttrStyle::Inner {\n                     attrs.push(attr);\n                     parser.bump();\n@@ -462,7 +462,7 @@ fn parse_mod_items<'a>(parser: &mut parser::Parser<'a>, inner_lo: Span) -> PResu\n         items.push(item);\n     }\n \n-    let hi = if parser.span.is_dummy() {\n+    let hi = if parser.token.span.is_dummy() {\n         inner_lo\n     } else {\n         parser.prev_span"}, {"sha": "3eb2e05b2d748ec983e0ddc1920d01f7be8888e9", "filename": "src/modules/visitor.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77/src%2Fmodules%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77/src%2Fmodules%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules%2Fvisitor.rs?ref=0e3cf08ff10b099e0336b8c7a7282d7197ac3f77", "patch": "@@ -1,5 +1,5 @@\n use syntax::ast;\n-use syntax::parse::token::{DelimToken, Token};\n+use syntax::parse::token::{DelimToken, TokenKind};\n use syntax::parse::{stream_to_parser_with_base_dir, Directory, ParseSess};\n use syntax::symbol::kw;\n use syntax::visit::Visitor;\n@@ -55,7 +55,7 @@ impl<'a, 'ast: 'a> CfgIfVisitor<'a> {\n         parser.cfg_mods = false;\n         let mut process_if_cfg = true;\n \n-        while parser.token != Token::Eof {\n+        while parser.token.kind != TokenKind::Eof {\n             if process_if_cfg {\n                 if !parser.eat_keyword(kw::If) {\n                     return Err(\"Expected `if`\");\n@@ -65,11 +65,12 @@ impl<'a, 'ast: 'a> CfgIfVisitor<'a> {\n                     .map_err(|_| \"Failed to parse attributes\")?;\n             }\n \n-            if !parser.eat(&Token::OpenDelim(DelimToken::Brace)) {\n+            if !parser.eat(&TokenKind::OpenDelim(DelimToken::Brace)) {\n                 return Err(\"Expected an opening brace\");\n             }\n \n-            while parser.token != Token::CloseDelim(DelimToken::Brace) && parser.token != Token::Eof\n+            while parser.token != TokenKind::CloseDelim(DelimToken::Brace)\n+                && parser.token.kind != TokenKind::Eof\n             {\n                 let item = match parser.parse_item() {\n                     Ok(Some(item_ptr)) => item_ptr.into_inner(),\n@@ -87,11 +88,11 @@ impl<'a, 'ast: 'a> CfgIfVisitor<'a> {\n                 }\n             }\n \n-            if !parser.eat(&Token::CloseDelim(DelimToken::Brace)) {\n+            if !parser.eat(&TokenKind::CloseDelim(DelimToken::Brace)) {\n                 return Err(\"Expected a closing brace\");\n             }\n \n-            if parser.eat(&Token::Eof) {\n+            if parser.eat(&TokenKind::Eof) {\n                 break;\n             }\n "}, {"sha": "c15a580f1a87fe291891440a5d1c543d1d9dafcf", "filename": "src/types.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e3cf08ff10b099e0336b8c7a7282d7197ac3f77/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=0e3cf08ff10b099e0336b8c7a7282d7197ac3f77", "patch": "@@ -137,7 +137,7 @@ pub(crate) enum SegmentParam<'a> {\n     Const(&'a ast::AnonConst),\n     LifeTime(&'a ast::Lifetime),\n     Type(&'a ast::Ty),\n-    Binding(&'a ast::TypeBinding),\n+    Binding(&'a ast::AssocTyConstraint),\n }\n \n impl<'a> SegmentParam<'a> {\n@@ -167,16 +167,18 @@ impl<'a> Rewrite for SegmentParam<'a> {\n             SegmentParam::Const(const_) => const_.rewrite(context, shape),\n             SegmentParam::LifeTime(lt) => lt.rewrite(context, shape),\n             SegmentParam::Type(ty) => ty.rewrite(context, shape),\n-            SegmentParam::Binding(binding) => {\n+            SegmentParam::Binding(assoc_ty_constraint) => {\n                 let mut result = match context.config.type_punctuation_density() {\n-                    TypeDensity::Wide => format!(\"{} = \", rewrite_ident(context, binding.ident)),\n+                    TypeDensity::Wide => {\n+                        format!(\"{} = \", rewrite_ident(context, assoc_ty_constraint.ident))\n+                    }\n                     TypeDensity::Compressed => {\n-                        format!(\"{}=\", rewrite_ident(context, binding.ident))\n+                        format!(\"{}=\", rewrite_ident(context, assoc_ty_constraint.ident))\n                     }\n                 };\n                 let budget = shape.width.checked_sub(result.len())?;\n-                let rewrite = binding\n-                    .ty\n+                let rewrite = assoc_ty_constraint\n+                    .kind\n                     .rewrite(context, Shape::legacy(budget, shape.indent + result.len()))?;\n                 result.push_str(&rewrite);\n                 Some(result)\n@@ -185,6 +187,15 @@ impl<'a> Rewrite for SegmentParam<'a> {\n     }\n }\n \n+impl Rewrite for ast::AssocTyConstraintKind {\n+    fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n+        match self {\n+            ast::AssocTyConstraintKind::Equality { ty } => ty.rewrite(context, shape),\n+            ast::AssocTyConstraintKind::Bound { bounds } => bounds.rewrite(context, shape),\n+        }\n+    }\n+}\n+\n // Formats a path segment. There are some hacks involved to correctly determine\n // the segment's associated span since it's not part of the AST.\n //\n@@ -216,13 +227,13 @@ fn rewrite_segment(\n     if let Some(ref args) = segment.args {\n         match **args {\n             ast::GenericArgs::AngleBracketed(ref data)\n-                if !data.args.is_empty() || !data.bindings.is_empty() =>\n+                if !data.args.is_empty() || !data.constraints.is_empty() =>\n             {\n                 let param_list = data\n                     .args\n                     .iter()\n                     .map(SegmentParam::from_generic_arg)\n-                    .chain(data.bindings.iter().map(|x| SegmentParam::Binding(&*x)))\n+                    .chain(data.constraints.iter().map(|x| SegmentParam::Binding(&*x)))\n                     .collect::<Vec<_>>();\n \n                 // HACK: squeeze out the span between the identifier and the parameters."}]}