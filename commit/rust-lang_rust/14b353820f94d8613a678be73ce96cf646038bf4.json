{"sha": "14b353820f94d8613a678be73ce96cf646038bf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YjM1MzgyMGY5NGQ4NjEzYTY3OGJlNzNjZTk2Y2Y2NDYwMzhiZjQ=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-05-11T19:44:33Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-05-11T23:01:56Z"}, "message": "syntax: Remove some legacy nonterminal tokens", "tree": {"sha": "d0ec85319e3ccba5fa635a0e1a7a49c5222498c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0ec85319e3ccba5fa635a0e1a7a49c5222498c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14b353820f94d8613a678be73ce96cf646038bf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14b353820f94d8613a678be73ce96cf646038bf4", "html_url": "https://github.com/rust-lang/rust/commit/14b353820f94d8613a678be73ce96cf646038bf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14b353820f94d8613a678be73ce96cf646038bf4/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af98304b9a006e2f9a367b1f79dd7655f243c150", "url": "https://api.github.com/repos/rust-lang/rust/commits/af98304b9a006e2f9a367b1f79dd7655f243c150", "html_url": "https://github.com/rust-lang/rust/commit/af98304b9a006e2f9a367b1f79dd7655f243c150"}], "stats": {"total": 30, "additions": 4, "deletions": 26}, "files": [{"sha": "f587e63e12b94b428e663f79a97c71a65c3bc754", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b353820f94d8613a678be73ce96cf646038bf4/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b353820f94d8613a678be73ce96cf646038bf4/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=14b353820f94d8613a678be73ce96cf646038bf4", "patch": "@@ -663,7 +663,6 @@ pub fn noop_visit_interpolated<T: MutVisitor>(nt: &mut token::Nonterminal, vis:\n         token::NtMeta(meta) => vis.visit_meta_item(meta),\n         token::NtPath(path) => vis.visit_path(path),\n         token::NtTT(tt) => vis.visit_tt(tt),\n-        token::NtArm(arm) => vis.visit_arm(arm),\n         token::NtImplItem(item) =>\n             visit_clobber(item, |item| {\n                 // See reasoning above.\n@@ -676,9 +675,6 @@ pub fn noop_visit_interpolated<T: MutVisitor>(nt: &mut token::Nonterminal, vis:\n                 vis.flat_map_trait_item(item)\n                     .expect_one(\"expected visitor to produce exactly one item\")\n             }),\n-        token::NtGenerics(generics) => vis.visit_generics(generics),\n-        token::NtWhereClause(where_clause) => vis.visit_where_clause(where_clause),\n-        token::NtArg(arg) => vis.visit_arg(arg),\n         token::NtVis(visib) => vis.visit_vis(visib),\n         token::NtForeignItem(item) =>\n             visit_clobber(item, |item| {"}, {"sha": "48aaa1cbb0342e71463078d5e2541936215b0950", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/14b353820f94d8613a678be73ce96cf646038bf4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b353820f94d8613a678be73ce96cf646038bf4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=14b353820f94d8613a678be73ce96cf646038bf4", "patch": "@@ -1925,8 +1925,6 @@ impl<'a> Parser<'a> {\n     /// This version of parse arg doesn't necessarily require identifier names.\n     fn parse_arg_general(&mut self, require_name: bool, is_trait_item: bool,\n                          allow_c_variadic: bool) -> PResult<'a, Arg> {\n-        maybe_whole!(self, NtArg, |x| x);\n-\n         if let Ok(Some(_)) = self.parse_self_arg() {\n             let mut err = self.struct_span_err(self.prev_span,\n                 \"unexpected `self` argument in function\");\n@@ -4179,8 +4177,6 @@ impl<'a> Parser<'a> {\n     }\n \n     crate fn parse_arm(&mut self) -> PResult<'a, Arm> {\n-        maybe_whole!(self, NtArm, |x| x);\n-\n         let attrs = self.parse_outer_attributes()?;\n         let pats = self.parse_pats()?;\n         let guard = if self.eat_keyword(keywords::If) {\n@@ -5915,8 +5911,6 @@ impl<'a> Parser<'a> {\n     ///                  | ( < lifetimes , typaramseq ( , )? > )\n     /// where   typaramseq = ( typaram ) | ( typaram , typaramseq )\n     fn parse_generics(&mut self) -> PResult<'a, ast::Generics> {\n-        maybe_whole!(self, NtGenerics, |x| x);\n-\n         let span_lo = self.span;\n         if self.eat_lt() {\n             let params = self.parse_generic_params()?;\n@@ -6169,8 +6163,6 @@ impl<'a> Parser<'a> {\n     /// where T : Trait<U, V> + 'b, 'a : 'b\n     /// ```\n     fn parse_where_clause(&mut self) -> PResult<'a, WhereClause> {\n-        maybe_whole!(self, NtWhereClause, |x| x);\n-\n         let mut where_clause = WhereClause {\n             id: ast::DUMMY_NODE_ID,\n             predicates: Vec::new(),"}, {"sha": "79852e38596d62f0510f152794b57fbfb126bccc", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 10, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/14b353820f94d8613a678be73ce96cf646038bf4/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b353820f94d8613a678be73ce96cf646038bf4/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=14b353820f94d8613a678be73ce96cf646038bf4", "patch": "@@ -585,14 +585,12 @@ pub enum Nonterminal {\n     NtPath(ast::Path),\n     NtVis(ast::Visibility),\n     NtTT(TokenTree),\n-    // These are not exposed to macros, but are used by quasiquote.\n-    NtArm(ast::Arm),\n-    NtImplItem(ast::ImplItem),\n+    // Used only for passing items to proc macro attributes (they are not\n+    // strictly necessary for that, `Annotatable` can be converted into\n+    // tokens directly, but doing that naively regresses pretty-printing).\n     NtTraitItem(ast::TraitItem),\n+    NtImplItem(ast::ImplItem),\n     NtForeignItem(ast::ForeignItem),\n-    NtGenerics(ast::Generics),\n-    NtWhereClause(ast::WhereClause),\n-    NtArg(ast::Arg),\n }\n \n impl PartialEq for Nonterminal {\n@@ -625,13 +623,9 @@ impl fmt::Debug for Nonterminal {\n             NtMeta(..) => f.pad(\"NtMeta(..)\"),\n             NtPath(..) => f.pad(\"NtPath(..)\"),\n             NtTT(..) => f.pad(\"NtTT(..)\"),\n-            NtArm(..) => f.pad(\"NtArm(..)\"),\n             NtImplItem(..) => f.pad(\"NtImplItem(..)\"),\n             NtTraitItem(..) => f.pad(\"NtTraitItem(..)\"),\n             NtForeignItem(..) => f.pad(\"NtForeignItem(..)\"),\n-            NtGenerics(..) => f.pad(\"NtGenerics(..)\"),\n-            NtWhereClause(..) => f.pad(\"NtWhereClause(..)\"),\n-            NtArg(..) => f.pad(\"NtArg(..)\"),\n             NtVis(..) => f.pad(\"NtVis(..)\"),\n             NtLifetime(..) => f.pad(\"NtLifetime(..)\"),\n         }"}, {"sha": "0a402e924005847f23e4ccc4a575bc236807c6ae", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/14b353820f94d8613a678be73ce96cf646038bf4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14b353820f94d8613a678be73ce96cf646038bf4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=14b353820f94d8613a678be73ce96cf646038bf4", "patch": "@@ -278,12 +278,8 @@ pub fn nonterminal_to_string(nt: &Nonterminal) -> String {\n         token::NtLifetime(e)        => ident_to_string(e),\n         token::NtLiteral(ref e)     => expr_to_string(e),\n         token::NtTT(ref tree)       => tt_to_string(tree.clone()),\n-        token::NtArm(ref e)         => arm_to_string(e),\n         token::NtImplItem(ref e)    => impl_item_to_string(e),\n         token::NtTraitItem(ref e)   => trait_item_to_string(e),\n-        token::NtGenerics(ref e)    => generic_params_to_string(&e.params),\n-        token::NtWhereClause(ref e) => where_clause_to_string(e),\n-        token::NtArg(ref e)         => arg_to_string(e),\n         token::NtVis(ref e)         => vis_to_string(e),\n         token::NtForeignItem(ref e) => foreign_item_to_string(e),\n     }"}]}