{"sha": "7dcac19446ca8fca2c74e3da0461d010043224a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkY2FjMTk0NDZjYThmY2EyYzc0ZTNkYTA0NjFkMDEwMDQzMjI0YTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-07T06:06:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-07T06:06:05Z"}, "message": "Rollup merge of #63927 - mark-i-m:filter-spurious, r=ehuss\n\nFilter linkcheck spurious failure\n\nr? @ehuss\n\ncc @spastorino\n\nBasically, we filter errors with messages containing \"timed out\"... a bit of a hack, but hopefully this will be functionality built into linkcheck soon.", "tree": {"sha": "ff22ace0487154611989a4bd56c2365edb4e8769", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff22ace0487154611989a4bd56c2365edb4e8769"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dcac19446ca8fca2c74e3da0461d010043224a7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdc0jOCRBK7hj4Ov3rIwAAdHIIAEtrZFfRV4vi9FRwvWy787YB\nTsJP+N+g8blRB0xydIMeeo+TKjkevt03OnQ21ASh2upZ9bRV0VFHWKL6Il65F7ws\n2HQO9xjrmVZKFttfFt1OT4tlrNVBH28iIiSVeQP/9OKxf/JMg8ApNuRWpSwo4iNC\nU5UgWJz4GIsZi1j2OHM8jNlp7sdqtKc8pf/XQrvX0jTpHPMzPlQZNxlM0XYzGKtF\naIFRpMSFSWyvgzeXzJQVX17IOpN2OK2z/7RIkiM+dZYk0ZHhKb0gMpUpMyvDlnnp\nL/xtwikqRDqz5KEB9E38qu8j41zOS/ejPeIApg4BLnFEDpCf7xetc0WqO7DELTY=\n=41R7\n-----END PGP SIGNATURE-----\n", "payload": "tree ff22ace0487154611989a4bd56c2365edb4e8769\nparent db493ef613305c7bff31d3e1959b07c3ddbbe245\nparent bad8147d01df374e3daa37fe36446781df2eac2d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567836365 +0200\ncommitter GitHub <noreply@github.com> 1567836365 +0200\n\nRollup merge of #63927 - mark-i-m:filter-spurious, r=ehuss\n\nFilter linkcheck spurious failure\n\nr? @ehuss\n\ncc @spastorino\n\nBasically, we filter errors with messages containing \"timed out\"... a bit of a hack, but hopefully this will be functionality built into linkcheck soon.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dcac19446ca8fca2c74e3da0461d010043224a7", "html_url": "https://github.com/rust-lang/rust/commit/7dcac19446ca8fca2c74e3da0461d010043224a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dcac19446ca8fca2c74e3da0461d010043224a7/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db493ef613305c7bff31d3e1959b07c3ddbbe245", "url": "https://api.github.com/repos/rust-lang/rust/commits/db493ef613305c7bff31d3e1959b07c3ddbbe245", "html_url": "https://github.com/rust-lang/rust/commit/db493ef613305c7bff31d3e1959b07c3ddbbe245"}, {"sha": "bad8147d01df374e3daa37fe36446781df2eac2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bad8147d01df374e3daa37fe36446781df2eac2d", "html_url": "https://github.com/rust-lang/rust/commit/bad8147d01df374e3daa37fe36446781df2eac2d"}], "stats": {"total": 88, "additions": 54, "deletions": 34}, "files": [{"sha": "d5dc9a79b5acb5678113e37d77cc446b10425f9c", "filename": "src/tools/rustbook/src/main.rs", "status": "modified", "additions": 54, "deletions": 34, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/7dcac19446ca8fca2c74e3da0461d010043224a7/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dcac19446ca8fca2c74e3da0461d010043224a7/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs?ref=7dcac19446ca8fca2c74e3da0461d010043224a7", "patch": "@@ -1,18 +1,19 @@\n-use clap::{crate_version};\n+use clap::crate_version;\n \n use std::env;\n use std::path::{Path, PathBuf};\n \n-use clap::{App, ArgMatches, SubCommand, AppSettings};\n+use clap::{App, AppSettings, ArgMatches, SubCommand};\n \n+use mdbook::errors::Result as Result3;\n use mdbook::MDBook;\n-use mdbook::errors::{Result as Result3};\n \n+#[cfg(feature = \"linkcheck\")]\n+use failure::Error;\n #[cfg(feature = \"linkcheck\")]\n use mdbook::renderer::RenderContext;\n #[cfg(feature = \"linkcheck\")]\n use mdbook_linkcheck::{self, errors::BrokenLinks};\n-use failure::Error;\n \n fn main() {\n     let d_message = \"-d, --dest-dir=[dest-dir]\n@@ -21,18 +22,22 @@ fn main() {\n 'A directory for your book{n}(Defaults to Current Directory when omitted)'\";\n \n     let matches = App::new(\"rustbook\")\n-                    .about(\"Build a book with mdBook\")\n-                    .author(\"Steve Klabnik <steve@steveklabnik.com>\")\n-                    .version(&*format!(\"v{}\", crate_version!()))\n-                    .setting(AppSettings::SubcommandRequired)\n-                    .subcommand(SubCommand::with_name(\"build\")\n-                        .about(\"Build the book from the markdown files\")\n-                        .arg_from_usage(d_message)\n-                        .arg_from_usage(dir_message))\n-                    .subcommand(SubCommand::with_name(\"linkcheck\")\n-                        .about(\"Run linkcheck with mdBook 3\")\n-                        .arg_from_usage(dir_message))\n-                    .get_matches();\n+        .about(\"Build a book with mdBook\")\n+        .author(\"Steve Klabnik <steve@steveklabnik.com>\")\n+        .version(&*format!(\"v{}\", crate_version!()))\n+        .setting(AppSettings::SubcommandRequired)\n+        .subcommand(\n+            SubCommand::with_name(\"build\")\n+                .about(\"Build the book from the markdown files\")\n+                .arg_from_usage(d_message)\n+                .arg_from_usage(dir_message),\n+        )\n+        .subcommand(\n+            SubCommand::with_name(\"linkcheck\")\n+                .about(\"Run linkcheck with mdBook 3\")\n+                .arg_from_usage(dir_message),\n+        )\n+        .get_matches();\n \n     // Check which subcomamnd the user ran...\n     match matches.subcommand() {\n@@ -46,23 +51,44 @@ fn main() {\n \n                 ::std::process::exit(101);\n             }\n-        },\n+        }\n         (\"linkcheck\", Some(sub_matches)) => {\n-            if let Err(err) = linkcheck(sub_matches) {\n-                eprintln!(\"Error: {}\", err);\n-\n-                #[cfg(feature = \"linkcheck\")]\n-                {\n-                    if let Ok(broken_links) = err.downcast::<BrokenLinks>() {\n-                        for cause in broken_links.links().iter() {\n-                            eprintln!(\"\\tCaused By: {}\", cause);\n-                        }\n+            #[cfg(feature = \"linkcheck\")]\n+            {\n+                if let Err(err) = linkcheck(sub_matches) {\n+                    eprintln!(\"Error: {}\", err);\n+\n+                    // HACK: ignore timeouts\n+                    let actually_broken = err\n+                        .downcast::<BrokenLinks>()\n+                        .map(|broken_links| {\n+                            broken_links\n+                                .links()\n+                                .iter()\n+                                .inspect(|cause| eprintln!(\"\\tCaused By: {}\", cause))\n+                                .fold(false, |already_broken, cause| {\n+                                    already_broken || !format!(\"{}\", cause).contains(\"timed out\")\n+                                })\n+                        })\n+                        .unwrap_or(false);\n+\n+                    if actually_broken {\n+                        std::process::exit(101);\n+                    } else {\n+                        std::process::exit(0);\n                     }\n                 }\n+            }\n \n-                ::std::process::exit(101);\n+            #[cfg(not(feature = \"linkcheck\"))]\n+            {\n+                // This avoids the `unused_binding` lint.\n+                println!(\n+                    \"mdbook-linkcheck is disabled, but arguments were passed: {:?}\",\n+                    sub_matches\n+                );\n             }\n-        },\n+        }\n         (_, _) => unreachable!(),\n     };\n }\n@@ -77,12 +103,6 @@ pub fn linkcheck(args: &ArgMatches<'_>) -> Result<(), Error> {\n     mdbook_linkcheck::check_links(&render_ctx)\n }\n \n-#[cfg(not(feature = \"linkcheck\"))]\n-pub fn linkcheck(_args: &ArgMatches<'_>) -> Result<(), Error> {\n-    println!(\"mdbook-linkcheck is disabled.\");\n-    Ok(())\n-}\n-\n // Build command implementation\n pub fn build(args: &ArgMatches<'_>) -> Result3<()> {\n     let book_dir = get_book_dir(args);"}]}