{"sha": "30ae64e51fae5bfbe93199dd1795207444d9931f", "node_id": "C_kwDOAAsO6NoAKDMwYWU2NGU1MWZhZTViZmJlOTMxOTlkZDE3OTUyMDc0NDRkOTkzMWY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-07-03T15:49:06Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-08-30T17:05:33Z"}, "message": "Create a table for fn_has_self_parameter.", "tree": {"sha": "0aef19e088667389159b3fcf29ddb84e9bc3365c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0aef19e088667389159b3fcf29ddb84e9bc3365c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30ae64e51fae5bfbe93199dd1795207444d9931f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30ae64e51fae5bfbe93199dd1795207444d9931f", "html_url": "https://github.com/rust-lang/rust/commit/30ae64e51fae5bfbe93199dd1795207444d9931f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30ae64e51fae5bfbe93199dd1795207444d9931f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ddb9443116dca2fc0caedc616b9b297a9b4bea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ddb9443116dca2fc0caedc616b9b297a9b4bea4", "html_url": "https://github.com/rust-lang/rust/commit/1ddb9443116dca2fc0caedc616b9b297a9b4bea4"}], "stats": {"total": 32, "additions": 17, "deletions": 15}, "files": [{"sha": "b62aa95b254be41162da782110b1b793e17effb2", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/30ae64e51fae5bfbe93199dd1795207444d9931f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ae64e51fae5bfbe93199dd1795207444d9931f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=30ae64e51fae5bfbe93199dd1795207444d9931f", "patch": "@@ -1115,10 +1115,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     fn get_fn_has_self_parameter(self, id: DefIndex) -> bool {\n-        match self.kind(id) {\n-            EntryKind::AssocFn { has_self } => has_self,\n-            _ => false,\n-        }\n+        self.root.tables.fn_has_self_parameter.get(self, id).is_some()\n     }\n \n     fn get_associated_item_def_ids(\n@@ -1138,12 +1135,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     fn get_associated_item(self, id: DefIndex) -> ty::AssocItem {\n         let name = self.item_name(id);\n \n-        let (kind, has_self) = match self.kind(id) {\n-            EntryKind::AssocConst => (ty::AssocKind::Const, false),\n-            EntryKind::AssocFn { has_self } => (ty::AssocKind::Fn, has_self),\n-            EntryKind::AssocType => (ty::AssocKind::Type, false),\n+        let kind = match self.kind(id) {\n+            EntryKind::AssocConst => ty::AssocKind::Const,\n+            EntryKind::AssocFn => ty::AssocKind::Fn,\n+            EntryKind::AssocType => ty::AssocKind::Type,\n             _ => bug!(\"cannot get associated-item of `{:?}`\", self.def_key(id)),\n         };\n+        let has_self = self.get_fn_has_self_parameter(id);\n         let container = self.root.tables.assoc_container.get(self, id).unwrap();\n \n         ty::AssocItem {"}, {"sha": "65f93ce1a25dc87abc53be20081a12582235db11", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/30ae64e51fae5bfbe93199dd1795207444d9931f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ae64e51fae5bfbe93199dd1795207444d9931f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=30ae64e51fae5bfbe93199dd1795207444d9931f", "patch": "@@ -1344,9 +1344,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 };\n                 self.tables.asyncness.set(def_id.index, m_sig.header.asyncness);\n                 self.tables.constness.set(def_id.index, hir::Constness::NotConst);\n-                record!(self.tables.kind[def_id] <- EntryKind::AssocFn {\n-                    has_self: trait_item.fn_has_self_parameter,\n-                });\n+                if trait_item.fn_has_self_parameter {\n+                    self.tables.fn_has_self_parameter.set(def_id.index, ());\n+                }\n+                record!(self.tables.kind[def_id] <- EntryKind::AssocFn );\n             }\n             ty::AssocKind::Type => {\n                 self.encode_explicit_item_bounds(def_id);\n@@ -1382,9 +1383,10 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                     hir::Constness::NotConst\n                 };\n                 self.tables.constness.set(def_id.index, constness);\n-                record!(self.tables.kind[def_id] <- EntryKind::AssocFn {\n-                    has_self: impl_item.fn_has_self_parameter,\n-                });\n+                if impl_item.fn_has_self_parameter {\n+                    self.tables.fn_has_self_parameter.set(def_id.index, ());\n+                }\n+                record!(self.tables.kind[def_id] <- EntryKind::AssocFn);\n             }\n             ty::AssocKind::Type => {\n                 record!(self.tables.kind[def_id] <- EntryKind::AssocType);"}, {"sha": "f32fed6ec476ef3539a74246364b378fc89ba707", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/30ae64e51fae5bfbe93199dd1795207444d9931f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30ae64e51fae5bfbe93199dd1795207444d9931f/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=30ae64e51fae5bfbe93199dd1795207444d9931f", "patch": "@@ -397,6 +397,8 @@ define_tables! {\n     assoc_container: Table<DefIndex, ty::AssocItemContainer>,\n     macro_definition: Table<DefIndex, LazyValue<ast::MacroDef>>,\n     proc_macro: Table<DefIndex, MacroKind>,\n+    // Slot is full when there is a self parameter.\n+    fn_has_self_parameter: Table<DefIndex, ()>,\n }\n \n #[derive(Copy, Clone, MetadataEncodable, MetadataDecodable)]\n@@ -426,7 +428,7 @@ enum EntryKind {\n     Generator,\n     Trait,\n     Impl,\n-    AssocFn { has_self: bool },\n+    AssocFn,\n     AssocType,\n     AssocConst,\n     TraitAlias,"}]}