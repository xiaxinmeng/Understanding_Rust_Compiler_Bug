{"sha": "df2f45c1d30615c930b7aa76bb9efbeea3909703", "node_id": "C_kwDOAAsO6NoAKGRmMmY0NWMxZDMwNjE1YzkzMGI3YWE3NmJiOWVmYmVlYTM5MDk3MDM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-19T00:24:56Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-19T00:24:56Z"}, "message": "Auto merge of #92090 - matthiaskrgr:rollup-pbyqddi, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #91834 (Update browser-ui-test version and improve rustdoc-gui tests readability)\n - #91894 (Remove `in_band_lifetimes` from `rustc_incremental`)\n - #91932 (Add user seed to `-Z randomize-layout`)\n - #91956 (fix(rustc_lint): better detect when parens are necessary)\n - #92020 (Remove P: Unpin bound on impl Stream for Pin)\n - #92063 (docs: fix typo)\n - #92082 (rustdoc: Write doc-comments directly instead of using FromIterator)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "dd3cda85ef00c342e688738f96d8a86d77b14052", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd3cda85ef00c342e688738f96d8a86d77b14052"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df2f45c1d30615c930b7aa76bb9efbeea3909703", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df2f45c1d30615c930b7aa76bb9efbeea3909703", "html_url": "https://github.com/rust-lang/rust/commit/df2f45c1d30615c930b7aa76bb9efbeea3909703", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df2f45c1d30615c930b7aa76bb9efbeea3909703/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daf2204aa4954a9426cee93eb1baa2b26eb69070", "url": "https://api.github.com/repos/rust-lang/rust/commits/daf2204aa4954a9426cee93eb1baa2b26eb69070", "html_url": "https://github.com/rust-lang/rust/commit/daf2204aa4954a9426cee93eb1baa2b26eb69070"}, {"sha": "d486e68ab29a8c5ba2e776a0ff74a760fd3edf19", "url": "https://api.github.com/repos/rust-lang/rust/commits/d486e68ab29a8c5ba2e776a0ff74a760fd3edf19", "html_url": "https://github.com/rust-lang/rust/commit/d486e68ab29a8c5ba2e776a0ff74a760fd3edf19"}], "stats": {"total": 473, "additions": 374, "deletions": 99}, "files": [{"sha": "4691cdd64c10deaaed0823df149258c3696a996f", "filename": "compiler/rustc_incremental/src/assert_dep_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_dep_graph.rs?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -103,7 +103,7 @@ struct IfThisChanged<'tcx> {\n     then_this_would_need: Targets,\n }\n \n-impl IfThisChanged<'tcx> {\n+impl<'tcx> IfThisChanged<'tcx> {\n     fn argument(&self, attr: &ast::Attribute) -> Option<Symbol> {\n         let mut value = None;\n         for list_item in attr.meta_item_list().unwrap_or_default() {\n@@ -172,7 +172,7 @@ impl IfThisChanged<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for IfThisChanged<'tcx> {\n+impl<'tcx> Visitor<'tcx> for IfThisChanged<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "b5974f8fb768f587a9c9a99cfbb44fe82af86247", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -56,7 +56,7 @@ struct AssertModuleSource<'tcx> {\n     available_cgus: BTreeSet<String>,\n }\n \n-impl AssertModuleSource<'tcx> {\n+impl<'tcx> AssertModuleSource<'tcx> {\n     fn check_attr(&self, attr: &ast::Attribute) {\n         let (expected_reuse, comp_kind) = if attr.has_name(sym::rustc_partition_reused) {\n             (CguReuse::PreLto, ComparisonKind::AtLeast)"}, {"sha": "df64534ce54d924ae0c6bcb427d9e08502f7b100", "filename": "compiler/rustc_incremental/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/compiler%2Frustc_incremental%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Flib.rs?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -2,7 +2,6 @@\n \n #![deny(missing_docs)]\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n-#![feature(in_band_lifetimes)]\n #![feature(let_else)]\n #![feature(nll)]\n #![recursion_limit = \"256\"]"}, {"sha": "7ac00b4609aaf92efe2b2aaee926d97bc46a8271", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -155,7 +155,7 @@ pub struct DirtyCleanVisitor<'tcx> {\n     checked_attrs: FxHashSet<ast::AttrId>,\n }\n \n-impl DirtyCleanVisitor<'tcx> {\n+impl<'tcx> DirtyCleanVisitor<'tcx> {\n     /// Possibly \"deserialize\" the attribute into a clean/dirty assertion\n     fn assertion_maybe(&mut self, item_id: LocalDefId, attr: &Attribute) -> Option<Assertion> {\n         if !attr.has_name(sym::rustc_clean) {\n@@ -352,7 +352,7 @@ impl DirtyCleanVisitor<'tcx> {\n     }\n }\n \n-impl ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'tcx> {\n+impl<'tcx> ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         self.check_item(item.def_id, item.span);\n     }\n@@ -415,7 +415,7 @@ pub struct FindAllAttrs<'tcx> {\n     found_attrs: Vec<&'tcx Attribute>,\n }\n \n-impl FindAllAttrs<'tcx> {\n+impl<'tcx> FindAllAttrs<'tcx> {\n     fn is_active_attr(&mut self, attr: &Attribute) -> bool {\n         if attr.has_name(sym::rustc_clean) && check_config(self.tcx, attr) {\n             return true;\n@@ -434,7 +434,7 @@ impl FindAllAttrs<'tcx> {\n     }\n }\n \n-impl intravisit::Visitor<'tcx> for FindAllAttrs<'tcx> {\n+impl<'tcx> intravisit::Visitor<'tcx> for FindAllAttrs<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {"}, {"sha": "8e1c9b6394a7404d2e2ac588608146354031749a", "filename": "compiler/rustc_lint/src/unused.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/compiler%2Frustc_lint%2Fsrc%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Funused.rs?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -478,8 +478,11 @@ trait UnusedDelimLint {\n \n         lhs_needs_parens\n             || (followed_by_block\n-                && match inner.kind {\n+                && match &inner.kind {\n                     ExprKind::Ret(_) | ExprKind::Break(..) | ExprKind::Yield(..) => true,\n+                    ExprKind::Range(_lhs, Some(rhs), _limits) => {\n+                        matches!(rhs.kind, ExprKind::Block(..))\n+                    }\n                     _ => parser::contains_exterior_struct_lit(&inner),\n                 })\n     }"}, {"sha": "727c0ba63cbb64b30511df583c8af65656bc43b7", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -347,10 +347,6 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n         let mut inverse_memory_index: Vec<u32> = (0..fields.len() as u32).collect();\n \n-        // `ReprOptions.layout_seed` is a deterministic seed that we can use to\n-        // randomize field ordering with\n-        let mut rng = Xoshiro128StarStar::seed_from_u64(repr.field_shuffle_seed);\n-\n         let optimize = !repr.inhibit_struct_field_reordering_opt();\n         if optimize {\n             let end =\n@@ -364,6 +360,10 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n             // the field ordering to try and catch some code making assumptions about layouts\n             // we don't guarantee\n             if repr.can_randomize_type_layout() {\n+                // `ReprOptions.layout_seed` is a deterministic seed that we can use to\n+                // randomize field ordering with\n+                let mut rng = Xoshiro128StarStar::seed_from_u64(repr.field_shuffle_seed);\n+\n                 // Shuffle the ordering of the fields\n                 optimizing.shuffle(&mut rng);\n "}, {"sha": "10232dc9cb60e01e44666b26691b43997ff9267e", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -1608,9 +1608,9 @@ bitflags! {\n         // the seed stored in `ReprOptions.layout_seed`\n         const RANDOMIZE_LAYOUT   = 1 << 5;\n         // Any of these flags being set prevent field reordering optimisation.\n-        const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits |\n-                                   ReprFlags::IS_SIMD.bits |\n-                                   ReprFlags::IS_LINEAR.bits;\n+        const IS_UNOPTIMISABLE   = ReprFlags::IS_C.bits\n+                                 | ReprFlags::IS_SIMD.bits\n+                                 | ReprFlags::IS_LINEAR.bits;\n     }\n }\n \n@@ -1640,7 +1640,14 @@ impl ReprOptions {\n \n         // Generate a deterministically-derived seed from the item's path hash\n         // to allow for cross-crate compilation to actually work\n-        let field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();\n+        let mut field_shuffle_seed = tcx.def_path_hash(did).0.to_smaller_hash();\n+\n+        // If the user defined a custom seed for layout randomization, xor the item's\n+        // path hash with the user defined seed, this will allowing determinism while\n+        // still allowing users to further randomize layout generation for e.g. fuzzing\n+        if let Some(user_seed) = tcx.sess.opts.debugging_opts.layout_seed {\n+            field_shuffle_seed ^= user_seed;\n+        }\n \n         for attr in tcx.get_attrs(did).iter() {\n             for r in attr::find_repr_attrs(&tcx.sess, attr) {"}, {"sha": "9090524c93396f47f72e17e815a7cfd85ff89149", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -1321,6 +1321,8 @@ options! {\n         \"print some statistics about the query system (default: no)\"),\n     randomize_layout: bool = (false, parse_bool, [TRACKED],\n         \"randomize the layout of types (default: no)\"),\n+    layout_seed: Option<u64> = (None, parse_opt_number, [TRACKED],\n+        \"seed layout randomization\"),\n     relax_elf_relocations: Option<bool> = (None, parse_opt_bool, [TRACKED],\n         \"whether ELF relocations can be relaxed\"),\n     relro_level: Option<RelroLevel> = (None, parse_relro_level, [TRACKED],"}, {"sha": "63234ee91f091096568443b861b55d3d52d4dd50", "filename": "library/alloc/src/borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/library%2Falloc%2Fsrc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/library%2Falloc%2Fsrc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fborrow.rs?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -170,7 +170,7 @@ where\n /// clone_on_write.values.to_mut().push(3);\n /// println!(\"clone_on_write = {:?}\", clone_on_write.values);\n ///\n-/// // The data was mutated. Let check it out.\n+/// // The data was mutated. Let's check it out.\n /// match clone_on_write {\n ///     Items { values: Cow::Owned(_) } => println!(\"clone_on_write contains owned data\"),\n ///     _ => panic!(\"expect owned data\"),"}, {"sha": "2cfddf9ad013d7366f0a098887034ed49ce58def", "filename": "library/core/src/stream/stream.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/library%2Fcore%2Fsrc%2Fstream%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/library%2Fcore%2Fsrc%2Fstream%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstream%2Fstream.rs?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -95,13 +95,13 @@ impl<S: ?Sized + Stream + Unpin> Stream for &mut S {\n #[unstable(feature = \"async_stream\", issue = \"79024\")]\n impl<P> Stream for Pin<P>\n where\n-    P: DerefMut + Unpin,\n+    P: DerefMut,\n     P::Target: Stream,\n {\n     type Item = <P::Target as Stream>::Item;\n \n     fn poll_next(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Option<Self::Item>> {\n-        self.get_mut().as_mut().poll_next(cx)\n+        <P::Target as Stream>::poll_next(self.as_deref_mut(), cx)\n     }\n \n     fn size_hint(&self) -> (usize, Option<usize>) {"}, {"sha": "6e77bb0a09b9e9a32f894eadabc75d106632ff8e", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2FDockerfile?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -72,7 +72,7 @@ ENV PATH=\"/node-v14.4.0-linux-x64/bin:${PATH}\"\n # https://github.com/puppeteer/puppeteer/issues/375\n #\n # We also specify the version in case we need to update it to go around cache limitations.\n-RUN npm install -g browser-ui-test@0.5.0 --unsafe-perm=true\n+RUN npm install -g browser-ui-test@0.5.1 --unsafe-perm=true\n \n ENV RUST_CONFIGURE_ARGS \\\n   --build=x86_64-unknown-linux-gnu \\"}, {"sha": "2bd90f67cf4af64f09cf1e5db6d0a4e7eb9fd246", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -1,7 +1,6 @@\n use std::cell::RefCell;\n use std::default::Default;\n use std::hash::{Hash, Hasher};\n-use std::iter::FromIterator;\n use std::lazy::SyncOnceCell as OnceCell;\n use std::path::PathBuf;\n use std::rc::Rc;\n@@ -958,16 +957,14 @@ fn add_doc_fragment(out: &mut String, frag: &DocFragment) {\n     }\n }\n \n-impl<'a> FromIterator<&'a DocFragment> for String {\n-    fn from_iter<T>(iter: T) -> Self\n-    where\n-        T: IntoIterator<Item = &'a DocFragment>,\n-    {\n-        iter.into_iter().fold(String::new(), |mut acc, frag| {\n-            add_doc_fragment(&mut acc, frag);\n-            acc\n-        })\n+/// Collapse a collection of [`DocFragment`]s into one string,\n+/// handling indentation and newlines as needed.\n+crate fn collapse_doc_fragments(doc_strings: &[DocFragment]) -> String {\n+    let mut acc = String::new();\n+    for frag in doc_strings {\n+        add_doc_fragment(&mut acc, frag);\n     }\n+    acc\n }\n \n /// A link that has not yet been rendered.\n@@ -1113,7 +1110,11 @@ impl Attributes {\n     /// Finds all `doc` attributes as NameValues and returns their corresponding values, joined\n     /// with newlines.\n     crate fn collapsed_doc_value(&self) -> Option<String> {\n-        if self.doc_strings.is_empty() { None } else { Some(self.doc_strings.iter().collect()) }\n+        if self.doc_strings.is_empty() {\n+            None\n+        } else {\n+            Some(collapse_doc_fragments(&self.doc_strings))\n+        }\n     }\n \n     crate fn get_doc_aliases(&self) -> Box<[Symbol]> {"}, {"sha": "3d3d2e50321d9df44d269d211d6ba6fbe9598a4a", "filename": "src/librustdoc/passes/unindent_comments/tests.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Funindent_comments%2Ftests.rs?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -1,4 +1,7 @@\n use super::*;\n+\n+use crate::clean::collapse_doc_fragments;\n+\n use rustc_span::create_default_session_globals_then;\n use rustc_span::source_map::DUMMY_SP;\n use rustc_span::symbol::Symbol;\n@@ -19,7 +22,7 @@ fn run_test(input: &str, expected: &str) {\n     create_default_session_globals_then(|| {\n         let mut s = create_doc_fragment(input);\n         unindent_fragments(&mut s);\n-        assert_eq!(&s.iter().collect::<String>(), expected);\n+        assert_eq!(collapse_doc_fragments(&s), expected);\n     });\n }\n "}, {"sha": "2216b3f1c972843297857bd5af889e3344b8d731", "filename": "src/test/rustdoc-gui/anchors.goml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fanchors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fanchors.goml?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -34,15 +34,15 @@ assert-css: (\"#impl a.anchor\", {\"color\": \"rgb(0, 0, 0)\"})\n move-cursor-to: \".top-doc .docblock .section-header:first-child\"\n assert-css: (\n     \".top-doc .docblock .section-header:first-child > a::before\",\n-    {\"left\": \"-10px\", \"padding-right\": \"10px\"}\n+    {\"left\": \"-10px\", \"padding-right\": \"10px\"},\n )\n // We also check that the heading itself has a different indent.\n assert-css: (\".top-doc .docblock .section-header:first-child\", {\"margin-left\": \"15px\"})\n \n move-cursor-to: \".top-doc .docblock .section-header:not(:first-child)\"\n assert-css: (\n     \".top-doc .docblock .section-header:not(:first-child) > a::before\",\n-    {\"left\": \"-25px\", \"padding-right\": \"10px\"}\n+    {\"left\": \"-25px\", \"padding-right\": \"10px\"},\n )\n assert-css: (\".top-doc .docblock .section-header:not(:first-child)\", {\"margin-left\": \"0px\"})\n \n@@ -51,14 +51,14 @@ assert-css: (\".top-doc .docblock .section-header:not(:first-child)\", {\"margin-le\n move-cursor-to: \"#title-for-struct-impl-doc\"\n assert-css: (\n     \"#title-for-struct-impl-doc > a::before\",\n-    {\"left\": \"-25px\", \"padding-right\": \"10px\"}\n+    {\"left\": \"-25px\", \"padding-right\": \"10px\"},\n )\n assert-css: (\"#title-for-struct-impl-doc\", {\"margin-left\": \"0px\"})\n // Now a method docs.\n move-cursor-to: \"#title-for-struct-impl-item-doc\"\n assert-css: (\n     \"#title-for-struct-impl-item-doc > a::before\",\n-    {\"left\": \"-25px\", \"padding-right\": \"10px\"}\n+    {\"left\": \"-25px\", \"padding-right\": \"10px\"},\n )\n assert-css: (\"#title-for-struct-impl-item-doc\", {\"margin-left\": \"0px\"})\n \n@@ -69,6 +69,6 @@ goto: file://|DOC_PATH|/test_docs/enum.WhoLetTheDogOut.html\n move-cursor-to: \".top-doc .docblock .section-header\"\n assert-css: (\n     \".top-doc .docblock .section-header > a::before\",\n-    {\"left\": \"-25px\", \"padding-right\": \"10px\"}\n+    {\"left\": \"-25px\", \"padding-right\": \"10px\"},\n )\n assert-css: (\".top-doc .docblock .section-header\", {\"margin-left\": \"0px\"})"}, {"sha": "baf9651c40de39125595daa4de2a2d15f2ec6e00", "filename": "src/test/rustdoc-gui/docblock-code-block-line-number.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-code-block-line-number.goml?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -16,7 +16,7 @@ wait-for: \"pre.line-number\"\n assert-css: (\"pre.line-number\", {\n     \"margin\": \"0px\",\n     \"padding\": \"13px 8px\",\n-    \"text-align\": \"right\"\n+    \"text-align\": \"right\",\n })\n // The first code block has two lines so let's check its `<pre>` elements lists both of them.\n assert-text: (\"pre.line-number\", \"1\\n2\")"}, {"sha": "1b3006155d8b632a7c9314667a0011d6378a4fa4", "filename": "src/test/rustdoc-gui/docblock-table-overflow.goml", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fdocblock-table-overflow.goml?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -11,7 +11,11 @@ assert-property: (\".top-doc .docblock table\", {\"scrollWidth\": \"1573\"})\n // Checking it works on other doc blocks as well...\n \n // Logically, the \".docblock\" and the \"<p>\" should have the same scroll width.\n-compare-elements-property: (\"#implementations + details .docblock\", \"#implementations + details .docblock > p\", [\"scrollWidth\"])\n+compare-elements-property: (\n+    \"#implementations + details .docblock\",\n+    \"#implementations + details .docblock > p\",\n+    [\"scrollWidth\"],\n+)\n assert-property: (\"#implementations + details .docblock\", {\"scrollWidth\": \"816\"})\n // However, since there is overflow in the <table>, its scroll width is bigger.\n assert-property: (\"#implementations + details .docblock table\", {\"scrollWidth\": \"1573\"})"}, {"sha": "c9117e2c101d7def38bde591113bac8e0022fff0", "filename": "src/test/rustdoc-gui/font-weight.goml", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Ffont-weight.goml?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -1,7 +1,10 @@\n goto: file://|DOC_PATH|/lib2/struct.Foo.html\n // This test checks that the font weight is correctly applied.\n assert-css: (\"//*[@class='docblock item-decl']//a[text()='Alias']\", {\"font-weight\": \"400\"})\n-assert-css: (\"//*[@class='structfield small-section-header']//a[text()='Alias']\", {\"font-weight\": \"400\"})\n+assert-css: (\n+    \"//*[@class='structfield small-section-header']//a[text()='Alias']\",\n+    {\"font-weight\": \"400\"},\n+)\n assert-css: (\"#method\\.a_method > .code-header\", {\"font-weight\": \"600\"})\n assert-css: (\"#associatedtype\\.X > .code-header\", {\"font-weight\": \"600\"})\n assert-css: (\"#associatedconstant\\.Y > .code-header\", {\"font-weight\": \"600\"})\n@@ -25,8 +28,14 @@ goto: file://|DOC_PATH|/lib2/trait.Trait.html\n //\n // This uses '/parent::*' as a proxy for the style of the text node.\n // We can't just select the '<a>' because intermediate tags could be added.\n-assert-count: (\"//*[@class='docblock item-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\", 1)\n-assert-css: (\"//*[@class='docblock item-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\", {\"font-weight\": \"400\"})\n+assert-count: (\n+    \"//*[@class='docblock item-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\",\n+    1,\n+)\n+assert-css: (\n+    \"//*[@class='docblock item-decl']/pre[@class='rust trait']/code/a[@class='constant']//text()/parent::*\",\n+    {\"font-weight\": \"400\"},\n+)\n \n assert-count: (\".methods .type\", 1)\n assert-css: (\".methods .type\", {\"font-weight\": \"600\"})"}, {"sha": "d58ca13a6291fbc855f3e3ae158a27d54485c5de", "filename": "src/test/rustdoc-gui/headers-color.goml", "status": "modified", "additions": 63, "deletions": 13, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fheaders-color.goml?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -5,17 +5,36 @@ goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n show-text: true\n \n // Ayu theme\n-local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-preferred-dark-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n+local-storage: {\n+    \"rustdoc-theme\": \"ayu\",\n+    \"rustdoc-preferred-dark-theme\": \"ayu\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n reload:\n \n-assert-css: (\".impl\", {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(0, 0, 0, 0)\"}, ALL)\n-assert-css: (\".impl .code-header\", {\"color\": \"rgb(230, 225, 207)\", \"background-color\": \"rgb(15, 20, 25)\"}, ALL)\n+assert-css: (\n+    \".impl\",\n+    {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+    ALL,\n+)\n+assert-css: (\n+    \".impl .code-header\",\n+    {\"color\": \"rgb(230, 225, 207)\", \"background-color\": \"rgb(15, 20, 25)\"},\n+    ALL,\n+)\n \n goto: file://|DOC_PATH|/test_docs/struct.Foo.html#impl\n-assert-css: (\"#impl\", {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(255, 236, 164, 0.06)\"})\n+assert-css: (\n+    \"#impl\",\n+    {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(255, 236, 164, 0.06)\"},\n+)\n \n goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.must_use\n-assert-css: (\"#method\\.must_use\", {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(255, 236, 164, 0.06)\"}, ALL)\n+assert-css: (\n+    \"#method\\.must_use\",\n+    {\"color\": \"rgb(197, 197, 197)\", \"background-color\": \"rgba(255, 236, 164, 0.06)\"},\n+    ALL,\n+)\n \n goto: file://|DOC_PATH|/test_docs/index.html\n assert-css: (\".small-section-header a\", {\"color\": \"rgb(197, 197, 197)\"}, ALL)\n@@ -24,17 +43,36 @@ goto: file://|DOC_PATH|/test_docs/struct.HeavilyDocumentedStruct.html\n assert-css: (\".section-header a\", {\"color\": \"rgb(57, 175, 215)\"}, ALL)\n \n // Dark theme\n-local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-preferred-dark-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+local-storage: {\n+    \"rustdoc-theme\": \"dark\",\n+    \"rustdoc-preferred-dark-theme\": \"dark\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n \n-assert-css: (\".impl\", {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"}, ALL)\n-assert-css: (\".impl .code-header\", {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(53, 53, 53)\"}, ALL)\n+assert-css: (\n+    \".impl\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+    ALL,\n+)\n+assert-css: (\n+    \".impl .code-header\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(53, 53, 53)\"},\n+    ALL,\n+)\n \n goto: file://|DOC_PATH|/test_docs/struct.Foo.html#impl\n-assert-css: (\"#impl\", {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(73, 74, 61)\"})\n+assert-css: (\n+    \"#impl\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(73, 74, 61)\"},\n+)\n \n goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.must_use\n-assert-css: (\"#method\\.must_use\", {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(73, 74, 61)\"}, ALL)\n+assert-css: (\n+    \"#method\\.must_use\",\n+    {\"color\": \"rgb(221, 221, 221)\", \"background-color\": \"rgb(73, 74, 61)\"},\n+    ALL,\n+)\n \n goto: file://|DOC_PATH|/test_docs/index.html\n assert-css: (\".small-section-header a\", {\"color\": \"rgb(221, 221, 221)\"}, ALL)\n@@ -48,14 +86,26 @@ reload:\n \n goto: file://|DOC_PATH|/test_docs/struct.Foo.html\n \n-assert-css: (\".impl\", {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"}, ALL)\n-assert-css: (\".impl .code-header\", {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(255, 255, 255)\"}, ALL)\n+assert-css: (\n+    \".impl\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgba(0, 0, 0, 0)\"},\n+    ALL,\n+)\n+assert-css: (\n+    \".impl .code-header\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(255, 255, 255)\"},\n+    ALL,\n+)\n \n goto: file://|DOC_PATH|/test_docs/struct.Foo.html#impl\n assert-css: (\"#impl\", {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(253, 255, 211)\"})\n \n goto: file://|DOC_PATH|/test_docs/struct.Foo.html#method.must_use\n-assert-css: (\"#method\\.must_use\", {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(253, 255, 211)\"}, ALL)\n+assert-css: (\n+    \"#method\\.must_use\",\n+    {\"color\": \"rgb(0, 0, 0)\", \"background-color\": \"rgb(253, 255, 211)\"},\n+    ALL,\n+)\n \n goto: file://|DOC_PATH|/test_docs/index.html\n assert-css: (\".small-section-header a\", {\"color\": \"rgb(0, 0, 0)\"}, ALL)"}, {"sha": "4f7fe7a212c923628f60dd76c8aa84b6a1348a98", "filename": "src/test/rustdoc-gui/huge-collection-of-constants.goml", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fhuge-collection-of-constants.goml", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fhuge-collection-of-constants.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fhuge-collection-of-constants.goml?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -2,4 +2,8 @@ goto: file://|DOC_PATH|/test_docs/huge_amount_of_consts/index.html\n \n // Make sure that the last two entries are more than 12 pixels apart and not stacked on each other.\n \n-compare-elements-position-near-false: (\"//*[@class='item-table']//div[last()-1]\", \"//*[@class='item-table']//div[last()-3]\", {\"y\": 12})\n+compare-elements-position-near-false: (\n+    \"//*[@class='item-table']//div[last()-1]\",\n+    \"//*[@class='item-table']//div[last()-3]\",\n+    {\"y\": 12},\n+)"}, {"sha": "d17400f5bd9e8b7ba281d8cac5d293d99861d811", "filename": "src/test/rustdoc-gui/jump-to-def-background.goml", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fjump-to-def-background.goml", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fjump-to-def-background.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fjump-to-def-background.goml?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -2,22 +2,42 @@\n goto: file://|DOC_PATH|/src/link_to_definition/lib.rs.html\n \n // Set the theme to dark.\n-local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-preferred-dark-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+local-storage: {\n+    \"rustdoc-theme\": \"dark\",\n+    \"rustdoc-preferred-dark-theme\": \"dark\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n // We reload the page so the local storage settings are being used.\n reload:\n \n-assert-css: (\"body.source .example-wrap pre.rust a\", {\"background-color\": \"rgb(51, 51, 51)\"}, ALL)\n+assert-css: (\n+    \"body.source .example-wrap pre.rust a\",\n+    {\"background-color\": \"rgb(51, 51, 51)\"},\n+    ALL,\n+)\n \n // Set the theme to ayu.\n-local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-preferred-dark-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n+local-storage: {\n+    \"rustdoc-theme\": \"ayu\",\n+    \"rustdoc-preferred-dark-theme\": \"ayu\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n // We reload the page so the local storage settings are being used.\n reload:\n \n-assert-css: (\"body.source .example-wrap pre.rust a\", {\"background-color\": \"rgb(51, 51, 51)\"}, ALL)\n+assert-css: (\n+    \"body.source .example-wrap pre.rust a\",\n+    {\"background-color\": \"rgb(51, 51, 51)\"},\n+    ALL,\n+)\n \n // Set the theme to light.\n local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n // We reload the page so the local storage settings are being used.\n reload:\n \n-assert-css: (\"body.source .example-wrap pre.rust a\", {\"background-color\": \"rgb(238, 238, 238)\"}, ALL)\n+assert-css: (\n+    \"body.source .example-wrap pre.rust a\",\n+    {\"background-color\": \"rgb(238, 238, 238)\"},\n+    ALL,\n+)"}, {"sha": "ca3994a08b269deac3346dfbabf3d410fa521598", "filename": "src/test/rustdoc-gui/label-next-to-symbol.goml", "status": "modified", "additions": 53, "deletions": 11, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Flabel-next-to-symbol.goml", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Flabel-next-to-symbol.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Flabel-next-to-symbol.goml?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -8,29 +8,71 @@ assert: (\".stab.deprecated\")\n assert: (\".stab.portability\")\n \n // make sure that deprecated and portability are different colours\n-assert-css: (\".item-table .item-left .stab.deprecated\", { \"background-color\": \"rgb(255, 196, 196)\" })\n-assert-css: (\".item-table .item-left .stab.portability\", { \"background-color\": \"rgb(243, 223, 255)\" })\n+assert-css: (\n+    \".item-table .item-left .stab.deprecated\",\n+    { \"background-color\": \"rgb(255, 196, 196)\" },\n+)\n+assert-css: (\n+    \".item-table .item-left .stab.portability\",\n+    { \"background-color\": \"rgb(243, 223, 255)\" },\n+)\n \n // table like view\n assert-css: (\".item-right.docblock-short\", { \"padding-left\": \"0px\" })\n-compare-elements-position-near: (\"//*[@class='item-left module-item']//a[text()='replaced_function']\", \".item-left .stab.deprecated\", {\"y\": 2})\n-compare-elements-position: (\".item-left .stab.deprecated\", \".item-left .stab.portability\", (\"y\"))\n+compare-elements-position-near: (\n+    \"//*[@class='item-left module-item']//a[text()='replaced_function']\",\n+    \".item-left .stab.deprecated\",\n+    {\"y\": 2},\n+)\n+compare-elements-position: (\n+    \".item-left .stab.deprecated\",\n+    \".item-left .stab.portability\",\n+    (\"y\"),\n+)\n \n // Ensure no wrap\n-compare-elements-position-near: (\"//*[@class='item-left module-item']//a[text()='replaced_function']\", \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']\", {\"y\": 2})\n+compare-elements-position-near: (\n+    \"//*[@class='item-left module-item']//a[text()='replaced_function']\",\n+    \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']\",\n+    {\"y\": 2},\n+)\n // compare parent elements\n-compare-elements-position: (\"//*[@class='item-left module-item']//a[text()='replaced_function']/..\", \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']/..\", (\"y\"))\n+compare-elements-position: (\n+    \"//*[@class='item-left module-item']//a[text()='replaced_function']/..\",\n+    \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']/..\",\n+    (\"y\"),\n+)\n \n \n // Mobile view\n size: (600, 600)\n // staggered layout with 2em spacing\n assert-css: (\".item-right.docblock-short\", { \"padding-left\": \"32px\" })\n-compare-elements-position-near: (\"//*[@class='item-left module-item']//a[text()='replaced_function']\", \".item-left .stab.deprecated\", {\"y\": 1})\n-compare-elements-position: (\".item-left .stab.deprecated\", \".item-left .stab.portability\", (\"y\"))\n+compare-elements-position-near: (\n+    \"//*[@class='item-left module-item']//a[text()='replaced_function']\",\n+    \".item-left .stab.deprecated\",\n+    {\"y\": 1},\n+)\n+compare-elements-position: (\n+    \".item-left .stab.deprecated\",\n+    \".item-left .stab.portability\",\n+    (\"y\"),\n+)\n \n // Ensure wrap\n-compare-elements-position-near-false: (\"//*[@class='item-left module-item']//a[text()='replaced_function']\", \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']\", {\"y\": 12})\n+compare-elements-position-near-false: (\n+    \"//*[@class='item-left module-item']//a[text()='replaced_function']\",\n+    \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']\",\n+    {\"y\": 12},\n+)\n // compare parent elements\n-compare-elements-position-false: (\"//*[@class='item-left module-item']//a[text()='replaced_function']/..\", \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']/..\", (\"y\"))\n-compare-elements-position-false: (\".item-left .stab.deprecated\", \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']\", (\"y\"))\n+compare-elements-position-false: (\n+    \"//*[@class='item-left module-item']//a[text()='replaced_function']/..\",\n+    \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']/..\",\n+    (\"y\"),\n+)\n+compare-elements-position-false: (\n+    \".item-left .stab.deprecated\",\n+    \"//*[@class='item-right docblock-short']//p[text()='a thing with a label']\",\n+    (\"y\"),\n+)"}, {"sha": "758ee391ae42b3b02224f61ad4c101c880204509", "filename": "src/test/rustdoc-gui/module-items-font.goml", "status": "modified", "additions": 58, "deletions": 14, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fmodule-items-font.goml", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fmodule-items-font.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fmodule-items-font.goml?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -1,23 +1,67 @@\n // This test checks that the correct font is used on module items (in index.html pages).\n goto: file://|DOC_PATH|/test_docs/index.html\n-assert-css: (\".item-table .module-item a\", {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'}, ALL)\n-assert-css: (\".item-table .docblock-short\", {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'}, ALL)\n+assert-css: (\n+    \".item-table .module-item a\",\n+    {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'},\n+    ALL,\n+)\n+assert-css: (\n+    \".item-table .docblock-short\",\n+    {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'},\n+    ALL,\n+)\n \n // modules\n-assert-css: (\"#modules + .item-table .item-left a\", {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'})\n-assert-css: (\"#modules + .item-table .item-right.docblock-short\", {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'})\n+assert-css: (\n+    \"#modules + .item-table .item-left a\",\n+    {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'},\n+)\n+assert-css: (\n+    \"#modules + .item-table .item-right.docblock-short\",\n+    {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'},\n+)\n // structs\n-assert-css: (\"#structs + .item-table .item-left a\", {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'})\n-assert-css: (\"#structs + .item-table .item-right.docblock-short\", {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'})\n+assert-css: (\n+    \"#structs + .item-table .item-left a\",\n+    {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'},\n+)\n+assert-css: (\n+    \"#structs + .item-table .item-right.docblock-short\",\n+    {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'},\n+)\n // enums\n-assert-css: (\"#enums + .item-table .item-left a\", {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'})\n-assert-css: (\"#enums + .item-table .item-right.docblock-short\", {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'})\n+assert-css: (\n+    \"#enums + .item-table .item-left a\",\n+    {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'},\n+)\n+assert-css: (\n+    \"#enums + .item-table .item-right.docblock-short\",\n+    {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'},\n+)\n // traits\n-assert-css: (\"#traits + .item-table .item-left a\", {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'})\n-assert-css: (\"#traits + .item-table .item-right.docblock-short\", {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'})\n+assert-css: (\n+    \"#traits + .item-table .item-left a\",\n+    {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'},\n+)\n+assert-css: (\n+    \"#traits + .item-table .item-right.docblock-short\",\n+    {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'},\n+)\n // functions\n-assert-css: (\"#functions + .item-table .item-left a\", {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'})\n-assert-css: (\"#functions + .item-table .item-right.docblock-short\", {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'})\n+assert-css: (\n+    \"#functions + .item-table .item-left a\",\n+    {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'},\n+)\n+assert-css: (\n+    \"#functions + .item-table .item-right.docblock-short\",\n+    {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'},\n+)\n // keywords\n-assert-css: (\"#keywords + .item-table .item-left a\", {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'})\n-assert-css: (\"#keywords + .item-table .item-right.docblock-short\", {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'})\n+assert-css: (\n+    \"#keywords + .item-table .item-left a\",\n+    {\"font-family\": '\"Fira Sans\", Arial, NanumBarunGothic, sans-serif'},\n+)\n+assert-css: (\n+    \"#keywords + .item-table .item-right.docblock-short\",\n+    {\"font-family\": '\"Source Serif 4\", NanumBarunGothic, serif'},\n+)"}, {"sha": "ffa9362755dd7345399e2c4d043d03a9db311757", "filename": "src/test/rustdoc-gui/search-result-color.goml", "status": "modified", "additions": 46, "deletions": 11, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-color.goml?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -5,37 +5,72 @@ goto: file://|DOC_PATH|/test_docs/index.html?search=coo\n show-text: true\n \n // Ayu theme\n-local-storage: {\"rustdoc-theme\": \"ayu\", \"rustdoc-preferred-dark-theme\": \"ayu\", \"rustdoc-use-system-theme\": \"false\"}\n+local-storage: {\n+    \"rustdoc-theme\": \"ayu\",\n+    \"rustdoc-preferred-dark-theme\": \"ayu\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n reload:\n \n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n-assert-css: (\"//*[@class='desc']//*[text()='Just a normal struct.']\", {\"color\": \"rgb(197, 197, 197)\"})\n-assert-css: (\"//*[@class='result-name']/*[text()='test_docs::']\", {\"color\": \"rgb(0, 150, 207)\"})\n+assert-css: (\n+    \"//*[@class='desc']//*[text()='Just a normal struct.']\",\n+    {\"color\": \"rgb(197, 197, 197)\"},\n+)\n+assert-css: (\n+    \"//*[@class='result-name']/*[text()='test_docs::']\",\n+    {\"color\": \"rgb(0, 150, 207)\"},\n+)\n \n // Checking the color for \"keyword\".\n-assert-css: (\"//*[@class='result-name']//*[text()='(keyword)']\", {\"color\": \"rgb(120, 135, 151)\"})\n+assert-css: (\n+    \"//*[@class='result-name']//*[text()='(keyword)']\",\n+    {\"color\": \"rgb(120, 135, 151)\"},\n+)\n \n // Dark theme\n-local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-preferred-dark-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+local-storage: {\n+    \"rustdoc-theme\": \"dark\",\n+    \"rustdoc-preferred-dark-theme\": \"dark\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n reload:\n \n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n-assert-css: (\"//*[@class='desc']//*[text()='Just a normal struct.']\", {\"color\": \"rgb(221, 221, 221)\"})\n-assert-css: (\"//*[@class='result-name']/*[text()='test_docs::']\", {\"color\": \"rgb(221, 221, 221)\"})\n+assert-css: (\n+    \"//*[@class='desc']//*[text()='Just a normal struct.']\",\n+    {\"color\": \"rgb(221, 221, 221)\"},\n+)\n+assert-css: (\n+    \"//*[@class='result-name']/*[text()='test_docs::']\",\n+    {\"color\": \"rgb(221, 221, 221)\"},\n+)\n \n // Checking the color for \"keyword\".\n-assert-css: (\"//*[@class='result-name']//*[text()='(keyword)']\", {\"color\": \"rgb(221, 221, 221)\"})\n+assert-css: (\n+    \"//*[@class='result-name']//*[text()='(keyword)']\",\n+    {\"color\": \"rgb(221, 221, 221)\"},\n+)\n \n // Light theme\n local-storage: {\"rustdoc-theme\": \"light\", \"rustdoc-use-system-theme\": \"false\"}\n reload:\n \n // Waiting for the search results to appear...\n wait-for: \"#titles\"\n-assert-css: (\"//*[@class='desc']//*[text()='Just a normal struct.']\", {\"color\": \"rgb(0, 0, 0)\"})\n-assert-css: (\"//*[@class='result-name']/*[text()='test_docs::']\", {\"color\": \"rgb(0, 0, 0)\"})\n+assert-css: (\n+    \"//*[@class='desc']//*[text()='Just a normal struct.']\",\n+    {\"color\": \"rgb(0, 0, 0)\"},\n+)\n+assert-css: (\n+    \"//*[@class='result-name']/*[text()='test_docs::']\",\n+    {\"color\": \"rgb(0, 0, 0)\"},\n+)\n \n // Checking the color for \"keyword\".\n-assert-css: (\"//*[@class='result-name']//*[text()='(keyword)']\", {\"color\": \"rgb(0, 0, 0)\"})\n+assert-css: (\n+    \"//*[@class='result-name']//*[text()='(keyword)']\",\n+    {\"color\": \"rgb(0, 0, 0)\"},\n+)"}, {"sha": "b4eb896af1c7e0d01a59a30237aca2d96534e0dd", "filename": "src/test/rustdoc-gui/search-result-colors.goml", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fsearch-result-colors.goml", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Frustdoc-gui%2Fsearch-result-colors.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-result-colors.goml?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -1,7 +1,11 @@\n goto: file://|DOC_PATH|/test_docs/index.html\n // We set the theme so we're sure that the correct values will be used, whatever the computer\n // this test is running on.\n-local-storage: {\"rustdoc-theme\": \"dark\", \"rustdoc-preferred-dark-theme\": \"dark\", \"rustdoc-use-system-theme\": \"false\"}\n+local-storage: {\n+    \"rustdoc-theme\": \"dark\",\n+    \"rustdoc-preferred-dark-theme\": \"dark\",\n+    \"rustdoc-use-system-theme\": \"false\",\n+}\n // If the text isn't displayed, the browser doesn't compute color style correctly...\n show-text: true\n // We reload the page so the local storage settings are being used."}, {"sha": "2fca2e262657eadd0241bfa02e300e1b27cd8234", "filename": "src/test/ui/lint/unused/issue-90807-unused-paren-error.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-90807-unused-paren-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-90807-unused-paren-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-90807-unused-paren-error.rs?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -0,0 +1,9 @@\n+// Make sure unused parens lint emit is emitted for loop and match.\n+// See https://github.com/rust-lang/rust/issues/90807\n+// and https://github.com/rust-lang/rust/pull/91956#discussion_r771647953\n+#![deny(unused_parens)]\n+\n+fn main() {\n+    for _ in (1..loop { break 2 }) {} //~ERROR\n+    for _ in (1..match () { () => 2 }) {} //~ERROR\n+}"}, {"sha": "4e158e126ac1f52d94b4dbbfc03bc215c3cf9d24", "filename": "src/test/ui/lint/unused/issue-90807-unused-paren-error.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-90807-unused-paren-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-90807-unused-paren-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-90807-unused-paren-error.stderr?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -0,0 +1,31 @@\n+error: unnecessary parentheses around `for` iterator expression\n+  --> $DIR/issue-90807-unused-paren-error.rs:7:14\n+   |\n+LL |     for _ in (1..loop { break 2 }) {}\n+   |              ^                   ^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/issue-90807-unused-paren-error.rs:4:9\n+   |\n+LL | #![deny(unused_parens)]\n+   |         ^^^^^^^^^^^^^\n+help: remove these parentheses\n+   |\n+LL -     for _ in (1..loop { break 2 }) {}\n+LL +     for _ in 1..loop { break 2 } {}\n+   | \n+\n+error: unnecessary parentheses around `for` iterator expression\n+  --> $DIR/issue-90807-unused-paren-error.rs:8:14\n+   |\n+LL |     for _ in (1..match () { () => 2 }) {}\n+   |              ^                       ^\n+   |\n+help: remove these parentheses\n+   |\n+LL -     for _ in (1..match () { () => 2 }) {}\n+LL +     for _ in 1..match () { () => 2 } {}\n+   | \n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "4c0930f967d89ab5a3e018b643dd6a8e7d031776", "filename": "src/test/ui/lint/unused/issue-90807-unused-paren.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-90807-unused-paren.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df2f45c1d30615c930b7aa76bb9efbeea3909703/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-90807-unused-paren.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused%2Fissue-90807-unused-paren.rs?ref=df2f45c1d30615c930b7aa76bb9efbeea3909703", "patch": "@@ -0,0 +1,8 @@\n+// check-pass\n+// Make sure unused parens lint doesn't emit a false positive.\n+// See https://github.com/rust-lang/rust/issues/90807\n+#![deny(unused_parens)]\n+\n+fn main() {\n+    for _ in (1..{ 2 }) {}\n+}"}]}