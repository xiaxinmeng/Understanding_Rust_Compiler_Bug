{"sha": "7ba5bef86e9939accea4c4a12c4c10e5723a773c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiYTViZWY4NmU5OTM5YWNjZWE0YzRhMTJjNGMxMGU1NzIzYTc3M2M=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-07T19:46:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-11T21:55:23Z"}, "message": "syntax/fold -- remove conflicting (and rather pointless) closures", "tree": {"sha": "44e88e7a42a1fe6c27b77a4fab91355befe123ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44e88e7a42a1fe6c27b77a4fab91355befe123ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ba5bef86e9939accea4c4a12c4c10e5723a773c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ba5bef86e9939accea4c4a12c4c10e5723a773c", "html_url": "https://github.com/rust-lang/rust/commit/7ba5bef86e9939accea4c4a12c4c10e5723a773c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ba5bef86e9939accea4c4a12c4c10e5723a773c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ca65c00ef2e1fb7373c97085315703887ee4d53c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ca65c00ef2e1fb7373c97085315703887ee4d53c", "html_url": "https://github.com/rust-lang/rust/commit/ca65c00ef2e1fb7373c97085315703887ee4d53c"}], "stats": {"total": 25, "additions": 7, "deletions": 18}, "files": [{"sha": "52ff3798f1b6baf098b89229a8ca9439afd93e66", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7ba5bef86e9939accea4c4a12c4c10e5723a773c/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ba5bef86e9939accea4c4a12c4c10e5723a773c/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=7ba5bef86e9939accea4c4a12c4c10e5723a773c", "patch": "@@ -75,14 +75,12 @@ pub trait Folder {\n     }\n \n     fn fold_struct_field(&mut self, sf: &StructField) -> StructField {\n-        let fold_attribute = |x| fold_attribute_(x, self);\n-\n         Spanned {\n             node: ast::StructField_ {\n                 kind: sf.node.kind,\n                 id: self.new_id(sf.node.id),\n                 ty: self.fold_ty(sf.node.ty),\n-                attrs: sf.node.attrs.map(|e| fold_attribute(*e))\n+                attrs: sf.node.attrs.map(|e| fold_attribute_(*e, self))\n             },\n             span: self.new_span(sf.span)\n         }\n@@ -225,8 +223,7 @@ pub trait Folder {\n             }\n         }\n \n-        let fold_attribute = |x| fold_attribute_(x, self);\n-        let attrs = v.node.attrs.map(|x| fold_attribute(*x));\n+        let attrs = v.node.attrs.map(|x| fold_attribute_(*x, self));\n \n         let de = match v.node.disr_expr {\n           Some(e) => Some(self.fold_expr(e)),\n@@ -323,8 +320,7 @@ fn fold_meta_item_<T: Folder>(mi: @MetaItem, fld: &mut T) -> @MetaItem {\n             match mi.node {\n                 MetaWord(ref id) => MetaWord((*id).clone()),\n                 MetaList(ref id, ref mis) => {\n-                    let fold_meta_item = |x| fold_meta_item_(x, fld);\n-                    MetaList((*id).clone(), mis.map(|e| fold_meta_item(*e)))\n+                    MetaList((*id).clone(), mis.map(|e| fold_meta_item_(*e, fld)))\n                 }\n                 MetaNameValue(ref id, ref s) => {\n                     MetaNameValue((*id).clone(), (*s).clone())\n@@ -604,23 +600,18 @@ pub fn noop_fold_mod<T: Folder>(m: &Mod, folder: &mut T) -> Mod {\n }\n \n pub fn noop_fold_crate<T: Folder>(c: Crate, folder: &mut T) -> Crate {\n-    let fold_meta_item = |x| fold_meta_item_(x, folder);\n-    let fold_attribute = |x| fold_attribute_(x, folder);\n-\n     Crate {\n         module: folder.fold_mod(&c.module),\n-        attrs: c.attrs.map(|x| fold_attribute(*x)),\n-        config: c.config.map(|x| fold_meta_item(*x)),\n+        attrs: c.attrs.map(|x| fold_attribute_(*x, folder)),\n+        config: c.config.map(|x| fold_meta_item_(*x, folder)),\n         span: folder.new_span(c.span),\n     }\n }\n \n pub fn noop_fold_item<T: Folder>(i: &Item, folder: &mut T) -> SmallVector<@Item> {\n-    let fold_attribute = |x| fold_attribute_(x, folder);\n-\n     SmallVector::one(@Item {\n         ident: folder.fold_ident(i.ident),\n-        attrs: i.attrs.map(|e| fold_attribute(*e)),\n+        attrs: i.attrs.map(|e| fold_attribute_(*e, folder)),\n         id: folder.new_id(i.id),\n         node: folder.fold_item_underscore(&i.node),\n         vis: i.vis,\n@@ -711,8 +702,6 @@ pub fn noop_fold_pat<T: Folder>(p: @Pat, folder: &mut T) -> @Pat {\n }\n \n pub fn noop_fold_expr<T: Folder>(e: @Expr, folder: &mut T) -> @Expr {\n-    let fold_field = |x| fold_field_(x, folder);\n-\n     let node = match e.node {\n         ExprVstore(e, v) => {\n             ExprVstore(folder.fold_expr(e), v)\n@@ -824,7 +813,7 @@ pub fn noop_fold_expr<T: Folder>(e: @Expr, folder: &mut T) -> @Expr {\n         ExprMac(ref mac) => ExprMac(folder.fold_mac(mac)),\n         ExprStruct(ref path, ref fields, maybe_expr) => {\n             ExprStruct(folder.fold_path(path),\n-                       fields.map(|x| fold_field(*x)),\n+                       fields.map(|x| fold_field_(*x, folder)),\n                        maybe_expr.map(|x| folder.fold_expr(x)))\n         },\n         ExprParen(ex) => ExprParen(folder.fold_expr(ex))"}]}