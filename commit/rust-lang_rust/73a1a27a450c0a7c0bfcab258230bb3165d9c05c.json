{"sha": "73a1a27a450c0a7c0bfcab258230bb3165d9c05c", "node_id": "C_kwDOAAsO6NoAKDczYTFhMjdhNDUwYzBhN2MwYmZjYWIyNTgyMzBiYjMxNjVkOWMwNWM", "commit": {"author": {"name": "Christian Legnitto", "email": "LegNeato@users.noreply.github.com", "date": "2022-06-29T17:30:30Z"}, "committer": {"name": "Christian Legnitto", "email": "christian@legnitto.com", "date": "2022-06-29T21:48:04Z"}, "message": "Support `gettimeofday` on more than macos\n\nThis appears to be in linux and in openbsd as well:\n\n* https://github.com/torvalds/linux/blob/master/lib/vdso/gettimeofday.c\n* https://github.com/openbsd/src/blob/master/sys/sys/time.h#L439\n\nCo-authored-by: Ralf Jung <post@ralfj.de>", "tree": {"sha": "051cfe287113cb2f94015d7416afb2223eb88de6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/051cfe287113cb2f94015d7416afb2223eb88de6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73a1a27a450c0a7c0bfcab258230bb3165d9c05c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73a1a27a450c0a7c0bfcab258230bb3165d9c05c", "html_url": "https://github.com/rust-lang/rust/commit/73a1a27a450c0a7c0bfcab258230bb3165d9c05c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73a1a27a450c0a7c0bfcab258230bb3165d9c05c/comments", "author": {"login": "LegNeato", "id": 368904, "node_id": "MDQ6VXNlcjM2ODkwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/368904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LegNeato", "html_url": "https://github.com/LegNeato", "followers_url": "https://api.github.com/users/LegNeato/followers", "following_url": "https://api.github.com/users/LegNeato/following{/other_user}", "gists_url": "https://api.github.com/users/LegNeato/gists{/gist_id}", "starred_url": "https://api.github.com/users/LegNeato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LegNeato/subscriptions", "organizations_url": "https://api.github.com/users/LegNeato/orgs", "repos_url": "https://api.github.com/users/LegNeato/repos", "events_url": "https://api.github.com/users/LegNeato/events{/privacy}", "received_events_url": "https://api.github.com/users/LegNeato/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LegNeato", "id": 368904, "node_id": "MDQ6VXNlcjM2ODkwNA==", "avatar_url": "https://avatars.githubusercontent.com/u/368904?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LegNeato", "html_url": "https://github.com/LegNeato", "followers_url": "https://api.github.com/users/LegNeato/followers", "following_url": "https://api.github.com/users/LegNeato/following{/other_user}", "gists_url": "https://api.github.com/users/LegNeato/gists{/gist_id}", "starred_url": "https://api.github.com/users/LegNeato/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LegNeato/subscriptions", "organizations_url": "https://api.github.com/users/LegNeato/orgs", "repos_url": "https://api.github.com/users/LegNeato/repos", "events_url": "https://api.github.com/users/LegNeato/events{/privacy}", "received_events_url": "https://api.github.com/users/LegNeato/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "062b66066c425460fc7fa2687ddf751468899574", "url": "https://api.github.com/repos/rust-lang/rust/commits/062b66066c425460fc7fa2687ddf751468899574", "html_url": "https://github.com/rust-lang/rust/commit/062b66066c425460fc7fa2687ddf751468899574"}], "stats": {"total": 36, "additions": 30, "deletions": 6}, "files": [{"sha": "0fd5cebd23451293656a099ec724b2945e4ca90d", "filename": "src/shims/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a1a27a450c0a7c0bfcab258230bb3165d9c05c/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a1a27a450c0a7c0bfcab258230bb3165d9c05c/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=73a1a27a450c0a7c0bfcab258230bb3165d9c05c", "patch": "@@ -64,7 +64,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     ) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        this.assert_target_os(\"macos\", \"gettimeofday\");\n+        this.assert_target_os_is_unix(\"gettimeofday\");\n         this.check_no_isolation(\"`gettimeofday`\")?;\n \n         // Using tz is obsolete and should always be null"}, {"sha": "4a452800044ff865a92e280ce03ad7009d526f8d", "filename": "src/shims/unix/foreign_items.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/73a1a27a450c0a7c0bfcab258230bb3165d9c05c/src%2Fshims%2Funix%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a1a27a450c0a7c0bfcab258230bb3165d9c05c/src%2Fshims%2Funix%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fforeign_items.rs?ref=73a1a27a450c0a7c0bfcab258230bb3165d9c05c", "patch": "@@ -139,6 +139,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_machine_isize(result, this), dest)?;\n             }\n \n+            // Time related shims\n+            \"gettimeofday\" => {\n+                let [tv, tz] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n+                let result = this.gettimeofday(tv, tz)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n+            }\n+\n             // Allocation\n             \"posix_memalign\" => {\n                 let [ret, align, size] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;"}, {"sha": "e545a4691bf04667ed51304b259ab8af35b7b68d", "filename": "src/shims/unix/macos/foreign_items.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73a1a27a450c0a7c0bfcab258230bb3165d9c05c/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a1a27a450c0a7c0bfcab258230bb3165d9c05c/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Fmacos%2Fforeign_items.rs?ref=73a1a27a450c0a7c0bfcab258230bb3165d9c05c", "patch": "@@ -78,11 +78,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // Time related shims\n-            \"gettimeofday\" => {\n-                let [tv, tz] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n-                let result = this.gettimeofday(tv, tz)?;\n-                this.write_scalar(Scalar::from_i32(result), dest)?;\n-            }\n             \"mach_absolute_time\" => {\n                 let [] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let result = this.mach_absolute_time()?;"}, {"sha": "b108a01dae37e47465a9fff482a9a31de6d27f5e", "filename": "tests/pass/libc.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/73a1a27a450c0a7c0bfcab258230bb3165d9c05c/tests%2Fpass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a1a27a450c0a7c0bfcab258230bb3165d9c05c/tests%2Fpass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flibc.rs?ref=73a1a27a450c0a7c0bfcab258230bb3165d9c05c", "patch": "@@ -290,10 +290,32 @@ fn test_clocks() {\n     assert_eq!(is_error, 0);\n }\n \n+fn test_posix_gettimeofday() {\n+    let mut tp = std::mem::MaybeUninit::<libc::timeval>::uninit();\n+    let tz = std::ptr::null_mut::<libc::timezone>();\n+    #[cfg(target_os = \"macos\")] // `tz` has a different type on macOS\n+    let tz = tz as *mut libc::c_void;\n+    let is_error = unsafe { libc::gettimeofday(tp.as_mut_ptr(), tz) };\n+    assert_eq!(is_error, 0);\n+    let tv = unsafe { tp.assume_init() };\n+    assert!(tv.tv_sec > 0);\n+    assert!(tv.tv_usec >= 0); // Theoretically this could be 0.\n+\n+    // Test that non-null tz returns an error.\n+    let mut tz = std::mem::MaybeUninit::<libc::timezone>::uninit();\n+    let tz_ptr = tz.as_mut_ptr();\n+    #[cfg(target_os = \"macos\")] // `tz` has a different type on macOS\n+    let tz_ptr = tz_ptr as *mut libc::c_void;\n+    let is_error = unsafe { libc::gettimeofday(tp.as_mut_ptr(), tz_ptr) };\n+    assert_eq!(is_error, -1);\n+}\n+\n fn main() {\n     #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n     test_posix_fadvise();\n \n+    test_posix_gettimeofday();\n+\n     #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n     test_sync_file_range();\n "}]}