{"sha": "0b9e23146b75c02dd9059dc754070884595f3104", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiOWUyMzE0NmI3NWMwMmRkOTA1OWRjNzU0MDcwODg0NTk1ZjMxMDQ=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-15T03:06:59Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-01-15T03:06:59Z"}, "message": "convert ast::crate_ into a struct.", "tree": {"sha": "f0e19e28fb26ee59a2c2b848664bf111c45e52c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0e19e28fb26ee59a2c2b848664bf111c45e52c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b9e23146b75c02dd9059dc754070884595f3104", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9e23146b75c02dd9059dc754070884595f3104", "html_url": "https://github.com/rust-lang/rust/commit/0b9e23146b75c02dd9059dc754070884595f3104", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b9e23146b75c02dd9059dc754070884595f3104/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb8fd119c65c67f3b1b8268cc7341c22d39b7b61", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb8fd119c65c67f3b1b8268cc7341c22d39b7b61", "html_url": "https://github.com/rust-lang/rust/commit/eb8fd119c65c67f3b1b8268cc7341c22d39b7b61"}], "stats": {"total": 39, "additions": 23, "deletions": 16}, "files": [{"sha": "7345c76fc3b1021401d8d15bfa1c32858bac6fff", "filename": "src/librustc/front/core_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0b9e23146b75c02dd9059dc754070884595f3104/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9e23146b75c02dd9059dc754070884595f3104/src%2Flibrustc%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fcore_inject.rs?ref=0b9e23146b75c02dd9059dc754070884595f3104", "patch": "@@ -69,7 +69,7 @@ fn inject_libcore_ref(sess: Session,\n             new_module = fld.fold_mod(new_module);\n \n             // XXX: Bad copy.\n-            let new_crate = { module: new_module, ..copy crate };\n+            let new_crate = ast::crate_ { module: new_module, ..copy crate };\n             (new_crate, span)\n         },\n         fold_mod: |module, fld| {"}, {"sha": "169fe59e4b46ea8c3f810ac0c8be0b5b5279675c", "filename": "src/librustc/front/intrinsic_inject.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b9e23146b75c02dd9059dc754070884595f3104/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9e23146b75c02dd9059dc754070884595f3104/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fintrinsic_inject.rs?ref=0b9e23146b75c02dd9059dc754070884595f3104", "patch": "@@ -37,8 +37,13 @@ fn inject_intrinsic(sess: Session, crate: @ast::crate) -> @ast::crate {\n     let items = vec::append(~[item], crate.node.module.items);\n \n     @ast::spanned {\n-        node: { module: { items: items ,.. /*bad*/copy crate.node.module },\n-                .. /*bad*/copy crate.node},\n+        node: ast::crate_ {\n+            module: {\n+                items: items,\n+                .. /*bad*/copy crate.node.module\n+            },\n+            .. /*bad*/copy crate.node\n+        },\n         .. /*bad*/copy *crate\n     }\n }"}, {"sha": "f0380c78634cb6d89c609840b602cb71a0a1b99d", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b9e23146b75c02dd9059dc754070884595f3104/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9e23146b75c02dd9059dc754070884595f3104/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=0b9e23146b75c02dd9059dc754070884595f3104", "patch": "@@ -113,7 +113,8 @@ fn fold_crate(cx: test_ctxt, c: ast::crate_, fld: fold::ast_fold) ->\n \n     // Add a special __test module to the crate that will contain code\n     // generated for the test harness\n-    return {module: add_test_module(cx, /*bad*/copy folded.module),.. folded};\n+    ast::crate_ { module: add_test_module(cx, /*bad*/copy folded.module),\n+                  .. folded }\n }\n \n "}, {"sha": "0dd0555e8e8182c4142c9b7d21324d8d5a1c67e7", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0b9e23146b75c02dd9059dc754070884595f3104/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9e23146b75c02dd9059dc754070884595f3104/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=0b9e23146b75c02dd9059dc754070884595f3104", "patch": "@@ -293,10 +293,11 @@ type crate_cfg = ~[@meta_item];\n \n type crate = spanned<crate_>;\n \n-type crate_ =\n-    {module: _mod,\n-     attrs: ~[attribute],\n-     config: crate_cfg};\n+struct crate_ {\n+    module: _mod,\n+    attrs: ~[attribute],\n+    config: crate_cfg,\n+}\n \n type meta_item = spanned<meta_item_>;\n "}, {"sha": "c4c3b854e55d72f824857d932eee145c3e8ce84c", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b9e23146b75c02dd9059dc754070884595f3104/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9e23146b75c02dd9059dc754070884595f3104/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=0b9e23146b75c02dd9059dc754070884595f3104", "patch": "@@ -165,11 +165,11 @@ fn noop_fold_crate(c: crate_, fld: ast_fold) -> crate_ {\n     let fold_meta_item = |x| fold_meta_item_(x, fld);\n     let fold_attribute = |x| fold_attribute_(x, fld);\n \n-    return {\n+    crate_ {\n         module: fld.fold_mod(c.module),\n-        attrs: vec::map(c.attrs, |x| fold_attribute(*x)),\n-        config: vec::map(c.config, |x| fold_meta_item(*x))\n-    };\n+        attrs: c.attrs.map(|x| fold_attribute(*x)),\n+        config: c.config.map(|x| fold_meta_item(*x)),\n+    }\n }\n \n fn noop_fold_view_item(vi: view_item_, _fld: ast_fold) -> view_item_ {"}, {"sha": "ce1e67be79eece18c18f67b31a3194c8f6c7bcb6", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b9e23146b75c02dd9059dc754070884595f3104/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9e23146b75c02dd9059dc754070884595f3104/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0b9e23146b75c02dd9059dc754070884595f3104", "patch": "@@ -3855,10 +3855,10 @@ impl Parser {\n         let crate_attrs = self.parse_inner_attrs_and_next();\n         let first_item_outer_attrs = crate_attrs.next;\n         let m = self.parse_mod_items(token::EOF, first_item_outer_attrs);\n-        return @spanned(lo, self.span.lo,\n-                     {module: m,\n-                      attrs: crate_attrs.inner,\n-                      config: self.cfg});\n+        @spanned(lo, self.span.lo,\n+                 ast::crate_ { module: m,\n+                               attrs: crate_attrs.inner,\n+                               config: self.cfg })\n     }\n \n     fn parse_str() -> @~str {"}]}