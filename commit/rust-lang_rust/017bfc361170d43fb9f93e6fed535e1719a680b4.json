{"sha": "017bfc361170d43fb9f93e6fed535e1719a680b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxN2JmYzM2MTE3MGQ0M2ZiOWY5M2U2ZmVkNTM1ZTE3MTlhNjgwYjQ=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-03-05T22:05:38Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-03-14T15:54:32Z"}, "message": "expose #[target_feature] attributes in rustdoc", "tree": {"sha": "f613aec40502365869b470509e7e86b6d20b5540", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f613aec40502365869b470509e7e86b6d20b5540"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/017bfc361170d43fb9f93e6fed535e1719a680b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/017bfc361170d43fb9f93e6fed535e1719a680b4", "html_url": "https://github.com/rust-lang/rust/commit/017bfc361170d43fb9f93e6fed535e1719a680b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/017bfc361170d43fb9f93e6fed535e1719a680b4/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d089fe974edc53fa34384e8e76eeb1eca0d89042", "url": "https://api.github.com/repos/rust-lang/rust/commits/d089fe974edc53fa34384e8e76eeb1eca0d89042", "html_url": "https://github.com/rust-lang/rust/commit/d089fe974edc53fa34384e8e76eeb1eca0d89042"}], "stats": {"total": 53, "additions": 51, "deletions": 2}, "files": [{"sha": "c228f54217d34c7f583dff93ef4744cf867d942d", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 38, "deletions": 2, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/017bfc361170d43fb9f93e6fed535e1719a680b4/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017bfc361170d43fb9f93e6fed535e1719a680b4/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=017bfc361170d43fb9f93e6fed535e1719a680b4", "patch": "@@ -138,7 +138,7 @@ impl Cfg {\n \n     /// Renders the configuration for human display, as a short HTML description.\n     pub(crate) fn render_short_html(&self) -> String {\n-        let mut msg = Html(self).to_string();\n+        let mut msg = ShortHtml(self).to_string();\n         if self.should_capitalize_first_letter() {\n             if let Some(i) = msg.find(|c: char| c.is_ascii_alphanumeric()) {\n                 msg[i .. i+1].make_ascii_uppercase();\n@@ -149,7 +149,13 @@ impl Cfg {\n \n     /// Renders the configuration for long display, as a long HTML description.\n     pub(crate) fn render_long_html(&self) -> String {\n-        let mut msg = format!(\"This is supported on <strong>{}</strong>\", Html(self));\n+        let on = if self.should_use_with_in_description() {\n+            \"with\"\n+        } else {\n+            \"on\"\n+        };\n+\n+        let mut msg = format!(\"This is supported {} <strong>{}</strong>\", on, Html(self));\n         if self.should_append_only_to_description() {\n             msg.push_str(\" only\");\n         }\n@@ -180,6 +186,13 @@ impl Cfg {\n             }\n         }\n     }\n+\n+    fn should_use_with_in_description(&self) -> bool {\n+        match *self {\n+            Cfg::Cfg(ref name, _) if name == &\"target_feature\" => true,\n+            _ => false,\n+        }\n+    }\n }\n \n impl ops::Not for Cfg {\n@@ -376,6 +389,8 @@ impl<'a> fmt::Display for Html<'a> {\n                     },\n                     (\"target_endian\", Some(endian)) => return write!(fmt, \"{}-endian\", endian),\n                     (\"target_pointer_width\", Some(bits)) => return write!(fmt, \"{}-bit\", bits),\n+                    (\"target_feature\", Some(feat)) =>\n+                        return write!(fmt, \"target feature <code>{}</code>\", feat),\n                     _ => \"\",\n                 };\n                 if !human_readable.is_empty() {\n@@ -390,6 +405,19 @@ impl<'a> fmt::Display for Html<'a> {\n     }\n }\n \n+struct ShortHtml<'a>(&'a Cfg);\n+\n+impl<'a> fmt::Display for ShortHtml<'a> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n+        match *self.0 {\n+            Cfg::Cfg(ref name, Some(ref vendor)) if name == &\"target_feature\" => {\n+                write!(fmt, \"<code>{}</code>\", vendor)\n+            },\n+            ref cfg => write!(fmt, \"{}\", Html(cfg)),\n+        }\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     use super::Cfg;\n@@ -824,6 +852,10 @@ mod test {\n                 ).render_short_html(),\n                 \"(Debug-assertions enabled or Windows) and Unix\"\n             );\n+            assert_eq!(\n+                name_value_cfg(\"target_feature\", \"sse2\").render_short_html(),\n+                \"<code>sse2</code>\"\n+            );\n         })\n     }\n \n@@ -898,6 +930,10 @@ mod test {\n                 \"This is supported on <strong>(debug-assertions enabled or Windows) and Unix\\\n                 </strong> only.\"\n             );\n+            assert_eq!(\n+                name_value_cfg(\"target_feature\", \"sse2\").render_long_html(),\n+                \"This is supported with <strong>target feature <code>sse2</code></strong> only.\"\n+            );\n         })\n     }\n }"}, {"sha": "d6897617d556eafbafb417a4fe7fa2f972ddef3b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/017bfc361170d43fb9f93e6fed535e1719a680b4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/017bfc361170d43fb9f93e6fed535e1719a680b4/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=017bfc361170d43fb9f93e6fed535e1719a680b4", "patch": "@@ -828,6 +828,19 @@ impl Attributes {\n             })\n         }).collect();\n \n+        // treat #[target_feature(enable = \"feat\")] attributes as if they were\n+        // #[doc(cfg(target_feature = \"feat\"))] attributes as well\n+        for attr in attrs.lists(\"target_feature\") {\n+            if attr.check_name(\"enable\") {\n+                if let Some(feat) = attr.value_str() {\n+                    let meta = attr::mk_name_value_item_str(\"target_feature\".into(), feat);\n+                    if let Ok(feat_cfg) = Cfg::parse(&meta) {\n+                        cfg &= feat_cfg;\n+                    }\n+                }\n+            }\n+        }\n+\n         Attributes {\n             doc_strings,\n             other_attrs,"}]}