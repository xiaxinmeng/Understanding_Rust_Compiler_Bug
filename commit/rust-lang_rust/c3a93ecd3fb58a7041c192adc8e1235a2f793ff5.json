{"sha": "c3a93ecd3fb58a7041c192adc8e1235a2f793ff5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzYTkzZWNkM2ZiNThhNzA0MWMxOTJhZGM4ZTEyMzVhMmY3OTNmZjU=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-11T11:09:38Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-03-15T14:08:30Z"}, "message": "Remove dynastack code from compiler", "tree": {"sha": "5383c9fa5755b9a38a2218065dbcfbaadbadab4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5383c9fa5755b9a38a2218065dbcfbaadbadab4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3a93ecd3fb58a7041c192adc8e1235a2f793ff5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3a93ecd3fb58a7041c192adc8e1235a2f793ff5", "html_url": "https://github.com/rust-lang/rust/commit/c3a93ecd3fb58a7041c192adc8e1235a2f793ff5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3a93ecd3fb58a7041c192adc8e1235a2f793ff5/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc8a43a77665cc65ba3d3bf4bd2db00b6cb9ec8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc8a43a77665cc65ba3d3bf4bd2db00b6cb9ec8a", "html_url": "https://github.com/rust-lang/rust/commit/bc8a43a77665cc65ba3d3bf4bd2db00b6cb9ec8a"}], "stats": {"total": 63, "additions": 2, "deletions": 61}, "files": [{"sha": "7ac370c1ee0e8ffb1e894b814d6e781e03a15180", "filename": "src/rustc/back/upcall.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c3a93ecd3fb58a7041c192adc8e1235a2f793ff5/src%2Frustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a93ecd3fb58a7041c192adc8e1235a2f793ff5/src%2Frustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fupcall.rs?ref=c3a93ecd3fb58a7041c192adc8e1235a2f793ff5", "patch": "@@ -23,9 +23,6 @@ type upcalls =\n      vec_push: ValueRef,\n      cmp_type: ValueRef,\n      log_type: ValueRef,\n-     dynastack_mark: ValueRef,\n-     dynastack_alloc: ValueRef,\n-     dynastack_free: ValueRef,\n      alloc_c_stack: ValueRef,\n      call_shim_on_c_stack: ValueRef,\n      call_shim_on_rust_stack: ValueRef,\n@@ -93,13 +90,6 @@ fn declare_upcalls(targ_cfg: @session::config,\n                   T_i8()]),\n           log_type:\n               dv(\"log_type\", [T_ptr(tydesc_type), T_ptr(T_i8()), T_i32()]),\n-          dynastack_mark:\n-              d(\"dynastack_mark\", [], T_ptr(T_i8())),\n-          dynastack_alloc:\n-              d(\"dynastack_alloc_2\", [size_t, T_ptr(tydesc_type)],\n-                T_ptr(T_i8())),\n-          dynastack_free:\n-              dv(\"dynastack_free\", [T_ptr(T_i8())]),\n           alloc_c_stack:\n               d(\"alloc_c_stack\", [size_t], T_ptr(T_i8())),\n           call_shim_on_c_stack:"}, {"sha": "85f81fb84d59405efb5e72513606b04aee370c63", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 49, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c3a93ecd3fb58a7041c192adc8e1235a2f793ff5/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a93ecd3fb58a7041c192adc8e1235a2f793ff5/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=c3a93ecd3fb58a7041c192adc8e1235a2f793ff5", "patch": "@@ -253,35 +253,6 @@ fn alloca(cx: block, t: TypeRef) -> ValueRef {\n     ret Alloca(raw_block(cx.fcx, cx.fcx.llstaticallocas), t);\n }\n \n-fn dynastack_alloca(cx: block, t: TypeRef, n: ValueRef, ty: ty::t) ->\n-   ValueRef {\n-    if cx.unreachable { ret llvm::LLVMGetUndef(T_ptr(t)); }\n-    let bcx = cx;\n-    let dy_cx = raw_block(cx.fcx, cx.fcx.lldynamicallocas);\n-    alt cx.fcx.llobstacktoken {\n-      none {\n-        cx.fcx.llobstacktoken = some(mk_obstack_token(cx.ccx(), cx.fcx));\n-      }\n-      some(_) {/* no-op */ }\n-    }\n-\n-    let dynastack_alloc = bcx.ccx().upcalls.dynastack_alloc;\n-    let llsz = Mul(dy_cx,\n-                   C_uint(bcx.ccx(), llsize_of_real(bcx.ccx(), t)),\n-                   n);\n-\n-    let lltydesc = get_tydesc_simple(cx, ty).val;\n-\n-    let llresult = Call(dy_cx, dynastack_alloc, [llsz, lltydesc]);\n-    ret PointerCast(dy_cx, llresult, T_ptr(t));\n-}\n-\n-fn mk_obstack_token(ccx: @crate_ctxt, fcx: fn_ctxt) ->\n-   ValueRef {\n-    let cx = raw_block(fcx, fcx.lldynamicallocas);\n-    ret Call(cx, ccx.upcalls.dynastack_mark, []);\n-}\n-\n // Given a pointer p, returns a pointer sz(p) (i.e., inc'd by sz bytes).\n // The type of the returned pointer is always i8*.  If you care about the\n // return type, use bump_ptr().\n@@ -3686,12 +3657,6 @@ fn with_cond(bcx: block, val: ValueRef, f: fn(block) -> block) -> block {\n     next_cx\n }\n \n-fn trans_fn_cleanups(fcx: fn_ctxt, cx: block) {\n-    option::may(fcx.llobstacktoken) {|lltoken|\n-        Call(cx, fcx.ccx.upcalls.dynastack_free, [lltoken]);\n-    }\n-}\n-\n fn block_locals(b: ast::blk, it: fn(@ast::local)) {\n     for s: @ast::stmt in b.node.stmts {\n         alt s.node {\n@@ -3711,18 +3676,8 @@ fn block_locals(b: ast::blk, it: fn(@ast::local)) {\n fn alloc_ty(cx: block, t: ty::t) -> result {\n     let bcx = cx, ccx = cx.ccx();\n     let llty = type_of(ccx, t);\n-    let val = if type_has_static_size(ccx, t) {\n-        alloca(bcx, llty)\n-    } else {\n-        // NB: we have to run this particular 'size_of' in a\n-        // block built on the llderivedtydescs block for the fn,\n-        // so that the size dominates the array_alloca that\n-        // comes next.\n-        let n = size_of(raw_block(cx.fcx, cx.fcx.llderivedtydescs),\n-                        t);\n-        bcx.fcx.llderivedtydescs = n.bcx.llbb;\n-        PointerCast(bcx, dynastack_alloca(bcx, T_i8(), n.val, t), T_ptr(llty))\n-    };\n+    assert type_has_static_size(ccx, t);\n+    let val = alloca(bcx, llty);\n \n     // NB: since we've pushed all size calculations in this\n     // function up to the alloca block, we actually return the\n@@ -3824,7 +3779,6 @@ fn new_fn_ctxt_w_id(ccx: @crate_ctxt, path: path,\n           mutable llderivedtydescs: llbbs.dt,\n           mutable lldynamicallocas: llbbs.da,\n           mutable llreturn: llbbs.rt,\n-          mutable llobstacktoken: none::<ValueRef>,\n           mutable llself: none,\n           mutable personality: none,\n           llargs: int_hash::<local_val>(),\n@@ -3923,7 +3877,6 @@ fn copy_args_to_allocas(fcx: fn_ctxt, bcx: block, args: [ast::arg],\n fn finish_fn(fcx: fn_ctxt, lltop: BasicBlockRef) {\n     tie_up_header_blocks(fcx, lltop);\n     let ret_cx = raw_block(fcx, fcx.llreturn);\n-    trans_fn_cleanups(fcx, ret_cx);\n     RetVoid(ret_cx);\n }\n "}, {"sha": "ade82e3d3fbd1cbab693d681e84ca3467e256c0c", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c3a93ecd3fb58a7041c192adc8e1235a2f793ff5/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3a93ecd3fb58a7041c192adc8e1235a2f793ff5/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=c3a93ecd3fb58a7041c192adc8e1235a2f793ff5", "patch": "@@ -159,8 +159,6 @@ type fn_ctxt = @{\n     // information computed from derived tydescs.\n     mutable lldynamicallocas: BasicBlockRef,\n     mutable llreturn: BasicBlockRef,\n-    // The token used to clear the dynamic allocas at the end of this frame.\n-    mutable llobstacktoken: option<ValueRef>,\n     // The 'self' value currently in use in this function, if there\n     // is one.\n     mutable llself: option<val_self_pair>,"}]}