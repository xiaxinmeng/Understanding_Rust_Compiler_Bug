{"sha": "a648cfeae1a042069a727236d0d3aa97a47165f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NDhjZmVhZTFhMDQyMDY5YTcyNzIzNmQwZDNhYTk3YTQ3MTY1ZjY=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-06-07T03:40:57Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-06-07T03:40:57Z"}, "message": "better naming, Iterator::eq", "tree": {"sha": "8506f1b55cc29dee5c5f6b41589f8bcacce0fea7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8506f1b55cc29dee5c5f6b41589f8bcacce0fea7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a648cfeae1a042069a727236d0d3aa97a47165f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a648cfeae1a042069a727236d0d3aa97a47165f6", "html_url": "https://github.com/rust-lang/rust/commit/a648cfeae1a042069a727236d0d3aa97a47165f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a648cfeae1a042069a727236d0d3aa97a47165f6/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8122d3e8cbf21a430254fb1024f75a0fb431bf88", "url": "https://api.github.com/repos/rust-lang/rust/commits/8122d3e8cbf21a430254fb1024f75a0fb431bf88", "html_url": "https://github.com/rust-lang/rust/commit/8122d3e8cbf21a430254fb1024f75a0fb431bf88"}], "stats": {"total": 13, "additions": 7, "deletions": 6}, "files": [{"sha": "f8fae40121e324ed04ddabed0839ab80616b2874", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a648cfeae1a042069a727236d0d3aa97a47165f6/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a648cfeae1a042069a727236d0d3aa97a47165f6/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=a648cfeae1a042069a727236d0d3aa97a47165f6", "patch": "@@ -1386,8 +1386,8 @@ impl SelfKind {\n         } else {\n             match self {\n                 SelfKind::Value => false,\n-                SelfKind::Ref => is_astrait(ty, self_ty, generics, &paths::ASREF_TRAIT),\n-                SelfKind::RefMut => is_astrait(ty, self_ty, generics, &paths::ASMUT_TRAIT),\n+                SelfKind::Ref => is_as_ref_or_mut_trait(ty, self_ty, generics, &paths::ASREF_TRAIT),\n+                SelfKind::RefMut => is_as_ref_or_mut_trait(ty, self_ty, generics, &paths::ASMUT_TRAIT),\n                 SelfKind::No => true\n             }\n         }\n@@ -1403,7 +1403,7 @@ impl SelfKind {\n     }\n }\n \n-fn is_astrait(ty: &hir::Ty, self_ty: &hir::Ty, generics: &hir::Generics, name: &[&str]) -> bool {\n+fn is_as_ref_or_mut_trait(ty: &hir::Ty, self_ty: &hir::Ty, generics: &hir::Generics, name: &[&str]) -> bool {\n     single_segment_ty(ty).map_or(false, |seg| {\n         generics.ty_params.iter().any(|param| {\n             param.name == seg.name && param.bounds.iter().any(|bound| {\n@@ -1426,9 +1426,10 @@ fn is_astrait(ty: &hir::Ty, self_ty: &hir::Ty, generics: &hir::Generics, name: &\n \n fn is_ty(ty: &hir::Ty, self_ty: &hir::Ty) -> bool {\n     match (&ty.node, &self_ty.node) {\n-        (&hir::TyPath(hir::QPath::Resolved(_, ref ty_path)), &hir::TyPath(hir::QPath::Resolved(_, ref self_ty_path))) => {\n-            ty_path.segments.iter().rev().map(|seg| seg.name).zip(\n-                self_ty_path.segments.iter().rev().map(|seg| seg.name)).all(|(l, r)| l == r)\n+        (&hir::TyPath(hir::QPath::Resolved(_, ref ty_path)),\n+         &hir::TyPath(hir::QPath::Resolved(_, ref self_ty_path))) => {\n+            ty_path.segments.iter().map(|seg| seg.name).eq(\n+                self_ty_path.segments.iter().map(|seg| seg.name))\n         }\n         _ => false\n     }"}]}