{"sha": "26a1675764c9f96cc96d75d2129dd6c828b8df51", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2YTE2NzU3NjRjOWY5NmNjOTZkNzVkMjEyOWRkNmM4MjhiOGRmNTE=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-12-12T17:27:09Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-12-12T17:27:09Z"}, "message": "Remove some redundant allocations", "tree": {"sha": "e53212d4569e73c7337bb205e937174f425fda5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e53212d4569e73c7337bb205e937174f425fda5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26a1675764c9f96cc96d75d2129dd6c828b8df51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26a1675764c9f96cc96d75d2129dd6c828b8df51", "html_url": "https://github.com/rust-lang/rust/commit/26a1675764c9f96cc96d75d2129dd6c828b8df51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26a1675764c9f96cc96d75d2129dd6c828b8df51/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "479d1f7eec22c3564867223e2093f14774092528", "url": "https://api.github.com/repos/rust-lang/rust/commits/479d1f7eec22c3564867223e2093f14774092528", "html_url": "https://github.com/rust-lang/rust/commit/479d1f7eec22c3564867223e2093f14774092528"}], "stats": {"total": 19, "additions": 9, "deletions": 10}, "files": [{"sha": "2e56bd7ffc057df7a26e9396ad9a974008d51366", "filename": "crates/assists/src/handlers/extract_struct_from_enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fextract_struct_from_enum_variant.rs?ref=26a1675764c9f96cc96d75d2129dd6c828b8df51", "patch": "@@ -212,7 +212,7 @@ fn update_reference(\n         find_node_at_offset::<ast::PathExpr>(source_file.syntax(), offset)\n     {\n         // tuple variant\n-        (path_expr.path()?.segment()?, path_expr.syntax().parent()?.clone())\n+        (path_expr.path()?.segment()?, path_expr.syntax().parent()?)\n     } else if let Some(record_expr) =\n         find_node_at_offset::<ast::RecordExpr>(source_file.syntax(), offset)\n     {"}, {"sha": "98cb09214c78b190e801a10ac818f77b2a574273", "filename": "crates/assists/src/handlers/qualify_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fqualify_path.rs?ref=26a1675764c9f96cc96d75d2129dd6c828b8df51", "patch": "@@ -150,7 +150,7 @@ impl QualifyCandidate<'_> {\n                 import,\n                 trait_method_name,\n                 generics,\n-                match arg_list.clone() {\n+                match arg_list {\n                     Some(args) => make::arg_list(iter::once(receiver).chain(args)),\n                     None => make::arg_list(iter::once(receiver)),\n                 }"}, {"sha": "30f4bcdf79edb68b99415fc0572b26c79662b1bc", "filename": "crates/cfg/src/dnf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Fcfg%2Fsrc%2Fdnf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Fcfg%2Fsrc%2Fdnf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcfg%2Fsrc%2Fdnf.rs?ref=26a1675764c9f96cc96d75d2129dd6c828b8df51", "patch": "@@ -30,7 +30,7 @@ impl DnfExpr {\n     pub fn new(expr: CfgExpr) -> Self {\n         let builder = Builder { expr: DnfExpr { conjunctions: Vec::new() } };\n \n-        builder.lower(expr.clone())\n+        builder.lower(expr)\n     }\n \n     /// Computes a list of present or absent atoms in `opts` that cause this expression to evaluate"}, {"sha": "b9315f6c04973187ec8ec0248a50dbe40608aad5", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=26a1675764c9f96cc96d75d2129dd6c828b8df51", "patch": "@@ -147,7 +147,7 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n     .filter_map(|(import_path, definition)| {\n         render_resolution_with_import(\n             RenderContext::new(ctx),\n-            ImportEdit { import_path: import_path.clone(), import_scope: import_scope.clone() },\n+            ImportEdit { import_path, import_scope: import_scope.clone() },\n             &definition,\n         )\n     });"}, {"sha": "316e05b529cc6aed882b0aa957df1e0760f1c21e", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=26a1675764c9f96cc96d75d2129dd6c828b8df51", "patch": "@@ -91,7 +91,7 @@ impl<'a> FunctionRender<'a> {\n             .zip(params_ty)\n             .flat_map(|(pat, param_ty)| {\n                 let pat = pat?;\n-                let name = pat.to_string();\n+                let name = pat;\n                 let arg = name.trim_start_matches(\"mut \").trim_start_matches('_');\n                 Some(self.add_arg(arg, param_ty.ty()))\n             })"}, {"sha": "68a235ce3c3005be1c14e4e6988e91bc760c58d0", "filename": "crates/project_model/src/workspace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Fproject_model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject_model%2Fsrc%2Fworkspace.rs?ref=26a1675764c9f96cc96d75d2129dd6c828b8df51", "patch": "@@ -475,7 +475,7 @@ fn add_target_crate_root(\n         Some(display_name),\n         cfg_options,\n         env,\n-        proc_macro.clone(),\n+        proc_macro,\n     );\n \n     crate_id"}, {"sha": "ec3d5e0600ffdab656cbe66861d26894c4eb7222", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=26a1675764c9f96cc96d75d2129dd6c828b8df51", "patch": "@@ -658,7 +658,6 @@ impl GlobalState {\n         log::trace!(\"updating notifications for {:?}\", subscriptions);\n         if self.config.publish_diagnostics {\n             let snapshot = self.snapshot();\n-            let subscriptions = subscriptions.clone();\n             self.task_pool.handle.spawn(move || {\n                 let diagnostics = subscriptions\n                     .into_iter()"}, {"sha": "820af2d20b085151f7349c06e40d7c7d37930733", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=26a1675764c9f96cc96d75d2129dd6c828b8df51", "patch": "@@ -55,7 +55,7 @@ impl ast::Attr {\n         let key = self.simple_name()?;\n         let value_token = lit.syntax().first_token()?;\n \n-        let value: SmolStr = ast::String::cast(value_token.clone())?.value()?.into();\n+        let value: SmolStr = ast::String::cast(value_token)?.value()?.into();\n \n         Some((key, value))\n     }"}, {"sha": "5e9620a40d65fc6b6a998d34c31e585095c4be5f", "filename": "crates/syntax/src/ast/token_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a1675764c9f96cc96d75d2129dd6c828b8df51/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Ftoken_ext.rs?ref=26a1675764c9f96cc96d75d2129dd6c828b8df51", "patch": "@@ -599,7 +599,7 @@ impl ast::IntNumber {\n         text = &text[radix.prefix_len()..];\n \n         let buf;\n-        if text.contains(\"_\") {\n+        if text.contains('_') {\n             buf = text.replace('_', \"\");\n             text = buf.as_str();\n         };"}, {"sha": "be218dea15100f444437c3635620b47ebf0eb485", "filename": "xtask/src/codegen/gen_assists_docs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26a1675764c9f96cc96d75d2129dd6c828b8df51/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26a1675764c9f96cc96d75d2129dd6c828b8df51/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_assists_docs.rs?ref=26a1675764c9f96cc96d75d2129dd6c828b8df51", "patch": "@@ -134,7 +134,7 @@ r#####\"\n \n         buf.push_str(&test)\n     }\n-    let buf = reformat(&buf.to_string())?;\n+    let buf = reformat(&buf)?;\n     codegen::update(&project_root().join(\"crates/assists/src/tests/generated.rs\"), &buf, mode)\n }\n "}]}