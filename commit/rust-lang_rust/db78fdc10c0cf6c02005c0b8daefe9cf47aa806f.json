{"sha": "db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNzhmZGMxMGMwY2Y2YzAyMDA1YzBiOGRhZWZlOWNmNDdhYTgwNmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-21T07:16:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-21T07:16:02Z"}, "message": "auto merge of #9374 : alexcrichton/rust/rustdoc-web, r=cmr\n\nThis large commit implements and `html` output option for rustdoc_ng. The\r\nexecutable has been altered to be invoked as \"rustdoc_ng html <crate>\" and\r\nit will dump everything into the local \"doc\" directory. JSON can still be\r\ngenerated by changing 'html' to 'json'.\r\n\r\nThis also fixes a number of bugs in rustdoc_ng relating to comment stripping,\r\nalong with some other various issues that I found along the way.\r\n\r\nThe `make doc` command has been altered to generate the new documentation into\r\nthe `doc/ng/$(CRATE)` directories.\r\n\r\nPreviews\r\n* http://www.contrib.andrew.cmu.edu/~acrichto/doc/std/\r\n* http://www.contrib.andrew.cmu.edu/~acrichto/doc/extra/\r\n\r\nMissing features\r\n* Different versions of documentation on the same page (all possibly indexed as well?) I think that this needs to be thought out before action is taken. It's an awesome idea, but it should be done carefully.\r\n* Source links are missing. This is a little dependent on getting versions working. In theory we should link back to github, but we should always link back to the exact version the documentation was generated from.\r\n* Integration with other tools. It would be awesome to have rustpkg-style inference of the package name and version so they don't have to be specified anywhere. Additionally, I should be able to build documentation for a pkgid, not necessarily a crate file.\r\n\r\ncc @cmr/@Seldaek", "tree": {"sha": "f4fbec72401b8656aa39d7fa8d8869f69b852907", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4fbec72401b8656aa39d7fa8d8869f69b852907"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "html_url": "https://github.com/rust-lang/rust/commit/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e268c7fcc58593d71962a49a147c21edfa702f20", "url": "https://api.github.com/repos/rust-lang/rust/commits/e268c7fcc58593d71962a49a147c21edfa702f20", "html_url": "https://github.com/rust-lang/rust/commit/e268c7fcc58593d71962a49a147c21edfa702f20"}, {"sha": "4fd061c426902b0904c65e64a3780b21f9ab3afb", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd061c426902b0904c65e64a3780b21f9ab3afb", "html_url": "https://github.com/rust-lang/rust/commit/4fd061c426902b0904c65e64a3780b21f9ab3afb"}], "stats": {"total": 3194, "additions": 3061, "deletions": 133}, "files": [{"sha": "71243df3f6c52d6f63db74eafe6b320290c940a7", "filename": "RELEASES.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/RELEASES.txt", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/RELEASES.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.txt?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -143,6 +143,7 @@ Version 0.8 (October 2013)\n       * The runtime uses jemalloc for allocations.\n       * Segmented stacks are temporarily disabled as part of the transition to\n         the new runtime. Stack overflows are possible!\n+      * A new documentation backend, rustdoc_ng, is available for use\n \n Version 0.7 (July 2013)\n -----------------------"}, {"sha": "c214823476d8f9e8055f950c94887184aeb2be5f", "filename": "mk/docs.mk", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -213,6 +213,7 @@ else\n \n # The rustdoc executable\n RUSTDOC = $(HBIN2_H_$(CFG_BUILD_TRIPLE))/rustdoc$(X_$(CFG_BUILD_TRIPLE))\n+RUSTDOC_NG = $(HBIN2_H_$(CFG_BUILD_TRIPLE))/rustdoc_ng$(X_$(CFG_BUILD_TRIPLE))\n \n # The library documenting macro\n # $(1) - The output directory\n@@ -230,8 +231,22 @@ doc/$(1)/rust.css: rust.css\n DOCS += doc/$(1)/index.html\n endef\n \n+# The library documenting macro\n+# $(1) - The output directory\n+# $(2) - The crate file\n+# $(3) - The crate soruce files\n+define libdocng\n+doc/ng/$(1)/index.html: $(2) $(3) $$(RUSTDOC_NG)\n+\t@$$(call E, rustdoc_ng: $$@)\n+\t$(Q)$(RUSTDOC_NG) html $(2) -o doc/ng\n+\n+DOCS += doc/ng/$(1)/index.html\n+endef\n+\n $(eval $(call libdoc,std,$(STDLIB_CRATE),$(STDLIB_INPUTS)))\n $(eval $(call libdoc,extra,$(EXTRALIB_CRATE),$(EXTRALIB_INPUTS)))\n+$(eval $(call libdocng,std,$(STDLIB_CRATE),$(STDLIB_INPUTS)))\n+$(eval $(call libdocng,extra,$(EXTRALIB_CRATE),$(EXTRALIB_INPUTS)))\n endif\n \n "}, {"sha": "c73226eb761024ce5e9b8e7f60ab19f35a4cb033", "filename": "src/libextra/extra.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Flibextra%2Fextra.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Flibextra%2Fextra.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fextra.rs?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -25,6 +25,10 @@ Rust extras are part of the standard Rust distribution.\n        uuid = \"122bed0b-c19b-4b82-b0b7-7ae8aead7297\",\n        url = \"https://github.com/mozilla/rust/tree/master/src/libextra\")];\n \n+#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n+      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+      passes = \"strip-hidden\")];\n+\n #[comment = \"Rust extras\"];\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];"}, {"sha": "d72494b625535a3dec74e0ceeba01d56560ca782", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #[macro_escape];\n+#[doc(hidden)];\n \n macro_rules! rterrln (\n     ($( $arg:expr),+) => ( {"}, {"sha": "ba8beeba4f66facf419fd28d600eec4e09ed9187", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -11,6 +11,7 @@\n // FIXME(#4375): this shouldn't have to be a nested module named 'generated'\n \n #[macro_escape];\n+#[doc(hidden)];\n \n macro_rules! int_module (($T:ty, $bits:expr) => (mod generated {\n "}, {"sha": "45280482b87b1cb4e649aed59f5beede7c2244c9", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -11,6 +11,7 @@\n // FIXME(#4375): this shouldn't have to be a nested module named 'generated'\n \n #[macro_escape];\n+#[doc(hidden)];\n \n macro_rules! uint_module (($T:ty, $T_SIGNED:ty, $bits:expr) => (mod generated {\n "}, {"sha": "df59e5538b40ad03ab193a409af9689157281316", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -54,7 +54,8 @@ Several modules in `core` are clients of `rt`:\n \n */\n \n-#[doc(hidden)];\n+// XXX: this should not be here.\n+#[allow(missing_doc)];\n \n use cell::Cell;\n use clone::Clone;"}, {"sha": "8dcb7d8cd04c89a57c150d9efb9570e6e23849b5", "filename": "src/libstd/std.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Flibstd%2Fstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Flibstd%2Fstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstd.rs?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -57,6 +57,10 @@ they contained the following prologue:\n #[license = \"MIT/ASL2\"];\n #[crate_type = \"lib\"];\n \n+#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n+      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+      passes = \"strip-hidden\")];\n+\n // Don't link to std. We are std.\n #[no_std];\n "}, {"sha": "d33ae06911228195cefe4ab49bfcf89169952fe1", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -262,7 +262,7 @@ impl Context {\n                 let span = match self.names.find(&name) {\n                     Some(e) => e.span,\n                     None => {\n-                        let msg = fmt!(\"There is no argument named `%s`\", name);\n+                        let msg = fmt!(\"there is no argument named `%s`\", name);\n                         self.ecx.span_err(self.fmtsp, msg);\n                         return;\n                     }"}, {"sha": "f13bd6d9123cf8361ee939473d6c3ea4b4686edf", "filename": "src/libsyntax/parse/comments.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Flibsyntax%2Fparse%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Flibsyntax%2Fparse%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fcomments.rs?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -107,9 +107,7 @@ pub fn strip_doc_comment_decoration(comment: &str) -> ~str {\n     }\n \n     if comment.starts_with(\"//\") {\n-        // FIXME #5475:\n-        // return comment.slice(3u, comment.len()).to_owned();\n-        let r = comment.slice(3u, comment.len()); return r.to_owned();\n+        return comment.slice(3u, comment.len()).to_owned();\n     }\n \n     if comment.starts_with(\"/*\") {"}, {"sha": "97a599196e72fc55b57ba605775755a1bd6daf3b", "filename": "src/rustdoc_ng/clean.rs", "status": "modified", "additions": 52, "deletions": 3, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc_ng%2Fclean.rs?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -15,6 +15,7 @@ use its = syntax::parse::token::ident_to_str;\n \n use syntax;\n use syntax::ast;\n+use syntax::attr::AttributeMethods;\n \n use std;\n use doctree;\n@@ -90,6 +91,48 @@ pub struct Item {\n     id: ast::NodeId,\n }\n \n+impl Item {\n+    /// Finds the `doc` attribute as a List and returns the list of attributes\n+    /// nested inside.\n+    pub fn doc_list<'a>(&'a self) -> Option<&'a [Attribute]> {\n+        for attr in self.attrs.iter() {\n+            match *attr {\n+                List(~\"doc\", ref list) => { return Some(list.as_slice()); }\n+                _ => {}\n+            }\n+        }\n+        return None;\n+    }\n+\n+    /// Finds the `doc` attribute as a NameValue and returns the corresponding\n+    /// value found.\n+    pub fn doc_value<'a>(&'a self) -> Option<&'a str> {\n+        for attr in self.attrs.iter() {\n+            match *attr {\n+                NameValue(~\"doc\", ref v) => { return Some(v.as_slice()); }\n+                _ => {}\n+            }\n+        }\n+        return None;\n+    }\n+\n+    pub fn is_mod(&self) -> bool {\n+        match self.inner { ModuleItem(*) => true, _ => false }\n+    }\n+    pub fn is_trait(&self) -> bool {\n+        match self.inner { TraitItem(*) => true, _ => false }\n+    }\n+    pub fn is_struct(&self) -> bool {\n+        match self.inner { StructItem(*) => true, _ => false }\n+    }\n+    pub fn is_enum(&self) -> bool {\n+        match self.inner { EnumItem(*) => true, _ => false }\n+    }\n+    pub fn is_fn(&self) -> bool {\n+        match self.inner { FunctionItem(*) => true, _ => false }\n+    }\n+}\n+\n #[deriving(Clone, Encodable, Decodable)]\n pub enum ItemEnum {\n     StructItem(Struct),\n@@ -155,7 +198,7 @@ impl Clean<Attribute> for ast::MetaItem {\n \n impl Clean<Attribute> for ast::Attribute {\n     fn clean(&self) -> Attribute {\n-        self.node.value.clean()\n+        self.desugar_doc().node.value.clean()\n     }\n }\n \n@@ -437,18 +480,24 @@ pub enum TraitMethod {\n }\n \n impl TraitMethod {\n-    fn is_req(&self) -> bool {\n+    pub fn is_req(&self) -> bool {\n         match self {\n             &Required(*) => true,\n             _ => false,\n         }\n     }\n-    fn is_def(&self) -> bool {\n+    pub fn is_def(&self) -> bool {\n         match self {\n             &Provided(*) => true,\n             _ => false,\n         }\n     }\n+    pub fn item<'a>(&'a self) -> &'a Item {\n+        match *self {\n+            Required(ref item) => item,\n+            Provided(ref item) => item,\n+        }\n+    }\n }\n \n impl Clean<TraitMethod> for ast::trait_method {"}, {"sha": "ae74f4e37c3c351744386a7ecdc3dd536f98f1f2", "filename": "src/rustdoc_ng/fold.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc_ng%2Ffold.rs?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -91,21 +91,9 @@ pub trait DocFolder {\n     }\n \n     fn fold_crate(&mut self, mut c: Crate) -> Crate {\n-        let mut mod_ = None;\n-        std::util::swap(&mut mod_, &mut c.module);\n-        let mod_ = mod_.unwrap();\n-        c.module = self.fold_item(mod_);\n-        let Crate { name, module } = c;\n-        match module {\n-            Some(Item { inner: ModuleItem(m), name: name_, attrs: attrs_,\n-            source, visibility: vis, id }) => {\n-                return Crate { module: Some(Item { inner:\n-                                            ModuleItem(self.fold_mod(m)),\n-                                            name: name_, attrs: attrs_,\n-                                            source: source, id: id, visibility: vis }), name: name};\n-            },\n-            Some(_) => fail!(\"non-module item set as module of crate\"),\n-            None => return Crate { module: None, name: name},\n-        }\n+        c.module = match std::util::replace(&mut c.module, None) {\n+            Some(module) => self.fold_item(module), None => None\n+        };\n+        return c;\n     }\n }"}, {"sha": "4d0f6928d50e3534bf546867aea2c2f74659a37b", "filename": "src/rustdoc_ng/html/format.rs", "status": "added", "additions": 364, "deletions": 0, "changes": 364, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc_ng%2Fhtml%2Fformat.rs?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -0,0 +1,364 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+use std::local_data;\n+use std::rt::io;\n+\n+use syntax::ast;\n+\n+use clean;\n+use html::render::{cache_key, current_location_key};\n+\n+pub struct VisSpace(Option<ast::visibility>);\n+pub struct Method<'self>(&'self clean::SelfTy, &'self clean::FnDecl);\n+\n+impl fmt::Default for clean::Generics {\n+    fn fmt(g: &clean::Generics, f: &mut fmt::Formatter) {\n+        if g.lifetimes.len() == 0 && g.type_params.len() == 0 { return }\n+        f.buf.write(\"&lt;\".as_bytes());\n+\n+        for (i, life) in g.lifetimes.iter().enumerate() {\n+            if i > 0 { f.buf.write(\", \".as_bytes()); }\n+            write!(f.buf, \"{}\", *life);\n+        }\n+\n+        if g.type_params.len() > 0 {\n+            if g.lifetimes.len() > 0 { f.buf.write(\", \".as_bytes()); }\n+\n+            for (i, tp) in g.type_params.iter().enumerate() {\n+                if i > 0 { f.buf.write(\", \".as_bytes()) }\n+                f.buf.write(tp.name.as_bytes());\n+\n+                if tp.bounds.len() > 0 {\n+                    f.buf.write(\": \".as_bytes());\n+                    for (i, bound) in tp.bounds.iter().enumerate() {\n+                        if i > 0 { f.buf.write(\" + \".as_bytes()); }\n+                        write!(f.buf, \"{}\", *bound);\n+                    }\n+                }\n+            }\n+        }\n+        f.buf.write(\"&gt;\".as_bytes());\n+    }\n+}\n+\n+impl fmt::Default for clean::Lifetime {\n+    fn fmt(l: &clean::Lifetime, f: &mut fmt::Formatter) {\n+        f.buf.write(\"'\".as_bytes());\n+        f.buf.write(l.as_bytes());\n+    }\n+}\n+\n+impl fmt::Default for clean::TyParamBound {\n+    fn fmt(bound: &clean::TyParamBound, f: &mut fmt::Formatter) {\n+        match *bound {\n+            clean::RegionBound => {\n+                f.buf.write(\"'static\".as_bytes())\n+            }\n+            clean::TraitBound(ref ty) => {\n+                write!(f.buf, \"{}\", *ty);\n+            }\n+        }\n+    }\n+}\n+\n+impl fmt::Default for clean::Path {\n+    fn fmt(path: &clean::Path, f: &mut fmt::Formatter) {\n+        if path.global { f.buf.write(\"::\".as_bytes()) }\n+        for (i, seg) in path.segments.iter().enumerate() {\n+            if i > 0 { f.buf.write(\"::\".as_bytes()) }\n+            f.buf.write(seg.name.as_bytes());\n+\n+            if seg.lifetime.is_some() || seg.types.len() > 0 {\n+                f.buf.write(\"&lt;\".as_bytes());\n+                match seg.lifetime {\n+                    Some(ref lifetime) => write!(f.buf, \"{}\", *lifetime),\n+                    None => {}\n+                }\n+                for (i, ty) in seg.types.iter().enumerate() {\n+                    if i > 0 || seg.lifetime.is_some() {\n+                        f.buf.write(\", \".as_bytes());\n+                    }\n+                    write!(f.buf, \"{}\", *ty);\n+                }\n+                f.buf.write(\"&gt;\".as_bytes());\n+            }\n+        }\n+    }\n+}\n+\n+fn resolved_path(w: &mut io::Writer, id: ast::NodeId, path: &clean::Path) {\n+    // The generics will get written to both the title and link\n+    let mut generics = ~\"\";\n+    let last = path.segments.last();\n+    if last.lifetime.is_some() || last.types.len() > 0 {\n+        generics.push_str(\"&lt;\");\n+        match last.lifetime {\n+            Some(ref lifetime) => generics.push_str(format!(\"{}\", *lifetime)),\n+            None => {}\n+        }\n+        for (i, ty) in last.types.iter().enumerate() {\n+            if i > 0 || last.lifetime.is_some() {\n+                generics.push_str(\", \");\n+            }\n+            generics.push_str(format!(\"{}\", *ty));\n+        }\n+        generics.push_str(\"&gt;\");\n+    }\n+\n+    // Did someone say rightward-drift?\n+    do local_data::get(current_location_key) |loc| {\n+        let loc = loc.unwrap();\n+        do local_data::get(cache_key) |cache| {\n+            do cache.unwrap().read |cache| {\n+                match cache.paths.find(&id) {\n+                    // This is a documented path, link to it!\n+                    Some(&(ref fqp, shortty)) => {\n+                        let fqn = fqp.connect(\"::\");\n+                        let mut same = 0;\n+                        for (a, b) in loc.iter().zip(fqp.iter()) {\n+                            if *a == *b {\n+                                same += 1;\n+                            } else {\n+                                break;\n+                            }\n+                        }\n+\n+                        let mut url = ~\"\";\n+                        for _ in range(same, loc.len()) {\n+                            url.push_str(\"../\");\n+                        }\n+                        if same == fqp.len() {\n+                            url.push_str(shortty);\n+                            url.push_str(\".\");\n+                            url.push_str(*fqp.last());\n+                            url.push_str(\".html\");\n+                        } else {\n+                            let remaining = fqp.slice_from(same);\n+                            let to_link = remaining.slice_to(remaining.len() - 1);\n+                            for component in to_link.iter() {\n+                                url.push_str(*component);\n+                                url.push_str(\"/\");\n+                            }\n+                            url.push_str(shortty);\n+                            url.push_str(\".\");\n+                            url.push_str(*remaining.last());\n+                            url.push_str(\".html\");\n+                        }\n+\n+                        write!(w, \"<a class='{}' href='{}' title='{}'>{}</a>{}\",\n+                               shortty, url, fqn, last.name, generics);\n+                    }\n+                    None => {\n+                        write!(w, \"{}{}\", last.name, generics);\n+                    }\n+                };\n+            }\n+        }\n+    }\n+}\n+\n+impl fmt::Default for clean::Type {\n+    fn fmt(g: &clean::Type, f: &mut fmt::Formatter) {\n+        match *g {\n+            clean::TyParamBinder(id) | clean::Generic(id) => {\n+                do local_data::get(cache_key) |cache| {\n+                    do cache.unwrap().read |m| {\n+                        f.buf.write(m.typarams.get(&id).as_bytes());\n+                    }\n+                }\n+            }\n+            clean::Unresolved(*) => unreachable!(),\n+            clean::ResolvedPath{id, typarams: ref typarams, path: ref path} => {\n+                resolved_path(f.buf, id, path);\n+                match *typarams {\n+                    Some(ref params) => {\n+                        f.buf.write(\"&lt;\".as_bytes());\n+                        for (i, param) in params.iter().enumerate() {\n+                            if i > 0 { f.buf.write(\", \".as_bytes()) }\n+                            write!(f.buf, \"{}\", *param);\n+                        }\n+                        f.buf.write(\"&gt;\".as_bytes());\n+                    }\n+                    None => {}\n+                }\n+            }\n+            // XXX: this should be a link\n+            clean::External(ref a, _) => {\n+                write!(f.buf, \"{}\", *a);\n+            }\n+            clean::Self(*) => f.buf.write(\"Self\".as_bytes()),\n+            clean::Primitive(prim) => {\n+                let s = match prim {\n+                    ast::ty_int(ast::ty_i) => \"int\",\n+                    ast::ty_int(ast::ty_i8) => \"i8\",\n+                    ast::ty_int(ast::ty_i16) => \"i16\",\n+                    ast::ty_int(ast::ty_i32) => \"i32\",\n+                    ast::ty_int(ast::ty_i64) => \"i64\",\n+                    ast::ty_uint(ast::ty_u) => \"uint\",\n+                    ast::ty_uint(ast::ty_u8) => \"u8\",\n+                    ast::ty_uint(ast::ty_u16) => \"u16\",\n+                    ast::ty_uint(ast::ty_u32) => \"u32\",\n+                    ast::ty_uint(ast::ty_u64) => \"u64\",\n+                    ast::ty_float(ast::ty_f) => \"float\",\n+                    ast::ty_float(ast::ty_f32) => \"f32\",\n+                    ast::ty_float(ast::ty_f64) => \"f64\",\n+                    ast::ty_str => \"str\",\n+                    ast::ty_bool => \"bool\",\n+                    ast::ty_char => \"char\",\n+                };\n+                f.buf.write(s.as_bytes());\n+            }\n+            clean::Closure(ref decl) => {\n+                f.buf.write(match decl.sigil {\n+                    ast::BorrowedSigil => \"&amp;\",\n+                    ast::ManagedSigil => \"@\",\n+                    ast::OwnedSigil => \"~\",\n+                }.as_bytes());\n+                match decl.region {\n+                    Some(ref region) => write!(f.buf, \"{} \", *region),\n+                    None => {}\n+                }\n+                write!(f.buf, \"{}{}fn{}\",\n+                       match decl.purity {\n+                           ast::unsafe_fn => \"unsafe \",\n+                           ast::extern_fn => \"extern \",\n+                           ast::impure_fn => \"\"\n+                       },\n+                       match decl.onceness {\n+                           ast::Once => \"once \",\n+                           ast::Many => \"\",\n+                       },\n+                       decl.decl);\n+                // XXX: where are bounds and lifetimes printed?!\n+            }\n+            clean::BareFunction(ref decl) => {\n+                write!(f.buf, \"{}{}fn{}{}\",\n+                       match decl.purity {\n+                           ast::unsafe_fn => \"unsafe \",\n+                           ast::extern_fn => \"extern \",\n+                           ast::impure_fn => \"\"\n+                       },\n+                       match decl.abi {\n+                           ~\"\" | ~\"\\\"Rust\\\"\" => ~\"\",\n+                           ref s => \" \" + *s + \" \",\n+                       },\n+                       decl.generics,\n+                       decl.decl);\n+            }\n+            clean::Tuple(ref typs) => {\n+                f.buf.write(\"(\".as_bytes());\n+                for (i, typ) in typs.iter().enumerate() {\n+                    if i > 0 { f.buf.write(\", \".as_bytes()) }\n+                    write!(f.buf, \"{}\", *typ);\n+                }\n+                f.buf.write(\")\".as_bytes());\n+            }\n+            clean::Vector(ref t) => write!(f.buf, \"[{}]\", **t),\n+            clean::FixedVector(ref t, ref s) => {\n+                write!(f.buf, \"[{}, ..{}]\", **t, *s);\n+            }\n+            clean::String => f.buf.write(\"str\".as_bytes()),\n+            clean::Bool => f.buf.write(\"bool\".as_bytes()),\n+            clean::Unit => f.buf.write(\"()\".as_bytes()),\n+            clean::Bottom => f.buf.write(\"!\".as_bytes()),\n+            clean::Unique(ref t) => write!(f.buf, \"~{}\", **t),\n+            clean::Managed(m, ref t) => {\n+                write!(f.buf, \"@{}{}\",\n+                       match m {\n+                           clean::Mutable => \"mut \",\n+                           clean::Immutable => \"\",\n+                       }, **t)\n+            }\n+            clean::RawPointer(m, ref t) => {\n+                write!(f.buf, \"*{}{}\",\n+                       match m {\n+                           clean::Mutable => \"mut \",\n+                           clean::Immutable => \"\",\n+                       }, **t)\n+            }\n+            clean::BorrowedRef{ lifetime: ref l, mutability, type_: ref ty} => {\n+                let lt = match *l { Some(ref l) => format!(\"{} \", *l), _ => ~\"\" };\n+                write!(f.buf, \"&amp;{}{}{}\",\n+                       lt,\n+                       match mutability {\n+                           clean::Mutable => \"mut \",\n+                           clean::Immutable => \"\",\n+                       },\n+                       **ty);\n+            }\n+        }\n+    }\n+}\n+\n+impl fmt::Default for clean::FnDecl {\n+    fn fmt(d: &clean::FnDecl, f: &mut fmt::Formatter) {\n+        let mut args = ~\"\";\n+        for (i, input) in d.inputs.iter().enumerate() {\n+            if i > 0 { args.push_str(\", \"); }\n+            if input.name.len() > 0 {\n+                args.push_str(format!(\"{}: \", input.name));\n+            }\n+            args.push_str(format!(\"{}\", input.type_));\n+        }\n+        write!(f.buf, \"({args}){arrow, select, yes{ -&gt; {ret}} other{}}\",\n+               args = args,\n+               arrow = match d.output { clean::Unit => \"no\", _ => \"yes\" },\n+               ret = d.output);\n+    }\n+}\n+\n+impl<'self> fmt::Default for Method<'self> {\n+    fn fmt(m: &Method<'self>, f: &mut fmt::Formatter) {\n+        let Method(selfty, d) = *m;\n+        let mut args = ~\"\";\n+        match *selfty {\n+            clean::SelfStatic => {},\n+            clean::SelfValue => args.push_str(\"self\"),\n+            clean::SelfOwned => args.push_str(\"~self\"),\n+            clean::SelfManaged(clean::Mutable) => args.push_str(\"@mut self\"),\n+            clean::SelfManaged(clean::Immutable) => args.push_str(\"@self\"),\n+            clean::SelfBorrowed(Some(ref lt), clean::Immutable) => {\n+                args.push_str(format!(\"&amp;{} self\", *lt));\n+            }\n+            clean::SelfBorrowed(Some(ref lt), clean::Mutable) => {\n+                args.push_str(format!(\"&amp;{} mut self\", *lt));\n+            }\n+            clean::SelfBorrowed(None, clean::Mutable) => {\n+                args.push_str(\"&amp;mut self\");\n+            }\n+            clean::SelfBorrowed(None, clean::Immutable) => {\n+                args.push_str(\"&amp;self\");\n+            }\n+        }\n+        for (i, input) in d.inputs.iter().enumerate() {\n+            if i > 0 || args.len() > 0 { args.push_str(\", \"); }\n+            if input.name.len() > 0 {\n+                args.push_str(format!(\"{}: \", input.name));\n+            }\n+            args.push_str(format!(\"{}\", input.type_));\n+        }\n+        write!(f.buf, \"({args}){arrow, select, yes{ -&gt; {ret}} other{}}\",\n+               args = args,\n+               arrow = match d.output { clean::Unit => \"no\", _ => \"yes\" },\n+               ret = d.output);\n+    }\n+}\n+\n+impl fmt::Default for VisSpace {\n+    fn fmt(v: &VisSpace, f: &mut fmt::Formatter) {\n+        match **v {\n+            Some(ast::public) => { write!(f.buf, \"pub \"); }\n+            Some(ast::private) => { write!(f.buf, \"priv \"); }\n+            Some(ast::inherited) | None => {}\n+        }\n+    }\n+}"}, {"sha": "fcf13779389d002c127a3c57012d90c5c890aa14", "filename": "src/rustdoc_ng/html/layout.rs", "status": "added", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc_ng%2Fhtml%2Flayout.rs?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -0,0 +1,130 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+use std::rt::io;\n+\n+#[deriving(Clone)]\n+pub struct Layout {\n+    logo: ~str,\n+    favicon: ~str,\n+    crate: ~str,\n+}\n+\n+pub struct Page<'self> {\n+    title: &'self str,\n+    ty: &'self str,\n+    root_path: &'self str,\n+}\n+\n+pub fn render<T: fmt::Default, S: fmt::Default>(\n+    dst: &mut io::Writer, layout: &Layout, page: &Page, sidebar: &S, t: &T)\n+{\n+    write!(dst, \"\n+<!DOCTYPE html>\n+<html lang=\\\"en\\\">\n+<head>\n+    <meta charset=\\\"utf-8\\\" />\n+    <title>{title}</title>\n+\n+    <link href='http://fonts.googleapis.com/css?family=Oswald:700|Inconsolata:400'\n+          rel='stylesheet' type='text/css'>\n+    <link rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"{root_path}main.css\\\">\n+\n+    {favicon, select, none{} other{\n+        <link rel=\\\"icon\\\" href=\\\"#\\\" sizes=\\\"16x16\\\"\n+              type=\\\"image/vnd.microsoft.icon\\\" />}}\n+</head>\n+<body>\n+    <!--[if lte IE 8]>\n+    <div class=\\\"warning\\\">\n+        This old browser is unsupported and will most likely display funky\n+        things\n+    </div>\n+    <![endif]-->\n+\n+    <section class=\\\"sidebar\\\">\n+        {logo, select, none{} other{\n+            <a href='{root_path}index.html'><img src='#' alt=''/></a>\n+        }}\n+\n+        {sidebar}\n+    </section>\n+\n+    <nav class=\\\"sub\\\">\n+        <form class=\\\"search-form js-only\\\">\n+            <input class=\\\"search-input\\\" name=\\\"search\\\"\n+                   autocomplete=\\\"off\\\" />\n+            <button class=\\\"do-search\\\">Search</button>\n+        </form>\n+    </nav>\n+\n+    <section class=\\\"content {ty}\\\">{content}</section>\n+\n+    <section class=\\\"footer\\\"></section>\n+\n+    <script>\n+        var rootPath = \\\"{root_path}\\\";\n+    </script>\n+    <script src=\\\"{root_path}jquery.js\\\"></script>\n+    <script src=\\\"{root_path}{crate}/search-index.js\\\"></script>\n+    <script src=\\\"{root_path}main.js\\\"></script>\n+\n+    <div id=\\\"help\\\" class=\\\"hidden\\\">\n+        <div class=\\\"shortcuts\\\">\n+            <h1>Keyboard shortcuts</h1>\n+            <dl>\n+                <dt>?</dt>\n+                <dd>Show this help dialog</dd>\n+                <dt>S</dt>\n+                <dd>Focus the search field</dd>\n+                <dt>&uarr;</dt>\n+                <dd>Move up in search results</dd>\n+                <dt>&darr;</dt>\n+                <dd>Move down in search results</dd>\n+                <dt>&\\\\#9166;</dt>\n+                <dd>Go to active search result</dd>\n+            </dl>\n+        </div>\n+        <div class=\\\"infos\\\">\n+            <h1>Search tricks</h1>\n+            <p>\n+                Prefix searches with a type followed by a colon (e.g.\n+                <code>fn:</code>) to restrict the search to a given type.\n+            </p>\n+            <p>\n+                Accepted types are: <code>fn</code>, <code>mod</code>,\n+                <code>struct</code> (or <code>str</code>), <code>enum</code>,\n+                <code>trait</code>, <code>typedef</code> (or\n+                <code>tdef</code>).\n+            </p>\n+        </div>\n+    </div>\n+</body>\n+</html>\n+\",\n+    content   = *t,\n+    root_path = page.root_path,\n+    ty        = page.ty,\n+    logo      = nonestr(layout.logo),\n+    title     = page.title,\n+    favicon   = nonestr(layout.favicon),\n+    sidebar   = *sidebar,\n+    crate     = layout.crate,\n+    );\n+}\n+\n+fn boolstr(b: bool) -> &'static str {\n+    if b { \"true\" } else { \"false\" }\n+}\n+\n+fn nonestr<'a>(s: &'a str) -> &'a str {\n+    if s == \"\" { \"none\" } else { s }\n+}"}, {"sha": "14e2327550b324d568984c17637aa824d138e129", "filename": "src/rustdoc_ng/html/markdown.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc_ng%2Fhtml%2Fmarkdown.rs?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -0,0 +1,54 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::fmt;\n+use std::rt::io::Reader;\n+use std::rt::io::pipe::PipeStream;\n+use std::rt::io::process::{ProcessConfig, Process, CreatePipe};\n+use std::rt::io;\n+\n+pub struct Markdown<'self>(&'self str);\n+\n+impl<'self> fmt::Default for Markdown<'self> {\n+    fn fmt(md: &Markdown<'self>, fmt: &mut fmt::Formatter) {\n+        if md.len() == 0 { return; }\n+\n+        // Create the pandoc process\n+        do io::io_error::cond.trap(|err| {\n+            fail2!(\"Error executing `pandoc`: {}\", err.desc);\n+        }).inside {\n+            let io = ~[CreatePipe(PipeStream::new().unwrap(), true, false),\n+                       CreatePipe(PipeStream::new().unwrap(), false, true)];\n+            let args = ProcessConfig {\n+                program: \"pandoc\",\n+                args: [],\n+                env: None,\n+                cwd: None,\n+                io: io,\n+            };\n+            let mut p = Process::new(args).expect(\"couldn't fork for pandoc\");\n+\n+            // Write the markdown to stdin and close it.\n+            p.io[0].get_mut_ref().write(md.as_bytes());\n+            p.io[0] = None;\n+\n+            // Ferry the output from pandoc over to the destination buffer.\n+            let mut buf = [0, ..1024];\n+            loop {\n+                match p.io[1].get_mut_ref().read(buf) {\n+                    None | Some(0) => { break }\n+                    Some(n) => {\n+                        fmt.buf.write(buf.slice_to(n));\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "b004061e04a82110604c802fa8874594b1870405", "filename": "src/rustdoc_ng/html/render.rs", "status": "added", "additions": 1108, "deletions": 0, "changes": 1108, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc_ng%2Fhtml%2Frender.rs?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -0,0 +1,1108 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::cell::Cell;\n+use std::comm::{SharedPort, SharedChan};\n+use std::comm;\n+use std::fmt;\n+use std::hashmap::HashMap;\n+use std::local_data;\n+use std::rt::io::buffered::BufferedWriter;\n+use std::rt::io::file::{FileInfo, DirectoryInfo};\n+use std::rt::io::file;\n+use std::rt::io;\n+use std::task;\n+use std::unstable::finally::Finally;\n+use std::util;\n+use std::vec;\n+\n+use extra::arc::RWArc;\n+use extra::json::ToJson;\n+use extra::sort;\n+\n+use syntax::ast;\n+\n+use clean;\n+use doctree;\n+use fold::DocFolder;\n+use html::format::{VisSpace, Method};\n+use html::layout;\n+use html::markdown::Markdown;\n+\n+#[deriving(Clone)]\n+pub struct Context {\n+    current: ~[~str],\n+    root_path: ~str,\n+    dst: Path,\n+    layout: layout::Layout,\n+    sidebar: HashMap<~str, ~[~str]>,\n+}\n+\n+enum Implementor {\n+    PathType(clean::Type),\n+    OtherType(clean::Generics, /* trait */ clean::Type, /* for */ clean::Type),\n+}\n+\n+struct Cache {\n+    // typaram id => name of that typaram\n+    typarams: HashMap<ast::NodeId, ~str>,\n+    // type id => all implementations for that type\n+    impls: HashMap<ast::NodeId, ~[clean::Impl]>,\n+    // path id => (full qualified path, shortty) -- used to generate urls\n+    paths: HashMap<ast::NodeId, (~[~str], &'static str)>,\n+    // trait id => method name => dox\n+    traits: HashMap<ast::NodeId, HashMap<~str, ~str>>,\n+    // trait id => implementors of the trait\n+    implementors: HashMap<ast::NodeId, ~[Implementor]>,\n+\n+    priv stack: ~[~str],\n+    priv parent_stack: ~[ast::NodeId],\n+    priv search_index: ~[IndexItem],\n+}\n+\n+struct Item<'self> { cx: &'self Context, item: &'self clean::Item, }\n+struct Sidebar<'self> { cx: &'self Context, item: &'self clean::Item, }\n+\n+struct IndexItem {\n+    ty: &'static str,\n+    name: ~str,\n+    path: ~str,\n+    desc: ~str,\n+    parent: Option<ast::NodeId>,\n+}\n+\n+local_data_key!(pub cache_key: RWArc<Cache>)\n+local_data_key!(pub current_location_key: ~[~str])\n+\n+/// Generates the documentation for `crate` into the directory `dst`\n+pub fn run(mut crate: clean::Crate, dst: Path) {\n+    let mut cx = Context {\n+        dst: dst,\n+        current: ~[],\n+        root_path: ~\"\",\n+        sidebar: HashMap::new(),\n+        layout: layout::Layout {\n+            logo: ~\"\",\n+            favicon: ~\"\",\n+            crate: crate.name.clone(),\n+        },\n+    };\n+    mkdir(&cx.dst);\n+\n+    match crate.module.get_ref().doc_list() {\n+        Some(attrs) => {\n+            for attr in attrs.iter() {\n+                match *attr {\n+                    clean::NameValue(~\"html_favicon_url\", ref s) => {\n+                        cx.layout.favicon = s.to_owned();\n+                    }\n+                    clean::NameValue(~\"html_logo_url\", ref s) => {\n+                        cx.layout.logo = s.to_owned();\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n+        None => {}\n+    }\n+\n+    // Crawl the crate to build various caches used for the output\n+    let mut cache = Cache {\n+        impls: HashMap::new(),\n+        typarams: HashMap::new(),\n+        paths: HashMap::new(),\n+        traits: HashMap::new(),\n+        implementors: HashMap::new(),\n+        stack: ~[],\n+        parent_stack: ~[],\n+        search_index: ~[],\n+    };\n+    cache.stack.push(crate.name.clone());\n+    crate = cache.fold_crate(crate);\n+\n+    // Add all the static files\n+    write(cx.dst.push(\"jquery.js\"), include_str!(\"static/jquery-2.0.3.min.js\"));\n+    write(cx.dst.push(\"main.js\"), include_str!(\"static/main.js\"));\n+    write(cx.dst.push(\"main.css\"), include_str!(\"static/main.css\"));\n+    write(cx.dst.push(\"normalize.css\"), include_str!(\"static/normalize.css\"));\n+    write(cx.dst.push(\"index.html\"), format!(\"\n+        <DOCTYPE html><html><head>\n+            <meta http-equiv='refresh'\n+                  content=\\\"0; url={}/index.html\\\">\n+        </head><body></body></html>\n+    \", crate.name));\n+\n+    {\n+        mkdir(&cx.dst.push(crate.name));\n+        let dst = cx.dst.push(crate.name).push(\"search-index.js\");\n+        let mut w = BufferedWriter::new(dst.open_writer(io::CreateOrTruncate));\n+        let w = &mut w as &mut io::Writer;\n+        write!(w, \"var searchIndex = [\");\n+        for (i, item) in cache.search_index.iter().enumerate() {\n+            if i > 0 { write!(w, \",\"); }\n+            write!(w, \"\\\\{ty:\\\"{}\\\",name:\\\"{}\\\",path:\\\"{}\\\",desc:{}\",\n+                   item.ty, item.name, item.path,\n+                   item.desc.to_json().to_str())\n+            match item.parent {\n+                Some(id) => { write!(w, \",parent:'{}'\", id); }\n+                None => {}\n+            }\n+            write!(w, \"\\\\}\");\n+        }\n+        write!(w, \"];\");\n+        write!(w, \"var allPaths = \\\\{\");\n+        for (i, (&id, &(ref fqp, short))) in cache.paths.iter().enumerate() {\n+            if i > 0 { write!(w, \",\"); }\n+            write!(w, \"'{}':\\\\{type:'{}',name:'{}'\\\\}\", id, short, *fqp.last());\n+        }\n+        write!(w, \"\\\\};\");\n+        w.flush();\n+    }\n+\n+    // Now render the whole crate.\n+    cx.crate(crate, cache);\n+}\n+\n+fn write(dst: Path, contents: &str) {\n+    let mut w = dst.open_writer(io::CreateOrTruncate);\n+    w.write(contents.as_bytes());\n+}\n+\n+fn mkdir(path: &Path) {\n+    do io::io_error::cond.trap(|err| {\n+        error2!(\"Couldn't create directory `{}`: {}\",\n+                path.to_str(), err.desc);\n+        fail!()\n+    }).inside {\n+        if !path.is_dir() {\n+            file::mkdir(path);\n+        }\n+    }\n+}\n+\n+impl<'self> DocFolder for Cache {\n+    fn fold_item(&mut self, item: clean::Item) -> Option<clean::Item> {\n+        // Register any generics to their corresponding string. This is used\n+        // when pretty-printing types\n+        match item.inner {\n+            clean::StructItem(ref s)   => self.generics(&s.generics),\n+            clean::EnumItem(ref e)     => self.generics(&e.generics),\n+            clean::FunctionItem(ref f) => self.generics(&f.generics),\n+            clean::TypedefItem(ref t)  => self.generics(&t.generics),\n+            clean::TraitItem(ref t)    => self.generics(&t.generics),\n+            clean::ImplItem(ref i)     => self.generics(&i.generics),\n+            clean::TyMethodItem(ref i) => self.generics(&i.generics),\n+            clean::MethodItem(ref i)   => self.generics(&i.generics),\n+            _ => {}\n+        }\n+\n+        // Propagate a trait methods' documentation to all implementors of the\n+        // trait\n+        match item.inner {\n+            clean::TraitItem(ref t) => {\n+                let mut dox = HashMap::new();\n+                for meth in t.methods.iter() {\n+                    let it = meth.item();\n+                    match it.doc_value() {\n+                        None => {}\n+                        Some(s) => {\n+                            dox.insert(it.name.get_ref().to_owned(),\n+                                       s.to_owned());\n+                        }\n+                    }\n+                }\n+                self.traits.insert(item.id, dox);\n+            }\n+            _ => {}\n+        }\n+\n+        // Collect all the implementors of traits.\n+        match item.inner {\n+            clean::ImplItem(ref i) => {\n+                match i.trait_ {\n+                    Some(clean::ResolvedPath{ id, _ }) => {\n+                        let v = do self.implementors.find_or_insert_with(id) |_|{\n+                            ~[]\n+                        };\n+                        match i.for_ {\n+                            clean::ResolvedPath{_} => {\n+                                v.unshift(PathType(i.for_.clone()));\n+                            }\n+                            _ => {\n+                                v.push(OtherType(i.generics.clone(),\n+                                                 i.trait_.get_ref().clone(),\n+                                                 i.for_.clone()));\n+                            }\n+                        }\n+                    }\n+                    Some(*) | None => {}\n+                }\n+            }\n+            _ => {}\n+        }\n+\n+        // Index this method for searching later on\n+        match item.name {\n+            Some(ref s) => {\n+                let parent = match item.inner {\n+                    clean::TyMethodItem(*) | clean::VariantItem(*) => {\n+                        Some((Some(*self.parent_stack.last()),\n+                              self.stack.slice_to(self.stack.len() - 1)))\n+\n+                    }\n+                    clean::MethodItem(*) => {\n+                        if self.parent_stack.len() == 0 {\n+                            None\n+                        } else {\n+                            Some((Some(*self.parent_stack.last()),\n+                                  self.stack.as_slice()))\n+                        }\n+                    }\n+                    _ => Some((None, self.stack.as_slice()))\n+                };\n+                match parent {\n+                    Some((parent, path)) => {\n+                        self.search_index.push(IndexItem {\n+                            ty: shortty(&item),\n+                            name: s.to_owned(),\n+                            path: path.connect(\"::\"),\n+                            desc: shorter(item.doc_value()).to_owned(),\n+                            parent: parent,\n+                        });\n+                    }\n+                    None => {}\n+                }\n+            }\n+            None => {}\n+        }\n+\n+        // Keep track of the fully qualified path for this item.\n+        let pushed = if item.name.is_some() {\n+            let n = item.name.get_ref();\n+            if n.len() > 0 {\n+                self.stack.push(n.to_owned());\n+                true\n+            } else { false }\n+        } else { false };\n+        match item.inner {\n+            clean::StructItem(*) | clean::EnumItem(*) |\n+            clean::TypedefItem(*) | clean::TraitItem(*) => {\n+                self.paths.insert(item.id, (self.stack.clone(), shortty(&item)));\n+            }\n+            _ => {}\n+        }\n+\n+        // Maintain the parent stack\n+        let parent_pushed = match item.inner {\n+            clean::TraitItem(*) | clean::EnumItem(*) => {\n+                self.parent_stack.push(item.id); true\n+            }\n+            clean::ImplItem(ref i) => {\n+                match i.for_ {\n+                    clean::ResolvedPath{ id, _ } => {\n+                        self.parent_stack.push(id); true\n+                    }\n+                    _ => false\n+                }\n+            }\n+            _ => false\n+        };\n+\n+        // Once we've recursively found all the generics, then hoard off all the\n+        // implementations elsewhere\n+        let ret = match self.fold_item_recur(item) {\n+            Some(item) => {\n+                match item.inner {\n+                    clean::ImplItem(i) => {\n+                        match i.for_ {\n+                            clean::ResolvedPath { id, _ } => {\n+                                let v = do self.impls.find_or_insert_with(id) |_| {\n+                                    ~[]\n+                                };\n+                                v.push(i);\n+                            }\n+                            _ => {}\n+                        }\n+                        None\n+                    }\n+                    _ => Some(item),\n+                }\n+            }\n+            i => i,\n+        };\n+\n+        if pushed { self.stack.pop(); }\n+        if parent_pushed { self.parent_stack.pop(); }\n+        return ret;\n+    }\n+}\n+\n+impl<'self> Cache {\n+    fn generics(&mut self, generics: &clean::Generics) {\n+        for typ in generics.type_params.iter() {\n+            self.typarams.insert(typ.id, typ.name.clone());\n+        }\n+    }\n+}\n+\n+impl Context {\n+    fn recurse<T>(&mut self, s: ~str, f: &fn(&mut Context) -> T) -> T {\n+        // Recurse in the directory structure and change the \"root path\" to make\n+        // sure it always points to the top (relatively)\n+        if s.len() == 0 {\n+            fail2!(\"what {:?}\", self);\n+        }\n+        let next = self.dst.push(s);\n+        let prev = util::replace(&mut self.dst, next);\n+        self.root_path.push_str(\"../\");\n+        self.current.push(s);\n+\n+        mkdir(&self.dst);\n+        let ret = f(self);\n+\n+        // Go back to where we were at\n+        self.dst = prev;\n+        let len = self.root_path.len();\n+        self.root_path.truncate(len - 3);\n+        self.current.pop();\n+\n+        return ret;\n+    }\n+\n+    /// Processes\n+    fn crate(self, mut crate: clean::Crate, cache: Cache) {\n+        enum Work {\n+            Die,\n+            Process(Context, clean::Item),\n+        }\n+        enum Progress { JobNew, JobDone }\n+        static WORKERS: int = 10;\n+\n+        let mut item = match crate.module.take() {\n+            Some(i) => i,\n+            None => return\n+        };\n+        item.name = Some(crate.name);\n+\n+        let (port, chan) = comm::stream::<Work>();\n+        let port = SharedPort::new(port);\n+        let chan = SharedChan::new(chan);\n+        let (prog_port, prog_chan) = comm::stream();\n+        let prog_chan = SharedChan::new(prog_chan);\n+        let cache = RWArc::new(cache);\n+\n+        for i in range(0, WORKERS) {\n+            let port = port.clone();\n+            let chan = chan.clone();\n+            let prog_chan = prog_chan.clone();\n+\n+            let mut task = task::task();\n+            task.unlinked(); // we kill things manually\n+            task.name(format!(\"worker{}\", i));\n+            do task.spawn_with(cache.clone()) |cache| {\n+                local_data::set(cache_key, cache);\n+                loop {\n+                    match port.recv() {\n+                        Process(cx, item) => {\n+                            let mut cx = cx;\n+                            let item = Cell::new(item);\n+                            do (|| {\n+                                do cx.item(item.take()) |cx, item| {\n+                                    prog_chan.send(JobNew);\n+                                    chan.send(Process(cx.clone(), item));\n+                                }\n+                            }).finally {\n+                                // If we fail, everything else should still get\n+                                // completed\n+                                prog_chan.send(JobDone);\n+                            }\n+                        }\n+                        Die => break,\n+                    }\n+                }\n+            }\n+        }\n+\n+        let watcher_chan = chan.clone();\n+        let (done_port, done_chan) = comm::stream();\n+        do task::spawn {\n+            let mut jobs = 0;\n+            loop {\n+                match prog_port.recv() {\n+                    JobNew => jobs += 1,\n+                    JobDone => jobs -= 1,\n+                }\n+\n+                if jobs == 0 { break }\n+            }\n+\n+            for _ in range(0, WORKERS) {\n+                watcher_chan.send(Die);\n+            }\n+            done_chan.send(());\n+        }\n+\n+        prog_chan.send(JobNew);\n+        chan.send(Process(self, item));\n+        done_port.recv();\n+    }\n+\n+    fn item(&mut self, item: clean::Item, f: &fn(&mut Context, clean::Item)) {\n+        fn render(w: io::file::FileWriter, cx: &mut Context, it: &clean::Item,\n+                  pushname: bool) {\n+            // A little unfortunate that this is done like this, but it sure\n+            // does make formatting *a lot* nicer.\n+            local_data::set(current_location_key, cx.current.clone());\n+\n+            let mut title = cx.current.connect(\"::\");\n+            if pushname {\n+                if title.len() > 0 { title.push_str(\"::\"); }\n+                title.push_str(*it.name.get_ref());\n+            }\n+            title.push_str(\" - Rust\");\n+            let page = layout::Page {\n+                ty: shortty(it),\n+                root_path: cx.root_path,\n+                title: title,\n+            };\n+\n+            // We have a huge number of calls to write, so try to alleviate some\n+            // of the pain by using a buffered writer instead of invoking the\n+            // write sycall all the time.\n+            let mut writer = BufferedWriter::new(w);\n+            layout::render(&mut writer as &mut io::Writer, &cx.layout, &page,\n+                           &Sidebar{ cx: cx, item: it },\n+                           &Item{ cx: cx, item: it });\n+            writer.flush();\n+        }\n+\n+        match item.inner {\n+            clean::ModuleItem(*) => {\n+                let name = item.name.get_ref().to_owned();\n+                let item = Cell::new(item);\n+                do self.recurse(name) |this| {\n+                    let item = item.take();\n+                    let dst = this.dst.push(\"index.html\");\n+                    let writer = dst.open_writer(io::CreateOrTruncate);\n+                    render(writer.unwrap(), this, &item, false);\n+\n+                    let m = match item.inner {\n+                        clean::ModuleItem(m) => m,\n+                        _ => unreachable!()\n+                    };\n+                    this.sidebar = build_sidebar(&m);\n+                    for item in m.items.move_iter() {\n+                        f(this, item);\n+                    }\n+                }\n+            }\n+            _ if item.name.is_some() => {\n+                let dst = self.dst.push(item_path(&item));\n+                let writer = dst.open_writer(io::CreateOrTruncate);\n+                render(writer.unwrap(), self, &item, true);\n+            }\n+            _ => {}\n+        }\n+    }\n+}\n+\n+fn shortty(item: &clean::Item) -> &'static str {\n+    match item.inner {\n+        clean::ModuleItem(*)      => \"mod\",\n+        clean::StructItem(*)      => \"struct\",\n+        clean::EnumItem(*)        => \"enum\",\n+        clean::FunctionItem(*)    => \"fn\",\n+        clean::TypedefItem(*)     => \"typedef\",\n+        clean::StaticItem(*)      => \"static\",\n+        clean::TraitItem(*)       => \"trait\",\n+        clean::ImplItem(*)        => \"impl\",\n+        clean::ViewItemItem(*)    => \"viewitem\",\n+        clean::TyMethodItem(*)    => \"tymethod\",\n+        clean::MethodItem(*)      => \"method\",\n+        clean::StructFieldItem(*) => \"structfield\",\n+        clean::VariantItem(*)     => \"variant\",\n+    }\n+}\n+\n+impl<'self> Item<'self> {\n+    fn ismodule(&self) -> bool {\n+        match self.item.inner {\n+            clean::ModuleItem(*) => true, _ => false\n+        }\n+    }\n+}\n+\n+impl<'self> fmt::Default for Item<'self> {\n+    fn fmt(it: &Item<'self>, fmt: &mut fmt::Formatter) {\n+        // Write the breadcrumb trail header for the top\n+        write!(fmt.buf, \"<h1 class='fqn'>\");\n+        match it.item.inner {\n+            clean::ModuleItem(*) => write!(fmt.buf, \"Module \"),\n+            clean::FunctionItem(*) => write!(fmt.buf, \"Function \"),\n+            clean::TraitItem(*) => write!(fmt.buf, \"Trait \"),\n+            clean::StructItem(*) => write!(fmt.buf, \"Struct \"),\n+            clean::EnumItem(*) => write!(fmt.buf, \"Enum \"),\n+            _ => {}\n+        }\n+        let cur = it.cx.current.as_slice();\n+        let amt = if it.ismodule() { cur.len() - 1 } else { cur.len() };\n+        for (i, component) in cur.iter().enumerate().take(amt) {\n+            let mut trail = ~\"\";\n+            for _ in range(0, cur.len() - i - 1) {\n+                trail.push_str(\"../\");\n+            }\n+            write!(fmt.buf, \"<a href='{}index.html'>{}</a>::\",\n+                   trail, component.as_slice());\n+        }\n+        write!(fmt.buf, \"<a class='{}' href=''>{}</a></h1>\",\n+               shortty(it.item), it.item.name.get_ref().as_slice());\n+\n+        match it.item.inner {\n+            clean::ModuleItem(ref m) => item_module(fmt.buf, it.cx,\n+                                                    it.item, m.items),\n+            clean::FunctionItem(ref f) => item_function(fmt.buf, it.item, f),\n+            clean::TraitItem(ref t) => item_trait(fmt.buf, it.item, t),\n+            clean::StructItem(ref s) => item_struct(fmt.buf, it.item, s),\n+            clean::EnumItem(ref e) => item_enum(fmt.buf, it.item, e),\n+            clean::TypedefItem(ref t) => item_typedef(fmt.buf, it.item, t),\n+            _ => {}\n+        }\n+    }\n+}\n+\n+fn item_path(item: &clean::Item) -> ~str {\n+    match item.inner {\n+        clean::ModuleItem(*) => *item.name.get_ref() + \"/index.html\",\n+        _ => shortty(item) + \".\" + *item.name.get_ref() + \".html\"\n+    }\n+}\n+\n+fn full_path(cx: &Context, item: &clean::Item) -> ~str {\n+    let mut s = cx.current.connect(\"::\");\n+    s.push_str(\"::\");\n+    s.push_str(item.name.get_ref().as_slice());\n+    return s;\n+}\n+\n+fn blank<'a>(s: Option<&'a str>) -> &'a str {\n+    match s {\n+        Some(s) => s,\n+        None => \"\"\n+    }\n+}\n+\n+fn shorter<'a>(s: Option<&'a str>) -> &'a str {\n+    match s {\n+        Some(s) => match s.find_str(\"\\n\\n\") {\n+            Some(pos) => s.slice_to(pos),\n+            None => s,\n+        },\n+        None => \"\"\n+    }\n+}\n+\n+fn document(w: &mut io::Writer, item: &clean::Item) {\n+    match item.doc_value() {\n+        Some(s) => {\n+            write!(w, \"<div class='docblock'>{}</div>\", Markdown(s));\n+        }\n+        None => {}\n+    }\n+}\n+\n+fn item_module(w: &mut io::Writer, cx: &Context,\n+               item: &clean::Item, items: &[clean::Item]) {\n+    document(w, item);\n+    let mut indices = vec::from_fn(items.len(), |i| i);\n+\n+    fn lt(i1: &clean::Item, i2: &clean::Item) -> bool {\n+        if shortty(i1) == shortty(i2) {\n+            return i1.name < i2.name;\n+        }\n+        match (&i1.inner, &i2.inner) {\n+            (&clean::ViewItemItem(*), _) => true,\n+            (_, &clean::ViewItemItem(*)) => false,\n+            (&clean::ModuleItem(*), _) => true,\n+            (_, &clean::ModuleItem(*)) => false,\n+            (&clean::StructItem(*), _) => true,\n+            (_, &clean::StructItem(*)) => false,\n+            (&clean::EnumItem(*), _) => true,\n+            (_, &clean::EnumItem(*)) => false,\n+            (&clean::StaticItem(*), _) => true,\n+            (_, &clean::StaticItem(*)) => false,\n+            (&clean::TraitItem(*), _) => true,\n+            (_, &clean::TraitItem(*)) => false,\n+            (&clean::FunctionItem(*), _) => true,\n+            (_, &clean::FunctionItem(*)) => false,\n+            (&clean::TypedefItem(*), _) => true,\n+            (_, &clean::TypedefItem(*)) => false,\n+            _ => false,\n+        }\n+    }\n+\n+    do sort::quick_sort(indices) |&i1, &i2| {\n+        lt(&items[i1], &items[i2])\n+    }\n+\n+    let mut curty = \"\";\n+    for &idx in indices.iter() {\n+        let myitem = &items[idx];\n+        if myitem.name.is_none() { loop }\n+\n+        let myty = shortty(myitem);\n+        if myty != curty {\n+            if curty != \"\" {\n+                write!(w, \"</table>\");\n+            }\n+            curty = myty;\n+            write!(w, \"<h2>{}</h2>\\n<table>\", match myitem.inner {\n+                clean::ModuleItem(*)      => \"Modules\",\n+                clean::StructItem(*)      => \"Structs\",\n+                clean::EnumItem(*)        => \"Enums\",\n+                clean::FunctionItem(*)    => \"Functions\",\n+                clean::TypedefItem(*)     => \"Type Definitions\",\n+                clean::StaticItem(*)      => \"Statics\",\n+                clean::TraitItem(*)       => \"Traits\",\n+                clean::ImplItem(*)        => \"Implementations\",\n+                clean::ViewItemItem(*)    => \"Reexports\",\n+                clean::TyMethodItem(*)    => \"Type Methods\",\n+                clean::MethodItem(*)      => \"Methods\",\n+                clean::StructFieldItem(*) => \"Struct Fields\",\n+                clean::VariantItem(*)     => \"Variants\",\n+            });\n+        }\n+\n+        match myitem.inner {\n+            clean::StaticItem(ref s) => {\n+                struct Initializer<'self>(&'self str);\n+                impl<'self> fmt::Default for Initializer<'self> {\n+                    fn fmt(s: &Initializer<'self>, f: &mut fmt::Formatter) {\n+                        let tag = if s.contains(\"\\n\") { \"pre\" } else { \"code\" };\n+                        write!(f.buf, \"<{tag}>{}</{tag}>\",\n+                               s.as_slice(), tag=tag);\n+                    }\n+                }\n+\n+                write!(w, \"\n+                    <tr>\n+                        <td><code>{}: {} = </code>{}</td>\n+                        <td class='docblock'>{}&nbsp;</td>\n+                    </tr>\n+                \",\n+                *myitem.name.get_ref(),\n+                s.type_,\n+                Initializer(s.expr),\n+                Markdown(blank(myitem.doc_value())));\n+            }\n+\n+            _ => {\n+                write!(w, \"\n+                    <tr>\n+                        <td><a class='{class}' href='{href}'\n+                               title='{title}'>{}</a></td>\n+                        <td class='docblock short'>{}</td>\n+                    </tr>\n+                \",\n+                *myitem.name.get_ref(),\n+                Markdown(shorter(myitem.doc_value())),\n+                class = shortty(myitem),\n+                href = item_path(myitem),\n+                title = full_path(cx, myitem));\n+            }\n+        }\n+    }\n+    write!(w, \"</table>\");\n+}\n+\n+fn item_function(w: &mut io::Writer, it: &clean::Item, f: &clean::Function) {\n+    write!(w, \"<pre class='fn'>{vis}fn {name}{generics}{decl}</pre>\",\n+           vis = VisSpace(it.visibility),\n+           name = it.name.get_ref().as_slice(),\n+           generics = f.generics,\n+           decl = f.decl);\n+    document(w, it);\n+}\n+\n+fn item_trait(w: &mut io::Writer, it: &clean::Item, t: &clean::Trait) {\n+    let mut parents = ~\"\";\n+    if t.parents.len() > 0 {\n+        parents.push_str(\": \");\n+        for (i, p) in t.parents.iter().enumerate() {\n+            if i > 0 { parents.push_str(\" + \"); }\n+            parents.push_str(format!(\"{}\", *p));\n+        }\n+    }\n+\n+    // Output the trait definition\n+    write!(w, \"<pre class='trait'>{}trait {}{}{} \",\n+           VisSpace(it.visibility),\n+           it.name.get_ref().as_slice(),\n+           t.generics,\n+           parents);\n+    let required = t.methods.iter().filter(|m| m.is_req()).to_owned_vec();\n+    let provided = t.methods.iter().filter(|m| !m.is_req()).to_owned_vec();\n+\n+    if t.methods.len() == 0 {\n+        write!(w, \"\\\\{ \\\\}\");\n+    } else {\n+        write!(w, \"\\\\{\\n\");\n+        for m in required.iter() {\n+            write!(w, \"    \");\n+            render_method(w, m.item(), true);\n+            write!(w, \";\\n\");\n+        }\n+        if required.len() > 0 && provided.len() > 0 {\n+            w.write(\"\\n\".as_bytes());\n+        }\n+        for m in provided.iter() {\n+            write!(w, \"    \");\n+            render_method(w, m.item(), true);\n+            write!(w, \" \\\\{ ... \\\\}\\n\");\n+        }\n+        write!(w, \"\\\\}\");\n+    }\n+    write!(w, \"</pre>\");\n+\n+    // Trait documentation\n+    document(w, it);\n+\n+    fn meth(w: &mut io::Writer, m: &clean::TraitMethod) {\n+        write!(w, \"<h3 id='fn.{}' class='method'><code>\",\n+               *m.item().name.get_ref());\n+        render_method(w, m.item(), false);\n+        write!(w, \"</code></h3>\");\n+        document(w, m.item());\n+    }\n+\n+    // Output the documentation for each function individually\n+    if required.len() > 0 {\n+        write!(w, \"\n+            <h2 id='required-methods'>Required Methods</h2>\n+            <div class='methods'>\n+        \");\n+        for m in required.iter() {\n+            meth(w, *m);\n+        }\n+        write!(w, \"</div>\");\n+    }\n+    if provided.len() > 0 {\n+        write!(w, \"\n+            <h2 id='provided-methods'>Provided Methods</h2>\n+            <div class='methods'>\n+        \");\n+        for m in provided.iter() {\n+            meth(w, *m);\n+        }\n+        write!(w, \"</div>\");\n+    }\n+\n+    do local_data::get(cache_key) |cache| {\n+        do cache.unwrap().read |cache| {\n+            match cache.implementors.find(&it.id) {\n+                Some(implementors) => {\n+                    write!(w, \"\n+                        <h2 id='implementors'>Implementors</h2>\n+                        <ul class='item-list'>\n+                    \");\n+                    for i in implementors.iter() {\n+                        match *i {\n+                            PathType(ref ty) => {\n+                                write!(w, \"<li><code>{}</code></li>\", *ty);\n+                            }\n+                            OtherType(ref generics, ref trait_, ref for_) => {\n+                                write!(w, \"<li><code>impl{} {} for {}</code></li>\",\n+                                       *generics, *trait_, *for_);\n+                            }\n+                        }\n+                    }\n+                    write!(w, \"</ul>\");\n+                }\n+                None => {}\n+            }\n+        }\n+    }\n+}\n+\n+fn render_method(w: &mut io::Writer, meth: &clean::Item, withlink: bool) {\n+    fn fun(w: &mut io::Writer, it: &clean::Item, purity: ast::purity,\n+           g: &clean::Generics, selfty: &clean::SelfTy, d: &clean::FnDecl,\n+           withlink: bool) {\n+        write!(w, \"{}fn {withlink, select,\n+                            true{<a href='\\\\#fn.{name}'>{name}</a>}\n+                            other{{name}}\n+                        }{generics}{decl}\",\n+               match purity {\n+                   ast::unsafe_fn => \"unsafe \",\n+                   _ => \"\",\n+               },\n+               name = it.name.get_ref().as_slice(),\n+               generics = *g,\n+               decl = Method(selfty, d),\n+               withlink = if withlink {\"true\"} else {\"false\"});\n+    }\n+    match meth.inner {\n+        clean::TyMethodItem(ref m) => {\n+            fun(w, meth, m.purity, &m.generics, &m.self_, &m.decl, withlink);\n+        }\n+        clean::MethodItem(ref m) => {\n+            fun(w, meth, m.purity, &m.generics, &m.self_, &m.decl, withlink);\n+        }\n+        _ => unreachable!()\n+    }\n+}\n+\n+fn item_struct(w: &mut io::Writer, it: &clean::Item, s: &clean::Struct) {\n+    write!(w, \"<pre class='struct'>\");\n+    render_struct(w, it, Some(&s.generics), s.struct_type, s.fields, \"\");\n+    write!(w, \"</pre>\");\n+\n+    document(w, it);\n+    render_methods(w, it);\n+}\n+\n+fn item_enum(w: &mut io::Writer, it: &clean::Item, e: &clean::Enum) {\n+    write!(w, \"<pre class='enum'>{}enum {}{}\",\n+           VisSpace(it.visibility),\n+           it.name.get_ref().as_slice(),\n+           e.generics);\n+    if e.variants.len() == 0 {\n+        write!(w, \" \\\\{\\\\}\");\n+    } else {\n+        write!(w, \" \\\\{\\n\");\n+        for v in e.variants.iter() {\n+            let name = v.name.get_ref().as_slice();\n+            match v.inner {\n+                clean::VariantItem(ref var) => {\n+                    match var.kind {\n+                        clean::CLikeVariant => write!(w, \"    {},\\n\", name),\n+                        clean::TupleVariant(ref tys) => {\n+                            write!(w, \"    {}(\", name);\n+                            for (i, ty) in tys.iter().enumerate() {\n+                                if i > 0 { write!(w, \", \") }\n+                                write!(w, \"{}\", *ty);\n+                            }\n+                            write!(w, \"),\\n\");\n+                        }\n+                        clean::StructVariant(ref s) => {\n+                            render_struct(w, v, None, s.struct_type, s.fields,\n+                                          \"    \");\n+                        }\n+                    }\n+                }\n+                _ => unreachable!()\n+            }\n+        }\n+        write!(w, \"\\\\}\");\n+    }\n+    write!(w, \"</pre>\");\n+\n+    document(w, it);\n+    render_methods(w, it);\n+}\n+\n+fn render_struct(w: &mut io::Writer, it: &clean::Item,\n+                 g: Option<&clean::Generics>,\n+                 ty: doctree::StructType,\n+                 fields: &[clean::Item],\n+                 tab: &str) {\n+    write!(w, \"{}struct {}\",\n+           VisSpace(it.visibility),\n+           it.name.get_ref().as_slice());\n+    match g {\n+        Some(g) => write!(w, \"{}\", *g),\n+        None => {}\n+    }\n+    match ty {\n+        doctree::Plain => {\n+            write!(w, \" \\\\{\\n\");\n+            for field in fields.iter() {\n+                match field.inner {\n+                    clean::StructFieldItem(ref ty) => {\n+                        write!(w, \"    {}{}: {},\\n{}\",\n+                               VisSpace(field.visibility),\n+                               field.name.get_ref().as_slice(),\n+                               ty.type_,\n+                               tab);\n+                    }\n+                    _ => unreachable!()\n+                }\n+            }\n+            write!(w, \"\\\\}\");\n+        }\n+        doctree::Tuple | doctree::Newtype => {\n+            write!(w, \"(\");\n+            for (i, field) in fields.iter().enumerate() {\n+                if i > 0 { write!(w, \", \") }\n+                match field.inner {\n+                    clean::StructFieldItem(ref field) => {\n+                        write!(w, \"{}\", field.type_);\n+                    }\n+                    _ => unreachable!()\n+                }\n+            }\n+            write!(w, \");\");\n+        }\n+        doctree::Unit => { write!(w, \";\"); }\n+    }\n+}\n+\n+fn render_methods(w: &mut io::Writer, it: &clean::Item) {\n+    do local_data::get(cache_key) |cache| {\n+        let cache = cache.unwrap();\n+        do cache.read |c| {\n+            match c.impls.find(&it.id) {\n+                Some(v) => {\n+                    let mut non_trait = v.iter().filter(|i| i.trait_.is_none());\n+                    let non_trait = non_trait.to_owned_vec();\n+                    let mut traits = v.iter().filter(|i| i.trait_.is_some());\n+                    let traits = traits.to_owned_vec();\n+\n+                    if non_trait.len() > 0 {\n+                        write!(w, \"<h2 id='methods'>Methods</h2>\");\n+                        for &i in non_trait.iter() {\n+                            render_impl(w, i);\n+                        }\n+                    }\n+                    if traits.len() > 0 {\n+                        write!(w, \"<h2 id='implementations'>Trait \\\n+                                   Implementations</h2>\");\n+                        for &i in traits.iter() {\n+                            render_impl(w, i);\n+                        }\n+                    }\n+                }\n+                None => {}\n+            }\n+        }\n+    }\n+}\n+\n+fn render_impl(w: &mut io::Writer, i: &clean::Impl) {\n+    write!(w, \"<h3 class='impl'><code>impl{} \", i.generics);\n+    let trait_id = match i.trait_ {\n+        Some(ref ty) => {\n+            write!(w, \"{} for \", *ty);\n+            match *ty {\n+                clean::ResolvedPath { id, _ } => Some(id),\n+                _ => None,\n+            }\n+        }\n+        None => None\n+    };\n+    write!(w, \"{}</code></h3>\", i.for_);\n+    write!(w, \"<div class='methods'>\");\n+    for meth in i.methods.iter() {\n+        write!(w, \"<h4 id='fn.{}' class='method'><code>\",\n+               *meth.name.get_ref());\n+        render_method(w, meth, false);\n+        write!(w, \"</code></h4>\\n\");\n+        match meth.doc_value() {\n+            Some(s) => {\n+                write!(w, \"<div class='docblock'>{}</div>\", Markdown(s));\n+                loop\n+            }\n+            None => {}\n+        }\n+\n+        // No documentation? Attempt to slurp in the trait's documentation\n+        let trait_id = match trait_id { Some(id) => id, None => loop };\n+        do local_data::get(cache_key) |cache| {\n+            do cache.unwrap().read |cache| {\n+                let name = meth.name.get_ref().as_slice();\n+                match cache.traits.find(&trait_id) {\n+                    Some(m) => {\n+                        match m.find_equiv(&name) {\n+                            Some(s) => {\n+                                write!(w, \"<div class='docblock'>{}</div>\",\n+                                       Markdown(s.as_slice()));\n+                            }\n+                            None => {}\n+                        }\n+                    }\n+                    None => {}\n+                }\n+            }\n+        }\n+    }\n+    write!(w, \"</div>\");\n+}\n+\n+fn item_typedef(w: &mut io::Writer, it: &clean::Item, t: &clean::Typedef) {\n+    write!(w, \"<pre class='typedef'>type {}{} = {};</pre>\",\n+           it.name.get_ref().as_slice(),\n+           t.generics,\n+           t.type_);\n+\n+    document(w, it);\n+}\n+\n+impl<'self> fmt::Default for Sidebar<'self> {\n+    fn fmt(s: &Sidebar<'self>, fmt: &mut fmt::Formatter) {\n+        let cx = s.cx;\n+        let it = s.item;\n+        write!(fmt.buf, \"<p class='location'>\");\n+        let len = cx.current.len() - if it.is_mod() {1} else {0};\n+        for (i, name) in cx.current.iter().take(len).enumerate() {\n+            if i > 0 { write!(fmt.buf, \"&\\\\#8203;::\") }\n+            write!(fmt.buf, \"<a href='{}index.html'>{}</a>\",\n+                   cx.root_path.slice_to((cx.current.len() - i - 1) * 3), *name);\n+        }\n+        write!(fmt.buf, \"</p>\");\n+\n+        fn block(w: &mut io::Writer, short: &str, longty: &str,\n+                 cur: &clean::Item, cx: &Context) {\n+            let items = match cx.sidebar.find_equiv(&short) {\n+                Some(items) => items.as_slice(),\n+                None => return\n+            };\n+            write!(w, \"<div class='block {}'><h2>{}</h2>\", short, longty);\n+            for item in items.iter() {\n+                let class = if cur.name.get_ref() == item &&\n+                               short == shortty(cur) { \"current\" } else { \"\" };\n+                write!(w, \"<a class='{ty} {class}' href='{curty, select,\n+                                mod{../}\n+                                other{}\n+                           }{ty, select,\n+                                mod{{name}/index.html}\n+                                other{#.{name}.html}\n+                           }'>{name}</a><br/>\",\n+                       ty = short,\n+                       class = class,\n+                       curty = shortty(cur),\n+                       name = item.as_slice());\n+            }\n+            write!(w, \"</div>\");\n+        }\n+\n+        block(fmt.buf, \"mod\", \"Modules\", it, cx);\n+        block(fmt.buf, \"struct\", \"Structs\", it, cx);\n+        block(fmt.buf, \"enum\", \"Enums\", it, cx);\n+        block(fmt.buf, \"trait\", \"Traits\", it, cx);\n+        block(fmt.buf, \"fn\", \"Functions\", it, cx);\n+    }\n+}\n+\n+fn build_sidebar(m: &clean::Module) -> HashMap<~str, ~[~str]> {\n+    let mut map = HashMap::new();\n+    for item in m.items.iter() {\n+        let short = shortty(item);\n+        let myname = match item.name {\n+            None => loop,\n+            Some(ref s) => s.to_owned(),\n+        };\n+        let v = map.find_or_insert_with(short.to_owned(), |_| ~[]);\n+        v.push(myname);\n+    }\n+\n+    for (_, items) in map.mut_iter() {\n+        sort::quick_sort(*items, |i1, i2| i1 < i2);\n+    }\n+    return map;\n+}"}, {"sha": "2be209dd2233ed75612f4afcb6cf8816926a1738", "filename": "src/rustdoc_ng/html/static/jquery-2.0.3.min.js", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fhtml%2Fstatic%2Fjquery-2.0.3.min.js", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fhtml%2Fstatic%2Fjquery-2.0.3.min.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc_ng%2Fhtml%2Fstatic%2Fjquery-2.0.3.min.js?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -0,0 +1,6 @@\n+/*! jQuery v2.0.3 | (c) 2005, 2013 jQuery Foundation, Inc. | jquery.org/license\n+//@ sourceMappingURL=jquery-2.0.3.min.map\n+*/\n+(function(e,undefined){var t,n,r=typeof undefined,i=e.location,o=e.document,s=o.documentElement,a=e.jQuery,u=e.$,l={},c=[],p=\"2.0.3\",f=c.concat,h=c.push,d=c.slice,g=c.indexOf,m=l.toString,y=l.hasOwnProperty,v=p.trim,x=function(e,n){return new x.fn.init(e,n,t)},b=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,w=/\\S+/g,T=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,C=/^<(\\w+)\\s*\\/?>(?:<\\/\\1>|)$/,k=/^-ms-/,N=/-([\\da-z])/gi,E=function(e,t){return t.toUpperCase()},S=function(){o.removeEventListener(\"DOMContentLoaded\",S,!1),e.removeEventListener(\"load\",S,!1),x.ready()};x.fn=x.prototype={jquery:p,constructor:x,init:function(e,t,n){var r,i;if(!e)return this;if(\"string\"==typeof e){if(r=\"<\"===e.charAt(0)&&\">\"===e.charAt(e.length-1)&&e.length>=3?[null,e,null]:T.exec(e),!r||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof x?t[0]:t,x.merge(this,x.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:o,!0)),C.test(r[1])&&x.isPlainObject(t))for(r in t)x.isFunction(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return i=o.getElementById(r[2]),i&&i.parentNode&&(this.length=1,this[0]=i),this.context=o,this.selector=e,this}return e.nodeType?(this.context=this[0]=e,this.length=1,this):x.isFunction(e)?n.ready(e):(e.selector!==undefined&&(this.selector=e.selector,this.context=e.context),x.makeArray(e,this))},selector:\"\",length:0,toArray:function(){return d.call(this)},get:function(e){return null==e?this.toArray():0>e?this[this.length+e]:this[e]},pushStack:function(e){var t=x.merge(this.constructor(),e);return t.prevObject=this,t.context=this.context,t},each:function(e,t){return x.each(this,e,t)},ready:function(e){return x.ready.promise().done(e),this},slice:function(){return this.pushStack(d.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(0>e?t:0);return this.pushStack(n>=0&&t>n?[this[n]]:[])},map:function(e){return this.pushStack(x.map(this,function(t,n){return e.call(t,n,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:h,sort:[].sort,splice:[].splice},x.fn.init.prototype=x.fn,x.extend=x.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,u=arguments.length,l=!1;for(\"boolean\"==typeof s&&(l=s,s=arguments[1]||{},a=2),\"object\"==typeof s||x.isFunction(s)||(s={}),u===a&&(s=this,--a);u>a;a++)if(null!=(e=arguments[a]))for(t in e)n=s[t],r=e[t],s!==r&&(l&&r&&(x.isPlainObject(r)||(i=x.isArray(r)))?(i?(i=!1,o=n&&x.isArray(n)?n:[]):o=n&&x.isPlainObject(n)?n:{},s[t]=x.extend(l,o,r)):r!==undefined&&(s[t]=r));return s},x.extend({expando:\"jQuery\"+(p+Math.random()).replace(/\\D/g,\"\"),noConflict:function(t){return e.$===x&&(e.$=u),t&&e.jQuery===x&&(e.jQuery=a),x},isReady:!1,readyWait:1,holdReady:function(e){e?x.readyWait++:x.ready(!0)},ready:function(e){(e===!0?--x.readyWait:x.isReady)||(x.isReady=!0,e!==!0&&--x.readyWait>0||(n.resolveWith(o,[x]),x.fn.trigger&&x(o).trigger(\"ready\").off(\"ready\")))},isFunction:function(e){return\"function\"===x.type(e)},isArray:Array.isArray,isWindow:function(e){return null!=e&&e===e.window},isNumeric:function(e){return!isNaN(parseFloat(e))&&isFinite(e)},type:function(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?l[m.call(e)]||\"object\":typeof e},isPlainObject:function(e){if(\"object\"!==x.type(e)||e.nodeType||x.isWindow(e))return!1;try{if(e.constructor&&!y.call(e.constructor.prototype,\"isPrototypeOf\"))return!1}catch(t){return!1}return!0},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},error:function(e){throw Error(e)},parseHTML:function(e,t,n){if(!e||\"string\"!=typeof e)return null;\"boolean\"==typeof t&&(n=t,t=!1),t=t||o;var r=C.exec(e),i=!n&&[];return r?[t.createElement(r[1])]:(r=x.buildFragment([e],t,i),i&&x(i).remove(),x.merge([],r.childNodes))},parseJSON:JSON.parse,parseXML:function(e){var t,n;if(!e||\"string\"!=typeof e)return null;try{n=new DOMParser,t=n.parseFromString(e,\"text/xml\")}catch(r){t=undefined}return(!t||t.getElementsByTagName(\"parsererror\").length)&&x.error(\"Invalid XML: \"+e),t},noop:function(){},globalEval:function(e){var t,n=eval;e=x.trim(e),e&&(1===e.indexOf(\"use strict\")?(t=o.createElement(\"script\"),t.text=e,o.head.appendChild(t).parentNode.removeChild(t)):n(e))},camelCase:function(e){return e.replace(k,\"ms-\").replace(N,E)},nodeName:function(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()},each:function(e,t,n){var r,i=0,o=e.length,s=j(e);if(n){if(s){for(;o>i;i++)if(r=t.apply(e[i],n),r===!1)break}else for(i in e)if(r=t.apply(e[i],n),r===!1)break}else if(s){for(;o>i;i++)if(r=t.call(e[i],i,e[i]),r===!1)break}else for(i in e)if(r=t.call(e[i],i,e[i]),r===!1)break;return e},trim:function(e){return null==e?\"\":v.call(e)},makeArray:function(e,t){var n=t||[];return null!=e&&(j(Object(e))?x.merge(n,\"string\"==typeof e?[e]:e):h.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:g.call(t,e,n)},merge:function(e,t){var n=t.length,r=e.length,i=0;if(\"number\"==typeof n)for(;n>i;i++)e[r++]=t[i];else while(t[i]!==undefined)e[r++]=t[i++];return e.length=r,e},grep:function(e,t,n){var r,i=[],o=0,s=e.length;for(n=!!n;s>o;o++)r=!!t(e[o],o),n!==r&&i.push(e[o]);return i},map:function(e,t,n){var r,i=0,o=e.length,s=j(e),a=[];if(s)for(;o>i;i++)r=t(e[i],i,n),null!=r&&(a[a.length]=r);else for(i in e)r=t(e[i],i,n),null!=r&&(a[a.length]=r);return f.apply([],a)},guid:1,proxy:function(e,t){var n,r,i;return\"string\"==typeof t&&(n=e[t],t=e,e=n),x.isFunction(e)?(r=d.call(arguments,2),i=function(){return e.apply(t||this,r.concat(d.call(arguments)))},i.guid=e.guid=e.guid||x.guid++,i):undefined},access:function(e,t,n,r,i,o,s){var a=0,u=e.length,l=null==n;if(\"object\"===x.type(n)){i=!0;for(a in n)x.access(e,t,a,n[a],!0,o,s)}else if(r!==undefined&&(i=!0,x.isFunction(r)||(s=!0),l&&(s?(t.call(e,r),t=null):(l=t,t=function(e,t,n){return l.call(x(e),n)})),t))for(;u>a;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:l?t.call(e):u?t(e[0],n):o},now:Date.now,swap:function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];i=n.apply(e,r||[]);for(o in t)e.style[o]=s[o];return i}}),x.ready.promise=function(t){return n||(n=x.Deferred(),\"complete\"===o.readyState?setTimeout(x.ready):(o.addEventListener(\"DOMContentLoaded\",S,!1),e.addEventListener(\"load\",S,!1))),n.promise(t)},x.each(\"Boolean Number String Function Array Date RegExp Object Error\".split(\" \"),function(e,t){l[\"[object \"+t+\"]\"]=t.toLowerCase()});function j(e){var t=e.length,n=x.type(e);return x.isWindow(e)?!1:1===e.nodeType&&t?!0:\"array\"===n||\"function\"!==n&&(0===t||\"number\"==typeof t&&t>0&&t-1 in e)}t=x(o),function(e,undefined){var t,n,r,i,o,s,a,u,l,c,p,f,h,d,g,m,y,v=\"sizzle\"+-new Date,b=e.document,w=0,T=0,C=st(),k=st(),N=st(),E=!1,S=function(e,t){return e===t?(E=!0,0):0},j=typeof undefined,D=1<<31,A={}.hasOwnProperty,L=[],q=L.pop,H=L.push,O=L.push,F=L.slice,P=L.indexOf||function(e){var t=0,n=this.length;for(;n>t;t++)if(this[t]===e)return t;return-1},R=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",M=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",W=\"(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+\",$=W.replace(\"w\",\"w#\"),B=\"\\\\[\"+M+\"*(\"+W+\")\"+M+\"*(?:([*^$|!~]?=)\"+M+\"*(?:(['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|(\"+$+\")|)|)\"+M+\"*\\\\]\",I=\":(\"+W+\")(?:\\\\(((['\\\"])((?:\\\\\\\\.|[^\\\\\\\\])*?)\\\\3|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+B.replace(3,8)+\")*)|.*)\\\\)|)\",z=RegExp(\"^\"+M+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+M+\"+$\",\"g\"),_=RegExp(\"^\"+M+\"*,\"+M+\"*\"),X=RegExp(\"^\"+M+\"*([>+~]|\"+M+\")\"+M+\"*\"),U=RegExp(M+\"*[+~]\"),Y=RegExp(\"=\"+M+\"*([^\\\\]'\\\"]*)\"+M+\"*\\\\]\",\"g\"),V=RegExp(I),G=RegExp(\"^\"+$+\"$\"),J={ID:RegExp(\"^#(\"+W+\")\"),CLASS:RegExp(\"^\\\\.(\"+W+\")\"),TAG:RegExp(\"^(\"+W.replace(\"w\",\"w*\")+\")\"),ATTR:RegExp(\"^\"+B),PSEUDO:RegExp(\"^\"+I),CHILD:RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+M+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+M+\"*(?:([+-]|)\"+M+\"*(\\\\d+)|))\"+M+\"*\\\\)|)\",\"i\"),bool:RegExp(\"^(?:\"+R+\")$\",\"i\"),needsContext:RegExp(\"^\"+M+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+M+\"*((?:-\\\\d)?\\\\d*)\"+M+\"*\\\\)|)(?=[^-]|$)\",\"i\")},Q=/^[^{]+\\{\\s*\\[native \\w/,K=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,Z=/^(?:input|select|textarea|button)$/i,et=/^h\\d$/i,tt=/'|\\\\/g,nt=RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\"+M+\"?|(\"+M+\")|.)\",\"ig\"),rt=function(e,t,n){var r=\"0x\"+t-65536;return r!==r||n?t:0>r?String.fromCharCode(r+65536):String.fromCharCode(55296|r>>10,56320|1023&r)};try{O.apply(L=F.call(b.childNodes),b.childNodes),L[b.childNodes.length].nodeType}catch(it){O={apply:L.length?function(e,t){H.apply(e,F.call(t))}:function(e,t){var n=e.length,r=0;while(e[n++]=t[r++]);e.length=n-1}}}function ot(e,t,r,i){var o,s,a,u,l,f,g,m,x,w;if((t?t.ownerDocument||t:b)!==p&&c(t),t=t||p,r=r||[],!e||\"string\"!=typeof e)return r;if(1!==(u=t.nodeType)&&9!==u)return[];if(h&&!i){if(o=K.exec(e))if(a=o[1]){if(9===u){if(s=t.getElementById(a),!s||!s.parentNode)return r;if(s.id===a)return r.push(s),r}else if(t.ownerDocument&&(s=t.ownerDocument.getElementById(a))&&y(t,s)&&s.id===a)return r.push(s),r}else{if(o[2])return O.apply(r,t.getElementsByTagName(e)),r;if((a=o[3])&&n.getElementsByClassName&&t.getElementsByClassName)return O.apply(r,t.getElementsByClassName(a)),r}if(n.qsa&&(!d||!d.test(e))){if(m=g=v,x=t,w=9===u&&e,1===u&&\"object\"!==t.nodeName.toLowerCase()){f=gt(e),(g=t.getAttribute(\"id\"))?m=g.replace(tt,\"\\\\$&\"):t.setAttribute(\"id\",m),m=\"[id='\"+m+\"'] \",l=f.length;while(l--)f[l]=m+mt(f[l]);x=U.test(e)&&t.parentNode||t,w=f.join(\",\")}if(w)try{return O.apply(r,x.querySelectorAll(w)),r}catch(T){}finally{g||t.removeAttribute(\"id\")}}}return kt(e.replace(z,\"$1\"),t,r,i)}function st(){var e=[];function t(n,r){return e.push(n+=\" \")>i.cacheLength&&delete t[e.shift()],t[n]=r}return t}function at(e){return e[v]=!0,e}function ut(e){var t=p.createElement(\"div\");try{return!!e(t)}catch(n){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function lt(e,t){var n=e.split(\"|\"),r=e.length;while(r--)i.attrHandle[n[r]]=t}function ct(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&(~t.sourceIndex||D)-(~e.sourceIndex||D);if(r)return r;if(n)while(n=n.nextSibling)if(n===t)return-1;return e?1:-1}function pt(e){return function(t){var n=t.nodeName.toLowerCase();return\"input\"===n&&t.type===e}}function ft(e){return function(t){var n=t.nodeName.toLowerCase();return(\"input\"===n||\"button\"===n)&&t.type===e}}function ht(e){return at(function(t){return t=+t,at(function(n,r){var i,o=e([],n.length,t),s=o.length;while(s--)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))})})}s=ot.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return t?\"HTML\"!==t.nodeName:!1},n=ot.support={},c=ot.setDocument=function(e){var t=e?e.ownerDocument||e:b,r=t.defaultView;return t!==p&&9===t.nodeType&&t.documentElement?(p=t,f=t.documentElement,h=!s(t),r&&r.attachEvent&&r!==r.top&&r.attachEvent(\"onbeforeunload\",function(){c()}),n.attributes=ut(function(e){return e.className=\"i\",!e.getAttribute(\"className\")}),n.getElementsByTagName=ut(function(e){return e.appendChild(t.createComment(\"\")),!e.getElementsByTagName(\"*\").length}),n.getElementsByClassName=ut(function(e){return e.innerHTML=\"<div class='a'></div><div class='a i'></div>\",e.firstChild.className=\"i\",2===e.getElementsByClassName(\"i\").length}),n.getById=ut(function(e){return f.appendChild(e).id=v,!t.getElementsByName||!t.getElementsByName(v).length}),n.getById?(i.find.ID=function(e,t){if(typeof t.getElementById!==j&&h){var n=t.getElementById(e);return n&&n.parentNode?[n]:[]}},i.filter.ID=function(e){var t=e.replace(nt,rt);return function(e){return e.getAttribute(\"id\")===t}}):(delete i.find.ID,i.filter.ID=function(e){var t=e.replace(nt,rt);return function(e){var n=typeof e.getAttributeNode!==j&&e.getAttributeNode(\"id\");return n&&n.value===t}}),i.find.TAG=n.getElementsByTagName?function(e,t){return typeof t.getElementsByTagName!==j?t.getElementsByTagName(e):undefined}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if(\"*\"===e){while(n=o[i++])1===n.nodeType&&r.push(n);return r}return o},i.find.CLASS=n.getElementsByClassName&&function(e,t){return typeof t.getElementsByClassName!==j&&h?t.getElementsByClassName(e):undefined},g=[],d=[],(n.qsa=Q.test(t.querySelectorAll))&&(ut(function(e){e.innerHTML=\"<select><option selected=''></option></select>\",e.querySelectorAll(\"[selected]\").length||d.push(\"\\\\[\"+M+\"*(?:value|\"+R+\")\"),e.querySelectorAll(\":checked\").length||d.push(\":checked\")}),ut(function(e){var n=t.createElement(\"input\");n.setAttribute(\"type\",\"hidden\"),e.appendChild(n).setAttribute(\"t\",\"\"),e.querySelectorAll(\"[t^='']\").length&&d.push(\"[*^$]=\"+M+\"*(?:''|\\\"\\\")\"),e.querySelectorAll(\":enabled\").length||d.push(\":enabled\",\":disabled\"),e.querySelectorAll(\"*,:x\"),d.push(\",.*:\")})),(n.matchesSelector=Q.test(m=f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&ut(function(e){n.disconnectedMatch=m.call(e,\"div\"),m.call(e,\"[s!='']:x\"),g.push(\"!=\",I)}),d=d.length&&RegExp(d.join(\"|\")),g=g.length&&RegExp(g.join(\"|\")),y=Q.test(f.contains)||f.compareDocumentPosition?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)while(t=t.parentNode)if(t===e)return!0;return!1},S=f.compareDocumentPosition?function(e,r){if(e===r)return E=!0,0;var i=r.compareDocumentPosition&&e.compareDocumentPosition&&e.compareDocumentPosition(r);return i?1&i||!n.sortDetached&&r.compareDocumentPosition(e)===i?e===t||y(b,e)?-1:r===t||y(b,r)?1:l?P.call(l,e)-P.call(l,r):0:4&i?-1:1:e.compareDocumentPosition?-1:1}:function(e,n){var r,i=0,o=e.parentNode,s=n.parentNode,a=[e],u=[n];if(e===n)return E=!0,0;if(!o||!s)return e===t?-1:n===t?1:o?-1:s?1:l?P.call(l,e)-P.call(l,n):0;if(o===s)return ct(e,n);r=e;while(r=r.parentNode)a.unshift(r);r=n;while(r=r.parentNode)u.unshift(r);while(a[i]===u[i])i++;return i?ct(a[i],u[i]):a[i]===b?-1:u[i]===b?1:0},t):p},ot.matches=function(e,t){return ot(e,null,null,t)},ot.matchesSelector=function(e,t){if((e.ownerDocument||e)!==p&&c(e),t=t.replace(Y,\"='$1']\"),!(!n.matchesSelector||!h||g&&g.test(t)||d&&d.test(t)))try{var r=m.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(i){}return ot(t,p,null,[e]).length>0},ot.contains=function(e,t){return(e.ownerDocument||e)!==p&&c(e),y(e,t)},ot.attr=function(e,t){(e.ownerDocument||e)!==p&&c(e);var r=i.attrHandle[t.toLowerCase()],o=r&&A.call(i.attrHandle,t.toLowerCase())?r(e,t,!h):undefined;return o===undefined?n.attributes||!h?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null:o},ot.error=function(e){throw Error(\"Syntax error, unrecognized expression: \"+e)},ot.uniqueSort=function(e){var t,r=[],i=0,o=0;if(E=!n.detectDuplicates,l=!n.sortStable&&e.slice(0),e.sort(S),E){while(t=e[o++])t===e[o]&&(i=r.push(o));while(i--)e.splice(r[i],1)}return e},o=ot.getText=function(e){var t,n=\"\",r=0,i=e.nodeType;if(i){if(1===i||9===i||11===i){if(\"string\"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=o(e)}else if(3===i||4===i)return e.nodeValue}else for(;t=e[r];r++)n+=o(t);return n},i=ot.selectors={cacheLength:50,createPseudo:at,match:J,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(nt,rt),e[3]=(e[4]||e[5]||\"\").replace(nt,rt),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||ot.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&ot.error(e[0]),e},PSEUDO:function(e){var t,n=!e[5]&&e[2];return J.CHILD.test(e[0])?null:(e[3]&&e[4]!==undefined?e[2]=e[4]:n&&V.test(n)&&(t=gt(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(nt,rt).toLowerCase();return\"*\"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+\" \"];return t||(t=RegExp(\"(^|\"+M+\")\"+e+\"(\"+M+\"|$)\"))&&C(e,function(e){return t.test(\"string\"==typeof e.className&&e.className||typeof e.getAttribute!==j&&e.getAttribute(\"class\")||\"\")})},ATTR:function(e,t,n){return function(r){var i=ot.attr(r,e);return null==i?\"!=\"===t:t?(i+=\"\",\"=\"===t?i===n:\"!=\"===t?i!==n:\"^=\"===t?n&&0===i.indexOf(n):\"*=\"===t?n&&i.indexOf(n)>-1:\"$=\"===t?n&&i.slice(-n.length)===n:\"~=\"===t?(\" \"+i+\" \").indexOf(n)>-1:\"|=\"===t?i===n||i.slice(0,n.length+1)===n+\"-\":!1):!0}},CHILD:function(e,t,n,r,i){var o=\"nth\"!==e.slice(0,3),s=\"last\"!==e.slice(-4),a=\"of-type\"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,u){var l,c,p,f,h,d,g=o!==s?\"nextSibling\":\"previousSibling\",m=t.parentNode,y=a&&t.nodeName.toLowerCase(),x=!u&&!a;if(m){if(o){while(g){p=t;while(p=p[g])if(a?p.nodeName.toLowerCase()===y:1===p.nodeType)return!1;d=g=\"only\"===e&&!d&&\"nextSibling\"}return!0}if(d=[s?m.firstChild:m.lastChild],s&&x){c=m[v]||(m[v]={}),l=c[e]||[],h=l[0]===w&&l[1],f=l[0]===w&&l[2],p=h&&m.childNodes[h];while(p=++h&&p&&p[g]||(f=h=0)||d.pop())if(1===p.nodeType&&++f&&p===t){c[e]=[w,h,f];break}}else if(x&&(l=(t[v]||(t[v]={}))[e])&&l[0]===w)f=l[1];else while(p=++h&&p&&p[g]||(f=h=0)||d.pop())if((a?p.nodeName.toLowerCase()===y:1===p.nodeType)&&++f&&(x&&((p[v]||(p[v]={}))[e]=[w,f]),p===t))break;return f-=i,f===r||0===f%r&&f/r>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||ot.error(\"unsupported pseudo: \"+e);return r[v]?r(t):r.length>1?(n=[e,e,\"\",t],i.setFilters.hasOwnProperty(e.toLowerCase())?at(function(e,n){var i,o=r(e,t),s=o.length;while(s--)i=P.call(e,o[s]),e[i]=!(n[i]=o[s])}):function(e){return r(e,0,n)}):r}},pseudos:{not:at(function(e){var t=[],n=[],r=a(e.replace(z,\"$1\"));return r[v]?at(function(e,t,n,i){var o,s=r(e,null,i,[]),a=e.length;while(a--)(o=s[a])&&(e[a]=!(t[a]=o))}):function(e,i,o){return t[0]=e,r(t,null,o,n),!n.pop()}}),has:at(function(e){return function(t){return ot(e,t).length>0}}),contains:at(function(e){return function(t){return(t.textContent||t.innerText||o(t)).indexOf(e)>-1}}),lang:at(function(e){return G.test(e||\"\")||ot.error(\"unsupported lang: \"+e),e=e.replace(nt,rt).toLowerCase(),function(t){var n;do if(n=h?t.lang:t.getAttribute(\"xml:lang\")||t.getAttribute(\"lang\"))return n=n.toLowerCase(),n===e||0===n.indexOf(e+\"-\");while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:function(e){return e.disabled===!1},disabled:function(e){return e.disabled===!0},checked:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&!!e.checked||\"option\"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,e.selected===!0},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeName>\"@\"||3===e.nodeType||4===e.nodeType)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return et.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return\"input\"===t&&\"button\"===e.type||\"button\"===t},text:function(e){var t;return\"input\"===e.nodeName.toLowerCase()&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||t.toLowerCase()===e.type)},first:ht(function(){return[0]}),last:ht(function(e,t){return[t-1]}),eq:ht(function(e,t,n){return[0>n?n+t:n]}),even:ht(function(e,t){var n=0;for(;t>n;n+=2)e.push(n);return e}),odd:ht(function(e,t){var n=1;for(;t>n;n+=2)e.push(n);return e}),lt:ht(function(e,t,n){var r=0>n?n+t:n;for(;--r>=0;)e.push(r);return e}),gt:ht(function(e,t,n){var r=0>n?n+t:n;for(;t>++r;)e.push(r);return e})}},i.pseudos.nth=i.pseudos.eq;for(t in{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=pt(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=ft(t);function dt(){}dt.prototype=i.filters=i.pseudos,i.setFilters=new dt;function gt(e,t){var n,r,o,s,a,u,l,c=k[e+\" \"];if(c)return t?0:c.slice(0);a=e,u=[],l=i.preFilter;while(a){(!n||(r=_.exec(a)))&&(r&&(a=a.slice(r[0].length)||a),u.push(o=[])),n=!1,(r=X.exec(a))&&(n=r.shift(),o.push({value:n,type:r[0].replace(z,\" \")}),a=a.slice(n.length));for(s in i.filter)!(r=J[s].exec(a))||l[s]&&!(r=l[s](r))||(n=r.shift(),o.push({value:n,type:s,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ot.error(e):k(e,u).slice(0)}function mt(e){var t=0,n=e.length,r=\"\";for(;n>t;t++)r+=e[t].value;return r}function yt(e,t,n){var i=t.dir,o=n&&\"parentNode\"===i,s=T++;return t.first?function(t,n,r){while(t=t[i])if(1===t.nodeType||o)return e(t,n,r)}:function(t,n,a){var u,l,c,p=w+\" \"+s;if(a){while(t=t[i])if((1===t.nodeType||o)&&e(t,n,a))return!0}else while(t=t[i])if(1===t.nodeType||o)if(c=t[v]||(t[v]={}),(l=c[i])&&l[0]===p){if((u=l[1])===!0||u===r)return u===!0}else if(l=c[i]=[p],l[1]=e(t,n,a)||r,l[1]===!0)return!0}}function vt(e){return e.length>1?function(t,n,r){var i=e.length;while(i--)if(!e[i](t,n,r))return!1;return!0}:e[0]}function xt(e,t,n,r,i){var o,s=[],a=0,u=e.length,l=null!=t;for(;u>a;a++)(o=e[a])&&(!n||n(o,r,i))&&(s.push(o),l&&t.push(a));return s}function bt(e,t,n,r,i,o){return r&&!r[v]&&(r=bt(r)),i&&!i[v]&&(i=bt(i,o)),at(function(o,s,a,u){var l,c,p,f=[],h=[],d=s.length,g=o||Ct(t||\"*\",a.nodeType?[a]:a,[]),m=!e||!o&&t?g:xt(g,f,e,a,u),y=n?i||(o?e:d||r)?[]:s:m;if(n&&n(m,y,a,u),r){l=xt(y,h),r(l,[],a,u),c=l.length;while(c--)(p=l[c])&&(y[h[c]]=!(m[h[c]]=p))}if(o){if(i||e){if(i){l=[],c=y.length;while(c--)(p=y[c])&&l.push(m[c]=p);i(null,y=[],l,u)}c=y.length;while(c--)(p=y[c])&&(l=i?P.call(o,p):f[c])>-1&&(o[l]=!(s[l]=p))}}else y=xt(y===s?y.splice(d,y.length):y),i?i(null,s,y,u):O.apply(s,y)})}function wt(e){var t,n,r,o=e.length,s=i.relative[e[0].type],a=s||i.relative[\" \"],l=s?1:0,c=yt(function(e){return e===t},a,!0),p=yt(function(e){return P.call(t,e)>-1},a,!0),f=[function(e,n,r){return!s&&(r||n!==u)||((t=n).nodeType?c(e,n,r):p(e,n,r))}];for(;o>l;l++)if(n=i.relative[e[l].type])f=[yt(vt(f),n)];else{if(n=i.filter[e[l].type].apply(null,e[l].matches),n[v]){for(r=++l;o>r;r++)if(i.relative[e[r].type])break;return bt(l>1&&vt(f),l>1&&mt(e.slice(0,l-1).concat({value:\" \"===e[l-2].type?\"*\":\"\"})).replace(z,\"$1\"),n,r>l&&wt(e.slice(l,r)),o>r&&wt(e=e.slice(r)),o>r&&mt(e))}f.push(n)}return vt(f)}function Tt(e,t){var n=0,o=t.length>0,s=e.length>0,a=function(a,l,c,f,h){var d,g,m,y=[],v=0,x=\"0\",b=a&&[],T=null!=h,C=u,k=a||s&&i.find.TAG(\"*\",h&&l.parentNode||l),N=w+=null==C?1:Math.random()||.1;for(T&&(u=l!==p&&l,r=n);null!=(d=k[x]);x++){if(s&&d){g=0;while(m=e[g++])if(m(d,l,c)){f.push(d);break}T&&(w=N,r=++n)}o&&((d=!m&&d)&&v--,a&&b.push(d))}if(v+=x,o&&x!==v){g=0;while(m=t[g++])m(b,y,l,c);if(a){if(v>0)while(x--)b[x]||y[x]||(y[x]=q.call(f));y=xt(y)}O.apply(f,y),T&&!a&&y.length>0&&v+t.length>1&&ot.uniqueSort(f)}return T&&(w=N,u=C),b};return o?at(a):a}a=ot.compile=function(e,t){var n,r=[],i=[],o=N[e+\" \"];if(!o){t||(t=gt(e)),n=t.length;while(n--)o=wt(t[n]),o[v]?r.push(o):i.push(o);o=N(e,Tt(i,r))}return o};function Ct(e,t,n){var r=0,i=t.length;for(;i>r;r++)ot(e,t[r],n);return n}function kt(e,t,r,o){var s,u,l,c,p,f=gt(e);if(!o&&1===f.length){if(u=f[0]=f[0].slice(0),u.length>2&&\"ID\"===(l=u[0]).type&&n.getById&&9===t.nodeType&&h&&i.relative[u[1].type]){if(t=(i.find.ID(l.matches[0].replace(nt,rt),t)||[])[0],!t)return r;e=e.slice(u.shift().value.length)}s=J.needsContext.test(e)?0:u.length;while(s--){if(l=u[s],i.relative[c=l.type])break;if((p=i.find[c])&&(o=p(l.matches[0].replace(nt,rt),U.test(u[0].type)&&t.parentNode||t))){if(u.splice(s,1),e=o.length&&mt(u),!e)return O.apply(r,o),r;break}}}return a(e,f)(o,t,!h,r,U.test(e)),r}n.sortStable=v.split(\"\").sort(S).join(\"\")===v,n.detectDuplicates=E,c(),n.sortDetached=ut(function(e){return 1&e.compareDocumentPosition(p.createElement(\"div\"))}),ut(function(e){return e.innerHTML=\"<a href='#'></a>\",\"#\"===e.firstChild.getAttribute(\"href\")})||lt(\"type|href|height|width\",function(e,t,n){return n?undefined:e.getAttribute(t,\"type\"===t.toLowerCase()?1:2)}),n.attributes&&ut(function(e){return e.innerHTML=\"<input/>\",e.firstChild.setAttribute(\"value\",\"\"),\"\"===e.firstChild.getAttribute(\"value\")})||lt(\"value\",function(e,t,n){return n||\"input\"!==e.nodeName.toLowerCase()?undefined:e.defaultValue}),ut(function(e){return null==e.getAttribute(\"disabled\")})||lt(R,function(e,t,n){var r;return n?undefined:(r=e.getAttributeNode(t))&&r.specified?r.value:e[t]===!0?t.toLowerCase():null}),x.find=ot,x.expr=ot.selectors,x.expr[\":\"]=x.expr.pseudos,x.unique=ot.uniqueSort,x.text=ot.getText,x.isXMLDoc=ot.isXML,x.contains=ot.contains}(e);var D={};function A(e){var t=D[e]={};return x.each(e.match(w)||[],function(e,n){t[n]=!0}),t}x.Callbacks=function(e){e=\"string\"==typeof e?D[e]||A(e):x.extend({},e);var t,n,r,i,o,s,a=[],u=!e.once&&[],l=function(p){for(t=e.memory&&p,n=!0,s=i||0,i=0,o=a.length,r=!0;a&&o>s;s++)if(a[s].apply(p[0],p[1])===!1&&e.stopOnFalse){t=!1;break}r=!1,a&&(u?u.length&&l(u.shift()):t?a=[]:c.disable())},c={add:function(){if(a){var n=a.length;(function s(t){x.each(t,function(t,n){var r=x.type(n);\"function\"===r?e.unique&&c.has(n)||a.push(n):n&&n.length&&\"string\"!==r&&s(n)})})(arguments),r?o=a.length:t&&(i=n,l(t))}return this},remove:function(){return a&&x.each(arguments,function(e,t){var n;while((n=x.inArray(t,a,n))>-1)a.splice(n,1),r&&(o>=n&&o--,s>=n&&s--)}),this},has:function(e){return e?x.inArray(e,a)>-1:!(!a||!a.length)},empty:function(){return a=[],o=0,this},disable:function(){return a=u=t=undefined,this},disabled:function(){return!a},lock:function(){return u=undefined,t||c.disable(),this},locked:function(){return!u},fireWith:function(e,t){return!a||n&&!u||(t=t||[],t=[e,t.slice?t.slice():t],r?u.push(t):l(t)),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!n}};return c},x.extend({Deferred:function(e){var t=[[\"resolve\",\"done\",x.Callbacks(\"once memory\"),\"resolved\"],[\"reject\",\"fail\",x.Callbacks(\"once memory\"),\"rejected\"],[\"notify\",\"progress\",x.Callbacks(\"memory\")]],n=\"pending\",r={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},then:function(){var e=arguments;return x.Deferred(function(n){x.each(t,function(t,o){var s=o[0],a=x.isFunction(e[t])&&e[t];i[o[1]](function(){var e=a&&a.apply(this,arguments);e&&x.isFunction(e.promise)?e.promise().done(n.resolve).fail(n.reject).progress(n.notify):n[s+\"With\"](this===r?n.promise():this,a?[e]:arguments)})}),e=null}).promise()},promise:function(e){return null!=e?x.extend(e,r):r}},i={};return r.pipe=r.then,x.each(t,function(e,o){var s=o[2],a=o[3];r[o[1]]=s.add,a&&s.add(function(){n=a},t[1^e][2].disable,t[2][2].lock),i[o[0]]=function(){return i[o[0]+\"With\"](this===i?r:this,arguments),this},i[o[0]+\"With\"]=s.fireWith}),r.promise(i),e&&e.call(i,i),i},when:function(e){var t=0,n=d.call(arguments),r=n.length,i=1!==r||e&&x.isFunction(e.promise)?r:0,o=1===i?e:x.Deferred(),s=function(e,t,n){return function(r){t[e]=this,n[e]=arguments.length>1?d.call(arguments):r,n===a?o.notifyWith(t,n):--i||o.resolveWith(t,n)}},a,u,l;if(r>1)for(a=Array(r),u=Array(r),l=Array(r);r>t;t++)n[t]&&x.isFunction(n[t].promise)?n[t].promise().done(s(t,l,n)).fail(o.reject).progress(s(t,u,a)):--i;return i||o.resolveWith(l,n),o.promise()}}),x.support=function(t){var n=o.createElement(\"input\"),r=o.createDocumentFragment(),i=o.createElement(\"div\"),s=o.createElement(\"select\"),a=s.appendChild(o.createElement(\"option\"));return n.type?(n.type=\"checkbox\",t.checkOn=\"\"!==n.value,t.optSelected=a.selected,t.reliableMarginRight=!0,t.boxSizingReliable=!0,t.pixelPosition=!1,n.checked=!0,t.noCloneChecked=n.cloneNode(!0).checked,s.disabled=!0,t.optDisabled=!a.disabled,n=o.createElement(\"input\"),n.value=\"t\",n.type=\"radio\",t.radioValue=\"t\"===n.value,n.setAttribute(\"checked\",\"t\"),n.setAttribute(\"name\",\"t\"),r.appendChild(n),t.checkClone=r.cloneNode(!0).cloneNode(!0).lastChild.checked,t.focusinBubbles=\"onfocusin\"in e,i.style.backgroundClip=\"content-box\",i.cloneNode(!0).style.backgroundClip=\"\",t.clearCloneStyle=\"content-box\"===i.style.backgroundClip,x(function(){var n,r,s=\"padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box\",a=o.getElementsByTagName(\"body\")[0];a&&(n=o.createElement(\"div\"),n.style.cssText=\"border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px\",a.appendChild(n).appendChild(i),i.innerHTML=\"\",i.style.cssText=\"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%\",x.swap(a,null!=a.style.zoom?{zoom:1}:{},function(){t.boxSizing=4===i.offsetWidth}),e.getComputedStyle&&(t.pixelPosition=\"1%\"!==(e.getComputedStyle(i,null)||{}).top,t.boxSizingReliable=\"4px\"===(e.getComputedStyle(i,null)||{width:\"4px\"}).width,r=i.appendChild(o.createElement(\"div\")),r.style.cssText=i.style.cssText=s,r.style.marginRight=r.style.width=\"0\",i.style.width=\"1px\",t.reliableMarginRight=!parseFloat((e.getComputedStyle(r,null)||{}).marginRight)),a.removeChild(n))}),t):t}({});var L,q,H=/(?:\\{[\\s\\S]*\\}|\\[[\\s\\S]*\\])$/,O=/([A-Z])/g;function F(){Object.defineProperty(this.cache={},0,{get:function(){return{}}}),this.expando=x.expando+Math.random()}F.uid=1,F.accepts=function(e){return e.nodeType?1===e.nodeType||9===e.nodeType:!0},F.prototype={key:function(e){if(!F.accepts(e))return 0;var t={},n=e[this.expando];if(!n){n=F.uid++;try{t[this.expando]={value:n},Object.defineProperties(e,t)}catch(r){t[this.expando]=n,x.extend(e,t)}}return this.cache[n]||(this.cache[n]={}),n},set:function(e,t,n){var r,i=this.key(e),o=this.cache[i];if(\"string\"==typeof t)o[t]=n;else if(x.isEmptyObject(o))x.extend(this.cache[i],t);else for(r in t)o[r]=t[r];return o},get:function(e,t){var n=this.cache[this.key(e)];return t===undefined?n:n[t]},access:function(e,t,n){var r;return t===undefined||t&&\"string\"==typeof t&&n===undefined?(r=this.get(e,t),r!==undefined?r:this.get(e,x.camelCase(t))):(this.set(e,t,n),n!==undefined?n:t)},remove:function(e,t){var n,r,i,o=this.key(e),s=this.cache[o];if(t===undefined)this.cache[o]={};else{x.isArray(t)?r=t.concat(t.map(x.camelCase)):(i=x.camelCase(t),t in s?r=[t,i]:(r=i,r=r in s?[r]:r.match(w)||[])),n=r.length;while(n--)delete s[r[n]]}},hasData:function(e){return!x.isEmptyObject(this.cache[e[this.expando]]||{})},discard:function(e){e[this.expando]&&delete this.cache[e[this.expando]]}},L=new F,q=new F,x.extend({acceptData:F.accepts,hasData:function(e){return L.hasData(e)||q.hasData(e)},data:function(e,t,n){return L.access(e,t,n)},removeData:function(e,t){L.remove(e,t)},_data:function(e,t,n){return q.access(e,t,n)},_removeData:function(e,t){q.remove(e,t)}}),x.fn.extend({data:function(e,t){var n,r,i=this[0],o=0,s=null;if(e===undefined){if(this.length&&(s=L.get(i),1===i.nodeType&&!q.get(i,\"hasDataAttrs\"))){for(n=i.attributes;n.length>o;o++)r=n[o].name,0===r.indexOf(\"data-\")&&(r=x.camelCase(r.slice(5)),P(i,r,s[r]));q.set(i,\"hasDataAttrs\",!0)}return s}return\"object\"==typeof e?this.each(function(){L.set(this,e)}):x.access(this,function(t){var n,r=x.camelCase(e);if(i&&t===undefined){if(n=L.get(i,e),n!==undefined)return n;if(n=L.get(i,r),n!==undefined)return n;if(n=P(i,r,undefined),n!==undefined)return n}else this.each(function(){var n=L.get(this,r);L.set(this,r,t),-1!==e.indexOf(\"-\")&&n!==undefined&&L.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){L.remove(this,e)})}});function P(e,t,n){var r;if(n===undefined&&1===e.nodeType)if(r=\"data-\"+t.replace(O,\"-$1\").toLowerCase(),n=e.getAttribute(r),\"string\"==typeof n){try{n=\"true\"===n?!0:\"false\"===n?!1:\"null\"===n?null:+n+\"\"===n?+n:H.test(n)?JSON.parse(n):n}catch(i){}L.set(e,t,n)}else n=undefined;return n}x.extend({queue:function(e,t,n){var r;return e?(t=(t||\"fx\")+\"queue\",r=q.get(e,t),n&&(!r||x.isArray(n)?r=q.access(e,t,x.makeArray(n)):r.push(n)),r||[]):undefined},dequeue:function(e,t){t=t||\"fx\";var n=x.queue(e,t),r=n.length,i=n.shift(),o=x._queueHooks(e,t),s=function(){x.dequeue(e,t)\n+};\"inprogress\"===i&&(i=n.shift(),r--),i&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete o.stop,i.call(e,s,o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return q.get(e,n)||q.access(e,n,{empty:x.Callbacks(\"once memory\").add(function(){q.remove(e,[t+\"queue\",n])})})}}),x.fn.extend({queue:function(e,t){var n=2;return\"string\"!=typeof e&&(t=e,e=\"fx\",n--),n>arguments.length?x.queue(this[0],e):t===undefined?this:this.each(function(){var n=x.queue(this,e,t);x._queueHooks(this,e),\"fx\"===e&&\"inprogress\"!==n[0]&&x.dequeue(this,e)})},dequeue:function(e){return this.each(function(){x.dequeue(this,e)})},delay:function(e,t){return e=x.fx?x.fx.speeds[e]||e:e,t=t||\"fx\",this.queue(t,function(t,n){var r=setTimeout(t,e);n.stop=function(){clearTimeout(r)}})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,t){var n,r=1,i=x.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};\"string\"!=typeof e&&(t=e,e=undefined),e=e||\"fx\";while(s--)n=q.get(o[s],e+\"queueHooks\"),n&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var R,M,W=/[\\t\\r\\n\\f]/g,$=/\\r/g,B=/^(?:input|select|textarea|button)$/i;x.fn.extend({attr:function(e,t){return x.access(this,x.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){x.removeAttr(this,e)})},prop:function(e,t){return x.access(this,x.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[x.propFix[e]||e]})},addClass:function(e){var t,n,r,i,o,s=0,a=this.length,u=\"string\"==typeof e&&e;if(x.isFunction(e))return this.each(function(t){x(this).addClass(e.call(this,t,this.className))});if(u)for(t=(e||\"\").match(w)||[];a>s;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(\" \"+n.className+\" \").replace(W,\" \"):\" \")){o=0;while(i=t[o++])0>r.indexOf(\" \"+i+\" \")&&(r+=i+\" \");n.className=x.trim(r)}return this},removeClass:function(e){var t,n,r,i,o,s=0,a=this.length,u=0===arguments.length||\"string\"==typeof e&&e;if(x.isFunction(e))return this.each(function(t){x(this).removeClass(e.call(this,t,this.className))});if(u)for(t=(e||\"\").match(w)||[];a>s;s++)if(n=this[s],r=1===n.nodeType&&(n.className?(\" \"+n.className+\" \").replace(W,\" \"):\"\")){o=0;while(i=t[o++])while(r.indexOf(\" \"+i+\" \")>=0)r=r.replace(\" \"+i+\" \",\" \");n.className=e?x.trim(r):\"\"}return this},toggleClass:function(e,t){var n=typeof e;return\"boolean\"==typeof t&&\"string\"===n?t?this.addClass(e):this.removeClass(e):x.isFunction(e)?this.each(function(n){x(this).toggleClass(e.call(this,n,this.className,t),t)}):this.each(function(){if(\"string\"===n){var t,i=0,o=x(this),s=e.match(w)||[];while(t=s[i++])o.hasClass(t)?o.removeClass(t):o.addClass(t)}else(n===r||\"boolean\"===n)&&(this.className&&q.set(this,\"__className__\",this.className),this.className=this.className||e===!1?\"\":q.get(this,\"__className__\")||\"\")})},hasClass:function(e){var t=\" \"+e+\" \",n=0,r=this.length;for(;r>n;n++)if(1===this[n].nodeType&&(\" \"+this[n].className+\" \").replace(W,\" \").indexOf(t)>=0)return!0;return!1},val:function(e){var t,n,r,i=this[0];{if(arguments.length)return r=x.isFunction(e),this.each(function(n){var i;1===this.nodeType&&(i=r?e.call(this,n,x(this).val()):e,null==i?i=\"\":\"number\"==typeof i?i+=\"\":x.isArray(i)&&(i=x.map(i,function(e){return null==e?\"\":e+\"\"})),t=x.valHooks[this.type]||x.valHooks[this.nodeName.toLowerCase()],t&&\"set\"in t&&t.set(this,i,\"value\")!==undefined||(this.value=i))});if(i)return t=x.valHooks[i.type]||x.valHooks[i.nodeName.toLowerCase()],t&&\"get\"in t&&(n=t.get(i,\"value\"))!==undefined?n:(n=i.value,\"string\"==typeof n?n.replace($,\"\"):null==n?\"\":n)}}}),x.extend({valHooks:{option:{get:function(e){var t=e.attributes.value;return!t||t.specified?e.value:e.text}},select:{get:function(e){var t,n,r=e.options,i=e.selectedIndex,o=\"select-one\"===e.type||0>i,s=o?null:[],a=o?i+1:r.length,u=0>i?a:o?i:0;for(;a>u;u++)if(n=r[u],!(!n.selected&&u!==i||(x.support.optDisabled?n.disabled:null!==n.getAttribute(\"disabled\"))||n.parentNode.disabled&&x.nodeName(n.parentNode,\"optgroup\"))){if(t=x(n).val(),o)return t;s.push(t)}return s},set:function(e,t){var n,r,i=e.options,o=x.makeArray(t),s=i.length;while(s--)r=i[s],(r.selected=x.inArray(x(r).val(),o)>=0)&&(n=!0);return n||(e.selectedIndex=-1),o}}},attr:function(e,t,n){var i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return typeof e.getAttribute===r?x.prop(e,t,n):(1===s&&x.isXMLDoc(e)||(t=t.toLowerCase(),i=x.attrHooks[t]||(x.expr.match.bool.test(t)?M:R)),n===undefined?i&&\"get\"in i&&null!==(o=i.get(e,t))?o:(o=x.find.attr(e,t),null==o?undefined:o):null!==n?i&&\"set\"in i&&(o=i.set(e,n,t))!==undefined?o:(e.setAttribute(t,n+\"\"),n):(x.removeAttr(e,t),undefined))},removeAttr:function(e,t){var n,r,i=0,o=t&&t.match(w);if(o&&1===e.nodeType)while(n=o[i++])r=x.propFix[n]||n,x.expr.match.bool.test(n)&&(e[r]=!1),e.removeAttribute(n)},attrHooks:{type:{set:function(e,t){if(!x.support.radioValue&&\"radio\"===t&&x.nodeName(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},propFix:{\"for\":\"htmlFor\",\"class\":\"className\"},prop:function(e,t,n){var r,i,o,s=e.nodeType;if(e&&3!==s&&8!==s&&2!==s)return o=1!==s||!x.isXMLDoc(e),o&&(t=x.propFix[t]||t,i=x.propHooks[t]),n!==undefined?i&&\"set\"in i&&(r=i.set(e,n,t))!==undefined?r:e[t]=n:i&&\"get\"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){return e.hasAttribute(\"tabindex\")||B.test(e.nodeName)||e.href?e.tabIndex:-1}}}}),M={set:function(e,t,n){return t===!1?x.removeAttr(e,n):e.setAttribute(n,n),n}},x.each(x.expr.match.bool.source.match(/\\w+/g),function(e,t){var n=x.expr.attrHandle[t]||x.find.attr;x.expr.attrHandle[t]=function(e,t,r){var i=x.expr.attrHandle[t],o=r?undefined:(x.expr.attrHandle[t]=undefined)!=n(e,t,r)?t.toLowerCase():null;return x.expr.attrHandle[t]=i,o}}),x.support.optSelected||(x.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null}}),x.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){x.propFix[this.toLowerCase()]=this}),x.each([\"radio\",\"checkbox\"],function(){x.valHooks[this]={set:function(e,t){return x.isArray(t)?e.checked=x.inArray(x(e).val(),t)>=0:undefined}},x.support.checkOn||(x.valHooks[this].get=function(e){return null===e.getAttribute(\"value\")?\"on\":e.value})});var I=/^key/,z=/^(?:mouse|contextmenu)|click/,_=/^(?:focusinfocus|focusoutblur)$/,X=/^([^.]*)(?:\\.(.+)|)$/;function U(){return!0}function Y(){return!1}function V(){try{return o.activeElement}catch(e){}}x.event={global:{},add:function(e,t,n,i,o){var s,a,u,l,c,p,f,h,d,g,m,y=q.get(e);if(y){n.handler&&(s=n,n=s.handler,o=s.selector),n.guid||(n.guid=x.guid++),(l=y.events)||(l=y.events={}),(a=y.handle)||(a=y.handle=function(e){return typeof x===r||e&&x.event.triggered===e.type?undefined:x.event.dispatch.apply(a.elem,arguments)},a.elem=e),t=(t||\"\").match(w)||[\"\"],c=t.length;while(c--)u=X.exec(t[c])||[],d=m=u[1],g=(u[2]||\"\").split(\".\").sort(),d&&(f=x.event.special[d]||{},d=(o?f.delegateType:f.bindType)||d,f=x.event.special[d]||{},p=x.extend({type:d,origType:m,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&x.expr.match.needsContext.test(o),namespace:g.join(\".\")},s),(h=l[d])||(h=l[d]=[],h.delegateCount=0,f.setup&&f.setup.call(e,i,g,a)!==!1||e.addEventListener&&e.addEventListener(d,a,!1)),f.add&&(f.add.call(e,p),p.handler.guid||(p.handler.guid=n.guid)),o?h.splice(h.delegateCount++,0,p):h.push(p),x.event.global[d]=!0);e=null}},remove:function(e,t,n,r,i){var o,s,a,u,l,c,p,f,h,d,g,m=q.hasData(e)&&q.get(e);if(m&&(u=m.events)){t=(t||\"\").match(w)||[\"\"],l=t.length;while(l--)if(a=X.exec(t[l])||[],h=g=a[1],d=(a[2]||\"\").split(\".\").sort(),h){p=x.event.special[h]||{},h=(r?p.delegateType:p.bindType)||h,f=u[h]||[],a=a[2]&&RegExp(\"(^|\\\\.)\"+d.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),s=o=f.length;while(o--)c=f[o],!i&&g!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||r&&r!==c.selector&&(\"**\"!==r||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,p.remove&&p.remove.call(e,c));s&&!f.length&&(p.teardown&&p.teardown.call(e,d,m.handle)!==!1||x.removeEvent(e,h,m.handle),delete u[h])}else for(h in u)x.event.remove(e,h+t[l],n,r,!0);x.isEmptyObject(u)&&(delete m.handle,q.remove(e,\"events\"))}},trigger:function(t,n,r,i){var s,a,u,l,c,p,f,h=[r||o],d=y.call(t,\"type\")?t.type:t,g=y.call(t,\"namespace\")?t.namespace.split(\".\"):[];if(a=u=r=r||o,3!==r.nodeType&&8!==r.nodeType&&!_.test(d+x.event.triggered)&&(d.indexOf(\".\")>=0&&(g=d.split(\".\"),d=g.shift(),g.sort()),c=0>d.indexOf(\":\")&&\"on\"+d,t=t[x.expando]?t:new x.Event(d,\"object\"==typeof t&&t),t.isTrigger=i?2:3,t.namespace=g.join(\".\"),t.namespace_re=t.namespace?RegExp(\"(^|\\\\.)\"+g.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,t.result=undefined,t.target||(t.target=r),n=null==n?[t]:x.makeArray(n,[t]),f=x.event.special[d]||{},i||!f.trigger||f.trigger.apply(r,n)!==!1)){if(!i&&!f.noBubble&&!x.isWindow(r)){for(l=f.delegateType||d,_.test(l+d)||(a=a.parentNode);a;a=a.parentNode)h.push(a),u=a;u===(r.ownerDocument||o)&&h.push(u.defaultView||u.parentWindow||e)}s=0;while((a=h[s++])&&!t.isPropagationStopped())t.type=s>1?l:f.bindType||d,p=(q.get(a,\"events\")||{})[t.type]&&q.get(a,\"handle\"),p&&p.apply(a,n),p=c&&a[c],p&&x.acceptData(a)&&p.apply&&p.apply(a,n)===!1&&t.preventDefault();return t.type=d,i||t.isDefaultPrevented()||f._default&&f._default.apply(h.pop(),n)!==!1||!x.acceptData(r)||c&&x.isFunction(r[d])&&!x.isWindow(r)&&(u=r[c],u&&(r[c]=null),x.event.triggered=d,r[d](),x.event.triggered=undefined,u&&(r[c]=u)),t.result}},dispatch:function(e){e=x.event.fix(e);var t,n,r,i,o,s=[],a=d.call(arguments),u=(q.get(this,\"events\")||{})[e.type]||[],l=x.event.special[e.type]||{};if(a[0]=e,e.delegateTarget=this,!l.preDispatch||l.preDispatch.call(this,e)!==!1){s=x.event.handlers.call(this,e,u),t=0;while((i=s[t++])&&!e.isPropagationStopped()){e.currentTarget=i.elem,n=0;while((o=i.handlers[n++])&&!e.isImmediatePropagationStopped())(!e.namespace_re||e.namespace_re.test(o.namespace))&&(e.handleObj=o,e.data=o.data,r=((x.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a),r!==undefined&&(e.result=r)===!1&&(e.preventDefault(),e.stopPropagation()))}return l.postDispatch&&l.postDispatch.call(this,e),e.result}},handlers:function(e,t){var n,r,i,o,s=[],a=t.delegateCount,u=e.target;if(a&&u.nodeType&&(!e.button||\"click\"!==e.type))for(;u!==this;u=u.parentNode||this)if(u.disabled!==!0||\"click\"!==e.type){for(r=[],n=0;a>n;n++)o=t[n],i=o.selector+\" \",r[i]===undefined&&(r[i]=o.needsContext?x(i,this).index(u)>=0:x.find(i,this,null,[u]).length),r[i]&&r.push(o);r.length&&s.push({elem:u,handlers:r})}return t.length>a&&s.push({elem:this,handlers:t.slice(a)}),s},props:\"altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which\".split(\" \"),fixHooks:{},keyHooks:{props:\"char charCode key keyCode\".split(\" \"),filter:function(e,t){return null==e.which&&(e.which=null!=t.charCode?t.charCode:t.keyCode),e}},mouseHooks:{props:\"button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement\".split(\" \"),filter:function(e,t){var n,r,i,s=t.button;return null==e.pageX&&null!=t.clientX&&(n=e.target.ownerDocument||o,r=n.documentElement,i=n.body,e.pageX=t.clientX+(r&&r.scrollLeft||i&&i.scrollLeft||0)-(r&&r.clientLeft||i&&i.clientLeft||0),e.pageY=t.clientY+(r&&r.scrollTop||i&&i.scrollTop||0)-(r&&r.clientTop||i&&i.clientTop||0)),e.which||s===undefined||(e.which=1&s?1:2&s?3:4&s?2:0),e}},fix:function(e){if(e[x.expando])return e;var t,n,r,i=e.type,s=e,a=this.fixHooks[i];a||(this.fixHooks[i]=a=z.test(i)?this.mouseHooks:I.test(i)?this.keyHooks:{}),r=a.props?this.props.concat(a.props):this.props,e=new x.Event(s),t=r.length;while(t--)n=r[t],e[n]=s[n];return e.target||(e.target=o),3===e.target.nodeType&&(e.target=e.target.parentNode),a.filter?a.filter(e,s):e},special:{load:{noBubble:!0},focus:{trigger:function(){return this!==V()&&this.focus?(this.focus(),!1):undefined},delegateType:\"focusin\"},blur:{trigger:function(){return this===V()&&this.blur?(this.blur(),!1):undefined},delegateType:\"focusout\"},click:{trigger:function(){return\"checkbox\"===this.type&&this.click&&x.nodeName(this,\"input\")?(this.click(),!1):undefined},_default:function(e){return x.nodeName(e.target,\"a\")}},beforeunload:{postDispatch:function(e){e.result!==undefined&&(e.originalEvent.returnValue=e.result)}}},simulate:function(e,t,n,r){var i=x.extend(new x.Event,n,{type:e,isSimulated:!0,originalEvent:{}});r?x.event.trigger(i,null,t):x.event.dispatch.call(t,i),i.isDefaultPrevented()&&n.preventDefault()}},x.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n,!1)},x.Event=function(e,t){return this instanceof x.Event?(e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||e.getPreventDefault&&e.getPreventDefault()?U:Y):this.type=e,t&&x.extend(this,t),this.timeStamp=e&&e.timeStamp||x.now(),this[x.expando]=!0,undefined):new x.Event(e,t)},x.Event.prototype={isDefaultPrevented:Y,isPropagationStopped:Y,isImmediatePropagationStopped:Y,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=U,e&&e.preventDefault&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=U,e&&e.stopPropagation&&e.stopPropagation()},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=U,this.stopPropagation()}},x.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\"},function(e,t){x.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return(!i||i!==r&&!x.contains(r,i))&&(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),x.support.focusinBubbles||x.each({focus:\"focusin\",blur:\"focusout\"},function(e,t){var n=0,r=function(e){x.event.simulate(t,e.target,x.event.fix(e),!0)};x.event.special[t]={setup:function(){0===n++&&o.addEventListener(e,r,!0)},teardown:function(){0===--n&&o.removeEventListener(e,r,!0)}}}),x.fn.extend({on:function(e,t,n,r,i){var o,s;if(\"object\"==typeof e){\"string\"!=typeof t&&(n=n||t,t=undefined);for(s in e)this.on(s,t,n,e[s],i);return this}if(null==n&&null==r?(r=t,n=t=undefined):null==r&&(\"string\"==typeof t?(r=n,n=undefined):(r=n,n=t,t=undefined)),r===!1)r=Y;else if(!r)return this;return 1===i&&(o=r,r=function(e){return x().off(e),o.apply(this,arguments)},r.guid=o.guid||(o.guid=x.guid++)),this.each(function(){x.event.add(this,e,r,n,t)})},one:function(e,t,n,r){return this.on(e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,x(e.delegateTarget).off(r.namespace?r.origType+\".\"+r.namespace:r.origType,r.selector,r.handler),this;if(\"object\"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return(t===!1||\"function\"==typeof t)&&(n=t,t=undefined),n===!1&&(n=Y),this.each(function(){x.event.remove(this,e,n,t)})},trigger:function(e,t){return this.each(function(){x.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];return n?x.event.trigger(e,t,n,!0):undefined}});var G=/^.[^:#\\[\\.,]*$/,J=/^(?:parents|prev(?:Until|All))/,Q=x.expr.match.needsContext,K={children:!0,contents:!0,next:!0,prev:!0};x.fn.extend({find:function(e){var t,n=[],r=this,i=r.length;if(\"string\"!=typeof e)return this.pushStack(x(e).filter(function(){for(t=0;i>t;t++)if(x.contains(r[t],this))return!0}));for(t=0;i>t;t++)x.find(e,r[t],n);return n=this.pushStack(i>1?x.unique(n):n),n.selector=this.selector?this.selector+\" \"+e:e,n},has:function(e){var t=x(e,this),n=t.length;return this.filter(function(){var e=0;for(;n>e;e++)if(x.contains(this,t[e]))return!0})},not:function(e){return this.pushStack(et(this,e||[],!0))},filter:function(e){return this.pushStack(et(this,e||[],!1))},is:function(e){return!!et(this,\"string\"==typeof e&&Q.test(e)?x(e):e||[],!1).length},closest:function(e,t){var n,r=0,i=this.length,o=[],s=Q.test(e)||\"string\"!=typeof e?x(e,t||this.context):0;for(;i>r;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(11>n.nodeType&&(s?s.index(n)>-1:1===n.nodeType&&x.find.matchesSelector(n,e))){n=o.push(n);break}return this.pushStack(o.length>1?x.unique(o):o)},index:function(e){return e?\"string\"==typeof e?g.call(x(e),this[0]):g.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){var n=\"string\"==typeof e?x(e,t):x.makeArray(e&&e.nodeType?[e]:e),r=x.merge(this.get(),n);return this.pushStack(x.unique(r))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}});function Z(e,t){while((e=e[t])&&1!==e.nodeType);return e}x.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return x.dir(e,\"parentNode\")},parentsUntil:function(e,t,n){return x.dir(e,\"parentNode\",n)},next:function(e){return Z(e,\"nextSibling\")},prev:function(e){return Z(e,\"previousSibling\")},nextAll:function(e){return x.dir(e,\"nextSibling\")},prevAll:function(e){return x.dir(e,\"previousSibling\")},nextUntil:function(e,t,n){return x.dir(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return x.dir(e,\"previousSibling\",n)},siblings:function(e){return x.sibling((e.parentNode||{}).firstChild,e)},children:function(e){return x.sibling(e.firstChild)},contents:function(e){return e.contentDocument||x.merge([],e.childNodes)}},function(e,t){x.fn[e]=function(n,r){var i=x.map(this,t,n);return\"Until\"!==e.slice(-5)&&(r=n),r&&\"string\"==typeof r&&(i=x.filter(r,i)),this.length>1&&(K[e]||x.unique(i),J.test(e)&&i.reverse()),this.pushStack(i)}}),x.extend({filter:function(e,t,n){var r=t[0];return n&&(e=\":not(\"+e+\")\"),1===t.length&&1===r.nodeType?x.find.matchesSelector(r,e)?[r]:[]:x.find.matches(e,x.grep(t,function(e){return 1===e.nodeType}))},dir:function(e,t,n){var r=[],i=n!==undefined;while((e=e[t])&&9!==e.nodeType)if(1===e.nodeType){if(i&&x(e).is(n))break;r.push(e)}return r},sibling:function(e,t){var n=[];for(;e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}});function et(e,t,n){if(x.isFunction(t))return x.grep(e,function(e,r){return!!t.call(e,r,e)!==n});if(t.nodeType)return x.grep(e,function(e){return e===t!==n});if(\"string\"==typeof t){if(G.test(t))return x.filter(t,e,n);t=x.filter(t,e)}return x.grep(e,function(e){return g.call(t,e)>=0!==n})}var tt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:]+)[^>]*)\\/>/gi,nt=/<([\\w:]+)/,rt=/<|&#?\\w+;/,it=/<(?:script|style|link)/i,ot=/^(?:checkbox|radio)$/i,st=/checked\\s*(?:[^=]|=\\s*.checked.)/i,at=/^$|\\/(?:java|ecma)script/i,ut=/^true\\/(.*)/,lt=/^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g,ct={option:[1,\"<select multiple='multiple'>\",\"</select>\"],thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};ct.optgroup=ct.option,ct.tbody=ct.tfoot=ct.colgroup=ct.caption=ct.thead,ct.th=ct.td,x.fn.extend({text:function(e){return x.access(this,function(e){return e===undefined?x.text(this):this.empty().append((this[0]&&this[0].ownerDocument||o).createTextNode(e))},null,e,arguments.length)},append:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=pt(this,e);t.appendChild(e)}})},prepend:function(){return this.domManip(arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=pt(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return this.domManip(arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},remove:function(e,t){var n,r=e?x.filter(e,this):this,i=0;for(;null!=(n=r[i]);i++)t||1!==n.nodeType||x.cleanData(mt(n)),n.parentNode&&(t&&x.contains(n.ownerDocument,n)&&dt(mt(n,\"script\")),n.parentNode.removeChild(n));return this},empty:function(){var e,t=0;for(;null!=(e=this[t]);t++)1===e.nodeType&&(x.cleanData(mt(e,!1)),e.textContent=\"\");return this},clone:function(e,t){return e=null==e?!1:e,t=null==t?e:t,this.map(function(){return x.clone(this,e,t)})},html:function(e){return x.access(this,function(e){var t=this[0]||{},n=0,r=this.length;if(e===undefined&&1===t.nodeType)return t.innerHTML;if(\"string\"==typeof e&&!it.test(e)&&!ct[(nt.exec(e)||[\"\",\"\"])[1].toLowerCase()]){e=e.replace(tt,\"<$1></$2>\");try{for(;r>n;n++)t=this[n]||{},1===t.nodeType&&(x.cleanData(mt(t,!1)),t.innerHTML=e);t=0}catch(i){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=x.map(this,function(e){return[e.nextSibling,e.parentNode]}),t=0;return this.domManip(arguments,function(n){var r=e[t++],i=e[t++];i&&(r&&r.parentNode!==i&&(r=this.nextSibling),x(this).remove(),i.insertBefore(n,r))},!0),t?this:this.remove()},detach:function(e){return this.remove(e,!0)},domManip:function(e,t,n){e=f.apply([],e);var r,i,o,s,a,u,l=0,c=this.length,p=this,h=c-1,d=e[0],g=x.isFunction(d);if(g||!(1>=c||\"string\"!=typeof d||x.support.checkClone)&&st.test(d))return this.each(function(r){var i=p.eq(r);g&&(e[0]=d.call(this,r,i.html())),i.domManip(e,t,n)});if(c&&(r=x.buildFragment(e,this[0].ownerDocument,!1,!n&&this),i=r.firstChild,1===r.childNodes.length&&(r=i),i)){for(o=x.map(mt(r,\"script\"),ft),s=o.length;c>l;l++)a=r,l!==h&&(a=x.clone(a,!0,!0),s&&x.merge(o,mt(a,\"script\"))),t.call(this[l],a,l);if(s)for(u=o[o.length-1].ownerDocument,x.map(o,ht),l=0;s>l;l++)a=o[l],at.test(a.type||\"\")&&!q.access(a,\"globalEval\")&&x.contains(u,a)&&(a.src?x._evalUrl(a.src):x.globalEval(a.textContent.replace(lt,\"\")))}return this}}),x.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,t){x.fn[e]=function(e){var n,r=[],i=x(e),o=i.length-1,s=0;for(;o>=s;s++)n=s===o?this:this.clone(!0),x(i[s])[t](n),h.apply(r,n.get());return this.pushStack(r)}}),x.extend({clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),u=x.contains(e.ownerDocument,e);if(!(x.support.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||x.isXMLDoc(e)))for(s=mt(a),o=mt(e),r=0,i=o.length;i>r;r++)yt(o[r],s[r]);if(t)if(n)for(o=o||mt(e),s=s||mt(a),r=0,i=o.length;i>r;r++)gt(o[r],s[r]);else gt(e,a);return s=mt(a,\"script\"),s.length>0&&dt(s,!u&&mt(e,\"script\")),a},buildFragment:function(e,t,n,r){var i,o,s,a,u,l,c=0,p=e.length,f=t.createDocumentFragment(),h=[];for(;p>c;c++)if(i=e[c],i||0===i)if(\"object\"===x.type(i))x.merge(h,i.nodeType?[i]:i);else if(rt.test(i)){o=o||f.appendChild(t.createElement(\"div\")),s=(nt.exec(i)||[\"\",\"\"])[1].toLowerCase(),a=ct[s]||ct._default,o.innerHTML=a[1]+i.replace(tt,\"<$1></$2>\")+a[2],l=a[0];while(l--)o=o.lastChild;x.merge(h,o.childNodes),o=f.firstChild,o.textContent=\"\"}else h.push(t.createTextNode(i));f.textContent=\"\",c=0;while(i=h[c++])if((!r||-1===x.inArray(i,r))&&(u=x.contains(i.ownerDocument,i),o=mt(f.appendChild(i),\"script\"),u&&dt(o),n)){l=0;while(i=o[l++])at.test(i.type||\"\")&&n.push(i)}return f},cleanData:function(e){var t,n,r,i,o,s,a=x.event.special,u=0;for(;(n=e[u])!==undefined;u++){if(F.accepts(n)&&(o=n[q.expando],o&&(t=q.cache[o]))){if(r=Object.keys(t.events||{}),r.length)for(s=0;(i=r[s])!==undefined;s++)a[i]?x.event.remove(n,i):x.removeEvent(n,i,t.handle);q.cache[o]&&delete q.cache[o]}delete L.cache[n[L.expando]]}},_evalUrl:function(e){return x.ajax({url:e,type:\"GET\",dataType:\"script\",async:!1,global:!1,\"throws\":!0})}});function pt(e,t){return x.nodeName(e,\"table\")&&x.nodeName(1===t.nodeType?t:t.firstChild,\"tr\")?e.getElementsByTagName(\"tbody\")[0]||e.appendChild(e.ownerDocument.createElement(\"tbody\")):e}function ft(e){return e.type=(null!==e.getAttribute(\"type\"))+\"/\"+e.type,e}function ht(e){var t=ut.exec(e.type);return t?e.type=t[1]:e.removeAttribute(\"type\"),e}function dt(e,t){var n=e.length,r=0;for(;n>r;r++)q.set(e[r],\"globalEval\",!t||q.get(t[r],\"globalEval\"))}function gt(e,t){var n,r,i,o,s,a,u,l;if(1===t.nodeType){if(q.hasData(e)&&(o=q.access(e),s=q.set(t,o),l=o.events)){delete s.handle,s.events={};for(i in l)for(n=0,r=l[i].length;r>n;n++)x.event.add(t,i,l[i][n])}L.hasData(e)&&(a=L.access(e),u=x.extend({},a),L.set(t,u))}}function mt(e,t){var n=e.getElementsByTagName?e.getElementsByTagName(t||\"*\"):e.querySelectorAll?e.querySelectorAll(t||\"*\"):[];return t===undefined||t&&x.nodeName(e,t)?x.merge([e],n):n}function yt(e,t){var n=t.nodeName.toLowerCase();\"input\"===n&&ot.test(e.type)?t.checked=e.checked:(\"input\"===n||\"textarea\"===n)&&(t.defaultValue=e.defaultValue)}x.fn.extend({wrapAll:function(e){var t;return x.isFunction(e)?this.each(function(t){x(this).wrapAll(e.call(this,t))}):(this[0]&&(t=x(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){var e=this;while(e.firstElementChild)e=e.firstElementChild;return e}).append(this)),this)},wrapInner:function(e){return x.isFunction(e)?this.each(function(t){x(this).wrapInner(e.call(this,t))}):this.each(function(){var t=x(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=x.isFunction(e);return this.each(function(n){x(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(){return this.parent().each(function(){x.nodeName(this,\"body\")||x(this).replaceWith(this.childNodes)}).end()}});var vt,xt,bt=/^(none|table(?!-c[ea]).+)/,wt=/^margin/,Tt=RegExp(\"^(\"+b+\")(.*)$\",\"i\"),Ct=RegExp(\"^(\"+b+\")(?!px)[a-z%]+$\",\"i\"),kt=RegExp(\"^([+-])=(\"+b+\")\",\"i\"),Nt={BODY:\"block\"},Et={position:\"absolute\",visibility:\"hidden\",display:\"block\"},St={letterSpacing:0,fontWeight:400},jt=[\"Top\",\"Right\",\"Bottom\",\"Left\"],Dt=[\"Webkit\",\"O\",\"Moz\",\"ms\"];function At(e,t){if(t in e)return t;var n=t.charAt(0).toUpperCase()+t.slice(1),r=t,i=Dt.length;while(i--)if(t=Dt[i]+n,t in e)return t;return r}function Lt(e,t){return e=t||e,\"none\"===x.css(e,\"display\")||!x.contains(e.ownerDocument,e)}function qt(t){return e.getComputedStyle(t,null)}function Ht(e,t){var n,r,i,o=[],s=0,a=e.length;for(;a>s;s++)r=e[s],r.style&&(o[s]=q.get(r,\"olddisplay\"),n=r.style.display,t?(o[s]||\"none\"!==n||(r.style.display=\"\"),\"\"===r.style.display&&Lt(r)&&(o[s]=q.access(r,\"olddisplay\",Rt(r.nodeName)))):o[s]||(i=Lt(r),(n&&\"none\"!==n||!i)&&q.set(r,\"olddisplay\",i?n:x.css(r,\"display\"))));for(s=0;a>s;s++)r=e[s],r.style&&(t&&\"none\"!==r.style.display&&\"\"!==r.style.display||(r.style.display=t?o[s]||\"\":\"none\"));return e}x.fn.extend({css:function(e,t){return x.access(this,function(e,t,n){var r,i,o={},s=0;if(x.isArray(t)){for(r=qt(e),i=t.length;i>s;s++)o[t[s]]=x.css(e,t[s],!1,r);return o}return n!==undefined?x.style(e,t,n):x.css(e,t)},e,t,arguments.length>1)},show:function(){return Ht(this,!0)},hide:function(){return Ht(this)},toggle:function(e){return\"boolean\"==typeof e?e?this.show():this.hide():this.each(function(){Lt(this)?x(this).show():x(this).hide()})}}),x.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=vt(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{columnCount:!0,fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{\"float\":\"cssFloat\"},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=x.camelCase(t),u=e.style;return t=x.cssProps[a]||(x.cssProps[a]=At(u,a)),s=x.cssHooks[t]||x.cssHooks[a],n===undefined?s&&\"get\"in s&&(i=s.get(e,!1,r))!==undefined?i:u[t]:(o=typeof n,\"string\"===o&&(i=kt.exec(n))&&(n=(i[1]+1)*i[2]+parseFloat(x.css(e,t)),o=\"number\"),null==n||\"number\"===o&&isNaN(n)||(\"number\"!==o||x.cssNumber[a]||(n+=\"px\"),x.support.clearCloneStyle||\"\"!==n||0!==t.indexOf(\"background\")||(u[t]=\"inherit\"),s&&\"set\"in s&&(n=s.set(e,n,r))===undefined||(u[t]=n)),undefined)}},css:function(e,t,n,r){var i,o,s,a=x.camelCase(t);return t=x.cssProps[a]||(x.cssProps[a]=At(e.style,a)),s=x.cssHooks[t]||x.cssHooks[a],s&&\"get\"in s&&(i=s.get(e,!0,n)),i===undefined&&(i=vt(e,t,r)),\"normal\"===i&&t in St&&(i=St[t]),\"\"===n||n?(o=parseFloat(i),n===!0||x.isNumeric(o)?o||0:i):i}}),vt=function(e,t,n){var r,i,o,s=n||qt(e),a=s?s.getPropertyValue(t)||s[t]:undefined,u=e.style;return s&&(\"\"!==a||x.contains(e.ownerDocument,e)||(a=x.style(e,t)),Ct.test(a)&&wt.test(t)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=s.width,u.width=r,u.minWidth=i,u.maxWidth=o)),a};function Ot(e,t,n){var r=Tt.exec(t);return r?Math.max(0,r[1]-(n||0))+(r[2]||\"px\"):t}function Ft(e,t,n,r,i){var o=n===(r?\"border\":\"content\")?4:\"width\"===t?1:0,s=0;for(;4>o;o+=2)\"margin\"===n&&(s+=x.css(e,n+jt[o],!0,i)),r?(\"content\"===n&&(s-=x.css(e,\"padding\"+jt[o],!0,i)),\"margin\"!==n&&(s-=x.css(e,\"border\"+jt[o]+\"Width\",!0,i))):(s+=x.css(e,\"padding\"+jt[o],!0,i),\"padding\"!==n&&(s+=x.css(e,\"border\"+jt[o]+\"Width\",!0,i)));return s}function Pt(e,t,n){var r=!0,i=\"width\"===t?e.offsetWidth:e.offsetHeight,o=qt(e),s=x.support.boxSizing&&\"border-box\"===x.css(e,\"boxSizing\",!1,o);if(0>=i||null==i){if(i=vt(e,t,o),(0>i||null==i)&&(i=e.style[t]),Ct.test(i))return i;r=s&&(x.support.boxSizingReliable||i===e.style[t]),i=parseFloat(i)||0}return i+Ft(e,t,n||(s?\"border\":\"content\"),r,o)+\"px\"}function Rt(e){var t=o,n=Nt[e];return n||(n=Mt(e,t),\"none\"!==n&&n||(xt=(xt||x(\"<iframe frameborder='0' width='0' height='0'/>\").css(\"cssText\",\"display:block !important\")).appendTo(t.documentElement),t=(xt[0].contentWindow||xt[0].contentDocument).document,t.write(\"<!doctype html><html><body>\"),t.close(),n=Mt(e,t),xt.detach()),Nt[e]=n),n}function Mt(e,t){var n=x(t.createElement(e)).appendTo(t.body),r=x.css(n[0],\"display\");return n.remove(),r}x.each([\"height\",\"width\"],function(e,t){x.cssHooks[t]={get:function(e,n,r){return n?0===e.offsetWidth&&bt.test(x.css(e,\"display\"))?x.swap(e,Et,function(){return Pt(e,t,r)}):Pt(e,t,r):undefined},set:function(e,n,r){var i=r&&qt(e);return Ot(e,n,r?Ft(e,t,r,x.support.boxSizing&&\"border-box\"===x.css(e,\"boxSizing\",!1,i),i):0)}}}),x(function(){x.support.reliableMarginRight||(x.cssHooks.marginRight={get:function(e,t){return t?x.swap(e,{display:\"inline-block\"},vt,[e,\"marginRight\"]):undefined}}),!x.support.pixelPosition&&x.fn.position&&x.each([\"top\",\"left\"],function(e,t){x.cssHooks[t]={get:function(e,n){return n?(n=vt(e,t),Ct.test(n)?x(e).position()[t]+\"px\":n):undefined}}})}),x.expr&&x.expr.filters&&(x.expr.filters.hidden=function(e){return 0>=e.offsetWidth&&0>=e.offsetHeight},x.expr.filters.visible=function(e){return!x.expr.filters.hidden(e)}),x.each({margin:\"\",padding:\"\",border:\"Width\"},function(e,t){x.cssHooks[e+t]={expand:function(n){var r=0,i={},o=\"string\"==typeof n?n.split(\" \"):[n];for(;4>r;r++)i[e+jt[r]+t]=o[r]||o[r-2]||o[0];return i}},wt.test(e)||(x.cssHooks[e+t].set=Ot)});var Wt=/%20/g,$t=/\\[\\]$/,Bt=/\\r?\\n/g,It=/^(?:submit|button|image|reset|file)$/i,zt=/^(?:input|select|textarea|keygen)/i;x.fn.extend({serialize:function(){return x.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=x.prop(this,\"elements\");return e?x.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!x(this).is(\":disabled\")&&zt.test(this.nodeName)&&!It.test(e)&&(this.checked||!ot.test(e))}).map(function(e,t){var n=x(this).val();return null==n?null:x.isArray(n)?x.map(n,function(e){return{name:t.name,value:e.replace(Bt,\"\\r\\n\")}}):{name:t.name,value:n.replace(Bt,\"\\r\\n\")}}).get()}}),x.param=function(e,t){var n,r=[],i=function(e,t){t=x.isFunction(t)?t():null==t?\"\":t,r[r.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(t)};if(t===undefined&&(t=x.ajaxSettings&&x.ajaxSettings.traditional),x.isArray(e)||e.jquery&&!x.isPlainObject(e))x.each(e,function(){i(this.name,this.value)});else for(n in e)_t(n,e[n],t,i);return r.join(\"&\").replace(Wt,\"+\")};function _t(e,t,n,r){var i;if(x.isArray(t))x.each(t,function(t,i){n||$t.test(e)?r(e,i):_t(e+\"[\"+(\"object\"==typeof i?t:\"\")+\"]\",i,n,r)});else if(n||\"object\"!==x.type(t))r(e,t);else for(i in t)_t(e+\"[\"+i+\"]\",t[i],n,r)}x.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu\".split(\" \"),function(e,t){x.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),x.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)},bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)\n+},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)}});var Xt,Ut,Yt=x.now(),Vt=/\\?/,Gt=/#.*$/,Jt=/([?&])_=[^&]*/,Qt=/^(.*?):[ \\t]*([^\\r\\n]*)$/gm,Kt=/^(?:about|app|app-storage|.+-extension|file|res|widget):$/,Zt=/^(?:GET|HEAD)$/,en=/^\\/\\//,tn=/^([\\w.+-]+:)(?:\\/\\/([^\\/?#:]*)(?::(\\d+)|)|)/,nn=x.fn.load,rn={},on={},sn=\"*/\".concat(\"*\");try{Ut=i.href}catch(an){Ut=o.createElement(\"a\"),Ut.href=\"\",Ut=Ut.href}Xt=tn.exec(Ut.toLowerCase())||[];function un(e){return function(t,n){\"string\"!=typeof t&&(n=t,t=\"*\");var r,i=0,o=t.toLowerCase().match(w)||[];if(x.isFunction(n))while(r=o[i++])\"+\"===r[0]?(r=r.slice(1)||\"*\",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function ln(e,t,n,r){var i={},o=e===on;function s(a){var u;return i[a]=!0,x.each(e[a]||[],function(e,a){var l=a(t,n,r);return\"string\"!=typeof l||o||i[l]?o?!(u=l):undefined:(t.dataTypes.unshift(l),s(l),!1)}),u}return s(t.dataTypes[0])||!i[\"*\"]&&s(\"*\")}function cn(e,t){var n,r,i=x.ajaxSettings.flatOptions||{};for(n in t)t[n]!==undefined&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&x.extend(!0,e,r),e}x.fn.load=function(e,t,n){if(\"string\"!=typeof e&&nn)return nn.apply(this,arguments);var r,i,o,s=this,a=e.indexOf(\" \");return a>=0&&(r=e.slice(a),e=e.slice(0,a)),x.isFunction(t)?(n=t,t=undefined):t&&\"object\"==typeof t&&(i=\"POST\"),s.length>0&&x.ajax({url:e,type:i,dataType:\"html\",data:t}).done(function(e){o=arguments,s.html(r?x(\"<div>\").append(x.parseHTML(e)).find(r):e)}).complete(n&&function(e,t){s.each(n,o||[e.responseText,t,e])}),this},x.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],function(e,t){x.fn[t]=function(e){return this.on(t,e)}}),x.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Ut,type:\"GET\",isLocal:Kt.test(Xt[1]),global:!0,processData:!0,async:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",accepts:{\"*\":sn,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:\"responseXML\",text:\"responseText\",json:\"responseJSON\"},converters:{\"* text\":String,\"text html\":!0,\"text json\":x.parseJSON,\"text xml\":x.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?cn(cn(e,x.ajaxSettings),t):cn(x.ajaxSettings,e)},ajaxPrefilter:un(rn),ajaxTransport:un(on),ajax:function(e,t){\"object\"==typeof e&&(t=e,e=undefined),t=t||{};var n,r,i,o,s,a,u,l,c=x.ajaxSetup({},t),p=c.context||c,f=c.context&&(p.nodeType||p.jquery)?x(p):x.event,h=x.Deferred(),d=x.Callbacks(\"once memory\"),g=c.statusCode||{},m={},y={},v=0,b=\"canceled\",T={readyState:0,getResponseHeader:function(e){var t;if(2===v){if(!o){o={};while(t=Qt.exec(i))o[t[1].toLowerCase()]=t[2]}t=o[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return 2===v?i:null},setRequestHeader:function(e,t){var n=e.toLowerCase();return v||(e=y[n]=y[n]||e,m[e]=t),this},overrideMimeType:function(e){return v||(c.mimeType=e),this},statusCode:function(e){var t;if(e)if(2>v)for(t in e)g[t]=[g[t],e[t]];else T.always(e[T.status]);return this},abort:function(e){var t=e||b;return n&&n.abort(t),k(0,t),this}};if(h.promise(T).complete=d.add,T.success=T.done,T.error=T.fail,c.url=((e||c.url||Ut)+\"\").replace(Gt,\"\").replace(en,Xt[1]+\"//\"),c.type=t.method||t.type||c.method||c.type,c.dataTypes=x.trim(c.dataType||\"*\").toLowerCase().match(w)||[\"\"],null==c.crossDomain&&(a=tn.exec(c.url.toLowerCase()),c.crossDomain=!(!a||a[1]===Xt[1]&&a[2]===Xt[2]&&(a[3]||(\"http:\"===a[1]?\"80\":\"443\"))===(Xt[3]||(\"http:\"===Xt[1]?\"80\":\"443\")))),c.data&&c.processData&&\"string\"!=typeof c.data&&(c.data=x.param(c.data,c.traditional)),ln(rn,c,t,T),2===v)return T;u=c.global,u&&0===x.active++&&x.event.trigger(\"ajaxStart\"),c.type=c.type.toUpperCase(),c.hasContent=!Zt.test(c.type),r=c.url,c.hasContent||(c.data&&(r=c.url+=(Vt.test(r)?\"&\":\"?\")+c.data,delete c.data),c.cache===!1&&(c.url=Jt.test(r)?r.replace(Jt,\"$1_=\"+Yt++):r+(Vt.test(r)?\"&\":\"?\")+\"_=\"+Yt++)),c.ifModified&&(x.lastModified[r]&&T.setRequestHeader(\"If-Modified-Since\",x.lastModified[r]),x.etag[r]&&T.setRequestHeader(\"If-None-Match\",x.etag[r])),(c.data&&c.hasContent&&c.contentType!==!1||t.contentType)&&T.setRequestHeader(\"Content-Type\",c.contentType),T.setRequestHeader(\"Accept\",c.dataTypes[0]&&c.accepts[c.dataTypes[0]]?c.accepts[c.dataTypes[0]]+(\"*\"!==c.dataTypes[0]?\", \"+sn+\"; q=0.01\":\"\"):c.accepts[\"*\"]);for(l in c.headers)T.setRequestHeader(l,c.headers[l]);if(c.beforeSend&&(c.beforeSend.call(p,T,c)===!1||2===v))return T.abort();b=\"abort\";for(l in{success:1,error:1,complete:1})T[l](c[l]);if(n=ln(on,c,t,T)){T.readyState=1,u&&f.trigger(\"ajaxSend\",[T,c]),c.async&&c.timeout>0&&(s=setTimeout(function(){T.abort(\"timeout\")},c.timeout));try{v=1,n.send(m,k)}catch(C){if(!(2>v))throw C;k(-1,C)}}else k(-1,\"No Transport\");function k(e,t,o,a){var l,m,y,b,w,C=t;2!==v&&(v=2,s&&clearTimeout(s),n=undefined,i=a||\"\",T.readyState=e>0?4:0,l=e>=200&&300>e||304===e,o&&(b=pn(c,T,o)),b=fn(c,b,T,l),l?(c.ifModified&&(w=T.getResponseHeader(\"Last-Modified\"),w&&(x.lastModified[r]=w),w=T.getResponseHeader(\"etag\"),w&&(x.etag[r]=w)),204===e||\"HEAD\"===c.type?C=\"nocontent\":304===e?C=\"notmodified\":(C=b.state,m=b.data,y=b.error,l=!y)):(y=C,(e||!C)&&(C=\"error\",0>e&&(e=0))),T.status=e,T.statusText=(t||C)+\"\",l?h.resolveWith(p,[m,C,T]):h.rejectWith(p,[T,C,y]),T.statusCode(g),g=undefined,u&&f.trigger(l?\"ajaxSuccess\":\"ajaxError\",[T,c,l?m:y]),d.fireWith(p,[T,C]),u&&(f.trigger(\"ajaxComplete\",[T,c]),--x.active||x.event.trigger(\"ajaxStop\")))}return T},getJSON:function(e,t,n){return x.get(e,t,n,\"json\")},getScript:function(e,t){return x.get(e,undefined,t,\"script\")}}),x.each([\"get\",\"post\"],function(e,t){x[t]=function(e,n,r,i){return x.isFunction(n)&&(i=i||r,r=n,n=undefined),x.ajax({url:e,type:t,dataType:i,data:n,success:r})}});function pn(e,t,n){var r,i,o,s,a=e.contents,u=e.dataTypes;while(\"*\"===u[0])u.shift(),r===undefined&&(r=e.mimeType||t.getResponseHeader(\"Content-Type\"));if(r)for(i in a)if(a[i]&&a[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||e.converters[i+\" \"+u[0]]){o=i;break}s||(s=i)}o=o||s}return o?(o!==u[0]&&u.unshift(o),n[o]):undefined}function fn(e,t,n,r){var i,o,s,a,u,l={},c=e.dataTypes.slice();if(c[1])for(s in e.converters)l[s.toLowerCase()]=e.converters[s];o=c.shift();while(o)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=o,o=c.shift())if(\"*\"===o)o=u;else if(\"*\"!==u&&u!==o){if(s=l[u+\" \"+o]||l[\"* \"+o],!s)for(i in l)if(a=i.split(\" \"),a[1]===o&&(s=l[u+\" \"+a[0]]||l[\"* \"+a[0]])){s===!0?s=l[i]:l[i]!==!0&&(o=a[0],c.unshift(a[1]));break}if(s!==!0)if(s&&e[\"throws\"])t=s(t);else try{t=s(t)}catch(p){return{state:\"parsererror\",error:s?p:\"No conversion from \"+u+\" to \"+o}}}return{state:\"success\",data:t}}x.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/(?:java|ecma)script/},converters:{\"text script\":function(e){return x.globalEval(e),e}}}),x.ajaxPrefilter(\"script\",function(e){e.cache===undefined&&(e.cache=!1),e.crossDomain&&(e.type=\"GET\")}),x.ajaxTransport(\"script\",function(e){if(e.crossDomain){var t,n;return{send:function(r,i){t=x(\"<script>\").prop({async:!0,charset:e.scriptCharset,src:e.url}).on(\"load error\",n=function(e){t.remove(),n=null,e&&i(\"error\"===e.type?404:200,e.type)}),o.head.appendChild(t[0])},abort:function(){n&&n()}}}});var hn=[],dn=/(=)\\?(?=&|$)|\\?\\?/;x.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var e=hn.pop()||x.expando+\"_\"+Yt++;return this[e]=!0,e}}),x.ajaxPrefilter(\"json jsonp\",function(t,n,r){var i,o,s,a=t.jsonp!==!1&&(dn.test(t.url)?\"url\":\"string\"==typeof t.data&&!(t.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&dn.test(t.data)&&\"data\");return a||\"jsonp\"===t.dataTypes[0]?(i=t.jsonpCallback=x.isFunction(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,a?t[a]=t[a].replace(dn,\"$1\"+i):t.jsonp!==!1&&(t.url+=(Vt.test(t.url)?\"&\":\"?\")+t.jsonp+\"=\"+i),t.converters[\"script json\"]=function(){return s||x.error(i+\" was not called\"),s[0]},t.dataTypes[0]=\"json\",o=e[i],e[i]=function(){s=arguments},r.always(function(){e[i]=o,t[i]&&(t.jsonpCallback=n.jsonpCallback,hn.push(i)),s&&x.isFunction(o)&&o(s[0]),s=o=undefined}),\"script\"):undefined}),x.ajaxSettings.xhr=function(){try{return new XMLHttpRequest}catch(e){}};var gn=x.ajaxSettings.xhr(),mn={0:200,1223:204},yn=0,vn={};e.ActiveXObject&&x(e).on(\"unload\",function(){for(var e in vn)vn[e]();vn=undefined}),x.support.cors=!!gn&&\"withCredentials\"in gn,x.support.ajax=gn=!!gn,x.ajaxTransport(function(e){var t;return x.support.cors||gn&&!e.crossDomain?{send:function(n,r){var i,o,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(i in e.xhrFields)s[i]=e.xhrFields[i];e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||n[\"X-Requested-With\"]||(n[\"X-Requested-With\"]=\"XMLHttpRequest\");for(i in n)s.setRequestHeader(i,n[i]);t=function(e){return function(){t&&(delete vn[o],t=s.onload=s.onerror=null,\"abort\"===e?s.abort():\"error\"===e?r(s.status||404,s.statusText):r(mn[s.status]||s.status,s.statusText,\"string\"==typeof s.responseText?{text:s.responseText}:undefined,s.getAllResponseHeaders()))}},s.onload=t(),s.onerror=t(\"error\"),t=vn[o=yn++]=t(\"abort\"),s.send(e.hasContent&&e.data||null)},abort:function(){t&&t()}}:undefined});var xn,bn,wn=/^(?:toggle|show|hide)$/,Tn=RegExp(\"^(?:([+-])=|)(\"+b+\")([a-z%]*)$\",\"i\"),Cn=/queueHooks$/,kn=[An],Nn={\"*\":[function(e,t){var n=this.createTween(e,t),r=n.cur(),i=Tn.exec(t),o=i&&i[3]||(x.cssNumber[e]?\"\":\"px\"),s=(x.cssNumber[e]||\"px\"!==o&&+r)&&Tn.exec(x.css(n.elem,e)),a=1,u=20;if(s&&s[3]!==o){o=o||s[3],i=i||[],s=+r||1;do a=a||\".5\",s/=a,x.style(n.elem,e,s+o);while(a!==(a=n.cur()/r)&&1!==a&&--u)}return i&&(s=n.start=+s||+r||0,n.unit=o,n.end=i[1]?s+(i[1]+1)*i[2]:+i[2]),n}]};function En(){return setTimeout(function(){xn=undefined}),xn=x.now()}function Sn(e,t,n){var r,i=(Nn[t]||[]).concat(Nn[\"*\"]),o=0,s=i.length;for(;s>o;o++)if(r=i[o].call(n,t,e))return r}function jn(e,t,n){var r,i,o=0,s=kn.length,a=x.Deferred().always(function(){delete u.elem}),u=function(){if(i)return!1;var t=xn||En(),n=Math.max(0,l.startTime+l.duration-t),r=n/l.duration||0,o=1-r,s=0,u=l.tweens.length;for(;u>s;s++)l.tweens[s].run(o);return a.notifyWith(e,[l,o,n]),1>o&&u?n:(a.resolveWith(e,[l]),!1)},l=a.promise({elem:e,props:x.extend({},t),opts:x.extend(!0,{specialEasing:{}},n),originalProperties:t,originalOptions:n,startTime:xn||En(),duration:n.duration,tweens:[],createTween:function(t,n){var r=x.Tween(e,l.opts,t,n,l.opts.specialEasing[t]||l.opts.easing);return l.tweens.push(r),r},stop:function(t){var n=0,r=t?l.tweens.length:0;if(i)return this;for(i=!0;r>n;n++)l.tweens[n].run(1);return t?a.resolveWith(e,[l,t]):a.rejectWith(e,[l,t]),this}}),c=l.props;for(Dn(c,l.opts.specialEasing);s>o;o++)if(r=kn[o].call(l,e,c,l.opts))return r;return x.map(c,Sn,l),x.isFunction(l.opts.start)&&l.opts.start.call(e,l),x.fx.timer(x.extend(u,{elem:e,anim:l,queue:l.opts.queue})),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always)}function Dn(e,t){var n,r,i,o,s;for(n in e)if(r=x.camelCase(n),i=t[r],o=e[n],x.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),s=x.cssHooks[r],s&&\"expand\"in s){o=s.expand(o),delete e[r];for(n in o)n in e||(e[n]=o[n],t[n]=i)}else t[r]=i}x.Animation=x.extend(jn,{tweener:function(e,t){x.isFunction(e)?(t=e,e=[\"*\"]):e=e.split(\" \");var n,r=0,i=e.length;for(;i>r;r++)n=e[r],Nn[n]=Nn[n]||[],Nn[n].unshift(t)},prefilter:function(e,t){t?kn.unshift(e):kn.push(e)}});function An(e,t,n){var r,i,o,s,a,u,l=this,c={},p=e.style,f=e.nodeType&&Lt(e),h=q.get(e,\"fxshow\");n.queue||(a=x._queueHooks(e,\"fx\"),null==a.unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,l.always(function(){l.always(function(){a.unqueued--,x.queue(e,\"fx\").length||a.empty.fire()})})),1===e.nodeType&&(\"height\"in t||\"width\"in t)&&(n.overflow=[p.overflow,p.overflowX,p.overflowY],\"inline\"===x.css(e,\"display\")&&\"none\"===x.css(e,\"float\")&&(p.display=\"inline-block\")),n.overflow&&(p.overflow=\"hidden\",l.always(function(){p.overflow=n.overflow[0],p.overflowX=n.overflow[1],p.overflowY=n.overflow[2]}));for(r in t)if(i=t[r],wn.exec(i)){if(delete t[r],o=o||\"toggle\"===i,i===(f?\"hide\":\"show\")){if(\"show\"!==i||!h||h[r]===undefined)continue;f=!0}c[r]=h&&h[r]||x.style(e,r)}if(!x.isEmptyObject(c)){h?\"hidden\"in h&&(f=h.hidden):h=q.access(e,\"fxshow\",{}),o&&(h.hidden=!f),f?x(e).show():l.done(function(){x(e).hide()}),l.done(function(){var t;q.remove(e,\"fxshow\");for(t in c)x.style(e,t,c[t])});for(r in c)s=Sn(f?h[r]:0,r,l),r in h||(h[r]=s.start,f&&(s.end=s.start,s.start=\"width\"===r||\"height\"===r?1:0))}}function Ln(e,t,n,r,i){return new Ln.prototype.init(e,t,n,r,i)}x.Tween=Ln,Ln.prototype={constructor:Ln,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||\"swing\",this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(x.cssNumber[n]?\"\":\"px\")},cur:function(){var e=Ln.propHooks[this.prop];return e&&e.get?e.get(this):Ln.propHooks._default.get(this)},run:function(e){var t,n=Ln.propHooks[this.prop];return this.pos=t=this.options.duration?x.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):Ln.propHooks._default.set(this),this}},Ln.prototype.init.prototype=Ln.prototype,Ln.propHooks={_default:{get:function(e){var t;return null==e.elem[e.prop]||e.elem.style&&null!=e.elem.style[e.prop]?(t=x.css(e.elem,e.prop,\"\"),t&&\"auto\"!==t?t:0):e.elem[e.prop]},set:function(e){x.fx.step[e.prop]?x.fx.step[e.prop](e):e.elem.style&&(null!=e.elem.style[x.cssProps[e.prop]]||x.cssHooks[e.prop])?x.style(e.elem,e.prop,e.now+e.unit):e.elem[e.prop]=e.now}}},Ln.propHooks.scrollTop=Ln.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},x.each([\"toggle\",\"show\",\"hide\"],function(e,t){var n=x.fn[t];x.fn[t]=function(e,r,i){return null==e||\"boolean\"==typeof e?n.apply(this,arguments):this.animate(qn(t,!0),e,r,i)}}),x.fn.extend({fadeTo:function(e,t,n,r){return this.filter(Lt).css(\"opacity\",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=x.isEmptyObject(e),o=x.speed(t,n,r),s=function(){var t=jn(this,x.extend({},e),o);(i||q.get(this,\"finish\"))&&t.stop(!0)};return s.finish=s,i||o.queue===!1?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return\"string\"!=typeof e&&(n=t,t=e,e=undefined),t&&e!==!1&&this.queue(e||\"fx\",[]),this.each(function(){var t=!0,i=null!=e&&e+\"queueHooks\",o=x.timers,s=q.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&Cn.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));(t||!n)&&x.dequeue(this,e)})},finish:function(e){return e!==!1&&(e=e||\"fx\"),this.each(function(){var t,n=q.get(this),r=n[e+\"queue\"],i=n[e+\"queueHooks\"],o=x.timers,s=r?r.length:0;for(n.finish=!0,x.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;s>t;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}});function qn(e,t){var n,r={height:e},i=0;for(t=t?1:0;4>i;i+=2-t)n=jt[i],r[\"margin\"+n]=r[\"padding\"+n]=e;return t&&(r.opacity=r.width=e),r}x.each({slideDown:qn(\"show\"),slideUp:qn(\"hide\"),slideToggle:qn(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(e,t){x.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),x.speed=function(e,t,n){var r=e&&\"object\"==typeof e?x.extend({},e):{complete:n||!n&&t||x.isFunction(e)&&e,duration:e,easing:n&&t||t&&!x.isFunction(t)&&t};return r.duration=x.fx.off?0:\"number\"==typeof r.duration?r.duration:r.duration in x.fx.speeds?x.fx.speeds[r.duration]:x.fx.speeds._default,(null==r.queue||r.queue===!0)&&(r.queue=\"fx\"),r.old=r.complete,r.complete=function(){x.isFunction(r.old)&&r.old.call(this),r.queue&&x.dequeue(this,r.queue)},r},x.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2}},x.timers=[],x.fx=Ln.prototype.init,x.fx.tick=function(){var e,t=x.timers,n=0;for(xn=x.now();t.length>n;n++)e=t[n],e()||t[n]!==e||t.splice(n--,1);t.length||x.fx.stop(),xn=undefined},x.fx.timer=function(e){e()&&x.timers.push(e)&&x.fx.start()},x.fx.interval=13,x.fx.start=function(){bn||(bn=setInterval(x.fx.tick,x.fx.interval))},x.fx.stop=function(){clearInterval(bn),bn=null},x.fx.speeds={slow:600,fast:200,_default:400},x.fx.step={},x.expr&&x.expr.filters&&(x.expr.filters.animated=function(e){return x.grep(x.timers,function(t){return e===t.elem}).length}),x.fn.offset=function(e){if(arguments.length)return e===undefined?this:this.each(function(t){x.offset.setOffset(this,e,t)});var t,n,i=this[0],o={top:0,left:0},s=i&&i.ownerDocument;if(s)return t=s.documentElement,x.contains(t,i)?(typeof i.getBoundingClientRect!==r&&(o=i.getBoundingClientRect()),n=Hn(s),{top:o.top+n.pageYOffset-t.clientTop,left:o.left+n.pageXOffset-t.clientLeft}):o},x.offset={setOffset:function(e,t,n){var r,i,o,s,a,u,l,c=x.css(e,\"position\"),p=x(e),f={};\"static\"===c&&(e.style.position=\"relative\"),a=p.offset(),o=x.css(e,\"top\"),u=x.css(e,\"left\"),l=(\"absolute\"===c||\"fixed\"===c)&&(o+u).indexOf(\"auto\")>-1,l?(r=p.position(),s=r.top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(u)||0),x.isFunction(t)&&(t=t.call(e,n,a)),null!=t.top&&(f.top=t.top-a.top+s),null!=t.left&&(f.left=t.left-a.left+i),\"using\"in t?t.using.call(e,f):p.css(f)}},x.fn.extend({position:function(){if(this[0]){var e,t,n=this[0],r={top:0,left:0};return\"fixed\"===x.css(n,\"position\")?t=n.getBoundingClientRect():(e=this.offsetParent(),t=this.offset(),x.nodeName(e[0],\"html\")||(r=e.offset()),r.top+=x.css(e[0],\"borderTopWidth\",!0),r.left+=x.css(e[0],\"borderLeftWidth\",!0)),{top:t.top-r.top-x.css(n,\"marginTop\",!0),left:t.left-r.left-x.css(n,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){var e=this.offsetParent||s;while(e&&!x.nodeName(e,\"html\")&&\"static\"===x.css(e,\"position\"))e=e.offsetParent;return e||s})}}),x.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(t,n){var r=\"pageYOffset\"===n;x.fn[t]=function(i){return x.access(this,function(t,i,o){var s=Hn(t);return o===undefined?s?s[n]:t[i]:(s?s.scrollTo(r?e.pageXOffset:o,r?o:e.pageYOffset):t[i]=o,undefined)},t,i,arguments.length,null)}});function Hn(e){return x.isWindow(e)?e:9===e.nodeType&&e.defaultView}x.each({Height:\"height\",Width:\"width\"},function(e,t){x.each({padding:\"inner\"+e,content:t,\"\":\"outer\"+e},function(n,r){x.fn[r]=function(r,i){var o=arguments.length&&(n||\"boolean\"!=typeof r),s=n||(r===!0||i===!0?\"margin\":\"border\");return x.access(this,function(t,n,r){var i;return x.isWindow(t)?t.document.documentElement[\"client\"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body[\"scroll\"+e],i[\"scroll\"+e],t.body[\"offset\"+e],i[\"offset\"+e],i[\"client\"+e])):r===undefined?x.css(t,n,s):x.style(t,n,r,s)},t,o?r:undefined,o,null)}})}),x.fn.size=function(){return this.length},x.fn.andSelf=x.fn.addBack,\"object\"==typeof module&&module&&\"object\"==typeof module.exports?module.exports=x:\"function\"==typeof define&&define.amd&&define(\"jquery\",[],function(){return x}),\"object\"==typeof e&&\"object\"==typeof e.document&&(e.jQuery=e.$=x)})(window);"}, {"sha": "2b9651681295682a83276a5a4aee1246118ad017", "filename": "src/rustdoc_ng/html/static/main.css", "status": "added", "additions": 270, "deletions": 0, "changes": 270, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fhtml%2Fstatic%2Fmain.css", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fhtml%2Fstatic%2Fmain.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc_ng%2Fhtml%2Fstatic%2Fmain.css?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -0,0 +1,270 @@\n+/**\n+ * Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+ * file at the top-level directory of this distribution and at\n+ * http://rust-lang.org/COPYRIGHT.\n+ *\n+ * Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+ * http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+ * <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+ * option. This file may not be copied, modified, or distributed\n+ * except according to those terms.\n+ */\n+\n+@import \"normalize.css\";\n+\n+* {\n+  -webkit-box-sizing: border-box;\n+     -moz-box-sizing: border-box;\n+          box-sizing: border-box;\n+}\n+\n+/* Fonts */\n+\n+body {\n+    font: 13px Arial, sans-serif;\n+    line-height: 165%;\n+}\n+\n+h1, .sidebar .location {\n+    font: 700 22px \"Oswald\", Arial, sans-serif;\n+}\n+\n+h2, h3, h4 {\n+    font: 700 16px \"Oswald\", Arial, sans-serif;\n+    text-transform: uppercase;\n+}\n+\n+h2 code, h3 code, h4 code {\n+    text-transform: none;\n+    font-size: 1.2em;\n+}\n+\n+code, pre, h1.fqn {\n+    font: 15px \"Inconsolata\", \"Consolas\", \"Courier New\", monospace;\n+}\n+h1.fqn {\n+    font-size: 26px;\n+    font-weight: normal;\n+}\n+\n+nav {\n+    font: 700 26px \"Oswald\", Arial, sans-serif;\n+    text-transform: uppercase;\n+}\n+\n+nav.sub {\n+    padding-top: 20px;\n+    font: 700 16px \"Oswald\", Arial, sans-serif;\n+    text-transform: uppercase;\n+    text-align: right;\n+}\n+\n+/* General structure */\n+\n+html, body {\n+    min-height: 100%;\n+    height: 100%;\n+}\n+\n+body {\n+    position: relative;\n+    height: auto;\n+    padding-bottom: 20px;\n+}\n+\n+.sidebar {\n+    width: 200px;\n+    position: absolute;\n+    left: 0;\n+    top: 0;\n+    min-height: 100%;\n+}\n+\n+.content, nav { max-width: 960px; }\n+\n+/* Everything else */\n+\n+.js-only, .hidden { display: none; }\n+\n+.sidebar {\n+    background: #e9e9e9;\n+    padding: 10px;\n+}\n+\n+.sidebar img {\n+    margin: 20px auto;\n+    display: block;\n+}\n+\n+.sidebar .location { margin-bottom: 10px; }\n+.sidebar .block, pre { background: #fff; }\n+.sidebar .block, pre, .content { border-bottom: 2px solid black; }\n+.trait { border-color: #fcae2b !important; }\n+.mod { border-color: #809fc7 !important; }\n+.enum { border-color: #93bc99 !important; }\n+.struct { border-color: #e53700 !important; }\n+.fn { border-color: #a2777f !important; }\n+\n+.block {\n+    padding: 10px;\n+    margin-bottom: 10px;\n+}\n+.block h2 { margin-top: 0; }\n+\n+.content {\n+    background: #f3f3f3;\n+    padding: 20px 20px 20px 40px;\n+}\n+.content h1 { margin-top: 0; }\n+.content h1, .content h2 { margin-left: -20px; }\n+.content pre { padding: 20px; }\n+\n+.content .highlighted {\n+    cursor: pointer;\n+    color: #000 !important;\n+    background-color: #ccc;\n+}\n+.content .highlighted a { color: #000 !important; }\n+.content .highlighted.trait { background-color: #fece7e; }\n+.content .highlighted.mod { background-color: #afc6e4; }\n+.content .highlighted.enum { background-color: #b4d1b9; }\n+.content .highlighted.struct { background-color: #e7b1a0; }\n+.content .highlighted.fn { background-color: #c6afb3; }\n+\n+.docblock.short.nowrap {\n+    display: block;\n+    overflow: hidden;\n+    white-space: nowrap;\n+    text-overflow: ellipsis;\n+}\n+.docblock.short p {\n+    overflow: hidden;\n+    text-overflow: ellipsis;\n+    margin: 0;\n+}\n+\n+.docblock h1, .docblock h2, .docblock h3, .docblock h4, .docblock h5 {\n+    margin-left: 0;\n+}\n+\n+.docblock h1 { font-size: 1.1em; }\n+.docblock h2 { font-size: 1.05em; }\n+.docblock h3, .docblock h4, .docblock h5 { font-size: 1em; }\n+\n+.content .source { float: right; }\n+.content table {\n+    border-spacing: 0 5px;\n+    border-collapse: separate;\n+}\n+.content td { vertical-align: top; }\n+.content td:first-child { padding-right: 20px; }\n+.content td p:first-child { margin-top: 0; }\n+.content td h1, .content td h2 { margin-left: 0; font-size: 1.1em; }\n+\n+.content .item-list {\n+    list-style-type: none;\n+    padding: 0;\n+}\n+\n+.content .item-list li { margin-bottom: 3px; }\n+\n+.content .multi-column {\n+    -moz-column-count: 5;\n+    -moz-column-gap: 2.5em;\n+    -webkit-column-count: 5;\n+    -webkit-column-gap: 2.5em;\n+    column-count: 5;\n+    column-gap: 2.5em;\n+}\n+.content .multi-column li { width: 100%; display: inline-block; }\n+\n+.content .method { font-size: 1em; }\n+.content .methods { margin-left: 20px; }\n+.content .methods .docblock { margin-left: 20px; }\n+\n+nav {\n+    border-bottom: 1px solid #e0e0e0;\n+    padding-bottom: 10px;\n+    margin-bottom: 10px;\n+}\n+nav.main {\n+    padding: 20px 0;\n+    text-align: center;\n+}\n+nav.main .current {\n+    border-top: 1px solid #000;\n+    border-bottom: 1px solid #000;\n+}\n+nav.main .separator {\n+    border: 1px solid #000;\n+    display: inline-block;\n+    height: 23px;\n+    margin: 0 20px;\n+}\n+nav.sum { text-align: right; }\n+nav.sub form { display: inline; }\n+\n+nav, .content {\n+    margin-left: 220px;\n+    margin-right: 20px;\n+}\n+\n+a {\n+    text-decoration: none;\n+    color: #000;\n+}\n+\n+.content a, .block a.current { font-weight: bold; }\n+\n+.content a.trait, .block a.current.trait { color: #ed9603; }\n+.content a.mod, .block a.current.mod { color: #4d76ae; }\n+.content a.enum, .block a.current.enum { color: #5e9766; }\n+.content a.struct, .block a.current.struct { color: #e53700; }\n+.content a.fn, .block a.current.fn { color: #8c6067; }\n+\n+.search-input {\n+    border: 2px solid #f2f2f2;\n+    border-radius: 2px;\n+    width: 350px;\n+}\n+.search-results .desc {\n+    white-space: nowrap;\n+    text-overflow: ellipsis;\n+    overflow: hidden;\n+    display: block;\n+}\n+\n+#help {\n+    background: #e9e9e9;\n+    border-radius: 4px;\n+    box-shadow: 0 0 6px rgba(0,0,0,.2);\n+\n+    position: absolute;\n+    top: 300px;\n+    left: 50%;\n+    margin-top: -125px;\n+    margin-left: -275px;\n+    width: 550px;\n+    height: 250px;\n+    border: 1px solid #bfbfbf;\n+}\n+\n+#help dt {\n+    float: left;\n+    border-radius: 3px;\n+    border: 1px solid #bfbfbf;\n+    background: #fff;\n+    width: 23px;\n+    text-align: center;\n+    clear: left;\n+    display: block;\n+    margin-top: -1px;\n+}\n+#help dd { margin: 5px 33px; }\n+#help .infos { padding-left: 0; }\n+#help h1 { margin-top: 0; }\n+#help div {\n+    width: 50%;\n+    float: left;\n+    padding: 20px;\n+}"}, {"sha": "b5ae3dadd77b626189b128fad99622ceab4c0a36", "filename": "src/rustdoc_ng/html/static/main.js", "status": "added", "additions": 420, "deletions": 0, "changes": 420, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc_ng%2Fhtml%2Fstatic%2Fmain.js?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -0,0 +1,420 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/*jslint browser: true, es5: true */\n+/*globals $: true, searchIndex: true, rootPath: true, allPaths: true */\n+\n+(function () {\n+    \"use strict\";\n+    var resizeTimeout, interval;\n+\n+    $('.js-only').removeClass('js-only');\n+\n+    function resizeShortBlocks() {\n+        if (resizeTimeout) {\n+            clearTimeout(resizeTimeout);\n+        }\n+        resizeTimeout = setTimeout(function () {\n+            var contentWidth = $('.content').width();\n+            $('.docblock.short').width(function () {\n+                return contentWidth - 40 - $(this).prev().width();\n+            }).addClass('nowrap');\n+        }, 150);\n+    }\n+    resizeShortBlocks();\n+    $(window).on('resize', resizeShortBlocks);\n+\n+    $(document).on('keyup', function (e) {\n+        if (document.activeElement.tagName === 'INPUT') {\n+            return;\n+        }\n+\n+        if (e.keyCode === 188 && $('#help').hasClass('hidden')) { // question mark\n+            e.preventDefault();\n+            $('#help').removeClass('hidden');\n+        } else if (e.keyCode === 27 && !$('#help').hasClass('hidden')) { // esc\n+            e.preventDefault();\n+            $('#help').addClass('hidden');\n+        } else if (e.keyCode === 83) { // S\n+            e.preventDefault();\n+            $('.search-input').focus();\n+        }\n+    }).on('click', function (e) {\n+        if (!$(e.target).closest('#help').length) {\n+            $('#help').addClass('hidden');\n+        }\n+    });\n+\n+    $('.version-selector').on('change', function () {\n+        var i, match,\n+            url = document.location.href,\n+            stripped = '',\n+            len = rootPath.match(/\\.\\.\\//g).length + 1;\n+\n+        for (i = 0; i < len; i += 1) {\n+            match = url.match(/\\/[^\\/]*$/);\n+            if (i < len - 1) {\n+                stripped = match[0] + stripped;\n+            }\n+            url = url.substring(0, url.length - match[0].length);\n+        }\n+\n+        url += '/' + $('.version-selector').val() + stripped;\n+\n+        document.location.href = url;\n+    });\n+\n+    function initSearch(searchIndex) {\n+        var currentResults, index;\n+\n+        // clear cached values from the search bar\n+        $(\".search-input\")[0].value = '';\n+\n+        function execQuery(query, max, searchWords) {\n+            var valLower = query.query.toLowerCase(),\n+                val = valLower,\n+                typeFilter = query.type,\n+                results = [],\n+                aa = 0,\n+                bb = 0;\n+\n+            // quoted values mean literal search\n+            bb = searchWords.length;\n+            if ((val.charAt(0) === \"\\\"\" || val.charAt(0) === \"'\") && val.charAt(val.length - 1) === val.charAt(0)) {\n+                val = val.substr(1, val.length - 2);\n+                for (aa = 0; aa < bb; aa += 1) {\n+                    if (searchWords[aa] === val) {\n+                        // filter type: ... queries\n+                        if (!typeFilter || typeFilter === searchIndex[aa].ty) {\n+                            results.push([aa, -1]);\n+                        }\n+                    }\n+                    if (results.length === max) {\n+                        break;\n+                    }\n+                }\n+            } else {\n+                // gather matching search results up to a certain maximum\n+                val = val.replace(/\\_/g, \"\");\n+                for (aa = 0; aa < bb; aa += 1) {\n+                    if (searchWords[aa].indexOf(val) > -1 || searchWords[aa].replace(/_/g, \"\").indexOf(val) > -1) {\n+                        // filter type: ... queries\n+                        if (!typeFilter || typeFilter === searchIndex[aa].ty) {\n+                            results.push([aa, searchWords[aa].replace(/_/g, \"\").indexOf(val)]);\n+                        }\n+                    }\n+                    if (results.length === max) {\n+                        break;\n+                    }\n+                }\n+            }\n+            bb = results.length;\n+            for (aa = 0; aa < bb; aa += 1) {\n+                results[aa].push(searchIndex[results[aa][0]].ty);\n+            }\n+            for (aa = 0; aa < bb; aa += 1) {\n+                results[aa].push(searchIndex[results[aa][0]].path);\n+            }\n+\n+            // if there are no results then return to default and fail\n+            if (results.length === 0) {\n+                return [];\n+            }\n+\n+            // sort by exact match\n+            results.sort(function search_complete_sort0(aaa, bbb) {\n+                if (searchWords[aaa[0]] === valLower && searchWords[bbb[0]] !== valLower) {\n+                    return 1;\n+                }\n+            });\n+            // first sorting attempt\n+            // sort by item name length\n+            results.sort(function search_complete_sort1(aaa, bbb) {\n+                if (searchWords[aaa[0]].length > searchWords[bbb[0]].length) {\n+                    return 1;\n+                }\n+            });\n+            // second sorting attempt\n+            // sort by item name\n+            results.sort(function search_complete_sort1(aaa, bbb) {\n+                if (searchWords[aaa[0]].length === searchWords[bbb[0]].length && searchWords[aaa[0]] > searchWords[bbb[0]]) {\n+                    return 1;\n+                }\n+            });\n+            // third sorting attempt\n+            // sort by index of keyword in item name\n+            if (results[0][1] !== -1) {\n+                results.sort(function search_complete_sort1(aaa, bbb) {\n+                    if (aaa[1] > bbb[1] && bbb[1] === 0) {\n+                        return 1;\n+                    }\n+                });\n+            }\n+            // fourth sorting attempt\n+            // sort by type\n+            results.sort(function search_complete_sort3(aaa, bbb) {\n+                if (searchWords[aaa[0]] === searchWords[bbb[0]] && aaa[2] > bbb[2]) {\n+                    return 1;\n+                }\n+            });\n+            // fifth sorting attempt\n+            // sort by path\n+            results.sort(function search_complete_sort4(aaa, bbb) {\n+                if (searchWords[aaa[0]] === searchWords[bbb[0]] && aaa[2] === bbb[2] && aaa[3] > bbb[3]) {\n+                    return 1;\n+                }\n+            });\n+            // sixth sorting attempt\n+            // remove duplicates, according to the data provided\n+            for (aa = results.length - 1; aa > 0; aa -= 1) {\n+                if (searchWords[results[aa][0]] === searchWords[results[aa - 1][0]] && results[aa][2] === results[aa - 1][2] && results[aa][3] === results[aa - 1][3]) {\n+                    results[aa][0] = -1;\n+                }\n+            }\n+\n+            return results;\n+        }\n+\n+        function getQuery() {\n+            var matches, type, query = $('.search-input').val();\n+\n+            matches = query.match(/^(fn|mod|str(uct)?|enum|trait|t(ype)?d(ef)?)\\s*:\\s*/i);\n+            if (matches) {\n+                type = matches[1].replace(/^td$/, 'typedef').replace(/^str$/, 'struct').replace(/^tdef$/, 'typedef').replace(/^typed$/, 'typedef');\n+                query = query.substring(matches[0].length);\n+            }\n+\n+            return {\n+                query: query,\n+                type: type,\n+                id: query + type,\n+            };\n+        }\n+\n+        function initSearchNav() {\n+            var hoverTimeout, $results = $('.search-results .result');\n+\n+            $results.on('click', function () {\n+                document.location.href = $(this).find('a').prop('href');\n+            }).on('mouseover', function () {\n+                var $el = $(this);\n+                clearTimeout(hoverTimeout);\n+                hoverTimeout = setTimeout(function () {\n+                    $results.removeClass('highlighted');\n+                    $el.addClass('highlighted');\n+                }, 20);\n+            });\n+\n+            $(document).off('keyup.searchnav');\n+            $(document).on('keyup.searchnav', function (e) {\n+                var $active = $results.filter('.highlighted');\n+\n+                if (e.keyCode === 38) { // up\n+                    e.preventDefault();\n+                    if (!$active.length || !$active.prev()) {\n+                        return;\n+                    }\n+\n+                    $active.prev().addClass('highlighted');\n+                    $active.removeClass('highlighted');\n+                } else if (e.keyCode === 40) { // down\n+                    e.preventDefault();\n+                    if (!$active.length) {\n+                        $results.first().addClass('highlighted');\n+                    } else if ($active.next().length) {\n+                        $active.next().addClass('highlighted');\n+                        $active.removeClass('highlighted');\n+                    }\n+                } else if (e.keyCode === 13) { // return\n+                    e.preventDefault();\n+                    if ($active.length) {\n+                        document.location.href = $active.find('a').prop('href');\n+                    }\n+                }\n+            });\n+        }\n+\n+        function showResults(results) {\n+            var output, shown, query = getQuery();\n+\n+            currentResults = query.id;\n+            output = '<h1>Results for ' + query.query + (query.type ? ' (type: ' + query.type + ')' : '') + '</h1>';\n+            output += '<table class=\"search-results\">';\n+\n+            if (results.length > 0) {\n+                shown = [];\n+\n+                results.forEach(function (item) {\n+                    var name, type;\n+\n+                    if (shown.indexOf(item) !== -1) {\n+                        return;\n+                    }\n+\n+                    shown.push(item);\n+                    name = item.name;\n+                    type = item.ty;\n+\n+                    output += '<tr class=\"' + type + ' result\"><td>';\n+\n+                    if (type === 'mod') {\n+                        output += item.path + '::<a href=\"' + rootPath + item.path.replace(/::/g, '/') + '/' + name + '/index.html\" class=\"' + type + '\">' + name + '</a>';\n+                    } else if (type === 'static' || type === 'reexport') {\n+                        output += item.path + '::<a href=\"' + rootPath + item.path.replace(/::/g, '/') + '/index.html\" class=\"' + type + '\">' + name + '</a>';\n+                    } else if (item.parent !== undefined) {\n+                        var myparent = allPaths[item.parent];\n+                        output += item.path + '::' + myparent.name + '::<a href=\"' + rootPath + item.path.replace(/::/g, '/') + '/' + myparent.type + '.' + myparent.name + '.html\" class=\"' + type + '\">' + name + '</a>';\n+                    } else {\n+                        output += item.path + '::<a href=\"' + rootPath + item.path.replace(/::/g, '/') + '/' + type + '.' + name + '.html\" class=\"' + type + '\">' + name + '</a>';\n+                    }\n+\n+                    output += '</td><td><span class=\"desc\">' + item.desc + '</span></td></tr>';\n+                });\n+            } else {\n+                output += 'No results :( <a href=\"https://duckduckgo.com/?q=' + encodeURIComponent('rust ' + query.query) + '\">Try on DuckDuckGo?</a>';\n+            }\n+\n+            output += \"</p>\";\n+            $('.content').html(output);\n+            $('.search-results .desc').width($('.content').width() - 40 - $('.content td:first-child').first().width());\n+            initSearchNav();\n+        }\n+\n+        function search(e) {\n+            var query, filterdata = [], obj, i, len,\n+                results = [],\n+                maxResults = 200,\n+                resultIndex;\n+\n+            query = getQuery();\n+            if (e) {\n+                e.preventDefault();\n+            }\n+\n+            if (!query.query || query.id === currentResults) {\n+                return;\n+            }\n+\n+            resultIndex = execQuery(query, 20000, index);\n+            len = resultIndex.length;\n+            for (i = 0; i < len; i += 1) {\n+                if (resultIndex[i][0] > -1) {\n+                    obj = searchIndex[resultIndex[i][0]];\n+                    filterdata.push([obj.name, obj.ty, obj.path, obj.desc]);\n+                    results.push(obj);\n+                }\n+                if (results.length >= maxResults) {\n+                    break;\n+                }\n+            }\n+\n+            // TODO add sorting capability through this function?\n+            //\n+            //            // the handler for the table heading filtering\n+            //            filterdraw = function search_complete_filterdraw(node) {\n+            //                var name = \"\",\n+            //                    arrow = \"\",\n+            //                    op = 0,\n+            //                    tbody = node.parentNode.parentNode.nextSibling,\n+            //                    anchora = {},\n+            //                    tra = {},\n+            //                    tha = {},\n+            //                    td1a = {},\n+            //                    td2a = {},\n+            //                    td3a = {},\n+            //                    aaa = 0,\n+            //                    bbb = 0;\n+            //\n+            //                // the 4 following conditions set the rules for each\n+            //                // table heading\n+            //                if (node === ths[0]) {\n+            //                    op = 0;\n+            //                    name = \"name\";\n+            //                    ths[1].innerHTML = ths[1].innerHTML.split(\" \")[0];\n+            //                    ths[2].innerHTML = ths[2].innerHTML.split(\" \")[0];\n+            //                    ths[3].innerHTML = ths[3].innerHTML.split(\" \")[0];\n+            //                }\n+            //                if (node === ths[1]) {\n+            //                    op = 1;\n+            //                    name = \"type\";\n+            //                    ths[0].innerHTML = ths[0].innerHTML.split(\" \")[0];\n+            //                    ths[2].innerHTML = ths[2].innerHTML.split(\" \")[0];\n+            //                    ths[3].innerHTML = ths[3].innerHTML.split(\" \")[0];\n+            //                }\n+            //                if (node === ths[2]) {\n+            //                    op = 2;\n+            //                    name = \"path\";\n+            //                    ths[0].innerHTML = ths[0].innerHTML.split(\" \")[0];\n+            //                    ths[1].innerHTML = ths[1].innerHTML.split(\" \")[0];\n+            //                    ths[3].innerHTML = ths[3].innerHTML.split(\" \")[0];\n+            //                }\n+            //                if (node === ths[3]) {\n+            //                    op = 3;\n+            //                    name = \"description\";\n+            //                    ths[0].innerHTML = ths[0].innerHTML.split(\" \")[0];\n+            //                    ths[1].innerHTML = ths[1].innerHTML.split(\" \")[0];\n+            //                    ths[2].innerHTML = ths[2].innerHTML.split(\" \")[0];\n+            //                }\n+            //\n+            //                // ascending or descending search\n+            //                arrow = node.innerHTML.split(\" \")[1];\n+            //                if (arrow === undefined || arrow === \"\\u25b2\") {\n+            //                    arrow = \"\\u25bc\";\n+            //                } else {\n+            //                    arrow = \"\\u25b2\";\n+            //                }\n+            //\n+            //                // filter the data\n+            //                filterdata.sort(function search_complete_filterDraw_sort(xx, yy) {\n+            //                    if ((arrow === \"\\u25b2\" && xx[op].toLowerCase() < yy[op].toLowerCase()) || (arrow === \"\\u25bc\" && xx[op].toLowerCase() > yy[op].toLowerCase())) {\n+            //                        return 1;\n+            //                    }\n+            //                });\n+            //            };\n+\n+            showResults(results);\n+        }\n+\n+        function buildIndex(searchIndex) {\n+            var len = searchIndex.length,\n+                i = 0,\n+                searchWords = [];\n+\n+            // before any analysis is performed lets gather the search terms to\n+            // search against apart from the rest of the data.  This is a quick\n+            // operation that is cached for the life of the page state so that\n+            // all other search operations have access to this cached data for\n+            // faster analysis operations\n+            for (i = 0; i < len; i += 1) {\n+                if (typeof searchIndex[i].name === \"string\") {\n+                    searchWords.push(searchIndex[i].name.toLowerCase());\n+                } else {\n+                    searchWords.push(\"\");\n+                }\n+            }\n+\n+            return searchWords;\n+        }\n+\n+        function startSearch() {\n+            var keyUpTimeout;\n+            $('.do-search').on('click', search);\n+            $('.search-input').on('keyup', function () {\n+                clearTimeout(keyUpTimeout);\n+                keyUpTimeout = setTimeout(search, 100);\n+            });\n+        }\n+\n+        index = buildIndex(searchIndex);\n+        startSearch();\n+    }\n+\n+    initSearch(searchIndex);\n+}());"}, {"sha": "6adf56e7985db2c74a60ecd1b3896eabb7fa048a", "filename": "src/rustdoc_ng/html/static/normalize.css", "status": "added", "additions": 396, "deletions": 0, "changes": 396, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fhtml%2Fstatic%2Fnormalize.css", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fhtml%2Fstatic%2Fnormalize.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc_ng%2Fhtml%2Fstatic%2Fnormalize.css?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -0,0 +1,396 @@\n+/*! normalize.css v2.1.2 | MIT License | git.io/normalize */\n+\n+/* ==========================================================================\n+   HTML5 display definitions\n+   ========================================================================== */\n+\n+/**\n+ * Correct `block` display not defined in IE 8/9.\n+ */\n+\n+article,\n+aside,\n+details,\n+figcaption,\n+figure,\n+footer,\n+header,\n+hgroup,\n+main,\n+nav,\n+section,\n+summary {\n+    display: block;\n+}\n+\n+/**\n+ * Correct `inline-block` display not defined in IE 8/9.\n+ */\n+\n+audio,\n+canvas,\n+video {\n+    display: inline-block;\n+}\n+\n+/**\n+ * Prevent modern browsers from displaying `audio` without controls.\n+ * Remove excess height in iOS 5 devices.\n+ */\n+\n+audio:not([controls]) {\n+    display: none;\n+    height: 0;\n+}\n+\n+/**\n+ * Address styling not present in IE 8/9.\n+ */\n+\n+[hidden] {\n+    display: none;\n+}\n+\n+/* ==========================================================================\n+   Base\n+   ========================================================================== */\n+\n+/**\n+ * 1. Set default font family to sans-serif.\n+ * 2. Prevent iOS text size adjust after orientation change, without disabling\n+ *    user zoom.\n+ */\n+\n+html {\n+    font-family: sans-serif; /* 1 */\n+    -ms-text-size-adjust: 100%; /* 2 */\n+    -webkit-text-size-adjust: 100%; /* 2 */\n+}\n+\n+/**\n+ * Remove default margin.\n+ */\n+\n+body {\n+    margin: 0;\n+}\n+\n+/* ==========================================================================\n+   Links\n+   ========================================================================== */\n+\n+/**\n+ * Address `outline` inconsistency between Chrome and other browsers.\n+ */\n+\n+a:focus {\n+    outline: thin dotted;\n+}\n+\n+/**\n+ * Improve readability when focused and also mouse hovered in all browsers.\n+ */\n+\n+a:active,\n+a:hover {\n+    outline: 0;\n+}\n+\n+/* ==========================================================================\n+   Typography\n+   ========================================================================== */\n+\n+/**\n+ * Address variable `h1` font-size and margin within `section` and `article`\n+ * contexts in Firefox 4+, Safari 5, and Chrome.\n+ */\n+\n+h1 {\n+    font-size: 2em;\n+    margin: 0.67em 0;\n+}\n+\n+/**\n+ * Address styling not present in IE 8/9, Safari 5, and Chrome.\n+ */\n+\n+abbr[title] {\n+    border-bottom: 1px dotted;\n+}\n+\n+/**\n+ * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.\n+ */\n+\n+b,\n+strong {\n+    font-weight: bold;\n+}\n+\n+/**\n+ * Address styling not present in Safari 5 and Chrome.\n+ */\n+\n+dfn {\n+    font-style: italic;\n+}\n+\n+/**\n+ * Address differences between Firefox and other browsers.\n+ */\n+\n+hr {\n+    -moz-box-sizing: content-box;\n+    box-sizing: content-box;\n+    height: 0;\n+}\n+\n+/**\n+ * Address styling not present in IE 8/9.\n+ */\n+\n+mark {\n+    background: #ff0;\n+    color: #000;\n+}\n+\n+/**\n+ * Correct font family set oddly in Safari 5 and Chrome.\n+ */\n+\n+code,\n+kbd,\n+pre,\n+samp {\n+    font-family: monospace, serif;\n+    font-size: 1em;\n+}\n+\n+/**\n+ * Improve readability of pre-formatted text in all browsers.\n+ */\n+\n+pre {\n+    white-space: pre-wrap;\n+}\n+\n+/**\n+ * Set consistent quote types.\n+ */\n+\n+q {\n+    quotes: \"\\201C\" \"\\201D\" \"\\2018\" \"\\2019\";\n+}\n+\n+/**\n+ * Address inconsistent and variable font size in all browsers.\n+ */\n+\n+small {\n+    font-size: 80%;\n+}\n+\n+/**\n+ * Prevent `sub` and `sup` affecting `line-height` in all browsers.\n+ */\n+\n+sub,\n+sup {\n+    font-size: 75%;\n+    line-height: 0;\n+    position: relative;\n+    vertical-align: baseline;\n+}\n+\n+sup {\n+    top: -0.5em;\n+}\n+\n+sub {\n+    bottom: -0.25em;\n+}\n+\n+/* ==========================================================================\n+   Embedded content\n+   ========================================================================== */\n+\n+/**\n+ * Remove border when inside `a` element in IE 8/9.\n+ */\n+\n+img {\n+    border: 0;\n+}\n+\n+/**\n+ * Correct overflow displayed oddly in IE 9.\n+ */\n+\n+svg:not(:root) {\n+    overflow: hidden;\n+}\n+\n+/* ==========================================================================\n+   Figures\n+   ========================================================================== */\n+\n+/**\n+ * Address margin not present in IE 8/9 and Safari 5.\n+ */\n+\n+figure {\n+    margin: 0;\n+}\n+\n+/* ==========================================================================\n+   Forms\n+   ========================================================================== */\n+\n+/**\n+ * Define consistent border, margin, and padding.\n+ */\n+\n+fieldset {\n+    border: 1px solid #c0c0c0;\n+    margin: 0 2px;\n+    padding: 0.35em 0.625em 0.75em;\n+}\n+\n+/**\n+ * 1. Correct `color` not being inherited in IE 8/9.\n+ * 2. Remove padding so people aren't caught out if they zero out fieldsets.\n+ */\n+\n+legend {\n+    border: 0; /* 1 */\n+    padding: 0; /* 2 */\n+}\n+\n+/**\n+ * 1. Correct font family not being inherited in all browsers.\n+ * 2. Correct font size not being inherited in all browsers.\n+ * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.\n+ */\n+\n+button,\n+input,\n+select,\n+textarea {\n+    font-family: inherit; /* 1 */\n+    font-size: 100%; /* 2 */\n+    margin: 0; /* 3 */\n+}\n+\n+/**\n+ * Address Firefox 4+ setting `line-height` on `input` using `!important` in\n+ * the UA stylesheet.\n+ */\n+\n+button,\n+input {\n+    line-height: normal;\n+}\n+\n+/**\n+ * Address inconsistent `text-transform` inheritance for `button` and `select`.\n+ * All other form control elements do not inherit `text-transform` values.\n+ * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.\n+ * Correct `select` style inheritance in Firefox 4+ and Opera.\n+ */\n+\n+button,\n+select {\n+    text-transform: none;\n+}\n+\n+/**\n+ * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`\n+ *    and `video` controls.\n+ * 2. Correct inability to style clickable `input` types in iOS.\n+ * 3. Improve usability and consistency of cursor style between image-type\n+ *    `input` and others.\n+ */\n+\n+button,\n+html input[type=\"button\"], /* 1 */\n+input[type=\"reset\"],\n+input[type=\"submit\"] {\n+    -webkit-appearance: button; /* 2 */\n+    cursor: pointer; /* 3 */\n+}\n+\n+/**\n+ * Re-set default cursor for disabled elements.\n+ */\n+\n+button[disabled],\n+html input[disabled] {\n+    cursor: default;\n+}\n+\n+/**\n+ * 1. Address box sizing set to `content-box` in IE 8/9.\n+ * 2. Remove excess padding in IE 8/9.\n+ */\n+\n+input[type=\"checkbox\"],\n+input[type=\"radio\"] {\n+    box-sizing: border-box; /* 1 */\n+    padding: 0; /* 2 */\n+}\n+\n+/**\n+ * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.\n+ * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome\n+ *    (include `-moz` to future-proof).\n+ */\n+\n+input[type=\"search\"] {\n+    -webkit-appearance: textfield; /* 1 */\n+    -moz-box-sizing: content-box;\n+    -webkit-box-sizing: content-box; /* 2 */\n+    box-sizing: content-box;\n+}\n+\n+/**\n+ * Remove inner padding and search cancel button in Safari 5 and Chrome\n+ * on OS X.\n+ */\n+\n+input[type=\"search\"]::-webkit-search-cancel-button,\n+input[type=\"search\"]::-webkit-search-decoration {\n+    -webkit-appearance: none;\n+}\n+\n+/**\n+ * Remove inner padding and border in Firefox 4+.\n+ */\n+\n+button::-moz-focus-inner,\n+input::-moz-focus-inner {\n+    border: 0;\n+    padding: 0;\n+}\n+\n+/**\n+ * 1. Remove default vertical scrollbar in IE 8/9.\n+ * 2. Improve readability and alignment in all browsers.\n+ */\n+\n+textarea {\n+    overflow: auto; /* 1 */\n+    vertical-align: top; /* 2 */\n+}\n+\n+/* ==========================================================================\n+   Tables\n+   ========================================================================== */\n+\n+/**\n+ * Remove most spacing between table cells.\n+ */\n+\n+table {\n+    border-collapse: collapse;\n+    border-spacing: 0;\n+}"}, {"sha": "e580ab0719c8effc6155ed3c2b9030cf828e46ec", "filename": "src/rustdoc_ng/passes.rs", "status": "modified", "additions": 101, "deletions": 73, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc_ng%2Fpasses.rs?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -8,19 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std;\n+use std::num;\n+use std::uint;\n+\n use clean;\n use syntax::ast;\n use clean::Item;\n use plugins;\n use fold;\n use fold::DocFolder;\n \n-/// A sample pass showing the minimum required work for a plugin.\n-pub fn noop(crate: clean::Crate) -> plugins::PluginResult {\n-    (crate, None)\n-}\n-\n /// Strip items marked `#[doc(hidden)]`\n pub fn strip_hidden(crate: clean::Crate) -> plugins::PluginResult {\n     struct Stripper;\n@@ -32,7 +29,7 @@ pub fn strip_hidden(crate: clean::Crate) -> plugins::PluginResult {\n                         for innerattr in l.iter() {\n                             match innerattr {\n                                 &clean::Word(ref s) if \"hidden\" == *s => {\n-                                    info!(\"found one in strip_hidden; removing\");\n+                                    debug!(\"found one in strip_hidden; removing\");\n                                     return None;\n                                 },\n                                 _ => (),\n@@ -50,7 +47,7 @@ pub fn strip_hidden(crate: clean::Crate) -> plugins::PluginResult {\n     (crate, None)\n }\n \n-pub fn clean_comments(crate: clean::Crate) -> plugins::PluginResult {\n+pub fn unindent_comments(crate: clean::Crate) -> plugins::PluginResult {\n     struct CommentCleaner;\n     impl fold::DocFolder for CommentCleaner {\n         fn fold_item(&mut self, i: Item) -> Option<Item> {\n@@ -59,7 +56,7 @@ pub fn clean_comments(crate: clean::Crate) -> plugins::PluginResult {\n             for attr in i.attrs.iter() {\n                 match attr {\n                     &clean::NameValue(~\"doc\", ref s) => avec.push(\n-                        clean::NameValue(~\"doc\", clean_comment_body(s.clone()))),\n+                        clean::NameValue(~\"doc\", unindent(*s))),\n                     x => avec.push(x.clone())\n                 }\n             }\n@@ -124,80 +121,111 @@ pub fn collapse_docs(crate: clean::Crate) -> plugins::PluginResult {\n     (crate, None)\n }\n \n-//Utility\n-enum CleanCommentStates {\n-    Collect,\n-    Strip,\n-    Stripped,\n-}\n-\n-/// Returns the index of the last character all strings have common in their\n-/// prefix.\n-fn longest_common_prefix(s: ~[~str]) -> uint {\n-    // find the longest common prefix\n+// n.b. this is copied from src/librustdoc/unindent_pass.rs\n+pub fn unindent(s: &str) -> ~str {\n+    let lines = s.any_line_iter().collect::<~[&str]>();\n+    let mut saw_first_line = false;\n+    let mut saw_second_line = false;\n+    let min_indent = do lines.iter().fold(uint::max_value) |min_indent, line| {\n+\n+        // After we see the first non-whitespace line, look at\n+        // the line we have. If it is not whitespace, and therefore\n+        // part of the first paragraph, then ignore the indentation\n+        // level of the first line\n+        let ignore_previous_indents =\n+            saw_first_line &&\n+            !saw_second_line &&\n+            !line.is_whitespace();\n+\n+        let min_indent = if ignore_previous_indents {\n+            uint::max_value\n+        } else {\n+            min_indent\n+        };\n \n-    debug!(\"lcp: looking into %?\", s);\n-    // index of the last character all the strings share\n-    let mut index = 0u;\n+        if saw_first_line {\n+            saw_second_line = true;\n+        }\n \n-    if s.len() <= 1 {\n-        return 0;\n+        if line.is_whitespace() {\n+            min_indent\n+        } else {\n+            saw_first_line = true;\n+            let mut spaces = 0;\n+            do line.iter().all |char| {\n+                // Only comparing against space because I wouldn't\n+                // know what to do with mixed whitespace chars\n+                if char == ' ' {\n+                    spaces += 1;\n+                    true\n+                } else {\n+                    false\n+                }\n+            };\n+            num::min(min_indent, spaces)\n+        }\n+    };\n+\n+    match lines {\n+        [head, .. tail] => {\n+            let mut unindented = ~[ head.trim() ];\n+            unindented.push_all(do tail.map |&line| {\n+                if line.is_whitespace() {\n+                    line\n+                } else {\n+                    assert!(line.len() >= min_indent);\n+                    line.slice_from(min_indent)\n+                }\n+            });\n+            unindented.connect(\"\\n\")\n+        }\n+        [] => s.to_owned()\n     }\n+}\n \n-    // whether one of the strings has been exhausted of characters yet\n-    let mut exhausted = false;\n-\n-    // character iterators for all the lines\n-    let mut lines = s.iter().filter(|x| x.len() != 0).map(|x| x.iter()).to_owned_vec();\n+#[cfg(test)]\n+mod unindent_tests {\n+    use super::unindent;\n \n-    'outer: loop {\n-        // because you can't label a while loop\n-        if exhausted == true {\n-            break;\n-        }\n-        debug!(\"lcp: index %u\", index);\n-        let mut lines = lines.mut_iter();\n-        let ch = match lines.next().unwrap().next() {\n-            Some(c) => c,\n-            None => { exhausted = true; loop },\n-        };\n-        debug!(\"looking for char %c\", ch);\n-        for line in lines {\n-            match line.next() {\n-                Some(c) => if c == ch { loop } else { exhausted = true; loop 'outer },\n-                None => { exhausted = true; loop 'outer }\n-            }\n-        }\n-        index += 1;\n+    #[test]\n+    fn should_unindent() {\n+        let s = ~\"    line1\\n    line2\";\n+        let r = unindent(s);\n+        assert_eq!(r, ~\"line1\\nline2\");\n     }\n \n-    debug!(\"lcp: last index %u\", index);\n-    index\n-}\n+    #[test]\n+    fn should_unindent_multiple_paragraphs() {\n+        let s = ~\"    line1\\n\\n    line2\";\n+        let r = unindent(s);\n+        assert_eq!(r, ~\"line1\\n\\nline2\");\n+    }\n \n-fn clean_comment_body(s: ~str) -> ~str {\n-    // FIXME #31: lots of copies in here.\n-    let lines = s.line_iter().to_owned_vec();\n-    match lines.len() {\n-        0 => return ~\"\",\n-        1 => return lines[0].slice_from(2).trim().to_owned(),\n-        _ => (),\n+    #[test]\n+    fn should_leave_multiple_indent_levels() {\n+        // Line 2 is indented another level beyond the\n+        // base indentation and should be preserved\n+        let s = ~\"    line1\\n\\n        line2\";\n+        let r = unindent(s);\n+        assert_eq!(r, ~\"line1\\n\\n    line2\");\n     }\n \n-    let mut ol = std::vec::with_capacity(lines.len());\n-    for line in lines.clone().move_iter() {\n-        // replace meaningless things with a single newline\n-        match line {\n-            x if [\"/**\", \"/*!\", \"///\", \"//!\", \"*/\"].contains(&x.trim()) => ol.push(~\"\"),\n-            x if x.trim() == \"\" => ol.push(~\"\"),\n-            x => ol.push(x.to_owned())\n-        }\n+    #[test]\n+    fn should_ignore_first_line_indent() {\n+        // Thi first line of the first paragraph may not be indented as\n+        // far due to the way the doc string was written:\n+        //\n+        // #[doc = \"Start way over here\n+        //          and continue here\"]\n+        let s = ~\"line1\\n    line2\";\n+        let r = unindent(s);\n+        assert_eq!(r, ~\"line1\\nline2\");\n     }\n-    let li = longest_common_prefix(ol.clone());\n \n-    let x = ol.iter()\n-         .filter(|x| { debug!(\"cleaning line: %s\", **x); true })\n-         .map(|x| if x.len() == 0 { ~\"\" } else { x.slice_chars(li, x.char_len()).to_owned() })\n-         .to_owned_vec().connect(\"\\n\");\n-    x.trim().to_owned()\n+    #[test]\n+    fn should_not_ignore_first_line_indent_in_a_single_line_para() {\n+        let s = ~\"line1\\n\\n    line2\";\n+        let r = unindent(s);\n+        assert_eq!(r, ~\"line1\\n\\n    line2\");\n+    }\n }"}, {"sha": "4bff60c71b73236973c4c56bb1d1633692725624", "filename": "src/rustdoc_ng/rustdoc_ng.rs", "status": "modified", "additions": 125, "deletions": 36, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Frustdoc_ng.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db78fdc10c0cf6c02005c0b8daefe9cf47aa806f/src%2Frustdoc_ng%2Frustdoc_ng.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc_ng%2Frustdoc_ng.rs?ref=db78fdc10c0cf6c02005c0b8daefe9cf47aa806f", "patch": "@@ -22,20 +22,34 @@ extern mod rustc;\n extern mod extra;\n \n use extra::serialize::Encodable;\n+use extra::time;\n use std::cell::Cell;\n+use std::rt::io;\n+use std::rt::io::Writer;\n+use std::rt::io::file::FileInfo;\n \n+pub mod clean;\n pub mod core;\n pub mod doctree;\n-pub mod clean;\n-pub mod visit_ast;\n pub mod fold;\n-pub mod plugins;\n+pub mod html {\n+    pub mod render;\n+    pub mod layout;\n+    pub mod markdown;\n+    pub mod format;\n+}\n pub mod passes;\n+pub mod plugins;\n+pub mod visit_ast;\n \n pub static SCHEMA_VERSION: &'static str = \"0.8.0\";\n \n local_data_key!(pub ctxtkey: @core::DocContext)\n \n+enum OutputFormat {\n+    HTML, JSON\n+}\n+\n pub fn main() {\n     main_args(std::os::args());\n }\n@@ -44,65 +58,132 @@ pub fn main_args(args: &[~str]) {\n     use extra::getopts::groups::*;\n \n     let opts = ~[\n-        optmulti(\"L\", \"library-path\", \"directory to add to crate search path\", \"DIR\"),\n-        optmulti(\"p\", \"plugin\", \"plugin to load and run\", \"NAME\"),\n+        optmulti(\"L\", \"library-path\", \"directory to add to crate search path\",\n+                 \"DIR\"),\n         optmulti(\"\", \"plugin-path\", \"directory to load plugins from\", \"DIR\"),\n-        // auxillary pass (defaults to hidden_strip\n-        optmulti(\"a\", \"pass\", \"auxillary pass to run\", \"NAME\"),\n-        optflag(\"n\", \"no-defult-passes\", \"do not run the default passes\"),\n+        optmulti(\"\", \"passes\", \"space separated list of passes to also run\",\n+                 \"PASSES\"),\n+        optmulti(\"\", \"plugins\", \"space separated list of plugins to also load\",\n+                 \"PLUGINS\"),\n         optflag(\"h\", \"help\", \"show this help message\"),\n+        optflag(\"\", \"nodefaults\", \"don't run the default passes\"),\n+        optopt(\"o\", \"output\", \"where to place the output\", \"PATH\"),\n     ];\n \n     let matches = getopts(args.tail(), opts).unwrap();\n \n-    if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n-        println(usage(args[0], opts));\n-        return;\n-    }\n-\n-    let libs = Cell::new(matches.opt_strs(\"L\").map(|s| Path(*s)));\n-\n-    let mut passes = if matches.opt_present(\"n\") {\n-        ~[]\n-    } else {\n-        ~[~\"collapse-docs\", ~\"clean-comments\", ~\"collapse-privacy\" ]\n+    let myusage = || {\n+        println(usage(format!(\"{} [options] [html|json] <crate>\", args[0]), opts));\n     };\n \n-    matches.opt_strs(\"a\").map(|x| passes.push(x.clone()));\n-\n-    if matches.free.len() != 1 {\n-        println(usage(args[0], opts));\n+    if matches.opt_present(\"h\") || matches.opt_present(\"help\") {\n+        myusage();\n         return;\n     }\n \n-    let cr = Cell::new(Path(matches.free[0]));\n+    let (format, cratefile) = match matches.free.clone() {\n+        [~\"json\", crate] => (JSON, crate),\n+        [~\"html\", crate] => (HTML, crate),\n+        [s, _] => {\n+            println!(\"Unknown output format: `{}`\", s);\n+            myusage();\n+            exit(1);\n+        }\n+        [_, .._] => {\n+            println!(\"Expected exactly one crate to process\");\n+            myusage();\n+            exit(1);\n+        }\n+        _ => {\n+            println!(\"Expected an output format and then one crate\");\n+            myusage();\n+            exit(1);\n+        }\n+    };\n \n+    // First, parse the crate and extract all relevant information.\n+    let libs = Cell::new(matches.opt_strs(\"L\").map(|s| Path(*s)));\n+    let cr = Cell::new(Path(cratefile));\n+    info2!(\"starting to run rustc\");\n     let crate = do std::task::try {\n         let cr = cr.take();\n         core::run_core(libs.take(), &cr)\n     }.unwrap();\n+    info2!(\"finished with rustc\");\n+\n+    // Process all of the crate attributes, extracting plugin metadata along\n+    // with the passes which we are supposed to run.\n+    let mut default_passes = !matches.opt_present(\"nodefaults\");\n+    let mut passes = matches.opt_strs(\"passes\");\n+    let mut plugins = matches.opt_strs(\"plugins\");\n+    match crate.module.get_ref().doc_list() {\n+        Some(nested) => {\n+            for inner in nested.iter() {\n+                match *inner {\n+                    clean::Word(~\"no_default_passes\") => {\n+                        default_passes = false;\n+                    }\n+                    clean::NameValue(~\"passes\", ref value) => {\n+                        for pass in value.word_iter() {\n+                            passes.push(pass.to_owned());\n+                        }\n+                    }\n+                    clean::NameValue(~\"plugins\", ref value) => {\n+                        for p in value.word_iter() {\n+                            plugins.push(p.to_owned());\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+            }\n+        }\n+        None => {}\n+    }\n+    if default_passes {\n+        passes.unshift(~\"collapse-docs\");\n+        passes.unshift(~\"unindent-comments\");\n+    }\n \n-    // { \"schema\": version, \"crate\": { parsed crate ... }, \"plugins\": { output of plugins ... }}\n-    let mut json = ~extra::treemap::TreeMap::new();\n-    json.insert(~\"schema\", extra::json::String(SCHEMA_VERSION.to_owned()));\n-\n+    // Load all plugins/passes into a PluginManager\n     let mut pm = plugins::PluginManager::new(Path(\"/tmp/rustdoc_ng/plugins\"));\n-\n     for pass in passes.iter() {\n-        pm.add_plugin(match pass.as_slice() {\n+        let plugin = match pass.as_slice() {\n             \"strip-hidden\" => passes::strip_hidden,\n-            \"clean-comments\" => passes::clean_comments,\n+            \"unindent-comments\" => passes::unindent_comments,\n             \"collapse-docs\" => passes::collapse_docs,\n             \"collapse-privacy\" => passes::collapse_privacy,\n-            s => { error!(\"unknown pass %s, skipping\", s); passes::noop },\n-        })\n+            s => { error!(\"unknown pass %s, skipping\", s); loop },\n+        };\n+        pm.add_plugin(plugin);\n     }\n-\n-    for pname in matches.opt_strs(\"p\").move_iter() {\n+    info2!(\"loading plugins...\");\n+    for pname in plugins.move_iter() {\n         pm.load_plugin(pname);\n     }\n \n+    // Run everything!\n+    info2!(\"Executing passes/plugins\");\n     let (crate, res) = pm.run_plugins(crate);\n+\n+    info2!(\"going to format\");\n+    let started = time::precise_time_ns();\n+    let output = matches.opt_str(\"o\").map(|s| Path(*s));\n+    match format {\n+        HTML => { html::render::run(crate, output.unwrap_or(Path(\"doc\"))) }\n+        JSON => { jsonify(crate, res, output.unwrap_or(Path(\"doc.json\"))) }\n+    }\n+    let ended = time::precise_time_ns();\n+    info2!(\"Took {:.03f}s\", (ended as f64 - started as f64) / 1000000000f64);\n+}\n+\n+fn jsonify(crate: clean::Crate, res: ~[plugins::PluginJson], dst: Path) {\n+    // {\n+    //   \"schema\": version,\n+    //   \"crate\": { parsed crate ... },\n+    //   \"plugins\": { output of plugins ... }\n+    // }\n+    let mut json = ~extra::treemap::TreeMap::new();\n+    json.insert(~\"schema\", extra::json::String(SCHEMA_VERSION.to_owned()));\n     let plugins_json = ~res.move_iter().filter_map(|opt| opt).collect();\n \n     // FIXME #8335: yuck, Rust -> str -> JSON round trip! No way to .encode\n@@ -118,5 +199,13 @@ pub fn main_args(args: &[~str]) {\n     json.insert(~\"crate\", crate_json);\n     json.insert(~\"plugins\", extra::json::Object(plugins_json));\n \n-    println(extra::json::Object(json).to_str());\n+    let mut file = dst.open_writer(io::Create).unwrap();\n+    let output = extra::json::Object(json).to_str();\n+    file.write(output.as_bytes());\n+}\n+\n+fn exit(status: int) -> ! {\n+    #[fixed_stack_segment]; #[inline(never)];\n+    use std::libc;\n+    unsafe { libc::exit(status as libc::c_int) }\n }"}]}