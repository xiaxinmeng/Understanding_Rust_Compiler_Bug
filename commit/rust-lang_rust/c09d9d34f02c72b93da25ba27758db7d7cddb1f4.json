{"sha": "c09d9d34f02c72b93da25ba27758db7d7cddb1f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwOWQ5ZDM0ZjAyYzcyYjkzZGEyNWJhMjc3NThkYjdkN2NkZGIxZjQ=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-02T03:12:03Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-03-06T03:41:37Z"}, "message": "Don't unnecessarily clone some fields in `Context`\n\nThere was no need to clone `id_map` because it was reset before each\nitem was rendered. `deref_id_map` was not reset, but it was keyed by\n`DefId` and thus was unlikely to have collisions (at least for now).\n\nNow we just clone the fields that need to be cloned, and instead create\nfresh versions of the others.", "tree": {"sha": "b37de07db02a7a62b1415ee89a84d87ec85a8aed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b37de07db02a7a62b1415ee89a84d87ec85a8aed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c09d9d34f02c72b93da25ba27758db7d7cddb1f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c09d9d34f02c72b93da25ba27758db7d7cddb1f4", "html_url": "https://github.com/rust-lang/rust/commit/c09d9d34f02c72b93da25ba27758db7d7cddb1f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c09d9d34f02c72b93da25ba27758db7d7cddb1f4/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff39c46959b0c6926c0199f59f65af585e131e7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff39c46959b0c6926c0199f59f65af585e131e7d", "html_url": "https://github.com/rust-lang/rust/commit/ff39c46959b0c6926c0199f59f65af585e131e7d"}], "stats": {"total": 50, "additions": 28, "deletions": 22}, "files": [{"sha": "9b0d193a0bc0310a3f972b602ec97e59d5d4dfa9", "filename": "src/librustdoc/formats/renderer.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c09d9d34f02c72b93da25ba27758db7d7cddb1f4/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d9d34f02c72b93da25ba27758db7d7cddb1f4/src%2Flibrustdoc%2Fformats%2Frenderer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Frenderer.rs?ref=c09d9d34f02c72b93da25ba27758db7d7cddb1f4", "patch": "@@ -9,7 +9,7 @@ use crate::formats::cache::Cache;\n /// Allows for different backends to rustdoc to be used with the `run_format()` function. Each\n /// backend renderer has hooks for initialization, documenting an item, entering and exiting a\n /// module, and cleanup/finalizing output.\n-crate trait FormatRenderer<'tcx>: Clone {\n+crate trait FormatRenderer<'tcx>: Sized {\n     /// Gives a description of the renderer. Used for performance profiling.\n     fn descr() -> &'static str;\n \n@@ -23,6 +23,9 @@ crate trait FormatRenderer<'tcx>: Clone {\n         tcx: TyCtxt<'tcx>,\n     ) -> Result<(Self, clean::Crate), Error>;\n \n+    /// Make a new renderer to render a child of the item currently being rendered.\n+    fn make_child_renderer(&self) -> Self;\n+\n     /// Renders a single non-module item. This means no recursive sub-item rendering is required.\n     fn item(&mut self, item: clean::Item) -> Result<(), Error>;\n \n@@ -67,7 +70,7 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n     item.name = Some(krate.name);\n \n     // Render the crate documentation\n-    let mut work = vec![(format_renderer.clone(), item)];\n+    let mut work = vec![(format_renderer.make_child_renderer(), item)];\n \n     let unknown = rustc_span::Symbol::intern(\"<unknown item>\");\n     while let Some((mut cx, item)) = work.pop() {\n@@ -87,7 +90,7 @@ crate fn run_format<'tcx, T: FormatRenderer<'tcx>>(\n             };\n             for it in module.items {\n                 debug!(\"Adding {:?} to worklist\", it.name);\n-                work.push((cx.clone(), it));\n+                work.push((cx.make_child_renderer(), it));\n             }\n \n             cx.mod_item_out(&name)?;"}, {"sha": "ccc51c243ad8b7a28760882f328616f5233f20f9", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09d9d34f02c72b93da25ba27758db7d7cddb1f4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d9d34f02c72b93da25ba27758db7d7cddb1f4/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=c09d9d34f02c72b93da25ba27758db7d7cddb1f4", "patch": "@@ -1373,10 +1373,6 @@ impl IdMap {\n         }\n     }\n \n-    crate fn reset(&mut self) {\n-        self.map = init_id_map();\n-    }\n-\n     crate fn derive<S: AsRef<str> + ToString>(&mut self, candidate: S) -> String {\n         let id = match self.map.get_mut(candidate.as_ref()) {\n             None => candidate.to_string(),"}, {"sha": "e016d2c3ab007f7003e605e80bc38a7f631f3efb", "filename": "src/librustdoc/html/markdown/tests.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c09d9d34f02c72b93da25ba27758db7d7cddb1f4/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d9d34f02c72b93da25ba27758db7d7cddb1f4/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown%2Ftests.rs?ref=c09d9d34f02c72b93da25ba27758db7d7cddb1f4", "patch": "@@ -38,15 +38,9 @@ fn test_unique_id() {\n         \"assoc_type.Item-1\",\n     ];\n \n-    let map = RefCell::new(IdMap::new());\n-    let test = || {\n-        let mut map = map.borrow_mut();\n-        let actual: Vec<String> = input.iter().map(|s| map.derive(s.to_string())).collect();\n-        assert_eq!(&actual[..], expected);\n-    };\n-    test();\n-    map.borrow_mut().reset();\n-    test();\n+    let mut map = IdMap::new();\n+    let actual: Vec<String> = input.iter().map(|s| map.derive(s.to_string())).collect();\n+    assert_eq!(&actual[..], expected);\n }\n \n #[test]"}, {"sha": "41d4aef7c7af2e48f86199e427613559e72dbc2f", "filename": "src/librustdoc/html/render/context.rs", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/c09d9d34f02c72b93da25ba27758db7d7cddb1f4/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d9d34f02c72b93da25ba27758db7d7cddb1f4/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcontext.rs?ref=c09d9d34f02c72b93da25ba27758db7d7cddb1f4", "patch": "@@ -40,7 +40,6 @@ use crate::html::{layout, sources};\n /// It is intended that this context is a lightweight object which can be fairly\n /// easily cloned because it is cloned per work-job (about once per item in the\n /// rustdoc tree).\n-#[derive(Clone)]\n crate struct Context<'tcx> {\n     /// Current hierarchy of components leading down to what's currently being\n     /// rendered\n@@ -157,11 +156,6 @@ impl<'tcx> Context<'tcx> {\n             static_extra_scripts: &[],\n         };\n \n-        {\n-            self.id_map.borrow_mut().reset();\n-            self.id_map.borrow_mut().populate(&INITIAL_IDS);\n-        }\n-\n         if !self.render_redirect_pages {\n             layout::render(\n                 &self.shared.layout,\n@@ -436,6 +430,21 @@ impl<'tcx> FormatRenderer<'tcx> for Context<'tcx> {\n         Ok((cx, krate))\n     }\n \n+    fn make_child_renderer(&self) -> Self {\n+        let mut id_map = IdMap::new();\n+        id_map.populate(&INITIAL_IDS);\n+\n+        Self {\n+            current: self.current.clone(),\n+            dst: self.dst.clone(),\n+            render_redirect_pages: self.render_redirect_pages,\n+            id_map: Box::new(RefCell::new(id_map)),\n+            deref_id_map: Box::new(RefCell::new(FxHashMap::default())),\n+            shared: Rc::clone(&self.shared),\n+            cache: Rc::clone(&self.cache),\n+        }\n+    }\n+\n     fn after_krate(\n         &mut self,\n         krate: &clean::Crate,"}, {"sha": "406c57826a098d941269f4de3e4df2c6947b84b6", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c09d9d34f02c72b93da25ba27758db7d7cddb1f4/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09d9d34f02c72b93da25ba27758db7d7cddb1f4/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=c09d9d34f02c72b93da25ba27758db7d7cddb1f4", "patch": "@@ -149,6 +149,10 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n         ))\n     }\n \n+    fn make_child_renderer(&self) -> Self {\n+        self.clone()\n+    }\n+\n     /// Inserts an item into the index. This should be used rather than directly calling insert on\n     /// the hashmap because certain items (traits and types) need to have their mappings for trait\n     /// implementations filled out before they're inserted."}]}