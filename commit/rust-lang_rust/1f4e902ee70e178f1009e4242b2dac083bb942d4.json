{"sha": "1f4e902ee70e178f1009e4242b2dac083bb942d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmNGU5MDJlZTcwZTE3OGYxMDA5ZTQyNDJiMmRhYzA4M2JiOTQyZDQ=", "commit": {"author": {"name": "Caleb Zulawski", "email": "caleb.zulawski@gmail.com", "date": "2021-04-11T15:42:29Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-04-25T23:42:49Z"}, "message": "Fix saturating math docs", "tree": {"sha": "4ad3492d7f1c98d88853cf4342cb57482b57347b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ad3492d7f1c98d88853cf4342cb57482b57347b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f4e902ee70e178f1009e4242b2dac083bb942d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f4e902ee70e178f1009e4242b2dac083bb942d4", "html_url": "https://github.com/rust-lang/rust/commit/1f4e902ee70e178f1009e4242b2dac083bb942d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f4e902ee70e178f1009e4242b2dac083bb942d4/comments", "author": {"login": "calebzulawski", "id": 563826, "node_id": "MDQ6VXNlcjU2MzgyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/563826?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebzulawski", "html_url": "https://github.com/calebzulawski", "followers_url": "https://api.github.com/users/calebzulawski/followers", "following_url": "https://api.github.com/users/calebzulawski/following{/other_user}", "gists_url": "https://api.github.com/users/calebzulawski/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebzulawski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebzulawski/subscriptions", "organizations_url": "https://api.github.com/users/calebzulawski/orgs", "repos_url": "https://api.github.com/users/calebzulawski/repos", "events_url": "https://api.github.com/users/calebzulawski/events{/privacy}", "received_events_url": "https://api.github.com/users/calebzulawski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24ebae870e11ed60a83ca0acccc202387f95f25f", "url": "https://api.github.com/repos/rust-lang/rust/commits/24ebae870e11ed60a83ca0acccc202387f95f25f", "html_url": "https://github.com/rust-lang/rust/commit/24ebae870e11ed60a83ca0acccc202387f95f25f"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "e987ec4e9c9fd9269953d0b008254e779f086a32", "filename": "crates/core_simd/src/math.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1f4e902ee70e178f1009e4242b2dac083bb942d4/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f4e902ee70e178f1009e4242b2dac083bb942d4/crates%2Fcore_simd%2Fsrc%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fmath.rs?ref=1f4e902ee70e178f1009e4242b2dac083bb942d4", "patch": "@@ -1,5 +1,5 @@\n macro_rules! impl_uint_arith {\n-    ($(($name:ident, $n:ty)),+) => {\n+    ($(($name:ident, $n:ident)),+) => {\n         $( impl<const LANES: usize> $name<LANES> where Self: crate::LanesAtMost32 {\n \n             /// Lanewise saturating add.\n@@ -41,7 +41,7 @@ macro_rules! impl_uint_arith {\n }\n \n macro_rules! impl_int_arith {\n-    ($(($name:ident, $n:ty)),+) => {\n+    ($(($name:ident, $n:ident)),+) => {\n         $( impl<const LANES: usize> $name<LANES> where Self: crate::LanesAtMost32 {\n \n             /// Lanewise saturating add.\n@@ -83,13 +83,12 @@ macro_rules! impl_int_arith {\n             /// As abs(), except the MIN value becomes MAX instead of itself.\n             ///\n             /// # Examples\n+            /// ```\n             /// # use core_simd::*;\n             #[doc = concat!(\"# use core::\", stringify!($n), \"::{MIN, MAX};\")]\n-            #[doc = concat!(\"let x = \", stringify!($name), \"::splat([MIN, -2, 0, 3]);\")]\n-            /// let unsat = x.abs();\n-            /// let sat = x.saturating_abs();\n-            #[doc = concat!(\"assert_eq!(unsat, \", stringify!($name), \"::from_array([MIN, 2, 0, 3]);\")]\n-            #[doc = concat!(\"assert_eq!(sat, \", stringify!($name), \"::from_array([MAX, 2, 0, 3]));\")]\n+            #[doc = concat!(\"let x = \", stringify!($name), \"::from_array([MIN, -2, 0, 3]);\")]\n+            /// let abs = x.saturating_abs();\n+            #[doc = concat!(\"assert_eq!(abs, \", stringify!($name), \"::from_array([MAX, 2, 0, 3]));\")]\n             /// ```\n             #[inline]\n             pub fn saturating_abs(self) -> Self {\n@@ -103,12 +102,13 @@ macro_rules! impl_int_arith {\n             /// As neg(), except the MIN value becomes MAX instead of itself.\n             ///\n             /// # Examples\n+            /// ```\n             /// # use core_simd::*;\n             #[doc = concat!(\"# use core::\", stringify!($n), \"::{MIN, MAX};\")]\n-            #[doc = concat!(\"let x = \", stringify!($name), \"::splat([MIN, -2, 3, MAX]);\")]\n+            #[doc = concat!(\"let x = \", stringify!($name), \"::from_array([MIN, -2, 3, MAX]);\")]\n             /// let unsat = -x;\n             /// let sat = x.saturating_neg();\n-            #[doc = concat!(\"assert_eq!(unsat, \", stringify!($name), \"::from_array([MIN, 2, -3, MIN + 1]);\")]\n+            #[doc = concat!(\"assert_eq!(unsat, \", stringify!($name), \"::from_array([MIN, 2, -3, MIN + 1]));\")]\n             #[doc = concat!(\"assert_eq!(sat, \", stringify!($name), \"::from_array([MAX, 2, -3, MIN + 1]));\")]\n             /// ```\n             #[inline]\n@@ -121,5 +121,5 @@ macro_rules! impl_int_arith {\n \n use crate::vector::*;\n \n-impl_uint_arith! { (SimdU8, u8), (SimdU16, u16), (SimdU32, u32), (SimdU64, u64), (SimdUsize, usize) }\n-impl_int_arith! { (SimdI8, i8), (SimdI16, i16), (SimdI32, i32), (SimdI64, i64), (SimdIsize, isize) }\n+impl_uint_arith! { (SimdU8, u8), (SimdU16, u16), (SimdU32, u32), (SimdU64, u64), (SimdU128, u128), (SimdUsize, usize) }\n+impl_int_arith! { (SimdI8, i8), (SimdI16, i16), (SimdI32, i32), (SimdI64, i64), (SimdI128, i128), (SimdIsize, isize) }"}]}