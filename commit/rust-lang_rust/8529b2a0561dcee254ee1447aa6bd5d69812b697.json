{"sha": "8529b2a0561dcee254ee1447aa6bd5d69812b697", "node_id": "C_kwDOAAsO6NoAKDg1MjliMmEwNTYxZGNlZTI1NGVlMTQ0N2FhNmJkNWQ2OTgxMmI2OTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-24T12:34:09Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-24T12:34:09Z"}, "message": "Auto merge of #8163 - pmnoxx:piotr-improve-unwrap-or-default, r=Manishearth\n\nImprove `unwrap_or_else_default` when handling `unwrap_or_else(XXX::new)`\n\nchangelog:  change `unwrap_or_else_default` to work with std constructors like `Vec::new`, `HashSet::new`, `HashMap::new`.\n\nNotes:\n- Code to handle detecting those constructors is already there. I moved it out to `is_default_equivalent_call`", "tree": {"sha": "1118d2b7225a83aacd36d232982ea6b4b01fe238", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1118d2b7225a83aacd36d232982ea6b4b01fe238"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8529b2a0561dcee254ee1447aa6bd5d69812b697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8529b2a0561dcee254ee1447aa6bd5d69812b697", "html_url": "https://github.com/rust-lang/rust/commit/8529b2a0561dcee254ee1447aa6bd5d69812b697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8529b2a0561dcee254ee1447aa6bd5d69812b697/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ae40436d2218f4b9dbdf231565f2732f1511c99", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae40436d2218f4b9dbdf231565f2732f1511c99", "html_url": "https://github.com/rust-lang/rust/commit/9ae40436d2218f4b9dbdf231565f2732f1511c99"}, {"sha": "2a47dbc7a67ff691ccfddc7b01d07639215c900b", "url": "https://api.github.com/repos/rust-lang/rust/commits/2a47dbc7a67ff691ccfddc7b01d07639215c900b", "html_url": "https://github.com/rust-lang/rust/commit/2a47dbc7a67ff691ccfddc7b01d07639215c900b"}], "stats": {"total": 60, "additions": 42, "deletions": 18}, "files": [{"sha": "f3af281d6cacc289838d278b25d9d3ed144d4494", "filename": "clippy_lints/src/methods/unwrap_or_else_default.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8529b2a0561dcee254ee1447aa6bd5d69812b697/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8529b2a0561dcee254ee1447aa6bd5d69812b697/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funwrap_or_else_default.rs?ref=8529b2a0561dcee254ee1447aa6bd5d69812b697", "patch": "@@ -2,7 +2,8 @@\n \n use super::UNWRAP_OR_ELSE_DEFAULT;\n use clippy_utils::{\n-    diagnostics::span_lint_and_sugg, is_trait_item, source::snippet_with_applicability, ty::is_type_diagnostic_item,\n+    diagnostics::span_lint_and_sugg, is_default_equivalent_call, source::snippet_with_applicability,\n+    ty::is_type_diagnostic_item,\n };\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -24,7 +25,7 @@ pub(super) fn check<'tcx>(\n \n     if_chain! {\n         if is_option || is_result;\n-        if is_trait_item(cx, u_arg, sym::Default);\n+        if is_default_equivalent_call(cx, u_arg);\n         then {\n             let mut applicability = Applicability::MachineApplicable;\n "}, {"sha": "4af870d3155447c8f83437767cf58ba28e647dc7", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/8529b2a0561dcee254ee1447aa6bd5d69812b697/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8529b2a0561dcee254ee1447aa6bd5d69812b697/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=8529b2a0561dcee254ee1447aa6bd5d69812b697", "patch": "@@ -664,6 +664,22 @@ fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<\n     false\n }\n \n+/// Return true if the expr is equal to `Default::default` when evaluated.\n+pub fn is_default_equivalent_call(cx: &LateContext<'_>, repl_func: &Expr<'_>) -> bool {\n+    if_chain! {\n+        if let hir::ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n+        if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n+        if is_diag_trait_item(cx, repl_def_id, sym::Default)\n+            || is_default_equivalent_ctor(cx, repl_def_id, repl_func_qpath);\n+        then {\n+            true\n+        }\n+        else {\n+            false\n+        }\n+    }\n+}\n+\n /// Returns true if the expr is equal to `Default::default()` of it's type when evaluated.\n /// It doesn't cover all cases, for example indirect function calls (some of std\n /// functions are supported) but it is the best we have.\n@@ -686,18 +702,7 @@ pub fn is_default_equivalent(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n                 false\n             }\n         },\n-        ExprKind::Call(repl_func, _) => if_chain! {\n-            if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n-            if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n-            if is_diag_trait_item(cx, repl_def_id, sym::Default)\n-                || is_default_equivalent_ctor(cx, repl_def_id, repl_func_qpath);\n-            then {\n-                true\n-            }\n-            else {\n-                false\n-            }\n-        },\n+        ExprKind::Call(repl_func, _) => is_default_equivalent_call(cx, repl_func),\n         ExprKind::Path(qpath) => is_lang_ctor(cx, qpath, OptionNone),\n         ExprKind::AddrOf(rustc_hir::BorrowKind::Ref, _, expr) => matches!(expr.kind, ExprKind::Array([])),\n         _ => false,"}, {"sha": "c2b9bd2c881fe916b8e2f789dcf3bce7de18b1ee", "filename": "tests/ui/unwrap_or_else_default.fixed", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8529b2a0561dcee254ee1447aa6bd5d69812b697/tests%2Fui%2Funwrap_or_else_default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/8529b2a0561dcee254ee1447aa6bd5d69812b697/tests%2Fui%2Funwrap_or_else_default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or_else_default.fixed?ref=8529b2a0561dcee254ee1447aa6bd5d69812b697", "patch": "@@ -45,7 +45,7 @@ fn unwrap_or_else_default() {\n     with_enum.unwrap_or_else(Enum::A);\n \n     let with_new = Some(vec![1]);\n-    with_new.unwrap_or_else(Vec::new);\n+    with_new.unwrap_or_default();\n \n     let with_err: Result<_, ()> = Ok(vec![1]);\n     with_err.unwrap_or_else(make);\n@@ -66,6 +66,9 @@ fn unwrap_or_else_default() {\n \n     let with_default_type = Some(1);\n     with_default_type.unwrap_or_default();\n+\n+    let with_default_type: Option<Vec<u64>> = None;\n+    with_default_type.unwrap_or_default();\n }\n \n fn main() {}"}, {"sha": "d55664990aeb96f6dbbcf30869fc602538604329", "filename": "tests/ui/unwrap_or_else_default.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8529b2a0561dcee254ee1447aa6bd5d69812b697/tests%2Fui%2Funwrap_or_else_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8529b2a0561dcee254ee1447aa6bd5d69812b697/tests%2Fui%2Funwrap_or_else_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or_else_default.rs?ref=8529b2a0561dcee254ee1447aa6bd5d69812b697", "patch": "@@ -66,6 +66,9 @@ fn unwrap_or_else_default() {\n \n     let with_default_type = Some(1);\n     with_default_type.unwrap_or_else(u64::default);\n+\n+    let with_default_type: Option<Vec<u64>> = None;\n+    with_default_type.unwrap_or_else(Vec::new);\n }\n \n fn main() {}"}, {"sha": "53e31d85edfca277bab0061c7815eb5c18199c6d", "filename": "tests/ui/unwrap_or_else_default.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8529b2a0561dcee254ee1447aa6bd5d69812b697/tests%2Fui%2Funwrap_or_else_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8529b2a0561dcee254ee1447aa6bd5d69812b697/tests%2Fui%2Funwrap_or_else_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_or_else_default.stderr?ref=8529b2a0561dcee254ee1447aa6bd5d69812b697", "patch": "@@ -1,10 +1,16 @@\n+error: use of `.unwrap_or_else(..)` to construct default value\n+  --> $DIR/unwrap_or_else_default.rs:48:5\n+   |\n+LL |     with_new.unwrap_or_else(Vec::new);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `with_new.unwrap_or_default()`\n+   |\n+   = note: `-D clippy::unwrap-or-else-default` implied by `-D warnings`\n+\n error: use of `.unwrap_or_else(..)` to construct default value\n   --> $DIR/unwrap_or_else_default.rs:62:5\n    |\n LL |     with_real_default.unwrap_or_else(<HasDefaultAndDuplicate as Default>::default);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `with_real_default.unwrap_or_default()`\n-   |\n-   = note: `-D clippy::unwrap-or-else-default` implied by `-D warnings`\n \n error: use of `.unwrap_or_else(..)` to construct default value\n   --> $DIR/unwrap_or_else_default.rs:65:5\n@@ -18,5 +24,11 @@ error: use of `.unwrap_or_else(..)` to construct default value\n LL |     with_default_type.unwrap_or_else(u64::default);\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `with_default_type.unwrap_or_default()`\n \n-error: aborting due to 3 previous errors\n+error: use of `.unwrap_or_else(..)` to construct default value\n+  --> $DIR/unwrap_or_else_default.rs:71:5\n+   |\n+LL |     with_default_type.unwrap_or_else(Vec::new);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `with_default_type.unwrap_or_default()`\n+\n+error: aborting due to 5 previous errors\n "}]}