{"sha": "f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYTNmYzkwMGM5M2Q0MWQ3Y2QzODJhYTVkMWZkMTljNmZiZjQzNmQ=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-12-11T05:33:04Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-11T05:33:04Z"}, "message": "Rollup merge of #79639 - sasurau4:feature/add-long-explanation-E0212, r=GuillaumeGomez\n\nAdd long explanation for E0212\n\nHelps with #61137", "tree": {"sha": "9653a119e6f08f2c3ac1b334dffed7772bec7c19", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9653a119e6f08f2c3ac1b334dffed7772bec7c19"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf0wSRCRBK7hj4Ov3rIwAAdHIIADEhZbQrmKoRWwuG5i5TMAu/\nERtQvnYAqh5mnNacG/L7PzRe+PjOeHqv4POxNVBUEAsszeLRL1WpIn5HH0cdieix\njHuBWrH8N/qZPIlAvs0Zz8kBuhScffC0c8iQGAu/ymGcmT/Zxs2G9RAxgoBbtOoN\n16/4704DVW2RKAKazdwIuW1BlDbgY/RPBgSKQ/9Voh4mRW303dYEUkQp0UZhLge9\nFG+Hg1ykwFN2iycutm5R189dDqQekNOfqAT/z/2OOnZexcZn9f393reWzjeUyzKh\nmqEO5/iBa+9U/EnenlL4IRjwcfAHMglEpGcNZ1Sb9c1pQbGwS/7MqSZ9IiqjF5s=\n=v3AC\n-----END PGP SIGNATURE-----\n", "payload": "tree 9653a119e6f08f2c3ac1b334dffed7772bec7c19\nparent a8c19e1b48cd16075c90b7a3a69f57298c83fb34\nparent 87c621690a00c96e9f2874ba318ee46db98b7ab5\nauthor Tyler Mandry <tmandry@gmail.com> 1607664784 -0800\ncommitter GitHub <noreply@github.com> 1607664784 -0800\n\nRollup merge of #79639 - sasurau4:feature/add-long-explanation-E0212, r=GuillaumeGomez\n\nAdd long explanation for E0212\n\nHelps with #61137\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d", "html_url": "https://github.com/rust-lang/rust/commit/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8c19e1b48cd16075c90b7a3a69f57298c83fb34", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8c19e1b48cd16075c90b7a3a69f57298c83fb34", "html_url": "https://github.com/rust-lang/rust/commit/a8c19e1b48cd16075c90b7a3a69f57298c83fb34"}, {"sha": "87c621690a00c96e9f2874ba318ee46db98b7ab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/87c621690a00c96e9f2874ba318ee46db98b7ab5", "html_url": "https://github.com/rust-lang/rust/commit/87c621690a00c96e9f2874ba318ee46db98b7ab5"}], "stats": {"total": 78, "additions": 58, "deletions": 20}, "files": [{"sha": "fef6602b9ccbbc44664c343b092dafe3db417b8b", "filename": "compiler/rustc_error_codes/src/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes.rs?ref=f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d", "patch": "@@ -111,6 +111,7 @@ E0206: include_str!(\"./error_codes/E0206.md\"),\n E0207: include_str!(\"./error_codes/E0207.md\"),\n E0210: include_str!(\"./error_codes/E0210.md\"),\n E0211: include_str!(\"./error_codes/E0211.md\"),\n+E0212: include_str!(\"./error_codes/E0212.md\"),\n E0214: include_str!(\"./error_codes/E0214.md\"),\n E0220: include_str!(\"./error_codes/E0220.md\"),\n E0221: include_str!(\"./error_codes/E0221.md\"),\n@@ -503,7 +504,6 @@ E0779: include_str!(\"./error_codes/E0779.md\"),\n //  E0196, // cannot determine a type for this closure\n     E0208,\n //  E0209, // builtin traits can only be implemented on structs or enums\n-    E0212, // cannot extract an associated type from a higher-ranked trait bound\n //  E0213, // associated types are not accepted in this context\n //  E0215, // angle-bracket notation is not stable with `Fn`\n //  E0216, // parenthetical notation is only stable with `Fn`"}, {"sha": "17465414650b393f2e714f516a67e237561c18ce", "filename": "compiler/rustc_error_codes/src/error_codes/E0212.md", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0212.md", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0212.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0212.md?ref=f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d", "patch": "@@ -0,0 +1,35 @@\n+Cannot use the associated type of\n+a trait with uninferred generic parameters.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0212\n+pub trait Foo<T> {\n+    type A;\n+\n+    fn get(&self, t: T) -> Self::A;\n+}\n+\n+fn foo2<I : for<'x> Foo<&'x isize>>(\n+    field: I::A) {} // error!\n+```\n+\n+In this example, we have to instantiate `'x`, and\n+we don't know what lifetime to instantiate it with.\n+To fix this, spell out the precise lifetimes involved.\n+Example:\n+\n+```\n+pub trait Foo<T> {\n+    type A;\n+\n+    fn get(&self, t: T) -> Self::A;\n+}\n+\n+fn foo3<I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&isize>>::A) {} // ok!\n+\n+\n+fn foo4<'a, I : for<'x> Foo<&'x isize>>(\n+    x: <I as Foo<&'a isize>>::A) {} // ok!\n+```"}, {"sha": "38da1e5ea039745d57a6cfd86c604567fb162ada", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d", "patch": "@@ -359,8 +359,8 @@ impl AstConv<'tcx> for ItemCtxt<'tcx> {\n                 self.tcx().sess,\n                 span,\n                 E0212,\n-                \"cannot extract an associated type from a higher-ranked trait bound \\\n-                 in this context\"\n+                \"cannot use the associated type of a trait \\\n+                 with uninferred generic parameters\"\n             );\n \n             match self.node() {"}, {"sha": "bca69a976778275f67a5425f8ff976080e65848b", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.fixed?ref=f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d", "patch": "@@ -11,7 +11,7 @@ pub trait Foo<T> {\n \n fn foo2<I : for<'x> Foo<&'x isize>>(\n     x: <I as Foo<&isize>>::A)\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n {\n     // This case is illegal because we have to instantiate `'x`, and\n     // we don't know what region to instantiate it with."}, {"sha": "1e23dd8890b9c4bde2da09661b121554c9a2b198", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.rs?ref=f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d", "patch": "@@ -11,7 +11,7 @@ pub trait Foo<T> {\n \n fn foo2<I : for<'x> Foo<&'x isize>>(\n     x: I::A)\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n {\n     // This case is illegal because we have to instantiate `'x`, and\n     // we don't know what region to instantiate it with."}, {"sha": "989624bdd93e2dafe4d034f8b5fa7ff6024bcb92", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-fn.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-fn.stderr?ref=f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d", "patch": "@@ -1,8 +1,9 @@\n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-fn.rs:13:8\n    |\n LL |     x: I::A)\n    |        ^^^^ help: use a fully qualified path with inferred lifetimes: `<I as Foo<&isize>>::A`\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0212`."}, {"sha": "ed30d86cb5b40ee7a43dc6a462380a52ab7f93e2", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.rs?ref=f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d", "patch": "@@ -9,14 +9,14 @@ pub trait Foo<T> {\n \n struct SomeStruct<I: for<'x> Foo<&'x isize>> {\n     field: I::A\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n }\n \n enum SomeEnum<'b, I: for<'a> Foo<&'a isize>> {\n     TupleVariant(I::A),\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n     StructVariant { field: I::A },\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n     OkVariant(&'b usize),\n }\n \n@@ -33,7 +33,7 @@ struct YetAnotherStruct<'a, I: for<'x> Foo<&'x isize>> {\n struct Why<'a, 'b, 'c, 'd, 'e, 'f, 'g, 'h, 'i, 'j, 'k, 'n, 'o, 'p, 'q, 'r, 's, 't, 'u, 'v, 'w, 'x,\n     'y, 'z, 'aa, I: for<'l, 'm> Foo<&'l &'m isize>> {\n     field: I::A,\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n }\n \n pub fn main() {}"}, {"sha": "cadc3e9eab1c93646072cff314a392caabc0c30c", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-struct.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-struct.stderr?ref=f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d", "patch": "@@ -1,4 +1,4 @@\n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-struct.rs:11:12\n    |\n LL |     field: I::A\n@@ -10,7 +10,7 @@ LL | struct SomeStruct<'a, I: for<'x> Foo<&'x isize>> {\n LL |     field: <I as Foo<&'a isize>>::A\n    |\n \n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-struct.rs:16:18\n    |\n LL |     TupleVariant(I::A),\n@@ -22,7 +22,7 @@ LL | enum SomeEnum<'c, 'b, I: for<'a> Foo<&'a isize>> {\n LL |     TupleVariant(<I as Foo<&'c isize>>::A),\n    |\n \n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-struct.rs:18:28\n    |\n LL |     StructVariant { field: I::A },\n@@ -36,7 +36,7 @@ LL |\n LL |     StructVariant { field: <I as Foo<&'c isize>>::A },\n    |\n \n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-struct.rs:35:12\n    |\n LL |     field: I::A,\n@@ -51,3 +51,4 @@ LL |     field: <I as Foo<&'bb &'bb isize>>::A,\n \n error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0212`."}, {"sha": "66d8613f184ac120906e7ff0cf66e05b5c42242c", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.fixed?ref=f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d", "patch": "@@ -11,7 +11,7 @@ pub trait Foo<T> {\n \n trait SomeTrait<I : for<'x> Foo<&'x isize>> {\n     fn some_method(&self, arg: <I as Foo<&isize>>::A);\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n }\n \n trait AnotherTrait<I : for<'x> Foo<&'x isize>> {\n@@ -30,7 +30,7 @@ struct Peach<X>(std::marker::PhantomData<X>);\n \n impl<X: for<'a> Banana<'a>> Peach<X> {\n     fn mango(&self) -> <X as Banana<'_>>::Assoc {\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n         Default::default()\n     }\n }"}, {"sha": "0a1b29de19e38335dd11de6ec5395cd131103424", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.rs?ref=f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d", "patch": "@@ -11,7 +11,7 @@ pub trait Foo<T> {\n \n trait SomeTrait<I : for<'x> Foo<&'x isize>> {\n     fn some_method(&self, arg: I::A);\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n }\n \n trait AnotherTrait<I : for<'x> Foo<&'x isize>> {\n@@ -30,7 +30,7 @@ struct Peach<X>(std::marker::PhantomData<X>);\n \n impl<X: for<'a> Banana<'a>> Peach<X> {\n     fn mango(&self) -> X::Assoc {\n-    //~^ ERROR cannot extract an associated type from a higher-ranked trait bound in this context\n+    //~^ ERROR cannot use the associated type of a trait with uninferred generic parameters\n         Default::default()\n     }\n }"}, {"sha": "d457f9f8468b45f3eab18a0e4c2a8b699e345712", "filename": "src/test/ui/associated-types/associated-types-project-from-hrtb-in-trait-method.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-project-from-hrtb-in-trait-method.stderr?ref=f3a3fc900c93d41d7cd382aa5d1fd19c6fbf436d", "patch": "@@ -1,14 +1,15 @@\n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-trait-method.rs:13:32\n    |\n LL |     fn some_method(&self, arg: I::A);\n    |                                ^^^^ help: use a fully qualified path with inferred lifetimes: `<I as Foo<&isize>>::A`\n \n-error[E0212]: cannot extract an associated type from a higher-ranked trait bound in this context\n+error[E0212]: cannot use the associated type of a trait with uninferred generic parameters\n   --> $DIR/associated-types-project-from-hrtb-in-trait-method.rs:32:24\n    |\n LL |     fn mango(&self) -> X::Assoc {\n    |                        ^^^^^^^^ help: use a fully qualified path with inferred lifetimes: `<X as Banana<'_>>::Assoc`\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0212`."}]}