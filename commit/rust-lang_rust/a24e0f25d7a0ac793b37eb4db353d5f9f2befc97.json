{"sha": "a24e0f25d7a0ac793b37eb4db353d5f9f2befc97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNGUwZjI1ZDdhMGFjNzkzYjM3ZWI0ZGIzNTNkNWY5ZjJiZWZjOTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-22T13:59:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-22T13:59:20Z"}, "message": "Auto merge of #44033 - GuillaumeGomez:rollup, r=GuillaumeGomez\n\nRollup of 5 pull requests\n\n- Successful merges: #43993, #44001, #44010, #44014, #44029\n- Failed merges:", "tree": {"sha": "21ca9b7fcd85aced1461bf2c14e4b027216335ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21ca9b7fcd85aced1461bf2c14e4b027216335ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97", "html_url": "https://github.com/rust-lang/rust/commit/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1177911790def5b20f2e4bdfa8bd59df0a51f4e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1177911790def5b20f2e4bdfa8bd59df0a51f4e7", "html_url": "https://github.com/rust-lang/rust/commit/1177911790def5b20f2e4bdfa8bd59df0a51f4e7"}, {"sha": "2dfb8d73f7d29448f4b90638c95e932c839ad7a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dfb8d73f7d29448f4b90638c95e932c839ad7a4", "html_url": "https://github.com/rust-lang/rust/commit/2dfb8d73f7d29448f4b90638c95e932c839ad7a4"}], "stats": {"total": 186, "additions": 108, "deletions": 78}, "files": [{"sha": "c3a7367a2ee54d1795f46c78e32afcf06f87a8e5", "filename": "RELEASES.md", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=a24e0f25d7a0ac793b37eb4db353d5f9f2befc97", "patch": "@@ -92,7 +92,7 @@ Stabilized APIs\n Cargo\n -----\n - [Cargo API token location moved from `~/.cargo/config` to\n-  `~/cargo/credentials`.][cargo/3978]\n+  `~/.cargo/credentials`.][cargo/3978]\n - [Cargo will now build `main.rs` binaries that are in sub-directories of\n   `src/bin`.][cargo/4214] ie. Having `src/bin/server/main.rs` and\n   `src/bin/client/main.rs` generates `target/debug/server` and `target/debug/client`\n@@ -172,7 +172,6 @@ Compatibility Notes\n [`slice::sort_unstable`]: https://doc.rust-lang.org/std/primitive.slice.html#method.sort_unstable\n [`ste::from_boxed_utf8_unchecked`]: https://doc.rust-lang.org/std/str/fn.from_boxed_utf8_unchecked.html\n [`str::as_bytes_mut`]: https://doc.rust-lang.org/std/primitive.str.html#method.as_bytes_mut\n-[`str::as_bytes_mut`]: https://doc.rust-lang.org/std/primitive.str.html#method.as_bytes_mut\n [`str::from_utf8_mut`]: https://doc.rust-lang.org/std/str/fn.from_utf8_mut.html\n [`str::from_utf8_unchecked_mut`]: https://doc.rust-lang.org/std/str/fn.from_utf8_unchecked_mut.html\n [`str::get_mut`]: https://doc.rust-lang.org/std/primitive.str.html#method.get_mut\n@@ -898,6 +897,9 @@ Compatibility Notes\n * [Ctrl-Z returns from `Stdin.read()` when reading from the console on\n   Windows][38274]\n * [Clean up semantics of `self` in an import list][38313]\n+* Reimplemented lifetime elision. This change was almost entirely compatible\n+  with existing code, but it did close a number of small bugs and loopholes,\n+  as well as being more accepting in some other [cases][41105].\n \n [37057]: https://github.com/rust-lang/rust/pull/37057\n [37761]: https://github.com/rust-lang/rust/pull/37761\n@@ -932,6 +934,7 @@ Compatibility Notes\n [39048]: https://github.com/rust-lang/rust/pull/39048\n [39282]: https://github.com/rust-lang/rust/pull/39282\n [39379]: https://github.com/rust-lang/rust/pull/39379\n+[41105]: https://github.com/rust-lang/rust/issues/41105\n [`<*const T>::wrapping_offset`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_offset\n [`<*mut T>::wrapping_offset`]: https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_offset\n [`Duration::checked_add`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.checked_add"}, {"sha": "2e844ceb17831d59edd6f7481e8de525a7e54748", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=a24e0f25d7a0ac793b37eb4db353d5f9f2befc97", "patch": "@@ -73,16 +73,19 @@ The script accepts commands, flags, and arguments to determine what to do:\n \n ## Configuring rustbuild\n \n-There are currently two primary methods for configuring the rustbuild build\n-system. First, the `./configure` options serialized in `config.mk` will be\n-parsed and read. That is, if any `./configure` options are passed, they'll be\n-handled naturally.\n+There are currently two methods for configuring the rustbuild build system.\n \n-Next, rustbuild offers a TOML-based configuration system with a `config.toml`\n+First, rustbuild offers a TOML-based configuration system with a `config.toml`\n file in the same location as `config.mk`. An example of this configuration can\n-be found at `config.toml.example`, and the configuration file\n-can also be passed as `--config path/to/config.toml` if the build system is\n-being invoked manually (via the python script).\n+be found at `config.toml.example`, and the configuration file can also be passed\n+as `--config path/to/config.toml` if the build system is being invoked manually\n+(via the python script).\n+\n+Next, the `./configure` options serialized in `config.mk` will be\n+parsed and read. That is, if any `./configure` options are passed, they'll be\n+handled naturally. `./configure` should almost never be used for local\n+installations, and is primarily useful for CI. Prefer to customize behavior\n+using `config.toml`.\n \n Finally, rustbuild makes use of the [gcc-rs crate] which has [its own\n method][env-vars] of configuring C compilers and C flags via environment\n@@ -310,17 +313,18 @@ After that, each module in rustbuild should have enough documentation to keep\n you up and running. Some general areas that you may be interested in modifying\n are:\n \n-* Adding a new build tool? Take a look at `bootstrap/step.rs` for examples of\n+* Adding a new build tool? Take a look at `bootstrap/tool.rs` for examples of\n   other tools.\n * Adding a new compiler crate? Look no further! Adding crates can be done by\n   adding a new directory with `Cargo.toml` followed by configuring all\n   `Cargo.toml` files accordingly.\n-* Adding a new dependency from crates.io? We're still working on that, so hold\n-  off on that for now.\n-* Adding a new configuration option? Take a look at `bootstrap/config.rs` or\n-  perhaps `bootstrap/flags.rs` and then modify the build elsewhere to read that\n-  option.\n+* Adding a new dependency from crates.io? This should just work inside the\n+  compiler artifacts stage (everything other than libtest and libstd).\n+* Adding a new configuration option? You'll want to modify `bootstrap/flags.rs`\n+  for command line flags and then `bootstrap/config.rs` to copy the flags to the\n+  `Config` struct.\n * Adding a sanity check? Take a look at `bootstrap/sanity.rs`.\n \n-If you have any questions feel free to reach out on `#rust-internals` on IRC or\n-open an issue in the bug tracker!\n+If you have any questions feel free to reach out on `#rust-infra` on IRC or ask on\n+internals.rust-lang.org. When you encounter bugs, please file issues on the\n+rust-lang/rust issue tracker."}, {"sha": "57b92eb8f8891aa0b39e126935b71d92fda1de93", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=a24e0f25d7a0ac793b37eb4db353d5f9f2befc97", "patch": "@@ -153,20 +153,19 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         }\n \n         Categorization::Interior(ref b, mc::InteriorElement(ik)) => {\n-            match (&b.ty.sty, ik) {\n-                (&ty::TySlice(..), _) |\n-                (_, Kind::Index) => {\n-                    let mut err = struct_span_err!(bccx, move_from.span, E0508,\n-                                                   \"cannot move out of type `{}`, \\\n-                                                    a non-copy array\",\n-                                                   b.ty);\n-                    err.span_label(move_from.span, \"cannot move out of here\");\n-                    err\n-                }\n-                (_, Kind::Pattern) => {\n+            let type_name = match (&b.ty.sty, ik) {\n+                (&ty::TyArray(_, _), Kind::Index) => \"array\",\n+                (&ty::TySlice(_), _) => \"slice\",\n+                _ => {\n                     span_bug!(move_from.span, \"this path should not cause illegal move\");\n-                }\n-            }\n+                },\n+            };\n+            let mut err = struct_span_err!(bccx, move_from.span, E0508,\n+                                           \"cannot move out of type `{}`, \\\n+                                            a non-copy {}\",\n+                                           b.ty, type_name);\n+            err.span_label(move_from.span, \"cannot move out of here\");\n+            err\n         }\n \n         Categorization::Downcast(ref b, _) |"}, {"sha": "0fff833e7d83e2a9bc93f1fd07150a1a3cfe4278", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 65, "deletions": 41, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=a24e0f25d7a0ac793b37eb4db353d5f9f2befc97", "patch": "@@ -401,28 +401,29 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n ///\n /// Implementors of the `Read` trait are called 'readers'.\n ///\n-/// Readers are defined by one required method, `read()`. Each call to `read`\n+/// Readers are defined by one required method, [`read()`]. Each call to [`read()`]\n /// will attempt to pull bytes from this source into a provided buffer. A\n-/// number of other methods are implemented in terms of `read()`, giving\n+/// number of other methods are implemented in terms of [`read()`], giving\n /// implementors a number of ways to read bytes while only needing to implement\n /// a single method.\n ///\n /// Readers are intended to be composable with one another. Many implementors\n-/// throughout `std::io` take and provide types which implement the `Read`\n+/// throughout [`std::io`] take and provide types which implement the `Read`\n /// trait.\n ///\n-/// Please note that each call to `read` may involve a system call, and\n-/// therefore, using something that implements [`BufRead`][bufread], such as\n-/// [`BufReader`][bufreader], will be more efficient.\n-///\n-/// [bufread]: trait.BufRead.html\n-/// [bufreader]: struct.BufReader.html\n+/// Please note that each call to [`read()`] may involve a system call, and\n+/// therefore, using something that implements [`BufRead`], such as\n+/// [`BufReader`], will be more efficient.\n ///\n /// # Examples\n ///\n-/// [`File`][file]s implement `Read`:\n+/// [`File`]s implement `Read`:\n ///\n-/// [file]: ../fs/struct.File.html\n+/// [`read()`]: trait.Read.html#tymethod.read\n+/// [`std::io`]: ../../std/io/index.html\n+/// [`File`]: ../fs/struct.File.html\n+/// [`BufRead`]: trait.BufRead.html\n+/// [`BufReader`]: struct.BufReader.html\n ///\n /// ```\n /// use std::io;\n@@ -455,9 +456,9 @@ pub trait Read {\n     ///\n     /// This function does not provide any guarantees about whether it blocks\n     /// waiting for data, but if an object needs to block for a read but cannot\n-    /// it will typically signal this via an `Err` return value.\n+    /// it will typically signal this via an [`Err`] return value.\n     ///\n-    /// If the return value of this method is `Ok(n)`, then it must be\n+    /// If the return value of this method is [`Ok(n)`], then it must be\n     /// guaranteed that `0 <= n <= buf.len()`. A nonzero `n` value indicates\n     /// that the buffer `buf` has been filled in with `n` bytes of data from this\n     /// source. If `n` is `0`, then it can indicate one of two scenarios:\n@@ -478,14 +479,17 @@ pub trait Read {\n     /// variant will be returned. If an error is returned then it must be\n     /// guaranteed that no bytes were read.\n     ///\n-    /// An error of the `ErrorKind::Interrupted` kind is non-fatal and the read\n+    /// An error of the [`ErrorKind::Interrupted`] kind is non-fatal and the read\n     /// operation should be retried if there is nothing else to do.\n     ///\n     /// # Examples\n     ///\n-    /// [`File`][file]s implement `Read`:\n+    /// [`File`]s implement `Read`:\n     ///\n-    /// [file]: ../fs/struct.File.html\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`Ok(n)`]: ../../std/result/enum.Result.html#variant.Ok\n+    /// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n+    /// [`File`]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -511,8 +515,8 @@ pub trait Read {\n     /// buffers.\n     ///\n     /// If a `Read`er guarantees that it can work properly with uninitialized\n-    /// memory, it should call `Initializer::nop()`. See the documentation for\n-    /// `Initializer` for details.\n+    /// memory, it should call [`Initializer::nop()`]. See the documentation for\n+    /// [`Initializer`] for details.\n     ///\n     /// The behavior of this method must be independent of the state of the\n     /// `Read`er - the method only takes `&self` so that it can be used through\n@@ -523,6 +527,9 @@ pub trait Read {\n     /// This method is unsafe because a `Read`er could otherwise return a\n     /// non-zeroing `Initializer` from another `Read` type without an `unsafe`\n     /// block.\n+    ///\n+    /// [`Initializer::nop()`]: ../../std/io/struct.Initializer.html#method.nop\n+    /// [`Initializer`]: ../../std/io/struct.Initializer.html\n     #[unstable(feature = \"read_initializer\", issue = \"42788\")]\n     #[inline]\n     unsafe fn initializer(&self) -> Initializer {\n@@ -532,16 +539,16 @@ pub trait Read {\n     /// Read all bytes until EOF in this source, placing them into `buf`.\n     ///\n     /// All bytes read from this source will be appended to the specified buffer\n-    /// `buf`. This function will continuously call `read` to append more data to\n-    /// `buf` until `read` returns either `Ok(0)` or an error of\n-    /// non-`ErrorKind::Interrupted` kind.\n+    /// `buf`. This function will continuously call [`read()`] to append more data to\n+    /// `buf` until [`read()`] returns either [`Ok(0)`] or an error of\n+    /// non-[`ErrorKind::Interrupted`] kind.\n     ///\n     /// If successful, this function will return the total number of bytes read.\n     ///\n     /// # Errors\n     ///\n     /// If this function encounters an error of the kind\n-    /// `ErrorKind::Interrupted` then the error is ignored and the operation\n+    /// [`ErrorKind::Interrupted`] then the error is ignored and the operation\n     /// will continue.\n     ///\n     /// If any other read error is encountered then this function immediately\n@@ -550,9 +557,12 @@ pub trait Read {\n     ///\n     /// # Examples\n     ///\n-    /// [`File`][file]s implement `Read`:\n+    /// [`File`]s implement `Read`:\n     ///\n-    /// [file]: ../fs/struct.File.html\n+    /// [`read()`]: trait.Read.html#tymethod.read\n+    /// [`Ok(0)`]: ../../std/result/enum.Result.html#variant.Ok\n+    /// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n+    /// [`File`]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -633,11 +643,11 @@ pub trait Read {\n     /// # Errors\n     ///\n     /// If this function encounters an error of the kind\n-    /// `ErrorKind::Interrupted` then the error is ignored and the operation\n+    /// [`ErrorKind::Interrupted`] then the error is ignored and the operation\n     /// will continue.\n     ///\n     /// If this function encounters an \"end of file\" before completely filling\n-    /// the buffer, it returns an error of the kind `ErrorKind::UnexpectedEof`.\n+    /// the buffer, it returns an error of the kind [`ErrorKind::UnexpectedEof`].\n     /// The contents of `buf` are unspecified in this case.\n     ///\n     /// If any other read error is encountered then this function immediately\n@@ -649,9 +659,11 @@ pub trait Read {\n     ///\n     /// # Examples\n     ///\n-    /// [`File`][file]s implement `Read`:\n+    /// [`File`]s implement `Read`:\n     ///\n-    /// [file]: ../fs/struct.File.html\n+    /// [`File`]: ../fs/struct.File.html\n+    /// [`ErrorKind::Interrupted`]: ../../std/io/enum.ErrorKind.html#variant.Interrupted\n+    /// [`ErrorKind::UnexpectedEof`]: ../../std/io/enum.ErrorKind.html#variant.UnexpectedEof\n     ///\n     /// ```\n     /// use std::io;\n@@ -722,18 +734,24 @@ pub trait Read {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn by_ref(&mut self) -> &mut Self where Self: Sized { self }\n \n-    /// Transforms this `Read` instance to an `Iterator` over its bytes.\n+    /// Transforms this `Read` instance to an [`Iterator`] over its bytes.\n     ///\n-    /// The returned type implements `Iterator` where the `Item` is `Result<u8,\n-    /// R::Err>`.  The yielded item is `Ok` if a byte was successfully read and\n-    /// `Err` otherwise for I/O errors. EOF is mapped to returning `None` from\n+    /// The returned type implements [`Iterator`] where the `Item` is [`Result`]`<`[`u8`]`,\n+    /// R::Err>`. The yielded item is [`Ok`] if a byte was successfully read and\n+    /// [`Err`] otherwise for I/O errors. EOF is mapped to returning [`None`] from\n     /// this iterator.\n     ///\n     /// # Examples\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n     /// [file]: ../fs/struct.File.html\n+    /// [`Iterator`]: ../../std/iter/trait.Iterator.html\n+    /// [`Result`]: ../../std/result/enum.Result.html\n+    /// [`u8`]: ../../std/primitive.u8.html\n+    /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// ```\n     /// use std::io;\n@@ -754,22 +772,26 @@ pub trait Read {\n         Bytes { inner: self }\n     }\n \n-    /// Transforms this `Read` instance to an `Iterator` over `char`s.\n+    /// Transforms this `Read` instance to an [`Iterator`] over [`char`]s.\n     ///\n     /// This adaptor will attempt to interpret this reader as a UTF-8 encoded\n-    /// sequence of characters. The returned iterator will return `None` once\n+    /// sequence of characters. The returned iterator will return [`None`] once\n     /// EOF is reached for this reader. Otherwise each element yielded will be a\n-    /// `Result<char, E>` where `E` may contain information about what I/O error\n+    /// [`Result`]`<`[`char`]`, E>` where `E` may contain information about what I/O error\n     /// occurred or where decoding failed.\n     ///\n     /// Currently this adaptor will discard intermediate data read, and should\n     /// be avoided if this is not desired.\n     ///\n     /// # Examples\n     ///\n-    /// [`File`][file]s implement `Read`:\n+    /// [`File`]s implement `Read`:\n     ///\n-    /// [file]: ../fs/struct.File.html\n+    /// [`File`]: ../fs/struct.File.html\n+    /// [`Iterator`]: ../../std/iter/trait.Iterator.html\n+    /// [`Result`]: ../../std/result/enum.Result.html\n+    /// [`char`]: ../../std/primitive.char.html\n+    /// [`None`]: ../../std/option/enum.Option.html#variant.None\n     ///\n     /// ```\n     /// #![feature(io)]\n@@ -832,15 +854,17 @@ pub trait Read {\n     /// Creates an adaptor which will read at most `limit` bytes from it.\n     ///\n     /// This function returns a new instance of `Read` which will read at most\n-    /// `limit` bytes, after which it will always return EOF (`Ok(0)`). Any\n+    /// `limit` bytes, after which it will always return EOF ([`Ok(0)`]). Any\n     /// read errors will not count towards the number of bytes read and future\n-    /// calls to `read` may succeed.\n+    /// calls to [`read()`] may succeed.\n     ///\n     /// # Examples\n     ///\n-    /// [`File`][file]s implement `Read`:\n+    /// [`File`]s implement `Read`:\n     ///\n-    /// [file]: ../fs/struct.File.html\n+    /// [`File`]: ../fs/struct.File.html\n+    /// [`Ok(0)`]: ../../std/result/enum.Result.html#variant.Ok\n+    /// [`read()`]: trait.Read.html#tymethod.read\n     ///\n     /// ```\n     /// use std::io;"}, {"sha": "30cdd07b399986de54b3e7137d31833ea310717d", "filename": "src/test/compile-fail/issue-12567.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97/src%2Ftest%2Fcompile-fail%2Fissue-12567.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97/src%2Ftest%2Fcompile-fail%2Fissue-12567.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-12567.rs?ref=a24e0f25d7a0ac793b37eb4db353d5f9f2befc97", "patch": "@@ -15,12 +15,12 @@ fn match_vecs<'a, T>(l1: &'a [T], l2: &'a [T]) {\n         (&[], &[]) => println!(\"both empty\"),\n         (&[], &[hd, ..]) | (&[hd, ..], &[])\n             => println!(\"one empty\"),\n-        //~^^ ERROR: cannot move out of type `[T]`, a non-copy array\n-        //~^^^ ERROR: cannot move out of type `[T]`, a non-copy array\n+        //~^^ ERROR: cannot move out of type `[T]`, a non-copy slice\n+        //~^^^ ERROR: cannot move out of type `[T]`, a non-copy slice\n         (&[hd1, ..], &[hd2, ..])\n             => println!(\"both nonempty\"),\n-        //~^^ ERROR: cannot move out of type `[T]`, a non-copy array\n-        //~^^^ ERROR: cannot move out of type `[T]`, a non-copy array\n+        //~^^ ERROR: cannot move out of type `[T]`, a non-copy slice\n+        //~^^^ ERROR: cannot move out of type `[T]`, a non-copy slice\n     }\n }\n "}, {"sha": "796b13538b22ad9da1e3691b5b596afe20858984", "filename": "src/test/compile-fail/move-out-of-array-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97/src%2Ftest%2Fcompile-fail%2Fmove-out-of-array-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97/src%2Ftest%2Fcompile-fail%2Fmove-out-of-array-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-out-of-array-1.rs?ref=a24e0f25d7a0ac793b37eb4db353d5f9f2befc97", "patch": "@@ -24,5 +24,5 @@ fn main() {\n }\n \n fn foo(a: [D; 4], i: usize) -> D {\n-    a[i] //~ ERROR cannot move out of type `[D; 4]`\n+    a[i] //~ ERROR cannot move out of type `[D; 4]`, a non-copy array\n }"}, {"sha": "9ca9e0984e47668d2ed62315a6ad28062666b7e0", "filename": "src/test/compile-fail/move-out-of-slice-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97/src%2Ftest%2Fcompile-fail%2Fmove-out-of-slice-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24e0f25d7a0ac793b37eb4db353d5f9f2befc97/src%2Ftest%2Fcompile-fail%2Fmove-out-of-slice-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmove-out-of-slice-1.rs?ref=a24e0f25d7a0ac793b37eb4db353d5f9f2befc97", "patch": "@@ -15,7 +15,7 @@ struct A;\n fn main() {\n     let a: Box<[A]> = Box::new([A]);\n     match a {\n-        box [a] => {}, //~ ERROR cannot move out of type `[A]`\n+        box [a] => {}, //~ ERROR cannot move out of type `[A]`, a non-copy slice\n         _ => {}\n     }\n }"}]}