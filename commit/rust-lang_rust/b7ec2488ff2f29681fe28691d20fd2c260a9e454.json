{"sha": "b7ec2488ff2f29681fe28691d20fd2c260a9e454", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3ZWMyNDg4ZmYyZjI5NjgxZmUyODY5MWQyMGZkMmMyNjBhOWU0NTQ=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-05T01:37:24Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-05T23:38:27Z"}, "message": "Fix macro backtraces.\n\nIn addition add information about the macro doing the expansion, and\nmove the printing of the expansion backtrace from codemap::span_to_str\nto the diagnostic code.  The backtrace is now more verbose and\nincludes information on the macro doing the expansion, in addition to\nthe expansion site.", "tree": {"sha": "4da4f3a384640ea4cd9b93db74559a5f52f03dd8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4da4f3a384640ea4cd9b93db74559a5f52f03dd8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7ec2488ff2f29681fe28691d20fd2c260a9e454", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7ec2488ff2f29681fe28691d20fd2c260a9e454", "html_url": "https://github.com/rust-lang/rust/commit/b7ec2488ff2f29681fe28691d20fd2c260a9e454", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7ec2488ff2f29681fe28691d20fd2c260a9e454/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d855ebc510855536beee418036b405cfa05808e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d855ebc510855536beee418036b405cfa05808e", "html_url": "https://github.com/rust-lang/rust/commit/1d855ebc510855536beee418036b405cfa05808e"}], "stats": {"total": 131, "additions": 72, "deletions": 59}, "files": [{"sha": "427bac77197d5b298ac41f08c0438fbf98461ea5", "filename": "src/comp/driver/diagnostic.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b7ec2488ff2f29681fe28691d20fd2c260a9e454/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ec2488ff2f29681fe28691d20fd2c260a9e454/src%2Fcomp%2Fdriver%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fdriver%2Fdiagnostic.rs?ref=b7ec2488ff2f29681fe28691d20fd2c260a9e454", "patch": "@@ -179,6 +179,7 @@ fn emit(cmsp: option<(codemap::codemap, span)>,\n         let lines = codemap::span_to_lines(sp, cm);\n         print_diagnostic(ss, lvl, msg);\n         highlight_lines(cm, sp, lines);\n+        print_macro_backtrace(cm, sp);\n       }\n       none {\n         print_diagnostic(\"\", lvl, msg);\n@@ -241,3 +242,15 @@ fn highlight_lines(cm: codemap::codemap, sp: span,\n         io::stderr().write_str(s + \"\\n\");\n     }\n }\n+\n+fn print_macro_backtrace(cm: codemap::codemap, sp: span) {\n+    option::may (sp.expn_info) {|ei|\n+        let ss = option::maybe(\"\", ei.callie.span,\n+                               bind codemap::span_to_str(_, cm));\n+        print_diagnostic(ss, note,\n+                         #fmt(\"in expansion of #%s\", ei.callie.name));\n+        let ss = codemap::span_to_str(ei.call_site, cm);\n+        print_diagnostic(ss, note, \"expansion site\");\n+        print_macro_backtrace(cm, ei.call_site);\n+    }\n+}"}, {"sha": "07bb48b8b3e64225d658cc87f9b1f98170daa77c", "filename": "src/comp/front/core_inject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7ec2488ff2f29681fe28691d20fd2c260a9e454/src%2Fcomp%2Ffront%2Fcore_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ec2488ff2f29681fe28691d20fd2c260a9e454/src%2Fcomp%2Ffront%2Fcore_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fcore_inject.rs?ref=b7ec2488ff2f29681fe28691d20fd2c260a9e454", "patch": "@@ -24,7 +24,7 @@ fn inject_libcore_ref(sess: session,\n     fn spanned<T: copy>(x: T) -> @ast::spanned<T> {\n         ret @{node: x,\n               span: {lo: 0u, hi: 0u,\n-                     expanded_from: codemap::os_none}};\n+                     expn_info: option::none}};\n     }\n \n     let n1 = sess.next_node_id();"}, {"sha": "767a2431bd329ccd9171c558f3ac001f8df068bc", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b7ec2488ff2f29681fe28691d20fd2c260a9e454/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ec2488ff2f29681fe28691d20fd2c260a9e454/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=b7ec2488ff2f29681fe28691d20fd2c260a9e454", "patch": "@@ -7,7 +7,7 @@ fn respan<T: copy>(sp: span, t: T) -> spanned<T> {\n \n /* assuming that we're not in macro expansion */\n fn mk_sp(lo: uint, hi: uint) -> span {\n-    ret {lo: lo, hi: hi, expanded_from: codemap::os_none};\n+    ret {lo: lo, hi: hi, expn_info: none};\n }\n \n // make this a const, once the compiler supports it"}, {"sha": "7af9efe5984b0143d5ea83187143e553fe7e1ed8", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 9, "deletions": 29, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b7ec2488ff2f29681fe28691d20fd2c260a9e454/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ec2488ff2f29681fe28691d20fd2c260a9e454/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=b7ec2488ff2f29681fe28691d20fd2c260a9e454", "patch": "@@ -92,38 +92,18 @@ fn lookup_byte_pos(map: codemap, pos: uint) -> loc {\n     ret lookup_pos(map, pos, lookup);\n }\n \n-enum opt_span {\n-\n-    //hack (as opposed to option), to make `span` compile\n-    os_none,\n-    os_some(@span),\n+enum expn_info_ {\n+    expanded_from({call_site: span,\n+                   callie: {name: str, span: option<span>}})\n }\n-type span = {lo: uint, hi: uint, expanded_from: opt_span};\n+type expn_info = option<@expn_info_>;\n+type span = {lo: uint, hi: uint, expn_info: expn_info};\n \n fn span_to_str(sp: span, cm: codemap) -> str {\n-    let cur = sp;\n-    let res = \"\";\n-    // FIXME: Should probably be doing pointer comparison on filemap\n-    let prev_file = none;\n-    while true {\n-        let lo = lookup_char_pos(cm, cur.lo);\n-        let hi = lookup_char_pos(cm, cur.hi);\n-        res +=\n-            #fmt[\"%s:%u:%u: %u:%u\",\n-                 if some(lo.file.name) == prev_file {\n-                     \"-\"\n-                 } else { lo.file.name }, lo.line, lo.col, hi.line, hi.col];\n-        alt cur.expanded_from {\n-          os_none { break; }\n-          os_some(new_sp) {\n-            cur = *new_sp;\n-            prev_file = some(lo.file.name);\n-            res += \"<<\";\n-          }\n-        }\n-    }\n-\n-    ret res;\n+    let lo = lookup_char_pos(cm, sp.lo);\n+    let hi = lookup_char_pos(cm, sp.hi);\n+    ret #fmt(\"%s:%u:%u: %u:%u\", lo.file.name,\n+             lo.line, lo.col, hi.line, hi.col)\n }\n \n type file_lines = {file: filemap, lines: [uint]};"}, {"sha": "6ab1c8446cf023564636cc993a1f57220388a327", "filename": "src/comp/syntax/ext/base.rs", "status": "modified", "additions": 31, "deletions": 19, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/b7ec2488ff2f29681fe28691d20fd2c260a9e454/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ec2488ff2f29681fe28691d20fd2c260a9e454/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fbase.rs?ref=b7ec2488ff2f29681fe28691d20fd2c260a9e454", "patch": "@@ -1,12 +1,15 @@\n import core::{vec, option};\n import std::map::hashmap;\n import driver::session::session;\n-import codemap::span;\n+import codemap::{span, expn_info, expanded_from};\n import std::map::new_str_hash;\n import codemap;\n \n-type syntax_expander =\n+type syntax_expander_ =\n     fn@(ext_ctxt, span, ast::mac_arg, ast::mac_body) -> @ast::expr;\n+type syntax_expander = {\n+    expander: syntax_expander_,\n+    span: option<span>};\n type macro_def = {ident: str, ext: syntax_extension};\n type macro_definer =\n     fn@(ext_ctxt, span, ast::mac_arg, ast::mac_body) -> macro_def;\n@@ -19,27 +22,29 @@ enum syntax_extension {\n // A temporary hard-coded map of methods for expanding syntax extension\n // AST nodes into full ASTs\n fn syntax_expander_table() -> hashmap<str, syntax_extension> {\n+    fn builtin(f: syntax_expander_) -> syntax_extension\n+        {normal({expander: f, span: none})}\n     let syntax_expanders = new_str_hash::<syntax_extension>();\n-    syntax_expanders.insert(\"fmt\", normal(ext::fmt::expand_syntax_ext));\n-    syntax_expanders.insert(\"env\", normal(ext::env::expand_syntax_ext));\n+    syntax_expanders.insert(\"fmt\", builtin(ext::fmt::expand_syntax_ext));\n+    syntax_expanders.insert(\"env\", builtin(ext::env::expand_syntax_ext));\n     syntax_expanders.insert(\"macro\",\n                             macro_defining(ext::simplext::add_new_extension));\n     syntax_expanders.insert(\"concat_idents\",\n-                            normal(ext::concat_idents::expand_syntax_ext));\n+                            builtin(ext::concat_idents::expand_syntax_ext));\n     syntax_expanders.insert(\"ident_to_str\",\n-                            normal(ext::ident_to_str::expand_syntax_ext));\n+                            builtin(ext::ident_to_str::expand_syntax_ext));\n     syntax_expanders.insert(\"log_syntax\",\n-                            normal(ext::log_syntax::expand_syntax_ext));\n+                            builtin(ext::log_syntax::expand_syntax_ext));\n     syntax_expanders.insert(\"ast\",\n-                            normal(ext::qquote::expand_ast));\n+                            builtin(ext::qquote::expand_ast));\n     ret syntax_expanders;\n }\n \n iface ext_ctxt {\n     fn session() -> session;\n     fn print_backtrace();\n-    fn backtrace() -> codemap::opt_span;\n-    fn bt_push(sp: span);\n+    fn backtrace() -> expn_info;\n+    fn bt_push(ei: codemap::expn_info_);\n     fn bt_pop();\n     fn span_fatal(sp: span, msg: str) -> !;\n     fn span_err(sp: span, msg: str);\n@@ -51,20 +56,26 @@ iface ext_ctxt {\n \n fn mk_ctxt(sess: session) -> ext_ctxt {\n     type ctxt_repr = {sess: session,\n-                      mutable backtrace: codemap::opt_span};\n+                      mutable backtrace: expn_info};\n     impl of ext_ctxt for ctxt_repr {\n         fn session() -> session { self.sess }\n         fn print_backtrace() { }\n-        fn backtrace() -> codemap::opt_span { self.backtrace }\n-        fn bt_push(sp: span) {\n-            self.backtrace = codemap::os_some(\n-                @{lo: sp.lo, hi: sp.hi, expanded_from: self.backtrace});\n+        fn backtrace() -> expn_info { self.backtrace }\n+        fn bt_push(ei: codemap::expn_info_) {\n+            alt ei {\n+              expanded_from({call_site: cs, callie: callie}) {\n+                self.backtrace =\n+                    some(@expanded_from({\n+                        call_site: {lo: cs.lo, hi: cs.hi,\n+                                    expn_info: self.backtrace},\n+                        callie: callie}));\n+              }\n+            }\n         }\n         fn bt_pop() {\n             alt self.backtrace {\n-              codemap::os_some(@{expanded_from: pre, _}) {\n-                let tmp = pre;\n-                self.backtrace = tmp;\n+              some(@expanded_from({call_site: {expn_info: prev, _}, _})) {\n+                self.backtrace = prev\n               }\n               _ { self.bug(\"tried to pop without a push\"); }\n             }\n@@ -88,7 +99,8 @@ fn mk_ctxt(sess: session) -> ext_ctxt {\n         fn bug(msg: str) -> ! { self.print_backtrace(); self.sess.bug(msg); }\n         fn next_id() -> ast::node_id { ret self.sess.next_node_id(); }\n     }\n-    {sess: sess, mutable backtrace: codemap::os_none} as ext_ctxt\n+    let imp : ctxt_repr = {sess: sess, mutable backtrace: none};\n+    ret imp as ext_ctxt\n }\n \n fn expr_to_str(cx: ext_ctxt, expr: @ast::expr, error: str) -> str {"}, {"sha": "b91b794571f02421f8620d21dcc45965f6b176b2", "filename": "src/comp/syntax/ext/expand.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b7ec2488ff2f29681fe28691d20fd2c260a9e454/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ec2488ff2f29681fe28691d20fd2c260a9e454/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fexpand.rs?ref=b7ec2488ff2f29681fe28691d20fd2c260a9e454", "patch": "@@ -11,7 +11,7 @@ import syntax::ext::base::*;\n import syntax::ext::qquote::{expand_qquote,qq_helper};\n import syntax::parse::parser::parse_expr_from_source_str;\n \n-import codemap::span;\n+import codemap::{span, expanded_from};\n \n fn expand_expr(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n                e: expr_, s: span, fld: ast_fold,\n@@ -29,10 +29,12 @@ fn expand_expr(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n                     cx.span_fatal(pth.span,\n                                   #fmt[\"macro undefined: '%s'\", extname])\n                   }\n-                  some(normal(ext)) {\n-                    let expanded = ext(cx, pth.span, args, body);\n+                  some(normal({expander: exp, span: exp_sp})) {\n+                    let expanded = exp(cx, pth.span, args, body);\n \n-                    cx.bt_push(mac.span);\n+                    let info = {call_site: s,\n+                                callie: {name: extname, span: exp_sp}};\n+                    cx.bt_push(expanded_from(info));\n                     //keep going, outside-in\n                     let fully_expanded = fld.fold_expr(expanded).node;\n                     cx.bt_pop();\n@@ -53,6 +55,11 @@ fn expand_expr(exts: hashmap<str, syntax_extension>, cx: ext_ctxt,\n         };\n }\n \n+fn new_span(cx: ext_ctxt, sp: span) -> span {\n+    /* this discards information in the case of macro-defining macros */\n+    ret {lo: sp.lo, hi: sp.hi, expn_info: cx.backtrace()};\n+}\n+\n // FIXME: this is a terrible kludge to inject some macros into the default\n // compilation environment. When the macro-definition system is substantially\n // more mature, these should move from here, into a compiled part of libcore\n@@ -73,7 +80,8 @@ fn expand_crate(sess: session::session, c: @crate) -> @crate {\n     let afp = default_ast_fold();\n     let cx: ext_ctxt = mk_ctxt(sess);\n     let f_pre =\n-        {fold_expr: bind expand_expr(exts, cx, _, _, _, afp.fold_expr)\n+        {fold_expr: bind expand_expr(exts, cx, _, _, _, afp.fold_expr),\n+         new_span: bind new_span(cx, _)\n             with *afp};\n     let f = make_fold(f_pre);\n     let cm = parse_expr_from_source_str(\"<core-macros>\","}, {"sha": "6304df29e26ad03a2cbe95b7869ca6dbd2774fab", "filename": "src/comp/syntax/ext/simplext.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b7ec2488ff2f29681fe28691d20fd2c260a9e454/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7ec2488ff2f29681fe28691d20fd2c260a9e454/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fsimplext.rs?ref=b7ec2488ff2f29681fe28691d20fd2c260a9e454", "patch": "@@ -190,7 +190,7 @@ fn transcribe(cx: ext_ctxt, b: bindings, body: @expr) -> @expr {\n     fn new_id(_old: node_id, cx: ext_ctxt) -> node_id { ret cx.next_id(); }\n     fn new_span(cx: ext_ctxt, sp: span) -> span {\n         /* this discards information in the case of macro-defining macros */\n-        ret {lo: sp.lo, hi: sp.hi, expanded_from: cx.backtrace()};\n+        ret {lo: sp.lo, hi: sp.hi, expn_info: cx.backtrace()};\n     }\n     let afp = default_ast_fold();\n     let f_pre =\n@@ -202,8 +202,8 @@ fn transcribe(cx: ext_ctxt, b: bindings, body: @expr) -> @expr {\n          fold_block:\n              bind transcribe_block(cx, b, idx_path, _, _, _, afp.fold_block),\n          map_exprs: bind transcribe_exprs(cx, b, idx_path, _, _),\n-         new_id: bind new_id(_, cx),\n-         new_span: bind new_span(cx, _) with *afp};\n+         new_id: bind new_id(_, cx)\n+         with *afp};\n     let f = make_fold(f_pre);\n     let result = f.fold_expr(body);\n     ret result;\n@@ -753,7 +753,7 @@ fn add_new_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                                    \"at least one clause\")\n                }\n              },\n-         ext: normal(ext)};\n+         ext: normal({expander: ext, span: some(arg.span)})};\n \n     fn generic_extension(cx: ext_ctxt, sp: span, arg: ast::mac_arg,\n                          _body: ast::mac_body, clauses: [@clause]) -> @expr {"}]}