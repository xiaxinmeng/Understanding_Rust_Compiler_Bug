{"sha": "d4313737d819891ae0fe790febe5a0a622e1b4a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0MzEzNzM3ZDgxOTg5MWFlMGZlNzkwZmViZTVhMGE2MjJlMWI0YTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-01T13:43:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-10-01T13:43:24Z"}, "message": "Auto merge of #5978 - montrivo:needless-lifetime, r=ebroto\n\nneedless-lifetime - nested elision sites\n\nCloses #2944\n\nchangelog: fix needless-lifetime nested elision site FPs", "tree": {"sha": "baf71f47f31ed0039a92d238d9fa1e364a0eed84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/baf71f47f31ed0039a92d238d9fa1e364a0eed84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4313737d819891ae0fe790febe5a0a622e1b4a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4313737d819891ae0fe790febe5a0a622e1b4a5", "html_url": "https://github.com/rust-lang/rust/commit/d4313737d819891ae0fe790febe5a0a622e1b4a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4313737d819891ae0fe790febe5a0a622e1b4a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abce9e7c9fc0520da4556ca641cce9aee462c2fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/abce9e7c9fc0520da4556ca641cce9aee462c2fc", "html_url": "https://github.com/rust-lang/rust/commit/abce9e7c9fc0520da4556ca641cce9aee462c2fc"}, {"sha": "cb2be6f9dba0224c63180eada2d089100450391a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb2be6f9dba0224c63180eada2d089100450391a", "html_url": "https://github.com/rust-lang/rust/commit/cb2be6f9dba0224c63180eada2d089100450391a"}], "stats": {"total": 344, "additions": 251, "deletions": 93}, "files": [{"sha": "d7043e7bd8f713ce010fc84c48ef2f70fb48ace2", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 77, "deletions": 92, "changes": 169, "blob_url": "https://github.com/rust-lang/rust/blob/d4313737d819891ae0fe790febe5a0a622e1b4a5/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4313737d819891ae0fe790febe5a0a622e1b4a5/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=d4313737d819891ae0fe790febe5a0a622e1b4a5", "patch": "@@ -1,21 +1,22 @@\n+use crate::utils::paths;\n+use crate::utils::{get_trait_def_id, in_macro, span_lint, trait_ref_of_method};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{\n-    walk_fn_decl, walk_generic_param, walk_generics, walk_param_bound, walk_ty, NestedVisitorMap, Visitor,\n+    walk_fn_decl, walk_generic_param, walk_generics, walk_item, walk_param_bound, walk_poly_trait_ref, walk_ty,\n+    NestedVisitorMap, Visitor,\n };\n use rustc_hir::FnRetTy::Return;\n use rustc_hir::{\n-    BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, ImplItem, ImplItemKind, Item,\n-    ItemKind, Lifetime, LifetimeName, ParamName, QPath, TraitBoundModifier, TraitFn, TraitItem, TraitItemKind, Ty,\n-    TyKind, WhereClause, WherePredicate,\n+    BareFnTy, BodyId, FnDecl, GenericArg, GenericBound, GenericParam, GenericParamKind, Generics, ImplItem,\n+    ImplItemKind, Item, ItemKind, Lifetime, LifetimeName, ParamName, PolyTraitRef, TraitBoundModifier, TraitFn,\n+    TraitItem, TraitItemKind, Ty, TyKind, WhereClause, WherePredicate,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::map::Map;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, Symbol};\n-\n-use crate::utils::{in_macro, last_path_segment, span_lint, trait_ref_of_method};\n+use std::iter::FromIterator;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for lifetime annotations which can be removed by\n@@ -25,8 +26,11 @@ declare_clippy_lint! {\n     /// complicated, while there is nothing out of the ordinary going on. Removing\n     /// them leads to more readable code.\n     ///\n-    /// **Known problems:** Potential false negatives: we bail out if the function\n-    /// has a `where` clause where lifetimes are mentioned.\n+    /// **Known problems:**\n+    /// - We bail out if the function has a `where` clause where lifetimes\n+    /// are mentioned due to potenial false positives.\n+    /// - Lifetime bounds such as `impl Foo + 'a` and `T: 'a` must be elided with the\n+    /// placeholder notation `'_` because the fully elided notation leaves the type bound to `'static`.\n     ///\n     /// **Example:**\n     /// ```rust\n@@ -108,7 +112,7 @@ impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n }\n \n /// The lifetime of a &-reference.\n-#[derive(PartialEq, Eq, Hash, Debug)]\n+#[derive(PartialEq, Eq, Hash, Debug, Clone)]\n enum RefLt {\n     Unnamed,\n     Static,\n@@ -127,7 +131,6 @@ fn check_fn_inner<'tcx>(\n         return;\n     }\n \n-    let mut bounds_lts = Vec::new();\n     let types = generics\n         .params\n         .iter()\n@@ -156,13 +159,12 @@ fn check_fn_inner<'tcx>(\n                         if bound.name != LifetimeName::Static && !bound.is_elided() {\n                             return;\n                         }\n-                        bounds_lts.push(bound);\n                     }\n                 }\n             }\n         }\n     }\n-    if could_use_elision(cx, decl, body, &generics.params, bounds_lts) {\n+    if could_use_elision(cx, decl, body, &generics.params) {\n         span_lint(\n             cx,\n             NEEDLESS_LIFETIMES,\n@@ -181,7 +183,6 @@ fn could_use_elision<'tcx>(\n     func: &'tcx FnDecl<'_>,\n     body: Option<BodyId>,\n     named_generics: &'tcx [GenericParam<'_>],\n-    bounds_lts: Vec<&'tcx Lifetime>,\n ) -> bool {\n     // There are two scenarios where elision works:\n     // * no output references, all input references have different LT\n@@ -204,15 +205,31 @@ fn could_use_elision<'tcx>(\n     if let Return(ref ty) = func.output {\n         output_visitor.visit_ty(ty);\n     }\n+    for lt in named_generics {\n+        input_visitor.visit_generic_param(lt)\n+    }\n+\n+    if input_visitor.abort() || output_visitor.abort() {\n+        return false;\n+    }\n \n-    let input_lts = match input_visitor.into_vec() {\n-        Some(lts) => lts_from_bounds(lts, bounds_lts.into_iter()),\n-        None => return false,\n-    };\n-    let output_lts = match output_visitor.into_vec() {\n-        Some(val) => val,\n-        None => return false,\n-    };\n+    if allowed_lts\n+        .intersection(&FxHashSet::from_iter(\n+            input_visitor\n+                .nested_elision_site_lts\n+                .iter()\n+                .chain(output_visitor.nested_elision_site_lts.iter())\n+                .cloned()\n+                .filter(|v| matches!(v, RefLt::Named(_))),\n+        ))\n+        .next()\n+        .is_some()\n+    {\n+        return false;\n+    }\n+\n+    let input_lts = input_visitor.lts;\n+    let output_lts = output_visitor.lts;\n \n     if let Some(body_id) = body {\n         let mut checker = BodyLifetimeChecker {\n@@ -277,35 +294,29 @@ fn allowed_lts_from(named_generics: &[GenericParam<'_>]) -> FxHashSet<RefLt> {\n     allowed_lts\n }\n \n-fn lts_from_bounds<'a, T: Iterator<Item = &'a Lifetime>>(mut vec: Vec<RefLt>, bounds_lts: T) -> Vec<RefLt> {\n-    for lt in bounds_lts {\n-        if lt.name != LifetimeName::Static {\n-            vec.push(RefLt::Named(lt.name.ident().name));\n-        }\n-    }\n-\n-    vec\n-}\n-\n /// Number of unique lifetimes in the given vector.\n #[must_use]\n fn unique_lifetimes(lts: &[RefLt]) -> usize {\n     lts.iter().collect::<FxHashSet<_>>().len()\n }\n \n+const CLOSURE_TRAIT_BOUNDS: [&[&str]; 3] = [&paths::FN, &paths::FN_MUT, &paths::FN_ONCE];\n+\n /// A visitor usable for `rustc_front::visit::walk_ty()`.\n struct RefVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,\n     lts: Vec<RefLt>,\n-    abort: bool,\n+    nested_elision_site_lts: Vec<RefLt>,\n+    unelided_trait_object_lifetime: bool,\n }\n \n impl<'a, 'tcx> RefVisitor<'a, 'tcx> {\n     fn new(cx: &'a LateContext<'tcx>) -> Self {\n         Self {\n             cx,\n             lts: Vec::new(),\n-            abort: false,\n+            nested_elision_site_lts: Vec::new(),\n+            unelided_trait_object_lifetime: false,\n         }\n     }\n \n@@ -325,40 +336,16 @@ impl<'a, 'tcx> RefVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn into_vec(self) -> Option<Vec<RefLt>> {\n-        if self.abort {\n-            None\n-        } else {\n-            Some(self.lts)\n-        }\n+    fn all_lts(&self) -> Vec<RefLt> {\n+        self.lts\n+            .iter()\n+            .chain(self.nested_elision_site_lts.iter())\n+            .cloned()\n+            .collect::<Vec<_>>()\n     }\n \n-    fn collect_anonymous_lifetimes(&mut self, qpath: &QPath<'_>, ty: &Ty<'_>) {\n-        if let Some(ref last_path_segment) = last_path_segment(qpath).args {\n-            if !last_path_segment.parenthesized\n-                && !last_path_segment\n-                    .args\n-                    .iter()\n-                    .any(|arg| matches!(arg, GenericArg::Lifetime(_)))\n-            {\n-                let hir_id = ty.hir_id;\n-                match self.cx.qpath_res(qpath, hir_id) {\n-                    Res::Def(DefKind::TyAlias | DefKind::Struct, def_id) => {\n-                        let generics = self.cx.tcx.generics_of(def_id);\n-                        for _ in generics.params.as_slice() {\n-                            self.record(&None);\n-                        }\n-                    },\n-                    Res::Def(DefKind::Trait, def_id) => {\n-                        let trait_def = self.cx.tcx.trait_def(def_id);\n-                        for _ in &self.cx.tcx.generics_of(trait_def.def_id).params {\n-                            self.record(&None);\n-                        }\n-                    },\n-                    _ => (),\n-                }\n-            }\n-        }\n+    fn abort(&self) -> bool {\n+        self.unelided_trait_object_lifetime\n     }\n }\n \n@@ -370,30 +357,37 @@ impl<'a, 'tcx> Visitor<'tcx> for RefVisitor<'a, 'tcx> {\n         self.record(&Some(*lifetime));\n     }\n \n+    fn visit_poly_trait_ref(&mut self, poly_tref: &'tcx PolyTraitRef<'tcx>, tbm: TraitBoundModifier) {\n+        let trait_ref = &poly_tref.trait_ref;\n+        if CLOSURE_TRAIT_BOUNDS\n+            .iter()\n+            .any(|trait_path| trait_ref.trait_def_id() == get_trait_def_id(self.cx, trait_path))\n+        {\n+            let mut sub_visitor = RefVisitor::new(self.cx);\n+            sub_visitor.visit_trait_ref(trait_ref);\n+            self.nested_elision_site_lts.append(&mut sub_visitor.all_lts());\n+        } else {\n+            walk_poly_trait_ref(self, poly_tref, tbm);\n+        }\n+    }\n+\n     fn visit_ty(&mut self, ty: &'tcx Ty<'_>) {\n         match ty.kind {\n-            TyKind::Rptr(ref lt, _) if lt.is_elided() => {\n-                self.record(&None);\n-            },\n-            TyKind::Path(ref path) => {\n-                self.collect_anonymous_lifetimes(path, ty);\n-            },\n             TyKind::OpaqueDef(item, _) => {\n                 let map = self.cx.tcx.hir();\n-                if let ItemKind::OpaqueTy(ref exist_ty) = map.expect_item(item.id).kind {\n-                    for bound in exist_ty.bounds {\n-                        if let GenericBound::Outlives(_) = *bound {\n-                            self.record(&None);\n-                        }\n-                    }\n-                } else {\n-                    unreachable!()\n-                }\n+                let item = map.expect_item(item.id);\n+                walk_item(self, item);\n                 walk_ty(self, ty);\n             },\n+            TyKind::BareFn(&BareFnTy { decl, .. }) => {\n+                let mut sub_visitor = RefVisitor::new(self.cx);\n+                sub_visitor.visit_fn_decl(decl);\n+                self.nested_elision_site_lts.append(&mut sub_visitor.all_lts());\n+                return;\n+            },\n             TyKind::TraitObject(bounds, ref lt) => {\n                 if !lt.is_elided() {\n-                    self.abort = true;\n+                    self.unelided_trait_object_lifetime = true;\n                 }\n                 for bound in bounds {\n                     self.visit_poly_trait_ref(bound, TraitBoundModifier::None);\n@@ -430,16 +424,7 @@ fn has_where_lifetimes<'tcx>(cx: &LateContext<'tcx>, where_clause: &'tcx WhereCl\n                     walk_param_bound(&mut visitor, bound);\n                 }\n                 // and check that all lifetimes are allowed\n-                match visitor.into_vec() {\n-                    None => return false,\n-                    Some(lts) => {\n-                        for lt in lts {\n-                            if !allowed_lts.contains(&lt) {\n-                                return true;\n-                            }\n-                        }\n-                    },\n-                }\n+                return visitor.all_lts().iter().any(|it| !allowed_lts.contains(it));\n             },\n             WherePredicate::EqPredicate(ref pred) => {\n                 let mut visitor = RefVisitor::new(cx);"}, {"sha": "edf070aaf3bf60d0685be17848e0409bdd309fef", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d4313737d819891ae0fe790febe5a0a622e1b4a5/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4313737d819891ae0fe790febe5a0a622e1b4a5/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=d4313737d819891ae0fe790febe5a0a622e1b4a5", "patch": "@@ -42,6 +42,9 @@ pub const FILE_TYPE: [&str; 3] = [\"std\", \"fs\", \"FileType\"];\n pub const FMT_ARGUMENTS_NEW_V1: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1\"];\n pub const FMT_ARGUMENTS_NEW_V1_FORMATTED: [&str; 4] = [\"core\", \"fmt\", \"Arguments\", \"new_v1_formatted\"];\n pub const FMT_ARGUMENTV1_NEW: [&str; 4] = [\"core\", \"fmt\", \"ArgumentV1\", \"new\"];\n+pub const FN: [&str; 3] = [\"core\", \"ops\", \"Fn\"];\n+pub const FN_MUT: [&str; 3] = [\"core\", \"ops\", \"FnMut\"];\n+pub const FN_ONCE: [&str; 3] = [\"core\", \"ops\", \"FnOnce\"];\n pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_TRAIT: [&str; 3] = [\"core\", \"convert\", \"From\"];\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];"}, {"sha": "0c2d48f938fcbe516a7ab5c3b12893c36f78df02", "filename": "tests/ui/crashes/ice-2774.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4313737d819891ae0fe790febe5a0a622e1b4a5/tests%2Fui%2Fcrashes%2Fice-2774.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4313737d819891ae0fe790febe5a0a622e1b4a5/tests%2Fui%2Fcrashes%2Fice-2774.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fice-2774.stderr?ref=d4313737d819891ae0fe790febe5a0a622e1b4a5", "patch": "@@ -0,0 +1,10 @@\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/ice-2774.rs:15:1\n+   |\n+LL | pub fn add_barfoos_to_foos<'a>(bars: &HashSet<&'a Bar>) {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::needless-lifetimes` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "d68bbe78802136ab5b103f95955729e34c0ffafb", "filename": "tests/ui/crashes/needless_lifetimes_impl_trait.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4313737d819891ae0fe790febe5a0a622e1b4a5/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4313737d819891ae0fe790febe5a0a622e1b4a5/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcrashes%2Fneedless_lifetimes_impl_trait.stderr?ref=d4313737d819891ae0fe790febe5a0a622e1b4a5", "patch": "@@ -0,0 +1,14 @@\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes_impl_trait.rs:15:5\n+   |\n+LL |     fn baz<'a>(&'a self) -> impl Foo + 'a {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/needless_lifetimes_impl_trait.rs:1:9\n+   |\n+LL | #![deny(clippy::needless_lifetimes)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d482d466e44990df8f0fdcb19d4d4f6fbafc0bbf", "filename": "tests/ui/needless_lifetimes.rs", "status": "modified", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/d4313737d819891ae0fe790febe5a0a622e1b4a5/tests%2Fui%2Fneedless_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4313737d819891ae0fe790febe5a0a622e1b4a5/tests%2Fui%2Fneedless_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.rs?ref=d4313737d819891ae0fe790febe5a0a622e1b4a5", "patch": "@@ -259,4 +259,102 @@ mod issue4291 {\n     }\n }\n \n+mod issue2944 {\n+    trait Foo {}\n+    struct Bar {}\n+    struct Baz<'a> {\n+        bar: &'a Bar,\n+    }\n+\n+    impl<'a> Foo for Baz<'a> {}\n+    impl Bar {\n+        fn baz<'a>(&'a self) -> impl Foo + 'a {\n+            Baz { bar: self }\n+        }\n+    }\n+}\n+\n+mod nested_elision_sites {\n+    // issue #issue2944\n+\n+    // closure trait bounds subject to nested elision\n+    // don't lint because they refer to outer lifetimes\n+    fn trait_fn<'a>(i: &'a i32) -> impl Fn() -> &'a i32 {\n+        move || i\n+    }\n+    fn trait_fn_mut<'a>(i: &'a i32) -> impl FnMut() -> &'a i32 {\n+        move || i\n+    }\n+    fn trait_fn_once<'a>(i: &'a i32) -> impl FnOnce() -> &'a i32 {\n+        move || i\n+    }\n+\n+    // don't lint\n+    fn impl_trait_in_input_position<'a>(f: impl Fn() -> &'a i32) -> &'a i32 {\n+        f()\n+    }\n+    fn impl_trait_in_output_position<'a>(i: &'a i32) -> impl Fn() -> &'a i32 {\n+        move || i\n+    }\n+    // lint\n+    fn impl_trait_elidable_nested_named_lifetimes<'a>(i: &'a i32, f: impl for<'b> Fn(&'b i32) -> &'b i32) -> &'a i32 {\n+        f(i)\n+    }\n+    fn impl_trait_elidable_nested_anonymous_lifetimes<'a>(i: &'a i32, f: impl Fn(&i32) -> &i32) -> &'a i32 {\n+        f(i)\n+    }\n+\n+    // don't lint\n+    fn generics_not_elidable<'a, T: Fn() -> &'a i32>(f: T) -> &'a i32 {\n+        f()\n+    }\n+    // lint\n+    fn generics_elidable<'a, T: Fn(&i32) -> &i32>(i: &'a i32, f: T) -> &'a i32 {\n+        f(i)\n+    }\n+\n+    // don't lint\n+    fn where_clause_not_elidable<'a, T>(f: T) -> &'a i32\n+    where\n+        T: Fn() -> &'a i32,\n+    {\n+        f()\n+    }\n+    // lint\n+    fn where_clause_elidadable<'a, T>(i: &'a i32, f: T) -> &'a i32\n+    where\n+        T: Fn(&i32) -> &i32,\n+    {\n+        f(i)\n+    }\n+\n+    // don't lint\n+    fn pointer_fn_in_input_position<'a>(f: fn(&'a i32) -> &'a i32, i: &'a i32) -> &'a i32 {\n+        f(i)\n+    }\n+    fn pointer_fn_in_output_position<'a>(_: &'a i32) -> fn(&'a i32) -> &'a i32 {\n+        |i| i\n+    }\n+    // lint\n+    fn pointer_fn_elidable<'a>(i: &'a i32, f: fn(&i32) -> &i32) -> &'a i32 {\n+        f(i)\n+    }\n+\n+    // don't lint\n+    fn nested_fn_pointer_1<'a>(_: &'a i32) -> fn(fn(&'a i32) -> &'a i32) -> i32 {\n+        |f| 42\n+    }\n+    fn nested_fn_pointer_2<'a>(_: &'a i32) -> impl Fn(fn(&'a i32)) {\n+        |f| ()\n+    }\n+\n+    // lint\n+    fn nested_fn_pointer_3<'a>(_: &'a i32) -> fn(fn(&i32) -> &i32) -> i32 {\n+        |f| 42\n+    }\n+    fn nested_fn_pointer_4<'a>(_: &'a i32) -> impl Fn(fn(&i32)) {\n+        |f| ()\n+    }\n+}\n+\n fn main() {}"}, {"sha": "c8a2e8b81c019a22908b931687725b5f8c3b15e1", "filename": "tests/ui/needless_lifetimes.stderr", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/d4313737d819891ae0fe790febe5a0a622e1b4a5/tests%2Fui%2Fneedless_lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4313737d819891ae0fe790febe5a0a622e1b4a5/tests%2Fui%2Fneedless_lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_lifetimes.stderr?ref=d4313737d819891ae0fe790febe5a0a622e1b4a5", "patch": "@@ -102,5 +102,53 @@ error: explicit lifetimes given in parameter types where they could be elided (o\n LL |         fn needless_lt<'a>(_x: &'a u8) {}\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 17 previous errors\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:271:9\n+   |\n+LL |         fn baz<'a>(&'a self) -> impl Foo + 'a {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:300:5\n+   |\n+LL |     fn impl_trait_elidable_nested_named_lifetimes<'a>(i: &'a i32, f: impl for<'b> Fn(&'b i32) -> &'b i32) -> &'a i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:303:5\n+   |\n+LL |     fn impl_trait_elidable_nested_anonymous_lifetimes<'a>(i: &'a i32, f: impl Fn(&i32) -> &i32) -> &'a i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:312:5\n+   |\n+LL |     fn generics_elidable<'a, T: Fn(&i32) -> &i32>(i: &'a i32, f: T) -> &'a i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:324:5\n+   |\n+LL |     fn where_clause_elidadable<'a, T>(i: &'a i32, f: T) -> &'a i32\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:339:5\n+   |\n+LL |     fn pointer_fn_elidable<'a>(i: &'a i32, f: fn(&i32) -> &i32) -> &'a i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:352:5\n+   |\n+LL |     fn nested_fn_pointer_3<'a>(_: &'a i32) -> fn(fn(&i32) -> &i32) -> i32 {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: explicit lifetimes given in parameter types where they could be elided (or replaced with `'_` if needed by type declaration)\n+  --> $DIR/needless_lifetimes.rs:355:5\n+   |\n+LL |     fn nested_fn_pointer_4<'a>(_: &'a i32) -> impl Fn(fn(&i32)) {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 25 previous errors\n "}]}