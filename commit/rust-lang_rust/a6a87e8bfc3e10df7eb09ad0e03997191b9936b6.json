{"sha": "a6a87e8bfc3e10df7eb09ad0e03997191b9936b6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2YTg3ZThiZmMzZTEwZGY3ZWIwOWFkMGUwMzk5NzE5MWI5OTM2YjY=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-04-10T18:00:11Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-05-03T18:36:11Z"}, "message": "Support liveness in `rustc_peek` tests", "tree": {"sha": "1c23adb8502e57d379d763fac4d6a4d6f6414743", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c23adb8502e57d379d763fac4d6a4d6f6414743"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6a87e8bfc3e10df7eb09ad0e03997191b9936b6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6a87e8bfc3e10df7eb09ad0e03997191b9936b6", "html_url": "https://github.com/rust-lang/rust/commit/a6a87e8bfc3e10df7eb09ad0e03997191b9936b6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6a87e8bfc3e10df7eb09ad0e03997191b9936b6/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91003401c87148cc6fa41d29d72225c0a14a3a51", "url": "https://api.github.com/repos/rust-lang/rust/commits/91003401c87148cc6fa41d29d72225c0a14a3a51", "html_url": "https://github.com/rust-lang/rust/commit/91003401c87148cc6fa41d29d72225c0a14a3a51"}], "stats": {"total": 65, "additions": 51, "deletions": 14}, "files": [{"sha": "43ddc0c914c030e51f61e780ce76f0ff91bfa545", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 50, "deletions": 14, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/a6a87e8bfc3e10df7eb09ad0e03997191b9936b6/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a87e8bfc3e10df7eb09ad0e03997191b9936b6/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=a6a87e8bfc3e10df7eb09ad0e03997191b9936b6", "patch": "@@ -15,7 +15,7 @@ use crate::dataflow::MaybeMutBorrowedLocals;\n use crate::dataflow::MoveDataParamEnv;\n use crate::dataflow::{Analysis, Results, ResultsCursor};\n use crate::dataflow::{\n-    DefinitelyInitializedPlaces, MaybeInitializedPlaces, MaybeUninitializedPlaces,\n+    DefinitelyInitializedPlaces, MaybeInitializedPlaces, MaybeLiveLocals, MaybeUninitializedPlaces,\n };\n \n pub struct SanityCheck;\n@@ -36,31 +36,45 @@ impl<'tcx> MirPass<'tcx> for SanityCheck {\n         let move_data = MoveData::gather_moves(body, tcx, param_env).unwrap();\n         let mdpe = MoveDataParamEnv { move_data, param_env };\n \n-        let flow_inits = MaybeInitializedPlaces::new(tcx, body, &mdpe)\n-            .into_engine(tcx, body, def_id)\n-            .iterate_to_fixpoint();\n-        let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)\n-            .into_engine(tcx, body, def_id)\n-            .iterate_to_fixpoint();\n-        let flow_def_inits = DefinitelyInitializedPlaces::new(tcx, body, &mdpe)\n-            .into_engine(tcx, body, def_id)\n-            .iterate_to_fixpoint();\n-        let flow_mut_borrowed = MaybeMutBorrowedLocals::mut_borrows_only(tcx, body, param_env)\n-            .into_engine(tcx, body, def_id)\n-            .iterate_to_fixpoint();\n-\n         if has_rustc_mir_with(&attributes, sym::rustc_peek_maybe_init).is_some() {\n+            let flow_inits = MaybeInitializedPlaces::new(tcx, body, &mdpe)\n+                .into_engine(tcx, body, def_id)\n+                .iterate_to_fixpoint();\n+\n             sanity_check_via_rustc_peek(tcx, body, def_id, &attributes, &flow_inits);\n         }\n+\n         if has_rustc_mir_with(&attributes, sym::rustc_peek_maybe_uninit).is_some() {\n+            let flow_uninits = MaybeUninitializedPlaces::new(tcx, body, &mdpe)\n+                .into_engine(tcx, body, def_id)\n+                .iterate_to_fixpoint();\n+\n             sanity_check_via_rustc_peek(tcx, body, def_id, &attributes, &flow_uninits);\n         }\n+\n         if has_rustc_mir_with(&attributes, sym::rustc_peek_definite_init).is_some() {\n+            let flow_def_inits = DefinitelyInitializedPlaces::new(tcx, body, &mdpe)\n+                .into_engine(tcx, body, def_id)\n+                .iterate_to_fixpoint();\n+\n             sanity_check_via_rustc_peek(tcx, body, def_id, &attributes, &flow_def_inits);\n         }\n+\n         if has_rustc_mir_with(&attributes, sym::rustc_peek_indirectly_mutable).is_some() {\n+            let flow_mut_borrowed = MaybeMutBorrowedLocals::mut_borrows_only(tcx, body, param_env)\n+                .into_engine(tcx, body, def_id)\n+                .iterate_to_fixpoint();\n+\n             sanity_check_via_rustc_peek(tcx, body, def_id, &attributes, &flow_mut_borrowed);\n         }\n+\n+        if has_rustc_mir_with(&attributes, sym::rustc_peek_liveness).is_some() {\n+            let flow_liveness =\n+                MaybeLiveLocals.into_engine(tcx, body, def_id).iterate_to_fixpoint();\n+\n+            sanity_check_via_rustc_peek(tcx, body, def_id, &attributes, &flow_liveness);\n+        }\n+\n         if has_rustc_mir_with(&attributes, sym::stop_after_dataflow).is_some() {\n             tcx.sess.fatal(\"stop_after_dataflow ended compilation\");\n         }\n@@ -286,3 +300,25 @@ impl<'tcx> RustcPeekAt<'tcx> for MaybeMutBorrowedLocals<'_, 'tcx> {\n         }\n     }\n }\n+\n+impl<'tcx> RustcPeekAt<'tcx> for MaybeLiveLocals {\n+    fn peek_at(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        place: mir::Place<'tcx>,\n+        flow_state: &BitSet<Local>,\n+        call: PeekCall,\n+    ) {\n+        warn!(\"peek_at: place={:?}\", place);\n+        let local = if let Some(l) = place.as_local() {\n+            l\n+        } else {\n+            tcx.sess.span_err(call.span, \"rustc_peek: argument was not a local\");\n+            return;\n+        };\n+\n+        if !flow_state.contains(local) {\n+            tcx.sess.span_err(call.span, \"rustc_peek: bit not set\");\n+        }\n+    }\n+}"}, {"sha": "a61647bfd655f781ce5882fbec29868931386a2d", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a6a87e8bfc3e10df7eb09ad0e03997191b9936b6/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6a87e8bfc3e10df7eb09ad0e03997191b9936b6/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=a6a87e8bfc3e10df7eb09ad0e03997191b9936b6", "patch": "@@ -656,6 +656,7 @@ symbols! {\n         rustc_partition_reused,\n         rustc_peek,\n         rustc_peek_definite_init,\n+        rustc_peek_liveness,\n         rustc_peek_maybe_init,\n         rustc_peek_maybe_uninit,\n         rustc_peek_indirectly_mutable,"}]}