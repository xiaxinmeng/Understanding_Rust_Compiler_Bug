{"sha": "016e9f81573859a4601b645fd1178fdda95b2e73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNmU5ZjgxNTczODU5YTQ2MDFiNjQ1ZmQxMTc4ZmRkYTk1YjJlNzM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-05T09:38:39Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-05T09:38:39Z"}, "message": "expected found `&T` -> `T`", "tree": {"sha": "32c3d65adbeaa8db260869a65a6eb2e104f476ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/32c3d65adbeaa8db260869a65a6eb2e104f476ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/016e9f81573859a4601b645fd1178fdda95b2e73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/016e9f81573859a4601b645fd1178fdda95b2e73", "html_url": "https://github.com/rust-lang/rust/commit/016e9f81573859a4601b645fd1178fdda95b2e73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/016e9f81573859a4601b645fd1178fdda95b2e73/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "html_url": "https://github.com/rust-lang/rust/commit/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939"}], "stats": {"total": 65, "additions": 30, "deletions": 35}, "files": [{"sha": "3b564e03d9a94e91ff1fe11b78e4ff7505147402", "filename": "src/librustc_infer/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/016e9f81573859a4601b645fd1178fdda95b2e73/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016e9f81573859a4601b645fd1178fdda95b2e73/src%2Flibrustc_infer%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fcombine.rs?ref=016e9f81573859a4601b645fd1178fdda95b2e73", "patch": "@@ -112,7 +112,7 @@ impl<'infcx, 'tcx> InferCtxt<'infcx, 'tcx> {\n \n             // All other cases of inference are errors\n             (&ty::Infer(_), _) | (_, &ty::Infer(_)) => {\n-                Err(TypeError::Sorts(ty::relate::expected_found(relation, &a, &b)))\n+                Err(TypeError::Sorts(ty::relate::expected_found(relation, a, b)))\n             }\n \n             _ => ty::relate::super_relate_tys(relation, a, b),\n@@ -701,21 +701,21 @@ pub fn const_unification_error<'tcx>(\n     a_is_expected: bool,\n     (a, b): (&'tcx ty::Const<'tcx>, &'tcx ty::Const<'tcx>),\n ) -> TypeError<'tcx> {\n-    TypeError::ConstMismatch(ty::relate::expected_found_bool(a_is_expected, &a, &b))\n+    TypeError::ConstMismatch(ty::relate::expected_found_bool(a_is_expected, a, b))\n }\n \n fn int_unification_error<'tcx>(\n     a_is_expected: bool,\n     v: (ty::IntVarValue, ty::IntVarValue),\n ) -> TypeError<'tcx> {\n     let (a, b) = v;\n-    TypeError::IntMismatch(ty::relate::expected_found_bool(a_is_expected, &a, &b))\n+    TypeError::IntMismatch(ty::relate::expected_found_bool(a_is_expected, a, b))\n }\n \n fn float_unification_error<'tcx>(\n     a_is_expected: bool,\n     v: (ty::FloatVarValue, ty::FloatVarValue),\n ) -> TypeError<'tcx> {\n     let (ty::FloatVarValue(a), ty::FloatVarValue(b)) = v;\n-    TypeError::FloatMismatch(ty::relate::expected_found_bool(a_is_expected, &a, &b))\n+    TypeError::FloatMismatch(ty::relate::expected_found_bool(a_is_expected, a, b))\n }"}, {"sha": "7946a27b4d9686759dca28551903c0a7cd4256a9", "filename": "src/librustc_middle/ty/relate.rs", "status": "modified", "additions": 26, "deletions": 31, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/016e9f81573859a4601b645fd1178fdda95b2e73/src%2Flibrustc_middle%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/016e9f81573859a4601b645fd1178fdda95b2e73/src%2Flibrustc_middle%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Frelate.rs?ref=016e9f81573859a4601b645fd1178fdda95b2e73", "patch": "@@ -159,8 +159,8 @@ impl<'tcx> Relate<'tcx> for ty::FnSig<'tcx> {\n         if a.c_variadic != b.c_variadic {\n             return Err(TypeError::VariadicMismatch(expected_found(\n                 relation,\n-                &a.c_variadic,\n-                &b.c_variadic,\n+                a.c_variadic,\n+                b.c_variadic,\n             )));\n         }\n         let unsafety = relation.relate(a.unsafety, b.unsafety)?;\n@@ -200,7 +200,7 @@ impl<'tcx> Relate<'tcx> for ast::Unsafety {\n         b: ast::Unsafety,\n     ) -> RelateResult<'tcx, ast::Unsafety> {\n         if a != b {\n-            Err(TypeError::UnsafetyMismatch(expected_found(relation, &a, &b)))\n+            Err(TypeError::UnsafetyMismatch(expected_found(relation, a, b)))\n         } else {\n             Ok(a)\n         }\n@@ -213,7 +213,7 @@ impl<'tcx> Relate<'tcx> for abi::Abi {\n         a: abi::Abi,\n         b: abi::Abi,\n     ) -> RelateResult<'tcx, abi::Abi> {\n-        if a == b { Ok(a) } else { Err(TypeError::AbiMismatch(expected_found(relation, &a, &b))) }\n+        if a == b { Ok(a) } else { Err(TypeError::AbiMismatch(expected_found(relation, a, b))) }\n     }\n }\n \n@@ -226,8 +226,8 @@ impl<'tcx> Relate<'tcx> for ty::ProjectionTy<'tcx> {\n         if a.item_def_id != b.item_def_id {\n             Err(TypeError::ProjectionMismatched(expected_found(\n                 relation,\n-                &a.item_def_id,\n-                &b.item_def_id,\n+                a.item_def_id,\n+                b.item_def_id,\n             )))\n         } else {\n             let substs = relation.relate(a.substs, b.substs)?;\n@@ -245,8 +245,8 @@ impl<'tcx> Relate<'tcx> for ty::ExistentialProjection<'tcx> {\n         if a.item_def_id != b.item_def_id {\n             Err(TypeError::ProjectionMismatched(expected_found(\n                 relation,\n-                &a.item_def_id,\n-                &b.item_def_id,\n+                a.item_def_id,\n+                b.item_def_id,\n             )))\n         } else {\n             let ty = relation.relate_with_variance(ty::Invariant, a.ty, b.ty)?;\n@@ -264,7 +264,7 @@ impl<'tcx> Relate<'tcx> for ty::TraitRef<'tcx> {\n     ) -> RelateResult<'tcx, ty::TraitRef<'tcx>> {\n         // Different traits cannot be related.\n         if a.def_id != b.def_id {\n-            Err(TypeError::Traits(expected_found(relation, &a.def_id, &b.def_id)))\n+            Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))\n         } else {\n             let substs = relate_substs(relation, None, a.substs, b.substs)?;\n             Ok(ty::TraitRef { def_id: a.def_id, substs })\n@@ -280,7 +280,7 @@ impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {\n     ) -> RelateResult<'tcx, ty::ExistentialTraitRef<'tcx>> {\n         // Different traits cannot be related.\n         if a.def_id != b.def_id {\n-            Err(TypeError::Traits(expected_found(relation, &a.def_id, &b.def_id)))\n+            Err(TypeError::Traits(expected_found(relation, a.def_id, b.def_id)))\n         } else {\n             let substs = relate_substs(relation, None, a.substs, b.substs)?;\n             Ok(ty::ExistentialTraitRef { def_id: a.def_id, substs })\n@@ -305,6 +305,7 @@ impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {\n }\n \n impl<'tcx> Relate<'tcx> for Ty<'tcx> {\n+    #[inline]\n     fn relate<R: TypeRelation<'tcx>>(\n         relation: &mut R,\n         a: Ty<'tcx>,\n@@ -421,7 +422,7 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n                     let sz_b = sz_b.try_eval_usize(tcx, relation.param_env());\n                     match (sz_a, sz_b) {\n                         (Some(sz_a_val), Some(sz_b_val)) => Err(TypeError::FixedArraySize(\n-                            expected_found(relation, &sz_a_val, &sz_b_val),\n+                            expected_found(relation, sz_a_val, sz_b_val),\n                         )),\n                         _ => Err(err),\n                     }\n@@ -440,9 +441,9 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n                     as_.iter().zip(bs).map(|(a, b)| relation.relate(a.expect_ty(), b.expect_ty())),\n                 )?)\n             } else if !(as_.is_empty() || bs.is_empty()) {\n-                Err(TypeError::TupleSize(expected_found(relation, &as_.len(), &bs.len())))\n+                Err(TypeError::TupleSize(expected_found(relation, as_.len(), bs.len())))\n             } else {\n-                Err(TypeError::Sorts(expected_found(relation, &a, &b)))\n+                Err(TypeError::Sorts(expected_found(relation, a, b)))\n             }\n         }\n \n@@ -471,7 +472,7 @@ pub fn super_relate_tys<R: TypeRelation<'tcx>>(\n             Ok(tcx.mk_opaque(a_def_id, substs))\n         }\n \n-        _ => Err(TypeError::Sorts(expected_found(relation, &a, &b))),\n+        _ => Err(TypeError::Sorts(expected_found(relation, a, b))),\n     }\n }\n \n@@ -521,10 +522,10 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n                         if a_instance == b_instance {\n                             Ok(ConstValue::Scalar(a_val))\n                         } else {\n-                            Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+                            Err(TypeError::ConstMismatch(expected_found(relation, a, b)))\n                         }\n                     } else {\n-                        Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+                        Err(TypeError::ConstMismatch(expected_found(relation, a, b)))\n                     }\n                 }\n \n@@ -534,7 +535,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n                     if a_bytes == b_bytes {\n                         Ok(a_val)\n                     } else {\n-                        Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+                        Err(TypeError::ConstMismatch(expected_found(relation, a, b)))\n                     }\n                 }\n \n@@ -554,7 +555,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n \n                                 Ok(a_val)\n                             } else {\n-                                Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+                                Err(TypeError::ConstMismatch(expected_found(relation, a, b)))\n                             }\n                         }\n                         // FIXME(const_generics): There are probably some `TyKind`s\n@@ -564,12 +565,12 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n                                 DUMMY_SP,\n                                 &format!(\"unexpected consts: a: {:?}, b: {:?}\", a, b),\n                             );\n-                            Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+                            Err(TypeError::ConstMismatch(expected_found(relation, a, b)))\n                         }\n                     }\n                 }\n \n-                _ => Err(TypeError::ConstMismatch(expected_found(relation, &a, &b))),\n+                _ => Err(TypeError::ConstMismatch(expected_found(relation, a, b))),\n             };\n \n             new_val.map(ty::ConstKind::Value)\n@@ -584,7 +585,7 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n                 relation.relate_with_variance(ty::Variance::Invariant, a_substs, b_substs)?;\n             Ok(ty::ConstKind::Unevaluated(a_def_id, substs, a_promoted))\n         }\n-        _ => Err(TypeError::ConstMismatch(expected_found(relation, &a, &b))),\n+        _ => Err(TypeError::ConstMismatch(expected_found(relation, a, b))),\n     };\n     new_const_val.map(|val| tcx.mk_const(ty::Const { val, ty: a.ty }))\n }\n@@ -607,7 +608,7 @@ impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {\n         b_v.sort_by(|a, b| a.stable_cmp(tcx, b));\n         b_v.dedup();\n         if a_v.len() != b_v.len() {\n-            return Err(TypeError::ExistentialMismatch(expected_found(relation, &a, &b)));\n+            return Err(TypeError::ExistentialMismatch(expected_found(relation, a, b)));\n         }\n \n         let v = a_v.into_iter().zip(b_v.into_iter()).map(|(ep_a, ep_b)| {\n@@ -616,7 +617,7 @@ impl<'tcx> Relate<'tcx> for &'tcx ty::List<ty::ExistentialPredicate<'tcx>> {\n                 (Trait(a), Trait(b)) => Ok(Trait(relation.relate(a, b)?)),\n                 (Projection(a), Projection(b)) => Ok(Projection(relation.relate(a, b)?)),\n                 (AutoTrait(a), AutoTrait(b)) if a == b => Ok(AutoTrait(a)),\n-                _ => Err(TypeError::ExistentialMismatch(expected_found(relation, &a, &b))),\n+                _ => Err(TypeError::ExistentialMismatch(expected_found(relation, a, b))),\n             }\n         });\n         Ok(tcx.mk_existential_predicates(v)?)\n@@ -740,20 +741,14 @@ impl<'tcx> Relate<'tcx> for ty::ProjectionPredicate<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Error handling\n \n-pub fn expected_found<R, T>(relation: &mut R, a: &T, b: &T) -> ExpectedFound<T>\n+pub fn expected_found<R, T>(relation: &mut R, a: T, b: T) -> ExpectedFound<T>\n where\n     R: TypeRelation<'tcx>,\n-    T: Clone,\n {\n     expected_found_bool(relation.a_is_expected(), a, b)\n }\n \n-pub fn expected_found_bool<T>(a_is_expected: bool, a: &T, b: &T) -> ExpectedFound<T>\n-where\n-    T: Clone,\n-{\n-    let a = a.clone();\n-    let b = b.clone();\n+pub fn expected_found_bool<T>(a_is_expected: bool, a: T, b: T) -> ExpectedFound<T> {\n     if a_is_expected {\n         ExpectedFound { expected: a, found: b }\n     } else {"}]}