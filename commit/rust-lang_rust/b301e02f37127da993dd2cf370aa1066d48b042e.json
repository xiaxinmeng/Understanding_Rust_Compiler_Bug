{"sha": "b301e02f37127da993dd2cf370aa1066d48b042e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzMDFlMDJmMzcxMjdkYTk5M2RkMmNmMzcwYWExMDY2ZDQ4YjA0MmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-19T05:39:29Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-05-19T05:39:29Z"}, "message": "Auto merge of #25548 - sfackler:debug-builders-by-ref, r=alexcrichton\n\nBased on feedback from https://internals.rust-lang.org/t/final-comment-period-for-debug-builders-stabilization/2007/2", "tree": {"sha": "17d7f20cea3410938fa108d33203660c55162cc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17d7f20cea3410938fa108d33203660c55162cc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b301e02f37127da993dd2cf370aa1066d48b042e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b301e02f37127da993dd2cf370aa1066d48b042e", "html_url": "https://github.com/rust-lang/rust/commit/b301e02f37127da993dd2cf370aa1066d48b042e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b301e02f37127da993dd2cf370aa1066d48b042e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeaf2ba489e1c9b9d6d3e5f4566c3ecbdcaa14f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeaf2ba489e1c9b9d6d3e5f4566c3ecbdcaa14f2", "html_url": "https://github.com/rust-lang/rust/commit/eeaf2ba489e1c9b9d6d3e5f4566c3ecbdcaa14f2"}, {"sha": "e87b353d65c67a5e7326b2216feba9c1ddf2402c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e87b353d65c67a5e7326b2216feba9c1ddf2402c", "html_url": "https://github.com/rust-lang/rust/commit/e87b353d65c67a5e7326b2216feba9c1ddf2402c"}], "stats": {"total": 112, "additions": 69, "deletions": 43}, "files": [{"sha": "33cad6e094db487f99f7f92a0f65529192c3404b", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=b301e02f37127da993dd2cf370aa1066d48b042e", "patch": "@@ -926,7 +926,7 @@ impl<K: Ord, V: Ord> Ord for BTreeMap<K, V> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<K: Debug, V: Debug> Debug for BTreeMap<K, V> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.iter().fold(f.debug_map(), |b, (k, v)| b.entry(k, v)).finish()\n+        f.debug_map().entries(self.iter()).finish()\n     }\n }\n "}, {"sha": "0c3bd1c7b35edb434c71bf94393b94ec0fb39e34", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=b301e02f37127da993dd2cf370aa1066d48b042e", "patch": "@@ -622,7 +622,7 @@ impl<'a, 'b, T: Ord + Clone> BitOr<&'b BTreeSet<T>> for &'a BTreeSet<T> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Debug> Debug for BTreeSet<T> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.iter().fold(f.debug_set(), |b, e| b.entry(e)).finish()\n+        f.debug_set().entries(self.iter()).finish()\n     }\n }\n "}, {"sha": "9e4a80085d81ba38a83939b1b8b4d81cbfc91556", "filename": "src/libcollections/linked_list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flinked_list.rs?ref=b301e02f37127da993dd2cf370aa1066d48b042e", "patch": "@@ -917,7 +917,7 @@ impl<A: Clone> Clone for LinkedList<A> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: fmt::Debug> fmt::Debug for LinkedList<A> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.iter().fold(f.debug_list(), |b, e| b.entry(e)).finish()\n+        f.debug_list().entries(self.iter()).finish()\n     }\n }\n "}, {"sha": "c1786dc4c28b5ac4b721cc82301b16fbb3708b36", "filename": "src/libcore/fmt/builders.rs", "status": "modified", "additions": 46, "deletions": 21, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibcore%2Ffmt%2Fbuilders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibcore%2Ffmt%2Fbuilders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fbuilders.rs?ref=b301e02f37127da993dd2cf370aa1066d48b042e", "patch": "@@ -73,7 +73,7 @@ pub fn debug_struct_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str)\n impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n     /// Adds a new field to the generated struct output.\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n-    pub fn field(mut self, name: &str, value: &fmt::Debug) -> DebugStruct<'a, 'b> {\n+    pub fn field(&mut self, name: &str, value: &fmt::Debug) -> &mut DebugStruct<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             let prefix = if self.has_fields {\n                 \",\"\n@@ -93,10 +93,9 @@ impl<'a, 'b: 'a> DebugStruct<'a, 'b> {\n         self\n     }\n \n-    /// Consumes the `DebugStruct`, finishing output and returning any error\n-    /// encountered.\n+    /// Finishes output and returns any error encountered.\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n-    pub fn finish(mut self) -> fmt::Result {\n+    pub fn finish(&mut self) -> fmt::Result {\n         if self.has_fields {\n             self.result = self.result.and_then(|_| {\n                 if self.is_pretty() {\n@@ -136,7 +135,7 @@ pub fn debug_tuple_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>, name: &str) -> D\n impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n     /// Adds a new field to the generated tuple struct output.\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n-    pub fn field(mut self, value: &fmt::Debug) -> DebugTuple<'a, 'b> {\n+    pub fn field(&mut self, value: &fmt::Debug) -> &mut DebugTuple<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             let (prefix, space) = if self.has_fields {\n                 (\",\", \" \")\n@@ -156,10 +155,9 @@ impl<'a, 'b: 'a> DebugTuple<'a, 'b> {\n         self\n     }\n \n-    /// Consumes the `DebugTuple`, finishing output and returning any error\n-    /// encountered.\n+    /// Finishes output and returns any error encountered.\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n-    pub fn finish(mut self) -> fmt::Result {\n+    pub fn finish(&mut self) -> fmt::Result {\n         if self.has_fields {\n             self.result = self.result.and_then(|_| {\n                 if self.is_pretty() {\n@@ -231,15 +229,24 @@ pub fn debug_set_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugSet<'a, 'b\n impl<'a, 'b: 'a> DebugSet<'a, 'b> {\n     /// Adds a new entry to the set output.\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n-    pub fn entry(mut self, entry: &fmt::Debug) -> DebugSet<'a, 'b> {\n+    pub fn entry(&mut self, entry: &fmt::Debug) -> &mut DebugSet<'a, 'b> {\n         self.inner.entry(entry);\n         self\n     }\n \n-    /// Consumes the `DebugSet`, finishing output and returning any error\n-    /// encountered.\n+    /// Adds the contents of an iterator of entries to the set output.\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n-    pub fn finish(mut self) -> fmt::Result {\n+    pub fn entries<D, I>(&mut self, entries: I) -> &mut DebugSet<'a, 'b>\n+            where D: fmt::Debug, I: IntoIterator<Item=D> {\n+        for entry in entries {\n+            self.entry(&entry);\n+        }\n+        self\n+    }\n+\n+    /// Finishes output and returns any error encountered.\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    pub fn finish(&mut self) -> fmt::Result {\n         self.inner.finish();\n         self.inner.result.and_then(|_| self.inner.fmt.write_str(\"}\"))\n     }\n@@ -265,17 +272,26 @@ pub fn debug_list_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugList<'a,\n }\n \n impl<'a, 'b: 'a> DebugList<'a, 'b> {\n-    /// Adds a new entry to the set output.\n+    /// Adds a new entry to the list output.\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n-    pub fn entry(mut self, entry: &fmt::Debug) -> DebugList<'a, 'b> {\n+    pub fn entry(&mut self, entry: &fmt::Debug) -> &mut DebugList<'a, 'b> {\n         self.inner.entry(entry);\n         self\n     }\n \n-    /// Consumes the `DebugSet`, finishing output and returning any error\n-    /// encountered.\n+    /// Adds the contents of an iterator of entries to the list output.\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    pub fn entries<D, I>(&mut self, entries: I) -> &mut DebugList<'a, 'b>\n+            where D: fmt::Debug, I: IntoIterator<Item=D> {\n+        for entry in entries {\n+            self.entry(&entry);\n+        }\n+        self\n+    }\n+\n+    /// Finishes output and returns any error encountered.\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n-    pub fn finish(mut self) -> fmt::Result {\n+    pub fn finish(&mut self) -> fmt::Result {\n         self.inner.finish();\n         self.inner.result.and_then(|_| self.inner.fmt.write_str(\"]\"))\n     }\n@@ -303,7 +319,7 @@ pub fn debug_map_new<'a, 'b>(fmt: &'a mut fmt::Formatter<'b>) -> DebugMap<'a, 'b\n impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n     /// Adds a new entry to the map output.\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n-    pub fn entry(mut self, key: &fmt::Debug, value: &fmt::Debug) -> DebugMap<'a, 'b> {\n+    pub fn entry(&mut self, key: &fmt::Debug, value: &fmt::Debug) -> &mut DebugMap<'a, 'b> {\n         self.result = self.result.and_then(|_| {\n             if self.is_pretty() {\n                 let mut writer = PadAdapter::new(self.fmt);\n@@ -319,10 +335,19 @@ impl<'a, 'b: 'a> DebugMap<'a, 'b> {\n         self\n     }\n \n-    /// Consumes the `DebugMap`, finishing output and returning any error\n-    /// encountered.\n+    /// Adds the contents of an iterator of entries to the map output.\n+    #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n+    pub fn entries<K, V, I>(&mut self, entries: I) -> &mut DebugMap<'a, 'b>\n+            where K: fmt::Debug, V: fmt::Debug, I: IntoIterator<Item=(K, V)> {\n+        for (k, v) in entries {\n+            self.entry(&k, &v);\n+        }\n+        self\n+    }\n+\n+    /// Finishes output and returns any error encountered.\n     #[unstable(feature = \"debug_builders\", reason = \"method was just created\")]\n-    pub fn finish(self) -> fmt::Result {\n+    pub fn finish(&mut self) -> fmt::Result {\n         let prefix = if self.is_pretty() && self.has_fields { \"\\n\" } else { \"\" };\n         self.result.and_then(|_| write!(self.fmt, \"{}}}\", prefix))\n     }"}, {"sha": "22575f340d78af7ac505cc4a779790d1a92e2f3b", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=b301e02f37127da993dd2cf370aa1066d48b042e", "patch": "@@ -787,7 +787,7 @@ impl<'a> Formatter<'a> {\n     ///\n     /// impl fmt::Debug for Foo {\n     ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-    ///         self.0.iter().fold(fmt.debug_list(), |b, e| b.entry(e)).finish()\n+    ///         fmt.debug_list().entries(self.0.iter()).finish()\n     ///     }\n     /// }\n     ///\n@@ -813,7 +813,7 @@ impl<'a> Formatter<'a> {\n     ///\n     /// impl fmt::Debug for Foo {\n     ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-    ///         self.0.iter().fold(fmt.debug_set(), |b, e| b.entry(e)).finish()\n+    ///         fmt.debug_set().entries(self.0.iter()).finish()\n     ///     }\n     /// }\n     ///\n@@ -839,7 +839,7 @@ impl<'a> Formatter<'a> {\n     ///\n     /// impl fmt::Debug for Foo {\n     ///     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-    ///         self.0.iter().fold(fmt.debug_map(), |b, &(ref k, ref v)| b.entry(k, v)).finish()\n+    ///         fmt.debug_map().entries(self.0.iter().map(|&(ref k, ref v)| (k, v))).finish()\n     ///     }\n     /// }\n     ///\n@@ -1120,7 +1120,7 @@ tuple! { T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, }\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: Debug> Debug for [T] {\n     fn fmt(&self, f: &mut Formatter) -> Result {\n-        self.iter().fold(f.debug_list(), |b, e| b.entry(e)).finish()\n+        f.debug_list().entries(self.iter()).finish()\n     }\n }\n "}, {"sha": "093218c6e4c59c74ca3ffce09a0d69c631c3376d", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=b301e02f37127da993dd2cf370aa1066d48b042e", "patch": "@@ -1222,7 +1222,7 @@ impl<K, V, S> Debug for HashMap<K, V, S>\n     where K: Eq + Hash + Debug, V: Debug, S: HashState\n {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.iter().fold(f.debug_map(), |b, (k, v)| b.entry(k, v)).finish()\n+        f.debug_map().entries(self.iter()).finish()\n     }\n }\n "}, {"sha": "44fc0f7016d8e1e0f4f23373310cc41580cac8c6", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=b301e02f37127da993dd2cf370aa1066d48b042e", "patch": "@@ -585,7 +585,7 @@ impl<T, S> fmt::Debug for HashSet<T, S>\n           S: HashState\n {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        self.iter().fold(f.debug_set(), |b, e| b.entry(e)).finish()\n+        f.debug_set().entries(self.iter()).finish()\n     }\n }\n "}, {"sha": "efbcda3fecec0b33ae437e1dde6156d9d393a763", "filename": "src/libstd/sys/common/net.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Fnet.rs?ref=b301e02f37127da993dd2cf370aa1066d48b042e", "patch": "@@ -274,16 +274,16 @@ impl fmt::Debug for TcpStream {\n         let mut res = f.debug_struct(\"TcpStream\");\n \n         if let Ok(addr) = self.socket_addr() {\n-            res = res.field(\"addr\", &addr);\n+            res.field(\"addr\", &addr);\n         }\n \n         if let Ok(peer) = self.peer_addr() {\n-            res = res.field(\"peer\", &peer);\n+            res.field(\"peer\", &peer);\n         }\n \n         let name = if cfg!(windows) {\"socket\"} else {\"fd\"};\n-        res = res.field(name, &self.inner.as_inner());\n-        res.finish()\n+        res.field(name, &self.inner.as_inner())\n+            .finish()\n     }\n }\n \n@@ -351,12 +351,12 @@ impl fmt::Debug for TcpListener {\n         let mut res = f.debug_struct(\"TcpListener\");\n \n         if let Ok(addr) = self.socket_addr() {\n-            res = res.field(\"addr\", &addr);\n+            res.field(\"addr\", &addr);\n         }\n \n         let name = if cfg!(windows) {\"socket\"} else {\"fd\"};\n-        res = res.field(name, &self.inner.as_inner());\n-        res.finish()\n+        res.field(name, &self.inner.as_inner())\n+            .finish()\n     }\n }\n \n@@ -484,11 +484,11 @@ impl fmt::Debug for UdpSocket {\n         let mut res = f.debug_struct(\"UdpSocket\");\n \n         if let Ok(addr) = self.socket_addr() {\n-            res = res.field(\"addr\", &addr);\n+            res.field(\"addr\", &addr);\n         }\n \n         let name = if cfg!(windows) {\"socket\"} else {\"fd\"};\n-        res = res.field(name, &self.inner.as_inner());\n-        res.finish()\n+        res.field(name, &self.inner.as_inner())\n+            .finish()\n     }\n }"}, {"sha": "51a85a276eda5a8ad6aa7a056e6d4f82e4dab207", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b301e02f37127da993dd2cf370aa1066d48b042e/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=b301e02f37127da993dd2cf370aa1066d48b042e", "patch": "@@ -408,12 +408,13 @@ impl fmt::Debug for File {\n         }\n \n         let fd = self.0.raw();\n-        let mut b = f.debug_struct(\"File\").field(\"fd\", &fd);\n+        let mut b = f.debug_struct(\"File\");\n+        b.field(\"fd\", &fd);\n         if let Some(path) = get_path(fd) {\n-            b = b.field(\"path\", &path);\n+            b.field(\"path\", &path);\n         }\n         if let Some((read, write)) = get_mode(fd) {\n-            b = b.field(\"read\", &read).field(\"write\", &write);\n+            b.field(\"read\", &read).field(\"write\", &write);\n         }\n         b.finish()\n     }"}]}