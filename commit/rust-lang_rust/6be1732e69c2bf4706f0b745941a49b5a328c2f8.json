{"sha": "6be1732e69c2bf4706f0b745941a49b5a328c2f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZTE3MzJlNjljMmJmNDcwNmYwYjc0NTk0MWE0OWI1YTMyOGMyZjg=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-25T15:42:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-25T15:42:10Z"}, "message": "Rollup merge of #86513 - fee1-dead:cross-crate-doc-hidden, r=danielhenrymantilla\n\nRustdoc: Do not list impl when trait has doc(hidden)\n\nFixes #86448.", "tree": {"sha": "bbbdfaa366a2cc5f7df97b52646e318fbdeb4879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbbdfaa366a2cc5f7df97b52646e318fbdeb4879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6be1732e69c2bf4706f0b745941a49b5a328c2f8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg1flTCRBK7hj4Ov3rIwAA2MkIAHcPuHVt/UCqzrTENOUxU8xj\nFcj175S8Yv59h67IEhV/wJ5b9F371pQIhiu/udpwuapSXo64tw1smD90y/w49b4Q\nQchmCFMOsZ/b+VCT5GWLHbRKwyLypj3nlNX1X+VFoRdilSTeQLVgqO7QdqrkS8Qj\nXphjpQXaFXLMLBk5/S8sJcGCWN3wXuXf2Q4no4PObrJffyLWx65rnNkAIBkTUUfP\nxJpZ7LyMIElMAjilZBnrivMiBQsCznQoVYMElSS8Y6G9Ek0airAIIfFD+1zv1xbL\nGhK3ELYU/8nfoDFjZ8Hz9G+r/SujxeEC6Sl/O96q2z6q6DXlVJVSaX1veLXEYAQ=\n=vOWH\n-----END PGP SIGNATURE-----\n", "payload": "tree bbbdfaa366a2cc5f7df97b52646e318fbdeb4879\nparent e01a720f8548e86f902f27280a7a54ea9be60186\nparent 9a6343478ce9765c299ad594dd8a8a8d38202c68\nauthor Yuki Okushi <jtitor@2k36.org> 1624635730 +0900\ncommitter GitHub <noreply@github.com> 1624635730 +0900\n\nRollup merge of #86513 - fee1-dead:cross-crate-doc-hidden, r=danielhenrymantilla\n\nRustdoc: Do not list impl when trait has doc(hidden)\n\nFixes #86448.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6be1732e69c2bf4706f0b745941a49b5a328c2f8", "html_url": "https://github.com/rust-lang/rust/commit/6be1732e69c2bf4706f0b745941a49b5a328c2f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6be1732e69c2bf4706f0b745941a49b5a328c2f8/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e01a720f8548e86f902f27280a7a54ea9be60186", "url": "https://api.github.com/repos/rust-lang/rust/commits/e01a720f8548e86f902f27280a7a54ea9be60186", "html_url": "https://github.com/rust-lang/rust/commit/e01a720f8548e86f902f27280a7a54ea9be60186"}, {"sha": "9a6343478ce9765c299ad594dd8a8a8d38202c68", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a6343478ce9765c299ad594dd8a8a8d38202c68", "html_url": "https://github.com/rust-lang/rust/commit/9a6343478ce9765c299ad594dd8a8a8d38202c68"}], "stats": {"total": 95, "additions": 94, "deletions": 1}, "files": [{"sha": "ab6254dcf10b57d8a269222ebab992c45c857714", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6be1732e69c2bf4706f0b745941a49b5a328c2f8/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be1732e69c2bf4706f0b745941a49b5a328c2f8/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=6be1732e69c2bf4706f0b745941a49b5a328c2f8", "patch": "@@ -15,7 +15,9 @@ use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n-use crate::clean::{self, Attributes, AttributesExt, FakeDefId, GetDefId, ToSource};\n+use crate::clean::{\n+    self, Attributes, AttributesExt, FakeDefId, GetDefId, NestedAttributesExt, ToSource, Type,\n+};\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n \n@@ -420,6 +422,21 @@ crate fn build_impl(\n     if trait_.def_id() == tcx.lang_items().deref_trait() {\n         super::build_deref_target_impls(cx, &trait_items, ret);\n     }\n+\n+    // Return if the trait itself or any types of the generic parameters are doc(hidden).\n+    let mut stack: Vec<&Type> = trait_.iter().collect();\n+    stack.push(&for_);\n+    while let Some(ty) = stack.pop() {\n+        if let Some(did) = ty.def_id() {\n+            if cx.tcx.get_attrs(did).lists(sym::doc).has_word(sym::hidden) {\n+                return;\n+            }\n+        }\n+        if let Some(generics) = ty.generics() {\n+            stack.extend(generics);\n+        }\n+    }\n+\n     if let Some(trait_did) = trait_.def_id() {\n         record_extern_trait(cx, trait_did);\n     }"}, {"sha": "15953122280f37a7bfe0f3eda33cd9793f011dd0", "filename": "src/test/rustdoc/auxiliary/cross-crate-hidden-impl-parameter.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6be1732e69c2bf4706f0b745941a49b5a328c2f8/src%2Ftest%2Frustdoc%2Fauxiliary%2Fcross-crate-hidden-impl-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be1732e69c2bf4706f0b745941a49b5a328c2f8/src%2Ftest%2Frustdoc%2Fauxiliary%2Fcross-crate-hidden-impl-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fcross-crate-hidden-impl-parameter.rs?ref=6be1732e69c2bf4706f0b745941a49b5a328c2f8", "patch": "@@ -0,0 +1,5 @@\n+#[doc(hidden)]\n+pub enum HiddenType {}\n+\n+#[doc(hidden)]\n+pub trait HiddenTrait {}"}, {"sha": "eb2ced2f7f413f58be498a285808de10a5c9f634", "filename": "src/test/rustdoc/cross-crate-hidden-impl-parameter.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/6be1732e69c2bf4706f0b745941a49b5a328c2f8/src%2Ftest%2Frustdoc%2Fcross-crate-hidden-impl-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be1732e69c2bf4706f0b745941a49b5a328c2f8/src%2Ftest%2Frustdoc%2Fcross-crate-hidden-impl-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fcross-crate-hidden-impl-parameter.rs?ref=6be1732e69c2bf4706f0b745941a49b5a328c2f8", "patch": "@@ -0,0 +1,35 @@\n+// Issue #86448: test for cross-crate `doc(hidden)`\n+#![crate_name = \"foo\"]\n+\n+// aux-build:cross-crate-hidden-impl-parameter.rs\n+extern crate cross_crate_hidden_impl_parameter;\n+\n+pub use ::cross_crate_hidden_impl_parameter::{HiddenType, HiddenTrait}; // OK, not re-exported\n+\n+pub enum MyLibType {}\n+\n+// @!has foo/enum.MyLibType.html '//*[@id=\"impl-From%3CHiddenType%3E\"]' 'impl From<HiddenType> for MyLibType'\n+impl From<HiddenType> for MyLibType {\n+    fn from(it: HiddenType) -> MyLibType {\n+        match it {}\n+    }\n+}\n+\n+pub struct T<T>(T);\n+\n+// @!has foo/enum.MyLibType.html '//*[@id=\"impl-From%3CT%3CT%3CT%3CT%3CHiddenType%3E%3E%3E%3E%3E\"]' 'impl From<T<T<T<T<HiddenType>>>>> for MyLibType'\n+impl From<T<T<T<T<HiddenType>>>>> for MyLibType {\n+    fn from(it: T<T<T<T<HiddenType>>>>) -> MyLibType {\n+        todo!()\n+    }\n+}\n+\n+// @!has foo/enum.MyLibType.html '//*[@id=\"impl-HiddenTrait\"]' 'impl HiddenTrait for MyLibType'\n+impl HiddenTrait for MyLibType {}\n+\n+// @!has foo/struct.T.html '//*[@id=\"impl-From%3CMyLibType%3E\"]' 'impl From<MyLibType> for T<T<T<T<HiddenType>>>>'\n+impl From<MyLibType> for T<T<T<T<HiddenType>>>> {\n+    fn from(it: MyLibType) -> T<T<T<T<HiddenType>>>> {\n+        match it {}\n+    }\n+}"}, {"sha": "d55393af8599ba5b53a254914e52acd6c3d5bf00", "filename": "src/test/rustdoc/same-crate-hidden-impl-parameter.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6be1732e69c2bf4706f0b745941a49b5a328c2f8/src%2Ftest%2Frustdoc%2Fsame-crate-hidden-impl-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6be1732e69c2bf4706f0b745941a49b5a328c2f8/src%2Ftest%2Frustdoc%2Fsame-crate-hidden-impl-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsame-crate-hidden-impl-parameter.rs?ref=6be1732e69c2bf4706f0b745941a49b5a328c2f8", "patch": "@@ -0,0 +1,36 @@\n+// test for `doc(hidden)` with impl parameters in the same crate.\n+#![crate_name = \"foo\"]\n+\n+#[doc(hidden)]\n+pub enum HiddenType {}\n+\n+#[doc(hidden)]\n+pub trait HiddenTrait {}\n+\n+pub enum MyLibType {}\n+\n+// @!has foo/enum.MyLibType.html '//*[@id=\"impl-From%3CHiddenType%3E\"]' 'impl From<HiddenType> for MyLibType'\n+impl From<HiddenType> for MyLibType {\n+    fn from(it: HiddenType) -> MyLibType {\n+        match it {}\n+    }\n+}\n+\n+pub struct T<T>(T);\n+\n+// @!has foo/enum.MyLibType.html '//*[@id=\"impl-From%3CT%3CT%3CT%3CT%3CHiddenType%3E%3E%3E%3E%3E\"]' 'impl From<T<T<T<T<HiddenType>>>>> for MyLibType'\n+impl From<T<T<T<T<HiddenType>>>>> for MyLibType {\n+    fn from(it: T<T<T<T<HiddenType>>>>) -> MyLibType {\n+        todo!()\n+    }\n+}\n+\n+// @!has foo/enum.MyLibType.html '//*[@id=\"impl-HiddenTrait\"]' 'impl HiddenTrait for MyLibType'\n+impl HiddenTrait for MyLibType {}\n+\n+// @!has foo/struct.T.html '//*[@id=\"impl-From%3CMyLibType%3E\"]' 'impl From<MyLibType> for T<T<T<T<HiddenType>>>>'\n+impl From<MyLibType> for T<T<T<T<HiddenType>>>> {\n+    fn from(it: MyLibType) -> T<T<T<T<HiddenType>>>> {\n+        match it {}\n+    }\n+}"}]}