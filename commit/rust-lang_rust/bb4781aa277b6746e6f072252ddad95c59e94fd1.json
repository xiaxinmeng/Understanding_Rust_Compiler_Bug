{"sha": "bb4781aa277b6746e6f072252ddad95c59e94fd1", "node_id": "C_kwDOAAsO6NoAKGJiNDc4MWFhMjc3YjY3NDZlNmYwNzIyNTJkZGFkOTVjNTllOTRmZDE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-21T17:25:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-21T17:25:49Z"}, "message": "Auto merge of #97248 - xFrednet:clippyup, r=Manishearth\n\nClippyup\n\nThis direction was simpler. All test Clippy pass locally :upside_down_face:\n\nr? `@Manishearth`", "tree": {"sha": "26721fe9ad50c63200c99e0d0f4c3dc9bd46c1ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26721fe9ad50c63200c99e0d0f4c3dc9bd46c1ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb4781aa277b6746e6f072252ddad95c59e94fd1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb4781aa277b6746e6f072252ddad95c59e94fd1", "html_url": "https://github.com/rust-lang/rust/commit/bb4781aa277b6746e6f072252ddad95c59e94fd1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb4781aa277b6746e6f072252ddad95c59e94fd1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "74b13691aad5f98b274d16c8f3aab62b203fe213", "url": "https://api.github.com/repos/rust-lang/rust/commits/74b13691aad5f98b274d16c8f3aab62b203fe213", "html_url": "https://github.com/rust-lang/rust/commit/74b13691aad5f98b274d16c8f3aab62b203fe213"}, {"sha": "6e87c2490e9d9b3ba60a1400a474467905f5275c", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e87c2490e9d9b3ba60a1400a474467905f5275c", "html_url": "https://github.com/rust-lang/rust/commit/6e87c2490e9d9b3ba60a1400a474467905f5275c"}], "stats": {"total": 6168, "additions": 4453, "deletions": 1715}, "files": [{"sha": "9fa6e1d51d2ae8607027a4597568dd98cd0055d3", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -627,7 +627,7 @@ dependencies = [\n \n [[package]]\n name = \"clippy\"\n-version = \"0.1.62\"\n+version = \"0.1.63\"\n dependencies = [\n  \"clippy_lints\",\n  \"clippy_utils\",\n@@ -647,6 +647,7 @@ dependencies = [\n  \"serde\",\n  \"syn\",\n  \"tempfile\",\n+ \"termize\",\n  \"tester\",\n  \"tokio\",\n ]\n@@ -667,7 +668,7 @@ dependencies = [\n \n [[package]]\n name = \"clippy_lints\"\n-version = \"0.1.62\"\n+version = \"0.1.63\"\n dependencies = [\n  \"cargo_metadata\",\n  \"clippy_utils\",\n@@ -688,7 +689,7 @@ dependencies = [\n \n [[package]]\n name = \"clippy_utils\"\n-version = \"0.1.62\"\n+version = \"0.1.63\"\n dependencies = [\n  \"arrayvec\",\n  \"if_chain\","}, {"sha": "5a59f94ec918bbc3c824b828f97a53ea98979034", "filename": "src/tools/clippy/.github/deploy.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2F.github%2Fdeploy.sh", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2F.github%2Fdeploy.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2Fdeploy.sh?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -8,6 +8,7 @@ rm -rf out/master/ || exit 0\n echo \"Making the docs for master\"\n mkdir out/master/\n cp util/gh-pages/index.html out/master\n+cp util/gh-pages/script.js out/master\n cp util/gh-pages/lints.json out/master\n \n if [[ -n $TAG_NAME ]]; then"}, {"sha": "10ef00fcbafa5421d6de1e94d77975e0e7615a6d", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 42, "deletions": 3, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -8,9 +8,9 @@ document.\n \n [d0cf3481...master](https://github.com/rust-lang/rust-clippy/compare/d0cf3481...master)\n \n-## Rust 1.61 (beta)\n+## Rust 1.61\n \n-Current beta, released 2022-05-19\n+Current stable, released 2022-05-19\n \n [57b3c4b...d0cf3481](https://github.com/rust-lang/rust-clippy/compare/57b3c4b...d0cf3481)\n \n@@ -111,7 +111,7 @@ Current beta, released 2022-05-19\n \n ## Rust 1.60\n \n-Current stable, released 2022-04-07\n+Released 2022-04-07\n \n [0eff589...57b3c4b](https://github.com/rust-lang/rust-clippy/compare/0eff589...57b3c4b)\n \n@@ -3290,13 +3290,16 @@ Released 2018-09-13\n [`bind_instead_of_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#bind_instead_of_map\n [`blacklisted_name`]: https://rust-lang.github.io/rust-clippy/master/index.html#blacklisted_name\n [`blanket_clippy_restriction_lints`]: https://rust-lang.github.io/rust-clippy/master/index.html#blanket_clippy_restriction_lints\n+[`block_in_if_condition_expr`]: https://rust-lang.github.io/rust-clippy/master/index.html#block_in_if_condition_expr\n+[`block_in_if_condition_stmt`]: https://rust-lang.github.io/rust-clippy/master/index.html#block_in_if_condition_stmt\n [`blocks_in_if_conditions`]: https://rust-lang.github.io/rust-clippy/master/index.html#blocks_in_if_conditions\n [`bool_assert_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_assert_comparison\n [`bool_comparison`]: https://rust-lang.github.io/rust-clippy/master/index.html#bool_comparison\n [`borrow_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr\n [`borrow_interior_mutable_const`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrow_interior_mutable_const\n [`borrowed_box`]: https://rust-lang.github.io/rust-clippy/master/index.html#borrowed_box\n [`box_collection`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_collection\n+[`box_vec`]: https://rust-lang.github.io/rust-clippy/master/index.html#box_vec\n [`boxed_local`]: https://rust-lang.github.io/rust-clippy/master/index.html#boxed_local\n [`branches_sharing_code`]: https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code\n [`builtin_type_shadow`]: https://rust-lang.github.io/rust-clippy/master/index.html#builtin_type_shadow\n@@ -3332,10 +3335,12 @@ Released 2018-09-13\n [`collapsible_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_match\n [`comparison_chain`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain\n [`comparison_to_empty`]: https://rust-lang.github.io/rust-clippy/master/index.html#comparison_to_empty\n+[`const_static_lifetime`]: https://rust-lang.github.io/rust-clippy/master/index.html#const_static_lifetime\n [`copy_iterator`]: https://rust-lang.github.io/rust-clippy/master/index.html#copy_iterator\n [`crate_in_macro_def`]: https://rust-lang.github.io/rust-clippy/master/index.html#crate_in_macro_def\n [`create_dir`]: https://rust-lang.github.io/rust-clippy/master/index.html#create_dir\n [`crosspointer_transmute`]: https://rust-lang.github.io/rust-clippy/master/index.html#crosspointer_transmute\n+[`cyclomatic_complexity`]: https://rust-lang.github.io/rust-clippy/master/index.html#cyclomatic_complexity\n [`dbg_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#dbg_macro\n [`debug_assert_with_mut_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#debug_assert_with_mut_call\n [`decimal_literal_representation`]: https://rust-lang.github.io/rust-clippy/master/index.html#decimal_literal_representation\n@@ -3350,18 +3355,23 @@ Released 2018-09-13\n [`derivable_impls`]: https://rust-lang.github.io/rust-clippy/master/index.html#derivable_impls\n [`derive_hash_xor_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_hash_xor_eq\n [`derive_ord_xor_partial_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_ord_xor_partial_ord\n+[`derive_partial_eq_without_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_partial_eq_without_eq\n+[`disallowed_method`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_method\n [`disallowed_methods`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_methods\n [`disallowed_script_idents`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_script_idents\n+[`disallowed_type`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_type\n [`disallowed_types`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_types\n [`diverging_sub_expression`]: https://rust-lang.github.io/rust-clippy/master/index.html#diverging_sub_expression\n [`doc_markdown`]: https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown\n [`double_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_comparisons\n [`double_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_must_use\n [`double_neg`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_neg\n [`double_parens`]: https://rust-lang.github.io/rust-clippy/master/index.html#double_parens\n+[`drop_bounds`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_bounds\n [`drop_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_copy\n [`drop_non_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_non_drop\n [`drop_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#drop_ref\n+[`duplicate_mod`]: https://rust-lang.github.io/rust-clippy/master/index.html#duplicate_mod\n [`duplicate_underscore_argument`]: https://rust-lang.github.io/rust-clippy/master/index.html#duplicate_underscore_argument\n [`duration_subsec`]: https://rust-lang.github.io/rust-clippy/master/index.html#duration_subsec\n [`else_if_without_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#else_if_without_else\n@@ -3413,6 +3423,8 @@ Released 2018-09-13\n [`fn_to_numeric_cast_any`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_any\n [`fn_to_numeric_cast_with_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_with_truncation\n [`for_kv_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map\n+[`for_loop_over_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loop_over_option\n+[`for_loop_over_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loop_over_result\n [`for_loops_over_fallibles`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loops_over_fallibles\n [`forget_copy`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_copy\n [`forget_non_drop`]: https://rust-lang.github.io/rust-clippy/master/index.html#forget_non_drop\n@@ -3425,9 +3437,11 @@ Released 2018-09-13\n [`future_not_send`]: https://rust-lang.github.io/rust-clippy/master/index.html#future_not_send\n [`get_last_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_last_with_len\n [`get_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#get_unwrap\n+[`identity_conversion`]: https://rust-lang.github.io/rust-clippy/master/index.html#identity_conversion\n [`identity_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#identity_op\n [`if_let_mutex`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_mutex\n [`if_let_redundant_pattern_matching`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_redundant_pattern_matching\n+[`if_let_some_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_some_result\n [`if_not_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\n [`if_same_then_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\n [`if_then_some_else_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_then_some_else_none\n@@ -3456,8 +3470,11 @@ Released 2018-09-13\n [`int_plus_one`]: https://rust-lang.github.io/rust-clippy/master/index.html#int_plus_one\n [`integer_arithmetic`]: https://rust-lang.github.io/rust-clippy/master/index.html#integer_arithmetic\n [`integer_division`]: https://rust-lang.github.io/rust-clippy/master/index.html#integer_division\n+[`into_iter_on_array`]: https://rust-lang.github.io/rust-clippy/master/index.html#into_iter_on_array\n [`into_iter_on_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#into_iter_on_ref\n+[`invalid_atomic_ordering`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_atomic_ordering\n [`invalid_null_ptr_usage`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_null_ptr_usage\n+[`invalid_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_ref\n [`invalid_regex`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_regex\n [`invalid_upcast_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#invalid_upcast_comparisons\n [`invisible_characters`]: https://rust-lang.github.io/rust-clippy/master/index.html#invisible_characters\n@@ -3531,6 +3548,7 @@ Released 2018-09-13\n [`match_wild_err_arm`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_wild_err_arm\n [`match_wildcard_for_single_variants`]: https://rust-lang.github.io/rust-clippy/master/index.html#match_wildcard_for_single_variants\n [`maybe_infinite_iter`]: https://rust-lang.github.io/rust-clippy/master/index.html#maybe_infinite_iter\n+[`mem_discriminant_non_enum`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_discriminant_non_enum\n [`mem_forget`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_forget\n [`mem_replace_option_with_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_option_with_none\n [`mem_replace_with_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#mem_replace_with_default\n@@ -3549,6 +3567,7 @@ Released 2018-09-13\n [`missing_spin_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#missing_spin_loop\n [`mistyped_literal_suffixes`]: https://rust-lang.github.io/rust-clippy/master/index.html#mistyped_literal_suffixes\n [`mixed_case_hex_literals`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_case_hex_literals\n+[`mixed_read_write_in_expression`]: https://rust-lang.github.io/rust-clippy/master/index.html#mixed_read_write_in_expression\n [`mod_module_files`]: https://rust-lang.github.io/rust-clippy/master/index.html#mod_module_files\n [`module_inception`]: https://rust-lang.github.io/rust-clippy/master/index.html#module_inception\n [`module_name_repetitions`]: https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions\n@@ -3592,6 +3611,7 @@ Released 2018-09-13\n [`never_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#never_loop\n [`new_ret_no_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#new_ret_no_self\n [`new_without_default`]: https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default\n+[`new_without_default_derive`]: https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default_derive\n [`no_effect`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect\n [`no_effect_underscore_binding`]: https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding\n [`non_ascii_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#non_ascii_literal\n@@ -3605,19 +3625,25 @@ Released 2018-09-13\n [`ok_expect`]: https://rust-lang.github.io/rust-clippy/master/index.html#ok_expect\n [`only_used_in_recursion`]: https://rust-lang.github.io/rust-clippy/master/index.html#only_used_in_recursion\n [`op_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#op_ref\n+[`option_and_then_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_and_then_some\n [`option_as_ref_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_as_ref_deref\n [`option_env_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_env_unwrap\n+[`option_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_expect_used\n [`option_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_filter_map\n [`option_if_let_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else\n [`option_map_or_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_or_none\n [`option_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unit_fn\n+[`option_map_unwrap_or`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unwrap_or\n+[`option_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_map_unwrap_or_else\n [`option_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_option\n+[`option_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#option_unwrap_used\n [`or_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call\n [`or_then_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#or_then_unwrap\n [`out_of_bounds_indexing`]: https://rust-lang.github.io/rust-clippy/master/index.html#out_of_bounds_indexing\n [`overflow_check_conditional`]: https://rust-lang.github.io/rust-clippy/master/index.html#overflow_check_conditional\n [`panic`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic\n [`panic_in_result_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_in_result_fn\n+[`panic_params`]: https://rust-lang.github.io/rust-clippy/master/index.html#panic_params\n [`panicking_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#panicking_unwrap\n [`partialeq_ne_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#partialeq_ne_impl\n [`path_buf_push_overwrite`]: https://rust-lang.github.io/rust-clippy/master/index.html#path_buf_push_overwrite\n@@ -3642,6 +3668,7 @@ Released 2018-09-13\n [`range_step_by_zero`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_step_by_zero\n [`range_zip_with_len`]: https://rust-lang.github.io/rust-clippy/master/index.html#range_zip_with_len\n [`rc_buffer`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_buffer\n+[`rc_clone_in_vec_init`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_clone_in_vec_init\n [`rc_mutex`]: https://rust-lang.github.io/rust-clippy/master/index.html#rc_mutex\n [`recursive_format_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#recursive_format_impl\n [`redundant_allocation`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_allocation\n@@ -3658,14 +3685,18 @@ Released 2018-09-13\n [`redundant_slicing`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_slicing\n [`redundant_static_lifetimes`]: https://rust-lang.github.io/rust-clippy/master/index.html#redundant_static_lifetimes\n [`ref_binding_to_reference`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_binding_to_reference\n+[`ref_in_deref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_in_deref\n [`ref_option_ref`]: https://rust-lang.github.io/rust-clippy/master/index.html#ref_option_ref\n [`regex_macro`]: https://rust-lang.github.io/rust-clippy/master/index.html#regex_macro\n [`repeat_once`]: https://rust-lang.github.io/rust-clippy/master/index.html#repeat_once\n [`replace_consts`]: https://rust-lang.github.io/rust-clippy/master/index.html#replace_consts\n [`rest_pat_in_fully_bound_structs`]: https://rust-lang.github.io/rust-clippy/master/index.html#rest_pat_in_fully_bound_structs\n+[`result_expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_expect_used\n [`result_map_or_into_option`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_or_into_option\n [`result_map_unit_fn`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unit_fn\n+[`result_map_unwrap_or_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_map_unwrap_or_else\n [`result_unit_err`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unit_err\n+[`result_unwrap_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#result_unwrap_used\n [`return_self_not_must_use`]: https://rust-lang.github.io/rust-clippy/master/index.html#return_self_not_must_use\n [`reversed_empty_ranges`]: https://rust-lang.github.io/rust-clippy/master/index.html#reversed_empty_ranges\n [`same_functions_in_if_condition`]: https://rust-lang.github.io/rust-clippy/master/index.html#same_functions_in_if_condition\n@@ -3684,10 +3715,12 @@ Released 2018-09-13\n [`short_circuit_statement`]: https://rust-lang.github.io/rust-clippy/master/index.html#short_circuit_statement\n [`should_assert_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#should_assert_eq\n [`should_implement_trait`]: https://rust-lang.github.io/rust-clippy/master/index.html#should_implement_trait\n+[`significant_drop_in_scrutinee`]: https://rust-lang.github.io/rust-clippy/master/index.html#significant_drop_in_scrutinee\n [`similar_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#similar_names\n [`single_char_add_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_add_str\n [`single_char_lifetime_names`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_lifetime_names\n [`single_char_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_pattern\n+[`single_char_push_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_char_push_str\n [`single_component_path_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_component_path_imports\n [`single_element_loop`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_element_loop\n [`single_match`]: https://rust-lang.github.io/rust-clippy/master/index.html#single_match\n@@ -3707,6 +3740,7 @@ Released 2018-09-13\n [`string_to_string`]: https://rust-lang.github.io/rust-clippy/master/index.html#string_to_string\n [`strlen_on_c_strings`]: https://rust-lang.github.io/rust-clippy/master/index.html#strlen_on_c_strings\n [`struct_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools\n+[`stutter`]: https://rust-lang.github.io/rust-clippy/master/index.html#stutter\n [`suboptimal_flops`]: https://rust-lang.github.io/rust-clippy/master/index.html#suboptimal_flops\n [`suspicious_arithmetic_impl`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_arithmetic_impl\n [`suspicious_assignment_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_assignment_formatting\n@@ -3718,7 +3752,9 @@ Released 2018-09-13\n [`suspicious_unary_op_formatting`]: https://rust-lang.github.io/rust-clippy/master/index.html#suspicious_unary_op_formatting\n [`tabs_in_doc_comments`]: https://rust-lang.github.io/rust-clippy/master/index.html#tabs_in_doc_comments\n [`temporary_assignment`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_assignment\n+[`temporary_cstring_as_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#temporary_cstring_as_ptr\n [`to_digit_is_some`]: https://rust-lang.github.io/rust-clippy/master/index.html#to_digit_is_some\n+[`to_string_in_display`]: https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_display\n [`to_string_in_format_args`]: https://rust-lang.github.io/rust-clippy/master/index.html#to_string_in_format_args\n [`todo`]: https://rust-lang.github.io/rust-clippy/master/index.html#todo\n [`too_many_arguments`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments\n@@ -3753,6 +3789,7 @@ Released 2018-09-13\n [`unit_cmp`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_cmp\n [`unit_hash`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_hash\n [`unit_return_expecting_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#unit_return_expecting_ord\n+[`unknown_clippy_lints`]: https://rust-lang.github.io/rust-clippy/master/index.html#unknown_clippy_lints\n [`unnecessary_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast\n [`unnecessary_filter_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_filter_map\n [`unnecessary_find_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_find_map\n@@ -3782,6 +3819,7 @@ Released 2018-09-13\n [`unused_async`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_async\n [`unused_collect`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_collect\n [`unused_io_amount`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_io_amount\n+[`unused_label`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_label\n [`unused_self`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_self\n [`unused_unit`]: https://rust-lang.github.io/rust-clippy/master/index.html#unused_unit\n [`unusual_byte_groupings`]: https://rust-lang.github.io/rust-clippy/master/index.html#unusual_byte_groupings\n@@ -3822,5 +3860,6 @@ Released 2018-09-13\n [`zero_prefixed_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_prefixed_literal\n [`zero_ptr`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr\n [`zero_sized_map_values`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_sized_map_values\n+[`zero_width_space`]: https://rust-lang.github.io/rust-clippy/master/index.html#zero_width_space\n [`zst_offset`]: https://rust-lang.github.io/rust-clippy/master/index.html#zst_offset\n <!-- end autogenerated links to lint list -->"}, {"sha": "6ab2bd59137fa0ef56e13933b9b001ca06fe1bfa", "filename": "src/tools/clippy/CONTRIBUTING.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2FCONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2FCONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCONTRIBUTING.md?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -67,9 +67,9 @@ and resolved paths.\n \n [`T-AST`] issues will generally need you to match against a predefined syntax structure.\n To figure out how this syntax structure is encoded in the AST, it is recommended to run\n-`rustc -Z ast-json` on an example of the structure and compare with the [nodes in the AST docs].\n+`rustc -Z unpretty=ast-tree` on an example of the structure and compare with the [nodes in the AST docs].\n Usually the lint will end up to be a nested series of matches and ifs, [like so][deep-nesting].\n-But we can make it nest-less by using [if_chain] macro, [like this][nest-less].\n+But we can make it nest-less by using [let chains], [like this][nest-less].\n \n [`E-medium`] issues are generally pretty easy too, though it's recommended you work on an [`good-first-issue`]\n first. Sometimes they are only somewhat involved code wise, but not difficult per-se.\n@@ -87,9 +87,9 @@ an AST expression). `match_def_path()` in Clippy's `utils` module can also be us\n [`E-medium`]: https://github.com/rust-lang/rust-clippy/labels/E-medium\n [`ty`]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/ty\n [nodes in the AST docs]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_ast/ast/\n-[deep-nesting]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/mem_forget.rs#L29-L43\n-[if_chain]: https://docs.rs/if_chain/*/if_chain\n-[nest-less]: https://github.com/rust-lang/rust-clippy/blob/557f6848bd5b7183f55c1e1522a326e9e1df6030/clippy_lints/src/bit_mask.rs#L124-L150\n+[deep-nesting]: https://github.com/rust-lang/rust-clippy/blob/5e4f0922911536f80d9591180fa604229ac13939/clippy_lints/src/mem_forget.rs#L31-L45\n+[let chains]: https://github.com/rust-lang/rust/pull/94927\n+[nest-less]: https://github.com/rust-lang/rust-clippy/blob/5e4f0922911536f80d9591180fa604229ac13939/clippy_lints/src/bit_mask.rs#L133-L159\n \n ## Writing code\n "}, {"sha": "373e720b0d5c07024e2d253cb8191bfcb54c01eb", "filename": "src/tools/clippy/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCargo.toml?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.62\"\n+version = \"0.1.63\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\"\n@@ -25,6 +25,7 @@ clippy_lints = { path = \"clippy_lints\" }\n semver = \"1.0\"\n rustc_tools_util = { path = \"rustc_tools_util\" }\n tempfile = { version = \"3.2\", optional = true }\n+termize = \"0.1\"\n \n [dev-dependencies]\n compiletest_rs = { version = \"0.7.1\", features = [\"tmp\"] }"}, {"sha": "9e463aa741c758d7bdf3023d6eff1b0f4d353ba6", "filename": "src/tools/clippy/clippy_dev/src/lint.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flint.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -13,7 +13,7 @@ fn exit_if_err(status: io::Result<ExitStatus>) {\n     }\n }\n \n-pub fn run(path: &str) {\n+pub fn run<'a>(path: &str, args: impl Iterator<Item = &'a str>) {\n     let is_file = match fs::metadata(path) {\n         Ok(metadata) => metadata.is_file(),\n         Err(e) => {\n@@ -30,6 +30,7 @@ pub fn run(path: &str) {\n                 .args([\"-Z\", \"no-codegen\"])\n                 .args([\"--edition\", \"2021\"])\n                 .arg(path)\n+                .args(args)\n                 .status(),\n         );\n     } else {\n@@ -42,6 +43,8 @@ pub fn run(path: &str) {\n             .expect(\"failed to create tempdir\");\n \n         let status = Command::new(cargo_clippy_path())\n+            .arg(\"clippy\")\n+            .args(args)\n             .current_dir(path)\n             .env(\"CARGO_TARGET_DIR\", target.as_ref())\n             .status();"}, {"sha": "d5cd7ca96c0c0421cd370abda2ecb5177e03aa97", "filename": "src/tools/clippy/clippy_dev/src/main.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fmain.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -76,7 +76,8 @@ fn main() {\n         },\n         (\"lint\", Some(matches)) => {\n             let path = matches.value_of(\"path\").unwrap();\n-            lint::run(path);\n+            let args = matches.values_of(\"args\").into_iter().flatten();\n+            lint::run(path, args);\n         },\n         (\"rename_lint\", Some(matches)) => {\n             let old_name = matches.value_of(\"old_name\").unwrap();\n@@ -123,7 +124,7 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                  * the lint count in README.md is correct\\n \\\n                  * the changelog contains markdown link references at the bottom\\n \\\n                  * all lint groups include the correct lints\\n \\\n-                 * lint modules in `clippy_lints/*` are visible in `src/lifb.rs` via `pub mod`\\n \\\n+                 * lint modules in `clippy_lints/*` are visible in `src/lib.rs` via `pub mod`\\n \\\n                  * all lints are registered in the lint store\",\n                 )\n                 .arg(Arg::with_name(\"print-only\").long(\"print-only\").help(\n@@ -278,11 +279,23 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                         Lint a package directory:\n                             cargo dev lint tests/ui-cargo/wildcard_dependencies/fail\n                             cargo dev lint ~/my-project\n+\n+                        Run rustfix:\n+                            cargo dev lint ~/my-project -- --fix\n+\n+                        Set lint levels:\n+                            cargo dev lint file.rs -- -W clippy::pedantic\n+                            cargo dev lint ~/my-project -- -- -W clippy::pedantic\n                 \"})\n                 .arg(\n                     Arg::with_name(\"path\")\n                         .required(true)\n                         .help(\"The path to a file or package directory to lint\"),\n+                )\n+                .arg(\n+                    Arg::with_name(\"args\")\n+                        .multiple(true)\n+                        .help(\"Pass extra arguments to cargo/clippy-driver\"),\n                 ),\n         )\n         .subcommand("}, {"sha": "07d196387887cc84ede7b05f5fef5eb9832e8eed", "filename": "src/tools/clippy/clippy_dev/src/new_lint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fnew_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fnew_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fnew_lint.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -133,7 +133,7 @@ fn to_camel_case(name: &str) -> String {\n         .collect()\n }\n \n-fn get_stabilisation_version() -> String {\n+fn get_stabilization_version() -> String {\n     fn parse_manifest(contents: &str) -> Option<String> {\n         let version = contents\n             .lines()\n@@ -199,7 +199,7 @@ fn get_lint_file_contents(lint: &LintData<'_>, enable_msrv: bool) -> String {\n         },\n     };\n \n-    let version = get_stabilisation_version();\n+    let version = get_stabilization_version();\n     let lint_name = lint.name;\n     let category = lint.category;\n     let name_camel = to_camel_case(lint.name);"}, {"sha": "5024e63bfa738edcfe7e6f30de8d28eded58d722", "filename": "src/tools/clippy/clippy_dev/src/update_lints.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fupdate_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fupdate_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Fupdate_lints.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -17,7 +17,7 @@ const GENERATED_FILE_COMMENT: &str = \"// This file was generated by `cargo dev u\n \n const DOCS_LINK: &str = \"https://rust-lang.github.io/rust-clippy/master/index.html\";\n \n-#[derive(Clone, Copy, PartialEq)]\n+#[derive(Clone, Copy, PartialEq, Eq)]\n pub enum UpdateMode {\n     Check,\n     Change,\n@@ -66,8 +66,13 @@ fn generate_lint_files(\n         |res| {\n             for lint in usable_lints\n                 .iter()\n-                .map(|l| &l.name)\n-                .chain(deprecated_lints.iter().map(|l| &l.name))\n+                .map(|l| &*l.name)\n+                .chain(deprecated_lints.iter().map(|l| &*l.name))\n+                .chain(\n+                    renamed_lints\n+                        .iter()\n+                        .map(|l| l.old_name.strip_prefix(\"clippy::\").unwrap_or(&l.old_name)),\n+                )\n                 .sorted()\n             {\n                 writeln!(res, \"[`{}`]: {}#{}\", lint, DOCS_LINK, lint).unwrap();\n@@ -372,7 +377,7 @@ fn exit_with_failure() {\n }\n \n /// Lint data parsed from the Clippy source code.\n-#[derive(Clone, PartialEq, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n struct Lint {\n     name: String,\n     group: String,\n@@ -414,7 +419,7 @@ impl Lint {\n     }\n }\n \n-#[derive(Clone, PartialEq, Debug)]\n+#[derive(Clone, PartialEq, Eq, Debug)]\n struct DeprecatedLint {\n     name: String,\n     reason: String,"}, {"sha": "0a3f04da35705ccb479bd918d07df089099b5b9a", "filename": "src/tools/clippy/clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2FCargo.toml?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_lints\"\n-version = \"0.1.62\"\n+version = \"0.1.63\"\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n readme = \"README.md\""}, {"sha": "da1b646f4777a006ee434094d0b9c0e113782508", "filename": "src/tools/clippy/clippy_lints/src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fapprox_const.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -87,9 +87,7 @@ impl ApproxConstant {\n         let s = s.as_str();\n         if s.parse::<f64>().is_ok() {\n             for &(constant, name, min_digits, msrv) in &KNOWN_CONSTS {\n-                if is_approx_const(constant, s, min_digits)\n-                    && msrv.as_ref().map_or(true, |msrv| meets_msrv(self.msrv.as_ref(), msrv))\n-                {\n+                if is_approx_const(constant, s, min_digits) && msrv.map_or(true, |msrv| meets_msrv(self.msrv, msrv)) {\n                     span_lint_and_help(\n                         cx,\n                         APPROX_CONSTANT,"}, {"sha": "4c2d3366483af094b5d5aa539ae5042aabf1b438", "filename": "src/tools/clippy/clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fassign_ops.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -50,7 +50,7 @@ declare_clippy_lint! {\n     /// ### Known problems\n     /// Clippy cannot know for sure if `a op= a op b` should have\n     /// been `a = a op a op b` or `a = a op b`/`a op= b`. Therefore, it suggests both.\n-    /// If `a op= a op b` is really the correct behaviour it should be\n+    /// If `a op= a op b` is really the correct behavior it should be\n     /// written as `a = a op a op b` as it's less confusing.\n     ///\n     /// ### Example"}, {"sha": "3de91f3d24a9147ef7cbdfc89f05c020cdfac5c3", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::msrvs;\n use clippy_utils::source::{first_line_of_span, is_present_in_source, snippet_opt, without_block_comments};\n use clippy_utils::{extract_msrv_attr, meets_msrv};\n use if_chain::if_chain;\n-use rustc_ast::{AttrKind, AttrStyle, Attribute, Lit, LitKind, MacArgs, MacArgsEq, MetaItemKind, NestedMetaItem};\n+use rustc_ast::{AttrKind, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n use rustc_errors::Applicability;\n use rustc_hir::{\n     Block, Expr, ExprKind, ImplItem, ImplItemKind, Item, ItemKind, StmtKind, TraitFn, TraitItem, TraitItemKind,\n@@ -586,21 +586,10 @@ impl EarlyLintPass for EarlyAttributes {\n \n fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::Item) {\n     for attr in &item.attrs {\n-        let attr_item = if let AttrKind::Normal(ref attr, _) = attr.kind {\n-            attr\n-        } else {\n-            return;\n-        };\n-\n-        if attr.style == AttrStyle::Outer {\n-            if let MacArgs::Eq(_, MacArgsEq::Ast(expr)) = &attr_item.args\n-                && !matches!(expr.kind, rustc_ast::ExprKind::Lit(..)) {\n-                return;\n-            }\n-            if attr_item.args.inner_tokens().is_empty() || !is_present_in_source(cx, attr.span) {\n-                return;\n-            }\n-\n+        if matches!(attr.kind, AttrKind::Normal(..))\n+            && attr.style == AttrStyle::Outer\n+            && is_present_in_source(cx, attr.span)\n+        {\n             let begin_of_attr_to_item = Span::new(attr.span.lo(), item.span.lo(), item.span.ctxt(), item.span.parent());\n             let end_of_attr_to_item = Span::new(attr.span.hi(), item.span.lo(), item.span.ctxt(), item.span.parent());\n \n@@ -624,7 +613,7 @@ fn check_empty_line_after_outer_attr(cx: &EarlyContext<'_>, item: &rustc_ast::It\n \n fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute, msrv: Option<RustcVersion>) {\n     if_chain! {\n-        if meets_msrv(msrv.as_ref(), &msrvs::TOOL_ATTRIBUTES);\n+        if meets_msrv(msrv, msrvs::TOOL_ATTRIBUTES);\n         // check cfg_attr\n         if attr.has_name(sym::cfg_attr);\n         if let Some(items) = attr.meta_item_list();"}, {"sha": "dc7e400fdc28156ed88bea412dcc8b92158ef654", "filename": "src/tools/clippy/clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbit_mask.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,7 +1,6 @@\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use clippy_utils::sugg::Sugg;\n-use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n@@ -130,32 +129,33 @@ impl<'tcx> LateLintPass<'tcx> for BitMask {\n                 }\n             }\n         }\n-        if_chain! {\n-            if let ExprKind::Binary(op, left, right) = &e.kind;\n-            if BinOpKind::Eq == op.node;\n-            if let ExprKind::Binary(op1, left1, right1) = &left.kind;\n-            if BinOpKind::BitAnd == op1.node;\n-            if let ExprKind::Lit(lit) = &right1.kind;\n-            if let LitKind::Int(n, _) = lit.node;\n-            if let ExprKind::Lit(lit1) = &right.kind;\n-            if let LitKind::Int(0, _) = lit1.node;\n-            if n.leading_zeros() == n.count_zeros();\n-            if n > u128::from(self.verbose_bit_mask_threshold);\n-            then {\n-                span_lint_and_then(cx,\n-                                   VERBOSE_BIT_MASK,\n-                                   e.span,\n-                                   \"bit mask could be simplified with a call to `trailing_zeros`\",\n-                                   |diag| {\n+\n+        if let ExprKind::Binary(op, left, right) = &e.kind\n+            && BinOpKind::Eq == op.node\n+            && let ExprKind::Binary(op1, left1, right1) = &left.kind\n+            && BinOpKind::BitAnd == op1.node\n+            && let ExprKind::Lit(lit) = &right1.kind\n+            && let LitKind::Int(n, _) = lit.node\n+            && let ExprKind::Lit(lit1) = &right.kind\n+            && let LitKind::Int(0, _) = lit1.node\n+            && n.leading_zeros() == n.count_zeros()\n+            && n > u128::from(self.verbose_bit_mask_threshold)\n+        {\n+            span_lint_and_then(\n+                cx,\n+                VERBOSE_BIT_MASK,\n+                e.span,\n+                \"bit mask could be simplified with a call to `trailing_zeros`\",\n+                |diag| {\n                     let sugg = Sugg::hir(cx, left1, \"...\").maybe_par();\n                     diag.span_suggestion(\n                         e.span,\n                         \"try\",\n                         format!(\"{}.trailing_zeros() >= {}\", sugg, n.count_ones()),\n                         Applicability::MaybeIncorrect,\n                     );\n-                });\n-            }\n+                },\n+            );\n         }\n     }\n }"}, {"sha": "0adb6327164e77f642b391dcad553ea0066fa5d6", "filename": "src/tools/clippy/clippy_lints/src/booleans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbooleans.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -137,7 +137,7 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n         }\n         for (n, expr) in self.terminals.iter().enumerate() {\n             if eq_expr_value(self.cx, e, expr) {\n-                #[allow(clippy::cast_possible_truncation)]\n+                #[expect(clippy::cast_possible_truncation)]\n                 return Ok(Bool::Term(n as u8));\n             }\n \n@@ -149,15 +149,15 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n                 if eq_expr_value(self.cx, e_lhs, expr_lhs);\n                 if eq_expr_value(self.cx, e_rhs, expr_rhs);\n                 then {\n-                    #[allow(clippy::cast_possible_truncation)]\n+                    #[expect(clippy::cast_possible_truncation)]\n                     return Ok(Bool::Not(Box::new(Bool::Term(n as u8))));\n                 }\n             }\n         }\n         let n = self.terminals.len();\n         self.terminals.push(e);\n         if n < 32 {\n-            #[allow(clippy::cast_possible_truncation)]\n+            #[expect(clippy::cast_possible_truncation)]\n             Ok(Bool::Term(n as u8))\n         } else {\n             Err(\"too many literals\".to_owned())"}, {"sha": "0993adbae2e6bfdb37c27b85335549c83c773dc9", "filename": "src/tools/clippy/clippy_lints/src/borrow_as_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fborrow_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fborrow_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fborrow_as_ptr.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -57,7 +57,7 @@ impl BorrowAsPtr {\n \n impl<'tcx> LateLintPass<'tcx> for BorrowAsPtr {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::BORROW_AS_PTR) {\n+        if !meets_msrv(self.msrv, msrvs::BORROW_AS_PTR) {\n             return;\n         }\n "}, {"sha": "6bac6bf83f8e5480e735854a695c5c0dbbafc98d", "filename": "src/tools/clippy/clippy_lints/src/casts/cast_abs_to_unsigned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_abs_to_unsigned.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -16,10 +16,10 @@ pub(super) fn check(\n     cast_expr: &Expr<'_>,\n     cast_from: Ty<'_>,\n     cast_to: Ty<'_>,\n-    msrv: &Option<RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) {\n     if_chain! {\n-        if meets_msrv(msrv.as_ref(), &msrvs::UNSIGNED_ABS);\n+        if meets_msrv(msrv, msrvs::UNSIGNED_ABS);\n         if cast_from.is_integral();\n         if cast_to.is_integral();\n         if cast_from.is_signed();"}, {"sha": "938458e30cadc6082697568ebdd7a9a413ebfa4d", "filename": "src/tools/clippy/clippy_lints/src/casts/cast_lossless.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -16,7 +16,7 @@ pub(super) fn check(\n     cast_op: &Expr<'_>,\n     cast_from: Ty<'_>,\n     cast_to: Ty<'_>,\n-    msrv: &Option<RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) {\n     if !should_lint(cx, expr, cast_from, cast_to, msrv) {\n         return;\n@@ -68,7 +68,7 @@ fn should_lint(\n     expr: &Expr<'_>,\n     cast_from: Ty<'_>,\n     cast_to: Ty<'_>,\n-    msrv: &Option<RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) -> bool {\n     // Do not suggest using From in consts/statics until it is valid to do so (see #2267).\n     if in_constant(cx, expr.hir_id) {\n@@ -93,9 +93,9 @@ fn should_lint(\n             } else {\n                 64\n             };\n-            from_nbits < to_nbits\n+            !is_isize_or_usize(cast_from) && from_nbits < to_nbits\n         },\n-        (false, true) if matches!(cast_from.kind(), ty::Bool) && meets_msrv(msrv.as_ref(), &msrvs::FROM_BOOL) => true,\n+        (false, true) if matches!(cast_from.kind(), ty::Bool) && meets_msrv(msrv, msrvs::FROM_BOOL) => true,\n         (_, _) => {\n             matches!(cast_from.kind(), ty::Float(FloatTy::F32)) && matches!(cast_to.kind(), ty::Float(FloatTy::F64))\n         },"}, {"sha": "027c660ce3b2484014a2f5ea39df937f0cf93df8", "filename": "src/tools/clippy/clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -8,9 +8,9 @@ use rustc_semver::RustcVersion;\n \n use super::CAST_SLICE_DIFFERENT_SIZES;\n \n-pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: &Option<RustcVersion>) {\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: Option<RustcVersion>) {\n     // suggestion is invalid if `ptr::slice_from_raw_parts` does not exist\n-    if !meets_msrv(msrv.as_ref(), &msrvs::PTR_SLICE_RAW_PARTS) {\n+    if !meets_msrv(msrv, msrvs::PTR_SLICE_RAW_PARTS) {\n         return;\n     }\n \n@@ -121,7 +121,7 @@ fn expr_cast_chain_tys<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) -> Optio\n         let to_slice_ty = get_raw_slice_ty_mut(cast_to)?;\n \n         // If the expression that makes up the source of this cast is itself a cast, recursively\n-        // call `expr_cast_chain_tys` and update the end type with the final tartet type.\n+        // call `expr_cast_chain_tys` and update the end type with the final target type.\n         // Otherwise, this cast is not immediately nested, just construct the info for this cast\n         if let Some(prev_info) = expr_cast_chain_tys(cx, cast_expr) {\n             Some(CastChainInfo {"}, {"sha": "daf3b7b4ce4fec2c5dcc0ee446d327dc9e618fd7", "filename": "src/tools/clippy/clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -306,7 +306,7 @@ declare_clippy_lint! {\n     /// Checks for casts of `&T` to `&mut T` anywhere in the code.\n     ///\n     /// ### Why is this bad?\n-    /// It\u2019s basically guaranteed to be undefined behaviour.\n+    /// It\u2019s basically guaranteed to be undefined behavior.\n     /// `UnsafeCell` is the only way to obtain aliasable data that is considered\n     /// mutable.\n     ///\n@@ -413,6 +413,7 @@ declare_clippy_lint! {\n }\n \n declare_clippy_lint! {\n+    /// ### What it does\n     /// Checks for `as` casts between raw pointers to slices with differently sized elements.\n     ///\n     /// ### Why is this bad?\n@@ -531,7 +532,7 @@ impl_lint_pass!(Casts => [\n impl<'tcx> LateLintPass<'tcx> for Casts {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if !in_external_macro(cx.sess(), expr.span) {\n-            ptr_as_ptr::check(cx, expr, &self.msrv);\n+            ptr_as_ptr::check(cx, expr, self.msrv);\n         }\n \n         if expr.span.from_expansion() {\n@@ -561,18 +562,18 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                     cast_possible_wrap::check(cx, expr, cast_from, cast_to);\n                     cast_precision_loss::check(cx, expr, cast_from, cast_to);\n                     cast_sign_loss::check(cx, expr, cast_expr, cast_from, cast_to);\n-                    cast_abs_to_unsigned::check(cx, expr, cast_expr, cast_from, cast_to, &self.msrv);\n+                    cast_abs_to_unsigned::check(cx, expr, cast_expr, cast_from, cast_to, self.msrv);\n                 }\n-                cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to, &self.msrv);\n+                cast_lossless::check(cx, expr, cast_expr, cast_from, cast_to, self.msrv);\n                 cast_enum_constructor::check(cx, expr, cast_expr, cast_from);\n             }\n         }\n \n         cast_ref_to_mut::check(cx, expr);\n         cast_ptr_alignment::check(cx, expr);\n         char_lit_as_u8::check(cx, expr);\n-        ptr_as_ptr::check(cx, expr, &self.msrv);\n-        cast_slice_different_sizes::check(cx, expr, &self.msrv);\n+        ptr_as_ptr::check(cx, expr, self.msrv);\n+        cast_slice_different_sizes::check(cx, expr, self.msrv);\n     }\n \n     extract_msrv_attr!(LateContext);"}, {"sha": "46d45d09661ae6d220eeebe2ab2d1c276a423deb", "filename": "src/tools/clippy/clippy_lints/src/casts/ptr_as_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -12,8 +12,8 @@ use rustc_semver::RustcVersion;\n \n use super::PTR_AS_PTR;\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: &Option<RustcVersion>) {\n-    if !meets_msrv(msrv.as_ref(), &msrvs::POINTER_CAST) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, msrv: Option<RustcVersion>) {\n+    if !meets_msrv(msrv, msrvs::POINTER_CAST) {\n         return;\n     }\n "}, {"sha": "7eeaaa0192147d822ab50be86d1238b044adce0a", "filename": "src/tools/clippy/clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -30,7 +30,6 @@ declare_clippy_lint! {\n     /// Could be written:\n     ///\n     /// ```rust\n-    /// # use std::convert::TryFrom;\n     /// # let foo = 1;\n     /// # let _ =\n     /// i32::try_from(foo).is_ok()\n@@ -57,7 +56,7 @@ impl_lint_pass!(CheckedConversions => [CHECKED_CONVERSIONS]);\n \n impl<'tcx> LateLintPass<'tcx> for CheckedConversions {\n     fn check_expr(&mut self, cx: &LateContext<'_>, item: &Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::TRY_FROM) {\n+        if !meets_msrv(self.msrv, msrvs::TRY_FROM) {\n             return;\n         }\n \n@@ -123,7 +122,7 @@ struct Conversion<'a> {\n }\n \n /// The kind of conversion that is checked\n-#[derive(Copy, Clone, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n enum ConversionType {\n     SignedToUnsigned,\n     SignedToSigned,"}, {"sha": "317c4bfb3226ef1f5209a23ff6ee1b56d2b540f9", "filename": "src/tools/clippy/clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -48,7 +48,7 @@ impl CognitiveComplexity {\n impl_lint_pass!(CognitiveComplexity => [COGNITIVE_COMPLEXITY]);\n \n impl CognitiveComplexity {\n-    #[allow(clippy::cast_possible_truncation)]\n+    #[expect(clippy::cast_possible_truncation)]\n     fn check<'tcx>(\n         &mut self,\n         cx: &LateContext<'tcx>,\n@@ -70,7 +70,7 @@ impl CognitiveComplexity {\n         let ret_adjust = if is_type_diagnostic_item(cx, ret_ty, sym::Result) {\n             returns\n         } else {\n-            #[allow(clippy::integer_division)]\n+            #[expect(clippy::integer_division)]\n             (returns / 2)\n         };\n "}, {"sha": "ec55009f347d3704df40e3ca6c9402dec3acd51c", "filename": "src/tools/clippy/clippy_lints/src/collapsible_match.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -109,7 +109,10 @@ fn check_arm<'tcx>(\n             (Some(a), Some(b)) => SpanlessEq::new(cx).eq_expr(a, b),\n         };\n         // the binding must not be used in the if guard\n-        if outer_guard.map_or(true, |(Guard::If(e) | Guard::IfLet(Let { init: e, .. }))| !is_local_used(cx, *e, binding_id));\n+        if outer_guard.map_or(\n+            true,\n+            |(Guard::If(e) | Guard::IfLet(Let { init: e, .. }))| !is_local_used(cx, *e, binding_id)\n+        );\n         // ...or anywhere in the inner expression\n         if match inner {\n             IfLetOrMatch::IfLet(_, _, body, els) => {"}, {"sha": "f99d793c201d76c4c20584c48ce98e8af0d48868", "filename": "src/tools/clippy/clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdbg_macro.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::is_in_test_function;\n use clippy_utils::macros::root_macro_call_first_node;\n use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{is_in_cfg_test, is_in_test_function};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -37,7 +37,7 @@ impl LateLintPass<'_> for DbgMacro {\n         let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return };\n         if cx.tcx.is_diagnostic_item(sym::dbg_macro, macro_call.def_id) {\n             // we make an exception for test code\n-            if is_in_test_function(cx.tcx, expr.hir_id) {\n+            if is_in_test_function(cx.tcx, expr.hir_id) || is_in_cfg_test(cx.tcx, expr.hir_id) {\n                 return;\n             }\n             let mut applicability = Applicability::MachineApplicable;"}, {"sha": "243dfd3a46183f0fefdec6b8c83bddb4ea911873", "filename": "src/tools/clippy/clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -110,7 +110,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n         }\n     }\n \n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     fn check_block(&mut self, cx: &LateContext<'tcx>, block: &Block<'tcx>) {\n         // start from the `let mut _ = _::default();` and look at all the following\n         // statements, see if they re-assign the fields of the binding"}, {"sha": "3d9f9ed41ce189eb5ac48c5f7903f453c374371f", "filename": "src/tools/clippy/clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -116,7 +116,6 @@ impl<'a, 'tcx> NumericFallbackVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n-    #[allow(clippy::too_many_lines)]\n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         match &expr.kind {\n             ExprKind::Call(func, args) => {"}, {"sha": "d559ad423df5f32f5ef8c3709487df507a92a028", "filename": "src/tools/clippy/clippy_lints/src/default_union_representation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_union_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_union_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault_union_representation.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -25,7 +25,7 @@ declare_clippy_lint! {\n     ///\n     /// fn main() {\n     ///     let _x: u32 = unsafe {\n-    ///         Foo { a: 0_i32 }.b // Undefined behaviour: `b` is allowed to be padding\n+    ///         Foo { a: 0_i32 }.b // Undefined behavior: `b` is allowed to be padding\n     ///     };\n     /// }\n     /// ```\n@@ -39,7 +39,7 @@ declare_clippy_lint! {\n     ///\n     /// fn main() {\n     ///     let _x: u32 = unsafe {\n-    ///         Foo { a: 0_i32 }.b // Now defined behaviour, this is just an i32 -> u32 transmute\n+    ///         Foo { a: 0_i32 }.b // Now defined behavior, this is just an i32 -> u32 transmute\n     ///     };\n     /// }\n     /// ```"}, {"sha": "5d5ea0f49c8c852076ec437aeb3905b74bbcd3f9", "filename": "src/tools/clippy/clippy_lints/src/deprecated_lints.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeprecated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeprecated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeprecated_lints.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -194,7 +194,6 @@ declare_deprecated_lint! {\n     /// ### Deprecation reason\n     /// The `avoid_breaking_exported_api` config option was added, which\n     /// enables the `enum_variant_names` lint for public items.\n-    /// ```\n     #[clippy::version = \"1.54.0\"]\n     pub PUB_ENUM_VARIANT_NAMES,\n     \"set the `avoid-breaking-exported-api` config option to `false` to enable the `enum_variant_names` lint for public items\""}, {"sha": "ea4c0207bb01312b82197ce0ec5c2310716e6067", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -168,7 +168,7 @@ struct RefPat {\n }\n \n impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         // Skip path expressions from deref calls. e.g. `Deref::deref(e)`\n         if Some(expr.hir_id) == self.skip_expr.take() {\n@@ -580,7 +580,7 @@ fn find_adjustments<'tcx>(\n     }\n }\n \n-#[allow(clippy::needless_pass_by_value)]\n+#[expect(clippy::needless_pass_by_value)]\n fn report(cx: &LateContext<'_>, expr: &Expr<'_>, state: State, data: StateData) {\n     match state {\n         State::DerefMethod {"}, {"sha": "fe99f4a8d55d1e359473da38289fb397400cd490", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 73, "deletions": 6, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,8 +1,9 @@\n-use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note, span_lint_and_then};\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then};\n use clippy_utils::paths;\n use clippy_utils::ty::{implements_trait, is_copy};\n use clippy_utils::{is_lint_allowed, match_def_path};\n use if_chain::if_chain;\n+use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, Visitor};\n use rustc_hir::{\n     BlockCheckMode, BodyId, Expr, ExprKind, FnDecl, HirId, Impl, Item, ItemKind, TraitRef, UnsafeSource, Unsafety,\n@@ -101,8 +102,8 @@ declare_clippy_lint! {\n     /// types.\n     ///\n     /// ### Why is this bad?\n-    /// To avoid surprising behaviour, these traits should\n-    /// agree and the behaviour of `Copy` cannot be overridden. In almost all\n+    /// To avoid surprising behavior, these traits should\n+    /// agree and the behavior of `Copy` cannot be overridden. In almost all\n     /// situations a `Copy` type should have a `Clone` implementation that does\n     /// nothing more than copy the object, which is what `#[derive(Copy, Clone)]`\n     /// gets you.\n@@ -156,11 +157,44 @@ declare_clippy_lint! {\n     \"deriving `serde::Deserialize` on a type that has methods using `unsafe`\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for types that derive `PartialEq` and could implement `Eq`.\n+    ///\n+    /// ### Why is this bad?\n+    /// If a type `T` derives `PartialEq` and all of its members implement `Eq`,\n+    /// then `T` can always implement `Eq`. Implementing `Eq` allows `T` to be used\n+    /// in APIs that require `Eq` types. It also allows structs containing `T` to derive\n+    /// `Eq` themselves.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// #[derive(PartialEq)]\n+    /// struct Foo {\n+    ///     i_am_eq: i32,\n+    ///     i_am_eq_too: Vec<String>,\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// #[derive(PartialEq, Eq)]\n+    /// struct Foo {\n+    ///     i_am_eq: i32,\n+    ///     i_am_eq_too: Vec<String>,\n+    /// }\n+    /// ```\n+    #[clippy::version = \"1.62.0\"]\n+    pub DERIVE_PARTIAL_EQ_WITHOUT_EQ,\n+    style,\n+    \"deriving `PartialEq` on a type that can implement `Eq`, without implementing `Eq`\"\n+}\n+\n declare_lint_pass!(Derive => [\n     EXPL_IMPL_CLONE_ON_COPY,\n     DERIVE_HASH_XOR_EQ,\n     DERIVE_ORD_XOR_PARTIAL_ORD,\n-    UNSAFE_DERIVE_DESERIALIZE\n+    UNSAFE_DERIVE_DESERIALIZE,\n+    DERIVE_PARTIAL_EQ_WITHOUT_EQ\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Derive {\n@@ -171,14 +205,14 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n         }) = item.kind\n         {\n             let ty = cx.tcx.type_of(item.def_id);\n-            let is_automatically_derived =\n-                cx.tcx.has_attr(item.def_id.to_def_id(), sym::automatically_derived);\n+            let is_automatically_derived = cx.tcx.has_attr(item.def_id.to_def_id(), sym::automatically_derived);\n \n             check_hash_peq(cx, item.span, trait_ref, ty, is_automatically_derived);\n             check_ord_partial_ord(cx, item.span, trait_ref, ty, is_automatically_derived);\n \n             if is_automatically_derived {\n                 check_unsafe_derive_deserialize(cx, item, trait_ref, ty);\n+                check_partial_eq_without_eq(cx, item.span, trait_ref, ty);\n             } else {\n                 check_copy_clone(cx, item, trait_ref, ty);\n             }\n@@ -419,3 +453,36 @@ impl<'tcx> Visitor<'tcx> for UnsafeVisitor<'_, 'tcx> {\n         self.cx.tcx.hir()\n     }\n }\n+\n+/// Implementation of the `DERIVE_PARTIAL_EQ_WITHOUT_EQ` lint.\n+fn check_partial_eq_without_eq<'tcx>(cx: &LateContext<'tcx>, span: Span, trait_ref: &TraitRef<'_>, ty: Ty<'tcx>) {\n+    if_chain! {\n+        if let ty::Adt(adt, substs) = ty.kind();\n+        if let Some(eq_trait_def_id) = cx.tcx.get_diagnostic_item(sym::Eq);\n+        if let Some(def_id) = trait_ref.trait_def_id();\n+        if cx.tcx.is_diagnostic_item(sym::PartialEq, def_id);\n+        if !implements_trait(cx, ty, eq_trait_def_id, substs);\n+        then {\n+            // If all of our fields implement `Eq`, we can implement `Eq` too\n+            for variant in adt.variants() {\n+                for field in &variant.fields {\n+                    let ty = field.ty(cx.tcx, substs);\n+\n+                    if !implements_trait(cx, ty, eq_trait_def_id, substs) {\n+                        return;\n+                    }\n+                }\n+            }\n+\n+            span_lint_and_sugg(\n+                cx,\n+                DERIVE_PARTIAL_EQ_WITHOUT_EQ,\n+                span.ctxt().outer_expn_data().call_site,\n+                \"you are deriving `PartialEq` and can implement `Eq`\",\n+                \"consider deriving `Eq` as well\",\n+                \"PartialEq, Eq\".to_string(),\n+                Applicability::MachineApplicable,\n+            )\n+        }\n+    }\n+}"}, {"sha": "53973ab792a91a50cb55da6c89e8e8d6cbdd5c69", "filename": "src/tools/clippy/clippy_lints/src/disallowed_methods.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdisallowed_methods.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n-use clippy_utils::fn_def_id;\n+use clippy_utils::{fn_def_id, get_parent_expr, path_def_id};\n \n-use rustc_hir::{def::Res, def_id::DefIdMap, Expr};\n+use rustc_hir::{def::Res, def_id::DefIdMap, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n@@ -84,7 +84,15 @@ impl<'tcx> LateLintPass<'tcx> for DisallowedMethods {\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        let def_id = match fn_def_id(cx, expr) {\n+        let uncalled_path = if let Some(parent) = get_parent_expr(cx, expr)\n+            && let ExprKind::Call(receiver, _) = parent.kind\n+            && receiver.hir_id == expr.hir_id\n+        {\n+            None\n+        } else {\n+            path_def_id(cx, expr)\n+        };\n+        let def_id = match uncalled_path.or_else(|| fn_def_id(cx, expr)) {\n             Some(def_id) => def_id,\n             None => return,\n         };"}, {"sha": "aaec88f50c771f2992c2a6df332d72083c33e7ce", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -198,7 +198,7 @@ declare_clippy_lint! {\n     \"presence of `fn main() {` in code examples\"\n }\n \n-#[allow(clippy::module_name_repetitions)]\n+#[expect(clippy::module_name_repetitions)]\n #[derive(Clone)]\n pub struct DocMarkdown {\n     valid_idents: FxHashSet<String>,\n@@ -373,7 +373,7 @@ fn lint_for_missing_headers<'tcx>(\n /// `rustc_ast::parse::lexer::comments::strip_doc_comment_decoration` because we\n /// need to keep track of\n /// the spans but this function is inspired from the later.\n-#[allow(clippy::cast_possible_truncation)]\n+#[expect(clippy::cast_possible_truncation)]\n #[must_use]\n pub fn strip_doc_comment_decoration(doc: &str, comment_kind: CommentKind, span: Span) -> (String, Vec<(usize, Span)>) {\n     // one-line comments lose their prefix\n@@ -428,7 +428,7 @@ fn check_attrs<'a>(cx: &LateContext<'_>, valid_idents: &FxHashSet<String>, attrs\n     /// We don't want the parser to choke on intra doc links. Since we don't\n     /// actually care about rendering them, just pretend that all broken links are\n     /// point to a fake address.\n-    #[allow(clippy::unnecessary_wraps)] // we're following a type signature\n+    #[expect(clippy::unnecessary_wraps)] // we're following a type signature\n     fn fake_broken_link_callback<'a>(_: BrokenLink<'_>) -> Option<(CowStr<'a>, CowStr<'a>)> {\n         Some((\"fake\".into(), \"fake\".into()))\n     }"}, {"sha": "be95375789d5b4663ac7ed7212e9e16bf195b9c0", "filename": "src/tools/clippy/clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -40,7 +40,7 @@ declare_clippy_lint! {\n declare_lint_pass!(DoubleComparisons => [DOUBLE_COMPARISONS]);\n \n impl<'tcx> DoubleComparisons {\n-    #[allow(clippy::similar_names)]\n+    #[expect(clippy::similar_names)]\n     fn check_binop(cx: &LateContext<'tcx>, op: BinOpKind, lhs: &'tcx Expr<'_>, rhs: &'tcx Expr<'_>, span: Span) {\n         let (lkind, llhs, lrhs, rkind, rlhs, rrhs) = match (&lhs.kind, &rhs.kind) {\n             (ExprKind::Binary(lb, llhs, lrhs), ExprKind::Binary(rb, rlhs, rrhs)) => {"}, {"sha": "c6c7b959d4f49bb929dca16be321f8bdea633d06", "filename": "src/tools/clippy/clippy_lints/src/duplicate_mod.rs", "status": "added", "additions": 102, "deletions": 0, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduplicate_mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduplicate_mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fduplicate_mod.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,102 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use rustc_ast::ast::{Crate, Inline, Item, ItemKind, ModKind};\n+use rustc_errors::MultiSpan;\n+use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{FileName, Span};\n+use std::collections::BTreeMap;\n+use std::path::PathBuf;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for files that are included as modules multiple times.\n+    ///\n+    /// ### Why is this bad?\n+    /// Loading a file as a module more than once causes it to be compiled\n+    /// multiple times, taking longer and putting duplicate content into the\n+    /// module tree.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// // lib.rs\n+    /// mod a;\n+    /// mod b;\n+    /// ```\n+    /// ```rust,ignore\n+    /// // a.rs\n+    /// #[path = \"./b.rs\"]\n+    /// mod b;\n+    /// ```\n+    ///\n+    /// Use instead:\n+    ///\n+    /// ```rust,ignore\n+    /// // lib.rs\n+    /// mod a;\n+    /// mod b;\n+    /// ```\n+    /// ```rust,ignore\n+    /// // a.rs\n+    /// use crate::b;\n+    /// ```\n+    #[clippy::version = \"1.62.0\"]\n+    pub DUPLICATE_MOD,\n+    suspicious,\n+    \"file loaded as module multiple times\"\n+}\n+\n+#[derive(PartialOrd, Ord, PartialEq, Eq)]\n+struct Modules {\n+    local_path: PathBuf,\n+    spans: Vec<Span>,\n+}\n+\n+#[derive(Default)]\n+pub struct DuplicateMod {\n+    /// map from the canonicalized path to `Modules`, `BTreeMap` to make the\n+    /// order deterministic for tests\n+    modules: BTreeMap<PathBuf, Modules>,\n+}\n+\n+impl_lint_pass!(DuplicateMod => [DUPLICATE_MOD]);\n+\n+impl EarlyLintPass for DuplicateMod {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+        if let ItemKind::Mod(_, ModKind::Loaded(_, Inline::No, mod_spans)) = &item.kind\n+            && let FileName::Real(real) = cx.sess().source_map().span_to_filename(mod_spans.inner_span)\n+            && let Some(local_path) = real.into_local_path()\n+            && let Ok(absolute_path) = local_path.canonicalize()\n+        {\n+            let modules = self.modules.entry(absolute_path).or_insert(Modules {\n+                local_path,\n+                spans: Vec::new(),\n+            });\n+            modules.spans.push(item.span_with_attributes());\n+        }\n+    }\n+\n+    fn check_crate_post(&mut self, cx: &EarlyContext<'_>, _: &Crate) {\n+        for Modules { local_path, spans } in self.modules.values() {\n+            if spans.len() < 2 {\n+                continue;\n+            }\n+\n+            let mut multi_span = MultiSpan::from_spans(spans.clone());\n+            let (&first, duplicates) = spans.split_first().unwrap();\n+\n+            multi_span.push_span_label(first, \"first loaded here\");\n+            for &duplicate in duplicates {\n+                multi_span.push_span_label(duplicate, \"loaded again here\");\n+            }\n+\n+            span_lint_and_help(\n+                cx,\n+                DUPLICATE_MOD,\n+                multi_span,\n+                &format!(\"file is loaded as a module multiple times: `{}`\", local_path.display()),\n+                None,\n+                \"replace all but one `mod` item with `use` items\",\n+            );\n+        }\n+    }\n+}"}, {"sha": "c5a987842c3f186cfc4119f658a890f1d60846ce", "filename": "src/tools/clippy/clippy_lints/src/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fentry.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -63,7 +63,7 @@ declare_clippy_lint! {\n declare_lint_pass!(HashMapPass => [MAP_ENTRY]);\n \n impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         let (cond_expr, then_expr, else_expr) = match higher::If::hir(expr) {\n             Some(higher::If { cond, then, r#else }) => (cond, then, r#else),\n@@ -319,7 +319,7 @@ struct Insertion<'tcx> {\n ///   `or_insert_with`.\n /// * Determine if there's any sub-expression that can't be placed in a closure.\n /// * Determine if there's only a single insert statement. `or_insert` can be used in this case.\n-#[allow(clippy::struct_excessive_bools)]\n+#[expect(clippy::struct_excessive_bools)]\n struct InsertSearcher<'cx, 'tcx> {\n     cx: &'cx LateContext<'tcx>,\n     /// The map expression used in the contains call."}, {"sha": "10be245b36293ee578c6a8adb64bd51beb7c900d", "filename": "src/tools/clippy/clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_clike.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -8,7 +8,6 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::util::IntTypeExt;\n use rustc_middle::ty::{self, IntTy, UintTy};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use std::convert::TryFrom;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -37,7 +36,7 @@ declare_clippy_lint! {\n declare_lint_pass!(UnportableVariant => [ENUM_CLIKE_UNPORTABLE_VARIANT]);\n \n impl<'tcx> LateLintPass<'tcx> for UnportableVariant {\n-    #[allow(clippy::cast_possible_truncation, clippy::cast_possible_wrap, clippy::cast_sign_loss)]\n+    #[expect(clippy::cast_possible_wrap)]\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if cx.tcx.data_layout.pointer_size.bits() != 64 {\n             return;"}, {"sha": "e029b8e85379f1a6dda254a307fa2ec6cfd12d5b", "filename": "src/tools/clippy/clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fenum_variants.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -240,7 +240,7 @@ impl LateLintPass<'_> for EnumVariantNames {\n         assert!(last.is_some());\n     }\n \n-    #[allow(clippy::similar_names)]\n+    #[expect(clippy::similar_names)]\n     fn check_item(&mut self, cx: &LateContext<'_>, item: &Item<'_>) {\n         let item_name = item.ident.name.as_str();\n         let item_camel = to_camel_case(item_name);"}, {"sha": "afb5d32f95334b31792d440185798047f2425a86", "filename": "src/tools/clippy/clippy_lints/src/eq_op.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Feq_op.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -72,7 +72,7 @@ declare_clippy_lint! {\n declare_lint_pass!(EqOp => [EQ_OP, OP_REF]);\n \n impl<'tcx> LateLintPass<'tcx> for EqOp {\n-    #[allow(clippy::similar_names, clippy::too_many_lines)]\n+    #[expect(clippy::similar_names, clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         if_chain! {\n             if let Some((macro_call, macro_name)) = first_node_macro_backtrace(cx, e).find_map(|macro_call| {\n@@ -138,7 +138,6 @@ impl<'tcx> LateLintPass<'tcx> for EqOp {\n                 },\n             };\n             if let Some(trait_id) = trait_id {\n-                #[allow(clippy::match_same_arms)]\n                 match (&left.kind, &right.kind) {\n                     // do not suggest to dereference literals\n                     (&ExprKind::Lit(..), _) | (_, &ExprKind::Lit(..)) => {},"}, {"sha": "7a81fb37e841cf7f218f23bbbddb9ecaf7ae7bea", "filename": "src/tools/clippy/clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -4,8 +4,6 @@ use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{sym, Span};\n \n-use std::convert::TryInto;\n-\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for excessive"}, {"sha": "9f868df3ad063452f3dd45ebe960d2430fb1efc0", "filename": "src/tools/clippy/clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -32,7 +32,6 @@ declare_clippy_lint! {\n     /// // Good\n     /// struct Foo(i32);\n     ///\n-    /// use std::convert::TryFrom;\n     /// impl TryFrom<String> for Foo {\n     ///     type Error = ();\n     ///     fn try_from(s: String) -> Result<Self, Self::Error> {"}, {"sha": "42503c26de1d1dcb1112fd1cf3a888a0acbec037", "filename": "src/tools/clippy/clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -215,7 +215,7 @@ fn check_ln1p(cx: &LateContext<'_>, expr: &Expr<'_>, args: &[Expr<'_>]) {\n // converted to an integer without loss of precision. For now we only check\n // ranges [-16777215, 16777216) for type f32 as whole number floats outside\n // this range are lossy and ambiguous.\n-#[allow(clippy::cast_possible_truncation)]\n+#[expect(clippy::cast_possible_truncation)]\n fn get_integer_from_float_constant(value: &Constant) -> Option<i32> {\n     match value {\n         F32(num) if num.fract() == 0.0 => {"}, {"sha": "5d25c1d06341f5bb57ccdd5e32b485226f61d30e", "filename": "src/tools/clippy/clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -55,7 +55,7 @@ impl_lint_pass!(FromOverInto => [FROM_OVER_INTO]);\n \n impl<'tcx> LateLintPass<'tcx> for FromOverInto {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::RE_REBALANCING_COHERENCE) {\n+        if !meets_msrv(self.msrv, msrvs::RE_REBALANCING_COHERENCE) {\n             return;\n         }\n "}, {"sha": "b8d227855d97616c1f4171dcd4e0b621068e328f", "filename": "src/tools/clippy/clippy_lints/src/if_then_some_else_none.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -57,7 +57,7 @@ impl_lint_pass!(IfThenSomeElseNone => [IF_THEN_SOME_ELSE_NONE]);\n \n impl<'tcx> LateLintPass<'tcx> for IfThenSomeElseNone {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::BOOL_THEN) {\n+        if !meets_msrv(self.msrv, msrvs::BOOL_THEN) {\n             return;\n         }\n "}, {"sha": "4f9680f60fe8b4422d51931e1cd96148c671640e", "filename": "src/tools/clippy/clippy_lints/src/implicit_hasher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_hasher.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -62,7 +62,7 @@ declare_clippy_lint! {\n declare_lint_pass!(ImplicitHasher => [IMPLICIT_HASHER]);\n \n impl<'tcx> LateLintPass<'tcx> for ImplicitHasher {\n-    #[allow(clippy::cast_possible_truncation, clippy::too_many_lines)]\n+    #[expect(clippy::cast_possible_truncation, clippy::too_many_lines)]\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         use rustc_span::BytePos;\n "}, {"sha": "647947d5d30d6b9517ce96b785e9ee87ab81e26b", "filename": "src/tools/clippy/clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fimplicit_return.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -164,7 +164,7 @@ fn lint_implicit_returns(\n             })\n             .visit_block(block);\n             if add_return {\n-                #[allow(clippy::option_if_let_else)]\n+                #[expect(clippy::option_if_let_else)]\n                 if let Some(span) = call_site_span {\n                     lint_return(cx, span);\n                     LintLocation::Parent\n@@ -196,7 +196,7 @@ fn lint_implicit_returns(\n \n         _ =>\n         {\n-            #[allow(clippy::option_if_let_else)]\n+            #[expect(clippy::option_if_let_else)]\n             if let Some(span) = call_site_span {\n                 lint_return(cx, span);\n                 LintLocation::Parent"}, {"sha": "9ce5b8e17a9ae45ea1ba304ad7331ea07635f217", "filename": "src/tools/clippy/clippy_lints/src/index_refutable_slice.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Findex_refutable_slice.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -14,7 +14,6 @@ use rustc_middle::ty;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::{symbol::Ident, Span};\n-use std::convert::TryInto;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -75,7 +74,7 @@ impl<'tcx> LateLintPass<'tcx> for IndexRefutableSlice {\n             if !expr.span.from_expansion() || is_expn_of(expr.span, \"if_chain\").is_some();\n             if let Some(IfLet {let_pat, if_then, ..}) = IfLet::hir(cx, expr);\n             if !is_lint_allowed(cx, INDEX_REFUTABLE_SLICE, expr.hir_id);\n-            if meets_msrv(self.msrv.as_ref(), &msrvs::SLICE_PATTERNS);\n+            if meets_msrv(self.msrv, msrvs::SLICE_PATTERNS);\n \n             let found_slices = find_slice_values(cx, let_pat);\n             if !found_slices.is_empty();"}, {"sha": "8db7b307ddb75e5fa1138eeb9c8188dc7245c4d8", "filename": "src/tools/clippy/clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fint_plus_one.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -52,7 +52,7 @@ enum Side {\n }\n \n impl IntPlusOne {\n-    #[allow(clippy::cast_sign_loss)]\n+    #[expect(clippy::cast_sign_loss)]\n     fn check_lit(lit: &Lit, target_value: i128) -> bool {\n         if let LitKind::Int(value, ..) = lit.kind {\n             return value == (target_value as u128);"}, {"sha": "be5c478900facbb8551c7f4532c28631d25b2bc8", "filename": "src/tools/clippy/clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_all.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -46,6 +46,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(derivable_impls::DERIVABLE_IMPLS),\n     LintId::of(derive::DERIVE_HASH_XOR_EQ),\n     LintId::of(derive::DERIVE_ORD_XOR_PARTIAL_ORD),\n+    LintId::of(derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ),\n     LintId::of(disallowed_methods::DISALLOWED_METHODS),\n     LintId::of(disallowed_types::DISALLOWED_TYPES),\n     LintId::of(doc::MISSING_SAFETY_DOC),\n@@ -59,6 +60,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(drop_forget_ref::FORGET_NON_DROP),\n     LintId::of(drop_forget_ref::FORGET_REF),\n     LintId::of(drop_forget_ref::UNDROPPED_MANUALLY_DROPS),\n+    LintId::of(duplicate_mod::DUPLICATE_MOD),\n     LintId::of(duration_subsec::DURATION_SUBSEC),\n     LintId::of(entry::MAP_ENTRY),\n     LintId::of(enum_clike::ENUM_CLIKE_UNPORTABLE_VARIANT),\n@@ -69,8 +71,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(erasing_op::ERASING_OP),\n     LintId::of(escape::BOXED_LOCAL),\n     LintId::of(eta_reduction::REDUNDANT_CLOSURE),\n-    LintId::of(eval_order_dependence::DIVERGING_SUB_EXPRESSION),\n-    LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n     LintId::of(explicit_write::EXPLICIT_WRITE),\n     LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n     LintId::of(float_literal::EXCESSIVE_PRECISION),\n@@ -228,6 +228,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(misc_early::REDUNDANT_PATTERN),\n     LintId::of(misc_early::UNNEEDED_WILDCARD_PATTERN),\n     LintId::of(misc_early::ZERO_PREFIXED_LITERAL),\n+    LintId::of(mixed_read_write_in_expression::DIVERGING_SUB_EXPRESSION),\n     LintId::of(mut_key::MUTABLE_KEY_TYPE),\n     LintId::of(mut_mutex_lock::MUT_MUTEX_LOCK),\n     LintId::of(mut_reference::UNNECESSARY_MUT_PASSED),\n@@ -263,6 +264,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(ranges::MANUAL_RANGE_CONTAINS),\n     LintId::of(ranges::RANGE_ZIP_WITH_LEN),\n     LintId::of(ranges::REVERSED_EMPTY_RANGES),\n+    LintId::of(rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT),\n     LintId::of(redundant_clone::REDUNDANT_CLONE),\n     LintId::of(redundant_closure_call::REDUNDANT_CLOSURE_CALL),\n     LintId::of(redundant_field_names::REDUNDANT_FIELD_NAMES),\n@@ -276,6 +278,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(self_assignment::SELF_ASSIGNMENT),\n     LintId::of(self_named_constructors::SELF_NAMED_CONSTRUCTORS),\n     LintId::of(serde_api::SERDE_API_MISUSE),\n+    LintId::of(significant_drop_in_scrutinee::SIGNIFICANT_DROP_IN_SCRUTINEE),\n     LintId::of(single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS),\n     LintId::of(size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT),\n     LintId::of(slow_vector_initialization::SLOW_VECTOR_INITIALIZATION),"}, {"sha": "b15c979d0c70e64ad61f7ed8c752e192fed05d4b", "filename": "src/tools/clippy/clippy_lints/src/lib.register_complexity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_complexity.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -12,7 +12,6 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(double_comparison::DOUBLE_COMPARISONS),\n     LintId::of(double_parens::DOUBLE_PARENS),\n     LintId::of(duration_subsec::DURATION_SUBSEC),\n-    LintId::of(eval_order_dependence::DIVERGING_SUB_EXPRESSION),\n     LintId::of(explicit_write::EXPLICIT_WRITE),\n     LintId::of(format::USELESS_FORMAT),\n     LintId::of(functions::TOO_MANY_ARGUMENTS),\n@@ -59,6 +58,7 @@ store.register_group(true, \"clippy::complexity\", Some(\"clippy_complexity\"), vec!\n     LintId::of(misc::SHORT_CIRCUIT_STATEMENT),\n     LintId::of(misc_early::UNNEEDED_WILDCARD_PATTERN),\n     LintId::of(misc_early::ZERO_PREFIXED_LITERAL),\n+    LintId::of(mixed_read_write_in_expression::DIVERGING_SUB_EXPRESSION),\n     LintId::of(needless_arbitrary_self_type::NEEDLESS_ARBITRARY_SELF_TYPE),\n     LintId::of(needless_bool::BOOL_COMPARISON),\n     LintId::of(needless_bool::NEEDLESS_BOOL),"}, {"sha": "5552ea8aa80ac57655c8cbf8a02ce42d037404f6", "filename": "src/tools/clippy/clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_lints.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -113,6 +113,7 @@ store.register_lints(&[\n     derivable_impls::DERIVABLE_IMPLS,\n     derive::DERIVE_HASH_XOR_EQ,\n     derive::DERIVE_ORD_XOR_PARTIAL_ORD,\n+    derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ,\n     derive::EXPL_IMPL_CLONE_ON_COPY,\n     derive::UNSAFE_DERIVE_DESERIALIZE,\n     disallowed_methods::DISALLOWED_METHODS,\n@@ -132,6 +133,7 @@ store.register_lints(&[\n     drop_forget_ref::FORGET_NON_DROP,\n     drop_forget_ref::FORGET_REF,\n     drop_forget_ref::UNDROPPED_MANUALLY_DROPS,\n+    duplicate_mod::DUPLICATE_MOD,\n     duration_subsec::DURATION_SUBSEC,\n     else_if_without_else::ELSE_IF_WITHOUT_ELSE,\n     empty_drop::EMPTY_DROP,\n@@ -149,8 +151,6 @@ store.register_lints(&[\n     escape::BOXED_LOCAL,\n     eta_reduction::REDUNDANT_CLOSURE,\n     eta_reduction::REDUNDANT_CLOSURE_FOR_METHOD_CALLS,\n-    eval_order_dependence::DIVERGING_SUB_EXPRESSION,\n-    eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n     excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS,\n     excessive_bools::STRUCT_EXCESSIVE_BOOLS,\n     exhaustive_items::EXHAUSTIVE_ENUMS,\n@@ -381,6 +381,8 @@ store.register_lints(&[\n     missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS,\n     missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES,\n     missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS,\n+    mixed_read_write_in_expression::DIVERGING_SUB_EXPRESSION,\n+    mixed_read_write_in_expression::MIXED_READ_WRITE_IN_EXPRESSION,\n     module_style::MOD_MODULE_FILES,\n     module_style::SELF_NAMED_MODULE_FILES,\n     modulo_arithmetic::MODULO_ARITHMETIC,\n@@ -446,6 +448,7 @@ store.register_lints(&[\n     ranges::RANGE_PLUS_ONE,\n     ranges::RANGE_ZIP_WITH_LEN,\n     ranges::REVERSED_EMPTY_RANGES,\n+    rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT,\n     redundant_clone::REDUNDANT_CLONE,\n     redundant_closure_call::REDUNDANT_CLOSURE_CALL,\n     redundant_else::REDUNDANT_ELSE,\n@@ -470,12 +473,12 @@ store.register_lints(&[\n     shadow::SHADOW_REUSE,\n     shadow::SHADOW_SAME,\n     shadow::SHADOW_UNRELATED,\n+    significant_drop_in_scrutinee::SIGNIFICANT_DROP_IN_SCRUTINEE,\n     single_char_lifetime_names::SINGLE_CHAR_LIFETIME_NAMES,\n     single_component_path_imports::SINGLE_COMPONENT_PATH_IMPORTS,\n     size_of_in_element_count::SIZE_OF_IN_ELEMENT_COUNT,\n     slow_vector_initialization::SLOW_VECTOR_INITIALIZATION,\n     stable_sort_primitive::STABLE_SORT_PRIMITIVE,\n-    significant_drop_in_scrutinee::SIGNIFICANT_DROP_IN_SCRUTINEE,\n     strings::STRING_ADD,\n     strings::STRING_ADD_ASSIGN,\n     strings::STRING_FROM_UTF8_AS_BYTES,"}, {"sha": "a6d3a06dc16e34063572e52e326c30ce4a369848", "filename": "src/tools/clippy/clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -46,6 +46,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(missing_doc::MISSING_DOCS_IN_PRIVATE_ITEMS),\n     LintId::of(missing_enforced_import_rename::MISSING_ENFORCED_IMPORT_RENAMES),\n     LintId::of(missing_inline::MISSING_INLINE_IN_PUBLIC_ITEMS),\n+    LintId::of(mixed_read_write_in_expression::MIXED_READ_WRITE_IN_EXPRESSION),\n     LintId::of(module_style::MOD_MODULE_FILES),\n     LintId::of(module_style::SELF_NAMED_MODULE_FILES),\n     LintId::of(modulo_arithmetic::MODULO_ARITHMETIC),"}, {"sha": "62f26d821a0d6840cc1e02ab404899f50efa8551", "filename": "src/tools/clippy/clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_style.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -16,6 +16,7 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(comparison_chain::COMPARISON_CHAIN),\n     LintId::of(default::FIELD_REASSIGN_WITH_DEFAULT),\n     LintId::of(dereference::NEEDLESS_BORROW),\n+    LintId::of(derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ),\n     LintId::of(disallowed_methods::DISALLOWED_METHODS),\n     LintId::of(disallowed_types::DISALLOWED_TYPES),\n     LintId::of(doc::MISSING_SAFETY_DOC),"}, {"sha": "2de49f1624a4264e8074a1ea453f7af251cb1680", "filename": "src/tools/clippy/clippy_lints/src/lib.register_suspicious.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.register_suspicious.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -14,7 +14,7 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(crate_in_macro_def::CRATE_IN_MACRO_DEF),\n     LintId::of(drop_forget_ref::DROP_NON_DROP),\n     LintId::of(drop_forget_ref::FORGET_NON_DROP),\n-    LintId::of(eval_order_dependence::EVAL_ORDER_DEPENDENCE),\n+    LintId::of(duplicate_mod::DUPLICATE_MOD),\n     LintId::of(float_equality_without_abs::FLOAT_EQUALITY_WITHOUT_ABS),\n     LintId::of(format_impl::PRINT_IN_FORMAT_IMPL),\n     LintId::of(formatting::SUSPICIOUS_ASSIGNMENT_FORMATTING),\n@@ -26,6 +26,8 @@ store.register_group(true, \"clippy::suspicious\", Some(\"clippy_suspicious\"), vec!\n     LintId::of(methods::SUSPICIOUS_MAP),\n     LintId::of(mut_key::MUTABLE_KEY_TYPE),\n     LintId::of(octal_escapes::OCTAL_ESCAPES),\n+    LintId::of(rc_clone_in_vec_init::RC_CLONE_IN_VEC_INIT),\n+    LintId::of(significant_drop_in_scrutinee::SIGNIFICANT_DROP_IN_SCRUTINEE),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_ARITHMETIC_IMPL),\n     LintId::of(suspicious_trait_impl::SUSPICIOUS_OP_ASSIGN_IMPL),\n ])"}, {"sha": "4ac834f72405bbbef41d2d927730e3ef1b04d0c8", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 20, "deletions": 6, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -8,6 +8,7 @@\n #![feature(iter_intersperse)]\n #![feature(let_chains)]\n #![feature(let_else)]\n+#![feature(lint_reasons)]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n #![feature(stmt_expr_attributes)]\n@@ -210,6 +211,7 @@ mod doc;\n mod double_comparison;\n mod double_parens;\n mod drop_forget_ref;\n+mod duplicate_mod;\n mod duration_subsec;\n mod else_if_without_else;\n mod empty_drop;\n@@ -223,7 +225,6 @@ mod equatable_if_let;\n mod erasing_op;\n mod escape;\n mod eta_reduction;\n-mod eval_order_dependence;\n mod excessive_bools;\n mod exhaustive_items;\n mod exit;\n@@ -299,6 +300,7 @@ mod missing_const_for_fn;\n mod missing_doc;\n mod missing_enforced_import_rename;\n mod missing_inline;\n+mod mixed_read_write_in_expression;\n mod module_style;\n mod modulo_arithmetic;\n mod mut_key;\n@@ -345,6 +347,7 @@ mod ptr_offset_with_cast;\n mod pub_use;\n mod question_mark;\n mod ranges;\n+mod rc_clone_in_vec_init;\n mod redundant_clone;\n mod redundant_closure_call;\n mod redundant_else;\n@@ -417,7 +420,7 @@ mod zero_sized_map_values;\n // end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n \n pub use crate::utils::conf::Conf;\n-use crate::utils::conf::TryConf;\n+use crate::utils::conf::{format_error, TryConf};\n \n /// Register all pre expansion lints\n ///\n@@ -462,7 +465,7 @@ pub fn read_conf(sess: &Session) -> Conf {\n         sess.struct_err(&format!(\n             \"error reading Clippy's configuration file `{}`: {}\",\n             file_name.display(),\n-            error\n+            format_error(error)\n         ))\n         .emit();\n     }\n@@ -473,7 +476,7 @@ pub fn read_conf(sess: &Session) -> Conf {\n /// Register all lints and lint groups with the rustc plugin registry\n ///\n /// Used in `./src/driver.rs`.\n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf: &Conf) {\n     register_removed_non_tool_lints(store);\n \n@@ -583,8 +586,17 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     });\n \n     let avoid_breaking_exported_api = conf.avoid_breaking_exported_api;\n+    let allow_expect_in_tests = conf.allow_expect_in_tests;\n+    let allow_unwrap_in_tests = conf.allow_unwrap_in_tests;\n     store.register_late_pass(move || Box::new(approx_const::ApproxConstant::new(msrv)));\n-    store.register_late_pass(move || Box::new(methods::Methods::new(avoid_breaking_exported_api, msrv)));\n+    store.register_late_pass(move || {\n+        Box::new(methods::Methods::new(\n+            avoid_breaking_exported_api,\n+            msrv,\n+            allow_expect_in_tests,\n+            allow_unwrap_in_tests,\n+        ))\n+    });\n     store.register_late_pass(move || Box::new(matches::Matches::new(msrv)));\n     store.register_early_pass(move || Box::new(manual_non_exhaustive::ManualNonExhaustiveStruct::new(msrv)));\n     store.register_late_pass(move || Box::new(manual_non_exhaustive::ManualNonExhaustiveEnum::new(msrv)));\n@@ -669,7 +681,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(arithmetic::Arithmetic::default()));\n     store.register_late_pass(|| Box::new(assign_ops::AssignOps));\n     store.register_late_pass(|| Box::new(let_if_seq::LetIfSeq));\n-    store.register_late_pass(|| Box::new(eval_order_dependence::EvalOrderDependence));\n+    store.register_late_pass(|| Box::new(mixed_read_write_in_expression::EvalOrderDependence));\n     store.register_late_pass(|| Box::new(missing_doc::MissingDoc::new()));\n     store.register_late_pass(|| Box::new(missing_inline::MissingInline));\n     store.register_late_pass(move || Box::new(exhaustive_items::ExhaustiveItems));\n@@ -892,6 +904,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     let max_include_file_size = conf.max_include_file_size;\n     store.register_late_pass(move || Box::new(large_include_file::LargeIncludeFile::new(max_include_file_size)));\n     store.register_late_pass(|| Box::new(strings::TrimSplitWhitespace));\n+    store.register_late_pass(|| Box::new(rc_clone_in_vec_init::RcCloneInVecInit));\n+    store.register_early_pass(|| Box::new(duplicate_mod::DuplicateMod::default()));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "9998712b8527dadb3e139a6888a3869f71c37b3c", "filename": "src/tools/clippy/clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fliteral_representation.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -204,7 +204,6 @@ impl WarningType {\n     }\n }\n \n-#[allow(clippy::module_name_repetitions)]\n #[derive(Copy, Clone)]\n pub struct LiteralDigitGrouping {\n     lint_fraction_readability: bool,\n@@ -432,7 +431,7 @@ impl LiteralDigitGrouping {\n     }\n }\n \n-#[allow(clippy::module_name_repetitions)]\n+#[expect(clippy::module_name_repetitions)]\n #[derive(Copy, Clone)]\n pub struct DecimalLiteralRepresentation {\n     threshold: u64,"}, {"sha": "75d771f992a8c48261afb5deba2a3302237302b1", "filename": "src/tools/clippy/clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -620,7 +620,6 @@ declare_lint_pass!(Loops => [\n ]);\n \n impl<'tcx> LateLintPass<'tcx> for Loops {\n-    #[allow(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         let for_loop = higher::ForLoop::hir(expr);\n         if let Some(higher::ForLoop {"}, {"sha": "09f9c05b4fced3d7cc8f01f7c3580b3ea390908f", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -19,7 +19,7 @@ use std::mem;\n \n /// Checks for looping over a range and then indexing a sequence with it.\n /// The iteratee must be a range literal.\n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     pat: &'tcx Pat<'_>,"}, {"sha": "4801a84eb92ced8d1ac9b10a8e8e4e7d7cd8215b", "filename": "src/tools/clippy/clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Futils.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -13,7 +13,7 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_typeck::hir_ty_to_ty;\n use std::iter::Iterator;\n \n-#[derive(Debug, PartialEq)]\n+#[derive(Debug, PartialEq, Eq)]\n enum IncrementVisitorVarState {\n     Initial,  // Not examined yet\n     IncrOnce, // Incremented exactly once, may be a loop counter"}, {"sha": "82760607ba295e5e11ee219b28346fd54927e469", "filename": "src/tools/clippy/clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -239,7 +239,7 @@ fn uses_iter<'tcx>(cx: &LateContext<'tcx>, iter_expr: &IterExpr, container: &'tc\n     v.uses_iter\n }\n \n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &Expr<'_>) -> bool {\n     struct AfterLoopVisitor<'a, 'b, 'tcx> {\n         cx: &'a LateContext<'tcx>,"}, {"sha": "753469c603d400c29e14eb40463d4f42b545f913", "filename": "src/tools/clippy/clippy_lints/src/macro_use.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmacro_use.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -48,7 +48,7 @@ impl MacroRefData {\n }\n \n #[derive(Default)]\n-#[allow(clippy::module_name_repetitions)]\n+#[expect(clippy::module_name_repetitions)]\n pub struct MacroUseImports {\n     /// the actual import path used and the span of the attribute above it.\n     imports: Vec<(String, Span)>,\n@@ -134,7 +134,6 @@ impl<'tcx> LateLintPass<'tcx> for MacroUseImports {\n             self.push_unique_macro_pat_ty(cx, ty.span);\n         }\n     }\n-    #[allow(clippy::too_many_lines)]\n     fn check_crate_post(&mut self, cx: &LateContext<'_>) {\n         let mut used = FxHashMap::default();\n         let mut check_dup = vec![];"}, {"sha": "20333c150e3d5b3a9c5edae3ef5da557281eac47", "filename": "src/tools/clippy/clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmain_recursion.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -12,7 +12,7 @@ declare_clippy_lint! {\n     ///\n     /// ### Why is this bad?\n     /// Apart from special setups (which we could detect following attributes like #![no_std]),\n-    /// recursing into main() seems like an unintuitive antipattern we should be able to detect.\n+    /// recursing into main() seems like an unintuitive anti-pattern we should be able to detect.\n     ///\n     /// ### Example\n     /// ```no_run"}, {"sha": "60bbcde4f1de566b2ab100acc675130691ba61cd", "filename": "src/tools/clippy/clippy_lints/src/manual_bits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_bits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_bits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_bits.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -48,7 +48,7 @@ impl_lint_pass!(ManualBits => [MANUAL_BITS]);\n \n impl<'tcx> LateLintPass<'tcx> for ManualBits {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::MANUAL_BITS) {\n+        if !meets_msrv(self.msrv, msrvs::MANUAL_BITS) {\n             return;\n         }\n "}, {"sha": "230ae029ed9d28978eeb256c40604e24e0df1d81", "filename": "src/tools/clippy/clippy_lints/src/manual_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_map.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -46,7 +46,7 @@ declare_clippy_lint! {\n declare_lint_pass!(ManualMap => [MANUAL_MAP]);\n \n impl<'tcx> LateLintPass<'tcx> for ManualMap {\n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         let (scrutinee, then_pat, then_body, else_pat, else_body) = match IfLetOrMatch::parse(cx, expr) {\n             Some(IfLetOrMatch::IfLet(scrutinee, pat, body, Some(r#else))) => (scrutinee, pat, body, None, r#else),"}, {"sha": "80845ace3f94071404cc6b208a969552bc308e7a", "filename": "src/tools/clippy/clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n use clippy_utils::source::snippet_opt;\n-use clippy_utils::{is_lint_allowed, meets_msrv, msrvs};\n+use clippy_utils::{is_doc_hidden, is_lint_allowed, meets_msrv, msrvs};\n use rustc_ast::ast::{self, VisibilityKind};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -61,7 +61,7 @@ declare_clippy_lint! {\n     \"manual implementations of the non-exhaustive pattern can be simplified using #[non_exhaustive]\"\n }\n \n-#[allow(clippy::module_name_repetitions)]\n+#[expect(clippy::module_name_repetitions)]\n pub struct ManualNonExhaustiveStruct {\n     msrv: Option<RustcVersion>,\n }\n@@ -75,7 +75,7 @@ impl ManualNonExhaustiveStruct {\n \n impl_lint_pass!(ManualNonExhaustiveStruct => [MANUAL_NON_EXHAUSTIVE]);\n \n-#[allow(clippy::module_name_repetitions)]\n+#[expect(clippy::module_name_repetitions)]\n pub struct ManualNonExhaustiveEnum {\n     msrv: Option<RustcVersion>,\n     constructed_enum_variants: FxHashSet<(DefId, DefId)>,\n@@ -97,7 +97,7 @@ impl_lint_pass!(ManualNonExhaustiveEnum => [MANUAL_NON_EXHAUSTIVE]);\n \n impl EarlyLintPass for ManualNonExhaustiveStruct {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &ast::Item) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::NON_EXHAUSTIVE) {\n+        if !meets_msrv(self.msrv, msrvs::NON_EXHAUSTIVE) {\n             return;\n         }\n \n@@ -149,7 +149,7 @@ impl EarlyLintPass for ManualNonExhaustiveStruct {\n \n impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::NON_EXHAUSTIVE) {\n+        if !meets_msrv(self.msrv, msrvs::NON_EXHAUSTIVE) {\n             return;\n         }\n \n@@ -160,7 +160,7 @@ impl<'tcx> LateLintPass<'tcx> for ManualNonExhaustiveEnum {\n                 let id = cx.tcx.hir().local_def_id(v.id);\n                 (matches!(v.data, hir::VariantData::Unit(_))\n                     && v.ident.as_str().starts_with('_')\n-                    && cx.tcx.is_doc_hidden(id.to_def_id()))\n+                    && is_doc_hidden(cx.tcx.hir().attrs(v.id)))\n                 .then(|| (id, v.span))\n             });\n             if let Some((id, span)) = iter.next()"}, {"sha": "dfb3efc4e28b65c246e3fe67b3be4b74ac12c8e0", "filename": "src/tools/clippy/clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmanual_strip.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -68,7 +68,7 @@ enum StripKind {\n \n impl<'tcx> LateLintPass<'tcx> for ManualStrip {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::STR_STRIP_PREFIX) {\n+        if !meets_msrv(self.msrv, msrvs::STR_STRIP_PREFIX) {\n             return;\n         }\n "}, {"sha": "a13d191375bfa02ad4df4afaf56dbb107da67f46", "filename": "src/tools/clippy/clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmap_clone.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -144,7 +144,7 @@ impl MapClone {\n     fn lint_explicit_closure(&self, cx: &LateContext<'_>, replace: Span, root: Span, is_copy: bool) {\n         let mut applicability = Applicability::MachineApplicable;\n \n-        let (message, sugg_method) = if is_copy && meets_msrv(self.msrv.as_ref(), &msrvs::ITERATOR_COPIED) {\n+        let (message, sugg_method) = if is_copy && meets_msrv(self.msrv, msrvs::ITERATOR_COPIED) {\n             (\"you are using an explicit closure for copying elements\", \"copied\")\n         } else {\n             (\"you are using an explicit closure for cloning elements\", \"cloned\")"}, {"sha": "a96a7fe55f3a3bb8304711b9a00923c64e41725d", "filename": "src/tools/clippy/clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -16,7 +16,7 @@ use std::collections::hash_map::Entry;\n \n use super::MATCH_SAME_ARMS;\n \n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, arms: &'tcx [Arm<'_>]) {\n     let hash = |&(_, arm): &(usize, &Arm<'_>)| -> u64 {\n         let mut h = SpanlessHash::new(cx);\n@@ -225,9 +225,9 @@ fn iter_matching_struct_fields<'a>(\n     Iter(left.iter(), right.iter())\n }\n \n-#[allow(clippy::similar_names)]\n+#[expect(clippy::similar_names)]\n impl<'a> NormalizedPat<'a> {\n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     fn from_pat(cx: &LateContext<'_>, arena: &'a DroplessArena, pat: &'a Pat<'_>) -> Self {\n         match pat.kind {\n             PatKind::Wild | PatKind::Binding(.., None) => Self::Wild,"}, {"sha": "a59711d4cace5f7b17b0a4f3bf8675cfb9ca4c80", "filename": "src/tools/clippy/clippy_lints/src/matches/match_single_binding.rs", "status": "modified", "additions": 121, "deletions": 54, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_single_binding.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,15 +1,22 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::{indent_of, snippet_block, snippet_with_applicability};\n+use clippy_utils::macros::HirNode;\n+use clippy_utils::source::{indent_of, snippet, snippet_block, snippet_with_applicability};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::{get_parent_expr, is_refutable, peel_blocks};\n use rustc_errors::Applicability;\n-use rustc_hir::{Arm, Expr, ExprKind, Local, Node, PatKind};\n+use rustc_hir::{Arm, Expr, ExprKind, Node, PatKind};\n use rustc_lint::LateContext;\n+use rustc_span::Span;\n \n use super::MATCH_SINGLE_BINDING;\n \n-#[allow(clippy::too_many_lines)]\n-pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n+enum AssignmentExpr {\n+    Assign { span: Span, match_span: Span },\n+    Local { span: Span, pat_span: Span },\n+}\n+\n+#[expect(clippy::too_many_lines)]\n+pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], expr: &Expr<'a>) {\n     if expr.span.from_expansion() || arms.len() != 1 || is_refutable(cx, arms[0].pat) {\n         return;\n     }\n@@ -42,61 +49,59 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n     let mut applicability = Applicability::MaybeIncorrect;\n     match arms[0].pat.kind {\n         PatKind::Binding(..) | PatKind::Tuple(_, _) | PatKind::Struct(..) => {\n-            // If this match is in a local (`let`) stmt\n-            let (target_span, sugg) = if let Some(parent_let_node) = opt_parent_let(cx, ex) {\n-                (\n-                    parent_let_node.span,\n+            let (target_span, sugg) = match opt_parent_assign_span(cx, ex) {\n+                Some(AssignmentExpr::Assign { span, match_span }) => {\n+                    let sugg = sugg_with_curlies(\n+                        cx,\n+                        (ex, expr),\n+                        (bind_names, matched_vars),\n+                        &*snippet_body,\n+                        &mut applicability,\n+                        Some(span),\n+                    );\n+\n+                    span_lint_and_sugg(\n+                        cx,\n+                        MATCH_SINGLE_BINDING,\n+                        span.to(match_span),\n+                        \"this assignment could be simplified\",\n+                        \"consider removing the `match` expression\",\n+                        sugg,\n+                        applicability,\n+                    );\n+\n+                    return;\n+                },\n+                Some(AssignmentExpr::Local { span, pat_span }) => (\n+                    span,\n                     format!(\n                         \"let {} = {};\\n{}let {} = {};\",\n                         snippet_with_applicability(cx, bind_names, \"..\", &mut applicability),\n                         snippet_with_applicability(cx, matched_vars, \"..\", &mut applicability),\n                         \" \".repeat(indent_of(cx, expr.span).unwrap_or(0)),\n-                        snippet_with_applicability(cx, parent_let_node.pat.span, \"..\", &mut applicability),\n+                        snippet_with_applicability(cx, pat_span, \"..\", &mut applicability),\n                         snippet_body\n                     ),\n-                )\n-            } else {\n-                // If we are in closure, we need curly braces around suggestion\n-                let mut indent = \" \".repeat(indent_of(cx, ex.span).unwrap_or(0));\n-                let (mut cbrace_start, mut cbrace_end) = (\"\".to_string(), \"\".to_string());\n-                if let Some(parent_expr) = get_parent_expr(cx, expr) {\n-                    if let ExprKind::Closure(..) = parent_expr.kind {\n-                        cbrace_end = format!(\"\\n{}}}\", indent);\n-                        // Fix body indent due to the closure\n-                        indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));\n-                        cbrace_start = format!(\"{{\\n{}\", indent);\n-                    }\n-                }\n-                // If the parent is already an arm, and the body is another match statement,\n-                // we need curly braces around suggestion\n-                let parent_node_id = cx.tcx.hir().get_parent_node(expr.hir_id);\n-                if let Node::Arm(arm) = &cx.tcx.hir().get(parent_node_id) {\n-                    if let ExprKind::Match(..) = arm.body.kind {\n-                        cbrace_end = format!(\"\\n{}}}\", indent);\n-                        // Fix body indent due to the match\n-                        indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));\n-                        cbrace_start = format!(\"{{\\n{}\", indent);\n-                    }\n-                }\n-                (\n-                    expr.span,\n-                    format!(\n-                        \"{}let {} = {};\\n{}{}{}\",\n-                        cbrace_start,\n-                        snippet_with_applicability(cx, bind_names, \"..\", &mut applicability),\n-                        snippet_with_applicability(cx, matched_vars, \"..\", &mut applicability),\n-                        indent,\n-                        snippet_body,\n-                        cbrace_end\n-                    ),\n-                )\n+                ),\n+                None => {\n+                    let sugg = sugg_with_curlies(\n+                        cx,\n+                        (ex, expr),\n+                        (bind_names, matched_vars),\n+                        &*snippet_body,\n+                        &mut applicability,\n+                        None,\n+                    );\n+                    (expr.span, sugg)\n+                },\n             };\n+\n             span_lint_and_sugg(\n                 cx,\n                 MATCH_SINGLE_BINDING,\n                 target_span,\n                 \"this match could be written as a `let` statement\",\n-                \"consider using `let` statement\",\n+                \"consider using a `let` statement\",\n                 sugg,\n                 applicability,\n             );\n@@ -110,6 +115,7 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n                     indent,\n                     snippet_body\n                 );\n+\n                 span_lint_and_sugg(\n                     cx,\n                     MATCH_SINGLE_BINDING,\n@@ -135,15 +141,76 @@ pub(crate) fn check<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], e\n     }\n }\n \n-/// Returns true if the `ex` match expression is in a local (`let`) statement\n-fn opt_parent_let<'a>(cx: &LateContext<'a>, ex: &Expr<'a>) -> Option<&'a Local<'a>> {\n+/// Returns true if the `ex` match expression is in a local (`let`) or assign expression\n+fn opt_parent_assign_span<'a>(cx: &LateContext<'a>, ex: &Expr<'a>) -> Option<AssignmentExpr> {\n     let map = &cx.tcx.hir();\n-    if_chain! {\n-        if let Some(Node::Expr(parent_arm_expr)) = map.find(map.get_parent_node(ex.hir_id));\n-        if let Some(Node::Local(parent_let_expr)) = map.find(map.get_parent_node(parent_arm_expr.hir_id));\n-        then {\n-            return Some(parent_let_expr);\n-        }\n+\n+    if let Some(Node::Expr(parent_arm_expr)) = map.find(map.get_parent_node(ex.hir_id)) {\n+        return match map.find(map.get_parent_node(parent_arm_expr.hir_id)) {\n+            Some(Node::Local(parent_let_expr)) => Some(AssignmentExpr::Local {\n+                span: parent_let_expr.span,\n+                pat_span: parent_let_expr.pat.span(),\n+            }),\n+            Some(Node::Expr(Expr {\n+                kind: ExprKind::Assign(parent_assign_expr, match_expr, _),\n+                ..\n+            })) => Some(AssignmentExpr::Assign {\n+                span: parent_assign_expr.span,\n+                match_span: match_expr.span,\n+            }),\n+            _ => None,\n+        };\n     }\n+\n     None\n }\n+\n+fn sugg_with_curlies<'a>(\n+    cx: &LateContext<'a>,\n+    (ex, match_expr): (&Expr<'a>, &Expr<'a>),\n+    (bind_names, matched_vars): (Span, Span),\n+    snippet_body: &str,\n+    applicability: &mut Applicability,\n+    assignment: Option<Span>,\n+) -> String {\n+    let mut indent = \" \".repeat(indent_of(cx, ex.span).unwrap_or(0));\n+\n+    let (mut cbrace_start, mut cbrace_end) = (String::new(), String::new());\n+    if let Some(parent_expr) = get_parent_expr(cx, match_expr) {\n+        if let ExprKind::Closure(..) = parent_expr.kind {\n+            cbrace_end = format!(\"\\n{}}}\", indent);\n+            // Fix body indent due to the closure\n+            indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));\n+            cbrace_start = format!(\"{{\\n{}\", indent);\n+        }\n+    }\n+\n+    // If the parent is already an arm, and the body is another match statement,\n+    // we need curly braces around suggestion\n+    let parent_node_id = cx.tcx.hir().get_parent_node(match_expr.hir_id);\n+    if let Node::Arm(arm) = &cx.tcx.hir().get(parent_node_id) {\n+        if let ExprKind::Match(..) = arm.body.kind {\n+            cbrace_end = format!(\"\\n{}}}\", indent);\n+            // Fix body indent due to the match\n+            indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));\n+            cbrace_start = format!(\"{{\\n{}\", indent);\n+        }\n+    }\n+\n+    let assignment_str = assignment.map_or_else(String::new, |span| {\n+        let mut s = snippet(cx, span, \"..\").to_string();\n+        s.push_str(\" = \");\n+        s\n+    });\n+\n+    format!(\n+        \"{}let {} = {};\\n{}{}{}{}\",\n+        cbrace_start,\n+        snippet_with_applicability(cx, bind_names, \"..\", applicability),\n+        snippet_with_applicability(cx, matched_vars, \"..\", applicability),\n+        indent,\n+        assignment_str,\n+        snippet_body,\n+        cbrace_end\n+    )\n+}"}, {"sha": "6f8d766aef7c7806b382b51ec1d3edb9af26a9e6", "filename": "src/tools/clippy/clippy_lints/src/matches/match_wild_enum.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_wild_enum.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -10,7 +10,7 @@ use rustc_span::sym;\n \n use super::{MATCH_WILDCARD_FOR_SINGLE_VARIANTS, WILDCARD_ENUM_MATCH_ARM};\n \n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n     let ty = cx.typeck_results().expr_ty(ex).peel_refs();\n     let adt_def = match ty.kind() {\n@@ -56,7 +56,6 @@ pub(crate) fn check(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n         recurse_or_patterns(arm.pat, |pat| {\n             let path = match &peel_hir_pat_refs(pat).0.kind {\n                 PatKind::Path(path) => {\n-                    #[allow(clippy::match_same_arms)]\n                     let id = match cx.qpath_res(path, pat.hir_id) {\n                         Res::Def(\n                             DefKind::Const | DefKind::ConstParam | DefKind::AnonConst | DefKind::InlineConst,"}, {"sha": "3d8391bce2b28ff49a7c0e87fa20bec7f9700684", "filename": "src/tools/clippy/clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -658,7 +658,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n             }\n             if !contains_cfg_arm(cx, expr, ex, arms) {\n                 if source == MatchSource::Normal {\n-                    if !(meets_msrv(self.msrv.as_ref(), &msrvs::MATCHES_MACRO)\n+                    if !(meets_msrv(self.msrv, msrvs::MATCHES_MACRO)\n                         && match_like_matches::check_match(cx, expr, ex, arms))\n                     {\n                         match_same_arms::check(cx, arms);\n@@ -685,7 +685,7 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n             match_wild_err_arm::check(cx, ex, arms);\n             wild_in_or_pats::check(cx, arms);\n         } else {\n-            if meets_msrv(self.msrv.as_ref(), &msrvs::MATCHES_MACRO) {\n+            if meets_msrv(self.msrv, msrvs::MATCHES_MACRO) {\n                 match_like_matches::check(cx, expr);\n             }\n             redundant_pattern_match::check(cx, expr);"}, {"sha": "1a8b9d15f370f1e3df5843b5b6bf22b6d36ae1fc", "filename": "src/tools/clippy/clippy_lints/src/matches/redundant_pattern_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fredundant_pattern_match.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -340,7 +340,7 @@ pub(super) fn check_match<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, op\n     }\n }\n \n-#[allow(clippy::too_many_arguments)]\n+#[expect(clippy::too_many_arguments)]\n fn find_good_method_for_match<'a>(\n     cx: &LateContext<'_>,\n     arms: &[Arm<'_>],"}, {"sha": "41073d40f3d79052530e6afc063eeeb9ed44f970", "filename": "src/tools/clippy/clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmem_replace.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -254,7 +254,7 @@ impl<'tcx> LateLintPass<'tcx> for MemReplace {\n             then {\n                 check_replace_option_with_none(cx, src, dest, expr.span);\n                 check_replace_with_uninit(cx, src, dest, expr.span);\n-                if meets_msrv(self.msrv.as_ref(), &msrvs::MEM_TAKE) {\n+                if meets_msrv(self.msrv, msrvs::MEM_TAKE) {\n                     check_replace_with_default(cx, src, dest, expr.span);\n                 }\n             }"}, {"sha": "e9aeab2d5b62e37180d67dc5bc64b75b12fa8666", "filename": "src/tools/clippy/clippy_lints/src/methods/cloned_instead_of_copied.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcloned_instead_of_copied.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -10,16 +10,16 @@ use rustc_span::{sym, Span};\n \n use super::CLONED_INSTEAD_OF_COPIED;\n \n-pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span, msrv: Option<&RustcVersion>) {\n+pub fn check(cx: &LateContext<'_>, expr: &Expr<'_>, recv: &Expr<'_>, span: Span, msrv: Option<RustcVersion>) {\n     let recv_ty = cx.typeck_results().expr_ty_adjusted(recv);\n     let inner_ty = match recv_ty.kind() {\n         // `Option<T>` -> `T`\n         ty::Adt(adt, subst)\n-            if cx.tcx.is_diagnostic_item(sym::Option, adt.did()) && meets_msrv(msrv, &msrvs::OPTION_COPIED) =>\n+            if cx.tcx.is_diagnostic_item(sym::Option, adt.did()) && meets_msrv(msrv, msrvs::OPTION_COPIED) =>\n         {\n             subst.type_at(0)\n         },\n-        _ if is_trait_method(cx, expr, sym::Iterator) && meets_msrv(msrv, &msrvs::ITERATOR_COPIED) => {\n+        _ if is_trait_method(cx, expr, sym::Iterator) && meets_msrv(msrv, msrvs::ITERATOR_COPIED) => {\n             match get_iterator_item_ty(cx, recv_ty) {\n                 // <T as Iterator>::Item\n                 Some(ty) => ty,"}, {"sha": "570a1b87358ddb042699df7a3b3b778c7f125a46", "filename": "src/tools/clippy/clippy_lints/src/methods/err_expect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ferr_expect.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -13,15 +13,15 @@ pub(super) fn check(\n     cx: &LateContext<'_>,\n     _expr: &rustc_hir::Expr<'_>,\n     recv: &rustc_hir::Expr<'_>,\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n     expect_span: Span,\n     err_span: Span,\n ) {\n     if_chain! {\n         if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n         // Test the version to make sure the lint can be showed (expect_err has been\n         // introduced in rust 1.17.0 : https://github.com/rust-lang/rust/pull/38982)\n-        if meets_msrv(msrv, &msrvs::EXPECT_ERR);\n+        if meets_msrv(msrv, msrvs::EXPECT_ERR);\n \n         // Grabs the `Result<T, E>` type\n         let result_type = cx.typeck_results().expr_ty(recv);"}, {"sha": "fbc3348f1855fe3b7a8af071101bde3548905971", "filename": "src/tools/clippy/clippy_lints/src/methods/expect_used.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,4 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::is_in_test_function;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -7,7 +8,7 @@ use rustc_span::sym;\n use super::EXPECT_USED;\n \n /// lint use of `expect()` for `Option`s and `Result`s\n-pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, allow_expect_in_tests: bool) {\n     let obj_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n \n     let mess = if is_type_diagnostic_item(cx, obj_ty, sym::Option) {\n@@ -18,6 +19,10 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n         None\n     };\n \n+    if allow_expect_in_tests && is_in_test_function(cx.tcx, expr.hir_id) {\n+        return;\n+    }\n+\n     if let Some((lint, kind, none_value)) = mess {\n         span_lint_and_help(\n             cx,"}, {"sha": "38ec4d8e3ab8fb9ea62e50d3b45e5473041b9279", "filename": "src/tools/clippy/clippy_lints/src/methods/filter_map_next.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -14,10 +14,10 @@ pub(super) fn check<'tcx>(\n     expr: &'tcx hir::Expr<'_>,\n     recv: &'tcx hir::Expr<'_>,\n     arg: &'tcx hir::Expr<'_>,\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) {\n     if is_trait_method(cx, expr, sym::Iterator) {\n-        if !meets_msrv(msrv, &msrvs::ITERATOR_FIND_MAP) {\n+        if !meets_msrv(msrv, msrvs::ITERATOR_FIND_MAP) {\n             return;\n         }\n "}, {"sha": "aa176dcc8b4af2016da9584758306e610129aa64", "filename": "src/tools/clippy/clippy_lints/src/methods/is_digit_ascii_radix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fis_digit_ascii_radix.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -15,9 +15,9 @@ pub(super) fn check<'tcx>(\n     expr: &'tcx Expr<'_>,\n     self_arg: &'tcx Expr<'_>,\n     radix: &'tcx Expr<'_>,\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) {\n-    if !meets_msrv(msrv, &msrvs::IS_ASCII_DIGIT) {\n+    if !meets_msrv(msrv, msrvs::IS_ASCII_DIGIT) {\n         return;\n     }\n "}, {"sha": "4a8e7ce4ddbbd3d9dc171e2732f93e55b99f85ae", "filename": "src/tools/clippy/clippy_lints/src/methods/map_unwrap_or.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -19,13 +19,13 @@ pub(super) fn check<'tcx>(\n     recv: &'tcx hir::Expr<'_>,\n     map_arg: &'tcx hir::Expr<'_>,\n     unwrap_arg: &'tcx hir::Expr<'_>,\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) -> bool {\n     // lint if the caller of `map()` is an `Option`\n     let is_option = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Option);\n     let is_result = is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(recv), sym::Result);\n \n-    if is_result && !meets_msrv(msrv, &msrvs::RESULT_MAP_OR_ELSE) {\n+    if is_result && !meets_msrv(msrv, msrvs::RESULT_MAP_OR_ELSE) {\n         return false;\n     }\n "}, {"sha": "35fc452ed7cf0a79f4da205e0cf95020c38a560e", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 194, "deletions": 182, "changes": 376, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1563,7 +1563,7 @@ declare_clippy_lint! {\n     #[clippy::version = \"1.39.0\"]\n     pub MANUAL_SATURATING_ARITHMETIC,\n     style,\n-    \"`.chcked_add/sub(x).unwrap_or(MAX/MIN)`\"\n+    \"`.checked_add/sub(x).unwrap_or(MAX/MIN)`\"\n }\n \n declare_clippy_lint! {\n@@ -1776,8 +1776,6 @@ declare_clippy_lint! {\n     ///\n     /// ### Example\n     /// ```rust\n-    /// use std::iter::FromIterator;\n-    ///\n     /// let five_fives = std::iter::repeat(5).take(5);\n     ///\n     /// let v = Vec::from_iter(five_fives);\n@@ -2200,14 +2198,23 @@ declare_clippy_lint! {\n pub struct Methods {\n     avoid_breaking_exported_api: bool,\n     msrv: Option<RustcVersion>,\n+    allow_expect_in_tests: bool,\n+    allow_unwrap_in_tests: bool,\n }\n \n impl Methods {\n     #[must_use]\n-    pub fn new(avoid_breaking_exported_api: bool, msrv: Option<RustcVersion>) -> Self {\n+    pub fn new(\n+        avoid_breaking_exported_api: bool,\n+        msrv: Option<RustcVersion>,\n+        allow_expect_in_tests: bool,\n+        allow_unwrap_in_tests: bool,\n+    ) -> Self {\n         Self {\n             avoid_breaking_exported_api,\n             msrv,\n+            allow_expect_in_tests,\n+            allow_unwrap_in_tests,\n         }\n     }\n }\n@@ -2306,7 +2313,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             return;\n         }\n \n-        check_methods(cx, expr, self.msrv.as_ref());\n+        self.check_methods(cx, expr);\n \n         match expr.kind {\n             hir::ExprKind::Call(func, args) => {\n@@ -2322,7 +2329,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 single_char_add_str::check(cx, expr, args);\n                 into_iter_on_ref::check(cx, expr, method_span, method_call.ident.name, args);\n                 single_char_pattern::check(cx, expr, method_call.ident.name, args);\n-                unnecessary_to_owned::check(cx, expr, method_call.ident.name, args, self.msrv.as_ref());\n+                unnecessary_to_owned::check(cx, expr, method_call.ident.name, args, self.msrv);\n             },\n             hir::ExprKind::Binary(op, lhs, rhs) if op.node == hir::BinOpKind::Eq || op.node == hir::BinOpKind::Ne => {\n                 let mut info = BinaryExprInfo {\n@@ -2505,196 +2512,201 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n     extract_msrv_attr!(LateContext);\n }\n \n-#[allow(clippy::too_many_lines)]\n-fn check_methods<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, msrv: Option<&RustcVersion>) {\n-    if let Some((name, [recv, args @ ..], span)) = method_call(expr) {\n-        match (name, args) {\n-            (\"add\" | \"offset\" | \"sub\" | \"wrapping_offset\" | \"wrapping_add\" | \"wrapping_sub\", [_arg]) => {\n-                zst_offset::check(cx, expr, recv);\n-            },\n-            (\"and_then\", [arg]) => {\n-                let biom_option_linted = bind_instead_of_map::OptionAndThenSome::check(cx, expr, recv, arg);\n-                let biom_result_linted = bind_instead_of_map::ResultAndThenOk::check(cx, expr, recv, arg);\n-                if !biom_option_linted && !biom_result_linted {\n-                    unnecessary_lazy_eval::check(cx, expr, recv, arg, \"and\");\n-                }\n-            },\n-            (\"as_deref\" | \"as_deref_mut\", []) => {\n-                needless_option_as_deref::check(cx, expr, recv, name);\n-            },\n-            (\"as_mut\", []) => useless_asref::check(cx, expr, \"as_mut\", recv),\n-            (\"as_ref\", []) => useless_asref::check(cx, expr, \"as_ref\", recv),\n-            (\"assume_init\", []) => uninit_assumed_init::check(cx, expr, recv),\n-            (\"cloned\", []) => cloned_instead_of_copied::check(cx, expr, recv, span, msrv),\n-            (\"collect\", []) => match method_call(recv) {\n-                Some((name @ (\"cloned\" | \"copied\"), [recv2], _)) => {\n-                    iter_cloned_collect::check(cx, name, expr, recv2);\n+impl Methods {\n+    #[allow(clippy::too_many_lines)]\n+    fn check_methods<'tcx>(&self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n+        if let Some((name, [recv, args @ ..], span)) = method_call(expr) {\n+            match (name, args) {\n+                (\"add\" | \"offset\" | \"sub\" | \"wrapping_offset\" | \"wrapping_add\" | \"wrapping_sub\", [_arg]) => {\n+                    zst_offset::check(cx, expr, recv);\n+                },\n+                (\"and_then\", [arg]) => {\n+                    let biom_option_linted = bind_instead_of_map::OptionAndThenSome::check(cx, expr, recv, arg);\n+                    let biom_result_linted = bind_instead_of_map::ResultAndThenOk::check(cx, expr, recv, arg);\n+                    if !biom_option_linted && !biom_result_linted {\n+                        unnecessary_lazy_eval::check(cx, expr, recv, arg, \"and\");\n+                    }\n+                },\n+                (\"as_deref\" | \"as_deref_mut\", []) => {\n+                    needless_option_as_deref::check(cx, expr, recv, name);\n+                },\n+                (\"as_mut\", []) => useless_asref::check(cx, expr, \"as_mut\", recv),\n+                (\"as_ref\", []) => useless_asref::check(cx, expr, \"as_ref\", recv),\n+                (\"assume_init\", []) => uninit_assumed_init::check(cx, expr, recv),\n+                (\"cloned\", []) => cloned_instead_of_copied::check(cx, expr, recv, span, self.msrv),\n+                (\"collect\", []) => match method_call(recv) {\n+                    Some((name @ (\"cloned\" | \"copied\"), [recv2], _)) => {\n+                        iter_cloned_collect::check(cx, name, expr, recv2);\n+                    },\n+                    Some((\"map\", [m_recv, m_arg], _)) => {\n+                        map_collect_result_unit::check(cx, expr, m_recv, m_arg, recv);\n+                    },\n+                    Some((\"take\", [take_self_arg, take_arg], _)) => {\n+                        if meets_msrv(self.msrv, msrvs::STR_REPEAT) {\n+                            manual_str_repeat::check(cx, expr, recv, take_self_arg, take_arg);\n+                        }\n+                    },\n+                    _ => {},\n+                },\n+                (name @ \"count\", args @ []) => match method_call(recv) {\n+                    Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                    Some((name2 @ (\"into_iter\" | \"iter\" | \"iter_mut\"), [recv2], _)) => {\n+                        iter_count::check(cx, expr, recv2, name2);\n+                    },\n+                    Some((\"map\", [_, arg], _)) => suspicious_map::check(cx, expr, recv, arg),\n+                    _ => {},\n+                },\n+                (\"drain\", [arg]) => {\n+                    iter_with_drain::check(cx, expr, recv, span, arg);\n+                },\n+                (\"expect\", [_]) => match method_call(recv) {\n+                    Some((\"ok\", [recv], _)) => ok_expect::check(cx, expr, recv),\n+                    Some((\"err\", [recv], err_span)) => err_expect::check(cx, expr, recv, self.msrv, span, err_span),\n+                    _ => expect_used::check(cx, expr, recv, self.allow_expect_in_tests),\n+                },\n+                (\"extend\", [arg]) => {\n+                    string_extend_chars::check(cx, expr, recv, arg);\n+                    extend_with_drain::check(cx, expr, recv, arg);\n+                },\n+                (\"filter_map\", [arg]) => {\n+                    unnecessary_filter_map::check(cx, expr, arg, name);\n+                    filter_map_identity::check(cx, expr, arg, span);\n                 },\n-                Some((\"map\", [m_recv, m_arg], _)) => {\n-                    map_collect_result_unit::check(cx, expr, m_recv, m_arg, recv);\n+                (\"find_map\", [arg]) => {\n+                    unnecessary_filter_map::check(cx, expr, arg, name);\n                 },\n-                Some((\"take\", [take_self_arg, take_arg], _)) => {\n-                    if meets_msrv(msrv, &msrvs::STR_REPEAT) {\n-                        manual_str_repeat::check(cx, expr, recv, take_self_arg, take_arg);\n+                (\"flat_map\", [arg]) => {\n+                    flat_map_identity::check(cx, expr, arg, span);\n+                    flat_map_option::check(cx, expr, arg, span);\n+                },\n+                (name @ \"flatten\", args @ []) => match method_call(recv) {\n+                    Some((\"map\", [recv, map_arg], map_span)) => map_flatten::check(cx, expr, recv, map_arg, map_span),\n+                    Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                    _ => {},\n+                },\n+                (\"fold\", [init, acc]) => unnecessary_fold::check(cx, expr, init, acc, span),\n+                (\"for_each\", [_]) => {\n+                    if let Some((\"inspect\", [_, _], span2)) = method_call(recv) {\n+                        inspect_for_each::check(cx, expr, span2);\n                     }\n                 },\n-                _ => {},\n-            },\n-            (name @ \"count\", args @ []) => match method_call(recv) {\n-                Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n-                Some((name2 @ (\"into_iter\" | \"iter\" | \"iter_mut\"), [recv2], _)) => {\n-                    iter_count::check(cx, expr, recv2, name2);\n+                (\"get_or_insert_with\", [arg]) => unnecessary_lazy_eval::check(cx, expr, recv, arg, \"get_or_insert\"),\n+                (\"is_file\", []) => filetype_is_file::check(cx, expr, recv),\n+                (\"is_digit\", [radix]) => is_digit_ascii_radix::check(cx, expr, recv, radix, self.msrv),\n+                (\"is_none\", []) => check_is_some_is_none(cx, expr, recv, false),\n+                (\"is_some\", []) => check_is_some_is_none(cx, expr, recv, true),\n+                (\"join\", [join_arg]) => {\n+                    if let Some((\"collect\", _, span)) = method_call(recv) {\n+                        unnecessary_join::check(cx, expr, recv, join_arg, span);\n+                    }\n                 },\n-                Some((\"map\", [_, arg], _)) => suspicious_map::check(cx, expr, recv, arg),\n-                _ => {},\n-            },\n-            (\"drain\", [arg]) => {\n-                iter_with_drain::check(cx, expr, recv, span, arg);\n-            },\n-            (\"expect\", [_]) => match method_call(recv) {\n-                Some((\"ok\", [recv], _)) => ok_expect::check(cx, expr, recv),\n-                Some((\"err\", [recv], err_span)) => err_expect::check(cx, expr, recv, msrv, span, err_span),\n-                _ => expect_used::check(cx, expr, recv),\n-            },\n-            (\"extend\", [arg]) => {\n-                string_extend_chars::check(cx, expr, recv, arg);\n-                extend_with_drain::check(cx, expr, recv, arg);\n-            },\n-            (\"filter_map\", [arg]) => {\n-                unnecessary_filter_map::check(cx, expr, arg, name);\n-                filter_map_identity::check(cx, expr, arg, span);\n-            },\n-            (\"find_map\", [arg]) => {\n-                unnecessary_filter_map::check(cx, expr, arg, name);\n-            },\n-            (\"flat_map\", [arg]) => {\n-                flat_map_identity::check(cx, expr, arg, span);\n-                flat_map_option::check(cx, expr, arg, span);\n-            },\n-            (name @ \"flatten\", args @ []) => match method_call(recv) {\n-                Some((\"map\", [recv, map_arg], map_span)) => map_flatten::check(cx, expr, recv, map_arg, map_span),\n-                Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n-                _ => {},\n-            },\n-            (\"fold\", [init, acc]) => unnecessary_fold::check(cx, expr, init, acc, span),\n-            (\"for_each\", [_]) => {\n-                if let Some((\"inspect\", [_, _], span2)) = method_call(recv) {\n-                    inspect_for_each::check(cx, expr, span2);\n-                }\n-            },\n-            (\"get_or_insert_with\", [arg]) => unnecessary_lazy_eval::check(cx, expr, recv, arg, \"get_or_insert\"),\n-            (\"is_file\", []) => filetype_is_file::check(cx, expr, recv),\n-            (\"is_digit\", [radix]) => is_digit_ascii_radix::check(cx, expr, recv, radix, msrv),\n-            (\"is_none\", []) => check_is_some_is_none(cx, expr, recv, false),\n-            (\"is_some\", []) => check_is_some_is_none(cx, expr, recv, true),\n-            (\"join\", [join_arg]) => {\n-                if let Some((\"collect\", _, span)) = method_call(recv) {\n-                    unnecessary_join::check(cx, expr, recv, join_arg, span);\n-                }\n-            },\n-            (\"last\", args @ []) | (\"skip\", args @ [_]) => {\n-                if let Some((name2, [recv2, args2 @ ..], _span2)) = method_call(recv) {\n-                    if let (\"cloned\", []) = (name2, args2) {\n-                        iter_overeager_cloned::check(cx, expr, recv2, name, args);\n+                (\"last\", args @ []) | (\"skip\", args @ [_]) => {\n+                    if let Some((name2, [recv2, args2 @ ..], _span2)) = method_call(recv) {\n+                        if let (\"cloned\", []) = (name2, args2) {\n+                            iter_overeager_cloned::check(cx, expr, recv2, name, args);\n+                        }\n                     }\n-                }\n-            },\n-            (name @ (\"map\" | \"map_err\"), [m_arg]) => {\n-                if let Some((name, [recv2, args @ ..], span2)) = method_call(recv) {\n-                    match (name, args) {\n-                        (\"as_mut\", []) => option_as_ref_deref::check(cx, expr, recv2, m_arg, true, msrv),\n-                        (\"as_ref\", []) => option_as_ref_deref::check(cx, expr, recv2, m_arg, false, msrv),\n-                        (\"filter\", [f_arg]) => {\n-                            filter_map::check(cx, expr, recv2, f_arg, span2, recv, m_arg, span, false);\n-                        },\n-                        (\"find\", [f_arg]) => filter_map::check(cx, expr, recv2, f_arg, span2, recv, m_arg, span, true),\n-                        _ => {},\n+                },\n+                (name @ (\"map\" | \"map_err\"), [m_arg]) => {\n+                    if let Some((name, [recv2, args @ ..], span2)) = method_call(recv) {\n+                        match (name, args) {\n+                            (\"as_mut\", []) => option_as_ref_deref::check(cx, expr, recv2, m_arg, true, self.msrv),\n+                            (\"as_ref\", []) => option_as_ref_deref::check(cx, expr, recv2, m_arg, false, self.msrv),\n+                            (\"filter\", [f_arg]) => {\n+                                filter_map::check(cx, expr, recv2, f_arg, span2, recv, m_arg, span, false);\n+                            },\n+                            (\"find\", [f_arg]) => {\n+                                filter_map::check(cx, expr, recv2, f_arg, span2, recv, m_arg, span, true);\n+                            },\n+                            _ => {},\n+                        }\n                     }\n-                }\n-                map_identity::check(cx, expr, recv, m_arg, name, span);\n-            },\n-            (\"map_or\", [def, map]) => option_map_or_none::check(cx, expr, recv, def, map),\n-            (name @ \"next\", args @ []) => {\n-                if let Some((name2, [recv2, args2 @ ..], _)) = method_call(recv) {\n-                    match (name2, args2) {\n-                        (\"cloned\", []) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n-                        (\"filter\", [arg]) => filter_next::check(cx, expr, recv2, arg),\n-                        (\"filter_map\", [arg]) => filter_map_next::check(cx, expr, recv2, arg, msrv),\n-                        (\"iter\", []) => iter_next_slice::check(cx, expr, recv2),\n-                        (\"skip\", [arg]) => iter_skip_next::check(cx, expr, recv2, arg),\n-                        (\"skip_while\", [_]) => skip_while_next::check(cx, expr),\n-                        _ => {},\n+                    map_identity::check(cx, expr, recv, m_arg, name, span);\n+                },\n+                (\"map_or\", [def, map]) => option_map_or_none::check(cx, expr, recv, def, map),\n+                (name @ \"next\", args @ []) => {\n+                    if let Some((name2, [recv2, args2 @ ..], _)) = method_call(recv) {\n+                        match (name2, args2) {\n+                            (\"cloned\", []) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                            (\"filter\", [arg]) => filter_next::check(cx, expr, recv2, arg),\n+                            (\"filter_map\", [arg]) => filter_map_next::check(cx, expr, recv2, arg, self.msrv),\n+                            (\"iter\", []) => iter_next_slice::check(cx, expr, recv2),\n+                            (\"skip\", [arg]) => iter_skip_next::check(cx, expr, recv2, arg),\n+                            (\"skip_while\", [_]) => skip_while_next::check(cx, expr),\n+                            _ => {},\n+                        }\n                     }\n-                }\n-            },\n-            (\"nth\", args @ [n_arg]) => match method_call(recv) {\n-                Some((\"bytes\", [recv2], _)) => bytes_nth::check(cx, expr, recv2, n_arg),\n-                Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n-                Some((\"iter\", [recv2], _)) => iter_nth::check(cx, expr, recv2, recv, n_arg, false),\n-                Some((\"iter_mut\", [recv2], _)) => iter_nth::check(cx, expr, recv2, recv, n_arg, true),\n-                _ => iter_nth_zero::check(cx, expr, recv, n_arg),\n-            },\n-            (\"ok_or_else\", [arg]) => unnecessary_lazy_eval::check(cx, expr, recv, arg, \"ok_or\"),\n-            (\"or_else\", [arg]) => {\n-                if !bind_instead_of_map::ResultOrElseErrInfo::check(cx, expr, recv, arg) {\n-                    unnecessary_lazy_eval::check(cx, expr, recv, arg, \"or\");\n-                }\n-            },\n-            (\"splitn\" | \"rsplitn\", [count_arg, pat_arg]) => {\n-                if let Some((Constant::Int(count), _)) = constant(cx, cx.typeck_results(), count_arg) {\n-                    suspicious_splitn::check(cx, name, expr, recv, count);\n-                    str_splitn::check(cx, name, expr, recv, pat_arg, count, msrv);\n-                }\n-            },\n-            (\"splitn_mut\" | \"rsplitn_mut\", [count_arg, _]) => {\n-                if let Some((Constant::Int(count), _)) = constant(cx, cx.typeck_results(), count_arg) {\n-                    suspicious_splitn::check(cx, name, expr, recv, count);\n-                }\n-            },\n-            (\"step_by\", [arg]) => iterator_step_by_zero::check(cx, expr, arg),\n-            (\"take\", args @ [_arg]) => {\n-                if let Some((name2, [recv2, args2 @ ..], _span2)) = method_call(recv) {\n-                    if let (\"cloned\", []) = (name2, args2) {\n-                        iter_overeager_cloned::check(cx, expr, recv2, name, args);\n+                },\n+                (\"nth\", args @ [n_arg]) => match method_call(recv) {\n+                    Some((\"bytes\", [recv2], _)) => bytes_nth::check(cx, expr, recv2, n_arg),\n+                    Some((\"cloned\", [recv2], _)) => iter_overeager_cloned::check(cx, expr, recv2, name, args),\n+                    Some((\"iter\", [recv2], _)) => iter_nth::check(cx, expr, recv2, recv, n_arg, false),\n+                    Some((\"iter_mut\", [recv2], _)) => iter_nth::check(cx, expr, recv2, recv, n_arg, true),\n+                    _ => iter_nth_zero::check(cx, expr, recv, n_arg),\n+                },\n+                (\"ok_or_else\", [arg]) => unnecessary_lazy_eval::check(cx, expr, recv, arg, \"ok_or\"),\n+                (\"or_else\", [arg]) => {\n+                    if !bind_instead_of_map::ResultOrElseErrInfo::check(cx, expr, recv, arg) {\n+                        unnecessary_lazy_eval::check(cx, expr, recv, arg, \"or\");\n                     }\n-                }\n-            },\n-            (\"take\", []) => needless_option_take::check(cx, expr, recv),\n-            (\"to_os_string\" | \"to_owned\" | \"to_path_buf\" | \"to_vec\", []) => {\n-                implicit_clone::check(cx, name, expr, recv);\n-            },\n-            (\"unwrap\", []) => {\n-                match method_call(recv) {\n-                    Some((\"get\", [recv, get_arg], _)) => {\n-                        get_unwrap::check(cx, expr, recv, get_arg, false);\n-                    },\n-                    Some((\"get_mut\", [recv, get_arg], _)) => {\n-                        get_unwrap::check(cx, expr, recv, get_arg, true);\n+                },\n+                (\"splitn\" | \"rsplitn\", [count_arg, pat_arg]) => {\n+                    if let Some((Constant::Int(count), _)) = constant(cx, cx.typeck_results(), count_arg) {\n+                        suspicious_splitn::check(cx, name, expr, recv, count);\n+                        str_splitn::check(cx, name, expr, recv, pat_arg, count, self.msrv);\n+                    }\n+                },\n+                (\"splitn_mut\" | \"rsplitn_mut\", [count_arg, _]) => {\n+                    if let Some((Constant::Int(count), _)) = constant(cx, cx.typeck_results(), count_arg) {\n+                        suspicious_splitn::check(cx, name, expr, recv, count);\n+                    }\n+                },\n+                (\"step_by\", [arg]) => iterator_step_by_zero::check(cx, expr, arg),\n+                (\"take\", args @ [_arg]) => {\n+                    if let Some((name2, [recv2, args2 @ ..], _span2)) = method_call(recv) {\n+                        if let (\"cloned\", []) = (name2, args2) {\n+                            iter_overeager_cloned::check(cx, expr, recv2, name, args);\n+                        }\n+                    }\n+                },\n+                (\"take\", []) => needless_option_take::check(cx, expr, recv),\n+                (\"to_os_string\" | \"to_owned\" | \"to_path_buf\" | \"to_vec\", []) => {\n+                    implicit_clone::check(cx, name, expr, recv);\n+                },\n+                (\"unwrap\", []) => {\n+                    match method_call(recv) {\n+                        Some((\"get\", [recv, get_arg], _)) => {\n+                            get_unwrap::check(cx, expr, recv, get_arg, false);\n+                        },\n+                        Some((\"get_mut\", [recv, get_arg], _)) => {\n+                            get_unwrap::check(cx, expr, recv, get_arg, true);\n+                        },\n+                        Some((\"or\", [recv, or_arg], or_span)) => {\n+                            or_then_unwrap::check(cx, expr, recv, or_arg, or_span);\n+                        },\n+                        _ => {},\n+                    }\n+                    unwrap_used::check(cx, expr, recv, self.allow_unwrap_in_tests);\n+                },\n+                (\"unwrap_or\", [u_arg]) => match method_call(recv) {\n+                    Some((arith @ (\"checked_add\" | \"checked_sub\" | \"checked_mul\"), [lhs, rhs], _)) => {\n+                        manual_saturating_arithmetic::check(cx, expr, lhs, rhs, u_arg, &arith[\"checked_\".len()..]);\n                     },\n-                    Some((\"or\", [recv, or_arg], or_span)) => {\n-                        or_then_unwrap::check(cx, expr, recv, or_arg, or_span);\n+                    Some((\"map\", [m_recv, m_arg], span)) => {\n+                        option_map_unwrap_or::check(cx, expr, m_recv, m_arg, recv, u_arg, span);\n                     },\n                     _ => {},\n-                }\n-                unwrap_used::check(cx, expr, recv);\n-            },\n-            (\"unwrap_or\", [u_arg]) => match method_call(recv) {\n-                Some((arith @ (\"checked_add\" | \"checked_sub\" | \"checked_mul\"), [lhs, rhs], _)) => {\n-                    manual_saturating_arithmetic::check(cx, expr, lhs, rhs, u_arg, &arith[\"checked_\".len()..]);\n                 },\n-                Some((\"map\", [m_recv, m_arg], span)) => {\n-                    option_map_unwrap_or::check(cx, expr, m_recv, m_arg, recv, u_arg, span);\n+                (\"unwrap_or_else\", [u_arg]) => match method_call(recv) {\n+                    Some((\"map\", [recv, map_arg], _))\n+                        if map_unwrap_or::check(cx, expr, recv, map_arg, u_arg, self.msrv) => {},\n+                    _ => {\n+                        unwrap_or_else_default::check(cx, expr, recv, u_arg);\n+                        unnecessary_lazy_eval::check(cx, expr, recv, u_arg, \"unwrap_or\");\n+                    },\n                 },\n                 _ => {},\n-            },\n-            (\"unwrap_or_else\", [u_arg]) => match method_call(recv) {\n-                Some((\"map\", [recv, map_arg], _)) if map_unwrap_or::check(cx, expr, recv, map_arg, u_arg, msrv) => {},\n-                _ => {\n-                    unwrap_or_else_default::check(cx, expr, recv, u_arg);\n-                    unnecessary_lazy_eval::check(cx, expr, recv, u_arg, \"unwrap_or\");\n-                },\n-            },\n-            _ => {},\n+            }\n         }\n     }\n }\n@@ -2821,7 +2833,7 @@ const TRAIT_METHODS: [ShouldImplTraitCase; 30] = [\n     ShouldImplTraitCase::new(\"std::ops::Sub\", \"sub\",  2,  FN_HEADER,  SelfKind::Value,  OutType::Any, true),\n ];\n \n-#[derive(Clone, Copy, PartialEq, Debug)]\n+#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n enum SelfKind {\n     Value,\n     Ref,"}, {"sha": "b50a173d8359b83ab361506f2737be370bc432af", "filename": "src/tools/clippy/clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -19,9 +19,9 @@ pub(super) fn check<'tcx>(\n     as_ref_recv: &hir::Expr<'_>,\n     map_arg: &hir::Expr<'_>,\n     is_mut: bool,\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) {\n-    if !meets_msrv(msrv, &msrvs::OPTION_AS_DEREF) {\n+    if !meets_msrv(msrv, msrvs::OPTION_AS_DEREF) {\n         return;\n     }\n "}, {"sha": "90651a6ba045888935fa1b6a29294e191d775662", "filename": "src/tools/clippy/clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -24,7 +24,7 @@ pub(super) fn check(\n     self_arg: &Expr<'_>,\n     pat_arg: &Expr<'_>,\n     count: u128,\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) {\n     if count < 2 || !cx.typeck_results().expr_ty_adjusted(self_arg).peel_refs().is_str() {\n         return;\n@@ -34,7 +34,7 @@ pub(super) fn check(\n         IterUsageKind::Nth(n) => count > n + 1,\n         IterUsageKind::NextTuple => count > 2,\n     };\n-    let manual = count == 2 && meets_msrv(msrv, &msrvs::STR_SPLIT_ONCE);\n+    let manual = count == 2 && meets_msrv(msrv, msrvs::STR_SPLIT_ONCE);\n \n     match parse_iter_usage(cx, expr.span.ctxt(), cx.tcx.hir().parent_iter(expr.hir_id)) {\n         Some(usage) if needless(usage.kind) => lint_needless(cx, method_name, expr, self_arg, pat_arg),\n@@ -271,7 +271,7 @@ enum IterUsageKind {\n     NextTuple,\n }\n \n-#[derive(Debug, PartialEq)]\n+#[derive(Debug, PartialEq, Eq)]\n enum UnwrapKind {\n     Unwrap,\n     QuestionMark,"}, {"sha": "97c4feb3122a08fbaf684b56cd6d994bbf81f844", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 26, "deletions": 16, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -26,7 +26,7 @@ pub fn check<'tcx>(\n     expr: &'tcx Expr<'tcx>,\n     method_name: Symbol,\n     args: &'tcx [Expr<'tcx>],\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) {\n     if_chain! {\n         if let Some(method_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n@@ -65,13 +65,12 @@ fn check_addr_of_expr(\n         if let Some(parent) = get_parent_expr(cx, expr);\n         if let ExprKind::AddrOf(BorrowKind::Ref, Mutability::Not, _) = parent.kind;\n         let adjustments = cx.typeck_results().expr_adjustments(parent).iter().collect::<Vec<_>>();\n-        if let Some(target_ty) = match adjustments[..]\n-        {\n+        if let\n             // For matching uses of `Cow::from`\n             [\n                 Adjustment {\n                     kind: Adjust::Deref(None),\n-                    ..\n+                    target: referent_ty,\n                 },\n                 Adjustment {\n                     kind: Adjust::Borrow(_),\n@@ -82,7 +81,7 @@ fn check_addr_of_expr(\n             | [\n                 Adjustment {\n                     kind: Adjust::Deref(None),\n-                    ..\n+                    target: referent_ty,\n                 },\n                 Adjustment {\n                     kind: Adjust::Borrow(_),\n@@ -97,7 +96,7 @@ fn check_addr_of_expr(\n             | [\n                 Adjustment {\n                     kind: Adjust::Deref(None),\n-                    ..\n+                    target: referent_ty,\n                 },\n                 Adjustment {\n                     kind: Adjust::Deref(Some(OverloadedDeref { .. })),\n@@ -107,17 +106,24 @@ fn check_addr_of_expr(\n                     kind: Adjust::Borrow(_),\n                     target: target_ty,\n                 },\n-            ] => Some(target_ty),\n-            _ => None,\n-        };\n+            ] = adjustments[..];\n         let receiver_ty = cx.typeck_results().expr_ty(receiver);\n-        // Only flag cases where the receiver is copyable or the method is `Cow::into_owned`. This\n-        // restriction is to ensure there is not overlap between `redundant_clone` and this lint.\n-        if is_copy(cx, receiver_ty) || is_cow_into_owned(cx, method_name, method_def_id);\n+        let (target_ty, n_target_refs) = peel_mid_ty_refs(*target_ty);\n+        let (receiver_ty, n_receiver_refs) = peel_mid_ty_refs(receiver_ty);\n+        // Only flag cases satisfying at least one of the following three conditions:\n+        // * the referent and receiver types are distinct\n+        // * the referent/receiver type is a copyable array\n+        // * the method is `Cow::into_owned`\n+        // This restriction is to ensure there is no overlap between `redundant_clone` and this\n+        // lint. It also avoids the following false positive:\n+        //  https://github.com/rust-lang/rust-clippy/issues/8759\n+        //   Arrays are a bit of a corner case. Non-copyable arrays are handled by\n+        // `redundant_clone`, but copyable arrays are not.\n+        if *referent_ty != receiver_ty\n+            || (matches!(referent_ty.kind(), ty::Array(..)) && is_copy(cx, *referent_ty))\n+            || is_cow_into_owned(cx, method_name, method_def_id);\n         if let Some(receiver_snippet) = snippet_opt(cx, receiver.span);\n         then {\n-            let (target_ty, n_target_refs) = peel_mid_ty_refs(*target_ty);\n-            let (receiver_ty, n_receiver_refs) = peel_mid_ty_refs(receiver_ty);\n             if receiver_ty == target_ty && n_target_refs >= n_receiver_refs {\n                 span_lint_and_sugg(\n                     cx,\n@@ -192,7 +198,7 @@ fn check_into_iter_call_arg(\n     expr: &Expr<'_>,\n     method_name: Symbol,\n     receiver: &Expr<'_>,\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) -> bool {\n     if_chain! {\n         if let Some(parent) = get_parent_expr(cx, expr);\n@@ -207,7 +213,11 @@ fn check_into_iter_call_arg(\n             if unnecessary_iter_cloned::check_for_loop_iter(cx, parent, method_name, receiver, true) {\n                 return true;\n             }\n-            let cloned_or_copied = if is_copy(cx, item_ty) && meets_msrv(msrv, &msrvs::ITERATOR_COPIED) { \"copied\" } else { \"cloned\" };\n+            let cloned_or_copied = if is_copy(cx, item_ty) && meets_msrv(msrv, msrvs::ITERATOR_COPIED) {\n+                \"copied\"\n+            } else {\n+                \"cloned\"\n+            };\n             // The next suggestion may be incorrect because the removal of the `to_owned`-like\n             // function could cause the iterator to hold a reference to a resource that is used\n             // mutably. See https://github.com/rust-lang/rust-clippy/issues/8148."}, {"sha": "5c761014927c28dae2af593d4dcfaf5d46efb28e", "filename": "src/tools/clippy/clippy_lints/src/methods/unwrap_used.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,4 +1,5 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::is_in_test_function;\n use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -7,7 +8,7 @@ use rustc_span::sym;\n use super::UNWRAP_USED;\n \n /// lint use of `unwrap()` for `Option`s and `Result`s\n-pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, allow_unwrap_in_tests: bool) {\n     let obj_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n \n     let mess = if is_type_diagnostic_item(cx, obj_ty, sym::Option) {\n@@ -18,6 +19,10 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n         None\n     };\n \n+    if allow_unwrap_in_tests && is_in_test_function(cx.tcx, expr.hir_id) {\n+        return;\n+    }\n+\n     if let Some((lint, kind, none_value)) = mess {\n         span_lint_and_help(\n             cx,"}, {"sha": "7fdc28c5a062d3376472f4e2834f30d3934139ef", "filename": "src/tools/clippy/clippy_lints/src/misc.rs", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmisc.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then, span_lint_hir_and_then};\n use clippy_utils::source::{snippet, snippet_opt};\n-use clippy_utils::ty::implements_trait;\n+use clippy_utils::ty::{implements_trait, is_copy};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -20,8 +20,8 @@ use rustc_span::symbol::sym;\n use clippy_utils::consts::{constant, Constant};\n use clippy_utils::sugg::Sugg;\n use clippy_utils::{\n-    get_item_name, get_parent_expr, in_constant, is_diag_trait_item, is_integer_const, iter_input_pats,\n-    last_path_segment, match_any_def_paths, path_def_id, paths, unsext, SpanlessEq,\n+    get_item_name, get_parent_expr, in_constant, is_integer_const, iter_input_pats, last_path_segment,\n+    match_any_def_paths, path_def_id, paths, unsext, SpanlessEq,\n };\n \n declare_clippy_lint! {\n@@ -548,7 +548,7 @@ fn is_array(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     matches!(&cx.typeck_results().expr_ty(expr).peel_refs().kind(), ty::Array(_, _))\n }\n \n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left: bool) {\n     #[derive(Default)]\n     struct EqImpl {\n@@ -569,33 +569,34 @@ fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left:\n         })\n     }\n \n-    let (arg_ty, snip) = match expr.kind {\n-        ExprKind::MethodCall(.., args, _) if args.len() == 1 => {\n-            if_chain!(\n-                if let Some(expr_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n-                if is_diag_trait_item(cx, expr_def_id, sym::ToString)\n-                    || is_diag_trait_item(cx, expr_def_id, sym::ToOwned);\n-                then {\n-                    (cx.typeck_results().expr_ty(&args[0]), snippet(cx, args[0].span, \"..\"))\n-                } else {\n-                    return;\n-                }\n-            )\n+    let typeck = cx.typeck_results();\n+    let (arg, arg_span) = match expr.kind {\n+        ExprKind::MethodCall(.., [arg], _)\n+            if typeck\n+                .type_dependent_def_id(expr.hir_id)\n+                .and_then(|id| cx.tcx.trait_of_item(id))\n+                .map_or(false, |id| {\n+                    matches!(cx.tcx.get_diagnostic_name(id), Some(sym::ToString | sym::ToOwned))\n+                }) =>\n+        {\n+            (arg, arg.span)\n         },\n-        ExprKind::Call(path, [arg]) => {\n+        ExprKind::Call(path, [arg])\n             if path_def_id(cx, path)\n                 .and_then(|id| match_any_def_paths(cx, id, &[&paths::FROM_STR_METHOD, &paths::FROM_FROM]))\n-                .is_some()\n-            {\n-                (cx.typeck_results().expr_ty(arg), snippet(cx, arg.span, \"..\"))\n-            } else {\n-                return;\n-            }\n+                .map_or(false, |idx| match idx {\n+                    0 => true,\n+                    1 => !is_copy(cx, typeck.expr_ty(expr)),\n+                    _ => false,\n+                }) =>\n+        {\n+            (arg, arg.span)\n         },\n         _ => return,\n     };\n \n-    let other_ty = cx.typeck_results().expr_ty(other);\n+    let arg_ty = typeck.expr_ty(arg);\n+    let other_ty = typeck.expr_ty(other);\n \n     let without_deref = symmetric_partial_eq(cx, arg_ty, other_ty).unwrap_or_default();\n     let with_deref = arg_ty\n@@ -627,13 +628,14 @@ fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left:\n                 return;\n             }\n \n+            let arg_snip = snippet(cx, arg_span, \"..\");\n             let expr_snip;\n             let eq_impl;\n             if with_deref.is_implemented() {\n-                expr_snip = format!(\"*{}\", snip);\n+                expr_snip = format!(\"*{}\", arg_snip);\n                 eq_impl = with_deref;\n             } else {\n-                expr_snip = snip.to_string();\n+                expr_snip = arg_snip.to_string();\n                 eq_impl = without_deref;\n             };\n "}, {"sha": "16d65966c10096622166221906219d1fdba863b1", "filename": "src/tools/clippy/clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -93,7 +93,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n         span: Span,\n         hir_id: HirId,\n     ) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::CONST_IF_MATCH) {\n+        if !meets_msrv(self.msrv, msrvs::CONST_IF_MATCH) {\n             return;\n         }\n \n@@ -146,7 +146,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n \n         let mir = cx.tcx.optimized_mir(def_id);\n \n-        if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv.as_ref()) {\n+        if let Err((span, err)) = is_min_const_fn(cx.tcx, mir, self.msrv) {\n             if cx.tcx.is_const_fn_raw(def_id.to_def_id()) {\n                 cx.tcx.sess.span_err(span, err.as_ref());\n             }"}, {"sha": "405fc23e8de0a5b68cab209b7d34f7bd663cd5f3", "filename": "src/tools/clippy/clippy_lints/src/mixed_read_write_in_expression.rs", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -40,8 +40,8 @@ declare_clippy_lint! {\n     /// let a = tmp + x;\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n-    pub EVAL_ORDER_DEPENDENCE,\n-    suspicious,\n+    pub MIXED_READ_WRITE_IN_EXPRESSION,\n+    restriction,\n     \"whether a variable read occurs before a write depends on sub-expression evaluation order\"\n }\n \n@@ -73,7 +73,7 @@ declare_clippy_lint! {\n     \"whether an expression contains a diverging sub expression\"\n }\n \n-declare_lint_pass!(EvalOrderDependence => [EVAL_ORDER_DEPENDENCE, DIVERGING_SUB_EXPRESSION]);\n+declare_lint_pass!(EvalOrderDependence => [MIXED_READ_WRITE_IN_EXPRESSION, DIVERGING_SUB_EXPRESSION]);\n \n impl<'tcx> LateLintPass<'tcx> for EvalOrderDependence {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n@@ -303,7 +303,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n             if !is_in_assignment_position(self.cx, expr) {\n                 span_lint_and_note(\n                     self.cx,\n-                    EVAL_ORDER_DEPENDENCE,\n+                    MIXED_READ_WRITE_IN_EXPRESSION,\n                     expr.span,\n                     &format!(\"unsequenced read of `{}`\", self.cx.tcx.hir().name(self.var)),\n                     Some(self.write_expr.span),", "previous_filename": "src/tools/clippy/clippy_lints/src/eval_order_dependence.rs"}, {"sha": "bb6d820b08cde0891a94ca665ba4cf5d8562866e", "filename": "src/tools/clippy/clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -16,7 +16,7 @@ declare_clippy_lint! {\n     /// ### Why is this bad?\n     /// In release builds `debug_assert!` macros are optimized out by the\n     /// compiler.\n-    /// Therefore mutating something in a `debug_assert!` macro results in different behaviour\n+    /// Therefore mutating something in a `debug_assert!` macro results in different behavior\n     /// between a release and debug build.\n     ///\n     /// ### Example"}, {"sha": "623d22bc9bdfe6a6a6c1c1ef674da4ff5946e64c", "filename": "src/tools/clippy/clippy_lints/src/needless_bitwise_bool.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_bitwise_bool.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -53,7 +53,7 @@ fn is_bitwise_operation(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     false\n }\n \n-fn suggesstion_snippet(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n+fn suggestion_snippet(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<String> {\n     if let ExprKind::Binary(ref op, left, right) = expr.kind {\n         if let (Some(l_snippet), Some(r_snippet)) = (snippet_opt(cx, left.span), snippet_opt(cx, right.span)) {\n             let op_snippet = match op.node {\n@@ -75,7 +75,7 @@ impl LateLintPass<'_> for NeedlessBitwiseBool {\n                 expr.span,\n                 \"use of bitwise operator instead of lazy operator between booleans\",\n                 |diag| {\n-                    if let Some(sugg) = suggesstion_snippet(cx, expr) {\n+                    if let Some(sugg) = suggestion_snippet(cx, expr) {\n                         diag.span_suggestion(expr.span, \"try\", sugg, Applicability::MachineApplicable);\n                     }\n                 },"}, {"sha": "f423be4b67a611ee38fd40065541005f3f98766e", "filename": "src/tools/clippy/clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -70,7 +70,7 @@ macro_rules! need {\n }\n \n impl<'tcx> LateLintPass<'tcx> for NeedlessPassByValue {\n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'tcx>,"}, {"sha": "707f3b2181ac9967df8c29d5a7c4ca480e7456d3", "filename": "src/tools/clippy/clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fneg_multiply.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -34,7 +34,6 @@ declare_clippy_lint! {\n \n declare_lint_pass!(NegMultiply => [NEG_MULTIPLY]);\n \n-#[allow(clippy::match_same_arms)]\n impl<'tcx> LateLintPass<'tcx> for NegMultiply {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         if let ExprKind::Binary(ref op, left, right) = e.kind {"}, {"sha": "093ec389335db80d9a75e6ca6b566aad3c02fc16", "filename": "src/tools/clippy/clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -58,7 +58,6 @@ pub struct NewWithoutDefault {\n impl_lint_pass!(NewWithoutDefault => [NEW_WITHOUT_DEFAULT]);\n \n impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n-    #[allow(clippy::too_many_lines)]\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         if let hir::ItemKind::Impl(hir::Impl {\n             of_trait: None,"}, {"sha": "7f6b535c7b16c07f5096269ea8903c32e86570d8", "filename": "src/tools/clippy/clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -191,7 +191,7 @@ impl<'a, 'tcx, 'b> SimilarNamesNameVisitor<'a, 'tcx, 'b> {\n         }\n     }\n \n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     fn check_ident(&mut self, ident: Ident) {\n         let interned_name = ident.name.as_str();\n         if interned_name.chars().any(char::is_uppercase) {"}, {"sha": "e3ded716341f633028736d387076ceae8a39f31f", "filename": "src/tools/clippy/clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -52,7 +52,7 @@ declare_clippy_lint! {\n     /// to a function that needs the memory address. For further details, refer to\n     /// [this issue](https://github.com/rust-lang/rust-clippy/issues/5953)\n     /// that explains a real case in which this false positive\n-    /// led to an **undefined behaviour** introduced with unsafe code.\n+    /// led to an **undefined behavior** introduced with unsafe code.\n     ///\n     /// ### Example\n     ///\n@@ -124,7 +124,7 @@ impl<'tcx> PassByRefOrValue {\n             // Cap the calculated bit width at 32-bits to reduce\n             // portability problems between 32 and 64-bit targets\n             let bit_width = cmp::min(bit_width, 32);\n-            #[allow(clippy::integer_division)]\n+            #[expect(clippy::integer_division)]\n             let byte_width = bit_width / 8;\n             // Use a limit of 2 times the register byte width\n             byte_width * 2"}, {"sha": "a4d265111f9aee26d241d913d790c19bb0949740", "filename": "src/tools/clippy/clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -163,7 +163,6 @@ enum Level {\n     Lower,\n }\n \n-#[allow(rustc::usage_of_ty_tykind)]\n fn find_first_mismatch<'tcx>(cx: &LateContext<'tcx>, pat: &Pat<'_>) -> Option<(Span, Mutability, Level)> {\n     let mut result = None;\n     pat.walk(|p| {"}, {"sha": "86460c1b27e390ccc0ad3c4209e6b32599c6a041", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -514,7 +514,7 @@ fn check_mut_from_ref<'tcx>(cx: &LateContext<'tcx>, sig: &FnSig<'_>, body: Optio\n     }\n }\n \n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n fn check_ptr_arg_usage<'tcx>(cx: &LateContext<'tcx>, body: &'tcx Body<'_>, args: &[PtrArg<'tcx>]) -> Vec<PtrArgResult> {\n     struct V<'cx, 'tcx> {\n         cx: &'cx LateContext<'tcx>,"}, {"sha": "26dc88a406e0294719c8fdc2d2f68d966c77b7fe", "filename": "src/tools/clippy/clippy_lints/src/ranges.rs", "status": "modified", "additions": 53, "deletions": 20, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -193,7 +193,7 @@ impl<'tcx> LateLintPass<'tcx> for Ranges {\n                 check_range_zip_with_len(cx, path, args, expr.span);\n             },\n             ExprKind::Binary(ref op, l, r) => {\n-                if meets_msrv(self.msrv.as_ref(), &msrvs::RANGE_CONTAINS) {\n+                if meets_msrv(self.msrv, msrvs::RANGE_CONTAINS) {\n                     check_possible_range_contains(cx, op.node, l, r, expr);\n                 }\n             },\n@@ -207,7 +207,13 @@ impl<'tcx> LateLintPass<'tcx> for Ranges {\n     extract_msrv_attr!(LateContext);\n }\n \n-fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'_>, r: &Expr<'_>, expr: &Expr<'_>) {\n+fn check_possible_range_contains(\n+    cx: &LateContext<'_>,\n+    op: BinOpKind,\n+    left: &Expr<'_>,\n+    right: &Expr<'_>,\n+    expr: &Expr<'_>,\n+) {\n     if in_constant(cx, expr.hir_id) {\n         return;\n     }\n@@ -219,21 +225,19 @@ fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'\n         _ => return,\n     };\n     // value, name, order (higher/lower), inclusiveness\n-    if let (Some((lval, lid, name_span, lval_span, lord, linc)), Some((rval, rid, _, rval_span, rord, rinc))) =\n-        (check_range_bounds(cx, l), check_range_bounds(cx, r))\n-    {\n+    if let (Some(l), Some(r)) = (check_range_bounds(cx, left), check_range_bounds(cx, right)) {\n         // we only lint comparisons on the same name and with different\n         // direction\n-        if lid != rid || lord == rord {\n+        if l.id != r.id || l.ord == r.ord {\n             return;\n         }\n-        let ord = Constant::partial_cmp(cx.tcx, cx.typeck_results().expr_ty(l), &lval, &rval);\n-        if combine_and && ord == Some(rord) {\n+        let ord = Constant::partial_cmp(cx.tcx, cx.typeck_results().expr_ty(l.expr), &l.val, &r.val);\n+        if combine_and && ord == Some(r.ord) {\n             // order lower bound and upper bound\n-            let (l_span, u_span, l_inc, u_inc) = if rord == Ordering::Less {\n-                (lval_span, rval_span, linc, rinc)\n+            let (l_span, u_span, l_inc, u_inc) = if r.ord == Ordering::Less {\n+                (l.val_span, r.val_span, l.inc, r.inc)\n             } else {\n-                (rval_span, lval_span, rinc, linc)\n+                (r.val_span, l.val_span, r.inc, l.inc)\n             };\n             // we only lint inclusive lower bounds\n             if !l_inc {\n@@ -245,7 +249,7 @@ fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'\n                 (\"Range\", \"..\")\n             };\n             let mut applicability = Applicability::MachineApplicable;\n-            let name = snippet_with_applicability(cx, name_span, \"_\", &mut applicability);\n+            let name = snippet_with_applicability(cx, l.name_span, \"_\", &mut applicability);\n             let lo = snippet_with_applicability(cx, l_span, \"_\", &mut applicability);\n             let hi = snippet_with_applicability(cx, u_span, \"_\", &mut applicability);\n             let space = if lo.ends_with('.') { \" \" } else { \"\" };\n@@ -258,13 +262,13 @@ fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'\n                 format!(\"({}{}{}{}).contains(&{})\", lo, space, range_op, hi, name),\n                 applicability,\n             );\n-        } else if !combine_and && ord == Some(lord) {\n+        } else if !combine_and && ord == Some(l.ord) {\n             // `!_.contains(_)`\n             // order lower bound and upper bound\n-            let (l_span, u_span, l_inc, u_inc) = if lord == Ordering::Less {\n-                (lval_span, rval_span, linc, rinc)\n+            let (l_span, u_span, l_inc, u_inc) = if l.ord == Ordering::Less {\n+                (l.val_span, r.val_span, l.inc, r.inc)\n             } else {\n-                (rval_span, lval_span, rinc, linc)\n+                (r.val_span, l.val_span, r.inc, l.inc)\n             };\n             if l_inc {\n                 return;\n@@ -275,7 +279,7 @@ fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'\n                 (\"RangeInclusive\", \"..=\")\n             };\n             let mut applicability = Applicability::MachineApplicable;\n-            let name = snippet_with_applicability(cx, name_span, \"_\", &mut applicability);\n+            let name = snippet_with_applicability(cx, l.name_span, \"_\", &mut applicability);\n             let lo = snippet_with_applicability(cx, l_span, \"_\", &mut applicability);\n             let hi = snippet_with_applicability(cx, u_span, \"_\", &mut applicability);\n             let space = if lo.ends_with('.') { \" \" } else { \"\" };\n@@ -292,7 +296,20 @@ fn check_possible_range_contains(cx: &LateContext<'_>, op: BinOpKind, l: &Expr<'\n     }\n }\n \n-fn check_range_bounds(cx: &LateContext<'_>, ex: &Expr<'_>) -> Option<(Constant, HirId, Span, Span, Ordering, bool)> {\n+struct RangeBounds<'a> {\n+    val: Constant,\n+    expr: &'a Expr<'a>,\n+    id: HirId,\n+    name_span: Span,\n+    val_span: Span,\n+    ord: Ordering,\n+    inc: bool,\n+}\n+\n+// Takes a binary expression such as x <= 2 as input\n+// Breaks apart into various pieces, such as the value of the number,\n+// hir id of the variable, and direction/inclusiveness of the operator\n+fn check_range_bounds<'a>(cx: &'a LateContext<'_>, ex: &'a Expr<'_>) -> Option<RangeBounds<'a>> {\n     if let ExprKind::Binary(ref op, l, r) = ex.kind {\n         let (inclusive, ordering) = match op.node {\n             BinOpKind::Gt => (false, Ordering::Greater),\n@@ -303,11 +320,27 @@ fn check_range_bounds(cx: &LateContext<'_>, ex: &Expr<'_>) -> Option<(Constant,\n         };\n         if let Some(id) = path_to_local(l) {\n             if let Some((c, _)) = constant(cx, cx.typeck_results(), r) {\n-                return Some((c, id, l.span, r.span, ordering, inclusive));\n+                return Some(RangeBounds {\n+                    val: c,\n+                    expr: r,\n+                    id,\n+                    name_span: l.span,\n+                    val_span: r.span,\n+                    ord: ordering,\n+                    inc: inclusive,\n+                });\n             }\n         } else if let Some(id) = path_to_local(r) {\n             if let Some((c, _)) = constant(cx, cx.typeck_results(), l) {\n-                return Some((c, id, r.span, l.span, ordering.reverse(), inclusive));\n+                return Some(RangeBounds {\n+                    val: c,\n+                    expr: l,\n+                    id,\n+                    name_span: r.span,\n+                    val_span: l.span,\n+                    ord: ordering.reverse(),\n+                    inc: inclusive,\n+                });\n             }\n         }\n     }"}, {"sha": "110f58f3734dfc348e9d00f72cd7dfce3cf4d464", "filename": "src/tools/clippy/clippy_lints/src/rc_clone_in_vec_init.rs", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frc_clone_in_vec_init.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,141 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::higher::VecArgs;\n+use clippy_utils::last_path_segment;\n+use clippy_utils::macros::root_macro_call_first_node;\n+use clippy_utils::source::{indent_of, snippet};\n+use rustc_errors::Applicability;\n+use rustc_hir::{Expr, ExprKind, QPath, TyKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::{sym, Span, Symbol};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `Arc::new` or `Rc::new` in `vec![elem; len]`\n+    ///\n+    /// ### Why is this bad?\n+    /// This will create `elem` once and clone it `len` times - doing so with `Arc` or `Rc`\n+    /// is a bit misleading, as it will create references to the same pointer, rather\n+    /// than different instances.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let v = vec![std::sync::Arc::new(\"some data\".to_string()); 100];\n+    /// // or\n+    /// let v = vec![std::rc::Rc::new(\"some data\".to_string()); 100];\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    ///\n+    /// // Initialize each value separately:\n+    /// let mut data = Vec::with_capacity(100);\n+    /// for _ in 0..100 {\n+    ///     data.push(std::rc::Rc::new(\"some data\".to_string()));\n+    /// }\n+    ///\n+    /// // Or if you want clones of the same reference,\n+    /// // Create the reference beforehand to clarify that\n+    /// // it should be cloned for each value\n+    /// let data = std::rc::Rc::new(\"some data\".to_string());\n+    /// let v = vec![data; 100];\n+    /// ```\n+    #[clippy::version = \"1.62.0\"]\n+    pub RC_CLONE_IN_VEC_INIT,\n+    suspicious,\n+    \"initializing `Arc` or `Rc` in `vec![elem; len]`\"\n+}\n+declare_lint_pass!(RcCloneInVecInit => [RC_CLONE_IN_VEC_INIT]);\n+\n+impl LateLintPass<'_> for RcCloneInVecInit {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        let Some(macro_call) = root_macro_call_first_node(cx, expr) else { return; };\n+        let Some(VecArgs::Repeat(elem, len)) = VecArgs::hir(cx, expr) else { return; };\n+        let Some(symbol) = new_reference_call(cx, elem) else { return; };\n+\n+        emit_lint(cx, symbol, macro_call.span, elem, len);\n+    }\n+}\n+\n+fn elem_snippet(cx: &LateContext<'_>, elem: &Expr<'_>, symbol_name: &str) -> String {\n+    let elem_snippet = snippet(cx, elem.span, \"..\").to_string();\n+    if elem_snippet.contains('\\n') {\n+        // This string must be found in `elem_snippet`, otherwise we won't be constructing\n+        // the snippet in the first place.\n+        let reference_creation = format!(\"{symbol_name}::new\");\n+        let (code_until_reference_creation, _right) = elem_snippet.split_once(&reference_creation).unwrap();\n+\n+        return format!(\"{code_until_reference_creation}{reference_creation}(..)\");\n+    }\n+\n+    elem_snippet\n+}\n+\n+fn loop_init_suggestion(elem: &str, len: &str, indent: &str) -> String {\n+    format!(\n+        r#\"{{\n+{indent}    let mut v = Vec::with_capacity({len});\n+{indent}    (0..{len}).for_each(|_| v.push({elem}));\n+{indent}    v\n+{indent}}}\"#\n+    )\n+}\n+\n+fn extract_suggestion(elem: &str, len: &str, indent: &str) -> String {\n+    format!(\n+        \"{{\n+{indent}    let data = {elem};\n+{indent}    vec![data; {len}]\n+{indent}}}\"\n+    )\n+}\n+\n+fn emit_lint(cx: &LateContext<'_>, symbol: Symbol, lint_span: Span, elem: &Expr<'_>, len: &Expr<'_>) {\n+    let symbol_name = symbol.as_str();\n+\n+    span_lint_and_then(\n+        cx,\n+        RC_CLONE_IN_VEC_INIT,\n+        lint_span,\n+        &format!(\"calling `{symbol_name}::new` in `vec![elem; len]`\"),\n+        |diag| {\n+            let len_snippet = snippet(cx, len.span, \"..\");\n+            let elem_snippet = elem_snippet(cx, elem, symbol_name);\n+            let indentation = \" \".repeat(indent_of(cx, lint_span).unwrap_or(0));\n+            let loop_init_suggestion = loop_init_suggestion(&elem_snippet, len_snippet.as_ref(), &indentation);\n+            let extract_suggestion = extract_suggestion(&elem_snippet, len_snippet.as_ref(), &indentation);\n+\n+            diag.note(format!(\"each element will point to the same `{symbol_name}` instance\"));\n+            diag.span_suggestion(\n+                lint_span,\n+                format!(\"consider initializing each `{symbol_name}` element individually\"),\n+                loop_init_suggestion,\n+                Applicability::Unspecified,\n+            );\n+            diag.span_suggestion(\n+                lint_span,\n+                format!(\n+                    \"or if this is intentional, consider extracting the `{symbol_name}` initialization to a variable\"\n+                ),\n+                extract_suggestion,\n+                Applicability::Unspecified,\n+            );\n+        },\n+    );\n+}\n+\n+/// Checks whether the given `expr` is a call to `Arc::new` or `Rc::new`\n+fn new_reference_call(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Symbol> {\n+    if_chain! {\n+        if let ExprKind::Call(func, _args) = expr.kind;\n+        if let ExprKind::Path(ref func_path @ QPath::TypeRelative(ty, _)) = func.kind;\n+        if let TyKind::Path(ref ty_path) = ty.kind;\n+        if let Some(def_id) = cx.qpath_res(ty_path, ty.hir_id).opt_def_id();\n+        if last_path_segment(func_path).ident.name == sym::new;\n+\n+        then {\n+            return cx.tcx.get_diagnostic_name(def_id).filter(|symbol| symbol == &sym::Arc || symbol == &sym::Rc);\n+        }\n+    }\n+\n+    None\n+}"}, {"sha": "0004b8afdd37557abdfa3cc60d6971423c14304c", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -19,7 +19,6 @@ use rustc_mir_dataflow::{Analysis, AnalysisDomain, CallReturnPlaces, GenKill, Ge\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n use rustc_span::sym;\n-use std::convert::TryFrom;\n use std::ops::ControlFlow;\n \n macro_rules! unwrap_or_continue {\n@@ -71,7 +70,7 @@ declare_clippy_lint! {\n declare_lint_pass!(RedundantClone => [REDUNDANT_CLONE]);\n \n impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     fn check_fn(\n         &mut self,\n         cx: &LateContext<'tcx>,\n@@ -633,7 +632,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n }\n \n /// Collect possible borrowed for every `&mut` local.\n-/// For exampel, `_1 = &mut _2` generate _1: {_2,...}\n+/// For example, `_1 = &mut _2` generate _1: {_2,...}\n /// Known Problems: not sure all borrowed are tracked\n struct PossibleOriginVisitor<'a, 'tcx> {\n     possible_origin: TransitiveRelation,"}, {"sha": "40b03068f6c772059167ff6814824d1d0846e33e", "filename": "src/tools/clippy/clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -51,7 +51,7 @@ impl_lint_pass!(RedundantFieldNames => [REDUNDANT_FIELD_NAMES]);\n \n impl EarlyLintPass for RedundantFieldNames {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::FIELD_INIT_SHORTHAND) {\n+        if !meets_msrv(self.msrv, msrvs::FIELD_INIT_SHORTHAND) {\n             return;\n         }\n "}, {"sha": "2d26c49252fa5d9db9231d70ecb6cda32c80c966", "filename": "src/tools/clippy/clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -99,7 +99,7 @@ impl RedundantStaticLifetimes {\n \n impl EarlyLintPass for RedundantStaticLifetimes {\n     fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n-        if !meets_msrv(self.msrv.as_ref(), &msrvs::STATIC_IN_CONST) {\n+        if !meets_msrv(self.msrv, msrvs::STATIC_IN_CONST) {\n             return;\n         }\n "}, {"sha": "f789cec6d6acfc22333a2318e5352f1212ac9e0b", "filename": "src/tools/clippy/clippy_lints/src/reference.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freference.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -54,21 +54,20 @@ impl EarlyLintPass for DerefAddrOf {\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let sugg = if e.span.from_expansion() {\n-                    #[allow(clippy::option_if_let_else)]\n                     if let Some(macro_source) = snippet_opt(cx, e.span) {\n                         // Remove leading whitespace from the given span\n                         // e.g: ` $visitor` turns into `$visitor`\n                         let trim_leading_whitespaces = |span| {\n                             snippet_opt(cx, span).and_then(|snip| {\n-                                #[allow(clippy::cast_possible_truncation)]\n+                                #[expect(clippy::cast_possible_truncation)]\n                                 snip.find(|c: char| !c.is_whitespace()).map(|pos| {\n                                     span.lo() + BytePos(pos as u32)\n                                 })\n                             }).map_or(span, |start_no_whitespace| e.span.with_lo(start_no_whitespace))\n                         };\n \n                         let mut generate_snippet = |pattern: &str| {\n-                            #[allow(clippy::cast_possible_truncation)]\n+                            #[expect(clippy::cast_possible_truncation)]\n                             macro_source.rfind(pattern).map(|pattern_pos| {\n                                 let rpos = pattern_pos + pattern.len();\n                                 let span_after_ref = e.span.with_lo(BytePos(e.span.lo().0 + rpos as u32));"}, {"sha": "67129299e2f9294292c1abd84b95a86d74bce721", "filename": "src/tools/clippy/clippy_lints/src/regex.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fregex.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -7,7 +7,6 @@ use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n-use std::convert::TryFrom;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -79,7 +78,6 @@ impl<'tcx> LateLintPass<'tcx> for Regex {\n     }\n }\n \n-#[allow(clippy::cast_possible_truncation)] // truncation very unlikely here\n #[must_use]\n fn str_span(base: Span, c: regex_syntax::ast::Span, offset: u8) -> Span {\n     let offset = u32::from(offset);"}, {"sha": "ba03ef93721186296021cb596a2992264072e4ee", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -9,6 +9,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::cyclomatic_complexity\", \"clippy::cognitive_complexity\"),\n     (\"clippy::disallowed_method\", \"clippy::disallowed_methods\"),\n     (\"clippy::disallowed_type\", \"clippy::disallowed_types\"),\n+    (\"clippy::eval_order_dependence\", \"clippy::mixed_read_write_in_expression\"),\n     (\"clippy::for_loop_over_option\", \"clippy::for_loops_over_fallibles\"),\n     (\"clippy::for_loop_over_result\", \"clippy::for_loops_over_fallibles\"),\n     (\"clippy::identity_conversion\", \"clippy::useless_conversion\"),"}, {"sha": "424b361a905ce479105bf2c792138106ad23d7d8", "filename": "src/tools/clippy/clippy_lints/src/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsignificant_drop_in_scrutinee.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -29,7 +29,7 @@ declare_clippy_lint! {\n     /// the match block and thus will not unlock.\n     ///\n     /// ### Example\n-    /// ```rust\n+    /// ```rust.ignore\n     /// # use std::sync::Mutex;\n     ///\n     /// # struct State {}\n@@ -83,7 +83,7 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"1.60.0\"]\n     pub SIGNIFICANT_DROP_IN_SCRUTINEE,\n-    nursery,\n+    suspicious,\n     \"warns when a temporary of a type with a drop with a significant side-effect might have a surprising lifetime\"\n }\n \n@@ -99,7 +99,7 @@ impl<'tcx> LateLintPass<'tcx> for SignificantDropInScrutinee {\n                     found.found_span,\n                     \"temporary with significant drop in match scrutinee\",\n                     |diag| set_diagnostic(diag, cx, expr, found),\n-                )\n+                );\n             }\n         }\n     }\n@@ -148,8 +148,8 @@ fn set_diagnostic<'tcx>(diag: &mut Diagnostic, cx: &LateContext<'tcx>, expr: &'t\n     );\n }\n \n-/// If the expression is an ExprKind::Match, check if the scrutinee has a significant drop that may\n-/// have a surprising lifetime.\n+/// If the expression is an `ExprKind::Match`, check if the scrutinee has a significant drop that\n+/// may have a surprising lifetime.\n fn has_significant_drop_in_scrutinee<'tcx, 'a>(\n     cx: &'a LateContext<'tcx>,\n     expr: &'tcx Expr<'tcx>,\n@@ -171,6 +171,7 @@ struct SigDropHelper<'a, 'tcx> {\n     special_handling_for_binary_op: bool,\n }\n \n+#[expect(clippy::enum_variant_names)]\n #[derive(Debug, PartialEq, Eq, Clone, Copy)]\n enum LintSuggestion {\n     MoveOnly,\n@@ -213,7 +214,7 @@ impl<'a, 'tcx> SigDropHelper<'a, 'tcx> {\n     }\n \n     /// This will try to set the current suggestion (so it can be moved into the suggestions vec\n-    /// later). If allow_move_and_clone is false, the suggestion *won't* be set -- this gives us\n+    /// later). If `allow_move_and_clone` is false, the suggestion *won't* be set -- this gives us\n     /// an opportunity to look for another type in the chain that will be trivially copyable.\n     /// However, if we are at the the end of the chain, we want to accept whatever is there. (The\n     /// suggestion won't actually be output, but the diagnostic message will be output, so the user\n@@ -313,10 +314,10 @@ impl<'a, 'tcx> SigDropHelper<'a, 'tcx> {\n                 }\n                 false\n             },\n-            rustc_middle::ty::Array(ty, _) => self.has_sig_drop_attr(cx, *ty),\n-            rustc_middle::ty::RawPtr(TypeAndMut { ty, .. }) => self.has_sig_drop_attr(cx, *ty),\n-            rustc_middle::ty::Ref(_, ty, _) => self.has_sig_drop_attr(cx, *ty),\n-            rustc_middle::ty::Slice(ty) => self.has_sig_drop_attr(cx, *ty),\n+            rustc_middle::ty::Array(ty, _)\n+            | rustc_middle::ty::RawPtr(TypeAndMut { ty, .. })\n+            | rustc_middle::ty::Ref(_, ty, _)\n+            | rustc_middle::ty::Slice(ty) => self.has_sig_drop_attr(cx, *ty),\n             _ => false,\n         }\n     }\n@@ -332,15 +333,12 @@ impl<'a, 'tcx> Visitor<'tcx> for SigDropHelper<'a, 'tcx> {\n \n         match ex.kind {\n             ExprKind::MethodCall(_, [ref expr, ..], _) => {\n-                self.visit_expr(expr)\n+                self.visit_expr(expr);\n             }\n             ExprKind::Binary(_, left, right) => {\n                 self.visit_exprs_for_binary_ops(left, right, false, ex.span);\n             }\n-            ExprKind::Assign(left, right, _) => {\n-                self.visit_exprs_for_binary_ops(left, right, true, ex.span);\n-            }\n-            ExprKind::AssignOp(_, left, right) => {\n+            ExprKind::Assign(left, right, _) | ExprKind::AssignOp(_, left, right) => {\n                 self.visit_exprs_for_binary_ops(left, right, true, ex.span);\n             }\n             ExprKind::Tup(exprs) => {"}, {"sha": "e223aea297fc478bf9816be4ec8f4e73a65b6391", "filename": "src/tools/clippy/clippy_lints/src/tabs_in_doc_comments.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -4,7 +4,6 @@ use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{BytePos, Span};\n-use std::convert::TryFrom;\n \n declare_clippy_lint! {\n     /// ### What it does"}, {"sha": "d2a040beb0cf70e67c866b24a8dab247043b8b04", "filename": "src/tools/clippy/clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -27,7 +27,7 @@ declare_clippy_lint! {\n     /// architecture.\n     ///\n     /// ### Why is this bad?\n-    /// It's basically guaranteed to be undefined behaviour.\n+    /// It's basically guaranteed to be undefined behavior.\n     ///\n     /// ### Known problems\n     /// When accessing C, users might want to store pointer\n@@ -40,7 +40,7 @@ declare_clippy_lint! {\n     #[clippy::version = \"pre 1.29.0\"]\n     pub WRONG_TRANSMUTE,\n     correctness,\n-    \"transmutes that are confusing at best, undefined behaviour at worst and always useless\"\n+    \"transmutes that are confusing at best, undefined behavior at worst and always useless\"\n }\n \n // FIXME: Move this to `complexity` again, after #5343 is fixed"}, {"sha": "a1312fcda0b71f251b6443e78b23d12438135ccb", "filename": "src/tools/clippy/clippy_lints/src/types/redundant_allocation.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fredundant_allocation.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -5,6 +5,7 @@ use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, QPath, TyKind};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n+use rustc_typeck::hir_ty_to_ty;\n \n use super::{utils, REDUNDANT_ALLOCATION};\n \n@@ -54,8 +55,10 @@ pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_\n     };\n     let inner_span = match qpath_generic_tys(inner_qpath).next() {\n         Some(ty) => {\n-            // Box<Box<dyn T>> is smaller than Box<dyn T> because of wide pointers\n-            if matches!(ty.kind, TyKind::TraitObject(..)) {\n+            // Reallocation of a fat pointer causes it to become thin. `hir_ty_to_ty` is safe to use\n+            // here because `mod.rs` guarantees this lint is only run on types outside of bodies and\n+            // is not run on locals.\n+            if !hir_ty_to_ty(cx.tcx, ty).is_sized(cx.tcx.at(ty.span), cx.param_env) {\n                 return false;\n             }\n             ty.span"}, {"sha": "5a8677f90be413bbdb9052104a7023242e674909", "filename": "src/tools/clippy/clippy_lints/src/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 168, "deletions": 28, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fundocumented_unsafe_blocks.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,17 +1,18 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::is_lint_allowed;\n use clippy_utils::source::walk_span_to_context;\n+use clippy_utils::{get_parent_node, is_lint_allowed};\n use rustc_data_structures::sync::Lrc;\n-use rustc_hir::{Block, BlockCheckMode, UnsafeSource};\n+use rustc_hir as hir;\n+use rustc_hir::{Block, BlockCheckMode, ItemKind, Node, UnsafeSource};\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::{BytePos, Pos, SyntaxContext};\n+use rustc_span::{BytePos, Pos, Span, SyntaxContext};\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for `unsafe` blocks without a `// SAFETY: ` comment\n+    /// Checks for `unsafe` blocks and impls without a `// SAFETY: ` comment\n     /// explaining why the unsafe operations performed inside\n     /// the block are safe.\n     ///\n@@ -34,7 +35,7 @@ declare_clippy_lint! {\n     /// ```\n     ///\n     /// ### Why is this bad?\n-    /// Undocumented unsafe blocks can make it difficult to\n+    /// Undocumented unsafe blocks and impls can make it difficult to\n     /// read and maintain code, as well as uncover unsoundness\n     /// and bugs.\n     ///\n@@ -66,7 +67,7 @@ impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n         if block.rules == BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided)\n             && !in_external_macro(cx.tcx.sess, block.span)\n             && !is_lint_allowed(cx, UNDOCUMENTED_UNSAFE_BLOCKS, block.hir_id)\n-            && !is_unsafe_from_proc_macro(cx, block)\n+            && !is_unsafe_from_proc_macro(cx, block.span)\n             && !block_has_safety_comment(cx, block)\n         {\n             let source_map = cx.tcx.sess.source_map();\n@@ -86,11 +87,37 @@ impl LateLintPass<'_> for UndocumentedUnsafeBlocks {\n             );\n         }\n     }\n+\n+    fn check_item(&mut self, cx: &LateContext<'_>, item: &hir::Item<'_>) {\n+        if let hir::ItemKind::Impl(imple) = item.kind\n+            && imple.unsafety == hir::Unsafety::Unsafe\n+            && !in_external_macro(cx.tcx.sess, item.span)\n+            && !is_lint_allowed(cx, UNDOCUMENTED_UNSAFE_BLOCKS, item.hir_id())\n+            && !is_unsafe_from_proc_macro(cx, item.span)\n+            && !item_has_safety_comment(cx, item)\n+        {\n+            let source_map = cx.tcx.sess.source_map();\n+            let span = if source_map.is_multiline(item.span) {\n+                source_map.span_until_char(item.span, '\\n')\n+            } else {\n+                item.span\n+            };\n+\n+            span_lint_and_help(\n+                cx,\n+                UNDOCUMENTED_UNSAFE_BLOCKS,\n+                span,\n+                \"unsafe impl missing a safety comment\",\n+                None,\n+                \"consider adding a safety comment on the preceding line\",\n+            );\n+        }\n+    }\n }\n \n-fn is_unsafe_from_proc_macro(cx: &LateContext<'_>, block: &Block<'_>) -> bool {\n+fn is_unsafe_from_proc_macro(cx: &LateContext<'_>, span: Span) -> bool {\n     let source_map = cx.sess().source_map();\n-    let file_pos = source_map.lookup_byte_offset(block.span.lo());\n+    let file_pos = source_map.lookup_byte_offset(span.lo());\n     file_pos\n         .sf\n         .src\n@@ -100,7 +127,7 @@ fn is_unsafe_from_proc_macro(cx: &LateContext<'_>, block: &Block<'_>) -> bool {\n }\n \n /// Checks if the lines immediately preceding the block contain a safety comment.\n-fn block_has_safety_comment(cx: &LateContext<'_>, block: &Block<'_>) -> bool {\n+fn block_has_safety_comment(cx: &LateContext<'_>, block: &hir::Block<'_>) -> bool {\n     // This intentionally ignores text before the start of a function so something like:\n     // ```\n     //     // SAFETY: reason\n@@ -109,13 +136,115 @@ fn block_has_safety_comment(cx: &LateContext<'_>, block: &Block<'_>) -> bool {\n     // won't work. This is to avoid dealing with where such a comment should be place relative to\n     // attributes and doc comments.\n \n+    span_from_macro_expansion_has_safety_comment(cx, block.span) || span_in_body_has_safety_comment(cx, block.span)\n+}\n+\n+/// Checks if the lines immediately preceding the item contain a safety comment.\n+#[allow(clippy::collapsible_match)]\n+fn item_has_safety_comment(cx: &LateContext<'_>, item: &hir::Item<'_>) -> bool {\n+    if span_from_macro_expansion_has_safety_comment(cx, item.span) {\n+        return true;\n+    }\n+\n+    if item.span.ctxt() == SyntaxContext::root() {\n+        if let Some(parent_node) = get_parent_node(cx.tcx, item.hir_id()) {\n+            let comment_start = match parent_node {\n+                Node::Crate(parent_mod) => {\n+                    comment_start_before_impl_in_mod(cx, parent_mod, parent_mod.spans.inner_span, item)\n+                },\n+                Node::Item(parent_item) => {\n+                    if let ItemKind::Mod(parent_mod) = &parent_item.kind {\n+                        comment_start_before_impl_in_mod(cx, parent_mod, parent_item.span, item)\n+                    } else {\n+                        // Doesn't support impls in this position. Pretend a comment was found.\n+                        return true;\n+                    }\n+                },\n+                Node::Stmt(stmt) => {\n+                    if let Some(stmt_parent) = get_parent_node(cx.tcx, stmt.hir_id) {\n+                        match stmt_parent {\n+                            Node::Block(block) => walk_span_to_context(block.span, SyntaxContext::root()).map(Span::lo),\n+                            _ => {\n+                                // Doesn't support impls in this position. Pretend a comment was found.\n+                                return true;\n+                            },\n+                        }\n+                    } else {\n+                        // Problem getting the parent node. Pretend a comment was found.\n+                        return true;\n+                    }\n+                },\n+                _ => {\n+                    // Doesn't support impls in this position. Pretend a comment was found.\n+                    return true;\n+                },\n+            };\n+\n+            let source_map = cx.sess().source_map();\n+            if let Some(comment_start) = comment_start\n+                && let Ok(unsafe_line) = source_map.lookup_line(item.span.lo())\n+                && let Ok(comment_start_line) = source_map.lookup_line(comment_start)\n+                && Lrc::ptr_eq(&unsafe_line.sf, &comment_start_line.sf)\n+                && let Some(src) = unsafe_line.sf.src.as_deref()\n+            {\n+                comment_start_line.line < unsafe_line.line && text_has_safety_comment(\n+                    src,\n+                    &unsafe_line.sf.lines[comment_start_line.line + 1..=unsafe_line.line],\n+                    unsafe_line.sf.start_pos.to_usize(),\n+                )\n+            } else {\n+                // Problem getting source text. Pretend a comment was found.\n+                true\n+            }\n+        } else {\n+            // No parent node. Pretend a comment was found.\n+            true\n+        }\n+    } else {\n+        false\n+    }\n+}\n+\n+fn comment_start_before_impl_in_mod(\n+    cx: &LateContext<'_>,\n+    parent_mod: &hir::Mod<'_>,\n+    parent_mod_span: Span,\n+    imple: &hir::Item<'_>,\n+) -> Option<BytePos> {\n+    parent_mod.item_ids.iter().enumerate().find_map(|(idx, item_id)| {\n+        if *item_id == imple.item_id() {\n+            if idx == 0 {\n+                // mod A { /* comment */ unsafe impl T {} ... }\n+                // ^------------------------------------------^ returns the start of this span\n+                // ^---------------------^ finally checks comments in this range\n+                if let Some(sp) = walk_span_to_context(parent_mod_span, SyntaxContext::root()) {\n+                    return Some(sp.lo());\n+                }\n+            } else {\n+                // some_item /* comment */ unsafe impl T {}\n+                // ^-------^ returns the end of this span\n+                //         ^---------------^ finally checks comments in this range\n+                let prev_item = cx.tcx.hir().item(parent_mod.item_ids[idx - 1]);\n+                if let Some(sp) = walk_span_to_context(prev_item.span, SyntaxContext::root()) {\n+                    return Some(sp.hi());\n+                }\n+            }\n+        }\n+        None\n+    })\n+}\n+\n+fn span_from_macro_expansion_has_safety_comment(cx: &LateContext<'_>, span: Span) -> bool {\n     let source_map = cx.sess().source_map();\n-    let ctxt = block.span.ctxt();\n-    if ctxt != SyntaxContext::root() {\n-        // From a macro expansion. Get the text from the start of the macro declaration to start of the unsafe block.\n+    let ctxt = span.ctxt();\n+    if ctxt == SyntaxContext::root() {\n+        false\n+    } else {\n+        // From a macro expansion. Get the text from the start of the macro declaration to start of the\n+        // unsafe block.\n         //     macro_rules! foo { () => { stuff }; (x) => { unsafe { stuff } }; }\n         //     ^--------------------------------------------^\n-        if let Ok(unsafe_line) = source_map.lookup_line(block.span.lo())\n+        if let Ok(unsafe_line) = source_map.lookup_line(span.lo())\n             && let Ok(macro_line) = source_map.lookup_line(ctxt.outer_expn_data().def_site.lo())\n             && Lrc::ptr_eq(&unsafe_line.sf, &macro_line.sf)\n             && let Some(src) = unsafe_line.sf.src.as_deref()\n@@ -129,24 +258,35 @@ fn block_has_safety_comment(cx: &LateContext<'_>, block: &Block<'_>) -> bool {\n             // Problem getting source text. Pretend a comment was found.\n             true\n         }\n-    } else if let Ok(unsafe_line) = source_map.lookup_line(block.span.lo())\n+    }\n+}\n+\n+fn span_in_body_has_safety_comment(cx: &LateContext<'_>, span: Span) -> bool {\n+    let source_map = cx.sess().source_map();\n+    let ctxt = span.ctxt();\n+    if ctxt == SyntaxContext::root()\n         && let Some(body) = cx.enclosing_body\n-        && let Some(body_span) = walk_span_to_context(cx.tcx.hir().body(body).value.span, SyntaxContext::root())\n-        && let Ok(body_line) = source_map.lookup_line(body_span.lo())\n-        && Lrc::ptr_eq(&unsafe_line.sf, &body_line.sf)\n-        && let Some(src) = unsafe_line.sf.src.as_deref()\n     {\n-        // Get the text from the start of function body to the unsafe block.\n-        //     fn foo() { some_stuff; unsafe { stuff }; other_stuff; }\n-        //              ^-------------^\n-        body_line.line < unsafe_line.line && text_has_safety_comment(\n-            src,\n-            &unsafe_line.sf.lines[body_line.line + 1..=unsafe_line.line],\n-            unsafe_line.sf.start_pos.to_usize(),\n-        )\n+        if let Ok(unsafe_line) = source_map.lookup_line(span.lo())\n+            && let Some(body_span) = walk_span_to_context(cx.tcx.hir().body(body).value.span, SyntaxContext::root())\n+            && let Ok(body_line) = source_map.lookup_line(body_span.lo())\n+            && Lrc::ptr_eq(&unsafe_line.sf, &body_line.sf)\n+            && let Some(src) = unsafe_line.sf.src.as_deref()\n+        {\n+            // Get the text from the start of function body to the unsafe block.\n+            //     fn foo() { some_stuff; unsafe { stuff }; other_stuff; }\n+            //              ^-------------^\n+            body_line.line < unsafe_line.line && text_has_safety_comment(\n+                src,\n+                &unsafe_line.sf.lines[body_line.line + 1..=unsafe_line.line],\n+                unsafe_line.sf.start_pos.to_usize(),\n+            )\n+        } else {\n+            // Problem getting source text. Pretend a comment was found.\n+            true\n+        }\n     } else {\n-        // Problem getting source text. Pretend a comment was found.\n-        true\n+        false\n     }\n }\n "}, {"sha": "9f4c5555f11b7c20489ef384432a6e2e0ebc958b", "filename": "src/tools/clippy/clippy_lints/src/uninit_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funinit_vec.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -98,7 +98,7 @@ fn handle_uninit_vec_pair<'tcx>(\n                 // Check T of Vec<T>\n                 if !is_uninit_value_valid_for_ty(cx, substs.type_at(0)) {\n                     // FIXME: #7698, false positive of the internal lints\n-                    #[allow(clippy::collapsible_span_lint_calls)]\n+                    #[expect(clippy::collapsible_span_lint_calls)]\n                     span_lint_and_then(\n                         cx,\n                         UNINIT_VEC,"}, {"sha": "d86002c926efead66c171f39d1f934d5f3e51741", "filename": "src/tools/clippy/clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -3,6 +3,7 @@ use clippy_utils::source::snippet_with_macro_callsite;\n use clippy_utils::visitors::for_each_value_source;\n use core::ops::ControlFlow;\n use rustc_errors::Applicability;\n+use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{Expr, ExprKind, PatKind, Stmt, StmtKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::lint::in_external_macro;\n@@ -71,14 +72,18 @@ fn needs_inferred_result_ty(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n                 ..\n             },\n             _,\n-        ) => cx.qpath_res(path, *hir_id).opt_def_id(),\n-        ExprKind::MethodCall(..) => cx.typeck_results().type_dependent_def_id(e.hir_id),\n+        ) => match cx.qpath_res(path, *hir_id) {\n+            Res::Def(DefKind::AssocFn | DefKind::Fn, id) => id,\n+            _ => return false,\n+        },\n+        ExprKind::MethodCall(..) => match cx.typeck_results().type_dependent_def_id(e.hir_id) {\n+            Some(id) => id,\n+            None => return false,\n+        },\n         _ => return false,\n     };\n-    if let Some(id) = id\n-        && let sig = cx.tcx.fn_sig(id).skip_binder()\n-        && let ty::Param(output_ty) = *sig.output().kind()\n-    {\n+    let sig = cx.tcx.fn_sig(id).skip_binder();\n+    if let ty::Param(output_ty) = *sig.output().kind() {\n         sig.inputs().iter().all(|&ty| !ty_contains_param(ty, output_ty.index))\n     } else {\n         false"}, {"sha": "04e2f301bfd888399efbae51888f2b8366c96e89", "filename": "src/tools/clippy/clippy_lints/src/unnested_or_patterns.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funnested_or_patterns.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -61,27 +61,27 @@ impl_lint_pass!(UnnestedOrPatterns => [UNNESTED_OR_PATTERNS]);\n \n impl EarlyLintPass for UnnestedOrPatterns {\n     fn check_arm(&mut self, cx: &EarlyContext<'_>, a: &ast::Arm) {\n-        if meets_msrv(self.msrv.as_ref(), &msrvs::OR_PATTERNS) {\n+        if meets_msrv(self.msrv, msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &a.pat);\n         }\n     }\n \n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &ast::Expr) {\n-        if meets_msrv(self.msrv.as_ref(), &msrvs::OR_PATTERNS) {\n+        if meets_msrv(self.msrv, msrvs::OR_PATTERNS) {\n             if let ast::ExprKind::Let(pat, _, _) = &e.kind {\n                 lint_unnested_or_patterns(cx, pat);\n             }\n         }\n     }\n \n     fn check_param(&mut self, cx: &EarlyContext<'_>, p: &ast::Param) {\n-        if meets_msrv(self.msrv.as_ref(), &msrvs::OR_PATTERNS) {\n+        if meets_msrv(self.msrv, msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &p.pat);\n         }\n     }\n \n     fn check_local(&mut self, cx: &EarlyContext<'_>, l: &ast::Local) {\n-        if meets_msrv(self.msrv.as_ref(), &msrvs::OR_PATTERNS) {\n+        if meets_msrv(self.msrv, msrvs::OR_PATTERNS) {\n             lint_unnested_or_patterns(cx, &l.pat);\n         }\n     }"}, {"sha": "52585e59566c8128a6df546b3c00871f096f545f", "filename": "src/tools/clippy/clippy_lints/src/unused_unit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_unit.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -130,7 +130,7 @@ fn lint_unneeded_unit_return(cx: &EarlyContext<'_>, ty: &ast::Ty, span: Span) {\n         snippet_opt(cx, span.with_hi(ty.span.hi())).map_or((ty.span, Applicability::MaybeIncorrect), |fn_source| {\n             position_before_rarrow(&fn_source).map_or((ty.span, Applicability::MaybeIncorrect), |rpos| {\n                 (\n-                    #[allow(clippy::cast_possible_truncation)]\n+                    #[expect(clippy::cast_possible_truncation)]\n                     ty.span.with_lo(BytePos(span.lo().0 + rpos as u32)),\n                     Applicability::MachineApplicable,\n                 )"}, {"sha": "66f7748e9e0898bef526b132360aed58781ed396", "filename": "src/tools/clippy/clippy_lints/src/use_self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuse_self.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -198,7 +198,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     fn check_ty(&mut self, cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>) {\n         if_chain! {\n             if !hir_ty.span.from_expansion();\n-            if meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n+            if meets_msrv(self.msrv, msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check {\n                 impl_id,\n                 in_body,\n@@ -225,7 +225,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n         if_chain! {\n             if !expr.span.from_expansion();\n-            if meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n+            if meets_msrv(self.msrv, msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n             if cx.typeck_results().expr_ty(expr) == cx.tcx.type_of(impl_id);\n             then {} else { return; }\n@@ -256,7 +256,7 @@ impl<'tcx> LateLintPass<'tcx> for UseSelf {\n     fn check_pat(&mut self, cx: &LateContext<'_>, pat: &Pat<'_>) {\n         if_chain! {\n             if !pat.span.from_expansion();\n-            if meets_msrv(self.msrv.as_ref(), &msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n+            if meets_msrv(self.msrv, msrvs::TYPE_ALIAS_ENUM_VARIANTS);\n             if let Some(&StackItem::Check { impl_id, .. }) = self.stack.last();\n             if let PatKind::Path(QPath::Resolved(_, path)) = pat.kind;\n             if !matches!(path.res, Res::SelfTy { .. } | Res::Def(DefKind::TyParam, _));"}, {"sha": "4a3b5383c892b967e91e35d34a6816d6068e91df", "filename": "src/tools/clippy/clippy_lints/src/useless_conversion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fuseless_conversion.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -41,7 +41,7 @@ pub struct UselessConversion {\n \n impl_lint_pass!(UselessConversion => [USELESS_CONVERSION]);\n \n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n impl<'tcx> LateLintPass<'tcx> for UselessConversion {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n         if e.span.from_expansion() {"}, {"sha": "cd4d16fe95f75822965c9091d7b1999a4aeaeceb", "filename": "src/tools/clippy/clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 130, "deletions": 7, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -6,7 +6,8 @@ use serde::de::{Deserializer, IgnoredAny, IntoDeserializer, MapAccess, Visitor};\n use serde::Deserialize;\n use std::error::Error;\n use std::path::{Path, PathBuf};\n-use std::{env, fmt, fs, io};\n+use std::str::FromStr;\n+use std::{cmp, env, fmt, fs, io, iter};\n \n /// Holds information used by `MISSING_ENFORCED_IMPORT_RENAMES` lint.\n #[derive(Clone, Debug, Deserialize)]\n@@ -43,18 +44,33 @@ pub enum DisallowedType {\n #[derive(Default)]\n pub struct TryConf {\n     pub conf: Conf,\n-    pub errors: Vec<String>,\n+    pub errors: Vec<Box<dyn Error>>,\n }\n \n impl TryConf {\n-    fn from_error(error: impl Error) -> Self {\n+    fn from_error(error: impl Error + 'static) -> Self {\n         Self {\n             conf: Conf::default(),\n-            errors: vec![error.to_string()],\n+            errors: vec![Box::new(error)],\n         }\n     }\n }\n \n+#[derive(Debug)]\n+struct ConfError(String);\n+\n+impl fmt::Display for ConfError {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        <String as fmt::Display>::fmt(&self.0, f)\n+    }\n+}\n+\n+impl Error for ConfError {}\n+\n+fn conf_error(s: String) -> Box<dyn Error> {\n+    Box::new(ConfError(s))\n+}\n+\n macro_rules! define_Conf {\n     ($(\n         $(#[doc = $doc:literal])+\n@@ -103,11 +119,11 @@ macro_rules! define_Conf {\n                 while let Some(name) = map.next_key::<&str>()? {\n                     match Field::deserialize(name.into_deserializer())? {\n                         $(Field::$name => {\n-                            $(errors.push(format!(\"deprecated field `{}`. {}\", name, $dep));)?\n+                            $(errors.push(conf_error(format!(\"deprecated field `{}`. {}\", name, $dep)));)?\n                             match map.next_value() {\n-                                Err(e) => errors.push(e.to_string()),\n+                                Err(e) => errors.push(conf_error(e.to_string())),\n                                 Ok(value) => match $name {\n-                                    Some(_) => errors.push(format!(\"duplicate field `{}`\", name)),\n+                                    Some(_) => errors.push(conf_error(format!(\"duplicate field `{}`\", name))),\n                                     None => $name = Some(value),\n                                 }\n                             }\n@@ -316,6 +332,14 @@ define_Conf! {\n     ///\n     /// The maximum size of a file included via `include_bytes!()` or `include_str!()`, in bytes\n     (max_include_file_size: u64 = 1_000_000),\n+    /// Lint: EXPECT_USED.\n+    ///\n+    /// Whether `expect` should be allowed in test functions\n+    (allow_expect_in_tests: bool = false),\n+    /// Lint: UNWRAP_USED.\n+    ///\n+    /// Whether `unwrap` should be allowed in test functions\n+    (allow_unwrap_in_tests: bool = false),\n }\n \n /// Search for the configuration file.\n@@ -375,3 +399,102 @@ pub fn read(path: &Path) -> TryConf {\n     };\n     toml::from_str(&content).unwrap_or_else(TryConf::from_error)\n }\n+\n+const SEPARATOR_WIDTH: usize = 4;\n+\n+// Check whether the error is \"unknown field\" and, if so, list the available fields sorted and at\n+// least one per line, more if `CLIPPY_TERMINAL_WIDTH` is set and allows it.\n+pub fn format_error(error: Box<dyn Error>) -> String {\n+    let s = error.to_string();\n+\n+    if_chain! {\n+        if error.downcast::<toml::de::Error>().is_ok();\n+        if let Some((prefix, mut fields, suffix)) = parse_unknown_field_message(&s);\n+        then {\n+            use fmt::Write;\n+\n+            fields.sort_unstable();\n+\n+            let (rows, column_widths) = calculate_dimensions(&fields);\n+\n+            let mut msg = String::from(prefix);\n+            for row in 0..rows {\n+                write!(msg, \"\\n\").unwrap();\n+                for (column, column_width) in column_widths.iter().copied().enumerate() {\n+                    let index = column * rows + row;\n+                    let field = fields.get(index).copied().unwrap_or_default();\n+                    write!(\n+                        msg,\n+                        \"{:separator_width$}{:field_width$}\",\n+                        \" \",\n+                        field,\n+                        separator_width = SEPARATOR_WIDTH,\n+                        field_width = column_width\n+                    )\n+                    .unwrap();\n+                }\n+            }\n+            write!(msg, \"\\n{}\", suffix).unwrap();\n+            msg\n+        } else {\n+            s\n+        }\n+    }\n+}\n+\n+// `parse_unknown_field_message` will become unnecessary if\n+// https://github.com/alexcrichton/toml-rs/pull/364 is merged.\n+fn parse_unknown_field_message(s: &str) -> Option<(&str, Vec<&str>, &str)> {\n+    // An \"unknown field\" message has the following form:\n+    //   unknown field `UNKNOWN`, expected one of `FIELD0`, `FIELD1`, ..., `FIELDN` at line X column Y\n+    //                                           ^^      ^^^^                     ^^\n+    if_chain! {\n+        if s.starts_with(\"unknown field\");\n+        let slices = s.split(\"`, `\").collect::<Vec<_>>();\n+        let n = slices.len();\n+        if n >= 2;\n+        if let Some((prefix, first_field)) = slices[0].rsplit_once(\" `\");\n+        if let Some((last_field, suffix)) = slices[n - 1].split_once(\"` \");\n+        then {\n+            let fields = iter::once(first_field)\n+                .chain(slices[1..n - 1].iter().copied())\n+                .chain(iter::once(last_field))\n+                .collect::<Vec<_>>();\n+            Some((prefix, fields, suffix))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+fn calculate_dimensions(fields: &[&str]) -> (usize, Vec<usize>) {\n+    let columns = env::var(\"CLIPPY_TERMINAL_WIDTH\")\n+        .ok()\n+        .and_then(|s| <usize as FromStr>::from_str(&s).ok())\n+        .map_or(1, |terminal_width| {\n+            let max_field_width = fields.iter().map(|field| field.len()).max().unwrap();\n+            cmp::max(1, terminal_width / (SEPARATOR_WIDTH + max_field_width))\n+        });\n+\n+    let rows = (fields.len() + (columns - 1)) / columns;\n+\n+    let column_widths = (0..columns)\n+        .map(|column| {\n+            if column < columns - 1 {\n+                (0..rows)\n+                    .map(|row| {\n+                        let index = column * rows + row;\n+                        let field = fields.get(index).copied().unwrap_or_default();\n+                        field.len()\n+                    })\n+                    .max()\n+                    .unwrap()\n+            } else {\n+                // Avoid adding extra space to the last column.\n+                0\n+            }\n+        })\n+        .collect::<Vec<_>>();\n+\n+    (rows, column_widths)\n+}"}, {"sha": "ba1ff65479d60d69a9d9f9cca9ce4394805992ba", "filename": "src/tools/clippy/clippy_lints/src/vec.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n \n-#[allow(clippy::module_name_repetitions)]\n+#[expect(clippy::module_name_repetitions)]\n #[derive(Copy, Clone)]\n pub struct UselessVec {\n     pub too_large_for_stack: u64,\n@@ -83,7 +83,7 @@ impl UselessVec {\n         let snippet = match *vec_args {\n             higher::VecArgs::Repeat(elem, len) => {\n                 if let Some((Constant::Int(len_constant), _)) = constant(cx, cx.typeck_results(), len) {\n-                    #[allow(clippy::cast_possible_truncation)]\n+                    #[expect(clippy::cast_possible_truncation)]\n                     if len_constant as u64 * size_of(cx, elem) > self.too_large_for_stack {\n                         return;\n                     }\n@@ -110,7 +110,6 @@ impl UselessVec {\n             },\n             higher::VecArgs::Vec(args) => {\n                 if let Some(last) = args.iter().last() {\n-                    #[allow(clippy::cast_possible_truncation)]\n                     if args.len() as u64 * size_of(cx, last) > self.too_large_for_stack {\n                         return;\n                     }"}, {"sha": "35db45e2b0c9921b97672f6322e48a870f658190", "filename": "src/tools/clippy/clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 133, "deletions": 57, "changes": 190, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,19 +1,30 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::higher::{get_vec_init_kind, VecInitKind};\n use clippy_utils::source::snippet;\n-use clippy_utils::{path_to_local, path_to_local_id};\n-use if_chain::if_chain;\n+use clippy_utils::visitors::for_each_local_use_after_expr;\n+use clippy_utils::{get_parent_expr, path_to_local_id};\n+use core::ops::ControlFlow;\n use rustc_errors::Applicability;\n-use rustc_hir::{BindingAnnotation, Block, Expr, ExprKind, HirId, Local, PatKind, Stmt, StmtKind};\n+use rustc_hir::def::Res;\n+use rustc_hir::{\n+    BindingAnnotation, Block, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, Stmt, StmtKind, UnOp,\n+};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::Span;\n+use rustc_span::{Span, Symbol};\n \n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for calls to `push` immediately after creating a new `Vec`.\n     ///\n+    /// If the `Vec` is created using `with_capacity` this will only lint if the capacity is a\n+    /// constant and the number of pushes is greater than or equal to the initial capacity.\n+    ///\n+    /// If the `Vec` is extended after the initial sequence of pushes and it was default initialized\n+    /// then this will only lint after there were at least four pushes. This number may change in\n+    /// the future.\n+    ///\n     /// ### Why is this bad?\n     /// The `vec![]` macro is both more performant and easier to read than\n     /// multiple `push` calls.\n@@ -43,26 +54,88 @@ pub struct VecInitThenPush {\n struct VecPushSearcher {\n     local_id: HirId,\n     init: VecInitKind,\n-    lhs_is_local: bool,\n-    lhs_span: Span,\n+    lhs_is_let: bool,\n+    let_ty_span: Option<Span>,\n+    name: Symbol,\n     err_span: Span,\n-    found: u64,\n+    found: u128,\n+    last_push_expr: HirId,\n }\n impl VecPushSearcher {\n     fn display_err(&self, cx: &LateContext<'_>) {\n-        match self.init {\n+        let required_pushes_before_extension = match self.init {\n             _ if self.found == 0 => return,\n-            VecInitKind::WithLiteralCapacity(x) if x > self.found => return,\n+            VecInitKind::WithConstCapacity(x) if x > self.found => return,\n+            VecInitKind::WithConstCapacity(x) => x,\n             VecInitKind::WithExprCapacity(_) => return,\n-            _ => (),\n+            _ => 3,\n         };\n \n-        let mut s = if self.lhs_is_local {\n+        let mut needs_mut = false;\n+        let res = for_each_local_use_after_expr(cx, self.local_id, self.last_push_expr, |e| {\n+            let Some(parent) = get_parent_expr(cx, e) else {\n+                return ControlFlow::Continue(())\n+            };\n+            let adjusted_ty = cx.typeck_results().expr_ty_adjusted(e);\n+            let adjusted_mut = adjusted_ty.ref_mutability().unwrap_or(Mutability::Not);\n+            needs_mut |= adjusted_mut == Mutability::Mut;\n+            match parent.kind {\n+                ExprKind::AddrOf(_, Mutability::Mut, _) => {\n+                    needs_mut = true;\n+                    return ControlFlow::Break(true);\n+                },\n+                ExprKind::Unary(UnOp::Deref, _) | ExprKind::Index(..) if !needs_mut => {\n+                    let mut last_place = parent;\n+                    while let Some(parent) = get_parent_expr(cx, parent) {\n+                        if matches!(parent.kind, ExprKind::Unary(UnOp::Deref, _) | ExprKind::Field(..))\n+                            || matches!(parent.kind, ExprKind::Index(e, _) if e.hir_id == last_place.hir_id)\n+                        {\n+                            last_place = parent;\n+                        } else {\n+                            break;\n+                        }\n+                    }\n+                    needs_mut |= cx.typeck_results().expr_ty_adjusted(last_place).ref_mutability()\n+                        == Some(Mutability::Mut)\n+                        || get_parent_expr(cx, last_place)\n+                            .map_or(false, |e| matches!(e.kind, ExprKind::AddrOf(_, Mutability::Mut, _)));\n+                },\n+                ExprKind::MethodCall(_, [recv, ..], _)\n+                    if recv.hir_id == e.hir_id\n+                        && adjusted_mut == Mutability::Mut\n+                        && !adjusted_ty.peel_refs().is_slice() =>\n+                {\n+                    // No need to set `needs_mut` to true. The receiver will be either explicitly borrowed, or it will\n+                    // be implicitly borrowed via an adjustment. Both of these cases are already handled by this point.\n+                    return ControlFlow::Break(true);\n+                },\n+                ExprKind::Assign(lhs, ..) if e.hir_id == lhs.hir_id => {\n+                    needs_mut = true;\n+                    return ControlFlow::Break(false);\n+                },\n+                _ => (),\n+            }\n+            ControlFlow::Continue(())\n+        });\n+\n+        // Avoid allocating small `Vec`s when they'll be extended right after.\n+        if res == ControlFlow::Break(true) && self.found <= required_pushes_before_extension {\n+            return;\n+        }\n+\n+        let mut s = if self.lhs_is_let {\n             String::from(\"let \")\n         } else {\n             String::new()\n         };\n-        s.push_str(&snippet(cx, self.lhs_span, \"..\"));\n+        if needs_mut {\n+            s.push_str(\"mut \");\n+        }\n+        s.push_str(self.name.as_str());\n+        if let Some(span) = self.let_ty_span {\n+            s.push_str(\": \");\n+            s.push_str(&snippet(cx, span, \"_\"));\n+        }\n         s.push_str(\" = vec![..];\");\n \n         span_lint_and_sugg(\n@@ -83,60 +156,63 @@ impl<'tcx> LateLintPass<'tcx> for VecInitThenPush {\n     }\n \n     fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n-        if_chain! {\n-            if !in_external_macro(cx.sess(), local.span);\n-            if let Some(init) = local.init;\n-            if let PatKind::Binding(BindingAnnotation::Mutable, id, _, None) = local.pat.kind;\n-            if let Some(init_kind) = get_vec_init_kind(cx, init);\n-            then {\n-                self.searcher = Some(VecPushSearcher {\n-                        local_id: id,\n-                        init: init_kind,\n-                        lhs_is_local: true,\n-                        lhs_span: local.ty.map_or(local.pat.span, |t| local.pat.span.to(t.span)),\n-                        err_span: local.span,\n-                        found: 0,\n-                    });\n-            }\n+        if let Some(init_expr) = local.init\n+            && let PatKind::Binding(BindingAnnotation::Mutable, id, name, None) = local.pat.kind\n+            && !in_external_macro(cx.sess(), local.span)\n+            && let Some(init) = get_vec_init_kind(cx, init_expr)\n+            && !matches!(init, VecInitKind::WithExprCapacity(_))\n+        {\n+            self.searcher = Some(VecPushSearcher {\n+                local_id: id,\n+                init,\n+                lhs_is_let: true,\n+                name: name.name,\n+                let_ty_span: local.ty.map(|ty| ty.span),\n+                err_span: local.span,\n+                found: 0,\n+                last_push_expr: init_expr.hir_id,\n+            });\n         }\n     }\n \n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if self.searcher.is_none();\n-            if !in_external_macro(cx.sess(), expr.span);\n-            if let ExprKind::Assign(left, right, _) = expr.kind;\n-            if let Some(id) = path_to_local(left);\n-            if let Some(init_kind) = get_vec_init_kind(cx, right);\n-            then {\n-                self.searcher = Some(VecPushSearcher {\n-                    local_id: id,\n-                    init: init_kind,\n-                    lhs_is_local: false,\n-                    lhs_span: left.span,\n-                    err_span: expr.span,\n-                    found: 0,\n-                });\n-            }\n+        if self.searcher.is_none()\n+            && let ExprKind::Assign(left, right, _) = expr.kind\n+            && let ExprKind::Path(QPath::Resolved(None, path)) = left.kind\n+            && let [name] = &path.segments\n+            && let Res::Local(id) = path.res\n+            && !in_external_macro(cx.sess(), expr.span)\n+            && let Some(init) = get_vec_init_kind(cx, right)\n+            && !matches!(init, VecInitKind::WithExprCapacity(_))\n+        {\n+            self.searcher = Some(VecPushSearcher {\n+                local_id: id,\n+                init,\n+                lhs_is_let: false,\n+                let_ty_span: None,\n+                name: name.ident.name,\n+                err_span: expr.span,\n+                found: 0,\n+                last_push_expr: expr.hir_id,\n+            });\n         }\n     }\n \n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         if let Some(searcher) = self.searcher.take() {\n-            if_chain! {\n-                if let StmtKind::Expr(expr) | StmtKind::Semi(expr) = stmt.kind;\n-                if let ExprKind::MethodCall(path, [self_arg, _], _) = expr.kind;\n-                if path_to_local_id(self_arg, searcher.local_id);\n-                if path.ident.name.as_str() == \"push\";\n-                then {\n-                    self.searcher = Some(VecPushSearcher {\n-                        found: searcher.found + 1,\n-                        err_span: searcher.err_span.to(stmt.span),\n-                        .. searcher\n-                    });\n-                } else {\n-                    searcher.display_err(cx);\n-                }\n+            if let StmtKind::Expr(expr) | StmtKind::Semi(expr) = stmt.kind\n+                && let ExprKind::MethodCall(name, [self_arg, _], _) = expr.kind\n+                && path_to_local_id(self_arg, searcher.local_id)\n+                && name.ident.as_str() == \"push\"\n+            {\n+                self.searcher = Some(VecPushSearcher {\n+                    found: searcher.found + 1,\n+                    err_span: searcher.err_span.to(stmt.span),\n+                    last_push_expr: expr.hir_id,\n+                    .. searcher\n+                });\n+            } else {\n+                searcher.display_err(cx);\n             }\n         }\n     }"}, {"sha": "d2493c055a519bf33f7909a93ddcba796a56c69d", "filename": "src/tools/clippy/clippy_lints/src/write.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fwrite.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -342,8 +342,6 @@ impl EarlyLintPass for Write {\n             if let (Some(fmt_str), expr) = self.check_tts(cx, mac.args.inner_tokens(), true) {\n                 if fmt_str.symbol == kw::Empty {\n                     let mut applicability = Applicability::MachineApplicable;\n-                    // FIXME: remove this `#[allow(...)]` once the issue #5822 gets fixed\n-                    #[allow(clippy::option_if_let_else)]\n                     let suggestion = if let Some(e) = expr {\n                         snippet_with_applicability(cx, e.span, \"v\", &mut applicability)\n                     } else {\n@@ -528,7 +526,6 @@ impl Write {\n     /// ```rust,ignore\n     /// (Some(\"string to write: {}\"), Some(buf))\n     /// ```\n-    #[allow(clippy::too_many_lines)]\n     fn check_tts<'a>(&self, cx: &EarlyContext<'a>, tts: TokenStream, is_write: bool) -> (Option<StrLit>, Option<Expr>) {\n         let mut parser = parser::Parser::new(&cx.sess().parse_sess, tts, false, None);\n         let expr = if is_write {"}, {"sha": "c4e0b8448ab3f48c7ba68e9062fea13bc524197b", "filename": "src/tools/clippy/clippy_utils/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2FCargo.toml?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy_utils\"\n-version = \"0.1.62\"\n+version = \"0.1.63\"\n edition = \"2021\"\n publish = false\n "}, {"sha": "b379f8c06c606cfaae8d1199a5122bd1ac03955d", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -242,7 +242,7 @@ pub fn eq_item<K>(l: &Item<K>, r: &Item<K>, mut eq_kind: impl FnMut(&K, &K) -> b\n     eq_id(l.ident, r.ident) && over(&l.attrs, &r.attrs, eq_attr) && eq_vis(&l.vis, &r.vis) && eq_kind(&l.kind, &r.kind)\n }\n \n-#[allow(clippy::too_many_lines)] // Just a big match statement\n+#[expect(clippy::too_many_lines)] // Just a big match statement\n pub fn eq_item_kind(l: &ItemKind, r: &ItemKind) -> bool {\n     use ItemKind::*;\n     match (l, r) {"}, {"sha": "49318849d5802bf635a2038e85b9259df1daa9bc", "filename": "src/tools/clippy/clippy_utils/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fattrs.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,12 +1,11 @@\n use rustc_ast::ast;\n+use rustc_ast::attr;\n use rustc_errors::Applicability;\n use rustc_session::Session;\n-use rustc_ast::attr;\n use rustc_span::sym;\n use std::str::FromStr;\n \n /// Deprecation status of attributes known by Clippy.\n-#[allow(dead_code)]\n pub enum DeprecationStatus {\n     /// Attribute is deprecated\n     Deprecated,\n@@ -158,4 +157,3 @@ pub fn is_doc_hidden(attrs: &[ast::Attribute]) -> bool {\n         .filter_map(ast::Attribute::meta_item_list)\n         .any(|l| attr::list_contains_name(&l, sym::hidden))\n }\n-"}, {"sha": "9f162a117b2d103cc12309f33029f24203ff4a3b", "filename": "src/tools/clippy/clippy_utils/src/consts.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fconsts.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -13,7 +13,6 @@ use rustc_middle::ty::{self, EarlyBinder, FloatTy, ScalarInt, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_span::symbol::Symbol;\n use std::cmp::Ordering::{self, Equal};\n-use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n use std::iter;\n \n@@ -130,12 +129,10 @@ impl Constant {\n         match (left, right) {\n             (&Self::Str(ref ls), &Self::Str(ref rs)) => Some(ls.cmp(rs)),\n             (&Self::Char(ref l), &Self::Char(ref r)) => Some(l.cmp(r)),\n-            (&Self::Int(l), &Self::Int(r)) => {\n-                if let ty::Int(int_ty) = *cmp_type.kind() {\n-                    Some(sext(tcx, l, int_ty).cmp(&sext(tcx, r, int_ty)))\n-                } else {\n-                    Some(l.cmp(&r))\n-                }\n+            (&Self::Int(l), &Self::Int(r)) => match *cmp_type.kind() {\n+                ty::Int(int_ty) => Some(sext(tcx, l, int_ty).cmp(&sext(tcx, r, int_ty))),\n+                ty::Uint(_) => Some(l.cmp(&r)),\n+                _ => bug!(\"Not an int type\"),\n             },\n             (&Self::F64(l), &Self::F64(r)) => l.partial_cmp(&r),\n             (&Self::F32(l), &Self::F32(r)) => l.partial_cmp(&r),\n@@ -352,7 +349,7 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n         }\n     }\n \n-    #[allow(clippy::cast_possible_wrap)]\n+    #[expect(clippy::cast_possible_wrap)]\n     fn constant_not(&self, o: &Constant, ty: Ty<'_>) -> Option<Constant> {\n         use self::Constant::{Bool, Int};\n         match *o {"}, {"sha": "4e037d88494d751adefd65449426f1ff09e414dc", "filename": "src/tools/clippy/clippy_utils/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fdiagnostics.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -77,7 +77,7 @@ pub fn span_lint<T: LintContext>(cx: &T, lint: &'static Lint, sp: impl Into<Mult\n pub fn span_lint_and_help<'a, T: LintContext>(\n     cx: &'a T,\n     lint: &'static Lint,\n-    span: Span,\n+    span: impl Into<MultiSpan>,\n     msg: &str,\n     help_span: Option<Span>,\n     help: &str,"}, {"sha": "1a784b6cdda4c5934441a7f3b85378b6c7183087", "filename": "src/tools/clippy/clippy_utils/src/eager_or_lazy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Feager_or_lazy.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -96,7 +96,7 @@ fn fn_eagerness<'tcx>(\n     }\n }\n \n-#[allow(clippy::too_many_lines)]\n+#[expect(clippy::too_many_lines)]\n fn expr_eagerness<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) -> EagernessSuggestion {\n     struct V<'cx, 'tcx> {\n         cx: &'cx LateContext<'tcx>,"}, {"sha": "1e0fc789af24306beaea24a7823acac6ca2dca8a", "filename": "src/tools/clippy/clippy_utils/src/higher.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -2,10 +2,11 @@\n \n #![deny(clippy::missing_docs_in_private_items)]\n \n+use crate::consts::{constant_simple, Constant};\n use crate::ty::is_type_diagnostic_item;\n use crate::{is_expn_of, match_def_path, paths};\n use if_chain::if_chain;\n-use rustc_ast::ast::{self, LitKind};\n+use rustc_ast::ast;\n use rustc_hir as hir;\n use rustc_hir::{Arm, Block, Expr, ExprKind, HirId, LoopSource, MatchSource, Node, Pat, QPath};\n use rustc_lint::LateContext;\n@@ -431,7 +432,7 @@ pub enum VecInitKind {\n     /// `Vec::default()` or `Default::default()`\n     Default,\n     /// `Vec::with_capacity(123)`\n-    WithLiteralCapacity(u64),\n+    WithConstCapacity(u128),\n     /// `Vec::with_capacity(slice.len())`\n     WithExprCapacity(HirId),\n }\n@@ -449,15 +450,11 @@ pub fn get_vec_init_kind<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) -\n                     return Some(VecInitKind::Default);\n                 } else if name.ident.name.as_str() == \"with_capacity\" {\n                     let arg = args.get(0)?;\n-                    if_chain! {\n-                        if let ExprKind::Lit(lit) = &arg.kind;\n-                        if let LitKind::Int(num, _) = lit.node;\n-                        then {\n-                            return Some(VecInitKind::WithLiteralCapacity(num.try_into().ok()?));\n-                        }\n-                    }\n-                    return Some(VecInitKind::WithExprCapacity(arg.hir_id));\n-                }\n+                    return match constant_simple(cx, cx.typeck_results(), arg) {\n+                        Some(Constant::Int(num)) => Some(VecInitKind::WithConstCapacity(num)),\n+                        _ => Some(VecInitKind::WithExprCapacity(arg.hir_id)),\n+                    };\n+                };\n             },\n             ExprKind::Path(QPath::Resolved(_, path))\n                 if match_def_path(cx, path.res.opt_def_id()?, &paths::DEFAULT_TRAIT_METHOD)"}, {"sha": "c440793b90e0edee2dc8b2442930b80c869ea1e3", "filename": "src/tools/clippy/clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhir_utils.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -64,7 +64,6 @@ impl<'a, 'tcx> SpanlessEq<'a, 'tcx> {\n         }\n     }\n \n-    #[allow(dead_code)]\n     pub fn eq_block(&mut self, left: &Block<'_>, right: &Block<'_>) -> bool {\n         self.inter_expr().eq_block(left, right)\n     }\n@@ -194,7 +193,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n         res\n     }\n \n-    #[allow(clippy::similar_names)]\n+    #[expect(clippy::similar_names)]\n     pub fn eq_expr(&mut self, left: &Expr<'_>, right: &Expr<'_>) -> bool {\n         if !self.inner.allow_side_effects && left.span.ctxt() != right.span.ctxt() {\n             return false;\n@@ -361,7 +360,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n         }\n     }\n \n-    #[allow(clippy::similar_names)]\n+    #[expect(clippy::similar_names)]\n     fn eq_qpath(&mut self, left: &QPath<'_>, right: &QPath<'_>) -> bool {\n         match (left, right) {\n             (&QPath::Resolved(ref lty, lpath), &QPath::Resolved(ref rty, rpath)) => {\n@@ -407,7 +406,6 @@ impl HirEqInterExpr<'_, '_, '_> {\n         left.ident.name == right.ident.name && both(&left.args, &right.args, |l, r| self.eq_path_parameters(l, r))\n     }\n \n-    #[allow(clippy::similar_names)]\n     pub fn eq_ty(&mut self, left: &Ty<'_>, right: &Ty<'_>) -> bool {\n         match (&left.kind, &right.kind) {\n             (&TyKind::Slice(l_vec), &TyKind::Slice(r_vec)) => self.eq_ty(l_vec, r_vec),\n@@ -562,7 +560,7 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         std::mem::discriminant(&b.rules).hash(&mut self.s);\n     }\n \n-    #[allow(clippy::too_many_lines)]\n+    #[expect(clippy::too_many_lines)]\n     pub fn hash_expr(&mut self, e: &Expr<'_>) {\n         let simple_const = self\n             .maybe_typeck_results"}, {"sha": "adb37cc9d7510bd1d9a58d5fccbdbd8af75c52d2", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -2,6 +2,7 @@\n #![feature(control_flow_enum)]\n #![feature(let_else)]\n #![feature(let_chains)]\n+#![feature(lint_reasons)]\n #![feature(once_cell)]\n #![feature(rustc_private)]\n #![recursion_limit = \"512\"]\n@@ -35,7 +36,6 @@ extern crate rustc_typeck;\n #[macro_use]\n pub mod sym_helper;\n \n-#[allow(clippy::module_name_repetitions)]\n pub mod ast_utils;\n pub mod attrs;\n pub mod comparisons;\n@@ -67,6 +67,7 @@ use std::sync::{Mutex, MutexGuard};\n \n use if_chain::if_chain;\n use rustc_ast::ast::{self, LitKind};\n+use rustc_ast::Attribute;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_hir as hir;\n@@ -77,9 +78,9 @@ use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::LangItem::{OptionNone, ResultErr, ResultOk};\n use rustc_hir::{\n     def, Arm, ArrayLen, BindingAnnotation, Block, BlockCheckMode, Body, Constness, Destination, Expr, ExprKind, FnDecl,\n-    HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource,\n-    Mutability, Node, Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind,\n-    TraitRef, TyKind, UnOp,\n+    HirId, Impl, ImplItem, ImplItemKind, IsAsync, Item, ItemKind, LangItem, Local, MatchSource, Mutability, Node,\n+    Param, Pat, PatKind, Path, PathSegment, PrimTy, QPath, Stmt, StmtKind, TraitItem, TraitItemKind, TraitRef, TyKind,\n+    UnOp,\n };\n use rustc_lint::{LateContext, Level, Lint, LintContext};\n use rustc_middle::hir::place::PlaceBase;\n@@ -116,8 +117,8 @@ pub fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Opt\n     None\n }\n \n-pub fn meets_msrv(msrv: Option<&RustcVersion>, lint_msrv: &RustcVersion) -> bool {\n-    msrv.map_or(true, |msrv| msrv.meets(*lint_msrv))\n+pub fn meets_msrv(msrv: Option<RustcVersion>, lint_msrv: RustcVersion) -> bool {\n+    msrv.map_or(true, |msrv| msrv.meets(lint_msrv))\n }\n \n #[macro_export]\n@@ -1554,14 +1555,14 @@ pub fn int_bits(tcx: TyCtxt<'_>, ity: rustc_ty::IntTy) -> u64 {\n     Integer::from_int_ty(&tcx, ity).size().bits()\n }\n \n-#[allow(clippy::cast_possible_wrap)]\n+#[expect(clippy::cast_possible_wrap)]\n /// Turn a constant int byte representation into an i128\n pub fn sext(tcx: TyCtxt<'_>, u: u128, ity: rustc_ty::IntTy) -> i128 {\n     let amt = 128 - int_bits(tcx, ity);\n     ((u as i128) << amt) >> amt\n }\n \n-#[allow(clippy::cast_sign_loss)]\n+#[expect(clippy::cast_sign_loss)]\n /// clip unused bytes\n pub fn unsext(tcx: TyCtxt<'_>, u: i128, ity: rustc_ty::IntTy) -> u128 {\n     let amt = 128 - int_bits(tcx, ity);\n@@ -2123,6 +2124,27 @@ pub fn is_in_test_function(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n     })\n }\n \n+/// Checks if the item containing the given `HirId` has `#[cfg(test)]` attribute applied\n+///\n+/// Note: Add `// compile-flags: --test` to UI tests with a `#[cfg(test)]` function\n+pub fn is_in_cfg_test(tcx: TyCtxt<'_>, id: hir::HirId) -> bool {\n+    fn is_cfg_test(attr: &Attribute) -> bool {\n+        if attr.has_name(sym::cfg)\n+            && let Some(items) = attr.meta_item_list()\n+            && let [item] = &*items\n+            && item.has_name(sym::test)\n+        {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+    tcx.hir()\n+        .parent_iter(id)\n+        .flat_map(|(parent_id, _)| tcx.hir().attrs(parent_id))\n+        .any(is_cfg_test)\n+}\n+\n /// Checks whether item either has `test` attribute applied, or\n /// is a module with `test` in its name.\n ///"}, {"sha": "3fb5415ce02999b93ecb171475fca4712a287b17", "filename": "src/tools/clippy/clippy_utils/src/numeric_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fnumeric_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fnumeric_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fnumeric_literal.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,7 +1,7 @@\n use rustc_ast::ast::{Lit, LitFloatType, LitIntType, LitKind};\n use std::iter;\n \n-#[derive(Debug, PartialEq, Copy, Clone)]\n+#[derive(Debug, PartialEq, Eq, Copy, Clone)]\n pub enum Radix {\n     Binary,\n     Octal,"}, {"sha": "9b9cbff2d146238a55b7a8d666d3cc3a0ceba645", "filename": "src/tools/clippy/clippy_utils/src/paths.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -43,9 +43,9 @@ pub const FROM_FROM: [&str; 4] = [\"core\", \"convert\", \"From\", \"from\"];\n pub const FROM_ITERATOR_METHOD: [&str; 6] = [\"core\", \"iter\", \"traits\", \"collect\", \"FromIterator\", \"from_iter\"];\n pub const FROM_STR_METHOD: [&str; 5] = [\"core\", \"str\", \"traits\", \"FromStr\", \"from_str\"];\n pub const FUTURE_FROM_GENERATOR: [&str; 3] = [\"core\", \"future\", \"from_generator\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const FUTURES_IO_ASYNCREADEXT: [&str; 3] = [\"futures_util\", \"io\", \"AsyncReadExt\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const FUTURES_IO_ASYNCWRITEEXT: [&str; 3] = [\"futures_util\", \"io\", \"AsyncWriteExt\"];\n pub const HASHMAP_CONTAINS_KEY: [&str; 6] = [\"std\", \"collections\", \"hash\", \"map\", \"HashMap\", \"contains_key\"];\n pub const HASHMAP_ENTRY: [&str; 5] = [\"std\", \"collections\", \"hash\", \"map\", \"Entry\"];\n@@ -63,7 +63,7 @@ pub const IPADDR_V4: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V4\"];\n pub const IPADDR_V6: [&str; 5] = [\"std\", \"net\", \"ip\", \"IpAddr\", \"V6\"];\n pub const ITER_COUNT: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"count\"];\n pub const ITER_REPEAT: [&str; 5] = [\"core\", \"iter\", \"sources\", \"repeat\", \"repeat\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const ITERTOOLS_NEXT_TUPLE: [&str; 3] = [\"itertools\", \"Itertools\", \"next_tuple\"];\n #[cfg(feature = \"internal\")]\n pub const KW_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"kw\"];\n@@ -117,17 +117,17 @@ pub const RANGE_ARGUMENT_TRAIT: [&str; 3] = [\"core\", \"ops\", \"RangeBounds\"];\n pub const RC_PTR_EQ: [&str; 4] = [\"alloc\", \"rc\", \"Rc\", \"ptr_eq\"];\n pub const REFCELL_REF: [&str; 3] = [\"core\", \"cell\", \"Ref\"];\n pub const REFCELL_REFMUT: [&str; 3] = [\"core\", \"cell\", \"RefMut\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"unicode\", \"RegexBuilder\", \"new\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_BYTES_BUILDER_NEW: [&str; 5] = [\"regex\", \"re_builder\", \"bytes\", \"RegexBuilder\", \"new\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_BYTES_NEW: [&str; 4] = [\"regex\", \"re_bytes\", \"Regex\", \"new\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_BYTES_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"bytes\", \"RegexSet\", \"new\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_NEW: [&str; 4] = [\"regex\", \"re_unicode\", \"Regex\", \"new\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const REGEX_SET_NEW: [&str; 5] = [\"regex\", \"re_set\", \"unicode\", \"RegexSet\", \"new\"];\n /// Preferably use the diagnostic item `sym::Result` where possible\n pub const RESULT: [&str; 3] = [\"core\", \"result\", \"Result\"];\n@@ -169,9 +169,9 @@ pub const SYM_MODULE: [&str; 3] = [\"rustc_span\", \"symbol\", \"sym\"];\n pub const SYNTAX_CONTEXT: [&str; 3] = [\"rustc_span\", \"hygiene\", \"SyntaxContext\"];\n pub const TO_OWNED_METHOD: [&str; 4] = [\"alloc\", \"borrow\", \"ToOwned\", \"to_owned\"];\n pub const TO_STRING_METHOD: [&str; 4] = [\"alloc\", \"string\", \"ToString\", \"to_string\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const TOKIO_IO_ASYNCREADEXT: [&str; 5] = [\"tokio\", \"io\", \"util\", \"async_read_ext\", \"AsyncReadExt\"];\n-#[allow(clippy::invalid_paths)] // internal lints do not know about all external crates\n+#[expect(clippy::invalid_paths)] // internal lints do not know about all external crates\n pub const TOKIO_IO_ASYNCWRITEEXT: [&str; 5] = [\"tokio\", \"io\", \"util\", \"async_write_ext\", \"AsyncWriteExt\"];\n pub const TRY_FROM: [&str; 4] = [\"core\", \"convert\", \"TryFrom\", \"try_from\"];\n pub const VEC_AS_MUT_SLICE: [&str; 4] = [\"alloc\", \"vec\", \"Vec\", \"as_mut_slice\"];"}, {"sha": "a6d7042fabc2606e19f3707cd2d54d4870d168df", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -18,7 +18,7 @@ use std::borrow::Cow;\n \n type McfResult = Result<(), (Span, Cow<'static, str>)>;\n \n-pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv: Option<&RustcVersion>) -> McfResult {\n+pub fn is_min_const_fn<'a, 'tcx>(tcx: TyCtxt<'tcx>, body: &'a Body<'tcx>, msrv: Option<RustcVersion>) -> McfResult {\n     let def_id = body.source.def_id();\n     let mut current = def_id;\n     loop {\n@@ -268,7 +268,7 @@ fn check_terminator<'a, 'tcx>(\n     tcx: TyCtxt<'tcx>,\n     body: &'a Body<'tcx>,\n     terminator: &Terminator<'tcx>,\n-    msrv: Option<&RustcVersion>,\n+    msrv: Option<RustcVersion>,\n ) -> McfResult {\n     let span = terminator.source_info.span;\n     match &terminator.kind {\n@@ -352,7 +352,7 @@ fn check_terminator<'a, 'tcx>(\n     }\n }\n \n-fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<&RustcVersion>) -> bool {\n+fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<RustcVersion>) -> bool {\n     tcx.is_const_fn(def_id)\n         && tcx.lookup_const_stability(def_id).map_or(true, |const_stab| {\n             if let rustc_attr::StabilityLevel::Stable { since } = const_stab.level {\n@@ -361,7 +361,7 @@ fn is_const_fn(tcx: TyCtxt<'_>, def_id: DefId, msrv: Option<&RustcVersion>) -> b\n                 // as a part of an unimplemented MSRV check https://github.com/rust-lang/rust/issues/65262.\n                 crate::meets_msrv(\n                     msrv,\n-                    &RustcVersion::parse(since.as_str())\n+                    RustcVersion::parse(since.as_str())\n                         .expect(\"`rustc_attr::StabilityLevel::Stable::since` is ill-formatted\"),\n                 )\n             } else {"}, {"sha": "04ef2f57447c6da80ad7b726e43cfba015f10cf0", "filename": "src/tools/clippy/clippy_utils/src/source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsource.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -137,7 +137,7 @@ pub fn position_before_rarrow(s: &str) -> Option<usize> {\n }\n \n /// Reindent a multiline string with possibility of ignoring the first line.\n-#[allow(clippy::needless_pass_by_value)]\n+#[expect(clippy::needless_pass_by_value)]\n pub fn reindent_multiline(s: Cow<'_, str>, ignore_first: bool, indent: Option<usize>) -> Cow<'_, str> {\n     let s_space = reindent_multiline_inner(&s, ignore_first, indent, ' ');\n     let s_tab = reindent_multiline_inner(&s_space, ignore_first, indent, '\\t');"}, {"sha": "4f3757f1ec673ad1410614325cf6f1c0f262c0b3", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -17,7 +17,6 @@ use rustc_middle::ty;\n use rustc_span::source_map::{BytePos, CharPos, Pos, Span, SyntaxContext};\n use rustc_typeck::expr_use_visitor::{Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n use std::borrow::Cow;\n-use std::convert::TryInto;\n use std::fmt::{Display, Write as _};\n use std::iter;\n use std::ops::{Add, Neg, Not, Sub};\n@@ -50,7 +49,7 @@ impl Display for Sugg<'_> {\n     }\n }\n \n-#[allow(clippy::wrong_self_convention)] // ok, because of the function `as_ty` method\n+#[expect(clippy::wrong_self_convention)] // ok, because of the function `as_ty` method\n impl<'a> Sugg<'a> {\n     /// Prepare a suggestion from an expression.\n     pub fn hir_opt(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> Option<Self> {\n@@ -318,7 +317,6 @@ impl<'a> Sugg<'a> {\n \n     /// Convenience method to create the `<lhs>..<rhs>` or `<lhs>...<rhs>`\n     /// suggestion.\n-    #[allow(dead_code)]\n     pub fn range(self, end: &Self, limit: ast::RangeLimits) -> Sugg<'static> {\n         match limit {\n             ast::RangeLimits::HalfOpen => make_assoc(AssocOp::DotDot, &self, end),\n@@ -886,7 +884,6 @@ impl<'tcx> DerefDelegate<'_, 'tcx> {\n impl<'tcx> Delegate<'tcx> for DerefDelegate<'_, 'tcx> {\n     fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: HirId) {}\n \n-    #[allow(clippy::too_many_lines)]\n     fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: HirId, _: ty::BorrowKind) {\n         if let PlaceBase::Local(id) = cmt.place.base {\n             let map = self.cx.tcx.hir();"}, {"sha": "07d3d2807634f8a8d8a163691045b054af2c56ca", "filename": "src/tools/clippy/clippy_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fty.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -603,7 +603,7 @@ impl core::ops::Add<u32> for EnumValue {\n }\n \n /// Attempts to read the given constant as though it were an an enum value.\n-#[allow(clippy::cast_possible_truncation, clippy::cast_possible_wrap)]\n+#[expect(clippy::cast_possible_truncation, clippy::cast_possible_wrap)]\n pub fn read_explicit_enum_value(tcx: TyCtxt<'_>, id: DefId) -> Option<EnumValue> {\n     if let Ok(ConstValue::Scalar(Scalar::Int(value))) = tcx.const_eval_poly(id) {\n         match tcx.type_of(id).kind() {"}, {"sha": "9819778540cc942002c994c9b2e6a8dfa4c8fefb", "filename": "src/tools/clippy/clippy_utils/src/usage.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fusage.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -44,7 +44,6 @@ struct MutVarsDelegate {\n }\n \n impl<'tcx> MutVarsDelegate {\n-    #[allow(clippy::similar_names)]\n     fn update(&mut self, cat: &PlaceWithHirId<'tcx>) {\n         match cat.place.base {\n             PlaceBase::Local(id) => {"}, {"sha": "b6c8f1d516e557fb77e928541d5eaf92a0400c0d", "filename": "src/tools/clippy/clippy_utils/src/visitors.rs", "status": "modified", "additions": 59, "deletions": 1, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,4 +1,4 @@\n-use crate::path_to_local_id;\n+use crate::{get_enclosing_block, path_to_local_id};\n use core::ops::ControlFlow;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -436,3 +436,61 @@ pub fn for_each_value_source<'tcx, B>(\n         _ => f(e),\n     }\n }\n+\n+/// Runs the given function for each path expression referencing the given local which occur after\n+/// the given expression.\n+pub fn for_each_local_use_after_expr<'tcx, B>(\n+    cx: &LateContext<'tcx>,\n+    local_id: HirId,\n+    expr_id: HirId,\n+    f: impl FnMut(&'tcx Expr<'tcx>) -> ControlFlow<B>,\n+) -> ControlFlow<B> {\n+    struct V<'cx, 'tcx, F, B> {\n+        cx: &'cx LateContext<'tcx>,\n+        local_id: HirId,\n+        expr_id: HirId,\n+        found: bool,\n+        res: ControlFlow<B>,\n+        f: F,\n+    }\n+    impl<'cx, 'tcx, F: FnMut(&'tcx Expr<'tcx>) -> ControlFlow<B>, B> Visitor<'tcx> for V<'cx, 'tcx, F, B> {\n+        type NestedFilter = nested_filter::OnlyBodies;\n+        fn nested_visit_map(&mut self) -> Self::Map {\n+            self.cx.tcx.hir()\n+        }\n+\n+        fn visit_expr(&mut self, e: &'tcx Expr<'tcx>) {\n+            if !self.found {\n+                if e.hir_id == self.expr_id {\n+                    self.found = true;\n+                } else {\n+                    walk_expr(self, e);\n+                }\n+                return;\n+            }\n+            if self.res.is_break() {\n+                return;\n+            }\n+            if path_to_local_id(e, self.local_id) {\n+                self.res = (self.f)(e);\n+            } else {\n+                walk_expr(self, e);\n+            }\n+        }\n+    }\n+\n+    if let Some(b) = get_enclosing_block(cx, local_id) {\n+        let mut v = V {\n+            cx,\n+            local_id,\n+            expr_id,\n+            found: false,\n+            res: ControlFlow::Continue(()),\n+            f,\n+        };\n+        v.visit_block(b);\n+        v.res\n+    } else {\n+        ControlFlow::Continue(())\n+    }\n+}"}, {"sha": "e8f0c338fd58aa4472a36e3455559085e4f7866f", "filename": "src/tools/clippy/doc/adding_lints.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fdoc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fdoc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fdoc%2Fadding_lints.md?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -28,7 +28,7 @@ because that's clearly a non-descriptive name.\n   - [Debugging](#debugging)\n   - [PR Checklist](#pr-checklist)\n   - [Adding configuration to a lint](#adding-configuration-to-a-lint)\n-  - [Cheatsheet](#cheatsheet)\n+  - [Cheat Sheet](#cheat-sheet)\n \n ## Setup\n \n@@ -432,7 +432,7 @@ The project's MSRV can then be matched against the feature MSRV in the LintPass\n using the `meets_msrv` utility function.\n \n ``` rust\n-if !meets_msrv(self.msrv.as_ref(), &msrvs::STR_STRIP_PREFIX) {\n+if !meets_msrv(self.msrv, msrvs::STR_STRIP_PREFIX) {\n     return;\n }\n ```\n@@ -649,14 +649,14 @@ in the following steps:\n         with the configuration value and a rust file that should be linted by Clippy. The test can\n         otherwise be written as usual.\n \n-## Cheatsheet\n+## Cheat Sheet\n \n Here are some pointers to things you are likely going to need for every lint:\n \n * [Clippy utils][utils] - Various helper functions. Maybe the function you need\n   is already in here ([`is_type_diagnostic_item`], [`implements_trait`], [`snippet`], etc)\n * [Clippy diagnostics][diagnostics]\n-* [The `if_chain` macro][if_chain]\n+* [Let chains][let-chains]\n * [`from_expansion`][from_expansion] and [`in_external_macro`][in_external_macro]\n * [`Span`][span]\n * [`Applicability`][applicability]\n@@ -684,7 +684,7 @@ don't hesitate to ask on [Zulip] or in the issue/PR.\n [`is_type_diagnostic_item`]: https://doc.rust-lang.org/nightly/nightly-rustc/clippy_utils/ty/fn.is_type_diagnostic_item.html\n [`implements_trait`]: https://doc.rust-lang.org/nightly/nightly-rustc/clippy_utils/ty/fn.implements_trait.html\n [`snippet`]: https://doc.rust-lang.org/nightly/nightly-rustc/clippy_utils/source/fn.snippet.html\n-[if_chain]: https://docs.rs/if_chain/*/if_chain/\n+[let-chains]: https://github.com/rust-lang/rust/pull/94927\n [from_expansion]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html#method.from_expansion\n [in_external_macro]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/lint/fn.in_external_macro.html\n [span]: https://doc.rust-lang.org/nightly/nightly-rustc/rustc_span/struct.Span.html"}, {"sha": "131ac3c3611e83ffcb74678f2712ee69e3babeae", "filename": "src/tools/clippy/doc/common_tools_writing_lints.md", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fdoc%2Fcommon_tools_writing_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fdoc%2Fcommon_tools_writing_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fdoc%2Fcommon_tools_writing_lints.md?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -62,16 +62,14 @@ Starting with an `expr`, you can check whether it is calling a specific method `\n ```rust\n impl<'tcx> LateLintPass<'tcx> for MyStructLint {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n-        if_chain! {\n-            // Check our expr is calling a method\n-            if let hir::ExprKind::MethodCall(path, _, [_self_arg, ..]) = &expr.kind;\n+        // Check our expr is calling a method\n+        if let hir::ExprKind::MethodCall(path, _, [_self_arg, ..]) = &expr.kind\n             // Check the name of this method is `some_method`\n-            if path.ident.name == sym!(some_method);\n+            && path.ident.name == sym!(some_method)\n             // Optionally, check the type of the self argument.\n             // - See \"Checking for a specific type\"\n-            then {\n+        {\n                 // ...\n-            }\n         }\n     }\n }\n@@ -165,18 +163,16 @@ use clippy_utils::{is_type_diagnostic_item, return_ty};\n \n impl<'tcx> LateLintPass<'tcx> for MyTypeImpl {\n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {\n-        if_chain! {\n-            // Check if item is a method/function\n-            if let ImplItemKind::Fn(ref signature, _) = impl_item.kind;\n+        // Check if item is a method/function\n+        if let ImplItemKind::Fn(ref signature, _) = impl_item.kind\n             // Check the method is named `some_method`\n-            if impl_item.ident.name == sym!(some_method);\n+            && impl_item.ident.name == sym!(some_method)\n             // We can also check it has a parameter `self`\n-            if signature.decl.implicit_self.has_implicit_self();\n+            && signature.decl.implicit_self.has_implicit_self()\n             // We can go further and even check if its return type is `String`\n-            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym!(string_type));\n-            then {\n-                // ...\n-            }\n+            && is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym!(string_type))\n+        {\n+            // ...\n         }\n     }\n }"}, {"sha": "e63f65ce2f75dfd142652d15fe90683b149090a1", "filename": "src/tools/clippy/lintcheck/Cargo.toml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Flintcheck%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Flintcheck%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Flintcheck%2FCargo.toml?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -6,16 +6,15 @@ readme = \"README.md\"\n license = \"MIT OR Apache-2.0\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n categories = [\"development-tools\"]\n-edition = \"2018\"\n+edition = \"2021\"\n publish = false\n \n [dependencies]\n+cargo_metadata = \"0.14\"\n clap = \"2.33\"\n flate2 = \"1.0\"\n-fs_extra = \"1.2\"\n rayon = \"1.5.1\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n-serde_json = \"1.0\"\n tar = \"0.4\"\n toml = \"0.5\"\n ureq = \"2.2\""}, {"sha": "4fbae8614ca3daa060945a2862d65432bba921d5", "filename": "src/tools/clippy/lintcheck/lintcheck_crates.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Flintcheck%2Flintcheck_crates.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Flintcheck%2Flintcheck_crates.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Flintcheck%2Flintcheck_crates.toml?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -24,7 +24,7 @@ unicode-xid = {name = \"unicode-xid\", versions = ['0.2.1']}\n anyhow = {name = \"anyhow\", versions = ['1.0.38']}\n async-trait = {name = \"async-trait\", versions = ['0.1.42']}\n cxx = {name = \"cxx\", versions = ['1.0.32']}\n-ryu = {name = \"ryu\", version = ['1.0.5']}\n+ryu = {name = \"ryu\", versions = ['1.0.5']}\n serde_yaml = {name = \"serde_yaml\", versions = ['0.8.17']}\n thiserror = {name = \"thiserror\", versions = ['1.0.24']}\n # some embark crates, there are other interesting crates but"}, {"sha": "de32b48436019c5a2d774c1181cc554dda24ba99", "filename": "src/tools/clippy/lintcheck/src/config.rs", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Flintcheck%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Flintcheck%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Flintcheck%2Fsrc%2Fconfig.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,140 @@\n+use clap::{App, Arg, ArgMatches};\n+use std::env;\n+use std::path::PathBuf;\n+\n+fn get_clap_config<'a>() -> ArgMatches<'a> {\n+    App::new(\"lintcheck\")\n+        .about(\"run clippy on a set of crates and check output\")\n+        .arg(\n+            Arg::with_name(\"only\")\n+                .takes_value(true)\n+                .value_name(\"CRATE\")\n+                .long(\"only\")\n+                .help(\"Only process a single crate of the list\"),\n+        )\n+        .arg(\n+            Arg::with_name(\"crates-toml\")\n+                .takes_value(true)\n+                .value_name(\"CRATES-SOURCES-TOML-PATH\")\n+                .long(\"crates-toml\")\n+                .help(\"Set the path for a crates.toml where lintcheck should read the sources from\"),\n+        )\n+        .arg(\n+            Arg::with_name(\"threads\")\n+                .takes_value(true)\n+                .value_name(\"N\")\n+                .short(\"j\")\n+                .long(\"jobs\")\n+                .help(\"Number of threads to use, 0 automatic choice\"),\n+        )\n+        .arg(\n+            Arg::with_name(\"fix\")\n+                .long(\"--fix\")\n+                .help(\"Runs cargo clippy --fix and checks if all suggestions apply\"),\n+        )\n+        .arg(\n+            Arg::with_name(\"filter\")\n+                .long(\"--filter\")\n+                .takes_value(true)\n+                .multiple(true)\n+                .value_name(\"clippy_lint_name\")\n+                .help(\"Apply a filter to only collect specified lints, this also overrides `allow` attributes\"),\n+        )\n+        .arg(\n+            Arg::with_name(\"markdown\")\n+                .long(\"--markdown\")\n+                .help(\"Change the reports table to use markdown links\"),\n+        )\n+        .get_matches()\n+}\n+\n+#[derive(Debug)]\n+pub(crate) struct LintcheckConfig {\n+    /// max number of jobs to spawn (default 1)\n+    pub max_jobs: usize,\n+    /// we read the sources to check from here\n+    pub sources_toml_path: PathBuf,\n+    /// we save the clippy lint results here\n+    pub lintcheck_results_path: PathBuf,\n+    /// Check only a specified package\n+    pub only: Option<String>,\n+    /// whether to just run --fix and not collect all the warnings\n+    pub fix: bool,\n+    /// A list of lints that this lintcheck run should focus on\n+    pub lint_filter: Vec<String>,\n+    /// Indicate if the output should support markdown syntax\n+    pub markdown: bool,\n+}\n+\n+impl LintcheckConfig {\n+    pub fn new() -> Self {\n+        let clap_config = get_clap_config();\n+\n+        // first, check if we got anything passed via the LINTCHECK_TOML env var,\n+        // if not, ask clap if we got any value for --crates-toml  <foo>\n+        // if not, use the default \"lintcheck/lintcheck_crates.toml\"\n+        let sources_toml = env::var(\"LINTCHECK_TOML\").unwrap_or_else(|_| {\n+            clap_config\n+                .value_of(\"crates-toml\")\n+                .clone()\n+                .unwrap_or(\"lintcheck/lintcheck_crates.toml\")\n+                .to_string()\n+        });\n+\n+        let markdown = clap_config.is_present(\"markdown\");\n+        let sources_toml_path = PathBuf::from(sources_toml);\n+\n+        // for the path where we save the lint results, get the filename without extension (so for\n+        // wasd.toml, use \"wasd\"...)\n+        let filename: PathBuf = sources_toml_path.file_stem().unwrap().into();\n+        let lintcheck_results_path = PathBuf::from(format!(\n+            \"lintcheck-logs/{}_logs.{}\",\n+            filename.display(),\n+            if markdown { \"md\" } else { \"txt\" }\n+        ));\n+\n+        // look at the --threads arg, if 0 is passed, ask rayon rayon how many threads it would spawn and\n+        // use half of that for the physical core count\n+        // by default use a single thread\n+        let max_jobs = match clap_config.value_of(\"threads\") {\n+            Some(threads) => {\n+                let threads: usize = threads\n+                    .parse()\n+                    .unwrap_or_else(|_| panic!(\"Failed to parse '{}' to a digit\", threads));\n+                if threads == 0 {\n+                    // automatic choice\n+                    // Rayon seems to return thread count so half that for core count\n+                    (rayon::current_num_threads() / 2) as usize\n+                } else {\n+                    threads\n+                }\n+            },\n+            // no -j passed, use a single thread\n+            None => 1,\n+        };\n+\n+        let lint_filter: Vec<String> = clap_config\n+            .values_of(\"filter\")\n+            .map(|iter| {\n+                iter.map(|lint_name| {\n+                    let mut filter = lint_name.replace('_', \"-\");\n+                    if !filter.starts_with(\"clippy::\") {\n+                        filter.insert_str(0, \"clippy::\");\n+                    }\n+                    filter\n+                })\n+                .collect()\n+            })\n+            .unwrap_or_default();\n+\n+        LintcheckConfig {\n+            max_jobs,\n+            sources_toml_path,\n+            lintcheck_results_path,\n+            only: clap_config.value_of(\"only\").map(String::from),\n+            fix: clap_config.is_present(\"fix\"),\n+            lint_filter,\n+            markdown,\n+        }\n+    }\n+}"}, {"sha": "dff9d27db0a6c45f54f7fcab3e090fc644e24c31", "filename": "src/tools/clippy/lintcheck/src/main.rs", "status": "modified", "additions": 120, "deletions": 348, "changes": 468, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Flintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Flintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Flintcheck%2Fsrc%2Fmain.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -7,23 +7,25 @@\n \n #![allow(clippy::collapsible_else_if)]\n \n-use std::ffi::OsStr;\n+mod config;\n+\n+use config::LintcheckConfig;\n+\n+use std::collections::HashMap;\n+use std::env;\n use std::fmt::Write as _;\n+use std::fs::write;\n+use std::io::ErrorKind;\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n use std::sync::atomic::{AtomicUsize, Ordering};\n-use std::{collections::HashMap, io::ErrorKind};\n-use std::{\n-    env,\n-    fs::write,\n-    path::{Path, PathBuf},\n-    thread,\n-    time::Duration,\n-};\n-\n-use clap::{App, Arg, ArgMatches};\n+use std::thread;\n+use std::time::Duration;\n+\n+use cargo_metadata::diagnostic::DiagnosticLevel;\n+use cargo_metadata::Message;\n use rayon::prelude::*;\n use serde::{Deserialize, Serialize};\n-use serde_json::Value;\n use walkdir::{DirEntry, WalkDir};\n \n #[cfg(not(windows))]\n@@ -93,37 +95,67 @@ struct Crate {\n #[derive(Debug)]\n struct ClippyWarning {\n     crate_name: String,\n-    crate_version: String,\n     file: String,\n-    line: String,\n-    column: String,\n-    linttype: String,\n+    line: usize,\n+    column: usize,\n+    lint_type: String,\n     message: String,\n     is_ice: bool,\n }\n \n #[allow(unused)]\n impl ClippyWarning {\n+    fn new(cargo_message: Message, krate: &Crate) -> Option<Self> {\n+        let diag = match cargo_message {\n+            Message::CompilerMessage(message) => message.message,\n+            _ => return None,\n+        };\n+\n+        let lint_type = diag.code?.code;\n+        if !(lint_type.contains(\"clippy\") || diag.message.contains(\"clippy\"))\n+            || diag.message.contains(\"could not read cargo metadata\")\n+        {\n+            return None;\n+        }\n+\n+        let span = diag.spans.into_iter().find(|span| span.is_primary)?;\n+\n+        let file = match Path::new(&span.file_name).strip_prefix(env!(\"CARGO_HOME\")) {\n+            Ok(stripped) => format!(\"$CARGO_HOME/{}\", stripped.display()),\n+            Err(_) => format!(\n+                \"target/lintcheck/sources/{}-{}/{}\",\n+                krate.name, krate.version, span.file_name\n+            ),\n+        };\n+\n+        Some(Self {\n+            crate_name: krate.name.clone(),\n+            file,\n+            line: span.line_start,\n+            column: span.column_start,\n+            lint_type,\n+            message: diag.message,\n+            is_ice: diag.level == DiagnosticLevel::Ice,\n+        })\n+    }\n+\n     fn to_output(&self, markdown: bool) -> String {\n-        let file = format!(\"{}-{}/{}\", &self.crate_name, &self.crate_version, &self.file);\n-        let file_with_pos = format!(\"{}:{}:{}\", &file, &self.line, &self.column);\n+        let file_with_pos = format!(\"{}:{}:{}\", &self.file, &self.line, &self.column);\n         if markdown {\n-            let lint = format!(\"`{}`\", self.linttype);\n+            let lint = format!(\"`{}`\", self.lint_type);\n+\n+            let mut file = self.file.clone();\n+            if !file.starts_with('$') {\n+                file.insert_str(0, \"../\");\n+            }\n \n             let mut output = String::from(\"| \");\n-            let _ = write!(\n-                output,\n-                \"[`{}`](../target/lintcheck/sources/{}#L{})\",\n-                file_with_pos, file, self.line\n-            );\n+            let _ = write!(output, \"[`{}`]({}#L{})\", file_with_pos, file, self.line);\n             let _ = write!(output, r#\" | {:<50} | \"{}\" |\"#, lint, self.message);\n             output.push('\\n');\n             output\n         } else {\n-            format!(\n-                \"target/lintcheck/sources/{} {} \\\"{}\\\"\\n\",\n-                file_with_pos, self.linttype, self.message\n-            )\n+            format!(\"{} {} \\\"{}\\\"\\n\", file_with_pos, self.lint_type, self.message)\n         }\n     }\n }\n@@ -278,18 +310,17 @@ impl Crate {\n         &self,\n         cargo_clippy_path: &Path,\n         target_dir_index: &AtomicUsize,\n-        thread_limit: usize,\n         total_crates_to_lint: usize,\n-        fix: bool,\n+        config: &LintcheckConfig,\n         lint_filter: &Vec<String>,\n     ) -> Vec<ClippyWarning> {\n         // advance the atomic index by one\n         let index = target_dir_index.fetch_add(1, Ordering::SeqCst);\n         // \"loop\" the index within 0..thread_limit\n-        let thread_index = index % thread_limit;\n+        let thread_index = index % config.max_jobs;\n         let perc = (index * 100) / total_crates_to_lint;\n \n-        if thread_limit == 1 {\n+        if config.max_jobs == 1 {\n             println!(\n                 \"{}/{} {}% Linting {} {}\",\n                 index, total_crates_to_lint, perc, &self.name, &self.version\n@@ -305,7 +336,7 @@ impl Crate {\n \n         let shared_target_dir = clippy_project_root().join(\"target/lintcheck/shared_target_dir\");\n \n-        let mut args = if fix {\n+        let mut args = if config.fix {\n             vec![\"--fix\", \"--\"]\n         } else {\n             vec![\"--\", \"--message-format=json\", \"--\"]\n@@ -356,7 +387,7 @@ impl Crate {\n             );\n         }\n \n-        if fix {\n+        if config.fix {\n             if let Some(stderr) = stderr\n                 .lines()\n                 .find(|line| line.contains(\"failed to automatically apply fixes suggested by rustc to crate\"))\n@@ -371,127 +402,15 @@ impl Crate {\n             return Vec::new();\n         }\n \n-        let output_lines = stdout.lines();\n-        let warnings: Vec<ClippyWarning> = output_lines\n-            .into_iter()\n-            // get all clippy warnings and ICEs\n-            .filter(|line| filter_clippy_warnings(&line))\n-            .map(|json_msg| parse_json_message(json_msg, &self))\n+        // get all clippy warnings and ICEs\n+        let warnings: Vec<ClippyWarning> = Message::parse_stream(stdout.as_bytes())\n+            .filter_map(|msg| ClippyWarning::new(msg.unwrap(), &self))\n             .collect();\n \n         warnings\n     }\n }\n \n-#[derive(Debug)]\n-struct LintcheckConfig {\n-    /// max number of jobs to spawn (default 1)\n-    max_jobs: usize,\n-    /// we read the sources to check from here\n-    sources_toml_path: PathBuf,\n-    /// we save the clippy lint results here\n-    lintcheck_results_path: PathBuf,\n-    /// whether to just run --fix and not collect all the warnings\n-    fix: bool,\n-    /// A list of lints that this lintcheck run should focus on\n-    lint_filter: Vec<String>,\n-    /// Indicate if the output should support markdown syntax\n-    markdown: bool,\n-}\n-\n-impl LintcheckConfig {\n-    fn from_clap(clap_config: &ArgMatches) -> Self {\n-        // first, check if we got anything passed via the LINTCHECK_TOML env var,\n-        // if not, ask clap if we got any value for --crates-toml  <foo>\n-        // if not, use the default \"lintcheck/lintcheck_crates.toml\"\n-        let sources_toml = env::var(\"LINTCHECK_TOML\").unwrap_or_else(|_| {\n-            clap_config\n-                .value_of(\"crates-toml\")\n-                .clone()\n-                .unwrap_or(\"lintcheck/lintcheck_crates.toml\")\n-                .to_string()\n-        });\n-\n-        let markdown = clap_config.is_present(\"markdown\");\n-        let sources_toml_path = PathBuf::from(sources_toml);\n-\n-        // for the path where we save the lint results, get the filename without extension (so for\n-        // wasd.toml, use \"wasd\"...)\n-        let filename: PathBuf = sources_toml_path.file_stem().unwrap().into();\n-        let lintcheck_results_path = PathBuf::from(format!(\n-            \"lintcheck-logs/{}_logs.{}\",\n-            filename.display(),\n-            if markdown { \"md\" } else { \"txt\" }\n-        ));\n-\n-        // look at the --threads arg, if 0 is passed, ask rayon rayon how many threads it would spawn and\n-        // use half of that for the physical core count\n-        // by default use a single thread\n-        let max_jobs = match clap_config.value_of(\"threads\") {\n-            Some(threads) => {\n-                let threads: usize = threads\n-                    .parse()\n-                    .unwrap_or_else(|_| panic!(\"Failed to parse '{}' to a digit\", threads));\n-                if threads == 0 {\n-                    // automatic choice\n-                    // Rayon seems to return thread count so half that for core count\n-                    (rayon::current_num_threads() / 2) as usize\n-                } else {\n-                    threads\n-                }\n-            },\n-            // no -j passed, use a single thread\n-            None => 1,\n-        };\n-        let fix: bool = clap_config.is_present(\"fix\");\n-        let lint_filter: Vec<String> = clap_config\n-            .values_of(\"filter\")\n-            .map(|iter| {\n-                iter.map(|lint_name| {\n-                    let mut filter = lint_name.replace('_', \"-\");\n-                    if !filter.starts_with(\"clippy::\") {\n-                        filter.insert_str(0, \"clippy::\");\n-                    }\n-                    filter\n-                })\n-                .collect()\n-            })\n-            .unwrap_or_default();\n-\n-        LintcheckConfig {\n-            max_jobs,\n-            sources_toml_path,\n-            lintcheck_results_path,\n-            fix,\n-            lint_filter,\n-            markdown,\n-        }\n-    }\n-}\n-\n-/// takes a single json-formatted clippy warnings and returns true (we are interested in that line)\n-/// or false (we aren't)\n-fn filter_clippy_warnings(line: &str) -> bool {\n-    // we want to collect ICEs because clippy might have crashed.\n-    // these are summarized later\n-    if line.contains(\"internal compiler error: \") {\n-        return true;\n-    }\n-    // in general, we want all clippy warnings\n-    // however due to some kind of bug, sometimes there are absolute paths\n-    // to libcore files inside the message\n-    // or we end up with cargo-metadata output (https://github.com/rust-lang/rust-clippy/issues/6508)\n-\n-    // filter out these message to avoid unnecessary noise in the logs\n-    if line.contains(\"clippy::\")\n-        && !(line.contains(\"could not read cargo metadata\")\n-            || (line.contains(\".rustup\") && line.contains(\"toolchains\")))\n-    {\n-        return true;\n-    }\n-    false\n-}\n-\n /// Builds clippy inside the repo to make sure we have a clippy executable we can use.\n fn build_clippy() {\n     let status = Command::new(\"cargo\")\n@@ -527,27 +446,27 @@ fn read_crates(toml_path: &Path) -> Vec<CrateSource> {\n                 path: PathBuf::from(path),\n                 options: tk.options.clone(),\n             });\n-        }\n-\n-        // if we have multiple versions, save each one\n-        if let Some(ref versions) = tk.versions {\n+        } else if let Some(ref versions) = tk.versions {\n+            // if we have multiple versions, save each one\n             versions.iter().for_each(|ver| {\n                 crate_sources.push(CrateSource::CratesIo {\n                     name: tk.name.clone(),\n                     version: ver.to_string(),\n                     options: tk.options.clone(),\n                 });\n             })\n-        }\n-        // otherwise, we should have a git source\n-        if tk.git_url.is_some() && tk.git_hash.is_some() {\n+        } else if tk.git_url.is_some() && tk.git_hash.is_some() {\n+            // otherwise, we should have a git source\n             crate_sources.push(CrateSource::Git {\n                 name: tk.name.clone(),\n                 url: tk.git_url.clone().unwrap(),\n                 commit: tk.git_hash.clone().unwrap(),\n                 options: tk.options.clone(),\n             });\n+        } else {\n+            panic!(\"Invalid crate source: {tk:?}\");\n         }\n+\n         // if we have a version as well as a git data OR only one git data, something is funky\n         if tk.versions.is_some() && (tk.git_url.is_some() || tk.git_hash.is_some())\n             || tk.git_hash.is_some() != tk.git_url.is_some()\n@@ -568,57 +487,13 @@ fn read_crates(toml_path: &Path) -> Vec<CrateSource> {\n     crate_sources\n }\n \n-/// Parse the json output of clippy and return a `ClippyWarning`\n-fn parse_json_message(json_message: &str, krate: &Crate) -> ClippyWarning {\n-    let jmsg: Value = serde_json::from_str(&json_message).unwrap_or_else(|e| panic!(\"Failed to parse json:\\n{:?}\", e));\n-\n-    let file: String = jmsg[\"message\"][\"spans\"][0][\"file_name\"]\n-        .to_string()\n-        .trim_matches('\"')\n-        .into();\n-\n-    let file = if file.contains(\".cargo\") {\n-        // if we deal with macros, a filename may show the origin of a macro which can be inside a dep from\n-        // the registry.\n-        // don't show the full path in that case.\n-\n-        // /home/matthias/.cargo/registry/src/github.com-1ecc6299db9ec823/syn-1.0.63/src/custom_keyword.rs\n-        let path = PathBuf::from(file);\n-        let mut piter = path.iter();\n-        // consume all elements until we find \".cargo\", so that \"/home/matthias\" is skipped\n-        let _: Option<&OsStr> = piter.find(|x| x == &std::ffi::OsString::from(\".cargo\"));\n-        // collect the remaining segments\n-        let file = piter.collect::<PathBuf>();\n-        format!(\"{}\", file.display())\n-    } else {\n-        file\n-    };\n-\n-    ClippyWarning {\n-        crate_name: krate.name.to_string(),\n-        crate_version: krate.version.to_string(),\n-        file,\n-        line: jmsg[\"message\"][\"spans\"][0][\"line_start\"]\n-            .to_string()\n-            .trim_matches('\"')\n-            .into(),\n-        column: jmsg[\"message\"][\"spans\"][0][\"text\"][0][\"highlight_start\"]\n-            .to_string()\n-            .trim_matches('\"')\n-            .into(),\n-        linttype: jmsg[\"message\"][\"code\"][\"code\"].to_string().trim_matches('\"').into(),\n-        message: jmsg[\"message\"][\"message\"].to_string().trim_matches('\"').into(),\n-        is_ice: json_message.contains(\"internal compiler error: \"),\n-    }\n-}\n-\n /// Generate a short list of occurring lints-types and their count\n fn gather_stats(clippy_warnings: &[ClippyWarning]) -> (String, HashMap<&String, usize>) {\n     // count lint type occurrences\n     let mut counter: HashMap<&String, usize> = HashMap::new();\n     clippy_warnings\n         .iter()\n-        .for_each(|wrn| *counter.entry(&wrn.linttype).or_insert(0) += 1);\n+        .for_each(|wrn| *counter.entry(&wrn.lint_type).or_insert(0) += 1);\n \n     // collect into a tupled list for sorting\n     let mut stats: Vec<(&&String, &usize)> = counter.iter().map(|(lint, count)| (lint, count)).collect();\n@@ -667,22 +542,14 @@ fn lintcheck_needs_rerun(lintcheck_logs_path: &Path) -> bool {\n     logs_modified < clippy_modified\n }\n \n-/// lintchecks `main()` function\n-///\n-/// # Panics\n-///\n-/// This function panics if the clippy binaries don't exist\n-/// or if lintcheck is executed from the wrong directory (aka none-repo-root)\n-pub fn main() {\n+fn main() {\n     // assert that we launch lintcheck from the repo root (via cargo lintcheck)\n     if std::fs::metadata(\"lintcheck/Cargo.toml\").is_err() {\n         eprintln!(\"lintcheck needs to be run from clippys repo root!\\nUse `cargo lintcheck` alternatively.\");\n         std::process::exit(3);\n     }\n \n-    let clap_config = &get_clap_config();\n-\n-    let config = LintcheckConfig::from_clap(clap_config);\n+    let config = LintcheckConfig::new();\n \n     println!(\"Compiling clippy...\");\n     build_clippy();\n@@ -736,76 +603,46 @@ pub fn main() {\n         })\n         .collect();\n \n-    let clippy_warnings: Vec<ClippyWarning> = if let Some(only_one_crate) = clap_config.value_of(\"only\") {\n-        // if we don't have the specified crate in the .toml, throw an error\n-        if !crates.iter().any(|krate| {\n-            let name = match krate {\n-                CrateSource::CratesIo { name, .. } | CrateSource::Git { name, .. } | CrateSource::Path { name, .. } => {\n-                    name\n-                },\n-            };\n-            name == only_one_crate\n-        }) {\n-            eprintln!(\n-                \"ERROR: could not find crate '{}' in lintcheck/lintcheck_crates.toml\",\n-                only_one_crate\n-            );\n-            std::process::exit(1);\n-        }\n+    let crates: Vec<Crate> = crates\n+        .into_iter()\n+        .filter(|krate| {\n+            if let Some(only_one_crate) = &config.only {\n+                let name = match krate {\n+                    CrateSource::CratesIo { name, .. }\n+                    | CrateSource::Git { name, .. }\n+                    | CrateSource::Path { name, .. } => name,\n+                };\n \n-        // only check a single crate that was passed via cmdline\n-        crates\n-            .into_iter()\n-            .map(|krate| krate.download_and_extract())\n-            .filter(|krate| krate.name == only_one_crate)\n-            .flat_map(|krate| {\n-                krate.run_clippy_lints(&cargo_clippy_path, &AtomicUsize::new(0), 1, 1, config.fix, &lint_filter)\n-            })\n-            .collect()\n-    } else {\n-        if config.max_jobs > 1 {\n-            // run parallel with rayon\n-\n-            // Ask rayon for thread count. Assume that half of that is the number of physical cores\n-            // Use one target dir for each core so that we can run N clippys in parallel.\n-            // We need to use different target dirs because cargo would lock them for a single build otherwise,\n-            // killing the parallelism. However this also means that deps will only be reused half/a\n-            // quarter of the time which might result in a longer wall clock runtime\n-\n-            // This helps when we check many small crates with dep-trees that don't have a lot of branches in\n-            // order to achieve some kind of parallelism\n-\n-            // by default, use a single thread\n-            let num_cpus = config.max_jobs;\n-            let num_crates = crates.len();\n-\n-            // check all crates (default)\n-            crates\n-                .into_par_iter()\n-                .map(|krate| krate.download_and_extract())\n-                .flat_map(|krate| {\n-                    krate.run_clippy_lints(\n-                        &cargo_clippy_path,\n-                        &counter,\n-                        num_cpus,\n-                        num_crates,\n-                        config.fix,\n-                        &lint_filter,\n-                    )\n-                })\n-                .collect()\n-        } else {\n-            // run sequential\n-            let num_crates = crates.len();\n-            crates\n-                .into_iter()\n-                .map(|krate| krate.download_and_extract())\n-                .flat_map(|krate| {\n-                    krate.run_clippy_lints(&cargo_clippy_path, &counter, 1, num_crates, config.fix, &lint_filter)\n-                })\n-                .collect()\n-        }\n-    };\n+                name == only_one_crate\n+            } else {\n+                true\n+            }\n+        })\n+        .map(|krate| krate.download_and_extract())\n+        .collect();\n+\n+    if crates.is_empty() {\n+        eprintln!(\n+            \"ERROR: could not find crate '{}' in lintcheck/lintcheck_crates.toml\",\n+            config.only.unwrap(),\n+        );\n+        std::process::exit(1);\n+    }\n+\n+    // run parallel with rayon\n+\n+    // This helps when we check many small crates with dep-trees that don't have a lot of branches in\n+    // order to achieve some kind of parallelism\n+\n+    rayon::ThreadPoolBuilder::new()\n+        .num_threads(config.max_jobs)\n+        .build_global()\n+        .unwrap();\n+\n+    let clippy_warnings: Vec<ClippyWarning> = crates\n+        .par_iter()\n+        .flat_map(|krate| krate.run_clippy_lints(&cargo_clippy_path, &counter, crates.len(), &config, &lint_filter))\n+        .collect();\n \n     // if we are in --fix mode, don't change the log files, terminate here\n     if config.fix {\n@@ -837,7 +674,7 @@ pub fn main() {\n         text.push_str(\"| file | lint | message |\\n\");\n         text.push_str(\"| --- | --- | --- |\\n\");\n     }\n-    write!(text, \"{}\", all_msgs.join(\"\"));\n+    write!(text, \"{}\", all_msgs.join(\"\")).unwrap();\n     text.push_str(\"\\n\\n### ICEs:\\n\");\n     for (cratename, msg) in ices.iter() {\n         let _ = write!(text, \"{}: '{}'\", cratename, msg);\n@@ -949,75 +786,10 @@ fn create_dirs(krate_download_dir: &Path, extract_dir: &Path) {\n     });\n }\n \n-fn get_clap_config<'a>() -> ArgMatches<'a> {\n-    App::new(\"lintcheck\")\n-        .about(\"run clippy on a set of crates and check output\")\n-        .arg(\n-            Arg::with_name(\"only\")\n-                .takes_value(true)\n-                .value_name(\"CRATE\")\n-                .long(\"only\")\n-                .help(\"only process a single crate of the list\"),\n-        )\n-        .arg(\n-            Arg::with_name(\"crates-toml\")\n-                .takes_value(true)\n-                .value_name(\"CRATES-SOURCES-TOML-PATH\")\n-                .long(\"crates-toml\")\n-                .help(\"set the path for a crates.toml where lintcheck should read the sources from\"),\n-        )\n-        .arg(\n-            Arg::with_name(\"threads\")\n-                .takes_value(true)\n-                .value_name(\"N\")\n-                .short(\"j\")\n-                .long(\"jobs\")\n-                .help(\"number of threads to use, 0 automatic choice\"),\n-        )\n-        .arg(\n-            Arg::with_name(\"fix\")\n-                .long(\"--fix\")\n-                .help(\"runs cargo clippy --fix and checks if all suggestions apply\"),\n-        )\n-        .arg(\n-            Arg::with_name(\"filter\")\n-                .long(\"--filter\")\n-                .takes_value(true)\n-                .multiple(true)\n-                .value_name(\"clippy_lint_name\")\n-                .help(\"apply a filter to only collect specified lints, this also overrides `allow` attributes\"),\n-        )\n-        .arg(\n-            Arg::with_name(\"markdown\")\n-                .long(\"--markdown\")\n-                .help(\"change the reports table to use markdown links\"),\n-        )\n-        .get_matches()\n-}\n-\n /// Returns the path to the Clippy project directory\n-///\n-/// # Panics\n-///\n-/// Panics if the current directory could not be retrieved, there was an error reading any of the\n-/// Cargo.toml files or ancestor directory is the clippy root directory\n #[must_use]\n-pub fn clippy_project_root() -> PathBuf {\n-    let current_dir = std::env::current_dir().unwrap();\n-    for path in current_dir.ancestors() {\n-        let result = std::fs::read_to_string(path.join(\"Cargo.toml\"));\n-        if let Err(err) = &result {\n-            if err.kind() == std::io::ErrorKind::NotFound {\n-                continue;\n-            }\n-        }\n-\n-        let content = result.unwrap();\n-        if content.contains(\"[package]\\nname = \\\"clippy\\\"\") {\n-            return path.to_path_buf();\n-        }\n-    }\n-    panic!(\"error: Can't determine root of project. Please run inside a Clippy working dir.\");\n+fn clippy_project_root() -> &'static Path {\n+    Path::new(env!(\"CARGO_MANIFEST_DIR\")).parent().unwrap()\n }\n \n #[test]"}, {"sha": "997e7ba9382b2104c1f789de87dbfd5fedb67d8e", "filename": "src/tools/clippy/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Frust-toolchain?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-05-05\"\n+channel = \"nightly-2022-05-19\"\n components = [\"cargo\", \"llvm-tools-preview\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "9ee4a40cbf2424715733eeab4e156055f52932e5", "filename": "src/tools/clippy/src/main.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fmain.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -123,8 +123,12 @@ impl ClippyCmd {\n             .map(|arg| format!(\"{}__CLIPPY_HACKERY__\", arg))\n             .collect();\n \n+        // Currently, `CLIPPY_TERMINAL_WIDTH` is used only to format \"unknown field\" error messages.\n+        let terminal_width = termize::dimensions().map_or(0, |(w, _)| w);\n+\n         cmd.env(\"RUSTC_WORKSPACE_WRAPPER\", Self::path())\n             .env(\"CLIPPY_ARGS\", clippy_args)\n+            .env(\"CLIPPY_TERMINAL_WIDTH\", terminal_width.to_string())\n             .arg(self.cargo_subcommand)\n             .args(&self.args);\n "}, {"sha": "9da80518ce916a9ce0c1575898332dd6b07632f2", "filename": "src/tools/clippy/tests/dogfood.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fdogfood.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fdogfood.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fdogfood.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -21,7 +21,7 @@ fn dogfood_clippy() {\n \n     // \"\" is the root package\n     for package in &[\"\", \"clippy_dev\", \"clippy_lints\", \"clippy_utils\", \"rustc_tools_util\"] {\n-        run_clippy_for_package(package);\n+        run_clippy_for_package(package, &[]);\n     }\n }\n \n@@ -38,7 +38,7 @@ fn run_metadata_collection_lint() {\n \n     // Run collection as is\n     std::env::set_var(\"ENABLE_METADATA_COLLECTION\", \"1\");\n-    run_clippy_for_package(\"clippy_lints\");\n+    run_clippy_for_package(\"clippy_lints\", &[\"-A\", \"unfulfilled_lint_expectations\"]);\n \n     // Check if cargo caching got in the way\n     if let Ok(file) = File::open(metadata_output_path) {\n@@ -61,10 +61,10 @@ fn run_metadata_collection_lint() {\n     .unwrap();\n \n     // Running the collection again\n-    run_clippy_for_package(\"clippy_lints\");\n+    run_clippy_for_package(\"clippy_lints\", &[\"-A\", \"unfulfilled_lint_expectations\"]);\n }\n \n-fn run_clippy_for_package(project: &str) {\n+fn run_clippy_for_package(project: &str, args: &[&str]) {\n     let root_dir = PathBuf::from(env!(\"CARGO_MANIFEST_DIR\"));\n \n     let mut command = Command::new(&*test_utils::CARGO_CLIPPY_PATH);\n@@ -76,6 +76,7 @@ fn run_clippy_for_package(project: &str) {\n         .arg(\"--all-targets\")\n         .arg(\"--all-features\")\n         .arg(\"--\")\n+        .args(args)\n         .args(&[\"-D\", \"clippy::all\"])\n         .args(&[\"-D\", \"clippy::pedantic\"])\n         .arg(\"-Cdebuginfo=0\"); // disable debuginfo to generate less data in the target dir"}, {"sha": "bf3c817de1c4f33a66e0fd1324251f19120aa14e", "filename": "src/tools/clippy/tests/ui-cargo/duplicate_mod/fail/Cargo.toml", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2FCargo.toml?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,5 @@\n+[package]\n+name = \"duplicate_mod\"\n+edition = \"2021\"\n+publish = false\n+version = \"0.1.0\""}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "src/tools/clippy/tests/ui-cargo/duplicate_mod/fail/src/a.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fa.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fa.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fa.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "src/tools/clippy/tests/ui-cargo/duplicate_mod/fail/src/b.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fb.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "src/tools/clippy/tests/ui-cargo/duplicate_mod/fail/src/c.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fc.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "8b137891791fe96927ad78e64b0aad7bded08bdc", "filename": "src/tools/clippy/tests/ui-cargo/duplicate_mod/fail/src/from_other_module.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Ffrom_other_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Ffrom_other_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Ffrom_other_module.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1 @@\n+"}, {"sha": "79b343da24700ef721f458a6f7dfd0ee34738e27", "filename": "src/tools/clippy/tests/ui-cargo/duplicate_mod/fail/src/main.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,16 @@\n+mod a;\n+\n+mod b;\n+#[path = \"b.rs\"]\n+mod b2;\n+\n+mod c;\n+#[path = \"c.rs\"]\n+mod c2;\n+#[path = \"c.rs\"]\n+mod c3;\n+\n+mod from_other_module;\n+mod other_module;\n+\n+fn main() {}"}, {"sha": "00d7739c8a2eaa9ef1c8bf68c7835d8e6091b243", "filename": "src/tools/clippy/tests/ui-cargo/duplicate_mod/fail/src/main.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fmain.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,42 @@\n+error: file is loaded as a module multiple times: `$DIR/b.rs`\n+  --> $DIR/main.rs:3:1\n+   |\n+LL |   mod b;\n+   |   ^^^^^^ first loaded here\n+LL | / #[path = \"b.rs\"]\n+LL | | mod b2;\n+   | |_______^ loaded again here\n+   |\n+   = note: `-D clippy::duplicate-mod` implied by `-D warnings`\n+   = help: replace all but one `mod` item with `use` items\n+\n+error: file is loaded as a module multiple times: `$DIR/c.rs`\n+  --> $DIR/main.rs:7:1\n+   |\n+LL |   mod c;\n+   |   ^^^^^^ first loaded here\n+LL | / #[path = \"c.rs\"]\n+LL | | mod c2;\n+   | |_______^ loaded again here\n+LL | / #[path = \"c.rs\"]\n+LL | | mod c3;\n+   | |_______^ loaded again here\n+   |\n+   = help: replace all but one `mod` item with `use` items\n+\n+error: file is loaded as a module multiple times: `$DIR/from_other_module.rs`\n+  --> $DIR/main.rs:13:1\n+   |\n+LL |   mod from_other_module;\n+   |   ^^^^^^^^^^^^^^^^^^^^^^ first loaded here\n+   |\n+  ::: $DIR/other_module/mod.rs:1:1\n+   |\n+LL | / #[path = \"../from_other_module.rs\"]\n+LL | | mod m;\n+   | |______^ loaded again here\n+   |\n+   = help: replace all but one `mod` item with `use` items\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "36ce7286aded012860e0026c9833efad94869b3b", "filename": "src/tools/clippy/tests/ui-cargo/duplicate_mod/fail/src/other_module/mod.rs", "status": "added", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fother_module%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fother_module%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-cargo%2Fduplicate_mod%2Ffail%2Fsrc%2Fother_module%2Fmod.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,2 @@\n+#[path = \"../from_other_module.rs\"]\n+mod m;"}, {"sha": "6933b8164195a21ef31133fa297065e8b0e18f7f", "filename": "src/tools/clippy/tests/ui-toml/expect_used/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fexpect_used%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fexpect_used%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fexpect_used%2Fclippy.toml?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1 @@\n+allow-expect-in-tests = true"}, {"sha": "22dcd3ae9d697a6b9ef2ac140c560f662350c551", "filename": "src/tools/clippy/tests/ui-toml/expect_used/expect_used.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fexpect_used%2Fexpect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fexpect_used%2Fexpect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fexpect_used%2Fexpect_used.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,29 @@\n+// compile-flags: --test\n+#![warn(clippy::expect_used)]\n+\n+fn expect_option() {\n+    let opt = Some(0);\n+    let _ = opt.expect(\"\");\n+}\n+\n+fn expect_result() {\n+    let res: Result<u8, ()> = Ok(0);\n+    let _ = res.expect(\"\");\n+}\n+\n+fn main() {\n+    expect_option();\n+    expect_result();\n+}\n+\n+#[test]\n+fn test_expect_option() {\n+    let opt = Some(0);\n+    let _ = opt.expect(\"\");\n+}\n+\n+#[test]\n+fn test_expect_result() {\n+    let res: Result<u8, ()> = Ok(0);\n+    let _ = res.expect(\"\");\n+}"}, {"sha": "9cb2199ed21cb0604af19671c66f490b79f50408", "filename": "src/tools/clippy/tests/ui-toml/expect_used/expect_used.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,19 @@\n+error: used `expect()` on `an Option` value\n+  --> $DIR/expect_used.rs:6:13\n+   |\n+LL |     let _ = opt.expect(\"\");\n+   |             ^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::expect-used` implied by `-D warnings`\n+   = help: if this value is an `None`, it will panic\n+\n+error: used `expect()` on `a Result` value\n+  --> $DIR/expect_used.rs:11:13\n+   |\n+LL |     let _ = res.expect(\"\");\n+   |             ^^^^^^^^^^^^^^\n+   |\n+   = help: if this value is an `Err`, it will panic\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "3397fa1ec69278b088ee7adf767b7bca8490e566", "filename": "src/tools/clippy/tests/ui-toml/toml_disallowed_methods/conf_disallowed_methods.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -14,4 +14,10 @@ fn main() {\n \n     let _ = 2.0f32.clamp(3.0f32, 4.0f32);\n     let _ = 2.0f64.clamp(3.0f64, 4.0f64);\n+\n+    let indirect: fn(&str) -> Result<Regex, regex::Error> = Regex::new;\n+    let re = indirect(\".\").unwrap();\n+\n+    let in_call = Box::new(f32::clamp);\n+    let in_method_call = [\"^\", \"$\"].into_iter().map(Regex::new);\n }"}, {"sha": "5cbb567546c085583c8a454eff057902fcfa5bd7", "filename": "src/tools/clippy/tests/ui-toml/toml_disallowed_methods/conf_disallowed_methods.stderr", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_disallowed_methods%2Fconf_disallowed_methods.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -32,5 +32,23 @@ error: use of a disallowed method `f32::clamp`\n LL |     let _ = 2.0f32.clamp(3.0f32, 4.0f32);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 5 previous errors\n+error: use of a disallowed method `regex::Regex::new`\n+  --> $DIR/conf_disallowed_methods.rs:18:61\n+   |\n+LL |     let indirect: fn(&str) -> Result<Regex, regex::Error> = Regex::new;\n+   |                                                             ^^^^^^^^^^\n+\n+error: use of a disallowed method `f32::clamp`\n+  --> $DIR/conf_disallowed_methods.rs:21:28\n+   |\n+LL |     let in_call = Box::new(f32::clamp);\n+   |                            ^^^^^^^^^^\n+\n+error: use of a disallowed method `regex::Regex::new`\n+  --> $DIR/conf_disallowed_methods.rs:22:53\n+   |\n+LL |     let in_method_call = [\"^\", \"$\"].into_iter().map(Regex::new);\n+   |                                                     ^^^^^^^^^^\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "92838aa57dfdaa9e1e93694bee9d17d3c49dd762", "filename": "src/tools/clippy/tests/ui-toml/toml_unknown_key/conf_unknown_key.stderr", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Ftoml_unknown_key%2Fconf_unknown_key.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,4 +1,43 @@\n-error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of `avoid-breaking-exported-api`, `msrv`, `blacklisted-names`, `cognitive-complexity-threshold`, `cyclomatic-complexity-threshold`, `doc-valid-idents`, `too-many-arguments-threshold`, `type-complexity-threshold`, `single-char-binding-names-threshold`, `too-large-for-stack`, `enum-variant-name-threshold`, `enum-variant-size-threshold`, `verbose-bit-mask-threshold`, `literal-representation-threshold`, `trivial-copy-size-limit`, `pass-by-value-size-limit`, `too-many-lines-threshold`, `array-size-threshold`, `vec-box-size-threshold`, `max-trait-bounds`, `max-struct-bools`, `max-fn-params-bools`, `warn-on-all-wildcard-imports`, `disallowed-methods`, `disallowed-types`, `unreadable-literal-lint-fractions`, `upper-case-acronyms-aggressive`, `cargo-ignore-publish`, `standard-macro-braces`, `enforced-import-renames`, `allowed-scripts`, `enable-raw-pointer-heuristic-for-send`, `max-suggested-slice-pattern-length`, `await-holding-invalid-types`, `max-include-file-size`, `third-party` at line 5 column 1\n+error: error reading Clippy's configuration file `$DIR/clippy.toml`: unknown field `foobar`, expected one of\n+           allow-expect-in-tests\n+           allow-unwrap-in-tests\n+           allowed-scripts\n+           array-size-threshold\n+           avoid-breaking-exported-api\n+           await-holding-invalid-types\n+           blacklisted-names\n+           cargo-ignore-publish\n+           cognitive-complexity-threshold\n+           cyclomatic-complexity-threshold\n+           disallowed-methods\n+           disallowed-types\n+           doc-valid-idents\n+           enable-raw-pointer-heuristic-for-send\n+           enforced-import-renames\n+           enum-variant-name-threshold\n+           enum-variant-size-threshold\n+           literal-representation-threshold\n+           max-fn-params-bools\n+           max-include-file-size\n+           max-struct-bools\n+           max-suggested-slice-pattern-length\n+           max-trait-bounds\n+           msrv\n+           pass-by-value-size-limit\n+           single-char-binding-names-threshold\n+           standard-macro-braces\n+           third-party\n+           too-large-for-stack\n+           too-many-arguments-threshold\n+           too-many-lines-threshold\n+           trivial-copy-size-limit\n+           type-complexity-threshold\n+           unreadable-literal-lint-fractions\n+           upper-case-acronyms-aggressive\n+           vec-box-size-threshold\n+           verbose-bit-mask-threshold\n+           warn-on-all-wildcard-imports\n+       at line 5 column 1\n \n error: aborting due to previous error\n "}, {"sha": "154626ef4e81f6aa3e7c271ef613fe017ad658f9", "filename": "src/tools/clippy/tests/ui-toml/unwrap_used/clippy.toml", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Funwrap_used%2Fclippy.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Funwrap_used%2Fclippy.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Funwrap_used%2Fclippy.toml?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1 @@\n+allow-unwrap-in-tests = true"}, {"sha": "74d0d7c2650dd09db2575527b1f8cd4e16510849", "filename": "src/tools/clippy/tests/ui-toml/unwrap_used/unwrap_used.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Funwrap_used%2Funwrap_used.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,73 @@\n+// compile-flags: --test\n+\n+#![allow(unused_mut, clippy::from_iter_instead_of_collect)]\n+#![warn(clippy::unwrap_used)]\n+#![deny(clippy::get_unwrap)]\n+\n+use std::collections::BTreeMap;\n+use std::collections::HashMap;\n+use std::collections::VecDeque;\n+\n+struct GetFalsePositive {\n+    arr: [u32; 3],\n+}\n+\n+impl GetFalsePositive {\n+    fn get(&self, pos: usize) -> Option<&u32> {\n+        self.arr.get(pos)\n+    }\n+    fn get_mut(&mut self, pos: usize) -> Option<&mut u32> {\n+        self.arr.get_mut(pos)\n+    }\n+}\n+\n+fn main() {\n+    let mut boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n+    let mut some_slice = &mut [0, 1, 2, 3];\n+    let mut some_vec = vec![0, 1, 2, 3];\n+    let mut some_vecdeque: VecDeque<_> = some_vec.iter().cloned().collect();\n+    let mut some_hashmap: HashMap<u8, char> = HashMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n+    let mut some_btreemap: BTreeMap<u8, char> = BTreeMap::from_iter(vec![(1, 'a'), (2, 'b')]);\n+    let mut false_positive = GetFalsePositive { arr: [0, 1, 2] };\n+\n+    {\n+        // Test `get().unwrap()`\n+        let _ = boxed_slice.get(1).unwrap();\n+        let _ = some_slice.get(0).unwrap();\n+        let _ = some_vec.get(0).unwrap();\n+        let _ = some_vecdeque.get(0).unwrap();\n+        let _ = some_hashmap.get(&1).unwrap();\n+        let _ = some_btreemap.get(&1).unwrap();\n+        #[allow(clippy::unwrap_used)]\n+        let _ = false_positive.get(0).unwrap();\n+        // Test with deref\n+        let _: u8 = *boxed_slice.get(1).unwrap();\n+    }\n+\n+    {\n+        // Test `get_mut().unwrap()`\n+        *boxed_slice.get_mut(0).unwrap() = 1;\n+        *some_slice.get_mut(0).unwrap() = 1;\n+        *some_vec.get_mut(0).unwrap() = 1;\n+        *some_vecdeque.get_mut(0).unwrap() = 1;\n+        // Check false positives\n+        #[allow(clippy::unwrap_used)]\n+        {\n+            *some_hashmap.get_mut(&1).unwrap() = 'b';\n+            *some_btreemap.get_mut(&1).unwrap() = 'b';\n+            *false_positive.get_mut(0).unwrap() = 1;\n+        }\n+    }\n+\n+    {\n+        // Test `get().unwrap().foo()` and `get_mut().unwrap().bar()`\n+        let _ = some_vec.get(0..1).unwrap().to_vec();\n+        let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n+    }\n+}\n+\n+#[test]\n+fn test() {\n+    let boxed_slice: Box<[u8]> = Box::new([0, 1, 2, 3]);\n+    let _ = boxed_slice.get(1).unwrap();\n+}"}, {"sha": "6bcfa0a8b5647ba21ff6a47d40097752317970f8", "filename": "src/tools/clippy/tests/ui-toml/unwrap_used/unwrap_used.stderr", "status": "added", "additions": 197, "deletions": 0, "changes": 197, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Funwrap_used%2Funwrap_used.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,197 @@\n+error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+  --> $DIR/unwrap_used.rs:35:17\n+   |\n+LL |         let _ = boxed_slice.get(1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/unwrap_used.rs:5:9\n+   |\n+LL | #![deny(clippy::get_unwrap)]\n+   |         ^^^^^^^^^^^^^^^^^^\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/unwrap_used.rs:35:17\n+   |\n+LL |         let _ = boxed_slice.get(1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unwrap-used` implied by `-D warnings`\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+  --> $DIR/unwrap_used.rs:36:17\n+   |\n+LL |         let _ = some_slice.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/unwrap_used.rs:36:17\n+   |\n+LL |         let _ = some_slice.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+  --> $DIR/unwrap_used.rs:37:17\n+   |\n+LL |         let _ = some_vec.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/unwrap_used.rs:37:17\n+   |\n+LL |         let _ = some_vec.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n+  --> $DIR/unwrap_used.rs:38:17\n+   |\n+LL |         let _ = some_vecdeque.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/unwrap_used.rs:38:17\n+   |\n+LL |         let _ = some_vecdeque.get(0).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n+  --> $DIR/unwrap_used.rs:39:17\n+   |\n+LL |         let _ = some_hashmap.get(&1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/unwrap_used.rs:39:17\n+   |\n+LL |         let _ = some_hashmap.get(&1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n+  --> $DIR/unwrap_used.rs:40:17\n+   |\n+LL |         let _ = some_btreemap.get(&1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/unwrap_used.rs:40:17\n+   |\n+LL |         let _ = some_btreemap.get(&1).unwrap();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+  --> $DIR/unwrap_used.rs:44:21\n+   |\n+LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[1]`\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/unwrap_used.rs:44:22\n+   |\n+LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n+  --> $DIR/unwrap_used.rs:49:9\n+   |\n+LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[0]`\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/unwrap_used.rs:49:10\n+   |\n+LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n+  --> $DIR/unwrap_used.rs:50:9\n+   |\n+LL |         *some_slice.get_mut(0).unwrap() = 1;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_slice[0]`\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/unwrap_used.rs:50:10\n+   |\n+LL |         *some_slice.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+  --> $DIR/unwrap_used.rs:51:9\n+   |\n+LL |         *some_vec.get_mut(0).unwrap() = 1;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0]`\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/unwrap_used.rs:51:10\n+   |\n+LL |         *some_vec.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n+  --> $DIR/unwrap_used.rs:52:9\n+   |\n+LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vecdeque[0]`\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/unwrap_used.rs:52:10\n+   |\n+LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+  --> $DIR/unwrap_used.rs:64:17\n+   |\n+LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/unwrap_used.rs:64:17\n+   |\n+LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n+  --> $DIR/unwrap_used.rs:65:17\n+   |\n+LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n+\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/unwrap_used.rs:65:17\n+   |\n+LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n+\n+error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n+  --> $DIR/unwrap_used.rs:72:13\n+   |\n+LL |     let _ = boxed_slice.get(1).unwrap();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n+\n+error: aborting due to 27 previous errors\n+"}, {"sha": "f682b280c1b804c4ee1660255cd050094f37cc3f", "filename": "src/tools/clippy/tests/ui/absurd-extreme-comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fabsurd-extreme-comparisons.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -37,7 +37,7 @@ fn main() {\n \n use std::cmp::{Ordering, PartialEq, PartialOrd};\n \n-#[derive(PartialEq, PartialOrd)]\n+#[derive(PartialEq, Eq, PartialOrd)]\n pub struct U(u64);\n \n impl PartialEq<u32> for U {"}, {"sha": "f6d3a8fa3f0d71168ad939ae72a76329f601290a", "filename": "src/tools/clippy/tests/ui/assign_ops2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassign_ops2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassign_ops2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fassign_ops2.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -24,7 +24,7 @@ fn main() {\n \n use std::ops::{Mul, MulAssign};\n \n-#[derive(Copy, Clone, Debug, PartialEq)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct Wrap(i64);\n \n impl Mul<i64> for Wrap {"}, {"sha": "a2ef0fe827c018844b16e213c759996c61b05e57", "filename": "src/tools/clippy/tests/ui/auxiliary/proc_macro_suspicious_else_formatting.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fproc_macro_suspicious_else_formatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fproc_macro_suspicious_else_formatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fauxiliary%2Fproc_macro_suspicious_else_formatting.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -5,7 +5,6 @@\n \n extern crate proc_macro;\n use proc_macro::{token_stream, Delimiter, Group, Ident, Span, TokenStream, TokenTree};\n-use std::iter::FromIterator;\n \n fn read_ident(iter: &mut token_stream::IntoIter) -> Ident {\n     match iter.next() {"}, {"sha": "27df732a08802f283fa08ebd04c1564d142c787b", "filename": "src/tools/clippy/tests/ui/blacklisted_name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fblacklisted_name.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -46,10 +46,10 @@ fn issue_1647_ref_mut() {\n \n mod tests {\n     fn issue_7305() {\n-        // `blackisted_name` lint should not be triggered inside of the test code.\n+        // `blacklisted_name` lint should not be triggered inside of the test code.\n         let foo = 0;\n \n-        // Check that even in nested functions warning is still not triggere.\n+        // Check that even in nested functions warning is still not triggered.\n         fn nested() {\n             let foo = 0;\n         }"}, {"sha": "bdeb0a39558dbda4a62664a8f4175d4283332a88", "filename": "src/tools/clippy/tests/ui/branches_sharing_code/shared_at_top.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Fshared_at_top.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,4 +1,4 @@\n-#![allow(dead_code, clippy::eval_order_dependence)]\n+#![allow(dead_code, clippy::mixed_read_write_in_expression)]\n #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n \n // This tests the branches_sharing_code lint at the start of blocks"}, {"sha": "a26141be23733b86c444d0bef0435e8330e01ac6", "filename": "src/tools/clippy/tests/ui/branches_sharing_code/valid_if_blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbranches_sharing_code%2Fvalid_if_blocks.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,4 +1,4 @@\n-#![allow(dead_code, clippy::eval_order_dependence)]\n+#![allow(dead_code, clippy::mixed_read_write_in_expression)]\n #![deny(clippy::if_same_then_else, clippy::branches_sharing_code)]\n \n // This tests valid if blocks that shouldn't trigger the lint"}, {"sha": "7125f741c150e764ba59141368aba6e6b3d303e0", "filename": "src/tools/clippy/tests/ui/cast_size_32bit.stderr", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_size_32bit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_size_32bit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcast_size_32bit.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -14,26 +14,12 @@ LL |     x0 as f64;\n    |\n    = note: `-D clippy::cast-precision-loss` implied by `-D warnings`\n \n-error: casting `isize` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_size_32bit.rs:15:5\n-   |\n-LL |     x0 as f64;\n-   |     ^^^^^^^^^ help: try: `f64::from(x0)`\n-   |\n-   = note: `-D clippy::cast-lossless` implied by `-D warnings`\n-\n error: casting `usize` to `f64` causes a loss of precision on targets with 64-bit wide pointers (`usize` is 64 bits wide, but `f64`'s mantissa is only 52 bits wide)\n   --> $DIR/cast_size_32bit.rs:16:5\n    |\n LL |     x1 as f64;\n    |     ^^^^^^^^^\n \n-error: casting `usize` to `f64` may become silently lossy if you later change the type\n-  --> $DIR/cast_size_32bit.rs:16:5\n-   |\n-LL |     x1 as f64;\n-   |     ^^^^^^^^^ help: try: `f64::from(x1)`\n-\n error: casting `isize` to `f32` causes a loss of precision (`isize` is 32 or 64 bits wide, but `f32`'s mantissa is only 23 bits wide)\n   --> $DIR/cast_size_32bit.rs:17:5\n    |"}, {"sha": "0983d393b560ef587a8b2885a947d3ae13487bae", "filename": "src/tools/clippy/tests/ui/checked_conversions.fixed", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fchecked_conversions.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fchecked_conversions.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fchecked_conversions.fixed?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -7,8 +7,6 @@\n )]\n #![warn(clippy::checked_conversions)]\n \n-use std::convert::TryFrom;\n-\n // Positive tests\n \n // Signed to unsigned"}, {"sha": "7d26ace47fdf559e47ca170069dddd4375f0f5c1", "filename": "src/tools/clippy/tests/ui/checked_conversions.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fchecked_conversions.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -7,8 +7,6 @@\n )]\n #![warn(clippy::checked_conversions)]\n \n-use std::convert::TryFrom;\n-\n // Positive tests\n \n // Signed to unsigned"}, {"sha": "2e518040561c4abd16c2875416b4567360664461", "filename": "src/tools/clippy/tests/ui/checked_conversions.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fchecked_conversions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fchecked_conversions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fchecked_conversions.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,97 +1,97 @@\n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:17:13\n+  --> $DIR/checked_conversions.rs:15:13\n    |\n LL |     let _ = value <= (u32::max_value() as i64) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::try_from(value).is_ok()`\n    |\n    = note: `-D clippy::checked-conversions` implied by `-D warnings`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:18:13\n+  --> $DIR/checked_conversions.rs:16:13\n    |\n LL |     let _ = value <= (u32::MAX as i64) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:22:13\n+  --> $DIR/checked_conversions.rs:20:13\n    |\n LL |     let _ = value <= i64::from(u16::max_value()) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:23:13\n+  --> $DIR/checked_conversions.rs:21:13\n    |\n LL |     let _ = value <= i64::from(u16::MAX) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:27:13\n+  --> $DIR/checked_conversions.rs:25:13\n    |\n LL |     let _ = value <= (u8::max_value() as isize) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u8::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:28:13\n+  --> $DIR/checked_conversions.rs:26:13\n    |\n LL |     let _ = value <= (u8::MAX as isize) && value >= 0;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u8::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:34:13\n+  --> $DIR/checked_conversions.rs:32:13\n    |\n LL |     let _ = value <= (i32::max_value() as i64) && value >= (i32::min_value() as i64);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:35:13\n+  --> $DIR/checked_conversions.rs:33:13\n    |\n LL |     let _ = value <= (i32::MAX as i64) && value >= (i32::MIN as i64);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:39:13\n+  --> $DIR/checked_conversions.rs:37:13\n    |\n LL |     let _ = value <= i64::from(i16::max_value()) && value >= i64::from(i16::min_value());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:40:13\n+  --> $DIR/checked_conversions.rs:38:13\n    |\n LL |     let _ = value <= i64::from(i16::MAX) && value >= i64::from(i16::MIN);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:46:13\n+  --> $DIR/checked_conversions.rs:44:13\n    |\n LL |     let _ = value <= i32::max_value() as u32;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:47:13\n+  --> $DIR/checked_conversions.rs:45:13\n    |\n LL |     let _ = value <= i32::MAX as u32;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:51:13\n+  --> $DIR/checked_conversions.rs:49:13\n    |\n LL |     let _ = value <= isize::max_value() as usize && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `isize::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:52:13\n+  --> $DIR/checked_conversions.rs:50:13\n    |\n LL |     let _ = value <= isize::MAX as usize && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `isize::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:56:13\n+  --> $DIR/checked_conversions.rs:54:13\n    |\n LL |     let _ = value <= u16::max_value() as u32 && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`\n \n error: checked cast can be simplified\n-  --> $DIR/checked_conversions.rs:57:13\n+  --> $DIR/checked_conversions.rs:55:13\n    |\n LL |     let _ = value <= u16::MAX as u32 && value as i32 == 5;\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u16::try_from(value).is_ok()`"}, {"sha": "abd059c2308012426364e7f87015e1cad3460d8c", "filename": "src/tools/clippy/tests/ui/cmp_owned/asymmetric_partial_eq.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.fixed?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, clippy::redundant_clone)] // See #5700\n+#![allow(unused, clippy::redundant_clone, clippy::derive_partial_eq_without_eq)] // See #5700\n \n // Define the types in each module to avoid trait impls leaking between modules.\n macro_rules! impl_types {"}, {"sha": "020ef5f840bd52add76fb847d98b2c62ea5bd38a", "filename": "src/tools/clippy/tests/ui/cmp_owned/asymmetric_partial_eq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fasymmetric_partial_eq.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![allow(unused, clippy::redundant_clone)] // See #5700\n+#![allow(unused, clippy::redundant_clone, clippy::derive_partial_eq_without_eq)] // See #5700\n \n // Define the types in each module to avoid trait impls leaking between modules.\n macro_rules! impl_types {"}, {"sha": "b28c4378e33c642289cd054be4f1be856d9fbad2", "filename": "src/tools/clippy/tests/ui/cmp_owned/with_suggestion.fixed", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fwith_suggestion.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fwith_suggestion.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fwith_suggestion.fixed?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -45,7 +45,7 @@ impl ToOwned for Foo {\n     }\n }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Eq)]\n struct Bar;\n \n impl PartialEq<Foo> for Bar {\n@@ -61,7 +61,7 @@ impl std::borrow::Borrow<Foo> for Bar {\n     }\n }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Eq)]\n struct Baz;\n \n impl ToOwned for Baz {"}, {"sha": "c1089010fe109fb351a176ee542f89dfe4985441", "filename": "src/tools/clippy/tests/ui/cmp_owned/with_suggestion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fwith_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fwith_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fwith_suggestion.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -45,7 +45,7 @@ impl ToOwned for Foo {\n     }\n }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Eq)]\n struct Bar;\n \n impl PartialEq<Foo> for Bar {\n@@ -61,7 +61,7 @@ impl std::borrow::Borrow<Foo> for Bar {\n     }\n }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Eq)]\n struct Baz;\n \n impl ToOwned for Baz {"}, {"sha": "d8a202cb6a1c6ba37e4fa0e459caf7a91eb3b7cf", "filename": "src/tools/clippy/tests/ui/cmp_owned/without_suggestion.rs", "status": "modified", "additions": 24, "deletions": 2, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fwithout_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fwithout_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fwithout_suggestion.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -9,6 +9,10 @@ fn main() {\n     let x = &&Baz;\n     let y = &Baz;\n     y.to_owned() == **x;\n+\n+    let x = 0u32;\n+    let y = U32Wrapper(x);\n+    let _ = U32Wrapper::from(x) == y;\n }\n \n struct Foo;\n@@ -26,7 +30,7 @@ impl ToOwned for Foo {\n     }\n }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Eq)]\n struct Baz;\n \n impl ToOwned for Baz {\n@@ -36,7 +40,7 @@ impl ToOwned for Baz {\n     }\n }\n \n-#[derive(PartialEq)]\n+#[derive(PartialEq, Eq)]\n struct Bar;\n \n impl PartialEq<Foo> for Bar {\n@@ -51,3 +55,21 @@ impl std::borrow::Borrow<Foo> for Bar {\n         &FOO\n     }\n }\n+\n+#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord)]\n+struct U32Wrapper(u32);\n+impl From<u32> for U32Wrapper {\n+    fn from(x: u32) -> Self {\n+        Self(x)\n+    }\n+}\n+impl PartialEq<u32> for U32Wrapper {\n+    fn eq(&self, other: &u32) -> bool {\n+        self.0 == *other\n+    }\n+}\n+impl PartialEq<U32Wrapper> for u32 {\n+    fn eq(&self, other: &U32Wrapper) -> bool {\n+        *self == other.0\n+    }\n+}"}, {"sha": "d2dd14d8edbb8120561875ddaec7054f6534b1ff", "filename": "src/tools/clippy/tests/ui/cmp_owned/without_suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fwithout_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fwithout_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcmp_owned%2Fwithout_suggestion.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -13,7 +13,7 @@ LL |     y.to_owned() == **x;\n    |     ^^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating\n \n error: this creates an owned instance just for comparison\n-  --> $DIR/without_suggestion.rs:18:9\n+  --> $DIR/without_suggestion.rs:22:9\n    |\n LL |         self.to_owned() == *other\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ try implementing the comparison without allocating"}, {"sha": "5ff2af7cd82531f6c91c8117dd6e49d6a97fa0fd", "filename": "src/tools/clippy/tests/ui/crashes/auxiliary/proc_macro_crash.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fauxiliary%2Fproc_macro_crash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fauxiliary%2Fproc_macro_crash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fauxiliary%2Fproc_macro_crash.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -12,7 +12,6 @@\n extern crate proc_macro;\n \n use proc_macro::{Delimiter, Group, Ident, Span, TokenStream, TokenTree};\n-use std::iter::FromIterator;\n \n #[proc_macro]\n pub fn macro_test(input_stream: TokenStream) -> TokenStream {"}, {"sha": "a2a60a169153400d9a439745024f47ddc768a762", "filename": "src/tools/clippy/tests/ui/crashes/ice-6254.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6254.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -2,6 +2,7 @@\n // panicked at 'assertion failed: rows.iter().all(|r| r.len() == v.len())',\n // compiler/rustc_mir_build/src/thir/pattern/_match.rs:2030:5\n \n+#[allow(clippy::derive_partial_eq_without_eq)]\n #[derive(PartialEq)]\n struct Foo(i32);\n const FOO_REF_REF: &&Foo = &&Foo(42);"}, {"sha": "f37ab2e9b0c795987c0d00fb44d0827d52ced2cd", "filename": "src/tools/clippy/tests/ui/crashes/ice-6254.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6254.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,5 +1,5 @@\n error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/ice-6254.rs:12:9\n+  --> $DIR/ice-6254.rs:13:9\n    |\n LL |         FOO_REF_REF => {},\n    |         ^^^^^^^^^^^"}, {"sha": "fb87b79aeed87b24f4b50b0bfbec67d471292aaa", "filename": "src/tools/clippy/tests/ui/crashes/ice-8821.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-8821.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-8821.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-8821.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,8 @@\n+#![warn(clippy::let_unit_value)]\n+\n+fn f() {}\n+static FN: fn() = f;\n+\n+fn main() {\n+    let _: () = FN();\n+}"}, {"sha": "486096e0a06dd88fafc97877c30393c4d3199fa4", "filename": "src/tools/clippy/tests/ui/crashes/ice-8821.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-8821.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-8821.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-8821.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,10 @@\n+error: this let-binding has unit value\n+  --> $DIR/ice-8821.rs:7:5\n+   |\n+LL |     let _: () = FN();\n+   |     ^^^^^^^^^^^^^^^^^ help: omit the `let` binding: `FN();`\n+   |\n+   = note: `-D clippy::let-unit-value` implied by `-D warnings`\n+\n+error: aborting due to previous error\n+"}, {"sha": "25294e8c766f8b3a0ac22fd33fd4366a15b08615", "filename": "src/tools/clippy/tests/ui/dbg_macro.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdbg_macro.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -46,3 +46,15 @@ mod issue7274 {\n pub fn issue8481() {\n     dbg!(1);\n }\n+\n+#[cfg(test)]\n+fn foo2() {\n+    dbg!(1);\n+}\n+\n+#[cfg(test)]\n+mod mod1 {\n+    fn func() {\n+        dbg!(1);\n+    }\n+}"}, {"sha": "813ddc5664642733f1a786a8a0bde0497dd19573", "filename": "src/tools/clippy/tests/ui/derive_hash_xor_eq.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_hash_xor_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_hash_xor_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_hash_xor_eq.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,3 +1,5 @@\n+#![allow(clippy::derive_partial_eq_without_eq)]\n+\n #[derive(PartialEq, Hash)]\n struct Foo;\n "}, {"sha": "e5184bd1407c0417e655d12f3668157c2f699bb2", "filename": "src/tools/clippy/tests/ui/derive_hash_xor_eq.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_hash_xor_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_hash_xor_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_hash_xor_eq.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,12 +1,12 @@\n error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n-  --> $DIR/derive_hash_xor_eq.rs:10:10\n+  --> $DIR/derive_hash_xor_eq.rs:12:10\n    |\n LL | #[derive(Hash)]\n    |          ^^^^\n    |\n    = note: `#[deny(clippy::derive_hash_xor_eq)]` on by default\n note: `PartialEq` implemented here\n-  --> $DIR/derive_hash_xor_eq.rs:13:1\n+  --> $DIR/derive_hash_xor_eq.rs:15:1\n    |\n LL | / impl PartialEq for Bar {\n LL | |     fn eq(&self, _: &Bar) -> bool {\n@@ -17,13 +17,13 @@ LL | | }\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n-  --> $DIR/derive_hash_xor_eq.rs:19:10\n+  --> $DIR/derive_hash_xor_eq.rs:21:10\n    |\n LL | #[derive(Hash)]\n    |          ^^^^\n    |\n note: `PartialEq` implemented here\n-  --> $DIR/derive_hash_xor_eq.rs:22:1\n+  --> $DIR/derive_hash_xor_eq.rs:24:1\n    |\n LL | / impl PartialEq<Baz> for Baz {\n LL | |     fn eq(&self, _: &Baz) -> bool {\n@@ -34,30 +34,30 @@ LL | | }\n    = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Hash` explicitly but have derived `PartialEq`\n-  --> $DIR/derive_hash_xor_eq.rs:31:1\n+  --> $DIR/derive_hash_xor_eq.rs:33:1\n    |\n LL | / impl std::hash::Hash for Bah {\n LL | |     fn hash<H: std::hash::Hasher>(&self, _: &mut H) {}\n LL | | }\n    | |_^\n    |\n note: `PartialEq` implemented here\n-  --> $DIR/derive_hash_xor_eq.rs:28:10\n+  --> $DIR/derive_hash_xor_eq.rs:30:10\n    |\n LL | #[derive(PartialEq)]\n    |          ^^^^^^^^^\n    = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: you are implementing `Hash` explicitly but have derived `PartialEq`\n-  --> $DIR/derive_hash_xor_eq.rs:49:5\n+  --> $DIR/derive_hash_xor_eq.rs:51:5\n    |\n LL | /     impl Hash for Foo3 {\n LL | |         fn hash<H: std::hash::Hasher>(&self, _: &mut H) {}\n LL | |     }\n    | |_____^\n    |\n note: `PartialEq` implemented here\n-  --> $DIR/derive_hash_xor_eq.rs:46:14\n+  --> $DIR/derive_hash_xor_eq.rs:48:14\n    |\n LL |     #[derive(PartialEq)]\n    |              ^^^^^^^^^"}, {"sha": "7d4d1b3b64906b4fdc64bcea3c44fef0b44c4a46", "filename": "src/tools/clippy/tests/ui/derive_partial_eq_without_eq.fixed", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_partial_eq_without_eq.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_partial_eq_without_eq.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_partial_eq_without_eq.fixed?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,98 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::derive_partial_eq_without_eq)]\n+\n+// Don't warn on structs that aren't PartialEq\n+struct NotPartialEq {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+// Eq can be derived but is missing\n+#[derive(Debug, PartialEq, Eq)]\n+struct MissingEq {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+// Eq is derived\n+#[derive(PartialEq, Eq)]\n+struct NotMissingEq {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+// Eq is manually implemented\n+#[derive(PartialEq)]\n+struct ManualEqImpl {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+impl Eq for ManualEqImpl {}\n+\n+// Cannot be Eq because f32 isn't Eq\n+#[derive(PartialEq)]\n+struct CannotBeEq {\n+    foo: u32,\n+    bar: f32,\n+}\n+\n+// Don't warn if PartialEq is manually implemented\n+struct ManualPartialEqImpl {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+impl PartialEq for ManualPartialEqImpl {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.foo == other.foo && self.bar == other.bar\n+    }\n+}\n+\n+// Generic fields should be properly checked for Eq-ness\n+#[derive(PartialEq)]\n+struct GenericNotEq<T: Eq, U: PartialEq> {\n+    foo: T,\n+    bar: U,\n+}\n+\n+#[derive(PartialEq, Eq)]\n+struct GenericEq<T: Eq, U: Eq> {\n+    foo: T,\n+    bar: U,\n+}\n+\n+#[derive(PartialEq, Eq)]\n+struct TupleStruct(u32);\n+\n+#[derive(PartialEq, Eq)]\n+struct GenericTupleStruct<T: Eq>(T);\n+\n+#[derive(PartialEq)]\n+struct TupleStructNotEq(f32);\n+\n+#[derive(PartialEq, Eq)]\n+enum Enum {\n+    Foo(u32),\n+    Bar { a: String, b: () },\n+}\n+\n+#[derive(PartialEq, Eq)]\n+enum GenericEnum<T: Eq, U: Eq, V: Eq> {\n+    Foo(T),\n+    Bar { a: U, b: V },\n+}\n+\n+#[derive(PartialEq)]\n+enum EnumNotEq {\n+    Foo(u32),\n+    Bar { a: String, b: f32 },\n+}\n+\n+// Ensure that rustfix works properly when `PartialEq` has other derives on either side\n+#[derive(Debug, PartialEq, Eq, Clone)]\n+struct RustFixWithOtherDerives;\n+\n+fn main() {}"}, {"sha": "ab4e1df1ca4084f2c94d491ed6edd012d989b162", "filename": "src/tools/clippy/tests/ui/derive_partial_eq_without_eq.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_partial_eq_without_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_partial_eq_without_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_partial_eq_without_eq.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,98 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::derive_partial_eq_without_eq)]\n+\n+// Don't warn on structs that aren't PartialEq\n+struct NotPartialEq {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+// Eq can be derived but is missing\n+#[derive(Debug, PartialEq)]\n+struct MissingEq {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+// Eq is derived\n+#[derive(PartialEq, Eq)]\n+struct NotMissingEq {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+// Eq is manually implemented\n+#[derive(PartialEq)]\n+struct ManualEqImpl {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+impl Eq for ManualEqImpl {}\n+\n+// Cannot be Eq because f32 isn't Eq\n+#[derive(PartialEq)]\n+struct CannotBeEq {\n+    foo: u32,\n+    bar: f32,\n+}\n+\n+// Don't warn if PartialEq is manually implemented\n+struct ManualPartialEqImpl {\n+    foo: u32,\n+    bar: String,\n+}\n+\n+impl PartialEq for ManualPartialEqImpl {\n+    fn eq(&self, other: &Self) -> bool {\n+        self.foo == other.foo && self.bar == other.bar\n+    }\n+}\n+\n+// Generic fields should be properly checked for Eq-ness\n+#[derive(PartialEq)]\n+struct GenericNotEq<T: Eq, U: PartialEq> {\n+    foo: T,\n+    bar: U,\n+}\n+\n+#[derive(PartialEq)]\n+struct GenericEq<T: Eq, U: Eq> {\n+    foo: T,\n+    bar: U,\n+}\n+\n+#[derive(PartialEq)]\n+struct TupleStruct(u32);\n+\n+#[derive(PartialEq)]\n+struct GenericTupleStruct<T: Eq>(T);\n+\n+#[derive(PartialEq)]\n+struct TupleStructNotEq(f32);\n+\n+#[derive(PartialEq)]\n+enum Enum {\n+    Foo(u32),\n+    Bar { a: String, b: () },\n+}\n+\n+#[derive(PartialEq)]\n+enum GenericEnum<T: Eq, U: Eq, V: Eq> {\n+    Foo(T),\n+    Bar { a: U, b: V },\n+}\n+\n+#[derive(PartialEq)]\n+enum EnumNotEq {\n+    Foo(u32),\n+    Bar { a: String, b: f32 },\n+}\n+\n+// Ensure that rustfix works properly when `PartialEq` has other derives on either side\n+#[derive(Debug, PartialEq, Clone)]\n+struct RustFixWithOtherDerives;\n+\n+fn main() {}"}, {"sha": "bf55165890a5a14a36d91a9e26dcde5f2d9b1cf2", "filename": "src/tools/clippy/tests/ui/derive_partial_eq_without_eq.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_partial_eq_without_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_partial_eq_without_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_partial_eq_without_eq.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,46 @@\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:13:17\n+   |\n+LL | #[derive(Debug, PartialEq)]\n+   |                 ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+   |\n+   = note: `-D clippy::derive-partial-eq-without-eq` implied by `-D warnings`\n+\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:61:10\n+   |\n+LL | #[derive(PartialEq)]\n+   |          ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:67:10\n+   |\n+LL | #[derive(PartialEq)]\n+   |          ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:70:10\n+   |\n+LL | #[derive(PartialEq)]\n+   |          ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:76:10\n+   |\n+LL | #[derive(PartialEq)]\n+   |          ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:82:10\n+   |\n+LL | #[derive(PartialEq)]\n+   |          ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: you are deriving `PartialEq` and can implement `Eq`\n+  --> $DIR/derive_partial_eq_without_eq.rs:95:17\n+   |\n+LL | #[derive(Debug, PartialEq, Clone)]\n+   |                 ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "47bf25e409bd26e9a0ebc7f66da008474a2552a9", "filename": "src/tools/clippy/tests/ui/equatable_if_let.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fequatable_if_let.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fequatable_if_let.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fequatable_if_let.fixed?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_variables, dead_code)]\n+#![allow(unused_variables, dead_code, clippy::derive_partial_eq_without_eq)]\n #![warn(clippy::equatable_if_let)]\n \n use std::cmp::Ordering;"}, {"sha": "d498bca2455bd971afc750e34b5b90f0202301c7", "filename": "src/tools/clippy/tests/ui/equatable_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fequatable_if_let.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![allow(unused_variables, dead_code)]\n+#![allow(unused_variables, dead_code, clippy::derive_partial_eq_without_eq)]\n #![warn(clippy::equatable_if_let)]\n \n use std::cmp::Ordering;"}, {"sha": "403c3b3e44380ef3a971ab36504d48b2bd0537bb", "filename": "src/tools/clippy/tests/ui/from_iter_instead_of_collect.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_iter_instead_of_collect.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_iter_instead_of_collect.fixed?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -4,7 +4,6 @@\n #![allow(unused_imports)]\n \n use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n-use std::iter::FromIterator;\n \n struct Foo(Vec<bool>);\n "}, {"sha": "fefc7b01a65bbaebf786046d5406f99d414d500c", "filename": "src/tools/clippy/tests/ui/from_iter_instead_of_collect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_iter_instead_of_collect.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -4,7 +4,6 @@\n #![allow(unused_imports)]\n \n use std::collections::{BTreeMap, BTreeSet, HashMap, VecDeque};\n-use std::iter::FromIterator;\n \n struct Foo(Vec<bool>);\n "}, {"sha": "8aa3c3c01f818948c3956f1ea549a13368ae53d5", "filename": "src/tools/clippy/tests/ui/from_iter_instead_of_collect.stderr", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_iter_instead_of_collect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_iter_instead_of_collect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffrom_iter_instead_of_collect.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,91 +1,91 @@\n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:19:9\n+  --> $DIR/from_iter_instead_of_collect.rs:18:9\n    |\n LL |         <Self as FromIterator<bool>>::from_iter(iter.into_iter().copied())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `iter.into_iter().copied().collect::<Self>()`\n    |\n    = note: `-D clippy::from-iter-instead-of-collect` implied by `-D warnings`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:25:13\n+  --> $DIR/from_iter_instead_of_collect.rs:24:13\n    |\n LL |     let _ = Vec::from_iter(iter_expr);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `iter_expr.collect::<Vec<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:27:13\n+  --> $DIR/from_iter_instead_of_collect.rs:26:13\n    |\n LL |     let _ = HashMap::<usize, &i8>::from_iter(vec![5, 5, 5, 5].iter().enumerate());\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `vec![5, 5, 5, 5].iter().enumerate().collect::<HashMap<usize, &i8>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:32:19\n+  --> $DIR/from_iter_instead_of_collect.rs:31:19\n    |\n LL |     assert_eq!(a, Vec::from_iter(0..3));\n    |                   ^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<Vec<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:33:19\n+  --> $DIR/from_iter_instead_of_collect.rs:32:19\n    |\n LL |     assert_eq!(a, Vec::<i32>::from_iter(0..3));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<Vec<i32>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:35:17\n+  --> $DIR/from_iter_instead_of_collect.rs:34:17\n    |\n LL |     let mut b = VecDeque::from_iter(0..3);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<VecDeque<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:38:17\n+  --> $DIR/from_iter_instead_of_collect.rs:37:17\n    |\n LL |     let mut b = VecDeque::<i32>::from_iter(0..3);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<VecDeque<i32>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:43:21\n+  --> $DIR/from_iter_instead_of_collect.rs:42:21\n    |\n LL |         let mut b = collections::VecDeque::<i32>::from_iter(0..3);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::VecDeque<i32>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:48:14\n+  --> $DIR/from_iter_instead_of_collect.rs:47:14\n    |\n LL |     let bm = BTreeMap::from_iter(values.iter().cloned());\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `values.iter().cloned().collect::<BTreeMap<_, _>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:49:19\n+  --> $DIR/from_iter_instead_of_collect.rs:48:19\n    |\n LL |     let mut bar = BTreeMap::from_iter(bm.range(0..2));\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `bm.range(0..2).collect::<BTreeMap<_, _>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:52:19\n+  --> $DIR/from_iter_instead_of_collect.rs:51:19\n    |\n LL |     let mut bts = BTreeSet::from_iter(0..3);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<BTreeSet<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:56:17\n+  --> $DIR/from_iter_instead_of_collect.rs:55:17\n    |\n LL |         let _ = collections::BTreeSet::from_iter(0..3);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::BTreeSet<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:57:17\n+  --> $DIR/from_iter_instead_of_collect.rs:56:17\n    |\n LL |         let _ = collections::BTreeSet::<u32>::from_iter(0..3);\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `(0..3).collect::<collections::BTreeSet<u32>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:60:15\n+  --> $DIR/from_iter_instead_of_collect.rs:59:15\n    |\n LL |     for _i in Vec::from_iter([1, 2, 3].iter()) {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `[1, 2, 3].iter().collect::<Vec<_>>()`\n \n error: usage of `FromIterator::from_iter`\n-  --> $DIR/from_iter_instead_of_collect.rs:61:15\n+  --> $DIR/from_iter_instead_of_collect.rs:60:15\n    |\n LL |     for _i in Vec::<&i32>::from_iter([1, 2, 3].iter()) {}\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `.collect()` instead of `::from_iter()`: `[1, 2, 3].iter().collect::<Vec<&i32>>()`"}, {"sha": "8f165d675890ca9fc9cd4f9edabdef8c83d2f0da", "filename": "src/tools/clippy/tests/ui/get_unwrap.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_unwrap.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_unwrap.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_unwrap.fixed?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -7,7 +7,6 @@\n use std::collections::BTreeMap;\n use std::collections::HashMap;\n use std::collections::VecDeque;\n-use std::iter::FromIterator;\n \n struct GetFalsePositive {\n     arr: [u32; 3],"}, {"sha": "786749daa746e802a228c5cf1165ee544ce1fc20", "filename": "src/tools/clippy/tests/ui/get_unwrap.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_unwrap.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -7,7 +7,6 @@\n use std::collections::BTreeMap;\n use std::collections::HashMap;\n use std::collections::VecDeque;\n-use std::iter::FromIterator;\n \n struct GetFalsePositive {\n     arr: [u32; 3],"}, {"sha": "ea8fec5273511b3c4aa5447d22f51a3208405a21", "filename": "src/tools/clippy/tests/ui/get_unwrap.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_unwrap.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_unwrap.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fget_unwrap.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,5 +1,5 @@\n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:36:17\n+  --> $DIR/get_unwrap.rs:35:17\n    |\n LL |         let _ = boxed_slice.get(1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&boxed_slice[1]`\n@@ -11,7 +11,7 @@ LL | #![deny(clippy::get_unwrap)]\n    |         ^^^^^^^^^^^^^^^^^^\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:36:17\n+  --> $DIR/get_unwrap.rs:35:17\n    |\n LL |         let _ = boxed_slice.get(1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -20,167 +20,167 @@ LL |         let _ = boxed_slice.get(1).unwrap();\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:37:17\n+  --> $DIR/get_unwrap.rs:36:17\n    |\n LL |         let _ = some_slice.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_slice[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:37:17\n+  --> $DIR/get_unwrap.rs:36:17\n    |\n LL |         let _ = some_slice.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:38:17\n+  --> $DIR/get_unwrap.rs:37:17\n    |\n LL |         let _ = some_vec.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vec[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:38:17\n+  --> $DIR/get_unwrap.rs:37:17\n    |\n LL |         let _ = some_vec.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:39:17\n+  --> $DIR/get_unwrap.rs:38:17\n    |\n LL |         let _ = some_vecdeque.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_vecdeque[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:39:17\n+  --> $DIR/get_unwrap.rs:38:17\n    |\n LL |         let _ = some_vecdeque.get(0).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a HashMap. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:40:17\n+  --> $DIR/get_unwrap.rs:39:17\n    |\n LL |         let _ = some_hashmap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_hashmap[&1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:40:17\n+  --> $DIR/get_unwrap.rs:39:17\n    |\n LL |         let _ = some_hashmap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a BTreeMap. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:41:17\n+  --> $DIR/get_unwrap.rs:40:17\n    |\n LL |         let _ = some_btreemap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `&some_btreemap[&1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:41:17\n+  --> $DIR/get_unwrap.rs:40:17\n    |\n LL |         let _ = some_btreemap.get(&1).unwrap();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:45:21\n+  --> $DIR/get_unwrap.rs:44:21\n    |\n LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:45:22\n+  --> $DIR/get_unwrap.rs:44:22\n    |\n LL |         let _: u8 = *boxed_slice.get(1).unwrap();\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:50:9\n+  --> $DIR/get_unwrap.rs:49:9\n    |\n LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `boxed_slice[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:50:10\n+  --> $DIR/get_unwrap.rs:49:10\n    |\n LL |         *boxed_slice.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a slice. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:51:9\n+  --> $DIR/get_unwrap.rs:50:9\n    |\n LL |         *some_slice.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_slice[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:51:10\n+  --> $DIR/get_unwrap.rs:50:10\n    |\n LL |         *some_slice.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:52:9\n+  --> $DIR/get_unwrap.rs:51:9\n    |\n LL |         *some_vec.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:52:10\n+  --> $DIR/get_unwrap.rs:51:10\n    |\n LL |         *some_vec.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a VecDeque. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:53:9\n+  --> $DIR/get_unwrap.rs:52:9\n    |\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vecdeque[0]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:53:10\n+  --> $DIR/get_unwrap.rs:52:10\n    |\n LL |         *some_vecdeque.get_mut(0).unwrap() = 1;\n    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:65:17\n+  --> $DIR/get_unwrap.rs:64:17\n    |\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:65:17\n+  --> $DIR/get_unwrap.rs:64:17\n    |\n LL |         let _ = some_vec.get(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: if you don't want to handle the `None` case gracefully, consider using `expect()` to provide a better panic message\n \n error: called `.get_mut().unwrap()` on a Vec. Using `[]` is more clear and more concise\n-  --> $DIR/get_unwrap.rs:66:17\n+  --> $DIR/get_unwrap.rs:65:17\n    |\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `some_vec[0..1]`\n \n error: used `unwrap()` on `an Option` value\n-  --> $DIR/get_unwrap.rs:66:17\n+  --> $DIR/get_unwrap.rs:65:17\n    |\n LL |         let _ = some_vec.get_mut(0..1).unwrap().to_vec();\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a1e5fad0c621fbb51913dfe903fd0c26ea4044db", "filename": "src/tools/clippy/tests/ui/infinite_iter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finfinite_iter.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -51,7 +51,6 @@ fn main() {\n \n mod finite_collect {\n     use std::collections::HashSet;\n-    use std::iter::FromIterator;\n \n     struct C;\n     impl FromIterator<i32> for C {"}, {"sha": "ba277e36339addc8465c7aff1cddc91447e53f99", "filename": "src/tools/clippy/tests/ui/infinite_iter.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finfinite_iter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finfinite_iter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Finfinite_iter.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -98,7 +98,7 @@ LL |     (0..).all(|x| x == 24); // maybe infinite iter\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: infinite iteration detected\n-  --> $DIR/infinite_iter.rs:64:31\n+  --> $DIR/infinite_iter.rs:63:31\n    |\n LL |         let _: HashSet<i32> = (0..).collect(); // Infinite iter\n    |                               ^^^^^^^^^^^^^^^"}, {"sha": "0704ba2f933eb774dd91fedab659bec8ae1e1fcb", "filename": "src/tools/clippy/tests/ui/manual_str_repeat.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_str_repeat.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_str_repeat.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_str_repeat.fixed?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -4,7 +4,7 @@\n #![warn(clippy::manual_str_repeat)]\n \n use std::borrow::Cow;\n-use std::iter::{repeat, FromIterator};\n+use std::iter::repeat;\n \n fn main() {\n     let _: String = \"test\".repeat(10);"}, {"sha": "f522be439aa0eaf0a69f5217c88c1ead4d67eee8", "filename": "src/tools/clippy/tests/ui/manual_str_repeat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_str_repeat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_str_repeat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmanual_str_repeat.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -4,7 +4,7 @@\n #![warn(clippy::manual_str_repeat)]\n \n use std::borrow::Cow;\n-use std::iter::{repeat, FromIterator};\n+use std::iter::repeat;\n \n fn main() {\n     let _: String = std::iter::repeat(\"test\").take(10).collect();"}, {"sha": "bb35ab1a14efa6f4c160cf63fe0cc0749aa66f8f", "filename": "src/tools/clippy/tests/ui/map_err.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_err.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,6 +1,5 @@\n #![warn(clippy::map_err_ignore)]\n #![allow(clippy::unnecessary_wraps)]\n-use std::convert::TryFrom;\n use std::error::Error;\n use std::fmt;\n "}, {"sha": "c035840521e49121da3d58628aa1b089e68efa43", "filename": "src/tools/clippy/tests/ui/map_err.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmap_err.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,5 +1,5 @@\n error: `map_err(|_|...` wildcard pattern discards the original error\n-  --> $DIR/map_err.rs:23:32\n+  --> $DIR/map_err.rs:22:32\n    |\n LL |     println!(\"{:?}\", x.map_err(|_| Errors::Ignored));\n    |                                ^^^"}, {"sha": "de46e6cff55ba2c773cc747d02e1157d749d9bf5", "filename": "src/tools/clippy/tests/ui/match_single_binding.fixed", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_single_binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_single_binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_single_binding.fixed?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -111,3 +111,16 @@ fn main() {\n     let x = 1;\n     println!(\"Not an array index start\");\n }\n+\n+#[allow(dead_code)]\n+fn issue_8723() {\n+    let (mut val, idx) = (\"a b\", 1);\n+\n+    let (pre, suf) = val.split_at(idx);\n+    val = {\n+        println!(\"{}\", pre);\n+        suf\n+    };\n+\n+    let _ = val;\n+}"}, {"sha": "eea64fcb292b88602e3af07fc2ed08a42f3c808d", "filename": "src/tools/clippy/tests/ui/match_single_binding.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_single_binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_single_binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_single_binding.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -126,3 +126,17 @@ fn main() {\n         _ => println!(\"Not an array index start\"),\n     }\n }\n+\n+#[allow(dead_code)]\n+fn issue_8723() {\n+    let (mut val, idx) = (\"a b\", 1);\n+\n+    val = match val.split_at(idx) {\n+        (pre, suf) => {\n+            println!(\"{}\", pre);\n+            suf\n+        },\n+    };\n+\n+    let _ = val;\n+}"}, {"sha": "5d4e7314b2137b9bf96fff539596dfa74b22e944", "filename": "src/tools/clippy/tests/ui/match_single_binding.stderr", "status": "modified", "additions": 29, "deletions": 9, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_single_binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_single_binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_single_binding.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -9,7 +9,7 @@ LL | |     }\n    | |_____^\n    |\n    = note: `-D clippy::match-single-binding` implied by `-D warnings`\n-help: consider using `let` statement\n+help: consider using a `let` statement\n    |\n LL ~     let (x, y, z) = (a, b, c);\n LL +     {\n@@ -25,7 +25,7 @@ LL | |         (x, y, z) => println!(\"{} {} {}\", x, y, z),\n LL | |     }\n    | |_____^\n    |\n-help: consider using `let` statement\n+help: consider using a `let` statement\n    |\n LL ~     let (x, y, z) = (a, b, c);\n LL +     println!(\"{} {} {}\", x, y, z);\n@@ -88,7 +88,7 @@ LL | |         Point { x, y } => println!(\"Coords: ({}, {})\", x, y),\n LL | |     }\n    | |_____^\n    |\n-help: consider using `let` statement\n+help: consider using a `let` statement\n    |\n LL ~     let Point { x, y } = p;\n LL +     println!(\"Coords: ({}, {})\", x, y);\n@@ -102,7 +102,7 @@ LL | |         Point { x: x1, y: y1 } => println!(\"Coords: ({}, {})\", x1, y1),\n LL | |     }\n    | |_____^\n    |\n-help: consider using `let` statement\n+help: consider using a `let` statement\n    |\n LL ~     let Point { x: x1, y: y1 } = p;\n LL +     println!(\"Coords: ({}, {})\", x1, y1);\n@@ -116,7 +116,7 @@ LL | |         ref r => println!(\"Got a reference to {}\", r),\n LL | |     }\n    | |_____^\n    |\n-help: consider using `let` statement\n+help: consider using a `let` statement\n    |\n LL ~     let ref r = x;\n LL +     println!(\"Got a reference to {}\", r);\n@@ -130,7 +130,7 @@ LL | |         ref mut mr => println!(\"Got a mutable reference to {}\", mr),\n LL | |     }\n    | |_____^\n    |\n-help: consider using `let` statement\n+help: consider using a `let` statement\n    |\n LL ~     let ref mut mr = x;\n LL +     println!(\"Got a mutable reference to {}\", mr);\n@@ -144,7 +144,7 @@ LL | |         Point { x, y } => x * y,\n LL | |     };\n    | |______^\n    |\n-help: consider using `let` statement\n+help: consider using a `let` statement\n    |\n LL ~     let Point { x, y } = coords();\n LL +     let product = x * y;\n@@ -159,7 +159,7 @@ LL | |             unwrapped => unwrapped,\n LL | |         })\n    | |_________^\n    |\n-help: consider using `let` statement\n+help: consider using a `let` statement\n    |\n LL ~         .map(|i| {\n LL +             let unwrapped = i.unwrap();\n@@ -176,5 +176,25 @@ LL | |         _ => println!(\"Not an array index start\"),\n LL | |     }\n    | |_____^ help: consider using the match body instead: `println!(\"Not an array index start\");`\n \n-error: aborting due to 12 previous errors\n+error: this assignment could be simplified\n+  --> $DIR/match_single_binding.rs:134:5\n+   |\n+LL | /     val = match val.split_at(idx) {\n+LL | |         (pre, suf) => {\n+LL | |             println!(\"{}\", pre);\n+LL | |             suf\n+LL | |         },\n+LL | |     };\n+   | |_____^\n+   |\n+help: consider removing the `match` expression\n+   |\n+LL ~     let (pre, suf) = val.split_at(idx);\n+LL +     val = {\n+LL +         println!(\"{}\", pre);\n+LL +         suf\n+LL ~     };\n+   |\n+\n+error: aborting due to 13 previous errors\n "}, {"sha": "22bf7d8be4a297f8c4b95162b3a18db283bd11e7", "filename": "src/tools/clippy/tests/ui/match_single_binding2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_single_binding2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_single_binding2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmatch_single_binding2.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -8,7 +8,7 @@ LL | |             },\n    | |_____________^\n    |\n    = note: `-D clippy::match-single-binding` implied by `-D warnings`\n-help: consider using `let` statement\n+help: consider using a `let` statement\n    |\n LL ~             Some((iter, _item)) => {\n LL +                 let (min, max) = iter.size_hint();\n@@ -24,7 +24,7 @@ LL | |                 (a, b) => println!(\"a {:?} and b {:?}\", a, b),\n LL | |             }\n    | |_____________^\n    |\n-help: consider using `let` statement\n+help: consider using a `let` statement\n    |\n LL ~             let (a, b) = get_tup();\n LL +             println!(\"a {:?} and b {:?}\", a, b);"}, {"sha": "9805097084d303cc1bc8153202afa7afc7f2bac6", "filename": "src/tools/clippy/tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmethods.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -26,7 +26,6 @@ use std::collections::BTreeMap;\n use std::collections::HashMap;\n use std::collections::HashSet;\n use std::collections::VecDeque;\n-use std::iter::FromIterator;\n use std::ops::Mul;\n use std::rc::{self, Rc};\n use std::sync::{self, Arc};"}, {"sha": "6be38b24fbda2a393326430137df3acb7f8a9914", "filename": "src/tools/clippy/tests/ui/methods.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmethods.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,5 +1,5 @@\n error: methods called `new` usually return `Self`\n-  --> $DIR/methods.rs:104:5\n+  --> $DIR/methods.rs:103:5\n    |\n LL | /     fn new() -> i32 {\n LL | |         0\n@@ -9,7 +9,7 @@ LL | |     }\n    = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n \n error: called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(..)` instead\n-  --> $DIR/methods.rs:125:13\n+  --> $DIR/methods.rs:124:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^"}, {"sha": "7640057ab6e36da429072c4f5ac46950c22c8b49", "filename": "src/tools/clippy/tests/ui/mixed_read_write_in_expression.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmixed_read_write_in_expression.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,4 +1,4 @@\n-#[warn(clippy::eval_order_dependence)]\n+#[warn(clippy::mixed_read_write_in_expression)]\n #[allow(\n     unused_assignments,\n     unused_variables,", "previous_filename": "src/tools/clippy/tests/ui/eval_order_dependence.rs"}, {"sha": "2e951cdbcbfd78c849edbca9f734312e0f3aa1a1", "filename": "src/tools/clippy/tests/ui/mixed_read_write_in_expression.stderr", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmixed_read_write_in_expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmixed_read_write_in_expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fmixed_read_write_in_expression.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,48 +1,48 @@\n error: unsequenced read of `x`\n-  --> $DIR/eval_order_dependence.rs:14:9\n+  --> $DIR/mixed_read_write_in_expression.rs:14:9\n    |\n LL |     } + x;\n    |         ^\n    |\n-   = note: `-D clippy::eval-order-dependence` implied by `-D warnings`\n+   = note: `-D clippy::mixed-read-write-in-expression` implied by `-D warnings`\n note: whether read occurs before this write depends on evaluation order\n-  --> $DIR/eval_order_dependence.rs:12:9\n+  --> $DIR/mixed_read_write_in_expression.rs:12:9\n    |\n LL |         x = 1;\n    |         ^^^^^\n \n error: unsequenced read of `x`\n-  --> $DIR/eval_order_dependence.rs:17:5\n+  --> $DIR/mixed_read_write_in_expression.rs:17:5\n    |\n LL |     x += {\n    |     ^\n    |\n note: whether read occurs before this write depends on evaluation order\n-  --> $DIR/eval_order_dependence.rs:18:9\n+  --> $DIR/mixed_read_write_in_expression.rs:18:9\n    |\n LL |         x = 20;\n    |         ^^^^^^\n \n error: unsequenced read of `x`\n-  --> $DIR/eval_order_dependence.rs:30:12\n+  --> $DIR/mixed_read_write_in_expression.rs:30:12\n    |\n LL |         a: x,\n    |            ^\n    |\n note: whether read occurs before this write depends on evaluation order\n-  --> $DIR/eval_order_dependence.rs:32:13\n+  --> $DIR/mixed_read_write_in_expression.rs:32:13\n    |\n LL |             x = 6;\n    |             ^^^^^\n \n error: unsequenced read of `x`\n-  --> $DIR/eval_order_dependence.rs:39:9\n+  --> $DIR/mixed_read_write_in_expression.rs:39:9\n    |\n LL |         x += {\n    |         ^\n    |\n note: whether read occurs before this write depends on evaluation order\n-  --> $DIR/eval_order_dependence.rs:40:13\n+  --> $DIR/mixed_read_write_in_expression.rs:40:13\n    |\n LL |             x = 20;\n    |             ^^^^^^", "previous_filename": "src/tools/clippy/tests/ui/eval_order_dependence.stderr"}, {"sha": "f497719971174a14bf03a97cf96734bbe12d168d", "filename": "src/tools/clippy/tests/ui/range_contains.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.fixed?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -6,7 +6,7 @@\n #[allow(clippy::short_circuit_statement)]\n #[allow(clippy::unnecessary_operation)]\n fn main() {\n-    let x = 9_u32;\n+    let x = 9_i32;\n \n     // order shouldn't matter\n     (8..12).contains(&x);\n@@ -43,6 +43,12 @@ fn main() {\n     let y = 3.;\n     (0. ..1.).contains(&y);\n     !(0. ..=1.).contains(&y);\n+\n+    // handle negatives #8721\n+    (-10..=10).contains(&x);\n+    x >= 10 && x <= -10;\n+    (-3. ..=3.).contains(&y);\n+    y >= 3. && y <= -3.;\n }\n \n // Fix #6373"}, {"sha": "9e2180b0c9944290a4fd872c8e5d7692f2680d23", "filename": "src/tools/clippy/tests/ui/range_contains.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -6,7 +6,7 @@\n #[allow(clippy::short_circuit_statement)]\n #[allow(clippy::unnecessary_operation)]\n fn main() {\n-    let x = 9_u32;\n+    let x = 9_i32;\n \n     // order shouldn't matter\n     x >= 8 && x < 12;\n@@ -43,6 +43,12 @@ fn main() {\n     let y = 3.;\n     y >= 0. && y < 1.;\n     y < 0. || y > 1.;\n+\n+    // handle negatives #8721\n+    x >= -10 && x <= 10;\n+    x >= 10 && x <= -10;\n+    y >= -3. && y <= 3.;\n+    y >= 3. && y <= -3.;\n }\n \n // Fix #6373"}, {"sha": "1817ee1715d1779c463c7c549147ba91bea489f8", "filename": "src/tools/clippy/tests/ui/range_contains.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frange_contains.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -84,5 +84,17 @@ error: manual `!RangeInclusive::contains` implementation\n LL |     y < 0. || y > 1.;\n    |     ^^^^^^^^^^^^^^^^ help: use: `!(0. ..=1.).contains(&y)`\n \n-error: aborting due to 14 previous errors\n+error: manual `RangeInclusive::contains` implementation\n+  --> $DIR/range_contains.rs:48:5\n+   |\n+LL |     x >= -10 && x <= 10;\n+   |     ^^^^^^^^^^^^^^^^^^^ help: use: `(-10..=10).contains(&x)`\n+\n+error: manual `RangeInclusive::contains` implementation\n+  --> $DIR/range_contains.rs:50:5\n+   |\n+LL |     y >= -3. && y <= 3.;\n+   |     ^^^^^^^^^^^^^^^^^^^ help: use: `(-3. ..=3.).contains(&y)`\n+\n+error: aborting due to 16 previous errors\n "}, {"sha": "384060e6eae5033ef82d1998734e5aa1da557d57", "filename": "src/tools/clippy/tests/ui/rc_clone_in_vec_init/arc.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Farc.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,68 @@\n+#![warn(clippy::rc_clone_in_vec_init)]\n+use std::sync::{Arc, Mutex};\n+\n+fn main() {}\n+\n+fn should_warn_simple_case() {\n+    let v = vec![Arc::new(\"x\".to_string()); 2];\n+}\n+\n+fn should_warn_simple_case_with_big_indentation() {\n+    if true {\n+        let k = 1;\n+        dbg!(k);\n+        if true {\n+            let v = vec![Arc::new(\"x\".to_string()); 2];\n+        }\n+    }\n+}\n+\n+fn should_warn_complex_case() {\n+    let v = vec![\n+        std::sync::Arc::new(Mutex::new({\n+            let x = 1;\n+            dbg!(x);\n+            x\n+        }));\n+        2\n+    ];\n+\n+    let v1 = vec![\n+        Arc::new(Mutex::new({\n+            let x = 1;\n+            dbg!(x);\n+            x\n+        }));\n+        2\n+    ];\n+}\n+\n+fn should_not_warn_custom_arc() {\n+    #[derive(Clone)]\n+    struct Arc;\n+\n+    impl Arc {\n+        fn new() -> Self {\n+            Arc\n+        }\n+    }\n+\n+    let v = vec![Arc::new(); 2];\n+}\n+\n+fn should_not_warn_vec_from_elem_but_not_arc() {\n+    let v = vec![String::new(); 2];\n+    let v1 = vec![1; 2];\n+    let v2 = vec![\n+        Box::new(std::sync::Arc::new({\n+            let y = 3;\n+            dbg!(y);\n+            y\n+        }));\n+        2\n+    ];\n+}\n+\n+fn should_not_warn_vec_macro_but_not_from_elem() {\n+    let v = vec![Arc::new(\"x\".to_string())];\n+}"}, {"sha": "ce84186c8e300e15c988d76870740f40e13673db", "filename": "src/tools/clippy/tests/ui/rc_clone_in_vec_init/arc.stderr", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Farc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Farc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Farc.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,109 @@\n+error: calling `Arc::new` in `vec![elem; len]`\n+  --> $DIR/arc.rs:7:13\n+   |\n+LL |     let v = vec![Arc::new(\"x\".to_string()); 2];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::rc-clone-in-vec-init` implied by `-D warnings`\n+   = note: each element will point to the same `Arc` instance\n+help: consider initializing each `Arc` element individually\n+   |\n+LL ~     let v = {\n+LL +         let mut v = Vec::with_capacity(2);\n+LL +         (0..2).for_each(|_| v.push(Arc::new(\"x\".to_string())));\n+LL +         v\n+LL ~     };\n+   |\n+help: or if this is intentional, consider extracting the `Arc` initialization to a variable\n+   |\n+LL ~     let v = {\n+LL +         let data = Arc::new(\"x\".to_string());\n+LL +         vec![data; 2]\n+LL ~     };\n+   |\n+\n+error: calling `Arc::new` in `vec![elem; len]`\n+  --> $DIR/arc.rs:15:21\n+   |\n+LL |             let v = vec![Arc::new(\"x\".to_string()); 2];\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: each element will point to the same `Arc` instance\n+help: consider initializing each `Arc` element individually\n+   |\n+LL ~             let v = {\n+LL +                 let mut v = Vec::with_capacity(2);\n+LL +                 (0..2).for_each(|_| v.push(Arc::new(\"x\".to_string())));\n+LL +                 v\n+LL ~             };\n+   |\n+help: or if this is intentional, consider extracting the `Arc` initialization to a variable\n+   |\n+LL ~             let v = {\n+LL +                 let data = Arc::new(\"x\".to_string());\n+LL +                 vec![data; 2]\n+LL ~             };\n+   |\n+\n+error: calling `Arc::new` in `vec![elem; len]`\n+  --> $DIR/arc.rs:21:13\n+   |\n+LL |       let v = vec![\n+   |  _____________^\n+LL | |         std::sync::Arc::new(Mutex::new({\n+LL | |             let x = 1;\n+LL | |             dbg!(x);\n+...  |\n+LL | |         2\n+LL | |     ];\n+   | |_____^\n+   |\n+   = note: each element will point to the same `Arc` instance\n+help: consider initializing each `Arc` element individually\n+   |\n+LL ~     let v = {\n+LL +         let mut v = Vec::with_capacity(2);\n+LL +         (0..2).for_each(|_| v.push(std::sync::Arc::new(..)));\n+LL +         v\n+LL ~     };\n+   |\n+help: or if this is intentional, consider extracting the `Arc` initialization to a variable\n+   |\n+LL ~     let v = {\n+LL +         let data = std::sync::Arc::new(..);\n+LL +         vec![data; 2]\n+LL ~     };\n+   |\n+\n+error: calling `Arc::new` in `vec![elem; len]`\n+  --> $DIR/arc.rs:30:14\n+   |\n+LL |       let v1 = vec![\n+   |  ______________^\n+LL | |         Arc::new(Mutex::new({\n+LL | |             let x = 1;\n+LL | |             dbg!(x);\n+...  |\n+LL | |         2\n+LL | |     ];\n+   | |_____^\n+   |\n+   = note: each element will point to the same `Arc` instance\n+help: consider initializing each `Arc` element individually\n+   |\n+LL ~     let v1 = {\n+LL +         let mut v = Vec::with_capacity(2);\n+LL +         (0..2).for_each(|_| v.push(Arc::new(..)));\n+LL +         v\n+LL ~     };\n+   |\n+help: or if this is intentional, consider extracting the `Arc` initialization to a variable\n+   |\n+LL ~     let v1 = {\n+LL +         let data = Arc::new(..);\n+LL +         vec![data; 2]\n+LL ~     };\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "0394457fe1708274e2e4e7987b2615dcff68f298", "filename": "src/tools/clippy/tests/ui/rc_clone_in_vec_init/rc.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Frc.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,69 @@\n+#![warn(clippy::rc_clone_in_vec_init)]\n+use std::rc::Rc;\n+use std::sync::Mutex;\n+\n+fn main() {}\n+\n+fn should_warn_simple_case() {\n+    let v = vec![Rc::new(\"x\".to_string()); 2];\n+}\n+\n+fn should_warn_simple_case_with_big_indentation() {\n+    if true {\n+        let k = 1;\n+        dbg!(k);\n+        if true {\n+            let v = vec![Rc::new(\"x\".to_string()); 2];\n+        }\n+    }\n+}\n+\n+fn should_warn_complex_case() {\n+    let v = vec![\n+        std::rc::Rc::new(Mutex::new({\n+            let x = 1;\n+            dbg!(x);\n+            x\n+        }));\n+        2\n+    ];\n+\n+    let v1 = vec![\n+        Rc::new(Mutex::new({\n+            let x = 1;\n+            dbg!(x);\n+            x\n+        }));\n+        2\n+    ];\n+}\n+\n+fn should_not_warn_custom_arc() {\n+    #[derive(Clone)]\n+    struct Rc;\n+\n+    impl Rc {\n+        fn new() -> Self {\n+            Rc\n+        }\n+    }\n+\n+    let v = vec![Rc::new(); 2];\n+}\n+\n+fn should_not_warn_vec_from_elem_but_not_rc() {\n+    let v = vec![String::new(); 2];\n+    let v1 = vec![1; 2];\n+    let v2 = vec![\n+        Box::new(std::rc::Rc::new({\n+            let y = 3;\n+            dbg!(y);\n+            y\n+        }));\n+        2\n+    ];\n+}\n+\n+fn should_not_warn_vec_macro_but_not_from_elem() {\n+    let v = vec![Rc::new(\"x\".to_string())];\n+}"}, {"sha": "0f5cc0cf98feaa415efc44841647f1847b7d9bfc", "filename": "src/tools/clippy/tests/ui/rc_clone_in_vec_init/rc.stderr", "status": "added", "additions": 109, "deletions": 0, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Frc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Frc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frc_clone_in_vec_init%2Frc.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,109 @@\n+error: calling `Rc::new` in `vec![elem; len]`\n+  --> $DIR/rc.rs:8:13\n+   |\n+LL |     let v = vec![Rc::new(\"x\".to_string()); 2];\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::rc-clone-in-vec-init` implied by `-D warnings`\n+   = note: each element will point to the same `Rc` instance\n+help: consider initializing each `Rc` element individually\n+   |\n+LL ~     let v = {\n+LL +         let mut v = Vec::with_capacity(2);\n+LL +         (0..2).for_each(|_| v.push(Rc::new(\"x\".to_string())));\n+LL +         v\n+LL ~     };\n+   |\n+help: or if this is intentional, consider extracting the `Rc` initialization to a variable\n+   |\n+LL ~     let v = {\n+LL +         let data = Rc::new(\"x\".to_string());\n+LL +         vec![data; 2]\n+LL ~     };\n+   |\n+\n+error: calling `Rc::new` in `vec![elem; len]`\n+  --> $DIR/rc.rs:16:21\n+   |\n+LL |             let v = vec![Rc::new(\"x\".to_string()); 2];\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: each element will point to the same `Rc` instance\n+help: consider initializing each `Rc` element individually\n+   |\n+LL ~             let v = {\n+LL +                 let mut v = Vec::with_capacity(2);\n+LL +                 (0..2).for_each(|_| v.push(Rc::new(\"x\".to_string())));\n+LL +                 v\n+LL ~             };\n+   |\n+help: or if this is intentional, consider extracting the `Rc` initialization to a variable\n+   |\n+LL ~             let v = {\n+LL +                 let data = Rc::new(\"x\".to_string());\n+LL +                 vec![data; 2]\n+LL ~             };\n+   |\n+\n+error: calling `Rc::new` in `vec![elem; len]`\n+  --> $DIR/rc.rs:22:13\n+   |\n+LL |       let v = vec![\n+   |  _____________^\n+LL | |         std::rc::Rc::new(Mutex::new({\n+LL | |             let x = 1;\n+LL | |             dbg!(x);\n+...  |\n+LL | |         2\n+LL | |     ];\n+   | |_____^\n+   |\n+   = note: each element will point to the same `Rc` instance\n+help: consider initializing each `Rc` element individually\n+   |\n+LL ~     let v = {\n+LL +         let mut v = Vec::with_capacity(2);\n+LL +         (0..2).for_each(|_| v.push(std::rc::Rc::new(..)));\n+LL +         v\n+LL ~     };\n+   |\n+help: or if this is intentional, consider extracting the `Rc` initialization to a variable\n+   |\n+LL ~     let v = {\n+LL +         let data = std::rc::Rc::new(..);\n+LL +         vec![data; 2]\n+LL ~     };\n+   |\n+\n+error: calling `Rc::new` in `vec![elem; len]`\n+  --> $DIR/rc.rs:31:14\n+   |\n+LL |       let v1 = vec![\n+   |  ______________^\n+LL | |         Rc::new(Mutex::new({\n+LL | |             let x = 1;\n+LL | |             dbg!(x);\n+...  |\n+LL | |         2\n+LL | |     ];\n+   | |_____^\n+   |\n+   = note: each element will point to the same `Rc` instance\n+help: consider initializing each `Rc` element individually\n+   |\n+LL ~     let v1 = {\n+LL +         let mut v = Vec::with_capacity(2);\n+LL +         (0..2).for_each(|_| v.push(Rc::new(..)));\n+LL +         v\n+LL ~     };\n+   |\n+help: or if this is intentional, consider extracting the `Rc` initialization to a variable\n+   |\n+LL ~     let v1 = {\n+LL +         let data = Rc::new(..);\n+LL +         vec![data; 2]\n+LL ~     };\n+   |\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "1a717ac92d8b7dac1dc6e256b39154ff42cec043", "filename": "src/tools/clippy/tests/ui/recursive_format_impl.stderr", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frecursive_format_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frecursive_format_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frecursive_format_impl.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -6,15 +6,6 @@ LL |         write!(f, \"{}\", self.to_string())\n    |\n    = note: `-D clippy::recursive-format-impl` implied by `-D warnings`\n \n-error: unnecessary use of `to_string`\n-  --> $DIR/recursive_format_impl.rs:61:50\n-   |\n-LL |             Self::E(string) => write!(f, \"E {}\", string.to_string()),\n-   |                                                  ^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `-D clippy::unnecessary-to-owned` implied by `-D warnings`\n-   = note: this error originates in the macro `$crate::format_args` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error: using `self` as `Display` in `impl Display` will cause infinite recursion\n   --> $DIR/recursive_format_impl.rs:73:9\n    |\n@@ -87,5 +78,5 @@ LL |         write!(f, \"{}\", &&**&&*self)\n    |\n    = note: this error originates in the macro `write` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 10 previous errors\n "}, {"sha": "cf7d8c6e349af2c685037126830a6bf0ac2eb029", "filename": "src/tools/clippy/tests/ui/redundant_allocation.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_allocation.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -97,4 +97,39 @@ mod box_dyn {\n     pub fn test_rc_box(_: Rc<Box<Box<dyn T>>>) {}\n }\n \n+// https://github.com/rust-lang/rust-clippy/issues/8604\n+mod box_fat_ptr {\n+    use std::boxed::Box;\n+    use std::path::Path;\n+    use std::rc::Rc;\n+    use std::sync::Arc;\n+\n+    pub struct DynSized {\n+        foo: [usize],\n+    }\n+\n+    struct S {\n+        a: Box<Box<str>>,\n+        b: Rc<Box<str>>,\n+        c: Arc<Box<str>>,\n+\n+        e: Box<Box<[usize]>>,\n+        f: Box<Box<Path>>,\n+        g: Box<Box<DynSized>>,\n+    }\n+\n+    pub fn test_box_str(_: Box<Box<str>>) {}\n+    pub fn test_rc_str(_: Rc<Box<str>>) {}\n+    pub fn test_arc_str(_: Arc<Box<str>>) {}\n+\n+    pub fn test_box_slice(_: Box<Box<[usize]>>) {}\n+    pub fn test_box_path(_: Box<Box<Path>>) {}\n+    pub fn test_box_custom(_: Box<Box<DynSized>>) {}\n+\n+    pub fn test_rc_box_str(_: Rc<Box<Box<str>>>) {}\n+    pub fn test_rc_box_slice(_: Rc<Box<Box<[usize]>>>) {}\n+    pub fn test_rc_box_path(_: Rc<Box<Box<Path>>>) {}\n+    pub fn test_rc_box_custom(_: Rc<Box<Box<DynSized>>>) {}\n+}\n+\n fn main() {}"}, {"sha": "fab1b069fcbc72462394b367508cb6f34137c22d", "filename": "src/tools/clippy/tests/ui/redundant_allocation.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_allocation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_allocation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_allocation.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -143,5 +143,41 @@ LL |     pub fn test_rc_box(_: Rc<Box<Box<dyn T>>>) {}\n    = note: `Box<Box<dyn T>>` is already on the heap, `Rc<Box<Box<dyn T>>>` makes an extra allocation\n    = help: consider using just `Rc<Box<dyn T>>` or `Box<Box<dyn T>>`\n \n-error: aborting due to 16 previous errors\n+error: usage of `Rc<Box<Box<str>>>`\n+  --> $DIR/redundant_allocation.rs:129:31\n+   |\n+LL |     pub fn test_rc_box_str(_: Rc<Box<Box<str>>>) {}\n+   |                               ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Box<Box<str>>` is already on the heap, `Rc<Box<Box<str>>>` makes an extra allocation\n+   = help: consider using just `Rc<Box<str>>` or `Box<Box<str>>`\n+\n+error: usage of `Rc<Box<Box<[usize]>>>`\n+  --> $DIR/redundant_allocation.rs:130:33\n+   |\n+LL |     pub fn test_rc_box_slice(_: Rc<Box<Box<[usize]>>>) {}\n+   |                                 ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Box<Box<[usize]>>` is already on the heap, `Rc<Box<Box<[usize]>>>` makes an extra allocation\n+   = help: consider using just `Rc<Box<[usize]>>` or `Box<Box<[usize]>>`\n+\n+error: usage of `Rc<Box<Box<Path>>>`\n+  --> $DIR/redundant_allocation.rs:131:32\n+   |\n+LL |     pub fn test_rc_box_path(_: Rc<Box<Box<Path>>>) {}\n+   |                                ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Box<Box<Path>>` is already on the heap, `Rc<Box<Box<Path>>>` makes an extra allocation\n+   = help: consider using just `Rc<Box<Path>>` or `Box<Box<Path>>`\n+\n+error: usage of `Rc<Box<Box<DynSized>>>`\n+  --> $DIR/redundant_allocation.rs:132:34\n+   |\n+LL |     pub fn test_rc_box_custom(_: Rc<Box<Box<DynSized>>>) {}\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `Box<Box<DynSized>>` is already on the heap, `Rc<Box<Box<DynSized>>>` makes an extra allocation\n+   = help: consider using just `Rc<Box<DynSized>>` or `Box<Box<DynSized>>`\n+\n+error: aborting due to 20 previous errors\n "}, {"sha": "53288be9404c2d03fbb9007abcfaa38067a930a9", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -10,6 +10,7 @@\n #![allow(clippy::cognitive_complexity)]\n #![allow(clippy::disallowed_methods)]\n #![allow(clippy::disallowed_types)]\n+#![allow(clippy::mixed_read_write_in_expression)]\n #![allow(clippy::for_loops_over_fallibles)]\n #![allow(clippy::useless_conversion)]\n #![allow(clippy::match_result_ok)]\n@@ -39,6 +40,7 @@\n #![warn(clippy::cognitive_complexity)]\n #![warn(clippy::disallowed_methods)]\n #![warn(clippy::disallowed_types)]\n+#![warn(clippy::mixed_read_write_in_expression)]\n #![warn(clippy::for_loops_over_fallibles)]\n #![warn(clippy::for_loops_over_fallibles)]\n #![warn(clippy::useless_conversion)]"}, {"sha": "539f34f847acdf580420d739e13fff8a09c51af4", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -10,6 +10,7 @@\n #![allow(clippy::cognitive_complexity)]\n #![allow(clippy::disallowed_methods)]\n #![allow(clippy::disallowed_types)]\n+#![allow(clippy::mixed_read_write_in_expression)]\n #![allow(clippy::for_loops_over_fallibles)]\n #![allow(clippy::useless_conversion)]\n #![allow(clippy::match_result_ok)]\n@@ -39,6 +40,7 @@\n #![warn(clippy::cyclomatic_complexity)]\n #![warn(clippy::disallowed_method)]\n #![warn(clippy::disallowed_type)]\n+#![warn(clippy::eval_order_dependence)]\n #![warn(clippy::for_loop_over_option)]\n #![warn(clippy::for_loop_over_result)]\n #![warn(clippy::identity_conversion)]"}, {"sha": "8ea46b580a8c9df81e02b29ab21285e3b570d9a3", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 41, "deletions": 35, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,208 +1,214 @@\n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:35:9\n+  --> $DIR/rename.rs:36:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:36:9\n+  --> $DIR/rename.rs:37:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:37:9\n+  --> $DIR/rename.rs:38:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:38:9\n+  --> $DIR/rename.rs:39:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:39:9\n+  --> $DIR/rename.rs:40:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:40:9\n+  --> $DIR/rename.rs:41:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:41:9\n+  --> $DIR/rename.rs:42:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n+error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n+  --> $DIR/rename.rs:43:9\n+   |\n+LL | #![warn(clippy::eval_order_dependence)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n+\n error: lint `clippy::for_loop_over_option` has been renamed to `clippy::for_loops_over_fallibles`\n-  --> $DIR/rename.rs:42:9\n+  --> $DIR/rename.rs:44:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `clippy::for_loops_over_fallibles`\n-  --> $DIR/rename.rs:43:9\n+  --> $DIR/rename.rs:45:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::for_loops_over_fallibles`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:44:9\n+  --> $DIR/rename.rs:46:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:45:9\n+  --> $DIR/rename.rs:47:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:46:9\n+  --> $DIR/rename.rs:48:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:47:9\n+  --> $DIR/rename.rs:49:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:48:9\n+  --> $DIR/rename.rs:50:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:49:9\n+  --> $DIR/rename.rs:51:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 35 previous errors\n "}, {"sha": "ef647622910248bc2e1c03224c0f94cbc21b15ca", "filename": "src/tools/clippy/tests/ui/self_assignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fself_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fself_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fself_assignment.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -39,7 +39,7 @@ pub fn negatives_not_equal(mut a: usize, b: &mut usize, mut s: S) {\n     t.0 = t.1;\n }\n \n-#[allow(clippy::eval_order_dependence)]\n+#[allow(clippy::mixed_read_write_in_expression)]\n pub fn negatives_side_effects() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     let mut i = 0;"}, {"sha": "f83a6dd0eb288bab30a619f79f40770bb5942a3e", "filename": "src/tools/clippy/tests/ui/significant_drop_in_scrutinee.rs", "status": "modified", "additions": 94, "deletions": 65, "changes": 159, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -29,8 +29,8 @@ fn should_not_trigger_lint_with_mutex_guard_outside_match() {\n     match is_foo {\n         true => {\n             mutex.lock().unwrap().bar();\n-        }\n-        false => {}\n+        },\n+        false => {},\n     };\n }\n \n@@ -43,8 +43,8 @@ fn should_not_trigger_lint_with_mutex_guard_when_taking_ownership_in_match() {\n         Ok(guard) => {\n             guard.foo();\n             mutex.lock().unwrap().bar();\n-        }\n-        _ => {}\n+        },\n+        _ => {},\n     };\n }\n \n@@ -57,8 +57,8 @@ fn should_trigger_lint_with_mutex_guard_in_match_scrutinee() {\n     match mutex.lock().unwrap().foo() {\n         true => {\n             mutex.lock().unwrap().bar();\n-        }\n-        false => {}\n+        },\n+        false => {},\n     };\n }\n \n@@ -68,10 +68,10 @@ fn should_not_trigger_lint_for_insignificant_drop() {\n     match 1u64.to_string().is_empty() {\n         true => {\n             println!(\"It was empty\")\n-        }\n+        },\n         false => {\n             println!(\"It was not empty\")\n-        }\n+        },\n     }\n }\n \n@@ -131,12 +131,12 @@ fn should_trigger_lint_with_wrapped_mutex() {\n         1 => {\n             println!(\"Got 1. Is it still 1?\");\n             println!(\"{}\", s.lock_m().get_the_value());\n-        }\n+        },\n         2 => {\n             println!(\"Got 2. Is it still 2?\");\n             println!(\"{}\", s.lock_m().get_the_value());\n-        }\n-        _ => {}\n+        },\n+        _ => {},\n     }\n     println!(\"All done!\");\n }\n@@ -152,12 +152,12 @@ fn should_trigger_lint_with_double_wrapped_mutex() {\n         1 => {\n             println!(\"Got 1. Is it still 1?\");\n             println!(\"{}\", s.lock_m().get_the_value());\n-        }\n+        },\n         2 => {\n             println!(\"Got 2. Is it still 2?\");\n             println!(\"{}\", s.lock_m().get_the_value());\n-        }\n-        _ => {}\n+        },\n+        _ => {},\n     }\n     println!(\"All done!\");\n }\n@@ -201,10 +201,10 @@ fn should_trigger_lint_for_vec() {\n             let current_count = counter.i.load(Ordering::Relaxed);\n             println!(\"Current count {}\", current_count);\n             assert_eq!(current_count, 0);\n-        }\n-        1 => {}\n-        3 => {}\n-        _ => {}\n+        },\n+        1 => {},\n+        3 => {},\n+        _ => {},\n     };\n }\n \n@@ -224,17 +224,17 @@ fn should_trigger_lint_for_tuple_in_scrutinee() {\n                 println!(\"started\");\n                 mutex1.lock().unwrap().s.len();\n                 println!(\"done\");\n-            }\n-            (_, _) => {}\n+            },\n+            (_, _) => {},\n         };\n \n         match (true, mutex1.lock().unwrap().s.len(), true) {\n             (_, 3, _) => {\n                 println!(\"started\");\n                 mutex1.lock().unwrap().s.len();\n                 println!(\"done\");\n-            }\n-            (_, _, _) => {}\n+            },\n+            (_, _, _) => {},\n         };\n \n         let mutex2 = Mutex::new(StateWithField { s: \"two\".to_owned() });\n@@ -244,8 +244,8 @@ fn should_trigger_lint_for_tuple_in_scrutinee() {\n                 mutex1.lock().unwrap().s.len();\n                 mutex2.lock().unwrap().s.len();\n                 println!(\"done\");\n-            }\n-            (_, _, _) => {}\n+            },\n+            (_, _, _) => {},\n         };\n \n         let mutex3 = Mutex::new(StateWithField { s: \"three\".to_owned() });\n@@ -255,19 +255,18 @@ fn should_trigger_lint_for_tuple_in_scrutinee() {\n                 mutex1.lock().unwrap().s.len();\n                 mutex2.lock().unwrap().s.len();\n                 println!(\"done\");\n-            }\n-            _ => {}\n+            },\n+            _ => {},\n         };\n \n-\n         match (true, mutex3.lock().unwrap().s.as_str()) {\n             (_, \"three\") => {\n                 println!(\"started\");\n                 mutex1.lock().unwrap().s.len();\n                 mutex2.lock().unwrap().s.len();\n                 println!(\"done\");\n-            }\n-            (_, _) => {}\n+            },\n+            (_, _) => {},\n         };\n     }\n }\n@@ -282,15 +281,15 @@ fn should_trigger_lint_for_accessing_field_in_mutex_in_one_side_of_binary_op() {\n     match mutex.lock().unwrap().s.len() > 1 {\n         true => {\n             mutex.lock().unwrap().s.len();\n-        }\n-        false => {}\n+        },\n+        false => {},\n     };\n \n     match 1 < mutex.lock().unwrap().s.len() {\n         true => {\n             mutex.lock().unwrap().s.len();\n-        }\n-        false => {}\n+        },\n+        false => {},\n     };\n }\n \n@@ -300,20 +299,30 @@ fn should_trigger_lint_for_accessing_field_in_mutex_in_one_side_of_binary_op() {\n // drop problem, the lint recommends moving the entire binary operation.\n fn should_trigger_lint_for_accessing_fields_in_mutex_in_both_sides_of_binary_op() {\n     let mutex1 = Mutex::new(StateWithField { s: \"state\".to_owned() });\n-    let mutex2 = Mutex::new(StateWithField { s: \"statewithfield\".to_owned() });\n+    let mutex2 = Mutex::new(StateWithField {\n+        s: \"statewithfield\".to_owned(),\n+    });\n \n     match mutex1.lock().unwrap().s.len() < mutex2.lock().unwrap().s.len() {\n         true => {\n-            println!(\"{} < {}\", mutex1.lock().unwrap().s.len(), mutex2.lock().unwrap().s.len());\n-        }\n-        false => {}\n+            println!(\n+                \"{} < {}\",\n+                mutex1.lock().unwrap().s.len(),\n+                mutex2.lock().unwrap().s.len()\n+            );\n+        },\n+        false => {},\n     };\n \n     match mutex1.lock().unwrap().s.len() >= mutex2.lock().unwrap().s.len() {\n         true => {\n-            println!(\"{} >= {}\", mutex1.lock().unwrap().s.len(), mutex2.lock().unwrap().s.len());\n-        }\n-        false => {}\n+            println!(\n+                \"{} >= {}\",\n+                mutex1.lock().unwrap().s.len(),\n+                mutex2.lock().unwrap().s.len()\n+            );\n+        },\n+        false => {},\n     };\n }\n \n@@ -328,8 +337,8 @@ fn should_not_trigger_lint_for_closure_in_scrutinee() {\n     match get_mutex_guard() > 1 {\n         true => {\n             mutex1.lock().unwrap().s.len();\n-        }\n-        false => {}\n+        },\n+        false => {},\n     };\n }\n \n@@ -343,8 +352,8 @@ fn should_trigger_lint_for_return_from_closure_in_scrutinee() {\n     match get_mutex_guard().s.len() > 1 {\n         true => {\n             mutex1.lock().unwrap().s.len();\n-        }\n-        false => {}\n+        },\n+        false => {},\n     };\n }\n \n@@ -357,13 +366,20 @@ fn should_trigger_lint_for_return_from_match_in_scrutinee() {\n     // Should trigger lint because the nested match within the scrutinee returns a temporary with a\n     // significant drop is but not used directly in any match arms, so it has a potentially\n     // surprising lifetime.\n-    match match i { 100 => mutex1.lock().unwrap(), _ => mutex2.lock().unwrap() }.s.len() > 1 {\n+    match match i {\n+        100 => mutex1.lock().unwrap(),\n+        _ => mutex2.lock().unwrap(),\n+    }\n+    .s\n+    .len()\n+        > 1\n+    {\n         true => {\n             mutex1.lock().unwrap().s.len();\n-        }\n+        },\n         false => {\n             println!(\"nothing to do here\");\n-        }\n+        },\n     };\n }\n \n@@ -376,11 +392,19 @@ fn should_trigger_lint_for_return_from_if_in_scrutinee() {\n     // Should trigger lint because the nested if-expression within the scrutinee returns a temporary\n     // with a significant drop is but not used directly in any match arms, so it has a potentially\n     // surprising lifetime.\n-    match if i > 1 { mutex1.lock().unwrap() } else { mutex2.lock().unwrap() }.s.len() > 1 {\n+    match if i > 1 {\n+        mutex1.lock().unwrap()\n+    } else {\n+        mutex2.lock().unwrap()\n+    }\n+    .s\n+    .len()\n+        > 1\n+    {\n         true => {\n             mutex1.lock().unwrap().s.len();\n-        }\n-        false => {}\n+        },\n+        false => {},\n     };\n }\n \n@@ -392,11 +416,15 @@ fn should_not_trigger_lint_for_if_in_scrutinee() {\n     // Should not trigger the lint because the temporary with a significant drop *is* dropped within\n     // the body of the if-expression nested within the match scrutinee, and therefore does not have\n     // a potentially surprising lifetime.\n-    match if i > 1 { mutex.lock().unwrap().s.len() > 1 } else { false } {\n+    match if i > 1 {\n+        mutex.lock().unwrap().s.len() > 1\n+    } else {\n+        false\n+    } {\n         true => {\n             mutex.lock().unwrap().s.len();\n-        }\n-        false => {}\n+        },\n+        false => {},\n     };\n }\n \n@@ -430,7 +458,9 @@ struct StateStringWithBoxedMutexGuard {\n \n impl StateStringWithBoxedMutexGuard {\n     fn new() -> StateStringWithBoxedMutexGuard {\n-        StateStringWithBoxedMutexGuard { s: Mutex::new(\"A String\".to_owned()) }\n+        StateStringWithBoxedMutexGuard {\n+            s: Mutex::new(\"A String\".to_owned()),\n+        }\n     }\n     fn lock(&self) -> Box<MutexGuard<String>> {\n         Box::new(self.s.lock().unwrap())\n@@ -450,7 +480,6 @@ fn should_trigger_lint_for_boxed_mutex_guard_holding_string() {\n     };\n }\n \n-\n struct StateWithIntField {\n     i: u64,\n }\n@@ -467,36 +496,36 @@ fn should_trigger_lint_in_assign_expr() {\n     match mutex.lock().unwrap().i = i {\n         _ => {\n             println!(\"{}\", mutex.lock().unwrap().i);\n-        }\n+        },\n     };\n \n     match i = mutex.lock().unwrap().i {\n         _ => {\n             println!(\"{}\", mutex.lock().unwrap().i);\n-        }\n+        },\n     };\n \n     match mutex.lock().unwrap().i += 1 {\n         _ => {\n             println!(\"{}\", mutex.lock().unwrap().i);\n-        }\n+        },\n     };\n \n     match i += mutex.lock().unwrap().i {\n         _ => {\n             println!(\"{}\", mutex.lock().unwrap().i);\n-        }\n+        },\n     };\n }\n \n #[derive(Debug)]\n enum RecursiveEnum {\n-    Foo(Option<Box<RecursiveEnum>>)\n+    Foo(Option<Box<RecursiveEnum>>),\n }\n \n #[derive(Debug)]\n enum GenericRecursiveEnum<T> {\n-    Foo(T, Option<Box<GenericRecursiveEnum<T>>>)\n+    Foo(T, Option<Box<GenericRecursiveEnum<T>>>),\n }\n \n fn should_not_cause_stack_overflow() {\n@@ -506,20 +535,20 @@ fn should_not_cause_stack_overflow() {\n     match f {\n         RecursiveEnum::Foo(Some(f)) => {\n             println!(\"{:?}\", f)\n-        }\n+        },\n         RecursiveEnum::Foo(f) => {\n             println!(\"{:?}\", f)\n-        }\n+        },\n     }\n \n     let f = GenericRecursiveEnum::Foo(1u64, Some(Box::new(GenericRecursiveEnum::Foo(2u64, None))));\n     match f {\n         GenericRecursiveEnum::Foo(i, Some(f)) => {\n             println!(\"{} {:?}\", i, f)\n-        }\n+        },\n         GenericRecursiveEnum::Foo(i, f) => {\n             println!(\"{} {:?}\", i, f)\n-        }\n+        },\n     }\n }\n "}, {"sha": "af160564985051bdc8008dce745abecd7d99d497", "filename": "src/tools/clippy/tests/ui/significant_drop_in_scrutinee.stderr", "status": "modified", "additions": 48, "deletions": 26, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsignificant_drop_in_scrutinee.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -102,13 +102,13 @@ LL |         match mutex3.lock().unwrap().s.as_str() {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:263:22\n+  --> $DIR/significant_drop_in_scrutinee.rs:262:22\n    |\n LL |         match (true, mutex3.lock().unwrap().s.as_str()) {\n    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:282:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:281:11\n    |\n LL |     match mutex.lock().unwrap().s.len() > 1 {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -120,7 +120,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:289:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:288:11\n    |\n LL |     match 1 < mutex.lock().unwrap().s.len() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -132,7 +132,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:305:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:306:11\n    |\n LL |     match mutex1.lock().unwrap().s.len() < mutex2.lock().unwrap().s.len() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -144,7 +144,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:312:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:317:11\n    |\n LL |     match mutex1.lock().unwrap().s.len() >= mutex2.lock().unwrap().s.len() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -156,7 +156,7 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:343:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:352:11\n    |\n LL |     match get_mutex_guard().s.len() > 1 {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -168,31 +168,53 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:360:11\n-   |\n-LL |     match match i { 100 => mutex1.lock().unwrap(), _ => mutex2.lock().unwrap() }.s.len() > 1 {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  --> $DIR/significant_drop_in_scrutinee.rs:369:11\n+   |\n+LL |       match match i {\n+   |  ___________^\n+LL | |         100 => mutex1.lock().unwrap(),\n+LL | |         _ => mutex2.lock().unwrap(),\n+LL | |     }\n+LL | |     .s\n+LL | |     .len()\n+LL | |         > 1\n+   | |___________^\n    |\n help: try moving the temporary above the match\n    |\n-LL ~     let value = match i { 100 => mutex1.lock().unwrap(), _ => mutex2.lock().unwrap() }.s.len() > 1;\n-LL ~     match value {\n-   |\n+LL ~     let value = match i {\n+LL +         100 => mutex1.lock().unwrap(),\n+LL +         _ => mutex2.lock().unwrap(),\n+LL +     }\n+LL +     .s\n+LL +     .len()\n+ ...\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:379:11\n-   |\n-LL |     match if i > 1 { mutex1.lock().unwrap() } else { mutex2.lock().unwrap() }.s.len() > 1 {\n-   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  --> $DIR/significant_drop_in_scrutinee.rs:395:11\n+   |\n+LL |       match if i > 1 {\n+   |  ___________^\n+LL | |         mutex1.lock().unwrap()\n+LL | |     } else {\n+LL | |         mutex2.lock().unwrap()\n+...  |\n+LL | |     .len()\n+LL | |         > 1\n+   | |___________^\n    |\n help: try moving the temporary above the match\n    |\n-LL ~     let value = if i > 1 { mutex1.lock().unwrap() } else { mutex2.lock().unwrap() }.s.len() > 1;\n-LL ~     match value {\n-   |\n+LL ~     let value = if i > 1 {\n+LL +         mutex1.lock().unwrap()\n+LL +     } else {\n+LL +         mutex2.lock().unwrap()\n+LL +     }\n+LL +     .s\n+ ...\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:421:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:449:11\n    |\n LL |     match s.lock().deref().deref() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -204,13 +226,13 @@ LL ~     match value {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:447:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:477:11\n    |\n LL |     match s.lock().deref().deref() {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:467:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:496:11\n    |\n LL |     match mutex.lock().unwrap().i = i {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -222,7 +244,7 @@ LL ~     match () {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:473:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:502:11\n    |\n LL |     match i = mutex.lock().unwrap().i {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -234,7 +256,7 @@ LL ~     match () {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:479:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:508:11\n    |\n LL |     match mutex.lock().unwrap().i += 1 {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -246,7 +268,7 @@ LL ~     match () {\n    |\n \n error: temporary with significant drop in match scrutinee\n-  --> $DIR/significant_drop_in_scrutinee.rs:485:11\n+  --> $DIR/significant_drop_in_scrutinee.rs:514:11\n    |\n LL |     match i += mutex.lock().unwrap().i {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "33b6a82f9d2c32cefabdc09ca2c4ec6786039e4b", "filename": "src/tools/clippy/tests/ui/undocumented_unsafe_blocks.rs", "status": "modified", "additions": 152, "deletions": 1, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,7 +1,7 @@\n // aux-build:proc_macro_unsafe.rs\n \n #![warn(clippy::undocumented_unsafe_blocks)]\n-#![allow(clippy::let_unit_value)]\n+#![allow(clippy::let_unit_value, clippy::missing_safety_doc)]\n \n extern crate proc_macro_unsafe;\n \n@@ -334,4 +334,155 @@ pub fn print_binary_tree() {\n     println!(\"{}\", unsafe { String::from_utf8_unchecked(vec![]) });\n }\n \n+mod unsafe_impl_smoke_test {\n+    unsafe trait A {}\n+\n+    // error: no safety comment\n+    unsafe impl A for () {}\n+\n+    // Safety: ok\n+    unsafe impl A for (i32) {}\n+\n+    mod sub_mod {\n+        // error:\n+        unsafe impl B for (u32) {}\n+        unsafe trait B {}\n+    }\n+\n+    #[rustfmt::skip]\n+    mod sub_mod2 {\n+        // \n+        // SAFETY: ok\n+        // \n+\n+        unsafe impl B for (u32) {}\n+        unsafe trait B {}\n+    }\n+}\n+\n+mod unsafe_impl_from_macro {\n+    unsafe trait T {}\n+\n+    // error\n+    macro_rules! no_safety_comment {\n+        ($t:ty) => {\n+            unsafe impl T for $t {}\n+        };\n+    }\n+\n+    // ok\n+    no_safety_comment!(());\n+\n+    // ok\n+    macro_rules! with_safety_comment {\n+        ($t:ty) => {\n+            // SAFETY:\n+            unsafe impl T for $t {}\n+        };\n+    }\n+\n+    // ok\n+    with_safety_comment!((i32));\n+}\n+\n+mod unsafe_impl_macro_and_not_macro {\n+    unsafe trait T {}\n+\n+    // error\n+    macro_rules! no_safety_comment {\n+        ($t:ty) => {\n+            unsafe impl T for $t {}\n+        };\n+    }\n+\n+    // ok\n+    no_safety_comment!(());\n+\n+    // error\n+    unsafe impl T for (i32) {}\n+\n+    // ok\n+    no_safety_comment!(u32);\n+\n+    // error\n+    unsafe impl T for (bool) {}\n+}\n+\n+#[rustfmt::skip]\n+mod unsafe_impl_valid_comment {\n+    unsafe trait SaFety {}\n+    // SaFety:\n+    unsafe impl SaFety for () {}\n+\n+    unsafe trait MultiLineComment {}\n+    // The following impl is safe\n+    // ...\n+    // Safety: reason\n+    unsafe impl MultiLineComment for () {}\n+\n+    unsafe trait NoAscii {}\n+    // \u5b89\u5168 SAFETY: \u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f\u5b89\u5168\u3067\u3059\n+    unsafe impl NoAscii for () {}\n+\n+    unsafe trait InlineAndPrecedingComment {}\n+    // SAFETY:\n+    /* comment */ unsafe impl InlineAndPrecedingComment for () {}\n+\n+    unsafe trait BuriedSafety {}\n+    // Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\n+    // incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n+    // ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in\n+    // reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint\n+    // occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est\n+    // laborum. Safety:\n+    // Tellus elementum sagittis vitae et leo duis ut diam quam. Sit amet nulla facilisi\n+    // morbi tempus iaculis urna. Amet luctus venenatis lectus magna. At quis risus sed vulputate odio\n+    // ut. Luctus venenatis lectus magna fringilla urna. Tortor id aliquet lectus proin nibh nisl\n+    // condimentum id venenatis. Vulputate dignissim suspendisse in est ante in nibh mauris cursus.\n+    unsafe impl BuriedSafety for () {}\n+\n+    unsafe trait MultiLineBlockComment {}\n+    /* This is a description\n+     * Safety: */\n+    unsafe impl MultiLineBlockComment for () {}\n+}\n+\n+#[rustfmt::skip]\n+mod unsafe_impl_invalid_comment {\n+    unsafe trait NoComment {}\n+\n+    unsafe impl NoComment for () {}\n+\n+    unsafe trait InlineComment {}\n+\n+    /* SAFETY: */ unsafe impl InlineComment for () {}\n+\n+    unsafe trait TrailingComment {}\n+\n+    unsafe impl TrailingComment for () {} // SAFETY:\n+\n+    unsafe trait Interference {}\n+    // SAFETY:\n+    const BIG_NUMBER: i32 = 1000000;\n+    unsafe impl Interference for () {}\n+}\n+\n+unsafe trait ImplInFn {}\n+\n+fn impl_in_fn() {\n+    // error\n+    unsafe impl ImplInFn for () {}\n+\n+    // SAFETY: ok\n+    unsafe impl ImplInFn for (i32) {}\n+}\n+\n+unsafe trait CrateRoot {}\n+\n+// error\n+unsafe impl CrateRoot for () {}\n+\n+// SAFETY: ok\n+unsafe impl CrateRoot for (i32) {}\n+\n fn main() {}"}, {"sha": "b79949e9d06d6af18a3602f980fe15f5fe30a6ec", "filename": "src/tools/clippy/tests/ui/undocumented_unsafe_blocks.stderr", "status": "modified", "additions": 117, "deletions": 1, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fundocumented_unsafe_blocks.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -147,5 +147,121 @@ LL |     println!(\"{}\", unsafe { String::from_utf8_unchecked(vec![]) });\n    |\n    = help: consider adding a safety comment on the preceding line\n \n-error: aborting due to 18 previous errors\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:341:5\n+   |\n+LL |     unsafe impl A for () {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:348:9\n+   |\n+LL |         unsafe impl B for (u32) {}\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:369:13\n+   |\n+LL |             unsafe impl T for $t {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     no_safety_comment!(());\n+   |     ---------------------- in this macro invocation\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+   = note: this error originates in the macro `no_safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:394:13\n+   |\n+LL |             unsafe impl T for $t {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     no_safety_comment!(());\n+   |     ---------------------- in this macro invocation\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+   = note: this error originates in the macro `no_safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:402:5\n+   |\n+LL |     unsafe impl T for (i32) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:394:13\n+   |\n+LL |             unsafe impl T for $t {}\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^\n+...\n+LL |     no_safety_comment!(u32);\n+   |     ----------------------- in this macro invocation\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+   = note: this error originates in the macro `no_safety_comment` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:408:5\n+   |\n+LL |     unsafe impl T for (bool) {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:454:5\n+   |\n+LL |     unsafe impl NoComment for () {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:458:19\n+   |\n+LL |     /* SAFETY: */ unsafe impl InlineComment for () {}\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:462:5\n+   |\n+LL |     unsafe impl TrailingComment for () {} // SAFETY:\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:467:5\n+   |\n+LL |     unsafe impl Interference for () {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:474:5\n+   |\n+LL |     unsafe impl ImplInFn for () {}\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: unsafe impl missing a safety comment\n+  --> $DIR/undocumented_unsafe_blocks.rs:483:1\n+   |\n+LL | unsafe impl CrateRoot for () {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider adding a safety comment on the preceding line\n+\n+error: aborting due to 31 previous errors\n "}, {"sha": "3d271104361b68d7e08aba96f09d33541eba2de7", "filename": "src/tools/clippy/tests/ui/unit_cmp.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_cmp.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,5 +1,9 @@\n #![warn(clippy::unit_cmp)]\n-#![allow(clippy::no_effect, clippy::unnecessary_operation)]\n+#![allow(\n+    clippy::no_effect,\n+    clippy::unnecessary_operation,\n+    clippy::derive_partial_eq_without_eq\n+)]\n \n #[derive(PartialEq)]\n pub struct ContainsUnit(()); // should be fine"}, {"sha": "41cf19ae685ed6efbbb4ccd3110b2756a152852f", "filename": "src/tools/clippy/tests/ui/unit_cmp.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_cmp.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_cmp.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funit_cmp.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,5 +1,5 @@\n error: ==-comparison of unit values detected. This will always be true\n-  --> $DIR/unit_cmp.rs:12:8\n+  --> $DIR/unit_cmp.rs:16:8\n    |\n LL |       if {\n    |  ________^\n@@ -12,7 +12,7 @@ LL | |     } {}\n    = note: `-D clippy::unit-cmp` implied by `-D warnings`\n \n error: >-comparison of unit values detected. This will always be false\n-  --> $DIR/unit_cmp.rs:18:8\n+  --> $DIR/unit_cmp.rs:22:8\n    |\n LL |       if {\n    |  ________^\n@@ -23,7 +23,7 @@ LL | |     } {}\n    | |_____^\n \n error: `assert_eq` of unit values detected. This will always succeed\n-  --> $DIR/unit_cmp.rs:24:5\n+  --> $DIR/unit_cmp.rs:28:5\n    |\n LL | /     assert_eq!(\n LL | |         {\n@@ -35,7 +35,7 @@ LL | |     );\n    | |_____^\n \n error: `debug_assert_eq` of unit values detected. This will always succeed\n-  --> $DIR/unit_cmp.rs:32:5\n+  --> $DIR/unit_cmp.rs:36:5\n    |\n LL | /     debug_assert_eq!(\n LL | |         {\n@@ -47,7 +47,7 @@ LL | |     );\n    | |_____^\n \n error: `assert_ne` of unit values detected. This will always fail\n-  --> $DIR/unit_cmp.rs:41:5\n+  --> $DIR/unit_cmp.rs:45:5\n    |\n LL | /     assert_ne!(\n LL | |         {\n@@ -59,7 +59,7 @@ LL | |     );\n    | |_____^\n \n error: `debug_assert_ne` of unit values detected. This will always fail\n-  --> $DIR/unit_cmp.rs:49:5\n+  --> $DIR/unit_cmp.rs:53:5\n    |\n LL | /     debug_assert_ne!(\n LL | |         {"}, {"sha": "f4f76cd3dd493e159a656fe95276b2a41002299b", "filename": "src/tools/clippy/tests/ui/unnecessary_to_owned.fixed", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.fixed?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -78,10 +78,10 @@ fn main() {\n     require_slice(array.as_ref());\n     require_slice(array_ref.as_ref());\n     require_slice(slice);\n-    require_slice(x_ref);\n+    require_slice(&x_ref.to_owned()); // No longer flagged because of #8759.\n \n     require_x(&Cow::<X>::Owned(x.clone()));\n-    require_x(x_ref);\n+    require_x(&x_ref.to_owned()); // No longer flagged because of #8759.\n \n     require_deref_c_str(c_str);\n     require_deref_os_str(os_str);\n@@ -152,6 +152,7 @@ fn main() {\n     require_os_str(&OsString::from(\"x\"));\n     require_path(&std::path::PathBuf::from(\"x\"));\n     require_str(&String::from(\"x\"));\n+    require_slice(&[String::from(\"x\")]);\n }\n \n fn require_c_str(_: &CStr) {}\n@@ -272,3 +273,59 @@ mod issue_8507 {\n         Box::new(build(y))\n     }\n }\n+\n+// https://github.com/rust-lang/rust-clippy/issues/8759\n+mod issue_8759 {\n+    #![allow(dead_code)]\n+\n+    #[derive(Default)]\n+    struct View {}\n+\n+    impl std::borrow::ToOwned for View {\n+        type Owned = View;\n+        fn to_owned(&self) -> Self::Owned {\n+            View {}\n+        }\n+    }\n+\n+    #[derive(Default)]\n+    struct RenderWindow {\n+        default_view: View,\n+    }\n+\n+    impl RenderWindow {\n+        fn default_view(&self) -> &View {\n+            &self.default_view\n+        }\n+        fn set_view(&mut self, _view: &View) {}\n+    }\n+\n+    fn main() {\n+        let mut rw = RenderWindow::default();\n+        rw.set_view(&rw.default_view().to_owned());\n+    }\n+}\n+\n+mod issue_8759_variant {\n+    #![allow(dead_code)]\n+\n+    #[derive(Clone, Default)]\n+    struct View {}\n+\n+    #[derive(Default)]\n+    struct RenderWindow {\n+        default_view: View,\n+    }\n+\n+    impl RenderWindow {\n+        fn default_view(&self) -> &View {\n+            &self.default_view\n+        }\n+        fn set_view(&mut self, _view: &View) {}\n+    }\n+\n+    fn main() {\n+        let mut rw = RenderWindow::default();\n+        rw.set_view(&rw.default_view().to_owned());\n+    }\n+}"}, {"sha": "fe09a489ab0a67b81cf5280f3dc8b9c1140aa061", "filename": "src/tools/clippy/tests/ui/unnecessary_to_owned.rs", "status": "modified", "additions": 59, "deletions": 2, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -78,10 +78,10 @@ fn main() {\n     require_slice(&array.to_owned());\n     require_slice(&array_ref.to_owned());\n     require_slice(&slice.to_owned());\n-    require_slice(&x_ref.to_owned());\n+    require_slice(&x_ref.to_owned()); // No longer flagged because of #8759.\n \n     require_x(&Cow::<X>::Owned(x.clone()).into_owned());\n-    require_x(&x_ref.to_owned());\n+    require_x(&x_ref.to_owned()); // No longer flagged because of #8759.\n \n     require_deref_c_str(c_str.to_owned());\n     require_deref_os_str(os_str.to_owned());\n@@ -152,6 +152,7 @@ fn main() {\n     require_os_str(&OsString::from(\"x\").to_os_string());\n     require_path(&std::path::PathBuf::from(\"x\").to_path_buf());\n     require_str(&String::from(\"x\").to_string());\n+    require_slice(&[String::from(\"x\")].to_owned());\n }\n \n fn require_c_str(_: &CStr) {}\n@@ -272,3 +273,59 @@ mod issue_8507 {\n         Box::new(build(y.to_string()))\n     }\n }\n+\n+// https://github.com/rust-lang/rust-clippy/issues/8759\n+mod issue_8759 {\n+    #![allow(dead_code)]\n+\n+    #[derive(Default)]\n+    struct View {}\n+\n+    impl std::borrow::ToOwned for View {\n+        type Owned = View;\n+        fn to_owned(&self) -> Self::Owned {\n+            View {}\n+        }\n+    }\n+\n+    #[derive(Default)]\n+    struct RenderWindow {\n+        default_view: View,\n+    }\n+\n+    impl RenderWindow {\n+        fn default_view(&self) -> &View {\n+            &self.default_view\n+        }\n+        fn set_view(&mut self, _view: &View) {}\n+    }\n+\n+    fn main() {\n+        let mut rw = RenderWindow::default();\n+        rw.set_view(&rw.default_view().to_owned());\n+    }\n+}\n+\n+mod issue_8759_variant {\n+    #![allow(dead_code)]\n+\n+    #[derive(Clone, Default)]\n+    struct View {}\n+\n+    #[derive(Default)]\n+    struct RenderWindow {\n+        default_view: View,\n+    }\n+\n+    impl RenderWindow {\n+        fn default_view(&self) -> &View {\n+            &self.default_view\n+        }\n+        fn set_view(&mut self, _view: &View) {}\n+    }\n+\n+    fn main() {\n+        let mut rw = RenderWindow::default();\n+        rw.set_view(&rw.default_view().to_owned());\n+    }\n+}"}, {"sha": "af7e7b41fb0045a6a44652a20ce60436e05a62b4", "filename": "src/tools/clippy/tests/ui/unnecessary_to_owned.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_to_owned.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -47,6 +47,18 @@ note: this value is dropped without further use\n LL |     require_str(&String::from(\"x\").to_string());\n    |                  ^^^^^^^^^^^^^^^^^\n \n+error: redundant clone\n+  --> $DIR/unnecessary_to_owned.rs:155:39\n+   |\n+LL |     require_slice(&[String::from(\"x\")].to_owned());\n+   |                                       ^^^^^^^^^^^ help: remove this\n+   |\n+note: this value is dropped without further use\n+  --> $DIR/unnecessary_to_owned.rs:155:20\n+   |\n+LL |     require_slice(&[String::from(\"x\")].to_owned());\n+   |                    ^^^^^^^^^^^^^^^^^^^\n+\n error: unnecessary use of `into_owned`\n   --> $DIR/unnecessary_to_owned.rs:60:36\n    |\n@@ -151,24 +163,12 @@ error: unnecessary use of `to_owned`\n LL |     require_slice(&slice.to_owned());\n    |                   ^^^^^^^^^^^^^^^^^ help: use: `slice`\n \n-error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:81:19\n-   |\n-LL |     require_slice(&x_ref.to_owned());\n-   |                   ^^^^^^^^^^^^^^^^^ help: use: `x_ref`\n-\n error: unnecessary use of `into_owned`\n   --> $DIR/unnecessary_to_owned.rs:83:42\n    |\n LL |     require_x(&Cow::<X>::Owned(x.clone()).into_owned());\n    |                                          ^^^^^^^^^^^^^ help: remove this\n \n-error: unnecessary use of `to_owned`\n-  --> $DIR/unnecessary_to_owned.rs:84:15\n-   |\n-LL |     require_x(&x_ref.to_owned());\n-   |               ^^^^^^^^^^^^^^^^^ help: use: `x_ref`\n-\n error: unnecessary use of `to_owned`\n   --> $DIR/unnecessary_to_owned.rs:86:25\n    |\n@@ -476,7 +476,7 @@ LL |     let _ = IntoIterator::into_iter([std::path::PathBuf::new()][..].to_owne\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `[std::path::PathBuf::new()][..].iter().cloned()`\n \n error: unnecessary use of `to_vec`\n-  --> $DIR/unnecessary_to_owned.rs:197:14\n+  --> $DIR/unnecessary_to_owned.rs:198:14\n    |\n LL |     for t in file_types.to_vec() {\n    |              ^^^^^^^^^^^^^^^^^^^\n@@ -492,22 +492,22 @@ LL +         let path = match get_file_path(t) {\n    | \n \n error: unnecessary use of `to_vec`\n-  --> $DIR/unnecessary_to_owned.rs:220:14\n+  --> $DIR/unnecessary_to_owned.rs:221:14\n    |\n LL |     let _ = &[\"x\"][..].to_vec().into_iter();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `[\"x\"][..].iter().cloned()`\n \n error: unnecessary use of `to_vec`\n-  --> $DIR/unnecessary_to_owned.rs:225:14\n+  --> $DIR/unnecessary_to_owned.rs:226:14\n    |\n LL |     let _ = &[\"x\"][..].to_vec().into_iter();\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `[\"x\"][..].iter().copied()`\n \n error: unnecessary use of `to_string`\n-  --> $DIR/unnecessary_to_owned.rs:272:24\n+  --> $DIR/unnecessary_to_owned.rs:273:24\n    |\n LL |         Box::new(build(y.to_string()))\n    |                        ^^^^^^^^^^^^^ help: use: `y`\n \n-error: aborting due to 79 previous errors\n+error: aborting due to 78 previous errors\n "}, {"sha": "39f54c27bee1a6356e40ad4628a9b6f10e086e14", "filename": "src/tools/clippy/tests/ui/useless_conversion_try.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion_try.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion_try.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion_try.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,7 +1,5 @@\n #![deny(clippy::useless_conversion)]\n \n-use std::convert::{TryFrom, TryInto};\n-\n fn test_generic<T: Copy>(val: T) -> T {\n     let _ = T::try_from(val).unwrap();\n     val.try_into().unwrap()"}, {"sha": "b691c13f7dbb747ac540e2258a071b53419a186e", "filename": "src/tools/clippy/tests/ui/useless_conversion_try.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion_try.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion_try.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fuseless_conversion_try.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -1,5 +1,5 @@\n error: useless conversion to the same type: `T`\n-  --> $DIR/useless_conversion_try.rs:6:13\n+  --> $DIR/useless_conversion_try.rs:4:13\n    |\n LL |     let _ = T::try_from(val).unwrap();\n    |             ^^^^^^^^^^^^^^^^\n@@ -12,63 +12,63 @@ LL | #![deny(clippy::useless_conversion)]\n    = help: consider removing `T::try_from()`\n \n error: useless conversion to the same type: `T`\n-  --> $DIR/useless_conversion_try.rs:7:5\n+  --> $DIR/useless_conversion_try.rs:5:5\n    |\n LL |     val.try_into().unwrap()\n    |     ^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion_try.rs:29:21\n+  --> $DIR/useless_conversion_try.rs:27:21\n    |\n LL |     let _: String = \"foo\".to_string().try_into().unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion_try.rs:30:21\n+  --> $DIR/useless_conversion_try.rs:28:21\n    |\n LL |     let _: String = TryFrom::try_from(\"foo\".to_string()).unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `TryFrom::try_from()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion_try.rs:31:13\n+  --> $DIR/useless_conversion_try.rs:29:13\n    |\n LL |     let _ = String::try_from(\"foo\".to_string()).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `String::try_from()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion_try.rs:32:13\n+  --> $DIR/useless_conversion_try.rs:30:13\n    |\n LL |     let _ = String::try_from(format!(\"A: {:04}\", 123)).unwrap();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `String::try_from()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion_try.rs:33:21\n+  --> $DIR/useless_conversion_try.rs:31:21\n    |\n LL |     let _: String = format!(\"Hello {}\", \"world\").try_into().unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion_try.rs:34:21\n+  --> $DIR/useless_conversion_try.rs:32:21\n    |\n LL |     let _: String = \"\".to_owned().try_into().unwrap();\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider removing `.try_into()`\n \n error: useless conversion to the same type: `std::string::String`\n-  --> $DIR/useless_conversion_try.rs:35:27\n+  --> $DIR/useless_conversion_try.rs:33:27\n    |\n LL |     let _: String = match String::from(\"_\").try_into() {\n    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "531745424a7d02b77c8503480b81eb9b72ad2103", "filename": "src/tools/clippy/tests/ui/vec_init_then_push.rs", "status": "modified", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fvec_init_then_push.rs?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -29,6 +29,12 @@ fn main() {\n         // no lint\n         vec.push(1);\n     }\n+\n+    let mut vec = Vec::with_capacity(5);\n+    vec.push(1);\n+    vec.push(2);\n+    vec.push(3);\n+    vec.push(4);\n }\n \n pub fn no_lint() -> Vec<i32> {\n@@ -44,3 +50,57 @@ pub fn no_lint() -> Vec<i32> {\n         }\n     }\n }\n+\n+fn _from_iter(items: impl Iterator<Item = u32>) -> Vec<u32> {\n+    let mut v = Vec::new();\n+    v.push(0);\n+    v.push(1);\n+    v.extend(items);\n+    v\n+}\n+\n+fn _cond_push(x: bool) -> Vec<u32> {\n+    let mut v = Vec::new();\n+    v.push(0);\n+    if x {\n+        v.push(1);\n+    }\n+    v.push(2);\n+    v\n+}\n+\n+fn _push_then_edit(x: u32) -> Vec<u32> {\n+    let mut v = Vec::new();\n+    v.push(x);\n+    v.push(1);\n+    v[0] = v[1] + 5;\n+    v\n+}\n+\n+fn _cond_push_with_large_start(x: bool) -> Vec<u32> {\n+    let mut v = Vec::new();\n+    v.push(0);\n+    v.push(1);\n+    v.push(0);\n+    v.push(1);\n+    v.push(0);\n+    v.push(0);\n+    v.push(1);\n+    v.push(0);\n+    if x {\n+        v.push(1);\n+    }\n+\n+    let mut v2 = Vec::new();\n+    v2.push(0);\n+    v2.push(1);\n+    v2.push(0);\n+    v2.push(1);\n+    v2.push(0);\n+    v2.push(0);\n+    v2.push(1);\n+    v2.push(0);\n+    v2.extend(&v);\n+\n+    v2\n+}"}, {"sha": "50b029fc33727a2a23351099f8beb60ac88271f1", "filename": "src/tools/clippy/tests/ui/vec_init_then_push.stderr", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fvec_init_then_push.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fvec_init_then_push.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fvec_init_then_push.stderr?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -3,7 +3,7 @@ error: calls to `push` immediately after creation\n    |\n LL | /     let mut def_err: Vec<u32> = Default::default();\n LL | |     def_err.push(0);\n-   | |____________________^ help: consider using the `vec![]` macro: `let mut def_err: Vec<u32> = vec![..];`\n+   | |____________________^ help: consider using the `vec![]` macro: `let def_err: Vec<u32> = vec![..];`\n    |\n    = note: `-D clippy::vec-init-then-push` implied by `-D warnings`\n \n@@ -30,5 +30,37 @@ LL | /     new_err = Vec::new();\n LL | |     new_err.push(0);\n    | |____________________^ help: consider using the `vec![]` macro: `new_err = vec![..];`\n \n-error: aborting due to 4 previous errors\n+error: calls to `push` immediately after creation\n+  --> $DIR/vec_init_then_push.rs:73:5\n+   |\n+LL | /     let mut v = Vec::new();\n+LL | |     v.push(x);\n+LL | |     v.push(1);\n+   | |______________^ help: consider using the `vec![]` macro: `let mut v = vec![..];`\n+\n+error: calls to `push` immediately after creation\n+  --> $DIR/vec_init_then_push.rs:81:5\n+   |\n+LL | /     let mut v = Vec::new();\n+LL | |     v.push(0);\n+LL | |     v.push(1);\n+LL | |     v.push(0);\n+...  |\n+LL | |     v.push(1);\n+LL | |     v.push(0);\n+   | |______________^ help: consider using the `vec![]` macro: `let mut v = vec![..];`\n+\n+error: calls to `push` immediately after creation\n+  --> $DIR/vec_init_then_push.rs:94:5\n+   |\n+LL | /     let mut v2 = Vec::new();\n+LL | |     v2.push(0);\n+LL | |     v2.push(1);\n+LL | |     v2.push(0);\n+...  |\n+LL | |     v2.push(1);\n+LL | |     v2.push(0);\n+   | |_______________^ help: consider using the `vec![]` macro: `let mut v2 = vec![..];`\n+\n+error: aborting due to 7 previous errors\n "}, {"sha": "2076d1299783d40a8cd5f8ac70bed61c9e9d3a63", "filename": "src/tools/clippy/util/gh-pages/index.html", "status": "modified", "additions": 94, "deletions": 302, "changes": 396, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Findex.html?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -94,6 +94,29 @@\n         @media (min-width: 992px) {\n             .search-control {\n                 margin-top: 0;\n+                float: right;\n+            }\n+        }\n+\n+        @media (min-width: 405px) {\n+            #upper-filters {\n+                display: flex;\n+            }\n+        }\n+\n+        @media (max-width: 430px) {\n+            /* Turn the version filter list to the left */\n+            #version-filter-selector {\n+                right: 0;\n+                left: auto;\n+            }\n+        }\n+\n+        @media (max-width: 412px) {\n+            #upper-filters,\n+            .panel-body .search-control  {\n+                padding-right: 8px;\n+                padding-left: 8px;\n             }\n         }\n \n@@ -244,7 +267,7 @@\n             cursor: pointer;\n         }\n \n-        .theme-choice>li:hover {\n+        .theme-choice > li:hover {\n             background: var(--theme-hover);\n         }\n \n@@ -273,23 +296,44 @@\n             border: 1px solid var(--theme-popup-border);\n         }\n \n-        #filter-label, #filter-clear {\n+        #version-filter-selector .checkbox {\n+            display: flex;\n+        }\n+\n+        #version-filter {\n+            min-width: available;\n+        }\n+\n+        #version-filter li label {\n+            padding-right: 0;\n+            width: 35%;\n+        }\n+\n+        .version-filter-input {\n+            height: 60%;\n+            width: 30%;\n+            text-align: center;\n+            border: none;\n+            border-bottom: 1px solid #000000;\n+        }\n+\n+        #filter-label, .filter-clear {\n             background: var(--searchbar-bg);\n             color: var(--searchbar-fg);\n             border-color: var(--theme-popup-border);\n             filter: brightness(95%);\n         }\n-        #filter-label:hover, #filter-clear:hover {\n+        #filter-label:hover, .filter-clear:hover {\n             filter: brightness(90%);\n         }\n-        #filter-input {\n+        .filter-input {\n             background: var(--searchbar-bg);\n             color: var(--searchbar-fg);\n             border-color: var(--theme-popup-border);\n         }\n \n-        #filter-input::-webkit-input-placeholder,\n-        #filter-input::-moz-placeholder {\n+        .filter-input::-webkit-input-placeholder,\n+        .filter-input::-moz-placeholder {\n             color: var(--searchbar-fg);\n             opacity: 30%;\n         }\n@@ -338,7 +382,7 @@ <h1>Clippy Lints</h1>\n \n             <div class=\"panel panel-default\" ng-show=\"data\">\n                 <div class=\"panel-body row\">\n-                    <div class=\"col-12 col-md-4\">\n+                    <div id=\"upper-filters\" class=\"col-12 col-md-4\">\n                         <div class=\"btn-group\" filter-dropdown>\n                             <button type=\"button\" class=\"btn btn-default dropdown-toggle\">\n                                 Lint levels <span class=\"badge\">{{selectedValuesCount(levels)}}</span> <span class=\"caret\"></span>\n@@ -391,13 +435,47 @@ <h1>Clippy Lints</h1>\n                                 </li>\n                             </ul>\n                         </div>\n+                        <div id=\"version-filter\">\n+                            <div class=\"btn-group\" filter-dropdown>\n+                                <button type=\"button\" class=\"btn btn-default dropdown-toggle\">\n+                                    Version\n+                                    <span id=\"version-filter-count\" class=\"badge\">\n+                                        {{versionFilterCount(versionFilters)}}\n+                                    </span>\n+                                    <span class=\"caret\"></span>\n+                                </button>\n+                                <ul id=\"version-filter-selector\" class=\"dropdown-menu\">\n+                                    <li class=\"checkbox\">\n+                                        <label ng-click=\"clearVersionFilters()\">\n+                                            <input type=\"checkbox\" class=\"invisible\" />\n+                                            Clear filters\n+                                        </label>\n+                                    </li>\n+                                    <li role=\"separator\" class=\"divider\"></li>\n+                                    <li class=\"checkbox\" ng-repeat=\"(filter, vars) in versionFilters\">\n+                                        <label ng-attr-for=\"filter-{filter}\">{{filter}}</label>\n+                                        <span>1.</span>\n+                                        <input type=\"number\"\n+                                                min=\"29\"\n+                                                ng-attr-id=\"filter-{filter}\"\n+                                                class=\"version-filter-input form-control filter-input\"\n+                                                maxlength=\"2\"\n+                                                ng-model=\"versionFilters[filter].minorVersion\"\n+                                                ng-model-options=\"{debounce: 50}\"\n+                                                ng-change=\"updateVersionFilters()\" />\n+                                        <span>.0</span>\n+                                    </li>\n+                                </ul>\n+                            </div>\n+                        </div>\n+\n                     </div>\n-                    <div class=\"col-12 col-md-8 search-control\">\n+                    <div class=\"col-12 col-md-7 search-control\">\n                         <div class=\"input-group\">\n-                            <label class=\"input-group-addon\" id=\"filter-label\" for=\"filter-input\">Filter:</label>\n-                            <input type=\"text\" class=\"form-control\" placeholder=\"Keywords or search string\" id=\"filter-input\" ng-model=\"search\" ng-model-options=\"{debounce: 50}\"/>\n+                            <label class=\"input-group-addon\" id=\"filter-label\" for=\"search-input\">Filter:</label>\n+                            <input type=\"text\" class=\"form-control filter-input\" placeholder=\"Keywords or search string\" id=\"search-input\" ng-model=\"search\" ng-model-options=\"{debounce: 50}\"/>\n                             <span class=\"input-group-btn\">\n-                                <button id=\"filter-clear\" class=\"btn\" type=\"button\" ng-click=\"search = ''\">\n+                                <button class=\"filter-clear btn\" type=\"button\" ng-click=\"search = ''\">\n                                     Clear\n                                 </button>\n                             </span>\n@@ -406,12 +484,15 @@ <h1>Clippy Lints</h1>\n                 </div>\n             </div>\n             <!-- The order of the filters should be from most likely to remove a lint to least likely to improve performance. -->\n-            <article class=\"panel panel-default\" id=\"{{lint.id}}\" ng-repeat=\"lint in data | filter:bySearch | filter:byGroups | filter:byLevels\">\n+            <article class=\"panel panel-default\" id=\"{{lint.id}}\" ng-repeat=\"lint in data | filter:bySearch | filter:byGroups | filter:byLevels | filter:byVersion\">\n                 <header class=\"panel-heading\" ng-click=\"open[lint.id] = !open[lint.id]\">\n                     <h2 class=\"panel-title\">\n                         <div class=\"panel-title-name\">\n                             <span>{{lint.id}}</span>\n                             <a href=\"#{{lint.id}}\" class=\"anchor label label-default\" ng-click=\"open[lint.id] = true; $event.stopPropagation()\">&para;</a>\n+                            <a href=\"\" id=\"clipboard-{{lint.id}}\" class=\"anchor label label-default\" ng-click=\"copyToClipboard(lint); $event.stopPropagation()\">\n+                                &#128203;\n+                            </a>\n                         </div>\n \n                         <div class=\"panel-title-addons\">\n@@ -462,295 +543,6 @@ <h2 class=\"panel-title\">\n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/highlight.min.js\"></script>\n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/9.5.0/languages/rust.min.js\"></script>\n     <script src=\"https://cdnjs.cloudflare.com/ajax/libs/angular.js/1.4.12/angular.min.js\"></script>\n-    <script>\n-    (function () {\n-        var md = window.markdownit({\n-            html: true,\n-            linkify: true,\n-            typographer: true,\n-            highlight: function (str, lang) {\n-                if (lang && hljs.getLanguage(lang)) {\n-                    try {\n-                        return '<pre class=\"hljs\"><code>' +\n-                            hljs.highlight(lang, str, true).value +\n-                            '</code></pre>';\n-                    } catch (__) {}\n-                }\n-\n-                return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n-            }\n-        });\n-\n-        function scrollToLint(lintId) {\n-            var target = document.getElementById(lintId);\n-            if (!target) {\n-                return;\n-            }\n-            target.scrollIntoView();\n-        }\n-\n-        function scrollToLintByURL($scope) {\n-            var removeListener = $scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {\n-                scrollToLint(window.location.hash.slice(1));\n-                removeListener();\n-            });\n-        }\n-\n-        function selectGroup($scope, selectedGroup) {\n-            var groups = $scope.groups;\n-            for (var group in groups) {\n-                if (groups.hasOwnProperty(group)) {\n-                    if (group === selectedGroup) {\n-                        groups[group] = true;\n-                    } else {\n-                        groups[group] = false;\n-                    }\n-                }\n-            }\n-        }\n-\n-        angular.module(\"clippy\", [])\n-        .filter('markdown', function ($sce) {\n-            return function (text) {\n-                return $sce.trustAsHtml(\n-                    md.render(text || '')\n-                    // Oh deer, what a hack :O\n-                    .replace('<table', '<table class=\"table\"')\n-                );\n-            };\n-        })\n-        .directive('themeDropdown', function ($document) {\n-            return {\n-                restrict: 'A',\n-                link: function ($scope, $element, $attr) {\n-                    $element.bind('click', function () {\n-                        $element.toggleClass('open');\n-                        $element.addClass('open-recent');\n-                    });\n-\n-                    $document.bind('click', function () {\n-                        if (!$element.hasClass('open-recent')) {\n-                            $element.removeClass('open');\n-                        }\n-                        $element.removeClass('open-recent');\n-                    })\n-                }\n-            }\n-        })\n-        .directive('filterDropdown', function ($document) {\n-            return {\n-                restrict: 'A',\n-                link: function ($scope, $element, $attr) {\n-                    $element.bind('click', function (event) {\n-                        if (event.target.closest('button')) {\n-                            $element.toggleClass('open');\n-                        } else {\n-                            $element.addClass('open');\n-                        }\n-                        $element.addClass('open-recent');\n-                    });\n-\n-                    $document.bind('click', function () {\n-                        if (!$element.hasClass('open-recent')) {\n-                            $element.removeClass('open');\n-                        }\n-                        $element.removeClass('open-recent');\n-                    })\n-                }\n-            }\n-        })\n-        .directive('onFinishRender', function ($timeout) {\n-            return {\n-                restrict: 'A',\n-                link: function (scope, element, attr) {\n-                    if (scope.$last === true) {\n-                        $timeout(function () {\n-                            scope.$emit(attr.onFinishRender);\n-                        });\n-                    }\n-                }\n-            };\n-        })\n-        .controller(\"lintList\", function ($scope, $http, $timeout) {\n-            // Level filter\n-            var LEVEL_FILTERS_DEFAULT = {allow: true, warn: true, deny: true, none: true};\n-            $scope.levels = LEVEL_FILTERS_DEFAULT;\n-            $scope.byLevels = function (lint) {\n-                return $scope.levels[lint.level];\n-            };\n-\n-            var GROUPS_FILTER_DEFAULT = {\n-                cargo: true,\n-                complexity: true,\n-                correctness: true,\n-                deprecated: false,\n-                nursery: true,\n-                pedantic: true,\n-                perf: true,\n-                restriction: true,\n-                style: true,\n-                suspicious: true,\n-            };\n-            $scope.groups = GROUPS_FILTER_DEFAULT;\n-            const THEMES_DEFAULT = {\n-                light: \"Light\",\n-                rust: \"Rust\",\n-                coal: \"Coal\",\n-                navy: \"Navy\",\n-                ayu: \"Ayu\"\n-            };\n-            $scope.themes = THEMES_DEFAULT;\n-\n-            $scope.selectTheme = function (theme) {\n-                setTheme(theme, true);\n-            }\n-\n-            $scope.toggleLevels = function (value) {\n-                const levels = $scope.levels;\n-                for (const key in levels) {\n-                    if (levels.hasOwnProperty(key)) {\n-                        levels[key] = value;\n-                    }\n-                }\n-            };\n-            $scope.toggleGroups = function (value) {\n-                const groups = $scope.groups;\n-                for (const key in groups) {\n-                    if (groups.hasOwnProperty(key)) {\n-                        groups[key] = value;\n-                    }\n-                }\n-            };\n-            $scope.selectedValuesCount = function (obj) {\n-                return Object.values(obj).filter(x => x).length;\n-            }\n-            $scope.byGroups = function (lint) {\n-                return $scope.groups[lint.group];\n-            };\n-\n-            $scope.bySearch = function (lint, index, array) {\n-                let searchStr = $scope.search;\n-                // It can be `null` I haven't missed this value\n-                if (searchStr == null || searchStr.length < 3) {\n-                    return true;\n-                }\n-                searchStr = searchStr.toLowerCase();\n-\n-                // Search by id\n-                if (lint.id.indexOf(searchStr.replace(\"-\", \"_\")) !== -1) {\n-                    return true;\n-                }\n-\n-                // Search the description\n-                // The use of `for`-loops instead of `foreach` enables us to return early\n-                let terms = searchStr.split(\" \");\n-                let docsLowerCase = lint.docs.toLowerCase();\n-                for (index = 0; index < terms.length; index++) {\n-                    // This is more likely and will therefor be checked first\n-                    if (docsLowerCase.indexOf(terms[index]) !== -1) {\n-                        continue;\n-                    }\n-\n-                    if (lint.id.indexOf(terms[index]) !== -1) {\n-                        continue;\n-                    }\n-\n-                    return false;\n-                }\n-\n-                return true;\n-            }\n-\n-            // Get data\n-            $scope.open = {};\n-            $scope.loading = true;\n-            // This will be used to jump into the source code of the version that this documentation is for.\n-            $scope.docVersion = window.location.pathname.split('/')[2] || \"master\";\n-\n-            if (window.location.hash.length > 1) {\n-                $scope.search = window.location.hash.slice(1);\n-                $scope.open[window.location.hash.slice(1)] = true;\n-                scrollToLintByURL($scope);\n-            }\n-\n-            $http.get('./lints.json')\n-            .success(function (data) {\n-                $scope.data = data;\n-                $scope.loading = false;\n-\n-                var selectedGroup = getQueryVariable(\"sel\");\n-                if (selectedGroup) {\n-                    selectGroup($scope, selectedGroup.toLowerCase());\n-                }\n-\n-                scrollToLintByURL($scope);\n-\n-                setTimeout(function () {\n-                    var el = document.getElementById('filter-input');\n-                    if (el) { el.focus() }\n-                }, 0);\n-            })\n-            .error(function (data) {\n-                $scope.error = data;\n-                $scope.loading = false;\n-            });\n-\n-            window.addEventListener('hashchange', function () {\n-                // trigger re-render\n-                $timeout(function () {\n-                    $scope.levels = LEVEL_FILTERS_DEFAULT;\n-                    $scope.search = window.location.hash.slice(1);\n-                    $scope.open[window.location.hash.slice(1)] = true;\n-\n-                    scrollToLintByURL($scope);\n-                });\n-                return true;\n-            }, false);\n-        });\n-    })();\n-\n-    function getQueryVariable(variable) {\n-        var query = window.location.search.substring(1);\n-        var vars = query.split('&');\n-        for (var i = 0; i < vars.length; i++) {\n-            var pair = vars[i].split('=');\n-            if (decodeURIComponent(pair[0]) == variable) {\n-                return decodeURIComponent(pair[1]);\n-            }\n-        }\n-    }\n-\n-    function setTheme(theme, store) {\n-        let enableHighlight = false;\n-        let enableNight = false;\n-        let enableAyu = false;\n-\n-        if (theme == \"ayu\") {\n-            enableAyu = true;\n-        } else if (theme == \"coal\" || theme == \"navy\") {\n-            enableNight = true;\n-        } else if (theme == \"rust\") {\n-            enableHighlight = true;\n-        } else {\n-            enableHighlight = true;\n-            // this makes sure that an unknown theme request gets set to a known one\n-            theme = \"light\";\n-        }\n-        document.getElementsByTagName(\"body\")[0].className = theme;\n-\n-        document.getElementById(\"styleHighlight\").disabled = !enableHighlight;\n-        document.getElementById(\"styleNight\").disabled = !enableNight;\n-        document.getElementById(\"styleAyu\").disabled = !enableAyu;\n-\n-        if (store) {\n-            try {\n-                localStorage.setItem('clippy-lint-list-theme', theme);\n-            } catch (e) { }\n-        }\n-    }\n-\n-    // loading the theme after the initial load\n-    setTheme(localStorage.getItem('clippy-lint-list-theme'), false);\n-    </script>\n+    <script src=\"script.js\"></script>\n </body>\n </html>"}, {"sha": "bf4ce79b2cbc90334fbebad3bc1fbe9ddd8288e2", "filename": "src/tools/clippy/util/gh-pages/script.js", "status": "added", "additions": 371, "deletions": 0, "changes": 371, "blob_url": "https://github.com/rust-lang/rust/blob/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Fscript.js", "raw_url": "https://github.com/rust-lang/rust/raw/bb4781aa277b6746e6f072252ddad95c59e94fd1/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Fscript.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Futil%2Fgh-pages%2Fscript.js?ref=bb4781aa277b6746e6f072252ddad95c59e94fd1", "patch": "@@ -0,0 +1,371 @@\n+(function () {\n+    var md = window.markdownit({\n+        html: true,\n+        linkify: true,\n+        typographer: true,\n+        highlight: function (str, lang) {\n+            if (lang && hljs.getLanguage(lang)) {\n+                try {\n+                    return '<pre class=\"hljs\"><code>' +\n+                        hljs.highlight(lang, str, true).value +\n+                        '</code></pre>';\n+                } catch (__) {}\n+            }\n+\n+            return '<pre class=\"hljs\"><code>' + md.utils.escapeHtml(str) + '</code></pre>';\n+        }\n+    });\n+\n+    function scrollToLint(lintId) {\n+        var target = document.getElementById(lintId);\n+        if (!target) {\n+            return;\n+        }\n+        target.scrollIntoView();\n+    }\n+\n+    function scrollToLintByURL($scope) {\n+        var removeListener = $scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {\n+            scrollToLint(window.location.hash.slice(1));\n+            removeListener();\n+        });\n+    }\n+\n+    function selectGroup($scope, selectedGroup) {\n+        var groups = $scope.groups;\n+        for (var group in groups) {\n+            if (groups.hasOwnProperty(group)) {\n+                if (group === selectedGroup) {\n+                    groups[group] = true;\n+                } else {\n+                    groups[group] = false;\n+                }\n+            }\n+        }\n+    }\n+\n+    angular.module(\"clippy\", [])\n+        .filter('markdown', function ($sce) {\n+            return function (text) {\n+                return $sce.trustAsHtml(\n+                    md.render(text || '')\n+                        // Oh deer, what a hack :O\n+                        .replace('<table', '<table class=\"table\"')\n+                );\n+            };\n+        })\n+        .directive('themeDropdown', function ($document) {\n+            return {\n+                restrict: 'A',\n+                link: function ($scope, $element, $attr) {\n+                    $element.bind('click', function () {\n+                        $element.toggleClass('open');\n+                        $element.addClass('open-recent');\n+                    });\n+\n+                    $document.bind('click', function () {\n+                        if (!$element.hasClass('open-recent')) {\n+                            $element.removeClass('open');\n+                        }\n+                        $element.removeClass('open-recent');\n+                    })\n+                }\n+            }\n+        })\n+        .directive('filterDropdown', function ($document) {\n+            return {\n+                restrict: 'A',\n+                link: function ($scope, $element, $attr) {\n+                    $element.bind('click', function (event) {\n+                        if (event.target.closest('button')) {\n+                            $element.toggleClass('open');\n+                        } else {\n+                            $element.addClass('open');\n+                        }\n+                        $element.addClass('open-recent');\n+                    });\n+\n+                    $document.bind('click', function () {\n+                        if (!$element.hasClass('open-recent')) {\n+                            $element.removeClass('open');\n+                        }\n+                        $element.removeClass('open-recent');\n+                    })\n+                }\n+            }\n+        })\n+        .directive('onFinishRender', function ($timeout) {\n+            return {\n+                restrict: 'A',\n+                link: function (scope, element, attr) {\n+                    if (scope.$last === true) {\n+                        $timeout(function () {\n+                            scope.$emit(attr.onFinishRender);\n+                        });\n+                    }\n+                }\n+            };\n+        })\n+        .controller(\"lintList\", function ($scope, $http, $timeout) {\n+            // Level filter\n+            var LEVEL_FILTERS_DEFAULT = {allow: true, warn: true, deny: true, none: true};\n+            $scope.levels = LEVEL_FILTERS_DEFAULT;\n+            $scope.byLevels = function (lint) {\n+                return $scope.levels[lint.level];\n+            };\n+\n+            var GROUPS_FILTER_DEFAULT = {\n+                cargo: true,\n+                complexity: true,\n+                correctness: true,\n+                deprecated: false,\n+                nursery: true,\n+                pedantic: true,\n+                perf: true,\n+                restriction: true,\n+                style: true,\n+                suspicious: true,\n+            };\n+            $scope.groups = GROUPS_FILTER_DEFAULT;\n+            const THEMES_DEFAULT = {\n+                light: \"Light\",\n+                rust: \"Rust\",\n+                coal: \"Coal\",\n+                navy: \"Navy\",\n+                ayu: \"Ayu\"\n+            };\n+            $scope.themes = THEMES_DEFAULT;\n+\n+            $scope.versionFilters = {\n+                \"\u2265\": {enabled: false, minorVersion: null },\n+                \"\u2264\": {enabled: false, minorVersion: null },\n+                \"=\": {enabled: false, minorVersion: null },\n+            };\n+\n+            $scope.selectTheme = function (theme) {\n+                setTheme(theme, true);\n+            }\n+\n+            $scope.toggleLevels = function (value) {\n+                const levels = $scope.levels;\n+                for (const key in levels) {\n+                    if (levels.hasOwnProperty(key)) {\n+                        levels[key] = value;\n+                    }\n+                }\n+            };\n+\n+            $scope.toggleGroups = function (value) {\n+                const groups = $scope.groups;\n+                for (const key in groups) {\n+                    if (groups.hasOwnProperty(key)) {\n+                        groups[key] = value;\n+                    }\n+                }\n+            };\n+\n+            $scope.selectedValuesCount = function (obj) {\n+                return Object.values(obj).filter(x => x).length;\n+            }\n+\n+            $scope.clearVersionFilters = function () {\n+                for (let filter in $scope.versionFilters) {\n+                    $scope.versionFilters[filter] = { enabled: false, minorVersion: null };\n+                }\n+            }\n+\n+            $scope.versionFilterCount = function(obj) {\n+                return Object.values(obj).filter(x => x.enabled).length;\n+            }\n+\n+            $scope.updateVersionFilters = function() {\n+                for (const filter in $scope.versionFilters) {\n+                    let minorVersion = $scope.versionFilters[filter].minorVersion;\n+\n+                    // 1.29.0 and greater\n+                    if (minorVersion && minorVersion > 28) {\n+                        $scope.versionFilters[filter].enabled = true;\n+                        continue;\n+                    }\n+\n+                    $scope.versionFilters[filter].enabled = false;\n+                }\n+            }\n+\n+            $scope.byVersion = function(lint) {\n+                let filters = $scope.versionFilters;\n+                for (const filter in filters) {\n+                    if (filters[filter].enabled) {\n+                        let minorVersion = filters[filter].minorVersion;\n+\n+                        // Strip the \"pre \" prefix for pre 1.29.0 lints\n+                        let lintVersion = lint.version.startsWith(\"pre \") ? lint.version.substring(4, lint.version.length) : lint.version;\n+                        let lintMinorVersion = lintVersion.substring(2, 4);\n+\n+                        switch (filter) {\n+                            // \"=\" gets the highest priority, since all filters are inclusive\n+                            case \"=\":\n+                                return (lintMinorVersion == minorVersion);\n+                            case \"\u2265\":\n+                                if (lintMinorVersion < minorVersion) { return false; }\n+                                break;\n+                            case \"\u2264\":\n+                                if (lintMinorVersion > minorVersion) { return false; }\n+                                break;\n+                            default:\n+                                return true\n+                        }\n+                    }\n+                }\n+\n+                return true;\n+            }\n+\n+            $scope.byGroups = function (lint) {\n+                return $scope.groups[lint.group];\n+            };\n+\n+            $scope.bySearch = function (lint, index, array) {\n+                let searchStr = $scope.search;\n+                // It can be `null` I haven't missed this value\n+                if (searchStr == null || searchStr.length < 3) {\n+                    return true;\n+                }\n+                searchStr = searchStr.toLowerCase();\n+\n+                // Search by id\n+                if (lint.id.indexOf(searchStr.replace(\"-\", \"_\")) !== -1) {\n+                    return true;\n+                }\n+\n+                // Search the description\n+                // The use of `for`-loops instead of `foreach` enables us to return early\n+                let terms = searchStr.split(\" \");\n+                let docsLowerCase = lint.docs.toLowerCase();\n+                for (index = 0; index < terms.length; index++) {\n+                    // This is more likely and will therefor be checked first\n+                    if (docsLowerCase.indexOf(terms[index]) !== -1) {\n+                        continue;\n+                    }\n+\n+                    if (lint.id.indexOf(terms[index]) !== -1) {\n+                        continue;\n+                    }\n+\n+                    return false;\n+                }\n+\n+                return true;\n+            }\n+\n+            $scope.copyToClipboard = function (lint) {\n+                const clipboard = document.getElementById(\"clipboard-\" + lint.id);\n+                if (clipboard) {\n+                    let resetClipboardTimeout = null;\n+                    let resetClipboardIcon = clipboard.innerHTML;\n+\n+                    function resetClipboard() {\n+                        resetClipboardTimeout = null;\n+                        clipboard.innerHTML = resetClipboardIcon;\n+                    }\n+\n+                    navigator.clipboard.writeText(\"clippy::\" + lint.id);\n+\n+                    clipboard.innerHTML = \"&#10003;\";\n+                    if (resetClipboardTimeout !== null) {\n+                        clearTimeout(resetClipboardTimeout);\n+                    }\n+                    resetClipboardTimeout = setTimeout(resetClipboard, 1000);\n+                }\n+            }\n+\n+            // Get data\n+            $scope.open = {};\n+            $scope.loading = true;\n+            // This will be used to jump into the source code of the version that this documentation is for.\n+            $scope.docVersion = window.location.pathname.split('/')[2] || \"master\";\n+\n+            if (window.location.hash.length > 1) {\n+                $scope.search = window.location.hash.slice(1);\n+                $scope.open[window.location.hash.slice(1)] = true;\n+                scrollToLintByURL($scope);\n+            }\n+\n+            $http.get('./lints.json')\n+                .success(function (data) {\n+                    $scope.data = data;\n+                    $scope.loading = false;\n+\n+                    var selectedGroup = getQueryVariable(\"sel\");\n+                    if (selectedGroup) {\n+                        selectGroup($scope, selectedGroup.toLowerCase());\n+                    }\n+\n+                    scrollToLintByURL($scope);\n+\n+                    setTimeout(function () {\n+                        var el = document.getElementById('filter-input');\n+                        if (el) { el.focus() }\n+                    }, 0);\n+                })\n+                .error(function (data) {\n+                    $scope.error = data;\n+                    $scope.loading = false;\n+                });\n+\n+            window.addEventListener('hashchange', function () {\n+                // trigger re-render\n+                $timeout(function () {\n+                    $scope.levels = LEVEL_FILTERS_DEFAULT;\n+                    $scope.search = window.location.hash.slice(1);\n+                    $scope.open[window.location.hash.slice(1)] = true;\n+\n+                    scrollToLintByURL($scope);\n+                });\n+                return true;\n+            }, false);\n+        });\n+})();\n+\n+function getQueryVariable(variable) {\n+    var query = window.location.search.substring(1);\n+    var vars = query.split('&');\n+    for (var i = 0; i < vars.length; i++) {\n+        var pair = vars[i].split('=');\n+        if (decodeURIComponent(pair[0]) == variable) {\n+            return decodeURIComponent(pair[1]);\n+        }\n+    }\n+}\n+\n+function setTheme(theme, store) {\n+    let enableHighlight = false;\n+    let enableNight = false;\n+    let enableAyu = false;\n+\n+    if (theme == \"ayu\") {\n+        enableAyu = true;\n+    } else if (theme == \"coal\" || theme == \"navy\") {\n+        enableNight = true;\n+    } else if (theme == \"rust\") {\n+        enableHighlight = true;\n+    } else {\n+        enableHighlight = true;\n+        // this makes sure that an unknown theme request gets set to a known one\n+        theme = \"light\";\n+    }\n+    document.getElementsByTagName(\"body\")[0].className = theme;\n+\n+    document.getElementById(\"styleHighlight\").disabled = !enableHighlight;\n+    document.getElementById(\"styleNight\").disabled = !enableNight;\n+    document.getElementById(\"styleAyu\").disabled = !enableAyu;\n+\n+    if (store) {\n+        try {\n+            localStorage.setItem('clippy-lint-list-theme', theme);\n+        } catch (e) { }\n+    }\n+}\n+\n+// loading the theme after the initial load\n+setTheme(localStorage.getItem('clippy-lint-list-theme'), false);"}]}