{"sha": "7c66a89849b2d0025121a0898c4ab298da8814bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNjZhODk4NDliMmQwMDI1MTIxYTA4OThjNGFiMjk4ZGE4ODE0YmY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-19T11:42:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-19T11:42:02Z"}, "message": "Auto merge of #32351 - eddyb:rollup, r=eddyb\n\nRollup of 14 pull requests\n\n- Successful merges: #32265, #32269, #32271, #32288, #32308, #32316, #32319, #32321, #32327, #32329, #32332, #32337, #32342, #32347\n- Failed merges:", "tree": {"sha": "a2f2f1634731e9ec08a94b7ccf0e9be8d23148ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2f2f1634731e9ec08a94b7ccf0e9be8d23148ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c66a89849b2d0025121a0898c4ab298da8814bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c66a89849b2d0025121a0898c4ab298da8814bf", "html_url": "https://github.com/rust-lang/rust/commit/7c66a89849b2d0025121a0898c4ab298da8814bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c66a89849b2d0025121a0898c4ab298da8814bf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b854149a48723dabdd908063ffeedbef66a27277", "url": "https://api.github.com/repos/rust-lang/rust/commits/b854149a48723dabdd908063ffeedbef66a27277", "html_url": "https://github.com/rust-lang/rust/commit/b854149a48723dabdd908063ffeedbef66a27277"}, {"sha": "5bf1e58bc0f999a8c179e8a641779bed2d2cad4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bf1e58bc0f999a8c179e8a641779bed2d2cad4e", "html_url": "https://github.com/rust-lang/rust/commit/5bf1e58bc0f999a8c179e8a641779bed2d2cad4e"}], "stats": {"total": 134, "additions": 100, "deletions": 34}, "files": [{"sha": "a5e307ac0d018773d304737100f976349ff5104c", "filename": "RELEASES.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -116,8 +116,8 @@ Compatibility Notes\n   that were not intended. In this release, [defaulted type parameters\n   appearing outside of type definitions will generate a\n   warning][1.7d], which will become an error in future releases.\n-* [Parsing \".\" as a float results in an error instead of\n-  0][1.7p]. That is, `\".\".parse::<f32>()` returns `Err`, not `Ok(0)`.\n+* [Parsing \".\" as a float results in an error instead of 0][1.7p].\n+  That is, `\".\".parse::<f32>()` returns `Err`, not `Ok(0.0)`.\n * [Borrows of closure parameters may not outlive the closure][1.7bc].\n \n [1.7a]: https://github.com/rust-lang/rust/pull/30928"}, {"sha": "2b28550320d85b2b31ec74495dee6c1dbf24dc53", "filename": "mk/cfg/i586-unknown-linux-gnu.mk", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcfg%2Fi586-unknown-linux-gnu.mk?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -7,9 +7,9 @@ CFG_LIB_NAME_i586-unknown-linux-gnu=lib$(1).so\n CFG_STATIC_LIB_NAME_i586-unknown-linux-gnu=lib$(1).a\n CFG_LIB_GLOB_i586-unknown-linux-gnu=lib$(1)-*.so\n CFG_LIB_DSYM_GLOB_i586-unknown-linux-gnu=lib$(1)-*.dylib.dSYM\n-CFG_JEMALLOC_CFLAGS_i586-unknown-linux-gnu := -m32 $(CFLAGS)\n-CFG_GCCISH_CFLAGS_i586-unknown-linux-gnu := -Wall -Werror -g -fPIC -m32 $(CFLAGS)\n-CFG_GCCISH_CXXFLAGS_i586-unknown-linux-gnu := -fno-rtti $(CXXFLAGS)\n+CFG_JEMALLOC_CFLAGS_i586-unknown-linux-gnu := -m32 $(CFLAGS) -march=pentium\n+CFG_GCCISH_CFLAGS_i586-unknown-linux-gnu := -Wall -Werror -g -fPIC -m32 $(CFLAGS) -march=pentium\n+CFG_GCCISH_CXXFLAGS_i586-unknown-linux-gnu := -fno-rtti $(CXXFLAGS) -march=pentium\n CFG_GCCISH_LINK_FLAGS_i586-unknown-linux-gnu := -shared -fPIC -ldl -pthread  -lrt -g -m32\n CFG_GCCISH_DEF_FLAG_i586-unknown-linux-gnu := -Wl,--export-dynamic,--dynamic-list=\n CFG_LLC_FLAGS_i586-unknown-linux-gnu :="}, {"sha": "b3bd6b92299654a01564290b7914da6e7836a86b", "filename": "src/bootstrap/build/native.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Fbootstrap%2Fbuild%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Fbootstrap%2Fbuild%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuild%2Fnative.rs?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -114,7 +114,8 @@ pub fn compiler_rt(build: &Build, target: &str) {\n     let arch = target.split('-').next().unwrap();\n     let mode = if build.config.rust_optimize {\"Release\"} else {\"Debug\"};\n     let (dir, build_target, libname) = if target.contains(\"linux\") ||\n-                                          target.contains(\"freebsd\") {\n+                                          target.contains(\"freebsd\") ||\n+                                          target.contains(\"netbsd\") {\n         let os = if target.contains(\"android\") {\"-android\"} else {\"\"};\n         let arch = if arch.starts_with(\"arm\") && target.contains(\"eabihf\") {\n             \"armhf\""}, {"sha": "5af70e53125a115d283d56c02610b596161ffae0", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -1025,6 +1025,10 @@ fn check_expected_errors(revision: Option<&str>,\n         expected.replace(r\"\\\", \"/\")\n     }).collect::<Vec<String>>();\n \n+    // If the testcase being checked contains at least one expected \"help\"\n+    // message, then we'll ensure that all \"help\" messages are expected.\n+    // Otherwise, all \"help\" messages reported by the compiler will be ignored.\n+    // This logic also applies to \"note\" messages.\n     let (expect_help, expect_note) =\n         expected_errors.iter()\n                         .fold((false, false),"}, {"sha": "539fdd32c6b9ae8d1bf8ceb628036f8a34e13a1c", "filename": "src/doc/book/getting-started.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Fdoc%2Fbook%2Fgetting-started.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Fdoc%2Fbook%2Fgetting-started.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fgetting-started.md?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -93,8 +93,8 @@ unofficial locations.\n | `armv7-apple-ios`             |  \u2713  |     |     | ARM iOS                    |\n | `armv7s-apple-ios`            |  \u2713  |     |     | ARM iOS                    |\n | `aarch64-apple-ios`           |  \u2713  |     |     | ARM64 iOS                  |\n-| `i686-unknown-freebsd`        |  \u2713  |  \u2713  |     | 32-bit FreeBSD             |\n-| `x86_64-unknown-freebsd`      |  \u2713  |  \u2713  |     | 64-bit FreeBSD             |\n+| `i686-unknown-freebsd`        |  \u2713  |  \u2713  |  \u2713  | 32-bit FreeBSD             |\n+| `x86_64-unknown-freebsd`      |  \u2713  |  \u2713  |  \u2713  | 64-bit FreeBSD             |\n | `x86_64-unknown-openbsd`      |  \u2713  |  \u2713  |     | 64-bit OpenBSD             |\n | `x86_64-unknown-netbsd`       |  \u2713  |  \u2713  |     | 64-bit NetBSD              |\n | `x86_64-unknown-bitrig`       |  \u2713  |  \u2713  |     | 64-bit Bitrig              |"}, {"sha": "590c7e848190a120632d5c1e8bfaabeae75ef35e", "filename": "src/doc/book/guessing-game.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Fdoc%2Fbook%2Fguessing-game.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Fdoc%2Fbook%2Fguessing-game.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fguessing-game.md?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -912,7 +912,7 @@ returned by `parse()`, this is an `enum`  like `Ordering`, but in this case,\n each variant has some data associated with it: `Ok` is a success, and `Err` is a\n failure. Each contains more information: the successfully parsed integer, or an\n error type. In this case, we `match` on `Ok(num)`, which sets the name `num` to\n-the unwrapped `Ok` value (ythe integer), and then we  return it on the\n+the unwrapped `Ok` value (the integer), and then we  return it on the\n right-hand side. In the `Err` case, we don\u2019t care what kind of error it is, so\n we just use the catch all `_` instead of a name. This catches everything that\n isn't `Ok`, and `continue` lets us move to the next iteration of the loop; in"}, {"sha": "74983c1255333b844c2a071a0632eb210433f914", "filename": "src/doc/book/references-and-borrowing.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Freferences-and-borrowing.md?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -163,8 +163,8 @@ both at the same time:\n * exactly one mutable reference (`&mut T`).\n \n \n-You may notice that this is very similar, though not exactly the same as,\n-to the definition of a data race:\n+You may notice that this is very similar to, though not exactly the same as,\n+the definition of a data race:\n \n > There is a \u2018data race\u2019 when two or more pointers access the same memory\n > location at the same time, where at least one of them is writing, and the"}, {"sha": "1c8c03cf6793773acc04fa5d8c8718d5b8d54c16", "filename": "src/doc/book/variable-bindings.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Fdoc%2Fbook%2Fvariable-bindings.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Fdoc%2Fbook%2Fvariable-bindings.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fvariable-bindings.md?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -18,14 +18,14 @@ function, rather than leaving it off. Otherwise, you\u2019ll get an error.\n \n In many languages, a variable binding would be called a *variable*, but Rust\u2019s\n variable bindings have a few tricks up their sleeves. For example the\n-left-hand side of a `let` expression is a \u2018[pattern][pattern]\u2019, not a\n+left-hand side of a `let` statement is a \u2018[pattern][pattern]\u2019, not a\n variable name. This means we can do things like:\n \n ```rust\n let (x, y) = (1, 2);\n ```\n \n-After this expression is evaluated, `x` will be one, and `y` will be two.\n+After this statement is evaluated, `x` will be one, and `y` will be two.\n Patterns are really powerful, and have [their own section][pattern] in the\n book. We don\u2019t need those features for now, so we\u2019ll keep this in the back\n of our minds as we go forward."}, {"sha": "d5c0980b280a351752b6216eb5247450803efa59", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -115,6 +115,7 @@ use middle::pat_util;\n use middle::ty::{self, TyCtxt, ParameterEnvironment};\n use middle::traits::{self, ProjectionMode};\n use middle::infer;\n+use middle::subst::Subst;\n use lint;\n use util::nodemap::NodeMap;\n \n@@ -1491,14 +1492,15 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n                     if self.live_on_entry(entry_ln, self.s.no_ret_var).is_some() => {\n \n                 let param_env = ParameterEnvironment::for_item(&self.ir.tcx, id);\n+                let t_ret_subst = t_ret.subst(&self.ir.tcx, &param_env.free_substs);\n                 let infcx = infer::new_infer_ctxt(&self.ir.tcx,\n                                                   &self.ir.tcx.tables,\n                                                   Some(param_env),\n                                                   ProjectionMode::Any);\n                 let cause = traits::ObligationCause::dummy();\n                 let norm = traits::fully_normalize(&infcx,\n                                                    cause,\n-                                                   &t_ret);\n+                                                   &t_ret_subst);\n \n                 if norm.unwrap().is_nil() {\n                     // for nil return types, it is ok to not return a value expl."}, {"sha": "49cacaac766279b5f751974e3aa84b9c8f9751d2", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -589,15 +589,20 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         },\n         (_, \"volatile_store\") => {\n             let tp_ty = *substs.types.get(FnSpace, 0);\n-            let val = if fn_ty.args[1].is_indirect() {\n-                Load(bcx, llargs[1])\n+            if type_is_fat_ptr(bcx.tcx(), tp_ty) {\n+                VolatileStore(bcx, llargs[1], expr::get_dataptr(bcx, llargs[0]));\n+                VolatileStore(bcx, llargs[2], expr::get_meta(bcx, llargs[0]));\n             } else {\n-                from_immediate(bcx, llargs[1])\n-            };\n-            let ptr = PointerCast(bcx, llargs[0], val_ty(val).ptr_to());\n-            let store = VolatileStore(bcx, val, ptr);\n-            unsafe {\n-                llvm::LLVMSetAlignment(store, type_of::align_of(ccx, tp_ty));\n+                let val = if fn_ty.args[1].is_indirect() {\n+                    Load(bcx, llargs[1])\n+                } else {\n+                    from_immediate(bcx, llargs[1])\n+                };\n+                let ptr = PointerCast(bcx, llargs[0], val_ty(val).ptr_to());\n+                let store = VolatileStore(bcx, val, ptr);\n+                unsafe {\n+                    llvm::LLVMSetAlignment(store, type_of::align_of(ccx, tp_ty));\n+                }\n             }\n             C_nil(ccx)\n         },"}, {"sha": "8fb58f58e8a5fdebbf47aa0727052e4ffedec7a4", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -740,7 +740,11 @@\n             $(\".search-input\").on(\"keyup input\",function() {\n                 clearTimeout(searchTimeout);\n                 if ($(this).val().length === 0) {\n-                    window.history.replaceState(\"\", \"std - Rust\", \"?search=\");\n+                    if (browserSupportsHistoryApi()) {\n+                        history.replaceState(\"\", \"std - Rust\", \"?search=\");\n+                    } else {\n+                        location.replace(\"?search=\");\n+                    }\n                     $('#main.content').removeClass('hidden');\n                     $('#search.content').addClass('hidden');\n                 } else {\n@@ -996,7 +1000,7 @@\n         var prev_id = 0;\n \n         function set_fragment(name) {\n-            if (history.replaceState) {\n+            if (browserSupportsHistoryApi()) {\n                 history.replaceState(null, null, '#' + name);\n                 $(window).trigger('hashchange');\n             } else {"}, {"sha": "331e3431cee847d06eeb36cc5749f289570ee704", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -257,10 +257,10 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     }\n \n     match {\n-        let b_sess = AssertRecoverSafe::new(&sess);\n-        let b_cstore = AssertRecoverSafe::new(&cstore);\n-        let b_cfg = AssertRecoverSafe::new(cfg.clone());\n-        let b_control = AssertRecoverSafe::new(&control);\n+        let b_sess = AssertRecoverSafe(&sess);\n+        let b_cstore = AssertRecoverSafe(&cstore);\n+        let b_cfg = AssertRecoverSafe(cfg.clone());\n+        let b_control = AssertRecoverSafe(&control);\n \n         panic::recover(|| {\n             driver::compile_input(&b_sess, &b_cstore, (*b_cfg).clone(),"}, {"sha": "f278994988736b347adf8aa4d7cde68d1cdfc33e", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -161,7 +161,7 @@ pub trait RefRecoverSafe {}\n /// // });\n ///\n /// // This, however, will compile due to the `AssertRecoverSafe` wrapper\n-/// let result = panic::recover(AssertRecoverSafe::new(|| {\n+/// let result = panic::recover(AssertRecoverSafe(|| {\n ///     variable += 3;\n /// }));\n /// // ...\n@@ -185,15 +185,15 @@ pub trait RefRecoverSafe {}\n /// let other_capture = 3;\n ///\n /// let result = {\n-///     let mut wrapper = AssertRecoverSafe::new(&mut variable);\n+///     let mut wrapper = AssertRecoverSafe(&mut variable);\n ///     panic::recover(move || {\n ///         **wrapper += other_capture;\n ///     })\n /// };\n /// // ...\n /// ```\n #[unstable(feature = \"recover\", reason = \"awaiting feedback\", issue = \"27719\")]\n-pub struct AssertRecoverSafe<T>(T);\n+pub struct AssertRecoverSafe<T>(pub T);\n \n // Implementations of the `RecoverSafe` trait:\n //\n@@ -230,12 +230,16 @@ impl<T> RefRecoverSafe for AssertRecoverSafe<T> {}\n impl<T> AssertRecoverSafe<T> {\n     /// Creates a new `AssertRecoverSafe` wrapper around the provided type.\n     #[unstable(feature = \"recover\", reason = \"awaiting feedback\", issue = \"27719\")]\n+    #[rustc_deprecated(reason = \"the type's field is now public, construct it directly\",\n+                       since = \"1.9.0\")]\n     pub fn new(t: T) -> AssertRecoverSafe<T> {\n         AssertRecoverSafe(t)\n     }\n \n     /// Consumes the `AssertRecoverSafe`, returning the wrapped value.\n     #[unstable(feature = \"recover\", reason = \"awaiting feedback\", issue = \"27719\")]\n+    #[rustc_deprecated(reason = \"the type's field is now public, access it directly\",\n+                       since = \"1.9.0\")]\n     pub fn into_inner(self) -> T {\n         self.0\n     }"}, {"sha": "77aeaf8459aec8b046d2fa95176aa098faa9d27b", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -121,6 +121,12 @@ pub mod rt {\n         }\n     }\n \n+    impl ToTokens for P<ast::ImplItem> {\n+        fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n+            vec![TokenTree::Token(self.span, token::Interpolated(token::NtImplItem(self.clone())))]\n+        }\n+    }\n+\n     impl ToTokens for ast::TraitItem {\n         fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n             vec![TokenTree::Token(self.span,"}, {"sha": "25c7dc370359433ca02f29919dfa36f94432155e", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -1 +1 @@\n-Subproject commit 63f3a1bfcd78355398a460712db25922247756b6\n+Subproject commit 25c7dc370359433ca02f29919dfa36f94432155e"}, {"sha": "d6e8852cfecfe7384489a919df0638e7b7b69e12", "filename": "src/rustllvm/llvm-auto-clean-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Frustllvm%2Fllvm-auto-clean-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Frustllvm%2Fllvm-auto-clean-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-auto-clean-trigger?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be forcibly cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2016-03-15\n+2016-03-18"}, {"sha": "e3461e52e1c717e14e3871eed85ef649d9beb63c", "filename": "src/test/compile-fail/issue-32323.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Ftest%2Fcompile-fail%2Fissue-32323.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Ftest%2Fcompile-fail%2Fissue-32323.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32323.rs?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait Tr<'a> {\n+    type Out;\n+}\n+\n+pub fn f<'a, T: Tr<'a>>() -> <T as Tr<'a>>::Out {}\n+//~^ ERROR not all control paths return a value\n+\n+pub fn main() {}"}, {"sha": "7fbd8dc4786baf1de47c2d7735e6700c8fe11b18", "filename": "src/test/run-pass/binary-heap-panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Ftest%2Frun-pass%2Fbinary-heap-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Ftest%2Frun-pass%2Fbinary-heap-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinary-heap-panic-safe.rs?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -70,7 +70,7 @@ fn test_integrity() {\n             {\n                 // push the panicking item to the heap and catch the panic\n                 let thread_result = {\n-                    let mut heap_ref = AssertRecoverSafe::new(&mut heap);\n+                    let mut heap_ref = AssertRecoverSafe(&mut heap);\n                     panic::recover(move || {\n                         heap_ref.push(panic_item);\n                     })"}, {"sha": "03ba5587fcec86867c60de18c4c0ecd76fbeee7e", "filename": "src/test/run-pass/volatile-fat-ptr.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Ftest%2Frun-pass%2Fvolatile-fat-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c66a89849b2d0025121a0898c4ab298da8814bf/src%2Ftest%2Frun-pass%2Fvolatile-fat-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvolatile-fat-ptr.rs?ref=7c66a89849b2d0025121a0898c4ab298da8814bf", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(volatile)]\n+use std::ptr::{read_volatile, write_volatile};\n+\n+fn main() {\n+    let mut x: &'static str = \"test\";\n+    unsafe {\n+        let a = read_volatile(&x);\n+        assert_eq!(a, \"test\");\n+        write_volatile(&mut x, \"foo\");\n+        assert_eq!(x, \"foo\");\n+    }\n+}"}]}