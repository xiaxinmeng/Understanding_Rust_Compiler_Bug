{"sha": "55082ce41334d9685d619182e71b84b495a6aff8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1MDgyY2U0MTMzNGQ5Njg1ZDYxOTE4MmU3MWI4NGI0OTVhNmFmZjg=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-21T22:51:23Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-09-10T21:33:06Z"}, "message": "Attach `TokenStream` to `ast::Path`", "tree": {"sha": "5787a434b0b1c89da4d3477d8619dcbdc82b9873", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5787a434b0b1c89da4d3477d8619dcbdc82b9873"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55082ce41334d9685d619182e71b84b495a6aff8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl9am5IACgkQtAh+UQ6Y\nsWRxzg/5AdPMNp7TtwuLlbIz1Vg64/IOxUaSGh6HjKGm7wQFzmadxyfbSwYKhLDN\nsDgPoFpyZffUE2AgnFLTmshE2jcd64MXV8wWSuqleVhAcHFtzIjMqe6Flds80OYg\n6VfV8bo9fcRlVRrZWDoQBVm4CMZrEjmbxMQozO0mBuc1Faj23roRaX/4ouapSaUM\nhb1/HdG2flzJCNkDlrjhdYM7Ms1qAq814rMr2NwEPZJUNzfEMDgq7BReT1vwlVVp\nquH+IqY2ORbwW4ZXD+JYBCawkdZKydQfj0dKV1peSP+2MzHyZKKEmNvEHdD/6bTB\njyleGBekDDnxmQoAXUxp1qGS5Hf1daRbPOFcotiTf3b2W7zQD87kIkecI8APwbGS\n4qRSPfnj0R2xsfxQWf9FyCcwuv+t0YwXNJGRVIis49EEB+fvgNZrrwrpUwTKunZ6\n10GazDqxlA7akCNCSH/VzfttVPKXdJcbodg7g+U5ZlmunXtMTFqrqBiZgpfXFR3W\nrcA4/9OGp8RClsWCUvrlyW/emrLzqRYGf0JY5wyqepbBBJrLpl56Me1iQhE38CpG\njHgnKqjy486Iqf8lBETYB+6UdQiaJOynwCjTEu8PhaiJCE7m8MQJ/qeYObtjKO40\neWTAlEB+9B3EfvAOGrE1tJe+7sf05mdUjXgtKKNPCl4ToePJQR8=\n=c41l\n-----END PGP SIGNATURE-----", "payload": "tree 5787a434b0b1c89da4d3477d8619dcbdc82b9873\nparent 3815e91ccd8c7c8ed564476425bca6f1dc5e9607\nauthor Aaron Hill <aa1ronham@gmail.com> 1598050283 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1599773586 -0400\n\nAttach `TokenStream` to `ast::Path`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55082ce41334d9685d619182e71b84b495a6aff8", "html_url": "https://github.com/rust-lang/rust/commit/55082ce41334d9685d619182e71b84b495a6aff8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55082ce41334d9685d619182e71b84b495a6aff8/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3815e91ccd8c7c8ed564476425bca6f1dc5e9607", "url": "https://api.github.com/repos/rust-lang/rust/commits/3815e91ccd8c7c8ed564476425bca6f1dc5e9607", "html_url": "https://github.com/rust-lang/rust/commit/3815e91ccd8c7c8ed564476425bca6f1dc5e9607"}], "stats": {"total": 62, "additions": 41, "deletions": 21}, "files": [{"sha": "80c8cdf703cf3ab8eb6c49a0d175d9d97796ff93", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=55082ce41334d9685d619182e71b84b495a6aff8", "patch": "@@ -96,6 +96,7 @@ pub struct Path {\n     /// The segments in the path: the things separated by `::`.\n     /// Global paths begin with `kw::PathRoot`.\n     pub segments: Vec<PathSegment>,\n+    pub tokens: Option<TokenStream>,\n }\n \n impl PartialEq<Symbol> for Path {\n@@ -117,7 +118,7 @@ impl Path {\n     // Convert a span and an identifier to the corresponding\n     // one-segment path.\n     pub fn from_ident(ident: Ident) -> Path {\n-        Path { segments: vec![PathSegment::from_ident(ident)], span: ident.span }\n+        Path { segments: vec![PathSegment::from_ident(ident)], span: ident.span, tokens: None }\n     }\n \n     pub fn is_global(&self) -> bool {\n@@ -1069,7 +1070,7 @@ pub struct Expr {\n \n // `Expr` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-rustc_data_structures::static_assert_size!(Expr, 104);\n+rustc_data_structures::static_assert_size!(Expr, 112);\n \n impl Expr {\n     /// Returns `true` if this expression would be valid somewhere that expects a value;"}, {"sha": "2782869fb885a13a773f432927d8c48a1d799eb5", "filename": "compiler/rustc_ast/src/attr/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fattr%2Fmod.rs?ref=55082ce41334d9685d619182e71b84b495a6aff8", "patch": "@@ -415,7 +415,7 @@ impl MetaItem {\n                     }\n                 }\n                 let span = span.with_hi(segments.last().unwrap().ident.span.hi());\n-                Path { span, segments }\n+                Path { span, segments, tokens: None }\n             }\n             Some(TokenTree::Token(Token { kind: token::Interpolated(nt), .. })) => match *nt {\n                 token::Nonterminal::NtMeta(ref item) => return item.meta(item.path.span),"}, {"sha": "f6ac134bb16712c883bdd337ea0eb4de9a0f5982", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=55082ce41334d9685d619182e71b84b495a6aff8", "patch": "@@ -513,7 +513,7 @@ pub fn noop_visit_ident<T: MutVisitor>(Ident { name: _, span }: &mut Ident, vis:\n     vis.visit_span(span);\n }\n \n-pub fn noop_visit_path<T: MutVisitor>(Path { segments, span }: &mut Path, vis: &mut T) {\n+pub fn noop_visit_path<T: MutVisitor>(Path { segments, span, tokens: _ }: &mut Path, vis: &mut T) {\n     vis.visit_span(span);\n     for PathSegment { ident, id, args } in segments {\n         vis.visit_ident(ident);"}, {"sha": "6a3b9c22597ae2dff3f30f0fef10202caae261f9", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=55082ce41334d9685d619182e71b84b495a6aff8", "patch": "@@ -251,7 +251,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ItemKind::ExternCrate(orig_name) => hir::ItemKind::ExternCrate(orig_name),\n             ItemKind::Use(ref use_tree) => {\n                 // Start with an empty prefix.\n-                let prefix = Path { segments: vec![], span: use_tree.span };\n+                let prefix = Path { segments: vec![], span: use_tree.span, tokens: None };\n \n                 self.lower_use_tree(use_tree, &prefix, id, vis, ident, attrs)\n             }\n@@ -488,7 +488,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 *ident = tree.ident();\n \n                 // First, apply the prefix to the path.\n-                let mut path = Path { segments, span: path.span };\n+                let mut path = Path { segments, span: path.span, tokens: None };\n \n                 // Correctly resolve `self` imports.\n                 if path.segments.len() > 1\n@@ -540,8 +540,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 hir::ItemKind::Use(path, hir::UseKind::Single)\n             }\n             UseTreeKind::Glob => {\n-                let path =\n-                    self.lower_path(id, &Path { segments, span: path.span }, ParamMode::Explicit);\n+                let path = self.lower_path(\n+                    id,\n+                    &Path { segments, span: path.span, tokens: None },\n+                    ParamMode::Explicit,\n+                );\n                 hir::ItemKind::Use(path, hir::UseKind::Glob)\n             }\n             UseTreeKind::Nested(ref trees) => {\n@@ -569,7 +572,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 // for that we return the `{}` import (called the\n                 // `ListStem`).\n \n-                let prefix = Path { segments, span: prefix.span.to(path.span) };\n+                let prefix = Path { segments, span: prefix.span.to(path.span), tokens: None };\n \n                 // Add all the nested `PathListItem`s to the HIR.\n                 for &(ref use_tree, id) in trees {"}, {"sha": "0fcffe77d45d353c830969158f2dd934803bdb4e", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=55082ce41334d9685d619182e71b84b495a6aff8", "patch": "@@ -46,7 +46,7 @@ impl<'a> ExtCtxt<'a> {\n             id: ast::DUMMY_NODE_ID,\n             args,\n         });\n-        ast::Path { span, segments }\n+        ast::Path { span, segments, tokens: None }\n     }\n \n     pub fn ty_mt(&self, ty: P<ast::Ty>, mutbl: ast::Mutability) -> ast::MutTy {"}, {"sha": "530e67a134a3590502b8b73799db21cab6c27892", "filename": "compiler/rustc_expand/src/placeholders.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fplaceholders.rs?ref=55082ce41334d9685d619182e71b84b495a6aff8", "patch": "@@ -18,7 +18,7 @@ pub fn placeholder(\n ) -> AstFragment {\n     fn mac_placeholder() -> ast::MacCall {\n         ast::MacCall {\n-            path: ast::Path { span: DUMMY_SP, segments: Vec::new() },\n+            path: ast::Path { span: DUMMY_SP, segments: Vec::new(), tokens: None },\n             args: P(ast::MacArgs::Empty),\n             prior_type_ascription: None,\n         }"}, {"sha": "69f63feac78ee2d7fb166e9046414b904034ba24", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=55082ce41334d9685d619182e71b84b495a6aff8", "patch": "@@ -278,6 +278,7 @@ pub fn nt_to_tokenstream(nt: &Nonterminal, sess: &ParseSess, span: Span) -> Toke\n             Some(tokenstream::TokenTree::token(token::Lifetime(ident.name), ident.span).into())\n         }\n         Nonterminal::NtMeta(ref attr) => attr.tokens.clone(),\n+        Nonterminal::NtPath(ref path) => path.tokens.clone(),\n         Nonterminal::NtTT(ref tt) => Some(tt.clone().into()),\n         Nonterminal::NtExpr(ref expr) | Nonterminal::NtLiteral(ref expr) => {\n             if expr.tokens.is_none() {"}, {"sha": "e2a735188f95ced5501d65c959c8a3419f6dd4c2", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=55082ce41334d9685d619182e71b84b495a6aff8", "patch": "@@ -901,7 +901,7 @@ impl<'a> Parser<'a> {\n     ) -> PResult<'a, P<T>> {\n         self.expect(&token::ModSep)?;\n \n-        let mut path = ast::Path { segments: Vec::new(), span: DUMMY_SP };\n+        let mut path = ast::Path { segments: Vec::new(), span: DUMMY_SP, tokens: None };\n         self.parse_path_segments(&mut path.segments, T::PATH_STYLE)?;\n         path.span = ty_span.to(self.prev_token.span);\n "}, {"sha": "6d90d1128227a4aa1874881638d718cdbd2a0f43", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=55082ce41334d9685d619182e71b84b495a6aff8", "patch": "@@ -787,7 +787,7 @@ impl<'a> Parser<'a> {\n     fn parse_use_tree(&mut self) -> PResult<'a, UseTree> {\n         let lo = self.token.span;\n \n-        let mut prefix = ast::Path { segments: Vec::new(), span: lo.shrink_to_lo() };\n+        let mut prefix = ast::Path { segments: Vec::new(), span: lo.shrink_to_lo(), tokens: None };\n         let kind = if self.check(&token::OpenDelim(token::Brace))\n             || self.check(&token::BinOp(token::Star))\n             || self.is_import_coupler()"}, {"sha": "84e887e74a7a4a3adf5d8aa61a8f8db6471ea556", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=55082ce41334d9685d619182e71b84b495a6aff8", "patch": "@@ -168,7 +168,15 @@ impl<'a> Parser<'a> {\n                     return Err(self.struct_span_err(self.token.span, msg));\n                 }\n             }\n-            NonterminalKind::Path => token::NtPath(self.parse_path(PathStyle::Type)?),\n+            NonterminalKind::Path => {\n+                let (mut path, tokens) =\n+                    self.collect_tokens(|this| this.parse_path(PathStyle::Type))?;\n+                // We have have eaten an NtPath, which could already have tokens\n+                if path.tokens.is_none() {\n+                    path.tokens = Some(tokens);\n+                }\n+                token::NtPath(path)\n+            }\n             NonterminalKind::Meta => {\n                 let (mut attr, tokens) = self.collect_tokens(|this| this.parse_attr_item())?;\n                 // We may have eaten a nonterminal, which could already have tokens"}, {"sha": "66ce015d02e4c6b561ac7610ae5e639c5957f2a8", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=55082ce41334d9685d619182e71b84b495a6aff8", "patch": "@@ -64,7 +64,7 @@ impl<'a> Parser<'a> {\n             path_span = path_lo.to(self.prev_token.span);\n         } else {\n             path_span = self.token.span.to(self.token.span);\n-            path = ast::Path { segments: Vec::new(), span: path_span };\n+            path = ast::Path { segments: Vec::new(), span: path_span, tokens: None };\n         }\n \n         // See doc comment for `unmatched_angle_bracket_count`.\n@@ -81,7 +81,10 @@ impl<'a> Parser<'a> {\n         let qself = QSelf { ty, path_span, position: path.segments.len() };\n         self.parse_path_segments(&mut path.segments, style)?;\n \n-        Ok((qself, Path { segments: path.segments, span: lo.to(self.prev_token.span) }))\n+        Ok((\n+            qself,\n+            Path { segments: path.segments, span: lo.to(self.prev_token.span), tokens: None },\n+        ))\n     }\n \n     /// Recover from an invalid single colon, when the user likely meant a qualified path.\n@@ -144,7 +147,7 @@ impl<'a> Parser<'a> {\n         }\n         self.parse_path_segments(&mut segments, style)?;\n \n-        Ok(Path { segments, span: lo.to(self.prev_token.span) })\n+        Ok(Path { segments, span: lo.to(self.prev_token.span), tokens: None })\n     }\n \n     pub(super) fn parse_path_segments("}, {"sha": "7a0503d68f348d04a350d608bd928b025ee1383d", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=55082ce41334d9685d619182e71b84b495a6aff8", "patch": "@@ -794,7 +794,7 @@ impl<'a> Resolver<'a> {\n                         }\n \n                         segms.push(ast::PathSegment::from_ident(ident));\n-                        let path = Path { span: name_binding.span, segments: segms };\n+                        let path = Path { span: name_binding.span, segments: segms, tokens: None };\n                         let did = match res {\n                             Res::Def(DefKind::Ctor(..), did) => this.parent(did),\n                             _ => res.opt_def_id(),"}, {"sha": "dda084214b8f4097f671e890df82034ea1e08547", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=55082ce41334d9685d619182e71b84b495a6aff8", "patch": "@@ -1967,7 +1967,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n \n         if qself.is_none() {\n             let path_seg = |seg: &Segment| PathSegment::from_ident(seg.ident);\n-            let path = Path { segments: path.iter().map(path_seg).collect(), span };\n+            let path = Path { segments: path.iter().map(path_seg).collect(), span, tokens: None };\n             if let Ok((_, res)) =\n                 self.r.resolve_macro_path(&path, None, &self.parent_scope, false, false)\n             {"}, {"sha": "9f631705b2bf8d7ea97eeed71a21ccc51bf481b5", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=55082ce41334d9685d619182e71b84b495a6aff8", "patch": "@@ -83,6 +83,7 @@ fn import_candidate_to_enum_paths(suggestion: &ImportSuggestion) -> (String, Str\n     let enum_path = ast::Path {\n         span: suggestion.path.span,\n         segments: suggestion.path.segments[0..path_len - 1].to_vec(),\n+        tokens: None,\n     };\n     let enum_path_string = path_names_to_string(&enum_path);\n \n@@ -1065,7 +1066,8 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                     path_segments.push(ast::PathSegment::from_ident(ident));\n                     let module_def_id = module.def_id().unwrap();\n                     if module_def_id == def_id {\n-                        let path = Path { span: name_binding.span, segments: path_segments };\n+                        let path =\n+                            Path { span: name_binding.span, segments: path_segments, tokens: None };\n                         result = Some((\n                             module,\n                             ImportSuggestion {\n@@ -1095,7 +1097,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                 if let Res::Def(DefKind::Variant, _) = name_binding.res() {\n                     let mut segms = enum_import_suggestion.path.segments.clone();\n                     segms.push(ast::PathSegment::from_ident(ident));\n-                    variants.push(Path { span: name_binding.span, segments: segms });\n+                    variants.push(Path { span: name_binding.span, segments: segms, tokens: None });\n                 }\n             });\n             variants"}, {"sha": "c7913e844553113c090b68b0c86794fd5bf187e1", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55082ce41334d9685d619182e71b84b495a6aff8/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=55082ce41334d9685d619182e71b84b495a6aff8", "patch": "@@ -3189,6 +3189,7 @@ impl<'a> Resolver<'a> {\n                     .chain(path_str.split(\"::\").skip(1).map(Ident::from_str))\n                     .map(|i| self.new_ast_path_segment(i))\n                     .collect(),\n+                tokens: None,\n             }\n         } else {\n             ast::Path {\n@@ -3198,6 +3199,7 @@ impl<'a> Resolver<'a> {\n                     .map(Ident::from_str)\n                     .map(|i| self.new_ast_path_segment(i))\n                     .collect(),\n+                tokens: None,\n             }\n         };\n         let module = self.get_module(module_id);"}]}