{"sha": "06931988c009b7467b6545cad2d6fb3597a29adf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2OTMxOTg4YzAwOWI3NDY3YjY1NDVjYWQyZDZmYjM1OTdhMjlhZGY=", "commit": {"author": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2020-12-28T00:53:57Z"}, "committer": {"name": "Camelid", "email": "camelidcamel@gmail.com", "date": "2021-01-06T20:51:36Z"}, "message": "Document `ModuleData`\n\n* Convert comments on fields to doc comments so they're visible in API\n  docs\n* Add new documentation\n* Get rid of \"normal module\" terminology", "tree": {"sha": "b0848492d21c087e601dabd6ac26b31c71655bca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0848492d21c087e601dabd6ac26b31c71655bca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06931988c009b7467b6545cad2d6fb3597a29adf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06931988c009b7467b6545cad2d6fb3597a29adf", "html_url": "https://github.com/rust-lang/rust/commit/06931988c009b7467b6545cad2d6fb3597a29adf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06931988c009b7467b6545cad2d6fb3597a29adf/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d", "html_url": "https://github.com/rust-lang/rust/commit/8fec6c7bb9f2a549b6f424b3dd1c2c257286bc6d"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "ad584a69697388a988f2d89f4f596d24ab4ed275", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/06931988c009b7467b6545cad2d6fb3597a29adf/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06931988c009b7467b6545cad2d6fb3597a29adf/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=06931988c009b7467b6545cad2d6fb3597a29adf", "patch": "@@ -456,28 +456,36 @@ struct BindingKey {\n type Resolutions<'a> = RefCell<FxIndexMap<BindingKey, &'a RefCell<NameResolution<'a>>>>;\n \n /// One node in the tree of modules.\n+///\n+/// Note that \"module\" is a loose term here; it does not necessarily mean\n+/// a `mod` that you declare in Rust code. It may also be, e.g., a trait\n+/// or an enum. See [`ModuleKind`] (accessible through [`ModuleData::kind`]\n+/// for all of the kinds of \"modules\" that resolve deals with.\n pub struct ModuleData<'a> {\n+    /// The direct parent module (it may not be a `mod`, however).\n     parent: Option<Module<'a>>,\n+    /// What kind of module this is, because this may not be a `mod`.\n     kind: ModuleKind,\n \n-    // The def id of the closest normal module (`mod`) ancestor (including this module).\n+    /// The [`DefId`] of the closest `mod` item ancestor (which may be this module), including crate root.\n     normal_ancestor_id: DefId,\n \n-    // Mapping between names and their (possibly in-progress) resolutions in this module.\n-    // Resolutions in modules from other crates are not populated until accessed.\n+    /// Mapping between names and their (possibly in-progress) resolutions in this module.\n+    /// Resolutions in modules from other crates are not populated until accessed.\n     lazy_resolutions: Resolutions<'a>,\n-    // True if this is a module from other crate that needs to be populated on access.\n+    /// True if this is a module from other crate that needs to be populated on access.\n     populate_on_access: Cell<bool>,\n \n-    // Macro invocations that can expand into items in this module.\n+    /// Macro invocations that can expand into items in this module.\n     unexpanded_invocations: RefCell<FxHashSet<ExpnId>>,\n \n+    /// Whether `#[no_implicit_prelude]` is active.\n     no_implicit_prelude: bool,\n \n     glob_importers: RefCell<Vec<&'a Import<'a>>>,\n     globs: RefCell<Vec<&'a Import<'a>>>,\n \n-    // Used to memoize the traits in this module for faster searches through all traits in scope.\n+    /// Used to memoize the traits in this module for faster searches through all traits in scope.\n     traits: RefCell<Option<Box<[(Ident, &'a NameBinding<'a>)]>>>,\n \n     /// Span of the module itself. Used for error reporting."}]}