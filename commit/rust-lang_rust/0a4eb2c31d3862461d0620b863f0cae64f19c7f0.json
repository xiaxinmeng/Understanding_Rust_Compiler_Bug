{"sha": "0a4eb2c31d3862461d0620b863f0cae64f19c7f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNGViMmMzMWQzODYyNDYxZDA2MjBiODYzZjBjYWU2NGYxOWM3ZjA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-20T13:52:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-20T13:52:07Z"}, "message": "Rollup merge of #76926 - ssomers:btree_cleanup_1, r=Mark-Simulacrum\n\nBTreeMap: code readability tweaks\n\nGathered over the past months\n\nr? @Mark-Simulacrum", "tree": {"sha": "0d271a57b75fcfee986238a3e9ea4445576a76f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d271a57b75fcfee986238a3e9ea4445576a76f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a4eb2c31d3862461d0620b863f0cae64f19c7f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfZ16ICRBK7hj4Ov3rIwAAdHIIAD1qFSsXhtGS7cpMg9+XBt+p\nlIcfPmYJoj4GasBp4WBhuSQ/H1V11V1tRSlQvrVlm/IJX5Fqj3hLda1b1fNihnRs\nGDObyg1PjjVACGABvZj7P2dcbrK9F1zK+7g9DpgJ7AHZc0YjYDI8/KTNdg5xVrkB\nDXtUQjLsCt+0Sv7zSqHqCfmWXy/FiQfmLNXM/VlFf/3YmWIloF4HjKZCmYq9YXID\n255gRDFhK98x94g1K6JtKCCmoa19CIpJONsLD9AqfXDjLFQjwBixOVoO5Heumhul\n+B1IE8IMavmqmvmTXjH16ur2eZ8ykdSwgH2TIMoiMN/aZjnHmqO43c3HJs0PZR0=\n=Jk6c\n-----END PGP SIGNATURE-----\n", "payload": "tree 0d271a57b75fcfee986238a3e9ea4445576a76f7\nparent dfae12fa0bc124c61329748c820ed74ac3833128\nparent c6a8cfbde848352271ee143fe5d458dcac7c397f\nauthor Ralf Jung <post@ralfj.de> 1600609927 +0200\ncommitter GitHub <noreply@github.com> 1600609927 +0200\n\nRollup merge of #76926 - ssomers:btree_cleanup_1, r=Mark-Simulacrum\n\nBTreeMap: code readability tweaks\n\nGathered over the past months\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a4eb2c31d3862461d0620b863f0cae64f19c7f0", "html_url": "https://github.com/rust-lang/rust/commit/0a4eb2c31d3862461d0620b863f0cae64f19c7f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a4eb2c31d3862461d0620b863f0cae64f19c7f0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dfae12fa0bc124c61329748c820ed74ac3833128", "url": "https://api.github.com/repos/rust-lang/rust/commits/dfae12fa0bc124c61329748c820ed74ac3833128", "html_url": "https://github.com/rust-lang/rust/commit/dfae12fa0bc124c61329748c820ed74ac3833128"}, {"sha": "c6a8cfbde848352271ee143fe5d458dcac7c397f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6a8cfbde848352271ee143fe5d458dcac7c397f", "html_url": "https://github.com/rust-lang/rust/commit/c6a8cfbde848352271ee143fe5d458dcac7c397f"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "b4e9929af5ff2cd693e8430fa31d403635782c1b", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a4eb2c31d3862461d0620b863f0cae64f19c7f0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4eb2c31d3862461d0620b863f0cae64f19c7f0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=0a4eb2c31d3862461d0620b863f0cae64f19c7f0", "patch": "@@ -1715,7 +1715,7 @@ impl<'a, K: 'a, V: 'a> DrainFilterInner<'a, K, V> {\n     /// Allow Debug implementations to predict the next element.\n     pub(super) fn peek(&self) -> Option<(&K, &V)> {\n         let edge = self.cur_leaf_edge.as_ref()?;\n-        edge.reborrow().next_kv().ok().map(|kv| kv.into_kv())\n+        edge.reborrow().next_kv().ok().map(Handle::into_kv)\n     }\n \n     /// Implementation of a typical `DrainFilter::next` method, given the predicate."}, {"sha": "55ce7d275464e571197c674e71b29a135af60999", "filename": "library/alloc/src/collections/btree/navigate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a4eb2c31d3862461d0620b863f0cae64f19c7f0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4eb2c31d3862461d0620b863f0cae64f19c7f0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnavigate.rs?ref=0a4eb2c31d3862461d0620b863f0cae64f19c7f0", "patch": "@@ -218,7 +218,7 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::E\n         let mut edge = self.forget_node_type();\n         loop {\n             edge = match edge.right_kv() {\n-                Ok(internal_kv) => return Ok(internal_kv),\n+                Ok(kv) => return Ok(kv),\n                 Err(last_edge) => match last_edge.into_node().ascend() {\n                     Ok(parent_edge) => parent_edge.forget_node_type(),\n                     Err(root) => return Err(root),\n@@ -239,7 +239,7 @@ impl<BorrowType, K, V> Handle<NodeRef<BorrowType, K, V, marker::Leaf>, marker::E\n         let mut edge = self.forget_node_type();\n         loop {\n             edge = match edge.left_kv() {\n-                Ok(internal_kv) => return Ok(internal_kv),\n+                Ok(kv) => return Ok(kv),\n                 Err(last_edge) => match last_edge.into_node().ascend() {\n                     Ok(parent_edge) => parent_edge.forget_node_type(),\n                     Err(root) => return Err(root),"}, {"sha": "f52d07c9b8c94bd4e538c87233bcc24190ff0d3c", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0a4eb2c31d3862461d0620b863f0cae64f19c7f0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a4eb2c31d3862461d0620b863f0cae64f19c7f0/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=0a4eb2c31d3862461d0620b863f0cae64f19c7f0", "patch": "@@ -929,14 +929,14 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n     /// The returned pointer points to the inserted value.\n     fn insert(mut self, key: K, val: V) -> (InsertResult<'a, K, V, marker::Leaf>, *mut V) {\n         if self.node.len() < CAPACITY {\n-            let ptr = self.insert_fit(key, val);\n+            let val_ptr = self.insert_fit(key, val);\n             let kv = unsafe { Handle::new_kv(self.node, self.idx) };\n-            (InsertResult::Fit(kv), ptr)\n+            (InsertResult::Fit(kv), val_ptr)\n         } else {\n             let (middle_kv_idx, insertion) = splitpoint(self.idx);\n             let middle = unsafe { Handle::new_kv(self.node, middle_kv_idx) };\n             let (mut left, k, v, mut right) = middle.split();\n-            let ptr = match insertion {\n+            let val_ptr = match insertion {\n                 InsertionPlace::Left(insert_idx) => unsafe {\n                     Handle::new_edge(left.reborrow_mut(), insert_idx).insert_fit(key, val)\n                 },\n@@ -948,7 +948,7 @@ impl<'a, K: 'a, V: 'a> Handle<NodeRef<marker::Mut<'a>, K, V, marker::Leaf>, mark\n                     .insert_fit(key, val)\n                 },\n             };\n-            (InsertResult::Split(SplitResult { left: left.forget_type(), k, v, right }), ptr)\n+            (InsertResult::Split(SplitResult { left: left.forget_type(), k, v, right }), val_ptr)\n         }\n     }\n }"}]}