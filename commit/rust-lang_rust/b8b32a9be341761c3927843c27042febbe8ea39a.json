{"sha": "b8b32a9be341761c3927843c27042febbe8ea39a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4YjMyYTliZTM0MTc2MWMzOTI3ODQzYzI3MDQyZmViYmU4ZWEzOWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-31T06:42:19Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-13T09:44:44Z"}, "message": "simplify config::features", "tree": {"sha": "b3a78b4df1bfc9fbbfd646aab780c149067b1672", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3a78b4df1bfc9fbbfd646aab780c149067b1672"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8b32a9be341761c3927843c27042febbe8ea39a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8b32a9be341761c3927843c27042febbe8ea39a", "html_url": "https://github.com/rust-lang/rust/commit/b8b32a9be341761c3927843c27042febbe8ea39a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8b32a9be341761c3927843c27042febbe8ea39a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f17dce4dc722e56d5d5069e7317feb17c1de5cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f17dce4dc722e56d5d5069e7317feb17c1de5cc", "html_url": "https://github.com/rust-lang/rust/commit/4f17dce4dc722e56d5d5069e7317feb17c1de5cc"}], "stats": {"total": 37, "additions": 18, "deletions": 19}, "files": [{"sha": "3f544494704bc0400fdf65fa6aded22c911d4d43", "filename": "src/librustc_parse/config.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b8b32a9be341761c3927843c27042febbe8ea39a/src%2Flibrustc_parse%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8b32a9be341761c3927843c27042febbe8ea39a/src%2Flibrustc_parse%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fconfig.rs?ref=b8b32a9be341761c3927843c27042febbe8ea39a", "patch": "@@ -207,30 +207,29 @@ pub fn features(\n     edition: Edition,\n     allow_features: &Option<Vec<String>>,\n ) -> (ast::Crate, Features) {\n-    let features;\n-    {\n-        let mut strip_unconfigured = StripUnconfigured { sess, features: None };\n+    let mut strip_unconfigured = StripUnconfigured { sess, features: None };\n \n-        let unconfigured_attrs = krate.attrs.clone();\n-        let err_count = sess.span_diagnostic.err_count();\n-        if let Some(attrs) = strip_unconfigured.configure(krate.attrs) {\n-            krate.attrs = attrs;\n-        } else {\n-            // the entire crate is unconfigured\n+    let unconfigured_attrs = krate.attrs.clone();\n+    let diag = &sess.span_diagnostic;\n+    let err_count = diag.err_count();\n+    let features = match strip_unconfigured.configure(krate.attrs) {\n+        None => {\n+            // The entire crate is unconfigured.\n             krate.attrs = Vec::new();\n             krate.module.items = Vec::new();\n-            return (krate, Features::default());\n+            Features::default()\n         }\n-\n-        features = get_features(&sess.span_diagnostic, &krate.attrs, edition, allow_features);\n-\n-        // Avoid reconfiguring malformed `cfg_attr`s\n-        if err_count == sess.span_diagnostic.err_count() {\n-            strip_unconfigured.features = Some(&features);\n-            strip_unconfigured.configure(unconfigured_attrs);\n+        Some(attrs) => {\n+            krate.attrs = attrs;\n+            let features = get_features(diag, &krate.attrs, edition, allow_features);\n+            if err_count == diag.err_count() {\n+                // Avoid reconfiguring malformed `cfg_attr`s.\n+                strip_unconfigured.features = Some(&features);\n+                strip_unconfigured.configure(unconfigured_attrs);\n+            }\n+            features\n         }\n-    }\n-\n+    };\n     (krate, features)\n }\n "}]}