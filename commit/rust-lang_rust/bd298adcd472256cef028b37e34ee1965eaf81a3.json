{"sha": "bd298adcd472256cef028b37e34ee1965eaf81a3", "node_id": "C_kwDOAAsO6NoAKGJkMjk4YWRjZDQ3MjI1NmNlZjAyOGIzN2UzNGVlMTk2NWVhZjgxYTM", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-06-26T22:59:29Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-06-28T04:18:06Z"}, "message": "Take into account trait predicate coinductiveness", "tree": {"sha": "c25092139cf0644cf5cf73a0dce1413b23096dec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c25092139cf0644cf5cf73a0dce1413b23096dec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd298adcd472256cef028b37e34ee1965eaf81a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd298adcd472256cef028b37e34ee1965eaf81a3", "html_url": "https://github.com/rust-lang/rust/commit/bd298adcd472256cef028b37e34ee1965eaf81a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd298adcd472256cef028b37e34ee1965eaf81a3/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e16dbb5076d5bd0f259e557fb2291e36ddd53e7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e16dbb5076d5bd0f259e557fb2291e36ddd53e7e", "html_url": "https://github.com/rust-lang/rust/commit/e16dbb5076d5bd0f259e557fb2291e36ddd53e7e"}], "stats": {"total": 42, "additions": 36, "deletions": 6}, "files": [{"sha": "b2c39a4975e2a77c76022967916e1a01931320bc", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/bd298adcd472256cef028b37e34ee1965eaf81a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd298adcd472256cef028b37e34ee1965eaf81a3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=bd298adcd472256cef028b37e34ee1965eaf81a3", "patch": "@@ -512,13 +512,36 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     let cache = previous_stack.cache;\n                     let dfn = cache.next_dfn();\n \n-                    for stack_arg in previous_stack.cache.wf_tys.borrow().iter().rev() {\n+                    for stack_arg in previous_stack.cache.wf_args.borrow().iter().rev() {\n                         if stack_arg.0 != arg {\n                             continue;\n                         }\n                         debug!(\"WellFormed({:?}) on stack\", arg);\n                         if let Some(stack) = previous_stack.head {\n-                            stack.update_reached_depth(stack_arg.1);\n+                            // Okay, let's imagine we have two different stacks:\n+                            //   `T: NonAutoTrait -> WF(T) -> T: NonAutoTrait`\n+                            //   `WF(T) -> T: NonAutoTrait -> WF(T)`\n+                            // Because of this, we need to check that all\n+                            // predicates between the WF goals are coinductive.\n+                            // Otherwise, we can say that `T: NonAutoTrait` is\n+                            // true.\n+                            // Let's imagine we have a predicate stack like\n+                            //         `Foo: Bar -> WF(T) -> T: NonAutoTrait -> T: Auto\n+                            // depth   ^1                    ^2                 ^3\n+                            // and the current predicate is `WF(T)`. `wf_args`\n+                            // would contain `(T, 1)`. We want to check all\n+                            // trait predicates greater than `1`. The previous\n+                            // stack would be `T: Auto`.\n+                            let cycle = stack.iter().take_while(|s| s.depth > stack_arg.1);\n+                            let tcx = self.tcx();\n+                            let cycle =\n+                                cycle.map(|stack| stack.obligation.predicate.to_predicate(tcx));\n+                            if self.coinductive_match(cycle) {\n+                                stack.update_reached_depth(stack_arg.1);\n+                                return Ok(EvaluatedToOk);\n+                            } else {\n+                                return Ok(EvaluatedToRecur);\n+                            }\n                         }\n                         return Ok(EvaluatedToOk);\n                     }\n@@ -534,10 +557,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         Some(mut obligations) => {\n                             self.add_depth(obligations.iter_mut(), obligation.recursion_depth);\n \n-                            cache.wf_tys.borrow_mut().push((arg, previous_stack.depth()));\n+                            cache.wf_args.borrow_mut().push((arg, previous_stack.depth()));\n                             let result =\n                                 self.evaluate_predicates_recursively(previous_stack, obligations);\n-                            cache.wf_tys.borrow_mut().pop();\n+                            cache.wf_args.borrow_mut().pop();\n \n                             let result = result?;\n \n@@ -2465,7 +2488,14 @@ struct ProvisionalEvaluationCache<'tcx> {\n     ///   means the cached value for `F`.\n     map: RefCell<FxHashMap<ty::PolyTraitPredicate<'tcx>, ProvisionalEvaluation>>,\n \n-    wf_tys: RefCell<Vec<(ty::GenericArg<'tcx>, usize)>>,\n+    /// The stack of args that we assume to be true because a `WF(arg)` predicate\n+    /// is on the stack above (and because of wellformedness is coinductive).\n+    /// In an \"ideal\" world, this would share a stack with trait predicates in\n+    /// `TraitObligationStack`. However, trait predicates are *much* hotter than\n+    /// `WellFormed` predicates, and it's very likely that the additional matches\n+    /// will have a perf effect. The value here is the well-formed `GenericArg`\n+    /// and the depth of the trait predicate *above* that well-formed predicate.\n+    wf_args: RefCell<Vec<(ty::GenericArg<'tcx>, usize)>>,\n }\n \n /// A cache value for the provisional cache: contains the depth-first\n@@ -2479,7 +2509,7 @@ struct ProvisionalEvaluation {\n \n impl<'tcx> Default for ProvisionalEvaluationCache<'tcx> {\n     fn default() -> Self {\n-        Self { dfn: Cell::new(0), map: Default::default(), wf_tys: Default::default() }\n+        Self { dfn: Cell::new(0), map: Default::default(), wf_args: Default::default() }\n     }\n }\n "}]}