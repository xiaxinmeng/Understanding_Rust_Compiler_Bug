{"sha": "8a17b36fc5cdd33fdd8a705b82118980b48681f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhMTdiMzZmYzVjZGQzM2ZkZDhhNzA1YjgyMTE4OTgwYjQ4NjgxZjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-15T09:35:18Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-15T09:35:18Z"}, "message": "CTFE: use binary_op to compare integer with match disriminant", "tree": {"sha": "da5ad72400849b9175f459874904e2d2a22b87d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da5ad72400849b9175f459874904e2d2a22b87d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a17b36fc5cdd33fdd8a705b82118980b48681f7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a17b36fc5cdd33fdd8a705b82118980b48681f7", "html_url": "https://github.com/rust-lang/rust/commit/8a17b36fc5cdd33fdd8a705b82118980b48681f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a17b36fc5cdd33fdd8a705b82118980b48681f7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1731f0af22af16c461b2b7abe58988b8549b2de6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1731f0af22af16c461b2b7abe58988b8549b2de6", "html_url": "https://github.com/rust-lang/rust/commit/1731f0af22af16c461b2b7abe58988b8549b2de6"}], "stats": {"total": 13, "additions": 9, "deletions": 4}, "files": [{"sha": "e281ba79639799c7a75e874a76a63814fe630444", "filename": "src/librustc_mir/interpret/terminator/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8a17b36fc5cdd33fdd8a705b82118980b48681f7/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a17b36fc5cdd33fdd8a705b82118980b48681f7/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator%2Fmod.rs?ref=8a17b36fc5cdd33fdd8a705b82118980b48681f7", "patch": "@@ -1,10 +1,10 @@\n use rustc::mir;\n use rustc::ty::{self, Ty};\n-use rustc::ty::layout::LayoutOf;\n+use rustc::ty::layout::{LayoutOf, Size};\n use syntax::codemap::Span;\n use rustc_target::spec::abi::Abi;\n \n-use rustc::mir::interpret::EvalResult;\n+use rustc::mir::interpret::{EvalResult, Scalar};\n use super::{EvalContext, Place, Machine, ValTy};\n \n use rustc_data_structures::indexed_vec::Idx;\n@@ -41,13 +41,18 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M> {\n                 let discr_prim = self.value_to_scalar(discr_val)?;\n                 let discr_layout = self.layout_of(discr_val.ty).unwrap();\n                 trace!(\"SwitchInt({:?}, {:#?})\", discr_prim, discr_layout);\n-                let discr_prim = discr_prim.to_bits(discr_layout.size)?;\n \n                 // Branch to the `otherwise` case by default, if no match is found.\n                 let mut target_block = targets[targets.len() - 1];\n \n                 for (index, &const_int) in values.iter().enumerate() {\n-                    if discr_prim == const_int {\n+                    // Compare using binary_op\n+                    let const_int = Scalar::Bits { bits: const_int, defined: 128 };\n+                    let res = self.binary_op(mir::BinOp::Eq,\n+                        discr_prim, discr_val.ty,\n+                        const_int, discr_val.ty\n+                    )?;\n+                    if res.0.to_bits(Size::from_bytes(1))? != 0 {\n                         target_block = targets[index];\n                         break;\n                     }"}]}