{"sha": "67e961c17f4f30a73d1730ce6eed3cb1d34b5125", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZTk2MWMxN2Y0ZjMwYTczZDE3MzBjZTZlZWQzY2IxZDM0YjUxMjU=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-01-27T08:50:57Z"}, "committer": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-02-04T03:38:44Z"}, "message": "Implement anti-quotes.", "tree": {"sha": "3e37c3aac81e7bb78f06880453b4b06c57d004ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e37c3aac81e7bb78f06880453b4b06c57d004ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67e961c17f4f30a73d1730ce6eed3cb1d34b5125", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67e961c17f4f30a73d1730ce6eed3cb1d34b5125", "html_url": "https://github.com/rust-lang/rust/commit/67e961c17f4f30a73d1730ce6eed3cb1d34b5125", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67e961c17f4f30a73d1730ce6eed3cb1d34b5125/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "477714f08eec291bbcb8f41c5bf187ee5f016425", "url": "https://api.github.com/repos/rust-lang/rust/commits/477714f08eec291bbcb8f41c5bf187ee5f016425", "html_url": "https://github.com/rust-lang/rust/commit/477714f08eec291bbcb8f41c5bf187ee5f016425"}], "stats": {"total": 105, "additions": 93, "deletions": 12}, "files": [{"sha": "b5ca673908ec1f07959147bec0a3fdcae5b97f40", "filename": "src/comp/syntax/ext/qquote.rs", "status": "modified", "additions": 77, "deletions": 8, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/67e961c17f4f30a73d1730ce6eed3cb1d34b5125/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e961c17f4f30a73d1730ce6eed3cb1d34b5125/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fext%2Fqquote.rs?ref=67e961c17f4f30a73d1730ce6eed3cb1d34b5125", "patch": "@@ -2,31 +2,94 @@ import driver::session;\n \n import option::{none, some};\n \n-import syntax::ast::{crate, expr_, expr_mac, mac_invoc, mac_qq, mac_var};\n+import syntax::ast::{crate, expr_, expr_mac, mac_invoc,\n+                     mac_qq, mac_aq, mac_var};\n import syntax::fold::*;\n+import syntax::visit::*;\n import syntax::ext::base::*;\n import syntax::ext::build::*;\n import syntax::parse::parser::parse_expr_from_source_str;\n \n+import syntax::print::*;\n+import std::io::*;\n+\n import codemap::span;\n \n-fn expand_qquote(cx: ext_ctxt, sp: span, _e: @ast::expr) -> ast::expr_ {\n-    let str = codemap::span_to_snippet(sp, cx.session().parse_sess.cm);\n+type aq_ctxt = @{lo: uint,\n+                 mutable gather: [{lo: uint, hi: uint, e: @ast::expr}]};\n+\n+fn gather_anti_quotes(lo: uint, e: @ast::expr) -> aq_ctxt\n+{\n+    let v = @{visit_expr: visit_expr_aq\n+              with *default_visitor()};\n+    let cx = @{lo:lo, mutable gather: []};\n+    visit_expr_aq(e, cx, mk_vt(v));\n+    ret cx;\n+}\n+\n+fn visit_expr_aq(expr: @ast::expr, &&cx: aq_ctxt, v: vt<aq_ctxt>)\n+{\n+    alt (expr.node) {\n+      expr_mac({node: mac_aq(sp, e), _}) {\n+        cx.gather += [{lo: sp.lo - cx.lo, hi: sp.hi - cx.lo,\n+                       e: e}];\n+      }\n+      _ {visit_expr(expr, cx, v);}\n+    }\n+}\n+\n+fn expand_qquote(ecx: ext_ctxt, sp: span, e: @ast::expr) -> ast::expr_ {\n+    let str = codemap::span_to_snippet(sp, ecx.session().parse_sess.cm);\n+    let qcx = gather_anti_quotes(sp.lo, e);\n+    let cx = qcx;\n+    let prev = 0u;\n+    for {lo: lo, _} in cx.gather {\n+        assert lo > prev;\n+        prev = lo;\n+    }\n+    let str2 = \"\";\n+    let active = true;\n+    let i = 0u, j = 0u;\n+    let g_len = vec::len(cx.gather);\n+    str::chars_iter(str) {|ch|\n+        if (active && j < g_len && i == cx.gather[j].lo) {\n+            assert ch == '$';\n+            active = false;\n+            str2 += #fmt(\" $%u \", j);\n+        }\n+        if (active) {str::push_char(str2, ch);}\n+        i += 1u;\n+        if (!active && j < g_len && i == cx.gather[j].hi) {\n+            assert ch == ')';\n+            active = true;\n+            j += 1u;\n+        }\n+    }\n+\n+    let cx = ecx;\n     let session_call = bind mk_call_(cx,sp,\n                                      mk_access(cx,sp,[\"ext_cx\"], \"session\"),\n                                      []);\n-    let call = mk_call(cx,sp,\n+    let pcall = mk_call(cx,sp,\n                        [\"syntax\", \"parse\", \"parser\",\n                         \"parse_expr_from_source_str\"],\n                        [mk_str(cx,sp, \"<anon>\"),\n                         mk_unary(cx,sp, ast::box(ast::imm),\n-                                 mk_str(cx,sp, str)),\n+                                 mk_str(cx,sp, str2)),\n                         mk_access_(cx,sp,\n                                    mk_access_(cx,sp, session_call(), \"opts\"),\n                                    \"cfg\"),\n                         mk_access_(cx,sp, session_call(), \"parse_sess\")]\n                       );\n-    ret call.node;\n+    let rcall = pcall;\n+    if (g_len > 0u) {\n+        rcall = mk_call(cx,sp,\n+                        [\"syntax\", \"ext\", \"qquote\", \"replace\"],\n+                        [pcall,\n+                         mk_vec_e(cx,sp, vec::map(qcx.gather, {|g| g.e}))]);\n+    }\n+\n+    ret rcall.node;\n }\n \n fn replace(e: @ast::expr, repls: [@ast::expr]) -> @ast::expr {\n@@ -43,14 +106,20 @@ fn replace_expr(repls: [@ast::expr],\n                 orig: fn@(ast::expr_, span, ast_fold)->(ast::expr_, span))\n     -> (ast::expr_, span)\n {\n-    // note: nested enum matching will be really nice here so I can jusy say\n-    //       expr_mac(mac_var(i))\n     alt e {\n       expr_mac({node: mac_var(i), _}) {let r = repls[i]; (r.node, r.span)}\n       _ {orig(e,s,fld)}\n     }\n }\n \n+fn print_expr(expr: @ast::expr) {\n+    let stdout = std::io::stdout();\n+    let pp = pprust::rust_printer(stdout);\n+    pprust::print_expr(pp, expr);\n+    pp::eof(pp.s);\n+    stdout.write_str(\"\\n\");\n+}\n+\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "2ad3a7f013556e345a1a954249c22846994baadf", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/67e961c17f4f30a73d1730ce6eed3cb1d34b5125/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e961c17f4f30a73d1730ce6eed3cb1d34b5125/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=67e961c17f4f30a73d1730ce6eed3cb1d34b5125", "patch": "@@ -372,10 +372,11 @@ fn next_token_inner(rdr: reader) -> token::token {\n             }\n             rdr.bump();\n             ret token::DOLLAR_NUM(val);\n-        } else if c == '(' {\n+        } else if rdr.curr == '(' {\n+            rdr.bump();\n             ret token::DOLLAR_LPAREN;\n         } else {\n-            rdr.fatal(\"expected digit3\");\n+            rdr.fatal(\"expected digit\");\n         }\n       }\n "}, {"sha": "ecbae8a1fc24842c10ef605712cfe9395b36e5b8", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/67e961c17f4f30a73d1730ce6eed3cb1d34b5125/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67e961c17f4f30a73d1730ce6eed3cb1d34b5125/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=67e961c17f4f30a73d1730ce6eed3cb1d34b5125", "patch": "@@ -630,8 +630,19 @@ fn parse_seq<T: copy>(bra: token::token, ket: token::token,\n \n fn have_dollar(p: parser) -> option::t<ast::mac_> {\n     alt p.token {\n-      token::DOLLAR_NUM(num) {p.bump(); some(ast::mac_var(num))}\n-      _                      {none}\n+      token::DOLLAR_NUM(num) {\n+        p.bump();\n+        some(ast::mac_var(num))\n+      }\n+      token::DOLLAR_LPAREN {\n+        let lo = p.span.lo;\n+        p.bump();\n+        let e = parse_expr(p);\n+        expect(p, token::RPAREN);\n+        let hi = p.last_span.hi;\n+        some(ast::mac_aq(ast_util::mk_sp(lo,hi), e))\n+      }\n+      _ {none}\n     }\n }\n "}]}