{"sha": "211376927d02a032987d61a445648e7c1e6cc4ca", "node_id": "C_kwDOAAsO6NoAKDIxMTM3NjkyN2QwMmEwMzI5ODdkNjFhNDQ1NjQ4ZTdjMWU2Y2M0Y2E", "commit": {"author": {"name": "Nicky Lim", "email": "nickylim.p@gmail.com", "date": "2023-05-04T18:47:14Z"}, "committer": {"name": "Nicky Lim", "email": "nickylim.p@gmail.com", "date": "2023-06-11T10:27:26Z"}, "message": "Update ui test", "tree": {"sha": "db0e91032399a84ded337a559e3e5d2149a03214", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db0e91032399a84ded337a559e3e5d2149a03214"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/211376927d02a032987d61a445648e7c1e6cc4ca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/211376927d02a032987d61a445648e7c1e6cc4ca", "html_url": "https://github.com/rust-lang/rust/commit/211376927d02a032987d61a445648e7c1e6cc4ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/211376927d02a032987d61a445648e7c1e6cc4ca/comments", "author": {"login": "nicklimmm", "id": 65026286, "node_id": "MDQ6VXNlcjY1MDI2Mjg2", "avatar_url": "https://avatars.githubusercontent.com/u/65026286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicklimmm", "html_url": "https://github.com/nicklimmm", "followers_url": "https://api.github.com/users/nicklimmm/followers", "following_url": "https://api.github.com/users/nicklimmm/following{/other_user}", "gists_url": "https://api.github.com/users/nicklimmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicklimmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicklimmm/subscriptions", "organizations_url": "https://api.github.com/users/nicklimmm/orgs", "repos_url": "https://api.github.com/users/nicklimmm/repos", "events_url": "https://api.github.com/users/nicklimmm/events{/privacy}", "received_events_url": "https://api.github.com/users/nicklimmm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nicklimmm", "id": 65026286, "node_id": "MDQ6VXNlcjY1MDI2Mjg2", "avatar_url": "https://avatars.githubusercontent.com/u/65026286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nicklimmm", "html_url": "https://github.com/nicklimmm", "followers_url": "https://api.github.com/users/nicklimmm/followers", "following_url": "https://api.github.com/users/nicklimmm/following{/other_user}", "gists_url": "https://api.github.com/users/nicklimmm/gists{/gist_id}", "starred_url": "https://api.github.com/users/nicklimmm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nicklimmm/subscriptions", "organizations_url": "https://api.github.com/users/nicklimmm/orgs", "repos_url": "https://api.github.com/users/nicklimmm/repos", "events_url": "https://api.github.com/users/nicklimmm/events{/privacy}", "received_events_url": "https://api.github.com/users/nicklimmm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6033895ec20bc6def7eee32eb3532faa8b1c67d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6033895ec20bc6def7eee32eb3532faa8b1c67d5", "html_url": "https://github.com/rust-lang/rust/commit/6033895ec20bc6def7eee32eb3532faa8b1c67d5"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "e7c90dcc81bb206861c209d4f252416ade1d5042", "filename": "tests/ui/lint/type-overflow.stderr", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/211376927d02a032987d61a445648e7c1e6cc4ca/tests%2Fui%2Flint%2Ftype-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/211376927d02a032987d61a445648e7c1e6cc4ca/tests%2Fui%2Flint%2Ftype-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Ftype-overflow.stderr?ref=211376927d02a032987d61a445648e7c1e6cc4ca", "patch": "@@ -16,17 +16,33 @@ warning: literal out of range for `i8`\n   --> $DIR/type-overflow.rs:10:16\n    |\n LL |     let fail = 0b1000_0001i8;\n-   |                ^^^^^^^^^^^^^ help: consider using the type `u8` instead: `0b1000_0001u8`\n+   |                ^^^^^^^^^^^^^\n    |\n    = note: the literal `0b1000_0001i8` (decimal `129`) does not fit into the type `i8` and will become `-127i8`\n+help: consider using the type `u8` instead\n+   |\n+LL |     let fail = 0b1000_0001u8;\n+   |                ~~~~~~~~~~~~~\n+help: to use as a negative number (decimal `-127`), consider using the type `u8` for the literal and cast it to `i8`\n+   |\n+LL |     let fail = 0b1000_0001u8 as i8;\n+   |                ~~~~~~~~~~~~~~~~~~~\n \n warning: literal out of range for `i64`\n   --> $DIR/type-overflow.rs:12:16\n    |\n LL |     let fail = 0x8000_0000_0000_0000i64;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using the type `u64` instead: `0x8000_0000_0000_0000u64`\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the literal `0x8000_0000_0000_0000i64` (decimal `9223372036854775808`) does not fit into the type `i64` and will become `-9223372036854775808i64`\n+help: consider using the type `u64` instead\n+   |\n+LL |     let fail = 0x8000_0000_0000_0000u64;\n+   |                ~~~~~~~~~~~~~~~~~~~~~~~~\n+help: to use as a negative number (decimal `-9223372036854775808`), consider using the type `u64` for the literal and cast it to `i64`\n+   |\n+LL |     let fail = 0x8000_0000_0000_0000u64 as i64;\n+   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n warning: literal out of range for `u32`\n   --> $DIR/type-overflow.rs:14:16\n@@ -44,6 +60,10 @@ LL |     let fail: i128 = 0x8000_0000_0000_0000_0000_0000_0000_0000;\n    |\n    = note: the literal `0x8000_0000_0000_0000_0000_0000_0000_0000` (decimal `170141183460469231731687303715884105728`) does not fit into the type `i128` and will become `-170141183460469231731687303715884105728i128`\n    = help: consider using the type `u128` instead\n+help: to use as a negative number (decimal `-170141183460469231731687303715884105728`), consider using the type `u128` for the literal and cast it to `i128`\n+   |\n+LL |     let fail: i128 = 0x8000_0000_0000_0000_0000_0000_0000_0000u128 as i128;\n+   |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n warning: literal out of range for `i32`\n   --> $DIR/type-overflow.rs:19:16\n@@ -53,6 +73,10 @@ LL |     let fail = 0x8FFF_FFFF_FFFF_FFFE;\n    |\n    = note: the literal `0x8FFF_FFFF_FFFF_FFFE` (decimal `10376293541461622782`) does not fit into the type `i32` and will become `-2i32`\n    = help: consider using the type `i128` instead\n+help: to use as a negative number (decimal `-2`), consider using the type `u32` for the literal and cast it to `i32`\n+   |\n+LL |     let fail = 0x8FFF_FFFF_FFFF_FFFEu32 as i32;\n+   |                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n \n warning: literal out of range for `i8`\n   --> $DIR/type-overflow.rs:21:17"}]}