{"sha": "20ffea6b8a9f614eed854adbba75626effc1f111", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwZmZlYTZiOGE5ZjYxNGVlZDg1NGFkYmJhNzU2MjZlZmZjMWYxMTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-25T10:31:33Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-12-25T10:31:33Z"}, "message": "Change the way JIT mode is selected", "tree": {"sha": "f90dcdaba67197dd1b84293dc2b4cad94a6d78d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f90dcdaba67197dd1b84293dc2b4cad94a6d78d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/20ffea6b8a9f614eed854adbba75626effc1f111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/20ffea6b8a9f614eed854adbba75626effc1f111", "html_url": "https://github.com/rust-lang/rust/commit/20ffea6b8a9f614eed854adbba75626effc1f111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/20ffea6b8a9f614eed854adbba75626effc1f111/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c556e4dd354056ef3c4a9fbcd1ab67510e935833", "url": "https://api.github.com/repos/rust-lang/rust/commits/c556e4dd354056ef3c4a9fbcd1ab67510e935833", "html_url": "https://github.com/rust-lang/rust/commit/c556e4dd354056ef3c4a9fbcd1ab67510e935833"}], "stats": {"total": 130, "additions": 81, "deletions": 49}, "files": [{"sha": "283eec91e219b5ee49ddd03126cf85aff0b309de", "filename": "Readme.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20ffea6b8a9f614eed854adbba75626effc1f111/Readme.md", "raw_url": "https://github.com/rust-lang/rust/raw/20ffea6b8a9f614eed854adbba75626effc1f111/Readme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Readme.md?ref=20ffea6b8a9f614eed854adbba75626effc1f111", "patch": "@@ -68,7 +68,7 @@ $ $cg_clif_dir/build/cargo.sh jit\n or\n \n ```bash\n-$ $cg_clif_dir/build/bin/cg_clif --jit my_crate.rs\n+$ $cg_clif_dir/build/bin/cg_clif -Cllvm-args=mode=jit -Cprefer-dynamic my_crate.rs\n ```\n \n ### Shell\n@@ -77,7 +77,7 @@ These are a few functions that allow you to easily run rust code from the shell\n \n ```bash\n function jit_naked() {\n-    echo \"$@\" | $cg_clif_dir/build/bin/cg_clif - --jit\n+    echo \"$@\" | $cg_clif_dir/build/bin/cg_clif - -Cllvm-args=mode=jit -Cprefer-dynamic\n }\n \n function jit() {"}, {"sha": "934b2c6d7a1c31018b71fd75fd9d8bb2e8819c53", "filename": "scripts/cargo.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20ffea6b8a9f614eed854adbba75626effc1f111/scripts%2Fcargo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/20ffea6b8a9f614eed854adbba75626effc1f111/scripts%2Fcargo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Fcargo.sh?ref=20ffea6b8a9f614eed854adbba75626effc1f111", "patch": "@@ -10,7 +10,7 @@ cmd=$1\n shift || true\n \n if [[ \"$cmd\" = \"jit\" ]]; then\n-cargo \"+${TOOLCHAIN}\" rustc \"$@\" -- --jit\n+cargo \"+${TOOLCHAIN}\" rustc \"$@\" -- -Cllvm-args=mode=jit -Cprefer-dynamic\n else\n cargo \"+${TOOLCHAIN}\" \"$cmd\" \"$@\"\n fi"}, {"sha": "15388926ec9ec62ddb5c707cc64c926317f75f09", "filename": "scripts/filter_profile.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20ffea6b8a9f614eed854adbba75626effc1f111/scripts%2Ffilter_profile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ffea6b8a9f614eed854adbba75626effc1f111/scripts%2Ffilter_profile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ffilter_profile.rs?ref=20ffea6b8a9f614eed854adbba75626effc1f111", "patch": "@@ -4,7 +4,7 @@\n pushd $(dirname \"$0\")/../\n source build/config.sh\n popd\n-PROFILE=$1 OUTPUT=$2 exec $RUSTC $RUSTFLAGS --jit $0\n+PROFILE=$1 OUTPUT=$2 exec $RUSTC $RUSTFLAGS -Cllvm-args=mode=jit -Cprefer-dynamic $0\n #*/\n \n //! This program filters away uninteresting samples and trims uninteresting frames for stackcollapse"}, {"sha": "60ed7aac8aa51887b59846c222c0285b713e0fbc", "filename": "scripts/tests.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20ffea6b8a9f614eed854adbba75626effc1f111/scripts%2Ftests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/20ffea6b8a9f614eed854adbba75626effc1f111/scripts%2Ftests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/scripts%2Ftests.sh?ref=20ffea6b8a9f614eed854adbba75626effc1f111", "patch": "@@ -15,7 +15,7 @@ function no_sysroot_tests() {\n \n     if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n         echo \"[JIT] mini_core_hello_world\"\n-        CG_CLIF_JIT_ARGS=\"abc bcd\" $MY_RUSTC --jit example/mini_core_hello_world.rs --cfg jit --target \"$HOST_TRIPLE\"\n+        CG_CLIF_JIT_ARGS=\"abc bcd\" $MY_RUSTC -Cllvm-args=mode=jit -Cprefer-dynamic example/mini_core_hello_world.rs --cfg jit --target \"$HOST_TRIPLE\"\n     else\n         echo \"[JIT] mini_core_hello_world (skipped)\"\n     fi\n@@ -37,7 +37,7 @@ function base_sysroot_tests() {\n \n     if [[ \"$JIT_SUPPORTED\" = \"1\" ]]; then\n         echo \"[JIT] std_example\"\n-        $MY_RUSTC --jit example/std_example.rs --target \"$HOST_TRIPLE\"\n+        $MY_RUSTC -Cllvm-args=mode=jit -Cprefer-dynamic example/std_example.rs --target \"$HOST_TRIPLE\"\n     else\n         echo \"[JIT] std_example (skipped)\"\n     fi"}, {"sha": "58e45b4e9b972fbb1adbc6bbe112015654cc4f4c", "filename": "src/bin/cg_clif.rs", "status": "modified", "additions": 2, "deletions": 17, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/20ffea6b8a9f614eed854adbba75626effc1f111/src%2Fbin%2Fcg_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ffea6b8a9f614eed854adbba75626effc1f111/src%2Fbin%2Fcg_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif.rs?ref=20ffea6b8a9f614eed854adbba75626effc1f111", "patch": "@@ -44,9 +44,7 @@ fn main() {\n     let mut callbacks = CraneliftPassesCallbacks::default();\n     rustc_driver::install_ice_hook();\n     let exit_code = rustc_driver::catch_with_exit_code(|| {\n-        let mut use_jit = false;\n-\n-        let mut args = std::env::args_os()\n+        let args = std::env::args_os()\n             .enumerate()\n             .map(|(i, arg)| {\n                 arg.into_string().unwrap_or_else(|arg| {\n@@ -56,23 +54,10 @@ fn main() {\n                     )\n                 })\n             })\n-            .filter(|arg| {\n-                if arg == \"--jit\" {\n-                    use_jit = true;\n-                    false\n-                } else {\n-                    true\n-                }\n-            })\n             .collect::<Vec<_>>();\n-        if use_jit {\n-            args.push(\"-Cprefer-dynamic\".to_string());\n-        }\n         let mut run_compiler = rustc_driver::RunCompiler::new(&args, &mut callbacks);\n         run_compiler.set_make_codegen_backend(Some(Box::new(move |_| {\n-            Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend {\n-                config: rustc_codegen_cranelift::BackendConfig { use_jit },\n-            })\n+            Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend { config: None })\n         })));\n         run_compiler.run()\n     });"}, {"sha": "8ee4cd46c94e0d2f36591b39622912437b95c225", "filename": "src/bin/cg_clif_build_sysroot.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/20ffea6b8a9f614eed854adbba75626effc1f111/src%2Fbin%2Fcg_clif_build_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ffea6b8a9f614eed854adbba75626effc1f111/src%2Fbin%2Fcg_clif_build_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcg_clif_build_sysroot.rs?ref=20ffea6b8a9f614eed854adbba75626effc1f111", "patch": "@@ -92,9 +92,7 @@ fn main() {\n         let mut run_compiler = rustc_driver::RunCompiler::new(&args, &mut callbacks);\n         if use_clif {\n             run_compiler.set_make_codegen_backend(Some(Box::new(move |_| {\n-                Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend {\n-                    config: rustc_codegen_cranelift::BackendConfig { use_jit: false },\n-                })\n+                Box::new(rustc_codegen_cranelift::CraneliftCodegenBackend { config: None })\n             })));\n         }\n         run_compiler.run()"}, {"sha": "3a942a15491328f25be12a6a6d1d4af32365b19f", "filename": "src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/20ffea6b8a9f614eed854adbba75626effc1f111/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ffea6b8a9f614eed854adbba75626effc1f111/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=20ffea6b8a9f614eed854adbba75626effc1f111", "patch": "@@ -106,7 +106,7 @@ pub(super) fn run_jit(tcx: TyCtxt<'_>) -> ! {\n \n     let finalized_main: *const u8 = jit_module.get_finalized_function(main_func_id);\n \n-    println!(\"Rustc codegen cranelift will JIT run the executable, because --jit was passed\");\n+    println!(\"Rustc codegen cranelift will JIT run the executable, because -Cllvm-args=mode=jit was passed\");\n \n     let f: extern \"C\" fn(c_int, *const *const c_char) -> c_int =\n         unsafe { ::std::mem::transmute(finalized_main) };"}, {"sha": "49bb79c101a3f1a58fa4eb7bc7915251ccb25f3b", "filename": "src/driver/mod.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/20ffea6b8a9f614eed854adbba75626effc1f111/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ffea6b8a9f614eed854adbba75626effc1f111/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=20ffea6b8a9f614eed854adbba75626effc1f111", "patch": "@@ -7,6 +7,7 @@ use rustc_middle::middle::cstore::EncodedMetadata;\n use rustc_middle::mir::mono::{Linkage as RLinkage, MonoItem, Visibility};\n \n use crate::prelude::*;\n+use crate::CodegenMode;\n \n mod aot;\n #[cfg(feature = \"jit\")]\n@@ -20,24 +21,25 @@ pub(crate) fn codegen_crate(\n ) -> Box<dyn Any> {\n     tcx.sess.abort_if_errors();\n \n-    if config.use_jit {\n-        let is_executable = tcx\n-            .sess\n-            .crate_types()\n-            .contains(&rustc_session::config::CrateType::Executable);\n-        if !is_executable {\n-            tcx.sess.fatal(\"can't jit non-executable crate\");\n-        }\n+    match config.codegen_mode {\n+        CodegenMode::Aot => aot::run_aot(tcx, metadata, need_metadata_module),\n+        CodegenMode::Jit => {\n+            let is_executable = tcx\n+                .sess\n+                .crate_types()\n+                .contains(&rustc_session::config::CrateType::Executable);\n+            if !is_executable {\n+                tcx.sess.fatal(\"can't jit non-executable crate\");\n+            }\n \n-        #[cfg(feature = \"jit\")]\n-        let _: ! = jit::run_jit(tcx);\n+            #[cfg(feature = \"jit\")]\n+            let _: ! = jit::run_jit(tcx);\n \n-        #[cfg(not(feature = \"jit\"))]\n-        tcx.sess\n-            .fatal(\"jit support was disabled when compiling rustc_codegen_cranelift\");\n+            #[cfg(not(feature = \"jit\"))]\n+            tcx.sess\n+                .fatal(\"jit support was disabled when compiling rustc_codegen_cranelift\");\n+        }\n     }\n-\n-    aot::run_aot(tcx, metadata, need_metadata_module)\n }\n \n fn predefine_mono_items<'tcx>("}, {"sha": "91e1efb71b9201c4c05c1b0e738ff673b3b34a40", "filename": "src/lib.rs", "status": "modified", "additions": 54, "deletions": 7, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/20ffea6b8a9f614eed854adbba75626effc1f111/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/20ffea6b8a9f614eed854adbba75626effc1f111/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=20ffea6b8a9f614eed854adbba75626effc1f111", "patch": "@@ -5,7 +5,8 @@\n     associated_type_bounds,\n     never_type,\n     try_blocks,\n-    hash_drain_filter\n+    hash_drain_filter,\n+    str_split_once\n )]\n #![warn(rust_2018_idioms)]\n #![warn(unused_lifetimes)]\n@@ -34,6 +35,7 @@ extern crate rustc_target;\n extern crate rustc_driver;\n \n use std::any::Any;\n+use std::str::FromStr;\n \n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_codegen_ssa::CodegenResults;\n@@ -172,12 +174,53 @@ impl<'tcx, M: Module> CodegenCx<'tcx, M> {\n }\n \n #[derive(Copy, Clone, Debug)]\n+pub enum CodegenMode {\n+    Aot,\n+    Jit,\n+}\n+\n+impl Default for CodegenMode {\n+    fn default() -> Self {\n+        CodegenMode::Aot\n+    }\n+}\n+\n+impl FromStr for CodegenMode {\n+    type Err = String;\n+\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        match s {\n+            \"aot\" => Ok(CodegenMode::Aot),\n+            \"jit\" => Ok(CodegenMode::Jit),\n+            _ => Err(format!(\"Unknown codegen mode `{}`\", s)),\n+        }\n+    }\n+}\n+\n+#[derive(Copy, Clone, Debug, Default)]\n pub struct BackendConfig {\n-    pub use_jit: bool,\n+    pub codegen_mode: CodegenMode,\n+}\n+\n+impl BackendConfig {\n+    fn from_opts(opts: &[String]) -> Result<Self, String> {\n+        let mut config = BackendConfig::default();\n+        for opt in opts {\n+            if let Some((name, value)) = opt.split_once('=') {\n+                match name {\n+                    \"mode\" => config.codegen_mode = value.parse()?,\n+                    _ => return Err(format!(\"Unknown option `{}`\", name)),\n+                }\n+            } else {\n+                return Err(format!(\"Invalid option `{}`\", opt));\n+            }\n+        }\n+        Ok(config)\n+    }\n }\n \n pub struct CraneliftCodegenBackend {\n-    pub config: BackendConfig,\n+    pub config: Option<BackendConfig>,\n }\n \n impl CodegenBackend for CraneliftCodegenBackend {\n@@ -204,7 +247,13 @@ impl CodegenBackend for CraneliftCodegenBackend {\n         metadata: EncodedMetadata,\n         need_metadata_module: bool,\n     ) -> Box<dyn Any> {\n-        let res = driver::codegen_crate(tcx, metadata, need_metadata_module, self.config);\n+        let config = if let Some(config) = self.config {\n+            config\n+        } else {\n+            BackendConfig::from_opts(&tcx.sess.opts.cg.llvm_args)\n+                .unwrap_or_else(|err| tcx.sess.fatal(&err))\n+        };\n+        let res = driver::codegen_crate(tcx, metadata, need_metadata_module, config);\n \n         rustc_symbol_mangling::test::report_symbol_names(tcx);\n \n@@ -305,7 +354,5 @@ fn build_isa(sess: &Session) -> Box<dyn isa::TargetIsa + 'static> {\n /// This is the entrypoint for a hot plugged rustc_codegen_cranelift\n #[no_mangle]\n pub fn __rustc_codegen_backend() -> Box<dyn CodegenBackend> {\n-    Box::new(CraneliftCodegenBackend {\n-        config: BackendConfig { use_jit: false },\n-    })\n+    Box::new(CraneliftCodegenBackend { config: None })\n }"}]}