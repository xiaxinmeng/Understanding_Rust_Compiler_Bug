{"sha": "18b59f5d6d6fab80b5526bf20859b5a906332e9a", "node_id": "C_kwDOAAsO6NoAKDE4YjU5ZjVkNmQ2ZmFiODBiNTUyNmJmMjA4NTliNWE5MDYzMzJlOWE", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-14T15:01:09Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2023-03-16T13:22:18Z"}, "message": "resolve: Minor cleanup to `Resolver::get_module`", "tree": {"sha": "13261db7921e98a5eef218de0e0d310ac58a57b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13261db7921e98a5eef218de0e0d310ac58a57b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18b59f5d6d6fab80b5526bf20859b5a906332e9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18b59f5d6d6fab80b5526bf20859b5a906332e9a", "html_url": "https://github.com/rust-lang/rust/commit/18b59f5d6d6fab80b5526bf20859b5a906332e9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18b59f5d6d6fab80b5526bf20859b5a906332e9a/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52c73975b48b49ab6b14896a9d8d6fc665cf85da", "url": "https://api.github.com/repos/rust-lang/rust/commits/52c73975b48b49ab6b14896a9d8d6fc665cf85da", "html_url": "https://github.com/rust-lang/rust/commit/52c73975b48b49ab6b14896a9d8d6fc665cf85da"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "fbac219c322fcfea7c3a1cf1fb3222b1713f9e78", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/18b59f5d6d6fab80b5526bf20859b5a906332e9a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b59f5d6d6fab80b5526bf20859b5a906332e9a/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=18b59f5d6d6fab80b5526bf20859b5a906332e9a", "patch": "@@ -115,27 +115,24 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         if !def_id.is_local() {\n             let def_kind = self.cstore().def_kind(def_id);\n-            match def_kind {\n-                DefKind::Mod | DefKind::Enum | DefKind::Trait => {\n-                    let parent = self\n-                        .tcx\n-                        .opt_parent(def_id)\n-                        .map(|parent_id| self.get_nearest_non_block_module(parent_id));\n-                    let expn_id = self.cstore().module_expansion_untracked(def_id, &self.tcx.sess);\n-                    Some(self.new_module(\n-                        parent,\n-                        ModuleKind::Def(def_kind, def_id, self.tcx.item_name(def_id)),\n-                        expn_id,\n-                        self.def_span(def_id),\n-                        // FIXME: Account for `#[no_implicit_prelude]` attributes.\n-                        parent.map_or(false, |module| module.no_implicit_prelude),\n-                    ))\n-                }\n-                _ => None,\n+            if let DefKind::Mod | DefKind::Enum | DefKind::Trait = def_kind {\n+                let parent = self\n+                    .tcx\n+                    .opt_parent(def_id)\n+                    .map(|parent_id| self.get_nearest_non_block_module(parent_id));\n+                let expn_id = self.cstore().module_expansion_untracked(def_id, &self.tcx.sess);\n+                return Some(self.new_module(\n+                    parent,\n+                    ModuleKind::Def(def_kind, def_id, self.tcx.item_name(def_id)),\n+                    expn_id,\n+                    self.def_span(def_id),\n+                    // FIXME: Account for `#[no_implicit_prelude]` attributes.\n+                    parent.map_or(false, |module| module.no_implicit_prelude),\n+                ));\n             }\n-        } else {\n-            None\n         }\n+\n+        None\n     }\n \n     pub(crate) fn expn_def_scope(&mut self, expn_id: ExpnId) -> Module<'a> {"}]}