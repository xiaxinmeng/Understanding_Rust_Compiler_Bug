{"sha": "59b186d99aec738eafb39f171f963138be4c1a86", "node_id": "C_kwDOAAsO6NoAKDU5YjE4NmQ5OWFlYzczOGVhZmIzOWYxNzFmOTYzMTM4YmU0YzFhODY", "commit": {"author": {"name": "Flying-Toast", "email": "38232168+Flying-Toast@users.noreply.github.com", "date": "2021-07-31T16:14:30Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-10-11T07:46:27Z"}, "message": "Add enum_intrinsics_non_enums lint", "tree": {"sha": "00a2ec004833bf8bb1d2d5ff15fb6af73b265fd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00a2ec004833bf8bb1d2d5ff15fb6af73b265fd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59b186d99aec738eafb39f171f963138be4c1a86", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmFj69YACgkQHKDfKvWd\naKU4YBAApRWNcmr7ipn4MZYDQDNCQdz0sK7ezxGWIdiJrNG++NBIW/VV0yGPztvW\npik6ZZtINkyj2MlQY8A/GrdRCiQvod0wWhgTa389wbaNeoqr/Gt1h4CvPXdYK7Wf\nVdDpecci3tNnKJZXUXN1oen6XsufeGqiMU5/Vg75IW4ZNR3TZOz1RUE1tPBw4l0d\nub528YnaeXCh1EMRqHeCqDMFIP3JvxlFT7TtvLEcDM2p1GyKCxQ4jgJ+ntePNFZR\nU41M02udtlyjce4OnMrf2Ybu0YkyG4xZmUkvcNpawmDTfsxw+M9RFEHP+slBUeUM\naSucqic3hGCHsLM612a7ho9KupWRZLwG47LyaKxG9N2nEjGI5znsTnfTFf+oJrWL\no7uKDPUVArn4yg3CQDuZlVMYolPXeKjiwdlFL4aiR3Ky3EvPQ2f76KAjFkI2UuWd\nKO7ORJ4BPIsSnNcJvGiXgspcBdKQayl1Ebcc5tMeslCXex6oGTRBm9qkKijnomVk\nT8/30Uw1477LjPdCZLIR7KrRLD26TZbATLpfAbe0rIx334bWvu4DBeC7PTWxgSc7\nf3lwicoMP3CHN8xNAGDbSUCFjUVoHpqVSgz0+t3a+Tk0B9wqaX0YLzuYkNRRlMHF\nmqYhz6JIZIR1oeECvxhxTV+HJ2v1xuu/Oa9KAGAd9BPVBgcTR00=\n=J4uM\n-----END PGP SIGNATURE-----", "payload": "tree 00a2ec004833bf8bb1d2d5ff15fb6af73b265fd1\nparent 9a757817c352801de8b0593728f8aee21e23cd53\nauthor Flying-Toast <38232168+Flying-Toast@users.noreply.github.com> 1627748070 -0400\ncommitter flip1995 <philipp.krones@embecosm.com> 1633938387 +0200\n\nAdd enum_intrinsics_non_enums lint\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59b186d99aec738eafb39f171f963138be4c1a86", "html_url": "https://github.com/rust-lang/rust/commit/59b186d99aec738eafb39f171f963138be4c1a86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59b186d99aec738eafb39f171f963138be4c1a86/comments", "author": {"login": "Flying-Toast", "id": 38232168, "node_id": "MDQ6VXNlcjM4MjMyMTY4", "avatar_url": "https://avatars.githubusercontent.com/u/38232168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Flying-Toast", "html_url": "https://github.com/Flying-Toast", "followers_url": "https://api.github.com/users/Flying-Toast/followers", "following_url": "https://api.github.com/users/Flying-Toast/following{/other_user}", "gists_url": "https://api.github.com/users/Flying-Toast/gists{/gist_id}", "starred_url": "https://api.github.com/users/Flying-Toast/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Flying-Toast/subscriptions", "organizations_url": "https://api.github.com/users/Flying-Toast/orgs", "repos_url": "https://api.github.com/users/Flying-Toast/repos", "events_url": "https://api.github.com/users/Flying-Toast/events{/privacy}", "received_events_url": "https://api.github.com/users/Flying-Toast/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a757817c352801de8b0593728f8aee21e23cd53", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a757817c352801de8b0593728f8aee21e23cd53", "html_url": "https://github.com/rust-lang/rust/commit/9a757817c352801de8b0593728f8aee21e23cd53"}], "stats": {"total": 278, "additions": 277, "deletions": 1}, "files": [{"sha": "876245747f64a50acf8a94f702fd3bfc176a9978", "filename": "compiler/rustc_lint/src/enum_intrinsics_non_enums.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/59b186d99aec738eafb39f171f963138be4c1a86/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b186d99aec738eafb39f171f963138be4c1a86/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fenum_intrinsics_non_enums.rs?ref=59b186d99aec738eafb39f171f963138be4c1a86", "patch": "@@ -0,0 +1,106 @@\n+use crate::{context::LintContext, LateContext, LateLintPass};\n+use rustc_hir as hir;\n+use rustc_middle::ty::{fold::TypeFoldable, Ty};\n+use rustc_span::{symbol::sym, Span};\n+\n+declare_lint! {\n+    /// The `enum_intrinsics_non_enums` lint detects calls to\n+    /// intrinsic functions that require an enum ([`core::mem::discriminant`],\n+    /// [`core::mem::variant_count`]), but are called with a non-enum type.\n+    ///\n+    /// [`core::mem::discriminant`]: https://doc.rust-lang.org/core/mem/fn.discriminant.html\n+    /// [`core::mem::variant_count`]: https://doc.rust-lang.org/core/mem/fn.variant_count.html\n+    ///\n+    /// ### Example\n+    ///\n+    /// ```rust,compile_fail\n+    /// #![deny(enum_intrinsics_non_enums)]\n+    /// core::mem::discriminant::<i32>(&123);\n+    /// ```\n+    ///\n+    /// {{produces}}\n+    ///\n+    /// ### Explanation\n+    ///\n+    /// In order to accept any enum, the `mem::discriminant` and\n+    /// `mem::variant_count` functions are generic over a type `T`.\n+    /// This makes it technically possible for `T` to be a non-enum,\n+    /// in which case the return value is unspecified.\n+    ///\n+    /// This lint prevents such incorrect usage of these functions.\n+    ENUM_INTRINSICS_NON_ENUMS,\n+    Deny,\n+    \"detects calls to `core::mem::discriminant` and `core::mem::variant_count` with non-enum types\"\n+}\n+\n+declare_lint_pass!(EnumIntrinsicsNonEnums => [ENUM_INTRINSICS_NON_ENUMS]);\n+\n+/// Returns `true` if we know for sure that the given type is not an enum. Note that for cases where\n+/// the type is generic, we can't be certain if it will be an enum so we have to assume that it is.\n+fn is_non_enum(t: Ty<'_>) -> bool {\n+    !t.is_enum() && !t.potentially_needs_subst()\n+}\n+\n+fn enforce_mem_discriminant(\n+    cx: &LateContext<'_>,\n+    func_expr: &hir::Expr<'_>,\n+    expr_span: Span,\n+    args_span: Span,\n+) {\n+    let ty_param = cx.typeck_results().node_substs(func_expr.hir_id).type_at(0);\n+    if is_non_enum(ty_param) {\n+        cx.struct_span_lint(ENUM_INTRINSICS_NON_ENUMS, expr_span, |builder| {\n+            builder\n+                .build(\n+                    \"the return value of `mem::discriminant` is \\\n+                        unspecified when called with a non-enum type\",\n+                )\n+                .span_note(\n+                    args_span,\n+                    &format!(\n+                        \"the argument to `discriminant` should be a \\\n+                            reference to an enum, but it was passed \\\n+                            a reference to a `{}`, which is not an enum.\",\n+                        ty_param,\n+                    ),\n+                )\n+                .emit();\n+        });\n+    }\n+}\n+\n+fn enforce_mem_variant_count(cx: &LateContext<'_>, func_expr: &hir::Expr<'_>, span: Span) {\n+    let ty_param = cx.typeck_results().node_substs(func_expr.hir_id).type_at(0);\n+    if is_non_enum(ty_param) {\n+        cx.struct_span_lint(ENUM_INTRINSICS_NON_ENUMS, span, |builder| {\n+            builder\n+                .build(\n+                    \"the return value of `mem::variant_count` is \\\n+                        unspecified when called with a non-enum type\",\n+                )\n+                .note(&format!(\n+                    \"the type parameter of `variant_count` should \\\n+                            be an enum, but it was instantiated with \\\n+                            the type `{}`, which is not an enum.\",\n+                    ty_param,\n+                ))\n+                .emit();\n+        });\n+    }\n+}\n+\n+impl<'tcx> LateLintPass<'tcx> for EnumIntrinsicsNonEnums {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n+        if let hir::ExprKind::Call(ref func, ref args) = expr.kind {\n+            if let hir::ExprKind::Path(ref qpath) = func.kind {\n+                if let Some(def_id) = cx.qpath_res(qpath, func.hir_id).opt_def_id() {\n+                    if cx.tcx.is_diagnostic_item(sym::mem_discriminant, def_id) {\n+                        enforce_mem_discriminant(cx, func, expr.span, args[0].span);\n+                    } else if cx.tcx.is_diagnostic_item(sym::mem_variant_count, def_id) {\n+                        enforce_mem_variant_count(cx, func, expr.span);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "6f684a0fe5128658eaaa61dd955d505b5d80b24f", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59b186d99aec738eafb39f171f963138be4c1a86/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b186d99aec738eafb39f171f963138be4c1a86/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=59b186d99aec738eafb39f171f963138be4c1a86", "patch": "@@ -47,6 +47,7 @@ mod array_into_iter;\n pub mod builtin;\n mod context;\n mod early;\n+mod enum_intrinsics_non_enums;\n mod internal;\n mod late;\n mod levels;\n@@ -76,6 +77,7 @@ use rustc_span::Span;\n \n use array_into_iter::ArrayIntoIter;\n use builtin::*;\n+use enum_intrinsics_non_enums::EnumIntrinsicsNonEnums;\n use internal::*;\n use methods::*;\n use non_ascii_idents::*;\n@@ -168,6 +170,7 @@ macro_rules! late_lint_passes {\n                 TemporaryCStringAsPtr: TemporaryCStringAsPtr,\n                 NonPanicFmt: NonPanicFmt,\n                 NoopMethodCall: NoopMethodCall,\n+                EnumIntrinsicsNonEnums: EnumIntrinsicsNonEnums,\n                 InvalidAtomicOrdering: InvalidAtomicOrdering,\n                 NamedAsmLabels: NamedAsmLabels,\n             ]"}, {"sha": "6c889e88a592d49237446947818ee7ddb8bf40b9", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59b186d99aec738eafb39f171f963138be4c1a86/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b186d99aec738eafb39f171f963138be4c1a86/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=59b186d99aec738eafb39f171f963138be4c1a86", "patch": "@@ -816,6 +816,7 @@ symbols! {\n         mem_size_of,\n         mem_size_of_val,\n         mem_uninitialized,\n+        mem_variant_count,\n         mem_zeroed,\n         member_constraints,\n         memory,"}, {"sha": "894ae10e1b4bae80af9b05996d8e6aa04e10c2c2", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/59b186d99aec738eafb39f171f963138be4c1a86/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b186d99aec738eafb39f171f963138be4c1a86/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=59b186d99aec738eafb39f171f963138be4c1a86", "patch": "@@ -1053,6 +1053,7 @@ pub const fn discriminant<T>(v: &T) -> Discriminant<T> {\n #[inline(always)]\n #[unstable(feature = \"variant_count\", issue = \"73662\")]\n #[rustc_const_unstable(feature = \"variant_count\", issue = \"73662\")]\n+#[rustc_diagnostic_item = \"mem_variant_count\"]\n pub const fn variant_count<T>() -> usize {\n     intrinsics::variant_count::<T>()\n }"}, {"sha": "50eaeeb4685009e7d69c8bfa26cd3c4f5bf66afa", "filename": "src/test/ui/consts/const-variant-count.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59b186d99aec738eafb39f171f963138be4c1a86/src%2Ftest%2Fui%2Fconsts%2Fconst-variant-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b186d99aec738eafb39f171f963138be4c1a86/src%2Ftest%2Fui%2Fconsts%2Fconst-variant-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-variant-count.rs?ref=59b186d99aec738eafb39f171f963138be4c1a86", "patch": "@@ -1,5 +1,5 @@\n // run-pass\n-#![allow(dead_code)]\n+#![allow(dead_code, enum_intrinsics_non_enums)]\n #![feature(variant_count)]\n #![feature(never_type)]\n "}, {"sha": "65dc9166330d1e701386426fcbe985ea58ecce8e", "filename": "src/test/ui/enum-discriminant/discriminant_value-wrapper.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59b186d99aec738eafb39f171f963138be4c1a86/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b186d99aec738eafb39f171f963138be4c1a86/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fenum-discriminant%2Fdiscriminant_value-wrapper.rs?ref=59b186d99aec738eafb39f171f963138be4c1a86", "patch": "@@ -1,4 +1,7 @@\n // run-pass\n+\n+#![allow(enum_intrinsics_non_enums)]\n+\n use std::mem;\n \n enum ADT {"}, {"sha": "8ad337064e5bf34a01df2873517bb203300eb5ca", "filename": "src/test/ui/lint/lint-enum-intrinsics-non-enums.rs", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/59b186d99aec738eafb39f171f963138be4c1a86/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59b186d99aec738eafb39f171f963138be4c1a86/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.rs?ref=59b186d99aec738eafb39f171f963138be4c1a86", "patch": "@@ -0,0 +1,67 @@\n+// Test the enum_intrinsics_non_enums lint.\n+\n+#![feature(variant_count)]\n+\n+use std::mem::{discriminant, variant_count};\n+\n+enum SomeEnum {\n+    A,\n+    B,\n+}\n+\n+struct SomeStruct;\n+\n+fn generic_discriminant<T>(v: &T) {\n+    discriminant::<T>(v);\n+}\n+\n+fn generic_variant_count<T>() -> usize {\n+    variant_count::<T>()\n+}\n+\n+fn test_discriminant() {\n+    discriminant(&SomeEnum::A);\n+    generic_discriminant(&SomeEnum::B);\n+\n+    discriminant(&());\n+    //~^ error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+\n+    discriminant(&&SomeEnum::B);\n+    //~^ error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+\n+    discriminant(&SomeStruct);\n+    //~^ error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+\n+    discriminant(&123u32);\n+    //~^ error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+\n+    discriminant(&&123i8);\n+    //~^ error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+}\n+\n+fn test_variant_count() {\n+    variant_count::<SomeEnum>();\n+    generic_variant_count::<SomeEnum>();\n+\n+    variant_count::<&str>();\n+    //~^ error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+\n+    variant_count::<*const u8>();\n+    //~^ error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+\n+    variant_count::<()>();\n+    //~^ error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+\n+    variant_count::<&SomeEnum>();\n+    //~^ error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+}\n+\n+fn main() {\n+    test_discriminant();\n+    test_variant_count();\n+\n+    // The lint ignores cases where the type is generic, so these should be\n+    // allowed even though their return values are unspecified\n+    generic_variant_count::<SomeStruct>();\n+    generic_discriminant::<SomeStruct>(&SomeStruct);\n+}"}, {"sha": "bec9fb62efac8be6d8a47f39c946f0cb79d62374", "filename": "src/test/ui/lint/lint-enum-intrinsics-non-enums.stderr", "status": "added", "additions": 95, "deletions": 0, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/59b186d99aec738eafb39f171f963138be4c1a86/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/59b186d99aec738eafb39f171f963138be4c1a86/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-enum-intrinsics-non-enums.stderr?ref=59b186d99aec738eafb39f171f963138be4c1a86", "patch": "@@ -0,0 +1,95 @@\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:26:5\n+   |\n+LL |     discriminant(&());\n+   |     ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[deny(enum_intrinsics_non_enums)]` on by default\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `()`, which is not an enum.\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:26:18\n+   |\n+LL |     discriminant(&());\n+   |                  ^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:29:5\n+   |\n+LL |     discriminant(&&SomeEnum::B);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `&SomeEnum`, which is not an enum.\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:29:18\n+   |\n+LL |     discriminant(&&SomeEnum::B);\n+   |                  ^^^^^^^^^^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:32:5\n+   |\n+LL |     discriminant(&SomeStruct);\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `SomeStruct`, which is not an enum.\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:32:18\n+   |\n+LL |     discriminant(&SomeStruct);\n+   |                  ^^^^^^^^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:35:5\n+   |\n+LL |     discriminant(&123u32);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `u32`, which is not an enum.\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:35:18\n+   |\n+LL |     discriminant(&123u32);\n+   |                  ^^^^^^^\n+\n+error: the return value of `mem::discriminant` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:38:5\n+   |\n+LL |     discriminant(&&123i8);\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: the argument to `discriminant` should be a reference to an enum, but it was passed a reference to a `&i8`, which is not an enum.\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:38:18\n+   |\n+LL |     discriminant(&&123i8);\n+   |                  ^^^^^^^\n+\n+error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:46:5\n+   |\n+LL |     variant_count::<&str>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type parameter of `variant_count` should be an enum, but it was instantiated with the type `&str`, which is not an enum.\n+\n+error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:49:5\n+   |\n+LL |     variant_count::<*const u8>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type parameter of `variant_count` should be an enum, but it was instantiated with the type `*const u8`, which is not an enum.\n+\n+error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:52:5\n+   |\n+LL |     variant_count::<()>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type parameter of `variant_count` should be an enum, but it was instantiated with the type `()`, which is not an enum.\n+\n+error: the return value of `mem::variant_count` is unspecified when called with a non-enum type\n+  --> $DIR/lint-enum-intrinsics-non-enums.rs:55:5\n+   |\n+LL |     variant_count::<&SomeEnum>();\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the type parameter of `variant_count` should be an enum, but it was instantiated with the type `&SomeEnum`, which is not an enum.\n+\n+error: aborting due to 9 previous errors\n+"}]}