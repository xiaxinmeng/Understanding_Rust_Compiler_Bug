{"sha": "cb3cff37617a313e0d1a78583355d2abe9f9364b", "node_id": "C_kwDOAAsO6NoAKGNiM2NmZjM3NjE3YTMxM2UwZDFhNzg1ODMzNTVkMmFiZTlmOTM2NGI", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2022-01-17T22:06:02Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2022-02-11T21:38:16Z"}, "message": "Stop using a placeholder for empty regions in Chalk", "tree": {"sha": "8897cad6683477c332a956c05b717005c8d82480", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8897cad6683477c332a956c05b717005c8d82480"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb3cff37617a313e0d1a78583355d2abe9f9364b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3cff37617a313e0d1a78583355d2abe9f9364b", "html_url": "https://github.com/rust-lang/rust/commit/cb3cff37617a313e0d1a78583355d2abe9f9364b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb3cff37617a313e0d1a78583355d2abe9f9364b/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d", "html_url": "https://github.com/rust-lang/rust/commit/6499c5e7fc173a3f55b7a3bd1e6a50e9edef782d"}], "stats": {"total": 74, "additions": 14, "deletions": 60}, "files": [{"sha": "d938a2809ae8dbcd42aec3b415b37d855c89ff2e", "filename": "compiler/rustc_traits/src/chalk/db.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb3cff37617a313e0d1a78583355d2abe9f9364b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3cff37617a313e0d1a78583355d2abe9f9364b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fdb.rs?ref=cb3cff37617a313e0d1a78583355d2abe9f9364b", "patch": "@@ -20,11 +20,10 @@ use rustc_span::symbol::sym;\n use std::fmt;\n use std::sync::Arc;\n \n-use crate::chalk::lowering::{self, LowerInto};\n+use crate::chalk::lowering::LowerInto;\n \n pub struct RustIrDatabase<'tcx> {\n     pub(crate) interner: RustInterner<'tcx>,\n-    pub(crate) reempty_placeholder: ty::Region<'tcx>,\n }\n \n impl fmt::Debug for RustIrDatabase<'_> {\n@@ -40,12 +39,9 @@ impl<'tcx> RustIrDatabase<'tcx> {\n         bound_vars: SubstsRef<'tcx>,\n     ) -> Vec<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>> {\n         let predicates = self.interner.tcx.predicates_defined_on(def_id).predicates;\n-        let mut regions_substitutor =\n-            lowering::RegionsSubstitutor::new(self.interner.tcx, self.reempty_placeholder);\n         predicates\n             .iter()\n             .map(|(wc, _)| wc.subst(self.interner.tcx, bound_vars))\n-            .map(|wc| wc.fold_with(&mut regions_substitutor))\n             .filter_map(|wc| LowerInto::<\n                     Option<chalk_ir::QuantifiedWhereClause<RustInterner<'tcx>>>\n                     >::lower_into(wc, self.interner)).collect()\n@@ -287,9 +283,6 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n         let trait_ref = self.interner.tcx.impl_trait_ref(def_id).expect(\"not an impl\");\n         let trait_ref = trait_ref.subst(self.interner.tcx, bound_vars);\n-        let mut regions_substitutor =\n-            lowering::RegionsSubstitutor::new(self.interner.tcx, self.reempty_placeholder);\n-        let trait_ref = trait_ref.fold_with(&mut regions_substitutor);\n \n         let where_clauses = self.where_clauses_for(def_id, bound_vars);\n \n@@ -335,9 +328,6 @@ impl<'tcx> chalk_solve::RustIrDatabase<RustInterner<'tcx>> for RustIrDatabase<'t\n \n             let self_ty = trait_ref.self_ty();\n             let self_ty = self_ty.subst(self.interner.tcx, bound_vars);\n-            let mut regions_substitutor =\n-                lowering::RegionsSubstitutor::new(self.interner.tcx, self.reempty_placeholder);\n-            let self_ty = self_ty.fold_with(&mut regions_substitutor);\n             let lowered_ty = self_ty.lower_into(self.interner);\n \n             parameters[0].assert_ty_ref(self.interner).could_match("}, {"sha": "1f0a99e0e8989b27f31a8c812ca545e2c4425fdb", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 9, "deletions": 36, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/cb3cff37617a313e0d1a78583355d2abe9f9364b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3cff37617a313e0d1a78583355d2abe9f9364b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=cb3cff37617a313e0d1a78583355d2abe9f9364b", "patch": "@@ -464,9 +464,11 @@ impl<'tcx> LowerInto<'tcx, chalk_ir::Lifetime<RustInterner<'tcx>>> for Region<'t\n                 })\n                 .intern(interner)\n             }\n-            ReEmpty(_) => unimplemented!(),\n-            // FIXME(chalk): need to handle ReErased\n-            ReErased => unimplemented!(),\n+            ReEmpty(ui) => {\n+                chalk_ir::LifetimeData::Empty(chalk_ir::UniverseIndex { counter: ui.index() })\n+                    .intern(interner)\n+            }\n+            ReErased => chalk_ir::LifetimeData::Erased.intern(interner),\n         }\n     }\n }\n@@ -488,12 +490,12 @@ impl<'tcx> LowerInto<'tcx, Region<'tcx>> for &chalk_ir::Lifetime<RustInterner<'t\n                     name: ty::BoundRegionKind::BrAnon(p.idx as u32),\n                 })\n             }\n-            chalk_ir::LifetimeData::Static => ty::RegionKind::ReStatic,\n-            chalk_ir::LifetimeData::Phantom(_, _) => unimplemented!(),\n+            chalk_ir::LifetimeData::Static => return interner.tcx.lifetimes.re_static,\n             chalk_ir::LifetimeData::Empty(ui) => {\n-                ty::RegionKind::ReEmpty(ty::UniverseIndex::from_usize(ui.counter))\n+                ty::ReEmpty(ty::UniverseIndex::from_usize(ui.counter))\n             }\n-            chalk_ir::LifetimeData::Erased => ty::RegionKind::ReErased,\n+            chalk_ir::LifetimeData::Erased => return interner.tcx.lifetimes.re_erased,\n+            chalk_ir::LifetimeData::Phantom(void, _) => match *void {},\n         };\n         interner.tcx.mk_region(kind)\n     }\n@@ -1110,32 +1112,3 @@ impl<'tcx> TypeVisitor<'tcx> for PlaceholdersCollector {\n         r.super_visit_with(self)\n     }\n }\n-\n-/// Used to substitute specific `Regions`s with placeholders.\n-crate struct RegionsSubstitutor<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-    reempty_placeholder: ty::Region<'tcx>,\n-}\n-\n-impl<'tcx> RegionsSubstitutor<'tcx> {\n-    crate fn new(tcx: TyCtxt<'tcx>, reempty_placeholder: ty::Region<'tcx>) -> Self {\n-        RegionsSubstitutor { tcx, reempty_placeholder }\n-    }\n-}\n-\n-impl<'tcx> TypeFolder<'tcx> for RegionsSubstitutor<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx> {\n-        self.tcx\n-    }\n-\n-    fn fold_region(&mut self, r: Region<'tcx>) -> Region<'tcx> {\n-        match r {\n-            ty::ReEmpty(ui) => {\n-                assert_eq!(ui.as_usize(), 0);\n-                self.reempty_placeholder\n-            }\n-\n-            _ => r.super_fold_with(self),\n-        }\n-    }\n-}"}, {"sha": "8c42b019554cc4e3ddac2d2c37bde12a33c588a9", "filename": "compiler/rustc_traits/src/chalk/mod.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cb3cff37617a313e0d1a78583355d2abe9f9364b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb3cff37617a313e0d1a78583355d2abe9f9364b/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Fmod.rs?ref=cb3cff37617a313e0d1a78583355d2abe9f9364b", "patch": "@@ -22,9 +22,8 @@ use rustc_infer::infer::canonical::{\n use rustc_infer::traits::{self, CanonicalChalkEnvironmentAndGoal};\n \n use crate::chalk::db::RustIrDatabase as ChalkRustIrDatabase;\n-use crate::chalk::lowering::{\n-    LowerInto, ParamsSubstitutor, PlaceholdersCollector, RegionsSubstitutor,\n-};\n+use crate::chalk::lowering::LowerInto;\n+use crate::chalk::lowering::{ParamsSubstitutor, PlaceholdersCollector};\n \n use chalk_solve::Solution;\n \n@@ -42,20 +41,11 @@ crate fn evaluate_goal<'tcx>(\n     let mut placeholders_collector = PlaceholdersCollector::new();\n     obligation.visit_with(&mut placeholders_collector);\n \n-    let reempty_placeholder = tcx.mk_region(ty::RegionKind::RePlaceholder(ty::Placeholder {\n-        universe: ty::UniverseIndex::ROOT,\n-        name: ty::BoundRegionKind::BrAnon(placeholders_collector.next_anon_region_placeholder + 1),\n-    }));\n-\n     let mut params_substitutor =\n         ParamsSubstitutor::new(tcx, placeholders_collector.next_ty_placeholder);\n     let obligation = obligation.fold_with(&mut params_substitutor);\n-    // FIXME(chalk): we really should be substituting these back in the solution\n     let _params: FxHashMap<usize, ParamTy> = params_substitutor.params;\n \n-    let mut regions_substitutor = RegionsSubstitutor::new(tcx, reempty_placeholder);\n-    let obligation = obligation.fold_with(&mut regions_substitutor);\n-\n     let max_universe = obligation.max_universe.index();\n \n     let lowered_goal: chalk_ir::UCanonical<\n@@ -96,7 +86,8 @@ crate fn evaluate_goal<'tcx>(\n \n     use chalk_solve::Solver;\n     let mut solver = chalk_engine::solve::SLGSolver::new(32, None);\n-    let db = ChalkRustIrDatabase { interner, reempty_placeholder };\n+    let db = ChalkRustIrDatabase { interner };\n+    debug!(?lowered_goal);\n     let solution = solver.solve(&db, &lowered_goal);\n     debug!(?obligation, ?solution, \"evaluate goal\");\n "}]}