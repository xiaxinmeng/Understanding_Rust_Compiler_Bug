{"sha": "3c6d1a723d2d6466d8ee34d4f442a60fdc8cfa1b", "node_id": "C_kwDOAAsO6NoAKDNjNmQxYTcyM2QyZDY0NjZkOGVlMzRkNGY0NDJhNjBmZGM4Y2ZhMWI", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-11T10:24:31Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-11T10:24:31Z"}, "message": "Add test for repr(transparent) with scalar", "tree": {"sha": "e1898d300e093552f38f7249866a6668f8d82ee4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1898d300e093552f38f7249866a6668f8d82ee4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c6d1a723d2d6466d8ee34d4f442a60fdc8cfa1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c6d1a723d2d6466d8ee34d4f442a60fdc8cfa1b", "html_url": "https://github.com/rust-lang/rust/commit/3c6d1a723d2d6466d8ee34d4f442a60fdc8cfa1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c6d1a723d2d6466d8ee34d4f442a60fdc8cfa1b/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ecb276735f61ef3822b5ed6a48d1c8fd591b79b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ecb276735f61ef3822b5ed6a48d1c8fd591b79b", "html_url": "https://github.com/rust-lang/rust/commit/8ecb276735f61ef3822b5ed6a48d1c8fd591b79b"}], "stats": {"total": 63, "additions": 61, "deletions": 2}, "files": [{"sha": "0f3b952ceec84dda2ed58383b9ee55316b31e890", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3c6d1a723d2d6466d8ee34d4f442a60fdc8cfa1b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6d1a723d2d6466d8ee34d4f442a60fdc8cfa1b/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=3c6d1a723d2d6466d8ee34d4f442a60fdc8cfa1b", "patch": "@@ -614,7 +614,7 @@ impl Map {\n         }\n     }\n \n-    /// Register fields of the given (local, projection) place.\n+    /// Potentially register the (local, projection) place and its fields, recursively.\n     ///\n     /// Invariant: The projection must only contain fields.\n     fn register_with_filter_rec<'tcx>(\n@@ -626,13 +626,16 @@ impl Map {\n         filter: &mut impl FnMut(Ty<'tcx>) -> bool,\n         exclude: &FxHashSet<Place<'tcx>>,\n     ) {\n-        if exclude.contains(&Place { local, projection: tcx.intern_place_elems(projection) }) {\n+        let place = Place { local, projection: tcx.intern_place_elems(projection) };\n+        if exclude.contains(&place) {\n             // This will also exclude all projections of the excluded place.\n             return;\n         }\n \n         // Note: The framework supports only scalars for now.\n         if filter(ty) && ty.is_scalar() {\n+            trace!(\"registering place: {:?}\", place);\n+\n             // We know that the projection only contains trackable elements.\n             let place = self.make_place(local, projection).unwrap();\n "}, {"sha": "f66b00a9a224bca8f66558e259633574588b52ec", "filename": "src/test/mir-opt/dataflow-const-prop/repr_transparent.main.DataflowConstProp.diff", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3c6d1a723d2d6466d8ee34d4f442a60fdc8cfa1b/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frepr_transparent.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/3c6d1a723d2d6466d8ee34d4f442a60fdc8cfa1b/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frepr_transparent.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frepr_transparent.main.DataflowConstProp.diff?ref=3c6d1a723d2d6466d8ee34d4f442a60fdc8cfa1b", "patch": "@@ -0,0 +1,44 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/repr_transparent.rs:+0:11: +0:11\n+      let _1: I32;                         // in scope 0 at $DIR/repr_transparent.rs:+1:9: +1:10\n+      let mut _3: i32;                     // in scope 0 at $DIR/repr_transparent.rs:+2:17: +2:26\n+      let mut _4: i32;                     // in scope 0 at $DIR/repr_transparent.rs:+2:17: +2:20\n+      let mut _5: i32;                     // in scope 0 at $DIR/repr_transparent.rs:+2:23: +2:26\n+      scope 1 {\n+          debug x => _1;                   // in scope 1 at $DIR/repr_transparent.rs:+1:9: +1:10\n+          let _2: I32;                     // in scope 1 at $DIR/repr_transparent.rs:+2:9: +2:10\n+          scope 2 {\n+              debug y => _2;               // in scope 2 at $DIR/repr_transparent.rs:+2:9: +2:10\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/repr_transparent.rs:+1:9: +1:10\n+          Deinit(_1);                      // scope 0 at $DIR/repr_transparent.rs:+1:13: +1:19\n+          (_1.0: i32) = const 0_i32;       // scope 0 at $DIR/repr_transparent.rs:+1:13: +1:19\n+          StorageLive(_2);                 // scope 1 at $DIR/repr_transparent.rs:+2:9: +2:10\n+          StorageLive(_3);                 // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:26\n+          StorageLive(_4);                 // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:20\n+-         _4 = (_1.0: i32);                // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:20\n++         _4 = const 0_i32;                // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:20\n+          StorageLive(_5);                 // scope 1 at $DIR/repr_transparent.rs:+2:23: +2:26\n+-         _5 = (_1.0: i32);                // scope 1 at $DIR/repr_transparent.rs:+2:23: +2:26\n+-         _3 = Add(move _4, move _5);      // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:26\n++         _5 = const 0_i32;                // scope 1 at $DIR/repr_transparent.rs:+2:23: +2:26\n++         _3 = const 0_i32;                // scope 1 at $DIR/repr_transparent.rs:+2:17: +2:26\n+          StorageDead(_5);                 // scope 1 at $DIR/repr_transparent.rs:+2:25: +2:26\n+          StorageDead(_4);                 // scope 1 at $DIR/repr_transparent.rs:+2:25: +2:26\n+          Deinit(_2);                      // scope 1 at $DIR/repr_transparent.rs:+2:13: +2:27\n+-         (_2.0: i32) = move _3;           // scope 1 at $DIR/repr_transparent.rs:+2:13: +2:27\n++         (_2.0: i32) = const 0_i32;       // scope 1 at $DIR/repr_transparent.rs:+2:13: +2:27\n+          StorageDead(_3);                 // scope 1 at $DIR/repr_transparent.rs:+2:26: +2:27\n+          _0 = const ();                   // scope 0 at $DIR/repr_transparent.rs:+0:11: +3:2\n+          StorageDead(_2);                 // scope 1 at $DIR/repr_transparent.rs:+3:1: +3:2\n+          StorageDead(_1);                 // scope 0 at $DIR/repr_transparent.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/repr_transparent.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "4ce0ca4dff46f837042332a1f31c7ca335511a2c", "filename": "src/test/mir-opt/dataflow-const-prop/repr_transparent.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3c6d1a723d2d6466d8ee34d4f442a60fdc8cfa1b/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frepr_transparent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c6d1a723d2d6466d8ee34d4f442a60fdc8cfa1b/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frepr_transparent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Frepr_transparent.rs?ref=3c6d1a723d2d6466d8ee34d4f442a60fdc8cfa1b", "patch": "@@ -0,0 +1,12 @@\n+// unit-test: DataflowConstProp\n+\n+// The struct has scalar ABI, but is not a scalar type.\n+// Make sure that we handle this correctly.\n+#[repr(transparent)]\n+struct I32(i32);\n+\n+// EMIT_MIR repr_transparent.main.DataflowConstProp.diff\n+fn main() {\n+    let x = I32(0);\n+    let y = I32(x.0 + x.0);\n+}"}]}