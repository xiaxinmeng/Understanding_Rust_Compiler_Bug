{"sha": "03e864fd86b8e346a2ea75235ce2b924ab453fa1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZTg2NGZkODZiOGUzNDZhMmVhNzUyMzVjZTJiOTI0YWI0NTNmYTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-11T21:41:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-11T21:41:01Z"}, "message": "Auto merge of #82417 - the8472:fix-copy_file_range-append, r=m-ou-se\n\nFix io::copy specialization using copy_file_range when writer was opened with O_APPEND\n\nfixes #82410\n\nWhile `sendfile()` returns `EINVAL` when the output was opened with O_APPEND,  `copy_file_range()` does not and returns `EBADF` instead, which \u2013 unlike other `EBADF` causes \u2013 is not fatal for this operation since a regular `write()` will likely succeed.\n\nWe now treat `EBADF` as a non-fatal error for `copy_file_range` and fall back to a read-write copy as we already did for several other errors.", "tree": {"sha": "305a868ef4baa8319f183e8b2e1cd760f4769c98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/305a868ef4baa8319f183e8b2e1cd760f4769c98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03e864fd86b8e346a2ea75235ce2b924ab453fa1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03e864fd86b8e346a2ea75235ce2b924ab453fa1", "html_url": "https://github.com/rust-lang/rust/commit/03e864fd86b8e346a2ea75235ce2b924ab453fa1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03e864fd86b8e346a2ea75235ce2b924ab453fa1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a8b6f708c38342a6c74aa00cf4323774c7381a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a8b6f708c38342a6c74aa00cf4323774c7381a6", "html_url": "https://github.com/rust-lang/rust/commit/4a8b6f708c38342a6c74aa00cf4323774c7381a6"}, {"sha": "81602fb6706654b868dd74ee88f680c57d4311cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/81602fb6706654b868dd74ee88f680c57d4311cb", "html_url": "https://github.com/rust-lang/rust/commit/81602fb6706654b868dd74ee88f680c57d4311cb"}], "stats": {"total": 36, "additions": 28, "deletions": 8}, "files": [{"sha": "9687576bb6aeb258f0a73ddd8b53511dda5097bf", "filename": "library/std/src/sys/unix/kernel_copy.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/03e864fd86b8e346a2ea75235ce2b924ab453fa1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e864fd86b8e346a2ea75235ce2b924ab453fa1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy.rs?ref=03e864fd86b8e346a2ea75235ce2b924ab453fa1", "patch": "@@ -61,6 +61,7 @@ use crate::process::{ChildStderr, ChildStdin, ChildStdout};\n use crate::ptr;\n use crate::sync::atomic::{AtomicBool, AtomicU8, Ordering};\n use crate::sys::cvt;\n+use libc::{EBADF, EINVAL, ENOSYS, EOPNOTSUPP, EOVERFLOW, EPERM, EXDEV};\n \n #[cfg(test)]\n mod tests;\n@@ -535,7 +536,7 @@ pub(super) fn copy_regular_files(reader: RawFd, writer: RawFd, max_len: u64) ->\n                 cvt(copy_file_range(INVALID_FD, ptr::null_mut(), INVALID_FD, ptr::null_mut(), 1, 0))\n             };\n \n-            if matches!(result.map_err(|e| e.raw_os_error()), Err(Some(libc::EBADF))) {\n+            if matches!(result.map_err(|e| e.raw_os_error()), Err(Some(EBADF))) {\n                 HAS_COPY_FILE_RANGE.store(AVAILABLE, Ordering::Relaxed);\n             } else {\n                 HAS_COPY_FILE_RANGE.store(UNAVAILABLE, Ordering::Relaxed);\n@@ -573,19 +574,20 @@ pub(super) fn copy_regular_files(reader: RawFd, writer: RawFd, max_len: u64) ->\n             Err(err) => {\n                 return match err.raw_os_error() {\n                     // when file offset + max_length > u64::MAX\n-                    Some(libc::EOVERFLOW) => CopyResult::Fallback(written),\n-                    Some(\n-                        libc::ENOSYS | libc::EXDEV | libc::EINVAL | libc::EPERM | libc::EOPNOTSUPP,\n-                    ) => {\n+                    Some(EOVERFLOW) => CopyResult::Fallback(written),\n+                    Some(ENOSYS | EXDEV | EINVAL | EPERM | EOPNOTSUPP | EBADF) => {\n                         // Try fallback io::copy if either:\n                         // - Kernel version is < 4.5 (ENOSYS\u00b9)\n                         // - Files are mounted on different fs (EXDEV)\n                         // - copy_file_range is broken in various ways on RHEL/CentOS 7 (EOPNOTSUPP)\n                         // - copy_file_range file is immutable or syscall is blocked by seccomp\u00b9 (EPERM)\n                         // - copy_file_range cannot be used with pipes or device nodes (EINVAL)\n+                        // - the writer fd was opened with O_APPEND (EBADF\u00b2)\n                         //\n                         // \u00b9 these cases should be detected by the initial probe but we handle them here\n                         //   anyway in case syscall interception changes during runtime\n+                        // \u00b2 actually invalid file descriptors would cause this too, but in that case\n+                        //   the fallback code path is expected to encounter the same error again\n                         assert_eq!(written, 0);\n                         CopyResult::Fallback(0)\n                     }\n@@ -649,7 +651,7 @@ fn sendfile_splice(mode: SpliceMode, reader: RawFd, writer: RawFd, len: u64) ->\n             Ok(ret) => written += ret as u64,\n             Err(err) => {\n                 return match err.raw_os_error() {\n-                    Some(libc::ENOSYS | libc::EPERM) => {\n+                    Some(ENOSYS | EPERM) => {\n                         // syscall not supported (ENOSYS)\n                         // syscall is disallowed, e.g. by seccomp (EPERM)\n                         match mode {\n@@ -659,12 +661,12 @@ fn sendfile_splice(mode: SpliceMode, reader: RawFd, writer: RawFd, len: u64) ->\n                         assert_eq!(written, 0);\n                         CopyResult::Fallback(0)\n                     }\n-                    Some(libc::EINVAL) => {\n+                    Some(EINVAL) => {\n                         // splice/sendfile do not support this particular file descriptor (EINVAL)\n                         assert_eq!(written, 0);\n                         CopyResult::Fallback(0)\n                     }\n-                    Some(os_err) if mode == SpliceMode::Sendfile && os_err == libc::EOVERFLOW => {\n+                    Some(os_err) if mode == SpliceMode::Sendfile && os_err == EOVERFLOW => {\n                         CopyResult::Fallback(written)\n                     }\n                     _ => CopyResult::Error(err, written),"}, {"sha": "3fe849e23e2e677fbf18bb5c5a3540de5ed2f580", "filename": "library/std/src/sys/unix/kernel_copy/tests.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/03e864fd86b8e346a2ea75235ce2b924ab453fa1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03e864fd86b8e346a2ea75235ce2b924ab453fa1/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fkernel_copy%2Ftests.rs?ref=03e864fd86b8e346a2ea75235ce2b924ab453fa1", "patch": "@@ -65,6 +65,24 @@ fn copy_specialization() -> Result<()> {\n     result.and(rm1).and(rm2)\n }\n \n+#[test]\n+fn copies_append_mode_sink() -> Result<()> {\n+    let tmp_path = tmpdir();\n+    let source_path = tmp_path.join(\"copies_append_mode.source\");\n+    let sink_path = tmp_path.join(\"copies_append_mode.sink\");\n+    let mut source =\n+        OpenOptions::new().create(true).truncate(true).write(true).read(true).open(&source_path)?;\n+    write!(source, \"not empty\")?;\n+    source.seek(SeekFrom::Start(0))?;\n+    let mut sink = OpenOptions::new().create(true).append(true).open(&sink_path)?;\n+\n+    let copied = crate::io::copy(&mut source, &mut sink)?;\n+\n+    assert_eq!(copied, 9);\n+\n+    Ok(())\n+}\n+\n #[bench]\n fn bench_file_to_file_copy(b: &mut test::Bencher) {\n     const BYTES: usize = 128 * 1024;"}]}