{"sha": "0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0NDdmOTFlMTBkNGY5NWVmMmZmMzViMjUzZTE5NjRlZDdjNWY5ZmM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-30T16:17:14Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-02T16:00:20Z"}, "message": "Let load_query_result_cache take a &DefPathTable\n\nThis allows removing a confusing mem::replace in create_global_ctxt", "tree": {"sha": "7a29f37d68c81f480fc92f22182aab373b22aed6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a29f37d68c81f480fc92f22182aab373b22aed6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc", "html_url": "https://github.com/rust-lang/rust/commit/0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "18d1b3f3ebb8a5c5fb9a58122f6eaab63d09ec4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/18d1b3f3ebb8a5c5fb9a58122f6eaab63d09ec4e", "html_url": "https://github.com/rust-lang/rust/commit/18d1b3f3ebb8a5c5fb9a58122f6eaab63d09ec4e"}], "stats": {"total": 43, "additions": 16, "deletions": 27}, "files": [{"sha": "74e6e844bd35efba0cbae5a9ac52c841a44c6dd6", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc", "patch": "@@ -1,7 +1,7 @@\n //! Code to save/load the dep-graph from files.\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_hir::definitions::Definitions;\n+use rustc_hir::definitions::DefPathTable;\n use rustc_middle::dep_graph::{PreviousDepGraph, SerializedDepGraph, WorkProduct, WorkProductId};\n use rustc_middle::ty::query::OnDiskCache;\n use rustc_serialize::opaque::Decoder;\n@@ -198,7 +198,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n /// creating an empty cache if it could not be loaded.\n pub fn load_query_result_cache<'a>(\n     sess: &'a Session,\n-    definitions: &Definitions,\n+    def_path_table: &DefPathTable,\n ) -> Option<OnDiskCache<'a>> {\n     if sess.opts.incremental.is_none() {\n         return None;\n@@ -212,7 +212,7 @@ pub fn load_query_result_cache<'a>(\n         sess.is_nightly_build(),\n     ) {\n         LoadResult::Ok { data: (bytes, start_pos) } => {\n-            Some(OnDiskCache::new(sess, bytes, start_pos, definitions))\n+            Some(OnDiskCache::new(sess, bytes, start_pos, def_path_table))\n         }\n         _ => Some(OnDiskCache::new_empty(sess.source_map())),\n     }"}, {"sha": "94864256be2b520496ea97a640fc92e135ed8f6e", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc", "patch": "@@ -13,7 +13,6 @@ use rustc_data_structures::{box_region_allow_access, declare_box_region_type, pa\n use rustc_errors::{ErrorReported, PResult};\n use rustc_expand::base::ExtCtxt;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n-use rustc_hir::definitions::Definitions;\n use rustc_hir::Crate;\n use rustc_index::vec::IndexVec;\n use rustc_lint::LintStore;\n@@ -51,7 +50,7 @@ use std::io::{self, BufWriter, Write};\n use std::lazy::SyncLazy;\n use std::path::PathBuf;\n use std::rc::Rc;\n-use std::{env, fs, iter, mem};\n+use std::{env, fs, iter};\n \n pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n     let krate = sess.time(\"parse_crate\", || match input {\n@@ -761,20 +760,18 @@ pub fn create_global_ctxt<'tcx>(\n     lint_store: Lrc<LintStore>,\n     krate: &'tcx Crate<'tcx>,\n     dep_graph: DepGraph,\n-    mut resolver_outputs: ResolverOutputs,\n+    resolver_outputs: ResolverOutputs,\n     outputs: OutputFilenames,\n     crate_name: &str,\n     queries: &'tcx OnceCell<TcxQueries<'tcx>>,\n     global_ctxt: &'tcx OnceCell<GlobalCtxt<'tcx>>,\n     arena: &'tcx WorkerLocal<Arena<'tcx>>,\n ) -> QueryContext<'tcx> {\n     let sess = &compiler.session();\n-    let defs: &'tcx Definitions = arena.alloc(mem::replace(\n-        &mut resolver_outputs.definitions,\n-        Definitions::new(crate_name, sess.local_crate_disambiguator()),\n-    ));\n \n-    let query_result_on_disk_cache = rustc_incremental::load_query_result_cache(sess, defs);\n+    let def_path_table = resolver_outputs.definitions.def_path_table();\n+    let query_result_on_disk_cache =\n+        rustc_incremental::load_query_result_cache(sess, def_path_table);\n \n     let codegen_backend = compiler.codegen_backend();\n     let mut local_providers = *DEFAULT_QUERY_PROVIDERS;\n@@ -804,7 +801,6 @@ pub fn create_global_ctxt<'tcx>(\n                 arena,\n                 resolver_outputs,\n                 krate,\n-                defs,\n                 dep_graph,\n                 query_result_on_disk_cache,\n                 queries.as_dyn(),"}, {"sha": "9e90dadfff950c3714df0b090262819bac0b27e8", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc", "patch": "@@ -1122,7 +1122,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         arena: &'tcx WorkerLocal<Arena<'tcx>>,\n         resolutions: ty::ResolverOutputs,\n         krate: &'tcx hir::Crate<'tcx>,\n-        definitions: &'tcx Definitions,\n         dep_graph: DepGraph,\n         on_disk_cache: Option<query::OnDiskCache<'tcx>>,\n         queries: &'tcx dyn query::QueryEngine<'tcx>,\n@@ -1164,7 +1163,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             glob_map: resolutions.glob_map,\n             extern_prelude: resolutions.extern_prelude,\n             untracked_crate: krate,\n-            definitions,\n+            definitions: arena.alloc(resolutions.definitions),\n             on_disk_cache,\n             queries,\n             query_caches: query::QueryCaches::default(),"}, {"sha": "e78faa7079aa1ce5cf9fabd39807673f34b13d4d", "filename": "compiler/rustc_middle/src/ty/query/on_disk_cache.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fquery%2Fon_disk_cache.rs?ref=0447f91e10d4f95ef2ff35b253e1964ed7c5f9fc", "patch": "@@ -10,8 +10,7 @@ use rustc_data_structures::thin_vec::ThinVec;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_errors::Diagnostic;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, LOCAL_CRATE};\n-use rustc_hir::definitions::DefPathHash;\n-use rustc_hir::definitions::Definitions;\n+use rustc_hir::definitions::{DefPathHash, DefPathTable};\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_query_system::dep_graph::DepContext;\n use rustc_query_system::query::QueryContext;\n@@ -167,22 +166,13 @@ crate struct RawDefId {\n     pub index: u32,\n }\n \n-fn make_local_def_path_hash_map(definitions: &Definitions) -> UnhashMap<DefPathHash, LocalDefId> {\n-    UnhashMap::from_iter(\n-        definitions\n-            .def_path_table()\n-            .all_def_path_hashes_and_def_ids(LOCAL_CRATE)\n-            .map(|(hash, def_id)| (hash, def_id.as_local().unwrap())),\n-    )\n-}\n-\n impl<'sess> OnDiskCache<'sess> {\n     /// Creates a new `OnDiskCache` instance from the serialized data in `data`.\n     pub fn new(\n         sess: &'sess Session,\n         data: Vec<u8>,\n         start_pos: usize,\n-        definitions: &Definitions,\n+        def_path_table: &DefPathTable,\n     ) -> Self {\n         debug_assert!(sess.opts.incremental.is_some());\n \n@@ -220,7 +210,11 @@ impl<'sess> OnDiskCache<'sess> {\n             hygiene_context: Default::default(),\n             foreign_def_path_hashes: footer.foreign_def_path_hashes,\n             latest_foreign_def_path_hashes: Default::default(),\n-            local_def_path_hash_to_def_id: make_local_def_path_hash_map(definitions),\n+            local_def_path_hash_to_def_id: UnhashMap::from_iter(\n+                def_path_table\n+                    .all_def_path_hashes_and_def_ids(LOCAL_CRATE)\n+                    .map(|(hash, def_id)| (hash, def_id.as_local().unwrap())),\n+            ),\n             def_path_hash_to_def_id_cache: Default::default(),\n         }\n     }"}]}