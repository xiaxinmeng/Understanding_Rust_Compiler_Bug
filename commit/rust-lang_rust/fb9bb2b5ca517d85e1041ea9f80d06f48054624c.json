{"sha": "fb9bb2b5ca517d85e1041ea9f80d06f48054624c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiOWJiMmI1Y2E1MTdkODVlMTA0MWVhOWY4MGQwNmY0ODA1NDYyNGM=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-09-15T23:30:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-15T23:30:30Z"}, "message": "Rollup merge of #75146 - tmiasko:range-overflow, r=Mark-Simulacrum\n\nDetect overflow in proc_macro_server subspan\n\n* Detect overflow in proc_macro_server subspan\n* Add tests for overflow in Vec::drain\n* Add tests for overflow in String / VecDeque operations using ranges", "tree": {"sha": "f4f791d8da5b4ebe8ca370fb274eaeac7d0c03bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4f791d8da5b4ebe8ca370fb274eaeac7d0c03bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb9bb2b5ca517d85e1041ea9f80d06f48054624c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfYU6XCRBK7hj4Ov3rIwAAdHIIAFbWtnFfQ1WYAz5bkd2/rmSE\nROfu4vwFBK68+lJ/iP4Zdet6/TYmTfptv8ulbOnL1g6T7NfDltjF8rSCiASob72X\nML/htT7UyoadG1rLSaTvaReA2uSZ/Ae0AUE0tcTpZWka5Yh4pD307mDJWtCPq8/A\nGL3uRmuZGLdPB3RautKxOBATI3odGbkRE9dwFR+iXjy4sY8Zlpxarb07C4sZoqCK\nWkyWoZZxMCDt7uzhS/hsb1At2WgiNKEFa1mFTII585JHRFb0ux57u2Yl1wfSMYxW\n06ihqSvKXpaDSdEdIKlE27ndD8DrvC7MQzdxFqvRCuFiOVn0FOlRB18BajRJrWQ=\n=dqcV\n-----END PGP SIGNATURE-----\n", "payload": "tree f4f791d8da5b4ebe8ca370fb274eaeac7d0c03bf\nparent 4f0c245429a0a42ea652b85a5390203bd6a12bbc\nparent f8cfb2f5ad847b871399dfef9b8b8ff4e84a75cb\nauthor Dylan DPC <dylan.dpc@gmail.com> 1600212630 +0200\ncommitter GitHub <noreply@github.com> 1600212630 +0200\n\nRollup merge of #75146 - tmiasko:range-overflow, r=Mark-Simulacrum\n\nDetect overflow in proc_macro_server subspan\n\n* Detect overflow in proc_macro_server subspan\n* Add tests for overflow in Vec::drain\n* Add tests for overflow in String / VecDeque operations using ranges\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb9bb2b5ca517d85e1041ea9f80d06f48054624c", "html_url": "https://github.com/rust-lang/rust/commit/fb9bb2b5ca517d85e1041ea9f80d06f48054624c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb9bb2b5ca517d85e1041ea9f80d06f48054624c/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f0c245429a0a42ea652b85a5390203bd6a12bbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f0c245429a0a42ea652b85a5390203bd6a12bbc", "html_url": "https://github.com/rust-lang/rust/commit/4f0c245429a0a42ea652b85a5390203bd6a12bbc"}, {"sha": "f8cfb2f5ad847b871399dfef9b8b8ff4e84a75cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f8cfb2f5ad847b871399dfef9b8b8ff4e84a75cb", "html_url": "https://github.com/rust-lang/rust/commit/f8cfb2f5ad847b871399dfef9b8b8ff4e84a75cb"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "4cfb188783ba110c42165132188d698c3a535152", "filename": "compiler/rustc_expand/src/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fb9bb2b5ca517d85e1041ea9f80d06f48054624c/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9bb2b5ca517d85e1041ea9f80d06f48054624c/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro_server.rs?ref=fb9bb2b5ca517d85e1041ea9f80d06f48054624c", "patch": "@@ -584,12 +584,12 @@ impl server::Literal for Rustc<'_> {\n \n         let start = match start {\n             Bound::Included(lo) => lo,\n-            Bound::Excluded(lo) => lo + 1,\n+            Bound::Excluded(lo) => lo.checked_add(1)?,\n             Bound::Unbounded => 0,\n         };\n \n         let end = match end {\n-            Bound::Included(hi) => hi + 1,\n+            Bound::Included(hi) => hi.checked_add(1)?,\n             Bound::Excluded(hi) => hi,\n             Bound::Unbounded => length,\n         };"}, {"sha": "03737e1ef1f4dcd4d8be3439edffbd365ea8741f", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fb9bb2b5ca517d85e1041ea9f80d06f48054624c/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9bb2b5ca517d85e1041ea9f80d06f48054624c/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=fb9bb2b5ca517d85e1041ea9f80d06f48054624c", "patch": "@@ -15,6 +15,7 @@\n #![feature(slice_ptr_get)]\n #![feature(split_inclusive)]\n #![feature(binary_heap_retain)]\n+#![feature(deque_range)]\n #![feature(inplace_iteration)]\n #![feature(iter_map_while)]\n "}, {"sha": "7ba1c2c611686c8a128f66a448fdc29266e6e7cf", "filename": "library/alloc/tests/string.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/fb9bb2b5ca517d85e1041ea9f80d06f48054624c/library%2Falloc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9bb2b5ca517d85e1041ea9f80d06f48054624c/library%2Falloc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstring.rs?ref=fb9bb2b5ca517d85e1041ea9f80d06f48054624c", "patch": "@@ -1,6 +1,7 @@\n use std::borrow::Cow;\n use std::collections::TryReserveError::*;\n use std::mem::size_of;\n+use std::ops::Bound::*;\n \n pub trait IntoCow<'a, B: ?Sized>\n where\n@@ -467,6 +468,20 @@ fn test_drain() {\n     assert_eq!(t, \"\");\n }\n \n+#[test]\n+#[should_panic]\n+fn test_drain_start_overflow() {\n+    let mut s = String::from(\"abc\");\n+    s.drain((Excluded(usize::MAX), Included(0)));\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_drain_end_overflow() {\n+    let mut s = String::from(\"abc\");\n+    s.drain((Included(0), Included(usize::MAX)));\n+}\n+\n #[test]\n fn test_replace_range() {\n     let mut s = \"Hello, world!\".to_owned();\n@@ -504,6 +519,20 @@ fn test_replace_range_inclusive_out_of_bounds() {\n     s.replace_range(5..=5, \"789\");\n }\n \n+#[test]\n+#[should_panic]\n+fn test_replace_range_start_overflow() {\n+    let mut s = String::from(\"123\");\n+    s.replace_range((Excluded(usize::MAX), Included(0)), \"\");\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_replace_range_end_overflow() {\n+    let mut s = String::from(\"456\");\n+    s.replace_range((Included(0), Included(usize::MAX)), \"\");\n+}\n+\n #[test]\n fn test_replace_range_empty() {\n     let mut s = String::from(\"12345\");"}, {"sha": "563dd7ab6457d58fe014299317a2590e5c4580a0", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/fb9bb2b5ca517d85e1041ea9f80d06f48054624c/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9bb2b5ca517d85e1041ea9f80d06f48054624c/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=fb9bb2b5ca517d85e1041ea9f80d06f48054624c", "patch": "@@ -3,6 +3,7 @@ use std::collections::TryReserveError::*;\n use std::fmt::Debug;\n use std::iter::InPlaceIterable;\n use std::mem::size_of;\n+use std::ops::Bound::*;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n use std::rc::Rc;\n use std::vec::{Drain, IntoIter};\n@@ -645,13 +646,37 @@ fn test_drain_max_vec_size() {\n     assert_eq!(v.len(), usize::MAX - 1);\n }\n \n+#[test]\n+#[should_panic]\n+fn test_drain_index_overflow() {\n+    let mut v = Vec::<()>::with_capacity(usize::MAX);\n+    unsafe {\n+        v.set_len(usize::MAX);\n+    }\n+    v.drain(0..=usize::MAX);\n+}\n+\n #[test]\n #[should_panic]\n fn test_drain_inclusive_out_of_bounds() {\n     let mut v = vec![1, 2, 3, 4, 5];\n     v.drain(5..=5);\n }\n \n+#[test]\n+#[should_panic]\n+fn test_drain_start_overflow() {\n+    let mut v = vec![1, 2, 3];\n+    v.drain((Excluded(usize::MAX), Included(0)));\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_drain_end_overflow() {\n+    let mut v = vec![1, 2, 3];\n+    v.drain((Included(0), Included(usize::MAX)));\n+}\n+\n #[test]\n fn test_drain_leak() {\n     static mut DROPS: i32 = 0;"}, {"sha": "46d8a3c4cb4931126d578fd51d675e3f8758ff79", "filename": "library/alloc/tests/vec_deque.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fb9bb2b5ca517d85e1041ea9f80d06f48054624c/library%2Falloc%2Ftests%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb9bb2b5ca517d85e1041ea9f80d06f48054624c/library%2Falloc%2Ftests%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec_deque.rs?ref=fb9bb2b5ca517d85e1041ea9f80d06f48054624c", "patch": "@@ -2,6 +2,7 @@ use std::collections::TryReserveError::*;\n use std::collections::{vec_deque::Drain, VecDeque};\n use std::fmt::Debug;\n use std::mem::size_of;\n+use std::ops::Bound::*;\n use std::panic::{catch_unwind, AssertUnwindSafe};\n \n use crate::hash;\n@@ -115,6 +116,20 @@ fn test_index_out_of_bounds() {\n     deq[3];\n }\n \n+#[test]\n+#[should_panic]\n+fn test_range_start_overflow() {\n+    let deq = VecDeque::from(vec![1, 2, 3]);\n+    deq.range((Included(0), Included(usize::MAX)));\n+}\n+\n+#[test]\n+#[should_panic]\n+fn test_range_end_overflow() {\n+    let deq = VecDeque::from(vec![1, 2, 3]);\n+    deq.range((Excluded(usize::MAX), Included(0)));\n+}\n+\n #[derive(Clone, PartialEq, Debug)]\n enum Taggy {\n     One(i32),"}]}