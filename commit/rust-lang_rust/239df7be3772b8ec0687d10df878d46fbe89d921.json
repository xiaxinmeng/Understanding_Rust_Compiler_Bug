{"sha": "239df7be3772b8ec0687d10df878d46fbe89d921", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIzOWRmN2JlMzc3MmI4ZWMwNjg3ZDEwZGY4NzhkNDZmYmU4OWQ5MjE=", "commit": {"author": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-01T13:32:32Z"}, "committer": {"name": "scalexm", "email": "alexandre@scalexm.fr", "date": "2018-11-13T11:28:43Z"}, "message": "Bypass ppaux for `Outlives` predicates", "tree": {"sha": "3f3ec9f7375366c25425951e13fdda0d1b86c114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f3ec9f7375366c25425951e13fdda0d1b86c114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/239df7be3772b8ec0687d10df878d46fbe89d921", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/239df7be3772b8ec0687d10df878d46fbe89d921", "html_url": "https://github.com/rust-lang/rust/commit/239df7be3772b8ec0687d10df878d46fbe89d921", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/239df7be3772b8ec0687d10df878d46fbe89d921/comments", "author": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scalexm", "id": 1173131, "node_id": "MDQ6VXNlcjExNzMxMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1173131?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scalexm", "html_url": "https://github.com/scalexm", "followers_url": "https://api.github.com/users/scalexm/followers", "following_url": "https://api.github.com/users/scalexm/following{/other_user}", "gists_url": "https://api.github.com/users/scalexm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scalexm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scalexm/subscriptions", "organizations_url": "https://api.github.com/users/scalexm/orgs", "repos_url": "https://api.github.com/users/scalexm/repos", "events_url": "https://api.github.com/users/scalexm/events{/privacy}", "received_events_url": "https://api.github.com/users/scalexm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3510805f7e6d40d1aa8bb79c6e287a76ca33c063", "url": "https://api.github.com/repos/rust-lang/rust/commits/3510805f7e6d40d1aa8bb79c6e287a76ca33c063", "html_url": "https://github.com/rust-lang/rust/commit/3510805f7e6d40d1aa8bb79c6e287a76ca33c063"}], "stats": {"total": 66, "additions": 48, "deletions": 18}, "files": [{"sha": "3fed2f2e3dc04ff7eb4ab7e073d2e52f8b1fe61f", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 34, "deletions": 4, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/239df7be3772b8ec0687d10df878d46fbe89d921/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239df7be3772b8ec0687d10df878d46fbe89d921/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=239df7be3772b8ec0687d10df878d46fbe89d921", "patch": "@@ -442,11 +442,41 @@ impl<'tcx> fmt::Display for traits::WhereClause<'tcx> {\n     fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n         use traits::WhereClause::*;\n \n+        // Bypass ppaux because it does not print out anonymous regions.\n+        fn write_region_name<'tcx>(\n+            r: ty::Region<'tcx>,\n+            fmt: &mut fmt::Formatter<'_>\n+        ) -> fmt::Result {\n+            match r {\n+                ty::ReLateBound(index, br) => match br {\n+                    ty::BoundRegion::BrNamed(_, name) => write!(fmt, \"{}\", name),\n+                    ty::BoundRegion::BrAnon(var) => {\n+                        if *index == ty::INNERMOST {\n+                            write!(fmt, \"'^{}\", var)\n+                        } else {\n+                            write!(fmt, \"'^{}_{}\", index.index(), var)\n+                        }\n+                    }\n+                    _ => write!(fmt, \"'_\"),\n+                }\n+\n+                _ => write!(fmt, \"{}\", r),\n+            }\n+        }\n+\n         match self {\n             Implemented(trait_ref) => write!(fmt, \"Implemented({})\", trait_ref),\n             ProjectionEq(projection) => write!(fmt, \"ProjectionEq({})\", projection),\n-            RegionOutlives(predicate) => write!(fmt, \"RegionOutlives({})\", predicate),\n-            TypeOutlives(predicate) => write!(fmt, \"TypeOutlives({})\", predicate),\n+            RegionOutlives(predicate) => {\n+                write!(fmt, \"RegionOutlives({}: \", predicate.0)?;\n+                write_region_name(predicate.1, fmt)?;\n+                write!(fmt, \")\")\n+            }\n+            TypeOutlives(predicate) => {\n+                write!(fmt, \"TypeOutlives({}: \", predicate.0)?;\n+                write_region_name(predicate.1, fmt)?;\n+                write!(fmt, \")\")\n+            }\n         }\n     }\n }\n@@ -567,7 +597,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n                     match bound_ty.kind {\n                         ty::BoundTyKind::Param(name) => name,\n                         ty::BoundTyKind::Anon => Symbol::intern(\n-                            &format!(\"?{}\", bound_ty.var.as_u32())\n+                            &format!(\"^{}\", bound_ty.var.as_u32())\n                         ).as_interned_str(),\n                     }\n                 );\n@@ -591,7 +621,7 @@ impl<'tcx> TypeVisitor<'tcx> for BoundNamesCollector {\n \n                     ty::BoundRegion::BrAnon(var) => {\n                         self.regions.insert(Symbol::intern(\n-                            &format!(\"?'{}\", var)\n+                            &format!(\"'^{}\", var)\n                         ).as_interned_str());\n                     }\n "}, {"sha": "e44c0c05bb1a6c78fdc829f2f509cd002a5f3677", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/239df7be3772b8ec0687d10df878d46fbe89d921/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239df7be3772b8ec0687d10df878d46fbe89d921/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=239df7be3772b8ec0687d10df878d46fbe89d921", "patch": "@@ -1114,9 +1114,9 @@ define_print! {\n                     match bound_ty.kind {\n                         ty::BoundTyKind::Anon => {\n                             if bound_ty.index == ty::INNERMOST {\n-                                write!(f, \"?{}\", bound_ty.var.index())\n+                                write!(f, \"^{}\", bound_ty.var.index())\n                             } else {\n-                                write!(f, \"?{}_{}\", bound_ty.index.index(), bound_ty.var.index())\n+                                write!(f, \"^{}_{}\", bound_ty.index.index(), bound_ty.var.index())\n                             }\n                         }\n "}, {"sha": "31f97b72e1927d1686489ac2555935a71854f498", "filename": "src/librustc_traits/chalk_context/program_clauses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/239df7be3772b8ec0687d10df878d46fbe89d921/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239df7be3772b8ec0687d10df878d46fbe89d921/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context%2Fprogram_clauses.rs?ref=239df7be3772b8ec0687d10df878d46fbe89d921", "patch": "@@ -191,7 +191,7 @@ fn program_clauses_for_tuple<'tcx>(\n             .map(|i| ty::BoundTy::new(ty::INNERMOST, ty::BoundVar::from(i)))\n             .map(|t| tcx.mk_ty(ty::Bound(t)))\n     );\n-    \n+\n     let tuple_ty = tcx.mk_ty(ty::Tuple(type_list));\n \n     let sized_trait = match tcx.lang_items().sized_trait() {"}, {"sha": "74833ef064f9d24039d0c37f56ccec536a10c64f", "filename": "src/test/ui/chalkify/lower_env2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/239df7be3772b8ec0687d10df878d46fbe89d921/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/239df7be3772b8ec0687d10df878d46fbe89d921/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env2.stderr?ref=239df7be3772b8ec0687d10df878d46fbe89d921", "patch": "@@ -5,8 +5,8 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: forall<'a, T> { FromEnv(T: Foo) :- FromEnv(S<'a, T>). }\n-   = note: forall<'a, T> { TypeOutlives(T : 'a) :- FromEnv(S<'a, T>). }\n-   = note: forall<'a, T> { WellFormed(S<'a, T>) :- Implemented(T: Foo), TypeOutlives(T : 'a). }\n+   = note: forall<'a, T> { TypeOutlives(T: 'a) :- FromEnv(S<'a, T>). }\n+   = note: forall<'a, T> { WellFormed(S<'a, T>) :- Implemented(T: Foo), TypeOutlives(T: 'a). }\n \n error: program clause dump\n   --> $DIR/lower_env2.rs:21:1\n@@ -15,7 +15,7 @@ LL | #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: forall<'a, T> { FromEnv(T: Foo) :- FromEnv(S<'a, T>). }\n-   = note: forall<'a, T> { TypeOutlives(T : 'a) :- FromEnv(S<'a, T>). }\n+   = note: forall<'a, T> { TypeOutlives(T: 'a) :- FromEnv(S<'a, T>). }\n    = note: forall<Self> { Implemented(Self: Foo) :- FromEnv(Self: Foo). }\n    = note: forall<Self> { Implemented(Self: std::marker::Sized) :- FromEnv(Self: std::marker::Sized). }\n "}, {"sha": "eef6405f8f805e916217566dcb4152e1c8febc61", "filename": "src/test/ui/chalkify/lower_env3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/239df7be3772b8ec0687d10df878d46fbe89d921/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/239df7be3772b8ec0687d10df878d46fbe89d921/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_env3.stderr?ref=239df7be3772b8ec0687d10df878d46fbe89d921", "patch": "@@ -4,7 +4,7 @@ error: program clause dump\n LL |     #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: forall<?'0, ?1> { TypeOutlives(?1 : ) :- FromEnv(&?1). }\n+   = note: forall<'^0, ^1> { TypeOutlives(^1: '^0) :- FromEnv(&^1). }\n    = note: forall<Self> { Implemented(Self: Foo) :- FromEnv(Self: Foo). }\n \n error: program clause dump\n@@ -13,7 +13,7 @@ error: program clause dump\n LL |     #[rustc_dump_env_program_clauses] //~ ERROR program clause dump\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: forall<?'0, ?1> { TypeOutlives(?1 : ) :- FromEnv(&?1). }\n+   = note: forall<'^0, ^1> { TypeOutlives(^1: '^0) :- FromEnv(&^1). }\n    = note: forall<Self> { FromEnv(Self: std::marker::Sized) :- FromEnv(Self: std::clone::Clone). }\n    = note: forall<Self> { Implemented(Self: std::clone::Clone) :- FromEnv(Self: std::clone::Clone). }\n    = note: forall<Self> { Implemented(Self: std::marker::Sized) :- FromEnv(Self: std::marker::Sized). }"}, {"sha": "92a209f673d5c1143ab52f9d6765cf33ccf6e5b9", "filename": "src/test/ui/chalkify/lower_impl.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/239df7be3772b8ec0687d10df878d46fbe89d921/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/239df7be3772b8ec0687d10df878d46fbe89d921/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_impl.stderr?ref=239df7be3772b8ec0687d10df878d46fbe89d921", "patch": "@@ -4,7 +4,7 @@ error: program clause dump\n LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: forall<T> { Implemented(T: Foo) :- ProjectionEq(<T as std::iter::Iterator>::Item == i32), TypeOutlives(T : 'static), Implemented(T: std::iter::Iterator), Implemented(T: std::marker::Sized). }\n+   = note: forall<T> { Implemented(T: Foo) :- ProjectionEq(<T as std::iter::Iterator>::Item == i32), TypeOutlives(T: 'static), Implemented(T: std::iter::Iterator), Implemented(T: std::marker::Sized). }\n \n error: program clause dump\n   --> $DIR/lower_impl.rs:23:5"}, {"sha": "a0dd9369700af63d3d81de46f7376261a0d54594", "filename": "src/test/ui/chalkify/lower_struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/239df7be3772b8ec0687d10df878d46fbe89d921/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/239df7be3772b8ec0687d10df878d46fbe89d921/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_struct.stderr?ref=239df7be3772b8ec0687d10df878d46fbe89d921", "patch": "@@ -6,8 +6,8 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    |\n    = note: forall<'a, T> { FromEnv(T: std::marker::Sized) :- FromEnv(Foo<'a, T>). }\n    = note: forall<'a, T> { FromEnv(std::boxed::Box<T>: std::clone::Clone) :- FromEnv(Foo<'a, T>). }\n-   = note: forall<'a, T> { TypeOutlives(T : 'a) :- FromEnv(Foo<'a, T>). }\n-   = note: forall<'a, T> { WellFormed(Foo<'a, T>) :- Implemented(T: std::marker::Sized), Implemented(std::boxed::Box<T>: std::clone::Clone), TypeOutlives(T : 'a). }\n+   = note: forall<'a, T> { TypeOutlives(T: 'a) :- FromEnv(Foo<'a, T>). }\n+   = note: forall<'a, T> { WellFormed(Foo<'a, T>) :- Implemented(T: std::marker::Sized), Implemented(std::boxed::Box<T>: std::clone::Clone), TypeOutlives(T: 'a). }\n \n error: aborting due to previous error\n "}, {"sha": "f04f53f24969a45dff6e4b439c1132052cb82c8a", "filename": "src/test/ui/chalkify/lower_trait_where_clause.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/239df7be3772b8ec0687d10df878d46fbe89d921/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/239df7be3772b8ec0687d10df878d46fbe89d921/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fchalkify%2Flower_trait_where_clause.stderr?ref=239df7be3772b8ec0687d10df878d46fbe89d921", "patch": "@@ -6,9 +6,9 @@ LL | #[rustc_dump_program_clauses] //~ ERROR program clause dump\n    |\n    = note: forall<'a, 'b, Self, T, U> { FromEnv(T: std::borrow::Borrow<U>) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n    = note: forall<'a, 'b, Self, T, U> { Implemented(Self: Foo<'a, 'b, T, U>) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n-   = note: forall<'a, 'b, Self, T, U> { RegionOutlives('a : 'b) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n-   = note: forall<'a, 'b, Self, T, U> { TypeOutlives(U : 'b) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n-   = note: forall<'a, 'b, Self, T, U> { WellFormed(Self: Foo<'a, 'b, T, U>) :- Implemented(Self: Foo<'a, 'b, T, U>), WellFormed(T: std::borrow::Borrow<U>), TypeOutlives(U : 'b), RegionOutlives('a : 'b), WellFormed(std::boxed::Box<T>). }\n+   = note: forall<'a, 'b, Self, T, U> { RegionOutlives('a: 'b) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n+   = note: forall<'a, 'b, Self, T, U> { TypeOutlives(U: 'b) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n+   = note: forall<'a, 'b, Self, T, U> { WellFormed(Self: Foo<'a, 'b, T, U>) :- Implemented(Self: Foo<'a, 'b, T, U>), WellFormed(T: std::borrow::Borrow<U>), TypeOutlives(U: 'b), RegionOutlives('a: 'b), WellFormed(std::boxed::Box<T>). }\n    = note: forall<'a, 'b, Self, T, U> { WellFormed(std::boxed::Box<T>) :- FromEnv(Self: Foo<'a, 'b, T, U>). }\n \n error: aborting due to previous error"}]}