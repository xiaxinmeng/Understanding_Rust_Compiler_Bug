{"sha": "0b8697241f3988bfa55b9f17d60732dab0e3d75d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiODY5NzI0MWYzOTg4YmZhNTViOWYxN2Q2MDczMmRhYjBlM2Q3NWQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-10-08T21:38:10Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-19T00:43:55Z"}, "message": "rustc_trans: be more relaxed with non-lvalue consumes, especially ZSTs.", "tree": {"sha": "9e525a518aa4c569843d76702f1f3c7d56cf8cb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e525a518aa4c569843d76702f1f3c7d56cf8cb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b8697241f3988bfa55b9f17d60732dab0e3d75d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b8697241f3988bfa55b9f17d60732dab0e3d75d", "html_url": "https://github.com/rust-lang/rust/commit/0b8697241f3988bfa55b9f17d60732dab0e3d75d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b8697241f3988bfa55b9f17d60732dab0e3d75d/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4d9ada70108210a2a2f7d3025a0d693fc3e3e9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4d9ada70108210a2a2f7d3025a0d693fc3e3e9d", "html_url": "https://github.com/rust-lang/rust/commit/c4d9ada70108210a2a2f7d3025a0d693fc3e3e9d"}], "stats": {"total": 83, "additions": 59, "deletions": 24}, "files": [{"sha": "3f3c5ac0a627eb2bf67d266ce289624b526f14fa", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0b8697241f3988bfa55b9f17d60732dab0e3d75d/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8697241f3988bfa55b9f17d60732dab0e3d75d/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=0b8697241f3988bfa55b9f17d60732dab0e3d75d", "patch": "@@ -136,19 +136,29 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n                     context: LvalueContext<'tcx>,\n                     location: Location) {\n         debug!(\"visit_lvalue(lvalue={:?}, context={:?})\", lvalue, context);\n+        let ccx = self.cx.ccx;\n \n         if let mir::Lvalue::Projection(ref proj) = *lvalue {\n-            // Allow uses of projections of immediate pair fields.\n+            // Allow uses of projections that are ZSTs or from immediate scalar fields.\n             if let LvalueContext::Consume = context {\n-                if let mir::Lvalue::Local(_) = proj.base {\n-                    if let mir::ProjectionElem::Field(..) = proj.elem {\n-                        let ty = proj.base.ty(self.cx.mir, self.cx.ccx.tcx());\n-\n-                        let ty = self.cx.monomorphize(&ty.to_ty(self.cx.ccx.tcx()));\n-                        let layout = self.cx.ccx.layout_of(ty);\n-                        if layout.is_llvm_scalar_pair() {\n-                            return;\n-                        }\n+                let base_ty = proj.base.ty(self.cx.mir, ccx.tcx());\n+                let base_ty = self.cx.monomorphize(&base_ty);\n+\n+                // ZSTs don't require any actual memory access.\n+                let elem_ty = base_ty.projection_ty(ccx.tcx(), &proj.elem).to_ty(ccx.tcx());\n+                let elem_ty = self.cx.monomorphize(&elem_ty);\n+                if ccx.layout_of(elem_ty).is_zst() {\n+                    return;\n+                }\n+\n+                if let mir::ProjectionElem::Field(..) = proj.elem {\n+                    let layout = ccx.layout_of(base_ty.to_ty(ccx.tcx()));\n+                    if layout.is_llvm_scalar_pair() {\n+                        // Recurse as a `Consume` instead of `Projection`,\n+                        // potentially stopping at non-operand projections,\n+                        // which would trigger `mark_as_lvalue` on locals.\n+                        self.visit_lvalue(&proj.base, LvalueContext::Consume, location);\n+                        return;\n                     }\n                 }\n             }"}, {"sha": "97e7dda31aa2c005c385e5edf9f882dc659ae40e", "filename": "src/librustc_trans/mir/operand.rs", "status": "modified", "additions": 39, "deletions": 14, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/0b8697241f3988bfa55b9f17d60732dab0e3d75d/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b8697241f3988bfa55b9f17d60732dab0e3d75d/src%2Flibrustc_trans%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Foperand.rs?ref=0b8697241f3988bfa55b9f17d60732dab0e3d75d", "patch": "@@ -179,19 +179,19 @@ impl<'a, 'tcx> OperandValue {\n }\n \n impl<'a, 'tcx> MirContext<'a, 'tcx> {\n-    pub fn trans_consume(&mut self,\n-                         bcx: &Builder<'a, 'tcx>,\n-                         lvalue: &mir::Lvalue<'tcx>)\n-                         -> OperandRef<'tcx>\n+    fn maybe_trans_consume_direct(&mut self,\n+                                  bcx: &Builder<'a, 'tcx>,\n+                                  lvalue: &mir::Lvalue<'tcx>)\n+                                   -> Option<OperandRef<'tcx>>\n     {\n-        debug!(\"trans_consume(lvalue={:?})\", lvalue);\n+        debug!(\"maybe_trans_consume_direct(lvalue={:?})\", lvalue);\n \n         // watch out for locals that do not have an\n         // alloca; they are handled somewhat differently\n         if let mir::Lvalue::Local(index) = *lvalue {\n             match self.locals[index] {\n                 LocalRef::Operand(Some(o)) => {\n-                    return o;\n+                    return Some(o);\n                 }\n                 LocalRef::Operand(None) => {\n                     bug!(\"use of {:?} before def\", lvalue);\n@@ -204,28 +204,53 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n \n         // Moves out of pair fields are trivial.\n         if let &mir::Lvalue::Projection(ref proj) = lvalue {\n-            if let mir::Lvalue::Local(index) = proj.base {\n-                if let LocalRef::Operand(Some(o)) = self.locals[index] {\n-                    match (o.val, &proj.elem) {\n-                        (OperandValue::Pair(a, b),\n-                         &mir::ProjectionElem::Field(ref f, ty)) => {\n-                            let layout = bcx.ccx.layout_of(self.monomorphize(&ty));\n+            if let mir::ProjectionElem::Field(ref f, _) = proj.elem {\n+                if let Some(o) = self.maybe_trans_consume_direct(bcx, &proj.base) {\n+                    let layout = o.layout.field(bcx.ccx, f.index());\n+\n+                    // Handled in `trans_consume`.\n+                    assert!(!layout.is_zst());\n+\n+                    match o.val {\n+                        OperandValue::Pair(a, b) => {\n                             let llval = [a, b][f.index()];\n                             // HACK(eddyb) have to bitcast pointers\n                             // until LLVM removes pointee types.\n                             let llval = bcx.bitcast(llval,\n                                 layout.immediate_llvm_type(bcx.ccx));\n-                            return OperandRef {\n+                            return Some(OperandRef {\n                                 val: OperandValue::Immediate(llval),\n                                 layout\n-                            };\n+                            });\n                         }\n                         _ => {}\n                     }\n                 }\n             }\n         }\n \n+        None\n+    }\n+\n+    pub fn trans_consume(&mut self,\n+                         bcx: &Builder<'a, 'tcx>,\n+                         lvalue: &mir::Lvalue<'tcx>)\n+                         -> OperandRef<'tcx>\n+    {\n+        debug!(\"trans_consume(lvalue={:?})\", lvalue);\n+\n+        let ty = self.monomorphized_lvalue_ty(lvalue);\n+        let layout = bcx.ccx.layout_of(ty);\n+\n+        // ZSTs don't require any actual memory access.\n+        if layout.is_zst() {\n+            return OperandRef::new_zst(bcx.ccx, layout);\n+        }\n+\n+        if let Some(o) = self.maybe_trans_consume_direct(bcx, lvalue) {\n+            return o;\n+        }\n+\n         // for most lvalues, to consume them we just load them\n         // out from their home\n         self.trans_lvalue(bcx, lvalue).load(bcx)"}]}