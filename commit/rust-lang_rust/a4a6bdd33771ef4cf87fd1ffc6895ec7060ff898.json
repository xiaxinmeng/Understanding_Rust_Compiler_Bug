{"sha": "a4a6bdd33771ef4cf87fd1ffc6895ec7060ff898", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0YTZiZGQzMzc3MWVmNGNmODdmZDFmZmM2ODk1ZWM3MDYwZmY4OTg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-03T17:25:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-04-03T17:25:11Z"}, "message": "addr_of_mut: add example for creating a pointer to uninit data", "tree": {"sha": "07f0728f518e65e9f8aee0d3fbffae145f09b432", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07f0728f518e65e9f8aee0d3fbffae145f09b432"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a4a6bdd33771ef4cf87fd1ffc6895ec7060ff898", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a4a6bdd33771ef4cf87fd1ffc6895ec7060ff898", "html_url": "https://github.com/rust-lang/rust/commit/a4a6bdd33771ef4cf87fd1ffc6895ec7060ff898", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a4a6bdd33771ef4cf87fd1ffc6895ec7060ff898/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccd997592bf545fc54a9cce31f1280f833915ba1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccd997592bf545fc54a9cce31f1280f833915ba1", "html_url": "https://github.com/rust-lang/rust/commit/ccd997592bf545fc54a9cce31f1280f833915ba1"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "64342de6341b0a5c4b560d2d5dd38f605ed221ae", "filename": "library/core/src/mem/maybe_uninit.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a4a6bdd33771ef4cf87fd1ffc6895ec7060ff898/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4a6bdd33771ef4cf87fd1ffc6895ec7060ff898/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmaybe_uninit.rs?ref=a4a6bdd33771ef4cf87fd1ffc6895ec7060ff898", "patch": "@@ -190,6 +190,8 @@ use crate::ptr;\n ///     let ptr = uninit.as_mut_ptr();\n ///\n ///     // Initializing the `name` field\n+///     // Using `write` instead of assignment via `=` to not call `drop` on the\n+///     // old, uninitialized value.\n ///     unsafe { addr_of_mut!((*ptr).name).write(\"Bob\".to_string()); }\n ///\n ///     // Initializing the `list` field"}, {"sha": "f8b124f581ccee612e35a209a76f85a4f85f0e81", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a4a6bdd33771ef4cf87fd1ffc6895ec7060ff898/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a4a6bdd33771ef4cf87fd1ffc6895ec7060ff898/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=a4a6bdd33771ef4cf87fd1ffc6895ec7060ff898", "patch": "@@ -1540,6 +1540,12 @@ fnptr_impls_args! { A, B, C, D, E, F, G, H, I, J, K, L }\n /// let raw_f2 = ptr::addr_of!(packed.f2);\n /// assert_eq!(unsafe { raw_f2.read_unaligned() }, 2);\n /// ```\n+///\n+/// See [`addr_of_mut`] for how to create a pointer to ininitialized data.\n+/// Doing that with `addr_of` would not make much sense since one could only\n+/// read the data, and that would be Undefined Behavior.\n+///\n+/// [`addr_of_mut`]: macro.addr_of_mut.html\n #[stable(feature = \"raw_ref_macros\", since = \"1.51.0\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[allow_internal_unstable(raw_ref_op)]\n@@ -1556,7 +1562,9 @@ pub macro addr_of($place:expr) {\n /// as all other references. This macro can create a raw pointer *without* creating\n /// a reference first.\n ///\n-/// # Example\n+/// # Examples\n+///\n+/// **Creating a pointer to unaligned data:**\n ///\n /// ```\n /// use std::ptr;\n@@ -1573,6 +1581,23 @@ pub macro addr_of($place:expr) {\n /// unsafe { raw_f2.write_unaligned(42); }\n /// assert_eq!({packed.f2}, 42); // `{...}` forces copying the field instead of creating a reference.\n /// ```\n+///\n+/// **Creating a pointer to uninitialized data:**\n+///\n+/// ```rust\n+/// use std::{ptr, mem::MaybeUninit};\n+///\n+/// struct Demo {\n+///     field: bool,\n+/// }\n+///\n+/// let mut uninit = MaybeUninit::<Demo>::uninit();\n+/// // `&uninit.as_mut().field` would create a reference to an uninitialized `bool`,\n+/// // and thus be Undefined Behavior!\n+/// let f1_ptr = unsafe { ptr::addr_of_mut!((*uninit.as_mut_ptr()).field) };\n+/// unsafe { f1_ptr.write(true); }\n+/// let init = unsafe { uninit.assume_init() };\n+/// ```\n #[stable(feature = \"raw_ref_macros\", since = \"1.51.0\")]\n #[rustc_macro_transparency = \"semitransparent\"]\n #[allow_internal_unstable(raw_ref_op)]"}]}