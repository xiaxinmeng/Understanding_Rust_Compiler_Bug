{"sha": "4aa2a44a55ecd0fe31a22bb02bebbf93dd319ec9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYTJhNDRhNTVlY2QwZmUzMWEyMmJiMDJiZWJiZjkzZGQzMTllYzk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-21T10:12:17Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-21T10:12:17Z"}, "message": "Merge #9962\n\n9962: Add empty-body check to replace_match_with_if_let and re-prioritize choices r=elkowar a=elkowar\n\nThis PR changes some behaviour of the `replace_match_with_if_let` ide-assist.\r\nConcretely, it makes two changes:\r\n\r\nit introduces a check for empty expression bodies. This means that checks of the shape\r\n```rs\r\nmatch x {\r\n  A => {}\r\n  B => {\r\n    println!(\"hi\");\r\n  }\r\n}\r\n```\r\nwill prefer to use the B branch as the first (and only) variant.\r\n\r\nIt also reprioritizes the importance of \"happy\" and \"sad\" patterns.\r\nConcretely, if there are reasons to prefer having the sad pattern be the first (/only) pattern,\r\nit will follow these.\r\nThis means that in the case of \r\n```rs\r\nmatch x {\r\n  Ok(_) => {\r\n    println!(\"Success\");\r\n  }\r\n  Err(e) => {\r\n    println!(\"Failure: {}\", e);\r\n  }\r\n}\r\n```\r\nthe `Err` variant will correctly be used as the first expression in the generated if.\r\nUp until now, the generated code was actually invalid, as it would generate\r\n```rs\r\nif let Ok(_) = x {\r\n  println!(\"Success\");\r\n} else {\r\n  println!(\"Failure: {}\", e);\r\n}\r\n```\r\nwhere `e` in the else branch is not defined.\r\n\n\nCo-authored-by: elkowar <5300871+elkowar@users.noreply.github.com>", "tree": {"sha": "cff3449da5c31b646c6b958758a5e2547f9cdab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cff3449da5c31b646c6b958758a5e2547f9cdab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aa2a44a55ecd0fe31a22bb02bebbf93dd319ec9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhINGBCRBK7hj4Ov3rIwAAXdsIAK4WoAfOsYMFjfkQHZfPtzdy\nxE1Kgx9z+aQARHzPEhTpTI/iaRcWXV8lzVu1blo5uiCLxKj3u5eU3K3NH0wra1sd\nVRyjSpkO6axpf7TQD5Kuub/EEfXGfCUsORIQcscBTtuCPPU+0flnqZvO0FoB6pfI\nOGc8zEFDfLpWZP289+P2t1OWMV8EVfau2g6tQWcfrfl3b7kxzDAFG+XmrZWc47Cx\nxiPGIzb9N0ykrkQkNvd0OohNfUm6glkHyvQbG5wSdrnuueySSriOSpKopRUZrCby\n1DHWqaCenKnpaEB+Ceoa4D+a8nefq3BqIavPK4ODEJoFwW7izmaHATZZreb8A2I=\n=S0/p\n-----END PGP SIGNATURE-----\n", "payload": "tree cff3449da5c31b646c6b958758a5e2547f9cdab0\nparent 13bbed7c16f91dbe8546325fe27311f94239f204\nparent e47c9743cfa7f6b3e271b4f5957d8c0913ce8520\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629540737 +0000\ncommitter GitHub <noreply@github.com> 1629540737 +0000\n\nMerge #9962\n\n9962: Add empty-body check to replace_match_with_if_let and re-prioritize choices r=elkowar a=elkowar\n\nThis PR changes some behaviour of the `replace_match_with_if_let` ide-assist.\r\nConcretely, it makes two changes:\r\n\r\nit introduces a check for empty expression bodies. This means that checks of the shape\r\n```rs\r\nmatch x {\r\n  A => {}\r\n  B => {\r\n    println!(\"hi\");\r\n  }\r\n}\r\n```\r\nwill prefer to use the B branch as the first (and only) variant.\r\n\r\nIt also reprioritizes the importance of \"happy\" and \"sad\" patterns.\r\nConcretely, if there are reasons to prefer having the sad pattern be the first (/only) pattern,\r\nit will follow these.\r\nThis means that in the case of \r\n```rs\r\nmatch x {\r\n  Ok(_) => {\r\n    println!(\"Success\");\r\n  }\r\n  Err(e) => {\r\n    println!(\"Failure: {}\", e);\r\n  }\r\n}\r\n```\r\nthe `Err` variant will correctly be used as the first expression in the generated if.\r\nUp until now, the generated code was actually invalid, as it would generate\r\n```rs\r\nif let Ok(_) = x {\r\n  println!(\"Success\");\r\n} else {\r\n  println!(\"Failure: {}\", e);\r\n}\r\n```\r\nwhere `e` in the else branch is not defined.\r\n\n\nCo-authored-by: elkowar <5300871+elkowar@users.noreply.github.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa2a44a55ecd0fe31a22bb02bebbf93dd319ec9", "html_url": "https://github.com/rust-lang/rust/commit/4aa2a44a55ecd0fe31a22bb02bebbf93dd319ec9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aa2a44a55ecd0fe31a22bb02bebbf93dd319ec9/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13bbed7c16f91dbe8546325fe27311f94239f204", "url": "https://api.github.com/repos/rust-lang/rust/commits/13bbed7c16f91dbe8546325fe27311f94239f204", "html_url": "https://github.com/rust-lang/rust/commit/13bbed7c16f91dbe8546325fe27311f94239f204"}, {"sha": "e47c9743cfa7f6b3e271b4f5957d8c0913ce8520", "url": "https://api.github.com/repos/rust-lang/rust/commits/e47c9743cfa7f6b3e271b4f5957d8c0913ce8520", "html_url": "https://github.com/rust-lang/rust/commit/e47c9743cfa7f6b3e271b4f5957d8c0913ce8520"}], "stats": {"total": 90, "additions": 82, "deletions": 8}, "files": [{"sha": "5ce2ad3193e6723713b0577624b645205eb3eaa2", "filename": "crates/ide_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 82, "deletions": 8, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/4aa2a44a55ecd0fe31a22bb02bebbf93dd319ec9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa2a44a55ecd0fe31a22bb02bebbf93dd319ec9/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=4aa2a44a55ecd0fe31a22bb02bebbf93dd319ec9", "patch": "@@ -1,12 +1,12 @@\n use std::iter::{self, successors};\n \n use either::Either;\n-use ide_db::{ty_filter::TryEnum, RootDatabase};\n+use ide_db::{defs::NameClass, ty_filter::TryEnum, RootDatabase};\n use syntax::{\n     ast::{\n         self,\n         edit::{AstNodeEdit, IndentLevel},\n-        make,\n+        make, NameOwner,\n     },\n     AstNode,\n };\n@@ -235,22 +235,34 @@ fn pick_pattern_and_expr_order(\n ) -> Option<(ast::Pat, ast::Expr, ast::Expr)> {\n     let res = match (pat, pat2) {\n         (ast::Pat::WildcardPat(_), _) => return None,\n-        (pat, sad_pat) if is_sad_pat(sema, &sad_pat) => (pat, expr, expr2),\n-        (sad_pat, pat) if is_sad_pat(sema, &sad_pat) => (pat, expr2, expr),\n-        (pat, pat2) => match (binds_name(&pat), binds_name(&pat2)) {\n+        (pat, _) if is_empty_expr(&expr2) => (pat, expr, expr2),\n+        (_, pat) if is_empty_expr(&expr) => (pat, expr2, expr),\n+        (pat, pat2) => match (binds_name(sema, &pat), binds_name(sema, &pat2)) {\n             (true, true) => return None,\n             (true, false) => (pat, expr, expr2),\n             (false, true) => (pat2, expr2, expr),\n+            _ if is_sad_pat(sema, &pat) => (pat2, expr2, expr),\n             (false, false) => (pat, expr, expr2),\n         },\n     };\n     Some(res)\n }\n \n-fn binds_name(pat: &ast::Pat) -> bool {\n-    let binds_name_v = |pat| binds_name(&pat);\n+fn is_empty_expr(expr: &ast::Expr) -> bool {\n+    match expr {\n+        ast::Expr::BlockExpr(expr) => expr.is_empty(),\n+        ast::Expr::TupleExpr(expr) => expr.fields().next().is_none(),\n+        _ => false,\n+    }\n+}\n+\n+fn binds_name(sema: &hir::Semantics<RootDatabase>, pat: &ast::Pat) -> bool {\n+    let binds_name_v = |pat| binds_name(&sema, &pat);\n     match pat {\n-        ast::Pat::IdentPat(_) => true,\n+        ast::Pat::IdentPat(pat) => !matches!(\n+            pat.name().and_then(|name| NameClass::classify(sema, &name)),\n+            Some(NameClass::ConstReference(_))\n+        ),\n         ast::Pat::MacroPat(_) => true,\n         ast::Pat::OrPat(pat) => pat.pats().any(binds_name_v),\n         ast::Pat::SlicePat(pat) => pat.pats().any(binds_name_v),\n@@ -702,6 +714,28 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn replace_match_with_if_let_number_body() {\n+        check_assist(\n+            replace_match_with_if_let,\n+            r#\"\n+fn main() {\n+    $0match Ok(()) {\n+        Ok(()) => {},\n+        Err(_) => 0,\n+    }\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    if let Err(_) = Ok(()) {\n+        0\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn replace_match_with_if_let_exhaustive() {\n         check_assist(\n@@ -762,6 +796,46 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn replace_match_with_if_let_prefer_nonempty_body() {\n+        check_assist(\n+            replace_match_with_if_let,\n+            r#\"\n+fn foo() {\n+    match $0Ok(0) {\n+        Ok(value) => {},\n+        Err(err) => eprintln!(\"{}\", err),\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo() {\n+    if let Err(err) = Ok(0) {\n+        eprintln!(\"{}\", err)\n+    }\n+}\n+\"#,\n+        );\n+        check_assist(\n+            replace_match_with_if_let,\n+            r#\"\n+fn foo() {\n+    match $0Ok(0) {\n+        Err(err) => eprintln!(\"{}\", err),\n+        Ok(value) => {},\n+    }\n+}\n+\"#,\n+            r#\"\n+fn foo() {\n+    if let Err(err) = Ok(0) {\n+        eprintln!(\"{}\", err)\n+    }\n+}\n+\"#,\n+        );\n+    }\n+\n     #[test]\n     fn replace_match_with_if_let_rejects_double_name_bindings() {\n         check_assist_not_applicable("}]}