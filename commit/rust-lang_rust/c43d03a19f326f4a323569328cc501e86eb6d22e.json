{"sha": "c43d03a19f326f4a323569328cc501e86eb6d22e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0M2QwM2ExOWYzMjZmNGEzMjM1NjkzMjhjYzUwMWU4NmViNmQyMmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-14T07:08:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-14T07:08:50Z"}, "message": "Auto merge of #63544 - Centril:rollup-qhqfcov, r=Centril\n\nRollup of 17 pull requests\n\nSuccessful merges:\n\n - #62760 (Deduplicate error messages in `librsctc_mir`)\n - #62849 (typeck: Prohibit RPIT types that inherit lifetimes)\n - #63383 (`async fn` lifetime elision tests)\n - #63421 (Implement Clone, Display for ascii::EscapeDefault)\n - #63459 (syntax: account for CVarArgs being in the argument list.)\n - #63475 (Bring back suggestion for splitting `<-` into `< -`)\n - #63485 (ci: move mirrors to their standalone bucket)\n - #63486 (Document `From` trait for `BinaryHeap`)\n - #63488 (improve DiagnosticBuilder docs)\n - #63493 (Remove unneeded comment in src/libcore/hash/mod.rs)\n - #63499 (handle elision in async fn correctly)\n - #63501 (use `ParamName` to track in-scope lifetimes instead of Ident)\n - #63508 (Do not ICE when synthesizing spans falling inside unicode chars)\n - #63511 (ci: add a check for clock drift)\n - #63512 (Provide map_ok and map_err method for Poll<Option<Result<T, E>>>)\n - #63529 (RELEASES.md: ? is one of three Kleene operators)\n - #63530 (Fix typo in error message.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "b23585499e7030f4a92a0258242ad8fe36b91d53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b23585499e7030f4a92a0258242ad8fe36b91d53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c43d03a19f326f4a323569328cc501e86eb6d22e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c43d03a19f326f4a323569328cc501e86eb6d22e", "html_url": "https://github.com/rust-lang/rust/commit/c43d03a19f326f4a323569328cc501e86eb6d22e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c43d03a19f326f4a323569328cc501e86eb6d22e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60960a260f7b5c695fd0717311d72ce62dd4eb43", "url": "https://api.github.com/repos/rust-lang/rust/commits/60960a260f7b5c695fd0717311d72ce62dd4eb43", "html_url": "https://github.com/rust-lang/rust/commit/60960a260f7b5c695fd0717311d72ce62dd4eb43"}, {"sha": "a8bb3756b65c1193c72bf59f4095b1ab6e84743d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8bb3756b65c1193c72bf59f4095b1ab6e84743d", "html_url": "https://github.com/rust-lang/rust/commit/a8bb3756b65c1193c72bf59f4095b1ab6e84743d"}], "stats": {"total": 2655, "additions": 2462, "deletions": 193}, "files": [{"sha": "f26f6e6c888eda387ced2872b2e6eb3dc9074f75", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -22,7 +22,7 @@ Language\n - [You can now use `_` as an identifier for consts.][61347] e.g. You can write\n   `const _: u32 = 5;`.\n - [You can now use `#[repr(align(X)]` on enums.][61229]\n-- [The  `?`/_\"Kleene\"_ macro operator is now available in the\n+- [The  `?` Kleene macro operator is now available in the\n   2015 edition.][60932]\n \n Compiler"}, {"sha": "06fa3bd9f434710290d0a75848d17060f8e7af6b", "filename": "src/ci/azure-pipelines/auto.yml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fazure-pipelines%2Fauto.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fazure-pipelines%2Fauto.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fauto.yml?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -273,7 +273,7 @@ jobs:\n         MSYS_BITS: 32\n         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n         SCRIPT: make ci-subset-1\n-        MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n+        MINGW_URL: https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n         MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n         MINGW_DIR: mingw32\n         # FIXME(#59637)\n@@ -283,14 +283,14 @@ jobs:\n         MSYS_BITS: 32\n         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu\n         SCRIPT: make ci-subset-2\n-        MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n+        MINGW_URL: https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n         MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n         MINGW_DIR: mingw32\n       x86_64-mingw-1:\n         MSYS_BITS: 64\n         SCRIPT: make ci-subset-1\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n-        MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n+        MINGW_URL: https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n         MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n         MINGW_DIR: mingw64\n         # FIXME(#59637)\n@@ -300,7 +300,7 @@ jobs:\n         MSYS_BITS: 64\n         SCRIPT: make ci-subset-2\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu\n-        MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n+        MINGW_URL: https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n         MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n         MINGW_DIR: mingw64\n \n@@ -327,7 +327,7 @@ jobs:\n         MSYS_BITS: 32\n         RUST_CONFIGURE_ARGS: --build=i686-pc-windows-gnu --enable-full-tools --enable-profiler\n         SCRIPT: python x.py dist\n-        MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n+        MINGW_URL: https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n         MINGW_ARCHIVE: i686-6.3.0-release-posix-dwarf-rt_v5-rev2.7z\n         MINGW_DIR: mingw32\n         DIST_REQUIRE_ALL_TOOLS: 1\n@@ -336,7 +336,7 @@ jobs:\n         MSYS_BITS: 64\n         SCRIPT: python x.py dist\n         RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-gnu --enable-full-tools --enable-profiler\n-        MINGW_URL: https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n+        MINGW_URL: https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n         MINGW_ARCHIVE: x86_64-6.3.0-release-posix-seh-rt_v5-rev2.7z\n         MINGW_DIR: mingw64\n         DIST_REQUIRE_ALL_TOOLS: 1"}, {"sha": "14daf81b430755cda020c104ec9da8a8cc138f2c", "filename": "src/ci/azure-pipelines/steps/install-clang.yml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-clang.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-clang.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-clang.yml?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -36,7 +36,7 @@ steps:\n     set -e\n     mkdir -p citools\n     cd citools\n-    curl -f https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/LLVM-7.0.0-win64.tar.gz | tar xzf -\n+    curl -f https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/LLVM-7.0.0-win64.tar.gz | tar xzf -\n     echo \"##vso[task.setvariable variable=RUST_CONFIGURE_ARGS]$RUST_CONFIGURE_ARGS --set llvm.clang-cl=`pwd`/clang-rust/bin/clang-cl.exe\"\n   condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq(variables['MINGW_URL'],''))\n   displayName: Install clang (Windows)"}, {"sha": "d4679c1c6733e50807df5f8c61dec675a15e031c", "filename": "src/ci/azure-pipelines/steps/install-sccache.yml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-sccache.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-sccache.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-sccache.yml?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -2,14 +2,14 @@ steps:\n \n - bash: |\n     set -e\n-    curl -fo /usr/local/bin/sccache https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2018-04-02-sccache-x86_64-apple-darwin\n+    curl -fo /usr/local/bin/sccache https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2018-04-02-sccache-x86_64-apple-darwin\n     chmod +x /usr/local/bin/sccache\n   displayName: Install sccache (OSX)\n   condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))\n \n - script: |\n     md sccache\n-    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf sccache\\sccache.exe https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2018-04-26-sccache-x86_64-pc-windows-msvc\"\n+    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf sccache\\sccache.exe https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2018-04-26-sccache-x86_64-pc-windows-msvc\"\n     echo ##vso[task.prependpath]%CD%\\sccache\n   displayName: Install sccache (Windows)\n   condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))"}, {"sha": "9aaeb4b79d63410ff36f91d64185ca4f6c6e5c75", "filename": "src/ci/azure-pipelines/steps/install-windows-build-deps.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fazure-pipelines%2Fsteps%2Finstall-windows-build-deps.yml?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -4,7 +4,7 @@ steps:\n # https://github.com/wixtoolset/wix3 originally\n - bash: |\n     set -e\n-    curl -O https://rust-lang-ci2.s3-us-west-1.amazonaws.com/rust-ci-mirror/wix311-binaries.zip\n+    curl -O https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/wix311-binaries.zip\n     echo \"##vso[task.setvariable variable=WIX]`pwd`/wix\"\n     mkdir -p wix/bin\n     cd wix/bin\n@@ -18,7 +18,7 @@ steps:\n # one is MSI installers and one is EXE, but they're not used so frequently at\n # this point anyway so perhaps it's a wash!\n - script: |\n-    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf is-install.exe https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2017-08-22-is.exe\"\n+    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf is-install.exe https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2017-08-22-is.exe\"\n     is-install.exe /VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-\n     echo ##vso[task.prependpath]C:\\Program Files (x86)\\Inno Setup 5\n   displayName: Install InnoSetup\n@@ -109,7 +109,7 @@ steps:\n # Note that this is originally from the github releases patch of Ninja\n - script: |\n     md ninja\n-    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf 2017-03-15-ninja-win.zip https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2017-03-15-ninja-win.zip\"\n+    powershell -Command \"$ProgressPreference = 'SilentlyContinue'; iwr -outf 2017-03-15-ninja-win.zip https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2017-03-15-ninja-win.zip\"\n     7z x -oninja 2017-03-15-ninja-win.zip\n     del 2017-03-15-ninja-win.zip\n     set RUST_CONFIGURE_ARGS=%RUST_CONFIGURE_ARGS% --enable-ninja"}, {"sha": "9493b33698708b08449d55d4b30ee3b54151c355", "filename": "src/ci/docker/armhf-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Farmhf-gnu%2FDockerfile?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -72,7 +72,7 @@ RUN arm-linux-gnueabihf-gcc addentropy.c -o rootfs/addentropy -static\n \n # TODO: What is this?!\n # Source of the file: https://github.com/vfdev-5/qemu-rpi2-vexpress/raw/master/vexpress-v2p-ca15-tc1.dtb\n-RUN curl -O https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/vexpress-v2p-ca15-tc1.dtb\n+RUN curl -O https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/vexpress-v2p-ca15-tc1.dtb\n \n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh"}, {"sha": "29cfb5d96083ef6eabbe39e400d2a939bc60590c", "filename": "src/ci/docker/dist-various-1/install-mips-musl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mips-musl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mips-musl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-1%2Finstall-mips-musl.sh?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -5,7 +5,7 @@ mkdir /usr/local/mips-linux-musl\n # originally from\n # https://downloads.openwrt.org/snapshots/trunk/ar71xx/generic/\n # OpenWrt-Toolchain-ar71xx-generic_gcc-5.3.0_musl-1.1.16.Linux-x86_64.tar.bz2\n-URL=\"https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\"\n+URL=\"https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\"\n FILE=\"OpenWrt-Toolchain-ar71xx-generic_gcc-5.3.0_musl-1.1.16.Linux-x86_64.tar.bz2\"\n curl -L \"$URL/$FILE\" | tar xjf - -C /usr/local/mips-linux-musl --strip-components=2\n "}, {"sha": "f04ee78157167104e53c37390677ae6dfa0af131", "filename": "src/ci/docker/dist-various-2/build-wasi-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-various-2%2Fbuild-wasi-toolchain.sh?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -5,7 +5,7 @@\n set -ex\n \n # Originally from https://releases.llvm.org/8.0.0/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz\n-curl https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/clang%2Bllvm-8.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz | \\\n+curl https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/clang%2Bllvm-8.0.0-x86_64-linux-gnu-ubuntu-14.04.tar.xz | \\\n   tar xJf -\n export PATH=`pwd`/clang+llvm-8.0.0-x86_64-linux-gnu-ubuntu-14.04/bin:$PATH\n "}, {"sha": "be8a6c93945e96f7d8c7323b4a917df15e3c8910", "filename": "src/ci/docker/dist-x86_64-linux/build-openssl.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2Fbuild-openssl.sh?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -4,7 +4,7 @@ set -ex\n source shared.sh\n \n VERSION=1.0.2k\n-URL=https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/openssl-$VERSION.tar.gz\n+URL=https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/openssl-$VERSION.tar.gz\n \n curl $URL | tar xzf -\n "}, {"sha": "797f674b954f2e54c272cb6b4b2a9bb3f512cc25", "filename": "src/ci/docker/dist-x86_64-netbsd/build-netbsd-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-netbsd%2Fbuild-netbsd-toolchain.sh?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -25,7 +25,7 @@ cd netbsd\n \n mkdir -p /x-tools/x86_64-unknown-netbsd/sysroot\n \n-URL=https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror\n+URL=https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc\n \n # Originally from ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-$BSD/source/sets/*.tgz\n curl $URL/2018-03-01-netbsd-src.tgz | tar xzf -"}, {"sha": "c9e2961f6eb156ca8de88dd6ee51aff71bc8ff8f", "filename": "src/ci/docker/scripts/android-sdk-manager.py", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk-manager.py", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk-manager.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fandroid-sdk-manager.py?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -23,8 +23,9 @@\n HOST_OS = \"linux\"\n \n # Mirroring options\n-MIRROR_BUCKET = \"rust-lang-ci2\"\n-MIRROR_BASE_DIR = \"rust-ci-mirror/android/\"\n+MIRROR_BUCKET = \"rust-lang-ci-mirrors\"\n+MIRROR_BUCKET_REGION = \"us-west-1\"\n+MIRROR_BASE_DIR = \"rustc/android/\"\n \n import argparse\n import hashlib\n@@ -144,7 +145,8 @@ def cli_install(args):\n     lockfile = Lockfile(args.lockfile)\n     for package in lockfile.packages.values():\n         # Download the file from the mirror into a temp file\n-        url = \"https://\" + MIRROR_BUCKET + \".s3.amazonaws.com/\" + MIRROR_BASE_DIR\n+        url = \"https://\" + MIRROR_BUCKET + \".s3-\" + MIRROR_BUCKET_REGION + \\\n+              \".amazonaws.com/\" + MIRROR_BASE_DIR\n         downloaded = package.download(url)\n         # Extract the file in a temporary directory\n         extract_dir = tempfile.mkdtemp()"}, {"sha": "70155e770a960281eb90668a7485b8a249889938", "filename": "src/ci/docker/scripts/freebsd-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Ffreebsd-toolchain.sh?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -59,7 +59,7 @@ done\n \n # Originally downloaded from:\n # https://download.freebsd.org/ftp/releases/${freebsd_arch}/${freebsd_version}-RELEASE/base.txz\n-URL=https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2019-04-04-freebsd-${freebsd_arch}-${freebsd_version}-RELEASE-base.txz\n+URL=https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2019-04-04-freebsd-${freebsd_arch}-${freebsd_version}-RELEASE-base.txz\n curl \"$URL\" | tar xJf - -C \"$sysroot\" --wildcards \"${files_to_extract[@]}\"\n \n # Fix up absolute symlinks from the system image.  This can be removed"}, {"sha": "efeb0ed0d72d0f9461f17a4f701039e2f4dee1d7", "filename": "src/ci/docker/scripts/sccache.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fsccache.sh?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -1,6 +1,6 @@\n set -ex\n \n curl -fo /usr/local/bin/sccache \\\n-  https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2018-04-02-sccache-x86_64-unknown-linux-musl\n+  https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2018-04-02-sccache-x86_64-unknown-linux-musl\n \n chmod +x /usr/local/bin/sccache"}, {"sha": "69c8d2e3099ab9bdf70e8dc8894495fe011b6d68", "filename": "src/ci/install-awscli.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Finstall-awscli.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Finstall-awscli.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Finstall-awscli.sh?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -16,7 +16,7 @@\n set -euo pipefail\n IFS=$'\\n\\t'\n \n-MIRROR=\"https://rust-lang-ci2.s3.amazonaws.com/rust-ci-mirror/2019-07-27-awscli.tar\"\n+MIRROR=\"https://rust-lang-ci-mirrors.s3-us-west-1.amazonaws.com/rustc/2019-07-27-awscli.tar\"\n DEPS_DIR=\"/tmp/awscli-deps\"\n \n pip=\"pip\""}, {"sha": "457ba9717120710623411d44e7d8afdca1831882", "filename": "src/ci/run.sh", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fci%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Frun.sh?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -78,6 +78,21 @@ if [ \"$RUST_RELEASE_CHANNEL\" = \"nightly\" ] || [ \"$DIST_REQUIRE_ALL_TOOLS\" = \"\" ]\n     RUST_CONFIGURE_ARGS=\"$RUST_CONFIGURE_ARGS --enable-missing-tools\"\n fi\n \n+# Print the date from the local machine and the date from an external source to\n+# check for clock drifts. An HTTP URL is used instead of HTTPS since on Azure\n+# Pipelines it happened that the certificates were marked as expired.\n+datecheck() {\n+  echo \"== clock drift check ==\"\n+  echo -n \"  local time: \"\n+  date\n+  echo -n \"  network time: \"\n+  curl -fs --head http://detectportal.firefox.com/success.txt | grep ^Date: \\\n+      | sed 's/Date: //g' || true\n+  echo \"== end clock drift check ==\"\n+}\n+datecheck\n+trap datecheck EXIT\n+\n # We've had problems in the past of shell scripts leaking fds into the sccache\n # server (#48192) which causes Cargo to erroneously think that a build script\n # hasn't finished yet. Try to solve that problem by starting a very long-lived"}, {"sha": "3d04f30e7bde54bf2c8e832bcd4cedb40688fbb8", "filename": "src/liballoc/collections/binary_heap.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbinary_heap.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -1163,6 +1163,9 @@ impl<T> FusedIterator for Drain<'_, T> {}\n \n #[stable(feature = \"binary_heap_extras_15\", since = \"1.5.0\")]\n impl<T: Ord> From<Vec<T>> for BinaryHeap<T> {\n+    /// Converts a `Vec<T>` into a `BinaryHeap<T>`.\n+    ///\n+    /// This conversion happens in-place, and has `O(n)` time complexity.\n     fn from(vec: Vec<T>) -> BinaryHeap<T> {\n         let mut heap = BinaryHeap { data: vec };\n         heap.rebuild();"}, {"sha": "4087333e2cf6dc39f530508663edf84af1b8d75a", "filename": "src/libcore/ascii.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibcore%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibcore%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fascii.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -14,6 +14,7 @@\n use crate::fmt;\n use crate::ops::Range;\n use crate::iter::FusedIterator;\n+use crate::str::from_utf8_unchecked;\n \n /// An iterator over the escaped version of a byte.\n ///\n@@ -22,6 +23,7 @@ use crate::iter::FusedIterator;\n ///\n /// [`escape_default`]: fn.escape_default.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[derive(Clone)]\n pub struct EscapeDefault {\n     range: Range<usize>,\n     data: [u8; 4],\n@@ -130,6 +132,13 @@ impl ExactSizeIterator for EscapeDefault {}\n #[stable(feature = \"fused\", since = \"1.26.0\")]\n impl FusedIterator for EscapeDefault {}\n \n+#[stable(feature = \"ascii_escape_display\", since = \"1.39.0\")]\n+impl fmt::Display for EscapeDefault {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.write_str(unsafe { from_utf8_unchecked(&self.data[self.range.clone()]) })\n+    }\n+}\n+\n #[stable(feature = \"std_debug\", since = \"1.16.0\")]\n impl fmt::Debug for EscapeDefault {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {"}, {"sha": "685540ba6fc26f0308881ad056fcb344140a8073", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -553,8 +553,6 @@ impl<H> PartialEq for BuildHasherDefault<H> {\n #[stable(since = \"1.29.0\", feature = \"build_hasher_eq\")]\n impl<H> Eq for BuildHasherDefault<H> {}\n \n-//////////////////////////////////////////////////////////////////////////////\n-\n mod impls {\n     use crate::mem;\n     use crate::slice;"}, {"sha": "fec17c4d1a4df7b111a5ab90b38cd6a956945868", "filename": "src/libcore/task/poll.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibcore%2Ftask%2Fpoll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibcore%2Ftask%2Fpoll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fpoll.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -81,6 +81,34 @@ impl<T, E> Poll<Result<T, E>> {\n     }\n }\n \n+impl<T, E> Poll<Option<Result<T, E>>> {\n+    /// Changes the success value of this `Poll` with the closure provided.\n+    #[unstable(feature = \"poll_map\", issue = \"63514\")]\n+    pub fn map_ok<U, F>(self, f: F) -> Poll<Option<Result<U, E>>>\n+        where F: FnOnce(T) -> U\n+    {\n+        match self {\n+            Poll::Ready(Some(Ok(t))) => Poll::Ready(Some(Ok(f(t)))),\n+            Poll::Ready(Some(Err(e))) => Poll::Ready(Some(Err(e))),\n+            Poll::Ready(None) => Poll::Ready(None),\n+            Poll::Pending => Poll::Pending,\n+        }\n+    }\n+\n+    /// Changes the error value of this `Poll` with the closure provided.\n+    #[unstable(feature = \"poll_map\", issue = \"63514\")]\n+    pub fn map_err<U, F>(self, f: F) -> Poll<Option<Result<T, U>>>\n+        where F: FnOnce(E) -> U\n+    {\n+        match self {\n+            Poll::Ready(Some(Ok(t))) => Poll::Ready(Some(Ok(t))),\n+            Poll::Ready(Some(Err(e))) => Poll::Ready(Some(Err(f(e)))),\n+            Poll::Ready(None) => Poll::Ready(None),\n+            Poll::Pending => Poll::Pending,\n+        }\n+    }\n+}\n+\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n impl<T> From<T> for Poll<T> {\n     fn from(t: T) -> Poll<T> {"}, {"sha": "a1f38d7dd1342912640151a219ffe7b6b7b0eea0", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 113, "deletions": 129, "changes": 242, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -136,7 +136,10 @@ pub struct LoweringContext<'a> {\n     /// When `is_collectin_in_band_lifetimes` is true, each lifetime is checked\n     /// against this list to see if it is already in-scope, or if a definition\n     /// needs to be created for it.\n-    in_scope_lifetimes: Vec<Ident>,\n+    ///\n+    /// We always store a `modern()` version of the param-name in this\n+    /// vector.\n+    in_scope_lifetimes: Vec<ParamName>,\n \n     current_module: NodeId,\n \n@@ -337,49 +340,6 @@ enum AnonymousLifetimeMode {\n \n     /// Pass responsibility to `resolve_lifetime` code for all cases.\n     PassThrough,\n-\n-    /// Used in the return types of `async fn` where there exists\n-    /// exactly one argument-position elided lifetime.\n-    ///\n-    /// In `async fn`, we lower the arguments types using the `CreateParameter`\n-    /// mode, meaning that non-`dyn` elided lifetimes are assigned a fresh name.\n-    /// If any corresponding elided lifetimes appear in the output, we need to\n-    /// replace them with references to the fresh name assigned to the corresponding\n-    /// elided lifetime in the arguments.\n-    ///\n-    /// For **Modern cases**, replace the anonymous parameter with a\n-    /// reference to a specific freshly-named lifetime that was\n-    /// introduced in argument\n-    ///\n-    /// For **Dyn Bound** cases, pass responsibility to\n-    /// `resole_lifetime` code.\n-    Replace(LtReplacement),\n-}\n-\n-/// The type of elided lifetime replacement to perform on `async fn` return types.\n-#[derive(Copy, Clone)]\n-enum LtReplacement {\n-    /// Fresh name introduced by the single non-dyn elided lifetime\n-    /// in the arguments of the async fn.\n-    Some(ParamName),\n-\n-    /// There is no single non-dyn elided lifetime because no lifetimes\n-    /// appeared in the arguments.\n-    NoLifetimes,\n-\n-    /// There is no single non-dyn elided lifetime because multiple\n-    /// lifetimes appeared in the arguments.\n-    MultipleLifetimes,\n-}\n-\n-/// Calculates the `LtReplacement` to use for elided lifetimes in the return\n-/// type based on the fresh elided lifetimes introduced in argument position.\n-fn get_elided_lt_replacement(arg_position_lifetimes: &[(Span, ParamName)]) -> LtReplacement {\n-    match arg_position_lifetimes {\n-        [] => LtReplacement::NoLifetimes,\n-        [(_span, param)] => LtReplacement::Some(*param),\n-        _ => LtReplacement::MultipleLifetimes,\n-    }\n }\n \n struct ImplTraitTypeIdVisitor<'a> { ids: &'a mut SmallVec<[NodeId; 1]> }\n@@ -865,7 +825,7 @@ impl<'a> LoweringContext<'a> {\n             return;\n         }\n \n-        if self.in_scope_lifetimes.contains(&ident.modern()) {\n+        if self.in_scope_lifetimes.contains(&ParamName::Plain(ident.modern())) {\n             return;\n         }\n \n@@ -899,7 +859,7 @@ impl<'a> LoweringContext<'a> {\n     {\n         let old_len = self.in_scope_lifetimes.len();\n         let lt_def_names = params.iter().filter_map(|param| match param.kind {\n-            GenericParamKind::Lifetime { .. } => Some(param.ident.modern()),\n+            GenericParamKind::Lifetime { .. } => Some(ParamName::Plain(param.ident.modern())),\n             _ => None,\n         });\n         self.in_scope_lifetimes.extend(lt_def_names);\n@@ -1953,8 +1913,7 @@ impl<'a> LoweringContext<'a> {\n                         err.emit();\n                     }\n                     AnonymousLifetimeMode::PassThrough |\n-                    AnonymousLifetimeMode::ReportError |\n-                    AnonymousLifetimeMode::Replace(_) => {\n+                    AnonymousLifetimeMode::ReportError => {\n                         self.sess.buffer_lint_with_diagnostic(\n                             ELIDED_LIFETIMES_IN_PATHS,\n                             CRATE_NODE_ID,\n@@ -2141,7 +2100,6 @@ impl<'a> LoweringContext<'a> {\n \n         // Remember how many lifetimes were already around so that we can\n         // only look at the lifetime parameters introduced by the arguments.\n-        let lifetime_count_before_args = self.lifetimes_to_define.len();\n         let inputs = self.with_anonymous_lifetime_mode(lt_mode, |this| {\n             decl.inputs\n                 .iter()\n@@ -2156,16 +2114,10 @@ impl<'a> LoweringContext<'a> {\n         });\n \n         let output = if let Some(ret_id) = make_ret_async {\n-            // Calculate the `LtReplacement` to use for any return-position elided\n-            // lifetimes based on the elided lifetime parameters introduced in the args.\n-            let lt_replacement = get_elided_lt_replacement(\n-                &self.lifetimes_to_define[lifetime_count_before_args..]\n-            );\n             self.lower_async_fn_ret_ty(\n                 &decl.output,\n                 in_band_ty_params.expect(\"`make_ret_async` but no `fn_def_id`\").0,\n                 ret_id,\n-                lt_replacement,\n             )\n         } else {\n             match decl.output {\n@@ -2230,7 +2182,6 @@ impl<'a> LoweringContext<'a> {\n         output: &FunctionRetTy,\n         fn_def_id: DefId,\n         opaque_ty_node_id: NodeId,\n-        elided_lt_replacement: LtReplacement,\n     ) -> hir::FunctionRetTy {\n         let span = output.span();\n \n@@ -2248,9 +2199,65 @@ impl<'a> LoweringContext<'a> {\n \n         self.allocate_hir_id_counter(opaque_ty_node_id);\n \n+        // When we create the opaque type for this async fn, it is going to have\n+        // to capture all the lifetimes involved in the signature (including in the\n+        // return type). This is done by introducing lifetime parameters for:\n+        //\n+        // - all the explicitly declared lifetimes from the impl and function itself;\n+        // - all the elided lifetimes in the fn arguments;\n+        // - all the elided lifetimes in the return type.\n+        //\n+        // So for example in this snippet:\n+        //\n+        // ```rust\n+        // impl<'a> Foo<'a> {\n+        //   async fn bar<'b>(&self, x: &'b Vec<f64>, y: &str) -> &u32 {\n+        //   //               ^ '0                       ^ '1     ^ '2\n+        //   // elided lifetimes used below\n+        //   }\n+        // }\n+        // ```\n+        //\n+        // we would create an opaque type like:\n+        //\n+        // ```\n+        // type Bar<'a, 'b, '0, '1, '2> = impl Future<Output = &'2 u32>;\n+        // ```\n+        //\n+        // and we would then desugar `bar` to the equivalent of:\n+        //\n+        // ```rust\n+        // impl<'a> Foo<'a> {\n+        //   fn bar<'b, '0, '1>(&'0 self, x: &'b Vec<f64>, y: &'1 str) -> Bar<'a, 'b, '0, '1, '_>\n+        // }\n+        // ```\n+        //\n+        // Note that the final parameter to `Bar` is `'_`, not `'2` --\n+        // this is because the elided lifetimes from the return type\n+        // should be figured out using the ordinary elision rules, and\n+        // this desugaring achieves that.\n+        //\n+        // The variable `input_lifetimes_count` tracks the number of\n+        // lifetime parameters to the opaque type *not counting* those\n+        // lifetimes elided in the return type. This includes those\n+        // that are explicitly declared (`in_scope_lifetimes`) and\n+        // those elided lifetimes we found in the arguments (current\n+        // content of `lifetimes_to_define`). Next, we will process\n+        // the return type, which will cause `lifetimes_to_define` to\n+        // grow.\n+        let input_lifetimes_count = self.in_scope_lifetimes.len() + self.lifetimes_to_define.len();\n+\n         let (opaque_ty_id, lifetime_params) = self.with_hir_id_owner(opaque_ty_node_id, |this| {\n+            // We have to be careful to get elision right here. The\n+            // idea is that we create a lifetime parameter for each\n+            // lifetime in the return type.  So, given a return type\n+            // like `async fn foo(..) -> &[&u32]`, we lower to `impl\n+            // Future<Output = &'1 [ &'2 u32 ]>`.\n+            //\n+            // Then, we will create `fn foo(..) -> Foo<'_, '_>`, and\n+            // hence the elision takes place at the fn site.\n             let future_bound = this.with_anonymous_lifetime_mode(\n-                AnonymousLifetimeMode::Replace(elided_lt_replacement),\n+                AnonymousLifetimeMode::CreateParameter,\n                 |this| this.lower_async_fn_output_type_to_future_bound(\n                     output,\n                     fn_def_id,\n@@ -2267,10 +2274,14 @@ impl<'a> LoweringContext<'a> {\n             let lifetime_params: Vec<(Span, ParamName)> =\n                 this.in_scope_lifetimes\n                     .iter().cloned()\n-                    .map(|ident| (ident.span, ParamName::Plain(ident)))\n+                    .map(|name| (name.ident().span, name))\n                     .chain(this.lifetimes_to_define.iter().cloned())\n                     .collect();\n \n+            debug!(\"lower_async_fn_ret_ty: in_scope_lifetimes={:#?}\", this.in_scope_lifetimes);\n+            debug!(\"lower_async_fn_ret_ty: lifetimes_to_define={:#?}\", this.lifetimes_to_define);\n+            debug!(\"lower_async_fn_ret_ty: lifetime_params={:#?}\", lifetime_params);\n+\n             let generic_params =\n                 lifetime_params\n                     .iter().cloned()\n@@ -2304,19 +2315,52 @@ impl<'a> LoweringContext<'a> {\n             (opaque_ty_id, lifetime_params)\n         });\n \n-        let generic_args =\n-            lifetime_params\n-                .iter().cloned()\n-                .map(|(span, hir_name)| {\n-                    GenericArg::Lifetime(hir::Lifetime {\n-                        hir_id: self.next_id(),\n-                        span,\n-                        name: hir::LifetimeName::Param(hir_name),\n-                    })\n+        // As documented above on the variable\n+        // `input_lifetimes_count`, we need to create the lifetime\n+        // arguments to our opaque type. Continuing with our example,\n+        // we're creating the type arguments for the return type:\n+        //\n+        // ```\n+        // Bar<'a, 'b, '0, '1, '_>\n+        // ```\n+        //\n+        // For the \"input\" lifetime parameters, we wish to create\n+        // references to the parameters themselves, including the\n+        // \"implicit\" ones created from parameter types (`'a`, `'b`,\n+        // '`0`, `'1`).\n+        //\n+        // For the \"output\" lifetime parameters, we just want to\n+        // generate `'_`.\n+        let mut generic_args: Vec<_> =\n+            lifetime_params[..input_lifetimes_count]\n+            .iter()\n+            .map(|&(span, hir_name)| {\n+                // Input lifetime like `'a` or `'1`:\n+                GenericArg::Lifetime(hir::Lifetime {\n+                    hir_id: self.next_id(),\n+                    span,\n+                    name: hir::LifetimeName::Param(hir_name),\n                 })\n-                .collect();\n+            })\n+            .collect();\n+        generic_args.extend(\n+            lifetime_params[input_lifetimes_count..]\n+            .iter()\n+            .map(|&(span, _)| {\n+                // Output lifetime like `'_`.\n+                GenericArg::Lifetime(hir::Lifetime {\n+                    hir_id: self.next_id(),\n+                    span,\n+                    name: hir::LifetimeName::Implicit,\n+                })\n+            })\n+        );\n \n-        let opaque_ty_ref = hir::TyKind::Def(hir::ItemId { id: opaque_ty_id }, generic_args);\n+        // Create the `Foo<...>` refernece itself. Note that the `type\n+        // Foo = impl Trait` is, internally, created as a child of the\n+        // async fn, so the *type parameters* are inherited.  It's\n+        // only the lifetime parameters that we must supply.\n+        let opaque_ty_ref = hir::TyKind::Def(hir::ItemId { id: opaque_ty_id }, generic_args.into());\n \n         hir::FunctionRetTy::Return(P(hir::Ty {\n             node: opaque_ty_ref,\n@@ -2412,11 +2456,6 @@ impl<'a> LoweringContext<'a> {\n                     }\n \n                     AnonymousLifetimeMode::ReportError => self.new_error_lifetime(Some(l.id), span),\n-\n-                    AnonymousLifetimeMode::Replace(replacement) => {\n-                        let hir_id = self.lower_node_id(l.id);\n-                        self.replace_elided_lifetime(hir_id, span, replacement)\n-                    }\n                 },\n             ident => {\n                 self.maybe_collect_in_band_lifetime(ident);\n@@ -2439,39 +2478,6 @@ impl<'a> LoweringContext<'a> {\n         }\n     }\n \n-    /// Replace a return-position elided lifetime with the elided lifetime\n-    /// from the arguments.\n-    fn replace_elided_lifetime(\n-        &mut self,\n-        hir_id: hir::HirId,\n-        span: Span,\n-        replacement: LtReplacement,\n-    ) -> hir::Lifetime {\n-        let multiple_or_none = match replacement {\n-            LtReplacement::Some(name) => {\n-                return hir::Lifetime {\n-                    hir_id,\n-                    span,\n-                    name: hir::LifetimeName::Param(name),\n-                };\n-            }\n-            LtReplacement::MultipleLifetimes => \"multiple\",\n-            LtReplacement::NoLifetimes => \"none\",\n-        };\n-\n-        let mut err = crate::middle::resolve_lifetime::report_missing_lifetime_specifiers(\n-            self.sess,\n-            span,\n-            1,\n-        );\n-        err.note(&format!(\n-            \"return-position elided lifetimes require exactly one \\\n-             input-position elided lifetime, found {}.\", multiple_or_none));\n-        err.emit();\n-\n-        hir::Lifetime { hir_id, span, name: hir::LifetimeName::Error }\n-    }\n-\n     fn lower_generic_params(\n         &mut self,\n         params: &[GenericParam],\n@@ -3174,10 +3180,6 @@ impl<'a> LoweringContext<'a> {\n             AnonymousLifetimeMode::ReportError => self.new_error_lifetime(None, span),\n \n             AnonymousLifetimeMode::PassThrough => self.new_implicit_lifetime(span),\n-\n-            AnonymousLifetimeMode::Replace(replacement) => {\n-                self.new_replacement_lifetime(replacement, span)\n-            }\n         }\n     }\n \n@@ -3231,10 +3233,6 @@ impl<'a> LoweringContext<'a> {\n             // This is the normal case.\n             AnonymousLifetimeMode::PassThrough => self.new_implicit_lifetime(span),\n \n-            AnonymousLifetimeMode::Replace(replacement) => {\n-                self.new_replacement_lifetime(replacement, span)\n-            }\n-\n             AnonymousLifetimeMode::ReportError => self.new_error_lifetime(None, span),\n         }\n     }\n@@ -3266,25 +3264,11 @@ impl<'a> LoweringContext<'a> {\n \n             // This is the normal case.\n             AnonymousLifetimeMode::PassThrough => {}\n-\n-            // We don't need to do any replacement here as this lifetime\n-            // doesn't refer to an elided lifetime elsewhere in the function\n-            // signature.\n-            AnonymousLifetimeMode::Replace(_) => {}\n         }\n \n         self.new_implicit_lifetime(span)\n     }\n \n-    fn new_replacement_lifetime(\n-        &mut self,\n-        replacement: LtReplacement,\n-        span: Span,\n-    ) -> hir::Lifetime {\n-        let hir_id = self.next_id();\n-        self.replace_elided_lifetime(hir_id, span, replacement)\n-    }\n-\n     fn new_implicit_lifetime(&mut self, span: Span) -> hir::Lifetime {\n         hir::Lifetime {\n             hir_id: self.next_id(),"}, {"sha": "dd95d99d4e1d6d6a1f35fcde9d3951f1f5766058", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -60,10 +60,12 @@ impl<'tcx, 'interner> Visitor<'tcx> for ItemLowerer<'tcx, 'interner> {\n     fn visit_item(&mut self, item: &'tcx Item) {\n         let mut item_hir_id = None;\n         self.lctx.with_hir_id_owner(item.id, |lctx| {\n-            if let Some(hir_item) = lctx.lower_item(item) {\n-                item_hir_id = Some(hir_item.hir_id);\n-                lctx.insert_item(hir_item);\n-            }\n+            lctx.without_in_scope_lifetime_defs(|lctx| {\n+                if let Some(hir_item) = lctx.lower_item(item) {\n+                    item_hir_id = Some(hir_item.hir_id);\n+                    lctx.insert_item(hir_item);\n+                }\n+            })\n         });\n \n         if let Some(hir_id) = item_hir_id {\n@@ -123,7 +125,7 @@ impl LoweringContext<'_> {\n             _ => &[],\n         };\n         let lt_def_names = parent_generics.iter().filter_map(|param| match param.kind {\n-            hir::GenericParamKind::Lifetime { .. } => Some(param.name.ident().modern()),\n+            hir::GenericParamKind::Lifetime { .. } => Some(param.name.modern()),\n             _ => None,\n         });\n         self.in_scope_lifetimes.extend(lt_def_names);\n@@ -134,6 +136,28 @@ impl LoweringContext<'_> {\n         res\n     }\n \n+    // Clears (and restores) the `in_scope_lifetimes` field. Used when\n+    // visiting nested items, which never inherit in-scope lifetimes\n+    // from their surrounding environment.\n+    fn without_in_scope_lifetime_defs<T>(\n+        &mut self,\n+        f: impl FnOnce(&mut LoweringContext<'_>) -> T,\n+    ) -> T {\n+        let old_in_scope_lifetimes = std::mem::replace(&mut self.in_scope_lifetimes, vec![]);\n+\n+        // this vector is only used when walking over impl headers,\n+        // input types, and the like, and should not be non-empty in\n+        // between items\n+        assert!(self.lifetimes_to_define.is_empty());\n+\n+        let res = f(self);\n+\n+        assert!(self.in_scope_lifetimes.is_empty());\n+        self.in_scope_lifetimes = old_in_scope_lifetimes;\n+\n+        res\n+    }\n+\n     pub(super) fn lower_mod(&mut self, m: &Mod) -> hir::Mod {\n         hir::Mod {\n             inner: m.inner,"}, {"sha": "e11ba75da9866237b10c4f37f41cd5fab765442e", "filename": "src/librustc_errors/diagnostic.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibrustc_errors%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibrustc_errors%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -120,6 +120,9 @@ impl Diagnostic {\n     }\n \n     /// Adds a span/label to be included in the resulting snippet.\n+    /// This label will be shown together with the original span/label used when creating the\n+    /// diagnostic, *not* a span added by one of the `span_*` methods.\n+    ///\n     /// This is pushed onto the `MultiSpan` that was created when the\n     /// diagnostic was first built. If you don't call this function at\n     /// all, and you just supplied a `Span` to create the diagnostic,\n@@ -196,6 +199,7 @@ impl Diagnostic {\n         self\n     }\n \n+    /// Prints the span with a note above it.\n     pub fn span_note<S: Into<MultiSpan>>(&mut self,\n                                          sp: S,\n                                          msg: &str)\n@@ -209,6 +213,7 @@ impl Diagnostic {\n         self\n     }\n \n+    /// Prints the span with a warn above it.\n     pub fn span_warn<S: Into<MultiSpan>>(&mut self,\n                                          sp: S,\n                                          msg: &str)\n@@ -222,6 +227,7 @@ impl Diagnostic {\n         self\n     }\n \n+    /// Prints the span with some help above it.\n     pub fn span_help<S: Into<MultiSpan>>(&mut self,\n                                          sp: S,\n                                          msg: &str)"}, {"sha": "52225ea8f024f2ac1d8fed47603398a188309a81", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -540,6 +540,12 @@ pub fn error_to_const_error<'mir, 'tcx>(\n     ConstEvalErr { error: error.kind, stacktrace, span: ecx.tcx.span }\n }\n \n+pub fn note_on_undefined_behavior_error() -> &'static str {\n+    \"The rules on what exactly is undefined behavior aren't clear, \\\n+    so this check might be overzealous. Please open an issue on the rust compiler \\\n+    repository if you believe it should not be considered undefined behavior\"\n+}\n+\n fn validate_and_turn_into_const<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     constant: RawConst<'tcx>,\n@@ -579,10 +585,7 @@ fn validate_and_turn_into_const<'tcx>(\n         let err = error_to_const_error(&ecx, error);\n         match err.struct_error(ecx.tcx, \"it is undefined behavior to use this value\") {\n             Ok(mut diag) => {\n-                diag.note(\"The rules on what exactly is undefined behavior aren't clear, \\\n-                    so this check might be overzealous. Please open an issue on the rust compiler \\\n-                    repository if you believe it should not be considered undefined behavior\",\n-                );\n+                diag.note(note_on_undefined_behavior_error());\n                 diag.emit();\n                 ErrorHandled::Reported\n             }"}, {"sha": "32ba70a81c99792cedd200c305dff2d8623e42ec", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -296,11 +296,7 @@ pub fn intern_const_alloc_recursive(\n                 let err = crate::const_eval::error_to_const_error(&ecx, error);\n                 match err.struct_error(ecx.tcx, \"it is undefined behavior to use this value\") {\n                     Ok(mut diag) => {\n-                        diag.note(\"The rules on what exactly is undefined behavior aren't clear, \\\n-                            so this check might be overzealous. Please open an issue on the rust \\\n-                            compiler repository if you believe it should not be considered \\\n-                            undefined behavior\",\n-                        );\n+                        diag.note(crate::const_eval::note_on_undefined_behavior_error());\n                         diag.emit();\n                     }\n                     Err(ErrorHandled::TooGeneric) |"}, {"sha": "14fc0d6347e4bd8bfbf907ff820c9c8029da870a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 83, "deletions": 1, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -1325,12 +1325,94 @@ fn check_union(tcx: TyCtxt<'_>, id: hir::HirId, span: Span) {\n     check_packed(tcx, span, def_id);\n }\n \n+/// Checks that an opaque type does not contain cycles and does not use `Self` or `T::Foo`\n+/// projections that would result in \"inheriting lifetimes\".\n fn check_opaque<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n     substs: SubstsRef<'tcx>,\n     span: Span,\n-    origin: &hir::OpaqueTyOrigin\n+    origin: &hir::OpaqueTyOrigin,\n+) {\n+    check_opaque_for_inheriting_lifetimes(tcx, def_id, span);\n+    check_opaque_for_cycles(tcx, def_id, substs, span, origin);\n+}\n+\n+/// Checks that an opaque type does not use `Self` or `T::Foo` projections that would result\n+/// in \"inheriting lifetimes\".\n+fn check_opaque_for_inheriting_lifetimes(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    span: Span,\n+) {\n+    let item = tcx.hir().expect_item(\n+        tcx.hir().as_local_hir_id(def_id).expect(\"opaque type is not local\"));\n+    debug!(\"check_opaque_for_inheriting_lifetimes: def_id={:?} span={:?} item={:?}\",\n+           def_id, span, item);\n+\n+    #[derive(Debug)]\n+    struct ProhibitOpaqueVisitor<'tcx> {\n+        opaque_identity_ty: Ty<'tcx>,\n+        generics: &'tcx ty::Generics,\n+    };\n+\n+    impl<'tcx> ty::fold::TypeVisitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n+        fn visit_ty(&mut self, t: Ty<'tcx>) -> bool {\n+            debug!(\"check_opaque_for_inheriting_lifetimes: (visit_ty) t={:?}\", t);\n+            if t == self.opaque_identity_ty { false } else { t.super_visit_with(self) }\n+        }\n+\n+        fn visit_region(&mut self, r: ty::Region<'tcx>) -> bool {\n+            debug!(\"check_opaque_for_inheriting_lifetimes: (visit_region) r={:?}\", r);\n+            if let RegionKind::ReEarlyBound(ty::EarlyBoundRegion { index, .. }) = r {\n+                return *index < self.generics.parent_count as u32;\n+            }\n+\n+            r.super_visit_with(self)\n+        }\n+    }\n+\n+    let prohibit_opaque = match item.node {\n+        ItemKind::OpaqueTy(hir::OpaqueTy { origin: hir::OpaqueTyOrigin::AsyncFn, .. }) |\n+        ItemKind::OpaqueTy(hir::OpaqueTy { origin: hir::OpaqueTyOrigin::FnReturn, .. }) => {\n+            let mut visitor = ProhibitOpaqueVisitor {\n+                opaque_identity_ty: tcx.mk_opaque(\n+                    def_id, InternalSubsts::identity_for_item(tcx, def_id)),\n+                generics: tcx.generics_of(def_id),\n+            };\n+            debug!(\"check_opaque_for_inheriting_lifetimes: visitor={:?}\", visitor);\n+\n+            tcx.predicates_of(def_id).predicates.iter().any(\n+                |(predicate, _)| predicate.visit_with(&mut visitor))\n+        },\n+        _ => false,\n+    };\n+\n+    debug!(\"check_opaque_for_inheriting_lifetimes: prohibit_opaque={:?}\", prohibit_opaque);\n+    if prohibit_opaque {\n+        let is_async = match item.node {\n+            ItemKind::OpaqueTy(hir::OpaqueTy { origin, .. }) => match origin {\n+                hir::OpaqueTyOrigin::AsyncFn => true,\n+                _ => false,\n+            },\n+            _ => unreachable!(),\n+        };\n+\n+        tcx.sess.span_err(span, &format!(\n+            \"`{}` return type cannot contain a projection or `Self` that references lifetimes from \\\n+             a parent scope\",\n+            if is_async { \"async fn\" } else { \"impl Trait\" },\n+        ));\n+    }\n+}\n+\n+/// Checks that an opaque type does not contain cycles.\n+fn check_opaque_for_cycles<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: DefId,\n+    substs: SubstsRef<'tcx>,\n+    span: Span,\n+    origin: &hir::OpaqueTyOrigin,\n ) {\n     if let Err(partially_expanded_type) = tcx.try_expand_impl_trait_type(def_id, substs) {\n         if let hir::OpaqueTyOrigin::AsyncFn = origin {"}, {"sha": "2286e74e63304e67487fe5466a147f0171f05a7b", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -1236,7 +1236,7 @@ impl<'a> Parser<'a> {\n \n         let args: Vec<_> = args.into_iter().filter_map(|x| x).collect();\n \n-        if c_variadic && args.is_empty() {\n+        if c_variadic && args.len() <= 1 {\n             self.span_err(sp,\n                           \"C-variadic function must be declared with at least one named argument\");\n         }"}, {"sha": "5376ac2eeee61ec9a75794f5167e426199b5a470", "filename": "src/libsyntax/parse/parser/expr.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fexpr.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -224,6 +224,10 @@ impl<'a> Parser<'a> {\n                 self.err_dotdotdot_syntax(self.token.span);\n             }\n \n+            if self.token == token::LArrow {\n+                self.err_larrow_operator(self.token.span);\n+            }\n+\n             self.bump();\n             if op.is_comparison() {\n                 self.check_no_chained_comparison(&lhs, &op);\n@@ -1199,7 +1203,7 @@ impl<'a> Parser<'a> {\n         if self.eat_keyword(kw::Else) || !cond.returns() {\n             let sp = self.sess.source_map().next_point(lo);\n             let mut err = self.diagnostic()\n-                .struct_span_err(sp, \"missing condition for `if` statemement\");\n+                .struct_span_err(sp, \"missing condition for `if` expression\");\n             err.span_label(sp, \"expected if condition here\");\n             return Err(err)\n         }\n@@ -1702,6 +1706,19 @@ impl<'a> Parser<'a> {\n             .emit();\n     }\n \n+    fn err_larrow_operator(&self, span: Span) {\n+        self.struct_span_err(\n+            span,\n+            \"unexpected token: `<-`\"\n+        ).span_suggestion(\n+            span,\n+            \"if you meant to write a comparison against a negative value, add a \\\n+             space in between `<` and `-`\",\n+            \"< -\".to_string(),\n+            Applicability::MaybeIncorrect\n+        ).emit();\n+    }\n+\n     fn mk_assign_op(&self, binop: BinOp, lhs: P<Expr>, rhs: P<Expr>) -> ExprKind {\n         ExprKind::AssignOp(binop, lhs, rhs)\n     }"}, {"sha": "74cab00d3c1ebd67b225ca81038b0798e6a87cc3", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -519,7 +519,7 @@ impl SourceMap {\n     /// extract function takes three arguments: a string slice containing the source, an index in\n     /// the slice for the beginning of the span and an index in the slice for the end of the span.\n     fn span_to_source<F>(&self, sp: Span, extract_source: F) -> Result<String, SpanSnippetError>\n-        where F: Fn(&str, usize, usize) -> String\n+        where F: Fn(&str, usize, usize) -> Result<String, SpanSnippetError>\n     {\n         if sp.lo() > sp.hi() {\n             return Err(SpanSnippetError::IllFormedSpan(sp));\n@@ -554,9 +554,9 @@ impl SourceMap {\n             }\n \n             if let Some(ref src) = local_begin.sf.src {\n-                return Ok(extract_source(src, start_index, end_index));\n+                return extract_source(src, start_index, end_index);\n             } else if let Some(src) = local_begin.sf.external_src.borrow().get_source() {\n-                return Ok(extract_source(src, start_index, end_index));\n+                return extract_source(src, start_index, end_index);\n             } else {\n                 return Err(SpanSnippetError::SourceNotAvailable {\n                     filename: local_begin.sf.name.clone()\n@@ -567,8 +567,9 @@ impl SourceMap {\n \n     /// Returns the source snippet as `String` corresponding to the given `Span`\n     pub fn span_to_snippet(&self, sp: Span) -> Result<String, SpanSnippetError> {\n-        self.span_to_source(sp, |src, start_index, end_index| src[start_index..end_index]\n-                                                                .to_string())\n+        self.span_to_source(sp, |src, start_index, end_index| src.get(start_index..end_index)\n+            .map(|s| s.to_string())\n+            .ok_or_else(|| SpanSnippetError::IllFormedSpan(sp)))\n     }\n \n     pub fn span_to_margin(&self, sp: Span) -> Option<usize> {\n@@ -582,7 +583,9 @@ impl SourceMap {\n \n     /// Returns the source snippet as `String` before the given `Span`\n     pub fn span_to_prev_source(&self, sp: Span) -> Result<String, SpanSnippetError> {\n-        self.span_to_source(sp, |src, start_index, _| src[..start_index].to_string())\n+        self.span_to_source(sp, |src, start_index, _| src.get(..start_index)\n+            .map(|s| s.to_string())\n+            .ok_or_else(|| SpanSnippetError::IllFormedSpan(sp)))\n     }\n \n     /// Extend the given `Span` to just after the previous occurrence of `c`. Return the same span"}, {"sha": "a501541c95909c5e37158602ab222744f477cbcf", "filename": "src/libsyntax/util/parser.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibsyntax%2Futil%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Flibsyntax%2Futil%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Fparser.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -97,6 +97,8 @@ impl AssocOp {\n             // DotDotDot is no longer supported, but we need some way to display the error\n             token::DotDotDot => Some(DotDotEq),\n             token::Colon => Some(Colon),\n+            // `<-` should probably be `< -`\n+            token::LArrow => Some(Less),\n             _ if t.is_keyword(kw::As) => Some(As),\n             _ => None\n         }"}, {"sha": "1cbc5133a07e6ba016566af55fb3f6af503e6990", "filename": "src/test/ui/async-await/async-fn-elided-impl-lifetime-parameter.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-elided-impl-lifetime-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-elided-impl-lifetime-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-fn-elided-impl-lifetime-parameter.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,17 @@\n+// Check that `async fn` inside of an impl with `'_`\n+// in the header compiles correctly.\n+//\n+// Regression test for #63500.\n+//\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+struct Foo<'a>(&'a u8);\n+\n+impl Foo<'_> {\n+    async fn bar() {}\n+}\n+\n+fn main() { }"}, {"sha": "c5a66d5d4a312fe66d917c65a4958147b99458f3", "filename": "src/test/ui/async-await/issue-61949-self-return-type.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,28 @@\n+// ignore-tidy-linelength\n+// edition:2018\n+#![feature(async_await)]\n+\n+// This test checks that `Self` is prohibited as a return type. See #61949 for context.\n+\n+pub struct Foo<'a> {\n+    pub bar: &'a i32,\n+}\n+\n+impl<'a> Foo<'a> {\n+    pub async fn new(_bar: &'a i32) -> Self {\n+    //~^ ERROR `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+        Foo {\n+            bar: &22\n+        }\n+    }\n+}\n+\n+async fn foo() {\n+    let x = {\n+        let bar = 22;\n+        Foo::new(&bar).await\n+    };\n+    drop(x);\n+}\n+\n+fn main() { }"}, {"sha": "a9ae544502d087c15c794039db0da4736811dd49", "filename": "src/test/ui/async-await/issue-61949-self-return-type.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-61949-self-return-type.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,8 @@\n+error: `async fn` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+  --> $DIR/issue-61949-self-return-type.rs:12:40\n+   |\n+LL |     pub async fn new(_bar: &'a i32) -> Self {\n+   |                                        ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "fab5892dae18387c816b58bbd7fc9758e28736f2", "filename": "src/test/ui/async-await/issues/issue-63388-1.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.nll.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,24 @@\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/issue-63388-1.rs:14:10\n+   |\n+LL |     ) -> &dyn Foo\n+   |          ^^^^^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#27r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-63388-1.rs:15:5\n+   |\n+LL |       async fn do_sth<'a>(\n+   |                       -- lifetime `'a` defined here\n+LL |           &'a self, foo: &dyn Foo\n+   |                          - lifetime `'_` defined here\n+LL |       ) -> &dyn Foo\n+LL | /     {\n+LL | |         foo\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'_`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "80003b0d701f592fbb9542991456862e5853c6fd", "filename": "src/test/ui/async-await/issues/issue-63388-1.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,20 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+struct Xyz {\n+    a: u64,\n+}\n+\n+trait Foo {}\n+\n+impl Xyz {\n+    async fn do_sth<'a>(\n+        &'a self, foo: &dyn Foo\n+    ) -> &dyn Foo //~ ERROR lifetime mismatch\n+    {\n+        foo\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5302adce5a01e3cbe2413ba1cdebba9d9836d306", "filename": "src/test/ui/async-await/issues/issue-63388-1.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-1.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,12 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/issue-63388-1.rs:14:10\n+   |\n+LL |         &'a self, foo: &dyn Foo\n+   |         -------- this parameter and the return type are declared with different lifetimes...\n+LL |     ) -> &dyn Foo\n+   |          ^^^^^^^^\n+   |          |\n+   |          ...but data from `foo` is returned here\n+\n+error: aborting due to previous error\n+"}, {"sha": "b91cdc1b770fba29e31243c53aef0bb2bac1719c", "filename": "src/test/ui/async-await/issues/issue-63388-2.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.nll.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,11 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-63388-2.rs:14:10\n+   |\n+LL |     ) -> &dyn Foo\n+   |          ^ help: consider using the named lifetime: `&'a`\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `foo` or `bar`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "ca9bbef0d503d3d239ceefed134113aed5f62d83", "filename": "src/test/ui/async-await/issues/issue-63388-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,20 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+struct Xyz {\n+    a: u64,\n+}\n+\n+trait Foo {}\n+\n+impl Xyz {\n+    async fn do_sth<'a>(\n+        foo: &dyn Foo, bar: &'a dyn Foo //~ ERROR cannot infer\n+    ) -> &dyn Foo //~ ERROR missing lifetime specifier\n+    {\n+        foo\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "1810138dc80e08fac10b942043146f7636b9df6c", "filename": "src/test/ui/async-await/issues/issue-63388-2.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-2.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,29 @@\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/issue-63388-2.rs:14:10\n+   |\n+LL |     ) -> &dyn Foo\n+   |          ^ help: consider using the named lifetime: `&'a`\n+   |\n+   = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `foo` or `bar`\n+\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/issue-63388-2.rs:13:9\n+   |\n+LL |         foo: &dyn Foo, bar: &'a dyn Foo\n+   |         ^^^ ...but this borrow...\n+LL |     ) -> &dyn Foo\n+   |          -------- this return type evaluates to the `'static` lifetime...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 13:14\n+  --> $DIR/issue-63388-2.rs:13:14\n+   |\n+LL |         foo: &dyn Foo, bar: &'a dyn Foo\n+   |              ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 13:14\n+   |\n+LL |     ) -> &dyn Foo + '_\n+   |          ^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0106`."}, {"sha": "05f23f95965b993e0b1a14be4fdd3d4864b9d38c", "filename": "src/test/ui/async-await/issues/issue-63388-3.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-3.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,19 @@\n+// edition:2018\n+// check-pass\n+\n+#![feature(async_await)]\n+\n+struct Xyz {\n+    a: u64,\n+}\n+\n+trait Foo {}\n+\n+impl Xyz {\n+    async fn do_sth(\n+        &self, foo: &dyn Foo\n+    ) {\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0939242d7fc7a27aedec3308bf73297c2b9cdd6e", "filename": "src/test/ui/async-await/issues/issue-63388-4.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-63388-4.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+struct A;\n+\n+impl A {\n+    async fn foo(&self, f: &u32) -> &A { self }\n+}\n+\n+fn main() { }"}, {"sha": "3c82160595f1dfda847cd6cd0c10008213950690", "filename": "src/test/ui/async-await/nested-in-impl.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fnested-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fasync-await%2Fnested-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fnested-in-impl.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,17 @@\n+// Test that async fn works when nested inside of\n+// impls with lifetime parameters.\n+//\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+struct Foo<'a>(&'a ());\n+\n+impl<'a> Foo<'a> {\n+    fn test() {\n+        async fn test() {}\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "e3b642a9d418d0ac4cceb285ac84e032d4fb9e4d", "filename": "src/test/ui/c-variadic/variadic-ffi-no-fixed-args.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-no-fixed-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-no-fixed-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-no-fixed-args.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,6 @@\n+extern {\n+    fn foo(...);\n+    //~^ ERROR C-variadic function must be declared with at least one named argument\n+}\n+\n+fn main() {}"}, {"sha": "cb6060525fc0d17a6d9bb82dc0843912b3e70c51", "filename": "src/test/ui/c-variadic/variadic-ffi-no-fixed-args.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-no-fixed-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-no-fixed-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fc-variadic%2Fvariadic-ffi-no-fixed-args.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,8 @@\n+error: C-variadic function must be declared with at least one named argument\n+  --> $DIR/variadic-ffi-no-fixed-args.rs:2:11\n+   |\n+LL |     fn foo(...);\n+   |           ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "9ba7c91fc7201d6834e86bf139905ebd8aa479cd", "filename": "src/test/ui/impl-trait/bound-normalization-fail.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -1,4 +1,5 @@\n // compile-fail\n+// ignore-tidy-linelength\n // edition:2018\n \n #![feature(async_await)]\n@@ -44,7 +45,8 @@ mod lifetimes {\n \n     /// Missing bound constraining `Assoc`, `T::Assoc` can't be normalized further.\n     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n-        //~^ ERROR: type mismatch\n+    //~^ ERROR: type mismatch\n+    //~^^ ERROR `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n         Foo(())\n     }\n }"}, {"sha": "b5c8e078f0f131092ae5a7084f02b3117fa8cccf", "filename": "src/test/ui/impl-trait/bound-normalization-fail.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fbound-normalization-fail.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -1,13 +1,13 @@\n warning: the feature `impl_trait_in_bindings` is incomplete and may cause the compiler to crash\n-  --> $DIR/bound-normalization-fail.rs:5:12\n+  --> $DIR/bound-normalization-fail.rs:6:12\n    |\n LL | #![feature(impl_trait_in_bindings)]\n    |            ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as impl_trait::Trait>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:29:32\n+  --> $DIR/bound-normalization-fail.rs:30:32\n    |\n LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n@@ -16,8 +16,14 @@ LL |     fn foo_fail<T: Trait>() -> impl FooLike<Output=T::Assoc> {\n               found type `<T as impl_trait::Trait>::Assoc`\n    = note: the return type of a function must have a statically known size\n \n+error: `impl Trait` return type cannot contain a projection or `Self` that references lifetimes from a parent scope\n+  --> $DIR/bound-normalization-fail.rs:47:41\n+   |\n+LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n+   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n error[E0271]: type mismatch resolving `<Foo<()> as FooLike>::Output == <T as lifetimes::Trait<'static>>::Assoc`\n-  --> $DIR/bound-normalization-fail.rs:46:41\n+  --> $DIR/bound-normalization-fail.rs:47:41\n    |\n LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found associated type\n@@ -26,6 +32,6 @@ LL |     fn foo2_fail<'a, T: Trait<'a>>() -> impl FooLike<Output=T::Assoc> {\n               found type `<T as lifetimes::Trait<'static>>::Assoc`\n    = note: the return type of a function must have a statically known size\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0271`."}, {"sha": "7de20712fba94c20196260a61e0f27124c6cb420", "filename": "src/test/ui/in-band-lifetimes/nested-items.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fnested-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fnested-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fnested-items.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,20 @@\n+// Test that the `'a` from the impl doesn't\n+// prevent us from creating a `'a` parameter\n+// on the `blah` function.\n+//\n+// check-pass\n+\n+#![feature(in_band_lifetimes)]\n+\n+struct Foo<'a> {\n+    x: &'a u32\n+\n+}\n+\n+impl Foo<'a> {\n+    fn method(&self) {\n+        fn blah(f: Foo<'a>) { }\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "df9f1dd0115dbe1a95c4190c7e3a9296000014ca", "filename": "src/test/ui/issues/issue-13483.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fissues%2Fissue-13483.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fissues%2Fissue-13483.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-13483.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -1,10 +1,10 @@\n-error: missing condition for `if` statemement\n+error: missing condition for `if` expression\n   --> $DIR/issue-13483.rs:3:14\n    |\n LL |     } else if {\n    |              ^ expected if condition here\n \n-error: missing condition for `if` statemement\n+error: missing condition for `if` expression\n   --> $DIR/issue-13483.rs:10:14\n    |\n LL |     } else if {"}, {"sha": "a491bb21a57a031a6e26fd0d7fee5b177709380c", "filename": "src/test/ui/obsolete-in-place/bad.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -2,7 +2,7 @@\n \n fn foo() {\n     let (x, y) = (0, 0);\n-    x <- y; //~ ERROR expected one of\n+    x <- y; //~ ERROR unexpected token: `<-`\n }\n \n fn main() {"}, {"sha": "8a731b6240b2f16b14f51205e8524758e4c6003e", "filename": "src/test/ui/obsolete-in-place/bad.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobsolete-in-place%2Fbad.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -1,8 +1,12 @@\n-error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `<-`\n+error: unexpected token: `<-`\n   --> $DIR/bad.rs:5:7\n    |\n LL |     x <- y;\n-   |       ^^ expected one of 8 possible tokens here\n+   |       ^^\n+help: if you meant to write a comparison against a negative value, add a space in between `<` and `-`\n+   |\n+LL |     x < - y;\n+   |       ^^^\n \n error: expected expression, found keyword `in`\n   --> $DIR/bad.rs:10:5"}, {"sha": "4df96dedbd45be137032e094308cf3c5334ac741", "filename": "src/test/ui/placement-syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fplacement-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fplacement-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fplacement-syntax.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     let x = -5;\n-    if x<-1 { //~ ERROR expected `{`, found `<-`\n+    if x<-1 { //~ ERROR unexpected token: `<-`\n         println!(\"ok\");\n     }\n }"}, {"sha": "e26931e60d88fffbeae2022a04fcd5df59953976", "filename": "src/test/ui/placement-syntax.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fplacement-syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fplacement-syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fplacement-syntax.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -1,10 +1,12 @@\n-error: expected `{`, found `<-`\n+error: unexpected token: `<-`\n   --> $DIR/placement-syntax.rs:3:9\n    |\n LL |     if x<-1 {\n-   |     --  ^^ expected `{`\n-   |     |\n-   |     this `if` statement has a condition, but no block\n+   |         ^^\n+help: if you meant to write a comparison against a negative value, add a space in between `<` and `-`\n+   |\n+LL |     if x< -1 {\n+   |         ^^^\n \n error: aborting due to previous error\n "}, {"sha": "b853f88a96dde3222382c236e4874193516d614b", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime-async.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,37 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+use std::pin::Pin;\n+use std::task::{Context, Poll};\n+\n+struct Foo;\n+\n+impl Foo {\n+    async fn pin_ref(self: Pin<&Self>) -> Pin<&Self> { self }\n+\n+    async fn pin_mut(self: Pin<&mut Self>) -> Pin<&mut Self> { self }\n+\n+    async fn pin_pin_pin_ref(self: Pin<Pin<Pin<&Self>>>) -> Pin<Pin<Pin<&Self>>> { self }\n+\n+    async fn pin_ref_impl_trait(self: Pin<&Self>) -> impl Clone + '_ { self }\n+\n+    fn b(self: Pin<&Foo>, f: &Foo) -> Pin<&Foo> { self }\n+}\n+\n+type Alias<T> = Pin<T>;\n+impl Foo {\n+    async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> Alias<&Self> { self }\n+}\n+\n+// FIXME(Centril): extend with the rest of the non-`async fn` test\n+// when we allow `async fn`s inside traits and trait implementations.\n+\n+fn main() {\n+    let mut foo = Foo;\n+    { Pin::new(&foo).pin_ref() };\n+    { Pin::new(&mut foo).pin_mut() };\n+    { Pin::new(Pin::new(Pin::new(&foo))).pin_pin_pin_ref() };\n+    { Pin::new(&foo).pin_ref_impl_trait() };\n+}"}, {"sha": "2421632c664c1679cb5e586684323d2f66611053", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.nll.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,14 @@\n+error: lifetime may not live long enough\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:48\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |                          -                     ^^^^^^^^ returning this value requires that `'_` must outlive `'static`\n+   |                          |\n+   |                          lifetime `'_` defined here\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'_`, add `'_` as a constraint\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n+   |                                     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "aecb82325c1f200c9d5ad9e3f2cd772c44d05437", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+use std::pin::Pin;\n+\n+struct Foo;\n+\n+impl Foo {\n+    async fn f(self: Pin<&Self>) -> impl Clone { self }\n+    //~^ ERROR cannot infer an appropriate lifetime\n+}\n+\n+fn main() {\n+    { Pin::new(&Foo).f() };\n+}"}, {"sha": "f0032449db14e0a5bbc1755dd7b08f3c9aff2ca5", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,20 @@\n+error: cannot infer an appropriate lifetime\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:16\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |                ^^^^                 ---------- this return type evaluates to the `'static` lifetime...\n+   |                |\n+   |                ...but this borrow...\n+   |\n+note: ...can't outlive the lifetime '_ as defined on the method body at 10:26\n+  --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:10:26\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n+   |                          ^\n+help: you can add a constraint to the return type to make it last less than `'static` and match the lifetime '_ as defined on the method body at 10:26\n+   |\n+LL |     async fn f(self: Pin<&Self>) -> impl Clone + '_ { self }\n+   |                                     ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "94646c2cfe0c3468a66e6654aefef0583153cc0d", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.nll.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,46 @@\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:45\n+   |\n+LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+   |                                             ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:50\n+   |\n+LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+   |                          -                       ^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |                          |\n+   |                          lifetime `'_` defined here\n+   |                          lifetime `'_` defined here\n+\n+error: lifetime may not live long enough\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:13:73\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                          -                                              ^^^^^^^^^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+   |                          |\n+   |                          lifetime `'_` defined here\n+   |                          lifetime `'_` defined here\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:58\n+   |\n+LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n+   |                                                          ^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:62\n+   |\n+LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n+   |                  --              -                           ^^^^^^^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'a`\n+   |                  |               |\n+   |                  |               lifetime `'_` defined here\n+   |                  lifetime `'a` defined here\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "53ab75ee16bd0d1803f322ec7a55f6f5e63718c6", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,22 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+use std::pin::Pin;\n+\n+struct Foo;\n+\n+impl Foo {\n+    async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+    //~^ ERROR lifetime mismatch\n+\n+    async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+    //~^ ERROR lifetime mismatch\n+}\n+\n+type Alias<T> = Pin<T>;\n+impl Foo {\n+    async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg } //~ ERROR E0623\n+}\n+\n+fn main() {}"}, {"sha": "74fc4741349492fb92bbfa5644e7574520eceb9a", "filename": "src/test/ui/self/arbitrary_self_types_pin_lifetime_mismatch-async.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_mismatch-async.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,29 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:10:45\n+   |\n+LL |     async fn a(self: Pin<&Foo>, f: &Foo) -> &Foo { f }\n+   |                          ----               ^^^^\n+   |                          |                  |\n+   |                          |                  ...but data from `f` is returned here\n+   |                          this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:13:55\n+   |\n+LL |     async fn c(self: Pin<&Self>, f: &Foo, g: &Foo) -> (Pin<&Foo>, &Foo) { (self, f) }\n+   |                          -----                        ^^^^^^^^^^^^^^^^^\n+   |                          |                            |\n+   |                          |                            ...but data from `f` is returned here\n+   |                          this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/arbitrary_self_types_pin_lifetime_mismatch-async.rs:19:58\n+   |\n+LL |     async fn bar<'a>(self: Alias<&Self>, arg: &'a ()) -> &() { arg }\n+   |                                  -----                   ^^^\n+   |                                  |                       |\n+   |                                  |                       ...but data from `arg` is returned here\n+   |                                  this parameter and the return type are declared with different lifetimes...\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "3bd7a6c00b2ad97ef13b7d40d7f33527ce6281eb", "filename": "src/test/ui/self/elision/README.md", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2FREADME.md?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -42,3 +42,34 @@ In each case, we test the following patterns:\n - `self: Box<Pin<XXX>>`\n \n In the non-reference cases, `Pin` causes errors so we substitute `Rc`.\n+\n+### `async fn`\n+\n+For each of the tests above we also check that `async fn` behaves as an `fn` would.\n+These tests are in files named `*-async.rs`.\n+\n+Legends:\n+- \u2713 \u27f9 Yes / Pass\n+- X \u27f9 No\n+- \u03b1 \u27f9 lifetime mismatch\n+- \u03b2 \u27f9 cannot infer an appropriate lifetime\n+- \u03b3 \u27f9 missing lifetime specifier\n+\n+| `async` file | Pass? | Conforms to `fn`? | How does it diverge? <br/> `fn` \u27f6 `async fn` |\n+| --- | --- | --- | --- |\n+| `self-async.rs` | \u2713 | \u2713 | N/A |\n+| `struct-async.rs`| \u2713 | \u2713 | N/A |\n+| `alias-async.rs`| \u2713 | \u2713 | N/A |\n+| `assoc-async.rs`| \u2713 | \u2713 | N/A |\n+| `ref-self-async.rs` | X | \u2713 | N/A |\n+| `ref-mut-self-async.rs` | X | \u2713 | N/A |\n+| `ref-struct-async.rs` | X | \u2713 | N/A |\n+| `ref-mut-struct-async.rs` | X | \u2713 | N/A |\n+| `ref-alias-async.rs` | \u2713 | \u2713 | N/A |\n+| `ref-assoc-async.rs` | \u2713 | \u2713 | N/A |\n+| `ref-mut-alias-async.rs` | \u2713 | \u2713 | N/A |\n+| `lt-self-async.rs` | \u2713 | \u2713 | N/A\n+| `lt-struct-async.rs` | \u2713 | \u2713 | N/A\n+| `lt-alias-async.rs` | \u2713 | \u2713 | N/A\n+| `lt-assoc-async.rs` | \u2713 | \u2713 | N/A\n+| `lt-ref-self-async.rs` | X | \u2713 | N/A |"}, {"sha": "3d5b24a8946aa8b973a75853d81758cea36bd20e", "filename": "src/test/ui/self/elision/alias-async.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Falias-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using an alias for `Struct`:\n+\n+    async fn alias(self: Alias, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_Alias(self: Box<Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn rc_Alias(self: Rc<Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_box_Alias(self: Box<Box<Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_rc_Alias(self: Box<Rc<Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "0f33f2887726c485949d75ccfaf91be6ef203819", "filename": "src/test/ui/self/elision/assoc-async.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fassoc-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,43 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+trait Trait {\n+    type AssocType;\n+}\n+\n+struct Struct { }\n+\n+impl Trait for Struct {\n+    type AssocType = Self;\n+}\n+\n+impl Struct {\n+    async fn assoc(self: <Struct as Trait>::AssocType, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_AssocType(self: Box<<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn rc_AssocType(self: Rc<<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_box_AssocType(self: Box<Box<<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_rc_AssocType(self: Box<Rc<<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "5a8989f078ef35e5d612cd3a869d5db2cf577bfb", "filename": "src/test/ui/self/elision/lt-alias-async.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-alias-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,41 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct<'a> { x: &'a u32 }\n+\n+type Alias<'a> = Struct<'a>;\n+\n+impl<'a> Alias<'a> {\n+    async fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Alias(self: Alias<'a>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Alias(self: Box<Alias<'a>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Box_Alias(self: Box<Box<Alias<'a>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Rc_Alias(self: Rc<Alias<'a>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Rc_Alias(self: Box<Rc<Alias<'a>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "98c9aa3b6c26a5bd49b9802f05fb175de4c17d0a", "filename": "src/test/ui/self/elision/lt-assoc-async.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-assoc-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,53 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+trait Trait {\n+    type AssocType;\n+}\n+\n+struct Struct<'a> { x: &'a u32 }\n+\n+impl<'a> Trait for Struct<'a> {\n+    type AssocType = Self;\n+}\n+\n+impl<'a> Struct<'a> {\n+    async fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_AssocType(self: <Struct<'a> as Trait>::AssocType, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_AssocType(self: Box<<Struct<'a> as Trait>::AssocType>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Box_AssocType(\n+        self: Box<Box<<Struct<'a> as Trait>::AssocType>>,\n+        f: &u32\n+    ) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Rc_AssocType(self: Rc<<Struct<'a> as Trait>::AssocType>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Rc_AssocType(\n+        self: Box<Rc<<Struct<'a> as Trait>::AssocType>>,\n+        f: &u32\n+    ) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "779b21e21a097d36cec271898f059dec8591d142", "filename": "src/test/ui/self/elision/lt-ref-self-async.nll.stderr", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.nll.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,123 @@\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/lt-ref-self-async.rs:15:42\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                                          ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self-async.rs:15:47\n+   |\n+LL |       async fn ref_self(&self, f: &u32) -> &u32 {\n+   |  _______________________-_______________________^\n+   | |                       |\n+   | |                       lifetime `'_` defined here\n+   | |                       lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/lt-ref-self-async.rs:21:48\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                                ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self-async.rs:21:53\n+   |\n+LL |       async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |  _____________________________-_______________________^\n+   | |                             |\n+   | |                             lifetime `'_` defined here\n+   | |                             lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/lt-ref-self-async.rs:25:57\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self-async.rs:25:62\n+   |\n+LL |       async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |  _____________________________________-________________________^\n+   | |                                     |\n+   | |                                     lifetime `'_` defined here\n+   | |                                     lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/lt-ref-self-async.rs:29:57\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self-async.rs:29:62\n+   |\n+LL |       async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |  _____________________________________-________________________^\n+   | |                                     |\n+   | |                                     lifetime `'_` defined here\n+   | |                                     lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/lt-ref-self-async.rs:33:66\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                                  ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self-async.rs:33:71\n+   |\n+LL |       async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |  _____________________________________________-_________________________^\n+   | |                                             |\n+   | |                                             lifetime `'_` defined here\n+   | |                                             lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/lt-ref-self-async.rs:37:62\n+   |\n+LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                                              ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#28r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/lt-ref-self-async.rs:37:67\n+   |\n+LL |       async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |  _________________________________________-_________________________^\n+   | |                                         |\n+   | |                                         lifetime `'_` defined here\n+   | |                                         lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "79a4771978a8e511b389d62e84772ee5952449b8", "filename": "src/test/ui/self/elision/lt-ref-self-async.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,42 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct<'a> { data: &'a u32 }\n+\n+impl<'a> Struct<'a> {\n+    // Test using `&self` sugar:\n+\n+    async fn ref_self(&self, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    // Test using `&Self` explicitly:\n+\n+    async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "0a459257fa7087edf02d3e95695635af9c3ae63b", "filename": "src/test/ui/self/elision/lt-ref-self-async.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-ref-self-async.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,56 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self-async.rs:15:42\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                       -----              ^^^^\n+   |                       |                  |\n+   |                       |                  ...but data from `f` is returned here\n+   |                       this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self-async.rs:21:48\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                             -----              ^^^^\n+   |                             |                  |\n+   |                             |                  ...but data from `f` is returned here\n+   |                             this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self-async.rs:25:57\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                     -----               ^^^^\n+   |                                     |                   |\n+   |                                     |                   ...but data from `f` is returned here\n+   |                                     this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self-async.rs:29:57\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                     -----               ^^^^\n+   |                                     |                   |\n+   |                                     |                   ...but data from `f` is returned here\n+   |                                     this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self-async.rs:33:66\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                             -----                ^^^^\n+   |                                             |                    |\n+   |                                             |                    ...but data from `f` is returned here\n+   |                                             this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/lt-ref-self-async.rs:37:62\n+   |\n+LL |     async fn box_pin_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                         -----                ^^^^\n+   |                                         |                    |\n+   |                                         |                    ...but data from `f` is returned here\n+   |                                         this parameter and the return type are declared with different lifetimes...\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "0202db8a63526b5c14b18e12cbc0851a0c158fd9", "filename": "src/test/ui/self/elision/lt-self-async.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-self-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,52 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+use std::rc::Rc;\n+\n+struct Struct<'a> {\n+    x: &'a u32\n+}\n+\n+impl<'a> Struct<'a> {\n+    async fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Self(self: Self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Self(self: Box<Self>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Box_Self(self: Box<Box<Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Rc_Self(self: Rc<Self>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Rc_Self(self: Box<Rc<Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    // N/A\n+    //fn take_Pin_Self(self: Pin<Self>, f: &u32) -> &u32 {\n+    //    f\n+    //}\n+\n+    // N/A\n+    //fn take_Box_Pin_Self(self: Box<Pin<Self>>, f: &u32) -> &u32 {\n+    //    f\n+    //}\n+}\n+\n+fn main() { }"}, {"sha": "c0fc63d423257e370ae4fb7e37cff9f207a97cd7", "filename": "src/test/ui/self/elision/lt-struct-async.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Flt-struct-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct<'a> { x: &'a u32 }\n+\n+impl<'a> Struct<'a> {\n+    async fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Struct(self: Struct<'a>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Struct(self: Box<Struct<'a>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Box_Struct(self: Box<Box<Struct<'a>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Rc_Struct(self: Rc<Struct<'a>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Rc_Struct(self: Box<Rc<Struct<'a>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "eb8c25277e1452fbe19c7c241c619a906c03e3d0", "filename": "src/test/ui/self/elision/multiple-ref-self-async.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fmultiple-ref-self-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,46 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::marker::PhantomData;\n+use std::ops::Deref;\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+struct Wrap<T, P>(T, PhantomData<P>);\n+\n+impl<T, P> Deref for Wrap<T, P> {\n+    type Target = T;\n+    fn deref(&self) -> &T { &self.0 }\n+}\n+\n+impl Struct {\n+    // Test using multiple `&Self`:\n+\n+    async fn wrap_ref_Self_ref_Self(self: Wrap<&Self, &Self>, f: &u8) -> &u8 {\n+        f\n+    }\n+\n+    async fn box_wrap_ref_Self_ref_Self(self: Box<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn pin_wrap_ref_Self_ref_Self(self: Pin<Wrap<&Self, &Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_box_wrap_ref_Self_ref_Self(self: Box<Box<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_pin_wrap_ref_Self_ref_Self(self: Box<Pin<Wrap<&Self, &Self>>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "acc4b2153ef66f9fb79dc8e564fd64377f492c9e", "filename": "src/test/ui/self/elision/ref-alias-async.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-alias-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,42 @@\n+// edition:2018\n+// check-pass\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using an alias for `Struct`:\n+    //\n+    // FIXME. We currently fail to recognize this as the self type, which\n+    // feels like a bug.\n+\n+    async fn ref_Alias(self: &Alias, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_ref_Alias(self: Box<&Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn pin_ref_Alias(self: Pin<&Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_box_ref_Alias(self: Box<Box<&Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_pin_ref_Alias(self: Box<Pin<&Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "a6b6cbd6da391967c4318b9f1f841c1d28f1e635", "filename": "src/test/ui/self/elision/ref-assoc-async.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-assoc-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,43 @@\n+// edition:2018\n+// check-pass\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+trait Trait {\n+    type AssocType;\n+}\n+\n+struct Struct { }\n+\n+impl Trait for Struct {\n+    type AssocType = Self;\n+}\n+\n+impl Struct {\n+    async fn ref_AssocType(self: &<Struct as Trait>::AssocType, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_ref_AssocType(self: Box<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn pin_ref_AssocType(self: Pin<&<Struct as Trait>::AssocType>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_box_ref_AssocType(self: Box<Box<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_pin_ref_AssocType(self: Box<Pin<&<Struct as Trait>::AssocType>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "873e92bc6d33e76cace2335ee3b79f71b3d6e331", "filename": "src/test/ui/self/elision/ref-mut-alias-async.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-alias-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,38 @@\n+// edition:2018\n+// check-pass\n+\n+#![feature(async_await)]\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+type Alias = Struct;\n+\n+impl Struct {\n+    // Test using an alias for `Struct`:\n+\n+    async fn ref_Alias(self: &mut Alias, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_ref_Alias(self: Box<&mut Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn pin_ref_Alias(self: Pin<&mut Alias>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_box_ref_Alias(self: Box<Box<&mut Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_pin_ref_Alias(self: Box<Pin<&mut Alias>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "cfe91dde37354c09f337fabbdc7a32a517566814", "filename": "src/test/ui/self/elision/ref-mut-self-async.nll.stderr", "status": "added", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.nll.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,123 @@\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-self-async.rs:15:46\n+   |\n+LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n+   |                                              ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self-async.rs:15:51\n+   |\n+LL |       async fn ref_self(&mut self, f: &u32) -> &u32 {\n+   |  _______________________-___________________________^\n+   | |                       |\n+   | |                       lifetime `'_` defined here\n+   | |                       lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-self-async.rs:21:52\n+   |\n+LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+   |                                                    ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self-async.rs:21:57\n+   |\n+LL |       async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+   |  _____________________________-___________________________^\n+   | |                             |\n+   | |                             lifetime `'_` defined here\n+   | |                             lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-self-async.rs:25:61\n+   |\n+LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+   |                                                             ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self-async.rs:25:66\n+   |\n+LL |       async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+   |  _____________________________________-____________________________^\n+   | |                                     |\n+   | |                                     lifetime `'_` defined here\n+   | |                                     lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-self-async.rs:29:61\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+   |                                                             ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self-async.rs:29:66\n+   |\n+LL |       async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+   |  _____________________________________-____________________________^\n+   | |                                     |\n+   | |                                     lifetime `'_` defined here\n+   | |                                     lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-self-async.rs:33:70\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                                      ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self-async.rs:33:75\n+   |\n+LL |       async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+   |  _____________________________________________-_____________________________^\n+   | |                                             |\n+   | |                                             lifetime `'_` defined here\n+   | |                                             lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-self-async.rs:37:70\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+   |                                                                      ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-self-async.rs:37:75\n+   |\n+LL |       async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+   |  _____________________________________________-_____________________________^\n+   | |                                             |\n+   | |                                             lifetime `'_` defined here\n+   | |                                             lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error: aborting due to 12 previous errors\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "a6bd9d693163e29b3470b9045c64089480814a2a", "filename": "src/test/ui/self/elision/ref-mut-self-async.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,42 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    // Test using `&mut self` sugar:\n+\n+    async fn ref_self(&mut self, f: &u32) -> &u32 { //~ ERROR lifetime mismatch\n+        f\n+    }\n+\n+    // Test using `&mut Self` explicitly:\n+\n+    async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "805833f94720dfdc5fb21838749a1179e1b829e3", "filename": "src/test/ui/self/elision/ref-mut-self-async.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-self-async.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,56 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self-async.rs:15:46\n+   |\n+LL |     async fn ref_self(&mut self, f: &u32) -> &u32 {\n+   |                       ---------              ^^^^\n+   |                       |                      |\n+   |                       |                      ...but data from `f` is returned here\n+   |                       this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self-async.rs:21:52\n+   |\n+LL |     async fn ref_Self(self: &mut Self, f: &u32) -> &u32 {\n+   |                             ---------              ^^^^\n+   |                             |                      |\n+   |                             |                      ...but data from `f` is returned here\n+   |                             this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self-async.rs:25:61\n+   |\n+LL |     async fn box_ref_Self(self: Box<&mut Self>, f: &u32) -> &u32 {\n+   |                                     ---------               ^^^^\n+   |                                     |                       |\n+   |                                     |                       ...but data from `f` is returned here\n+   |                                     this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self-async.rs:29:61\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&mut Self>, f: &u32) -> &u32 {\n+   |                                     ---------               ^^^^\n+   |                                     |                       |\n+   |                                     |                       ...but data from `f` is returned here\n+   |                                     this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self-async.rs:33:70\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&mut Self>>, f: &u32) -> &u32 {\n+   |                                             ---------                ^^^^\n+   |                                             |                        |\n+   |                                             |                        ...but data from `f` is returned here\n+   |                                             this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-self-async.rs:37:70\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&mut Self>>, f: &u32) -> &u32 {\n+   |                                             ---------                ^^^^\n+   |                                             |                        |\n+   |                                             |                        ...but data from `f` is returned here\n+   |                                             this parameter and the return type are declared with different lifetimes...\n+\n+error: aborting due to 6 previous errors\n+"}, {"sha": "98fa5e2545186b5268038a2f516addc94fe1e6a4", "filename": "src/test/ui/self/elision/ref-mut-struct-async.nll.stderr", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.nll.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,103 @@\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-struct-async.rs:15:56\n+   |\n+LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+   |                                                        ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-struct-async.rs:15:61\n+   |\n+LL |       async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+   |  _______________________________-_____________________________^\n+   | |                               |\n+   | |                               lifetime `'_` defined here\n+   | |                               lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-struct-async.rs:19:65\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                                 ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-struct-async.rs:19:70\n+   |\n+LL |       async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+   |  _______________________________________-______________________________^\n+   | |                                       |\n+   | |                                       lifetime `'_` defined here\n+   | |                                       lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-struct-async.rs:23:65\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+   |                                                                 ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-struct-async.rs:23:70\n+   |\n+LL |       async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+   |  _______________________________________-______________________________^\n+   | |                                       |\n+   | |                                       lifetime `'_` defined here\n+   | |                                       lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-struct-async.rs:27:74\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                                          ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-struct-async.rs:27:79\n+   |\n+LL |       async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+   |  _______________________________________________-_______________________________^\n+   | |                                               |\n+   | |                                               lifetime `'_` defined here\n+   | |                                               lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-mut-struct-async.rs:31:74\n+   |\n+LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                                                          ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-mut-struct-async.rs:31:79\n+   |\n+LL |       async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+   |  _______________________________________________-_______________________________^\n+   | |                                               |\n+   | |                                               lifetime `'_` defined here\n+   | |                                               lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "7a89ef9596a37da45f1c9a0ccb3c3171c094f974", "filename": "src/test/ui/self/elision/ref-mut-struct-async.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,36 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    // Test using `&mut Struct` explicitly:\n+\n+    async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "4c983872942c10110fecf5dd034eacece58693b1", "filename": "src/test/ui/self/elision/ref-mut-struct-async.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-mut-struct-async.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,47 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct-async.rs:15:56\n+   |\n+LL |     async fn ref_Struct(self: &mut Struct, f: &u32) -> &u32 {\n+   |                               -----------              ^^^^\n+   |                               |                        |\n+   |                               |                        ...but data from `f` is returned here\n+   |                               this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct-async.rs:19:65\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&mut Struct>, f: &u32) -> &u32 {\n+   |                                       -----------               ^^^^\n+   |                                       |                         |\n+   |                                       |                         ...but data from `f` is returned here\n+   |                                       this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct-async.rs:23:65\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&mut Struct>, f: &u32) -> &u32 {\n+   |                                       -----------               ^^^^\n+   |                                       |                         |\n+   |                                       |                         ...but data from `f` is returned here\n+   |                                       this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct-async.rs:27:74\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                               -----------                ^^^^\n+   |                                               |                          |\n+   |                                               |                          ...but data from `f` is returned here\n+   |                                               this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-mut-struct-async.rs:31:74\n+   |\n+LL |     async fn box_pin_ref_Struct(self: Box<Pin<&mut Struct>>, f: &u32) -> &u32 {\n+   |                                               -----------                ^^^^\n+   |                                               |                          |\n+   |                                               |                          ...but data from `f` is returned here\n+   |                                               this parameter and the return type are declared with different lifetimes...\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "f991f6d9f7fa1181ab9a260ebf0d95a0d68cb069", "filename": "src/test/ui/self/elision/ref-self-async.nll.stderr", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.nll.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,143 @@\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-self-async.rs:24:42\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                                          ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:24:47\n+   |\n+LL |       async fn ref_self(&self, f: &u32) -> &u32 {\n+   |  _______________________-_______________________^\n+   | |                       |\n+   | |                       lifetime `'_` defined here\n+   | |                       lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-self-async.rs:30:48\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                                                ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:30:53\n+   |\n+LL |       async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |  _____________________________-_______________________^\n+   | |                             |\n+   | |                             lifetime `'_` defined here\n+   | |                             lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-self-async.rs:34:57\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:34:62\n+   |\n+LL |       async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |  _____________________________________-________________________^\n+   | |                                     |\n+   | |                                     lifetime `'_` defined here\n+   | |                                     lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-self-async.rs:38:57\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                                         ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:38:62\n+   |\n+LL |       async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |  _____________________________________-________________________^\n+   | |                                     |\n+   | |                                     lifetime `'_` defined here\n+   | |                                     lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-self-async.rs:42:66\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                                                  ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:42:71\n+   |\n+LL |       async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |  _____________________________________________-_________________________^\n+   | |                                             |\n+   | |                                             lifetime `'_` defined here\n+   | |                                             lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-self-async.rs:46:66\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                                                  ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:46:71\n+   |\n+LL |       async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |  _____________________________________________-_________________________^\n+   | |                                             |\n+   | |                                             lifetime `'_` defined here\n+   | |                                             lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-self-async.rs:50:69\n+   |\n+LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+   |                                                                     ^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-self-async.rs:50:73\n+   |\n+LL |       async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+   |  ____________________________________________-____________________________^\n+   | |                                            |\n+   | |                                            lifetime `'_` defined here\n+   | |                                            lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error: aborting due to 14 previous errors\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "5a5705d7e099b8220f9ad658544154bc6dada828", "filename": "src/test/ui/self/elision/ref-self-async.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,55 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::marker::PhantomData;\n+use std::ops::Deref;\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+struct Wrap<T, P>(T, PhantomData<P>);\n+\n+impl<T, P> Deref for Wrap<T, P> {\n+    type Target = T;\n+    fn deref(&self) -> &T { &self.0 }\n+}\n+\n+impl Struct {\n+    // Test using `&self` sugar:\n+\n+    async fn ref_self(&self, f: &u32) -> &u32 { //~ ERROR lifetime mismatch\n+        f\n+    }\n+\n+    // Test using `&Self` explicitly:\n+\n+    async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "eb796a07a86d57f45b3f9a6947fe39021e37e3f8", "filename": "src/test/ui/self/elision/ref-self-async.stderr", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-self-async.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,65 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self-async.rs:24:42\n+   |\n+LL |     async fn ref_self(&self, f: &u32) -> &u32 {\n+   |                       -----              ^^^^\n+   |                       |                  |\n+   |                       |                  ...but data from `f` is returned here\n+   |                       this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self-async.rs:30:48\n+   |\n+LL |     async fn ref_Self(self: &Self, f: &u32) -> &u32 {\n+   |                             -----              ^^^^\n+   |                             |                  |\n+   |                             |                  ...but data from `f` is returned here\n+   |                             this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self-async.rs:34:57\n+   |\n+LL |     async fn box_ref_Self(self: Box<&Self>, f: &u32) -> &u32 {\n+   |                                     -----               ^^^^\n+   |                                     |                   |\n+   |                                     |                   ...but data from `f` is returned here\n+   |                                     this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self-async.rs:38:57\n+   |\n+LL |     async fn pin_ref_Self(self: Pin<&Self>, f: &u32) -> &u32 {\n+   |                                     -----               ^^^^\n+   |                                     |                   |\n+   |                                     |                   ...but data from `f` is returned here\n+   |                                     this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self-async.rs:42:66\n+   |\n+LL |     async fn box_box_ref_Self(self: Box<Box<&Self>>, f: &u32) -> &u32 {\n+   |                                             -----                ^^^^\n+   |                                             |                    |\n+   |                                             |                    ...but data from `f` is returned here\n+   |                                             this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self-async.rs:46:66\n+   |\n+LL |     async fn box_pin_ref_Self(self: Box<Pin<&Self>>, f: &u32) -> &u32 {\n+   |                                             -----                ^^^^\n+   |                                             |                    |\n+   |                                             |                    ...but data from `f` is returned here\n+   |                                             this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-self-async.rs:50:69\n+   |\n+LL |     async fn wrap_ref_Self_Self(self: Wrap<&Self, Self>, f: &u8) -> &u8 {\n+   |                                            -----                    ^^^\n+   |                                            |                        |\n+   |                                            |                        ...but data from `f` is returned here\n+   |                                            this parameter and the return type are declared with different lifetimes...\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "437d403e044ede637eaa2ef5748f1964aceb5194", "filename": "src/test/ui/self/elision/ref-struct-async.nll.stderr", "status": "added", "additions": 103, "deletions": 0, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.nll.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,103 @@\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-struct-async.rs:15:52\n+   |\n+LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+   |                                                    ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-struct-async.rs:15:57\n+   |\n+LL |       async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+   |  _______________________________-_________________________^\n+   | |                               |\n+   | |                               lifetime `'_` defined here\n+   | |                               lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-struct-async.rs:19:61\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+   |                                                             ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-struct-async.rs:19:66\n+   |\n+LL |       async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+   |  _______________________________________-__________________________^\n+   | |                                       |\n+   | |                                       lifetime `'_` defined here\n+   | |                                       lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-struct-async.rs:23:61\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+   |                                                             ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-struct-async.rs:23:66\n+   |\n+LL |       async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+   |  _______________________________________-__________________________^\n+   | |                                       |\n+   | |                                       lifetime `'_` defined here\n+   | |                                       lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-struct-async.rs:27:70\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+   |                                                                      ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-struct-async.rs:27:75\n+   |\n+LL |       async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+   |  _______________________________________________-___________________________^\n+   | |                                               |\n+   | |                                               lifetime `'_` defined here\n+   | |                                               lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+  --> $DIR/ref-struct-async.rs:31:66\n+   |\n+LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+   |                                                                  ^^^^\n+   |\n+   = note: hidden type `impl std::future::Future` captures lifetime '_#18r\n+\n+error: lifetime may not live long enough\n+  --> $DIR/ref-struct-async.rs:31:71\n+   |\n+LL |       async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+   |  ___________________________________________-___________________________^\n+   | |                                           |\n+   | |                                           lifetime `'_` defined here\n+   | |                                           lifetime `'_` defined here\n+LL | |         f\n+LL | |     }\n+   | |_____^ function was supposed to return data with lifetime `'_` but it is returning data with lifetime `'_`\n+\n+error: aborting due to 10 previous errors\n+\n+For more information about this error, try `rustc --explain E0700`."}, {"sha": "f0410bbee906ded62b4d35c425e05828c0fac240", "filename": "src/test/ui/self/elision/ref-struct-async.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,36 @@\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::pin::Pin;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    // Test using `&Struct` explicitly:\n+\n+    async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+\n+    async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+        f //~^ ERROR lifetime mismatch\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "574b0fddc1eb2f17de5cee737d3d7a378ba54e29", "filename": "src/test/ui/self/elision/ref-struct-async.stderr", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fref-struct-async.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,47 @@\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct-async.rs:15:52\n+   |\n+LL |     async fn ref_Struct(self: &Struct, f: &u32) -> &u32 {\n+   |                               -------              ^^^^\n+   |                               |                    |\n+   |                               |                    ...but data from `f` is returned here\n+   |                               this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct-async.rs:19:61\n+   |\n+LL |     async fn box_ref_Struct(self: Box<&Struct>, f: &u32) -> &u32 {\n+   |                                       -------               ^^^^\n+   |                                       |                     |\n+   |                                       |                     ...but data from `f` is returned here\n+   |                                       this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct-async.rs:23:61\n+   |\n+LL |     async fn pin_ref_Struct(self: Pin<&Struct>, f: &u32) -> &u32 {\n+   |                                       -------               ^^^^\n+   |                                       |                     |\n+   |                                       |                     ...but data from `f` is returned here\n+   |                                       this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct-async.rs:27:70\n+   |\n+LL |     async fn box_box_ref_Struct(self: Box<Box<&Struct>>, f: &u32) -> &u32 {\n+   |                                               -------                ^^^^\n+   |                                               |                      |\n+   |                                               |                      ...but data from `f` is returned here\n+   |                                               this parameter and the return type are declared with different lifetimes...\n+\n+error[E0623]: lifetime mismatch\n+  --> $DIR/ref-struct-async.rs:31:66\n+   |\n+LL |     async fn box_pin_Struct(self: Box<Pin<&Struct>>, f: &u32) -> &u32 {\n+   |                                           -------                ^^^^\n+   |                                           |                      |\n+   |                                           |                      ...but data from `f` is returned here\n+   |                                           this parameter and the return type are declared with different lifetimes...\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "d1dc050be0d1e5f98b8e8fc70489292798d26134", "filename": "src/test/ui/self/elision/self-async.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fself-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,39 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    async fn take_self(self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Self(self: Self, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Self(self: Box<Self>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Box_Self(self: Box<Box<Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Rc_Self(self: Rc<Self>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn take_Box_Rc_Self(self: Box<Rc<Self>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "f7c8591ebd31df91a9aca1c7c605a15f81e91ee9", "filename": "src/test/ui/self/elision/struct-async.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Felision%2Fstruct-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,35 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+#![feature(arbitrary_self_types)]\n+#![allow(non_snake_case)]\n+\n+use std::rc::Rc;\n+\n+struct Struct { }\n+\n+impl Struct {\n+    async fn ref_Struct(self: Struct, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_Struct(self: Box<Struct>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn rc_Struct(self: Rc<Struct>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_box_Struct(self: Box<Box<Struct>>, f: &u32) -> &u32 {\n+        f\n+    }\n+\n+    async fn box_rc_Struct(self: Box<Rc<Struct>>, f: &u32) -> &u32 {\n+        f\n+    }\n+}\n+\n+fn main() { }"}, {"sha": "ec4c3d15224232548e3f40a84304f5d5a473e7c6", "filename": "src/test/ui/self/self_lifetime-async.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fself%2Fself_lifetime-async.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,16 @@\n+// check-pass\n+// edition:2018\n+\n+#![feature(async_await)]\n+\n+struct Foo<'a>(&'a ());\n+impl<'a> Foo<'a> {\n+    async fn foo<'b>(self: &'b Foo<'a>) -> &() { self.0 }\n+}\n+\n+type Alias = Foo<'static>;\n+impl Alias {\n+    async fn bar<'a>(self: &Alias, arg: &'a ()) -> &() { arg }\n+}\n+\n+fn main() {}"}, {"sha": "e83b0b4d6308da01bbdf473bdfd86488eaf7853d", "filename": "src/test/ui/suggestions/issue-61226.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.rs?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,5 @@\n+struct X {}\n+fn main() {\n+    vec![X]; //\u2026\n+    //~^ ERROR expected value, found struct `X`\n+}"}, {"sha": "6d7d98ac6a16bf64de285d90073f4a563e5239db", "filename": "src/test/ui/suggestions/issue-61226.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c43d03a19f326f4a323569328cc501e86eb6d22e/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-61226.stderr?ref=c43d03a19f326f4a323569328cc501e86eb6d22e", "patch": "@@ -0,0 +1,9 @@\n+error[E0423]: expected value, found struct `X`\n+  --> $DIR/issue-61226.rs:3:10\n+   |\n+LL |     vec![X]; //\u2026\n+   |          ^ did you mean `X { /* fields */ }`?\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0423`."}]}