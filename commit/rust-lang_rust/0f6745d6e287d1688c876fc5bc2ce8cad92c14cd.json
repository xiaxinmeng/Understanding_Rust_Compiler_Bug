{"sha": "0f6745d6e287d1688c876fc5bc2ce8cad92c14cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNjc0NWQ2ZTI4N2QxNjg4Yzg3NmZjNWJjMmNlOGNhZDkyYzE0Y2Q=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-29T21:57:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-29T21:57:42Z"}, "message": "Rollup merge of #66844 - RalfJung:caller-location-leak, r=oli-obk\n\nMiri: do not consider memory allocated by caller_location leaked\n\nFixes https://github.com/rust-lang/miri/issues/1071\n\nr? @oli-obk\n\nI am not sure if this is the best approach, but it certainly is the easiest.", "tree": {"sha": "ec983cfb6f6f12cb4bd97b87dab14425b12a9a35", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec983cfb6f6f12cb4bd97b87dab14425b12a9a35"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f6745d6e287d1688c876fc5bc2ce8cad92c14cd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd4ZRWCRBK7hj4Ov3rIwAAdHIIAHfJWvxuEZVaVx1hH/KKREey\n/jf7thUNtVzSslfPz4LgTX392VUC2vFrC51UM090O3vSEmdUHHJ/+oZ6uuTD9w1Z\niksV7mMc4fBRRfcSXmZie84gbOgZnMC6enSfwfuqjy03gSN+XoVsYoR9aWaopAVz\nOqUWFFirn1HaHgLFkx3u0MYxDX9dkr5sklAwoWaE8j44UW6m364Nw2wFy4z1irdl\nXVKXxEwgOQjhjV/FrUp2Vxt8+CMvKD1qbVl1FHxoUW02BCnhfCdADl9OP6Xs3ujR\ndCvOS3wuco8FzKz4mdx1JINaYdJqiOpt9IXMiDgUNT0zQ9hbmh/KWNNDBoVnbj8=\n=2fNZ\n-----END PGP SIGNATURE-----\n", "payload": "tree ec983cfb6f6f12cb4bd97b87dab14425b12a9a35\nparent 395937823c65d0dc6469e5df864b1e1b0f5a2b3f\nparent 3048d7e5b54eb75c8a784e0270767436ec070729\nauthor Ralf Jung <post@ralfj.de> 1575064662 +0100\ncommitter GitHub <noreply@github.com> 1575064662 +0100\n\nRollup merge of #66844 - RalfJung:caller-location-leak, r=oli-obk\n\nMiri: do not consider memory allocated by caller_location leaked\n\nFixes https://github.com/rust-lang/miri/issues/1071\n\nr? @oli-obk\n\nI am not sure if this is the best approach, but it certainly is the easiest.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f6745d6e287d1688c876fc5bc2ce8cad92c14cd", "html_url": "https://github.com/rust-lang/rust/commit/0f6745d6e287d1688c876fc5bc2ce8cad92c14cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f6745d6e287d1688c876fc5bc2ce8cad92c14cd/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "395937823c65d0dc6469e5df864b1e1b0f5a2b3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/395937823c65d0dc6469e5df864b1e1b0f5a2b3f", "html_url": "https://github.com/rust-lang/rust/commit/395937823c65d0dc6469e5df864b1e1b0f5a2b3f"}, {"sha": "3048d7e5b54eb75c8a784e0270767436ec070729", "url": "https://api.github.com/repos/rust-lang/rust/commits/3048d7e5b54eb75c8a784e0270767436ec070729", "html_url": "https://github.com/rust-lang/rust/commit/3048d7e5b54eb75c8a784e0270767436ec070729"}], "stats": {"total": 14, "additions": 9, "deletions": 5}, "files": [{"sha": "f9cb40ffe9446eac23b7bd967283ab11a29a130f", "filename": "src/librustc_mir/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6745d6e287d1688c876fc5bc2ce8cad92c14cd/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6745d6e287d1688c876fc5bc2ce8cad92c14cd/src%2Flibrustc_mir%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintern.rs?ref=0f6745d6e287d1688c876fc5bc2ce8cad92c14cd", "patch": "@@ -100,7 +100,7 @@ fn intern_shallow<'rt, 'mir, 'tcx, M: CompileTimeMachine<'mir, 'tcx>>(\n     // This match is just a canary for future changes to `MemoryKind`, which most likely need\n     // changes in this function.\n     match kind {\n-        MemoryKind::Stack | MemoryKind::Vtable => {},\n+        MemoryKind::Stack | MemoryKind::Vtable | MemoryKind::CallerLocation => {},\n     }\n     // Set allocation mutability as appropriate. This is used by LLVM to put things into\n     // read-only memory, and also by Miri when evluating other constants/statics that"}, {"sha": "9e07a3f1072c1c5d18a8bf4702b9fe997758d79f", "filename": "src/librustc_mir/interpret/intrinsics/caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f6745d6e287d1688c876fc5bc2ce8cad92c14cd/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6745d6e287d1688c876fc5bc2ce8cad92c14cd/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Fcaller_location.rs?ref=0f6745d6e287d1688c876fc5bc2ce8cad92c14cd", "patch": "@@ -28,7 +28,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let file = Scalar::Ptr(self.tag_static_base_pointer(file_ptr));\n         let file_len = Scalar::from_uint(filename.as_str().len() as u128, ptr_size);\n \n-        let location = self.allocate(loc_layout, MemoryKind::Stack);\n+        let location = self.allocate(loc_layout, MemoryKind::CallerLocation);\n \n         let file_out = self.mplace_field(location, 0)?;\n         let file_ptr_out = self.force_ptr(self.mplace_field(file_out, 0)?.ptr)?;"}, {"sha": "a8011f7abb14fe41e6699b0e6499f4091c6cad6c", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0f6745d6e287d1688c876fc5bc2ce8cad92c14cd/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f6745d6e287d1688c876fc5bc2ce8cad92c14cd/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=0f6745d6e287d1688c876fc5bc2ce8cad92c14cd", "patch": "@@ -24,11 +24,13 @@ use super::{\n \n #[derive(Debug, PartialEq, Copy, Clone)]\n pub enum MemoryKind<T> {\n-    /// Error if deallocated except during a stack pop\n+    /// Stack memory. Error if deallocated except during a stack pop.\n     Stack,\n-    /// Error if ever deallocated\n+    /// Memory backing vtables. Error if ever deallocated.\n     Vtable,\n-    /// Additional memory kinds a machine wishes to distinguish from the builtin ones\n+    /// Memory allocated by `caller_location` intrinsic. Error if ever deallocated.\n+    CallerLocation,\n+    /// Additional memory kinds a machine wishes to distinguish from the builtin ones.\n     Machine(T),\n }\n \n@@ -38,6 +40,7 @@ impl<T: MayLeak> MayLeak for MemoryKind<T> {\n         match self {\n             MemoryKind::Stack => false,\n             MemoryKind::Vtable => true,\n+            MemoryKind::CallerLocation => true,\n             MemoryKind::Machine(k) => k.may_leak()\n         }\n     }\n@@ -719,6 +722,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                     let extra = match kind {\n                         MemoryKind::Stack => \" (stack)\".to_owned(),\n                         MemoryKind::Vtable => \" (vtable)\".to_owned(),\n+                        MemoryKind::CallerLocation => \" (caller_location)\".to_owned(),\n                         MemoryKind::Machine(m) => format!(\" ({:?})\", m),\n                     };\n                     self.dump_alloc_helper("}]}