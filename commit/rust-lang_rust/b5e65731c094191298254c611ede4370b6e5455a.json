{"sha": "b5e65731c094191298254c611ede4370b6e5455a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZTY1NzMxYzA5NDE5MTI5ODI1NGM2MTFlZGU0MzcwYjZlNTQ1NWE=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2013-12-23T15:40:42Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2014-01-21T23:48:47Z"}, "message": "[std::vec] Rename .shift_opt() to .shift(), drop the old .shift() behavior", "tree": {"sha": "5d004771ea7c7ed5dc78574b7d5b7eb157b5cf08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d004771ea7c7ed5dc78574b7d5b7eb157b5cf08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5e65731c094191298254c611ede4370b6e5455a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5e65731c094191298254c611ede4370b6e5455a", "html_url": "https://github.com/rust-lang/rust/commit/b5e65731c094191298254c611ede4370b6e5455a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5e65731c094191298254c611ede4370b6e5455a/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bada25e425ae30583ad343e36a034e59c66fcad6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bada25e425ae30583ad343e36a034e59c66fcad6", "html_url": "https://github.com/rust-lang/rust/commit/bada25e425ae30583ad343e36a034e59c66fcad6"}], "stats": {"total": 47, "additions": 16, "deletions": 31}, "files": [{"sha": "bbfba84cc9e6622d5e5e63b12eda8fd87a59b5c7", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5e65731c094191298254c611ede4370b6e5455a/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5e65731c094191298254c611ede4370b6e5455a/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=b5e65731c094191298254c611ede4370b6e5455a", "patch": "@@ -788,7 +788,7 @@ fn make_run_args(config: &config, _props: &TestProps, testfile: &Path) ->\n     let exe_file = make_exe_name(config, testfile);\n     // FIXME (#9639): This needs to handle non-utf8 paths\n     args.push(exe_file.as_str().unwrap().to_owned());\n-    let prog = args.shift();\n+    let prog = args.shift().unwrap();\n     return ProcArgs {prog: prog, args: args};\n }\n "}, {"sha": "115700e7408a3b7288100633e0c189080bf6b236", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5e65731c094191298254c611ede4370b6e5455a/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5e65731c094191298254c611ede4370b6e5455a/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=b5e65731c094191298254c611ede4370b6e5455a", "patch": "@@ -1053,7 +1053,7 @@ mod tests {\n                 }\n                 1 => {\n                     m.pop_front();\n-                    if v.len() > 0 { v.shift(); }\n+                    v.shift();\n                 }\n                 2 | 4 =>  {\n                     m.push_front(-i);"}, {"sha": "7ecf2b1e18c4202dcb62d22b080d5c90ee5f05cd", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5e65731c094191298254c611ede4370b6e5455a/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5e65731c094191298254c611ede4370b6e5455a/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=b5e65731c094191298254c611ede4370b6e5455a", "patch": "@@ -190,7 +190,7 @@ pub fn describe_debug_flags() {\n \n pub fn run_compiler(args: &[~str], demitter: @diagnostic::Emitter) {\n     let mut args = args.to_owned();\n-    let binary = args.shift();\n+    let binary = args.shift().unwrap();\n \n     if args.is_empty() { usage(binary); return; }\n "}, {"sha": "7e6db24a4a319138a685e0eedbd3e39571378f6b", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5e65731c094191298254c611ede4370b6e5455a/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5e65731c094191298254c611ede4370b6e5455a/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=b5e65731c094191298254c611ede4370b6e5455a", "patch": "@@ -524,7 +524,7 @@ impl<'a> Context<'a> {\n         // rollback\n         self.is_doc_hidden = old_is_doc_hidden;\n         pushed.times(|| {\n-            let (lint, lvl, src) = self.lint_stack.pop();\n+            let (lint, lvl, src) = self.lint_stack.pop().unwrap();\n             self.set_level(lint, lvl, src);\n         })\n     }"}, {"sha": "745273a1d74be3064559d44f578b0589a9ea86c7", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5e65731c094191298254c611ede4370b6e5455a/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5e65731c094191298254c611ede4370b6e5455a/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=b5e65731c094191298254c611ede4370b6e5455a", "patch": "@@ -370,7 +370,7 @@ mod test {\n \n     impl Reader for ShortReader {\n         fn read(&mut self, _: &mut [u8]) -> Option<uint> {\n-            self.lengths.shift_opt()\n+            self.lengths.shift()\n         }\n     }\n "}, {"sha": "80dbaebe01c042a65da92f505f8e15dda237133d", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5e65731c094191298254c611ede4370b6e5455a/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5e65731c094191298254c611ede4370b6e5455a/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=b5e65731c094191298254c611ede4370b6e5455a", "patch": "@@ -519,7 +519,7 @@ pub struct Directories {\n \n impl Iterator<Path> for Directories {\n     fn next(&mut self) -> Option<Path> {\n-        match self.stack.shift_opt() {\n+        match self.stack.shift() {\n             Some(path) => {\n                 if path.is_dir() {\n                     self.stack.push_all_move(readdir(&path));"}, {"sha": "f59cd855c32c940076b6126ab2f6c50002e553e6", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5e65731c094191298254c611ede4370b6e5455a/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5e65731c094191298254c611ede4370b6e5455a/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=b5e65731c094191298254c611ede4370b6e5455a", "patch": "@@ -703,7 +703,7 @@ impl<'a> Iterator<char> for Normalizations<'a> {\n             self.sorted = true;\n         }\n \n-        match self.buffer.shift_opt() {\n+        match self.buffer.shift() {\n             Some((c, 0)) => {\n                 self.sorted = false;\n                 Some(c)"}, {"sha": "6300abb55a1997484b1425c1b6ade776bf6d0317", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 8, "deletions": 23, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/b5e65731c094191298254c611ede4370b6e5455a/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5e65731c094191298254c611ede4370b6e5455a/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=b5e65731c094191298254c611ede4370b6e5455a", "patch": "@@ -1383,10 +1383,8 @@ pub trait OwnedVector<T> {\n     fn push_all_move(&mut self, rhs: ~[T]);\n     /// Remove the last element from a vector and return it, or `None` if it is empty\n     fn pop(&mut self) -> Option<T>;\n-    /// Removes the first element from a vector and return it\n-    fn shift(&mut self) -> T;\n     /// Removes the first element from a vector and return it, or `None` if it is empty\n-    fn shift_opt(&mut self) -> Option<T>;\n+    fn shift(&mut self) -> Option<T>;\n     /// Prepend an element to the vector\n     fn unshift(&mut self, x: T);\n \n@@ -1578,14 +1576,11 @@ impl<T> OwnedVector<T> for ~[T] {\n \n \n     #[inline]\n-    fn shift(&mut self) -> T {\n-        self.shift_opt().expect(\"shift: empty vector\")\n-    }\n-\n-    fn shift_opt(&mut self) -> Option<T> {\n+    fn shift(&mut self) -> Option<T> {\n         self.remove_opt(0)\n     }\n \n+    #[inline]\n     fn unshift(&mut self, x: T) {\n         self.insert(0, x)\n     }\n@@ -1645,7 +1640,7 @@ impl<T> OwnedVector<T> for ~[T] {\n         if index < ln - 1 {\n             self.swap(index, ln - 1);\n         }\n-        self.pop()\n+        self.pop().unwrap()\n     }\n     fn truncate(&mut self, newlen: uint) {\n         let oldlen = self.len();\n@@ -3580,21 +3575,11 @@ mod tests {\n     #[test]\n     fn test_shift() {\n         let mut x = ~[1, 2, 3];\n-        assert_eq!(x.shift(), 1);\n-        assert_eq!(&x, &~[2, 3]);\n-        assert_eq!(x.shift(), 2);\n-        assert_eq!(x.shift(), 3);\n-        assert_eq!(x.len(), 0);\n-    }\n-\n-    #[test]\n-    fn test_shift_opt() {\n-        let mut x = ~[1, 2, 3];\n-        assert_eq!(x.shift_opt(), Some(1));\n+        assert_eq!(x.shift(), Some(1));\n         assert_eq!(&x, &~[2, 3]);\n-        assert_eq!(x.shift_opt(), Some(2));\n-        assert_eq!(x.shift_opt(), Some(3));\n-        assert_eq!(x.shift_opt(), None);\n+        assert_eq!(x.shift(), Some(2));\n+        assert_eq!(x.shift(), Some(3));\n+        assert_eq!(x.shift(), None);\n         assert_eq!(x.len(), 0);\n     }\n "}, {"sha": "6ad2d8f8c8d66ec1831ca779ed9cd4fb3cd7a0d5", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b5e65731c094191298254c611ede4370b6e5455a/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5e65731c094191298254c611ede4370b6e5455a/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=b5e65731c094191298254c611ede4370b6e5455a", "patch": "@@ -65,7 +65,7 @@ fn shift_push() {\n     let mut v2 = ~[];\n \n     while v1.len() > 0 {\n-        v2.push(v1.shift());\n+        v2.push(v1.shift().unwrap());\n     }\n }\n "}]}