{"sha": "fd242ee64c5488e64e2bb677d90f2460e017b7cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkMjQyZWU2NGM1NDg4ZTY0ZTJiYjY3N2Q5MGYyNDYwZTAxN2I3Y2I=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-04T17:15:22Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-04-12T20:53:22Z"}, "message": "impl GlobalAlloc for Global", "tree": {"sha": "81f47548b1a0b4e1afafdc7a9a43245e3f30b096", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81f47548b1a0b4e1afafdc7a9a43245e3f30b096"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd242ee64c5488e64e2bb677d90f2460e017b7cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd242ee64c5488e64e2bb677d90f2460e017b7cb", "html_url": "https://github.com/rust-lang/rust/commit/fd242ee64c5488e64e2bb677d90f2460e017b7cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd242ee64c5488e64e2bb677d90f2460e017b7cb/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eae0d468932660ca383e35bb9d8b0cb4943a82ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/eae0d468932660ca383e35bb9d8b0cb4943a82ae", "html_url": "https://github.com/rust-lang/rust/commit/eae0d468932660ca383e35bb9d8b0cb4943a82ae"}], "stats": {"total": 85, "additions": 50, "deletions": 35}, "files": [{"sha": "063f0543ec4a6e9b6b039511e90e9d2d7ccd684a", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 50, "deletions": 35, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/fd242ee64c5488e64e2bb677d90f2460e017b7cb/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd242ee64c5488e64e2bb677d90f2460e017b7cb/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=fd242ee64c5488e64e2bb677d90f2460e017b7cb", "patch": "@@ -73,62 +73,42 @@ pub type Heap = Global;\n #[allow(non_upper_case_globals)]\n pub const Heap: Global = Global;\n \n-unsafe impl Alloc for Global {\n+unsafe impl GlobalAlloc for Global {\n     #[inline]\n-    unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n+    unsafe fn alloc(&self, layout: Layout) -> *mut Void {\n         #[cfg(not(stage0))]\n         let ptr = __rust_alloc(layout.size(), layout.align());\n         #[cfg(stage0)]\n         let ptr = __rust_alloc(layout.size(), layout.align(), &mut 0);\n-\n-        if !ptr.is_null() {\n-            Ok(ptr)\n-        } else {\n-            Err(AllocErr)\n-        }\n+        ptr as *mut Void\n     }\n \n     #[inline]\n-    unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout) {\n-        __rust_dealloc(ptr, layout.size(), layout.align())\n+    unsafe fn dealloc(&self, ptr: *mut Void, layout: Layout) {\n+        __rust_dealloc(ptr as *mut u8, layout.size(), layout.align())\n     }\n \n     #[inline]\n-    unsafe fn realloc(&mut self,\n-                      ptr: *mut u8,\n-                      layout: Layout,\n-                      new_size: usize)\n-                      -> Result<*mut u8, AllocErr>\n-    {\n+    unsafe fn realloc(&self, ptr: *mut Void, layout: Layout, new_size: usize) -> *mut Void {\n         #[cfg(not(stage0))]\n-        let ptr = __rust_realloc(ptr, layout.size(), layout.align(), new_size);\n+        let ptr = __rust_realloc(ptr as *mut u8, layout.size(), layout.align(), new_size);\n         #[cfg(stage0)]\n-        let ptr = __rust_realloc(ptr, layout.size(), layout.align(),\n+        let ptr = __rust_realloc(ptr as *mut u8, layout.size(), layout.align(),\n                                  new_size, layout.align(), &mut 0);\n-\n-        if !ptr.is_null() {\n-            Ok(ptr)\n-        } else {\n-            Err(AllocErr)\n-        }\n+        ptr as *mut Void\n     }\n \n     #[inline]\n-    unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n+    unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut Void {\n         #[cfg(not(stage0))]\n         let ptr = __rust_alloc_zeroed(layout.size(), layout.align());\n         #[cfg(stage0)]\n         let ptr = __rust_alloc_zeroed(layout.size(), layout.align(), &mut 0);\n-\n-        if !ptr.is_null() {\n-            Ok(ptr)\n-        } else {\n-            Err(AllocErr)\n-        }\n+        ptr as *mut Void\n     }\n \n     #[inline]\n-    fn oom(&mut self) -> ! {\n+    fn oom(&self) -> ! {\n         unsafe {\n             #[cfg(not(stage0))]\n             __rust_oom();\n@@ -138,6 +118,38 @@ unsafe impl Alloc for Global {\n     }\n }\n \n+unsafe impl Alloc for Global {\n+    #[inline]\n+    unsafe fn alloc(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n+        GlobalAlloc::alloc(self, layout).into()\n+    }\n+\n+    #[inline]\n+    unsafe fn dealloc(&mut self, ptr: *mut u8, layout: Layout) {\n+        GlobalAlloc::dealloc(self, ptr as *mut Void, layout)\n+    }\n+\n+    #[inline]\n+    unsafe fn realloc(&mut self,\n+                      ptr: *mut u8,\n+                      layout: Layout,\n+                      new_size: usize)\n+                      -> Result<*mut u8, AllocErr>\n+    {\n+        GlobalAlloc::realloc(self, ptr as *mut Void, layout, new_size).into()\n+    }\n+\n+    #[inline]\n+    unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<*mut u8, AllocErr> {\n+        GlobalAlloc::alloc_zeroed(self, layout).into()\n+    }\n+\n+    #[inline]\n+    fn oom(&mut self) -> ! {\n+        GlobalAlloc::oom(self)\n+    }\n+}\n+\n /// The allocator for unique pointers.\n // This function must not unwind. If it does, MIR trans will fail.\n #[cfg(not(test))]\n@@ -148,9 +160,12 @@ unsafe fn exchange_malloc(size: usize, align: usize) -> *mut u8 {\n         align as *mut u8\n     } else {\n         let layout = Layout::from_size_align_unchecked(size, align);\n-        Global.alloc(layout).unwrap_or_else(|_| {\n+        let ptr = Global.alloc(layout);\n+        if !ptr.is_null() {\n+            ptr as *mut u8\n+        } else {\n             Global.oom()\n-        })\n+        }\n     }\n }\n \n@@ -162,7 +177,7 @@ pub(crate) unsafe fn box_free<T: ?Sized>(ptr: *mut T) {\n     // We do not allocate for Box<T> when T is ZST, so deallocation is also not necessary.\n     if size != 0 {\n         let layout = Layout::from_size_align_unchecked(size, align);\n-        Global.dealloc(ptr as *mut u8, layout);\n+        Global.dealloc(ptr as *mut Void, layout);\n     }\n }\n "}]}