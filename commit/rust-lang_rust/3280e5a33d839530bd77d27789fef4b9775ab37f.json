{"sha": "3280e5a33d839530bd77d27789fef4b9775ab37f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyODBlNWEzM2Q4Mzk1MzBiZDc3ZDI3Nzg5ZmVmNGI5Nzc1YWIzN2Y=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-02-27T21:21:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-06T20:12:58Z"}, "message": "Improve error messages when illegal lifetimes are used", "tree": {"sha": "2a96826ee7725f66edae77949f21c5436f7280a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a96826ee7725f66edae77949f21c5436f7280a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3280e5a33d839530bd77d27789fef4b9775ab37f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3280e5a33d839530bd77d27789fef4b9775ab37f", "html_url": "https://github.com/rust-lang/rust/commit/3280e5a33d839530bd77d27789fef4b9775ab37f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3280e5a33d839530bd77d27789fef4b9775ab37f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048", "url": "https://api.github.com/repos/rust-lang/rust/commits/d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048", "html_url": "https://github.com/rust-lang/rust/commit/d26f6eddfde6b9f0e2f011d4666a3f7c98ae1048"}], "stats": {"total": 165, "additions": 109, "deletions": 56}, "files": [{"sha": "606ba59fbf644c4f31551ca082b65c40cc616eb4", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3280e5a33d839530bd77d27789fef4b9775ab37f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3280e5a33d839530bd77d27789fef4b9775ab37f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=3280e5a33d839530bd77d27789fef4b9775ab37f", "patch": "@@ -58,14 +58,14 @@ use middle::ty::{arg, field, substs};\n use middle::ty::{ty_param_substs_and_ty};\n use middle::ty;\n use middle::typeck::rscope::{in_binding_rscope};\n-use middle::typeck::rscope::{region_scope, type_rscope};\n+use middle::typeck::rscope::{region_scope, type_rscope, RegionError};\n use middle::typeck::{CrateCtxt, write_substs_to_tcx, write_ty_to_tcx};\n \n use core::result;\n use core::vec;\n use syntax::ast;\n use syntax::codemap::span;\n-use syntax::print::pprust::path_to_str;\n+use syntax::print::pprust::{region_to_str, path_to_str};\n use util::common::indenter;\n \n pub trait AstConv {\n@@ -76,17 +76,31 @@ pub trait AstConv {\n     fn ty_infer(&self, span: span) -> ty::t;\n }\n \n-pub fn get_region_reporting_err(tcx: ty::ctxt,\n-                                span: span,\n-                                res: Result<ty::Region, ~str>)\n-                             -> ty::Region {\n-\n+pub fn get_region_reporting_err(\n+    tcx: ty::ctxt,\n+    span: span,\n+    a_r: Option<@ast::region>,\n+    res: Result<ty::Region, RegionError>) -> ty::Region\n+{\n     match res {\n-      result::Ok(r) => r,\n-      result::Err(ref e) => {\n-        tcx.sess.span_err(span, (/*bad*/copy *e));\n-        ty::re_static\n-      }\n+        result::Ok(r) => r,\n+        result::Err(ref e) => {\n+            let descr = match a_r {\n+                None => ~\"anonymous lifetime\",\n+                Some(a) if a.node == ast::re_anon => {\n+                    ~\"anonymous lifetime\"\n+                }\n+                Some(a) => {\n+                    fmt!(\"lifetime %s\",\n+                         region_to_str(a, tcx.sess.intr()))\n+                }\n+            };\n+            tcx.sess.span_err(\n+                span,\n+                fmt!(\"Illegal %s: %s\",\n+                     descr, e.msg));\n+            e.replacement\n+        }\n     }\n }\n \n@@ -103,7 +117,7 @@ pub fn ast_region_to_region<AC:AstConv,RS:region_scope + Copy + Durable>(\n         ast::re_named(id) => rscope.named_region(span, id)\n     };\n \n-    get_region_reporting_err(self.tcx(), span, res)\n+    get_region_reporting_err(self.tcx(), span, Some(a_r), res)\n }\n \n pub fn ast_path_to_substs_and_ty<AC:AstConv,RS:region_scope + Copy + Durable>(\n@@ -139,7 +153,7 @@ pub fn ast_path_to_substs_and_ty<AC:AstConv,RS:region_scope + Copy + Durable>(\n       }\n       (Some(_), None) => {\n         let res = rscope.anon_region(path.span);\n-        let r = get_region_reporting_err(self.tcx(), path.span, res);\n+        let r = get_region_reporting_err(self.tcx(), path.span, None, res);\n         Some(r)\n       }\n       (Some(_), Some(r)) => {\n@@ -521,7 +535,7 @@ pub fn ty_of_closure<AC:AstConv,RS:region_scope + Copy + Durable>(\n                 ast::BorrowedSigil => {\n                     // &fn() defaults to an anonymous region:\n                     let r_result = rscope.anon_region(span);\n-                    get_region_reporting_err(self.tcx(), span, r_result)\n+                    get_region_reporting_err(self.tcx(), span, None, r_result)\n                 }\n             }\n         }"}, {"sha": "66c2a28da3d6b4386f6f50c8eb4b41959db41c3e", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 15, "deletions": 10, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3280e5a33d839530bd77d27789fef4b9775ab37f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3280e5a33d839530bd77d27789fef4b9775ab37f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=3280e5a33d839530bd77d27789fef4b9775ab37f", "patch": "@@ -1,4 +1,4 @@\n-n// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -96,6 +96,7 @@ use middle::typeck::CrateCtxt;\n use middle::typeck::infer::{resolve_type, force_tvar};\n use middle::typeck::infer;\n use middle::typeck::rscope::{binding_rscope, bound_self_region};\n+use middle::typeck::rscope::{RegionError};\n use middle::typeck::rscope::{in_binding_rscope, region_scope, type_rscope};\n use middle::typeck::rscope;\n use middle::typeck::{isr_alist, lookup_def_ccx, method_map_entry};\n@@ -651,7 +652,8 @@ pub impl FnCtxt {\n     fn infcx(&self) -> @mut infer::InferCtxt { self.inh.infcx }\n     fn search_in_scope_regions(\n         &self,\n-        br: ty::bound_region) -> Result<ty::Region, ~str>\n+        span: span,\n+        br: ty::bound_region) -> Result<ty::Region, RegionError>\n     {\n         let in_scope_regions = self.in_scope_regions;\n         match in_scope_regions.find(br) {\n@@ -661,25 +663,28 @@ pub impl FnCtxt {\n                 if br == blk_br {\n                     result::Ok(self.block_region())\n                 } else {\n-                    result::Err(fmt!(\"named region `%s` not in scope here\",\n-                                     bound_region_to_str(self.tcx(), br)))\n+                    result::Err(RegionError {\n+                        msg: fmt!(\"named region `%s` not in scope here\",\n+                                  bound_region_to_str(self.tcx(), br)),\n+                        replacement: self.infcx().next_region_var_nb(span)\n+                    })\n                 }\n             }\n         }\n     }\n }\n \n impl region_scope for FnCtxt {\n-    fn anon_region(&self, span: span) -> Result<ty::Region, ~str> {\n+    fn anon_region(&self, span: span) -> Result<ty::Region, RegionError> {\n         result::Ok(self.infcx().next_region_var_nb(span))\n     }\n-    fn self_region(&self, _span: span) -> Result<ty::Region, ~str> {\n-        self.search_in_scope_regions(ty::br_self)\n+    fn self_region(&self, span: span) -> Result<ty::Region, RegionError> {\n+        self.search_in_scope_regions(span, ty::br_self)\n     }\n     fn named_region(&self,\n-                    _span: span,\n-                    id: ast::ident) -> Result<ty::Region, ~str> {\n-        self.search_in_scope_regions(ty::br_named(id))\n+                    span: span,\n+                    id: ast::ident) -> Result<ty::Region, RegionError> {\n+        self.search_in_scope_regions(span, ty::br_named(id))\n     }\n }\n "}, {"sha": "3c342e9986bb503d57878274d1d725291524b31c", "filename": "src/librustc/middle/typeck/rscope.rs", "status": "modified", "additions": 53, "deletions": 23, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/3280e5a33d839530bd77d27789fef4b9775ab37f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3280e5a33d839530bd77d27789fef4b9775ab37f/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Frscope.rs?ref=3280e5a33d839530bd77d27789fef4b9775ab37f", "patch": "@@ -17,24 +17,33 @@ use core::result;\n use syntax::ast;\n use syntax::codemap::span;\n \n+pub struct RegionError {\n+    msg: ~str,\n+    replacement: ty::Region\n+}\n+\n pub trait region_scope {\n-    fn anon_region(&self, span: span) -> Result<ty::Region, ~str>;\n-    fn self_region(&self, span: span) -> Result<ty::Region, ~str>;\n+    fn anon_region(&self, span: span) -> Result<ty::Region, RegionError>;\n+    fn self_region(&self, span: span) -> Result<ty::Region, RegionError>;\n     fn named_region(&self, span: span, id: ast::ident)\n-                      -> Result<ty::Region, ~str>;\n+                      -> Result<ty::Region, RegionError>;\n }\n \n pub enum empty_rscope { empty_rscope }\n impl region_scope for empty_rscope {\n-    fn anon_region(&self, _span: span) -> Result<ty::Region, ~str> {\n-        result::Err(~\"only the static region is allowed here\")\n+    fn anon_region(&self, _span: span) -> Result<ty::Region, RegionError> {\n+        result::Err(RegionError {\n+            msg: ~\"only 'static is allowed here\",\n+            replacement: ty::re_static\n+        })\n     }\n-    fn self_region(&self, _span: span) -> Result<ty::Region, ~str> {\n-        result::Err(~\"only the static region is allowed here\")\n+    fn self_region(&self, _span: span) -> Result<ty::Region, RegionError> {\n+        self.anon_region(_span)\n     }\n     fn named_region(&self, _span: span, _id: ast::ident)\n-        -> Result<ty::Region, ~str> {\n-        result::Err(~\"only the static region is allowed here\")\n+        -> Result<ty::Region, RegionError>\n+    {\n+        self.anon_region(_span)\n     }\n }\n \n@@ -43,38 +52,59 @@ pub struct MethodRscope {\n     region_parameterization: Option<ty::region_variance>\n }\n impl region_scope for MethodRscope {\n-    fn anon_region(&self, _span: span) -> Result<ty::Region, ~str> {\n-        result::Err(~\"anonymous region types are not permitted here\")\n+    fn anon_region(&self, _span: span) -> Result<ty::Region, RegionError> {\n+        result::Err(RegionError {\n+            msg: ~\"anonymous lifetimes are not permitted here\",\n+            replacement: ty::re_bound(ty::br_self)\n+        })\n     }\n-    fn self_region(&self, _span: span) -> Result<ty::Region, ~str> {\n+    fn self_region(&self, _span: span) -> Result<ty::Region, RegionError> {\n         assert self.region_parameterization.is_some() ||\n             self.self_ty.is_borrowed();\n         result::Ok(ty::re_bound(ty::br_self))\n     }\n     fn named_region(&self, span: span, id: ast::ident)\n-                      -> Result<ty::Region, ~str> {\n+                      -> Result<ty::Region, RegionError> {\n         do empty_rscope.named_region(span, id).chain_err |_e| {\n-            result::Err(~\"region is not in scope here\")\n+            result::Err(RegionError {\n+                msg: ~\"lifetime is not in scope\",\n+                replacement: ty::re_bound(ty::br_self)\n+            })\n         }\n     }\n }\n \n pub enum type_rscope = Option<ty::region_variance>;\n+impl type_rscope {\n+    priv fn replacement(&self) -> ty::Region {\n+        if self.is_some() {\n+            ty::re_bound(ty::br_self)\n+        } else {\n+            ty::re_static\n+        }\n+    }\n+}\n impl region_scope for type_rscope {\n-    fn anon_region(&self, _span: span) -> Result<ty::Region, ~str> {\n-        result::Err(~\"anonymous region types are not permitted here\")\n+    fn anon_region(&self, _span: span) -> Result<ty::Region, RegionError> {\n+        result::Err(RegionError {\n+            msg: ~\"anonymous lifetimes are not permitted here\",\n+            replacement: self.replacement()\n+        })\n     }\n-    fn self_region(&self, _span: span) -> Result<ty::Region, ~str> {\n+    fn self_region(&self, _span: span) -> Result<ty::Region, RegionError> {\n         // if the self region is used, region parameterization should\n         // have inferred that this type is RP\n         assert self.is_some();\n         result::Ok(ty::re_bound(ty::br_self))\n     }\n     fn named_region(&self, span: span, id: ast::ident)\n-                      -> Result<ty::Region, ~str> {\n+                      -> Result<ty::Region, RegionError> {\n         do empty_rscope.named_region(span, id).chain_err |_e| {\n-            result::Err(~\"named regions other than `self` are not \\\n-                          allowed as part of a type declaration\")\n+            result::Err(RegionError {\n+                msg: ~\"only 'self is allowed allowed as \\\n+                       part of a type declaration\",\n+                replacement: self.replacement()\n+            })\n         }\n     }\n }\n@@ -98,17 +128,17 @@ pub fn in_binding_rscope<RS:region_scope + Copy + Durable>(self: &RS)\n     binding_rscope { base: base, anon_bindings: @mut 0 }\n }\n impl region_scope for binding_rscope {\n-    fn anon_region(&self, _span: span) -> Result<ty::Region, ~str> {\n+    fn anon_region(&self, _span: span) -> Result<ty::Region, RegionError> {\n         let idx = *self.anon_bindings;\n         *self.anon_bindings += 1;\n         result::Ok(ty::re_bound(ty::br_anon(idx)))\n     }\n-    fn self_region(&self, span: span) -> Result<ty::Region, ~str> {\n+    fn self_region(&self, span: span) -> Result<ty::Region, RegionError> {\n         self.base.self_region(span)\n     }\n     fn named_region(&self,\n                     span: span,\n-                    id: ast::ident) -> Result<ty::Region, ~str>\n+                    id: ast::ident) -> Result<ty::Region, RegionError>\n     {\n         do self.base.named_region(span, id).chain_err |_e| {\n             result::Ok(ty::re_bound(ty::br_named(id)))"}, {"sha": "048f4f098baba592ea292a842178d4255147f8ff", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3280e5a33d839530bd77d27789fef4b9775ab37f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3280e5a33d839530bd77d27789fef4b9775ab37f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=3280e5a33d839530bd77d27789fef4b9775ab37f", "patch": "@@ -147,6 +147,10 @@ pub fn expr_to_str(e: @ast::expr, intr: @ident_interner) -> ~str {\n     to_str(e, print_expr, intr)\n }\n \n+pub fn region_to_str(e: @ast::region, intr: @ident_interner) -> ~str {\n+    to_str(e, |s, e| print_region(s, ~\"&\", e, ~\"\"), intr)\n+}\n+\n pub fn tt_to_str(tt: ast::token_tree, intr: @ident_interner) -> ~str {\n     to_str(tt, print_tt, intr)\n }"}, {"sha": "19dea9a57ee49bc56587074046884b571a0b5f3b", "filename": "src/test/compile-fail/regions-in-consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3280e5a33d839530bd77d27789fef4b9775ab37f/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3280e5a33d839530bd77d27789fef4b9775ab37f/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-consts.rs?ref=3280e5a33d839530bd77d27789fef4b9775ab37f", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const c_x: &'blk int = &22; //~ ERROR only the static region is allowed here\n-const c_y: &int = &22; //~ ERROR only the static region is allowed here\n+const c_x: &'blk int = &22; //~ ERROR Illegal lifetime &blk: only 'static is allowed here\n+const c_y: &int = &22; //~ ERROR Illegal anonymous lifetime: only 'static is allowed here\n const c_z: &'static int = &22;\n \n fn main() {"}, {"sha": "5c2269977d19439631ce4c91adb058ea04288101", "filename": "src/test/compile-fail/regions-in-enums.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3280e5a33d839530bd77d27789fef4b9775ab37f/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3280e5a33d839530bd77d27789fef4b9775ab37f/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs?ref=3280e5a33d839530bd77d27789fef4b9775ab37f", "patch": "@@ -10,15 +10,15 @@\n \n enum yes0<'lt> {\n     // This will eventually be legal (and in fact the only way):\n-    X3(&'lt uint) //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n+    X3(&'lt uint) //~ ERROR Illegal lifetime &lt: only 'self is allowed allowed as part of a type declaration\n }\n \n enum yes1 {\n     X4(&'self uint)\n }\n \n enum yes2 {\n-    X5(&'foo uint) //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n+    X5(&'foo uint) //~ ERROR Illegal lifetime &foo: only 'self is allowed allowed as part of a type declaration\n }\n \n fn main() {}"}, {"sha": "10d7a921ed031eac2726d7d9476cbc1379b06585", "filename": "src/test/compile-fail/regions-in-structs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3280e5a33d839530bd77d27789fef4b9775ab37f/src%2Ftest%2Fcompile-fail%2Fregions-in-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3280e5a33d839530bd77d27789fef4b9775ab37f/src%2Ftest%2Fcompile-fail%2Fregions-in-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-structs.rs?ref=3280e5a33d839530bd77d27789fef4b9775ab37f", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n struct yes0<'self> {\n-  x: &uint, //~ ERROR anonymous region types are not permitted here\n+  x: &uint, //~ ERROR Illegal anonymous lifetime: anonymous lifetimes are not permitted here\n }\n \n struct yes1<'self> {\n   x: &'self uint,\n }\n \n struct yes2<'self> {\n-  x: &'foo uint, //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n+  x: &'foo uint, //~ ERROR Illegal lifetime &foo: only 'self is allowed allowed as part of a type declaration\n }\n \n fn main() {}"}, {"sha": "2397c8f231131e42e48986817b7c7eb8ccaf34d5", "filename": "src/test/compile-fail/regions-in-type-items.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3280e5a33d839530bd77d27789fef4b9775ab37f/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3280e5a33d839530bd77d27789fef4b9775ab37f/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs?ref=3280e5a33d839530bd77d27789fef4b9775ab37f", "patch": "@@ -9,15 +9,15 @@\n // except according to those terms.\n \n type item_ty_yes0 = {\n-    x: &uint //~ ERROR anonymous region types are not permitted here\n+    x: &uint //~ ERROR Illegal anonymous lifetime: anonymous lifetimes are not permitted here\n };\n \n type item_ty_yes1 = {\n     x: &'self uint\n };\n \n type item_ty_yes2 = {\n-    x: &'foo uint //~ ERROR named regions other than `self` are not allowed as part of a type declaration\n+    x: &'foo uint //~ ERROR Illegal lifetime &foo: only 'self is allowed allowed as part of a type declaration\n };\n \n fn main() {}"}]}