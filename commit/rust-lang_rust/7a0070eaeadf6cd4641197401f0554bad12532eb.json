{"sha": "7a0070eaeadf6cd4641197401f0554bad12532eb", "node_id": "C_kwDOAAsO6NoAKDdhMDA3MGVhZWFkZjZjZDQ2NDExOTc0MDFmMDU1NGJhZDEyNTMyZWI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-02T23:02:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-06-02T23:02:42Z"}, "message": "Auto merge of #112228 - compiler-errors:rollup-97i0pli, r=compiler-errors\n\nRollup of 6 pull requests\n\nSuccessful merges:\n\n - #109609 (Separate AnonConst from ConstBlock in HIR.)\n - #112166 (bootstrap: Rename profile = user to profile = dist)\n - #112168 (Lower `unchecked_div`/`_rem` to MIR's `BinOp::Div`/`Rem`)\n - #112183 (Normalize anon consts in new solver)\n - #112211 (pass `--lib` to `x doc`)\n - #112223 (Don't ICE in new solver when auto traits have associated types)\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9e318c68a45ffbb209396b34288b23bfb9cceddb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e318c68a45ffbb209396b34288b23bfb9cceddb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a0070eaeadf6cd4641197401f0554bad12532eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a0070eaeadf6cd4641197401f0554bad12532eb", "html_url": "https://github.com/rust-lang/rust/commit/7a0070eaeadf6cd4641197401f0554bad12532eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a0070eaeadf6cd4641197401f0554bad12532eb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd5d7c729d4e8a59708df64002e09dbcbc4005ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd5d7c729d4e8a59708df64002e09dbcbc4005ba", "html_url": "https://github.com/rust-lang/rust/commit/dd5d7c729d4e8a59708df64002e09dbcbc4005ba"}, {"sha": "18763cb464e911a840ee5bd45093cd3fbadaf52d", "url": "https://api.github.com/repos/rust-lang/rust/commits/18763cb464e911a840ee5bd45093cd3fbadaf52d", "html_url": "https://github.com/rust-lang/rust/commit/18763cb464e911a840ee5bd45093cd3fbadaf52d"}], "stats": {"total": 637, "additions": 408, "deletions": 229}, "files": [{"sha": "f52797c4f3f1dd4cf4a4c23dfae00de8246fc220", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -71,9 +71,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n             let kind = match &e.kind {\n                 ExprKind::Array(exprs) => hir::ExprKind::Array(self.lower_exprs(exprs)),\n-                ExprKind::ConstBlock(anon_const) => {\n-                    let anon_const = self.lower_anon_const(anon_const);\n-                    hir::ExprKind::ConstBlock(anon_const)\n+                ExprKind::ConstBlock(c) => {\n+                    let c = self.with_new_scopes(|this| hir::ConstBlock {\n+                        def_id: this.local_def_id(c.id),\n+                        hir_id: this.lower_node_id(c.id),\n+                        body: this.lower_const_body(c.value.span, Some(&c.value)),\n+                    });\n+                    hir::ExprKind::ConstBlock(c)\n                 }\n                 ExprKind::Repeat(expr, count) => {\n                     let expr = self.lower_expr(expr);"}, {"sha": "ce847906fb99a7f65ee327afccf3ddd313462e34", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -223,6 +223,14 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         });\n     }\n \n+    fn visit_inline_const(&mut self, constant: &'hir ConstBlock) {\n+        self.insert(DUMMY_SP, constant.hir_id, Node::ConstBlock(constant));\n+\n+        self.with_parent(constant.hir_id, |this| {\n+            intravisit::walk_inline_const(this, constant);\n+        });\n+    }\n+\n     fn visit_expr(&mut self, expr: &'hir Expr<'hir>) {\n         self.insert(expr.span, expr.hir_id, Node::Expr(expr));\n "}, {"sha": "1e83c30bd677a2eb6dfc9a6097d7ea1ee07b0cba", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -475,9 +475,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         sym::unchecked_add\n         | sym::unchecked_sub\n         | sym::unchecked_mul\n-        | sym::unchecked_div\n         | sym::exact_div\n-        | sym::unchecked_rem\n         | sym::unchecked_shl\n         | sym::unchecked_shr => {\n             intrinsic_args!(fx, args => (x, y); intrinsic);\n@@ -487,8 +485,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 sym::unchecked_add => BinOp::Add,\n                 sym::unchecked_sub => BinOp::Sub,\n                 sym::unchecked_mul => BinOp::Mul,\n-                sym::unchecked_div | sym::exact_div => BinOp::Div,\n-                sym::unchecked_rem => BinOp::Rem,\n+                sym::exact_div => BinOp::Div,\n                 sym::unchecked_shl => BinOp::Shl,\n                 sym::unchecked_shr => BinOp::Shr,\n                 _ => unreachable!(),"}, {"sha": "9ac2424e76be03891843f382491152017aaccf49", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -211,8 +211,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 args[1].val.unaligned_volatile_store(bx, dst);\n                 return;\n             }\n-            | sym::unchecked_div\n-            | sym::unchecked_rem\n             | sym::unchecked_shl\n             | sym::unchecked_shr\n             | sym::unchecked_add\n@@ -229,20 +227,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 bx.exactudiv(args[0].immediate(), args[1].immediate())\n                             }\n                         }\n-                        sym::unchecked_div => {\n-                            if signed {\n-                                bx.sdiv(args[0].immediate(), args[1].immediate())\n-                            } else {\n-                                bx.udiv(args[0].immediate(), args[1].immediate())\n-                            }\n-                        }\n-                        sym::unchecked_rem => {\n-                            if signed {\n-                                bx.srem(args[0].immediate(), args[1].immediate())\n-                            } else {\n-                                bx.urem(args[0].immediate(), args[1].immediate())\n-                            }\n-                        }\n                         sym::unchecked_shl => bx.shl(args[0].immediate(), args[1].immediate()),\n                         sym::unchecked_shr => {\n                             if signed {"}, {"sha": "fffb9a7f26487186745025acbe1b52b0dbde4a8b", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -238,9 +238,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | sym::unchecked_shr\n             | sym::unchecked_add\n             | sym::unchecked_sub\n-            | sym::unchecked_mul\n-            | sym::unchecked_div\n-            | sym::unchecked_rem => {\n+            | sym::unchecked_mul => {\n                 let l = self.read_immediate(&args[0])?;\n                 let r = self.read_immediate(&args[1])?;\n                 let bin_op = match intrinsic_name {\n@@ -249,8 +247,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     sym::unchecked_add => BinOp::Add,\n                     sym::unchecked_sub => BinOp::Sub,\n                     sym::unchecked_mul => BinOp::Mul,\n-                    sym::unchecked_div => BinOp::Div,\n-                    sym::unchecked_rem => BinOp::Rem,\n                     _ => bug!(),\n                 };\n                 let (val, overflowed, _ty) = self.overflowing_binary_op(bin_op, &l, &r)?;"}, {"sha": "70fc66947df997d23b384cced4f15ef1f86c54ef", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -1675,6 +1675,14 @@ pub struct AnonConst {\n     pub body: BodyId,\n }\n \n+/// An inline constant expression `const { something }`.\n+#[derive(Copy, Clone, Debug, HashStable_Generic)]\n+pub struct ConstBlock {\n+    pub hir_id: HirId,\n+    pub def_id: LocalDefId,\n+    pub body: BodyId,\n+}\n+\n /// An expression.\n #[derive(Debug, Clone, Copy, HashStable_Generic)]\n pub struct Expr<'hir> {\n@@ -1922,7 +1930,7 @@ pub fn is_range_literal(expr: &Expr<'_>) -> bool {\n #[derive(Debug, Clone, Copy, HashStable_Generic)]\n pub enum ExprKind<'hir> {\n     /// Allow anonymous constants from an inline `const` block\n-    ConstBlock(AnonConst),\n+    ConstBlock(ConstBlock),\n     /// An array (e.g., `[a, b, c, d]`).\n     Array(&'hir [Expr<'hir>]),\n     /// A function call.\n@@ -3641,6 +3649,7 @@ pub enum Node<'hir> {\n     Variant(&'hir Variant<'hir>),\n     Field(&'hir FieldDef<'hir>),\n     AnonConst(&'hir AnonConst),\n+    ConstBlock(&'hir ConstBlock),\n     Expr(&'hir Expr<'hir>),\n     ExprField(&'hir ExprField<'hir>),\n     Stmt(&'hir Stmt<'hir>),\n@@ -3695,6 +3704,7 @@ impl<'hir> Node<'hir> {\n             Node::TypeBinding(b) => Some(b.ident),\n             Node::Param(..)\n             | Node::AnonConst(..)\n+            | Node::ConstBlock(..)\n             | Node::Expr(..)\n             | Node::Stmt(..)\n             | Node::Block(..)\n@@ -3758,7 +3768,7 @@ impl<'hir> Node<'hir> {\n             })\n             | Node::Expr(Expr {\n                 kind:\n-                    ExprKind::ConstBlock(AnonConst { body, .. })\n+                    ExprKind::ConstBlock(ConstBlock { body, .. })\n                     | ExprKind::Closure(Closure { body, .. })\n                     | ExprKind::Repeat(_, ArrayLen::Body(AnonConst { body, .. })),\n                 ..\n@@ -3878,6 +3888,13 @@ impl<'hir> Node<'hir> {\n         this\n     }\n \n+    /// Expect a [`Node::ConstBlock`] or panic.\n+    #[track_caller]\n+    pub fn expect_inline_const(self) -> &'hir ConstBlock {\n+        let Node::ConstBlock(this) = self else { self.expect_failed(\"an inline constant\") };\n+        this\n+    }\n+\n     /// Expect a [`Node::Expr`] or panic.\n     #[track_caller]\n     pub fn expect_expr(self) -> &'hir Expr<'hir> {"}, {"sha": "f84c814bd9278061fcd5f75de11054955b20b2e3", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -335,6 +335,9 @@ pub trait Visitor<'v>: Sized {\n     fn visit_anon_const(&mut self, c: &'v AnonConst) {\n         walk_anon_const(self, c)\n     }\n+    fn visit_inline_const(&mut self, c: &'v ConstBlock) {\n+        walk_inline_const(self, c)\n+    }\n     fn visit_expr(&mut self, ex: &'v Expr<'v>) {\n         walk_expr(self, ex)\n     }\n@@ -679,13 +682,18 @@ pub fn walk_anon_const<'v, V: Visitor<'v>>(visitor: &mut V, constant: &'v AnonCo\n     visitor.visit_nested_body(constant.body);\n }\n \n+pub fn walk_inline_const<'v, V: Visitor<'v>>(visitor: &mut V, constant: &'v ConstBlock) {\n+    visitor.visit_id(constant.hir_id);\n+    visitor.visit_nested_body(constant.body);\n+}\n+\n pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr<'v>) {\n     visitor.visit_id(expression.hir_id);\n     match expression.kind {\n         ExprKind::Array(subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }\n-        ExprKind::ConstBlock(ref anon_const) => visitor.visit_anon_const(anon_const),\n+        ExprKind::ConstBlock(ref const_block) => visitor.visit_inline_const(const_block),\n         ExprKind::Repeat(ref element, ref count) => {\n             visitor.visit_expr(element);\n             visitor.visit_array_length(count)"}, {"sha": "5bd6fcb9612ddf81f5cce690dbfc9af026c1568a", "filename": "compiler/rustc_hir_analysis/src/check/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fregion.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -392,7 +392,7 @@ fn resolve_expr<'tcx>(visitor: &mut RegionResolutionVisitor<'tcx>, expr: &'tcx h\n         // Manually recurse over closures and inline consts, because they are the only\n         // case of nested bodies that share the parent environment.\n         hir::ExprKind::Closure(&hir::Closure { body, .. })\n-        | hir::ExprKind::ConstBlock(hir::AnonConst { body, .. }) => {\n+        | hir::ExprKind::ConstBlock(hir::ConstBlock { body, .. }) => {\n             let body = visitor.tcx.hir().body(body);\n             visitor.visit_body(body);\n         }"}, {"sha": "e92a0dcc1fb1f98b72e681495b2faf0ce1af896e", "filename": "compiler/rustc_hir_analysis/src/collect/generics_of.rs", "status": "modified", "additions": 11, "deletions": 16, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fgenerics_of.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -50,7 +50,7 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Generics {\n                 // We do not allow generic parameters in anon consts if we are inside\n                 // of a const parameter type, e.g. `struct Foo<const N: usize, const M: [u8; N]>` is not allowed.\n                 None\n-            } else if tcx.lazy_normalization() {\n+            } else if tcx.features().generic_const_exprs {\n                 let parent_node = tcx.hir().get_parent(hir_id);\n                 if let Node::Variant(Variant { disr_expr: Some(constant), .. }) = parent_node\n                     && constant.hir_id == hir_id\n@@ -123,9 +123,6 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Generics {\n                     {\n                         Some(parent_def_id.to_def_id())\n                     }\n-                    Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) => {\n-                        Some(tcx.typeck_root_def_id(def_id.to_def_id()))\n-                    }\n                     // Exclude `GlobalAsm` here which cannot have generics.\n                     Node::Expr(&Expr { kind: ExprKind::InlineAsm(asm), .. })\n                         if asm.operands.iter().any(|(op, _op_sp)| match op {\n@@ -142,7 +139,8 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Generics {\n                 }\n             }\n         }\n-        Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure { .. }, .. }) => {\n+        Node::ConstBlock(_)\n+        | Node::Expr(&hir::Expr { kind: hir::ExprKind::Closure { .. }, .. }) => {\n             Some(tcx.typeck_root_def_id(def_id.to_def_id()))\n         }\n         Node::Item(item) => match item.kind {\n@@ -339,17 +337,14 @@ pub(super) fn generics_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::Generics {\n     }\n \n     // provide junk type parameter defs for const blocks.\n-    if let Node::AnonConst(_) = node {\n-        let parent_node = tcx.hir().get_parent(hir_id);\n-        if let Node::Expr(&Expr { kind: ExprKind::ConstBlock(_), .. }) = parent_node {\n-            params.push(ty::GenericParamDef {\n-                index: next_index(),\n-                name: Symbol::intern(\"<const_ty>\"),\n-                def_id: def_id.to_def_id(),\n-                pure_wrt_drop: false,\n-                kind: ty::GenericParamDefKind::Type { has_default: false, synthetic: false },\n-            });\n-        }\n+    if let Node::ConstBlock(_) = node {\n+        params.push(ty::GenericParamDef {\n+            index: next_index(),\n+            name: Symbol::intern(\"<const_ty>\"),\n+            def_id: def_id.to_def_id(),\n+            pure_wrt_drop: false,\n+            kind: ty::GenericParamDefKind::Type { has_default: false, synthetic: false },\n+        });\n     }\n \n     let param_def_id_to_index = params.iter().map(|param| (param.def_id, param.index)).collect();"}, {"sha": "dcb57902928793e7561dd04c9ed78b7d6a656f1b", "filename": "compiler/rustc_hir_analysis/src/collect/predicates_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Fpredicates_of.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -463,7 +463,7 @@ pub(super) fn explicit_predicates_of<'tcx>(\n             }\n         }\n     } else {\n-        if matches!(def_kind, DefKind::AnonConst) && tcx.lazy_normalization() {\n+        if matches!(def_kind, DefKind::AnonConst) && tcx.features().generic_const_exprs {\n             let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n             let parent_def_id = tcx.hir().get_parent_item(hir_id);\n "}, {"sha": "c2b837fcfa6704512bc91d0c4d8c5a91572648b6", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -34,12 +34,6 @@ fn anon_const_type_of<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> Ty<'tcx> {\n         Node::Ty(&Ty { kind: TyKind::Typeof(ref e), .. }) if e.hir_id == hir_id => {\n             return tcx.typeck(def_id).node_type(e.hir_id)\n         }\n-        Node::Expr(&Expr { kind: ExprKind::ConstBlock(ref anon_const), .. })\n-            if anon_const.hir_id == hir_id =>\n-        {\n-            let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n-            return substs.as_inline_const().ty()\n-        }\n         Node::Expr(&Expr { kind: ExprKind::InlineAsm(asm), .. })\n         | Node::Item(&Item { kind: ItemKind::GlobalAsm(asm), .. })\n             if asm.operands.iter().any(|(op, _op_sp)| match op {\n@@ -487,6 +481,11 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n \n         Node::AnonConst(_) => anon_const_type_of(tcx, def_id),\n \n+        Node::ConstBlock(_) => {\n+            let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n+            substs.as_inline_const().ty()\n+        }\n+\n         Node::GenericParam(param) => match &param.kind {\n             GenericParamKind::Type { default: Some(ty), .. }\n             | GenericParamKind::Const { ty, .. } => icx.to_ty(ty),"}, {"sha": "fdbb890ce3d47289bde90c61607e768ca01d396f", "filename": "compiler/rustc_hir_analysis/src/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Foutlives%2Fmod.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -20,7 +20,8 @@ pub fn provide(providers: &mut Providers) {\n fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: LocalDefId) -> &[(ty::Clause<'_>, Span)] {\n     let id = tcx.hir().local_def_id_to_hir_id(item_def_id);\n \n-    if matches!(tcx.def_kind(item_def_id), hir::def::DefKind::AnonConst) && tcx.lazy_normalization()\n+    if matches!(tcx.def_kind(item_def_id), hir::def::DefKind::AnonConst)\n+        && tcx.features().generic_const_exprs\n     {\n         if tcx.hir().opt_const_param_default_param_def_id(id).is_some() {\n             // In `generics_of` we set the generics' parent to be our parent's parent which means that"}, {"sha": "ced46fe426c474bdf33ef3020e768d07f2e6173b", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -84,6 +84,7 @@ impl<'a> State<'a> {\n             Node::ImplItem(a) => self.print_impl_item(a),\n             Node::Variant(a) => self.print_variant(a),\n             Node::AnonConst(a) => self.print_anon_const(a),\n+            Node::ConstBlock(a) => self.print_inline_const(a),\n             Node::Expr(a) => self.print_expr(a),\n             Node::ExprField(a) => self.print_expr_field(&a),\n             Node::Stmt(a) => self.print_stmt(a),\n@@ -1095,10 +1096,10 @@ impl<'a> State<'a> {\n         self.end()\n     }\n \n-    fn print_expr_anon_const(&mut self, anon_const: &hir::AnonConst) {\n+    fn print_inline_const(&mut self, constant: &hir::ConstBlock) {\n         self.ibox(INDENT_UNIT);\n         self.word_space(\"const\");\n-        self.print_anon_const(anon_const);\n+        self.ann.nested(self, Nested::Body(constant.body));\n         self.end()\n     }\n \n@@ -1370,7 +1371,7 @@ impl<'a> State<'a> {\n                 self.print_expr_vec(exprs);\n             }\n             hir::ExprKind::ConstBlock(ref anon_const) => {\n-                self.print_expr_anon_const(anon_const);\n+                self.print_inline_const(anon_const);\n             }\n             hir::ExprKind::Repeat(element, ref count) => {\n                 self.print_expr_repeat(element, count);"}, {"sha": "3c5feb1ba513ddb63112dfd9f0ae757f460d2644", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -348,9 +348,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             ExprKind::DropTemps(e) => self.check_expr_with_expectation(e, expected),\n             ExprKind::Array(args) => self.check_expr_array(args, expected, expr),\n-            ExprKind::ConstBlock(ref anon_const) => {\n-                self.check_expr_const_block(anon_const, expected, expr)\n-            }\n+            ExprKind::ConstBlock(ref block) => self.check_expr_const_block(block, expected, expr),\n             ExprKind::Repeat(element, ref count) => {\n                 self.check_expr_repeat(element, count, expected, expr)\n             }\n@@ -1368,20 +1366,20 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn check_expr_const_block(\n         &self,\n-        anon_const: &'tcx hir::AnonConst,\n+        block: &'tcx hir::ConstBlock,\n         expected: Expectation<'tcx>,\n         _expr: &'tcx hir::Expr<'tcx>,\n     ) -> Ty<'tcx> {\n-        let body = self.tcx.hir().body(anon_const.body);\n+        let body = self.tcx.hir().body(block.body);\n \n         // Create a new function context.\n-        let def_id = anon_const.def_id;\n+        let def_id = block.def_id;\n         let fcx = FnCtxt::new(self, self.param_env.with_const(), def_id);\n         crate::GatherLocalsVisitor::new(&fcx).visit_body(body);\n \n         let ty = fcx.check_expr_with_expectation(&body.value, expected);\n         fcx.require_type_is_sized(ty, body.value.span, traits::ConstSized);\n-        fcx.write_ty(anon_const.hir_id, ty);\n+        fcx.write_ty(block.hir_id, ty);\n         ty\n     }\n "}, {"sha": "786a8c28f998bdc17ed17878ace31ccc091aac3a", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -270,6 +270,7 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n                 | hir::Node::Variant(..)\n                 | hir::Node::Field(..)\n                 | hir::Node::AnonConst(..)\n+                | hir::Node::ConstBlock(..)\n                 | hir::Node::Stmt(..)\n                 | hir::Node::PathSegment(..)\n                 | hir::Node::Ty(..)"}, {"sha": "ed532aa2e8ba8ef2c587146f90c93114bfce1eae", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -227,7 +227,7 @@ impl<'tcx> InferCtxt<'tcx> {\n                 return self.unify_const_variable(vid, a, relation.param_env());\n             }\n             (ty::ConstKind::Unevaluated(..), _) | (_, ty::ConstKind::Unevaluated(..))\n-                if self.tcx.lazy_normalization() =>\n+                if self.tcx.features().generic_const_exprs || self.tcx.trait_solver_next() =>\n             {\n                 relation.register_const_equate_obligation(a, b);\n                 return Ok(b);"}, {"sha": "cbc012c55c3a2b75ac7aae1ff0328c5df7afbeb3", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -1191,7 +1191,7 @@ fn should_encode_type(tcx: TyCtxt<'_>, def_id: LocalDefId, def_kind: DefKind) ->\n \n fn should_encode_const(def_kind: DefKind) -> bool {\n     match def_kind {\n-        DefKind::Const | DefKind::AssocConst | DefKind::AnonConst => true,\n+        DefKind::Const | DefKind::AssocConst | DefKind::AnonConst | DefKind::InlineConst => true,\n \n         DefKind::Struct\n         | DefKind::Union\n@@ -1210,7 +1210,6 @@ fn should_encode_const(def_kind: DefKind) -> bool {\n         | DefKind::Closure\n         | DefKind::Generator\n         | DefKind::ConstParam\n-        | DefKind::InlineConst\n         | DefKind::AssocTy\n         | DefKind::TyParam\n         | DefKind::Trait"}, {"sha": "5f2eb890c4eba551836f81837b205857d802b3f7", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -44,6 +44,7 @@ pub fn associated_body(node: Node<'_>) -> Option<(LocalDefId, BodyId)> {\n         }\n \n         Node::AnonConst(constant) => Some((constant.def_id, constant.body)),\n+        Node::ConstBlock(constant) => Some((constant.def_id, constant.body)),\n \n         _ => None,\n     }\n@@ -240,15 +241,8 @@ impl<'hir> Map<'hir> {\n                     None => bug!(\"constructor node without a constructor\"),\n                 }\n             }\n-            Node::AnonConst(_) => {\n-                let inline = match self.find_parent(hir_id) {\n-                    Some(Node::Expr(&Expr {\n-                        kind: ExprKind::ConstBlock(ref anon_const), ..\n-                    })) if anon_const.hir_id == hir_id => true,\n-                    _ => false,\n-                };\n-                if inline { DefKind::InlineConst } else { DefKind::AnonConst }\n-            }\n+            Node::AnonConst(_) => DefKind::AnonConst,\n+            Node::ConstBlock(_) => DefKind::InlineConst,\n             Node::Field(_) => DefKind::Field,\n             Node::Expr(expr) => match expr.kind {\n                 ExprKind::Closure(Closure { movability: None, .. }) => DefKind::Closure,\n@@ -1060,6 +1054,7 @@ impl<'hir> Map<'hir> {\n             Node::Variant(variant) => variant.span,\n             Node::Field(field) => field.span,\n             Node::AnonConst(constant) => self.body(constant.body).value.span,\n+            Node::ConstBlock(constant) => self.body(constant.body).value.span,\n             Node::Expr(expr) => expr.span,\n             Node::ExprField(field) => field.span,\n             Node::Stmt(stmt) => stmt.span,\n@@ -1289,6 +1284,7 @@ fn hir_id_to_string(map: Map<'_>, id: HirId) -> String {\n             format!(\"{id} (field `{}` in {})\", field.ident, path_str(field.def_id))\n         }\n         Some(Node::AnonConst(_)) => node_str(\"const\"),\n+        Some(Node::ConstBlock(_)) => node_str(\"const\"),\n         Some(Node::Expr(_)) => node_str(\"expr\"),\n         Some(Node::ExprField(_)) => node_str(\"expr field\"),\n         Some(Node::Stmt(_)) => node_str(\"stmt\"),\n@@ -1434,6 +1430,11 @@ impl<'hir> Visitor<'hir> for ItemCollector<'hir> {\n         intravisit::walk_anon_const(self, c)\n     }\n \n+    fn visit_inline_const(&mut self, c: &'hir ConstBlock) {\n+        self.body_owners.push(c.def_id);\n+        intravisit::walk_inline_const(self, c)\n+    }\n+\n     fn visit_expr(&mut self, ex: &'hir Expr<'hir>) {\n         if let ExprKind::Closure(closure) = ex.kind {\n             self.body_owners.push(closure.def_id);"}, {"sha": "1a65f74f4fe22640eafb8e056b6ce4262f6db4a2", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -1273,13 +1273,18 @@ pub enum BinOp {\n     Mul,\n     /// The `/` operator (division)\n     ///\n-    /// Division by zero is UB, because the compiler should have inserted checks\n-    /// prior to this.\n+    /// For integer types, division by zero is UB, as is `MIN / -1` for signed.\n+    /// The compiler should have inserted checks prior to this.\n+    ///\n+    /// Floating-point division by zero is safe, and does not need guards.\n     Div,\n     /// The `%` operator (modulus)\n     ///\n-    /// Using zero as the modulus (second operand) is UB, because the compiler\n-    /// should have inserted checks prior to this.\n+    /// For integer types, using zero as the modulus (second operand) is UB,\n+    /// as is `MIN % -1` for signed.\n+    /// The compiler should have inserted checks prior to this.\n+    ///\n+    /// Floating-point remainder by zero is safe, and does not need guards.\n     Rem,\n     /// The `^` operator (bitwise xor)\n     BitXor,"}, {"sha": "bf6f21968d71b7f04ce733b50882d4498a495af0", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -1015,15 +1015,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         self.query_system.on_disk_cache.as_ref().map_or(Ok(0), |c| c.serialize(self, encoder))\n     }\n \n-    /// If `true`, we should use lazy normalization for constants, otherwise\n-    /// we still evaluate them eagerly.\n-    #[inline]\n-    pub fn lazy_normalization(self) -> bool {\n-        let features = self.features();\n-        // Note: We only use lazy normalization for generic const expressions.\n-        features.generic_const_exprs\n-    }\n-\n     #[inline]\n     pub fn local_crate_exports_generics(self) -> bool {\n         debug_assert!(self.sess.opts.share_generics());"}, {"sha": "7f0c1d53f729a4d20bc8a76493a85a78dd690fcb", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -556,7 +556,7 @@ fn construct_const<'a, 'tcx>(\n             span,\n             ..\n         }) => (*span, ty.span),\n-        Node::AnonConst(_) => {\n+        Node::AnonConst(_) | Node::ConstBlock(_) => {\n             let span = tcx.def_span(def);\n             (span, span)\n         }"}, {"sha": "8eeb055ed82d09a3c813ec450c08a27c7b44ee20", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -582,22 +582,15 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n     /// Converts inline const patterns.\n     fn lower_inline_const(\n         &mut self,\n-        anon_const: &'tcx hir::AnonConst,\n+        block: &'tcx hir::ConstBlock,\n         id: hir::HirId,\n         span: Span,\n     ) -> PatKind<'tcx> {\n         let tcx = self.tcx;\n-        let def_id = anon_const.def_id;\n-        let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-        let body_id = match tcx.hir().get(hir_id) {\n-            hir::Node::AnonConst(ac) => ac.body,\n-            _ => span_bug!(\n-                tcx.def_span(def_id.to_def_id()),\n-                \"from_inline_const can only process anonymous constants\"\n-            ),\n-        };\n+        let def_id = block.def_id;\n+        let body_id = block.body;\n         let expr = &tcx.hir().body(body_id).value;\n-        let ty = tcx.typeck(def_id).node_type(hir_id);\n+        let ty = tcx.typeck(def_id).node_type(block.hir_id);\n \n         // Special case inline consts that are just literals. This is solely\n         // a performance optimization, as we could also just go through the regular"}, {"sha": "2f851cd1eb5f7425f3d338653abcb50b0e7779a9", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -421,10 +421,8 @@ impl<'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'_, 'tcx> {\n         intravisit::walk_block(self, block);\n     }\n \n-    fn visit_anon_const(&mut self, c: &'tcx hir::AnonConst) {\n-        if matches!(self.tcx.def_kind(c.def_id), DefKind::InlineConst) {\n-            self.visit_body(self.tcx.hir().body(c.body))\n-        }\n+    fn visit_inline_const(&mut self, c: &'tcx hir::ConstBlock) {\n+        self.visit_body(self.tcx.hir().body(c.body))\n     }\n \n     fn visit_fn("}, {"sha": "3a7d58f7125680a76dad7530abc8e14cfd2626fc", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -82,30 +82,35 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         drop(args);\n                         terminator.kind = TerminatorKind::Goto { target };\n                     }\n-                    sym::wrapping_add | sym::wrapping_sub | sym::wrapping_mul => {\n-                        if let Some(target) = *target {\n-                            let lhs;\n-                            let rhs;\n-                            {\n-                                let mut args = args.drain(..);\n-                                lhs = args.next().unwrap();\n-                                rhs = args.next().unwrap();\n-                            }\n-                            let bin_op = match intrinsic_name {\n-                                sym::wrapping_add => BinOp::Add,\n-                                sym::wrapping_sub => BinOp::Sub,\n-                                sym::wrapping_mul => BinOp::Mul,\n-                                _ => bug!(\"unexpected intrinsic\"),\n-                            };\n-                            block.statements.push(Statement {\n-                                source_info: terminator.source_info,\n-                                kind: StatementKind::Assign(Box::new((\n-                                    *destination,\n-                                    Rvalue::BinaryOp(bin_op, Box::new((lhs, rhs))),\n-                                ))),\n-                            });\n-                            terminator.kind = TerminatorKind::Goto { target };\n+                    sym::wrapping_add\n+                    | sym::wrapping_sub\n+                    | sym::wrapping_mul\n+                    | sym::unchecked_div\n+                    | sym::unchecked_rem => {\n+                        let target = target.unwrap();\n+                        let lhs;\n+                        let rhs;\n+                        {\n+                            let mut args = args.drain(..);\n+                            lhs = args.next().unwrap();\n+                            rhs = args.next().unwrap();\n                         }\n+                        let bin_op = match intrinsic_name {\n+                            sym::wrapping_add => BinOp::Add,\n+                            sym::wrapping_sub => BinOp::Sub,\n+                            sym::wrapping_mul => BinOp::Mul,\n+                            sym::unchecked_div => BinOp::Div,\n+                            sym::unchecked_rem => BinOp::Rem,\n+                            _ => bug!(\"unexpected intrinsic\"),\n+                        };\n+                        block.statements.push(Statement {\n+                            source_info: terminator.source_info,\n+                            kind: StatementKind::Assign(Box::new((\n+                                *destination,\n+                                Rvalue::BinaryOp(bin_op, Box::new((lhs, rhs))),\n+                            ))),\n+                        });\n+                        terminator.kind = TerminatorKind::Goto { target };\n                     }\n                     sym::add_with_overflow | sym::sub_with_overflow | sym::mul_with_overflow => {\n                         if let Some(target) = *target {"}, {"sha": "fc437c429fbeba6298e837dae9f41204cbdb3479", "filename": "compiler/rustc_passes/src/check_const.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_const.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -199,6 +199,11 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n         self.recurse_into(kind, None, |this| intravisit::walk_anon_const(this, anon));\n     }\n \n+    fn visit_inline_const(&mut self, block: &'tcx hir::ConstBlock) {\n+        let kind = Some(hir::ConstContext::Const);\n+        self.recurse_into(kind, None, |this| intravisit::walk_inline_const(this, block));\n+    }\n+\n     fn visit_body(&mut self, body: &'tcx hir::Body<'tcx>) {\n         let owner = self.tcx.hir().body_owner_def_id(body.id());\n         let kind = self.tcx.hir().body_const_context(owner);"}, {"sha": "d5ac1cd9ce3355fac0a2e206f6a96d79ec82e2e1", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -500,6 +500,17 @@ impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n \n         self.in_pat = in_pat;\n     }\n+\n+    fn visit_inline_const(&mut self, c: &'tcx hir::ConstBlock) {\n+        // When inline const blocks are used in pattern position, paths\n+        // referenced by it should be considered as used.\n+        let in_pat = mem::replace(&mut self.in_pat, false);\n+\n+        self.live_symbols.insert(c.def_id);\n+        intravisit::walk_inline_const(self, c);\n+\n+        self.in_pat = in_pat;\n+    }\n }\n \n fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {"}, {"sha": "7c64df6a50ecf5738a7965d5cb6b24e019dc8a75", "filename": "compiler/rustc_passes/src/loops.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_passes%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Floops.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -24,7 +24,7 @@ enum Context {\n     Closure(Span),\n     AsyncClosure(Span),\n     LabeledBlock,\n-    AnonConst,\n+    Constant,\n }\n \n #[derive(Copy, Clone)]\n@@ -53,7 +53,11 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n     }\n \n     fn visit_anon_const(&mut self, c: &'hir hir::AnonConst) {\n-        self.with_context(AnonConst, |v| intravisit::walk_anon_const(v, c));\n+        self.with_context(Constant, |v| intravisit::walk_anon_const(v, c));\n+    }\n+\n+    fn visit_inline_const(&mut self, c: &'hir hir::ConstBlock) {\n+        self.with_context(Constant, |v| intravisit::walk_inline_const(v, c));\n     }\n \n     fn visit_expr(&mut self, e: &'hir hir::Expr<'hir>) {\n@@ -192,7 +196,7 @@ impl<'a, 'hir> CheckLoopVisitor<'a, 'hir> {\n             AsyncClosure(closure_span) => {\n                 self.sess.emit_err(BreakInsideAsyncBlock { span, closure_span, name });\n             }\n-            Normal | AnonConst => {\n+            Normal | Constant => {\n                 self.sess.emit_err(OutsideLoop { span, name, is_break: name == \"break\" });\n             }\n         }"}, {"sha": "bc93b9e99ad44f8056c08409b7ca0de045ecab01", "filename": "compiler/rustc_trait_selection/src/solve/eval_ctxt.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Feval_ctxt.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -322,10 +322,13 @@ impl<'a, 'tcx> EvalCtxt<'a, 'tcx> {\n                 ty::PredicateKind::Ambiguous => {\n                     self.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS)\n                 }\n-                // FIXME: implement these predicates :)\n-                ty::PredicateKind::ConstEvaluatable(_) | ty::PredicateKind::ConstEquate(_, _) => {\n+                // FIXME: implement this predicate :)\n+                ty::PredicateKind::ConstEvaluatable(_) => {\n                     self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n                 }\n+                ty::PredicateKind::ConstEquate(_, _) => {\n+                    bug!(\"ConstEquate should not be emitted when `-Ztrait-solver=next` is active\")\n+                }\n                 ty::PredicateKind::TypeWellFormedFromEnv(..) => {\n                     bug!(\"TypeWellFormedFromEnv is only used for Chalk\")\n                 }\n@@ -772,4 +775,21 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         }\n         values\n     }\n+\n+    // Try to evaluate a const, or return `None` if the const is too generic.\n+    // This doesn't mean the const isn't evaluatable, though, and should be treated\n+    // as an ambiguity rather than no-solution.\n+    pub(super) fn try_const_eval_resolve(\n+        &self,\n+        param_env: ty::ParamEnv<'tcx>,\n+        unevaluated: ty::UnevaluatedConst<'tcx>,\n+        ty: Ty<'tcx>,\n+    ) -> Option<ty::Const<'tcx>> {\n+        use rustc_middle::mir::interpret::ErrorHandled;\n+        match self.infcx.try_const_eval_resolve(param_env, unevaluated, ty, None) {\n+            Ok(ct) => Some(ct),\n+            Err(ErrorHandled::Reported(e)) => Some(self.tcx().const_error(ty, e.into())),\n+            Err(ErrorHandled::TooGeneric) => None,\n+        }\n+    }\n }"}, {"sha": "212327448c874d97c0070df51ed576b92cebbac8", "filename": "compiler/rustc_trait_selection/src/solve/fulfill.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ffulfill.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -118,16 +118,6 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n                                         TypeError::Sorts(expected_found),\n                                     )\n                                 }\n-                                ty::PredicateKind::ConstEquate(a, b) => {\n-                                    let (a, b) = infcx.instantiate_binder_with_placeholders(\n-                                        goal.predicate.kind().rebind((a, b)),\n-                                    );\n-                                    let expected_found = ExpectedFound::new(true, a, b);\n-                                    FulfillmentErrorCode::CodeConstEquateError(\n-                                        expected_found,\n-                                        TypeError::ConstMismatch(expected_found),\n-                                    )\n-                                }\n                                 ty::PredicateKind::Clause(_)\n                                 | ty::PredicateKind::WellFormed(_)\n                                 | ty::PredicateKind::ObjectSafe(_)\n@@ -138,7 +128,8 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentCtxt<'tcx> {\n                                         SelectionError::Unimplemented,\n                                     )\n                                 }\n-                                ty::PredicateKind::TypeWellFormedFromEnv(_) => {\n+                                ty::PredicateKind::ConstEquate(..)\n+                                | ty::PredicateKind::TypeWellFormedFromEnv(_) => {\n                                     bug!(\"unexpected goal: {goal:?}\")\n                                 }\n                             },"}, {"sha": "242f9ba87473fb6768fc38b21753c803cb0be69c", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 58, "deletions": 21, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -22,25 +22,65 @@ impl<'tcx> EvalCtxt<'_, 'tcx> {\n         &mut self,\n         goal: Goal<'tcx, ProjectionPredicate<'tcx>>,\n     ) -> QueryResult<'tcx> {\n-        match goal.predicate.projection_ty.kind(self.tcx()) {\n-            ty::AliasKind::Projection => {\n+        let def_id = goal.predicate.def_id();\n+        match self.tcx().def_kind(def_id) {\n+            DefKind::AssocTy | DefKind::AssocConst => {\n                 // To only compute normalization once for each projection we only\n-                // normalize if the expected term is an unconstrained inference variable.\n+                // assemble normalization candidates if the expected term is an\n+                // unconstrained inference variable.\n+                //\n+                // Why: For better cache hits, since if we have an unconstrained RHS then\n+                // there are only as many cache keys as there are (canonicalized) alias\n+                // types in each normalizes-to goal. This also weakens inference in a\n+                // forwards-compatible way so we don't use the value of the RHS term to\n+                // affect candidate assembly for projections.\n                 //\n                 // E.g. for `<T as Trait>::Assoc == u32` we recursively compute the goal\n                 // `exists<U> <T as Trait>::Assoc == U` and then take the resulting type for\n                 // `U` and equate it with `u32`. This means that we don't need a separate\n-                // projection cache in the solver.\n+                // projection cache in the solver, since we're piggybacking off of regular\n+                // goal caching.\n                 if self.term_is_fully_unconstrained(goal) {\n-                    let candidates = self.assemble_and_evaluate_candidates(goal);\n-                    self.merge_candidates(candidates)\n+                    match self.tcx().associated_item(def_id).container {\n+                        ty::AssocItemContainer::TraitContainer => {\n+                            let candidates = self.assemble_and_evaluate_candidates(goal);\n+                            self.merge_candidates(candidates)\n+                        }\n+                        ty::AssocItemContainer::ImplContainer => {\n+                            bug!(\"IATs not supported here yet\")\n+                        }\n+                    }\n                 } else {\n                     self.set_normalizes_to_hack_goal(goal);\n                     self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n                 }\n             }\n-            ty::AliasKind::Opaque => self.normalize_opaque_type(goal),\n-            ty::AliasKind::Inherent => bug!(\"IATs not supported here yet\"),\n+            DefKind::AnonConst => self.normalize_anon_const(goal),\n+            DefKind::OpaqueTy => self.normalize_opaque_type(goal),\n+            kind => bug!(\"unknown DefKind {} in projection goal: {goal:#?}\", kind.descr(def_id)),\n+        }\n+    }\n+\n+    #[instrument(level = \"debug\", skip(self), ret)]\n+    fn normalize_anon_const(\n+        &mut self,\n+        goal: Goal<'tcx, ty::ProjectionPredicate<'tcx>>,\n+    ) -> QueryResult<'tcx> {\n+        if let Some(normalized_const) = self.try_const_eval_resolve(\n+            goal.param_env,\n+            ty::UnevaluatedConst::new(\n+                goal.predicate.projection_ty.def_id,\n+                goal.predicate.projection_ty.substs,\n+            ),\n+            self.tcx()\n+                .type_of(goal.predicate.projection_ty.def_id)\n+                .no_bound_vars()\n+                .expect(\"const ty should not rely on other generics\"),\n+        ) {\n+            self.eq(goal.param_env, normalized_const, goal.predicate.term.ct().unwrap())?;\n+            self.evaluate_added_goals_and_make_canonical_response(Certainty::Yes)\n+        } else {\n+            self.evaluate_added_goals_and_make_canonical_response(Certainty::AMBIGUOUS)\n         }\n     }\n }\n@@ -173,17 +213,10 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n             );\n \n             // Finally we construct the actual value of the associated type.\n-            let is_const = matches!(tcx.def_kind(assoc_def.item.def_id), DefKind::AssocConst);\n-            let ty = tcx.type_of(assoc_def.item.def_id);\n-            let term: ty::EarlyBinder<ty::Term<'tcx>> = if is_const {\n-                let identity_substs =\n-                    ty::InternalSubsts::identity_for_item(tcx, assoc_def.item.def_id);\n-                let did = assoc_def.item.def_id;\n-                let kind =\n-                    ty::ConstKind::Unevaluated(ty::UnevaluatedConst::new(did, identity_substs));\n-                ty.map_bound(|ty| tcx.mk_const(kind, ty).into())\n-            } else {\n-                ty.map_bound(|ty| ty.into())\n+            let term = match assoc_def.item.kind {\n+                ty::AssocKind::Type => tcx.type_of(assoc_def.item.def_id).map_bound(|ty| ty.into()),\n+                ty::AssocKind::Const => bug!(\"associated const projection is not supported yet\"),\n+                ty::AssocKind::Fn => unreachable!(\"we should never project to a fn\"),\n             };\n \n             ecx.eq(goal.param_env, goal.predicate.term, term.subst(tcx, substs))\n@@ -193,10 +226,14 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n     }\n \n     fn consider_auto_trait_candidate(\n-        _ecx: &mut EvalCtxt<'_, 'tcx>,\n+        ecx: &mut EvalCtxt<'_, 'tcx>,\n         goal: Goal<'tcx, Self>,\n     ) -> QueryResult<'tcx> {\n-        bug!(\"auto traits do not have associated types: {:?}\", goal);\n+        ecx.tcx().sess.delay_span_bug(\n+            ecx.tcx().def_span(goal.predicate.def_id()),\n+            \"associated types not allowed on auto traits\",\n+        );\n+        Err(NoSolution)\n     }\n \n     fn consider_trait_alias_candidate("}, {"sha": "563cc257e034981c82dcfa3ca92926f3979e3172", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -672,7 +672,9 @@ impl<'a, 'b, 'tcx> TypeFolder<TyCtxt<'tcx>> for AssocTypeNormalizer<'a, 'b, 'tcx\n     #[instrument(skip(self), level = \"debug\")]\n     fn fold_const(&mut self, constant: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         let tcx = self.selcx.tcx();\n-        if tcx.lazy_normalization() || !needs_normalization(&constant, self.param_env.reveal()) {\n+        if tcx.features().generic_const_exprs\n+            || !needs_normalization(&constant, self.param_env.reveal())\n+        {\n             constant\n         } else {\n             let constant = constant.super_fold_with(self);"}, {"sha": "fe2d1fba7fe6ec40a36de4b0b151ff9a31bd4011", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -186,6 +186,7 @@ fn param_env(tcx: TyCtxt<'_>, def_id: DefId) -> ty::ParamEnv<'_> {\n                 kind: hir::TraitItemKind::Const(..), ..\n             })\n             | hir::Node::AnonConst(_)\n+            | hir::Node::ConstBlock(_)\n             | hir::Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(..), .. })\n             | hir::Node::ImplItem(hir::ImplItem {\n                 kind:"}, {"sha": "d6210ed59c4d14058a054a2f55c7c71df21ff3de", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -834,6 +834,7 @@ macro_rules! tool_doc {\n                 cargo.arg(\"-Zskip-rustdoc-fingerprint\");\n                 // Only include compiler crates, no dependencies of those, such as `libc`.\n                 cargo.arg(\"--no-deps\");\n+                cargo.arg(\"--lib\");\n                 $(\n                     cargo.arg(\"-p\").arg($krate);\n                 )+"}, {"sha": "9b26d3f0a66c3a1148f43a663f613d35210a630a", "filename": "src/bootstrap/setup.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/src%2Fbootstrap%2Fsetup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/src%2Fbootstrap%2Fsetup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fsetup.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -20,7 +20,7 @@ pub enum Profile {\n     Codegen,\n     Library,\n     Tools,\n-    User,\n+    Dist,\n     None,\n }\n \n@@ -42,7 +42,7 @@ impl Profile {\n     pub fn all() -> impl Iterator<Item = Self> {\n         use Profile::*;\n         // N.B. these are ordered by how they are displayed, not alphabetically\n-        [Library, Compiler, Codegen, Tools, User, None].iter().copied()\n+        [Library, Compiler, Codegen, Tools, Dist, None].iter().copied()\n     }\n \n     pub fn purpose(&self) -> String {\n@@ -52,7 +52,7 @@ impl Profile {\n             Compiler => \"Contribute to the compiler itself\",\n             Codegen => \"Contribute to the compiler, and also modify LLVM or codegen\",\n             Tools => \"Contribute to tools which depend on the compiler, but do not modify it directly (e.g. rustdoc, clippy, miri)\",\n-            User => \"Install Rust from source\",\n+            Dist => \"Install Rust from source\",\n             None => \"Do not modify `config.toml`\"\n         }\n         .to_string()\n@@ -72,7 +72,7 @@ impl Profile {\n             Profile::Codegen => \"codegen\",\n             Profile::Library => \"library\",\n             Profile::Tools => \"tools\",\n-            Profile::User => \"user\",\n+            Profile::Dist => \"dist\",\n             Profile::None => \"none\",\n         }\n     }\n@@ -86,7 +86,7 @@ impl FromStr for Profile {\n             \"lib\" | \"library\" => Ok(Profile::Library),\n             \"compiler\" => Ok(Profile::Compiler),\n             \"llvm\" | \"codegen\" => Ok(Profile::Codegen),\n-            \"maintainer\" | \"user\" => Ok(Profile::User),\n+            \"maintainer\" | \"dist\" => Ok(Profile::Dist),\n             \"tools\" | \"tool\" | \"rustdoc\" | \"clippy\" | \"miri\" | \"rustfmt\" | \"rls\" => {\n                 Ok(Profile::Tools)\n             }\n@@ -159,7 +159,7 @@ pub fn setup(config: &Config, profile: Profile) {\n             \"test src/tools/rustfmt\",\n         ],\n         Profile::Library => &[\"check\", \"build\", \"test library/std\", \"doc\"],\n-        Profile::User => &[\"dist\", \"build\"],\n+        Profile::Dist => &[\"dist\", \"build\"],\n     };\n \n     println!();\n@@ -169,7 +169,7 @@ pub fn setup(config: &Config, profile: Profile) {\n         println!(\"- `x.py {}`\", cmd);\n     }\n \n-    if profile != Profile::User {\n+    if profile != Profile::Dist {\n         println!(\n             \"For more suggestions, see https://rustc-dev-guide.rust-lang.org/building/suggested.html\"\n         );"}, {"sha": "3530f4a807f2c295447f8287760353aecbcf9c85", "filename": "tests/mir-opt/lower_intrinsics.align_of.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -7,7 +7,7 @@\n       bb0: {\n -         _0 = std::intrinsics::min_align_of::<T>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:42\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:21:5: 21:40\n+-                                          // + span: $DIR/lower_intrinsics.rs:27:5: 27:40\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::min_align_of::<T>}, val: Value(<ZST>) }\n +         _0 = AlignOf(T);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:42\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:42"}, {"sha": "158ce62e209c250cbc73049a18ea1d5c143d7cf3", "filename": "tests/mir-opt/lower_intrinsics.assume.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -11,7 +11,7 @@\n           StorageLive(_1);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n -         _1 = std::intrinsics::assume(const true) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:106:9: 106:32\n+-                                          // + span: $DIR/lower_intrinsics.rs:112:9: 112:32\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(bool) {std::intrinsics::assume}, val: Value(<ZST>) }\n +         assume(const true);              // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38"}, {"sha": "6fc9616d855402deaddb8370c3e193ed28f55fdc", "filename": "tests/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -31,7 +31,7 @@\n           _3 = &(*_4);                     // scope 0 at $DIR/lower_intrinsics.rs:+1:42: +1:44\n -         _2 = discriminant_value::<T>(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:82:5: 82:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:88:5: 88:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a T) -> <T as DiscriminantKind>::Discriminant {discriminant_value::<T>}, val: Value(<ZST>) }\n +         _2 = discriminant((*_3));        // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n@@ -46,13 +46,13 @@\n           StorageLive(_7);                 // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n           _19 = const _;                   // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:83:42: 83:44\n+                                           // + span: $DIR/lower_intrinsics.rs:89:42: 89:44\n                                            // + literal: Const { ty: &i32, val: Unevaluated(discriminant, [T], Some(promoted[2])) }\n           _7 = &(*_19);                    // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n           _6 = &(*_7);                     // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n -         _5 = discriminant_value::<i32>(move _6) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:83:5: 83:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:89:5: 89:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a i32) -> <i32 as DiscriminantKind>::Discriminant {discriminant_value::<i32>}, val: Value(<ZST>) }\n +         _5 = discriminant((*_6));        // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n +         goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n@@ -67,13 +67,13 @@\n           StorageLive(_11);                // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n           _18 = const _;                   // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:84:42: 84:45\n+                                           // + span: $DIR/lower_intrinsics.rs:90:42: 90:45\n                                            // + literal: Const { ty: &(), val: Unevaluated(discriminant, [T], Some(promoted[1])) }\n           _11 = &(*_18);                   // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n           _10 = &(*_11);                   // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n -         _9 = discriminant_value::<()>(move _10) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:84:5: 84:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:90:5: 90:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a ()) -> <() as DiscriminantKind>::Discriminant {discriminant_value::<()>}, val: Value(<ZST>) }\n +         _9 = discriminant((*_10));       // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n +         goto -> bb3;                     // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n@@ -88,13 +88,13 @@\n           StorageLive(_15);                // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n           _17 = const _;                   // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:85:42: 85:47\n+                                           // + span: $DIR/lower_intrinsics.rs:91:42: 91:47\n                                            // + literal: Const { ty: &E, val: Unevaluated(discriminant, [T], Some(promoted[0])) }\n           _15 = &(*_17);                   // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n           _14 = &(*_15);                   // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n -         _13 = discriminant_value::<E>(move _14) -> [return: bb4, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:85:5: 85:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:91:5: 91:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a E) -> <E as DiscriminantKind>::Discriminant {discriminant_value::<E>}, val: Value(<ZST>) }\n +         _13 = discriminant((*_14));      // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n +         goto -> bb4;                     // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48"}, {"sha": "5b870ccf5ee2830ffd79f253016ce7f68e0aefd7", "filename": "tests/mir-opt/lower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -49,7 +49,7 @@\n           StorageDead(_9);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:90: +4:91\n -         _3 = copy_nonoverlapping::<i32>(move _4, move _8, const 0_usize) -> [return: bb1, unwind unreachable]; // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:99:9: 99:28\n+-                                          // + span: $DIR/lower_intrinsics.rs:105:9: 105:28\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, *mut i32, usize) {copy_nonoverlapping::<i32>}, val: Value(<ZST>) }\n +         copy_nonoverlapping(dst = move _8, src = move _4, count = const 0_usize); // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n +         goto -> bb1;                     // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95"}, {"sha": "582a79f48d8c87149507dde2b2a155989009448f", "filename": "tests/mir-opt/lower_intrinsics.forget.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -11,7 +11,7 @@\n           _2 = move _1;                    // scope 0 at $DIR/lower_intrinsics.rs:+1:30: +1:31\n -         _0 = std::intrinsics::forget::<T>(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:32\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:26:5: 26:29\n+-                                          // + span: $DIR/lower_intrinsics.rs:32:5: 32:29\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T) {std::intrinsics::forget::<T>}, val: Value(<ZST>) }\n +         _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:32\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:32"}, {"sha": "81ad97077b428a85343fb6ecd2c739cbac1f8e25", "filename": "tests/mir-opt/lower_intrinsics.non_const.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -13,7 +13,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+2:9: +2:18\n           _1 = std::intrinsics::size_of::<T>; // scope 0 at $DIR/lower_intrinsics.rs:+2:21: +2:51\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:37:21: 37:51\n+                                           // + span: $DIR/lower_intrinsics.rs:43:21: 43:51\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}, val: Value(<ZST>) }\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:14\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:14"}, {"sha": "edc66e2c75ce40e64963a06defe9f80c31d0da36", "filename": "tests/mir-opt/lower_intrinsics.option_payload.LowerIntrinsics.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -24,7 +24,7 @@\n           _4 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+2:55: +2:56\n -         _3 = option_payload_ptr::<usize>(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:137:18: 137:54\n+-                                          // + span: $DIR/lower_intrinsics.rs:143:18: 143:54\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Option<usize>) -> *const usize {option_payload_ptr::<usize>}, val: Value(<ZST>) }\n +         _3 = &raw const (((*_4) as Some).0: usize); // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n@@ -37,7 +37,7 @@\n           _6 = &raw const (*_2);           // scope 2 at $DIR/lower_intrinsics.rs:+3:55: +3:56\n -         _5 = option_payload_ptr::<String>(move _6) -> [return: bb2, unwind unreachable]; // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:138:18: 138:54\n+-                                          // + span: $DIR/lower_intrinsics.rs:144:18: 144:54\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Option<String>) -> *const String {option_payload_ptr::<String>}, val: Value(<ZST>) }\n +         _5 = &raw const (((*_6) as Some).0: std::string::String); // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57\n +         goto -> bb2;                     // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57"}, {"sha": "1760efe77d98fde8d6e9f1bbde8e1d30a8af95fe", "filename": "tests/mir-opt/lower_intrinsics.ptr_offset.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -15,7 +15,7 @@\n           _4 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:33: +1:34\n -         _0 = offset::<*const i32, isize>(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:144:5: 144:29\n+-                                          // + span: $DIR/lower_intrinsics.rs:150:5: 150:29\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, isize) -> *const i32 {offset::<*const i32, isize>}, val: Value(<ZST>) }\n +         _0 = Offset(move _3, move _4);   // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35"}, {"sha": "8583766348a6edc3b51a7becdcd8aa1b3300ffc7", "filename": "tests/mir-opt/lower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -13,7 +13,7 @@\n           _2 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n -         _0 = read_via_copy::<i32>(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:119:14: 119:45\n+-                                          // + span: $DIR/lower_intrinsics.rs:125:14: 125:45\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32) -> i32 {read_via_copy::<i32>}, val: Value(<ZST>) }\n +         _0 = (*_2);                      // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48"}, {"sha": "f64bc9dcf620c313741ecdb96a61625da3a9f55b", "filename": "tests/mir-opt/lower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -13,7 +13,7 @@\n           _2 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n -         _0 = read_via_copy::<Never>(move _2) -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:124:14: 124:45\n+-                                          // + span: $DIR/lower_intrinsics.rs:130:14: 130:45\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Never) -> Never {read_via_copy::<Never>}, val: Value(<ZST>) }\n +         unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n       }"}, {"sha": "30b5c78e647c8f717d496108dbcd76366eccf29c", "filename": "tests/mir-opt/lower_intrinsics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -11,6 +11,12 @@ pub fn wrapping(a: i32, b: i32) {\n     let _z = core::intrinsics::wrapping_mul(a, b);\n }\n \n+// EMIT_MIR lower_intrinsics.unchecked.LowerIntrinsics.diff\n+pub unsafe fn unchecked(a: i32, b: i32) {\n+    let _x = core::intrinsics::unchecked_div(a, b);\n+    let _y = core::intrinsics::unchecked_rem(a, b);\n+}\n+\n // EMIT_MIR lower_intrinsics.size_of.LowerIntrinsics.diff\n pub fn size_of<T>() -> usize {\n     core::intrinsics::size_of::<T>()"}, {"sha": "a880df6a5c23608e86a74f60b3b67f41dc510673", "filename": "tests/mir-opt/lower_intrinsics.size_of.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -7,7 +7,7 @@\n       bb0: {\n -         _0 = std::intrinsics::size_of::<T>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:37\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:16:5: 16:35\n+-                                          // + span: $DIR/lower_intrinsics.rs:22:5: 22:35\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}, val: Value(<ZST>) }\n +         _0 = SizeOf(T);                  // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:37\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:37"}, {"sha": "cde7c64c57a56eaa719c7a252cb75a572dcb8666", "filename": "tests/mir-opt/lower_intrinsics.transmute_inhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.transmute_inhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.transmute_inhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_inhabited.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -13,7 +13,7 @@\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n -         _0 = transmute::<std::cmp::Ordering, i8>(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:43:14: 43:33\n+-                                          // + span: $DIR/lower_intrinsics.rs:49:14: 49:33\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(std::cmp::Ordering) -> i8 {transmute::<std::cmp::Ordering, i8>}, val: Value(<ZST>) }\n +         _0 = move _2 as i8 (Transmute);  // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36"}, {"sha": "6fc0f3d3e3fee07fd03c147fb75fd409ef8845c9", "filename": "tests/mir-opt/lower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -13,7 +13,7 @@\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n -         _0 = transmute::<&T, *const T>(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:53:14: 53:33\n+-                                          // + span: $DIR/lower_intrinsics.rs:59:14: 59:33\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&T) -> *const T {transmute::<&T, *const T>}, val: Value(<ZST>) }\n +         _0 = move _2 as *const T (Transmute); // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36"}, {"sha": "e6887a382a2d6c890ea24e0528e79dc4a1972244", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -12,7 +12,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n -         _1 = transmute::<usize, Box<Never>>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:70:25: 70:44\n+-                                          // + span: $DIR/lower_intrinsics.rs:76:25: 76:44\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> Box<Never> {transmute::<usize, Box<Never>>}, val: Value(<ZST>) }\n +         _1 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52"}, {"sha": "b2a44b7c5611477bba53c8952a592aa18d9c2be4", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -12,7 +12,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n -         _1 = transmute::<usize, &mut Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:64:25: 64:44\n+-                                          // + span: $DIR/lower_intrinsics.rs:70:25: 70:44\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> &mut Never {transmute::<usize, &mut Never>}, val: Value(<ZST>) }\n +         _1 = const 1_usize as &mut Never (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52"}, {"sha": "c49d3aeff70b699c889d6a8e78bf909fe40b78ba", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -12,7 +12,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n -         _1 = transmute::<usize, &Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:58:21: 58:40\n+-                                          // + span: $DIR/lower_intrinsics.rs:64:21: 64:40\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> &Never {transmute::<usize, &Never>}, val: Value(<ZST>) }\n +         _1 = const 1_usize as &Never (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48"}, {"sha": "06759d74a3205e44cd86c15a0e96488ba7c6d341", "filename": "tests/mir-opt/lower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -13,7 +13,7 @@\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+1:47: +1:48\n -         _0 = transmute::<(), Never>(move _2) -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:49\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:48:14: 48:46\n+-                                          // + span: $DIR/lower_intrinsics.rs:54:14: 54:46\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Never {transmute::<(), Never>}, val: Value(<ZST>) }\n +         _0 = move _2 as Never (Transmute); // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:49\n +         unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:49"}, {"sha": "9bb43d850ebf327477ee1aa0dc743cc16459faef", "filename": "tests/mir-opt/lower_intrinsics.unchecked.LowerIntrinsics.diff", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.unchecked.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.unchecked.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.unchecked.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -0,0 +1,60 @@\n+- // MIR for `unchecked` before LowerIntrinsics\n++ // MIR for `unchecked` after LowerIntrinsics\n+  \n+  fn unchecked(_1: i32, _2: i32) -> () {\n+      debug a => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:25: +0:26\n+      debug b => _2;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:33: +0:34\n+      let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:41: +0:41\n+      let _3: i32;                         // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:11\n+      let mut _4: i32;                     // in scope 0 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n+      let mut _5: i32;                     // in scope 0 at $DIR/lower_intrinsics.rs:+1:49: +1:50\n+      let mut _7: i32;                     // in scope 0 at $DIR/lower_intrinsics.rs:+2:46: +2:47\n+      let mut _8: i32;                     // in scope 0 at $DIR/lower_intrinsics.rs:+2:49: +2:50\n+      scope 1 {\n+          debug _x => _3;                  // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:11\n+          let _6: i32;                     // in scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:11\n+          scope 2 {\n+              debug _y => _6;              // in scope 2 at $DIR/lower_intrinsics.rs:+2:9: +2:11\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:11\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n+          _4 = _1;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:49: +1:50\n+          _5 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:49: +1:50\n+-         _3 = unchecked_div::<i32>(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:51\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:16:14: 16:45\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i32, i32) -> i32 {unchecked_div::<i32>}, val: Value(<ZST>) }\n++         _3 = Div(move _4, move _5);      // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:51\n++         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:51\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:50: +1:51\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:50: +1:51\n+          StorageLive(_6);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:11\n+          StorageLive(_7);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:46: +2:47\n+          _7 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:46: +2:47\n+          StorageLive(_8);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:49: +2:50\n+          _8 = _2;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:49: +2:50\n+-         _6 = unchecked_rem::<i32>(move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:51\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:17:14: 17:45\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i32, i32) -> i32 {unchecked_rem::<i32>}, val: Value(<ZST>) }\n++         _6 = Rem(move _7, move _8);      // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:51\n++         goto -> bb2;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:51\n+      }\n+  \n+      bb2: {\n+          StorageDead(_8);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:50: +2:51\n+          StorageDead(_7);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:50: +2:51\n+          _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:+0:41: +3:2\n+          StorageDead(_6);                 // scope 1 at $DIR/lower_intrinsics.rs:+3:1: +3:2\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "83c9c508bc0b06afcef4b53d1a649bf7a3727609", "filename": "tests/mir-opt/lower_intrinsics.unreachable.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -13,7 +13,7 @@\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n -         _2 = std::intrinsics::unreachable() -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:31:14: 31:43\n+-                                          // + span: $DIR/lower_intrinsics.rs:37:14: 37:43\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn() -> ! {std::intrinsics::unreachable}, val: Value(<ZST>) }\n +         unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n       }"}, {"sha": "4ae4466a60038f0d9ae420cd4e18195fce61d264", "filename": "tests/mir-opt/lower_intrinsics.with_overflow.LowerIntrinsics.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -32,7 +32,7 @@\n           _5 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:53: +1:54\n -         _3 = add_with_overflow::<i32>(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:55\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:112:14: 112:49\n+-                                          // + span: $DIR/lower_intrinsics.rs:118:14: 118:49\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {add_with_overflow::<i32>}, val: Value(<ZST>) }\n +         _3 = CheckedAdd(move _4, move _5); // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:55\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:55\n@@ -48,7 +48,7 @@\n           _8 = _2;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:53: +2:54\n -         _6 = sub_with_overflow::<i32>(move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:55\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:113:14: 113:49\n+-                                          // + span: $DIR/lower_intrinsics.rs:119:14: 119:49\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {sub_with_overflow::<i32>}, val: Value(<ZST>) }\n +         _6 = CheckedSub(move _7, move _8); // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:55\n +         goto -> bb2;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:55\n@@ -64,7 +64,7 @@\n           _11 = _2;                        // scope 2 at $DIR/lower_intrinsics.rs:+3:53: +3:54\n -         _9 = mul_with_overflow::<i32>(move _10, move _11) -> [return: bb3, unwind unreachable]; // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:55\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:114:14: 114:49\n+-                                          // + span: $DIR/lower_intrinsics.rs:120:14: 120:49\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {mul_with_overflow::<i32>}, val: Value(<ZST>) }\n +         _9 = CheckedMul(move _10, move _11); // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:55\n +         goto -> bb3;                     // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:55"}, {"sha": "2eabd7f626b69accde201eb27c0e825b33d87994", "filename": "tests/mir-opt/lower_intrinsics.write_via_move_string.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.write_via_move_string.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fmir-opt%2Flower_intrinsics.write_via_move_string.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.write_via_move_string.LowerIntrinsics.diff?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -17,7 +17,7 @@\n           _4 = move _2;                    // scope 1 at $DIR/lower_intrinsics.rs:+1:50: +1:51\n -         _0 = write_via_move::<String>(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:52\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:129:14: 129:46\n+-                                          // + span: $DIR/lower_intrinsics.rs:135:14: 135:46\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*mut String, String) {write_via_move::<String>}, val: Value(<ZST>) }\n +         (*_3) = move _4;                 // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:52\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:52"}, {"sha": "a57c6d9b0cbf9c631760bff757a330d5099e9a7c", "filename": "tests/ui/auto-traits/issue-23080-2.current.stderr", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fui%2Fauto-traits%2Fissue-23080-2.current.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fui%2Fauto-traits%2Fissue-23080-2.current.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauto-traits%2Fissue-23080-2.current.stderr?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -1,5 +1,5 @@\n error[E0380]: auto traits cannot have associated items\n-  --> $DIR/issue-23080-2.rs:5:10\n+  --> $DIR/issue-23080-2.rs:8:10\n    |\n LL | unsafe auto trait Trait {\n    |                   ----- auto traits cannot have associated items", "previous_filename": "tests/ui/auto-traits/issue-23080-2.stderr"}, {"sha": "a57c6d9b0cbf9c631760bff757a330d5099e9a7c", "filename": "tests/ui/auto-traits/issue-23080-2.next.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fui%2Fauto-traits%2Fissue-23080-2.next.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fui%2Fauto-traits%2Fissue-23080-2.next.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauto-traits%2Fissue-23080-2.next.stderr?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -0,0 +1,11 @@\n+error[E0380]: auto traits cannot have associated items\n+  --> $DIR/issue-23080-2.rs:8:10\n+   |\n+LL | unsafe auto trait Trait {\n+   |                   ----- auto traits cannot have associated items\n+LL |     type Output;\n+   |     -----^^^^^^- help: remove these associated items\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0380`."}, {"sha": "882b8f3938428e2e7313d94e77c4bdcdf5a604d4", "filename": "tests/ui/auto-traits/issue-23080-2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fui%2Fauto-traits%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fui%2Fauto-traits%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauto-traits%2Fissue-23080-2.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -1,3 +1,6 @@\n+// revisions: current next\n+//[next] compile-flags: -Ztrait-solver=next\n+\n #![feature(auto_traits)]\n #![feature(negative_impls)]\n "}, {"sha": "5077137b09b4b1f3951c8088d0d2117b0350f200", "filename": "tests/ui/traits/new-solver/array-default.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fui%2Ftraits%2Fnew-solver%2Farray-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fui%2Ftraits%2Fnew-solver%2Farray-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Farray-default.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -Ztrait-solver=next\n+// check-pass\n+\n+fn has_default<const N: usize>() where [(); N]: Default {}\n+\n+fn main() {\n+    has_default::<1>();\n+}"}, {"sha": "01899c9ad645f2994c08090a7fad4f19c40068ab", "filename": "tests/ui/traits/new-solver/structural-resolve-field.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fui%2Ftraits%2Fnew-solver%2Fstructural-resolve-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fui%2Ftraits%2Fnew-solver%2Fstructural-resolve-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fstructural-resolve-field.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -1,35 +1,13 @@\n // compile-flags: -Ztrait-solver=next\n // check-pass\n \n+#[derive(Default)]\n struct Foo {\n     x: i32,\n }\n \n-impl MyDefault for Foo {\n-    fn my_default() -> Self {\n-        Self {\n-            x: 0,\n-        }\n-    }\n-}\n-\n-trait MyDefault {\n-    fn my_default() -> Self;\n-}\n-\n-impl MyDefault for [Foo; 0]  {\n-    fn my_default() -> Self {\n-        []\n-    }\n-}\n-impl MyDefault for [Foo; 1] {\n-    fn my_default() -> Self {\n-        [Foo::my_default(); 1]\n-    }\n-}\n-\n fn main() {\n-    let mut xs = <[Foo; 1]>::my_default();\n+    let mut xs = <[Foo; 1]>::default();\n     xs[0].x = 1;\n     (&mut xs[0]).x = 2;\n }"}, {"sha": "072ac32a5de9764cf1daf8bf767d64390e3f09b3", "filename": "tests/ui/traits/new-solver/unevaluated-const-impl-trait-ref.fails.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.fails.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.fails.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.fails.stderr?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `(): Trait<1>` is not satisfied\n+  --> $DIR/unevaluated-const-impl-trait-ref.rs:20:13\n+   |\n+LL |     needs::<1>();\n+   |             ^ the trait `Trait<1>` is not implemented for `()`\n+   |\n+   = help: the following other types implement trait `Trait<N>`:\n+             <() as Trait<0>>\n+             <() as Trait<2>>\n+note: required by a bound in `needs`\n+  --> $DIR/unevaluated-const-impl-trait-ref.rs:10:38\n+   |\n+LL | fn needs<const N: usize>() where (): Trait<N> {}\n+   |                                      ^^^^^^^^ required by this bound in `needs`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "26c595bc974286b45d7a9b916c850721f6a0713f", "filename": "tests/ui/traits/new-solver/unevaluated-const-impl-trait-ref.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a0070eaeadf6cd4641197401f0554bad12532eb/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Funevaluated-const-impl-trait-ref.rs?ref=7a0070eaeadf6cd4641197401f0554bad12532eb", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -Ztrait-solver=next\n+// revisions: works fails\n+//[works] check-pass\n+\n+trait Trait<const N: usize> {}\n+\n+impl Trait<{ 1 - 1 }> for () {}\n+impl Trait<{ 1 + 1 }> for () {}\n+\n+fn needs<const N: usize>() where (): Trait<N> {}\n+\n+#[cfg(works)]\n+fn main() {\n+    needs::<0>();\n+    needs::<2>();\n+}\n+\n+#[cfg(fails)]\n+fn main() {\n+    needs::<1>();\n+    //[fails]~^ ERROR the trait bound `(): Trait<1>` is not satisfied\n+}"}]}