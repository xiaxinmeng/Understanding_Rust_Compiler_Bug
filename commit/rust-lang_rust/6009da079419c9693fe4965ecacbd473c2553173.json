{"sha": "6009da079419c9693fe4965ecacbd473c2553173", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwMDlkYTA3OTQxOWM5NjkzZmU0OTY1ZWNhY2JkNDczYzI1NTMxNzM=", "commit": {"author": {"name": "Gabriel Majeri", "email": "gabriel.majeri6@gmail.com", "date": "2018-09-26T16:19:55Z"}, "committer": {"name": "Gabriel Majeri", "email": "gabriel.majeri6@gmail.com", "date": "2018-10-11T18:11:00Z"}, "message": "Support for disabling the PLT on ELF targets\n\nDisable the PLT where possible to improve performance\nfor indirect calls into shared libraries.\n\nThis optimization is enabled by default where possible.\n\n- Add the `NonLazyBind` attribute to `rustllvm`:\n  This attribute informs LLVM to skip PLT calls in codegen.\n\n- Disable PLT unconditionally:\n  Apply the `NonLazyBind` attribute on every function.\n\n- Only enable no-plt when full relro is enabled:\n  Ensures we only enable it when we have linker support.\n\n- Add `-Z plt` as a compiler option", "tree": {"sha": "6d57deb8d993023a394c62d3fcc23cdd84319453", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d57deb8d993023a394c62d3fcc23cdd84319453"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6009da079419c9693fe4965ecacbd473c2553173", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6009da079419c9693fe4965ecacbd473c2553173", "html_url": "https://github.com/rust-lang/rust/commit/6009da079419c9693fe4965ecacbd473c2553173", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6009da079419c9693fe4965ecacbd473c2553173/comments", "author": {"login": "GabrielMajeri", "id": 3010346, "node_id": "MDQ6VXNlcjMwMTAzNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/3010346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GabrielMajeri", "html_url": "https://github.com/GabrielMajeri", "followers_url": "https://api.github.com/users/GabrielMajeri/followers", "following_url": "https://api.github.com/users/GabrielMajeri/following{/other_user}", "gists_url": "https://api.github.com/users/GabrielMajeri/gists{/gist_id}", "starred_url": "https://api.github.com/users/GabrielMajeri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GabrielMajeri/subscriptions", "organizations_url": "https://api.github.com/users/GabrielMajeri/orgs", "repos_url": "https://api.github.com/users/GabrielMajeri/repos", "events_url": "https://api.github.com/users/GabrielMajeri/events{/privacy}", "received_events_url": "https://api.github.com/users/GabrielMajeri/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GabrielMajeri", "id": 3010346, "node_id": "MDQ6VXNlcjMwMTAzNDY=", "avatar_url": "https://avatars.githubusercontent.com/u/3010346?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GabrielMajeri", "html_url": "https://github.com/GabrielMajeri", "followers_url": "https://api.github.com/users/GabrielMajeri/followers", "following_url": "https://api.github.com/users/GabrielMajeri/following{/other_user}", "gists_url": "https://api.github.com/users/GabrielMajeri/gists{/gist_id}", "starred_url": "https://api.github.com/users/GabrielMajeri/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GabrielMajeri/subscriptions", "organizations_url": "https://api.github.com/users/GabrielMajeri/orgs", "repos_url": "https://api.github.com/users/GabrielMajeri/repos", "events_url": "https://api.github.com/users/GabrielMajeri/events{/privacy}", "received_events_url": "https://api.github.com/users/GabrielMajeri/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2243fabd8f25c46a4a76199f10a2cd9adbb5c418", "url": "https://api.github.com/repos/rust-lang/rust/commits/2243fabd8f25c46a4a76199f10a2cd9adbb5c418", "html_url": "https://github.com/rust-lang/rust/commit/2243fabd8f25c46a4a76199f10a2cd9adbb5c418"}], "stats": {"total": 96, "additions": 89, "deletions": 7}, "files": [{"sha": "d8c36f81da32427bfb86d2775babd1dced494f60", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6009da079419c9693fe4965ecacbd473c2553173/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6009da079419c9693fe4965ecacbd473c2553173/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=6009da079419c9693fe4965ecacbd473c2553173", "patch": "@@ -1387,6 +1387,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n           \"output a json file with profiler results\"),\n     emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n           \"emits a section containing stack size metadata\"),\n+    plt: Option<bool> = (None, parse_opt_bool, [TRACKED],\n+          \"whether to use the PLT when calling into shared libraries;\n+          only has effect for PIC code on systems with ELF binaries\n+          (default: PLT is disabled if full relro is enabled)\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "10a506da4eab44c6cffbc8da7f5405ad357afffd", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6009da079419c9693fe4965ecacbd473c2553173/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6009da079419c9693fe4965ecacbd473c2553173/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=6009da079419c9693fe4965ecacbd473c2553173", "patch": "@@ -40,8 +40,7 @@ use syntax::parse::{self, ParseSess};\n use syntax_pos::{MultiSpan, Span};\n use util::profiling::SelfProfiler;\n \n-use rustc_target::spec::PanicStrategy;\n-use rustc_target::spec::{Target, TargetTriple};\n+use rustc_target::spec::{PanicStrategy, RelroLevel, Target, TargetTriple};\n use rustc_data_structures::flock;\n use jobserver::Client;\n \n@@ -984,6 +983,27 @@ impl Session {\n     pub fn edition(&self) -> Edition {\n         self.opts.edition\n     }\n+\n+    /// True if we cannot skip the PLT for shared library calls.\n+    pub fn needs_plt(&self) -> bool {\n+        // Check if the current target usually needs PLT to be enabled.\n+        // The user can use the command line flag to override it.\n+        let needs_plt = self.target.target.options.needs_plt;\n+\n+        let dbg_opts = &self.opts.debugging_opts;\n+\n+        let relro_level = dbg_opts.relro_level\n+            .unwrap_or(self.target.target.options.relro_level);\n+\n+        // Only enable this optimization by default if full relro is also enabled.\n+        // In this case, lazy binding was already unavailable, so nothing is lost.\n+        // This also ensures `-Wl,-z,now` is supported by the linker.\n+        let full_relro = RelroLevel::Full == relro_level;\n+\n+        // If user didn't explicitly forced us to use / skip the PLT,\n+        // then try to skip it where possible.\n+        dbg_opts.plt.unwrap_or(needs_plt || !full_relro)\n+    }\n }\n \n pub fn build_session("}, {"sha": "c871816c49c58fe73e81f2c22cf9327f165b61ad", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6009da079419c9693fe4965ecacbd473c2553173/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6009da079419c9693fe4965ecacbd473c2553173/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=6009da079419c9693fe4965ecacbd473c2553173", "patch": "@@ -138,6 +138,15 @@ pub fn apply_target_cpu_attr(cx: &CodegenCx<'ll, '_>, llfn: &'ll Value) {\n             target_cpu.as_c_str());\n }\n \n+/// Sets the `NonLazyBind` LLVM attribute on a given function,\n+/// assuming the codegen options allow skipping the PLT.\n+pub fn non_lazy_bind(sess: &Session, llfn: &'ll Value) {\n+    // Don't generate calls through PLT if it's not necessary\n+    if !sess.needs_plt() {\n+        Attribute::NonLazyBind.apply_llfn(Function, llfn);\n+    }\n+}\n+\n /// Composite function which sets LLVM attributes for function depending on its AST (#[attribute])\n /// attributes.\n pub fn from_fn_attrs("}, {"sha": "fdbace4365af13be9dfb5edd6d72bfe8f83f4d7c", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6009da079419c9693fe4965ecacbd473c2553173/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6009da079419c9693fe4965ecacbd473c2553173/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=6009da079419c9693fe4965ecacbd473c2553173", "patch": "@@ -208,6 +208,13 @@ pub unsafe fn create_module(\n         llvm::LLVMRustSetModulePIELevel(llmod);\n     }\n \n+    // If skipping the PLT is enabled, we need to add some module metadata\n+    // to ensure intrinsic calls don't use it.\n+    if !sess.needs_plt() {\n+        let avoid_plt = \"RtLibUseGOT\\0\".as_ptr() as *const _;\n+        llvm::LLVMRustAddModuleFlag(llmod, avoid_plt, 1);\n+    }\n+\n     llmod\n }\n "}, {"sha": "26969e24f0883503d9178699bd9ba32377bc351b", "filename": "src/librustc_codegen_llvm/declare.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6009da079419c9693fe4965ecacbd473c2553173/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6009da079419c9693fe4965ecacbd473c2553173/src%2Flibrustc_codegen_llvm%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdeclare.rs?ref=6009da079419c9693fe4965ecacbd473c2553173", "patch": "@@ -104,6 +104,8 @@ fn declare_raw_fn(\n         attributes::unwind(llfn, false);\n     }\n \n+    attributes::non_lazy_bind(cx.sess(), llfn);\n+\n     llfn\n }\n "}, {"sha": "c9f51efdc50957bbb01e080c50f5165d27ae2f2c", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6009da079419c9693fe4965ecacbd473c2553173/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6009da079419c9693fe4965ecacbd473c2553173/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=6009da079419c9693fe4965ecacbd473c2553173", "patch": "@@ -122,6 +122,7 @@ pub enum Attribute {\n     SanitizeThread  = 20,\n     SanitizeAddress = 21,\n     SanitizeMemory  = 22,\n+    NonLazyBind     = 23,\n }\n \n /// LLVMIntPredicate"}, {"sha": "9c0f945326d148006c8f9cd54e7412d4ea9d92eb", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6009da079419c9693fe4965ecacbd473c2553173/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6009da079419c9693fe4965ecacbd473c2553173/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=6009da079419c9693fe4965ecacbd473c2553173", "patch": "@@ -576,6 +576,9 @@ pub struct TargetOptions {\n     /// the functions in the executable are not randomized and can be used\n     /// during an exploit of a vulnerability in any code.\n     pub position_independent_executables: bool,\n+    /// Determines if the target always requires using the PLT for indirect\n+    /// library calls or not. This controls the default value of the `-Z plt` flag.\n+    pub needs_plt: bool,\n     /// Either partial, full, or off. Full RELRO makes the dynamic linker\n     /// resolve all symbols at startup and marks the GOT read-only before\n     /// starting the program, preventing overwriting the GOT.\n@@ -720,6 +723,7 @@ impl Default for TargetOptions {\n             has_rpath: false,\n             no_default_libraries: true,\n             position_independent_executables: false,\n+            needs_plt: false,\n             relro_level: RelroLevel::None,\n             pre_link_objects_exe: Vec::new(),\n             pre_link_objects_exe_crt: Vec::new(),\n@@ -1009,6 +1013,7 @@ impl Target {\n         key!(has_rpath, bool);\n         key!(no_default_libraries, bool);\n         key!(position_independent_executables, bool);\n+        key!(needs_plt, bool);\n         try!(key!(relro_level, RelroLevel));\n         key!(archive_format);\n         key!(allow_asm, bool);\n@@ -1217,6 +1222,7 @@ impl ToJson for Target {\n         target_option_val!(has_rpath);\n         target_option_val!(no_default_libraries);\n         target_option_val!(position_independent_executables);\n+        target_option_val!(needs_plt);\n         target_option_val!(relro_level);\n         target_option_val!(archive_format);\n         target_option_val!(allow_asm);"}, {"sha": "fd61067ba5168cdd575c6ef826d11ef3e34b8ad0", "filename": "src/librustc_target/spec/x86_64_unknown_linux_gnux32.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6009da079419c9693fe4965ecacbd473c2553173/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6009da079419c9693fe4965ecacbd473c2553173/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnux32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_linux_gnux32.rs?ref=6009da079419c9693fe4965ecacbd473c2553173", "patch": "@@ -17,6 +17,9 @@ pub fn target() -> TargetResult {\n     base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-mx32\".to_string());\n     base.stack_probes = true;\n     base.has_elf_tls = false;\n+    // BUG(GabrielMajeri): disabling the PLT on x86_64 Linux with x32 ABI\n+    // breaks code gen. See LLVM bug 36743\n+    base.needs_plt = true;\n \n     Ok(Target {\n         llvm_target: \"x86_64-unknown-linux-gnux32\".to_string(),"}, {"sha": "2b1bf1c0290812c228099457d3b57df54c6f8cda", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6009da079419c9693fe4965ecacbd473c2553173/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6009da079419c9693fe4965ecacbd473c2553173/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=6009da079419c9693fe4965ecacbd473c2553173", "patch": "@@ -178,6 +178,8 @@ static Attribute::AttrKind fromRust(LLVMRustAttribute Kind) {\n     return Attribute::SanitizeAddress;\n   case SanitizeMemory:\n     return Attribute::SanitizeMemory;\n+  case NonLazyBind:\n+    return Attribute::NonLazyBind;\n   }\n   report_fatal_error(\"bad AttributeKind\");\n }"}, {"sha": "b6fa9a2fa950809b5b52dd42bea14f10e1e112fa", "filename": "src/rustllvm/rustllvm.h", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6009da079419c9693fe4965ecacbd473c2553173/src%2Frustllvm%2Frustllvm.h", "raw_url": "https://github.com/rust-lang/rust/raw/6009da079419c9693fe4965ecacbd473c2553173/src%2Frustllvm%2Frustllvm.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.h?ref=6009da079419c9693fe4965ecacbd473c2553173", "patch": "@@ -97,6 +97,7 @@ enum LLVMRustAttribute {\n   SanitizeThread = 20,\n   SanitizeAddress = 21,\n   SanitizeMemory = 22,\n+  NonLazyBind = 23,\n };\n \n typedef struct OpaqueRustString *RustStringRef;"}, {"sha": "2cf8ce00bfb5d7d8366a67be1584d6f8f4c24c7a", "filename": "src/test/codegen/naked-functions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6009da079419c9693fe4965ecacbd473c2553173/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6009da079419c9693fe4965ecacbd473c2553173/src%2Ftest%2Fcodegen%2Fnaked-functions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fnaked-functions.rs?ref=6009da079419c9693fe4965ecacbd473c2553173", "patch": "@@ -15,7 +15,7 @@\n #![crate_type = \"lib\"]\n #![feature(naked_functions)]\n \n-// CHECK: Function Attrs: naked uwtable\n+// CHECK: Function Attrs: naked\n // CHECK-NEXT: define void @naked_empty()\n #[no_mangle]\n #[naked]\n@@ -24,7 +24,7 @@ pub fn naked_empty() {\n     // CHECK-NEXT: ret void\n }\n \n-// CHECK: Function Attrs: naked uwtable\n+// CHECK: Function Attrs: naked\n #[no_mangle]\n #[naked]\n // CHECK-NEXT: define void @naked_with_args(i{{[0-9]+}})\n@@ -35,7 +35,7 @@ pub fn naked_with_args(a: isize) {\n     // CHECK: ret void\n }\n \n-// CHECK: Function Attrs: naked uwtable\n+// CHECK: Function Attrs: naked\n // CHECK-NEXT: define i{{[0-9]+}} @naked_with_return()\n #[no_mangle]\n #[naked]\n@@ -45,7 +45,7 @@ pub fn naked_with_return() -> isize {\n     0\n }\n \n-// CHECK: Function Attrs: naked uwtable\n+// CHECK: Function Attrs: naked\n // CHECK-NEXT: define i{{[0-9]+}} @naked_with_args_and_return(i{{[0-9]+}})\n #[no_mangle]\n #[naked]\n@@ -57,7 +57,7 @@ pub fn naked_with_args_and_return(a: isize) -> isize {\n     a\n }\n \n-// CHECK: Function Attrs: naked uwtable\n+// CHECK: Function Attrs: naked\n // CHECK-NEXT: define void @naked_recursive()\n #[no_mangle]\n #[naked]"}, {"sha": "8f302e57902c23ca16688753614c2481cff9bff4", "filename": "src/test/codegen/no-plt.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/6009da079419c9693fe4965ecacbd473c2553173/src%2Ftest%2Fcodegen%2Fno-plt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6009da079419c9693fe4965ecacbd473c2553173/src%2Ftest%2Fcodegen%2Fno-plt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fno-plt.rs?ref=6009da079419c9693fe4965ecacbd473c2553173", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -C relocation-model=pic -Z plt=no\n+\n+#![crate_type = \"lib\"]\n+\n+// We need a function which is normally called through the PLT.\n+extern \"C\" {\n+    // CHECK: Function Attrs: nounwind nonlazybind\n+    fn getenv(name: *const u8) -> *mut u8;\n+}\n+\n+// Ensure the function gets referenced.\n+pub unsafe fn call_through_plt() -> *mut u8 {\n+    getenv(b\"\\0\".as_ptr())\n+}\n+\n+// Ensure intrinsics also skip the PLT\n+// CHECK: !\"RtLibUseGOT\""}]}