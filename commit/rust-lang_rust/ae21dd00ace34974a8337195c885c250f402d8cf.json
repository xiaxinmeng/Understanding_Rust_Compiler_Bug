{"sha": "ae21dd00ace34974a8337195c885c250f402d8cf", "node_id": "C_kwDOAAsO6NoAKGFlMjFkZDAwYWNlMzQ5NzRhODMzNzE5NWM4ODVjMjUwZjQwMmQ4Y2Y", "commit": {"author": {"name": "PFPoitras", "email": "patrick.f.poitras@gmail.com", "date": "2021-12-14T01:45:08Z"}, "committer": {"name": "PFPoitras", "email": "patrick.f.poitras@gmail.com", "date": "2021-12-14T01:45:08Z"}, "message": "Remove in_band_lifetimes", "tree": {"sha": "f52306d23acb164589d32aa80fcd8347b5d7f266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f52306d23acb164589d32aa80fcd8347b5d7f266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae21dd00ace34974a8337195c885c250f402d8cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae21dd00ace34974a8337195c885c250f402d8cf", "html_url": "https://github.com/rust-lang/rust/commit/ae21dd00ace34974a8337195c885c250f402d8cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae21dd00ace34974a8337195c885c250f402d8cf/comments", "author": {"login": "Patrick-Poitras", "id": 42386710, "node_id": "MDQ6VXNlcjQyMzg2NzEw", "avatar_url": "https://avatars.githubusercontent.com/u/42386710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Patrick-Poitras", "html_url": "https://github.com/Patrick-Poitras", "followers_url": "https://api.github.com/users/Patrick-Poitras/followers", "following_url": "https://api.github.com/users/Patrick-Poitras/following{/other_user}", "gists_url": "https://api.github.com/users/Patrick-Poitras/gists{/gist_id}", "starred_url": "https://api.github.com/users/Patrick-Poitras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Patrick-Poitras/subscriptions", "organizations_url": "https://api.github.com/users/Patrick-Poitras/orgs", "repos_url": "https://api.github.com/users/Patrick-Poitras/repos", "events_url": "https://api.github.com/users/Patrick-Poitras/events{/privacy}", "received_events_url": "https://api.github.com/users/Patrick-Poitras/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Patrick-Poitras", "id": 42386710, "node_id": "MDQ6VXNlcjQyMzg2NzEw", "avatar_url": "https://avatars.githubusercontent.com/u/42386710?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Patrick-Poitras", "html_url": "https://github.com/Patrick-Poitras", "followers_url": "https://api.github.com/users/Patrick-Poitras/followers", "following_url": "https://api.github.com/users/Patrick-Poitras/following{/other_user}", "gists_url": "https://api.github.com/users/Patrick-Poitras/gists{/gist_id}", "starred_url": "https://api.github.com/users/Patrick-Poitras/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Patrick-Poitras/subscriptions", "organizations_url": "https://api.github.com/users/Patrick-Poitras/orgs", "repos_url": "https://api.github.com/users/Patrick-Poitras/repos", "events_url": "https://api.github.com/users/Patrick-Poitras/events{/privacy}", "received_events_url": "https://api.github.com/users/Patrick-Poitras/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1796de7bb123df3f3d32124ededf1344434f672e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1796de7bb123df3f3d32124ededf1344434f672e", "html_url": "https://github.com/rust-lang/rust/commit/1796de7bb123df3f3d32124ededf1344434f672e"}], "stats": {"total": 129, "additions": 64, "deletions": 65}, "files": [{"sha": "ea54b85b2f20c889162316f7d570f11cffc572ff", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -92,7 +92,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         &self,\n         span: Span,\n         trait_def_id: DefId,\n-        trait_segment: &'a hir::PathSegment<'a>,\n+        trait_segment: &'_ hir::PathSegment<'_>,\n     ) {\n         let trait_def = self.tcx().trait_def(trait_def_id);\n "}, {"sha": "405e4e8594a3ac60bd3d3210a49f57b73b35a4dc", "filename": "compiler/rustc_typeck/src/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2F_match.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -557,7 +557,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n }\n \n-fn arms_contain_ref_bindings(arms: &'tcx [hir::Arm<'tcx>]) -> Option<hir::Mutability> {\n+fn arms_contain_ref_bindings<'tcx>(arms: &'tcx [hir::Arm<'tcx>]) -> Option<hir::Mutability> {\n     arms.iter().filter_map(|a| a.pat.contains_explicit_ref_binding()).max_by_key(|m| match *m {\n         hir::Mutability::Mut => 1,\n         hir::Mutability::Not => 0,"}, {"sha": "fd7b3a55dfb97b59d61bb1e2cca8e3f2c6ae65ce", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -453,7 +453,7 @@ pub(super) fn check_opaque<'tcx>(\n /// Checks that an opaque type does not use `Self` or `T::Foo` projections that would result\n /// in \"inheriting lifetimes\".\n #[instrument(level = \"debug\", skip(tcx, span))]\n-pub(super) fn check_opaque_for_inheriting_lifetimes(\n+pub(super) fn check_opaque_for_inheriting_lifetimes<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n     span: Span,\n@@ -517,7 +517,7 @@ pub(super) fn check_opaque_for_inheriting_lifetimes(\n         }\n     }\n \n-    impl Visitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n+    impl<'tcx> Visitor<'tcx> for ProhibitOpaqueVisitor<'tcx> {\n         type Map = rustc_middle::hir::map::Map<'tcx>;\n \n         fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n@@ -1512,7 +1512,7 @@ pub(super) use wfcheck::check_trait_item as check_trait_item_well_formed;\n \n pub(super) use wfcheck::check_impl_item as check_impl_item_well_formed;\n \n-fn async_opaque_type_cycle_error(tcx: TyCtxt<'tcx>, span: Span) {\n+fn async_opaque_type_cycle_error(tcx: TyCtxt<'_>, span: Span) {\n     struct_span_err!(tcx.sess, span, E0733, \"recursion in an `async fn` requires boxing\")\n         .span_label(span, \"recursive `async fn`\")\n         .note(\"a recursive `async fn` must be rewritten to return a boxed `dyn Future`\")\n@@ -1530,7 +1530,7 @@ fn async_opaque_type_cycle_error(tcx: TyCtxt<'tcx>, span: Span) {\n ///\n /// If all the return expressions evaluate to `!`, then we explain that the error will go away\n /// after changing it. This can happen when a user uses `panic!()` or similar as a placeholder.\n-fn opaque_type_cycle_error(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Span) {\n+fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) {\n     let mut err = struct_span_err!(tcx.sess, span, E0720, \"cannot resolve opaque type\");\n \n     let mut label = false;"}, {"sha": "ac18908e95bcda2ea2430fcbc48cd32a196f0888", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -102,7 +102,7 @@ fn identity(_: Ty<'_>) -> Vec<Adjustment<'_>> {\n     vec![]\n }\n \n-fn simple(kind: Adjust<'tcx>) -> impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>> {\n+fn simple<'tcx>(kind: Adjust<'tcx>) -> impl FnOnce(Ty<'tcx>) -> Vec<Adjustment<'tcx>> {\n     move |target| vec![Adjustment { kind, target }]\n }\n \n@@ -1694,7 +1694,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         err.help(\"you could instead create a new `enum` with a variant for each returned type\");\n     }\n \n-    fn is_return_ty_unsized(&self, fcx: &FnCtxt<'a, 'tcx>, blk_id: hir::HirId) -> bool {\n+    fn is_return_ty_unsized<'a>(&self, fcx: &FnCtxt<'a, 'tcx>, blk_id: hir::HirId) -> bool {\n         if let Some((fn_decl, _)) = fcx.get_fn_decl(blk_id) {\n             if let hir::FnRetTy::Return(ty) = fn_decl.output {\n                 let ty = <dyn AstConv<'_>>::ast_ty_to_ty(fcx, ty);"}, {"sha": "3cc66aaf0d79c3ec8675a7f8c924f6caada1af9c", "filename": "compiler/rustc_typeck/src/check/dropck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fdropck.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -302,7 +302,7 @@ impl<'tcx> SimpleEqRelation<'tcx> {\n     }\n }\n \n-impl TypeRelation<'tcx> for SimpleEqRelation<'tcx> {\n+impl<'tcx> TypeRelation<'tcx> for SimpleEqRelation<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }"}, {"sha": "beb6b371b2bb8de1dba246009a5569c74f96a412", "filename": "compiler/rustc_typeck/src/check/inherited.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Finherited.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -76,7 +76,7 @@ pub struct InheritedBuilder<'tcx> {\n     def_id: LocalDefId,\n }\n \n-impl Inherited<'_, 'tcx> {\n+impl<'tcx> Inherited<'_, 'tcx> {\n     pub fn build(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> InheritedBuilder<'tcx> {\n         let hir_owner = tcx.hir().local_def_id_to_hir_id(def_id).owner;\n \n@@ -97,7 +97,7 @@ impl<'tcx> InheritedBuilder<'tcx> {\n     }\n }\n \n-impl Inherited<'a, 'tcx> {\n+impl<'a, 'tcx> Inherited<'a, 'tcx> {\n     pub(super) fn new(infcx: InferCtxt<'a, 'tcx>, def_id: LocalDefId) -> Self {\n         let tcx = infcx.tcx;\n         let item_id = tcx.hir().local_def_id_to_hir_id(def_id);"}, {"sha": "8392731b28d619df44841895ab084ac2ba9a8fa4", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -1968,7 +1968,7 @@ fn find_use_placement<'tcx>(tcx: TyCtxt<'tcx>, target_module: LocalDefId) -> (Op\n     (span, found_use)\n }\n \n-fn print_disambiguation_help(\n+fn print_disambiguation_help<'tcx>(\n     item_name: Ident,\n     args: Option<&'tcx [hir::Expr<'tcx>]>,\n     err: &mut DiagnosticBuilder<'_>,"}, {"sha": "a9e6b1caff07b03d55d67d979c52368b1031fd6a", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -508,7 +508,7 @@ struct GeneratorTypes<'tcx> {\n \n /// Given a `DefId` for an opaque type in return position, find its parent item's return\n /// expressions.\n-fn get_owner_return_paths(\n+fn get_owner_return_paths<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n ) -> Option<(hir::HirId, ReturnsVisitor<'tcx>)> {\n@@ -906,7 +906,7 @@ struct CheckItemTypesVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n+impl<'tcx> ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n     fn visit_item(&mut self, i: &'tcx hir::Item<'tcx>) {\n         check_item_type(self.tcx, i);\n     }"}, {"sha": "8ebfcdd539b67382d883710ab5c40bf25137309b", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -893,7 +893,7 @@ enum Op {\n }\n \n /// Dereferences a single level of immutable referencing.\n-fn deref_ty_if_possible(ty: Ty<'tcx>) -> Ty<'tcx> {\n+fn deref_ty_if_possible<'tcx>(ty: Ty<'tcx>) -> Ty<'tcx> {\n     match ty.kind() {\n         ty::Ref(_, ty, hir::Mutability::Not) => ty,\n         _ => ty,\n@@ -1007,7 +1007,7 @@ impl<'tcx> TypeVisitor<'tcx> for TypeParamVisitor<'tcx> {\n \n struct TypeParamEraser<'a, 'tcx>(&'a FnCtxt<'a, 'tcx>, Span);\n \n-impl TypeFolder<'tcx> for TypeParamEraser<'_, 'tcx> {\n+impl<'tcx> TypeFolder<'tcx> for TypeParamEraser<'_, 'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.0.tcx\n     }"}, {"sha": "ec06e0b11264d9683f31b944520f7dad3419b202", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -740,7 +740,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn check_pat_path(\n+    fn check_pat_path<'b>(\n         &self,\n         pat: &Pat<'_>,\n         path_resolution: (Res, Option<Ty<'tcx>>, &'b [hir::PathSegment<'b>]),\n@@ -816,7 +816,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         false\n     }\n \n-    fn emit_bad_pat_path(\n+    fn emit_bad_pat_path<'b>(\n         &self,\n         mut e: DiagnosticBuilder<'_>,\n         pat_span: Span,"}, {"sha": "1b42edc83be20d18c07a4d59e12daa896ba565d3", "filename": "compiler/rustc_typeck/src/check/regionck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fregionck.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -106,7 +106,7 @@ macro_rules! ignore_err {\n pub(crate) trait OutlivesEnvironmentExt<'tcx> {\n     fn add_implied_bounds(\n         &mut self,\n-        infcx: &InferCtxt<'a, 'tcx>,\n+        infcx: &InferCtxt<'_, 'tcx>,\n         fn_sig_tys: FxHashSet<Ty<'tcx>>,\n         body_id: hir::HirId,\n         span: Span,\n@@ -130,7 +130,7 @@ impl<'tcx> OutlivesEnvironmentExt<'tcx> for OutlivesEnvironment<'tcx> {\n     /// add those assumptions into the outlives-environment.\n     ///\n     /// Tests: `src/test/ui/regions/regions-free-region-ordering-*.rs`\n-    fn add_implied_bounds(\n+    fn add_implied_bounds<'a>(\n         &mut self,\n         infcx: &InferCtxt<'a, 'tcx>,\n         fn_sig_tys: FxHashSet<Ty<'tcx>>,"}, {"sha": "ffd7d29bbbbeedb9eb52986d8cbfde4910c59653", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -1672,7 +1672,7 @@ fn restrict_repr_packed_field_ref_capture<'tcx>(\n }\n \n /// Returns a Ty that applies the specified capture kind on the provided capture Ty\n-fn apply_capture_kind_on_capture_ty(\n+fn apply_capture_kind_on_capture_ty<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     ty: Ty<'tcx>,\n     capture_kind: UpvarCapture<'tcx>,\n@@ -1685,7 +1685,7 @@ fn apply_capture_kind_on_capture_ty(\n }\n \n /// Returns the Span of where the value with the provided HirId would be dropped\n-fn drop_location_span(tcx: TyCtxt<'tcx>, hir_id: &hir::HirId) -> Span {\n+fn drop_location_span<'tcx>(tcx: TyCtxt<'tcx>, hir_id: &hir::HirId) -> Span {\n     let owner_id = tcx.hir().get_enclosing_scope(*hir_id).unwrap();\n \n     let owner_node = tcx.hir().get(owner_id);\n@@ -1999,7 +1999,7 @@ fn restrict_precision_for_drop_types<'a, 'tcx>(\n /// - No projections are applied to raw pointers, since these require unsafe blocks. We capture\n ///   them completely.\n /// - No projections are applied on top of Union ADTs, since these require unsafe blocks.\n-fn restrict_precision_for_unsafe(\n+fn restrict_precision_for_unsafe<'tcx>(\n     mut place: Place<'tcx>,\n     mut curr_mode: ty::UpvarCapture<'tcx>,\n ) -> (Place<'tcx>, ty::UpvarCapture<'tcx>) {\n@@ -2097,7 +2097,7 @@ fn adjust_for_non_move_closure<'tcx>(\n     (place, kind)\n }\n \n-fn construct_place_string(tcx: TyCtxt<'_>, place: &Place<'tcx>) -> String {\n+fn construct_place_string<'tcx>(tcx: TyCtxt<'_>, place: &Place<'tcx>) -> String {\n     let variable_name = match place.base {\n         PlaceBase::Upvar(upvar_id) => var_name(tcx, upvar_id.var_path.hir_id).to_string(),\n         _ => bug!(\"Capture_information should only contain upvars\"),\n@@ -2120,7 +2120,7 @@ fn construct_place_string(tcx: TyCtxt<'_>, place: &Place<'tcx>) -> String {\n     format!(\"{}[{}]\", variable_name, projections_str)\n }\n \n-fn construct_capture_kind_reason_string(\n+fn construct_capture_kind_reason_string<'tcx>(\n     tcx: TyCtxt<'_>,\n     place: &Place<'tcx>,\n     capture_info: &ty::CaptureInfo<'tcx>,\n@@ -2135,13 +2135,13 @@ fn construct_capture_kind_reason_string(\n     format!(\"{} captured as {} here\", place_str, capture_kind_str)\n }\n \n-fn construct_path_string(tcx: TyCtxt<'_>, place: &Place<'tcx>) -> String {\n+fn construct_path_string<'tcx>(tcx: TyCtxt<'_>, place: &Place<'tcx>) -> String {\n     let place_str = construct_place_string(tcx, place);\n \n     format!(\"{} used here\", place_str)\n }\n \n-fn construct_capture_info_string(\n+fn construct_capture_info_string<'tcx>(\n     tcx: TyCtxt<'_>,\n     place: &Place<'tcx>,\n     capture_info: &ty::CaptureInfo<'tcx>,\n@@ -2233,7 +2233,7 @@ fn migration_suggestion_for_2229(\n /// would've already handled `E1`, and have an existing capture_information for it.\n /// Calling `determine_capture_info(existing_info_e1, current_info_e2)` will return\n /// `existing_info_e1` in this case, allowing us to point to `E1` in case of diagnostics.\n-fn determine_capture_info(\n+fn determine_capture_info<'tcx>(\n     capture_info_a: ty::CaptureInfo<'tcx>,\n     capture_info_b: ty::CaptureInfo<'tcx>,\n ) -> ty::CaptureInfo<'tcx> {\n@@ -2292,7 +2292,7 @@ fn determine_capture_info(\n ///\n /// Note: Capture kind changes from `MutBorrow` to `UniqueImmBorrow` if the truncated part of the `place`\n /// contained `Deref` of `&mut`.\n-fn truncate_place_to_len_and_update_capture_kind(\n+fn truncate_place_to_len_and_update_capture_kind<'tcx>(\n     place: &mut Place<'tcx>,\n     curr_mode: &mut ty::UpvarCapture<'tcx>,\n     len: usize,\n@@ -2330,7 +2330,7 @@ fn truncate_place_to_len_and_update_capture_kind(\n /// `PlaceAncestryRelation::Ancestor` implies Place A is ancestor of Place B\n /// `PlaceAncestryRelation::Descendant` implies Place A is descendant of Place B\n /// `PlaceAncestryRelation::Divergent` implies neither of them is the ancestor of the other.\n-fn determine_place_ancestry_relation(\n+fn determine_place_ancestry_relation<'tcx>(\n     place_a: &Place<'tcx>,\n     place_b: &Place<'tcx>,\n ) -> PlaceAncestryRelation {"}, {"sha": "5c599d70d5c45c5891e73eafaea6c79fa6b27302", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -1450,7 +1450,7 @@ fn check_method_receiver<'fcx, 'tcx>(\n     }\n }\n \n-fn e0307(fcx: &FnCtxt<'fcx, 'tcx>, span: Span, receiver_ty: Ty<'_>) {\n+fn e0307<'fcx, 'tcx> (fcx: &FnCtxt<'fcx, 'tcx>, span: Span, receiver_ty: Ty<'_>) {\n     struct_span_err!(\n         fcx.tcx.sess.diagnostic(),\n         span,\n@@ -1553,7 +1553,7 @@ fn receiver_is_valid<'fcx, 'tcx>(\n     true\n }\n \n-fn receiver_is_implemented(\n+fn receiver_is_implemented<'tcx>(\n     fcx: &FnCtxt<'_, 'tcx>,\n     receiver_trait_def_id: DefId,\n     cause: ObligationCause<'tcx>,\n@@ -1696,13 +1696,13 @@ pub struct CheckTypeWellFormedVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl CheckTypeWellFormedVisitor<'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx>) -> CheckTypeWellFormedVisitor<'tcx> {\n+impl CheckTypeWellFormedVisitor<'_> {\n+    pub fn new(tcx: TyCtxt<'_>) -> CheckTypeWellFormedVisitor<'_> {\n         CheckTypeWellFormedVisitor { tcx }\n     }\n }\n \n-impl ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n+impl<'tcx> ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n     fn visit_item(&self, i: &'tcx hir::Item<'tcx>) {\n         Visitor::visit_item(&mut self.clone(), i);\n     }\n@@ -1720,7 +1720,7 @@ impl ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n     }\n }\n \n-impl Visitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n     type Map = hir_map::Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> hir_visit::NestedVisitorMap<Self::Map> {"}, {"sha": "f63561f0582a65976de63d9a906039146138f5b4", "filename": "compiler/rustc_typeck/src/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck_unused.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -21,7 +21,7 @@ pub fn check_crate(tcx: TyCtxt<'_>) {\n     unused_crates_lint(tcx);\n }\n \n-impl ItemLikeVisitor<'v> for CheckVisitor<'tcx> {\n+impl <'v, 'tcx> ItemLikeVisitor<'v> for CheckVisitor<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n         if item.vis.node.is_pub() || item.span.is_dummy() {\n             return;\n@@ -43,7 +43,7 @@ struct CheckVisitor<'tcx> {\n     used_trait_imports: FxHashSet<LocalDefId>,\n }\n \n-impl CheckVisitor<'tcx> {\n+impl<'tcx> CheckVisitor<'tcx> {\n     fn check_import(&self, item_id: hir::ItemId, span: Span) {\n         if !self.tcx.maybe_unused_trait_import(item_id.def_id) {\n             return;"}, {"sha": "5b277589a3adf78b8ea4855610964fc0ed67a6f6", "filename": "compiler/rustc_typeck/src/coherence/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -108,7 +108,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     }\n }\n \n-fn visit_implementation_of_coerce_unsized(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) {\n+fn visit_implementation_of_coerce_unsized(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n     debug!(\"visit_implementation_of_coerce_unsized: impl_did={:?}\", impl_did);\n \n     // Just compute this for the side-effects, in particular reporting\n@@ -287,7 +287,7 @@ fn visit_implementation_of_dispatch_from_dyn(tcx: TyCtxt<'_>, impl_did: LocalDef\n     })\n }\n \n-pub fn coerce_unsized_info(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedInfo {\n+pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: DefId) -> CoerceUnsizedInfo {\n     debug!(\"compute_coerce_unsized_info(impl_did={:?})\", impl_did);\n \n     // this provider should only get invoked for local def-ids"}, {"sha": "0c38dc5b4bdeba08faa5e8ab5d4c16cfaa61fbbc", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -38,7 +38,7 @@ struct InherentCollect<'tcx> {\n     impls_map: CrateInherentImpls,\n }\n \n-impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n+impl<'v, 'tcx> ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n     fn visit_item(&mut self, item: &hir::Item<'_>) {\n         let (ty, assoc_items) = match item.kind {\n             hir::ItemKind::Impl(hir::Impl { of_trait: None, ref self_ty, items, .. }) => {\n@@ -370,7 +370,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n     fn visit_foreign_item(&mut self, _foreign_item: &hir::ForeignItem<'_>) {}\n }\n \n-impl InherentCollect<'tcx> {\n+impl<'tcx> InherentCollect<'tcx> {\n     fn check_def_id(&mut self, item: &hir::Item<'_>, def_id: DefId) {\n         if let Some(def_id) = def_id.as_local() {\n             // Add the implementation to the mapping from implementation to base"}, {"sha": "18892db4b3aef83f086e71bde70147c82de5996d", "filename": "compiler/rustc_typeck/src/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Finherent_impls_overlap.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -18,7 +18,7 @@ struct InherentOverlapChecker<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl InherentOverlapChecker<'tcx> {\n+impl<'tcx> InherentOverlapChecker<'tcx> {\n     /// Checks whether any associated items in impls 1 and 2 share the same identifier and\n     /// namespace.\n     fn impls_have_common_items(\n@@ -115,7 +115,7 @@ impl InherentOverlapChecker<'tcx> {\n     }\n }\n \n-impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n+impl<'v, 'tcx> ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n     fn visit_item(&mut self, item: &'v hir::Item<'v>) {\n         match item.kind {\n             hir::ItemKind::Enum(..)"}, {"sha": "e954b4cf512c5a8820341333fa5b9d8aa4d9282c", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -143,7 +143,7 @@ fn orphan_check_impl(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Result<(), ErrorRep\n     Ok(())\n }\n \n-fn emit_orphan_check_error(\n+fn emit_orphan_check_error<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     sp: Span,\n     trait_span: Span,"}, {"sha": "5a0a84a4aa61a013fdb9bf72f25b53f0aa12ec89", "filename": "compiler/rustc_typeck/src/coherence/unsafety.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Funsafety.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -16,8 +16,8 @@ struct UnsafetyChecker<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl UnsafetyChecker<'tcx> {\n-    fn check_unsafety_coherence(\n+impl<'tcx> UnsafetyChecker<'tcx> {\n+    fn check_unsafety_coherence<'v>(\n         &mut self,\n         item: &'v hir::Item<'v>,\n         impl_generics: Option<&hir::Generics<'_>>,\n@@ -83,7 +83,7 @@ impl UnsafetyChecker<'tcx> {\n     }\n }\n \n-impl ItemLikeVisitor<'v> for UnsafetyChecker<'tcx> {\n+impl<'v, 'tcx> ItemLikeVisitor<'v> for UnsafetyChecker<'tcx> {\n     fn visit_item(&mut self, item: &'v hir::Item<'v>) {\n         if let hir::ItemKind::Impl(ref impl_) = item.kind {\n             self.check_unsafety_coherence("}, {"sha": "8057dc2effa79e1cdb607612662b5b6a7ae946af", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -147,7 +147,7 @@ struct CollectItemTypesVisitor<'tcx> {\n /// If there are any placeholder types (`_`), emit an error explaining that this is not allowed\n /// and suggest adding type parameters in the appropriate place, taking into consideration any and\n /// all already existing generic type parameters to avoid suggesting a name that is already in use.\n-crate fn placeholder_type_error(\n+crate fn placeholder_type_error<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     span: Option<Span>,\n     generics: &[hir::GenericParam<'_>],\n@@ -223,7 +223,7 @@ crate fn placeholder_type_error(\n     err.emit();\n }\n \n-fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir::Item<'tcx>) {\n+fn reject_placeholder_type_signatures_in_item<'tcx>(tcx: TyCtxt<'tcx>, item: &'tcx hir::Item<'tcx>) {\n     let (generics, suggest) = match &item.kind {\n         hir::ItemKind::Union(_, generics)\n         | hir::ItemKind::Enum(_, generics)\n@@ -251,7 +251,7 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n     );\n }\n \n-impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n+impl<'tcx> Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n     type Map = Map<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -311,7 +311,7 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n ///////////////////////////////////////////////////////////////////////////\n // Utility types and common code for the above passes.\n \n-fn bad_placeholder_type(\n+fn bad_placeholder_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     mut spans: Vec<Span>,\n     kind: &'static str,\n@@ -332,7 +332,7 @@ fn bad_placeholder_type(\n     err\n }\n \n-impl ItemCtxt<'tcx> {\n+impl<'tcx> ItemCtxt<'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, item_def_id: DefId) -> ItemCtxt<'tcx> {\n         ItemCtxt { tcx, item_def_id }\n     }\n@@ -350,7 +350,7 @@ impl ItemCtxt<'tcx> {\n     }\n }\n \n-impl AstConv<'tcx> for ItemCtxt<'tcx> {\n+impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n     fn tcx(&self) -> TyCtxt<'tcx> {\n         self.tcx\n     }\n@@ -643,7 +643,7 @@ fn type_param_predicates(\n     result\n }\n \n-impl ItemCtxt<'tcx> {\n+impl<'tcx> ItemCtxt<'tcx> {\n     /// Finds bounds from `hir::Generics`. This requires scanning through the\n     /// AST. We do this to avoid having to convert *all* the bounds, which\n     /// would create artificial cycles. Instead, we can only convert the\n@@ -1239,7 +1239,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n         has_late_bound_regions: Option<Span>,\n     }\n \n-    impl Visitor<'tcx> for LateBoundRegionsDetector<'tcx> {\n+    impl<'tcx> Visitor<'tcx> for LateBoundRegionsDetector<'tcx> {\n         type Map = intravisit::ErasedMap<'tcx>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -1746,7 +1746,7 @@ fn is_suggestable_infer_ty(ty: &hir::Ty<'_>) -> bool {\n     }\n }\n \n-pub fn get_infer_ret_ty(output: &'hir hir::FnRetTy<'hir>) -> Option<&'hir hir::Ty<'hir>> {\n+pub fn get_infer_ret_ty<'hir>(output: &'hir hir::FnRetTy<'hir>) -> Option<&'hir hir::Ty<'hir>> {\n     if let hir::FnRetTy::Return(ty) = output {\n         if is_suggestable_infer_ty(ty) {\n             return Some(&*ty);"}, {"sha": "99fddcb00ceca52b2a2994e8c16a174d4b5d8a62", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -731,7 +731,7 @@ fn infer_placeholder_type<'a>(\n         }\n     }\n \n-    impl TypeFolder<'tcx> for MakeNameable<'tcx> {\n+    impl<'tcx> TypeFolder<'tcx> for MakeNameable<'tcx> {\n         fn tcx(&self) -> TyCtxt<'tcx> {\n             self.tcx\n         }"}, {"sha": "0896daf48b78435f0d5afc868ef126c4c195af45", "filename": "compiler/rustc_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -482,7 +482,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn walk_struct_expr(\n+    fn walk_struct_expr<'hir>(\n         &mut self,\n         fields: &[hir::ExprField<'_>],\n         opt_with: &Option<&'hir hir::Expr<'_>>,\n@@ -705,7 +705,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n     /// - When reporting the Place back to the Delegate, ensure that the UpvarId uses the enclosing\n     /// closure as the DefId.\n     fn walk_captures(&mut self, closure_expr: &hir::Expr<'_>) {\n-        fn upvar_is_local_variable(\n+        fn upvar_is_local_variable<'tcx>(\n             upvars: Option<&'tcx FxIndexMap<hir::HirId, hir::Upvar>>,\n             upvar_id: &hir::HirId,\n             body_owner_is_closure: bool,\n@@ -846,7 +846,7 @@ fn delegate_consume<'a, 'tcx>(\n     }\n }\n \n-fn is_multivariant_adt(ty: Ty<'tcx>) -> bool {\n+fn is_multivariant_adt(ty: Ty<'_>) -> bool {\n     if let ty::Adt(def, _) = ty.kind() {\n         // Note that if a non-exhaustive SingleVariant is defined in another crate, we need\n         // to assume that more cases will be added to the variant in the future. This mean"}, {"sha": "ae6321de7f2d5d34aa8546063a03a44135eca0fe", "filename": "compiler/rustc_typeck/src/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fimpl_wf_check.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -76,7 +76,7 @@ struct ImplWfCheck<'tcx> {\n     min_specialization: bool,\n }\n \n-impl ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n+impl<'tcx> ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         if let hir::ItemKind::Impl(ref impl_) = item.kind {\n             enforce_impl_params_are_constrained(self.tcx, item.def_id, impl_.items);"}, {"sha": "ea777d90a9c55a31c457c5cf0102a8697f47a101", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -59,7 +59,6 @@ This API is completely unstable and subject to change.\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n #![feature(if_let_guard)]\n-#![feature(in_band_lifetimes)]\n #![feature(is_sorted)]\n #![feature(iter_zip)]\n #![feature(let_else)]"}, {"sha": "b3efd9f9ec36747b42b63632974b5ad5a0b5c0b1", "filename": "compiler/rustc_typeck/src/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Ftest.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -12,7 +12,7 @@ struct OutlivesTest<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl ItemLikeVisitor<'tcx> for OutlivesTest<'tcx> {\n+impl<'tcx> ItemLikeVisitor<'tcx> for OutlivesTest<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         // For unit testing: check for a special \"rustc_outlives\"\n         // attribute and report an error with various results if found."}, {"sha": "d6959075d888379671221b8ca539528109a7dcb6", "filename": "compiler/rustc_typeck/src/variance/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae21dd00ace34974a8337195c885c250f402d8cf/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Ftest.rs?ref=ae21dd00ace34974a8337195c885c250f402d8cf", "patch": "@@ -12,7 +12,7 @@ struct VarianceTest<'tcx> {\n     tcx: TyCtxt<'tcx>,\n }\n \n-impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n+impl<'tcx> ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n     fn visit_item(&mut self, item: &'tcx hir::Item<'tcx>) {\n         // For unit testing: check for a special \"rustc_variance\"\n         // attribute and report an error with various results if found."}]}