{"sha": "239287f013b21d18c8ddd5bf5419629d43dca484", "node_id": "C_kwDOAAsO6NoAKDIzOTI4N2YwMTNiMjFkMThjOGRkZDViZjU0MTk2MjlkNDNkY2E0ODQ", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-05-28T23:12:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-28T23:12:30Z"}, "message": "Rollup merge of #97028 - ridwanabdillahi:pretty-printer, r=michaelwoerister\n\nAdd support for embedding pretty printers via `#[debugger_visualizer]` attribute\n\nInitial support for [RFC 3191](https://github.com/rust-lang/rfcs/pull/3191) in PR https://github.com/rust-lang/rust/pull/91779 was scoped to supporting embedding NatVis files using a new attribute. This PR implements the pretty printer support as stated in the RFC mentioned above.\n\nThis change includes embedding pretty printers in the `.debug_gdb_scripts` just as the pretty printers for rustc are embedded today. Also added additional tests for embedded pretty printers. Additionally cleaned up error checking so all error checking is done up front regardless of the current target.\n\nRFC: https://github.com/rust-lang/rfcs/pull/3191", "tree": {"sha": "8370d6dac6dfdae06b82d23e097b46472e026673", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8370d6dac6dfdae06b82d23e097b46472e026673"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/239287f013b21d18c8ddd5bf5419629d43dca484", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJikqxeCRBK7hj4Ov3rIwAAm3EIAApt3aRD0WjCuNNPMnPwgMD/\nnneuWa7sSbntKE3d68nzhZSAqj/hca++fvUeo1oqKEvHc/96YjoGgdJlHiAsBG8d\nzr3vafQJJ2RryKXPwCnqzn4i35+WgcdK6AtBkNZ4B3uFN90DNJc2KIGW5UWPxHBR\npUpyKtXL1XI4aGWDAU73ORDKdzRH4lU3GYdgU0KzoSlzhAu9VPujIUYhiKgnnRO5\nzO0E5f3ImhwMxHhSpvPBjOVi1WoA4jKe2BidKzVPk2qn9E7q8umh9zWad4kFTjju\n+HblJecKmcCFJS7evzaGZ87mIpYTrXnsvFT2XLvm9EjKOxWcea4+e4ZqNTBAzxg=\n=xovm\n-----END PGP SIGNATURE-----\n", "payload": "tree 8370d6dac6dfdae06b82d23e097b46472e026673\nparent 376163a77cda823c4e1bdedd48039609069e6b58\nparent 7ac62ce75cef963017245287f0a7b140e09589d7\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1653779550 +0200\ncommitter GitHub <noreply@github.com> 1653779550 +0200\n\nRollup merge of #97028 - ridwanabdillahi:pretty-printer, r=michaelwoerister\n\nAdd support for embedding pretty printers via `#[debugger_visualizer]` attribute\n\nInitial support for [RFC 3191](https://github.com/rust-lang/rfcs/pull/3191) in PR https://github.com/rust-lang/rust/pull/91779 was scoped to supporting embedding NatVis files using a new attribute. This PR implements the pretty printer support as stated in the RFC mentioned above.\n\nThis change includes embedding pretty printers in the `.debug_gdb_scripts` just as the pretty printers for rustc are embedded today. Also added additional tests for embedded pretty printers. Additionally cleaned up error checking so all error checking is done up front regardless of the current target.\n\nRFC: https://github.com/rust-lang/rfcs/pull/3191\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/239287f013b21d18c8ddd5bf5419629d43dca484", "html_url": "https://github.com/rust-lang/rust/commit/239287f013b21d18c8ddd5bf5419629d43dca484", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/239287f013b21d18c8ddd5bf5419629d43dca484/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "376163a77cda823c4e1bdedd48039609069e6b58", "url": "https://api.github.com/repos/rust-lang/rust/commits/376163a77cda823c4e1bdedd48039609069e6b58", "html_url": "https://github.com/rust-lang/rust/commit/376163a77cda823c4e1bdedd48039609069e6b58"}, {"sha": "7ac62ce75cef963017245287f0a7b140e09589d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac62ce75cef963017245287f0a7b140e09589d7", "html_url": "https://github.com/rust-lang/rust/commit/7ac62ce75cef963017245287f0a7b140e09589d7"}], "stats": {"total": 658, "additions": 460, "deletions": 198}, "files": [{"sha": "5186aee57fb128dc3abba712347f9be3c621e0f7", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/gdb.rs", "status": "modified", "additions": 54, "deletions": 2, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fgdb.rs?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -5,11 +5,14 @@ use crate::llvm;\n use crate::builder::Builder;\n use crate::common::CodegenCx;\n use crate::value::Value;\n+use rustc_codegen_ssa::base::collect_debugger_visualizers_transitive;\n use rustc_codegen_ssa::traits::*;\n+use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::bug;\n-use rustc_session::config::DebugInfo;\n+use rustc_session::config::{CrateType, DebugInfo};\n \n use rustc_span::symbol::sym;\n+use rustc_span::DebuggerVisualizerType;\n \n /// Inserts a side-effect free instruction sequence that makes sure that the\n /// .debug_gdb_scripts global is referenced, so it isn't removed by the linker.\n@@ -37,9 +40,33 @@ pub fn get_or_insert_gdb_debug_scripts_section_global<'ll>(cx: &CodegenCx<'ll, '\n \n     section_var.unwrap_or_else(|| {\n         let section_name = b\".debug_gdb_scripts\\0\";\n-        let section_contents = b\"\\x01gdb_load_rust_pretty_printers.py\\0\";\n+        let mut section_contents = Vec::new();\n+\n+        // Add the pretty printers for the standard library first.\n+        section_contents.extend_from_slice(b\"\\x01gdb_load_rust_pretty_printers.py\\0\");\n+\n+        // Next, add the pretty printers that were specified via the `#[debugger_visualizer]` attribute.\n+        let visualizers = collect_debugger_visualizers_transitive(\n+            cx.tcx,\n+            DebuggerVisualizerType::GdbPrettyPrinter,\n+        );\n+        let crate_name = cx.tcx.crate_name(LOCAL_CRATE);\n+        for (index, visualizer) in visualizers.iter().enumerate() {\n+            // The initial byte `4` instructs GDB that the following pretty printer\n+            // is defined inline as opposed to in a standalone file.\n+            section_contents.extend_from_slice(b\"\\x04\");\n+            let vis_name = format!(\"pretty-printer-{}-{}\\n\", crate_name.as_str(), index);\n+            section_contents.extend_from_slice(vis_name.as_bytes());\n+            section_contents.extend_from_slice(&visualizer.src);\n+\n+            // The final byte `0` tells GDB that the pretty printer has been\n+            // fully defined and can continue searching for additional\n+            // pretty printers.\n+            section_contents.extend_from_slice(b\"\\0\");\n+        }\n \n         unsafe {\n+            let section_contents = section_contents.as_slice();\n             let llvm_type = cx.type_array(cx.type_i8(), section_contents.len() as u64);\n \n             let section_var = cx\n@@ -62,7 +89,32 @@ pub fn needs_gdb_debug_scripts_section(cx: &CodegenCx<'_, '_>) -> bool {\n     let omit_gdb_pretty_printer_section =\n         cx.tcx.sess.contains_name(cx.tcx.hir().krate_attrs(), sym::omit_gdb_pretty_printer_section);\n \n+    // To ensure the section `__rustc_debug_gdb_scripts_section__` will not create\n+    // ODR violations at link time, this section will not be emitted for rlibs since\n+    // each rlib could produce a different set of visualizers that would be embedded\n+    // in the `.debug_gdb_scripts` section. For that reason, we make sure that the\n+    // section is only emitted for leaf crates.\n+    let embed_visualizers = cx.sess().crate_types().iter().any(|&crate_type| match crate_type {\n+        CrateType::Executable | CrateType::Dylib | CrateType::Cdylib | CrateType::Staticlib => {\n+            // These are crate types for which we will embed pretty printers since they\n+            // are treated as leaf crates.\n+            true\n+        }\n+        CrateType::ProcMacro => {\n+            // We could embed pretty printers for proc macro crates too but it does not\n+            // seem like a good default, since this is a rare use case and we don't\n+            // want to slow down the common case.\n+            false\n+        }\n+        CrateType::Rlib => {\n+            // As per the above description, embedding pretty printers for rlibs could\n+            // lead to ODR violations so we skip this crate type as well.\n+            false\n+        }\n+    });\n+\n     !omit_gdb_pretty_printer_section\n         && cx.sess().opts.debuginfo != DebugInfo::None\n         && cx.sess().target.emit_debug_gdb_scripts\n+        && embed_visualizers\n }"}, {"sha": "fc30679be03cbc8cfe1aef5e133691a7bfe3cc0b", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 34, "deletions": 40, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -5,7 +5,7 @@ use rustc_data_structures::memmap::Mmap;\n use rustc_data_structures::temp_dir::MaybeTempDir;\n use rustc_errors::{ErrorGuaranteed, Handler};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n-use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n+use rustc_hir::def_id::CrateNum;\n use rustc_middle::middle::dependency_format::Linkage;\n use rustc_middle::middle::exported_symbols::SymbolExportKind;\n use rustc_session::config::{self, CFGuard, CrateType, DebugInfo, LdImpl, Strip};\n@@ -18,6 +18,7 @@ use rustc_session::utils::NativeLibKind;\n /// need out of the shared crate context before we get rid of it.\n use rustc_session::{filesearch, Session};\n use rustc_span::symbol::Symbol;\n+use rustc_span::DebuggerVisualizerFile;\n use rustc_target::spec::crt_objects::{CrtObjects, CrtObjectsFallback};\n use rustc_target::spec::{LinkOutputKind, LinkerFlavor, LldFlavor, SplitDebuginfo};\n use rustc_target::spec::{PanicStrategy, RelocModel, RelroLevel, SanitizerSet, Target};\n@@ -37,6 +38,7 @@ use regex::Regex;\n use tempfile::Builder as TempFileBuilder;\n \n use std::borrow::Borrow;\n+use std::collections::BTreeSet;\n use std::ffi::OsString;\n use std::fs::{File, OpenOptions};\n use std::io::{BufWriter, Write};\n@@ -2099,14 +2101,16 @@ fn add_order_independent_options(\n     // Pass optimization flags down to the linker.\n     cmd.optimize();\n \n-    let debugger_visualizer_paths = if sess.target.is_like_msvc {\n-        collect_debugger_visualizers(tmpdir, sess, &codegen_results.crate_info)\n-    } else {\n-        Vec::new()\n-    };\n+    // Gather the set of NatVis files, if any, and write them out to a temp directory.\n+    let natvis_visualizers = collect_natvis_visualizers(\n+        tmpdir,\n+        sess,\n+        &codegen_results.crate_info.local_crate_name,\n+        &codegen_results.crate_info.natvis_debugger_visualizers,\n+    );\n \n-    // Pass debuginfo and strip flags down to the linker.\n-    cmd.debuginfo(strip_value(sess), &debugger_visualizer_paths);\n+    // Pass debuginfo, NatVis debugger visualizers and strip flags down to the linker.\n+    cmd.debuginfo(strip_value(sess), &natvis_visualizers);\n \n     // We want to prevent the compiler from accidentally leaking in any system libraries,\n     // so by default we tell linkers not to link to any default libraries.\n@@ -2125,43 +2129,33 @@ fn add_order_independent_options(\n     add_rpath_args(cmd, sess, codegen_results, out_filename);\n }\n \n-// Write the debugger visualizer files for each crate to the temp directory and gather the file paths.\n-fn collect_debugger_visualizers(\n+// Write the NatVis debugger visualizer files for each crate to the temp directory and gather the file paths.\n+fn collect_natvis_visualizers(\n     tmpdir: &Path,\n     sess: &Session,\n-    crate_info: &CrateInfo,\n+    crate_name: &Symbol,\n+    natvis_debugger_visualizers: &BTreeSet<DebuggerVisualizerFile>,\n ) -> Vec<PathBuf> {\n-    let mut visualizer_paths = Vec::new();\n-    let debugger_visualizers = &crate_info.debugger_visualizers;\n-    let mut index = 0;\n+    let mut visualizer_paths = Vec::with_capacity(natvis_debugger_visualizers.len());\n \n-    for (&cnum, visualizers) in debugger_visualizers {\n-        let crate_name = if cnum == LOCAL_CRATE {\n-            crate_info.local_crate_name.as_str()\n-        } else {\n-            crate_info.crate_name[&cnum].as_str()\n-        };\n+    for (index, visualizer) in natvis_debugger_visualizers.iter().enumerate() {\n+        let visualizer_out_file = tmpdir.join(format!(\"{}-{}.natvis\", crate_name.as_str(), index));\n \n-        for visualizer in visualizers {\n-            let visualizer_out_file = tmpdir.join(format!(\"{}-{}.natvis\", crate_name, index));\n-\n-            match fs::write(&visualizer_out_file, &visualizer.src) {\n-                Ok(()) => {\n-                    visualizer_paths.push(visualizer_out_file.clone());\n-                    index += 1;\n-                }\n-                Err(error) => {\n-                    sess.warn(\n-                        format!(\n-                            \"Unable to write debugger visualizer file `{}`: {} \",\n-                            visualizer_out_file.display(),\n-                            error\n-                        )\n-                        .as_str(),\n-                    );\n-                }\n-            };\n-        }\n+        match fs::write(&visualizer_out_file, &visualizer.src) {\n+            Ok(()) => {\n+                visualizer_paths.push(visualizer_out_file);\n+            }\n+            Err(error) => {\n+                sess.warn(\n+                    format!(\n+                        \"Unable to write debugger visualizer file `{}`: {} \",\n+                        visualizer_out_file.display(),\n+                        error\n+                    )\n+                    .as_str(),\n+                );\n+            }\n+        };\n     }\n     visualizer_paths\n }"}, {"sha": "e4236876463fc9abd89b3ba2c14e360d8ea11539", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -183,7 +183,7 @@ pub trait Linker {\n     fn optimize(&mut self);\n     fn pgo_gen(&mut self);\n     fn control_flow_guard(&mut self);\n-    fn debuginfo(&mut self, strip: Strip, debugger_visualizers: &[PathBuf]);\n+    fn debuginfo(&mut self, strip: Strip, natvis_debugger_visualizers: &[PathBuf]);\n     fn no_crt_objects(&mut self);\n     fn no_default_libraries(&mut self);\n     fn export_symbols(&mut self, tmpdir: &Path, crate_type: CrateType, symbols: &[String]);\n@@ -915,7 +915,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n         self.cmd.arg(\"/guard:cf\");\n     }\n \n-    fn debuginfo(&mut self, strip: Strip, debugger_visualizers: &[PathBuf]) {\n+    fn debuginfo(&mut self, strip: Strip, natvis_debugger_visualizers: &[PathBuf]) {\n         match strip {\n             Strip::None => {\n                 // This will cause the Microsoft linker to generate a PDB file\n@@ -944,7 +944,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n                 }\n \n                 // This will cause the Microsoft linker to embed .natvis info for all crates into the PDB file\n-                for path in debugger_visualizers {\n+                for path in natvis_debugger_visualizers {\n                     let mut arg = OsString::from(\"/NATVIS:\");\n                     arg.push(path);\n                     self.cmd.arg(arg);"}, {"sha": "420adec456f61c81b6ac7b931e6a8c7491360aef", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 48, "deletions": 13, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -31,11 +31,13 @@ use rustc_middle::ty::layout::{HasTyCtxt, LayoutOf, TyAndLayout};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt};\n use rustc_session::cgu_reuse_tracker::CguReuse;\n-use rustc_session::config::{self, EntryFnType, OutputType};\n+use rustc_session::config::{self, CrateType, EntryFnType, OutputType};\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n+use rustc_span::{DebuggerVisualizerFile, DebuggerVisualizerType};\n use rustc_target::abi::{Align, VariantIdx};\n \n+use std::collections::BTreeSet;\n use std::convert::TryFrom;\n use std::ops::{Deref, DerefMut};\n use std::time::{Duration, Instant};\n@@ -487,6 +489,29 @@ fn get_argc_argv<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     }\n }\n \n+/// This function returns all of the debugger visualizers specified for the\n+/// current crate as well as all upstream crates transitively that match the\n+/// `visualizer_type` specified.\n+pub fn collect_debugger_visualizers_transitive(\n+    tcx: TyCtxt<'_>,\n+    visualizer_type: DebuggerVisualizerType,\n+) -> BTreeSet<DebuggerVisualizerFile> {\n+    tcx.debugger_visualizers(LOCAL_CRATE)\n+        .iter()\n+        .chain(\n+            tcx.crates(())\n+                .iter()\n+                .filter(|&cnum| {\n+                    let used_crate_source = tcx.used_crate_source(*cnum);\n+                    used_crate_source.rlib.is_some() || used_crate_source.rmeta.is_some()\n+                })\n+                .flat_map(|&cnum| tcx.debugger_visualizers(cnum)),\n+        )\n+        .filter(|visualizer| visualizer.visualizer_type == visualizer_type)\n+        .cloned()\n+        .collect::<BTreeSet<_>>()\n+}\n+\n pub fn codegen_crate<B: ExtraBackendMethods>(\n     backend: B,\n     tcx: TyCtxt<'_>,\n@@ -838,13 +863,8 @@ impl CrateInfo {\n             missing_lang_items: Default::default(),\n             dependency_formats: tcx.dependency_formats(()).clone(),\n             windows_subsystem,\n-            debugger_visualizers: Default::default(),\n+            natvis_debugger_visualizers: Default::default(),\n         };\n-        let debugger_visualizers = tcx.debugger_visualizers(LOCAL_CRATE).clone();\n-        if !debugger_visualizers.is_empty() {\n-            info.debugger_visualizers.insert(LOCAL_CRATE, debugger_visualizers);\n-        }\n-\n         let lang_items = tcx.lang_items();\n \n         let crates = tcx.crates(());\n@@ -882,14 +902,29 @@ impl CrateInfo {\n             let missing =\n                 missing.iter().cloned().filter(|&l| lang_items::required(tcx, l)).collect();\n             info.missing_lang_items.insert(cnum, missing);\n+        }\n \n-            // Only include debugger visualizer files from crates that will be statically linked.\n-            if used_crate_source.rlib.is_some() || used_crate_source.rmeta.is_some() {\n-                let debugger_visualizers = tcx.debugger_visualizers(cnum).clone();\n-                if !debugger_visualizers.is_empty() {\n-                    info.debugger_visualizers.insert(cnum, debugger_visualizers);\n-                }\n+        let embed_visualizers = tcx.sess.crate_types().iter().any(|&crate_type| match crate_type {\n+            CrateType::Executable | CrateType::Dylib | CrateType::Cdylib => {\n+                // These are crate types for which we invoke the linker and can embed\n+                // NatVis visualizers.\n+                true\n+            }\n+            CrateType::ProcMacro => {\n+                // We could embed NatVis for proc macro crates too (to improve the debugging\n+                // experience for them) but it does not seem like a good default, since\n+                // this is a rare use case and we don't want to slow down the common case.\n+                false\n             }\n+            CrateType::Staticlib | CrateType::Rlib => {\n+                // We don't invoke the linker for these, so we don't need to collect the NatVis for them.\n+                false\n+            }\n+        });\n+\n+        if tcx.sess.target.is_like_msvc && embed_visualizers {\n+            info.natvis_debugger_visualizers =\n+                collect_debugger_visualizers_transitive(tcx, DebuggerVisualizerType::Natvis);\n         }\n \n         info"}, {"sha": "7fde700be393d77499643e2f2dd9688def6153be", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -36,6 +36,7 @@ use rustc_session::cstore::{self, CrateSource};\n use rustc_session::utils::NativeLibKind;\n use rustc_span::symbol::Symbol;\n use rustc_span::DebuggerVisualizerFile;\n+use std::collections::BTreeSet;\n use std::path::{Path, PathBuf};\n \n pub mod back;\n@@ -157,7 +158,7 @@ pub struct CrateInfo {\n     pub missing_lang_items: FxHashMap<CrateNum, Vec<LangItem>>,\n     pub dependency_formats: Lrc<Dependencies>,\n     pub windows_subsystem: Option<String>,\n-    pub debugger_visualizers: FxHashMap<CrateNum, Vec<DebuggerVisualizerFile>>,\n+    pub natvis_debugger_visualizers: BTreeSet<DebuggerVisualizerFile>,\n }\n \n #[derive(Encodable, Decodable)]"}, {"sha": "e021e9603f321aba2cb80afa80c66093ba9cf12a", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -399,7 +399,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n \n     // RFC #3191: #[debugger_visualizer] support\n     gated!(\n-        debugger_visualizer, Normal, template!(List: r#\"natvis_file = \"...\"\"#),\n+        debugger_visualizer, Normal, template!(List: r#\"natvis_file = \"...\", gdb_script_file = \"...\"\"#),\n         DuplicatesOk, experimental!(debugger_visualizer)\n     ),\n "}, {"sha": "3d38ff00eaba74571490a00bd88c04602ec752fb", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 36, "deletions": 20, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -8,6 +8,7 @@ use rustc_ast::tokenstream::DelimSpan;\n use rustc_ast::{ast, AttrStyle, Attribute, Lit, LitKind, MacArgs, MetaItemKind, NestedMetaItem};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, MultiSpan};\n+use rustc_expand::base::resolve_path;\n use rustc_feature::{AttributeDuplicates, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_hir as hir;\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n@@ -1982,49 +1983,64 @@ impl CheckAttrVisitor<'_> {\n             }\n         }\n \n-        let hints = match attr.meta_item_list() {\n-            Some(meta_item_list) => meta_item_list,\n-            None => {\n-                self.emit_debugger_visualizer_err(attr);\n-                return false;\n-            }\n+        let Some(hints) = attr.meta_item_list() else {\n+            self.emit_debugger_visualizer_err(attr.span);\n+            return false;\n         };\n \n         let hint = match hints.len() {\n             1 => &hints[0],\n             _ => {\n-                self.emit_debugger_visualizer_err(attr);\n+                self.emit_debugger_visualizer_err(attr.span);\n                 return false;\n             }\n         };\n \n-        if !hint.has_name(sym::natvis_file) {\n-            self.emit_debugger_visualizer_err(attr);\n+        let Some(meta_item) = hint.meta_item() else {\n+            self.emit_debugger_visualizer_err(attr.span);\n             return false;\n-        }\n+        };\n \n-        let meta_item = match hint.meta_item() {\n-            Some(meta_item) => meta_item,\n-            None => {\n-                self.emit_debugger_visualizer_err(attr);\n+        let visualizer_path = match (meta_item.name_or_empty(), meta_item.value_str()) {\n+            (sym::natvis_file, Some(value)) => value,\n+            (sym::gdb_script_file, Some(value)) => value,\n+            (_, _) => {\n+                self.emit_debugger_visualizer_err(meta_item.span);\n                 return false;\n             }\n         };\n \n-        match (meta_item.name_or_empty(), meta_item.value_str()) {\n-            (sym::natvis_file, Some(_)) => true,\n-            (_, _) => {\n-                self.emit_debugger_visualizer_err(attr);\n+        let file =\n+            match resolve_path(&self.tcx.sess.parse_sess, visualizer_path.as_str(), attr.span) {\n+                Ok(file) => file,\n+                Err(mut err) => {\n+                    err.emit();\n+                    return false;\n+                }\n+            };\n+\n+        match std::fs::File::open(&file) {\n+            Ok(_) => true,\n+            Err(err) => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(\n+                        meta_item.span,\n+                        &format!(\"couldn't read {}: {}\", file.display(), err),\n+                    )\n+                    .emit();\n                 false\n             }\n         }\n     }\n \n-    fn emit_debugger_visualizer_err(&self, attr: &Attribute) {\n+    fn emit_debugger_visualizer_err(&self, span: Span) {\n         self.tcx\n             .sess\n-            .struct_span_err(attr.span, \"invalid argument\")\n+            .struct_span_err(span, \"invalid argument\")\n             .note(r#\"expected: `natvis_file = \"...\"`\"#)\n+            .note(r#\"OR\"#)\n+            .note(r#\"expected: `gdb_script_file = \"...\"`\"#)\n             .emit();\n     }\n "}, {"sha": "e08683fe23b2019819cecd30edaef55b8f0b1307", "filename": "compiler/rustc_passes/src/debugger_visualizer.rs", "status": "modified", "additions": 25, "deletions": 36, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdebugger_visualizer.rs?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -21,9 +21,8 @@ fn check_for_debugger_visualizer<'tcx>(\n     let attrs = tcx.hir().attrs(hir_id);\n     for attr in attrs {\n         if attr.has_name(sym::debugger_visualizer) {\n-            let list = match attr.meta_item_list() {\n-                Some(list) => list,\n-                _ => continue,\n+            let Some(list) = attr.meta_item_list() else {\n+                continue\n             };\n \n             let meta_item = match list.len() {\n@@ -34,45 +33,35 @@ fn check_for_debugger_visualizer<'tcx>(\n                 _ => continue,\n             };\n \n-            let file = match (meta_item.name_or_empty(), meta_item.value_str()) {\n-                (sym::natvis_file, Some(value)) => {\n+            let visualizer_type = match meta_item.name_or_empty() {\n+                sym::natvis_file => DebuggerVisualizerType::Natvis,\n+                sym::gdb_script_file => DebuggerVisualizerType::GdbPrettyPrinter,\n+                _ => continue,\n+            };\n+\n+            let file = match meta_item.value_str() {\n+                Some(value) => {\n                     match resolve_path(&tcx.sess.parse_sess, value.as_str(), attr.span) {\n                         Ok(file) => file,\n-                        Err(mut err) => {\n-                            err.emit();\n-                            continue;\n-                        }\n+                        _ => continue,\n                     }\n                 }\n-                (_, _) => continue,\n+                None => continue,\n             };\n \n-            if file.is_file() {\n-                let contents = match std::fs::read(&file) {\n-                    Ok(contents) => contents,\n-                    Err(err) => {\n-                        tcx.sess\n-                            .struct_span_err(\n-                                attr.span,\n-                                &format!(\n-                                    \"Unable to read contents of file `{}`. {}\",\n-                                    file.display(),\n-                                    err\n-                                ),\n-                            )\n-                            .emit();\n-                        continue;\n-                    }\n-                };\n-\n-                debugger_visualizers.insert(DebuggerVisualizerFile::new(\n-                    Arc::from(contents),\n-                    DebuggerVisualizerType::Natvis,\n-                ));\n-            } else {\n-                tcx.sess\n-                    .struct_span_err(attr.span, &format!(\"{} is not a valid file\", file.display()))\n-                    .emit();\n+            match std::fs::read(&file) {\n+                Ok(contents) => {\n+                    debugger_visualizers\n+                        .insert(DebuggerVisualizerFile::new(Arc::from(contents), visualizer_type));\n+                }\n+                Err(err) => {\n+                    tcx.sess\n+                        .struct_span_err(\n+                            meta_item.span,\n+                            &format!(\"couldn't read {}: {}\", file.display(), err),\n+                        )\n+                        .emit();\n+                }\n             }\n         }\n     }"}, {"sha": "adf5a744048083b62558190ec46b4668aeb6b554", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -1203,6 +1203,7 @@ impl SourceFileHash {\n #[derive(Copy, PartialEq, PartialOrd, Clone, Ord, Eq, Hash, Debug, Encodable, Decodable)]\n pub enum DebuggerVisualizerType {\n     Natvis,\n+    GdbPrettyPrinter,\n }\n \n /// A single debugger visualizer file."}, {"sha": "6989763f75ade6c54d83106686be214cff29522d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -722,6 +722,7 @@ symbols! {\n         fundamental,\n         future,\n         future_trait,\n+        gdb_script_file,\n         ge,\n         gen_future,\n         gen_kill,"}, {"sha": "c7a0414b67602d191a25157ee8ffa43c85dc601b", "filename": "src/doc/unstable-book/src/language-features/debugger-visualizer.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdebugger-visualizer.md", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdebugger-visualizer.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fdebugger-visualizer.md?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -14,6 +14,7 @@ to embed a debugger visualizer file into the PDB/ELF generated by `rustc`.\n ``` rust,ignore (partial-example)\n #![feature(debugger_visualizer)]\n #![debugger_visualizer(natvis_file = \"foo.natvis\")]\n+#![debugger_visualizer(gdb_script_file = \"foo.py\")]\n struct Foo {\n \n }\n@@ -22,4 +23,5 @@ struct Foo {\n ## Limitations\n \n Currently, this feature only supports embedding Natvis files on `-windows-msvc`\n-targets when using the MSVC linker via the `natvis_file` meta item.\n+targets via the `natvis_file` meta item. `-windows-gnu` targets are not currently\n+supported."}, {"sha": "5900fcc01a6feab8d6a0bfb652a3a70fabb31d7e", "filename": "src/test/debuginfo/auxiliary/dependency-with-embedded-visualizers.natvis", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fdebuginfo%2Fauxiliary%2Fdependency-with-embedded-visualizers.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fdebuginfo%2Fauxiliary%2Fdependency-with-embedded-visualizers.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fauxiliary%2Fdependency-with-embedded-visualizers.natvis?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n+  <Type Name=\"dependency_with_embedded_visualizers::Person\">\n+    <DisplayString>{name} is {age} years old.</DisplayString>\n+    <Expand>\n+      <Item Name=\"[name]\">name</Item>\n+      <Item Name=\"[age]\">age</Item>\n+    </Expand>\n+  </Type>\n+</AutoVisualizer>"}, {"sha": "2635ed487c803c6ffc5b640a58a3d99528242150", "filename": "src/test/debuginfo/auxiliary/dependency-with-embedded-visualizers.py", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fdebuginfo%2Fauxiliary%2Fdependency-with-embedded-visualizers.py", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fdebuginfo%2Fauxiliary%2Fdependency-with-embedded-visualizers.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fauxiliary%2Fdependency-with-embedded-visualizers.py?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -0,0 +1,23 @@\n+import gdb\n+\n+class PersonPrinter:\n+    \"Print a Person\"\n+\n+    def __init__(self, val):\n+        self.val = val\n+        self.name = val[\"name\"]\n+        self.age = int(val[\"age\"])\n+\n+    def to_string(self):\n+        return \"{} is {} years old.\".format(self.name, self.age)\n+\n+def lookup(val):\n+    lookup_tag = val.type.tag\n+    if lookup_tag is None:\n+        return None\n+    if \"dependency_with_embedded_visualizers::Person\" == lookup_tag:\n+        return PersonPrinter(val)\n+\n+    return None\n+\n+gdb.current_objfile().pretty_printers.append(lookup)"}, {"sha": "327515b10afd1a437158df1fc87a2aff038c7a8d", "filename": "src/test/debuginfo/auxiliary/dependency-with-embedded-visualizers.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fdebuginfo%2Fauxiliary%2Fdependency-with-embedded-visualizers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fdebuginfo%2Fauxiliary%2Fdependency-with-embedded-visualizers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fauxiliary%2Fdependency-with-embedded-visualizers.rs?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -0,0 +1,19 @@\n+// compile-flags:-g\n+// ignore-lldb\n+// no-prefer-dynamic\n+\n+#![feature(debugger_visualizer)]\n+#![debugger_visualizer(natvis_file = \"dependency-with-embedded-visualizers.natvis\")]\n+#![debugger_visualizer(gdb_script_file = \"dependency-with-embedded-visualizers.py\")]\n+#![crate_type = \"rlib\"]\n+\n+pub struct Person {\n+    name: String,\n+    age: i32,\n+}\n+\n+impl Person {\n+    pub fn new(name: String, age: i32) -> Person {\n+        Person { name: name, age: age }\n+    }\n+}"}, {"sha": "d7bf6885dd40ae623bfd0bfd845f9682d38fb21a", "filename": "src/test/debuginfo/embedded-visualizer-point.natvis", "status": "renamed", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fdebuginfo%2Fembedded-visualizer-point.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fdebuginfo%2Fembedded-visualizer-point.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fembedded-visualizer-point.natvis?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -1,18 +1,10 @@\n <?xml version=\"1.0\" encoding=\"utf-8\"?>\n <AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n-  <Type Name=\"msvc_embedded_natvis::Point\">\n+  <Type Name=\"embedded_visualizer::point::Point\">\n     <DisplayString>({x}, {y})</DisplayString>\n     <Expand>\n       <Item Name=\"[x]\">x</Item>\n       <Item Name=\"[y]\">y</Item>\n     </Expand>\n   </Type>\n-\n-  <Type Name=\"msvc_embedded_natvis::Line\">\n-    <DisplayString>({a}, {b})</DisplayString>\n-    <Expand>\n-      <Item Name=\"[a]\">a</Item>\n-      <Item Name=\"[b]\">b</Item>\n-    </Expand>\n-  </Type>\n </AutoVisualizer>", "previous_filename": "src/test/debuginfo/msvc-embedded-natvis.natvis"}, {"sha": "d6b1af007855a9dad8c1d8cd18ac0f518713adf9", "filename": "src/test/debuginfo/embedded-visualizer-point.py", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fdebuginfo%2Fembedded-visualizer-point.py", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fdebuginfo%2Fembedded-visualizer-point.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fembedded-visualizer-point.py?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -0,0 +1,23 @@\n+import gdb\n+\n+class PointPrinter:\n+    \"Print a Point\"\n+\n+    def __init__(self, val):\n+        self.val = val\n+        self.x = int(val[\"x\"])\n+        self.y = int(val[\"y\"])\n+\n+    def to_string(self):\n+        return \"({}, {})\".format(self.x, self.y)\n+\n+def lookup(val):\n+    lookup_tag = val.type.tag\n+    if lookup_tag is None:\n+        return None\n+    if \"embedded_visualizer::point::Point\" == lookup_tag:\n+        return PointPrinter(val)\n+\n+    return None\n+\n+gdb.current_objfile().pretty_printers.append(lookup)"}, {"sha": "100437f90e5d60a9fe526d4c5867ce768b82c8a2", "filename": "src/test/debuginfo/embedded-visualizer.natvis", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fdebuginfo%2Fembedded-visualizer.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fdebuginfo%2Fembedded-visualizer.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fembedded-visualizer.natvis?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -0,0 +1,10 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n+  <Type Name=\"embedded_visualizer::Line\">\n+    <DisplayString>({a}, {b})</DisplayString>\n+    <Expand>\n+      <Item Name=\"[a]\">a</Item>\n+      <Item Name=\"[b]\">b</Item>\n+    </Expand>\n+  </Type>\n+</AutoVisualizer>"}, {"sha": "8e4fab61614e216b903e91cca53433a0d8caeaf5", "filename": "src/test/debuginfo/embedded-visualizer.py", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fdebuginfo%2Fembedded-visualizer.py", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fdebuginfo%2Fembedded-visualizer.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fembedded-visualizer.py?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -0,0 +1,23 @@\n+import gdb\n+\n+class LinePrinter:\n+    \"Print a Line\"\n+\n+    def __init__(self, val):\n+        self.val = val\n+        self.a = val[\"a\"]\n+        self.b = val[\"b\"]\n+\n+    def to_string(self):\n+        return \"({}, {})\".format(self.a, self.b)\n+\n+def lookup(val):\n+    lookup_tag = val.type.tag\n+    if lookup_tag is None:\n+        return None\n+    if \"embedded_visualizer::Line\" == lookup_tag:\n+        return LinePrinter(val)\n+\n+    return None\n+\n+gdb.current_objfile().pretty_printers.append(lookup)"}, {"sha": "0269015b46617521ce9deba5392e52f69d72b6d4", "filename": "src/test/debuginfo/embedded-visualizer.rs", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fdebuginfo%2Fembedded-visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fdebuginfo%2Fembedded-visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fembedded-visualizer.rs?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -0,0 +1,112 @@\n+// compile-flags:-g\n+// min-gdb-version: 8.1\n+// ignore-lldb\n+\n+// === CDB TESTS ==================================================================================\n+\n+// cdb-command: g\n+\n+// The .nvlist command in cdb does not always have a deterministic output\n+// for the order that NatVis files are displayed.\n+\n+// cdb-command: .nvlist\n+// cdb-check:    [...].exe (embedded NatVis \"[...]embedded_visualizer-0.natvis\")\n+\n+// cdb-command: .nvlist\n+// cdb-check:    [...].exe (embedded NatVis \"[...]embedded_visualizer-1.natvis\")\n+\n+// cdb-command: .nvlist\n+// cdb-check:    [...].exe (embedded NatVis \"[...]embedded_visualizer-2.natvis\")\n+\n+// cdb-command: dx point_a\n+// cdb-check:point_a          : (0, 0) [Type: embedded_visualizer::point::Point]\n+// cdb-check:    [<Raw View>]     [Type: embedded_visualizer::point::Point]\n+// cdb-check:    [x]              : 0 [Type: int]\n+// cdb-check:    [y]              : 0 [Type: int]\n+\n+// cdb-command: dx point_b\n+// cdb-check:point_b          : (5, 8) [Type: embedded_visualizer::point::Point]\n+// cdb-check:    [<Raw View>]     [Type: embedded_visualizer::point::Point]\n+// cdb-check:    [x]              : 5 [Type: int]\n+// cdb-check:    [y]              : 8 [Type: int]\n+\n+// cdb-command: dx line\n+// cdb-check:line             : ((0, 0), (5, 8)) [Type: embedded_visualizer::Line]\n+// cdb-check:    [<Raw View>]     [Type: embedded_visualizer::Line]\n+// cdb-check:    [a]              : (0, 0) [Type: embedded_visualizer::point::Point]\n+// cdb-check:    [b]              : (5, 8) [Type: embedded_visualizer::point::Point]\n+\n+// cdb-command: dx person\n+// cdb-check:person           : \"Person A\" is 10 years old. [Type: dependency_with_embedded_visualizers::Person]\n+// cdb-check:    [<Raw View>]     [Type: dependency_with_embedded_visualizers::Person]\n+// cdb-check:    [name]           : \"Person A\" [Type: alloc::string::String]\n+// cdb-check:    [age]            : 10 [Type: int]\n+\n+// === GDB TESTS ===================================================================================\n+\n+// gdb-command: run\n+\n+// gdb-command: info auto-load python-scripts\n+// gdb-check:Yes     pretty-printer-embedded_visualizer-0\n+// gdb-check:Yes     pretty-printer-embedded_visualizer-1\n+// gdb-command: print point_a\n+// gdb-check:$1 = (0, 0)\n+// gdb-command: print point_b\n+// gdb-check:$2 = (5, 8)\n+// gdb-command: print line\n+// gdb-check:$3 = ((0, 0), (5, 8))\n+// gdb-command: print person\n+// gdb-check:$4 = \"Person A\" is 10 years old.\n+\n+#![allow(unused_variables)]\n+#![feature(debugger_visualizer)]\n+#![debugger_visualizer(natvis_file = \"embedded-visualizer.natvis\")]\n+#![debugger_visualizer(gdb_script_file = \"embedded-visualizer.py\")]\n+\n+// aux-build: dependency-with-embedded-visualizers.rs\n+extern crate dependency_with_embedded_visualizers;\n+\n+use dependency_with_embedded_visualizers::Person;\n+\n+#[debugger_visualizer(natvis_file = \"embedded-visualizer-point.natvis\")]\n+#[debugger_visualizer(gdb_script_file = \"embedded-visualizer-point.py\")]\n+mod point {\n+    pub struct Point {\n+        x: i32,\n+        y: i32,\n+    }\n+\n+    impl Point {\n+        pub fn new(x: i32, y: i32) -> Point {\n+            Point { x: x, y: y }\n+        }\n+    }\n+}\n+\n+use point::Point;\n+\n+pub struct Line {\n+    a: Point,\n+    b: Point,\n+}\n+\n+impl Line {\n+    pub fn new(a: Point, b: Point) -> Line {\n+        Line { a: a, b: b }\n+    }\n+}\n+\n+fn main() {\n+    let point_a = Point::new(0, 0);\n+    let point_b = Point::new(5, 8);\n+    let line = Line::new(point_a, point_b);\n+\n+    let name = String::from(\"Person A\");\n+    let person = Person::new(name, 10);\n+\n+    zzz(); // #break\n+}\n+\n+fn zzz() {\n+    ()\n+}"}, {"sha": "f714fb2ad174d41f79bcd17553901f71d1ccab4c", "filename": "src/test/debuginfo/msvc-embedded-natvis.rs", "status": "removed", "additions": 0, "deletions": 64, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/376163a77cda823c4e1bdedd48039609069e6b58/src%2Ftest%2Fdebuginfo%2Fmsvc-embedded-natvis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/376163a77cda823c4e1bdedd48039609069e6b58/src%2Ftest%2Fdebuginfo%2Fmsvc-embedded-natvis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-embedded-natvis.rs?ref=376163a77cda823c4e1bdedd48039609069e6b58", "patch": "@@ -1,64 +0,0 @@\n-// only-cdb\n-// compile-flags:-g\n-\n-// === CDB TESTS ==================================================================================\n-\n-// cdb-command: g\n-\n-// cdb-command: .nvlist\n-// cdb-check:    [...].exe (embedded NatVis \"[...]msvc_embedded_natvis-0.natvis\")\n-\n-// cdb-command: dx point_a\n-// cdb-check:point_a          : (0, 0) [Type: msvc_embedded_natvis::Point]\n-// cdb-check:    [<Raw View>]     [Type: msvc_embedded_natvis::Point]\n-// cdb-check:    [x]              : 0 [Type: int]\n-// cdb-check:    [y]              : 0 [Type: int]\n-\n-// cdb-command: dx point_b\n-// cdb-check:point_b          : (5, 8) [Type: msvc_embedded_natvis::Point]\n-// cdb-check:    [<Raw View>]     [Type: msvc_embedded_natvis::Point]\n-// cdb-check:    [x]              : 5 [Type: int]\n-// cdb-check:    [y]              : 8 [Type: int]\n-\n-// cdb-command: dx line\n-// cdb-check:line             : ((0, 0), (5, 8)) [Type: msvc_embedded_natvis::Line]\n-// cdb-check:    [<Raw View>]     [Type: msvc_embedded_natvis::Line]\n-// cdb-check:    [a]              : (0, 0) [Type: msvc_embedded_natvis::Point]\n-// cdb-check:    [b]              : (5, 8) [Type: msvc_embedded_natvis::Point]\n-\n-#![feature(debugger_visualizer)]\n-#![debugger_visualizer(natvis_file = \"msvc-embedded-natvis.natvis\")]\n-\n-pub struct Point {\n-    x: i32,\n-    y: i32,\n-}\n-\n-impl Point {\n-    pub fn new(x: i32, y: i32) -> Point {\n-        Point { x: x, y: y }\n-    }\n-}\n-\n-pub struct Line {\n-    a: Point,\n-    b: Point,\n-}\n-\n-impl Line {\n-    pub fn new(a: Point, b: Point) -> Line {\n-        Line { a: a, b: b }\n-    }\n-}\n-\n-fn main() {\n-    let point_a = Point::new(0, 0);\n-    let point_b = Point::new(5, 8);\n-    let line = Line::new(point_a, point_b);\n-\n-    zzz(); // #break\n-}\n-\n-fn zzz() {\n-    ()\n-}"}, {"sha": "6eb47e3d85be43929ce348a0d8454660073fcc9e", "filename": "src/test/ui/feature-gates/auxiliary/debugger-visualizer.natvis", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fui%2Ffeature-gates%2Fauxiliary%2Fdebugger-visualizer.natvis", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fui%2Ffeature-gates%2Fauxiliary%2Fdebugger-visualizer.natvis", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Fauxiliary%2Fdebugger-visualizer.natvis?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -0,0 +1,3 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<AutoVisualizer xmlns=\"http://schemas.microsoft.com/vstudio/debugger/natvis/2010\">\n+</AutoVisualizer>"}, {"sha": "4c4dc450d18bcecdec74eee9fa6fba6a89fd26b5", "filename": "src/test/ui/feature-gates/feature-gate-debugger-visualizer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.rs?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -1,3 +1,3 @@\n-#![debugger_visualizer(natvis_file = \"../foo.natvis\")] //~ ERROR the `#[debugger_visualizer]` attribute is an experimental feature\n+#![debugger_visualizer(natvis_file = \"auxiliary/debugger-visualizer.natvis\")] //~ ERROR the `#[debugger_visualizer]` attribute is an experimental feature\n \n fn main() {}"}, {"sha": "e9367fbc6c96cf1e127bb00f3aa7115a425bfcf5", "filename": "src/test/ui/feature-gates/feature-gate-debugger-visualizer.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-debugger-visualizer.stderr?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: the `#[debugger_visualizer]` attribute is an experimental feature\n   --> $DIR/feature-gate-debugger-visualizer.rs:1:1\n    |\n-LL | #![debugger_visualizer(natvis_file = \"../foo.natvis\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | #![debugger_visualizer(natvis_file = \"auxiliary/debugger-visualizer.natvis\")]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #95939 <https://github.com/rust-lang/rust/issues/95939> for more information\n    = help: add `#![feature(debugger_visualizer)]` to the crate attributes to enable"}, {"sha": "5645a30ccee7d4d7b2ec3caff67a861e0682ab5b", "filename": "src/test/ui/invalid/invalid-debugger-visualizer-option.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.rs?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -1,4 +1,7 @@\n+// normalize-stderr-test: \"foo.random:.*\\(\" -> \"foo.random: $$FILE_NOT_FOUND_MSG (\"\n+// normalize-stderr-test: \"os error \\d+\" -> \"os error $$FILE_NOT_FOUND_CODE\"\n+\n #![feature(debugger_visualizer)]\n #![debugger_visualizer(random_file = \"../foo.random\")] //~ ERROR invalid argument\n-\n+#![debugger_visualizer(natvis_file = \"../foo.random\")] //~ ERROR\n fn main() {}"}, {"sha": "afb8d16ee960a29b974927ff35e69f8936243c36", "filename": "src/test/ui/invalid/invalid-debugger-visualizer-option.stderr", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-option.stderr?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -1,10 +1,18 @@\n error: invalid argument\n-  --> $DIR/invalid-debugger-visualizer-option.rs:2:1\n+  --> $DIR/invalid-debugger-visualizer-option.rs:5:24\n    |\n LL | #![debugger_visualizer(random_file = \"../foo.random\")]\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: expected: `natvis_file = \"...\"`\n+   = note: OR\n+   = note: expected: `gdb_script_file = \"...\"`\n \n-error: aborting due to previous error\n+error: couldn't read $DIR/../foo.random: $FILE_NOT_FOUND_MSG (os error $FILE_NOT_FOUND_CODE)\n+  --> $DIR/invalid-debugger-visualizer-option.rs:6:24\n+   |\n+LL | #![debugger_visualizer(natvis_file = \"../foo.random\")]\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n "}, {"sha": "f0aba6a75c4cb3b407a263247e19aecb70dc118e", "filename": "src/test/ui/invalid/invalid-debugger-visualizer-target.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finvalid%2Finvalid-debugger-visualizer-target.rs?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -1,5 +1,4 @@\n #![feature(debugger_visualizer)]\n \n #[debugger_visualizer(natvis_file = \"../foo.natvis\")] //~ ERROR attribute should be applied to a module\n-\n fn main() {}"}, {"sha": "494c8d771b07bcaaace725f73340a8a8c3e7118e", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/239287f013b21d18c8ddd5bf5419629d43dca484/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=239287f013b21d18c8ddd5bf5419629d43dca484", "patch": "@@ -929,6 +929,16 @@ impl<'test> TestCx<'test> {\n                             \"add-auto-load-safe-path {}\\n\",\n                             rust_pp_module_abs_path.replace(r\"\\\", r\"\\\\\")\n                         ));\n+\n+                        let output_base_dir = self.output_base_dir().to_str().unwrap().to_owned();\n+\n+                        // Add the directory containing the output binary to\n+                        // include embedded pretty printers to GDB's script\n+                        // auto loading safe path\n+                        script_str.push_str(&format!(\n+                            \"add-auto-load-safe-path {}\\n\",\n+                            output_base_dir.replace(r\"\\\", r\"\\\\\")\n+                        ));\n                     }\n                 }\n                 _ => {"}]}