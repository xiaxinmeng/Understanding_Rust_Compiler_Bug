{"sha": "6acf385c9674a359b5b45f6e127521dd1515668c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhY2YzODVjOTY3NGEzNTliNWI0NWY2ZTEyNzUyMWRkMTUxNTY2OGM=", "commit": {"author": {"name": "Aaron Weiss", "email": "aaronweiss74@gmail.com", "date": "2015-03-23T17:42:48Z"}, "committer": {"name": "Aaron Weiss", "email": "aaronweiss74@gmail.com", "date": "2015-03-27T18:15:48Z"}, "message": "Updated std::dynamic_lib to use std::path.", "tree": {"sha": "ee99ebe26d331ebfa08f6c9e625b9e163d31ab37", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee99ebe26d331ebfa08f6c9e625b9e163d31ab37"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6acf385c9674a359b5b45f6e127521dd1515668c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6acf385c9674a359b5b45f6e127521dd1515668c", "html_url": "https://github.com/rust-lang/rust/commit/6acf385c9674a359b5b45f6e127521dd1515668c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6acf385c9674a359b5b45f6e127521dd1515668c/comments", "author": {"login": "aatxe", "id": 744293, "node_id": "MDQ6VXNlcjc0NDI5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/744293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aatxe", "html_url": "https://github.com/aatxe", "followers_url": "https://api.github.com/users/aatxe/followers", "following_url": "https://api.github.com/users/aatxe/following{/other_user}", "gists_url": "https://api.github.com/users/aatxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/aatxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aatxe/subscriptions", "organizations_url": "https://api.github.com/users/aatxe/orgs", "repos_url": "https://api.github.com/users/aatxe/repos", "events_url": "https://api.github.com/users/aatxe/events{/privacy}", "received_events_url": "https://api.github.com/users/aatxe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aatxe", "id": 744293, "node_id": "MDQ6VXNlcjc0NDI5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/744293?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aatxe", "html_url": "https://github.com/aatxe", "followers_url": "https://api.github.com/users/aatxe/followers", "following_url": "https://api.github.com/users/aatxe/following{/other_user}", "gists_url": "https://api.github.com/users/aatxe/gists{/gist_id}", "starred_url": "https://api.github.com/users/aatxe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aatxe/subscriptions", "organizations_url": "https://api.github.com/users/aatxe/orgs", "repos_url": "https://api.github.com/users/aatxe/repos", "events_url": "https://api.github.com/users/aatxe/events{/privacy}", "received_events_url": "https://api.github.com/users/aatxe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0aad7dd4fad8d7e2e2f877a511a637258949597", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0aad7dd4fad8d7e2e2f877a511a637258949597", "html_url": "https://github.com/rust-lang/rust/commit/b0aad7dd4fad8d7e2e2f877a511a637258949597"}], "stats": {"total": 60, "additions": 26, "deletions": 34}, "files": [{"sha": "752e71bc19131b3dad208ac4f7a9559cf8883d6e", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6acf385c9674a359b5b45f6e127521dd1515668c/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6acf385c9674a359b5b45f6e127521dd1515668c/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=6acf385c9674a359b5b45f6e127521dd1515668c", "patch": "@@ -18,10 +18,6 @@ use std::borrow::ToOwned;\n use std::dynamic_lib::DynamicLibrary;\n use std::env;\n use std::mem;\n-\n-#[allow(deprecated)]\n-use std::old_path;\n-\n use std::path::PathBuf;\n use syntax::ast;\n use syntax::codemap::{Span, COMMAND_LINE_SP};\n@@ -110,7 +106,6 @@ impl<'a> PluginLoader<'a> {\n                         symbol: String) -> PluginRegistrarFun {\n         // Make sure the path contains a / or the linker will search for it.\n         let path = env::current_dir().unwrap().join(&path);\n-        let path = old_path::Path::new(path.to_str().unwrap());\n \n         let lib = match DynamicLibrary::open(Some(&path)) {\n             Ok(lib) => lib,"}, {"sha": "a7329ce4e292cac0fe39a5d8d46ac28fa54623e6", "filename": "src/libstd/dynamic_lib.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6acf385c9674a359b5b45f6e127521dd1515668c/src%2Flibstd%2Fdynamic_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6acf385c9674a359b5b45f6e127521dd1515668c/src%2Flibstd%2Fdynamic_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdynamic_lib.rs?ref=6acf385c9674a359b5b45f6e127521dd1515668c", "patch": "@@ -14,16 +14,15 @@\n \n #![unstable(feature = \"std_misc\")]\n #![allow(missing_docs)]\n-#![allow(deprecated)] // will be addressed by #23197\n \n use prelude::v1::*;\n \n use env;\n-use ffi::CString;\n+use ffi::{AsOsStr, CString, OsString};\n use mem;\n-use old_path::{Path, GenericPath};\n-use os;\n-use str;\n+use path::{Path, PathBuf};\n+#[cfg(not(target_os = \"android\"))] use os;\n+#[cfg(not(target_os = \"android\"))] use str;\n \n pub struct DynamicLibrary {\n     handle: *mut u8\n@@ -54,7 +53,7 @@ impl DynamicLibrary {\n     /// Lazily open a dynamic library. When passed None it gives a\n     /// handle to the calling process\n     pub fn open(filename: Option<&Path>) -> Result<DynamicLibrary, String> {\n-        let maybe_library = dl::open(filename.map(|path| path.as_vec()));\n+        let maybe_library = dl::open(filename.map(|path| path.as_os_str()));\n \n         // The dynamic library must not be constructed if there is\n         // an error opening the library so the destructor does not\n@@ -68,19 +67,17 @@ impl DynamicLibrary {\n     /// Prepends a path to this process's search path for dynamic libraries\n     pub fn prepend_search_path(path: &Path) {\n         let mut search_path = DynamicLibrary::search_path();\n-        search_path.insert(0, path.clone());\n-        let newval = DynamicLibrary::create_path(&search_path);\n-        env::set_var(DynamicLibrary::envvar(),\n-                     str::from_utf8(&newval).unwrap());\n+        search_path.insert(0, path.to_path_buf());\n+        env::set_var(DynamicLibrary::envvar(), &DynamicLibrary::create_path(&search_path));\n     }\n \n     /// From a slice of paths, create a new vector which is suitable to be an\n     /// environment variable for this platforms dylib search path.\n-    pub fn create_path(path: &[Path]) -> Vec<u8> {\n-        let mut newvar = Vec::new();\n+    pub fn create_path(path: &[PathBuf]) -> OsString {\n+        let mut newvar = OsString::new();\n         for (i, path) in path.iter().enumerate() {\n             if i > 0 { newvar.push(DynamicLibrary::separator()); }\n-            newvar.push_all(path.as_vec());\n+            newvar.push(path);\n         }\n         return newvar;\n     }\n@@ -97,15 +94,15 @@ impl DynamicLibrary {\n         }\n     }\n \n-    fn separator() -> u8 {\n-        if cfg!(windows) {b';'} else {b':'}\n+    fn separator() -> &'static str {\n+        if cfg!(windows) { \";\" } else { \":\" }\n     }\n \n     /// Returns the current search path for dynamic libraries being used by this\n     /// process\n-    pub fn search_path() -> Vec<Path> {\n+    pub fn search_path() -> Vec<PathBuf> {\n         match env::var_os(DynamicLibrary::envvar()) {\n-            Some(var) => os::split_paths(var.to_str().unwrap()),\n+            Some(var) => env::split_paths(&var).collect(),\n             None => Vec::new(),\n         }\n     }\n@@ -134,8 +131,8 @@ mod test {\n     use super::*;\n     use prelude::v1::*;\n     use libc;\n-    use old_path::Path;\n     use mem;\n+    use path::Path;\n \n     #[test]\n     #[cfg_attr(any(windows, target_os = \"android\"), ignore)] // FIXME #8818, #10379\n@@ -192,12 +189,13 @@ mod test {\n mod dl {\n     use prelude::v1::*;\n \n-    use ffi::{CString, CStr};\n+    use ffi::{CStr, OsStr};\n     use str;\n     use libc;\n+    use os::unix::prelude::*;\n     use ptr;\n \n-    pub fn open(filename: Option<&[u8]>) -> Result<*mut u8, String> {\n+    pub fn open(filename: Option<&OsStr>) -> Result<*mut u8, String> {\n         check_for_errors_in(|| {\n             unsafe {\n                 match filename {\n@@ -210,8 +208,8 @@ mod dl {\n \n     const LAZY: libc::c_int = 1;\n \n-    unsafe fn open_external(filename: &[u8]) -> *mut u8 {\n-        let s = CString::new(filename).unwrap();\n+    unsafe fn open_external(filename: &OsStr) -> *mut u8 {\n+        let s = filename.to_cstring().unwrap();\n         dlopen(s.as_ptr(), LAZY) as *mut u8\n     }\n \n@@ -264,21 +262,22 @@ mod dl {\n \n #[cfg(target_os = \"windows\")]\n mod dl {\n+    use ffi::OsStr;\n     use iter::IteratorExt;\n     use libc;\n     use libc::consts::os::extra::ERROR_CALL_NOT_IMPLEMENTED;\n     use ops::FnOnce;\n     use os;\n+    use os::windows::prelude::*;\n     use option::Option::{self, Some, None};\n     use ptr;\n     use result::Result;\n     use result::Result::{Ok, Err};\n-    use str;\n     use string::String;\n     use vec::Vec;\n     use sys::c::compat::kernel32::SetThreadErrorMode;\n \n-    pub fn open(filename: Option<&[u8]>) -> Result<*mut u8, String> {\n+    pub fn open(filename: Option<&OsStr>) -> Result<*mut u8, String> {\n         // disable \"dll load failed\" error dialog.\n         let mut use_thread_mode = true;\n         let prev_error_mode = unsafe {\n@@ -308,9 +307,8 @@ mod dl {\n \n         let result = match filename {\n             Some(filename) => {\n-                let filename_str = str::from_utf8(filename).unwrap();\n-                let mut filename_str: Vec<u16> = filename_str.utf16_units().collect();\n-                filename_str.push(0);\n+                let filename_str: Vec<_> =\n+                    filename.encode_wide().chain(Some(0).into_iter()).collect();\n                 let result = unsafe {\n                     LoadLibraryW(filename_str.as_ptr() as *const libc::c_void)\n                 };"}, {"sha": "fd16bbcf574ba7d3bbf5f655320f3807eb7a1666", "filename": "src/libstd/sys/windows/backtrace.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6acf385c9674a359b5b45f6e127521dd1515668c/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6acf385c9674a359b5b45f6e127521dd1515668c/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fbacktrace.rs?ref=6acf385c9674a359b5b45f6e127521dd1515668c", "patch": "@@ -23,7 +23,6 @@\n //! this takes the route of using StackWalk64 in order to walk the stack.\n \n #![allow(dead_code)]\n-#![allow(deprecated)] // for old path for dynamic lib\n \n use prelude::v1::*;\n use io::prelude::*;\n@@ -34,7 +33,7 @@ use intrinsics;\n use io;\n use libc;\n use mem;\n-use old_path::Path;\n+use path::Path;\n use ptr;\n use str;\n use sync::{StaticMutex, MUTEX_INIT};"}]}