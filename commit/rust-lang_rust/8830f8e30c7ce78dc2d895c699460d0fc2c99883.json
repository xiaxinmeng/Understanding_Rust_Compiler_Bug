{"sha": "8830f8e30c7ce78dc2d895c699460d0fc2c99883", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MzBmOGUzMGM3Y2U3OGRjMmQ4OTVjNjk5NDYwZDBmYzJjOTk4ODM=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-08-05T02:58:59Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2021-08-18T07:25:26Z"}, "message": "Remove box syntax from rustc_parse", "tree": {"sha": "178142e1c49486ec68c045b6e0a5015cc17ff61d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/178142e1c49486ec68c045b6e0a5015cc17ff61d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8830f8e30c7ce78dc2d895c699460d0fc2c99883", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8830f8e30c7ce78dc2d895c699460d0fc2c99883", "html_url": "https://github.com/rust-lang/rust/commit/8830f8e30c7ce78dc2d895c699460d0fc2c99883", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8830f8e30c7ce78dc2d895c699460d0fc2c99883/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "823e6f161a977030b9350078e08088a1888eaec4", "url": "https://api.github.com/repos/rust-lang/rust/commits/823e6f161a977030b9350078e08088a1888eaec4", "html_url": "https://github.com/rust-lang/rust/commit/823e6f161a977030b9350078e08088a1888eaec4"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "611d72e61d01607759dca96cac45773c8ae0b433", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8830f8e30c7ce78dc2d895c699460d0fc2c99883/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8830f8e30c7ce78dc2d895c699460d0fc2c99883/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=8830f8e30c7ce78dc2d895c699460d0fc2c99883", "patch": "@@ -3,7 +3,6 @@\n #![feature(array_windows)]\n #![feature(crate_visibility_modifier)]\n #![cfg_attr(bootstrap, feature(bindings_after_at))]\n-#![feature(box_syntax)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "e5537d43ebaa1ef7c5225dc3861cce7ac3b5932f", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8830f8e30c7ce78dc2d895c699460d0fc2c99883/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8830f8e30c7ce78dc2d895c699460d0fc2c99883/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=8830f8e30c7ce78dc2d895c699460d0fc2c99883", "patch": "@@ -221,7 +221,7 @@ impl<'a> Parser<'a> {\n         } else if self.check_fn_front_matter(def_final) {\n             // FUNCTION ITEM\n             let (ident, sig, generics, body) = self.parse_fn(attrs, req_name, lo)?;\n-            (ident, ItemKind::Fn(box FnKind(def(), sig, generics, body)))\n+            (ident, ItemKind::Fn(Box::new(FnKind(def(), sig, generics, body))))\n         } else if self.eat_keyword(kw::Extern) {\n             if self.eat_keyword(kw::Crate) {\n                 // EXTERN CRATE\n@@ -548,7 +548,7 @@ impl<'a> Parser<'a> {\n                 };\n                 let trait_ref = TraitRef { path, ref_id: ty_first.id };\n \n-                ItemKind::Impl(box ImplKind {\n+                ItemKind::Impl(Box::new(ImplKind {\n                     unsafety,\n                     polarity,\n                     defaultness,\n@@ -557,11 +557,11 @@ impl<'a> Parser<'a> {\n                     of_trait: Some(trait_ref),\n                     self_ty: ty_second,\n                     items: impl_items,\n-                })\n+                }))\n             }\n             None => {\n                 // impl Type\n-                ItemKind::Impl(box ImplKind {\n+                ItemKind::Impl(Box::new(ImplKind {\n                     unsafety,\n                     polarity,\n                     defaultness,\n@@ -570,7 +570,7 @@ impl<'a> Parser<'a> {\n                     of_trait: None,\n                     self_ty: ty_first,\n                     items: impl_items,\n-                })\n+                }))\n             }\n         };\n \n@@ -710,7 +710,7 @@ impl<'a> Parser<'a> {\n             // It's a normal trait.\n             tps.where_clause = self.parse_where_clause()?;\n             let items = self.parse_item_list(attrs, |p| p.parse_trait_item(ForceCollect::No))?;\n-            Ok((ident, ItemKind::Trait(box TraitKind(is_auto, unsafety, tps, bounds, items))))\n+            Ok((ident, ItemKind::Trait(Box::new(TraitKind(is_auto, unsafety, tps, bounds, items)))))\n         }\n     }\n \n@@ -769,7 +769,7 @@ impl<'a> Parser<'a> {\n         let default = if self.eat(&token::Eq) { Some(self.parse_ty()?) } else { None };\n         self.expect_semi()?;\n \n-        Ok((ident, ItemKind::TyAlias(box TyAliasKind(def, generics, bounds, default))))\n+        Ok((ident, ItemKind::TyAlias(Box::new(TyAliasKind(def, generics, bounds, default)))))\n     }\n \n     /// Parses a `UseTree`."}]}