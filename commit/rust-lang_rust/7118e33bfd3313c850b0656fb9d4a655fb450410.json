{"sha": "7118e33bfd3313c850b0656fb9d4a655fb450410", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcxMThlMzNiZmQzMzEzYzg1MGIwNjU2ZmI5ZDRhNjU1ZmI0NTA0MTA=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-05T14:59:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-01-07T16:42:13Z"}, "message": "Remove private methods from TyCtxt impl block: rustc::ty::print::pretty.", "tree": {"sha": "17e67f3d5f4f8f9fd32f64768b647bea56ac3f2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/17e67f3d5f4f8f9fd32f64768b647bea56ac3f2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7118e33bfd3313c850b0656fb9d4a655fb450410", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7118e33bfd3313c850b0656fb9d4a655fb450410", "html_url": "https://github.com/rust-lang/rust/commit/7118e33bfd3313c850b0656fb9d4a655fb450410", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7118e33bfd3313c850b0656fb9d4a655fb450410/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "640cae257b5c3cbc4b4588e1112b604da1f4c341", "url": "https://api.github.com/repos/rust-lang/rust/commits/640cae257b5c3cbc4b4588e1112b604da1f4c341", "html_url": "https://github.com/rust-lang/rust/commit/640cae257b5c3cbc4b4588e1112b604da1f4c341"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "16d89343596878c0a042bec8052c3f5b57fdf33d", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/7118e33bfd3313c850b0656fb9d4a655fb450410/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7118e33bfd3313c850b0656fb9d4a655fb450410/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=7118e33bfd3313c850b0656fb9d4a655fb450410", "patch": "@@ -1036,34 +1036,34 @@ impl<F> FmtPrinter<'a, 'tcx, F> {\n     }\n }\n \n-impl TyCtxt<'t> {\n-    // HACK(eddyb) get rid of `def_path_str` and/or pass `Namespace` explicitly always\n-    // (but also some things just print a `DefId` generally so maybe we need this?)\n-    fn guess_def_namespace(self, def_id: DefId) -> Namespace {\n-        match self.def_key(def_id).disambiguated_data.data {\n-            DefPathData::TypeNs(..) | DefPathData::CrateRoot | DefPathData::ImplTrait => {\n-                Namespace::TypeNS\n-            }\n+// HACK(eddyb) get rid of `def_path_str` and/or pass `Namespace` explicitly always\n+// (but also some things just print a `DefId` generally so maybe we need this?)\n+fn guess_def_namespace(tcx: TyCtxt<'_>, def_id: DefId) -> Namespace {\n+    match tcx.def_key(def_id).disambiguated_data.data {\n+        DefPathData::TypeNs(..) | DefPathData::CrateRoot | DefPathData::ImplTrait => {\n+            Namespace::TypeNS\n+        }\n \n-            DefPathData::ValueNs(..)\n-            | DefPathData::AnonConst\n-            | DefPathData::ClosureExpr\n-            | DefPathData::Ctor => Namespace::ValueNS,\n+        DefPathData::ValueNs(..)\n+        | DefPathData::AnonConst\n+        | DefPathData::ClosureExpr\n+        | DefPathData::Ctor => Namespace::ValueNS,\n \n-            DefPathData::MacroNs(..) => Namespace::MacroNS,\n+        DefPathData::MacroNs(..) => Namespace::MacroNS,\n \n-            _ => Namespace::TypeNS,\n-        }\n+        _ => Namespace::TypeNS,\n     }\n+}\n \n+impl TyCtxt<'t> {\n     /// Returns a string identifying this `DefId`. This string is\n     /// suitable for user output.\n     pub fn def_path_str(self, def_id: DefId) -> String {\n         self.def_path_str_with_substs(def_id, &[])\n     }\n \n     pub fn def_path_str_with_substs(self, def_id: DefId, substs: &'t [GenericArg<'t>]) -> String {\n-        let ns = self.guess_def_namespace(def_id);\n+        let ns = guess_def_namespace(self, def_id);\n         debug!(\"def_path_str: def_id={:?}, ns={:?}\", def_id, ns);\n         let mut s = String::new();\n         let _ = FmtPrinter::new(self, &mut s, ns).print_def_path(def_id, substs);"}]}