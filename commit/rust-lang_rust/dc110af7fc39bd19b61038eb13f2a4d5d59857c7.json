{"sha": "dc110af7fc39bd19b61038eb13f2a4d5d59857c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjMTEwYWY3ZmMzOWJkMTliNjEwMzhlYjEzZjJhNGQ1ZDU5ODU3Yzc=", "commit": {"author": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-14T02:04:27Z"}, "committer": {"name": "Christiaan Dirkx", "email": "christiaan@dirkx.email", "date": "2021-04-22T22:15:35Z"}, "message": "Explicitly implement `!Send` and `!Sync` for `sys::{Args, Env}`", "tree": {"sha": "578c3cd340ec60bb33eb8971012b55019c8ca245", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/578c3cd340ec60bb33eb8971012b55019c8ca245"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc110af7fc39bd19b61038eb13f2a4d5d59857c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc110af7fc39bd19b61038eb13f2a4d5d59857c7", "html_url": "https://github.com/rust-lang/rust/commit/dc110af7fc39bd19b61038eb13f2a4d5d59857c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc110af7fc39bd19b61038eb13f2a4d5d59857c7/comments", "author": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CDirkx", "id": 11176562, "node_id": "MDQ6VXNlcjExMTc2NTYy", "avatar_url": "https://avatars.githubusercontent.com/u/11176562?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CDirkx", "html_url": "https://github.com/CDirkx", "followers_url": "https://api.github.com/users/CDirkx/followers", "following_url": "https://api.github.com/users/CDirkx/following{/other_user}", "gists_url": "https://api.github.com/users/CDirkx/gists{/gist_id}", "starred_url": "https://api.github.com/users/CDirkx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CDirkx/subscriptions", "organizations_url": "https://api.github.com/users/CDirkx/orgs", "repos_url": "https://api.github.com/users/CDirkx/repos", "events_url": "https://api.github.com/users/CDirkx/events{/privacy}", "received_events_url": "https://api.github.com/users/CDirkx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f1aeb52c22e3784928765e34be6dc0d17a350b4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1aeb52c22e3784928765e34be6dc0d17a350b4", "html_url": "https://github.com/rust-lang/rust/commit/5f1aeb52c22e3784928765e34be6dc0d17a350b4"}], "stats": {"total": 57, "additions": 30, "deletions": 27}, "files": [{"sha": "4eb0d8437ba5f5f7ef8ab050689853d5d5738fdb", "filename": "library/std/src/sys/hermit/args.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dc110af7fc39bd19b61038eb13f2a4d5d59857c7/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc110af7fc39bd19b61038eb13f2a4d5d59857c7/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fargs.rs?ref=dc110af7fc39bd19b61038eb13f2a4d5d59857c7", "patch": "@@ -1,6 +1,5 @@\n use crate::ffi::OsString;\n use crate::fmt;\n-use crate::marker::PhantomData;\n use crate::vec;\n \n /// One-time global initialization.\n@@ -20,7 +19,6 @@ pub fn args() -> Args {\n \n pub struct Args {\n     iter: vec::IntoIter<OsString>,\n-    _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n impl fmt::Debug for Args {\n@@ -29,6 +27,9 @@ impl fmt::Debug for Args {\n     }\n }\n \n+impl !Send for Args {}\n+impl !Sync for Args {}\n+\n impl Iterator for Args {\n     type Item = OsString;\n     fn next(&mut self) -> Option<OsString> {\n@@ -54,7 +55,6 @@ impl DoubleEndedIterator for Args {\n mod imp {\n     use super::Args;\n     use crate::ffi::{CStr, OsString};\n-    use crate::marker::PhantomData;\n     use crate::ptr;\n     use crate::sys_common::os_str_bytes::*;\n \n@@ -77,7 +77,7 @@ mod imp {\n     }\n \n     pub fn args() -> Args {\n-        Args { iter: clone().into_iter(), _dont_send_or_sync_me: PhantomData }\n+        Args { iter: clone().into_iter() }\n     }\n \n     fn clone() -> Vec<OsString> {"}, {"sha": "81cd68a74e6654e85ba8d81b0c8fa83d7d654af9", "filename": "library/std/src/sys/hermit/os.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc110af7fc39bd19b61038eb13f2a4d5d59857c7/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc110af7fc39bd19b61038eb13f2a4d5d59857c7/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fhermit%2Fos.rs?ref=dc110af7fc39bd19b61038eb13f2a4d5d59857c7", "patch": "@@ -110,9 +110,11 @@ pub fn init_environment(env: *const *const i8) {\n \n pub struct Env {\n     iter: vec::IntoIter<(OsString, OsString)>,\n-    _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n+impl !Send for Env {}\n+impl !Sync for Env {}\n+\n impl Iterator for Env {\n     type Item = (OsString, OsString);\n     fn next(&mut self) -> Option<(OsString, OsString)> {\n@@ -134,7 +136,7 @@ pub fn env() -> Env {\n             result.push((key.clone(), value.clone()));\n         }\n \n-        return Env { iter: result.into_iter(), _dont_send_or_sync_me: PhantomData };\n+        return Env { iter: result.into_iter() };\n     }\n }\n "}, {"sha": "fc423e393d4a4b8e823ba74772ba556c5c899240", "filename": "library/std/src/sys/unix/args.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dc110af7fc39bd19b61038eb13f2a4d5d59857c7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc110af7fc39bd19b61038eb13f2a4d5d59857c7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fargs.rs?ref=dc110af7fc39bd19b61038eb13f2a4d5d59857c7", "patch": "@@ -7,7 +7,6 @@\n \n use crate::ffi::OsString;\n use crate::fmt;\n-use crate::marker::PhantomData;\n use crate::vec;\n \n /// One-time global initialization.\n@@ -27,9 +26,11 @@ pub fn args() -> Args {\n \n pub struct Args {\n     iter: vec::IntoIter<OsString>,\n-    _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n+impl !Send for Args {}\n+impl !Sync for Args {}\n+\n impl fmt::Debug for Args {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.iter.as_slice().fmt(f)\n@@ -77,7 +78,6 @@ impl DoubleEndedIterator for Args {\n mod imp {\n     use super::Args;\n     use crate::ffi::{CStr, OsString};\n-    use crate::marker::PhantomData;\n     use crate::os::unix::prelude::*;\n     use crate::ptr;\n     use crate::sync::atomic::{AtomicIsize, AtomicPtr, Ordering};\n@@ -134,7 +134,7 @@ mod imp {\n     }\n \n     pub fn args() -> Args {\n-        Args { iter: clone().into_iter(), _dont_send_or_sync_me: PhantomData }\n+        Args { iter: clone().into_iter() }\n     }\n \n     fn clone() -> Vec<OsString> {\n@@ -156,7 +156,6 @@ mod imp {\n mod imp {\n     use super::Args;\n     use crate::ffi::CStr;\n-    use crate::marker::PhantomData;\n \n     pub unsafe fn init(_argc: isize, _argv: *const *const u8) {}\n \n@@ -181,7 +180,7 @@ mod imp {\n                 })\n                 .collect::<Vec<_>>()\n         };\n-        Args { iter: vec.into_iter(), _dont_send_or_sync_me: PhantomData }\n+        Args { iter: vec.into_iter() }\n     }\n \n     // As _NSGetArgc and _NSGetArgv aren't mentioned in iOS docs\n@@ -248,6 +247,6 @@ mod imp {\n             }\n         }\n \n-        Args { iter: res.into_iter(), _dont_send_or_sync_me: PhantomData }\n+        Args { iter: res.into_iter() }\n     }\n }"}, {"sha": "984c08c2ad53171d5741f1ea4b923a7a9490ac32", "filename": "library/std/src/sys/unix/os.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc110af7fc39bd19b61038eb13f2a4d5d59857c7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc110af7fc39bd19b61038eb13f2a4d5d59857c7/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fos.rs?ref=dc110af7fc39bd19b61038eb13f2a4d5d59857c7", "patch": "@@ -12,7 +12,6 @@ use crate::ffi::{CStr, CString, OsStr, OsString};\n use crate::fmt;\n use crate::io;\n use crate::iter;\n-use crate::marker::PhantomData;\n use crate::mem;\n use crate::memchr;\n use crate::path::{self, PathBuf};\n@@ -460,9 +459,11 @@ pub fn current_exe() -> io::Result<PathBuf> {\n \n pub struct Env {\n     iter: vec::IntoIter<(OsString, OsString)>,\n-    _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n+impl !Send for Env {}\n+impl !Sync for Env {}\n+\n impl Iterator for Env {\n     type Item = (OsString, OsString);\n     fn next(&mut self) -> Option<(OsString, OsString)> {\n@@ -510,7 +511,7 @@ pub fn env() -> Env {\n                 environ = environ.add(1);\n             }\n         }\n-        return Env { iter: result.into_iter(), _dont_send_or_sync_me: PhantomData };\n+        return Env { iter: result.into_iter() };\n     }\n \n     fn parse(input: &[u8]) -> Option<(OsString, OsString)> {"}, {"sha": "3c3e66985b3d906b8c4ebf9ccbc4d233e9adaedf", "filename": "library/std/src/sys/wasi/args.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dc110af7fc39bd19b61038eb13f2a4d5d59857c7/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc110af7fc39bd19b61038eb13f2a4d5d59857c7/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fargs.rs?ref=dc110af7fc39bd19b61038eb13f2a4d5d59857c7", "patch": "@@ -2,7 +2,6 @@\n \n use crate::ffi::{CStr, OsStr, OsString};\n use crate::fmt;\n-use crate::marker::PhantomData;\n use crate::os::wasi::ffi::OsStrExt;\n use crate::vec;\n \n@@ -12,15 +11,14 @@ pub unsafe fn cleanup() {}\n \n pub struct Args {\n     iter: vec::IntoIter<OsString>,\n-    _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n+impl !Send for Args {}\n+impl !Sync for Args {}\n+\n /// Returns the command line arguments\n pub fn args() -> Args {\n-    Args {\n-        iter: maybe_args().unwrap_or(Vec::new()).into_iter(),\n-        _dont_send_or_sync_me: PhantomData,\n-    }\n+    Args { iter: maybe_args().unwrap_or(Vec::new()).into_iter() }\n }\n \n fn maybe_args() -> Option<Vec<OsString>> {"}, {"sha": "f129ee55a8391b2c6a858dab3fb2d9c390896175", "filename": "library/std/src/sys/wasi/os.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dc110af7fc39bd19b61038eb13f2a4d5d59857c7/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc110af7fc39bd19b61038eb13f2a4d5d59857c7/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fos.rs?ref=dc110af7fc39bd19b61038eb13f2a4d5d59857c7", "patch": "@@ -129,9 +129,11 @@ pub fn current_exe() -> io::Result<PathBuf> {\n }\n pub struct Env {\n     iter: vec::IntoIter<(OsString, OsString)>,\n-    _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n+impl !Send for Env {}\n+impl !Sync for Env {}\n+\n impl Iterator for Env {\n     type Item = (OsString, OsString);\n     fn next(&mut self) -> Option<(OsString, OsString)> {\n@@ -155,7 +157,7 @@ pub fn env() -> Env {\n                 environ = environ.add(1);\n             }\n         }\n-        return Env { iter: result.into_iter(), _dont_send_or_sync_me: PhantomData };\n+        return Env { iter: result.into_iter() };\n     }\n \n     // See src/libstd/sys/unix/os.rs, same as that"}, {"sha": "99161ee056a3e66f9fb32d970b17808d0931a5bf", "filename": "library/std/src/sys/wasm/args.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dc110af7fc39bd19b61038eb13f2a4d5d59857c7/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc110af7fc39bd19b61038eb13f2a4d5d59857c7/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Fargs.rs?ref=dc110af7fc39bd19b61038eb13f2a4d5d59857c7", "patch": "@@ -1,6 +1,5 @@\n use crate::ffi::OsString;\n use crate::fmt;\n-use crate::marker::PhantomData;\n use crate::vec;\n \n pub unsafe fn init(_argc: isize, _argv: *const *const u8) {\n@@ -10,14 +9,16 @@ pub unsafe fn init(_argc: isize, _argv: *const *const u8) {\n pub unsafe fn cleanup() {}\n \n pub fn args() -> Args {\n-    Args { iter: Vec::new().into_iter(), _dont_send_or_sync_me: PhantomData }\n+    Args { iter: Vec::new().into_iter() }\n }\n \n pub struct Args {\n     iter: vec::IntoIter<OsString>,\n-    _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n+impl !Send for Args {}\n+impl !Sync for Args {}\n+\n impl fmt::Debug for Args {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         self.iter.as_slice().fmt(f)"}]}