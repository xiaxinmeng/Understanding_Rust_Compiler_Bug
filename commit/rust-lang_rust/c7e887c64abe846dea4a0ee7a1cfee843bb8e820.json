{"sha": "c7e887c64abe846dea4a0ee7a1cfee843bb8e820", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3ZTg4N2M2NGFiZTg0NmRlYTRhMGVlN2ExY2ZlZTg0M2JiOGU4MjA=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-09-21T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-09-21T13:36:45Z"}, "message": "DroplessArena: Allocate objects from the end of memory chunk\n\nAllocating from the end of memory chunk simplifies the alignment code\nand reduces the number of checked arithmetic operations.", "tree": {"sha": "09e66f0286994f33144606f1200974ef4cfd94e8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09e66f0286994f33144606f1200974ef4cfd94e8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7e887c64abe846dea4a0ee7a1cfee843bb8e820", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7e887c64abe846dea4a0ee7a1cfee843bb8e820", "html_url": "https://github.com/rust-lang/rust/commit/c7e887c64abe846dea4a0ee7a1cfee843bb8e820", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7e887c64abe846dea4a0ee7a1cfee843bb8e820/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70148d7b3161912381b1a5c427c3a690e12c5b24", "url": "https://api.github.com/repos/rust-lang/rust/commits/70148d7b3161912381b1a5c427c3a690e12c5b24", "html_url": "https://github.com/rust-lang/rust/commit/70148d7b3161912381b1a5c427c3a690e12c5b24"}], "stats": {"total": 37, "additions": 16, "deletions": 21}, "files": [{"sha": "32783951a313d1c3ea1d54320d7e7be7794f930b", "filename": "compiler/rustc_arena/src/lib.rs", "status": "modified", "additions": 16, "deletions": 21, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c7e887c64abe846dea4a0ee7a1cfee843bb8e820/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7e887c64abe846dea4a0ee7a1cfee843bb8e820/compiler%2Frustc_arena%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_arena%2Fsrc%2Flib.rs?ref=c7e887c64abe846dea4a0ee7a1cfee843bb8e820", "patch": "@@ -299,11 +299,13 @@ unsafe impl<#[may_dangle] T> Drop for TypedArena<T> {\n unsafe impl<T: Send> Send for TypedArena<T> {}\n \n pub struct DroplessArena {\n-    /// A pointer to the next object to be allocated.\n-    ptr: Cell<*mut u8>,\n+    /// A pointer to the start of the free space.\n+    start: Cell<*mut u8>,\n \n-    /// A pointer to the end of the allocated area. When this pointer is\n-    /// reached, a new chunk is allocated.\n+    /// A pointer to the end of free space.\n+    ///\n+    /// The allocation proceeds from the end of the chunk towards the start.\n+    /// When this pointer crosses the start pointer, a new chunk is allocated.\n     end: Cell<*mut u8>,\n \n     /// A vector of arena chunks.\n@@ -316,7 +318,7 @@ impl Default for DroplessArena {\n     #[inline]\n     fn default() -> DroplessArena {\n         DroplessArena {\n-            ptr: Cell::new(ptr::null_mut()),\n+            start: Cell::new(ptr::null_mut()),\n             end: Cell::new(ptr::null_mut()),\n             chunks: Default::default(),\n         }\n@@ -348,7 +350,7 @@ impl DroplessArena {\n             new_cap = cmp::max(additional, new_cap);\n \n             let mut chunk = TypedArenaChunk::<u8>::new(new_cap);\n-            self.ptr.set(chunk.start());\n+            self.start.set(chunk.start());\n             self.end.set(chunk.end());\n             chunks.push(chunk);\n         }\n@@ -359,24 +361,17 @@ impl DroplessArena {\n     /// request.\n     #[inline]\n     fn alloc_raw_without_grow(&self, layout: Layout) -> Option<*mut u8> {\n-        let ptr = self.ptr.get() as usize;\n+        let start = self.start.get() as usize;\n         let end = self.end.get() as usize;\n+\n         let align = layout.align();\n         let bytes = layout.size();\n-        // The allocation request fits into the current chunk iff:\n-        //\n-        // let aligned = align_to(ptr, align);\n-        // ptr <= aligned && aligned + bytes <= end\n-        //\n-        // Except that we work with fixed width integers and need to be careful\n-        // about potential overflow in the calcuation. If the overflow does\n-        // happen, then we definitely don't have enough free and need to grow\n-        // the arena.\n-        let aligned = ptr.checked_add(align - 1)? & !(align - 1);\n-        let new_ptr = aligned.checked_add(bytes)?;\n-        if new_ptr <= end {\n-            self.ptr.set(new_ptr as *mut u8);\n-            Some(aligned as *mut u8)\n+\n+        let new_end = end.checked_sub(bytes)? & !(align - 1);\n+        if start <= new_end {\n+            let new_end = new_end as *mut u8;\n+            self.end.set(new_end);\n+            Some(new_end)\n         } else {\n             None\n         }"}]}