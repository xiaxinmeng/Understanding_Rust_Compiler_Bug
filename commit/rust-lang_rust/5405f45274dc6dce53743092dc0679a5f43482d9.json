{"sha": "5405f45274dc6dce53743092dc0679a5f43482d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MDVmNDUyNzRkYzZkY2U1Mzc0MzA5MmRjMDY3OWE1ZjQzNDgyZDk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-11T13:10:24Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-05-11T13:10:24Z"}, "message": "Get rid of block indices", "tree": {"sha": "d1417d56ca0770e3cbf7abf1273ed1f2fce3fe4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1417d56ca0770e3cbf7abf1273ed1f2fce3fe4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5405f45274dc6dce53743092dc0679a5f43482d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5405f45274dc6dce53743092dc0679a5f43482d9", "html_url": "https://github.com/rust-lang/rust/commit/5405f45274dc6dce53743092dc0679a5f43482d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5405f45274dc6dce53743092dc0679a5f43482d9/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d086df0954263c2667fb4af65ab82b7e39d51ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d086df0954263c2667fb4af65ab82b7e39d51ca", "html_url": "https://github.com/rust-lang/rust/commit/7d086df0954263c2667fb4af65ab82b7e39d51ca"}], "stats": {"total": 178, "additions": 62, "deletions": 116}, "files": [{"sha": "01dea8d82fbf8fd91b88630442efd4fec0d34f00", "filename": "src/comp/front/ast.rs", "status": "modified", "additions": 12, "deletions": 45, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5405f45274dc6dce53743092dc0679a5f43482d9/src%2Fcomp%2Ffront%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5405f45274dc6dce53743092dc0679a5f43482d9/src%2Fcomp%2Ffront%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fast.rs?ref=5405f45274dc6dce53743092dc0679a5f43482d9", "patch": "@@ -94,15 +94,8 @@ type meta_item = spanned[meta_item_];\n type meta_item_ = rec(ident name, str value);\n \n type block = spanned[block_];\n-type block_index = hashmap[ident, block_index_entry];\n-tag block_index_entry {\n-    bie_item(@item);\n-    bie_local(@local);\n-    bie_tag_variant(@item /* tag item */, uint /* variant index */);\n-}\n type block_ = rec(vec[@stmt] stmts,\n                   Option.t[@expr] expr,\n-                  hashmap[ident,block_index_entry] index,\n                   ann a); /* ann is only meaningful for the ts_ann field */\n \n type variant_def = tup(def_id /* tag */, def_id /* variant */);\n@@ -421,6 +414,18 @@ tag item_ {\n     item_obj(ident, _obj, vec[ty_param], obj_def_ids, ann);\n }\n \n+fn item_ident(@item it) -> ident {\n+    ret alt (it.node) {\n+        case (item_const(?ident, _, _, _, _)) { ident }\n+        case (item_fn(?ident, _, _, _, _)) { ident }\n+        case (item_mod(?ident, _, _)) { ident }\n+        case (item_native_mod(?ident, _, _)) { ident }\n+        case (item_ty(?ident, _, _, _, _)) { ident }\n+        case (item_tag(?ident, _, _, _, _)) { ident }\n+        case (item_obj(?ident, _, _, _, _)) { ident }\n+    }\n+}\n+\n type native_item = spanned[native_item_];\n tag native_item_ {\n     native_item_ty(ident, def_id);\n@@ -500,44 +505,6 @@ fn index_native_view_item(native_mod_index index, @view_item it) {\n     }\n }\n \n-fn index_stmt(block_index index, @stmt s) {\n-    alt (s.node) {\n-        case (ast.stmt_decl(?d,_)) {\n-            alt (d.node) {\n-                case (ast.decl_local(?loc)) {\n-                    index.insert(loc.ident, ast.bie_local(loc));\n-                }\n-                case (ast.decl_item(?it)) {\n-                    alt (it.node) {\n-                        case (ast.item_fn(?i, _, _, _, _)) {\n-                            index.insert(i, ast.bie_item(it));\n-                        }\n-                        case (ast.item_mod(?i, _, _)) {\n-                            index.insert(i, ast.bie_item(it));\n-                        }\n-                        case (ast.item_ty(?i, _, _, _, _)) {\n-                            index.insert(i, ast.bie_item(it));\n-                        }\n-                        case (ast.item_tag(?i, ?variants, _, _, _)) {\n-                            index.insert(i, ast.bie_item(it));\n-                            let uint vid = 0u;\n-                            for (ast.variant v in variants) {\n-                                auto t = ast.bie_tag_variant(it, vid);\n-                                index.insert(v.node.name, t);\n-                                vid += 1u;\n-                            }\n-                        }\n-                        case (ast.item_obj(?i, _, _, _, _)) {\n-                            index.insert(i, ast.bie_item(it));\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        case (_) { /* fall through */ }\n-    }\n-}\n-\n fn is_exported(ident i, _mod m) -> bool {\n     auto count = 0;\n     for (@ast.view_item vi in m.view_items) {"}, {"sha": "69f0e0546c49ae24529fd8484c7b9eff37e28e89", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5405f45274dc6dce53743092dc0679a5f43482d9/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5405f45274dc6dce53743092dc0679a5f43482d9/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=5405f45274dc6dce53743092dc0679a5f43482d9", "patch": "@@ -1626,15 +1626,6 @@ fn parse_source_stmt(parser p) -> @ast.stmt {\n     fail;\n }\n \n-fn index_block(parser p, vec[@ast.stmt] stmts, Option.t[@ast.expr] expr)\n-        -> ast.block_ {\n-    auto index = new_str_hash[ast.block_index_entry]();\n-    for (@ast.stmt s in stmts) {\n-        ast.index_stmt(index, s);\n-    }\n-    ret rec(stmts=stmts, expr=expr, index=index, a=p.get_ann());\n-}\n-\n fn index_arm(@ast.pat pat) -> hashmap[ast.ident,ast.def_id] {\n     fn do_index_arm(&hashmap[ast.ident,ast.def_id] index, @ast.pat pat) {\n         alt (pat.node) {\n@@ -1770,7 +1761,7 @@ fn parse_block(parser p) -> ast.block {\n     auto hi = p.get_hi_pos();\n     p.bump();\n \n-    auto bloc = index_block(p, stmts, expr);\n+    auto bloc = rec(stmts=stmts, expr=expr, a=p.get_ann());\n     ret spanned[ast.block_](lo, hi, bloc);\n }\n "}, {"sha": "bf85297f4d408a83282a62c6620ec798dd5e26c6", "filename": "src/comp/middle/fold.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5405f45274dc6dce53743092dc0679a5f43482d9/src%2Fcomp%2Fmiddle%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5405f45274dc6dce53743092dc0679a5f43482d9/src%2Fcomp%2Fmiddle%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffold.rs?ref=5405f45274dc6dce53743092dc0679a5f43482d9", "patch": "@@ -862,7 +862,6 @@ fn fold_stmt[ENV](&ENV env, &ast_fold[ENV] fld, &@stmt s) -> @stmt {\n \n fn fold_block[ENV](&ENV env, &ast_fold[ENV] fld, &block blk) -> block {\n \n-    auto index = new_str_hash[ast.block_index_entry]();\n     let ENV env_ = fld.update_env_for_block(env, blk);\n \n     if (!fld.keep_going(env_)) {\n@@ -873,7 +872,6 @@ fn fold_block[ENV](&ENV env, &ast_fold[ENV] fld, &block blk) -> block {\n     for (@ast.stmt s in blk.node.stmts) {\n         auto new_stmt = fold_stmt[ENV](env_, fld, s);\n         Vec.push[@ast.stmt](stmts, new_stmt);\n-        ast.index_stmt(index, new_stmt);\n     }\n \n     auto expr = none[@ast.expr];\n@@ -887,7 +885,7 @@ fn fold_block[ENV](&ENV env, &ast_fold[ENV] fld, &block blk) -> block {\n     }\n \n     auto aa = fld.fold_ann(env, blk.node.a);\n-    ret respan(blk.span, rec(stmts=stmts, expr=expr, index=index, a=aa));\n+    ret respan(blk.span, rec(stmts=stmts, expr=expr, a=aa));\n }\n \n fn fold_arm[ENV](&ENV env, &ast_fold[ENV] fld, &arm a) -> arm {"}, {"sha": "ee3288ac377d5b4f46ff65c6968cab2f58ac4fa3", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 47, "deletions": 52, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/5405f45274dc6dce53743092dc0679a5f43482d9/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5405f45274dc6dce53743092dc0679a5f43482d9/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=5405f45274dc6dce53743092dc0679a5f43482d9", "patch": "@@ -500,82 +500,77 @@ fn lookup_in_obj(ident id, &ast._obj ob, &vec[ast.ty_param] ty_params,\n \n fn lookup_in_block(ident id, &ast.block_ b, namespace ns)\n     -> Option.t[def] {\n-    alt (b.index.find(id)) {\n-        case (some[ast.block_index_entry](?ix)) {\n-            alt (ix) {\n-                case (ast.bie_item(?it)) {\n-                    ret found_def_item(it, ns);\n-                }\n-                case (ast.bie_local(?l)) {\n-                    if (ns == ns_value) {\n-                        ret some(ast.def_local(l.id));\n+    for (@ast.stmt st in b.stmts) {\n+        alt (st.node) {\n+            case (ast.stmt_decl(?d,_)) {\n+                alt (d.node) {\n+                    case (ast.decl_local(?loc)) {\n+                        if (ns == ns_value && Str.eq(id, loc.ident)) {\n+                            ret some(ast.def_local(loc.id));\n+                        }\n                     }\n-                }\n-                case (ast.bie_tag_variant(?item, ?variant_idx)) {\n-                    if (ns == ns_value) {\n-                        ret some(found_def_tag(item, variant_idx));\n+                    case (ast.decl_item(?it)) {\n+                        alt (it.node) {\n+                            case (ast.item_tag(?name, ?variants, _,\n+                                               ?defid, _)) {\n+                                if (ns == ns_type) {\n+                                    if (Str.eq(name, id)) {\n+                                        ret some(ast.def_ty(defid));\n+                                    }\n+                                } else {\n+                                    for (ast.variant v in variants) {\n+                                        if (Str.eq(v.node.name, id)) {\n+                                            ret some(ast.def_variant(\n+                                                      defid, v.node.id));\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                            case (_) {\n+                                if (Str.eq(ast.item_ident(it), id)) {\n+                                    auto found = found_def_item(it, ns);\n+                                    if (found != none[def]) { ret found; }\n+                                }\n+                            }\n+                        }\n                     }\n                 }\n             }\n+            case (_) {}\n         }\n-        case (_) { }\n     }\n     ret none[def];\n }\n \n fn found_def_item(@ast.item i, namespace ns) -> Option.t[def] {\n     alt (i.node) {\n-        case (ast.item_const(_, _, _, ?id, _)) {\n-            if (ns == ns_value) {\n-                ret some(ast.def_const(id));\n-            }\n+        case (ast.item_const(_, _, _, ?defid, _)) {\n+            if (ns == ns_value) { ret some(ast.def_const(defid)); }\n         }\n-        case (ast.item_fn(_, _, _, ?id, _)) {\n-            if (ns == ns_value) {\n-                ret some(ast.def_fn(id));\n-            }\n+        case (ast.item_fn(_, _, _, ?defid, _)) {\n+            if (ns == ns_value) { ret some(ast.def_fn(defid)); }\n         }\n-        case (ast.item_mod(_, _, ?id)) {\n-            ret some(ast.def_mod(id));\n+        case (ast.item_mod(_, _, ?defid)) {\n+            ret some(ast.def_mod(defid));\n         }\n-        case (ast.item_native_mod(_, _, ?id)) {\n-            ret some(ast.def_native_mod(id));\n+        case (ast.item_native_mod(_, _, ?defid)) {\n+            ret some(ast.def_native_mod(defid));\n         }\n-        case (ast.item_ty(_, _, _, ?id, _)) {\n-            if (ns == ns_type) {\n-                ret some(ast.def_ty(id));\n-            }\n+        case (ast.item_ty(_, _, _, ?defid, _)) {\n+            if (ns == ns_type) { ret some(ast.def_ty(defid)); }\n         }\n-        case (ast.item_tag(_, _, _, ?id, _)) {\n-            if (ns == ns_type) {\n-                ret some(ast.def_ty(id));\n-            }\n+        case (ast.item_tag(_, _, _, ?defid, _)) {\n+            if (ns == ns_type) { ret some(ast.def_ty(defid)); }\n         }\n         case (ast.item_obj(_, _, _, ?odid, _)) {\n-            if (ns == ns_value) {\n-                ret some(ast.def_obj(odid.ctor));\n-            } else {\n-                ret some(ast.def_obj(odid.ty));\n-            }\n+            if (ns == ns_value) { ret some(ast.def_obj(odid.ctor)); }\n+            else { ret some(ast.def_obj(odid.ty)); }\n         }\n         case (_) { }\n     }\n     ret none[def];\n }\n \n-fn found_def_tag(@ast.item item, uint variant_idx) -> def {\n-    alt (item.node) {\n-        case (ast.item_tag(_, ?variants, _, ?tid, _)) {\n-            auto vid = variants.(variant_idx).node.id;\n-            ret ast.def_variant(tid, vid);\n-        }\n-        case (_) {\n-            log_err \"tag item not actually a tag\";\n-            fail;\n-        }\n-    }\n-}\n-\n fn lookup_in_mod_strict(&env e, def m, &span sp, ident id,\n                         namespace ns, dir dr) -> def {\n     alt (lookup_in_mod(e, m, id, ns, dr)) {"}, {"sha": "fca0ab2308b00b54af96a3d565aeabbd4d26ff4c", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5405f45274dc6dce53743092dc0679a5f43482d9/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5405f45274dc6dce53743092dc0679a5f43482d9/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=5405f45274dc6dce53743092dc0679a5f43482d9", "patch": "@@ -1507,7 +1507,6 @@ mod Pushdown {\n                 auto e_1 = pushdown_expr(fcx, expected, e_0);\n                 auto block_ = rec(stmts=bloc.node.stmts,\n                                   expr=some[@ast.expr](e_1),\n-                                  index=bloc.node.index,\n                                   a=plain_ann(fcx.ccx.tcx));\n                 ret fold.respan[ast.block_](bloc.span, block_);\n             }\n@@ -2806,7 +2805,6 @@ fn check_block(&@fn_ctxt fcx, &ast.block block) -> ast.block {\n \n     ret fold.respan[ast.block_](block.span,\n                                 rec(stmts=stmts, expr=expr,\n-                                    index=block.node.index,\n                                     a=plain_ann(fcx.ccx.tcx)));\n }\n "}, {"sha": "d4e2e8c633505547e34e8162b18175e4071d42d7", "filename": "src/comp/middle/typestate_check.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5405f45274dc6dce53743092dc0679a5f43482d9/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5405f45274dc6dce53743092dc0679a5f43482d9/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs?ref=5405f45274dc6dce53743092dc0679a5f43482d9", "patch": "@@ -6,7 +6,6 @@ import front.ast.mutability;\n import front.ast.item;\n import front.ast.block;\n import front.ast.block_;\n-import front.ast.block_index_entry;\n import front.ast.mod_index_entry;\n import front.ast.obj_field;\n import front.ast.decl;\n@@ -2337,12 +2336,10 @@ fn annotate_stmt(&fn_info_map fm, &@stmt s) -> @stmt {\n }\n fn annotate_block(&fn_info_map fm, &block b) -> block {\n     let vec[@stmt] new_stmts = vec();\n-    auto new_index = new_str_hash[block_index_entry]();\n \n     for (@stmt s in b.node.stmts) {\n         auto new_s = annotate_stmt(fm, s);\n         Vec.push[@stmt](new_stmts, new_s);\n-        ast.index_stmt(new_index, new_s);\n     }\n     fn ann_e(fn_info_map fm, &@expr e) -> @expr {\n         ret annotate_expr(fm, e);\n@@ -2352,7 +2349,7 @@ fn annotate_block(&fn_info_map fm, &block b) -> block {\n     auto new_e = Option.map[@expr, @expr](f, b.node.expr);\n \n     ret respan(b.span,\n-          rec(stmts=new_stmts, expr=new_e, index=new_index with b.node));\n+          rec(stmts=new_stmts, expr=new_e with b.node));\n }\n fn annotate_fn(&fn_info_map fm, &ast._fn f) -> ast._fn {\n     // subexps have *already* been annotated based on"}]}