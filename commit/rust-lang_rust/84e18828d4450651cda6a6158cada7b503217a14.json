{"sha": "84e18828d4450651cda6a6158cada7b503217a14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZTE4ODI4ZDQ0NTA2NTFjZGE2YTYxNThjYWRhN2I1MDMyMTdhMTQ=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-07-30T07:27:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-30T07:27:01Z"}, "message": "Rollup merge of #87602 - wesleywiser:partially_fix_short_backtraces_windows_optimized, r=dtolnay\n\n[backtraces]: look for the `begin` symbol only after seeing `end`\n\nOn `x86_64-pc-windows-msvc`, we often get backtraces which look like\n    this:\n\n    ```\n    10:     0x7ff77e0e9be5 - std::panicking::rust_panic_with_hook\n    11:     0x7ff77e0e11b4 - std::sys_common::backtrace::__rust_begin_short_backtrace::h5769736bdb11136c\n    12:     0x7ff77e0e116f - std::sys_common::backtrace::__rust_end_short_backtrace::h61c7ecb1b55338ae\n    13:     0x7ff77e0f89dd - std::panicking::begin_panic::h8e60ef9f82a41805\n    14:     0x7ff77e0e108c - d\n    15:     0x7ff77e0e1069 - c\n    16:     0x7ff77e0e1059 - b\n    17:     0x7ff77e0e1049 - a\n    18:     0x7ff77e0e1039 - core::ptr::drop_in_place<std::rt::lang_start<()>::{{closure}}>::h1bfcd14d5e15ba81\n    19:     0x7ff77e0e1186 - std::sys_common::backtrace::__rust_begin_short_backtrace::h5769736bdb11136c\n    20:     0x7ff77e0e100c - std::rt::lang_start::{{closure}}::ha054184bbf9921e3\n    ```\n\nNotice that `__rust_begin_short_backtrace` appears on frame 11 before\n    `__rust_end_short_backtrace` on frame 12. This is because in typical\n    release binaries without debug symbols, dbghelp.dll, which we use to walk\n    and symbolize the stack, does not know where CGU internal functions\n    start or end and so the closure invoked by `__rust_end_short_backtrace`\n    is incorrectly described as `__rust_begin_short_backtrace` because it\n    happens to be near that symbol.\n\nWhile that can obviously change, this has been happening quite\n    consistently since #75048. Since this is a very small change to the std\n    and the change makes sense by itself, I think this is worth doing.\n\nThis doesn't completely resolve the situation for release binaries on\n    Windows, since without debug symbols, the stack printed can still show\n    incorrect symbol names (this is why the test uses `#[no_mangle]`) but it\n    does slightly improve the situation in that you see the same backtrace\n    you would see with `RUST_BACKTRACE=full` or in a debugger (without the\n    uninteresting bits at the top and bottom).\n\nFixes part of #87481", "tree": {"sha": "54a308f5137aef5f5f8315e34474c5df15b1b8d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54a308f5137aef5f5f8315e34474c5df15b1b8d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84e18828d4450651cda6a6158cada7b503217a14", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhA6nGCRBK7hj4Ov3rIwAA9nUIAB3Jiijwsq72s1RTu34eAbyL\nMVG3Q5CMbcHXw7dyviumWbKaK4YlmqfCjvkomlAnt+coRjPl4Xtt3uHjp67+j+7q\nX9qmvuuALb7Oaa+Jf7EHYWAJGFv2LIZTrMK6U5SAtUDHRhqALvrAPNW6sOUKq9Er\nnx2tclBAfUqviXRvb/fsFS5ri9JFmRNY9gP0cVVZNLVvfjvSljAwBNX7MKptUM4m\nLg4B54HOVd06uwi036Xd/HTwsjtvtRqOCnQjaN6/4WBN2zYR0KJxYIdojVCWvTJN\n3oXDaFg61Fp/SFnaJCY6T0eQyOIg6WGnHAjlIgkNGz0b50hYVyz/X6Bea2uE5/4=\n=zzqH\n-----END PGP SIGNATURE-----\n", "payload": "tree 54a308f5137aef5f5f8315e34474c5df15b1b8d4\nparent 0180d4ca071cb54113cf441d49017e84199bb1a4\nparent 286cdc81a85e8490cdc8ff42ea5085ced0df09f4\nauthor Yuki Okushi <jtitor@2k36.org> 1627630021 +0900\ncommitter GitHub <noreply@github.com> 1627630021 +0900\n\nRollup merge of #87602 - wesleywiser:partially_fix_short_backtraces_windows_optimized, r=dtolnay\n\n[backtraces]: look for the `begin` symbol only after seeing `end`\n\nOn `x86_64-pc-windows-msvc`, we often get backtraces which look like\n    this:\n\n    ```\n    10:     0x7ff77e0e9be5 - std::panicking::rust_panic_with_hook\n    11:     0x7ff77e0e11b4 - std::sys_common::backtrace::__rust_begin_short_backtrace::h5769736bdb11136c\n    12:     0x7ff77e0e116f - std::sys_common::backtrace::__rust_end_short_backtrace::h61c7ecb1b55338ae\n    13:     0x7ff77e0f89dd - std::panicking::begin_panic::h8e60ef9f82a41805\n    14:     0x7ff77e0e108c - d\n    15:     0x7ff77e0e1069 - c\n    16:     0x7ff77e0e1059 - b\n    17:     0x7ff77e0e1049 - a\n    18:     0x7ff77e0e1039 - core::ptr::drop_in_place<std::rt::lang_start<()>::{{closure}}>::h1bfcd14d5e15ba81\n    19:     0x7ff77e0e1186 - std::sys_common::backtrace::__rust_begin_short_backtrace::h5769736bdb11136c\n    20:     0x7ff77e0e100c - std::rt::lang_start::{{closure}}::ha054184bbf9921e3\n    ```\n\nNotice that `__rust_begin_short_backtrace` appears on frame 11 before\n    `__rust_end_short_backtrace` on frame 12. This is because in typical\n    release binaries without debug symbols, dbghelp.dll, which we use to walk\n    and symbolize the stack, does not know where CGU internal functions\n    start or end and so the closure invoked by `__rust_end_short_backtrace`\n    is incorrectly described as `__rust_begin_short_backtrace` because it\n    happens to be near that symbol.\n\nWhile that can obviously change, this has been happening quite\n    consistently since #75048. Since this is a very small change to the std\n    and the change makes sense by itself, I think this is worth doing.\n\nThis doesn't completely resolve the situation for release binaries on\n    Windows, since without debug symbols, the stack printed can still show\n    incorrect symbol names (this is why the test uses `#[no_mangle]`) but it\n    does slightly improve the situation in that you see the same backtrace\n    you would see with `RUST_BACKTRACE=full` or in a debugger (without the\n    uninteresting bits at the top and bottom).\n\nFixes part of #87481\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84e18828d4450651cda6a6158cada7b503217a14", "html_url": "https://github.com/rust-lang/rust/commit/84e18828d4450651cda6a6158cada7b503217a14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84e18828d4450651cda6a6158cada7b503217a14/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0180d4ca071cb54113cf441d49017e84199bb1a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0180d4ca071cb54113cf441d49017e84199bb1a4", "html_url": "https://github.com/rust-lang/rust/commit/0180d4ca071cb54113cf441d49017e84199bb1a4"}, {"sha": "286cdc81a85e8490cdc8ff42ea5085ced0df09f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/286cdc81a85e8490cdc8ff42ea5085ced0df09f4", "html_url": "https://github.com/rust-lang/rust/commit/286cdc81a85e8490cdc8ff42ea5085ced0df09f4"}], "stats": {"total": 60, "additions": 59, "deletions": 1}, "files": [{"sha": "e6a099f0e81a0ad141b1f2950e34ed78c8987db4", "filename": "library/std/src/sys_common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/84e18828d4450651cda6a6158cada7b503217a14/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e18828d4450651cda6a6158cada7b503217a14/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fbacktrace.rs?ref=84e18828d4450651cda6a6158cada7b503217a14", "patch": "@@ -75,7 +75,7 @@ unsafe fn _print_fmt(fmt: &mut fmt::Formatter<'_>, print_fmt: PrintFmt) -> fmt::\n             hit = true;\n             if print_fmt == PrintFmt::Short {\n                 if let Some(sym) = symbol.name().and_then(|s| s.as_str()) {\n-                    if sym.contains(\"__rust_begin_short_backtrace\") {\n+                    if start && sym.contains(\"__rust_begin_short_backtrace\") {\n                         stop = true;\n                         return;\n                     }"}, {"sha": "fd01337296fb73aad9c357c641b5b72f8d1fe23d", "filename": "src/test/ui/panics/panic-short-backtrace-windows-x86_64.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/84e18828d4450651cda6a6158cada7b503217a14/src%2Ftest%2Fui%2Fpanics%2Fpanic-short-backtrace-windows-x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84e18828d4450651cda6a6158cada7b503217a14/src%2Ftest%2Fui%2Fpanics%2Fpanic-short-backtrace-windows-x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-short-backtrace-windows-x86_64.rs?ref=84e18828d4450651cda6a6158cada7b503217a14", "patch": "@@ -0,0 +1,49 @@\n+// Regression test for #87481: short backtrace formatting cut off the entire stack trace.\n+\n+// Codegen-units is specified here so that we can replicate a typical rustc invocation which\n+// is not normally limited to 1 CGU. This is important so that the `__rust_begin_short_backtrace`\n+// and `__rust_end_short_backtrace` symbols are not marked internal to the CGU and thus will be\n+// named in the symbol table.\n+// compile-flags: -O -Ccodegen-units=8\n+\n+// run-fail\n+// check-run-results\n+// exec-env:RUST_BACKTRACE=1\n+\n+// We need to normalize out frame 5 because without debug info, dbghelp.dll doesn't know where CGU\n+// internal functions like `main` start or end and so it will return whatever symbol happens\n+// to be located near the address.\n+// normalize-stderr-test: \"5: .*\" -> \"5: some Rust fn\"\n+\n+// Backtraces are pretty broken in general on i686-pc-windows-msvc (#62897).\n+// only-x86_64-pc-windows-msvc\n+\n+fn main() {\n+    a();\n+}\n+\n+// Make these no_mangle so dbghelp.dll can figure out the symbol names.\n+\n+#[no_mangle]\n+#[inline(never)]\n+fn a() {\n+    b();\n+}\n+\n+#[no_mangle]\n+#[inline(never)]\n+fn b() {\n+    c();\n+}\n+\n+#[no_mangle]\n+#[inline(never)]\n+fn c() {\n+    d();\n+}\n+\n+#[no_mangle]\n+#[inline(never)]\n+fn d() {\n+    panic!(\"d was called\");\n+}"}, {"sha": "799a8b30e997b15d18fc2c815d6e13a12701f740", "filename": "src/test/ui/panics/panic-short-backtrace-windows-x86_64.run.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/84e18828d4450651cda6a6158cada7b503217a14/src%2Ftest%2Fui%2Fpanics%2Fpanic-short-backtrace-windows-x86_64.run.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/84e18828d4450651cda6a6158cada7b503217a14/src%2Ftest%2Fui%2Fpanics%2Fpanic-short-backtrace-windows-x86_64.run.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpanics%2Fpanic-short-backtrace-windows-x86_64.run.stderr?ref=84e18828d4450651cda6a6158cada7b503217a14", "patch": "@@ -0,0 +1,9 @@\n+thread 'main' panicked at 'd was called', $DIR/panic-short-backtrace-windows-x86_64.rs:48:5\n+stack backtrace:\n+   0: std::panicking::begin_panic\n+   1: d\n+   2: c\n+   3: b\n+   4: a\n+   5: some Rust fn\n+note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace."}]}