{"sha": "e520bb1b2f1667f17c3503af71273921c4fc9989", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1MjBiYjFiMmYxNjY3ZjE3YzM1MDNhZjcxMjczOTIxYzRmYzk5ODk=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-08-03T21:25:30Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-09-24T06:47:45Z"}, "message": "Add a cfg_attr syntax extension\n\nThis extends cfg-gating to attributes.\n\n```rust\n #[cfg_attr(<cfg pattern>, <attr>)]\n```\nwill expand to\n```rust\n #[<attr>]\n```\nif the `<cfg pattern>` matches the current cfg environment, and nothing\nif it does not. The grammar for the cfg pattern has a simple\nrecursive structure:\n\n * `value` and `key = \"value\"` are cfg patterns,\n * `not(<cfg pattern>)` is a cfg pattern and matches if `<cfg pattern>`\n    does not.\n * `all(<cfg pattern>, ...)` is a cfg pattern and matches if all of the\n    `<cfg pattern>`s do.\n * `any(<cfg pattern>, ...)` is a cfg pattern and matches if any of the\n    `<cfg pattern>`s do.\n\nExamples:\n\n```rust\n // only derive Show for assert_eq! in tests\n #[cfg_attr(test, deriving(Show))]\n struct Foo { ... }\n\n // only derive Show for assert_eq! in tests and debug builds\n #[cfg_attr(any(test, not(ndebug)), deriving(Show))]\n struct Foo { ... }\n\n // ignore a test in certain cases\n #[test]\n #[cfg_attr(all(not(target_os = \"linux\"), target_endian = \"big\"), ignore)]\n fn test_broken_thing() { ... }\n\n // Avoid duplication when fixing staging issues in rustc\n #[cfg_attr(not(stage0), lang=\"iter\")]\n pub trait Iterator<T> { ... }\n```", "tree": {"sha": "2b9b68d41ef081045271bdcfeea6fafbb6927f4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b9b68d41ef081045271bdcfeea6fafbb6927f4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e520bb1b2f1667f17c3503af71273921c4fc9989", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e520bb1b2f1667f17c3503af71273921c4fc9989", "html_url": "https://github.com/rust-lang/rust/commit/e520bb1b2f1667f17c3503af71273921c4fc9989", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e520bb1b2f1667f17c3503af71273921c4fc9989/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8bafe0466e6abb7342fc72fdf276d70ae83205b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8bafe0466e6abb7342fc72fdf276d70ae83205b", "html_url": "https://github.com/rust-lang/rust/commit/c8bafe0466e6abb7342fc72fdf276d70ae83205b"}], "stats": {"total": 117, "additions": 117, "deletions": 0}, "files": [{"sha": "79dc623f5074fd2c753a247ccbb02879619d435c", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e520bb1b2f1667f17c3503af71273921c4fc9989/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e520bb1b2f1667f17c3503af71273921c4fc9989/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=e520bb1b2f1667f17c3503af71273921c4fc9989", "patch": "@@ -439,6 +439,8 @@ fn initial_syntax_expander_table() -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"cfg\"),\n                             builtin_normal_expander(\n                                     ext::cfg::expand_cfg));\n+    syntax_expanders.insert(intern(\"cfg_attr\"),\n+                            ItemModifier(ext::cfg_attr::expand));\n     syntax_expanders.insert(intern(\"trace_macros\"),\n                             builtin_normal_expander(\n                                     ext::trace_macros::expand_trace_macros));"}, {"sha": "5df94ac526d08b161e8661784bed43dafaea92bb", "filename": "src/libsyntax/ext/cfg_attr.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e520bb1b2f1667f17c3503af71273921c4fc9989/src%2Flibsyntax%2Fext%2Fcfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e520bb1b2f1667f17c3503af71273921c4fc9989/src%2Flibsyntax%2Fext%2Fcfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fcfg_attr.rs?ref=e520bb1b2f1667f17c3503af71273921c4fc9989", "patch": "@@ -0,0 +1,59 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::gc::{Gc, GC};\n+\n+use ast;\n+use attr;\n+use codemap::Span;\n+use ext::base::ExtCtxt;\n+use ext::build::AstBuilder;\n+\n+pub fn expand(cx: &mut ExtCtxt, sp: Span, mi: Gc<ast::MetaItem>, it: Gc<ast::Item>)\n+          -> Gc<ast::Item> {\n+    let (cfg, attr) = match mi.node {\n+        ast::MetaList(_, ref mis) if mis.len() == 2 => (mis[0], mis[1]),\n+        _ => {\n+            cx.span_err(sp, \"expected `#[cfg_attr(<cfg pattern>, <attr>)]`\");\n+            return it;\n+        }\n+    };\n+\n+    let mut out = (*it).clone();\n+    if cfg_matches(cx, cfg) {\n+        out.attrs.push(cx.attribute(attr.span, attr));\n+    }\n+\n+    box(GC) out\n+}\n+\n+fn cfg_matches(cx: &mut ExtCtxt, cfg: Gc<ast::MetaItem>) -> bool {\n+    match cfg.node {\n+        ast::MetaList(ref pred, ref mis) if pred.get() == \"any\" =>\n+            mis.iter().any(|mi| cfg_matches(cx, *mi)),\n+        ast::MetaList(ref pred, ref mis) if pred.get() == \"all\" =>\n+            mis.iter().all(|mi| cfg_matches(cx, *mi)),\n+        ast::MetaList(ref pred, ref mis) if pred.get() == \"not\" => {\n+            if mis.len() != 1 {\n+                cx.span_err(cfg.span, format!(\"expected 1 value, got {}\",\n+                                              mis.len()).as_slice());\n+                return false;\n+            }\n+            !cfg_matches(cx, mis[0])\n+        }\n+        ast::MetaList(ref pred, _) => {\n+            cx.span_err(cfg.span,\n+                        format!(\"invalid predicate `{}`\", pred).as_slice());\n+            false\n+        },\n+        ast::MetaWord(_) | ast::MetaNameValue(..) =>\n+            attr::contains(cx.cfg.as_slice(), cfg),\n+    }\n+}"}, {"sha": "7a504d22c1e9e192a4dce9ec7add4d76b071fbda", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e520bb1b2f1667f17c3503af71273921c4fc9989/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e520bb1b2f1667f17c3503af71273921c4fc9989/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=e520bb1b2f1667f17c3503af71273921c4fc9989", "patch": "@@ -83,6 +83,7 @@ pub mod ext {\n     pub mod build;\n     pub mod bytes;\n     pub mod cfg;\n+    pub mod cfg_attr;\n     pub mod concat;\n     pub mod concat_idents;\n     pub mod deriving;"}, {"sha": "4f579cd75fee3c7d6b6b179cc2fe5dd2f4dcc8a3", "filename": "src/test/run-pass/cfg_attr.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/e520bb1b2f1667f17c3503af71273921c4fc9989/src%2Ftest%2Frun-pass%2Fcfg_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e520bb1b2f1667f17c3503af71273921c4fc9989/src%2Ftest%2Frun-pass%2Fcfg_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg_attr.rs?ref=e520bb1b2f1667f17c3503af71273921c4fc9989", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--cfg set1 --cfg set2\n+#![allow(dead_code)]\n+use std::fmt::Show;\n+\n+struct NotShowable;\n+\n+#[cfg_attr(set1, deriving(Show))]\n+struct Set1;\n+\n+#[cfg_attr(notset, deriving(Show))]\n+struct Notset(NotShowable);\n+\n+#[cfg_attr(not(notset), deriving(Show))]\n+struct NotNotset;\n+\n+#[cfg_attr(not(set1), deriving(Show))]\n+struct NotSet1(NotShowable);\n+\n+#[cfg_attr(all(set1, set2), deriving(Show))]\n+struct AllSet1Set2;\n+\n+#[cfg_attr(all(set1, notset), deriving(Show))]\n+struct AllSet1Notset(NotShowable);\n+\n+#[cfg_attr(any(set1, notset), deriving(Show))]\n+struct AnySet1Notset;\n+\n+#[cfg_attr(any(notset, notset2), deriving(Show))]\n+struct AnyNotsetNotset2(NotShowable);\n+\n+#[cfg_attr(all(not(notset), any(set1, notset)), deriving(Show))]\n+struct Complex;\n+\n+#[cfg_attr(any(notset, not(any(set1, notset))), deriving(Show))]\n+struct ComplexNot(NotShowable);\n+\n+fn is_show<T: Show>() {}\n+\n+fn main() {\n+    is_show::<Set1>();\n+    is_show::<NotNotset>();\n+    is_show::<AllSet1Set2>();\n+    is_show::<AnySet1Notset>();\n+    is_show::<Complex>();\n+}"}]}