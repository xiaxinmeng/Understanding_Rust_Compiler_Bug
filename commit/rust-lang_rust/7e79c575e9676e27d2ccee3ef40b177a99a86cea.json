{"sha": "7e79c575e9676e27d2ccee3ef40b177a99a86cea", "node_id": "C_kwDOAAsO6NoAKDdlNzljNTc1ZTk2NzZlMjdkMmNjZWUzZWY0MGIxNzdhOTlhODZjZWE", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-09T12:26:01Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-12-09T12:26:01Z"}, "message": "Help rust-analyzer normalize query return types", "tree": {"sha": "d08f295538b2c7acac96d5783383f2349fe4f5ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d08f295538b2c7acac96d5783383f2349fe4f5ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e79c575e9676e27d2ccee3ef40b177a99a86cea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e79c575e9676e27d2ccee3ef40b177a99a86cea", "html_url": "https://github.com/rust-lang/rust/commit/7e79c575e9676e27d2ccee3ef40b177a99a86cea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e79c575e9676e27d2ccee3ef40b177a99a86cea/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5", "html_url": "https://github.com/rust-lang/rust/commit/c5351ad4dcd9f3d73241b2acbfc6b4631da845c5"}], "stats": {"total": 98, "additions": 97, "deletions": 1}, "files": [{"sha": "a96bc115e3b450a69e7b8a9163fdcc09a0176acc", "filename": "compiler/rustc_middle/src/query/keys.rs", "status": "modified", "additions": 97, "deletions": 1, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/7e79c575e9676e27d2ccee3ef40b177a99a86cea/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e79c575e9676e27d2ccee3ef40b177a99a86cea/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fkeys.rs?ref=7e79c575e9676e27d2ccee3ef40b177a99a86cea", "patch": "@@ -15,7 +15,7 @@ use rustc_span::{Span, DUMMY_SP};\n /// The `Key` trait controls what types can legally be used as the key\n /// for a query.\n pub trait Key: Sized {\n-    type CacheSelector = DefaultCacheSelector<Self>;\n+    type CacheSelector;\n \n     /// Given an instance of this key, what crate is it referring to?\n     /// This is used to find the provider.\n@@ -37,6 +37,8 @@ pub trait Key: Sized {\n }\n \n impl Key for () {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -48,6 +50,8 @@ impl Key for () {\n }\n \n impl<'tcx> Key for ty::InstanceDef<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -59,6 +63,8 @@ impl<'tcx> Key for ty::InstanceDef<'tcx> {\n }\n \n impl<'tcx> Key for ty::Instance<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -70,6 +76,8 @@ impl<'tcx> Key for ty::Instance<'tcx> {\n }\n \n impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -81,6 +89,8 @@ impl<'tcx> Key for mir::interpret::GlobalId<'tcx> {\n }\n \n impl<'tcx> Key for (Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -92,6 +102,8 @@ impl<'tcx> Key for (Ty<'tcx>, Option<ty::PolyExistentialTraitRef<'tcx>>) {\n }\n \n impl<'tcx> Key for mir::interpret::LitToConstInput<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -145,6 +157,8 @@ impl Key for LocalDefId {\n }\n \n impl Key for DefId {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.krate == LOCAL_CRATE\n@@ -159,6 +173,8 @@ impl Key for DefId {\n }\n \n impl Key for ty::WithOptConstParam<LocalDefId> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -169,6 +185,8 @@ impl Key for ty::WithOptConstParam<LocalDefId> {\n }\n \n impl Key for SimplifiedType {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -179,6 +197,8 @@ impl Key for SimplifiedType {\n }\n \n impl Key for (DefId, DefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -189,6 +209,8 @@ impl Key for (DefId, DefId) {\n }\n \n impl<'tcx> Key for (ty::Instance<'tcx>, LocalDefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -199,6 +221,8 @@ impl<'tcx> Key for (ty::Instance<'tcx>, LocalDefId) {\n }\n \n impl Key for (DefId, LocalDefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -209,6 +233,8 @@ impl Key for (DefId, LocalDefId) {\n }\n \n impl Key for (LocalDefId, DefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -219,6 +245,8 @@ impl Key for (LocalDefId, DefId) {\n }\n \n impl Key for (LocalDefId, LocalDefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -229,6 +257,8 @@ impl Key for (LocalDefId, LocalDefId) {\n }\n \n impl Key for (DefId, Option<Ident>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -243,6 +273,8 @@ impl Key for (DefId, Option<Ident>) {\n }\n \n impl Key for (DefId, LocalDefId, Ident) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -253,6 +285,8 @@ impl Key for (DefId, LocalDefId, Ident) {\n }\n \n impl Key for (CrateNum, DefId) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0 == LOCAL_CRATE\n@@ -263,6 +297,8 @@ impl Key for (CrateNum, DefId) {\n }\n \n impl Key for (CrateNum, SimplifiedType) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0 == LOCAL_CRATE\n@@ -273,6 +309,8 @@ impl Key for (CrateNum, SimplifiedType) {\n }\n \n impl Key for (DefId, SimplifiedType) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -283,6 +321,8 @@ impl Key for (DefId, SimplifiedType) {\n }\n \n impl<'tcx> Key for SubstsRef<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -293,6 +333,8 @@ impl<'tcx> Key for SubstsRef<'tcx> {\n }\n \n impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.krate == LOCAL_CRATE\n@@ -303,6 +345,8 @@ impl<'tcx> Key for (DefId, SubstsRef<'tcx>) {\n }\n \n impl<'tcx> Key for (ty::UnevaluatedConst<'tcx>, ty::UnevaluatedConst<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         (self.0).def.did.krate == LOCAL_CRATE\n@@ -313,6 +357,8 @@ impl<'tcx> Key for (ty::UnevaluatedConst<'tcx>, ty::UnevaluatedConst<'tcx>) {\n }\n \n impl<'tcx> Key for (LocalDefId, DefId, SubstsRef<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -323,6 +369,8 @@ impl<'tcx> Key for (LocalDefId, DefId, SubstsRef<'tcx>) {\n }\n \n impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.1.def_id().krate == LOCAL_CRATE\n@@ -333,6 +381,8 @@ impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n }\n \n impl<'tcx> Key for (ty::Const<'tcx>, mir::Field) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -343,6 +393,8 @@ impl<'tcx> Key for (ty::Const<'tcx>, mir::Field) {\n }\n \n impl<'tcx> Key for mir::interpret::ConstAlloc<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -353,6 +405,8 @@ impl<'tcx> Key for mir::interpret::ConstAlloc<'tcx> {\n }\n \n impl<'tcx> Key for ty::PolyTraitRef<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.def_id().krate == LOCAL_CRATE\n@@ -363,6 +417,8 @@ impl<'tcx> Key for ty::PolyTraitRef<'tcx> {\n }\n \n impl<'tcx> Key for ty::PolyExistentialTraitRef<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.def_id().krate == LOCAL_CRATE\n@@ -373,6 +429,8 @@ impl<'tcx> Key for ty::PolyExistentialTraitRef<'tcx> {\n }\n \n impl<'tcx> Key for (ty::PolyTraitRef<'tcx>, ty::PolyTraitRef<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.0.def_id().krate == LOCAL_CRATE\n@@ -383,6 +441,8 @@ impl<'tcx> Key for (ty::PolyTraitRef<'tcx>, ty::PolyTraitRef<'tcx>) {\n }\n \n impl<'tcx> Key for GenericArg<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -393,6 +453,8 @@ impl<'tcx> Key for GenericArg<'tcx> {\n }\n \n impl<'tcx> Key for mir::ConstantKind<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -403,6 +465,8 @@ impl<'tcx> Key for mir::ConstantKind<'tcx> {\n }\n \n impl<'tcx> Key for ty::Const<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -413,6 +477,8 @@ impl<'tcx> Key for ty::Const<'tcx> {\n }\n \n impl<'tcx> Key for Ty<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -429,6 +495,8 @@ impl<'tcx> Key for Ty<'tcx> {\n }\n \n impl<'tcx> Key for TyAndLayout<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -439,6 +507,8 @@ impl<'tcx> Key for TyAndLayout<'tcx> {\n }\n \n impl<'tcx> Key for (Ty<'tcx>, Ty<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -449,6 +519,8 @@ impl<'tcx> Key for (Ty<'tcx>, Ty<'tcx>) {\n }\n \n impl<'tcx> Key for &'tcx ty::List<ty::Predicate<'tcx>> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -459,6 +531,8 @@ impl<'tcx> Key for &'tcx ty::List<ty::Predicate<'tcx>> {\n }\n \n impl<'tcx> Key for ty::ParamEnv<'tcx> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -469,6 +543,8 @@ impl<'tcx> Key for ty::ParamEnv<'tcx> {\n }\n \n impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         self.value.query_crate_is_local()\n@@ -479,6 +555,8 @@ impl<'tcx, T: Key> Key for ty::ParamEnvAnd<'tcx, T> {\n }\n \n impl Key for Symbol {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -489,6 +567,8 @@ impl Key for Symbol {\n }\n \n impl Key for Option<Symbol> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -501,6 +581,8 @@ impl Key for Option<Symbol> {\n /// Canonical query goals correspond to abstract trait operations that\n /// are not tied to any crate in particular.\n impl<'tcx, T> Key for Canonical<'tcx, T> {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -512,6 +594,8 @@ impl<'tcx, T> Key for Canonical<'tcx, T> {\n }\n \n impl Key for (Symbol, u32, u32) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -523,6 +607,8 @@ impl Key for (Symbol, u32, u32) {\n }\n \n impl<'tcx> Key for (DefId, Ty<'tcx>, SubstsRef<'tcx>, ty::ParamEnv<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -534,6 +620,8 @@ impl<'tcx> Key for (DefId, Ty<'tcx>, SubstsRef<'tcx>, ty::ParamEnv<'tcx>) {\n }\n \n impl<'tcx> Key for (ty::Predicate<'tcx>, traits::WellFormedLoc) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -545,6 +633,8 @@ impl<'tcx> Key for (ty::Predicate<'tcx>, traits::WellFormedLoc) {\n }\n \n impl<'tcx> Key for (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -556,6 +646,8 @@ impl<'tcx> Key for (ty::PolyFnSig<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n }\n \n impl<'tcx> Key for (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -567,6 +659,8 @@ impl<'tcx> Key for (ty::Instance<'tcx>, &'tcx ty::List<Ty<'tcx>>) {\n }\n \n impl<'tcx> Key for (Ty<'tcx>, ty::ValTree<'tcx>) {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true\n@@ -578,6 +672,8 @@ impl<'tcx> Key for (Ty<'tcx>, ty::ValTree<'tcx>) {\n }\n \n impl Key for HirId {\n+    type CacheSelector = DefaultCacheSelector<Self>;\n+\n     #[inline(always)]\n     fn query_crate_is_local(&self) -> bool {\n         true"}]}