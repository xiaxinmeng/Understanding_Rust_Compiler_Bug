{"sha": "8bc31ff9055c50e9d882dd56909dc0b40c3a6453", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiYzMxZmY5MDU1YzUwZTlkODgyZGQ1NjkwOWRjMGI0MGMzYTY0NTM=", "commit": {"author": {"name": "Pyry Kontio", "email": "pyry.kontio@drasa.eu", "date": "2020-05-25T19:54:50Z"}, "committer": {"name": "Pyry Kontio", "email": "pyry.kontio@drasa.eu", "date": "2020-05-25T20:07:00Z"}, "message": "Fix the same typos again orz", "tree": {"sha": "3aa3be1aecd7844bec48fe8f33610d14cc0e706a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3aa3be1aecd7844bec48fe8f33610d14cc0e706a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8bc31ff9055c50e9d882dd56909dc0b40c3a6453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8bc31ff9055c50e9d882dd56909dc0b40c3a6453", "html_url": "https://github.com/rust-lang/rust/commit/8bc31ff9055c50e9d882dd56909dc0b40c3a6453", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8bc31ff9055c50e9d882dd56909dc0b40c3a6453/comments", "author": {"login": "golddranks", "id": 2675542, "node_id": "MDQ6VXNlcjI2NzU1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2675542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/golddranks", "html_url": "https://github.com/golddranks", "followers_url": "https://api.github.com/users/golddranks/followers", "following_url": "https://api.github.com/users/golddranks/following{/other_user}", "gists_url": "https://api.github.com/users/golddranks/gists{/gist_id}", "starred_url": "https://api.github.com/users/golddranks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/golddranks/subscriptions", "organizations_url": "https://api.github.com/users/golddranks/orgs", "repos_url": "https://api.github.com/users/golddranks/repos", "events_url": "https://api.github.com/users/golddranks/events{/privacy}", "received_events_url": "https://api.github.com/users/golddranks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "golddranks", "id": 2675542, "node_id": "MDQ6VXNlcjI2NzU1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2675542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/golddranks", "html_url": "https://github.com/golddranks", "followers_url": "https://api.github.com/users/golddranks/followers", "following_url": "https://api.github.com/users/golddranks/following{/other_user}", "gists_url": "https://api.github.com/users/golddranks/gists{/gist_id}", "starred_url": "https://api.github.com/users/golddranks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/golddranks/subscriptions", "organizations_url": "https://api.github.com/users/golddranks/orgs", "repos_url": "https://api.github.com/users/golddranks/repos", "events_url": "https://api.github.com/users/golddranks/events{/privacy}", "received_events_url": "https://api.github.com/users/golddranks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6973fd716b51b01debf39edd8e43f0059be3d053", "url": "https://api.github.com/repos/rust-lang/rust/commits/6973fd716b51b01debf39edd8e43f0059be3d053", "html_url": "https://github.com/rust-lang/rust/commit/6973fd716b51b01debf39edd8e43f0059be3d053"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "c54bfb27dfe5c9e734224ad2aca53547b577eb39", "filename": "src/libcore/num/f32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bc31ff9055c50e9d882dd56909dc0b40c3a6453/src%2Flibcore%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc31ff9055c50e9d882dd56909dc0b40c3a6453/src%2Flibcore%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff32.rs?ref=8bc31ff9055c50e9d882dd56909dc0b40c3a6453", "patch": "@@ -857,7 +857,7 @@ impl f32 {\n         let mut left = self.to_bits() as i32;\n         let mut right = other.to_bits() as i32;\n \n-        // In case of negatives, flip all the bits expect the sign\n+        // In case of negatives, flip all the bits except the sign\n         // to achieve a similar layout as two's complement integers\n         //\n         // Why does this work? IEEE 754 floats consist of three fields:\n@@ -874,7 +874,7 @@ impl f32 {\n         // We effectively convert the numbers to \"two's complement\" form.\n         //\n         // To do the flipping, we construct a mask and XOR against it.\n-        // We branchlessly calculate an \"all-ones expect for the sign bit\"\n+        // We branchlessly calculate an \"all-ones except for the sign bit\"\n         // mask from negative-signed values: right shifting sign-extends\n         // the integer, so we \"fill\" the mask with sign bits, and then\n         // convert to unsigned to push one more zero bit."}, {"sha": "18d5d720a05444b8fc6bf84172f68e8232a48a9c", "filename": "src/libcore/num/f64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8bc31ff9055c50e9d882dd56909dc0b40c3a6453/src%2Flibcore%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8bc31ff9055c50e9d882dd56909dc0b40c3a6453/src%2Flibcore%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Ff64.rs?ref=8bc31ff9055c50e9d882dd56909dc0b40c3a6453", "patch": "@@ -871,7 +871,7 @@ impl f64 {\n         let mut left = self.to_bits() as i64;\n         let mut right = other.to_bits() as i64;\n \n-        // In case of negatives, flip all the bits expect the sign\n+        // In case of negatives, flip all the bits except the sign\n         // to achieve a similar layout as two's complement integers\n         //\n         // Why does this work? IEEE 754 floats consist of three fields:\n@@ -888,7 +888,7 @@ impl f64 {\n         // We effectively convert the numbers to \"two's complement\" form.\n         //\n         // To do the flipping, we construct a mask and XOR against it.\n-        // We branchlessly calculate an \"all-ones expect for the sign bit\"\n+        // We branchlessly calculate an \"all-ones except for the sign bit\"\n         // mask from negative-signed values: right shifting sign-extends\n         // the integer, so we \"fill\" the mask with sign bits, and then\n         // convert to unsigned to push one more zero bit."}]}