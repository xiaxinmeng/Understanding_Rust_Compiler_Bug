{"sha": "d943b0fee8cc0f747eaf2c0f0ae6e7bc35284ca8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NDNiMGZlZThjYzBmNzQ3ZWFmMmMwZjBhZTZlN2JjMzUyODRjYTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-05T19:21:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-05T19:21:36Z"}, "message": "auto merge of #13907 : iliekturtles/rust/tutorial, r=alexcrichton\n\nSome minor clarifications and fixes.", "tree": {"sha": "c2edee1820c5d2abd919e3027d438574cc071cf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2edee1820c5d2abd919e3027d438574cc071cf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d943b0fee8cc0f747eaf2c0f0ae6e7bc35284ca8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d943b0fee8cc0f747eaf2c0f0ae6e7bc35284ca8", "html_url": "https://github.com/rust-lang/rust/commit/d943b0fee8cc0f747eaf2c0f0ae6e7bc35284ca8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d943b0fee8cc0f747eaf2c0f0ae6e7bc35284ca8/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd625dda9a25c054d622e20822f2889f17b15aa6", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd625dda9a25c054d622e20822f2889f17b15aa6", "html_url": "https://github.com/rust-lang/rust/commit/fd625dda9a25c054d622e20822f2889f17b15aa6"}, {"sha": "055cbdeee07cae7e8c1a253d4a6f154f140ba821", "url": "https://api.github.com/repos/rust-lang/rust/commits/055cbdeee07cae7e8c1a253d4a6f154f140ba821", "html_url": "https://github.com/rust-lang/rust/commit/055cbdeee07cae7e8c1a253d4a6f154f140ba821"}], "stats": {"total": 34, "additions": 19, "deletions": 15}, "files": [{"sha": "a847d47c7b9b1a1d1526e1c12e4b63866c5a669c", "filename": "src/doc/tutorial.md", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d943b0fee8cc0f747eaf2c0f0ae6e7bc35284ca8/src%2Fdoc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/d943b0fee8cc0f747eaf2c0f0ae6e7bc35284ca8/src%2Fdoc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftutorial.md?ref=d943b0fee8cc0f747eaf2c0f0ae6e7bc35284ca8", "patch": "@@ -468,19 +468,16 @@ Unlike in C, there is no \"falling through\" between arms: only one arm\n executes, and it doesn't have to explicitly `break` out of the\n construct when it is finished.\n \n-A `match` arm consists of a *pattern*, then an arrow `=>`, followed by\n-an *action* (expression). Literals are valid patterns and match only\n-their own value. A single arm may match multiple different patterns by\n-combining them with the pipe operator (`|`), so long as every pattern\n-binds the same set of variables. Ranges of numeric literal patterns\n-can be expressed with two dots, as in `M..N`. The underscore (`_`) is\n-a wildcard pattern that matches any single value. (`..`) is a different\n-wildcard that can match one or more fields in an `enum` variant.\n-\n-The patterns in a match arm are followed by a fat arrow, `=>`, then an\n-expression to evaluate. Each case is separated by commas. It's often\n-convenient to use a block expression for each case, in which case the\n-commas are optional.\n+A `match` arm consists of a *pattern*, then a fat arrow `=>`, followed\n+by an *action* (expression). Each case is separated by commas. It is\n+often convenient to use a block expression for each case, in which case\n+the commas are optional as shown below. Literals are valid patterns and\n+match only their own value. A single arm may match multiple different\n+patterns by combining them with the pipe operator (`|`), so long as every\n+pattern binds the same set of variables. Ranges of numeric literal\n+patterns can be expressed with two dots, as in `M..N`. The underscore\n+(`_`) is a wildcard pattern that matches any single value. (`..`) is a\n+different wildcard that can match one or more fields in an `enum` variant.\n \n ~~~\n # let my_number = 1;\n@@ -1416,7 +1413,7 @@ contains a point, but allocated in a different location:\n \n ~~~\n # struct Point { x: f64, y: f64 }\n-let on_the_stack : Point  =  Point { x: 3.0, y: 4.0 };\n+let on_the_stack :  Point =  Point { x: 3.0, y: 4.0 };\n let owned_box    : ~Point = ~Point { x: 7.0, y: 9.0 };\n ~~~\n \n@@ -2587,11 +2584,18 @@ for `Eq` and can be used with the equality operators, and that a value\n of type `ABC` can be randomly generated and converted to a string:\n \n ~~~\n+extern crate rand;\n+\n #[deriving(Eq)]\n struct Circle { radius: f64 }\n \n-#[deriving(Clone, Show)]\n+#[deriving(Rand, Show)]\n enum ABC { A, B, C }\n+\n+fn main() {\n+    // Use the Show trait to print \"A, B, C.\"\n+    println!(\"{}, {}, {}\", A, B, C);\n+}\n ~~~\n \n The full list of derivable traits is `Eq`, `TotalEq`, `Ord`,"}]}