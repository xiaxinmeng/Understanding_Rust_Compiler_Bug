{"sha": "f0620c95038c1e586f5165d5d3be7cf009aaf387", "node_id": "C_kwDOAAsO6NoAKGYwNjIwYzk1MDM4YzFlNTg2ZjUxNjVkNWQzYmU3Y2YwMDlhYWYzODc", "commit": {"author": {"name": "Jacob Pratt", "email": "jacob@jhpratt.dev", "date": "2022-02-13T10:54:00Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-19T12:21:45Z"}, "message": "Proper const stability check, default to unstable\n\nRather than deferring to const eval for checking if a trait is const, we\nnow check up-front. This allows the error to be emitted earlier, notably\nat the same time as other stability checks.\n\nAlso included in this commit is a change of the default const stability\nlevel to UNstable. Previously, an item that was `const` but did not\nexplicitly state it was unstable was implicitly stable.", "tree": {"sha": "0df4aedeb4c4593fca47616f7d209abea39224bf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0df4aedeb4c4593fca47616f7d209abea39224bf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0620c95038c1e586f5165d5d3be7cf009aaf387", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0620c95038c1e586f5165d5d3be7cf009aaf387", "html_url": "https://github.com/rust-lang/rust/commit/f0620c95038c1e586f5165d5d3be7cf009aaf387", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0620c95038c1e586f5165d5d3be7cf009aaf387/comments", "author": {"login": "jhpratt", "id": 3161395, "node_id": "MDQ6VXNlcjMxNjEzOTU=", "avatar_url": "https://avatars.githubusercontent.com/u/3161395?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhpratt", "html_url": "https://github.com/jhpratt", "followers_url": "https://api.github.com/users/jhpratt/followers", "following_url": "https://api.github.com/users/jhpratt/following{/other_user}", "gists_url": "https://api.github.com/users/jhpratt/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhpratt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhpratt/subscriptions", "organizations_url": "https://api.github.com/users/jhpratt/orgs", "repos_url": "https://api.github.com/users/jhpratt/repos", "events_url": "https://api.github.com/users/jhpratt/events{/privacy}", "received_events_url": "https://api.github.com/users/jhpratt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60", "html_url": "https://github.com/rust-lang/rust/commit/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60"}], "stats": {"total": 289, "additions": 196, "deletions": 93}, "files": [{"sha": "2c669dd6d9a9b494dc4f4124071e67d97b9a4216", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0620c95038c1e586f5165d5d3be7cf009aaf387/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0620c95038c1e586f5165d5d3be7cf009aaf387/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=f0620c95038c1e586f5165d5d3be7cf009aaf387", "patch": "@@ -229,18 +229,6 @@ impl<'mir, 'tcx> Checker<'mir, 'tcx> {\n \n         // The local type and predicate checks are not free and only relevant for `const fn`s.\n         if self.const_kind() == hir::ConstContext::ConstFn {\n-            // Prevent const trait methods from being annotated as `stable`.\n-            // FIXME: Do this as part of stability checking.\n-            if self.is_const_stable_const_fn() {\n-                if crate::const_eval::is_parent_const_impl_raw(tcx, def_id) {\n-                    self.ccx\n-                        .tcx\n-                        .sess\n-                        .struct_span_err(self.span, \"trait methods cannot be stable const fn\")\n-                        .emit();\n-                }\n-            }\n-\n             for (idx, local) in body.local_decls.iter_enumerated() {\n                 // Handle the return place below.\n                 if idx == RETURN_PLACE || local.internal {"}, {"sha": "0f79fe5513dd8790db99a80faba783ef77fb94e2", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 35, "deletions": 7, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f0620c95038c1e586f5165d5d3be7cf009aaf387/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0620c95038c1e586f5165d5d3be7cf009aaf387/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=f0620c95038c1e586f5165d5d3be7cf009aaf387", "patch": "@@ -84,8 +84,6 @@ pub fn rustc_allow_const_fn_unstable(\n // functions are subject to more stringent restrictions than \"const-unstable\" functions: They\n // cannot use unstable features and can only call other \"const-stable\" functions.\n pub fn is_const_stable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    use attr::{ConstStability, StabilityLevel};\n-\n     // A default body marked const is not const-stable because const\n     // trait fns currently cannot be const-stable. We shouldn't\n     // restrict default bodies to only call const-stable functions.\n@@ -96,9 +94,39 @@ pub fn is_const_stable_const_fn(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n     // Const-stability is only relevant for `const fn`.\n     assert!(tcx.is_const_fn_raw(def_id));\n \n-    // A function is only const-stable if it has `#[rustc_const_stable]`.\n-    matches!(\n-        tcx.lookup_const_stability(def_id),\n-        Some(ConstStability { level: StabilityLevel::Stable { .. }, .. })\n-    )\n+    // A function is only const-stable if it has `#[rustc_const_stable]` or it the trait it belongs\n+    // to is const-stable.\n+    match tcx.lookup_const_stability(def_id) {\n+        Some(stab) => stab.is_const_stable(),\n+        None if is_parent_const_stable_trait(tcx, def_id) => {\n+            // Remove this when `#![feature(const_trait_impl)]` is stabilized,\n+            // returning `true` unconditionally.\n+            tcx.sess.delay_span_bug(\n+                tcx.def_span(def_id),\n+                \"trait implementations cannot be const stable yet\",\n+            );\n+            true\n+        }\n+        None => false, // By default, items are not const stable.\n+    }\n+}\n+\n+fn is_parent_const_stable_trait(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n+    let local_def_id = def_id.expect_local();\n+    let hir_id = tcx.local_def_id_to_hir_id(local_def_id);\n+\n+    let Some(parent) = tcx.hir().find_parent_node(hir_id) else { return false };\n+    let parent_def = tcx.hir().get(parent);\n+\n+    if !matches!(\n+        parent_def,\n+        hir::Node::Item(hir::Item {\n+            kind: hir::ItemKind::Impl(hir::Impl { constness: hir::Constness::Const, .. }),\n+            ..\n+        })\n+    ) {\n+        return false;\n+    }\n+\n+    tcx.lookup_const_stability(parent.owner).map_or(false, |stab| stab.is_const_stable())\n }"}, {"sha": "7a6ab62ef67fa2b49c966ea64a020e9a17f8754d", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0620c95038c1e586f5165d5d3be7cf009aaf387/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0620c95038c1e586f5165d5d3be7cf009aaf387/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=f0620c95038c1e586f5165d5d3be7cf009aaf387", "patch": "@@ -970,6 +970,10 @@ fn analysis(tcx: TyCtxt<'_>, (): ()) -> Result<()> {\n \n     sess.time(\"layout_testing\", || layout_test::test_layout(tcx));\n \n+    sess.time(\"stable_impl_const_trait_checking\", || {\n+        rustc_passes::stability::check_const_impl_trait(tcx)\n+    });\n+\n     // Avoid overwhelming user with errors if borrow checking failed.\n     // I'm not sure how helpful this is, to be honest, but it avoids a\n     // lot of annoying errors in the ui tests (basically,"}, {"sha": "3b0df1d83e86a6934e87a15012486e67e595f286", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f0620c95038c1e586f5165d5d3be7cf009aaf387/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0620c95038c1e586f5165d5d3be7cf009aaf387/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=f0620c95038c1e586f5165d5d3be7cf009aaf387", "patch": "@@ -2808,6 +2808,21 @@ impl<'tcx> TyCtxt<'tcx> {\n             false\n         }\n     }\n+\n+    /// Whether the trait impl is marked const. This does not consider stability or feature gates.\n+    pub fn is_const_trait_impl_raw(self, def_id: DefId) -> bool {\n+        let Some(local_def_id) = def_id.as_local() else { return false };\n+        let hir_id = self.local_def_id_to_hir_id(local_def_id);\n+        let node = self.hir().get(hir_id);\n+\n+        matches!(\n+            node,\n+            hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Impl(hir::Impl { constness: hir::Constness::Const, .. }),\n+                ..\n+            })\n+        )\n+    }\n }\n \n impl<'tcx> TyCtxtAt<'tcx> {"}, {"sha": "7b8ffeaac24842a8076c9b9f68d242a3ac4a51d8", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 52, "deletions": 1, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f0620c95038c1e586f5165d5d3be7cf009aaf387/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0620c95038c1e586f5165d5d3be7cf009aaf387/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=f0620c95038c1e586f5165d5d3be7cf009aaf387", "patch": "@@ -9,6 +9,7 @@ use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::hir_id::CRATE_HIR_ID;\n use rustc_hir::intravisit::{self, Visitor};\n+use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{FieldDef, Generics, HirId, Item, TraitRef, Ty, TyKind, Variant};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::middle::privacy::AccessLevels;\n@@ -530,7 +531,8 @@ impl<'tcx> MissingStabilityAnnotations<'tcx> {\n             return;\n         }\n \n-        let is_const = self.tcx.is_const_fn(def_id.to_def_id());\n+        let is_const = self.tcx.is_const_fn(def_id.to_def_id())\n+            || self.tcx.is_const_trait_impl_raw(def_id.to_def_id());\n         let is_stable = self\n             .tcx\n             .lookup_stability(def_id)\n@@ -604,6 +606,44 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     // stable (assuming they have not inherited instability from their parent).\n }\n \n+struct CheckStableConstImplTrait<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'tcx> ItemLikeVisitor<'tcx> for CheckStableConstImplTrait<'tcx> {\n+    fn visit_item(&mut self, item: &'tcx Item<'tcx>) {\n+        if !matches!(\n+            item.kind,\n+            hir::ItemKind::Impl(hir::Impl {\n+                of_trait: Some(_),\n+                constness: hir::Constness::Const,\n+                ..\n+            })\n+        ) {\n+            return;\n+        }\n+\n+        if self.tcx.lookup_const_stability(item.def_id).map_or(false, |stab| stab.is_const_stable())\n+        {\n+            self.tcx\n+                .sess\n+                .struct_span_err(item.span, \"trait implementations cannot be const stable yet\")\n+                .note(\"see issue #67792 <https://github.com/rust-lang/rust/issues/67792> for more information\")\n+                .emit();\n+        }\n+    }\n+\n+    fn visit_trait_item(&mut self, _trait_item: &'tcx hir::TraitItem<'tcx>) {\n+        // Nothing to do here.\n+    }\n+    fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem<'tcx>) {\n+        // Nothing to do here.\n+    }\n+    fn visit_foreign_item(&mut self, _foreign_item: &'tcx hir::ForeignItem<'tcx>) {\n+        // Nothing to do here.\n+    }\n+}\n+\n fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n     let mut index = Index {\n         stab_map: Default::default(),\n@@ -824,6 +864,17 @@ impl<'tcx> Visitor<'tcx> for CheckTraitImplStable<'tcx> {\n     }\n }\n \n+pub fn check_const_impl_trait(tcx: TyCtxt<'_>) {\n+    let features = tcx.features(); // FIXME How cheap is this call?\n+    // Both feature gates have to be enabled for this check to have any effect.\n+    if !features.staged_api || !features.const_trait_impl {\n+        return;\n+    }\n+\n+    let mut visitor = CheckStableConstImplTrait { tcx };\n+    tcx.hir().visit_all_item_likes(&mut visitor);\n+}\n+\n /// Given the list of enabled features that were not language features (i.e., that\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them."}, {"sha": "0c18efa0a0235310a1e8d1a1ff9a4c3474d4442d", "filename": "src/test/ui/consts/rustc-impl-const-stability.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Fconsts%2Frustc-impl-const-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Fconsts%2Frustc-impl-const-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Frustc-impl-const-stability.rs?ref=f0620c95038c1e586f5165d5d3be7cf009aaf387", "patch": "@@ -1,19 +1,18 @@\n-// build-pass\n+// check-pass\n \n #![crate_type = \"lib\"]\n #![feature(staged_api)]\n #![feature(const_trait_impl)]\n #![stable(feature = \"foo\", since = \"1.0.0\")]\n \n-\n #[stable(feature = \"potato\", since = \"1.27.0\")]\n pub struct Data {\n-    _data: u128\n+    _data: u128,\n }\n \n #[stable(feature = \"potato\", since = \"1.27.0\")]\n+#[rustc_const_unstable(feature = \"data_foo\", issue = \"none\")]\n impl const Default for Data {\n-    #[rustc_const_unstable(feature = \"data_foo\", issue = \"none\")]\n     fn default() -> Data {\n         Data { _data: 42 }\n     }"}, {"sha": "19e9006094beda950255271d99242095d3b3ba48", "filename": "src/test/ui/rfc-2632-const-trait-impl/auxiliary/staged-api.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fauxiliary%2Fstaged-api.rs?ref=f0620c95038c1e586f5165d5d3be7cf009aaf387", "patch": "@@ -1,5 +1,4 @@\n #![feature(const_trait_impl)]\n-\n #![feature(staged_api)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -13,9 +12,7 @@ pub trait MyTrait {\n pub struct Unstable;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"staged\", issue = \"none\")]\n+#[rustc_const_unstable(feature = \"unstable\", issue = \"none\")]\n impl const MyTrait for Unstable {\n-    fn func() {\n-\n-    }\n+    fn func() {}\n }"}, {"sha": "15f1db18f89d952b2e90254f164c32e9d28e18e5", "filename": "src/test/ui/rfc-2632-const-trait-impl/stability.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.rs?ref=f0620c95038c1e586f5165d5d3be7cf009aaf387", "patch": "@@ -1,5 +1,3 @@\n-#![feature(allow_internal_unstable)]\n-#![feature(const_add)]\n #![feature(const_trait_impl)]\n #![feature(staged_api)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -10,10 +8,10 @@ pub struct Int(i32);\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n impl const std::ops::Sub for Int {\n+    //~^ ERROR trait implementations cannot be const stable yet\n     type Output = Self;\n \n     fn sub(self, rhs: Self) -> Self {\n-        //~^ ERROR trait methods cannot be stable const fn\n         Int(self.0 - rhs.0)\n     }\n }\n@@ -30,16 +28,16 @@ impl const std::ops::Add for Int {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub const fn foo() -> Int {\n-    Int(1i32) + Int(2i32)\n+pub const fn const_err() {\n+    Int(0) + Int(0);\n     //~^ ERROR not yet stable as a const fn\n+    Int(0) - Int(0);\n }\n \n-// ok\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"bar\", issue = \"none\")]\n-pub const fn bar() -> Int {\n-    Int(1i32) + Int(2i32)\n+pub fn non_const_success() {\n+    Int(0) + Int(0);\n+    Int(0) - Int(0);\n }\n \n fn main() {}"}, {"sha": "fa3d85a3e6ad3d2453f18d48a1faa3fb536cd494", "filename": "src/test/ui/rfc-2632-const-trait-impl/stability.stderr", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstability.stderr?ref=f0620c95038c1e586f5165d5d3be7cf009aaf387", "patch": "@@ -1,19 +1,24 @@\n-error: trait methods cannot be stable const fn\n-  --> $DIR/stability.rs:15:5\n-   |\n-LL | /     fn sub(self, rhs: Self) -> Self {\n-LL | |\n-LL | |         Int(self.0 - rhs.0)\n-LL | |     }\n-   | |_____^\n-\n error: `<Int as Add>::add` is not yet stable as a const fn\n-  --> $DIR/stability.rs:34:5\n+  --> $DIR/stability.rs:32:5\n    |\n-LL |     Int(1i32) + Int(2i32)\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+LL |     Int(0) + Int(0);\n+   |     ^^^^^^^^^^^^^^^\n    |\n    = help: const-stable functions can only call other const-stable functions\n \n+error: trait implementations cannot be const stable yet\n+  --> $DIR/stability.rs:10:1\n+   |\n+LL | / impl const std::ops::Sub for Int {\n+LL | |\n+LL | |     type Output = Self;\n+LL | |\n+...  |\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+   = note: see issue #67792 <https://github.com/rust-lang/rust/issues/67792> for more information\n+\n error: aborting due to 2 previous errors\n "}, {"sha": "903ced42698ac4cb778d2271c5090e6bf7fba649", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.rs?ref=f0620c95038c1e586f5165d5d3be7cf009aaf387", "patch": "@@ -1,9 +1,7 @@\n-// revisions: stock staged\n-#![cfg_attr(staged, feature(staged))]\n+// revisions: stable unstable\n \n+#![cfg_attr(unstable, feature(unstable))] // The feature from the ./auxiliary/staged-api.rs file.\n #![feature(const_trait_impl)]\n-#![allow(incomplete_features)]\n-\n #![feature(staged_api)]\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n@@ -16,12 +14,11 @@ use staged_api::*;\n pub struct Stable;\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[cfg_attr(staged, rustc_const_stable(feature = \"rust1\", since = \"1.0.0\"))]\n-// ^ should trigger error with or without the attribute\n+#[cfg_attr(stable, rustc_const_stable(feature = \"rust1\", since = \"1.0.0\"))]\n impl const MyTrait for Stable {\n-    fn func() { //~ ERROR trait methods cannot be stable const fn\n-\n-    }\n+    //[stable]~^ ERROR trait implementations cannot be const stable yet\n+    //[unstable]~^^ ERROR implementation has missing const stability attribute\n+    fn func() {}\n }\n \n fn non_const_context() {\n@@ -32,7 +29,7 @@ fn non_const_context() {\n #[unstable(feature = \"none\", issue = \"none\")]\n const fn const_context() {\n     Unstable::func();\n-    //[stock]~^ ERROR `<staged_api::Unstable as staged_api::MyTrait>::func` is not yet stable as a const fn\n+    //[stable]~^ ERROR `<staged_api::Unstable as staged_api::MyTrait>::func` is not yet stable as a const fn\n     Stable::func();\n }\n "}, {"sha": "2fde51217f5dc071790e0f210ecaa59d3695b3c5", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api.stable.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stable.stderr?ref=f0620c95038c1e586f5165d5d3be7cf009aaf387", "patch": "@@ -0,0 +1,22 @@\n+error: `<staged_api::Unstable as staged_api::MyTrait>::func` is not yet stable as a const fn\n+  --> $DIR/staged-api.rs:31:5\n+   |\n+LL |     Unstable::func();\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = help: add `#![feature(unstable)]` to the crate attributes to enable\n+\n+error: trait implementations cannot be const stable yet\n+  --> $DIR/staged-api.rs:18:1\n+   |\n+LL | / impl const MyTrait for Stable {\n+LL | |\n+LL | |\n+LL | |     fn func() {}\n+LL | | }\n+   | |_^\n+   |\n+   = note: see issue #67792 <https://github.com/rust-lang/rust/issues/67792> for more information\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "d2ff4ce2001304e52a294429cc9337385da818b9", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api.staged.stderr", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.staged.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.staged.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.staged.stderr?ref=a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60", "patch": "@@ -1,10 +0,0 @@\n-error: trait methods cannot be stable const fn\n-  --> $DIR/staged-api.rs:22:5\n-   |\n-LL | /     fn func() {\n-LL | |\n-LL | |     }\n-   | |_____^\n-\n-error: aborting due to previous error\n-"}, {"sha": "91c5469bd90a5d5f9f0adf8f420984d9337a318f", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api.stock.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stock.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stock.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.stock.stderr?ref=a9dd4cfa6b5398b945d3ad39e01bedb5d861ed60", "patch": "@@ -1,18 +0,0 @@\n-error: trait methods cannot be stable const fn\n-  --> $DIR/staged-api.rs:22:5\n-   |\n-LL | /     fn func() {\n-LL | |\n-LL | |     }\n-   | |_____^\n-\n-error: `<staged_api::Unstable as staged_api::MyTrait>::func` is not yet stable as a const fn\n-  --> $DIR/staged-api.rs:34:5\n-   |\n-LL |     Unstable::func();\n-   |     ^^^^^^^^^^^^^^^^\n-   |\n-   = help: add `#![feature(staged)]` to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "4ea1be69b3bb90cdafee63a175c0e46eca32d339", "filename": "src/test/ui/rfc-2632-const-trait-impl/staged-api.unstable.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2632-const-trait-impl%2Fstaged-api.unstable.stderr?ref=f0620c95038c1e586f5165d5d3be7cf009aaf387", "patch": "@@ -0,0 +1,12 @@\n+error: implementation has missing const stability attribute\n+  --> $DIR/staged-api.rs:18:1\n+   |\n+LL | / impl const MyTrait for Stable {\n+LL | |\n+LL | |\n+LL | |     fn func() {}\n+LL | | }\n+   | |_^\n+\n+error: aborting due to previous error\n+"}, {"sha": "d89886af314a4c91db909388439e90d0d7450b6f", "filename": "src/test/ui/stability-attribute/missing-const-stability.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.rs?ref=f0620c95038c1e586f5165d5d3be7cf009aaf387", "patch": "@@ -18,9 +18,15 @@ impl Foo {\n     pub const fn bar() {} // ok because function is unstable\n }\n \n-// FIXME Once #![feature(const_trait_impl)] is allowed to be stable, add a test\n-// for const trait impls. Right now, a \"trait methods cannot be stable const fn\"\n-// error is emitted. This occurs prior to the lint being tested here, such that\n-// the lint cannot currently be tested on this use case.\n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n+pub trait Bar {\n+    #[stable(feature = \"stable\", since = \"1.0.0\")]\n+    fn fun();\n+}\n+#[stable(feature = \"stable\", since = \"1.0.0\")]\n+impl const Bar for Foo {\n+    //~^ ERROR implementation has missing const stability attribute\n+    fn fun() {}\n+}\n \n fn main() {}"}, {"sha": "6f2ade0d0abf406a8ffe7b5e8efeea8cb81081c5", "filename": "src/test/ui/stability-attribute/missing-const-stability.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f0620c95038c1e586f5165d5d3be7cf009aaf387/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fmissing-const-stability.stderr?ref=f0620c95038c1e586f5165d5d3be7cf009aaf387", "patch": "@@ -10,5 +10,14 @@ error: associated function has missing const stability attribute\n LL |     pub const fn foo() {}\n    |     ^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: implementation has missing const stability attribute\n+  --> $DIR/missing-const-stability.rs:27:1\n+   |\n+LL | / impl const Bar for Foo {\n+LL | |\n+LL | |     fn fun() {}\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 3 previous errors\n "}]}