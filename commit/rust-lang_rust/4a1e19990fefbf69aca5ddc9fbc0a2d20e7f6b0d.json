{"sha": "4a1e19990fefbf69aca5ddc9fbc0a2d20e7f6b0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhMWUxOTk5MGZlZmJmNjlhY2E1ZGRjOWZiYzBhMmQyMGU3ZjZiMGQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-26T15:05:49Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-03-26T15:05:49Z"}, "message": "Rollup merge of #32383 - aidanhs:aphs-heap-move-guarantee, r=alexcrichton\n\nDocument heap allocation location guarantee\n\n```\n14:25 < aidanhs> is there any guarantee that boxes will not move the value on the heap when they are moved?\n14:26 <@steveklabnik> aidanhs: ... i'm not sure if it's a guarantee, but it follows, generally\n14:26 <@steveklabnik> aidanhs: moves mean memcpy, so you're memcpying the structure of the box itself, which is copying the pointer\n14:26 <@steveklabnik> so the pointer won't be updated\n14:26 <@steveklabnik> moves cannot do complex things like move the memory around on the heap\n14:26 <@kmc> aidanhs: I would say it's guaranteed\n14:27 < aidanhs> steveklabnik: yeah, that's what I was thinking, it'd be pretty strange for rust to do something, but I couldn't find any docs one way or the other\n14:27 <@steveklabnik> kmc: aidanhs yeah, it's like a borderline thing that we don't explicitly guanratee but i think IS guaranteed by our other guarantees\n14:27 <@steveklabnik> mostly that move == memcpy\n14:28 < aidanhs> kmc: steveklabnik great thanks! would a PR to the rust reference along these lines be ok?\n14:28 < jmesmon> aidanhs: I believe owning_ref has some discussion of that (stable references)\n14:29 <@steveklabnik> aidanhs: i would probably take that, yeah\n14:29 < aidanhs> jmesmon: thanks, I'll take a look at that\n```\nhttps://botbot.me/mozilla/rust/2016-02-22/?msg=60657619&page=18\n\nr? @steveklabnik", "tree": {"sha": "2f3072ec65c71a91723d2cd605bbda1691abb172", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f3072ec65c71a91723d2cd605bbda1691abb172"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a1e19990fefbf69aca5ddc9fbc0a2d20e7f6b0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a1e19990fefbf69aca5ddc9fbc0a2d20e7f6b0d", "html_url": "https://github.com/rust-lang/rust/commit/4a1e19990fefbf69aca5ddc9fbc0a2d20e7f6b0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a1e19990fefbf69aca5ddc9fbc0a2d20e7f6b0d/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9b6ba800aba1e4caf8548904d2957f5cfda2758", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b6ba800aba1e4caf8548904d2957f5cfda2758", "html_url": "https://github.com/rust-lang/rust/commit/c9b6ba800aba1e4caf8548904d2957f5cfda2758"}, {"sha": "bb43f580e5a291ee02a99b6dca6ec9b757151a19", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb43f580e5a291ee02a99b6dca6ec9b757151a19", "html_url": "https://github.com/rust-lang/rust/commit/bb43f580e5a291ee02a99b6dca6ec9b757151a19"}], "stats": {"total": 3, "additions": 3, "deletions": 0}, "files": [{"sha": "fcf9aefaba8474920178eac36f51f7adc8ad48fe", "filename": "src/doc/reference.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4a1e19990fefbf69aca5ddc9fbc0a2d20e7f6b0d/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a1e19990fefbf69aca5ddc9fbc0a2d20e7f6b0d/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=4a1e19990fefbf69aca5ddc9fbc0a2d20e7f6b0d", "patch": "@@ -3911,6 +3911,9 @@ The _heap_ is a general term that describes boxes.  The lifetime of an\n allocation in the heap depends on the lifetime of the box values pointing to\n it. Since box values may themselves be passed in and out of frames, or stored\n in the heap, heap allocations may outlive the frame they are allocated within.\n+An allocation in the heap is guaranteed to reside at a single location in the\n+heap for the whole lifetime of the allocation - it will never be relocated as\n+a result of moving a box value.\n \n ### Memory ownership\n "}]}