{"sha": "406e89a00c3cca86abe619b703f192bf699f92f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwNmU4OWEwMGMzY2NhODZhYmU2MTliNzAzZjE5MmJmNjk5ZjkyZjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-29T17:05:36Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-29T17:05:36Z"}, "message": "Auto merge of #4601 - lzutao:clean-up-unused-vars, r=phansch\n\nClean up some unused vars\n\nchangelog: none", "tree": {"sha": "cc3c00bd9824bd8fc993d1fb5bdcf14aa12edb0a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc3c00bd9824bd8fc993d1fb5bdcf14aa12edb0a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/406e89a00c3cca86abe619b703f192bf699f92f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/406e89a00c3cca86abe619b703f192bf699f92f6", "html_url": "https://github.com/rust-lang/rust/commit/406e89a00c3cca86abe619b703f192bf699f92f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/406e89a00c3cca86abe619b703f192bf699f92f6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b292183c683482e0ee9f99d7e2e7e432bda15230", "url": "https://api.github.com/repos/rust-lang/rust/commits/b292183c683482e0ee9f99d7e2e7e432bda15230", "html_url": "https://github.com/rust-lang/rust/commit/b292183c683482e0ee9f99d7e2e7e432bda15230"}, {"sha": "aa4f3fb5374b76c8b3602489b6cf362d342a8282", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4f3fb5374b76c8b3602489b6cf362d342a8282", "html_url": "https://github.com/rust-lang/rust/commit/aa4f3fb5374b76c8b3602489b6cf362d342a8282"}], "stats": {"total": 71, "additions": 23, "deletions": 48}, "files": [{"sha": "267f1a279042a06a18f97e20c8e8e5f995398355", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/406e89a00c3cca86abe619b703f192bf699f92f6/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e89a00c3cca86abe619b703f192bf699f92f6/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=406e89a00c3cca86abe619b703f192bf699f92f6", "patch": "@@ -48,14 +48,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ErasingOp {\n }\n \n fn check(cx: &LateContext<'_, '_>, e: &Expr, span: Span) {\n-    if let Some(Constant::Int(v)) = constant_simple(cx, cx.tables, e) {\n-        if v == 0 {\n-            span_lint(\n-                cx,\n-                ERASING_OP,\n-                span,\n-                \"this operation will always return zero. This is likely not the intended outcome\",\n-            );\n-        }\n+    if let Some(Constant::Int(0)) = constant_simple(cx, cx.tables, e) {\n+        span_lint(\n+            cx,\n+            ERASING_OP,\n+            span,\n+            \"this operation will always return zero. This is likely not the intended outcome\",\n+        );\n     }\n }"}, {"sha": "a43bc3ec1aaf7dcb08096820175d127b0a21d397", "filename": "clippy_lints/src/get_last_with_len.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/406e89a00c3cca86abe619b703f192bf699f92f6/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e89a00c3cca86abe619b703f192bf699f92f6/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_last_with_len.rs?ref=406e89a00c3cca86abe619b703f192bf699f92f6", "patch": "@@ -79,8 +79,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for GetLastWithLen {\n \n             // RHS of subtraction is 1\n             if let ExprKind::Lit(rhs_lit) = &rhs.kind;\n-            if let LitKind::Int(rhs_value, ..) = rhs_lit.node;\n-            if rhs_value == 1;\n+            if let LitKind::Int(1, ..) = rhs_lit.node;\n \n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}, {"sha": "aec0664a29b2579518a66e72661eb8772a54efb6", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/406e89a00c3cca86abe619b703f192bf699f92f6/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e89a00c3cca86abe619b703f192bf699f92f6/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=406e89a00c3cca86abe619b703f192bf699f92f6", "patch": "@@ -2,7 +2,7 @@ use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n-use syntax::source_map::{Span, Spanned};\n+use syntax::source_map::Span;\n \n use crate::consts::{self, Constant};\n use crate::utils::span_lint;\n@@ -28,19 +28,14 @@ declare_lint_pass!(NegMultiply => [NEG_MULTIPLY]);\n #[allow(clippy::match_same_arms)]\n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NegMultiply {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n-        if let ExprKind::Binary(\n-            Spanned {\n-                node: BinOpKind::Mul, ..\n-            },\n-            ref l,\n-            ref r,\n-        ) = e.kind\n-        {\n-            match (&l.kind, &r.kind) {\n-                (&ExprKind::Unary(..), &ExprKind::Unary(..)) => (),\n-                (&ExprKind::Unary(UnNeg, ref lit), _) => check_mul(cx, e.span, lit, r),\n-                (_, &ExprKind::Unary(UnNeg, ref lit)) => check_mul(cx, e.span, lit, l),\n-                _ => (),\n+        if let ExprKind::Binary(ref op, ref left, ref right) = e.kind {\n+            if BinOpKind::Mul == op.node {\n+                match (&left.kind, &right.kind) {\n+                    (&ExprKind::Unary(..), &ExprKind::Unary(..)) => {},\n+                    (&ExprKind::Unary(UnNeg, ref lit), _) => check_mul(cx, e.span, lit, right),\n+                    (_, &ExprKind::Unary(UnNeg, ref lit)) => check_mul(cx, e.span, lit, left),\n+                    _ => {},\n+                }\n             }\n         }\n     }\n@@ -49,14 +44,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NegMultiply {\n fn check_mul(cx: &LateContext<'_, '_>, span: Span, lit: &Expr, exp: &Expr) {\n     if_chain! {\n         if let ExprKind::Lit(ref l) = lit.kind;\n-        if let Constant::Int(val) = consts::lit_to_constant(&l.node, cx.tables.expr_ty(lit));\n-        if val == 1;\n+        if let Constant::Int(1) = consts::lit_to_constant(&l.node, cx.tables.expr_ty(lit));\n         if cx.tables.expr_ty(exp).is_integral();\n         then {\n-            span_lint(cx,\n-                      NEG_MULTIPLY,\n-                      span,\n-                      \"Negation by multiplying with -1\");\n+            span_lint(cx, NEG_MULTIPLY, span, \"Negation by multiplying with -1\");\n         }\n     }\n }"}, {"sha": "9d1d783f60c2035b454e11dad58bc1ef55dd0d1f", "filename": "clippy_lints/src/transmuting_null.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/406e89a00c3cca86abe619b703f192bf699f92f6/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/406e89a00c3cca86abe619b703f192bf699f92f6/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=406e89a00c3cca86abe619b703f192bf699f92f6", "patch": "@@ -48,14 +48,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TransmutingNull {\n                     if let ExprKind::Path(ref _qpath) = args[0].kind;\n                     let x = const_eval_context.expr(&args[0]);\n                     if let Some(constant) = x;\n-                    if let Constant::RawPtr(ptr_value) = constant;\n-                    if ptr_value == 0;\n+                    if let Constant::RawPtr(0) = constant;\n                     then {\n-                        span_lint(\n-                            cx,\n-                            TRANSMUTING_NULL,\n-                            expr.span,\n-                            LINT_MSG)\n+                        span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG)\n                     }\n                 }\n \n@@ -66,11 +61,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TransmutingNull {\n                     if let ExprKind::Lit(ref lit) = inner_expr.kind;\n                     if let LitKind::Int(0, _) = lit.node;\n                     then {\n-                        span_lint(\n-                            cx,\n-                            TRANSMUTING_NULL,\n-                            expr.span,\n-                            LINT_MSG)\n+                        span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG)\n                     }\n                 }\n \n@@ -82,11 +73,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for TransmutingNull {\n                     if match_qpath(path1, &paths::STD_PTR_NULL);\n                     if args1.len() == 0;\n                     then {\n-                        span_lint(\n-                            cx,\n-                            TRANSMUTING_NULL,\n-                            expr.span,\n-                            LINT_MSG)\n+                        span_lint(cx, TRANSMUTING_NULL, expr.span, LINT_MSG)\n                     }\n                 }\n "}]}