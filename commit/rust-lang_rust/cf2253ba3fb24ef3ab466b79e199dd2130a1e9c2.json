{"sha": "cf2253ba3fb24ef3ab466b79e199dd2130a1e9c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMjI1M2JhM2ZiMjRlZjNhYjQ2NmI3OWUxOTlkZDIxMzBhMWU5YzI=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2013-09-17T01:49:47Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2013-09-17T01:49:47Z"}, "message": "Updating rustpkg tutorial from feedback.", "tree": {"sha": "94595bb494eb341c86e489f00b307ad2a247aee6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94595bb494eb341c86e489f00b307ad2a247aee6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf2253ba3fb24ef3ab466b79e199dd2130a1e9c2", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf2253ba3fb24ef3ab466b79e199dd2130a1e9c2", "html_url": "https://github.com/rust-lang/rust/commit/cf2253ba3fb24ef3ab466b79e199dd2130a1e9c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf2253ba3fb24ef3ab466b79e199dd2130a1e9c2/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0b9cc6a8b810b70698b9d5baa4b64de97a80324", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0b9cc6a8b810b70698b9d5baa4b64de97a80324", "html_url": "https://github.com/rust-lang/rust/commit/a0b9cc6a8b810b70698b9d5baa4b64de97a80324"}], "stats": {"total": 53, "additions": 16, "deletions": 37}, "files": [{"sha": "43d83093eea571fed84e28af889c98e93562d788", "filename": "doc/tutorial-rustpkg.md", "status": "modified", "additions": 16, "deletions": 37, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/cf2253ba3fb24ef3ab466b79e199dd2130a1e9c2/doc%2Ftutorial-rustpkg.md", "raw_url": "https://github.com/rust-lang/rust/raw/cf2253ba3fb24ef3ab466b79e199dd2130a1e9c2/doc%2Ftutorial-rustpkg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-rustpkg.md?ref=cf2253ba3fb24ef3ab466b79e199dd2130a1e9c2", "patch": "@@ -35,15 +35,16 @@ This makes sense, as we haven't gotten it from anywhere yet!  Luckily for us,\n used like this:\n \n ~~~ {.notrust}\n-$ rustpkg install fragment\n+$ rustpkg install pkg_id\n ~~~\n \n-This will install a package named 'fragment' into your current Rust\n-environment. I called it 'fragment' in this example because when using it with\n-an external package like this, it's often a URI fragment. You see, Rust has no\n-central authority for packages. You can build your own `hello` library if you\n-want, and that's fine. We'd both host them in different places and different\n-projects would rely on whichever version they preferred.\n+This will install a package named 'pkg_id' into your current Rust environment.\n+I called it 'pkg_id' in this example because `rustpkg` calls this a 'package\n+identifier.' When using it with an external package like this, it's often a\n+URI fragment.  You see, Rust has no central authority for packages. You can\n+build your own `hello` library if you want, and that's fine. We'd both host\n+them in different places and different projects would rely on whichever version\n+they preferred.\n \n To install the `hello` library, simply run this in your terminal:\n \n@@ -71,10 +72,10 @@ Simple! That's all it takes.\n \n Before we can talk about how to make packages of your own, you have to\n understand the big concept with `rustpkg`: workspaces. A 'workspace' is simply\n-a directory that has certain folders that `rustpkg` expects. Different Rust\n-projects will go into different workspaces.\n+a directory that has certain sub-directories that `rustpkg` expects. Different\n+Rust projects will go into different workspaces.\n \n-A workspace consists of any folder that has the following\n+A workspace consists of any directory that has the following\n directories:\n \n * `src`: The directory where all the source code goes.\n@@ -94,11 +95,11 @@ to wherever you keep your personal projects, and let's make all of the\n directories we'll need. I'll refer to this personal project directory as\n `~/src` for the rest of this tutorial.\n \n-### Creating neccesary files\n+### Creating our workspace\n \n ~~~ {.notrust}\n $ cd ~/src\n-$ mkdir -p hello/{src/hello,build,lib,bin}\n+$ mkdir -p hello/src/hello\n $ cd hello\n ~~~\n \n@@ -125,28 +126,22 @@ $ git commit -am \"Initial commit.\"\n ~~~\n \n If you're not familliar with the `cat >` idiom, it will make files with the\n-text you type insie. Control-D (`^D`) ends the text for the file.\n+text you type inside. Control-D (`^D`) ends the text for the file.\n \n Anyway, we've got a README and a `.gitignore`. Let's talk about that\n `.gitignore` for a minute: we are ignoring two directories, `build` and\n `.rust`. `build`, as we discussed earlier, is for build artifacts, and we don't\n-want to check those into a repository. `.rust` is a folder that `rustpkg` uses\n-to keep track of its own settings, as well as the source code of any other\n+want to check those into a repository. `.rust` is a directory that `rustpkg`\n+uses to keep track of its own settings, as well as the source code of any other\n external packages that this workspace uses. This is where that `rustpkg\n install` puts all of its files. Those are also not to go into our repository,\n so we ignore it all as well.\n \n Next, let's add a source file:\n \n ~~~\n-#[link(name = \"hello\",\n-       vers = \"0.1.0\",\n-       uuid = \"0028fbe0-1f1f-11e3-8224-0800200c9a66\",\n-       url = \"https://github.com/YOUR_USERNAME/hello\")]; \n-\n #[desc = \"A hello world Rust package.\"];\n #[license = \"MIT\"];\n-#[crate_type = \"lib\"];\n \n pub fn world() {\n     println(\"Hello, world.\");\n@@ -157,28 +152,12 @@ Put this into `src/hello/lib.rs`. Let's talk about each of these attributes:\n \n ### Crate attributes for packages\n \n-`crate_type` is the simplest: we're building a library here, so we set it to\n-`\"lib\"`. If we were making an executable of some kind, we'd set this to `\"bin\"`\n-instead.\n-\n `license` is equally simple: the license we want this code to have. I chose MIT\n here, but you should pick whatever license makes the most sense for you.\n \n `desc` is a description of the package and what it does. This should just be a\n sentence or two.\n \n-`link` is the big complex attribute here. It's still not too complex: `name` is\n-the name of the package, and `vers` is the version. If you're building a\n-library, consider using [Semantic Versioning](http://semver.org/) as your\n-versioning scheme. Future versions of `rustpkg` will assume SemVer.\n-\n-`uuid` is simply a unique identifier. You can generate a UUID by visiting [this\n-page](http://www.famkruithof.net/uuid/uuidgen). Just copy whatever it puts out\n-into the value for `uuid`. For more on UUIDs, see\n-[RFC4122](http://www.ietf.org/rfc/rfc4122.txt).\n-\n-Finally, `url` is a URL where this package is located. Easy.\n-\n ### Building your package\n \n Building your package is simple:"}]}