{"sha": "d0414b57b45e8670223f2403fb34888dbc48da1e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNDE0YjU3YjQ1ZTg2NzAyMjNmMjQwM2ZiMzQ4ODhkYmM0OGRhMWU=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-13T02:05:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-13T02:05:33Z"}, "message": "Rollup merge of #75201 - Hirrolot:hirrolot/fix-clippy-warnings, r=varkor\n\nFix some Clippy warnings in librustc_serialize", "tree": {"sha": "e07d64483086723018fca71bb8e0bd8f2a0a787f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e07d64483086723018fca71bb8e0bd8f2a0a787f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0414b57b45e8670223f2403fb34888dbc48da1e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNJ/uCRBK7hj4Ov3rIwAAdHIIACl/DKLJWLI+zcre1XtM/LfE\npNqPrmC6UjzZRXymAYm/KeQVz4fwFz/OeOmzB+hnzLx2qNScEQqvGWIcUNQ3uowm\ndf+FtzmQCpaoVXPvnEQY9tYj6pbNiHUHaqn9Sg4vvIVqjOArwxL0X/69mVehPCLf\nrN6+bvYn3kiNeq3Nutcv6Ls7TUGq4WNZBdVV0z19ED7ffonVcvgJhvmWjU3xpKWZ\nycU6vnpuaiXOd4hzXfeiclSk1iDDk5flieNS1OE1CvyWDONl7cJQTvmqmp2iuFBN\n7qfPYOt9oReP6h63fhewZPbZJuA4CiDQtfiDEzeEmayBCNGizIfpHLdkHjPJyqE=\n=ObIS\n-----END PGP SIGNATURE-----\n", "payload": "tree e07d64483086723018fca71bb8e0bd8f2a0a787f\nparent ed543ae2f6119cdb401f2ae4e2f8e44fe960c7b1\nparent 8a4fecb554353a89f854726c02058e764863e64a\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1597284333 +0900\ncommitter GitHub <noreply@github.com> 1597284333 +0900\n\nRollup merge of #75201 - Hirrolot:hirrolot/fix-clippy-warnings, r=varkor\n\nFix some Clippy warnings in librustc_serialize\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0414b57b45e8670223f2403fb34888dbc48da1e", "html_url": "https://github.com/rust-lang/rust/commit/d0414b57b45e8670223f2403fb34888dbc48da1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0414b57b45e8670223f2403fb34888dbc48da1e/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed543ae2f6119cdb401f2ae4e2f8e44fe960c7b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed543ae2f6119cdb401f2ae4e2f8e44fe960c7b1", "html_url": "https://github.com/rust-lang/rust/commit/ed543ae2f6119cdb401f2ae4e2f8e44fe960c7b1"}, {"sha": "8a4fecb554353a89f854726c02058e764863e64a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a4fecb554353a89f854726c02058e764863e64a", "html_url": "https://github.com/rust-lang/rust/commit/8a4fecb554353a89f854726c02058e764863e64a"}], "stats": {"total": 116, "additions": 42, "deletions": 74}, "files": [{"sha": "49b8094abd0eb5d64f7c491d1c292c0498a23cb1", "filename": "src/librustc_serialize/collection_impls.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d0414b57b45e8670223f2403fb34888dbc48da1e/src%2Flibrustc_serialize%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0414b57b45e8670223f2403fb34888dbc48da1e/src%2Flibrustc_serialize%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_serialize%2Fcollection_impls.rs?ref=d0414b57b45e8670223f2403fb34888dbc48da1e", "patch": "@@ -86,11 +86,9 @@ where\n {\n     fn encode<S: Encoder>(&self, e: &mut S) -> Result<(), S::Error> {\n         e.emit_map(self.len(), |e| {\n-            let mut i = 0;\n-            for (key, val) in self {\n+            for (i, (key, val)) in self.iter().enumerate() {\n                 e.emit_map_elt_key(i, |e| key.encode(e))?;\n                 e.emit_map_elt_val(i, |e| val.encode(e))?;\n-                i += 1;\n             }\n             Ok(())\n         })\n@@ -121,10 +119,8 @@ where\n {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n         s.emit_seq(self.len(), |s| {\n-            let mut i = 0;\n-            for e in self {\n+            for (i, e) in self.iter().enumerate() {\n                 s.emit_seq_elt(i, |s| e.encode(s))?;\n-                i += 1;\n             }\n             Ok(())\n         })\n@@ -154,11 +150,9 @@ where\n {\n     fn encode<E: Encoder>(&self, e: &mut E) -> Result<(), E::Error> {\n         e.emit_map(self.len(), |e| {\n-            let mut i = 0;\n-            for (key, val) in self {\n+            for (i, (key, val)) in self.iter().enumerate() {\n                 e.emit_map_elt_key(i, |e| key.encode(e))?;\n                 e.emit_map_elt_val(i, |e| val.encode(e))?;\n-                i += 1;\n             }\n             Ok(())\n         })\n@@ -192,10 +186,8 @@ where\n {\n     fn encode<E: Encoder>(&self, s: &mut E) -> Result<(), E::Error> {\n         s.emit_seq(self.len(), |s| {\n-            let mut i = 0;\n-            for e in self {\n+            for (i, e) in self.iter().enumerate() {\n                 s.emit_seq_elt(i, |s| e.encode(s))?;\n-                i += 1;\n             }\n             Ok(())\n         })\n@@ -227,11 +219,9 @@ where\n {\n     fn encode<E: Encoder>(&self, e: &mut E) -> Result<(), E::Error> {\n         e.emit_map(self.len(), |e| {\n-            let mut i = 0;\n-            for (key, val) in self {\n+            for (i, (key, val)) in self.iter().enumerate() {\n                 e.emit_map_elt_key(i, |e| key.encode(e))?;\n                 e.emit_map_elt_val(i, |e| val.encode(e))?;\n-                i += 1;\n             }\n             Ok(())\n         })\n@@ -265,10 +255,8 @@ where\n {\n     fn encode<E: Encoder>(&self, s: &mut E) -> Result<(), E::Error> {\n         s.emit_seq(self.len(), |s| {\n-            let mut i = 0;\n-            for e in self {\n+            for (i, e) in self.iter().enumerate() {\n                 s.emit_seq_elt(i, |s| e.encode(s))?;\n-                i += 1;\n             }\n             Ok(())\n         })"}, {"sha": "ab7f6975325bc0ccb403e5fd99483d2829bae210", "filename": "src/librustc_serialize/json.rs", "status": "modified", "additions": 34, "deletions": 54, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/d0414b57b45e8670223f2403fb34888dbc48da1e/src%2Flibrustc_serialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0414b57b45e8670223f2403fb34888dbc48da1e/src%2Flibrustc_serialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_serialize%2Fjson.rs?ref=d0414b57b45e8670223f2403fb34888dbc48da1e", "patch": "@@ -78,19 +78,17 @@\n //!     data_vector: Vec<u8>,\n //! }\n //!\n-//! fn main() {\n-//!     let object = TestStruct {\n-//!         data_int: 1,\n-//!         data_str: \"homura\".to_string(),\n-//!         data_vector: vec![2,3,4,5],\n-//!     };\n+//! let object = TestStruct {\n+//!     data_int: 1,\n+//!     data_str: \"homura\".to_string(),\n+//!     data_vector: vec![2,3,4,5],\n+//! };\n //!\n-//!     // Serialize using `json::encode`\n-//!     let encoded = json::encode(&object).unwrap();\n+//! // Serialize using `json::encode`\n+//! let encoded = json::encode(&object).unwrap();\n //!\n-//!     // Deserialize using `json::decode`\n-//!     let decoded: TestStruct = json::decode(&encoded[..]).unwrap();\n-//! }\n+//! // Deserialize using `json::decode`\n+//! let decoded: TestStruct = json::decode(&encoded[..]).unwrap();\n //! ```\n //!\n //! ## Using the `ToJson` trait\n@@ -125,16 +123,14 @@\n //!     val: Json,\n //! }\n //!\n-//! fn main() {\n-//!     let num = ComplexNum { a: 0.0001, b: 12.539 };\n-//!     let data: String = json::encode(&ComplexNumRecord{\n-//!         uid: 1,\n-//!         dsc: \"test\".to_string(),\n-//!         val: num.to_json(),\n-//!     }).unwrap();\n-//!     println!(\"data: {}\", data);\n-//!     // data: {\"uid\":1,\"dsc\":\"test\",\"val\":\"0.0001+12.539i\"};\n-//! }\n+//! let num = ComplexNum { a: 0.0001, b: 12.539 };\n+//! let data: String = json::encode(&ComplexNumRecord{\n+//!     uid: 1,\n+//!     dsc: \"test\".to_string(),\n+//!     val: num.to_json(),\n+//! }).unwrap();\n+//! println!(\"data: {}\", data);\n+//! // data: {\"uid\":1,\"dsc\":\"test\",\"val\":\"0.0001+12.539i\"};\n //! ```\n //!\n //! ### Verbose example of `ToJson` usage\n@@ -164,19 +160,17 @@\n //!     }\n //! }\n //!\n-//! fn main() {\n-//!     // Serialize using `ToJson`\n-//!     let input_data = TestStruct {\n-//!         data_int: 1,\n-//!         data_str: \"madoka\".to_string(),\n-//!         data_vector: vec![2,3,4,5],\n-//!     };\n-//!     let json_obj: Json = input_data.to_json();\n-//!     let json_str: String = json_obj.to_string();\n+//! // Serialize using `ToJson`\n+//! let input_data = TestStruct {\n+//!     data_int: 1,\n+//!     data_str: \"madoka\".to_string(),\n+//!     data_vector: vec![2,3,4,5],\n+//! };\n+//! let json_obj: Json = input_data.to_json();\n+//! let json_str: String = json_obj.to_string();\n //!\n-//!     // Deserialize like before\n-//!     let decoded: TestStruct = json::decode(&json_str).unwrap();\n-//! }\n+//! // Deserialize like before\n+//! let decoded: TestStruct = json::decode(&json_str).unwrap();\n //! ```\n \n use self::DecoderError::*;\n@@ -1269,34 +1263,22 @@ impl Json {\n \n     /// Returns `true` if the Json value is a `Number`.\n     pub fn is_number(&self) -> bool {\n-        match *self {\n-            Json::I64(_) | Json::U64(_) | Json::F64(_) => true,\n-            _ => false,\n-        }\n+        matches!(*self, Json::I64(_) | Json::U64(_) | Json::F64(_))\n     }\n \n     /// Returns `true` if the Json value is a `i64`.\n     pub fn is_i64(&self) -> bool {\n-        match *self {\n-            Json::I64(_) => true,\n-            _ => false,\n-        }\n+        matches!(*self, Json::I64(_))\n     }\n \n     /// Returns `true` if the Json value is a `u64`.\n     pub fn is_u64(&self) -> bool {\n-        match *self {\n-            Json::U64(_) => true,\n-            _ => false,\n-        }\n+        matches!(*self, Json::U64(_))\n     }\n \n     /// Returns `true` if the Json value is a `f64`.\n     pub fn is_f64(&self) -> bool {\n-        match *self {\n-            Json::F64(_) => true,\n-            _ => false,\n-        }\n+        matches!(*self, Json::F64(_))\n     }\n \n     /// If the Json value is a number, returns or cast it to a `i64`;\n@@ -1416,6 +1398,7 @@ enum ParserState {\n /// structure of the JSON stream.\n ///\n /// An example is `foo.bar[3].x`.\n+#[derive(Default)]\n pub struct Stack {\n     stack: Vec<InternalStackElement>,\n     str_buffer: Vec<u8>,\n@@ -1442,7 +1425,7 @@ enum InternalStackElement {\n \n impl Stack {\n     pub fn new() -> Stack {\n-        Stack { stack: Vec::new(), str_buffer: Vec::new() }\n+        Self::default()\n     }\n \n     /// Returns The number of elements in the Stack.\n@@ -1547,10 +1530,7 @@ impl Stack {\n \n     // Used by Parser to test whether the top-most element is an index.\n     fn last_is_index(&self) -> bool {\n-        match self.stack.last() {\n-            Some(InternalIndex(_)) => true,\n-            _ => false,\n-        }\n+        matches!(self.stack.last(), Some(InternalIndex(_)))\n     }\n \n     // Used by Parser to increment the index of the top-most element."}, {"sha": "fa4423e261d1c98ccaf8e2494969cce8a300038e", "filename": "src/librustc_serialize/opaque.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d0414b57b45e8670223f2403fb34888dbc48da1e/src%2Flibrustc_serialize%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0414b57b45e8670223f2403fb34888dbc48da1e/src%2Flibrustc_serialize%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_serialize%2Fopaque.rs?ref=d0414b57b45e8670223f2403fb34888dbc48da1e", "patch": "@@ -118,13 +118,13 @@ impl serialize::Encoder for Encoder {\n \n     #[inline]\n     fn emit_f64(&mut self, v: f64) -> EncodeResult {\n-        let as_u64: u64 = unsafe { ::std::mem::transmute(v) };\n+        let as_u64: u64 = v.to_bits();\n         self.emit_u64(as_u64)\n     }\n \n     #[inline]\n     fn emit_f32(&mut self, v: f32) -> EncodeResult {\n-        let as_u32: u32 = unsafe { ::std::mem::transmute(v) };\n+        let as_u32: u32 = v.to_bits();\n         self.emit_u32(as_u32)\n     }\n "}]}