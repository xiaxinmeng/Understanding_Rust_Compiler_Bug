{"sha": "14ea7a777f924995256a05da55133d265ed169be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0ZWE3YTc3N2Y5MjQ5OTUyNTZhMDVkYTU1MTMzZDI2NWVkMTY5YmU=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-05-28T14:57:09Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-24T11:09:35Z"}, "message": "lints: add `improper_ctypes_definitions`\n\nThis commit adds a new lint - `improper_ctypes_definitions` - which\nfunctions identically to `improper_ctypes`, but on `extern \"C\" fn`\ndefinitions (as opposed to `improper_ctypes`'s `extern \"C\" {}`\ndeclarations).\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "269733c6438fff740e0b53cc40daaf34d40c5510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/269733c6438fff740e0b53cc40daaf34d40c5510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14ea7a777f924995256a05da55133d265ed169be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl7zNG8ACgkQJZLnbIc4\nH9mgChAAggW3lhxNcEjm+al5VlyFhBJK6xxyuWqWbkFF9INnPtD4JnbRFc7/w+O3\nZ5LyqyY6ghZsak4JU7BDTFmv6yZ4f2cu6sftHsOjTEsk+LuL6KNEfOfeLBONeQeU\nEAP8MMFl/exrKvUxyEfR1YrYFSdPnGSqGd624hQn4EPwkq1dlCZfyk46RxRpWNeC\npCOAuYdBCDMRbo8lo9V5jYRlxHg8zlgkwnQWB0nWHmDFEildu752mpm+mCZ7a2h9\nIf+awDnFl8Wf/nD/whY3i0B/HtjLfahntsePKIAgDguHQFqvJp3VBb6C74aNQaC2\nZmngRt7DGnc6/HdOw9zeMil/9EfClnJ1ZVszqjyrL3PR6SEeFI31uD0XhmbRCN1I\nOlOwCdjfzyPdQALTXcPS4Iv7WKrFslBBMDodqNiR0BtWzlCoXzlyPfAxNfY4Dz/E\ntcQUkEOdvLRQWwMTvkhKVrVToDRMMZBmWB5cOpRyfX9WZHBCRbTLOhsZL9wXX9SR\nCPtIR2C0kf/CSqvJa4Sh2PsCltZK1VctFIrQB+ha8E/wq3ttKbyfoeMwAqWSuId6\nWCpylWCmANK6NwUPqkhdCVHzYKve44TW8GzYsy4z686GERtmaMrwdXP1mX9ejXSC\n7g4jtkNPSOo4bApsd4FgRTBx6PJWvrDtYcq7mvGSIcN+6nPd+Ro=\n=DpbP\n-----END PGP SIGNATURE-----", "payload": "tree 269733c6438fff740e0b53cc40daaf34d40c5510\nparent 3c90ae8404b6b83bc3cba35840ddf7edd500cc86\nauthor David Wood <david@davidtw.co> 1590677829 +0100\ncommitter David Wood <david@davidtw.co> 1592996975 +0100\n\nlints: add `improper_ctypes_definitions`\n\nThis commit adds a new lint - `improper_ctypes_definitions` - which\nfunctions identically to `improper_ctypes`, but on `extern \"C\" fn`\ndefinitions (as opposed to `improper_ctypes`'s `extern \"C\" {}`\ndeclarations).\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14ea7a777f924995256a05da55133d265ed169be", "html_url": "https://github.com/rust-lang/rust/commit/14ea7a777f924995256a05da55133d265ed169be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14ea7a777f924995256a05da55133d265ed169be/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c90ae8404b6b83bc3cba35840ddf7edd500cc86", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c90ae8404b6b83bc3cba35840ddf7edd500cc86", "html_url": "https://github.com/rust-lang/rust/commit/3c90ae8404b6b83bc3cba35840ddf7edd500cc86"}], "stats": {"total": 560, "additions": 533, "deletions": 27}, "files": [{"sha": "f1b560b9b968550dea1950fd4bba412e18190f5c", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -92,11 +92,13 @@\n //! pub struct Foo;\n //!\n //! #[no_mangle]\n+//! #[allow(improper_ctypes_definitions)]\n //! pub extern \"C\" fn foo_new() -> Box<Foo> {\n //!     Box::new(Foo)\n //! }\n //!\n //! #[no_mangle]\n+//! #[allow(improper_ctypes_definitions)]\n //! pub extern \"C\" fn foo_delete(_: Option<Box<Foo>>) {}\n //! ```\n //!"}, {"sha": "27056d5f934fdc1c4f503ab294ba7803dbab2d17", "filename": "src/libpanic_abort/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Flibpanic_abort%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Flibpanic_abort%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_abort%2Flib.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -21,6 +21,7 @@\n use core::any::Any;\n \n #[rustc_std_internal_symbol]\n+#[cfg_attr(not(bootstrap), allow(improper_ctypes_definitions))]\n pub unsafe extern \"C\" fn __rust_panic_cleanup(_: *mut u8) -> *mut (dyn Any + Send + 'static) {\n     unreachable!()\n }"}, {"sha": "f361354da2ac2ff59081a778e10b4fcfb67edec6", "filename": "src/libpanic_unwind/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Flibpanic_unwind%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Flibpanic_unwind%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibpanic_unwind%2Flib.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -81,6 +81,7 @@ extern \"C\" {\n mod dwarf;\n \n #[rustc_std_internal_symbol]\n+#[cfg_attr(not(bootstrap), allow(improper_ctypes_definitions))]\n pub unsafe extern \"C\" fn __rust_panic_cleanup(payload: *mut u8) -> *mut (dyn Any + Send + 'static) {\n     Box::into_raw(imp::cleanup(payload))\n }"}, {"sha": "b39abe7b411bbad607cc3a4cb12e330bbccd0ac3", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -167,7 +167,8 @@ macro_rules! late_lint_mod_passes {\n             $args,\n             [\n                 HardwiredLints: HardwiredLints,\n-                ImproperCTypes: ImproperCTypes,\n+                ImproperCTypesDeclarations: ImproperCTypesDeclarations,\n+                ImproperCTypesDefinitions: ImproperCTypesDefinitions,\n                 VariantSizeDifferences: VariantSizeDifferences,\n                 BoxPointers: BoxPointers,\n                 PathStatements: PathStatements,"}, {"sha": "4c8b79308ed943488ed6fb16c302b8113437354a", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 81, "deletions": 26, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -498,10 +498,24 @@ declare_lint! {\n     \"proper use of libc types in foreign modules\"\n }\n \n-declare_lint_pass!(ImproperCTypes => [IMPROPER_CTYPES]);\n+declare_lint_pass!(ImproperCTypesDeclarations => [IMPROPER_CTYPES]);\n+\n+declare_lint! {\n+    IMPROPER_CTYPES_DEFINITIONS,\n+    Warn,\n+    \"proper use of libc types in foreign item definitions\"\n+}\n+\n+declare_lint_pass!(ImproperCTypesDefinitions => [IMPROPER_CTYPES_DEFINITIONS]);\n+\n+enum ImproperCTypesMode {\n+    Declarations,\n+    Definitions,\n+}\n \n struct ImproperCTypesVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'a, 'tcx>,\n+    mode: ImproperCTypesMode,\n }\n \n enum FfiResult<'tcx> {\n@@ -811,20 +825,16 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n             ty::Array(inner_ty, _) => self.check_type_for_ffi(cache, inner_ty),\n \n             ty::FnPtr(sig) => {\n-                match sig.abi() {\n-                    Abi::Rust | Abi::RustIntrinsic | Abi::PlatformIntrinsic | Abi::RustCall => {\n-                        return FfiUnsafe {\n-                            ty,\n-                            reason: \"this function pointer has Rust-specific calling convention\"\n+                if self.is_internal_abi(sig.abi()) {\n+                    return FfiUnsafe {\n+                        ty,\n+                        reason: \"this function pointer has Rust-specific calling convention\".into(),\n+                        help: Some(\n+                            \"consider using an `extern fn(...) -> ...` \\\n+                                    function pointer instead\"\n                                 .into(),\n-                            help: Some(\n-                                \"consider using an `extern fn(...) -> ...` \\\n-                                        function pointer instead\"\n-                                    .into(),\n-                            ),\n-                        };\n-                    }\n-                    _ => {}\n+                        ),\n+                    };\n                 }\n \n                 let sig = cx.erase_late_bound_regions(&sig);\n@@ -857,15 +867,17 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                 FfiUnsafe { ty, reason: \"opaque types have no C equivalent\".into(), help: None }\n             }\n \n-            ty::Param(..)\n-            | ty::Infer(..)\n+            // `extern \"C\" fn` functions can have type parameters, which may or may not be FFI-safe,\n+            //  so they are currently ignored for the purposes of this lint.\n+            ty::Param(..) | ty::Projection(..) => FfiSafe,\n+\n+            ty::Infer(..)\n             | ty::Bound(..)\n             | ty::Error(_)\n             | ty::Closure(..)\n             | ty::Generator(..)\n             | ty::GeneratorWitness(..)\n             | ty::Placeholder(..)\n-            | ty::Projection(..)\n             | ty::FnDef(..) => bug!(\"unexpected type in foreign function: {:?}\", ty),\n         }\n     }\n@@ -877,9 +889,20 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         note: &str,\n         help: Option<&str>,\n     ) {\n-        self.cx.struct_span_lint(IMPROPER_CTYPES, sp, |lint| {\n-            let mut diag =\n-                lint.build(&format!(\"`extern` block uses type `{}`, which is not FFI-safe\", ty));\n+        let lint = match self.mode {\n+            ImproperCTypesMode::Declarations => IMPROPER_CTYPES,\n+            ImproperCTypesMode::Definitions => IMPROPER_CTYPES_DEFINITIONS,\n+        };\n+\n+        self.cx.struct_span_lint(lint, sp, |lint| {\n+            let item_description = match self.mode {\n+                ImproperCTypesMode::Declarations => \"block\",\n+                ImproperCTypesMode::Definitions => \"fn\",\n+            };\n+            let mut diag = lint.build(&format!(\n+                \"`extern` {} uses type `{}`, which is not FFI-safe\",\n+                item_description, ty\n+            ));\n             diag.span_label(sp, \"not FFI-safe\");\n             if let Some(help) = help {\n                 diag.help(help);\n@@ -947,7 +970,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n         // it is only OK to use this function because extern fns cannot have\n         // any generic types right now:\n-        let ty = self.cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n+        let ty = self.cx.tcx.normalize_erasing_regions(self.cx.param_env, ty);\n \n         // C doesn't really support passing arrays by value - the only way to pass an array by value\n         // is through a struct. So, first test that the top level isn't an array, and then\n@@ -997,15 +1020,22 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         let ty = self.cx.tcx.type_of(def_id);\n         self.check_type_for_ffi_and_report_errors(span, ty, true, false);\n     }\n+\n+    fn is_internal_abi(&self, abi: Abi) -> bool {\n+        if let Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic = abi {\n+            true\n+        } else {\n+            false\n+        }\n+    }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypesDeclarations {\n     fn check_foreign_item(&mut self, cx: &LateContext<'_, '_>, it: &hir::ForeignItem<'_>) {\n-        let mut vis = ImproperCTypesVisitor { cx };\n+        let mut vis = ImproperCTypesVisitor { cx, mode: ImproperCTypesMode::Declarations };\n         let abi = cx.tcx.hir().get_foreign_abi(it.hir_id);\n-        if let Abi::Rust | Abi::RustCall | Abi::RustIntrinsic | Abi::PlatformIntrinsic = abi {\n-            // Don't worry about types in internal ABIs.\n-        } else {\n+\n+        if !vis.is_internal_abi(abi) {\n             match it.kind {\n                 hir::ForeignItemKind::Fn(ref decl, _, _) => {\n                     vis.check_foreign_fn(it.hir_id, decl);\n@@ -1019,6 +1049,31 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypes {\n     }\n }\n \n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImproperCTypesDefinitions {\n+    fn check_fn(\n+        &mut self,\n+        cx: &LateContext<'a, 'tcx>,\n+        kind: hir::intravisit::FnKind<'tcx>,\n+        decl: &'tcx hir::FnDecl<'_>,\n+        _: &'tcx hir::Body<'_>,\n+        _: Span,\n+        hir_id: hir::HirId,\n+    ) {\n+        use hir::intravisit::FnKind;\n+\n+        let abi = match kind {\n+            FnKind::ItemFn(_, _, header, ..) => header.abi,\n+            FnKind::Method(_, sig, ..) => sig.header.abi,\n+            _ => return,\n+        };\n+\n+        let mut vis = ImproperCTypesVisitor { cx, mode: ImproperCTypesMode::Definitions };\n+        if !vis.is_internal_abi(abi) {\n+            vis.check_foreign_fn(hir_id, decl);\n+        }\n+    }\n+}\n+\n declare_lint_pass!(VariantSizeDifferences => [VARIANT_SIZE_DIFFERENCES]);\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for VariantSizeDifferences {"}, {"sha": "f54ed9b92029ecbb0e34f511356432e9c05f91aa", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -15,6 +15,7 @@ pub struct RustString {\n \n /// Appending to a Rust string -- used by RawRustStringOstream.\n #[no_mangle]\n+#[cfg_attr(not(bootstrap), allow(improper_ctypes_definitions))]\n pub unsafe extern \"C\" fn LLVMRustStringWriteImpl(\n     sr: &RustString,\n     ptr: *const c_char,"}, {"sha": "5ef26d4cc4dc65a52d3e4e2eb6d92f4990585c22", "filename": "src/libstd/sys/sgx/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fmod.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -56,6 +56,7 @@ unsafe extern \"C\" fn tcs_init(secondary: bool) {\n // able to specify this\n #[cfg(not(test))]\n #[no_mangle]\n+#[allow(improper_ctypes_definitions)]\n extern \"C\" fn entry(p1: u64, p2: u64, p3: u64, secondary: bool, p4: u64, p5: u64) -> (u64, u64) {\n     // FIXME: how to support TLS in library mode?\n     let tls = Box::new(tls::Tls::new());"}, {"sha": "32864dba4587eb20722ba4925734f77e18a3d8d7", "filename": "src/test/ui/abi/abi-sysv64-register-usage.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fabi%2Fabi-sysv64-register-usage.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -38,6 +38,7 @@ pub struct LargeStruct(i64, i64, i64, i64, i64, i64, i64, i64);\n \n #[cfg(target_arch = \"x86_64\")]\n #[inline(never)]\n+#[allow(improper_ctypes_definitions)]\n pub extern \"sysv64\" fn large_struct_by_val(mut foo: LargeStruct) -> LargeStruct {\n     foo.0 *= 1;\n     foo.1 *= 2;"}, {"sha": "f77f40998de012ec0abdf81e11e41e59d453da54", "filename": "src/test/ui/align-with-extern-c-fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Falign-with-extern-c-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Falign-with-extern-c-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Falign-with-extern-c-fn.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -10,6 +10,7 @@\n #[repr(align(16))]\n pub struct A(i64);\n \n+#[allow(improper_ctypes_definitions)]\n pub extern \"C\" fn foo(x: A) {}\n \n fn main() {"}, {"sha": "bafa204e06b252eb709c8cd936b12b3ab9cc1e80", "filename": "src/test/ui/issues/issue-16441.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Fissues%2Fissue-16441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Fissues%2Fissue-16441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-16441.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -5,6 +5,7 @@\n struct Empty;\n \n // This used to cause an ICE\n+#[allow(improper_ctypes_definitions)]\n extern \"C\" fn ice(_a: Empty) {}\n \n fn main() {"}, {"sha": "fcabd1d84557c70abe60cf8b02cd55ac5e228e4e", "filename": "src/test/ui/issues/issue-26997.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26997.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -6,6 +6,7 @@ pub struct Foo {\n }\n \n impl Foo {\n+    #[allow(improper_ctypes_definitions)]\n     pub extern fn foo_new() -> Foo {\n         Foo { x: 21, y: 33 }\n     }"}, {"sha": "297519b9a79e2b633384523a7db36b868f24315c", "filename": "src/test/ui/issues/issue-28600.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-28600.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -6,6 +6,7 @@ struct Test;\n impl Test {\n     #[allow(dead_code)]\n     #[allow(unused_variables)]\n+    #[allow(improper_ctypes_definitions)]\n     pub extern fn test(val: &str) {\n \n     }"}, {"sha": "a966cf217e1655cc6f0a66ca1ea121647f23901f", "filename": "src/test/ui/issues/issue-38763.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Fissues%2Fissue-38763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Fissues%2Fissue-38763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38763.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -5,6 +5,7 @@\n pub struct Foo(i128);\n \n #[no_mangle]\n+#[allow(improper_ctypes_definitions)]\n pub extern \"C\" fn foo(x: Foo) -> Foo { x }\n \n fn main() {"}, {"sha": "52d26d0954af894a155a16d888c774b60f15a7b4", "filename": "src/test/ui/issues/issue-51907.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Fissues%2Fissue-51907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Fissues%2Fissue-51907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-51907.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -6,7 +6,9 @@ trait Foo {\n \n struct Bar;\n impl Foo for Bar {\n+    #[allow(improper_ctypes_definitions)]\n     extern fn borrow(&self) {}\n+    #[allow(improper_ctypes_definitions)]\n     extern fn take(self: Box<Self>) {}\n }\n "}, {"sha": "c9c95e714849d85dff9c7aa7db9c3534a8b2d1e5", "filename": "src/test/ui/lint/lint-ctypes-fn.rs", "status": "added", "additions": 186, "deletions": 0, "changes": 186, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -0,0 +1,186 @@\n+#![feature(rustc_private)]\n+\n+#![allow(private_in_public)]\n+#![deny(improper_ctypes_definitions)]\n+\n+extern crate libc;\n+\n+use std::default::Default;\n+use std::marker::PhantomData;\n+\n+trait Mirror { type It: ?Sized; }\n+\n+impl<T: ?Sized> Mirror for T { type It = Self; }\n+\n+#[repr(C)]\n+pub struct StructWithProjection(*mut <StructWithProjection as Mirror>::It);\n+\n+#[repr(C)]\n+pub struct StructWithProjectionAndLifetime<'a>(\n+    &'a mut <StructWithProjectionAndLifetime<'a> as Mirror>::It\n+);\n+\n+pub type I32Pair = (i32, i32);\n+\n+#[repr(C)]\n+pub struct ZeroSize;\n+\n+pub type RustFn = fn();\n+\n+pub type RustBadRet = extern fn() -> Box<u32>;\n+\n+pub type CVoidRet = ();\n+\n+pub struct Foo;\n+\n+#[repr(transparent)]\n+pub struct TransparentI128(i128);\n+\n+#[repr(transparent)]\n+pub struct TransparentStr(&'static str);\n+\n+#[repr(transparent)]\n+pub struct TransparentBadFn(RustBadRet);\n+\n+#[repr(transparent)]\n+pub struct TransparentInt(u32);\n+\n+#[repr(transparent)]\n+pub struct TransparentRef<'a>(&'a TransparentInt);\n+\n+#[repr(transparent)]\n+pub struct TransparentLifetime<'a>(*const u8, PhantomData<&'a ()>);\n+\n+#[repr(transparent)]\n+pub struct TransparentUnit<U>(f32, PhantomData<U>);\n+\n+#[repr(transparent)]\n+pub struct TransparentCustomZst(i32, ZeroSize);\n+\n+#[repr(C)]\n+pub struct ZeroSizeWithPhantomData(PhantomData<i32>);\n+\n+pub extern \"C\" fn ptr_type1(size: *const Foo) { }\n+//~^ ERROR: uses type `Foo`\n+\n+pub extern \"C\" fn ptr_type2(size: *const Foo) { }\n+//~^ ERROR: uses type `Foo`\n+\n+pub extern \"C\" fn slice_type(p: &[u32]) { }\n+//~^ ERROR: uses type `[u32]`\n+\n+pub extern \"C\" fn str_type(p: &str) { }\n+//~^ ERROR: uses type `str`\n+\n+pub extern \"C\" fn box_type(p: Box<u32>) { }\n+//~^ ERROR uses type `std::boxed::Box<u32>`\n+\n+pub extern \"C\" fn char_type(p: char) { }\n+//~^ ERROR uses type `char`\n+\n+pub extern \"C\" fn i128_type(p: i128) { }\n+//~^ ERROR uses type `i128`\n+\n+pub extern \"C\" fn u128_type(p: u128) { }\n+//~^ ERROR uses type `u128`\n+\n+pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n+//~^ ERROR uses type `(i32, i32)`\n+\n+pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n+//~^ ERROR uses type `(i32, i32)`\n+\n+pub extern \"C\" fn zero_size(p: ZeroSize) { }\n+//~^ ERROR uses type `ZeroSize`\n+\n+pub extern \"C\" fn zero_size_phantom(p: ZeroSizeWithPhantomData) { }\n+//~^ ERROR uses type `ZeroSizeWithPhantomData`\n+\n+pub extern \"C\" fn zero_size_phantom_toplevel() -> PhantomData<bool> {\n+//~^ ERROR uses type `std::marker::PhantomData<bool>`\n+    Default::default()\n+}\n+\n+pub extern \"C\" fn fn_type(p: RustFn) { }\n+//~^ ERROR uses type `fn()`\n+\n+pub extern \"C\" fn fn_type2(p: fn()) { }\n+//~^ ERROR uses type `fn()`\n+\n+pub extern \"C\" fn fn_contained(p: RustBadRet) { }\n+//~^ ERROR: uses type `std::boxed::Box<u32>`\n+\n+pub extern \"C\" fn transparent_i128(p: TransparentI128) { }\n+//~^ ERROR: uses type `i128`\n+\n+pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n+//~^ ERROR: uses type `str`\n+\n+pub extern \"C\" fn transparent_fn(p: TransparentBadFn) { }\n+//~^ ERROR: uses type `std::boxed::Box<u32>`\n+\n+pub extern \"C\" fn good3(fptr: Option<extern fn()>) { }\n+\n+pub extern \"C\" fn good4(aptr: &[u8; 4 as usize]) { }\n+\n+pub extern \"C\" fn good5(s: StructWithProjection) { }\n+\n+pub extern \"C\" fn good6(s: StructWithProjectionAndLifetime) { }\n+\n+pub extern \"C\" fn good7(fptr: extern fn() -> ()) { }\n+\n+pub extern \"C\" fn good8(fptr: extern fn() -> !) { }\n+\n+pub extern \"C\" fn good9() -> () { }\n+\n+pub extern \"C\" fn good10() -> CVoidRet { }\n+\n+pub extern \"C\" fn good11(size: isize) { }\n+\n+pub extern \"C\" fn good12(size: usize) { }\n+\n+pub extern \"C\" fn good13(n: TransparentInt) { }\n+\n+pub extern \"C\" fn good14(p: TransparentRef) { }\n+\n+pub extern \"C\" fn good15(p: TransparentLifetime) { }\n+\n+pub extern \"C\" fn good16(p: TransparentUnit<ZeroSize>) { }\n+\n+pub extern \"C\" fn good17(p: TransparentCustomZst) { }\n+\n+#[allow(improper_ctypes_definitions)]\n+pub extern \"C\" fn good18(_: &String) { }\n+\n+#[cfg(not(target_arch = \"wasm32\"))]\n+pub extern \"C\" fn good1(size: *const libc::c_int) { }\n+\n+#[cfg(not(target_arch = \"wasm32\"))]\n+pub extern \"C\" fn good2(size: *const libc::c_uint) { }\n+\n+pub extern \"C\" fn unused_generic1<T>(size: *const Foo) { }\n+//~^ ERROR: uses type `Foo`\n+\n+pub extern \"C\" fn unused_generic2<T>() -> PhantomData<bool> {\n+//~^ ERROR uses type `std::marker::PhantomData<bool>`\n+    Default::default()\n+}\n+\n+pub extern \"C\" fn used_generic1<T>(x: T) { }\n+\n+pub extern \"C\" fn used_generic2<T>(x: T, size: *const Foo) { }\n+//~^ ERROR: uses type `Foo`\n+\n+pub extern \"C\" fn used_generic3<T: Default>() -> T {\n+    Default::default()\n+}\n+\n+pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n+//~^ ERROR: uses type `std::vec::Vec<T>`\n+\n+pub extern \"C\" fn used_generic5<T>() -> Vec<T> {\n+//~^ ERROR: uses type `std::vec::Vec<T>`\n+    Default::default()\n+}\n+\n+fn main() {}"}, {"sha": "3ba16b622cb59e78d31546831ba61588ee4beee5", "filename": "src/test/ui/lint/lint-ctypes-fn.stderr", "status": "added", "additions": 247, "deletions": 0, "changes": 247, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-fn.stderr?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -0,0 +1,247 @@\n+error: `extern` fn uses type `Foo`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:63:35\n+   |\n+LL | pub extern \"C\" fn ptr_type1(size: *const Foo) { }\n+   |                                   ^^^^^^^^^^ not FFI-safe\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-ctypes-fn.rs:4:9\n+   |\n+LL | #![deny(improper_ctypes_definitions)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n+note: the type is defined here\n+  --> $DIR/lint-ctypes-fn.rs:34:1\n+   |\n+LL | pub struct Foo;\n+   | ^^^^^^^^^^^^^^^\n+\n+error: `extern` fn uses type `Foo`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:66:35\n+   |\n+LL | pub extern \"C\" fn ptr_type2(size: *const Foo) { }\n+   |                                   ^^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n+note: the type is defined here\n+  --> $DIR/lint-ctypes-fn.rs:34:1\n+   |\n+LL | pub struct Foo;\n+   | ^^^^^^^^^^^^^^^\n+\n+error: `extern` fn uses type `[u32]`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:69:33\n+   |\n+LL | pub extern \"C\" fn slice_type(p: &[u32]) { }\n+   |                                 ^^^^^^ not FFI-safe\n+   |\n+   = help: consider using a raw pointer instead\n+   = note: slices have no C equivalent\n+\n+error: `extern` fn uses type `str`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:72:31\n+   |\n+LL | pub extern \"C\" fn str_type(p: &str) { }\n+   |                               ^^^^ not FFI-safe\n+   |\n+   = help: consider using `*const u8` and a length instead\n+   = note: string slices have no C equivalent\n+\n+error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:75:31\n+   |\n+LL | pub extern \"C\" fn box_type(p: Box<u32>) { }\n+   |                               ^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n+\n+error: `extern` fn uses type `char`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:78:32\n+   |\n+LL | pub extern \"C\" fn char_type(p: char) { }\n+   |                                ^^^^ not FFI-safe\n+   |\n+   = help: consider using `u32` or `libc::wchar_t` instead\n+   = note: the `char` type has no C equivalent\n+\n+error: `extern` fn uses type `i128`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:81:32\n+   |\n+LL | pub extern \"C\" fn i128_type(p: i128) { }\n+   |                                ^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n+\n+error: `extern` fn uses type `u128`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:84:32\n+   |\n+LL | pub extern \"C\" fn u128_type(p: u128) { }\n+   |                                ^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n+\n+error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:87:33\n+   |\n+LL | pub extern \"C\" fn tuple_type(p: (i32, i32)) { }\n+   |                                 ^^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider using a struct instead\n+   = note: tuples have unspecified layout\n+\n+error: `extern` fn uses type `(i32, i32)`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:90:34\n+   |\n+LL | pub extern \"C\" fn tuple_type2(p: I32Pair) { }\n+   |                                  ^^^^^^^ not FFI-safe\n+   |\n+   = help: consider using a struct instead\n+   = note: tuples have unspecified layout\n+\n+error: `extern` fn uses type `ZeroSize`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:93:32\n+   |\n+LL | pub extern \"C\" fn zero_size(p: ZeroSize) { }\n+   |                                ^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a member to this struct\n+   = note: this struct has no fields\n+note: the type is defined here\n+  --> $DIR/lint-ctypes-fn.rs:26:1\n+   |\n+LL | pub struct ZeroSize;\n+   | ^^^^^^^^^^^^^^^^^^^^\n+\n+error: `extern` fn uses type `ZeroSizeWithPhantomData`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:96:40\n+   |\n+LL | pub extern \"C\" fn zero_size_phantom(p: ZeroSizeWithPhantomData) { }\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: composed only of `PhantomData`\n+note: the type is defined here\n+  --> $DIR/lint-ctypes-fn.rs:61:1\n+   |\n+LL | pub struct ZeroSizeWithPhantomData(PhantomData<i32>);\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `extern` fn uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:99:51\n+   |\n+LL | pub extern \"C\" fn zero_size_phantom_toplevel() -> PhantomData<bool> {\n+   |                                                   ^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: composed only of `PhantomData`\n+\n+error: `extern` fn uses type `fn()`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:104:30\n+   |\n+LL | pub extern \"C\" fn fn_type(p: RustFn) { }\n+   |                              ^^^^^^ not FFI-safe\n+   |\n+   = help: consider using an `extern fn(...) -> ...` function pointer instead\n+   = note: this function pointer has Rust-specific calling convention\n+\n+error: `extern` fn uses type `fn()`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:107:31\n+   |\n+LL | pub extern \"C\" fn fn_type2(p: fn()) { }\n+   |                               ^^^^ not FFI-safe\n+   |\n+   = help: consider using an `extern fn(...) -> ...` function pointer instead\n+   = note: this function pointer has Rust-specific calling convention\n+\n+error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:110:35\n+   |\n+LL | pub extern \"C\" fn fn_contained(p: RustBadRet) { }\n+   |                                   ^^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n+\n+error: `extern` fn uses type `i128`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:113:39\n+   |\n+LL | pub extern \"C\" fn transparent_i128(p: TransparentI128) { }\n+   |                                       ^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: 128-bit integers don't currently have a known stable ABI\n+\n+error: `extern` fn uses type `str`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:116:38\n+   |\n+LL | pub extern \"C\" fn transparent_str(p: TransparentStr) { }\n+   |                                      ^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider using `*const u8` and a length instead\n+   = note: string slices have no C equivalent\n+\n+error: `extern` fn uses type `std::boxed::Box<u32>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:119:37\n+   |\n+LL | pub extern \"C\" fn transparent_fn(p: TransparentBadFn) { }\n+   |                                     ^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n+\n+error: `extern` fn uses type `Foo`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:161:44\n+   |\n+LL | pub extern \"C\" fn unused_generic1<T>(size: *const Foo) { }\n+   |                                            ^^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n+note: the type is defined here\n+  --> $DIR/lint-ctypes-fn.rs:34:1\n+   |\n+LL | pub struct Foo;\n+   | ^^^^^^^^^^^^^^^\n+\n+error: `extern` fn uses type `std::marker::PhantomData<bool>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:164:43\n+   |\n+LL | pub extern \"C\" fn unused_generic2<T>() -> PhantomData<bool> {\n+   |                                           ^^^^^^^^^^^^^^^^^ not FFI-safe\n+   |\n+   = note: composed only of `PhantomData`\n+\n+error: `extern` fn uses type `Foo`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:171:48\n+   |\n+LL | pub extern \"C\" fn used_generic2<T>(x: T, size: *const Foo) { }\n+   |                                                ^^^^^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n+note: the type is defined here\n+  --> $DIR/lint-ctypes-fn.rs:34:1\n+   |\n+LL | pub struct Foo;\n+   | ^^^^^^^^^^^^^^^\n+\n+error: `extern` fn uses type `std::vec::Vec<T>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:178:39\n+   |\n+LL | pub extern \"C\" fn used_generic4<T>(x: Vec<T>) { }\n+   |                                       ^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n+\n+error: `extern` fn uses type `std::vec::Vec<T>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-fn.rs:181:41\n+   |\n+LL | pub extern \"C\" fn used_generic5<T>() -> Vec<T> {\n+   |                                         ^^^^^^ not FFI-safe\n+   |\n+   = help: consider adding a `#[repr(C)]` or `#[repr(transparent)]` attribute to this struct\n+   = note: this struct has unspecified layout\n+\n+error: aborting due to 24 previous errors\n+"}, {"sha": "4574dbd8529aa56a88c29ee278e3355df2dd176e", "filename": "src/test/ui/mir/mir_cast_fn_ret.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Fmir%2Fmir_cast_fn_ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Fmir%2Fmir_cast_fn_ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_cast_fn_ret.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -1,8 +1,10 @@\n // run-pass\n+#[allow(improper_ctypes_definitions)]\n pub extern \"C\" fn tuple2() -> (u16, u8) {\n     (1, 2)\n }\n \n+#[allow(improper_ctypes_definitions)]\n pub extern \"C\" fn tuple3() -> (u8, u8, u8) {\n     (1, 2, 3)\n }"}, {"sha": "d93a25c8ef4d372148b92ce6e6c2ed0b8031bd04", "filename": "src/test/ui/mir/mir_codegen_calls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14ea7a777f924995256a05da55133d265ed169be/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fmir_codegen_calls.rs?ref=14ea7a777f924995256a05da55133d265ed169be", "patch": "@@ -74,6 +74,7 @@ fn test8() -> isize {\n     Two::two()\n }\n \n+#[allow(improper_ctypes_definitions)]\n extern fn simple_extern(x: u32, y: (u32, u32)) -> u32 {\n     x + y.0 * y.1\n }"}]}