{"sha": "b2e6d08e3f88aee01d84412e0ea8369c48e0f419", "node_id": "C_kwDOAAsO6NoAKGIyZTZkMDhlM2Y4OGFlZTAxZDg0NDEyZTBlYTgzNjljNDhlMGY0MTk", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-11-15T13:05:30Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-11-15T13:13:47Z"}, "message": "use `ocx` type relation routines", "tree": {"sha": "4b2a8cb084f2f8cc3ee86164730987cbb56d4a21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b2a8cb084f2f8cc3ee86164730987cbb56d4a21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2e6d08e3f88aee01d84412e0ea8369c48e0f419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2e6d08e3f88aee01d84412e0ea8369c48e0f419", "html_url": "https://github.com/rust-lang/rust/commit/b2e6d08e3f88aee01d84412e0ea8369c48e0f419", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2e6d08e3f88aee01d84412e0ea8369c48e0f419/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5f67618e25be01d8580e3d49033e0f39a3e7781", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f67618e25be01d8580e3d49033e0f39a3e7781", "html_url": "https://github.com/rust-lang/rust/commit/f5f67618e25be01d8580e3d49033e0f39a3e7781"}], "stats": {"total": 48, "additions": 28, "deletions": 20}, "files": [{"sha": "a9cb191cc593fc0f7d5c116580712a35b930e59f", "filename": "compiler/rustc_const_eval/src/util/compare_types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6d08e3f88aee01d84412e0ea8369c48e0f419/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6d08e3f88aee01d84412e0ea8369c48e0f419/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcompare_types.rs?ref=b2e6d08e3f88aee01d84412e0ea8369c48e0f419", "patch": "@@ -48,10 +48,10 @@ pub fn is_subtype<'tcx>(\n     let cause = ObligationCause::dummy();\n     let src = ocx.normalize(cause.clone(), param_env, src);\n     let dest = ocx.normalize(cause.clone(), param_env, dest);\n-    let Ok(infer_ok) = infcx.at(&cause, param_env).sub(src, dest) else {\n-        return false;\n+    match ocx.sub(&cause, param_env, src, dest) {\n+        Ok(()) => {}\n+        Err(_) => return false,\n     };\n-    let () = ocx.register_infer_ok_obligations(infer_ok);\n     let errors = ocx.select_all_or_error();\n     // With `Reveal::All`, opaque types get normalized away, with `Reveal::UserFacing`\n     // we would get unification errors because we're unable to look into opaque types,"}, {"sha": "4b74dab709592c079a81e186795e848159fac9de", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6d08e3f88aee01d84412e0ea8369c48e0f419/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6d08e3f88aee01d84412e0ea8369c48e0f419/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=b2e6d08e3f88aee01d84412e0ea8369c48e0f419", "patch": "@@ -451,8 +451,8 @@ fn check_opaque_meets_bounds<'tcx>(\n \n     let misc_cause = traits::ObligationCause::misc(span, hir_id);\n \n-    match infcx.at(&misc_cause, param_env).eq(opaque_ty, hidden_ty) {\n-        Ok(infer_ok) => ocx.register_infer_ok_obligations(infer_ok),\n+    match ocx.eq(&misc_cause, param_env, opaque_ty, hidden_ty) {\n+        Ok(()) => {}\n         Err(ty_err) => {\n             tcx.sess.delay_span_bug(\n                 span,"}, {"sha": "af303b71118eca6ccd699a36baf41544d4011859", "filename": "compiler/rustc_hir_analysis/src/check/compare_method.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6d08e3f88aee01d84412e0ea8369c48e0f419/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6d08e3f88aee01d84412e0ea8369c48e0f419/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=b2e6d08e3f88aee01d84412e0ea8369c48e0f419", "patch": "@@ -402,10 +402,8 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n         unnormalized_trait_sig.inputs_and_output.iter().chain(trait_sig.inputs_and_output.iter()),\n     );\n \n-    match infcx.at(&cause, param_env).eq(trait_return_ty, impl_return_ty) {\n-        Ok(infer::InferOk { value: (), obligations }) => {\n-            ocx.register_obligations(obligations);\n-        }\n+    match ocx.eq(&cause, param_env, trait_return_ty, impl_return_ty) {\n+        Ok(()) => {}\n         Err(terr) => {\n             let mut diag = struct_span_err!(\n                 tcx.sess,\n@@ -442,10 +440,8 @@ pub fn collect_trait_impl_trait_tys<'tcx>(\n     // the lifetimes of the return type, but do this after unifying just the\n     // return types, since we want to avoid duplicating errors from\n     // `compare_predicate_entailment`.\n-    match infcx.at(&cause, param_env).eq(trait_fty, impl_fty) {\n-        Ok(infer::InferOk { value: (), obligations }) => {\n-            ocx.register_obligations(obligations);\n-        }\n+    match ocx.eq(&cause, param_env, trait_fty, impl_fty) {\n+        Ok(()) => {}\n         Err(terr) => {\n             // This function gets called during `compare_predicate_entailment` when normalizing a\n             // signature that contains RPITIT. When the method signatures don't match, we have to"}, {"sha": "f8346e515d70c57ab0a3e693a65871e4ad4a4c1a", "filename": "compiler/rustc_trait_selection/src/traits/engine.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/b2e6d08e3f88aee01d84412e0ea8369c48e0f419/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b2e6d08e3f88aee01d84412e0ea8369c48e0f419/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fengine.rs?ref=b2e6d08e3f88aee01d84412e0ea8369c48e0f419", "patch": "@@ -125,20 +125,32 @@ impl<'a, 'tcx> ObligationCtxt<'a, 'tcx> {\n             .map(|infer_ok| self.register_infer_ok_obligations(infer_ok))\n     }\n \n+    /// Checks whether `expected` is a subtype of `actual`: `expected <: actual`.\n+    pub fn sub<T: ToTrace<'tcx>>(\n+        &self,\n+        cause: &ObligationCause<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        expected: T,\n+        actual: T,\n+    ) -> Result<(), TypeError<'tcx>> {\n+        self.infcx\n+            .at(cause, param_env)\n+            .sup(expected, actual)\n+            .map(|infer_ok| self.register_infer_ok_obligations(infer_ok))\n+    }\n+\n+    /// Checks whether `expected` is a supertype of `actual`: `expected :> actual`.\n     pub fn sup<T: ToTrace<'tcx>>(\n         &self,\n         cause: &ObligationCause<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n         expected: T,\n         actual: T,\n     ) -> Result<(), TypeError<'tcx>> {\n-        match self.infcx.at(cause, param_env).sup(expected, actual) {\n-            Ok(InferOk { obligations, value: () }) => {\n-                self.register_obligations(obligations);\n-                Ok(())\n-            }\n-            Err(e) => Err(e),\n-        }\n+        self.infcx\n+            .at(cause, param_env)\n+            .sup(expected, actual)\n+            .map(|infer_ok| self.register_infer_ok_obligations(infer_ok))\n     }\n \n     pub fn select_where_possible(&self) -> Vec<FulfillmentError<'tcx>> {"}]}