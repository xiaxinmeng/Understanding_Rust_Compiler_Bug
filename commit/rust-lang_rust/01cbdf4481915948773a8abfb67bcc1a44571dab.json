{"sha": "01cbdf4481915948773a8abfb67bcc1a44571dab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxY2JkZjQ0ODE5MTU5NDg3NzNhOGFiZmI2N2JjYzFhNDQ1NzFkYWI=", "commit": {"author": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2016-01-13T23:19:24Z"}, "committer": {"name": "Oliver Middleton", "email": "olliemail27@gmail.com", "date": "2016-01-13T23:19:24Z"}, "message": "Fix some broken and missing links in the docs", "tree": {"sha": "f8513e53f53e0936f28e909bc442b10020d62151", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8513e53f53e0936f28e909bc442b10020d62151"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01cbdf4481915948773a8abfb67bcc1a44571dab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01cbdf4481915948773a8abfb67bcc1a44571dab", "html_url": "https://github.com/rust-lang/rust/commit/01cbdf4481915948773a8abfb67bcc1a44571dab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01cbdf4481915948773a8abfb67bcc1a44571dab/comments", "author": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ollie27", "id": 7189418, "node_id": "MDQ6VXNlcjcxODk0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/7189418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ollie27", "html_url": "https://github.com/ollie27", "followers_url": "https://api.github.com/users/ollie27/followers", "following_url": "https://api.github.com/users/ollie27/following{/other_user}", "gists_url": "https://api.github.com/users/ollie27/gists{/gist_id}", "starred_url": "https://api.github.com/users/ollie27/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ollie27/subscriptions", "organizations_url": "https://api.github.com/users/ollie27/orgs", "repos_url": "https://api.github.com/users/ollie27/repos", "events_url": "https://api.github.com/users/ollie27/events{/privacy}", "received_events_url": "https://api.github.com/users/ollie27/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c83fef245f1cb2e523c8913b8968c98faec1f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c83fef245f1cb2e523c8913b8968c98faec1f4", "html_url": "https://github.com/rust-lang/rust/commit/d3c83fef245f1cb2e523c8913b8968c98faec1f4"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "8b876df32af5245b4b40a417e3cde5b8e62e0465", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01cbdf4481915948773a8abfb67bcc1a44571dab/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01cbdf4481915948773a8abfb67bcc1a44571dab/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=01cbdf4481915948773a8abfb67bcc1a44571dab", "patch": "@@ -10,7 +10,7 @@\n \n //! Collection types.\n //!\n-//! See [std::collections](../std/collections) for a detailed discussion of\n+//! See [std::collections](../std/collections/index.html) for a detailed discussion of\n //! collections in Rust.\n \n #![crate_name = \"collections\"]"}, {"sha": "766867f284ee1f0c0e5148f7a650b08272501669", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01cbdf4481915948773a8abfb67bcc1a44571dab/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01cbdf4481915948773a8abfb67bcc1a44571dab/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=01cbdf4481915948773a8abfb67bcc1a44571dab", "patch": "@@ -1384,7 +1384,7 @@ impl str {\n     ///\n     /// For iterating from the front, the [`matches()`] method can be used.\n     ///\n-    /// [`matches`]: #method.matches\n+    /// [`matches()`]: #method.matches\n     ///\n     /// # Examples\n     ///"}, {"sha": "a611110a91a674516bfb111e904ae07e817a02f6", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01cbdf4481915948773a8abfb67bcc1a44571dab/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01cbdf4481915948773a8abfb67bcc1a44571dab/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=01cbdf4481915948773a8abfb67bcc1a44571dab", "patch": "@@ -62,6 +62,7 @@ use boxed::Box;\n /// hello.push_str(\"orld!\");\n /// ```\n ///\n+/// [`char`]: ../primitive.char.html\n /// [`push()`]: #method.push\n /// [`push_str()`]: #method.push_str\n ///\n@@ -163,8 +164,8 @@ use boxed::Box;\n /// ```\n ///\n /// [`as_ptr()`]: #method.as_ptr\n-/// [`len()`]: # method.len\n-/// [`capacity()`]: # method.capacity\n+/// [`len()`]: #method.len\n+/// [`capacity()`]: #method.capacity\n ///\n /// If a `String` has enough capacity, adding elements to it will not\n /// re-allocate. For example, consider this program:\n@@ -444,15 +445,15 @@ impl String {\n     /// Converts a slice of bytes to a `String`, including invalid characters.\n     ///\n     /// A string slice ([`&str`]) is made of bytes ([`u8`]), and a slice of\n-    /// bytes ([`&[u8]`]) is made of bytes, so this function converts between\n+    /// bytes ([`&[u8]`][byteslice]) is made of bytes, so this function converts between\n     /// the two. Not all byte slices are valid string slices, however: [`&str`]\n     /// requires that it is valid UTF-8. During this conversion,\n     /// `from_utf8_lossy()` will replace any invalid UTF-8 sequences with\n     /// `U+FFFD REPLACEMENT CHARACTER`, which looks like this: \ufffd\n     ///\n     /// [`&str`]: ../primitive.str.html\n     /// [`u8`]: ../primitive.u8.html\n-    /// [`&[u8]`]: ../primitive.slice.html\n+    /// [byteslice]: ../primitive.slice.html\n     ///\n     /// If you are sure that the byte slice is valid UTF-8, and you don't want\n     /// to incur the overhead of the conversion, there is an unsafe version\n@@ -1311,6 +1312,8 @@ impl FromUtf8Error {\n     ///\n     /// [`Utf8Error`]: ../str/struct.Utf8Error.html\n     /// [`std::str`]: ../str/index.html\n+    /// [`u8`]: ../primitive.u8.html\n+    /// [`&str`]: ../primitive.str.html\n     ///\n     /// # Examples\n     ///"}, {"sha": "e3e783329ec812e003d8d6cd915648eac8c86c86", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01cbdf4481915948773a8abfb67bcc1a44571dab/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01cbdf4481915948773a8abfb67bcc1a44571dab/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=01cbdf4481915948773a8abfb67bcc1a44571dab", "patch": "@@ -1358,7 +1358,7 @@ pub trait Iterator {\n     /// One of the keys to `collect()`'s power is that many things you might\n     /// not think of as 'collections' actually are. For example, a [`String`]\n     /// is a collection of [`char`]s. And a collection of [`Result<T, E>`] can\n-    /// be thought of as single [`Result<Collection<T>, E>`]. See the examples\n+    /// be thought of as single `Result<Collection<T>, E>`. See the examples\n     /// below for more.\n     ///\n     /// [`String`]: ../string/struct.String.html"}, {"sha": "46ecd3a80b5d12e8bc77f855773a888bc16caf36", "filename": "src/librustc_unicode/char.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01cbdf4481915948773a8abfb67bcc1a44571dab/src%2Flibrustc_unicode%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01cbdf4481915948773a8abfb67bcc1a44571dab/src%2Flibrustc_unicode%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_unicode%2Fchar.rs?ref=01cbdf4481915948773a8abfb67bcc1a44571dab", "patch": "@@ -46,8 +46,8 @@ pub use tables::UNICODE_VERSION;\n /// This `struct` is created by the [`to_lowercase()`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`to_lowercase()`]: primitive.char.html#method.escape_to_lowercase\n-/// [`char`]: primitive.char.html\n+/// [`to_lowercase()`]: ../primitive.char.html#method.to_lowercase\n+/// [`char`]: ../primitive.char.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ToLowercase(CaseMappingIter);\n \n@@ -64,8 +64,8 @@ impl Iterator for ToLowercase {\n /// This `struct` is created by the [`to_uppercase()`] method on [`char`]. See\n /// its documentation for more.\n ///\n-/// [`to_uppercase()`]: primitive.char.html#method.escape_to_uppercase\n-/// [`char`]: primitive.char.html\n+/// [`to_uppercase()`]: ../primitive.char.html#method.to_uppercase\n+/// [`char`]: ../primitive.char.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ToUppercase(CaseMappingIter);\n "}, {"sha": "40533117f06c2353d3a6fe888677c9c32b6ddb96", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/01cbdf4481915948773a8abfb67bcc1a44571dab/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01cbdf4481915948773a8abfb67bcc1a44571dab/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=01cbdf4481915948773a8abfb67bcc1a44571dab", "patch": "@@ -112,7 +112,7 @@\n //! ```\n //!\n //! `BufWriter` doesn't add any new ways of writing; it just buffers every call\n-//! to [`write()`][write]:\n+//! to [`write()`][write()]:\n //!\n //! ```\n //! use std::io;\n@@ -134,7 +134,7 @@\n //! # }\n //! ```\n //!\n-//! [write]: trait.Write.html#tymethod.write\n+//! [write()]: trait.Write.html#tymethod.write\n //!\n //! ## Standard input and output\n //!\n@@ -399,7 +399,7 @@ fn read_to_end<R: Read + ?Sized>(r: &mut R, buf: &mut Vec<u8>) -> Result<usize>\n ///\n /// [`File`][file]s implement `Read`:\n ///\n-/// [file]: ../std/fs/struct.File.html\n+/// [file]: ../fs/struct.File.html\n ///\n /// ```\n /// use std::io;\n@@ -459,7 +459,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -501,7 +501,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -540,7 +540,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -600,7 +600,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -643,7 +643,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -682,7 +682,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -718,7 +718,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// #![feature(io)]\n@@ -753,7 +753,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -789,7 +789,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// use std::io;\n@@ -823,7 +823,7 @@ pub trait Read {\n     ///\n     /// [`File`][file]s implement `Read`:\n     ///\n-    /// [file]: ../std/fs/struct.File.html\n+    /// [file]: ../fs/struct.File.html\n     ///\n     /// ```\n     /// #![feature(io)]"}]}