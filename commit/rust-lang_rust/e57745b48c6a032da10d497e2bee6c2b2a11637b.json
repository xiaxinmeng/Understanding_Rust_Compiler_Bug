{"sha": "e57745b48c6a032da10d497e2bee6c2b2a11637b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1Nzc0NWI0OGM2YTAzMmRhMTBkNDk3ZTJiZWU2YzJiMmExMTYzN2I=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-17T22:24:51Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-18T00:03:14Z"}, "message": "option: remove map's copy restriction and add map_consume", "tree": {"sha": "869c910af80662bfcb58f62723e55797fe12c60d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/869c910af80662bfcb58f62723e55797fe12c60d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e57745b48c6a032da10d497e2bee6c2b2a11637b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e57745b48c6a032da10d497e2bee6c2b2a11637b", "html_url": "https://github.com/rust-lang/rust/commit/e57745b48c6a032da10d497e2bee6c2b2a11637b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e57745b48c6a032da10d497e2bee6c2b2a11637b/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06c42b77d39ff0fa2e04b46aa7bc81bef0c1cfac", "url": "https://api.github.com/repos/rust-lang/rust/commits/06c42b77d39ff0fa2e04b46aa7bc81bef0c1cfac", "html_url": "https://github.com/rust-lang/rust/commit/06c42b77d39ff0fa2e04b46aa7bc81bef0c1cfac"}], "stats": {"total": 12, "additions": 10, "deletions": 2}, "files": [{"sha": "0ad0cb6045bc48c280be10959a3e86e2abdc2d4c", "filename": "src/libcore/option.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e57745b48c6a032da10d497e2bee6c2b2a11637b/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e57745b48c6a032da10d497e2bee6c2b2a11637b/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=e57745b48c6a032da10d497e2bee6c2b2a11637b", "patch": "@@ -37,12 +37,20 @@ pure fn expect<T: copy>(opt: option<T>, reason: ~str) -> T {\n     alt opt { some(x) { x } none { fail reason; } }\n }\n \n-pure fn map<T, U: copy>(opt: option<T>, f: fn(T) -> U) -> option<U> {\n+pure fn map<T, U>(opt: option<T>, f: fn(T) -> U) -> option<U> {\n     //! Maps a `some` value from one type to another\n \n     alt opt { some(x) { some(f(x)) } none { none } }\n }\n \n+pure fn map_consume<T, U>(-opt: option<T>, f: fn(-T) -> U) -> option<U> {\n+    /*!\n+     * As `map`, but consumes the option and gives `f` ownership to avoid\n+     * copying.\n+     */\n+    if opt.is_some() { some(f(option::unwrap(opt))) } else { none }\n+}\n+\n pure fn chain<T, U>(opt: option<T>, f: fn(T) -> option<U>) -> option<U> {\n     /*!\n      * Update an optional value by optionally running its content through a\n@@ -128,7 +136,7 @@ impl extensions<T> for option<T> {\n     /// Returns true if the option contains some value\n     pure fn is_some() -> bool { is_some(self) }\n     /// Maps a `some` value from one type to another\n-    pure fn map<U:copy>(f: fn(T) -> U) -> option<U> { map(self, f) }\n+    pure fn map<U>(f: fn(T) -> U) -> option<U> { map(self, f) }\n }\n \n impl extensions<T: copy> for option<T> {"}]}