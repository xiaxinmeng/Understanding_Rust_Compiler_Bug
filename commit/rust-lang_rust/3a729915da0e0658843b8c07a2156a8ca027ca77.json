{"sha": "3a729915da0e0658843b8c07a2156a8ca027ca77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNzI5OTE1ZGEwZTA2NTg4NDNiOGMwN2EyMTU2YThjYTAyN2NhNzc=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T09:35:50Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T11:58:42Z"}, "message": "Use () in reachable_set.", "tree": {"sha": "dd37bb655d52ca20f91afa6c6141bd4d5f29f438", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd37bb655d52ca20f91afa6c6141bd4d5f29f438"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a729915da0e0658843b8c07a2156a8ca027ca77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a729915da0e0658843b8c07a2156a8ca027ca77", "html_url": "https://github.com/rust-lang/rust/commit/3a729915da0e0658843b8c07a2156a8ca027ca77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a729915da0e0658843b8c07a2156a8ca027ca77/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "85a14d70bb2f094f67642ed22f5ffab4a4b9b719", "url": "https://api.github.com/repos/rust-lang/rust/commits/85a14d70bb2f094f67642ed22f5ffab4a4b9b719", "html_url": "https://github.com/rust-lang/rust/commit/85a14d70bb2f094f67642ed22f5ffab4a4b9b719"}], "stats": {"total": 36, "additions": 16, "deletions": 20}, "files": [{"sha": "ba85c70c4a50dd0ba926b1b91432ba0649329265", "filename": "compiler/rustc_codegen_ssa/src/back/symbol_export.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a729915da0e0658843b8c07a2156a8ca027ca77/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a729915da0e0658843b8c07a2156a8ca027ca77/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fsymbol_export.rs?ref=3a729915da0e0658843b8c07a2156a8ca027ca77", "patch": "@@ -4,7 +4,7 @@ use rustc_ast::expand::allocator::ALLOCATOR_METHODS;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::Node;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n@@ -60,7 +60,7 @@ fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<\n         tcx.is_panic_runtime(LOCAL_CRATE) || tcx.is_compiler_builtins(LOCAL_CRATE);\n \n     let mut reachable_non_generics: DefIdMap<_> = tcx\n-        .reachable_set(LOCAL_CRATE)\n+        .reachable_set(())\n         .iter()\n         .filter_map(|&def_id| {\n             // We want to ignore some FFI functions that are not exposed from\n@@ -355,12 +355,8 @@ fn upstream_drop_glue_for_provider<'tcx>(\n     }\n }\n \n-fn is_unreachable_local_definition_provider(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    if let Some(def_id) = def_id.as_local() {\n-        !tcx.reachable_set(LOCAL_CRATE).contains(&def_id)\n-    } else {\n-        bug!(\"is_unreachable_local_definition called with non-local DefId: {:?}\", def_id)\n-    }\n+fn is_unreachable_local_definition_provider(tcx: TyCtxt<'_>, def_id: LocalDefId) -> bool {\n+    !tcx.reachable_set(()).contains(&def_id)\n }\n \n pub fn provide(providers: &mut Providers) {"}, {"sha": "6788be9011654ddf51a832000e7cb6e83a10c2c1", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a729915da0e0658843b8c07a2156a8ca027ca77/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a729915da0e0658843b8c07a2156a8ca027ca77/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=3a729915da0e0658843b8c07a2156a8ca027ca77", "patch": "@@ -855,7 +855,7 @@ rustc_queries! {\n         desc { \"checking for private elements in public interfaces\" }\n     }\n \n-    query reachable_set(_: CrateNum) -> FxHashSet<LocalDefId> {\n+    query reachable_set(_: ()) -> FxHashSet<LocalDefId> {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"reachability\" }\n     }\n@@ -1141,10 +1141,10 @@ rustc_queries! {\n     query is_reachable_non_generic(def_id: DefId) -> bool {\n         desc { |tcx| \"checking whether `{}` is an exported symbol\", tcx.def_path_str(def_id) }\n     }\n-    query is_unreachable_local_definition(def_id: DefId) -> bool {\n+    query is_unreachable_local_definition(def_id: LocalDefId) -> bool {\n         desc { |tcx|\n             \"checking whether `{}` is reachable from outside the crate\",\n-            tcx.def_path_str(def_id),\n+            tcx.def_path_str(def_id.to_def_id()),\n         }\n     }\n "}, {"sha": "541c825416ce2b74ddba7dc333e871dc0f1ec821", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/default.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a729915da0e0658843b8c07a2156a8ca027ca77/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a729915da0e0658843b8c07a2156a8ca027ca77/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fdefault.rs?ref=3a729915da0e0658843b8c07a2156a8ca027ca77", "patch": "@@ -451,7 +451,9 @@ fn mono_item_visibility(\n     let is_generic = instance.substs.non_erasable_generics().next().is_some();\n \n     // Upstream `DefId` instances get different handling than local ones.\n-    if !def_id.is_local() {\n+    let def_id = if let Some(def_id) = def_id.as_local() {\n+        def_id\n+    } else {\n         return if export_generics && is_generic {\n             // If it is a upstream monomorphization and we export generics, we must make\n             // it available to downstream crates.\n@@ -460,7 +462,7 @@ fn mono_item_visibility(\n         } else {\n             Visibility::Hidden\n         };\n-    }\n+    };\n \n     if is_generic {\n         if export_generics {\n@@ -470,7 +472,7 @@ fn mono_item_visibility(\n             } else {\n                 // This instance might be useful in a downstream crate.\n                 *can_be_internalized = false;\n-                default_visibility(tcx, def_id, true)\n+                default_visibility(tcx, def_id.to_def_id(), true)\n             }\n         } else {\n             // We are not exporting generics or the definition is not reachable\n@@ -481,10 +483,10 @@ fn mono_item_visibility(\n         // If this isn't a generic function then we mark this a `Default` if\n         // this is a reachable item, meaning that it's a symbol other crates may\n         // access when they link to us.\n-        if tcx.is_reachable_non_generic(def_id) {\n+        if tcx.is_reachable_non_generic(def_id.to_def_id()) {\n             *can_be_internalized = false;\n             debug_assert!(!is_generic);\n-            return default_visibility(tcx, def_id, false);\n+            return default_visibility(tcx, def_id.to_def_id(), false);\n         }\n \n         // If this isn't reachable then we're gonna tag this with `Hidden`"}, {"sha": "7ceeb4b97db81698f333a1c4c5af1e90c08f7ccc", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3a729915da0e0658843b8c07a2156a8ca027ca77/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a729915da0e0658843b8c07a2156a8ca027ca77/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=3a729915da0e0658843b8c07a2156a8ca027ca77", "patch": "@@ -9,7 +9,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::LOCAL_CRATE;\n-use rustc_hir::def_id::{CrateNum, DefId, LocalDefId};\n+use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::Node;\n@@ -386,9 +386,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n     }\n }\n \n-fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, crate_num: CrateNum) -> FxHashSet<LocalDefId> {\n-    debug_assert!(crate_num == LOCAL_CRATE);\n-\n+fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> FxHashSet<LocalDefId> {\n     let access_levels = &tcx.privacy_access_levels(LOCAL_CRATE);\n \n     let any_library ="}]}