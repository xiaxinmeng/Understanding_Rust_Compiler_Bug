{"sha": "de74dab880447f5227030b261dbd0f2bc4f32dba", "node_id": "C_kwDOAAsO6NoAKGRlNzRkYWI4ODA0NDdmNTIyNzAzMGIyNjFkYmQwZjJiYzRmMzJkYmE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-06T18:48:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-06T18:48:42Z"}, "message": "Auto merge of #110012 - matthiaskrgr:rollup-sgmm5xv, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #109395 (Fix issue when there are multiple candidates for edit_distance_with_substrings)\n - #109755 (Implement support for `GeneratorWitnessMIR` in new solver)\n - #109782 (Don't leave a comma at the start of argument list when removing arguments)\n - #109977 (rustdoc: avoid including line numbers in Google SERP snippets)\n - #109980 (Derive String's PartialEq implementation)\n - #109984 (Remove f32 & f64 from MemDecoder/MemEncoder)\n - #110004 (add `dont_check_failure_status` option in the compiler test)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "b3b2dde0952daf6f13c838deba2c8ac11d20582e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3b2dde0952daf6f13c838deba2c8ac11d20582e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de74dab880447f5227030b261dbd0f2bc4f32dba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de74dab880447f5227030b261dbd0f2bc4f32dba", "html_url": "https://github.com/rust-lang/rust/commit/de74dab880447f5227030b261dbd0f2bc4f32dba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de74dab880447f5227030b261dbd0f2bc4f32dba/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5b8f44e5d5dee0f60cec1729b5a107659779d94", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5b8f44e5d5dee0f60cec1729b5a107659779d94", "html_url": "https://github.com/rust-lang/rust/commit/f5b8f44e5d5dee0f60cec1729b5a107659779d94"}, {"sha": "3473f734bddb895bdbde82d4633432ad8833d95f", "url": "https://api.github.com/repos/rust-lang/rust/commits/3473f734bddb895bdbde82d4633432ad8833d95f", "html_url": "https://github.com/rust-lang/rust/commit/3473f734bddb895bdbde82d4633432ad8833d95f"}], "stats": {"total": 456, "additions": 348, "deletions": 108}, "files": [{"sha": "b02eae19fce103f5ca0059e1865a3178c993972d", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -31,7 +31,7 @@ use rustc_middle::ty::visit::TypeVisitableExt;\n use rustc_middle::ty::{self, IsSuggestable, Ty};\n use rustc_session::Session;\n use rustc_span::symbol::{kw, Ident};\n-use rustc_span::{self, sym, Span};\n+use rustc_span::{self, sym, BytePos, Span};\n use rustc_trait_selection::traits::{self, ObligationCauseCode, SelectionContext};\n \n use std::iter;\n@@ -894,8 +894,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         let mut errors = errors.into_iter().peekable();\n+        let mut only_extras_so_far = errors\n+            .peek()\n+            .map_or(false, |first| matches!(first, Error::Extra(arg_idx) if arg_idx.index() == 0));\n         let mut suggestions = vec![];\n         while let Some(error) = errors.next() {\n+            only_extras_so_far &= matches!(error, Error::Extra(_));\n+\n             match error {\n                 Error::Invalid(provided_idx, expected_idx, compatibility) => {\n                     let (formal_ty, expected_ty) = formal_and_expected_inputs[expected_idx];\n@@ -941,10 +946,34 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         if arg_idx.index() > 0\n                         && let Some((_, prev)) = provided_arg_tys\n                             .get(ProvidedIdx::from_usize(arg_idx.index() - 1)\n-                    ) {\n-                        // Include previous comma\n-                        span = prev.shrink_to_hi().to(span);\n-                    }\n+                        ) {\n+                            // Include previous comma\n+                            span = prev.shrink_to_hi().to(span);\n+                        }\n+\n+                        // Is last argument for deletion in a row starting from the 0-th argument?\n+                        // Then delete the next comma, so we are not left with `f(, ...)`\n+                        //\n+                        //     fn f() {}\n+                        //   - f(0, 1,)\n+                        //   + f()\n+                        if only_extras_so_far\n+                            && errors\n+                                .peek()\n+                                .map_or(true, |next_error| !matches!(next_error, Error::Extra(_)))\n+                        {\n+                            let next = provided_arg_tys\n+                                .get(arg_idx + 1)\n+                                .map(|&(_, sp)| sp)\n+                                .unwrap_or_else(|| {\n+                                    // Subtract one to move before `)`\n+                                    call_expr.span.with_lo(call_expr.span.hi() - BytePos(1))\n+                                });\n+\n+                            // Include next comma\n+                            span = span.until(next);\n+                        }\n+\n                         suggestions.push((span, String::new()));\n \n                         suggestion_text = match suggestion_text {"}, {"sha": "faf0592138bc551035234a439582d5053decf126", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -112,8 +112,6 @@ impl<'a, 'tcx> Encoder for EncodeContext<'a, 'tcx> {\n         emit_i8(i8);\n \n         emit_bool(bool);\n-        emit_f64(f64);\n-        emit_f32(f32);\n         emit_char(char);\n         emit_str(&str);\n         emit_raw_bytes(&[u8]);"}, {"sha": "8ef4a46a733aa60d631ca00df67ac8c1f5ba5d0c", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -511,8 +511,6 @@ macro_rules! implement_ty_decoder {\n                     read_isize -> isize;\n \n                     read_bool -> bool;\n-                    read_f64 -> f64;\n-                    read_f32 -> f32;\n                     read_char -> char;\n                     read_str -> &str;\n                 }"}, {"sha": "30477c7bd4422008113ef3e264de31e84dcb752e", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -1046,8 +1046,6 @@ impl<'a, 'tcx> Encoder for CacheEncoder<'a, 'tcx> {\n         emit_i8(i8);\n \n         emit_bool(bool);\n-        emit_f64(f64);\n-        emit_f32(f32);\n         emit_char(char);\n         emit_str(&str);\n         emit_raw_bytes(&[u8]);"}, {"sha": "53e5c89673652621f6e2cd923e6ab2b46154677d", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -122,18 +122,6 @@ impl Encoder for MemEncoder {\n         self.emit_u8(if v { 1 } else { 0 });\n     }\n \n-    #[inline]\n-    fn emit_f64(&mut self, v: f64) {\n-        let as_u64: u64 = v.to_bits();\n-        self.emit_u64(as_u64);\n-    }\n-\n-    #[inline]\n-    fn emit_f32(&mut self, v: f32) {\n-        let as_u32: u32 = v.to_bits();\n-        self.emit_u32(as_u32);\n-    }\n-\n     #[inline]\n     fn emit_char(&mut self, v: char) {\n         self.emit_u32(v as u32);\n@@ -500,18 +488,6 @@ impl Encoder for FileEncoder {\n         self.emit_u8(if v { 1 } else { 0 });\n     }\n \n-    #[inline]\n-    fn emit_f64(&mut self, v: f64) {\n-        let as_u64: u64 = v.to_bits();\n-        self.emit_u64(as_u64);\n-    }\n-\n-    #[inline]\n-    fn emit_f32(&mut self, v: f32) {\n-        let as_u32: u32 = v.to_bits();\n-        self.emit_u32(as_u32);\n-    }\n-\n     #[inline]\n     fn emit_char(&mut self, v: char) {\n         self.emit_u32(v as u32);\n@@ -642,18 +618,6 @@ impl<'a> Decoder for MemDecoder<'a> {\n         value != 0\n     }\n \n-    #[inline]\n-    fn read_f64(&mut self) -> f64 {\n-        let bits = self.read_u64();\n-        f64::from_bits(bits)\n-    }\n-\n-    #[inline]\n-    fn read_f32(&mut self) -> f32 {\n-        let bits = self.read_u32();\n-        f32::from_bits(bits)\n-    }\n-\n     #[inline]\n     fn read_char(&mut self) -> char {\n         let bits = self.read_u32();"}, {"sha": "527abc23727153e96d7d01788a499c1586d3e659", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -22,6 +22,11 @@ use std::sync::Arc;\n /// be processed or ignored, whichever is appropriate. Then they should provide\n /// a `finish` method that finishes up encoding. If the encoder is fallible,\n /// `finish` should return a `Result` that indicates success or failure.\n+///\n+/// This current does not support `f32` nor `f64`, as they're not needed in any\n+/// serialized data structures. That could be changed, but consider whether it\n+/// really makes sense to store floating-point values at all.\n+/// (If you need it, revert <https://github.com/rust-lang/rust/pull/109984>.)\n pub trait Encoder {\n     // Primitive types:\n     fn emit_usize(&mut self, v: usize);\n@@ -37,8 +42,6 @@ pub trait Encoder {\n     fn emit_i16(&mut self, v: i16);\n     fn emit_i8(&mut self, v: i8);\n     fn emit_bool(&mut self, v: bool);\n-    fn emit_f64(&mut self, v: f64);\n-    fn emit_f32(&mut self, v: f32);\n     fn emit_char(&mut self, v: char);\n     fn emit_str(&mut self, v: &str);\n     fn emit_raw_bytes(&mut self, s: &[u8]);\n@@ -58,6 +61,11 @@ pub trait Encoder {\n // top-level invocation would also just panic on failure. Switching to\n // infallibility made things faster and lots of code a little simpler and more\n // concise.\n+///\n+/// This current does not support `f32` nor `f64`, as they're not needed in any\n+/// serialized data structures. That could be changed, but consider whether it\n+/// really makes sense to store floating-point values at all.\n+/// (If you need it, revert <https://github.com/rust-lang/rust/pull/109984>.)\n pub trait Decoder {\n     // Primitive types:\n     fn read_usize(&mut self) -> usize;\n@@ -73,8 +81,6 @@ pub trait Decoder {\n     fn read_i16(&mut self) -> i16;\n     fn read_i8(&mut self) -> i8;\n     fn read_bool(&mut self) -> bool;\n-    fn read_f64(&mut self) -> f64;\n-    fn read_f32(&mut self) -> f32;\n     fn read_char(&mut self) -> char;\n     fn read_str(&mut self) -> &str;\n     fn read_raw_bytes(&mut self, len: usize) -> &[u8];\n@@ -143,8 +149,6 @@ direct_serialize_impls! {\n     i64 emit_i64 read_i64,\n     i128 emit_i128 read_i128,\n \n-    f32 emit_f32 read_f32,\n-    f64 emit_f64 read_f64,\n     bool emit_bool read_bool,\n     char emit_char read_char\n }"}, {"sha": "5e7dd18aa84086100b39ef4d8bec4533a63724bd", "filename": "compiler/rustc_serialize/tests/opaque.rs", "status": "modified", "additions": 4, "deletions": 28, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Ftests%2Fopaque.rs?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -22,8 +22,6 @@ struct Struct {\n \n     l: char,\n     m: String,\n-    n: f32,\n-    o: f64,\n     p: bool,\n     q: Option<u32>,\n }\n@@ -119,24 +117,6 @@ fn test_bool() {\n     check_round_trip(vec![false, true, true, false, false]);\n }\n \n-#[test]\n-fn test_f32() {\n-    let mut vec = vec![];\n-    for i in -100..100 {\n-        vec.push((i as f32) / 3.0);\n-    }\n-    check_round_trip(vec);\n-}\n-\n-#[test]\n-fn test_f64() {\n-    let mut vec = vec![];\n-    for i in -100..100 {\n-        vec.push((i as f64) / 3.0);\n-    }\n-    check_round_trip(vec);\n-}\n-\n #[test]\n fn test_char() {\n     let vec = vec!['a', 'b', 'c', 'd', 'A', 'X', ' ', '#', '\u00d6', '\u00c4', '\u00b5', '\u20ac'];\n@@ -200,8 +180,6 @@ fn test_struct() {\n \n         l: 'x',\n         m: \"abc\".to_string(),\n-        n: 20.5,\n-        o: 21.5,\n         p: false,\n         q: None,\n     }]);\n@@ -222,8 +200,6 @@ fn test_struct() {\n \n         l: 'y',\n         m: \"def\".to_string(),\n-        n: -20.5,\n-        o: -21.5,\n         p: true,\n         q: Some(1234567),\n     }]);\n@@ -232,15 +208,15 @@ fn test_struct() {\n #[derive(PartialEq, Clone, Debug, Encodable, Decodable)]\n enum Enum {\n     Variant1,\n-    Variant2(usize, f32),\n+    Variant2(usize, u32),\n     Variant3 { a: i32, b: char, c: bool },\n }\n \n #[test]\n fn test_enum() {\n     check_round_trip(vec![\n         Enum::Variant1,\n-        Enum::Variant2(1, 2.5),\n+        Enum::Variant2(1, 25),\n         Enum::Variant3 { a: 3, b: 'b', c: false },\n         Enum::Variant3 { a: -4, b: 'f', c: true },\n     ]);\n@@ -269,8 +245,8 @@ fn test_hash_map() {\n \n #[test]\n fn test_tuples() {\n-    check_round_trip(vec![('x', (), false, 0.5f32)]);\n-    check_round_trip(vec![(9i8, 10u16, 1.5f64)]);\n+    check_round_trip(vec![('x', (), false, 5u32)]);\n+    check_round_trip(vec![(9i8, 10u16, 15i64)]);\n     check_round_trip(vec![(-12i16, 11u8, 12usize)]);\n     check_round_trip(vec![(1234567isize, 100000000000000u64, 99999999999999i64)]);\n     check_round_trip(vec![(String::new(), \"some string\".to_string())]);"}, {"sha": "9fe9e3a7a5fd22cd2feafc6800e48e47304f4168", "filename": "compiler/rustc_span/src/edit_distance.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_span%2Fsrc%2Fedit_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_span%2Fsrc%2Fedit_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fedit_distance.rs?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -174,10 +174,10 @@ pub fn find_best_match_for_name(\n fn find_best_match_for_name_impl(\n     use_substring_score: bool,\n     candidates: &[Symbol],\n-    lookup: Symbol,\n+    lookup_symbol: Symbol,\n     dist: Option<usize>,\n ) -> Option<Symbol> {\n-    let lookup = lookup.as_str();\n+    let lookup = lookup_symbol.as_str();\n     let lookup_uppercase = lookup.to_uppercase();\n \n     // Priority of matches:\n@@ -190,6 +190,8 @@ fn find_best_match_for_name_impl(\n \n     let mut dist = dist.unwrap_or_else(|| cmp::max(lookup.len(), 3) / 3);\n     let mut best = None;\n+    // store the candidates with the same distance, only for `use_substring_score` current.\n+    let mut next_candidates = vec![];\n     for c in candidates {\n         match if use_substring_score {\n             edit_distance_with_substrings(lookup, c.as_str(), dist)\n@@ -198,12 +200,36 @@ fn find_best_match_for_name_impl(\n         } {\n             Some(0) => return Some(*c),\n             Some(d) => {\n-                dist = d - 1;\n+                if use_substring_score {\n+                    if d < dist {\n+                        dist = d;\n+                        next_candidates.clear();\n+                    } else {\n+                        // `d == dist` here, we need to store the candidates with the same distance\n+                        // so we won't decrease the distance in the next loop.\n+                    }\n+                    next_candidates.push(*c);\n+                } else {\n+                    dist = d - 1;\n+                }\n                 best = Some(*c);\n             }\n             None => {}\n         }\n     }\n+\n+    // We have a tie among several candidates, try to select the best among them ignoring substrings.\n+    // For example, the candidates list `force_capture`, `capture`, and user inputed `forced_capture`,\n+    // we select `force_capture` with a extra round of edit distance calculation.\n+    if next_candidates.len() > 1 {\n+        debug_assert!(use_substring_score);\n+        best = find_best_match_for_name_impl(\n+            false,\n+            &next_candidates,\n+            lookup_symbol,\n+            Some(lookup.len()),\n+        );\n+    }\n     if best.is_some() {\n         return best;\n     }"}, {"sha": "4a3b7e42bac15204bfb6f3b4fa5f0cf4d138e35e", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 46, "deletions": 3, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -1,7 +1,9 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{def_id::DefId, Movability, Mutability};\n use rustc_infer::traits::query::NoSolution;\n-use rustc_middle::ty::{self, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable};\n+use rustc_middle::ty::{\n+    self, Ty, TyCtxt, TypeFoldable, TypeFolder, TypeSuperFoldable, TypeVisitableExt,\n+};\n \n use crate::solve::EvalCtxt;\n \n@@ -60,7 +62,16 @@ pub(super) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n \n         ty::GeneratorWitness(types) => Ok(ecx.instantiate_binder_with_placeholders(types).to_vec()),\n \n-        ty::GeneratorWitnessMIR(..) => todo!(),\n+        ty::GeneratorWitnessMIR(def_id, substs) => Ok(ecx\n+            .tcx()\n+            .generator_hidden_types(def_id)\n+            .map(|bty| {\n+                ecx.instantiate_binder_with_placeholders(replace_erased_lifetimes_with_bound_vars(\n+                    tcx,\n+                    bty.subst(tcx, substs),\n+                ))\n+            })\n+            .collect()),\n \n         // For `PhantomData<T>`, we pass `T`.\n         ty::Adt(def, substs) if def.is_phantom_data() => Ok(vec![substs.type_at(0)]),\n@@ -76,6 +87,29 @@ pub(super) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n     }\n }\n \n+fn replace_erased_lifetimes_with_bound_vars<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    ty: Ty<'tcx>,\n+) -> ty::Binder<'tcx, Ty<'tcx>> {\n+    debug_assert!(!ty.has_late_bound_regions());\n+    let mut counter = 0;\n+    let ty = tcx.fold_regions(ty, |mut r, current_depth| {\n+        if let ty::ReErased = r.kind() {\n+            let br = ty::BoundRegion {\n+                var: ty::BoundVar::from_u32(counter),\n+                kind: ty::BrAnon(counter, None),\n+            };\n+            counter += 1;\n+            r = tcx.mk_re_late_bound(current_depth, br);\n+        }\n+        r\n+    });\n+    let bound_vars = tcx.mk_bound_variable_kinds_from_iter(\n+        (0..counter).map(|i| ty::BoundVariableKind::Region(ty::BrAnon(i, None))),\n+    );\n+    ty::Binder::bind_with_vars(ty, bound_vars)\n+}\n+\n pub(super) fn instantiate_constituent_tys_for_sized_trait<'tcx>(\n     ecx: &EvalCtxt<'_, 'tcx>,\n     ty: Ty<'tcx>,\n@@ -178,7 +212,16 @@ pub(super) fn instantiate_constituent_tys_for_copy_clone_trait<'tcx>(\n \n         ty::GeneratorWitness(types) => Ok(ecx.instantiate_binder_with_placeholders(types).to_vec()),\n \n-        ty::GeneratorWitnessMIR(..) => todo!(),\n+        ty::GeneratorWitnessMIR(def_id, substs) => Ok(ecx\n+            .tcx()\n+            .generator_hidden_types(def_id)\n+            .map(|bty| {\n+                ecx.instantiate_binder_with_placeholders(replace_erased_lifetimes_with_bound_vars(\n+                    ecx.tcx(),\n+                    bty.subst(ecx.tcx(), substs),\n+                ))\n+            })\n+            .collect()),\n     }\n }\n "}, {"sha": "c1cd3c74ab6764cfd5b8fbf2cecf4dc626789a25", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -359,7 +359,7 @@ use crate::vec::Vec;\n /// [Deref]: core::ops::Deref \"ops::Deref\"\n /// [`Deref`]: core::ops::Deref \"ops::Deref\"\n /// [`as_str()`]: String::as_str\n-#[derive(PartialOrd, Eq, Ord)]\n+#[derive(PartialEq, PartialOrd, Eq, Ord)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[cfg_attr(not(test), lang = \"String\")]\n pub struct String {\n@@ -2207,14 +2207,6 @@ impl<'a, 'b> Pattern<'a> for &'b String {\n     }\n }\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl PartialEq for String {\n-    #[inline]\n-    fn eq(&self, other: &String) -> bool {\n-        PartialEq::eq(&self[..], &other[..])\n-    }\n-}\n-\n macro_rules! impl_eq {\n     ($lhs:ty, $rhs: ty) => {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "9df1935256730c524696e8ddd293b1e6aaf0a339", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -352,7 +352,7 @@ pre.item-decl {\n .source .content pre {\n \tpadding: 20px;\n }\n-.rustdoc.source .example-wrap > pre.src-line-numbers  {\n+.rustdoc.source .example-wrap pre.src-line-numbers  {\n \tpadding: 20px 0 20px 4px;\n }\n \n@@ -537,17 +537,17 @@ ul.block, .block li {\n \tmargin-bottom: 0px;\n }\n \n-.rustdoc .example-wrap > pre {\n+.rustdoc .example-wrap pre {\n \tmargin: 0;\n \tflex-grow: 1;\n }\n \n-.rustdoc:not(.source) .example-wrap > pre {\n+.rustdoc:not(.source) .example-wrap pre {\n \toverflow: auto hidden;\n }\n \n-.rustdoc .example-wrap > pre.example-line-numbers,\n-.rustdoc .example-wrap > pre.src-line-numbers {\n+.rustdoc .example-wrap pre.example-line-numbers,\n+.rustdoc .example-wrap pre.src-line-numbers {\n \tflex-grow: 0;\n \tmin-width: fit-content; /* prevent collapsing into nothing in truncated scraped examples */\n \toverflow: initial;\n@@ -558,7 +558,7 @@ ul.block, .block li {\n \tcolor: var(--src-line-numbers-span-color);\n }\n \n-.rustdoc .example-wrap > pre.src-line-numbers {\n+.rustdoc .example-wrap pre.src-line-numbers {\n \tpadding: 14px 0;\n }\n .src-line-numbers a, .src-line-numbers span {\n@@ -706,7 +706,7 @@ h2.small-section-header > .anchor {\n }\n \n .main-heading a:hover,\n-.example-wrap > .rust a:hover,\n+.example-wrap .rust a:hover,\n .all-items a:hover,\n .docblock a:not(.test-arrow):not(.scrape-help):not(.tooltip):hover,\n .docblock-short a:not(.test-arrow):not(.scrape-help):not(.tooltip):hover,"}, {"sha": "42d01277db2c2f68a55c11fac0d66a1aa011f1d4", "filename": "src/librustdoc/html/templates/source.html", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fsource.html", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fsource.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Ftemplates%2Fsource.html?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -1,13 +1,15 @@\n <div class=\"example-wrap\"> {# #}\n-    <pre class=\"src-line-numbers\">\n+    {# https://developers.google.com/search/docs/crawling-indexing/robots-meta-tag#data-nosnippet-attr\n+       Do not show \"1 2 3 4 5 ...\" in web search results. #}\n+    <div data-nosnippet><pre class=\"src-line-numbers\">\n         {% for line in lines.clone() %}\n             {% if embedded %}\n                 <span>{{line|safe}}</span>\n             {%~ else %}\n                 <a href=\"#{{line|safe}}\" id=\"{{line|safe}}\">{{line|safe}}</a>\n             {%~ endif %}\n         {% endfor %}\n-    </pre> {# #}\n+    </pre></div> {# #}\n     <pre class=\"rust\"> {# #}\n         <code>\n             {% if needs_expansion %}"}, {"sha": "735351fbf605fb02df1df7a5329902154e0e989e", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -144,6 +144,8 @@ pub struct TestProps {\n     pub normalize_stdout: Vec<(String, String)>,\n     pub normalize_stderr: Vec<(String, String)>,\n     pub failure_status: i32,\n+    // For UI tests, allows compiler to exit with arbitrary failure status\n+    pub dont_check_failure_status: bool,\n     // Whether or not `rustfix` should apply the `CodeSuggestion`s of this test and compile the\n     // resulting Rust code.\n     pub run_rustfix: bool,\n@@ -186,6 +188,7 @@ mod directives {\n     pub const CHECK_TEST_LINE_NUMBERS_MATCH: &'static str = \"check-test-line-numbers-match\";\n     pub const IGNORE_PASS: &'static str = \"ignore-pass\";\n     pub const FAILURE_STATUS: &'static str = \"failure-status\";\n+    pub const DONT_CHECK_FAILURE_STATUS: &'static str = \"dont-check-failure-status\";\n     pub const RUN_RUSTFIX: &'static str = \"run-rustfix\";\n     pub const RUSTFIX_ONLY_MACHINE_APPLICABLE: &'static str = \"rustfix-only-machine-applicable\";\n     pub const ASSEMBLY_OUTPUT: &'static str = \"assembly-output\";\n@@ -233,6 +236,7 @@ impl TestProps {\n             normalize_stdout: vec![],\n             normalize_stderr: vec![],\n             failure_status: -1,\n+            dont_check_failure_status: false,\n             run_rustfix: false,\n             rustfix_only_machine_applicable: false,\n             assembly_output: None,\n@@ -395,6 +399,12 @@ impl TestProps {\n                     self.failure_status = code;\n                 }\n \n+                config.set_name_directive(\n+                    ln,\n+                    DONT_CHECK_FAILURE_STATUS,\n+                    &mut self.dont_check_failure_status,\n+                );\n+\n                 config.set_name_directive(ln, RUN_RUSTFIX, &mut self.run_rustfix);\n                 config.set_name_directive(\n                     ln,"}, {"sha": "a35284f05b540d38d0dbadf7c8c706a499f8146c", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -310,7 +310,9 @@ impl<'test> TestCx<'test> {\n                 );\n             }\n \n-            self.check_correct_failure_status(proc_res);\n+            if !self.props.dont_check_failure_status {\n+                self.check_correct_failure_status(proc_res);\n+            }\n         }\n     }\n "}, {"sha": "143ddf99586f0ae1bb3bcdc7332d27273c39a95e", "filename": "tests/ui/argument-suggestions/issue-109425.fixed", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Fargument-suggestions%2Fissue-109425.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Fargument-suggestions%2Fissue-109425.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-109425.fixed?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+fn f() {}\n+fn i(_: u32) {}\n+fn is(_: u32, _: &str) {}\n+fn s(_: &str) {}\n+\n+fn main() {\n+    // code             expected suggestion\n+    f();        // f()\n+    //~^ error: this function takes 0 arguments but 2 arguments were supplied\n+    i(0,);     // i(0,)\n+    //~^ error: this function takes 1 argument but 3 arguments were supplied\n+    i(0);      // i(0)\n+    //~^ error: this function takes 1 argument but 3 arguments were supplied\n+    is(0, \"\"); // is(0, \"\")\n+    //~^ error: this function takes 2 arguments but 4 arguments were supplied\n+    s(\"\");     // s(\"\")\n+    //~^ error: this function takes 1 argument but 3 arguments were supplied\n+}"}, {"sha": "a845c419555c20e14dc0a59a42cdc98405ce8731", "filename": "tests/ui/argument-suggestions/issue-109425.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Fargument-suggestions%2Fissue-109425.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Fargument-suggestions%2Fissue-109425.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-109425.rs?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -0,0 +1,20 @@\n+// run-rustfix\n+\n+fn f() {}\n+fn i(_: u32) {}\n+fn is(_: u32, _: &str) {}\n+fn s(_: &str) {}\n+\n+fn main() {\n+    // code             expected suggestion\n+    f(0, 1,);        // f()\n+    //~^ error: this function takes 0 arguments but 2 arguments were supplied\n+    i(0, 1, 2,);     // i(0,)\n+    //~^ error: this function takes 1 argument but 3 arguments were supplied\n+    i(0, 1, 2);      // i(0)\n+    //~^ error: this function takes 1 argument but 3 arguments were supplied\n+    is(0, 1, 2, \"\"); // is(0, \"\")\n+    //~^ error: this function takes 2 arguments but 4 arguments were supplied\n+    s(0, 1, \"\");     // s(\"\")\n+    //~^ error: this function takes 1 argument but 3 arguments were supplied\n+}"}, {"sha": "1514f1cb487ef95ff1926db099982d0660414747", "filename": "tests/ui/argument-suggestions/issue-109425.stderr", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Fargument-suggestions%2Fissue-109425.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Fargument-suggestions%2Fissue-109425.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fargument-suggestions%2Fissue-109425.stderr?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -0,0 +1,98 @@\n+error[E0061]: this function takes 0 arguments but 2 arguments were supplied\n+  --> $DIR/issue-109425.rs:10:5\n+   |\n+LL |     f(0, 1,);        // f()\n+   |     ^ -  - unexpected argument of type `{integer}`\n+   |       |\n+   |       unexpected argument of type `{integer}`\n+   |\n+note: function defined here\n+  --> $DIR/issue-109425.rs:3:4\n+   |\n+LL | fn f() {}\n+   |    ^\n+help: remove the extra arguments\n+   |\n+LL -     f(0, 1,);        // f()\n+LL +     f();        // f()\n+   |\n+\n+error[E0061]: this function takes 1 argument but 3 arguments were supplied\n+  --> $DIR/issue-109425.rs:12:5\n+   |\n+LL |     i(0, 1, 2,);     // i(0,)\n+   |     ^    -  - unexpected argument of type `{integer}`\n+   |          |\n+   |          unexpected argument of type `{integer}`\n+   |\n+note: function defined here\n+  --> $DIR/issue-109425.rs:4:4\n+   |\n+LL | fn i(_: u32) {}\n+   |    ^ ------\n+help: remove the extra arguments\n+   |\n+LL -     i(0, 1, 2,);     // i(0,)\n+LL +     i(0,);     // i(0,)\n+   |\n+\n+error[E0061]: this function takes 1 argument but 3 arguments were supplied\n+  --> $DIR/issue-109425.rs:14:5\n+   |\n+LL |     i(0, 1, 2);      // i(0)\n+   |     ^    -  - unexpected argument of type `{integer}`\n+   |          |\n+   |          unexpected argument of type `{integer}`\n+   |\n+note: function defined here\n+  --> $DIR/issue-109425.rs:4:4\n+   |\n+LL | fn i(_: u32) {}\n+   |    ^ ------\n+help: remove the extra arguments\n+   |\n+LL -     i(0, 1, 2);      // i(0)\n+LL +     i(0);      // i(0)\n+   |\n+\n+error[E0061]: this function takes 2 arguments but 4 arguments were supplied\n+  --> $DIR/issue-109425.rs:16:5\n+   |\n+LL |     is(0, 1, 2, \"\"); // is(0, \"\")\n+   |     ^^    -  - unexpected argument of type `{integer}`\n+   |           |\n+   |           unexpected argument of type `{integer}`\n+   |\n+note: function defined here\n+  --> $DIR/issue-109425.rs:5:4\n+   |\n+LL | fn is(_: u32, _: &str) {}\n+   |    ^^ ------  -------\n+help: remove the extra arguments\n+   |\n+LL -     is(0, 1, 2, \"\"); // is(0, \"\")\n+LL +     is(0, \"\"); // is(0, \"\")\n+   |\n+\n+error[E0061]: this function takes 1 argument but 3 arguments were supplied\n+  --> $DIR/issue-109425.rs:18:5\n+   |\n+LL |     s(0, 1, \"\");     // s(\"\")\n+   |     ^ -  - unexpected argument of type `{integer}`\n+   |       |\n+   |       unexpected argument of type `{integer}`\n+   |\n+note: function defined here\n+  --> $DIR/issue-109425.rs:6:4\n+   |\n+LL | fn s(_: &str) {}\n+   |    ^ -------\n+help: remove the extra arguments\n+   |\n+LL -     s(0, 1, \"\");     // s(\"\")\n+LL +     s(\"\");     // s(\"\")\n+   |\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0061`."}, {"sha": "2f1cffa2fa90721bac14994ce85eb554dcea02ea", "filename": "tests/ui/recursion/issue-95134.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Frecursion%2Fissue-95134.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Frecursion%2Fissue-95134.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frecursion%2Fissue-95134.rs?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -1,7 +1,7 @@\n // build-fail\n // known-bug: #95134\n // compile-flags: -Copt-level=0\n-// failure-status: 101\n+// dont-check-failure-status\n // dont-check-compiler-stderr\n \n pub fn encode_num<Writer: ExampleWriter>(n: u32, mut writer: Writer) -> Result<(), Writer::Error> {"}, {"sha": "1947b16a32e6e70e0d6290361dd63e7d68ad9e38", "filename": "tests/ui/suggestions/issue-109291.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Fsuggestions%2Fissue-109291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Fsuggestions%2Fissue-109291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-109291.rs?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    println!(\"Custom backtrace: {}\", std::backtrace::Backtrace::forced_capture());\n+    //~^ ERROR no function or associated item name\n+}"}, {"sha": "4ef5948d9bf2b37aefe61636a4cd977b12290b4f", "filename": "tests/ui/suggestions/issue-109291.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Fsuggestions%2Fissue-109291.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Fsuggestions%2Fissue-109291.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-109291.stderr?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -0,0 +1,12 @@\n+error[E0599]: no function or associated item named `forced_capture` found for struct `Backtrace` in the current scope\n+  --> $DIR/issue-109291.rs:2:65\n+   |\n+LL |     println!(\"Custom backtrace: {}\", std::backtrace::Backtrace::forced_capture());\n+   |                                                                 ^^^^^^^^^^^^^^\n+   |                                                                 |\n+   |                                                                 function or associated item not found in `Backtrace`\n+   |                                                                 help: there is an associated function with a similar name: `force_capture`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "d4956872a399dc0ea95ff0ac845c0bf6175cbdf7", "filename": "tests/ui/suggestions/issue-109396.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Fsuggestions%2Fissue-109396.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Fsuggestions%2Fissue-109396.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fissue-109396.stderr?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -25,7 +25,7 @@ note: function defined here\n help: remove the extra arguments\n    |\n LL -             file.as_raw_fd(),\n-LL +             ,\n+LL +             );\n    |\n \n error: aborting due to 2 previous errors"}, {"sha": "6a926534e079b86622da3b93617306fb6a6fe74e", "filename": "tests/ui/traits/new-solver/auto-with-drop_tracking_mir.fail.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.fail.stderr?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: `impl Future<Output = ()>` cannot be sent between threads safely\n+  --> $DIR/auto-with-drop_tracking_mir.rs:24:13\n+   |\n+LL |     is_send(foo());\n+   |     ------- ^^^^^ `impl Future<Output = ()>` cannot be sent between threads safely\n+   |     |\n+   |     required by a bound introduced by this call\n+   |\n+   = help: the trait `Send` is not implemented for `impl Future<Output = ()>`\n+note: required by a bound in `is_send`\n+  --> $DIR/auto-with-drop_tracking_mir.rs:23:24\n+   |\n+LL |     fn is_send(_: impl Send) {}\n+   |                        ^^^^ required by this bound in `is_send`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "a5db7c4636b318be9853045cfffe4133b0de1681", "filename": "tests/ui/traits/new-solver/auto-with-drop_tracking_mir.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de74dab880447f5227030b261dbd0f2bc4f32dba/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Fnew-solver%2Fauto-with-drop_tracking_mir.rs?ref=de74dab880447f5227030b261dbd0f2bc4f32dba", "patch": "@@ -0,0 +1,26 @@\n+// compile-flags: -Ztrait-solver=next -Zdrop-tracking-mir\n+// edition: 2021\n+// revisions: pass fail\n+//[pass] check-pass\n+\n+#![feature(negative_impls)]\n+\n+struct NotSync;\n+impl !Sync for NotSync {}\n+\n+async fn foo() {\n+    #[cfg(pass)]\n+    let x = &();\n+    #[cfg(fail)]\n+    let x = &NotSync;\n+    bar().await;\n+    drop(x);\n+}\n+\n+async fn bar() {}\n+\n+fn main() {\n+    fn is_send(_: impl Send) {}\n+    is_send(foo());\n+    //[fail]~^ ERROR `impl Future<Output = ()>` cannot be sent between threads safely\n+}"}]}