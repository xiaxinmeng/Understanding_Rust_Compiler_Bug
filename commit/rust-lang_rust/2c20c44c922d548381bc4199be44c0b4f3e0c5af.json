{"sha": "2c20c44c922d548381bc4199be44c0b4f3e0c5af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjMjBjNDRjOTIyZDU0ODM4MWJjNDE5OWJlNDRjMGI0ZjNlMGM1YWY=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-25T21:04:51Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-04-25T21:04:51Z"}, "message": "Split `CommonTypes` into `CommonTypes` and `CommonLifetimes`", "tree": {"sha": "91fb35bdcbbb20ebd44eef5077a522f161d10799", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91fb35bdcbbb20ebd44eef5077a522f161d10799"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c20c44c922d548381bc4199be44c0b4f3e0c5af", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c20c44c922d548381bc4199be44c0b4f3e0c5af", "html_url": "https://github.com/rust-lang/rust/commit/2c20c44c922d548381bc4199be44c0b4f3e0c5af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c20c44c922d548381bc4199be44c0b4f3e0c5af/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd31c392f286d61caac0babee68c900cdaa8b504", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd31c392f286d61caac0babee68c900cdaa8b504", "html_url": "https://github.com/rust-lang/rust/commit/bd31c392f286d61caac0babee68c900cdaa8b504"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "6756c50e7dd5b191f7ac06798f23315f0b2acdb2", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/2c20c44c922d548381bc4199be44c0b4f3e0c5af/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c20c44c922d548381bc4199be44c0b4f3e0c5af/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=2c20c44c922d548381bc4199be44c0b4f3e0c5af", "patch": "@@ -223,7 +223,9 @@ pub struct CommonTypes<'tcx> {\n     /// a trait object, and which gets removed in `ExistentialTraitRef`.\n     /// This type must not appear anywhere in other converted types.\n     pub trait_object_dummy_self: Ty<'tcx>,\n+}\n \n+pub struct CommonLifetimes<'tcx> {\n     pub re_empty: Region<'tcx>,\n     pub re_static: Region<'tcx>,\n     pub re_erased: Region<'tcx>,\n@@ -933,11 +935,6 @@ EnumLiftImpl! {\n impl<'tcx> CommonTypes<'tcx> {\n     fn new(interners: &CtxtInterners<'tcx>) -> CommonTypes<'tcx> {\n         let mk = |sty| CtxtInterners::intern_ty(interners, interners, sty);\n-        let mk_region = |r| {\n-            interners.region.borrow_mut().intern(r, |r| {\n-                Interned(interners.arena.alloc(r))\n-            }).0\n-        };\n \n         CommonTypes {\n             unit: mk(Tuple(List::empty())),\n@@ -961,10 +958,22 @@ impl<'tcx> CommonTypes<'tcx> {\n             f64: mk(Float(ast::FloatTy::F64)),\n \n             trait_object_dummy_self: mk(Infer(ty::FreshTy(0))),\n+        }\n+    }\n+}\n \n-            re_empty: mk_region(RegionKind::ReEmpty),\n-            re_static: mk_region(RegionKind::ReStatic),\n-            re_erased: mk_region(RegionKind::ReErased),\n+impl<'tcx> CommonLifetimes<'tcx> {\n+    fn new(interners: &CtxtInterners<'tcx>) -> CommonLifetimes<'tcx> {\n+        let mk = |r| {\n+            interners.region.borrow_mut().intern(r, |r| {\n+                Interned(interners.arena.alloc(r))\n+            }).0\n+        };\n+\n+        CommonLifetimes {\n+            re_empty: mk(RegionKind::ReEmpty),\n+            re_static: mk(RegionKind::ReStatic),\n+            re_erased: mk(RegionKind::ReErased),\n         }\n     }\n }\n@@ -1016,6 +1025,9 @@ pub struct GlobalCtxt<'tcx> {\n     /// Common types, pre-interned for your convenience.\n     pub types: CommonTypes<'tcx>,\n \n+    /// Common lifetimes, pre-interned for your convenience.\n+    pub lifetimes: CommonLifetimes<'tcx>,\n+\n     /// Map indicating what traits are in scope for places where this\n     /// is relevant; generated by resolve.\n     trait_map: FxHashMap<DefIndex,\n@@ -1214,6 +1226,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         });\n         let interners = CtxtInterners::new(&arenas.interner);\n         let common_types = CommonTypes::new(&interners);\n+        let common_lifetimes = CommonLifetimes::new(&interners);\n         let dep_graph = hir.dep_graph.clone();\n         let max_cnum = cstore.crates_untracked().iter().map(|c| c.as_usize()).max().unwrap_or(0);\n         let mut providers = IndexVec::from_elem_n(extern_providers, max_cnum + 1);\n@@ -1268,6 +1281,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             global_interners: interners,\n             dep_graph,\n             types: common_types,\n+            lifetimes: common_lifetimes,\n             trait_map,\n             export_map: resolutions.export_map.into_iter().map(|(k, v)| {\n                 let exports: Vec<_> = v.into_iter().map(|e| {\n@@ -2486,7 +2500,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     #[inline]\n     pub fn mk_static_str(self) -> Ty<'tcx> {\n-        self.mk_imm_ref(self.types.re_static, self.mk_str())\n+        self.mk_imm_ref(self.lifetimes.re_static, self.mk_str())\n     }\n \n     #[inline]"}]}