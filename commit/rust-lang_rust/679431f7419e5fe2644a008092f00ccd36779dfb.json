{"sha": "679431f7419e5fe2644a008092f00ccd36779dfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3OTQzMWY3NDE5ZTVmZTI2NDRhMDA4MDkyZjAwY2NkMzY3NzlkZmI=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-04T14:15:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-04T14:15:24Z"}, "message": "Rollup merge of #71038 - lcnr:dyn_trait_structural_match, r=pnkfelix\n\nforbid `dyn Trait` in patterns\n\nDo not allow `&dyn Trait` as a generic const parameters.\nThis also changes dyn trait in pattern from ICE to error.\n\ncloses #63322\ncloses #70972\n\nr? @eddyb", "tree": {"sha": "d91533da39909ebb9d2111dd8ee23d9c5235fe4d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d91533da39909ebb9d2111dd8ee23d9c5235fe4d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/679431f7419e5fe2644a008092f00ccd36779dfb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJesCN9CRBK7hj4Ov3rIwAAdHIIABr9QUJFHmenWLXwbFHkluFP\n5bZrb8OJH5tuvbY6SEPlv+nrmzFfaoqHl3rCZjA/IEs3Q+KwcE8QPz9bkUSRGx3o\nW2k6cV4/LEo1LSG54EAQcvEGKicjsCWvxDPplK0lE/SGOmKnrmn47U8m71UlD3eY\nKp4isAVB22TMXmCATleMHxrA/avw0hlTx/4MIlF54XrxLWasSGDiwij75PIV51UF\ndzrYVC8ChmshsCX21gw0IIWOWHz5CzAPDXYYF74L0hLHLpg/pGiCFKUseLPon6Zr\n5BEy72c5Unp/BDvQP7OLLsHX0SP4dJ/Id1Y3mu97uH4tktq2lu+wbpN5qsBHuUI=\n=PV1k\n-----END PGP SIGNATURE-----\n", "payload": "tree d91533da39909ebb9d2111dd8ee23d9c5235fe4d\nparent 6318d24ad8440fa30428b405be1174478e9536e3\nparent 2f5c0f59a96612667ca6aeb40b6e40259f861e7e\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588601724 +0200\ncommitter GitHub <noreply@github.com> 1588601724 +0200\n\nRollup merge of #71038 - lcnr:dyn_trait_structural_match, r=pnkfelix\n\nforbid `dyn Trait` in patterns\n\nDo not allow `&dyn Trait` as a generic const parameters.\nThis also changes dyn trait in pattern from ICE to error.\n\ncloses #63322\ncloses #70972\n\nr? @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/679431f7419e5fe2644a008092f00ccd36779dfb", "html_url": "https://github.com/rust-lang/rust/commit/679431f7419e5fe2644a008092f00ccd36779dfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/679431f7419e5fe2644a008092f00ccd36779dfb/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6318d24ad8440fa30428b405be1174478e9536e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6318d24ad8440fa30428b405be1174478e9536e3", "html_url": "https://github.com/rust-lang/rust/commit/6318d24ad8440fa30428b405be1174478e9536e3"}, {"sha": "2f5c0f59a96612667ca6aeb40b6e40259f861e7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f5c0f59a96612667ca6aeb40b6e40259f861e7e", "html_url": "https://github.com/rust-lang/rust/commit/2f5c0f59a96612667ca6aeb40b6e40259f861e7e"}], "stats": {"total": 82, "additions": 69, "deletions": 13}, "files": [{"sha": "4cc6a27a6da93b5f5bd7d43c8b47b34a6db0944c", "filename": "src/librustc_mir_build/hair/pattern/const_to_pat.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/679431f7419e5fe2644a008092f00ccd36779dfb/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679431f7419e5fe2644a008092f00ccd36779dfb/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fconst_to_pat.rs?ref=679431f7419e5fe2644a008092f00ccd36779dfb", "patch": "@@ -111,21 +111,22 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n             }\n \n             if let Some(non_sm_ty) = structural {\n-                let adt_def = match non_sm_ty {\n-                    traits::NonStructuralMatchTy::Adt(adt_def) => adt_def,\n+                let msg = match non_sm_ty {\n+                    traits::NonStructuralMatchTy::Adt(adt_def) => {\n+                        let path = self.tcx().def_path_str(adt_def.did);\n+                        format!(\n+                            \"to use a constant of type `{}` in a pattern, \\\n+                             `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n+                            path, path,\n+                        )\n+                    }\n+                    traits::NonStructuralMatchTy::Dynamic => {\n+                        format!(\"trait objects cannot be used in patterns\")\n+                    }\n                     traits::NonStructuralMatchTy::Param => {\n                         bug!(\"use of constant whose type is a parameter inside a pattern\")\n                     }\n                 };\n-                let path = self.tcx().def_path_str(adt_def.did);\n-\n-                let make_msg = || -> String {\n-                    format!(\n-                        \"to use a constant of type `{}` in a pattern, \\\n-                         `{}` must be annotated with `#[derive(PartialEq, Eq)]`\",\n-                        path, path,\n-                    )\n-                };\n \n                 // double-check there even *is* a semantic `PartialEq` to dispatch to.\n                 //\n@@ -155,13 +156,13 @@ impl<'a, 'tcx> ConstToPat<'a, 'tcx> {\n \n                 if !ty_is_partial_eq {\n                     // span_fatal avoids ICE from resolution of non-existent method (rare case).\n-                    self.tcx().sess.span_fatal(self.span, &make_msg());\n+                    self.tcx().sess.span_fatal(self.span, &msg);\n                 } else if mir_structural_match_violation {\n                     self.tcx().struct_span_lint_hir(\n                         lint::builtin::INDIRECT_STRUCTURAL_MATCH,\n                         self.id,\n                         self.span,\n-                        |lint| lint.build(&make_msg()).emit(),\n+                        |lint| lint.build(&msg).emit(),\n                     );\n                 } else {\n                     debug!("}, {"sha": "8007290f35d85be8d1f9730a57d1e77e823fd38a", "filename": "src/librustc_trait_selection/traits/structural_match.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/679431f7419e5fe2644a008092f00ccd36779dfb/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679431f7419e5fe2644a008092f00ccd36779dfb/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fstructural_match.rs?ref=679431f7419e5fe2644a008092f00ccd36779dfb", "patch": "@@ -11,6 +11,7 @@ use rustc_span::Span;\n pub enum NonStructuralMatchTy<'tcx> {\n     Adt(&'tcx AdtDef),\n     Param,\n+    Dynamic,\n }\n \n /// This method traverses the structure of `ty`, trying to find an\n@@ -137,6 +138,10 @@ impl<'a, 'tcx> TypeVisitor<'tcx> for Search<'a, 'tcx> {\n                 self.found = Some(NonStructuralMatchTy::Param);\n                 return true; // Stop visiting.\n             }\n+            ty::Dynamic(..) => {\n+                self.found = Some(NonStructuralMatchTy::Dynamic);\n+                return true; // Stop visiting.\n+            }\n             ty::RawPtr(..) => {\n                 // structural-match ignores substructure of\n                 // `*const _`/`*mut _`, so skip `super_visit_with`."}, {"sha": "2bacd6c9a9c5a3e47f0518c72d1614640c221aea", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/679431f7419e5fe2644a008092f00ccd36779dfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679431f7419e5fe2644a008092f00ccd36779dfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.rs?ref=679431f7419e5fe2644a008092f00ccd36779dfb", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+trait A {}\n+struct B;\n+impl A for B {}\n+\n+fn test<const T: &'static dyn A>() {\n+    //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]` to be used\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    test::<{ &B }>();\n+}"}, {"sha": "c3db6c65a8f4c7e6441cc49f71c32c0ec6615f38", "filename": "src/test/ui/const-generics/issues/issue-63322-forbid-dyn.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/679431f7419e5fe2644a008092f00ccd36779dfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679431f7419e5fe2644a008092f00ccd36779dfb/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-63322-forbid-dyn.stderr?ref=679431f7419e5fe2644a008092f00ccd36779dfb", "patch": "@@ -0,0 +1,17 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/issue-63322-forbid-dyn.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+\n+error[E0741]: `&'static (dyn A + 'static)` must be annotated with `#[derive(PartialEq, Eq)]` to be used as the type of a const parameter\n+  --> $DIR/issue-63322-forbid-dyn.rs:8:18\n+   |\n+LL | fn test<const T: &'static dyn A>() {\n+   |                  ^^^^^^^^^^^^^^ `&'static (dyn A + 'static)` doesn't derive both `PartialEq` and `Eq`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0741`."}, {"sha": "a9b2699cafdc4956c95720b3554253ea69227dca", "filename": "src/test/ui/match/issue-70972-dyn-trait.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/679431f7419e5fe2644a008092f00ccd36779dfb/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/679431f7419e5fe2644a008092f00ccd36779dfb/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.rs?ref=679431f7419e5fe2644a008092f00ccd36779dfb", "patch": "@@ -0,0 +1,10 @@\n+const F: &'static dyn Send = &7u32;\n+\n+fn main() {\n+    let a: &dyn Send = &7u32;\n+    match a {\n+        F => panic!(),\n+        //~^ ERROR trait objects cannot be used in patterns\n+        _ => {}\n+    }\n+}"}, {"sha": "a4e827357de6bdfec3278c0283c295c794785f6c", "filename": "src/test/ui/match/issue-70972-dyn-trait.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/679431f7419e5fe2644a008092f00ccd36779dfb/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/679431f7419e5fe2644a008092f00ccd36779dfb/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fissue-70972-dyn-trait.stderr?ref=679431f7419e5fe2644a008092f00ccd36779dfb", "patch": "@@ -0,0 +1,8 @@\n+error: trait objects cannot be used in patterns\n+  --> $DIR/issue-70972-dyn-trait.rs:6:9\n+   |\n+LL |         F => panic!(),\n+   |         ^\n+\n+error: aborting due to previous error\n+"}]}