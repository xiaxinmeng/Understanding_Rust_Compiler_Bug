{"sha": "06c66d6ca23c73c60aeb0ea2c12baaf0236afe40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2YzY2ZDZjYTIzYzczYzYwYWViMGVhMmMxMmJhYWYwMjM2YWZlNDA=", "commit": {"author": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2015-12-05T03:36:01Z"}, "committer": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2016-01-16T17:34:54Z"}, "message": "Change name when outputting staticlibs on Windows\nlibfoo.a -> foo.lib\nIn order to not cause conflicts, changes the DLL import library name\nfoo.lib -> foo.dll.lib\n\nFixes https://github.com/rust-lang/rust/issues/29508\n\nBecause this changes output filenames this is a [breaking-change]\n\nSigned-off-by: Peter Atashian <retep998@gmail.com>", "tree": {"sha": "2cbca1447da04f0663a593f09cadea88694a91e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cbca1447da04f0663a593f09cadea88694a91e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/06c66d6ca23c73c60aeb0ea2c12baaf0236afe40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/06c66d6ca23c73c60aeb0ea2c12baaf0236afe40", "html_url": "https://github.com/rust-lang/rust/commit/06c66d6ca23c73c60aeb0ea2c12baaf0236afe40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/06c66d6ca23c73c60aeb0ea2c12baaf0236afe40/comments", "author": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "committer": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dda25f2221cc7dd68ed28254665dc7d25e2648ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/dda25f2221cc7dd68ed28254665dc7d25e2648ed", "html_url": "https://github.com/rust-lang/rust/commit/dda25f2221cc7dd68ed28254665dc7d25e2648ed"}], "stats": {"total": 28, "additions": 23, "deletions": 5}, "files": [{"sha": "b0fb12b26b28f96e778c9367a2d5fe7229198e3a", "filename": "src/librustc_metadata/loader.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/06c66d6ca23c73c60aeb0ea2c12baaf0236afe40/src%2Flibrustc_metadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06c66d6ca23c73c60aeb0ea2c12baaf0236afe40/src%2Flibrustc_metadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Floader.rs?ref=06c66d6ca23c73c60aeb0ea2c12baaf0236afe40", "patch": "@@ -388,11 +388,12 @@ impl<'a> Context<'a> {\n         }\n \n         let dypair = self.dylibname();\n+        let staticpair = self.staticlibname();\n \n         // want: crate_name.dir_part() + prefix + crate_name.file_part + \"-\"\n         let dylib_prefix = format!(\"{}{}\", dypair.0, self.crate_name);\n         let rlib_prefix = format!(\"lib{}\", self.crate_name);\n-        let staticlib_prefix = format!(\"lib{}\", self.crate_name);\n+        let staticlib_prefix = format!(\"{}{}\", staticpair.0, self.crate_name);\n \n         let mut candidates = HashMap::new();\n         let mut staticlibs = vec!();\n@@ -425,7 +426,7 @@ impl<'a> Context<'a> {\n                  false)\n             } else {\n                 if file.starts_with(&staticlib_prefix[..]) &&\n-                   file.ends_with(\".a\") {\n+                   file.ends_with(&staticpair.1) {\n                     staticlibs.push(CrateMismatch {\n                         path: path.to_path_buf(),\n                         got: \"static\".to_string()\n@@ -644,6 +645,13 @@ impl<'a> Context<'a> {\n         (t.options.dll_prefix.clone(), t.options.dll_suffix.clone())\n     }\n \n+    // Returns the corresponding (prefix, suffix) that files need to have for\n+    // static libraries\n+    fn staticlibname(&self) -> (String, String) {\n+        let t = &self.target;\n+        (t.options.staticlib_prefix.clone(), t.options.staticlib_suffix.clone())\n+    }\n+\n     fn find_commandline_library(&mut self, locs: &[String]) -> Option<Library> {\n         // First, filter out all libraries that look suspicious. We only accept\n         // files which actually exist that have the correct naming scheme for"}, {"sha": "6aabf51a9ed9f10b44e7561f0331873c0bee4735", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/06c66d6ca23c73c60aeb0ea2c12baaf0236afe40/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06c66d6ca23c73c60aeb0ea2c12baaf0236afe40/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=06c66d6ca23c73c60aeb0ea2c12baaf0236afe40", "patch": "@@ -490,7 +490,10 @@ pub fn filename_for_input(sess: &Session,\n                                                 suffix))\n         }\n         config::CrateTypeStaticlib => {\n-            outputs.out_directory.join(&format!(\"lib{}.a\", libname))\n+            let (prefix, suffix) = (&sess.target.target.options.staticlib_prefix,\n+                                    &sess.target.target.options.staticlib_suffix);\n+            outputs.out_directory.join(&format!(\"{}{}{}\", prefix, libname,\n+                                                suffix))\n         }\n         config::CrateTypeExecutable => {\n             let suffix = &sess.target.target.options.exe_suffix;"}, {"sha": "9c445737b10eefa01ea58705f216d6095658a3d4", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/06c66d6ca23c73c60aeb0ea2c12baaf0236afe40/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/06c66d6ca23c73c60aeb0ea2c12baaf0236afe40/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=06c66d6ca23c73c60aeb0ea2c12baaf0236afe40", "patch": "@@ -210,7 +210,14 @@ impl<'a> Linker for MsvcLinker<'a> {\n     fn link_rlib(&mut self, lib: &Path) { self.cmd.arg(lib); }\n     fn add_object(&mut self, path: &Path) { self.cmd.arg(path); }\n     fn args(&mut self, args: &[String]) { self.cmd.args(args); }\n-    fn build_dylib(&mut self, _out_filename: &Path) { self.cmd.arg(\"/DLL\"); }\n+\n+    fn build_dylib(&mut self, out_filename: &Path) {\n+        self.cmd.arg(\"/DLL\");\n+        let mut arg: OsString = \"/IMPLIB:\".into();\n+        arg.push(out_filename.with_extension(\"dll.lib\"));\n+        self.cmd.arg(arg);\n+    }\n+\n     fn gc_sections(&mut self, _is_dylib: bool) { self.cmd.arg(\"/OPT:REF,ICF\"); }\n \n     fn link_dylib(&mut self, lib: &str) {\n@@ -222,7 +229,7 @@ impl<'a> Linker for MsvcLinker<'a> {\n         // `foo.lib` file if the dll doesn't actually export any symbols, so we\n         // check to see if the file is there and just omit linking to it if it's\n         // not present.\n-        let name = format!(\"{}.lib\", lib);\n+        let name = format!(\"{}.dll.lib\", lib);\n         if fs::metadata(&path.join(&name)).is_ok() {\n             self.cmd.arg(name);\n         }"}]}