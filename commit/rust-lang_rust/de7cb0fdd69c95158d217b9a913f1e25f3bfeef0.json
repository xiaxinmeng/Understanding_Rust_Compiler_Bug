{"sha": "de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlN2NiMGZkZDY5Yzk1MTU4ZDIxN2I5YTkxM2YxZTI1ZjNiZmVlZjA=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-05-16T22:06:52Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2016-06-03T13:11:18Z"}, "message": "introduce DropAndReplace for translating assignments\n\nthis introduces a DropAndReplace terminator as a fix to #30380. That terminator\nis suppsoed to be translated by desugaring during drop elaboration, which is\nnot implemented in this commit, so this breaks `-Z orbit` temporarily.", "tree": {"sha": "6efb39e697ddb0632bd73dac34540a3cd887e509", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6efb39e697ddb0632bd73dac34540a3cd887e509"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "html_url": "https://github.com/rust-lang/rust/commit/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95206f438f1573e95601f06b315a151de010e92f", "url": "https://api.github.com/repos/rust-lang/rust/commits/95206f438f1573e95601f06b315a151de010e92f", "html_url": "https://github.com/rust-lang/rust/commit/95206f438f1573e95601f06b315a151de010e92f"}], "stats": {"total": 184, "additions": 139, "deletions": 45}, "files": [{"sha": "db4c0c1e9eb77a108dac91ce41c74666eed02cf0", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 30, "deletions": 6, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "patch": "@@ -330,11 +330,19 @@ pub enum TerminatorKind<'tcx> {\n \n     /// Drop the Lvalue\n     Drop {\n-        value: Lvalue<'tcx>,\n+        location: Lvalue<'tcx>,\n         target: BasicBlock,\n         unwind: Option<BasicBlock>\n     },\n \n+    /// Drop the Lvalue and assign the new value over it\n+    DropAndReplace {\n+        location: Lvalue<'tcx>,\n+        value: Operand<'tcx>,\n+        target: BasicBlock,\n+        unwind: Option<BasicBlock>,\n+    },\n+\n     /// Block ends with a call of a converging function\n     Call {\n         /// The function that\u2019s being called\n@@ -373,8 +381,14 @@ impl<'tcx> TerminatorKind<'tcx> {\n                 slice::ref_slice(t).into_cow(),\n             Call { destination: None, cleanup: Some(ref c), .. } => slice::ref_slice(c).into_cow(),\n             Call { destination: None, cleanup: None, .. } => (&[]).into_cow(),\n-            Drop { target, unwind: Some(unwind), .. } => vec![target, unwind].into_cow(),\n-            Drop { ref target, .. } => slice::ref_slice(target).into_cow(),\n+            DropAndReplace { target, unwind: Some(unwind), .. } |\n+            Drop { target, unwind: Some(unwind), .. } => {\n+                vec![target, unwind].into_cow()\n+            }\n+            DropAndReplace { ref target, unwind: None, .. } |\n+            Drop { ref target, unwind: None, .. } => {\n+                slice::ref_slice(target).into_cow()\n+            }\n         }\n     }\n \n@@ -393,8 +407,12 @@ impl<'tcx> TerminatorKind<'tcx> {\n             Call { destination: Some((_, ref mut t)), cleanup: None, .. } => vec![t],\n             Call { destination: None, cleanup: Some(ref mut c), .. } => vec![c],\n             Call { destination: None, cleanup: None, .. } => vec![],\n+            DropAndReplace { ref mut target, unwind: Some(ref mut unwind), .. } |\n             Drop { ref mut target, unwind: Some(ref mut unwind), .. } => vec![target, unwind],\n-            Drop { ref mut target, .. } => vec![target]\n+            DropAndReplace { ref mut target, unwind: None, .. } |\n+            Drop { ref mut target, unwind: None, .. } => {\n+                vec![target]\n+            }\n         }\n     }\n }\n@@ -461,7 +479,9 @@ impl<'tcx> TerminatorKind<'tcx> {\n             SwitchInt { discr: ref lv, .. } => write!(fmt, \"switchInt({:?})\", lv),\n             Return => write!(fmt, \"return\"),\n             Resume => write!(fmt, \"resume\"),\n-            Drop { ref value, .. } => write!(fmt, \"drop({:?})\", value),\n+            Drop { ref location, .. } => write!(fmt, \"drop({:?})\", location),\n+            DropAndReplace { ref location, ref value, .. } =>\n+                write!(fmt, \"replace({:?} <- {:?})\", location, value),\n             Call { ref func, ref args, ref destination, .. } => {\n                 if let Some((ref destination, _)) = *destination {\n                     write!(fmt, \"{:?} = \", destination)?;\n@@ -506,8 +526,12 @@ impl<'tcx> TerminatorKind<'tcx> {\n             Call { destination: Some(_), cleanup: None, .. } => vec![\"return\".into_cow()],\n             Call { destination: None, cleanup: Some(_), .. } => vec![\"unwind\".into_cow()],\n             Call { destination: None, cleanup: None, .. } => vec![],\n+            DropAndReplace { unwind: None, .. } |\n             Drop { unwind: None, .. } => vec![\"return\".into_cow()],\n-            Drop { .. } => vec![\"return\".into_cow(), \"unwind\".into_cow()],\n+            DropAndReplace { unwind: Some(_), .. } |\n+            Drop { unwind: Some(_), .. } => {\n+                vec![\"return\".into_cow(), \"unwind\".into_cow()]\n+            }\n         }\n     }\n }"}, {"sha": "17a8d040ab4787fa69b9ac08c2df10e8247e9d19", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "patch": "@@ -394,10 +394,20 @@ macro_rules! make_mir_visitor {\n                     TerminatorKind::Return => {\n                     }\n \n-                    TerminatorKind::Drop { ref $($mutability)* value,\n+                    TerminatorKind::Drop { ref $($mutability)* location,\n                                            target,\n                                            unwind } => {\n-                        self.visit_lvalue(value, LvalueContext::Drop);\n+                        self.visit_lvalue(location, LvalueContext::Drop);\n+                        self.visit_branch(block, target);\n+                        unwind.map(|t| self.visit_branch(block, t));\n+                    }\n+\n+                    TerminatorKind::DropAndReplace { ref $($mutability)* location,\n+                                                     ref $($mutability)* value,\n+                                                     target,\n+                                                     unwind } => {\n+                        self.visit_lvalue(location, LvalueContext::Drop);\n+                        self.visit_operand(value);\n                         self.visit_branch(block, target);\n                         unwind.map(|t| self.visit_branch(block, t));\n                     }"}, {"sha": "99592e5d60fe59897bb201a089182df23ae9827c", "filename": "src/librustc_borrowck/borrowck/mir/dataflow/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fdataflow%2Fmod.rs?ref=de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "patch": "@@ -444,10 +444,17 @@ impl<'a, 'tcx: 'a, D> DataflowAnalysis<'a, 'tcx, D>\n             repr::TerminatorKind::Return |\n             repr::TerminatorKind::Resume => {}\n             repr::TerminatorKind::Goto { ref target } |\n-            repr::TerminatorKind::Drop { ref target, value: _, unwind: None } => {\n+            repr::TerminatorKind::Drop { ref target, location: _, unwind: None } |\n+\n+            repr::TerminatorKind::DropAndReplace {\n+                ref target, value: _, location: _, unwind: None\n+            } => {\n                 self.propagate_bits_into_entry_set_for(in_out, changed, target);\n             }\n-            repr::TerminatorKind::Drop { ref target, value: _, unwind: Some(ref unwind) } => {\n+            repr::TerminatorKind::Drop { ref target, location: _, unwind: Some(ref unwind) } |\n+            repr::TerminatorKind::DropAndReplace {\n+                ref target, value: _, location: _, unwind: Some(ref unwind)\n+            } => {\n                 self.propagate_bits_into_entry_set_for(in_out, changed, target);\n                 self.propagate_bits_into_entry_set_for(in_out, changed, unwind);\n             }"}, {"sha": "fcaa655f749d53421c466b2c496dccdb6fc9287d", "filename": "src/librustc_borrowck/borrowck/mir/gather_moves.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fgather_moves.rs?ref=de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "patch": "@@ -671,10 +671,18 @@ fn gather_moves<'a, 'tcx>(mir: &Mir<'tcx>, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> MoveD\n                 let _ = discr;\n             }\n \n-            TerminatorKind::Drop { value: ref lval, target: _, unwind: _ } => {\n+            TerminatorKind::Drop { ref location, target: _, unwind: _ } => {\n                 let source = Location { block: bb,\n                                         index: bb_data.statements.len() };\n-                bb_ctxt.on_move_out_lval(SK::Drop, lval, source);\n+                bb_ctxt.on_move_out_lval(SK::Drop, location, source);\n+            }\n+            TerminatorKind::DropAndReplace { ref location, ref value, .. } => {\n+                let assigned_path = bb_ctxt.builder.move_path_for(location);\n+                bb_ctxt.path_map.fill_to(assigned_path.idx());\n+\n+                let source = Location { block: bb,\n+                                        index: bb_data.statements.len() };\n+                bb_ctxt.on_operand(SK::Use, value, source);\n             }\n             TerminatorKind::Call { ref func, ref args, ref destination, cleanup: _ } => {\n                 let source = Location { block: bb,"}, {"sha": "38ebecf248ff798f9e89e9bc6152f9be3554da11", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "patch": "@@ -309,15 +309,23 @@ fn drop_flag_effects_for_location<'a, 'tcx, F>(\n         Some(stmt) => match stmt.kind {\n             repr::StatementKind::Assign(ref lvalue, _) => {\n                 debug!(\"drop_flag_effects: assignment {:?}\", stmt);\n-                on_all_children_bits(tcx, mir, move_data,\n+                 on_all_children_bits(tcx, mir, move_data,\n                                      move_data.rev_lookup.find(lvalue),\n                                      |moi| callback(moi, DropFlagState::Present))\n             }\n         },\n         None => {\n-            // terminator - no move-ins except for function return edge\n-            let term = bb.terminator();\n-            debug!(\"drop_flag_effects: terminator {:?}\", term);\n+            debug!(\"drop_flag_effects: replace {:?}\", bb.terminator());\n+            match bb.terminator().kind {\n+                repr::TerminatorKind::DropAndReplace { ref location, .. } => {\n+                    on_all_children_bits(tcx, mir, move_data,\n+                                         move_data.rev_lookup.find(location),\n+                                         |moi| callback(moi, DropFlagState::Present))\n+                }\n+                _ => {\n+                    // other terminators do not contain move-ins\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "3324467e70d1d868278071ce88f8eb3d4f45b472", "filename": "src/librustc_mir/build/expr/stmt.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fstmt.rs?ref=de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "patch": "@@ -34,29 +34,25 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let scope_id = this.innermost_scope_id();\n                 let lhs_span = lhs.span;\n \n-                let lhs_ty = lhs.ty;\n-                let rhs_ty = rhs.ty;\n-\n-                let lhs_needs_drop = this.hir.needs_drop(lhs_ty);\n-                let rhs_needs_drop = this.hir.needs_drop(rhs_ty);\n-\n                 // Note: we evaluate assignments right-to-left. This\n                 // is better for borrowck interaction with overloaded\n                 // operators like x[j] = x[i].\n \n                 // Generate better code for things that don't need to be\n                 // dropped.\n-                let rhs = if lhs_needs_drop || rhs_needs_drop {\n-                    let op = unpack!(block = this.as_operand(block, rhs));\n-                    Rvalue::Use(op)\n+                if this.hir.needs_drop(lhs.ty) {\n+                    let rhs = unpack!(block = this.as_operand(block, rhs));\n+                    let lhs = unpack!(block = this.as_lvalue(block, lhs));\n+                    unpack!(block = this.build_drop_and_replace(\n+                        block, lhs_span, lhs, rhs\n+                    ));\n+                    block.unit()\n                 } else {\n-                    unpack!(block = this.as_rvalue(block, rhs))\n-                };\n-\n-                let lhs = unpack!(block = this.as_lvalue(block, lhs));\n-                unpack!(block = this.build_drop(block, lhs_span, lhs.clone(), lhs_ty));\n-                this.cfg.push_assign(block, scope_id, expr_span, &lhs, rhs);\n-                block.unit()\n+                    let rhs = unpack!(block = this.as_rvalue(block, rhs));\n+                    let lhs = unpack!(block = this.as_lvalue(block, lhs));\n+                    this.cfg.push_assign(block, scope_id, expr_span, &lhs, rhs);\n+                    block.unit()\n+                }\n             }\n             ExprKind::AssignOp { op, lhs, rhs } => {\n                 // FIXME(#28160) there is an interesting semantics"}, {"sha": "cd81fc764f4aff13804e6d41a0e39349174a87cf", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 27, "deletions": 6, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "patch": "@@ -139,7 +139,7 @@ struct DropData<'tcx> {\n     span: Span,\n \n     /// lvalue to drop\n-    value: Lvalue<'tcx>,\n+    location: Lvalue<'tcx>,\n \n     /// The cached block for the cleanups-on-diverge path. This block\n     /// contains code to run the current drop and all the preceding\n@@ -402,7 +402,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 // the drop that comes before it in the vector.\n                 scope.drops.push(DropData {\n                     span: span,\n-                    value: lvalue.clone(),\n+                    location: lvalue.clone(),\n                     cached_block: None\n                 });\n                 return;\n@@ -497,7 +497,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n     pub fn build_drop(&mut self,\n                       block: BasicBlock,\n                       span: Span,\n-                      value: Lvalue<'tcx>,\n+                      location: Lvalue<'tcx>,\n                       ty: Ty<'tcx>) -> BlockAnd<()> {\n         if !self.hir.needs_drop(ty) {\n             return block.unit();\n@@ -509,14 +509,35 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                            scope_id,\n                            span,\n                            TerminatorKind::Drop {\n-                               value: value,\n+                               location: location,\n                                target: next_target,\n                                unwind: diverge_target,\n                            });\n         next_target.unit()\n     }\n \n \n+\n+    pub fn build_drop_and_replace(&mut self,\n+                                  block: BasicBlock,\n+                                  span: Span,\n+                                  location: Lvalue<'tcx>,\n+                                  value: Operand<'tcx>) -> BlockAnd<()> {\n+        let scope_id = self.innermost_scope_id();\n+        let next_target = self.cfg.start_new_block();\n+        let diverge_target = self.diverge_cleanup();\n+        self.cfg.terminate(block,\n+                           scope_id,\n+                           span,\n+                           TerminatorKind::DropAndReplace {\n+                               location: location,\n+                               value: value,\n+                               target: next_target,\n+                               unwind: diverge_target,\n+                           });\n+        next_target.unit()\n+    }\n+\n     // Panicking\n     // =========\n     // FIXME: should be moved into their own module\n@@ -653,7 +674,7 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n         });\n         let next = cfg.start_new_block();\n         cfg.terminate(block, scope.id, drop_data.span, TerminatorKind::Drop {\n-            value: drop_data.value.clone(),\n+            location: drop_data.location.clone(),\n             target: next,\n             unwind: on_diverge\n         });\n@@ -709,7 +730,7 @@ fn build_diverge_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                           scope.id,\n                           drop_data.span,\n                           TerminatorKind::Drop {\n-                              value: drop_data.value.clone(),\n+                              location: drop_data.location.clone(),\n                               target: target,\n                               unwind: None\n                           });"}, {"sha": "4902d31cf4d7a9724fda1416746a30dade710395", "filename": "src/librustc_mir/transform/break_cleanup_edges.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_mir%2Ftransform%2Fbreak_cleanup_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_mir%2Ftransform%2Fbreak_cleanup_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fbreak_cleanup_edges.rs?ref=de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "patch": "@@ -105,7 +105,9 @@ impl Pass for BreakCleanupEdges {}\n fn term_is_invoke(term: &Terminator) -> bool {\n     match term.kind {\n         TerminatorKind::Call { cleanup: Some(_), .. } |\n-        TerminatorKind::Drop { unwind: Some(_), .. } => true,\n+        // FIXME: not sure whether we need this one\n+        TerminatorKind::Drop { unwind: Some(_), .. } |\n+        TerminatorKind::DropAndReplace { .. } => true,\n         _ => false\n     }\n }"}, {"sha": "67710c4328569bf82783362d15f0e0088056a41f", "filename": "src/librustc_mir/transform/no_landing_pads.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fno_landing_pads.rs?ref=de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "patch": "@@ -29,12 +29,11 @@ impl<'tcx> MutVisitor<'tcx> for NoLandingPads {\n             TerminatorKind::SwitchInt { .. } => {\n                 /* nothing to do */\n             },\n+            TerminatorKind::Call { cleanup: ref mut unwind, .. } |\n+            TerminatorKind::DropAndReplace { ref mut unwind, .. } |\n             TerminatorKind::Drop { ref mut unwind, .. } => {\n                 unwind.take();\n             },\n-            TerminatorKind::Call { ref mut cleanup, .. } => {\n-                cleanup.take();\n-            },\n         }\n         self.super_terminator(bb, terminator);\n     }"}, {"sha": "d81c4e2dfb68ee9d72e8202feb1d615a981f082a", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "patch": "@@ -399,7 +399,7 @@ pub fn promote_candidates<'a, 'tcx>(mir: &mut Mir<'tcx>,\n         });\n         let terminator = block.terminator_mut();\n         match terminator.kind {\n-            TerminatorKind::Drop { value: Lvalue::Temp(index), target, .. } => {\n+            TerminatorKind::Drop { location: Lvalue::Temp(index), target, .. } => {\n                 if promoted(index) {\n                     terminator.kind = TerminatorKind::Goto {\n                         target: target"}, {"sha": "18a1f1595f3c3ef758f49f807552a227e7594dce", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "patch": "@@ -422,6 +422,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n \n                 TerminatorKind::Switch {..} |\n                 TerminatorKind::SwitchInt {..} |\n+                TerminatorKind::DropAndReplace { .. } |\n                 TerminatorKind::Resume => None,\n \n                 TerminatorKind::Return => {"}, {"sha": "7a41211381cb91a6e0a87fb3efe0bd39702b9b06", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "patch": "@@ -363,6 +363,20 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 // no checks needed for these\n             }\n \n+\n+            TerminatorKind::DropAndReplace {\n+                ref location,\n+                ref value,\n+                ..\n+            } => {\n+                let lv_ty = mir.lvalue_ty(tcx, location).to_ty(tcx);\n+                let rv_ty = mir.operand_ty(tcx, value);\n+                if let Err(terr) = self.sub_types(self.last_span, rv_ty, lv_ty) {\n+                    span_mirbug!(self, term, \"bad DropAndReplace ({:?} = {:?}): {:?}\",\n+                                 lv_ty, rv_ty, terr);\n+                }\n+            }\n+\n             TerminatorKind::If { ref cond, .. } => {\n                 let cond_ty = mir.operand_ty(tcx, cond);\n                 match cond_ty.sty {"}, {"sha": "fb93e487f3bb252e41cb33e8c34821edfb9a398b", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de7cb0fdd69c95158d217b9a913f1e25f3bfeef0/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=de7cb0fdd69c95158d217b9a913f1e25f3bfeef0", "patch": "@@ -143,8 +143,8 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 })\n             }\n \n-            mir::TerminatorKind::Drop { ref value, target, unwind } => {\n-                let lvalue = self.trans_lvalue(&bcx, value);\n+            mir::TerminatorKind::Drop { ref location, target, unwind } => {\n+                let lvalue = self.trans_lvalue(&bcx, location);\n                 let ty = lvalue.ty.to_ty(bcx.tcx());\n                 // Double check for necessity to drop\n                 if !glue::type_needs_drop(bcx.tcx(), ty) {\n@@ -177,6 +177,10 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 }\n             }\n \n+            mir::TerminatorKind::DropAndReplace { .. } => {\n+                bug!(\"undesugared DropAndReplace in trans: {:?}\", data);\n+            }\n+\n             mir::TerminatorKind::Call { ref func, ref args, ref destination, ref cleanup } => {\n                 // Create the callee. This is a fn ptr or zero-sized and hence a kind of scalar.\n                 let callee = self.trans_operand(&bcx, func);"}]}