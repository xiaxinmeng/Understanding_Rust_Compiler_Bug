{"sha": "5873ebeef3a4497c14b4199abba705fe7b530935", "node_id": "C_kwDOAAsO6NoAKDU4NzNlYmVlZjNhNDQ5N2MxNGI0MTk5YWJiYTcwNWZlN2I1MzA5MzU", "commit": {"author": {"name": "Peter Collingbourne", "email": "pcc@google.com", "date": "2022-11-24T02:13:30Z"}, "committer": {"name": "Peter Collingbourne", "email": "pcc@google.com", "date": "2022-12-05T23:05:43Z"}, "message": "Move linkage type check to HIR analysis and fix semantics issues.\n\nThis ensures that the error is printed even for unused variables,\nas well as unifying the handling between the LLVM and GCC backends.\n\nThis also fixes unusual behavior around exported Rust-defined variables\nwith linkage attributes. With the previous behavior, it appears to be\nimpossible to define such a variable such that it can actually be imported\nand used by another crate. This is because on the importing side, the\nvariable is required to be a pointer, but on the exporting side, the\ntype checker rejects static variables of pointer type because they do\nnot implement `Sync`. Even if it were possible to import such a type, it\nappears that code generation on the importing side would add an unexpected\nadditional level of pointer indirection, which would break type safety.\n\nThis highlighted that the semantics of linkage on Rust-defined variables\nis different to linkage on foreign items. As such, we now model the\ndifference with two different codegen attributes: linkage for Rust-defined\nvariables, and import_linkage for foreign items.\n\nThis change gives semantics to the test\nsrc/test/ui/linkage-attr/auxiliary/def_illtyped_external.rs which was\npreviously expected to fail to compile. Therefore, convert it into a\ntest that is expected to successfully compile.\n\nThe update to the GCC backend is speculative and untested.", "tree": {"sha": "6a8e02e8504632ea6fab0f93ad7e6ef927555989", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a8e02e8504632ea6fab0f93ad7e6ef927555989"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5873ebeef3a4497c14b4199abba705fe7b530935", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5873ebeef3a4497c14b4199abba705fe7b530935", "html_url": "https://github.com/rust-lang/rust/commit/5873ebeef3a4497c14b4199abba705fe7b530935", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5873ebeef3a4497c14b4199abba705fe7b530935/comments", "author": {"login": "pcc", "id": 425024, "node_id": "MDQ6VXNlcjQyNTAyNA==", "avatar_url": "https://avatars.githubusercontent.com/u/425024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcc", "html_url": "https://github.com/pcc", "followers_url": "https://api.github.com/users/pcc/followers", "following_url": "https://api.github.com/users/pcc/following{/other_user}", "gists_url": "https://api.github.com/users/pcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcc/subscriptions", "organizations_url": "https://api.github.com/users/pcc/orgs", "repos_url": "https://api.github.com/users/pcc/repos", "events_url": "https://api.github.com/users/pcc/events{/privacy}", "received_events_url": "https://api.github.com/users/pcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcc", "id": 425024, "node_id": "MDQ6VXNlcjQyNTAyNA==", "avatar_url": "https://avatars.githubusercontent.com/u/425024?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcc", "html_url": "https://github.com/pcc", "followers_url": "https://api.github.com/users/pcc/followers", "following_url": "https://api.github.com/users/pcc/following{/other_user}", "gists_url": "https://api.github.com/users/pcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcc/subscriptions", "organizations_url": "https://api.github.com/users/pcc/orgs", "repos_url": "https://api.github.com/users/pcc/repos", "events_url": "https://api.github.com/users/pcc/events{/privacy}", "received_events_url": "https://api.github.com/users/pcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1d819583f0bf13b016b119c1c2c43e6d3979450", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1d819583f0bf13b016b119c1c2c43e6d3979450", "html_url": "https://github.com/rust-lang/rust/commit/e1d819583f0bf13b016b119c1c2c43e6d3979450"}], "stats": {"total": 141, "additions": 56, "deletions": 85}, "files": [{"sha": "ea8ab76114604208ed7a9b619dc257e4e9e9c4ff", "filename": "compiler/rustc_codegen_gcc/src/consts.rs", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Fconsts.rs?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "patch": "@@ -8,13 +8,11 @@ use rustc_middle::mir::mono::MonoItem;\n use rustc_middle::ty::{self, Instance, Ty};\n use rustc_middle::ty::layout::LayoutOf;\n use rustc_middle::mir::interpret::{self, ConstAllocation, ErrorHandled, Scalar as InterpScalar, read_target_uint};\n-use rustc_span::Span;\n use rustc_span::def_id::DefId;\n use rustc_target::abi::{self, Align, HasDataLayout, Primitive, Size, WrappingRange};\n \n use crate::base;\n use crate::context::CodegenCx;\n-use crate::errors::LinkageConstOrMutType;\n use crate::type_of::LayoutGccExt;\n \n impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n@@ -239,12 +237,12 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n                     }\n \n                     Node::ForeignItem(&hir::ForeignItem {\n-                        span,\n+                        span: _,\n                         kind: hir::ForeignItemKind::Static(..),\n                         ..\n                     }) => {\n                         let fn_attrs = self.tcx.codegen_fn_attrs(def_id);\n-                        check_and_apply_linkage(&self, &fn_attrs, ty, sym, span)\n+                        check_and_apply_linkage(&self, &fn_attrs, ty, sym)\n                     }\n \n                     item => bug!(\"get_static: expected static, found {:?}\", item),\n@@ -257,8 +255,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n                 //debug!(\"get_static: sym={} item_attr={:?}\", sym, self.tcx.item_attrs(def_id));\n \n                 let attrs = self.tcx.codegen_fn_attrs(def_id);\n-                let span = self.tcx.def_span(def_id);\n-                let global = check_and_apply_linkage(&self, &attrs, ty, sym, span);\n+                let global = check_and_apply_linkage(&self, &attrs, ty, sym);\n \n                 let needs_dll_storage_attr = false; // TODO(antoyo)\n \n@@ -355,24 +352,12 @@ pub fn codegen_static_initializer<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, def_id\n     Ok((const_alloc_to_gcc(cx, alloc), alloc))\n }\n \n-fn check_and_apply_linkage<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, attrs: &CodegenFnAttrs, ty: Ty<'tcx>, sym: &str, span: Span) -> LValue<'gcc> {\n+fn check_and_apply_linkage<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, attrs: &CodegenFnAttrs, ty: Ty<'tcx>, sym: &str) -> LValue<'gcc> {\n     let is_tls = attrs.flags.contains(CodegenFnAttrFlags::THREAD_LOCAL);\n     let llty = cx.layout_of(ty).gcc_type(cx, true);\n-    if let Some(linkage) = attrs.linkage {\n-        // If this is a static with a linkage specified, then we need to handle\n-        // it a little specially. The typesystem prevents things like &T and\n-        // extern \"C\" fn() from being non-null, so we can't just declare a\n-        // static and call it a day. Some linkages (like weak) will make it such\n-        // that the static actually has a null value.\n-        let llty2 =\n-            if let ty::RawPtr(ref mt) = ty.kind() {\n-                cx.layout_of(mt.ty).gcc_type(cx, true)\n-            }\n-            else {\n-                cx.sess().emit_fatal(LinkageConstOrMutType { span: span })\n-            };\n+    if let Some(linkage) = attrs.import_linkage {\n         // Declare a symbol `foo` with the desired linkage.\n-        let global1 = cx.declare_global_with_linkage(&sym, llty2, base::global_linkage_to_gcc(linkage));\n+        let global1 = cx.declare_global_with_linkage(&sym, cx.type_i8(), base::global_linkage_to_gcc(linkage));\n \n         // Declare an internal global `extern_with_linkage_foo` which\n         // is initialized with the address of `foo`.  If `foo` is"}, {"sha": "d0ba7e2479111fed3ee8661f86984a3fbfd18cf2", "filename": "compiler/rustc_codegen_gcc/src/errors.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_codegen_gcc%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_codegen_gcc%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Ferrors.rs?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "patch": "@@ -211,13 +211,6 @@ pub(crate) struct InvalidMonomorphizationUnsupportedOperation<'a> {\n     pub in_elem: Ty<'a>,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(codegen_gcc_linkage_const_or_mut_type)]\n-pub(crate) struct LinkageConstOrMutType {\n-    #[primary_span]\n-    pub span: Span,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(codegen_gcc_lto_not_supported)]\n pub(crate) struct LTONotSupported;"}, {"sha": "3626aa901c0ef45b02dfa23fe54487d491436f11", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "patch": "@@ -1,7 +1,7 @@\n use crate::base;\n use crate::common::{self, CodegenCx};\n use crate::debuginfo;\n-use crate::errors::{InvalidMinimumAlignment, LinkageConstOrMutType, SymbolAlreadyDefined};\n+use crate::errors::{InvalidMinimumAlignment, SymbolAlreadyDefined};\n use crate::llvm::{self, True};\n use crate::llvm_util;\n use crate::type_::Type;\n@@ -162,22 +162,12 @@ fn check_and_apply_linkage<'ll, 'tcx>(\n     def_id: DefId,\n ) -> &'ll Value {\n     let llty = cx.layout_of(ty).llvm_type(cx);\n-    if let Some(linkage) = attrs.linkage {\n+    if let Some(linkage) = attrs.import_linkage {\n         debug!(\"get_static: sym={} linkage={:?}\", sym, linkage);\n \n-        // If this is a static with a linkage specified, then we need to handle\n-        // it a little specially. The typesystem prevents things like &T and\n-        // extern \"C\" fn() from being non-null, so we can't just declare a\n-        // static and call it a day. Some linkages (like weak) will make it such\n-        // that the static actually has a null value.\n-        let llty2 = if let ty::RawPtr(ref mt) = ty.kind() {\n-            cx.layout_of(mt.ty).llvm_type(cx)\n-        } else {\n-            cx.sess().emit_fatal(LinkageConstOrMutType { span: cx.tcx.def_span(def_id) })\n-        };\n         unsafe {\n             // Declare a symbol `foo` with the desired linkage.\n-            let g1 = cx.declare_global(sym, llty2);\n+            let g1 = cx.declare_global(sym, cx.type_i8());\n             llvm::LLVMRustSetLinkage(g1, base::linkage_to_llvm(linkage));\n \n             // Declare an internal global `extern_with_linkage_foo` which\n@@ -195,7 +185,7 @@ fn check_and_apply_linkage<'ll, 'tcx>(\n                 })\n             });\n             llvm::LLVMRustSetLinkage(g2, llvm::Linkage::InternalLinkage);\n-            llvm::LLVMSetInitializer(g2, g1);\n+            llvm::LLVMSetInitializer(g2, cx.const_ptrcast(g1, llty));\n             g2\n         }\n     } else if cx.tcx.sess.target.arch == \"x86\" &&"}, {"sha": "af9f31fc3249309ee4aee8db7d4b0176f5fabf75", "filename": "compiler/rustc_codegen_llvm/src/errors.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ferrors.rs?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "patch": "@@ -61,13 +61,6 @@ pub(crate) struct InvalidMinimumAlignment {\n     pub err: String,\n }\n \n-#[derive(Diagnostic)]\n-#[diag(codegen_llvm_linkage_const_or_mut_type)]\n-pub(crate) struct LinkageConstOrMutType {\n-    #[primary_span]\n-    pub span: Span,\n-}\n-\n #[derive(Diagnostic)]\n #[diag(codegen_llvm_sanitizer_memtag_requires_mte)]\n pub(crate) struct SanitizerMemtagRequiresMte;"}, {"sha": "08ce5172574ac3bb1af28314ec2200a26b8d221a", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_gcc.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_gcc.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_gcc.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_gcc.ftl?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "patch": "@@ -1,6 +1,3 @@\n-codegen_gcc_linkage_const_or_mut_type =\n-    must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n-\n codegen_gcc_unwinding_inline_asm =\n     GCC backend does not support unwinding from inline asm\n "}, {"sha": "97198cb4be2c827def75802a49b4af95bc5adaf0", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_llvm.ftl", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_llvm.ftl?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "patch": "@@ -23,9 +23,6 @@ codegen_llvm_branch_protection_requires_aarch64 =\n codegen_llvm_invalid_minimum_alignment =\n     invalid minimum global alignment: {$err}\n \n-codegen_llvm_linkage_const_or_mut_type =\n-    must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n-\n codegen_llvm_sanitizer_memtag_requires_mte =\n     `-Zsanitizer=memtag` requires `-Ctarget-feature=+mte`\n "}, {"sha": "86a51b2d31070c11051852e7ec495daa6cd8dab3", "filename": "compiler/rustc_error_messages/locales/en-US/hir_analysis.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fhir_analysis.ftl?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "patch": "@@ -113,3 +113,6 @@ hir_analysis_const_bound_for_non_const_trait =\n hir_analysis_self_in_impl_self =\n     `Self` is not valid in the self type of an impl block\n     .note = replace `Self` with a different type\n+\n+hir_analysis_linkage_type =\n+    must have type `*const T` or `*mut T` due to `#[linkage]` attribute"}, {"sha": "7345e604d0b504f08c82100036cd1a95f3051e1f", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "patch": "@@ -1,4 +1,5 @@\n use crate::check::intrinsicck::InlineAsmCtxt;\n+use crate::errors::LinkageType;\n \n use super::compare_method::check_type_bounds;\n use super::compare_method::{compare_impl_method, compare_ty_impl};\n@@ -478,6 +479,17 @@ fn check_opaque_meets_bounds<'tcx>(\n     let _ = infcx.inner.borrow_mut().opaque_type_storage.take_opaque_types();\n }\n \n+fn check_static_linkage<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) {\n+    if tcx.codegen_fn_attrs(def_id).import_linkage.is_some() {\n+        if match tcx.type_of(def_id).kind() {\n+            ty::RawPtr(_) => false,\n+            _ => true,\n+        } {\n+            tcx.sess.emit_err(LinkageType { span: tcx.def_span(def_id) });\n+        }\n+    }\n+}\n+\n fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n     debug!(\n         \"check_item_type(it.def_id={:?}, it.name={})\",\n@@ -490,6 +502,7 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n             tcx.ensure().typeck(id.owner_id.def_id);\n             maybe_check_static_with_link_section(tcx, id.owner_id.def_id);\n             check_static_inhabited(tcx, id.owner_id.def_id);\n+            check_static_linkage(tcx, id.owner_id.def_id);\n         }\n         DefKind::Const => {\n             tcx.ensure().typeck(id.owner_id.def_id);\n@@ -627,6 +640,7 @@ fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n                         }\n                         hir::ForeignItemKind::Static(..) => {\n                             check_static_inhabited(tcx, def_id);\n+                            check_static_linkage(tcx, def_id);\n                         }\n                         _ => {}\n                     }"}, {"sha": "945361ef43a4eff5e85557adb4244bfecef68041", "filename": "compiler/rustc_hir_analysis/src/collect.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect.rs?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "patch": "@@ -1814,7 +1814,12 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, did: DefId) -> CodegenFnAttrs {\n             );\n         } else if attr.has_name(sym::linkage) {\n             if let Some(val) = attr.value_str() {\n-                codegen_fn_attrs.linkage = Some(linkage_by_name(tcx, did, val.as_str()));\n+                let linkage = Some(linkage_by_name(tcx, did, val.as_str()));\n+                if tcx.is_foreign_item(did) {\n+                    codegen_fn_attrs.import_linkage = linkage;\n+                } else {\n+                    codegen_fn_attrs.linkage = linkage;\n+                }\n             }\n         } else if attr.has_name(sym::link_section) {\n             if let Some(val) = attr.value_str() {"}, {"sha": "02943e7b887d82a84a213b7082fc661d09579f8a", "filename": "compiler/rustc_hir_analysis/src/errors.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Ferrors.rs?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "patch": "@@ -285,3 +285,10 @@ pub struct SelfInImplSelf {\n     #[note]\n     pub note: (),\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(hir_analysis_linkage_type)]\n+pub(crate) struct LinkageType {\n+    #[primary_span]\n+    pub span: Span,\n+}"}, {"sha": "bea884c856a95bd616b229e20f9f2984154ab573", "filename": "compiler/rustc_middle/src/middle/codegen_fn_attrs.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fcodegen_fn_attrs.rs?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "patch": "@@ -26,8 +26,10 @@ pub struct CodegenFnAttrs {\n     /// The `#[target_feature(enable = \"...\")]` attribute and the enabled\n     /// features (only enabled features are supported right now).\n     pub target_features: Vec<Symbol>,\n-    /// The `#[linkage = \"...\"]` attribute and the value we found.\n+    /// The `#[linkage = \"...\"]` attribute on Rust-defined items and the value we found.\n     pub linkage: Option<Linkage>,\n+    /// The `#[linkage = \"...\"]` attribute on foreign items and the value we found.\n+    pub import_linkage: Option<Linkage>,\n     /// The `#[link_section = \"...\"]` attribute, or what executable section this\n     /// should be placed in.\n     pub link_section: Option<Symbol>,\n@@ -113,6 +115,7 @@ impl CodegenFnAttrs {\n             link_ordinal: None,\n             target_features: vec![],\n             linkage: None,\n+            import_linkage: None,\n             link_section: None,\n             no_sanitize: SanitizerSet::empty(),\n             instruction_set: None,"}, {"sha": "505f31ec6388d1d2bf4ce3a8b50ab77206527412", "filename": "src/test/ui/feature-gates/feature-gate-linkage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.rs?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "patch": "@@ -1,5 +1,5 @@\n extern \"C\" {\n-    #[linkage = \"extern_weak\"] static foo: isize;\n+    #[linkage = \"extern_weak\"] static foo: *mut isize;\n     //~^ ERROR: the `linkage` attribute is experimental and not portable\n }\n "}, {"sha": "a1c73e555ef7a35689004863f8bdf29cfc38d3ed", "filename": "src/test/ui/feature-gates/feature-gate-linkage.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-linkage.stderr?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "patch": "@@ -1,7 +1,7 @@\n error[E0658]: the `linkage` attribute is experimental and not portable across platforms\n   --> $DIR/feature-gate-linkage.rs:2:5\n    |\n-LL |     #[linkage = \"extern_weak\"] static foo: isize;\n+LL |     #[linkage = \"extern_weak\"] static foo: *mut isize;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: see issue #29603 <https://github.com/rust-lang/rust/issues/29603> for more information"}, {"sha": "2300930e513afb95497a6c244db6baa60e1c4102", "filename": "src/test/ui/linkage-attr/auxiliary/def_external.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Fdef_external.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Fdef_external.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Fauxiliary%2Fdef_external.rs?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "previous_filename": "src/test/ui/linkage-attr/auxiliary/def_illtyped_external.rs"}, {"sha": "f754ddc6e08fd4657337f567522ce11673609e60", "filename": "src/test/ui/linkage-attr/linkage-import.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-import.rs?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "patch": "@@ -0,0 +1,8 @@\n+// build-pass\n+// aux-build:def_external.rs\n+\n+extern crate def_external as dep;\n+\n+fn main() {\n+    println!(\"{:p}\", &dep::EXTERN);\n+}"}, {"sha": "93afc537f7c6c1175970596bc2d66293d4ca7204", "filename": "src/test/ui/linkage-attr/linkage-requires-raw-ptr.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e1d819583f0bf13b016b119c1c2c43e6d3979450/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1d819583f0bf13b016b119c1c2c43e6d3979450/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.rs?ref=e1d819583f0bf13b016b119c1c2c43e6d3979450", "patch": "@@ -1,11 +0,0 @@\n-// rust-lang/rust#59548: We used to ICE when trying to use a static\n-// with a type that violated its own `#[linkage]`.\n-\n-// build-fail\n-// aux-build:def_illtyped_external.rs\n-\n-extern crate def_illtyped_external as dep;\n-\n-fn main() {\n-    println!(\"{:p}\", &dep::EXTERN);\n-}"}, {"sha": "5abbe745c6a215d043d43e8ad1f5da93a908c319", "filename": "src/test/ui/linkage-attr/linkage-requires-raw-ptr.stderr", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1d819583f0bf13b016b119c1c2c43e6d3979450/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e1d819583f0bf13b016b119c1c2c43e6d3979450/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage-requires-raw-ptr.stderr?ref=e1d819583f0bf13b016b119c1c2c43e6d3979450", "patch": "@@ -1,8 +0,0 @@\n-error: must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n-  --> $DIR/auxiliary/def_illtyped_external.rs:5:1\n-   |\n-LL | pub static EXTERN: u32 = 0;\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to previous error\n-"}, {"sha": "3bc6634f18a079b3bf3d058d6528faf99dc3d3e4", "filename": "src/test/ui/linkage-attr/linkage2.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.rs?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "patch": "@@ -1,9 +1,4 @@\n-// FIXME https://github.com/rust-lang/rust/issues/59774\n-\n-// build-fail\n-// normalize-stderr-test \"thread.*panicked.*Metadata module not compiled.*\\n\" -> \"\"\n-// normalize-stderr-test \"note:.*RUST_BACKTRACE=1.*\\n\" -> \"\"\n-// ignore-sgx no weak linkages permitted\n+// check-fail\n \n #![feature(linkage)]\n "}, {"sha": "44e8eaaef51e4f417235f3a1d769a08a93de3ef4", "filename": "src/test/ui/linkage-attr/linkage2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5873ebeef3a4497c14b4199abba705fe7b530935/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5873ebeef3a4497c14b4199abba705fe7b530935/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flinkage-attr%2Flinkage2.stderr?ref=5873ebeef3a4497c14b4199abba705fe7b530935", "patch": "@@ -1,5 +1,5 @@\n error: must have type `*const T` or `*mut T` due to `#[linkage]` attribute\n-  --> $DIR/linkage2.rs:12:5\n+  --> $DIR/linkage2.rs:7:5\n    |\n LL |     static foo: i32;\n    |     ^^^^^^^^^^^^^^^"}]}