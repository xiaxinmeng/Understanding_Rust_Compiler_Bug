{"sha": "1091a7a884b2de331ced19a7a4d1325c74fdaf06", "node_id": "C_kwDOAAsO6NoAKDEwOTFhN2E4ODRiMmRlMzMxY2VkMTlhN2E0ZDEzMjVjNzRmZGFmMDY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-04-27T19:34:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-27T19:34:16Z"}, "message": "Rollup merge of #110878 - whtahy:105107/known-bug-tests-for-unsound-issues, r=jackh726\n\nAdd `known-bug` tests for 4 unsound issues\n\nThis PR adds `known-bug` tests for 4 unsound issues as part of #105107\n- #40582\n- #49682\n- #74629\n- #105782", "tree": {"sha": "b458b9356eab7a45c5167c77d881ac8b346d1233", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b458b9356eab7a45c5167c77d881ac8b346d1233"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1091a7a884b2de331ced19a7a4d1325c74fdaf06", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkSs44CRBK7hj4Ov3rIwAAxHcIAG7LCEu3I/HaJE+DOBFKDqsS\n7GcyESdwg0vOb69wZHZFEwbAUwxdBoTwZhxsMcX6RiMgamJ8I5Brf/u//MVoGNF+\nTzE4KlgY/ttIXmRnUsabOGOFZZCekW0jA0/6Th0TwBdzHRvLX6xrv/xSZ1XN5DmK\nGGqTyyA2p8lWWWbOsq8n5QEJ+mi4IWSKVPfjhFp4mQV29Sm5ELPO+NZ5K2o7a1Sm\nKTKePR9B6kjzjb+C4eonqls9B/y9xYLFVJM/vn80Sz8k5sXrdjMUnbCDwQZupuuv\nCzFvaV2cZNcbLXJGlrVnYjZZhetS/WM/N7wQbwFgqWbY1GToGN+Yhjn07y/7NKQ=\n=i1Tu\n-----END PGP SIGNATURE-----\n", "payload": "tree b458b9356eab7a45c5167c77d881ac8b346d1233\nparent d3c43d0a22c70a1ca0f4aadb215ce8fbbe473aa0\nparent fcf8468efc7cab2f66372baf9bb28131de444f86\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1682624056 +0200\ncommitter GitHub <noreply@github.com> 1682624056 +0200\n\nRollup merge of #110878 - whtahy:105107/known-bug-tests-for-unsound-issues, r=jackh726\n\nAdd `known-bug` tests for 4 unsound issues\n\nThis PR adds `known-bug` tests for 4 unsound issues as part of #105107\n- #40582\n- #49682\n- #74629\n- #105782\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1091a7a884b2de331ced19a7a4d1325c74fdaf06", "html_url": "https://github.com/rust-lang/rust/commit/1091a7a884b2de331ced19a7a4d1325c74fdaf06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1091a7a884b2de331ced19a7a4d1325c74fdaf06/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3c43d0a22c70a1ca0f4aadb215ce8fbbe473aa0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3c43d0a22c70a1ca0f4aadb215ce8fbbe473aa0", "html_url": "https://github.com/rust-lang/rust/commit/d3c43d0a22c70a1ca0f4aadb215ce8fbbe473aa0"}, {"sha": "fcf8468efc7cab2f66372baf9bb28131de444f86", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcf8468efc7cab2f66372baf9bb28131de444f86", "html_url": "https://github.com/rust-lang/rust/commit/fcf8468efc7cab2f66372baf9bb28131de444f86"}], "stats": {"total": 152, "additions": 152, "deletions": 0}, "files": [{"sha": "cd1df53a5288942ca378ba035dff5ef2efc46959", "filename": "tests/ui/coherence/coherence-overlap-negative-impls.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1091a7a884b2de331ced19a7a4d1325c74fdaf06/tests%2Fui%2Fcoherence%2Fcoherence-overlap-negative-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1091a7a884b2de331ced19a7a4d1325c74fdaf06/tests%2Fui%2Fcoherence%2Fcoherence-overlap-negative-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcoherence%2Fcoherence-overlap-negative-impls.rs?ref=1091a7a884b2de331ced19a7a4d1325c74fdaf06", "patch": "@@ -0,0 +1,41 @@\n+// check-pass\n+// known-bug: #74629\n+\n+// Should fail. The `0` and `1` impls overlap, violating coherence. Eg, with\n+// `T = Test, F = ()`, all bounds are true, making both impls applicable.\n+// `Test: Fold<Nil>`, `Test: Fold<()>` are true because of `2`.\n+// `Is<Test>: NotNil` is true because of `auto trait` and lack of negative impl.\n+\n+#![feature(negative_impls)]\n+#![feature(auto_traits)]\n+\n+struct Nil;\n+struct Cons<H>(H);\n+struct Test;\n+\n+trait Fold<F> {}\n+\n+impl<T, F> Fold<F> for Cons<T> // 0\n+where\n+    T: Fold<Nil>,\n+{}\n+\n+impl<T, F> Fold<F> for Cons<T> // 1\n+where\n+    T: Fold<F>,\n+    private::Is<T>: private::NotNil,\n+{}\n+\n+impl<F> Fold<F> for Test {} // 2\n+\n+mod private {\n+    use crate::Nil;\n+\n+    pub struct Is<T>(T);\n+    pub auto trait NotNil {}\n+\n+    #[allow(suspicious_auto_trait_impls)]\n+    impl !NotNil for Is<Nil> {}\n+}\n+\n+fn main() {}"}, {"sha": "9805933553dd750374bb4e8f1d88a9b8823a621b", "filename": "tests/ui/specialization/issue-40582.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1091a7a884b2de331ced19a7a4d1325c74fdaf06/tests%2Fui%2Fspecialization%2Fissue-40582.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1091a7a884b2de331ced19a7a4d1325c74fdaf06/tests%2Fui%2Fspecialization%2Fissue-40582.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fissue-40582.rs?ref=1091a7a884b2de331ced19a7a4d1325c74fdaf06", "patch": "@@ -0,0 +1,35 @@\n+// check-pass\n+// known-bug: #40582\n+\n+// Should fail. Should not be possible to implement `make_static`.\n+\n+#![feature(specialization)]\n+#![allow(incomplete_features)]\n+\n+trait FromRef<'a, T: ?Sized> {\n+    fn from_ref(r: &'a T) -> Self;\n+}\n+\n+impl<'a, T: ?Sized> FromRef<'a, T> for &'a T {\n+    fn from_ref(r: &'a T) -> Self {\n+        r\n+    }\n+}\n+\n+impl<'a, T: ?Sized, R> FromRef<'a, T> for R {\n+    default fn from_ref(_: &'a T) -> Self {\n+        unimplemented!()\n+    }\n+}\n+\n+fn make_static<T: ?Sized>(data: &T) -> &'static T {\n+    fn helper<T: ?Sized, R>(data: &T) -> R {\n+        R::from_ref(data)\n+    }\n+    helper(data)\n+}\n+\n+fn main() {\n+    let s = \"specialization\".to_owned();\n+    println!(\"{:?}\", make_static(s.as_str()));\n+}"}, {"sha": "16ad942d5ab9573eab08cbbe27e2d7634294f3df", "filename": "tests/ui/specialization/specialization-default-items-drop-coherence.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1091a7a884b2de331ced19a7a4d1325c74fdaf06/tests%2Fui%2Fspecialization%2Fspecialization-default-items-drop-coherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1091a7a884b2de331ced19a7a4d1325c74fdaf06/tests%2Fui%2Fspecialization%2Fspecialization-default-items-drop-coherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fspecialization%2Fspecialization-default-items-drop-coherence.rs?ref=1091a7a884b2de331ced19a7a4d1325c74fdaf06", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+// known-bug: #105782\n+\n+// Should fail. Default items completely drop candidates instead of ambiguity,\n+// which is unsound during coherence, since coherence requires completeness.\n+\n+#![feature(specialization)]\n+#![allow(incomplete_features)]\n+\n+trait Default {\n+   type Id;\n+}\n+\n+impl<T> Default for T {\n+   default type Id = T;\n+}\n+\n+trait Overlap {\n+   type Assoc;\n+}\n+\n+impl Overlap for u32 {\n+   type Assoc = usize;\n+}\n+\n+impl Overlap for <u32 as Default>::Id {\n+   type Assoc = Box<usize>;\n+}\n+\n+fn main() {}"}, {"sha": "c282e2185bca21acbc5691c48a0faba81d4d1994", "filename": "tests/ui/thread-local/thread-local-static-ref-use-after-free.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/1091a7a884b2de331ced19a7a4d1325c74fdaf06/tests%2Fui%2Fthread-local%2Fthread-local-static-ref-use-after-free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1091a7a884b2de331ced19a7a4d1325c74fdaf06/tests%2Fui%2Fthread-local%2Fthread-local-static-ref-use-after-free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fthread-local%2Fthread-local-static-ref-use-after-free.rs?ref=1091a7a884b2de331ced19a7a4d1325c74fdaf06", "patch": "@@ -0,0 +1,46 @@\n+// check-pass\n+// known-bug: #49682\n+// edition:2021\n+\n+// Should fail. Keeping references to thread local statics can result in a\n+// use-after-free.\n+\n+#![feature(thread_local)]\n+\n+use std::sync::atomic::{AtomicUsize, Ordering};\n+use std::thread;\n+\n+#[allow(dead_code)]\n+#[thread_local]\n+static FOO: AtomicUsize = AtomicUsize::new(0);\n+\n+#[allow(dead_code)]\n+async fn bar() {}\n+\n+#[allow(dead_code)]\n+async fn foo() {\n+    let r = &FOO;\n+    bar().await;\n+    r.load(Ordering::SeqCst);\n+}\n+\n+fn main() {\n+    // &FOO = 0x7fd1e9cbf6d0\n+    _ = thread::spawn(|| {\n+        let g = foo();\n+        println!(\"&FOO = {:p}\", &FOO);\n+        g\n+    })\n+    .join()\n+    .unwrap();\n+\n+    // &FOO = 0x7fd1e9cc0f50\n+    println!(\"&FOO = {:p}\", &FOO);\n+\n+    // &FOO = 0x7fd1e9cbf6d0\n+    thread::spawn(move || {\n+        println!(\"&FOO = {:p}\", &FOO);\n+    })\n+    .join()\n+    .unwrap();\n+}"}]}