{"sha": "0ed4bc59931ac4ec35c50aa7faafe42cbec9efb0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZDRiYzU5OTMxYWM0ZWMzNWM1MGFhN2ZhYWZlNDJjYmVjOWVmYjA=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-12T08:43:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-12T08:43:24Z"}, "message": "Rollup merge of #76615 - GuillaumeGomez:missing-examples-binary-ops, r=jyn514\n\nAdd missing examples on binary core traits\n\nr? @jyn514", "tree": {"sha": "0e02e25d0561d2e20ca2d5e194bd0e33870b5672", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e02e25d0561d2e20ca2d5e194bd0e33870b5672"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ed4bc59931ac4ec35c50aa7faafe42cbec9efb0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfXIosCRBK7hj4Ov3rIwAAdHIIAC5EJvuo5TDbprBD9/UcKMdO\nqSRneXSGidZZbRAgnM4q8uhd8jJRXjMsKfINvWgvSGkF8L9Gc0SwnO83ugNgmFr+\nrqwUHD9m6HEQdysfXr55BJ4JIrdp8Fpb9NgoxlyBwTilNfsphoj3NvUqbfnughri\nYROV74tEfhiHvUcdet1ZhHyAJIfiIeP662PfqVAHrbuCRxLXQ2UIdEvWtZBkeDYd\n+voNdIU/loS3XploKZPHFck4440zufYIhrBS8PIXW2vCgImMsdSku2aS1PR62O70\nmnmdTmSTs/1FIoMepzzb6vurR23ZdbKJggXJFvRoVWoVEfJ3BjFbXs9hTBJezAo=\n=gEK5\n-----END PGP SIGNATURE-----\n", "payload": "tree 0e02e25d0561d2e20ca2d5e194bd0e33870b5672\nparent 90c5b8fad576400cd0ad90bebc2b4aed1580d9ea\nparent bb9ce7cb01fba4b34bbebf8a44056016cabfa40e\nauthor Ralf Jung <post@ralfj.de> 1599900204 +0200\ncommitter GitHub <noreply@github.com> 1599900204 +0200\n\nRollup merge of #76615 - GuillaumeGomez:missing-examples-binary-ops, r=jyn514\n\nAdd missing examples on binary core traits\n\nr? @jyn514\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed4bc59931ac4ec35c50aa7faafe42cbec9efb0", "html_url": "https://github.com/rust-lang/rust/commit/0ed4bc59931ac4ec35c50aa7faafe42cbec9efb0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ed4bc59931ac4ec35c50aa7faafe42cbec9efb0/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90c5b8fad576400cd0ad90bebc2b4aed1580d9ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/90c5b8fad576400cd0ad90bebc2b4aed1580d9ea", "html_url": "https://github.com/rust-lang/rust/commit/90c5b8fad576400cd0ad90bebc2b4aed1580d9ea"}, {"sha": "bb9ce7cb01fba4b34bbebf8a44056016cabfa40e", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9ce7cb01fba4b34bbebf8a44056016cabfa40e", "html_url": "https://github.com/rust-lang/rust/commit/bb9ce7cb01fba4b34bbebf8a44056016cabfa40e"}], "stats": {"total": 134, "additions": 134, "deletions": 0}, "files": [{"sha": "3d71e0b0002c2da6a7c29eb7a78790e817519d3d", "filename": "library/core/src/ops/bit.rs", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/0ed4bc59931ac4ec35c50aa7faafe42cbec9efb0/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ed4bc59931ac4ec35c50aa7faafe42cbec9efb0/library%2Fcore%2Fsrc%2Fops%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fbit.rs?ref=0ed4bc59931ac4ec35c50aa7faafe42cbec9efb0", "patch": "@@ -36,6 +36,15 @@ pub trait Not {\n     type Output;\n \n     /// Performs the unary `!` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(!true, false);\n+    /// assert_eq!(!false, true);\n+    /// assert_eq!(!1u8, 254);\n+    /// assert_eq!(!0u8, 255);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn not(self) -> Self::Output;\n@@ -122,6 +131,15 @@ pub trait BitAnd<Rhs = Self> {\n     type Output;\n \n     /// Performs the `&` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(true & false, false);\n+    /// assert_eq!(true & true, true);\n+    /// assert_eq!(5u8 & 1u8, 1);\n+    /// assert_eq!(5u8 & 2u8, 0);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn bitand(self, rhs: Rhs) -> Self::Output;\n@@ -208,6 +226,15 @@ pub trait BitOr<Rhs = Self> {\n     type Output;\n \n     /// Performs the `|` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(true | false, true);\n+    /// assert_eq!(false | false, false);\n+    /// assert_eq!(5u8 | 1u8, 5);\n+    /// assert_eq!(5u8 | 2u8, 7);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn bitor(self, rhs: Rhs) -> Self::Output;\n@@ -297,6 +324,15 @@ pub trait BitXor<Rhs = Self> {\n     type Output;\n \n     /// Performs the `^` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(true ^ false, true);\n+    /// assert_eq!(true ^ true, false);\n+    /// assert_eq!(5u8 ^ 1u8, 4);\n+    /// assert_eq!(5u8 ^ 2u8, 7);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn bitxor(self, rhs: Rhs) -> Self::Output;\n@@ -387,6 +423,13 @@ pub trait Shl<Rhs = Self> {\n     type Output;\n \n     /// Performs the `<<` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(5u8 << 1, 10);\n+    /// assert_eq!(1u8 << 1, 2);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn shl(self, rhs: Rhs) -> Self::Output;\n@@ -498,6 +541,13 @@ pub trait Shr<Rhs = Self> {\n     type Output;\n \n     /// Performs the `>>` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// assert_eq!(5u8 >> 1, 2);\n+    /// assert_eq!(2u8 >> 1, 1);\n+    /// ```\n     #[must_use]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn shr(self, rhs: Rhs) -> Self::Output;\n@@ -612,6 +662,26 @@ shr_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n )]\n pub trait BitAndAssign<Rhs = Self> {\n     /// Performs the `&=` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut x = true;\n+    /// x &= false;\n+    /// assert_eq!(x, false);\n+    ///\n+    /// let mut x = true;\n+    /// x &= true;\n+    /// assert_eq!(x, true);\n+    ///\n+    /// let mut x: u8 = 5;\n+    /// x &= 1;\n+    /// assert_eq!(x, 1);\n+    ///\n+    /// let mut x: u8 = 5;\n+    /// x &= 2;\n+    /// assert_eq!(x, 0);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn bitand_assign(&mut self, rhs: Rhs);\n }\n@@ -663,6 +733,26 @@ bitand_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n )]\n pub trait BitOrAssign<Rhs = Self> {\n     /// Performs the `|=` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut x = true;\n+    /// x |= false;\n+    /// assert_eq!(x, true);\n+    ///\n+    /// let mut x = false;\n+    /// x |= false;\n+    /// assert_eq!(x, false);\n+    ///\n+    /// let mut x: u8 = 5;\n+    /// x |= 1;\n+    /// assert_eq!(x, 5);\n+    ///\n+    /// let mut x: u8 = 5;\n+    /// x |= 2;\n+    /// assert_eq!(x, 7);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn bitor_assign(&mut self, rhs: Rhs);\n }\n@@ -714,6 +804,26 @@ bitor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n )]\n pub trait BitXorAssign<Rhs = Self> {\n     /// Performs the `^=` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut x = true;\n+    /// x ^= false;\n+    /// assert_eq!(x, true);\n+    ///\n+    /// let mut x = true;\n+    /// x ^= true;\n+    /// assert_eq!(x, false);\n+    ///\n+    /// let mut x: u8 = 5;\n+    /// x ^= 1;\n+    /// assert_eq!(x, 4);\n+    ///\n+    /// let mut x: u8 = 5;\n+    /// x ^= 2;\n+    /// assert_eq!(x, 7);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn bitxor_assign(&mut self, rhs: Rhs);\n }\n@@ -763,6 +873,18 @@ bitxor_assign_impl! { bool usize u8 u16 u32 u64 u128 isize i8 i16 i32 i64 i128 }\n )]\n pub trait ShlAssign<Rhs = Self> {\n     /// Performs the `<<=` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut x: u8 = 5;\n+    /// x <<= 1;\n+    /// assert_eq!(x, 10);\n+    ///\n+    /// let mut x: u8 = 1;\n+    /// x <<= 1;\n+    /// assert_eq!(x, 2);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn shl_assign(&mut self, rhs: Rhs);\n }\n@@ -833,6 +955,18 @@ shl_assign_impl_all! { u8 u16 u32 u64 u128 usize i8 i16 i32 i64 i128 isize }\n )]\n pub trait ShrAssign<Rhs = Self> {\n     /// Performs the `>>=` operation.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// let mut x: u8 = 5;\n+    /// x >>= 1;\n+    /// assert_eq!(x, 2);\n+    ///\n+    /// let mut x: u8 = 2;\n+    /// x >>= 1;\n+    /// assert_eq!(x, 1);\n+    /// ```\n     #[stable(feature = \"op_assign_traits\", since = \"1.8.0\")]\n     fn shr_assign(&mut self, rhs: Rhs);\n }"}]}