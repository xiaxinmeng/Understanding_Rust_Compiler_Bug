{"sha": "6156bc56cbd1f40e538b59ff91ce9b8d89969ff3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxNTZiYzU2Y2JkMWY0MGU1MzhiNTlmZjkxY2U5YjhkODk5NjlmZjM=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-01T11:41:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-02T05:56:53Z"}, "message": "Propagating unsafe::slice 2", "tree": {"sha": "ec399916523a701e8ac25903855e90d2210a9254", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec399916523a701e8ac25903855e90d2210a9254"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6156bc56cbd1f40e538b59ff91ce9b8d89969ff3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6156bc56cbd1f40e538b59ff91ce9b8d89969ff3", "html_url": "https://github.com/rust-lang/rust/commit/6156bc56cbd1f40e538b59ff91ce9b8d89969ff3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6156bc56cbd1f40e538b59ff91ce9b8d89969ff3/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47c57a17dc51ff32594b5759c300b84e380b9f7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/47c57a17dc51ff32594b5759c300b84e380b9f7b", "html_url": "https://github.com/rust-lang/rust/commit/47c57a17dc51ff32594b5759c300b84e380b9f7b"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "250b576a11333ed38e5a8fc85fe314339c54ac86", "filename": "src/comp/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6156bc56cbd1f40e538b59ff91ce9b8d89969ff3/src%2Fcomp%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6156bc56cbd1f40e538b59ff91ce9b8d89969ff3/src%2Fcomp%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Flink.rs?ref=6156bc56cbd1f40e538b59ff91ce9b8d89969ff3", "patch": "@@ -562,15 +562,15 @@ fn mangle_internal_name_by_seq(ccx: @crate_ctxt, flav: str) -> str {\n fn link_binary(sess: session,\n                obj_filename: str,\n                out_filename: str,\n-               lm: link_meta) {\n+               lm: link_meta) unsafe {\n     // Converts a library file name into a gcc -l argument\n     fn unlib(config: @session::config, filename: str) -> str {\n         let rmlib = fn@(filename: str) -> str {\n             if config.os == session::os_macos ||\n                 (config.os == session::os_linux ||\n                  config.os == session::os_freebsd) &&\n                 str::find(filename, \"lib\") == 0 {\n-                ret str::slice(filename, 3u,\n+                ret str::unsafe::slice(filename, 3u,\n                                str::byte_len(filename));\n             } else { ret filename; }\n         };"}, {"sha": "b674af49b26428a7a05821c456b92b3012a8187d", "filename": "src/comp/middle/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6156bc56cbd1f40e538b59ff91ce9b8d89969ff3/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6156bc56cbd1f40e538b59ff91ce9b8d89969ff3/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fdebuginfo.rs?ref=6156bc56cbd1f40e538b59ff91ce9b8d89969ff3", "patch": "@@ -157,7 +157,7 @@ fn cached_metadata<T: copy>(cache: metadata_cache, mdtag: int,\n }\n \n fn create_compile_unit(cx: @crate_ctxt, full_path: str)\n-    -> @metadata<compile_unit_md> {\n+    -> @metadata<compile_unit_md> unsafe {\n     let cache = get_cache(cx);\n     let tg = CompileUnitTag;\n     alt cached_metadata::<@metadata<compile_unit_md>>(cache, tg,\n@@ -168,7 +168,7 @@ fn create_compile_unit(cx: @crate_ctxt, full_path: str)\n \n     let work_dir = cx.sess.working_dir;\n     let file_path = if str::starts_with(full_path, work_dir) {\n-        str::slice(full_path, str::byte_len(work_dir),\n+        str::unsafe::slice(full_path, str::byte_len(work_dir),\n                    str::byte_len(full_path))\n     } else {\n         full_path"}, {"sha": "d4e67e812d101774cbc81b456309de95c36bc63a", "filename": "src/comp/syntax/parse/lexer.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6156bc56cbd1f40e538b59ff91ce9b8d89969ff3/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6156bc56cbd1f40e538b59ff91ce9b8d89969ff3/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Flexer.rs?ref=6156bc56cbd1f40e538b59ff91ce9b8d89969ff3", "patch": "@@ -24,10 +24,10 @@ type reader = @{\n \n impl reader for reader {\n     fn is_eof() -> bool { self.curr == -1 as char }\n-    fn get_str_from(start: uint) -> str {\n+    fn get_str_from(start: uint) -> str unsafe {\n         // I'm pretty skeptical about this subtraction. What if there's a\n         // multi-byte character before the mark?\n-        ret str::slice(*self.src, start - 1u, self.pos - 1u);\n+        ret str::unsafe::slice(*self.src, start - 1u, self.pos - 1u);\n     }\n     fn next() -> char {\n         if self.pos < self.len {\n@@ -579,11 +579,11 @@ fn all_whitespace(s: str, begin: uint, end: uint) -> bool {\n     ret true;\n }\n \n-fn trim_whitespace_prefix_and_push_line(&lines: [str], s: str, col: uint) {\n+fn trim_whitespace_prefix_and_push_line(&lines: [str], s: str, col: uint) unsafe {\n     let s1;\n     if all_whitespace(s, 0u, col) {\n         if col < str::byte_len(s) {\n-            s1 = str::slice(s, col, str::byte_len(s));\n+            s1 = str::unsafe::slice(s, col, str::byte_len(s));\n         } else { s1 = \"\"; }\n     } else { s1 = s; }\n     log(debug, \"pushing line: \" + s1);"}, {"sha": "26a9931a0cb0939f1277c69ea213a3c67f48b4e8", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6156bc56cbd1f40e538b59ff91ce9b8d89969ff3/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6156bc56cbd1f40e538b59ff91ce9b8d89969ff3/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=6156bc56cbd1f40e538b59ff91ce9b8d89969ff3", "patch": "@@ -63,15 +63,15 @@ path separators in the path then the returned path is identical to\n the provided path. If an empty path is provided or the path ends\n with a path separator then an empty path is returned.\n */\n-fn basename(p: path) -> path {\n+fn basename(p: path) -> path unsafe {\n     let i: int = str::rindex(p, os_fs::path_sep as u8);\n     if i == -1 {\n         i = str::rindex(p, os_fs::alt_path_sep as u8);\n         if i == -1 { ret p; }\n     }\n     let len = str::byte_len(p);\n     if i + 1 as uint >= len { ret p; }\n-    ret str::slice(p, i + 1 as uint, len);\n+    ret str::unsafe::slice(p, i + 1 as uint, len);\n }\n \n "}, {"sha": "5510dd3231a07743029f2bd9b130eb4e7adc29b3", "filename": "src/libstd/getopts.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6156bc56cbd1f40e538b59ff91ce9b8d89969ff3/src%2Flibstd%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6156bc56cbd1f40e538b59ff91ce9b8d89969ff3/src%2Flibstd%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgetopts.rs?ref=6156bc56cbd1f40e538b59ff91ce9b8d89969ff3", "patch": "@@ -209,7 +209,7 @@ ok(match) - On success. Use functions such as <opt_present>\n             <opt_str>, etc. to interrogate results.\n err(fail_) - On failure. Use <fail_str> to get an error message.\n */\n-fn getopts(args: [str], opts: [opt]) -> result {\n+fn getopts(args: [str], opts: [opt]) -> result unsafe {\n     let n_opts = vec::len::<opt>(opts);\n     fn f(_x: uint) -> [optval] { ret []; }\n     let vals = vec::init_fn_mut::<[optval]>(n_opts, f);\n@@ -229,14 +229,14 @@ fn getopts(args: [str], opts: [opt]) -> result {\n             let names;\n             let i_arg = option::none::<str>;\n             if cur[1] == '-' as u8 {\n-                let tail = str::slice(cur, 2u, curlen);\n+                let tail = str::unsafe::slice(cur, 2u, curlen);\n                 let eq = str::index(tail, '=' as u8);\n                 if eq == -1 {\n                     names = [long(tail)];\n                 } else {\n-                    names = [long(str::slice(tail, 0u, eq as uint))];\n+                    names = [long(str::unsafe::slice(tail, 0u, eq as uint))];\n                     i_arg =\n-                        option::some::<str>(str::slice(tail,\n+                        option::some::<str>(str::unsafe::slice(tail,\n                                                        (eq as uint) + 1u,\n                                                        curlen - 2u));\n                 }"}]}