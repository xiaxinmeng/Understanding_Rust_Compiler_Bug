{"sha": "52d2871e10202279b7039f4ad6d4485093fb99cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZDI4NzFlMTAyMDIyNzliNzAzOWY0YWQ2ZDQ0ODUwOTNmYjk5Y2M=", "commit": {"author": {"name": "newpavlov", "email": "newpavlov@gmail.com", "date": "2019-08-19T12:18:02Z"}, "committer": {"name": "newpavlov", "email": "newpavlov@gmail.com", "date": "2019-08-19T12:18:02Z"}, "message": "use wasi::get_environ", "tree": {"sha": "54832aeb79e44737c3f20e7cbb2431fbae93ecbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54832aeb79e44737c3f20e7cbb2431fbae93ecbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52d2871e10202279b7039f4ad6d4485093fb99cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52d2871e10202279b7039f4ad6d4485093fb99cc", "html_url": "https://github.com/rust-lang/rust/commit/52d2871e10202279b7039f4ad6d4485093fb99cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52d2871e10202279b7039f4ad6d4485093fb99cc/comments", "author": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "newpavlov", "id": 329626, "node_id": "MDQ6VXNlcjMyOTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/329626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/newpavlov", "html_url": "https://github.com/newpavlov", "followers_url": "https://api.github.com/users/newpavlov/followers", "following_url": "https://api.github.com/users/newpavlov/following{/other_user}", "gists_url": "https://api.github.com/users/newpavlov/gists{/gist_id}", "starred_url": "https://api.github.com/users/newpavlov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/newpavlov/subscriptions", "organizations_url": "https://api.github.com/users/newpavlov/orgs", "repos_url": "https://api.github.com/users/newpavlov/repos", "events_url": "https://api.github.com/users/newpavlov/events{/privacy}", "received_events_url": "https://api.github.com/users/newpavlov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a4f0aece871f9850f83db4760a6fea4f595dc8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4f0aece871f9850f83db4760a6fea4f595dc8d", "html_url": "https://github.com/rust-lang/rust/commit/7a4f0aece871f9850f83db4760a6fea4f595dc8d"}], "stats": {"total": 47, "additions": 17, "deletions": 30}, "files": [{"sha": "23ab2051bf6f68c5881bd14e9b5c388c70086c66", "filename": "src/libstd/sys/wasi/args.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/52d2871e10202279b7039f4ad6d4485093fb99cc/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2871e10202279b7039f4ad6d4485093fb99cc/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fargs.rs?ref=52d2871e10202279b7039f4ad6d4485093fb99cc", "patch": "@@ -1,6 +1,5 @@\n use crate::ffi::CStr;\n use crate::io;\n-use crate::sys::cvt_wasi;\n use crate::ffi::OsString;\n use crate::marker::PhantomData;\n use crate::os::wasi::ffi::OsStringExt;"}, {"sha": "65c80c838dc82fa7db0aa26a8a080eff78df70a5", "filename": "src/libstd/sys/wasi/os.rs", "status": "modified", "additions": 17, "deletions": 29, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/52d2871e10202279b7039f4ad6d4485093fb99cc/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52d2871e10202279b7039f4ad6d4485093fb99cc/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fos.rs?ref=52d2871e10202279b7039f4ad6d4485093fb99cc", "patch": "@@ -75,45 +75,33 @@ pub fn current_exe() -> io::Result<PathBuf> {\n }\n \n pub struct Env {\n-    iter: vec::IntoIter<(OsString, OsString)>,\n+    iter: Vec<Vec<u8>>,\n     _dont_send_or_sync_me: PhantomData<*mut ()>,\n }\n \n impl Iterator for Env {\n     type Item = (OsString, OsString);\n-    fn next(&mut self) -> Option<(OsString, OsString)> { self.iter.next() }\n+    fn next(&mut self) -> Option<(OsString, OsString)> {\n+        self.iter.next().and_then(|input| {\n+            // See src/libstd/sys/unix/os.rs, same as that\n+            if input.is_empty() {\n+                return None;\n+            }\n+            let pos = memchr::memchr(b'=', &input[1..]).map(|p| p + 1);\n+            pos.map(|p| (\n+                OsStringExt::from_vec(input[..p].to_vec()),\n+                OsStringExt::from_vec(input[p+1..].to_vec()),\n+            ))\n+        })\n+    }\n     fn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }\n }\n \n \n pub fn env() -> Env {\n-    unsafe {\n-        let _guard = env_lock();\n-        // FIXME: replace with wasi::environ_get\n-        let mut environ = libc::environ;\n-        let mut result = Vec::new();\n-        while environ != ptr::null_mut() && *environ != ptr::null_mut() {\n-            if let Some(key_value) = parse(CStr::from_ptr(*environ).to_bytes()) {\n-                result.push(key_value);\n-            }\n-            environ = environ.offset(1);\n-        }\n-        return Env {\n-            iter: result.into_iter(),\n-            _dont_send_or_sync_me: PhantomData,\n-        }\n-    }\n-\n-    // See src/libstd/sys/unix/os.rs, same as that\n-    fn parse(input: &[u8]) -> Option<(OsString, OsString)> {\n-        if input.is_empty() {\n-            return None;\n-        }\n-        let pos = memchr::memchr(b'=', &input[1..]).map(|p| p + 1);\n-        pos.map(|p| (\n-            OsStringExt::from_vec(input[..p].to_vec()),\n-            OsStringExt::from_vec(input[p+1..].to_vec()),\n-        ))\n+    Env {\n+        iter: wasi::get_environ().unwrap_or(Vec::new()),\n+        _dont_send_or_sync_me: PhantomData,\n     }\n }\n "}]}