{"sha": "8d9187597a5e8ebcf17acba6b234884252b1a543", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkOTE4NzU5N2E1ZThlYmNmMTdhY2JhNmIyMzQ4ODQyNTJiMWE1NDM=", "commit": {"author": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-08-21T06:55:14Z"}, "committer": {"name": "kadmin", "email": "julianknodt@gmail.com", "date": "2020-09-03T16:02:56Z"}, "message": "Update to use multipart suggestion\n\nNice.", "tree": {"sha": "df957e216f1d7c874b8c9ea4dd892c0615804c6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df957e216f1d7c874b8c9ea4dd892c0615804c6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d9187597a5e8ebcf17acba6b234884252b1a543", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d9187597a5e8ebcf17acba6b234884252b1a543", "html_url": "https://github.com/rust-lang/rust/commit/8d9187597a5e8ebcf17acba6b234884252b1a543", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d9187597a5e8ebcf17acba6b234884252b1a543/comments", "author": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JulianKnodt", "id": 7675847, "node_id": "MDQ6VXNlcjc2NzU4NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/7675847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JulianKnodt", "html_url": "https://github.com/JulianKnodt", "followers_url": "https://api.github.com/users/JulianKnodt/followers", "following_url": "https://api.github.com/users/JulianKnodt/following{/other_user}", "gists_url": "https://api.github.com/users/JulianKnodt/gists{/gist_id}", "starred_url": "https://api.github.com/users/JulianKnodt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JulianKnodt/subscriptions", "organizations_url": "https://api.github.com/users/JulianKnodt/orgs", "repos_url": "https://api.github.com/users/JulianKnodt/repos", "events_url": "https://api.github.com/users/JulianKnodt/events{/privacy}", "received_events_url": "https://api.github.com/users/JulianKnodt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b132eefb48880a7a3781efe844d13845b070c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b132eefb48880a7a3781efe844d13845b070c07", "html_url": "https://github.com/rust-lang/rust/commit/4b132eefb48880a7a3781efe844d13845b070c07"}], "stats": {"total": 50, "additions": 31, "deletions": 19}, "files": [{"sha": "b7336fcd36991d327438944fb25be99afeff31f2", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 27, "deletions": 16, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/8d9187597a5e8ebcf17acba6b234884252b1a543/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d9187597a5e8ebcf17acba6b234884252b1a543/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=8d9187597a5e8ebcf17acba6b234884252b1a543", "patch": "@@ -2,7 +2,7 @@ use crate::astconv::{\n     AstConv, ExplicitLateBound, GenericArgCountMismatch, GenericArgCountResult, GenericArgPosition,\n };\n use rustc_ast::ast::ParamKindOrd;\n-use rustc_errors::{pluralize, struct_span_err, DiagnosticId, ErrorReported};\n+use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticId, ErrorReported};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{GenericArg, GenericArgs};\n@@ -448,10 +448,10 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         let emit_correct =\n             |correct: Result<(), (_, Option<rustc_errors::DiagnosticBuilder<'_>>)>| match correct {\n                 Ok(()) => Ok(()),\n-                Err((v, None)) => Err(v == 0),\n-                Err((v, Some(mut err))) => {\n+                Err((_, None)) => Err(()),\n+                Err((_, Some(mut err))) => {\n                     err.emit();\n-                    Err(v == 0)\n+                    Err(())\n                 }\n             };\n \n@@ -500,16 +500,27 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         }\n \n         // Emit a help message if it's possible that a type could be surrounded in braces\n-        if let Err((c_mismatch, Some(ref mut _const_err))) = &mut const_count_correct {\n-            if let Err((t_mismatch, Some(ref mut type_err))) = &mut type_count_correct {\n-                if *c_mismatch == -*t_mismatch && *t_mismatch < 0 {\n-                    for i in 0..*c_mismatch as usize {\n-                        // let t_span = unexpected_type_spans[i].clone();\n-                        let ident = args.args[arg_counts.lifetimes + i].id();\n-                        type_err.help(&format!(\n-                            \"For more complex types, surround with braces: `{{ {} }}`\",\n-                            ident,\n-                        ));\n+        if let Err((c_mismatch, Some(ref mut _const_err))) = const_count_correct {\n+            if let Err((t_mismatch, Some(ref mut type_err))) = type_count_correct {\n+                if c_mismatch == -t_mismatch && t_mismatch < 0 {\n+                    for i in 0..c_mismatch as usize {\n+                        let arg = &args.args[arg_counts.lifetimes + i];\n+                        match arg {\n+                            GenericArg::Type(hir::Ty {\n+                                kind: hir::TyKind::Path { .. }, ..\n+                            }) => {}\n+                            _ => continue,\n+                        }\n+                        let suggestions = vec![\n+                            (arg.span().shrink_to_lo(), String::from(\"{ \")),\n+                            (arg.span().shrink_to_hi(), String::from(\" }\")),\n+                        ];\n+                        type_err.multipart_suggestion(\n+                            \"If this generic argument was intended as a const parameter, \\\n+                            try surrounding it with braces:\",\n+                            suggestions,\n+                            Applicability::MaybeIncorrect,\n+                        );\n                     }\n                 }\n             }\n@@ -521,8 +532,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         GenericArgCountResult {\n             explicit_late_bound,\n-            correct: arg_count_correct.map_err(|reported_err| GenericArgCountMismatch {\n-                reported: if reported_err { Some(ErrorReported) } else { None },\n+            correct: arg_count_correct.map_err(|()| GenericArgCountMismatch {\n+                reported: Some(ErrorReported),\n                 invalid_args: unexpected_spans,\n             }),\n         }"}, {"sha": "3291b62ea9fbb29c2e71f3cdad230445badf8ac7", "filename": "src/test/ui/const-generics/invalid-enum.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d9187597a5e8ebcf17acba6b234884252b1a543/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d9187597a5e8ebcf17acba6b234884252b1a543/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Finvalid-enum.stderr?ref=8d9187597a5e8ebcf17acba6b234884252b1a543", "patch": "@@ -19,7 +19,10 @@ error[E0107]: wrong number of type arguments: expected 0, found 1\n LL |   test::<CompileFlag::A>();\n    |          ^^^^^^^^^^^^^^ unexpected type argument\n    |\n-   = help: For more complex types, surround with braces: `{ HirId { owner: DefId(0:5 ~ invalid_enum[317d]::main[0]), local_id: 1 } }`\n+help: If this generic argument was intended as a const parameter, try surrounding it with braces:\n+   |\n+LL |   test::<{ CompileFlag::A }>();\n+   |          ^                ^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "fe0990d8241fa6a7cbe414e73b29c98b97483f66", "filename": "src/test/ui/const-generics/issues/issue-62878.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d9187597a5e8ebcf17acba6b234884252b1a543/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d9187597a5e8ebcf17acba6b234884252b1a543/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-62878.stderr?ref=8d9187597a5e8ebcf17acba6b234884252b1a543", "patch": "@@ -24,8 +24,6 @@ error[E0107]: wrong number of type arguments: expected 0, found 1\n    |\n LL |     foo::<_, {[1]}>();\n    |           ^ unexpected type argument\n-   |\n-   = help: For more complex types, surround with braces: `{ HirId { owner: DefId(0:7 ~ issue_62878[317d]::main[0]), local_id: 1 } }`\n \n error[E0308]: mismatched types\n   --> $DIR/issue-62878.rs:7:15"}]}