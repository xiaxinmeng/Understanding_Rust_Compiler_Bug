{"sha": "adf516b94e47a288f4b8951e3a3c6240336b61ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZjUxNmI5NGU0N2EyODhmNGI4OTUxZTNhM2M2MjQwMzM2YjYxZWE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-02-10T20:45:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-10T20:45:13Z"}, "message": "Rollup merge of #58243 - GuillaumeGomez:trait-alias-docs, r=Manishearth\n\nAdd trait alias support in rustdoc\n\nFixes #57595.\n\nr? @QuietMisdreavus", "tree": {"sha": "7cd22d5d1d32d6e5dd83b012ea5e40eb67a77cb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cd22d5d1d32d6e5dd83b012ea5e40eb67a77cb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adf516b94e47a288f4b8951e3a3c6240336b61ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcYI1ZCRBK7hj4Ov3rIwAAdHIIAIhGWqTvXiweJWJII2vZD5H2\ntO5TbNZgVu/7eKWlHHbXRSjchgfL2byyG0jlCmyxnwH2ueTlAEnt1w0M2La3dGbP\nIGy/EZyXIOsZDHVC+TJouXQ7K3j+zBNJVms0AVMvm4Wwq1m8D+jzZWHsO8QBVPku\nMBXuH3a7AwFtFDRIT5aOM3NUzLLvXfTe/SrQrN4N9QH9FiL9YScmdTBsjEH7eRr2\n/FfrMTwGlZ6svj7Q2j6gUt6eAVnK+P44V8vvJ++A1OIiaZOCJlRdQhK2m9eeDaXD\nJF3z0SgMLbNmqnfq1qjUHXt0S6AFFe7NLKICnTeDeF862Ssx2L5rudtS2+5Haqc=\n=GB9y\n-----END PGP SIGNATURE-----\n", "payload": "tree 7cd22d5d1d32d6e5dd83b012ea5e40eb67a77cb3\nparent cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6\nparent b1d82ac6ed5f224914c7b89b780663bdfd46eb99\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1549831513 +0100\ncommitter GitHub <noreply@github.com> 1549831513 +0100\n\nRollup merge of #58243 - GuillaumeGomez:trait-alias-docs, r=Manishearth\n\nAdd trait alias support in rustdoc\n\nFixes #57595.\n\nr? @QuietMisdreavus\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adf516b94e47a288f4b8951e3a3c6240336b61ea", "html_url": "https://github.com/rust-lang/rust/commit/adf516b94e47a288f4b8951e3a3c6240336b61ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adf516b94e47a288f4b8951e3a3c6240336b61ea/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6", "html_url": "https://github.com/rust-lang/rust/commit/cdbd07cc40bc0cedbf38ffb6b69465e0cff6eff6"}, {"sha": "b1d82ac6ed5f224914c7b89b780663bdfd46eb99", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d82ac6ed5f224914c7b89b780663bdfd46eb99", "html_url": "https://github.com/rust-lang/rust/commit/b1d82ac6ed5f224914c7b89b780663bdfd46eb99"}], "stats": {"total": 200, "additions": 153, "deletions": 47}, "files": [{"sha": "b0bb033b94b251809108ba3d32ef8c0b710aa109", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 32, "deletions": 4, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=adf516b94e47a288f4b8951e3a3c6240336b61ea", "patch": "@@ -517,6 +517,7 @@ pub enum ItemEnum {\n     StaticItem(Static),\n     ConstantItem(Constant),\n     TraitItem(Trait),\n+    TraitAliasItem(TraitAlias),\n     ImplItem(Impl),\n     /// A method signature only. Used for required methods in traits (ie,\n     /// non-default-methods).\n@@ -554,6 +555,7 @@ impl ItemEnum {\n             ItemEnum::TyMethodItem(ref i) => &i.generics,\n             ItemEnum::MethodItem(ref i) => &i.generics,\n             ItemEnum::ForeignFunctionItem(ref f) => &f.generics,\n+            ItemEnum::TraitAliasItem(ref ta) => &ta.generics,\n             _ => return None,\n         })\n     }\n@@ -603,6 +605,7 @@ impl Clean<Item> for doctree::Module {\n         items.extend(self.impls.iter().flat_map(|x| x.clean(cx)));\n         items.extend(self.macros.iter().map(|x| x.clean(cx)));\n         items.extend(self.proc_macros.iter().map(|x| x.clean(cx)));\n+        items.extend(self.trait_aliases.iter().map(|x| x.clean(cx)));\n \n         // determine if we should display the inner contents or\n         // the outer `mod` item for the source code.\n@@ -1909,13 +1912,38 @@ impl Clean<Item> for doctree::Trait {\n                 items: self.items.clean(cx),\n                 generics: self.generics.clean(cx),\n                 bounds: self.bounds.clean(cx),\n-                is_spotlight: is_spotlight,\n+                is_spotlight,\n                 is_auto: self.is_auto.clean(cx),\n             }),\n         }\n     }\n }\n \n+#[derive(Clone, RustcEncodable, RustcDecodable, Debug)]\n+pub struct TraitAlias {\n+    pub generics: Generics,\n+    pub bounds: Vec<GenericBound>,\n+}\n+\n+impl Clean<Item> for doctree::TraitAlias {\n+    fn clean(&self, cx: &DocContext) -> Item {\n+        let attrs = self.attrs.clean(cx);\n+        Item {\n+            name: Some(self.name.clean(cx)),\n+            attrs,\n+            source: self.whence.clean(cx),\n+            def_id: cx.tcx.hir().local_def_id(self.id),\n+            visibility: self.vis.clean(cx),\n+            stability: self.stab.clean(cx),\n+            deprecation: self.depr.clean(cx),\n+            inner: TraitAliasItem(TraitAlias {\n+                generics: self.generics.clean(cx),\n+                bounds: self.bounds.clean(cx),\n+            }),\n+        }\n+    }\n+}\n+\n impl Clean<bool> for hir::IsAuto {\n     fn clean(&self, _: &DocContext) -> bool {\n         match *self {\n@@ -2247,6 +2275,7 @@ pub enum TypeKind {\n     Macro,\n     Attr,\n     Derive,\n+    TraitAlias,\n }\n \n pub trait GetDefId {\n@@ -3858,10 +3887,9 @@ pub fn register_def(cx: &DocContext, def: Def) -> DefId {\n             MacroKind::Derive => (i, TypeKind::Derive),\n             MacroKind::ProcMacroStub => unreachable!(),\n         },\n+        Def::TraitAlias(i) => (i, TypeKind::TraitAlias),\n         Def::SelfTy(Some(def_id), _) => (def_id, TypeKind::Trait),\n-        Def::SelfTy(_, Some(impl_def_id)) => {\n-            return impl_def_id\n-        }\n+        Def::SelfTy(_, Some(impl_def_id)) => return impl_def_id,\n         _ => return def.def_id()\n     };\n     if did.is_local() { return did }"}, {"sha": "e8458385739df64ed13258dc52aa0af7c800c93f", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 29, "deletions": 15, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=adf516b94e47a288f4b8951e3a3c6240336b61ea", "patch": "@@ -38,6 +38,7 @@ pub struct Module {\n     pub foreigns: Vec<hir::ForeignMod>,\n     pub macros: Vec<Macro>,\n     pub proc_macros: Vec<ProcMacro>,\n+    pub trait_aliases: Vec<TraitAlias>,\n     pub is_crate: bool,\n }\n \n@@ -53,21 +54,22 @@ impl Module {\n             where_inner: syntax_pos::DUMMY_SP,\n             attrs      : hir::HirVec::new(),\n             extern_crates: Vec::new(),\n-            imports    : Vec::new(),\n-            structs    : Vec::new(),\n-            unions     : Vec::new(),\n-            enums      : Vec::new(),\n-            fns        : Vec::new(),\n-            mods       : Vec::new(),\n-            typedefs   : Vec::new(),\n-            existentials: Vec::new(),\n-            statics    : Vec::new(),\n-            constants  : Vec::new(),\n-            traits     : Vec::new(),\n-            impls      : Vec::new(),\n-            foreigns   : Vec::new(),\n-            macros     : Vec::new(),\n-            proc_macros: Vec::new(),\n+            imports    :   Vec::new(),\n+            structs    :   Vec::new(),\n+            unions     :   Vec::new(),\n+            enums      :   Vec::new(),\n+            fns        :   Vec::new(),\n+            mods       :   Vec::new(),\n+            typedefs   :   Vec::new(),\n+            existentials:  Vec::new(),\n+            statics    :   Vec::new(),\n+            constants  :   Vec::new(),\n+            traits     :   Vec::new(),\n+            impls      :   Vec::new(),\n+            foreigns   :   Vec::new(),\n+            macros     :   Vec::new(),\n+            proc_macros:   Vec::new(),\n+            trait_aliases: Vec::new(),\n             is_crate   : false,\n         }\n     }\n@@ -208,6 +210,18 @@ pub struct Trait {\n     pub depr: Option<attr::Deprecation>,\n }\n \n+pub struct TraitAlias {\n+    pub name: Name,\n+    pub generics: hir::Generics,\n+    pub bounds: hir::HirVec<hir::GenericBound>,\n+    pub attrs: hir::HirVec<ast::Attribute>,\n+    pub id: ast::NodeId,\n+    pub whence: Span,\n+    pub vis: hir::Visibility,\n+    pub stab: Option<attr::Stability>,\n+    pub depr: Option<attr::Deprecation>,\n+}\n+\n #[derive(Debug)]\n pub struct Impl {\n     pub unsafety: hir::Unsafety,"}, {"sha": "8a3b5484f395d38192c9be1091e69282b83a320d", "filename": "src/librustdoc/html/item_type.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fitem_type.rs?ref=adf516b94e47a288f4b8951e3a3c6240336b61ea", "patch": "@@ -42,6 +42,7 @@ pub enum ItemType {\n     Existential     = 22,\n     ProcAttribute   = 23,\n     ProcDerive      = 24,\n+    TraitAlias      = 25,\n }\n \n \n@@ -86,6 +87,7 @@ impl<'a> From<&'a clean::Item> for ItemType {\n             clean::AssociatedTypeItem(..)  => ItemType::AssociatedType,\n             clean::ForeignTypeItem         => ItemType::ForeignType,\n             clean::KeywordItem(..)         => ItemType::Keyword,\n+            clean::TraitAliasItem(..)      => ItemType::TraitAlias,\n             clean::ProcMacroItem(ref mac)  => match mac.kind {\n                 MacroKind::Bang            => ItemType::Macro,\n                 MacroKind::Attr            => ItemType::ProcAttribute,\n@@ -100,20 +102,21 @@ impl<'a> From<&'a clean::Item> for ItemType {\n impl From<clean::TypeKind> for ItemType {\n     fn from(kind: clean::TypeKind) -> ItemType {\n         match kind {\n-            clean::TypeKind::Struct   => ItemType::Struct,\n-            clean::TypeKind::Union    => ItemType::Union,\n-            clean::TypeKind::Enum     => ItemType::Enum,\n-            clean::TypeKind::Function => ItemType::Function,\n-            clean::TypeKind::Trait    => ItemType::Trait,\n-            clean::TypeKind::Module   => ItemType::Module,\n-            clean::TypeKind::Static   => ItemType::Static,\n-            clean::TypeKind::Const    => ItemType::Constant,\n-            clean::TypeKind::Variant  => ItemType::Variant,\n-            clean::TypeKind::Typedef  => ItemType::Typedef,\n-            clean::TypeKind::Foreign  => ItemType::ForeignType,\n-            clean::TypeKind::Macro    => ItemType::Macro,\n-            clean::TypeKind::Attr     => ItemType::ProcAttribute,\n-            clean::TypeKind::Derive   => ItemType::ProcDerive,\n+            clean::TypeKind::Struct     => ItemType::Struct,\n+            clean::TypeKind::Union      => ItemType::Union,\n+            clean::TypeKind::Enum       => ItemType::Enum,\n+            clean::TypeKind::Function   => ItemType::Function,\n+            clean::TypeKind::Trait      => ItemType::Trait,\n+            clean::TypeKind::Module     => ItemType::Module,\n+            clean::TypeKind::Static     => ItemType::Static,\n+            clean::TypeKind::Const      => ItemType::Constant,\n+            clean::TypeKind::Variant    => ItemType::Variant,\n+            clean::TypeKind::Typedef    => ItemType::Typedef,\n+            clean::TypeKind::Foreign    => ItemType::ForeignType,\n+            clean::TypeKind::Macro      => ItemType::Macro,\n+            clean::TypeKind::Attr       => ItemType::ProcAttribute,\n+            clean::TypeKind::Derive     => ItemType::ProcDerive,\n+            clean::TypeKind::TraitAlias => ItemType::TraitAlias,\n         }\n     }\n }\n@@ -146,6 +149,7 @@ impl ItemType {\n             ItemType::Existential     => \"existential\",\n             ItemType::ProcAttribute   => \"attr\",\n             ItemType::ProcDerive      => \"derive\",\n+            ItemType::TraitAlias      => \"traitalias\",\n         }\n     }\n \n@@ -160,6 +164,7 @@ impl ItemType {\n             ItemType::Primitive |\n             ItemType::AssociatedType |\n             ItemType::Existential |\n+            ItemType::TraitAlias |\n             ItemType::ForeignType => NameSpace::Type,\n \n             ItemType::ExternCrate |"}, {"sha": "3a8e8a6a6c8408d93b59e26a1b64e2ce3a12ab5c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 31, "deletions": 11, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=adf516b94e47a288f4b8951e3a3c6240336b61ea", "patch": "@@ -1836,6 +1836,7 @@ struct AllTypes {\n     keywords: FxHashSet<ItemEntry>,\n     attributes: FxHashSet<ItemEntry>,\n     derives: FxHashSet<ItemEntry>,\n+    trait_aliases: FxHashSet<ItemEntry>,\n }\n \n impl AllTypes {\n@@ -1856,6 +1857,7 @@ impl AllTypes {\n             keywords: new_set(100),\n             attributes: new_set(100),\n             derives: new_set(100),\n+            trait_aliases: new_set(100),\n         }\n     }\n \n@@ -1879,6 +1881,7 @@ impl AllTypes {\n                 ItemType::Constant => self.constants.insert(ItemEntry::new(new_url, name)),\n                 ItemType::ProcAttribute => self.attributes.insert(ItemEntry::new(new_url, name)),\n                 ItemType::ProcDerive => self.derives.insert(ItemEntry::new(new_url, name)),\n+                ItemType::TraitAlias => self.trait_aliases.insert(ItemEntry::new(new_url, name)),\n                 _ => true,\n             };\n         }\n@@ -1922,6 +1925,7 @@ impl fmt::Display for AllTypes {\n         print_entries(f, &self.derives, \"Derive Macros\", \"derives\")?;\n         print_entries(f, &self.functions, \"Functions\", \"functions\")?;\n         print_entries(f, &self.typedefs, \"Typedefs\", \"typedefs\")?;\n+        print_entries(f, &self.trait_aliases, \"Trait Aliases\", \"trait-aliases\")?;\n         print_entries(f, &self.existentials, \"Existentials\", \"existentials\")?;\n         print_entries(f, &self.statics, \"Statics\", \"statics\")?;\n         print_entries(f, &self.constants, \"Constants\", \"constants\")\n@@ -2419,6 +2423,7 @@ impl<'a> fmt::Display for Item<'a> {\n             clean::ForeignTypeItem => write!(fmt, \"Foreign Type \")?,\n             clean::KeywordItem(..) => write!(fmt, \"Keyword \")?,\n             clean::ExistentialItem(..) => write!(fmt, \"Existential Type \")?,\n+            clean::TraitAliasItem(..) => write!(fmt, \"Trait Alias \")?,\n             _ => {\n                 // We don't generate pages for any other type.\n                 unreachable!();\n@@ -2457,6 +2462,7 @@ impl<'a> fmt::Display for Item<'a> {\n             clean::ForeignTypeItem => item_foreign_type(fmt, self.cx, self.item),\n             clean::KeywordItem(ref k) => item_keyword(fmt, self.cx, self.item, k),\n             clean::ExistentialItem(ref e, _) => item_existential(fmt, self.cx, self.item, e),\n+            clean::TraitAliasItem(ref ta) => item_trait_alias(fmt, self.cx, self.item, ta),\n             _ => {\n                 // We don't generate pages for any other type.\n                 unreachable!();\n@@ -3015,23 +3021,17 @@ fn render_impls(cx: &Context, w: &mut fmt::Formatter,\n     Ok(())\n }\n \n-fn bounds(t_bounds: &[clean::GenericBound]) -> String {\n+fn bounds(t_bounds: &[clean::GenericBound], trait_alias: bool) -> String {\n     let mut bounds = String::new();\n-    let mut bounds_plain = String::new();\n     if !t_bounds.is_empty() {\n-        if !bounds.is_empty() {\n-            bounds.push(' ');\n-            bounds_plain.push(' ');\n+        if !trait_alias {\n+            bounds.push_str(\": \");\n         }\n-        bounds.push_str(\": \");\n-        bounds_plain.push_str(\": \");\n         for (i, p) in t_bounds.iter().enumerate() {\n             if i > 0 {\n                 bounds.push_str(\" + \");\n-                bounds_plain.push_str(\" + \");\n             }\n             bounds.push_str(&(*p).to_string());\n-            bounds_plain.push_str(&format!(\"{:#}\", *p));\n         }\n     }\n     bounds\n@@ -3051,7 +3051,7 @@ fn item_trait(\n     it: &clean::Item,\n     t: &clean::Trait,\n ) -> fmt::Result {\n-    let bounds = bounds(&t.bounds);\n+    let bounds = bounds(&t.bounds, false);\n     let types = t.items.iter().filter(|m| m.is_associated_type()).collect::<Vec<_>>();\n     let consts = t.items.iter().filter(|m| m.is_associated_const()).collect::<Vec<_>>();\n     let required = t.items.iter().filter(|m| m.is_ty_method()).collect::<Vec<_>>();\n@@ -4282,7 +4282,26 @@ fn item_existential(\n            it.name.as_ref().unwrap(),\n            t.generics,\n            where_clause = WhereClause { gens: &t.generics, indent: 0, end_newline: true },\n-           bounds = bounds(&t.bounds))?;\n+           bounds = bounds(&t.bounds, false))?;\n+\n+    document(w, cx, it)?;\n+\n+    // Render any items associated directly to this alias, as otherwise they\n+    // won't be visible anywhere in the docs. It would be nice to also show\n+    // associated items from the aliased type (see discussion in #32077), but\n+    // we need #14072 to make sense of the generics.\n+    render_assoc_items(w, cx, it, it.def_id, AssocItemRender::All)\n+}\n+\n+fn item_trait_alias(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n+                    t: &clean::TraitAlias) -> fmt::Result {\n+    write!(w, \"<pre class='rust trait-alias'>\")?;\n+    render_attributes(w, it)?;\n+    write!(w, \"trait {}{}{} = {};</pre>\",\n+           it.name.as_ref().unwrap(),\n+           t.generics,\n+           WhereClause { gens: &t.generics, indent: 0, end_newline: true },\n+           bounds(&t.bounds, true))?;\n \n     document(w, cx, it)?;\n \n@@ -4846,6 +4865,7 @@ fn item_ty_to_strs(ty: &ItemType) -> (&'static str, &'static str) {\n         ItemType::Existential     => (\"existentials\", \"Existentials\"),\n         ItemType::ProcAttribute   => (\"attributes\", \"Attribute Macros\"),\n         ItemType::ProcDerive      => (\"derives\", \"Derive Macros\"),\n+        ItemType::TraitAlias      => (\"trait-aliases\", \"Trait aliases\"),\n     }\n }\n "}, {"sha": "3625848dd85c4ea9b704370e4420499a044c2a4f", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=adf516b94e47a288f4b8951e3a3c6240336b61ea", "patch": "@@ -68,7 +68,8 @@ if (!DOMTokenList.prototype.remove) {\n                      \"keyword\",\n                      \"existential\",\n                      \"attr\",\n-                     \"derive\"];\n+                     \"derive\",\n+                     \"traitalias\"];\n \n     var search_input = document.getElementsByClassName(\"search-input\")[0];\n \n@@ -1786,6 +1787,7 @@ if (!DOMTokenList.prototype.remove) {\n         block(\"type\", \"Type Definitions\");\n         block(\"foreigntype\", \"Foreign Types\");\n         block(\"keyword\", \"Keywords\");\n+        block(\"traitalias\", \"Trait Aliases\");\n     }\n \n     window.initSidebarItems = initSidebarItems;"}, {"sha": "333fe76a8a4a9a331fa86dff8f5fea6f62a87525", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=adf516b94e47a288f4b8951e3a3c6240336b61ea", "patch": "@@ -94,6 +94,7 @@ pre {\n }\n .content .highlighted a, .content .highlighted span { color: #eee !important; }\n .content .highlighted.trait { background-color: #013191; }\n+.content .highlighted.traitalias { background-color: #013191; }\n .content .highlighted.mod,\n .content .highlighted.externcrate { background-color: #afc6e4; }\n .content .highlighted.mod { background-color: #803a1b; }\n@@ -128,6 +129,7 @@ pre {\n .content span.externcrate,\n .content span.mod, .content a.mod, .block a.current.mod { color: #bda000; }\n .content span.trait, .content a.trait, .block a.current.trait { color: #b78cf2; }\n+.content span.traitalias, .content a.traitalias, .block a.current.traitalias { color: #b397da; }\n .content span.fn, .content a.fn, .block a.current.fn,\n .content span.method, .content a.method, .block a.current.method,\n .content span.tymethod, .content a.tymethod, .block a.current.tymethod,"}, {"sha": "19ae67b29881f4e915a3ccd8cfe727178217ef61", "filename": "src/librustdoc/html/static/themes/light.css", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Flight.css?ref=adf516b94e47a288f4b8951e3a3c6240336b61ea", "patch": "@@ -96,6 +96,7 @@ pre {\n }\n .content .highlighted a, .content .highlighted span { color: #000 !important; }\n .content .highlighted.trait { background-color: #c7b6ff; }\n+.content .highlighted.traitalias { background-color: #c7b6ff; }\n .content .highlighted.mod,\n .content .highlighted.externcrate { background-color: #afc6e4; }\n .content .highlighted.enum { background-color: #b4d1b9; }\n@@ -128,6 +129,7 @@ pre {\n .content span.externcrate,\n .content span.mod, .content a.mod, .block a.current.mod { color: #4d76ae; }\n .content span.trait, .content a.trait, .block a.current.trait { color: #7c5af3; }\n+.content span.traitalias, .content a.traitalias, .block a.current.traitalias { color: #6841f1; }\n .content span.fn, .content a.fn, .block a.current.fn,\n .content span.method, .content a.method, .block a.current.method,\n .content span.tymethod, .content a.tymethod, .block a.current.tymethod,"}, {"sha": "5f3da4c7b33e0456e5e5ae2d86d962dc946019f9", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=adf516b94e47a288f4b8951e3a3c6240336b61ea", "patch": "@@ -224,6 +224,7 @@ impl<'a> fold::DocFolder for Stripper<'a> {\n             | clean::ConstantItem(..)\n             | clean::UnionItem(..)\n             | clean::AssociatedConstItem(..)\n+            | clean::TraitAliasItem(..)\n             | clean::ForeignTypeItem => {\n                 if i.def_id.is_local() {\n                     if !self.access_levels.is_exported(i.def_id) {"}, {"sha": "352ff788eedae9e3456d85b124ee73653de19d72", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=adf516b94e47a288f4b8951e3a3c6240336b61ea", "patch": "@@ -547,8 +547,19 @@ impl<'a, 'tcx, 'rcx> RustdocVisitor<'a, 'tcx, 'rcx> {\n                 };\n                 om.traits.push(t);\n             },\n-            hir::ItemKind::TraitAlias(..) => {\n-                unimplemented!(\"trait objects are not yet implemented\")\n+            hir::ItemKind::TraitAlias(ref gen, ref b) => {\n+                let t = TraitAlias {\n+                    name: ident.name,\n+                    generics: gen.clone(),\n+                    bounds: b.iter().cloned().collect(),\n+                    id: item.id,\n+                    attrs: item.attrs.clone(),\n+                    whence: item.span,\n+                    vis: item.vis.clone(),\n+                    stab: self.stability(item.id),\n+                    depr: self.deprecation(item.id),\n+                };\n+                om.trait_aliases.push(t);\n             },\n \n             hir::ItemKind::Impl(unsafety,"}, {"sha": "98b8d879ac078da3f39cfe50ff59acc8a0ee529f", "filename": "src/test/rustdoc/trait_alias.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adf516b94e47a288f4b8951e3a3c6240336b61ea/src%2Ftest%2Frustdoc%2Ftrait_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftrait_alias.rs?ref=adf516b94e47a288f4b8951e3a3c6240336b61ea", "patch": "@@ -0,0 +1,21 @@\n+#![feature(trait_alias)]\n+\n+#![crate_name = \"foo\"]\n+\n+use std::fmt::Debug;\n+\n+// @has foo/all.html '//a[@href=\"traitalias.CopyAlias.html\"]' 'CopyAlias'\n+// @has foo/all.html '//a[@href=\"traitalias.Alias2.html\"]' 'Alias2'\n+// @has foo/all.html '//a[@href=\"traitalias.Foo.html\"]' 'Foo'\n+\n+// @has foo/index.html '//h2[@id=\"trait-aliases\"]' 'Trait aliases'\n+// @has foo/index.html '//a[@class=\"traitalias\"]' 'CopyAlias'\n+// @has foo/index.html '//a[@class=\"traitalias\"]' 'Alias2'\n+// @has foo/index.html '//a[@class=\"traitalias\"]' 'Foo'\n+\n+// @has foo/traitalias.CopyAlias.html '//section[@id=\"main\"]/pre' 'trait CopyAlias = Copy;'\n+pub trait CopyAlias = Copy;\n+// @has foo/traitalias.Alias2.html '//section[@id=\"main\"]/pre' 'trait Alias2 = Copy + Debug;'\n+pub trait Alias2 = Copy + Debug;\n+// @has foo/traitalias.Foo.html '//section[@id=\"main\"]/pre' 'trait Foo<T> = Into<T> + Debug;'\n+pub trait Foo<T> = Into<T> + Debug;"}]}