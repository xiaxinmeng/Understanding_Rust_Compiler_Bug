{"sha": "a6d2c5d3560ae3036f588921c9d2b23635be2243", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2ZDJjNWQzNTYwYWUzMDM2ZjU4ODkyMWM5ZDJiMjM2MzViZTIyNDM=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-11-30T20:54:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-11-30T20:54:52Z"}, "message": "Merge pull request #2211 from oli-obk/master\n\nAddress clippy lints", "tree": {"sha": "e68c4633d86c8977045bac48c5d493dbfba19855", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e68c4633d86c8977045bac48c5d493dbfba19855"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a6d2c5d3560ae3036f588921c9d2b23635be2243", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJaIHAcCRBK7hj4Ov3rIwAAdHIIAKdz9oOlwXjIW1n3M+UV8Hso\nhLLBijgmylrUVOdmR3KpqVxzNrXaKnMRp2k03mljn14qCssNnuUrzvF0z0TVkqdz\n3KfS+Z4I3ldss7pwjRqTzhQzNHgq2lMG93+/Y9yEQZBL0UjHx5ZrR2jxmIuKb5B2\nNFtTLs8HGb5zX3QckH6B/uJzEoZlD2CAKx56bCKbyjEt11NMTHUrErlQNHaqWT24\nx9tLT9baraRfOFVNCHzkbkfLmaw1QILkfXnojJmPPqC6B6EOYuWwyIUDoyeZSTva\nu/Si0Lm1EZzgqysIUEzOCuVxEGg4KSKRrgNIMetdceemRsnVHthIhhUi93f2ClY=\n=MeRp\n-----END PGP SIGNATURE-----\n", "payload": "tree e68c4633d86c8977045bac48c5d493dbfba19855\nparent b8106eb2aa085e0975cda57f4642aff13fae85d7\nparent ae18c6064aa44ac81963fcb623cc17cf3e94f78c\nauthor Nick Cameron <nrc@ncameron.org> 1512075292 +1300\ncommitter GitHub <noreply@github.com> 1512075292 +1300\n\nMerge pull request #2211 from oli-obk/master\n\nAddress clippy lints"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a6d2c5d3560ae3036f588921c9d2b23635be2243", "html_url": "https://github.com/rust-lang/rust/commit/a6d2c5d3560ae3036f588921c9d2b23635be2243", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a6d2c5d3560ae3036f588921c9d2b23635be2243/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8106eb2aa085e0975cda57f4642aff13fae85d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8106eb2aa085e0975cda57f4642aff13fae85d7", "html_url": "https://github.com/rust-lang/rust/commit/b8106eb2aa085e0975cda57f4642aff13fae85d7"}, {"sha": "ae18c6064aa44ac81963fcb623cc17cf3e94f78c", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae18c6064aa44ac81963fcb623cc17cf3e94f78c", "html_url": "https://github.com/rust-lang/rust/commit/ae18c6064aa44ac81963fcb623cc17cf3e94f78c"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "5aebc1607509c154289b6b043bb7630ec72336f3", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6d2c5d3560ae3036f588921c9d2b23635be2243/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d2c5d3560ae3036f588921c9d2b23635be2243/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=a6d2c5d3560ae3036f588921c9d2b23635be2243", "patch": "@@ -165,7 +165,7 @@ pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -\n     let all_in_one_line = !parent_rewrite_contains_newline\n         && rewrites.iter().all(|s| !s.contains('\\n'))\n         && almost_total < one_line_budget;\n-    let last_shape = if rewrites.len() == 0 {\n+    let last_shape = if rewrites.is_empty() {\n         first_child_shape\n     } else {\n         other_child_shape"}, {"sha": "1faa109c50b9d4d11940d469316ddafb2f92d931", "filename": "src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6d2c5d3560ae3036f588921c9d2b23635be2243/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d2c5d3560ae3036f588921c9d2b23635be2243/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=a6d2c5d3560ae3036f588921c9d2b23635be2243", "patch": "@@ -1424,7 +1424,7 @@ fn rewrite_match_arm(\n ///     - `&[small]`\n fn is_short_pattern(pat: &ast::Pat, pat_str: &str) -> bool {\n     // We also require that the pattern is reasonably 'small' with its literal width.\n-    pat_str.len() <= 20 && !pat_str.contains(\"\\n\") && is_short_pattern_inner(pat)\n+    pat_str.len() <= 20 && !pat_str.contains('\\n') && is_short_pattern_inner(pat)\n }\n \n fn is_short_pattern_inner(pat: &ast::Pat) -> bool {"}, {"sha": "8bed486e7b9471162c3e0cd3f4fb584375e7b945", "filename": "src/filemap.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a6d2c5d3560ae3036f588921c9d2b23635be2243/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d2c5d3560ae3036f588921c9d2b23635be2243/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=a6d2c5d3560ae3036f588921c9d2b23635be2243", "patch": "@@ -30,7 +30,11 @@ pub fn append_newline(s: &mut StringBuffer) {\n     s.push_str(\"\\n\");\n }\n \n-pub fn write_all_files<T>(file_map: &FileMap, out: &mut T, config: &Config) -> Result<(), io::Error>\n+pub fn write_all_files<T>(\n+    file_map: &[FileRecord],\n+    out: &mut T,\n+    config: &Config,\n+) -> Result<(), io::Error>\n where\n     T: Write,\n {"}, {"sha": "58c9dd5d7ab4d37f976db3716da074693df7f5c0", "filename": "src/issues.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a6d2c5d3560ae3036f588921c9d2b23635be2243/src%2Fissues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d2c5d3560ae3036f588921c9d2b23635be2243/src%2Fissues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fissues.rs?ref=a6d2c5d3560ae3036f588921c9d2b23635be2243", "patch": "@@ -16,8 +16,8 @@ use std::fmt;\n \n pub use config::ReportTactic;\n \n-const TO_DO_CHARS: &'static [char] = &['T', 'O', 'D', 'O'];\n-const FIX_ME_CHARS: &'static [char] = &['F', 'I', 'X', 'M', 'E'];\n+const TO_DO_CHARS: &[char] = &['T', 'O', 'D', 'O'];\n+const FIX_ME_CHARS: &[char] = &['F', 'I', 'X', 'M', 'E'];\n \n // Enabled implementation detail is here because it is\n // irrelevant outside the issues module"}, {"sha": "65dce5ac9b4dfc599faf381d524c6bdedbe43faa", "filename": "src/items.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a6d2c5d3560ae3036f588921c9d2b23635be2243/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d2c5d3560ae3036f588921c9d2b23635be2243/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=a6d2c5d3560ae3036f588921c9d2b23635be2243", "patch": "@@ -500,8 +500,8 @@ impl<'a> FmtVisitor<'a> {\n         let mut items: Vec<_> =\n             itemize_list_with(self.config.width_heuristics().struct_variant_width);\n         // If one of the variants use multiple lines, use multi-lined formatting for all variants.\n-        let has_multiline_variant = items.iter().any(|item| item.inner_as_ref().contains(\"\\n\"));\n-        let has_single_line_variant = items.iter().any(|item| !item.inner_as_ref().contains(\"\\n\"));\n+        let has_multiline_variant = items.iter().any(|item| item.inner_as_ref().contains('\\n'));\n+        let has_single_line_variant = items.iter().any(|item| !item.inner_as_ref().contains('\\n'));\n         if has_multiline_variant && has_single_line_variant {\n             items = itemize_list_with(0);\n         }\n@@ -1308,7 +1308,7 @@ fn format_tuple_struct(\n         result.push(')');\n     } else {\n         let shape = Shape::indented(offset, context.config).sub_width(1)?;\n-        let fields = &fields.iter().map(|field| field).collect::<Vec<_>>()[..];\n+        let fields = &fields.iter().collect::<Vec<_>>()[..];\n         let one_line_width = context.config.width_heuristics().fn_call_width;\n         result = rewrite_call_inner(context, &result, fields, span, shape, one_line_width, false)?;\n     }\n@@ -1593,7 +1593,7 @@ pub fn rewrite_associated_type(\n ) -> Option<String> {\n     let prefix = format!(\"type {}\", ident);\n \n-    let type_bounds_str = if let Some(ref bounds) = ty_param_bounds_opt {\n+    let type_bounds_str = if let Some(bounds) = ty_param_bounds_opt {\n         // 2 = \": \".len()\n         let shape = Shape::indented(indent, context.config).offset_left(prefix.len() + 2)?;\n         let bound_str = bounds\n@@ -2459,11 +2459,9 @@ pub fn wrap_generics_with_angle_brackets(\n \n fn rewrite_trait_bounds(\n     context: &RewriteContext,\n-    type_param_bounds: &ast::TyParamBounds,\n+    bounds: &[ast::TyParamBound],\n     shape: Shape,\n ) -> Option<String> {\n-    let bounds: &[_] = type_param_bounds;\n-\n     if bounds.is_empty() {\n         return Some(String::new());\n     }"}, {"sha": "f3e1c362dc1713c95e42fbbe63089e87328c5f7f", "filename": "src/lists.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a6d2c5d3560ae3036f588921c9d2b23635be2243/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d2c5d3560ae3036f588921c9d2b23635be2243/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=a6d2c5d3560ae3036f588921c9d2b23635be2243", "patch": "@@ -437,7 +437,7 @@ where\n \n             let mut formatted_comment = rewrite_post_comment(&mut item_max_width)?;\n \n-            if !starts_with_newline(&comment) {\n+            if !starts_with_newline(comment) {\n                 let mut comment_alignment =\n                     post_comment_alignment(item_max_width, inner_item.len());\n                 if first_line_width(&formatted_comment) + last_line_width(&result)\n@@ -457,7 +457,7 @@ where\n                 }\n             } else {\n                 result.push('\\n');\n-                result.push_str(&indent_str);\n+                result.push_str(indent_str);\n             }\n             if formatted_comment.contains('\\n') {\n                 item_max_width = None;\n@@ -594,7 +594,7 @@ where\n                     let mut block_open_index = post_snippet.find(\"/*\");\n                     // check if it really is a block comment (and not `//*` or a nested comment)\n                     if let Some(i) = block_open_index {\n-                        match post_snippet.find(\"/\") {\n+                        match post_snippet.find('/') {\n                             Some(j) if j < i => block_open_index = None,\n                             _ if i > 0 && &post_snippet[i - 1..i] == \"/\" => block_open_index = None,\n                             _ => (),\n@@ -620,15 +620,13 @@ where\n                             (_, Some(j)) if j > separator_index => j + 1,\n                             _ => post_snippet.len(),\n                         }\n-                    } else {\n+                    } else if let Some(newline_index) = newline_index {\n                         // Match arms may not have trailing comma. In any case, for match arms,\n                         // we will assume that the post comment belongs to the next arm if they\n                         // do not end with trailing comma.\n-                        if let Some(newline_index) = newline_index {\n-                            newline_index + 1\n-                        } else {\n-                            0\n-                        }\n+                        newline_index + 1\n+                    } else {\n+                        0\n                     }\n                 }\n                 None => post_snippet"}, {"sha": "cad5195428fb5fcb97136da1685b5bf7252e96f5", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a6d2c5d3560ae3036f588921c9d2b23635be2243/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a6d2c5d3560ae3036f588921c9d2b23635be2243/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=a6d2c5d3560ae3036f588921c9d2b23635be2243", "patch": "@@ -380,7 +380,7 @@ where\n         FunctionRetTy::Default(..) => String::new(),\n     };\n \n-    let extendable = (!list_str.contains('\\n') || list_str.is_empty()) && !output.contains(\"\\n\");\n+    let extendable = (!list_str.contains('\\n') || list_str.is_empty()) && !output.contains('\\n');\n     let args = wrap_args_with_parens(\n         context,\n         &list_str,"}]}