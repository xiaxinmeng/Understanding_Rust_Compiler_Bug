{"sha": "b65745545f410b31c5ecdd33a8299a65da578af2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2NTc0NTU0NWY0MTBiMzFjNWVjZGQzM2E4Mjk5YTY1ZGE1NzhhZjI=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-09-09T21:40:43Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-09-09T21:40:43Z"}, "message": "Use AtomicU8 in ordering example so all operations can be demonstrated", "tree": {"sha": "e0c51735624dafd46f9a5b9cab3b43ae1ac874f4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0c51735624dafd46f9a5b9cab3b43ae1ac874f4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b65745545f410b31c5ecdd33a8299a65da578af2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b65745545f410b31c5ecdd33a8299a65da578af2", "html_url": "https://github.com/rust-lang/rust/commit/b65745545f410b31c5ecdd33a8299a65da578af2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b65745545f410b31c5ecdd33a8299a65da578af2/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "159178e5d4a023f3945b504b49d3742b40453fee", "url": "https://api.github.com/repos/rust-lang/rust/commits/159178e5d4a023f3945b504b49d3742b40453fee", "html_url": "https://github.com/rust-lang/rust/commit/159178e5d4a023f3945b504b49d3742b40453fee"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "d4e070b0c24bd9e918f8515b8ecf08fda5e7df95", "filename": "clippy_lints/src/atomic_ordering.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b65745545f410b31c5ecdd33a8299a65da578af2/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b65745545f410b31c5ecdd33a8299a65da578af2/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fatomic_ordering.rs?ref=b65745545f410b31c5ecdd33a8299a65da578af2", "patch": "@@ -18,22 +18,22 @@ declare_clippy_lint! {\n     ///\n     /// **Example:**\n     /// ```rust,no_run\n-    /// # use std::sync::atomic::{self, AtomicBool, Ordering};\n+    /// # use std::sync::atomic::{self, AtomicU8, Ordering};\n     ///\n-    /// let x = AtomicBool::new(true);\n+    /// let x = AtomicU8::new(0);\n     ///\n     /// let _ = x.load(Ordering::Release);\n     /// let _ = x.load(Ordering::AcqRel);\n     ///\n-    /// x.store(false, Ordering::Acquire);\n-    /// x.store(false, Ordering::AcqRel);\n+    /// x.store(1, Ordering::Acquire);\n+    /// x.store(2, Ordering::AcqRel);\n     ///\n     /// atomic::fence(Ordering::Relaxed);\n     /// atomic::compiler_fence(Ordering::Relaxed);\n     ///\n-    /// let _ = x.compare_exchange(false, false, Ordering::Relaxed, Ordering::SeqCst);\n-    /// let _ = x.compare_exchange_weak(false, true, Ordering::SeqCst, Ordering::Release);\n-    /// let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |val| Some(val ^ val));\n+    /// let _ = x.compare_exchange(1, 2, Ordering::Relaxed, Ordering::SeqCst);\n+    /// let _ = x.compare_exchange_weak(2, 3, Ordering::SeqCst, Ordering::Release);\n+    /// let _ = x.fetch_update(Ordering::AcqRel, Ordering::AcqRel, |val| Some(val + val));\n     /// ```\n     pub INVALID_ATOMIC_ORDERING,\n     correctness,"}]}