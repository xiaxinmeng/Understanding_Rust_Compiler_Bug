{"sha": "21eff8f050b80e28309f72f659339ecfba2e0344", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZWZmOGYwNTBiODBlMjgzMDlmNzJmNjU5MzM5ZWNmYmEyZTAzNDQ=", "commit": {"author": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2021-08-06T19:34:29Z"}, "committer": {"name": "Hirochika Matsumoto", "email": "git@hkmatsumoto.com", "date": "2021-09-19T11:01:23Z"}, "message": "Suggest replacing braces for brackets on array-esque invalid block expr\n\nNewcomers may write `{1, 2, 3}` for making arrays, and the current error\nmessage is not informative enough to quickly convince them what is\nneeded to fix the error.\nThis PR implements a diagnostic for this case, and its output looks like\nthis:\n```text\nerror: this code is interpreted as a block expression, not an array\n --> src/lib.rs:1:22\n  |\n1 |   const FOO: [u8; 3] = {\n  |  ______________________^\n2 | |     1, 2, 3\n3 | | };\n  | |_^\n  |\n  = note: to define an array, one would use square brackets instead of curly braces\nhelp: try using [] instead of {}\n  |\n1 | const FOO: [u8; 3] = [\n2 |     1, 2, 3\n3 | ];\n  |\n```\n\nFix #87672", "tree": {"sha": "bf165321dfdbb188cdb04e21ad3eea1361b4d2b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bf165321dfdbb188cdb04e21ad3eea1361b4d2b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21eff8f050b80e28309f72f659339ecfba2e0344", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21eff8f050b80e28309f72f659339ecfba2e0344", "html_url": "https://github.com/rust-lang/rust/commit/21eff8f050b80e28309f72f659339ecfba2e0344", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21eff8f050b80e28309f72f659339ecfba2e0344/comments", "author": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "hkmatsumoto", "id": 57856193, "node_id": "MDQ6VXNlcjU3ODU2MTkz", "avatar_url": "https://avatars.githubusercontent.com/u/57856193?v=4", "gravatar_id": "", "url": "https://api.github.com/users/hkmatsumoto", "html_url": "https://github.com/hkmatsumoto", "followers_url": "https://api.github.com/users/hkmatsumoto/followers", "following_url": "https://api.github.com/users/hkmatsumoto/following{/other_user}", "gists_url": "https://api.github.com/users/hkmatsumoto/gists{/gist_id}", "starred_url": "https://api.github.com/users/hkmatsumoto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/hkmatsumoto/subscriptions", "organizations_url": "https://api.github.com/users/hkmatsumoto/orgs", "repos_url": "https://api.github.com/users/hkmatsumoto/repos", "events_url": "https://api.github.com/users/hkmatsumoto/events{/privacy}", "received_events_url": "https://api.github.com/users/hkmatsumoto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8e398f5ba77b283b529c0c61cc2313c4f82d61dd", "url": "https://api.github.com/repos/rust-lang/rust/commits/8e398f5ba77b283b529c0c61cc2313c4f82d61dd", "html_url": "https://github.com/rust-lang/rust/commit/8e398f5ba77b283b529c0c61cc2313c4f82d61dd"}], "stats": {"total": 124, "additions": 120, "deletions": 4}, "files": [{"sha": "c62ea66b693e3153940dd1dec6cb6dba7525a219", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/21eff8f050b80e28309f72f659339ecfba2e0344/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21eff8f050b80e28309f72f659339ecfba2e0344/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=21eff8f050b80e28309f72f659339ecfba2e0344", "patch": "@@ -1204,7 +1204,7 @@ impl<'a> Parser<'a> {\n         } else if self.check(&token::BinOp(token::Or)) || self.check(&token::OrOr) {\n             self.parse_closure_expr(attrs)\n         } else if self.check(&token::OpenDelim(token::Bracket)) {\n-            self.parse_array_or_repeat_expr(attrs)\n+            self.parse_array_or_repeat_expr(attrs, token::Bracket)\n         } else if self.check_path() {\n             self.parse_path_start_expr(attrs)\n         } else if self.check_keyword(kw::Move) || self.check_keyword(kw::Static) {\n@@ -1322,11 +1322,15 @@ impl<'a> Parser<'a> {\n         self.maybe_recover_from_bad_qpath(expr, true)\n     }\n \n-    fn parse_array_or_repeat_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n+    fn parse_array_or_repeat_expr(\n+        &mut self,\n+        attrs: AttrVec,\n+        close_delim: token::DelimToken,\n+    ) -> PResult<'a, P<Expr>> {\n         let lo = self.token.span;\n-        self.bump(); // `[`\n+        self.bump(); // `[` or other open delim\n \n-        let close = &token::CloseDelim(token::Bracket);\n+        let close = &token::CloseDelim(close_delim);\n         let kind = if self.eat(close) {\n             // Empty vector\n             ExprKind::Array(Vec::new())\n@@ -1752,6 +1756,46 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    fn is_array_like_block(&mut self) -> bool {\n+        self.look_ahead(1, |t| matches!(t.kind, TokenKind::Ident(..) | TokenKind::Literal(_)))\n+            && self.look_ahead(2, |t| t == &token::Comma)\n+            && self.look_ahead(3, |t| t.can_begin_expr())\n+    }\n+\n+    /// Emits a suggestion if it looks like the user meant an array but\n+    /// accidentally used braces, causing the code to be interpreted as a block\n+    /// expression.\n+    fn maybe_suggest_brackets_instead_of_braces(\n+        &mut self,\n+        lo: Span,\n+        attrs: AttrVec,\n+    ) -> Option<P<Expr>> {\n+        let mut snapshot = self.clone();\n+        match snapshot.parse_array_or_repeat_expr(attrs, token::Brace) {\n+            Ok(arr) => {\n+                let hi = snapshot.prev_token.span;\n+                self.struct_span_err(\n+                    arr.span,\n+                    \"this code is interpreted as a block expression, not an array\",\n+                )\n+                .multipart_suggestion(\n+                    \"try using [] instead of {}\",\n+                    vec![(lo, \"[\".to_owned()), (hi, \"]\".to_owned())],\n+                    Applicability::MaybeIncorrect,\n+                )\n+                .note(\"to define an array, one would use square brackets instead of curly braces\")\n+                .emit();\n+\n+                *self = snapshot;\n+                Some(self.mk_expr_err(arr.span))\n+            }\n+            Err(mut e) => {\n+                e.cancel();\n+                None\n+            }\n+        }\n+    }\n+\n     /// Parses a block or unsafe block.\n     pub(super) fn parse_block_expr(\n         &mut self,\n@@ -1760,6 +1804,12 @@ impl<'a> Parser<'a> {\n         blk_mode: BlockCheckMode,\n         mut attrs: AttrVec,\n     ) -> PResult<'a, P<Expr>> {\n+        if self.is_array_like_block() {\n+            if let Some(arr) = self.maybe_suggest_brackets_instead_of_braces(lo, attrs.clone()) {\n+                return Ok(arr);\n+            }\n+        }\n+\n         if let Some(label) = opt_label {\n             self.sess.gated_spans.gate(sym::label_break_value, label.ident.span);\n         }"}, {"sha": "53dad85900a65ae1b478e5efc421c8fa4813ede2", "filename": "src/test/ui/did_you_mean/issue-87830-try-brackets-for-arrays.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/21eff8f050b80e28309f72f659339ecfba2e0344/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-87830-try-brackets-for-arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21eff8f050b80e28309f72f659339ecfba2e0344/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-87830-try-brackets-for-arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-87830-try-brackets-for-arrays.rs?ref=21eff8f050b80e28309f72f659339ecfba2e0344", "patch": "@@ -0,0 +1,17 @@\n+fn main() {}\n+\n+const FOO: [u8; 3] = { //~ ERROR this code is interpreted as a block expression\n+    1, 2, 3\n+};\n+\n+const BAR: [&str; 3] = {\"one\", \"two\", \"three\"};\n+//~^ ERROR this code is interpreted as a block expression\n+\n+fn foo() {\n+    {1, 2, 3};\n+    //~^ ERROR this code is interpreted as a block expression\n+}\n+\n+fn bar() {\n+    1, 2, 3 //~ ERROR expected one of\n+}"}, {"sha": "9ab491f5c238f03f39266198fcb04c4614a8c315", "filename": "src/test/ui/did_you_mean/issue-87830-try-brackets-for-arrays.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/21eff8f050b80e28309f72f659339ecfba2e0344/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-87830-try-brackets-for-arrays.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/21eff8f050b80e28309f72f659339ecfba2e0344/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-87830-try-brackets-for-arrays.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-87830-try-brackets-for-arrays.stderr?ref=21eff8f050b80e28309f72f659339ecfba2e0344", "patch": "@@ -0,0 +1,49 @@\n+error: this code is interpreted as a block expression, not an array\n+  --> $DIR/issue-87830-try-brackets-for-arrays.rs:3:22\n+   |\n+LL |   const FOO: [u8; 3] = {\n+   |  ______________________^\n+LL | |     1, 2, 3\n+LL | | };\n+   | |_^\n+   |\n+   = note: to define an array, one would use square brackets instead of curly braces\n+help: try using [] instead of {}\n+   |\n+LL ~ const FOO: [u8; 3] = [\n+LL |     1, 2, 3\n+LL ~ ];\n+   |\n+\n+error: this code is interpreted as a block expression, not an array\n+  --> $DIR/issue-87830-try-brackets-for-arrays.rs:7:24\n+   |\n+LL | const BAR: [&str; 3] = {\"one\", \"two\", \"three\"};\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: to define an array, one would use square brackets instead of curly braces\n+help: try using [] instead of {}\n+   |\n+LL | const BAR: [&str; 3] = [\"one\", \"two\", \"three\"];\n+   |                        ~                     ~\n+\n+error: this code is interpreted as a block expression, not an array\n+  --> $DIR/issue-87830-try-brackets-for-arrays.rs:11:5\n+   |\n+LL |     {1, 2, 3};\n+   |     ^^^^^^^^^\n+   |\n+   = note: to define an array, one would use square brackets instead of curly braces\n+help: try using [] instead of {}\n+   |\n+LL |     [1, 2, 3];\n+   |     ~       ~\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `,`\n+  --> $DIR/issue-87830-try-brackets-for-arrays.rs:16:6\n+   |\n+LL |     1, 2, 3\n+   |      ^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: aborting due to 4 previous errors\n+"}]}