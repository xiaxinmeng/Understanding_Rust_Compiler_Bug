{"sha": "4e86dcdb7295e88d3ccc28b508ba69a24fefa371", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlODZkY2RiNzI5NWU4OGQzY2NjMjhiNTA4YmE2OWEyNGZlZmEzNzE=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2015-12-18T22:44:32Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-01-06T11:57:51Z"}, "message": "Remove diverge terminator\n\nUnreachable terminator can be contained all within the trans.", "tree": {"sha": "b68f30dd6698552c9b331693e6b73968ad42d02f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b68f30dd6698552c9b331693e6b73968ad42d02f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e86dcdb7295e88d3ccc28b508ba69a24fefa371", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e86dcdb7295e88d3ccc28b508ba69a24fefa371", "html_url": "https://github.com/rust-lang/rust/commit/4e86dcdb7295e88d3ccc28b508ba69a24fefa371", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b34690842474019c0a1c6cd4d0a7b75108e9d2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b34690842474019c0a1c6cd4d0a7b75108e9d2d", "html_url": "https://github.com/rust-lang/rust/commit/5b34690842474019c0a1c6cd4d0a7b75108e9d2d"}], "stats": {"total": 107, "additions": 40, "deletions": 67}, "files": [{"sha": "2878b3d5e4e9af1da1447d2c2488384a1643fb14", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=4e86dcdb7295e88d3ccc28b508ba69a24fefa371", "patch": "@@ -51,9 +51,6 @@ pub const START_BLOCK: BasicBlock = BasicBlock(0);\n /// where execution ends, on normal return\n pub const END_BLOCK: BasicBlock = BasicBlock(1);\n \n-/// where execution ends, on panic\n-pub const DIVERGE_BLOCK: BasicBlock = BasicBlock(2);\n-\n impl<'tcx> Mir<'tcx> {\n     pub fn all_basic_blocks(&self) -> Vec<BasicBlock> {\n         (0..self.basic_blocks.len())\n@@ -194,7 +191,7 @@ impl Debug for BasicBlock {\n #[derive(Debug, RustcEncodable, RustcDecodable)]\n pub struct BasicBlockData<'tcx> {\n     pub statements: Vec<Statement<'tcx>>,\n-    pub terminator: Terminator<'tcx>,\n+    pub terminator: Option<Terminator<'tcx>>,\n }\n \n #[derive(RustcEncodable, RustcDecodable)]\n@@ -237,14 +234,6 @@ pub enum Terminator<'tcx> {\n         targets: Vec<BasicBlock>,\n     },\n \n-    /// Indicates that the last statement in the block panics, aborts,\n-    /// etc. No successors. This terminator appears on exactly one\n-    /// basic block which we create in advance. However, during\n-    /// construction, we use this value as a sentinel for \"terminator\n-    /// not yet assigned\", and assert at the end that only the\n-    /// well-known diverging block actually diverges.\n-    Diverge,\n-\n     /// Indicates that the landing pad is finished and unwinding should\n     /// continue. Emitted by build::scope::diverge_cleanup.\n     Resume,\n@@ -317,7 +306,6 @@ impl<'tcx> Terminator<'tcx> {\n             If { targets: ref b, .. } => b.as_slice(),\n             Switch { targets: ref b, .. } => b,\n             SwitchInt { targets: ref b, .. } => b,\n-            Diverge => &[],\n             Resume => &[],\n             Return => &[],\n             Call { targets: ref b, .. } => b.as_slice(),\n@@ -336,7 +324,6 @@ impl<'tcx> Terminator<'tcx> {\n             If { targets: ref mut b, .. } => b.as_mut_slice(),\n             Switch { targets: ref mut b, .. } => b,\n             SwitchInt { targets: ref mut b, .. } => b,\n-            Diverge => &mut [],\n             Resume => &mut [],\n             Return => &mut [],\n             Call { targets: ref mut b, .. } => b.as_mut_slice(),\n@@ -350,12 +337,24 @@ impl<'tcx> Terminator<'tcx> {\n }\n \n impl<'tcx> BasicBlockData<'tcx> {\n-    pub fn new(terminator: Terminator<'tcx>) -> BasicBlockData<'tcx> {\n+    pub fn new(terminator: Option<Terminator<'tcx>>) -> BasicBlockData<'tcx> {\n         BasicBlockData {\n             statements: vec![],\n             terminator: terminator,\n         }\n     }\n+\n+    /// Accessor for terminator.\n+    ///\n+    /// Terminator may not be None after construction of the basic block is complete. This accessor\n+    /// provides a convenience way to reach the terminator.\n+    pub fn terminator(&self) -> &Terminator<'tcx> {\n+        self.terminator.as_ref().expect(\"invalid terminator state\")\n+    }\n+\n+    pub fn terminator_mut(&mut self) -> &mut Terminator<'tcx> {\n+        self.terminator.as_mut().expect(\"invalid terminator state\")\n+    }\n }\n \n impl<'tcx> Debug for Terminator<'tcx> {\n@@ -396,7 +395,6 @@ impl<'tcx> Terminator<'tcx> {\n             If { cond: ref lv, .. } => write!(fmt, \"if({:?})\", lv),\n             Switch { discr: ref lv, .. } => write!(fmt, \"switch({:?})\", lv),\n             SwitchInt { discr: ref lv, .. } => write!(fmt, \"switchInt({:?})\", lv),\n-            Diverge => write!(fmt, \"diverge\"),\n             Return => write!(fmt, \"return\"),\n             Resume => write!(fmt, \"resume\"),\n             Call { .. } => {\n@@ -414,7 +412,7 @@ impl<'tcx> Terminator<'tcx> {\n     pub fn fmt_successor_labels(&self) -> Vec<Cow<'static, str>> {\n         use self::Terminator::*;\n         match *self {\n-            Diverge | Return | Resume => vec![],\n+            Return | Resume => vec![],\n             Goto { .. } => vec![\"\".into_cow()],\n             If { .. } => vec![\"true\".into_cow(), \"false\".into_cow()],\n             Call { .. } => vec![\"return\".into_cow(), \"unwind\".into_cow()],"}, {"sha": "52bb9aa3d5c5a8d43d1e0d6fbd577968869dd14b", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=4e86dcdb7295e88d3ccc28b508ba69a24fefa371", "patch": "@@ -84,7 +84,7 @@ pub trait Visitor<'tcx> {\n         for statement in &data.statements {\n             self.visit_statement(block, statement);\n         }\n-        self.visit_terminator(block, &data.terminator);\n+        data.terminator.as_ref().map(|r| self.visit_terminator(block, r));\n     }\n \n     fn super_statement(&mut self, block: BasicBlock, statement: &Statement<'tcx>) {\n@@ -132,7 +132,6 @@ pub trait Visitor<'tcx> {\n                 }\n             }\n \n-            Terminator::Diverge |\n             Terminator::Resume |\n             Terminator::Return => {\n             }\n@@ -374,7 +373,7 @@ pub trait MutVisitor<'tcx> {\n         for statement in &mut data.statements {\n             self.visit_statement(block, statement);\n         }\n-        self.visit_terminator(block, &mut data.terminator);\n+        data.terminator.as_mut().map(|r| self.visit_terminator(block, r));\n     }\n \n     fn super_statement(&mut self,\n@@ -429,7 +428,6 @@ pub trait MutVisitor<'tcx> {\n                 }\n             }\n \n-            Terminator::Diverge |\n             Terminator::Resume |\n             Terminator::Return => {\n             }"}, {"sha": "2e70e6bb5ae0499e1a56eada967ae9258114459f", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=4e86dcdb7295e88d3ccc28b508ba69a24fefa371", "patch": "@@ -28,7 +28,7 @@ impl<'tcx> CFG<'tcx> {\n \n     pub fn start_new_block(&mut self) -> BasicBlock {\n         let node_index = self.basic_blocks.len();\n-        self.basic_blocks.push(BasicBlockData::new(Terminator::Diverge));\n+        self.basic_blocks.push(BasicBlockData::new(None));\n         BasicBlock::new(node_index)\n     }\n \n@@ -67,15 +67,9 @@ impl<'tcx> CFG<'tcx> {\n     pub fn terminate(&mut self,\n                      block: BasicBlock,\n                      terminator: Terminator<'tcx>) {\n-        // Check whether this block has already been terminated. For\n-        // this, we rely on the fact that the initial state is to have\n-        // a Diverge terminator and an empty list of targets (which\n-        // is not a valid state).\n-        debug_assert!(match self.block_data(block).terminator { Terminator::Diverge => true,\n-                                                                _ => false },\n+        debug_assert!(self.block_data(block).terminator.is_none(),\n                       \"terminate: block {:?} already has a terminator set\", block);\n-\n-        self.block_data_mut(block).terminator = terminator;\n+        self.block_data_mut(block).terminator = Some(terminator);\n     }\n }\n "}, {"sha": "e6e5b8380b24121a05d062ad3625ab4df0c2d02e", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=4e86dcdb7295e88d3ccc28b508ba69a24fefa371", "patch": "@@ -107,7 +107,6 @@ pub fn construct<'a,'tcx>(mut hir: Cx<'a,'tcx>,\n \n     assert_eq!(builder.cfg.start_new_block(), START_BLOCK);\n     assert_eq!(builder.cfg.start_new_block(), END_BLOCK);\n-    assert_eq!(builder.cfg.start_new_block(), DIVERGE_BLOCK);\n \n     let mut block = START_BLOCK;\n     let arg_decls = unpack!(block = builder.args_and_body(block,"}, {"sha": "1b8fe6505583c43664cc0f7ea3c9c5bdf9a697df", "filename": "src/librustc_mir/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc_mir%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc_mir%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fgraphviz.rs?ref=4e86dcdb7295e88d3ccc28b508ba69a24fefa371", "patch": "@@ -62,7 +62,7 @@ fn write_node<W: Write>(block: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<(\n     // Terminator head at the bottom, not including the list of successor blocks. Those will be\n     // displayed as labels on the edges between blocks.\n     let mut terminator_head = String::new();\n-    data.terminator.fmt_head(&mut terminator_head).unwrap();\n+    data.terminator().fmt_head(&mut terminator_head).unwrap();\n     try!(write!(w, r#\"<tr><td align=\"left\">{}</td></tr>\"#, dot::escape_html(&terminator_head)));\n \n     // Close the table, node label, and the node itself.\n@@ -71,7 +71,7 @@ fn write_node<W: Write>(block: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<(\n \n /// Write graphviz DOT edges with labels between the given basic block and all of its successors.\n fn write_edges<W: Write>(source: BasicBlock, mir: &Mir, w: &mut W) -> io::Result<()> {\n-    let terminator = &mir.basic_block_data(source).terminator;\n+    let terminator = &mir.basic_block_data(source).terminator();\n     let labels = terminator.fmt_successor_labels();\n \n     for (&target, label) in terminator.successors().iter().zip(labels) {"}, {"sha": "01d873abc6f92b77718f4189df7a3a7d2afdc216", "filename": "src/librustc_mir/transform/erase_regions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ferase_regions.rs?ref=4e86dcdb7295e88d3ccc28b508ba69a24fefa371", "patch": "@@ -59,7 +59,7 @@ impl<'a, 'tcx> EraseRegions<'a, 'tcx> {\n             self.erase_regions_statement(statement);\n         }\n \n-        self.erase_regions_terminator(&mut basic_block.terminator);\n+        self.erase_regions_terminator(basic_block.terminator_mut());\n     }\n \n     fn erase_regions_statement(&mut self,\n@@ -79,7 +79,6 @@ impl<'a, 'tcx> EraseRegions<'a, 'tcx> {\n                                 terminator: &mut Terminator<'tcx>) {\n         match *terminator {\n             Terminator::Goto { .. } |\n-            Terminator::Diverge |\n             Terminator::Resume |\n             Terminator::Return => {\n                 /* nothing to do */"}, {"sha": "7a5a00a8d560b6e83cde98c3418e7094c72730c6", "filename": "src/librustc_mir/transform/simplify_cfg.rs", "status": "modified", "additions": 10, "deletions": 16, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify_cfg.rs?ref=4e86dcdb7295e88d3ccc28b508ba69a24fefa371", "patch": "@@ -10,7 +10,6 @@\n \n use rustc::middle::const_eval::ConstVal;\n use rustc::mir::repr::*;\n-use std::mem;\n use transform::util;\n use transform::MirPass;\n \n@@ -27,11 +26,10 @@ impl SimplifyCfg {\n         // These blocks are always required.\n         seen[START_BLOCK.index()] = true;\n         seen[END_BLOCK.index()] = true;\n-        seen[DIVERGE_BLOCK.index()] = true;\n \n         let mut worklist = vec![START_BLOCK];\n         while let Some(bb) = worklist.pop() {\n-            for succ in mir.basic_block_data(bb).terminator.successors() {\n+            for succ in mir.basic_block_data(bb).terminator().successors() {\n                 if !seen[succ.index()] {\n                     seen[succ.index()] = true;\n                     worklist.push(*succ);\n@@ -51,7 +49,7 @@ impl SimplifyCfg {\n \n             while mir.basic_block_data(target).statements.is_empty() {\n                 match mir.basic_block_data(target).terminator {\n-                    Terminator::Goto { target: next } => {\n+                    Some(Terminator::Goto { target: next }) => {\n                         if seen.contains(&next) {\n                             return None;\n                         }\n@@ -67,9 +65,9 @@ impl SimplifyCfg {\n \n         let mut changed = false;\n         for bb in mir.all_basic_blocks() {\n-            // Temporarily swap out the terminator we're modifying to keep borrowck happy\n-            let mut terminator = Terminator::Diverge;\n-            mem::swap(&mut terminator, &mut mir.basic_block_data_mut(bb).terminator);\n+            // Temporarily take ownership of the terminator we're modifying to keep borrowck happy\n+            let mut terminator = mir.basic_block_data_mut(bb).terminator.take()\n+                                    .expect(\"invalid terminator state\");\n \n             for target in terminator.successors_mut() {\n                 let new_target = match final_target(mir, *target) {\n@@ -80,22 +78,19 @@ impl SimplifyCfg {\n                 changed |= *target != new_target;\n                 *target = new_target;\n             }\n-\n-            mir.basic_block_data_mut(bb).terminator = terminator;\n+            mir.basic_block_data_mut(bb).terminator = Some(terminator);\n         }\n-\n         changed\n     }\n \n     fn simplify_branches(&self, mir: &mut Mir) -> bool {\n         let mut changed = false;\n \n         for bb in mir.all_basic_blocks() {\n-            // Temporarily swap out the terminator we're modifying to keep borrowck happy\n-            let mut terminator = Terminator::Diverge;\n-            mem::swap(&mut terminator, &mut mir.basic_block_data_mut(bb).terminator);\n+            let basic_block = mir.basic_block_data_mut(bb);\n+            let mut terminator = basic_block.terminator_mut();\n \n-            mir.basic_block_data_mut(bb).terminator = match terminator {\n+            *terminator = match *terminator {\n                 Terminator::If { ref targets, .. } if targets.0 == targets.1 => {\n                     changed = true;\n                     Terminator::Goto { target: targets.0 }\n@@ -115,7 +110,7 @@ impl SimplifyCfg {\n                 Terminator::SwitchInt { ref targets, .. }  if targets.len() == 1 => {\n                     Terminator::Goto { target: targets[0] }\n                 }\n-                _ => terminator\n+                _ => continue\n             }\n         }\n \n@@ -131,7 +126,6 @@ impl<'tcx> MirPass<'tcx> for SimplifyCfg {\n             changed |= self.remove_goto_chains(mir);\n             self.remove_dead_blocks(mir);\n         }\n-\n         // FIXME: Should probably be moved into some kind of pass manager\n         mir.basic_blocks.shrink_to_fit();\n     }"}, {"sha": "7e44beb18a2e96c8029a5bf61974308ba0fa383f", "filename": "src/librustc_mir/transform/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc_mir%2Ftransform%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc_mir%2Ftransform%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Futil.rs?ref=4e86dcdb7295e88d3ccc28b508ba69a24fefa371", "patch": "@@ -15,7 +15,7 @@ use rustc::mir::repr::*;\n /// in a single pass\n pub fn update_basic_block_ids(mir: &mut Mir, replacements: &[BasicBlock]) {\n     for bb in mir.all_basic_blocks() {\n-        for target in mir.basic_block_data_mut(bb).terminator.successors_mut() {\n+        for target in mir.basic_block_data_mut(bb).terminator_mut().successors_mut() {\n             *target = replacements[target.index()];\n         }\n     }"}, {"sha": "c2645d9882b42160828af622d1a2b740788ba6d5", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=4e86dcdb7295e88d3ccc28b508ba69a24fefa371", "patch": "@@ -33,9 +33,9 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n             bcx = self.trans_statement(bcx, statement);\n         }\n \n-        debug!(\"trans_block: terminator: {:?}\", data.terminator);\n+        debug!(\"trans_block: terminator: {:?}\", data.terminator());\n \n-        match data.terminator {\n+        match *data.terminator() {\n             mir::Terminator::Goto { target } => {\n                 build::Br(bcx, self.llblock(target), DebugLoc::None)\n             }\n@@ -82,10 +82,6 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                 }\n             }\n \n-            mir::Terminator::Diverge => {\n-                build::Unreachable(bcx);\n-            }\n-\n             mir::Terminator::Resume => {\n                 if let Some(llpersonalityslot) = self.llpersonalityslot {\n                     let lp = build::Load(bcx, llpersonalityslot);"}, {"sha": "5403b53596c489d99b007514d3d647b9f9dde893", "filename": "src/librustc_trans/trans/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e86dcdb7295e88d3ccc28b508ba69a24fefa371/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs?ref=4e86dcdb7295e88d3ccc28b508ba69a24fefa371", "patch": "@@ -125,16 +125,11 @@ pub fn trans_mir<'bcx, 'tcx>(bcx: Block<'bcx, 'tcx>) {\n \n     // Translate the body of each block\n     for &bb in &mir_blocks {\n-        if bb != mir::DIVERGE_BLOCK {\n-            mircx.trans_block(bb);\n-        }\n+        // NB that we do not handle the Resume terminator specially, because a block containing\n+        // that terminator will have a higher block number than a function call which should take\n+        // care of filling in that information.\n+        mircx.trans_block(bb);\n     }\n-\n-    // Total hack: translate DIVERGE_BLOCK last. This is so that any\n-    // panics which the fn may do can initialize the\n-    // `llpersonalityslot` cell. We don't do this up front because the\n-    // LLVM type of it is (frankly) annoying to compute.\n-    mircx.trans_block(mir::DIVERGE_BLOCK);\n }\n \n /// Produce, for each argument, a `ValueRef` pointing at the"}]}