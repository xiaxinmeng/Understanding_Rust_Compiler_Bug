{"sha": "374f798ad2f10280f75a3561f2dc9449ccb5e5fe", "node_id": "C_kwDOAAsO6NoAKDM3NGY3OThhZDJmMTAyODBmNzVhMzU2MWYyZGM5NDQ5Y2NiNWU1ZmU", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-02-14T23:00:51Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-02-14T23:00:51Z"}, "message": "Correctly handle reexports of `#[doc(hidden)]` is reexport does not use `#[doc(inline)]`", "tree": {"sha": "63fb8a5d47ad1f2b66ef71ac5fefb38ec2ee5574", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63fb8a5d47ad1f2b66ef71ac5fefb38ec2ee5574"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/374f798ad2f10280f75a3561f2dc9449ccb5e5fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/374f798ad2f10280f75a3561f2dc9449ccb5e5fe", "html_url": "https://github.com/rust-lang/rust/commit/374f798ad2f10280f75a3561f2dc9449ccb5e5fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/374f798ad2f10280f75a3561f2dc9449ccb5e5fe/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ec1d9481253ad828a648a2ca9a2556b6efd69cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec1d9481253ad828a648a2ca9a2556b6efd69cc", "html_url": "https://github.com/rust-lang/rust/commit/1ec1d9481253ad828a648a2ca9a2556b6efd69cc"}], "stats": {"total": 32, "additions": 25, "deletions": 7}, "files": [{"sha": "80f05863d0ec1bff2fdbd5b07ece300445d620f0", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/374f798ad2f10280f75a3561f2dc9449ccb5e5fe/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/374f798ad2f10280f75a3561f2dc9449ccb5e5fe/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=374f798ad2f10280f75a3561f2dc9449ccb5e5fe", "patch": "@@ -2100,14 +2100,15 @@ fn get_all_import_attributes<'hir>(\n     tcx: TyCtxt<'hir>,\n     target_def_id: LocalDefId,\n     attributes: &mut Vec<ast::Attribute>,\n+    is_inline: bool,\n ) {\n     let hir_map = tcx.hir();\n     let mut visitor = OneLevelVisitor::new(hir_map, target_def_id);\n     let mut visited = FxHashSet::default();\n     // If the item is an import and has at least a path with two parts, we go into it.\n     while let hir::ItemKind::Use(path, _) = item.kind && visited.insert(item.hir_id()) {\n         // We add the attributes from this import into the list.\n-        add_without_unwanted_attributes(attributes, hir_map.attrs(item.hir_id()));\n+        add_without_unwanted_attributes(attributes, hir_map.attrs(item.hir_id()), is_inline);\n \n         let def_id = if path.segments.len() > 1 {\n             match path.segments[path.segments.len() - 2].res {\n@@ -2189,7 +2190,16 @@ fn filter_tokens_from_list(\n /// * `doc(inline)`\n /// * `doc(no_inline)`\n /// * `doc(hidden)`\n-fn add_without_unwanted_attributes(attrs: &mut Vec<ast::Attribute>, new_attrs: &[ast::Attribute]) {\n+fn add_without_unwanted_attributes(\n+    attrs: &mut Vec<ast::Attribute>,\n+    new_attrs: &[ast::Attribute],\n+    is_inline: bool,\n+) {\n+    // If it's `#[doc(inline)]`, we don't want all attributes, otherwise we keep everything.\n+    if !is_inline {\n+        attrs.extend_from_slice(new_attrs);\n+        return;\n+    }\n     for attr in new_attrs {\n         let mut attr = attr.clone();\n         match attr.kind {\n@@ -2321,9 +2331,10 @@ fn clean_maybe_renamed_item<'tcx>(\n         {\n             // First, we add the attributes from the current import.\n             extra_attrs.extend_from_slice(inline::load_attrs(cx, import_id.to_def_id()));\n+            let is_inline = extra_attrs.lists(sym::doc).get_word_attr(sym::inline).is_some();\n             // Then we get all the various imports' attributes.\n-            get_all_import_attributes(use_node, cx.tcx, item.owner_id.def_id, &mut extra_attrs);\n-            add_without_unwanted_attributes(&mut extra_attrs, inline::load_attrs(cx, def_id));\n+            get_all_import_attributes(use_node, cx.tcx, item.owner_id.def_id, &mut extra_attrs, is_inline);\n+            add_without_unwanted_attributes(&mut extra_attrs, inline::load_attrs(cx, def_id), is_inline);\n         } else {\n             // We only keep the item's attributes.\n             extra_attrs.extend_from_slice(inline::load_attrs(cx, def_id));"}, {"sha": "f6c23a1365f46ea389b706ea4b4bc1b1231a1799", "filename": "tests/rustdoc/reexport-attr-merge.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/374f798ad2f10280f75a3561f2dc9449ccb5e5fe/tests%2Frustdoc%2Freexport-attr-merge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/374f798ad2f10280f75a3561f2dc9449ccb5e5fe/tests%2Frustdoc%2Freexport-attr-merge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Freexport-attr-merge.rs?ref=374f798ad2f10280f75a3561f2dc9449ccb5e5fe", "patch": "@@ -1,5 +1,6 @@\n // Regression test for <https://github.com/rust-lang/rust/issues/59368>.\n-// The goal is to ensure that `doc(hidden)`, `doc(inline)` and `doc(no_inline`)\n+// The goal is to ensure that `doc(hidden)`, `doc(inline)` and `doc(no_inline)`\n+// are not copied from an item when inlined.\n \n #![crate_name = \"foo\"]\n #![feature(doc_cfg)]\n@@ -15,12 +16,18 @@ pub use Foo as Foo1;\n #[doc(hidden, inline)]\n pub use Foo1 as Foo2;\n \n-// First we ensure that none of the other items are generated.\n-// @count - '//a[@class=\"struct\"]' 1\n+// First we ensure that only the reexport `Bar2` and the inlined struct `Bar`\n+// are inlined.\n+// @count - '//a[@class=\"struct\"]' 2\n // Then we check that both `cfg` are displayed.\n // @has - '//*[@class=\"stab portability\"]' 'foo'\n // @has - '//*[@class=\"stab portability\"]' 'bar'\n // And finally we check that the only element displayed is `Bar`.\n // @has - '//a[@class=\"struct\"]' 'Bar'\n #[doc(inline)]\n pub use Foo2 as Bar;\n+\n+// This one should appear but `Bar2` won't be linked because there is no\n+// `#[doc(inline)]`.\n+// @has - '//*[@id=\"reexport.Bar2\"]' 'pub use Foo2 as Bar2;'\n+pub use Foo2 as Bar2;"}]}