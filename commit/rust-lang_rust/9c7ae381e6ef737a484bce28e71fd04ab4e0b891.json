{"sha": "9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "node_id": "C_kwDOAAsO6NoAKDljN2FlMzgxZTZlZjczN2E0ODRiY2UyOGU3MWZkMDRhYjRlMGI4OTE", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-02-27T06:08:31Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-09-15T19:21:14Z"}, "message": "Remove the let_else feature gate from the testsuite\n\nResult of running:\n\nrg -l \"feature.let_else\" src/test/  | xargs sed -s -i \"s#^...feature.let_else..\\$##\"\n\nPlus manual tidy fixes.", "tree": {"sha": "bd8516c6a0ada14f85ff25f49ba96b7391af2454", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd8516c6a0ada14f85ff25f49ba96b7391af2454"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "html_url": "https://github.com/rust-lang/rust/commit/9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "173eb6f407438dff732b1636b5134ff220da3f5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/173eb6f407438dff732b1636b5134ff220da3f5b", "html_url": "https://github.com/rust-lang/rust/commit/173eb6f407438dff732b1636b5134ff220da3f5b"}], "stats": {"total": 140, "additions": 62, "deletions": 78}, "files": [{"sha": "3fb2142b9e5d8aca7862bf960a1cc785da689d70", "filename": "src/test/ui/async-await/async-await-let-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fasync-await-let-else.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -2,7 +2,7 @@\n // revisions: drop-tracking no-drop-tracking\n // [drop-tracking] compile-flags: -Zdrop-tracking=yes\n // [no-drop-tracking] compile-flags: -Zdrop-tracking=no\n-#![feature(let_else)]\n+\n use std::rc::Rc;\n \n async fn foo(x: Option<bool>) {"}, {"sha": "f5f9b2f5f0634b59f3ef41cc605b3b392d5fe752", "filename": "src/test/ui/let-else/issue-100103.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Fissue-100103.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Fissue-100103.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-100103.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -2,7 +2,7 @@\n // check-pass\n \n #![feature(try_blocks)]\n-#![feature(let_else)]\n+\n \n fn main() {\n     let _: Result<i32, i32> = try {"}, {"sha": "f76dfc15bc15d7ebf6a05b690e43acb632501062", "filename": "src/test/ui/let-else/issue-94176.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Fissue-94176.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Fissue-94176.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-94176.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,6 @@\n // Issue #94176: wrong span for the error message of a mismatched type error,\n // if the function uses a `let else` construct.\n-#![feature(let_else)]\n+\n \n pub fn test(a: Option<u32>) -> Option<u32> { //~ ERROR mismatched types\n     let Some(_) = a else { return None; };"}, {"sha": "5b164f347e7dd8d6ba2dd5752b23b95fa2b9211a", "filename": "src/test/ui/let-else/issue-99975.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Fissue-99975.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Fissue-99975.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-99975.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // compile-flags: -C opt-level=3 -Zvalidate-mir\n \n-#![feature(let_else)]\n+\n \n fn return_result() -> Option<String> {\n     Some(\"ok\".to_string())"}, {"sha": "33acb6c6a29c5284999002648726be5c8d2a4da9", "filename": "src/test/ui/let-else/let-else-allow-in-expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,5 +1,3 @@\n-#![feature(let_else)]\n-\n #![deny(unused_variables)]\n \n fn main() {"}, {"sha": "3b2b9066c90d6f428bd2eae543ad15d8fca99ed5", "filename": "src/test/ui/let-else/let-else-allow-in-expr.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-in-expr.stderr?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,17 +1,17 @@\n error: unused variable: `x`\n-  --> $DIR/let-else-allow-in-expr.rs:7:13\n+  --> $DIR/let-else-allow-in-expr.rs:5:13\n    |\n LL |         let x = 1;\n    |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n    |\n note: the lint level is defined here\n-  --> $DIR/let-else-allow-in-expr.rs:3:9\n+  --> $DIR/let-else-allow-in-expr.rs:1:9\n    |\n LL | #![deny(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unused variable: `x`\n-  --> $DIR/let-else-allow-in-expr.rs:29:9\n+  --> $DIR/let-else-allow-in-expr.rs:27:9\n    |\n LL |     let x = 1;\n    |         ^ help: if this is intentional, prefix it with an underscore: `_x`"}, {"sha": "bbb1c7beaf8d367279d5fad326fd0cffcd33e98b", "filename": "src/test/ui/let-else/let-else-allow-unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-allow-unused.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,6 @@\n // issue #89807\n \n-#![feature(let_else)]\n+\n \n #[deny(unused_variables)]\n "}, {"sha": "955f33ee134d2735b1f90ba428246c65b5d995e6", "filename": "src/test/ui/let-else/let-else-binding-explicit-mut-annotated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-annotated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-annotated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-annotated.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,6 @@\n // from rfc2005 test suite\n \n-#![feature(let_else)]\n+\n \n // Verify the binding mode shifts - only when no `&` are auto-dereferenced is the\n // final default binding mode mutable."}, {"sha": "1524d010233310c5308a22259975430a3154a07b", "filename": "src/test/ui/let-else/let-else-binding-explicit-mut-borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-borrow.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,8 +1,8 @@\n-#![feature(let_else)]\n-\n // Slightly different from explicit-mut-annotated -- this won't show an error until borrowck.\n // Should it show a type error instead?\n \n+\n+\n fn main() {\n     let Some(n): &mut Option<i32> = &mut &Some(5i32) else {\n         //~^ ERROR cannot borrow data in a `&` reference as mutable"}, {"sha": "b0a6264a10d45ac02a92da2794b498e9a467ae54", "filename": "src/test/ui/let-else/let-else-binding-explicit-mut-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut-pass.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(let_else)]\n+\n \n fn main() {\n     let Some(n) = &mut &mut Some(5i32) else { return; };"}, {"sha": "a153b3af0de1c7659604f0375c177bbc0d4b2b3f", "filename": "src/test/ui/let-else/let-else-binding-explicit-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-explicit-mut.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,6 @@\n // from rfc2005 test suite\n \n-#![feature(let_else)]\n+\n \n // Verify the binding mode shifts - only when no `&` are auto-dereferenced is the\n // final default binding mode mutable."}, {"sha": "ff2d9f240a094f70bef7933ace621b76e7092aec", "filename": "src/test/ui/let-else/let-else-binding-immutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-immutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-immutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-binding-immutable.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,6 @@\n // from rfc2005 test suite\n \n-#![feature(let_else)]\n+\n \n pub fn main() {\n     let Some(x) = &Some(3) else {"}, {"sha": "7d2cad978fc02ef96e654f2d1a7bb9dfb0e2145b", "filename": "src/test/ui/let-else/let-else-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-bindings.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n // adapted from src/test/ui/binding/if-let.rs\n-#![feature(let_else)]\n+\n #![allow(dead_code)]\n \n fn none() -> bool {"}, {"sha": "20e558ca909cf0a14be3a01ee3407e017423e3d3", "filename": "src/test/ui/let-else/let-else-bool-binop-init.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.fixed?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![feature(let_else)]\n+\n \n fn main() {\n     let true = (true && false) else { return }; //~ ERROR a `&&` expression cannot be directly assigned in `let...else`"}, {"sha": "f88179a940b5dee46a97cf99a66512411cc73d30", "filename": "src/test/ui/let-else/let-else-bool-binop-init.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-bool-binop-init.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![feature(let_else)]\n+\n \n fn main() {\n     let true = true && false else { return }; //~ ERROR a `&&` expression cannot be directly assigned in `let...else`"}, {"sha": "a75c770ddf2993ad295d6e8df69b5eb197b7ad41", "filename": "src/test/ui/let-else/let-else-brace-before-else.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.fixed?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![feature(let_else)]\n+\n \n fn main() {\n     let Some(1) = ({ Some(1) }) else {"}, {"sha": "5603b946f3883a14284ed86320db3b213d12094b", "filename": "src/test/ui/let-else/let-else-brace-before-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-brace-before-else.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,6 @@\n // run-rustfix\n \n-#![feature(let_else)]\n+\n \n fn main() {\n     let Some(1) = { Some(1) } else {"}, {"sha": "713fd986e9792bbaa660a461e0aae404166dbee3", "filename": "src/test/ui/let-else/let-else-check.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,5 +1,3 @@\n-#![feature(let_else)]\n-\n #![deny(unused_variables)]\n \n fn main() {"}, {"sha": "bdecbf708f9d229666036e5e8153e9e4d1265799", "filename": "src/test/ui/let-else/let-else-check.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-check.stderr?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,17 +1,17 @@\n error: unused variable: `x`\n-  --> $DIR/let-else-check.rs:14:13\n+  --> $DIR/let-else-check.rs:12:13\n    |\n LL |         let x = 1;\n    |             ^ help: if this is intentional, prefix it with an underscore: `_x`\n    |\n note: the lint level is defined here\n-  --> $DIR/let-else-check.rs:3:9\n+  --> $DIR/let-else-check.rs:1:9\n    |\n LL | #![deny(unused_variables)]\n    |         ^^^^^^^^^^^^^^^^\n \n error: unused variable: `x`\n-  --> $DIR/let-else-check.rs:18:9\n+  --> $DIR/let-else-check.rs:16:9\n    |\n LL |     let x = 1;\n    |         ^ help: if this is intentional, prefix it with an underscore: `_x`"}, {"sha": "60fdf825a336a94fc665310915ad0e69bf9700bd", "filename": "src/test/ui/let-else/let-else-deref-coercion-annotated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion-annotated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion-annotated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion-annotated.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -6,7 +6,7 @@\n // Deref/DerefMut to Bar. You can do this with an irrefutable binding, so it should work with\n // let-else too.\n \n-#![feature(let_else)]\n+\n use std::ops::{Deref, DerefMut};\n \n struct Foo(Bar);"}, {"sha": "052a5a8c73cc4ab05285ca5771735235bffa6ac5", "filename": "src/test/ui/let-else/let-else-deref-coercion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -3,7 +3,7 @@\n // We attempt to `let Bar::Present(_) = foo else { ... }` where foo is meant to Deref/DerefMut to\n // Bar. This fails, you must add a type annotation like `let _: &mut Bar = _ else { ... }`\n \n-#![feature(let_else)]\n+\n use std::ops::{Deref, DerefMut};\n \n struct Foo(Bar);"}, {"sha": "d1f1a69bfc2549d6263b4d5aca49ed7c7c09b6b6", "filename": "src/test/ui/let-else/let-else-destructuring.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,4 +1,3 @@\n-#![feature(let_else)]\n #[derive(Debug)]\n enum Foo {\n     Done,"}, {"sha": "7d6cb2386440d56b5926eed294a4a9ec3f0e6a33", "filename": "src/test/ui/let-else/let-else-destructuring.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-destructuring.stderr?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,11 +1,11 @@\n error: <assignment> ... else { ... } is not allowed\n-  --> $DIR/let-else-destructuring.rs:11:9\n+  --> $DIR/let-else-destructuring.rs:10:9\n    |\n LL |         &Foo::Nested(Some(value)) = value else { break };\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0070]: invalid left-hand side of assignment\n-  --> $DIR/let-else-destructuring.rs:11:35\n+  --> $DIR/let-else-destructuring.rs:10:35\n    |\n LL |         &Foo::Nested(Some(value)) = value else { break };\n    |         ------------------------- ^"}, {"sha": "e91e5de84e4bd1346ee2ef62f6479f28045e1a54", "filename": "src/test/ui/let-else/let-else-drop-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-drop-order.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -16,7 +16,7 @@\n // This is important as it's easy to update the stdout file\n // with a --bless and miss the impact of that change.\n \n-#![feature(let_else)]\n+\n #![allow(irrefutable_let_patterns)]\n \n use std::cell::RefCell;"}, {"sha": "e8c54ca7ab2932a6ca03b238fd5676c34664ea91", "filename": "src/test/ui/let-else/let-else-if.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,5 +1,3 @@\n-#![feature(let_else)]\n-\n fn main() {\n     let Some(_) = Some(()) else if true {\n         //~^ ERROR conditional `else if` is not supported for `let...else`"}, {"sha": "c63fd61c5dec9ad3a51fa457dae719fdebc60685", "filename": "src/test/ui/let-else/let-else-if.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-if.stderr?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,5 +1,5 @@\n error: conditional `else if` is not supported for `let...else`\n-  --> $DIR/let-else-if.rs:4:33\n+  --> $DIR/let-else-if.rs:2:33\n    |\n LL |     let Some(_) = Some(()) else if true {\n    |                                 ^^ expected `{`"}, {"sha": "1cb68ecb8a6bfc4128c9318cf2efbe4165b277e5", "filename": "src/test/ui/let-else/let-else-irrefutable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-irrefutable.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(let_else)]\n+\n \n fn main() {\n     let x = 1 else { return }; //~ WARN irrefutable `let...else` pattern"}, {"sha": "d87ac90c1a772e9720a39ccce4ffa56fbcfbf91f", "filename": "src/test/ui/let-else/let-else-missing-semicolon.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,5 +1,3 @@\n-#![feature(let_else)]\n-\n fn main() {\n     let Some(x) = Some(1) else {\n         return;"}, {"sha": "99029ff33fe0ca69a050cfbbfbdaa60cc814c8b2", "filename": "src/test/ui/let-else/let-else-missing-semicolon.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-missing-semicolon.stderr?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,13 +1,13 @@\n error: expected `;`, found keyword `let`\n-  --> $DIR/let-else-missing-semicolon.rs:6:6\n+  --> $DIR/let-else-missing-semicolon.rs:4:6\n    |\n LL |     }\n    |      ^ help: add `;` here\n LL |     let _ = \"\";\n    |     --- unexpected token\n \n error: expected `;`, found `}`\n-  --> $DIR/let-else-missing-semicolon.rs:10:6\n+  --> $DIR/let-else-missing-semicolon.rs:8:6\n    |\n LL |     }\n    |      ^ help: add `;` here"}, {"sha": "91fcc5d7e91e864e4f6d41897eeb9a4e95346e21", "filename": "src/test/ui/let-else/let-else-no-double-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-no-double-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-no-double-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-no-double-error.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,6 @@\n // from rfc2005 test suite\n \n-#![feature(let_else)]\n+\n \n // Without caching type lookups in FnCtxt.resolve_ty_and_def_ufcs\n // the error below would be reported twice (once when checking"}, {"sha": "08c07dd1a43acf9ea5db3207033e99d616de21ca", "filename": "src/test/ui/let-else/let-else-non-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-copy.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -10,7 +10,7 @@\n //\n // The move was due to mir::Place being Copy, but mir::VarDebugInfoContents not being Copy.\n \n-#![feature(let_else)]\n+\n \n #[derive(Copy, Clone)]\n struct Copyable;"}, {"sha": "b5bd91ceb9e755237bdce693aaa35a90727d5076", "filename": "src/test/ui/let-else/let-else-non-diverging.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,5 +1,3 @@\n-#![feature(let_else)]\n-\n fn main() {\n     let Some(x) = Some(1) else { //~ ERROR does not diverge\n         Some(2)"}, {"sha": "c999a5495256089a8c6a8909e4f9e6732c99be39", "filename": "src/test/ui/let-else/let-else-non-diverging.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-non-diverging.stderr?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,5 +1,5 @@\n error[E0308]: `else` clause of `let...else` does not diverge\n-  --> $DIR/let-else-non-diverging.rs:4:32\n+  --> $DIR/let-else-non-diverging.rs:2:32\n    |\n LL |       let Some(x) = Some(1) else {\n    |  ________________________________^\n@@ -13,7 +13,7 @@ LL | |     };\n    = help: ...or use `match` instead of `let...else`\n \n error[E0308]: `else` clause of `let...else` does not diverge\n-  --> $DIR/let-else-non-diverging.rs:7:32\n+  --> $DIR/let-else-non-diverging.rs:5:32\n    |\n LL |       let Some(x) = Some(1) else {\n    |  ________________________________^\n@@ -29,7 +29,7 @@ LL | |     };\n    = help: ...or use `match` instead of `let...else`\n \n error[E0308]: `else` clause of `let...else` does not diverge\n-  --> $DIR/let-else-non-diverging.rs:12:32\n+  --> $DIR/let-else-non-diverging.rs:10:32\n    |\n LL |     let Some(x) = Some(1) else { Some(2) };\n    |                                ^^^^^^^^^^^ expected `!`, found enum `Option`"}, {"sha": "62fc65731cd2f9cc0aaa17699df048b603086e3d", "filename": "src/test/ui/let-else/let-else-ref-bindings-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings-pass.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,6 @@\n // check-pass\n \n-#![feature(let_else)]\n+\n #![allow(unused_variables)]\n \n fn ref_() {"}, {"sha": "687e235d47e78d4a41f8fa7f3df64d1821826fe8", "filename": "src/test/ui/let-else/let-else-ref-bindings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-ref-bindings.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,6 @@\n-#![feature(let_else)]\n #![allow(unused_variables)]\n \n+\n fn ref_() {\n     let bytes: Vec<u8> = b\"Hello\"[..].to_vec();\n     let some = Some(bytes);"}, {"sha": "a0fb6c683f8ceb580a89111b5728f39622b020fa", "filename": "src/test/ui/let-else/let-else-run-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-run-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-run-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-run-pass.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,6 @@\n // run-pass\n \n-#![feature(let_else)]\n+\n \n fn main() {\n     #[allow(dead_code)]"}, {"sha": "78a67769ef2843f1473ef427b4e379fc37df3fba", "filename": "src/test/ui/let-else/let-else-scope.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,5 +1,3 @@\n-#![feature(let_else)]\n-\n fn main() {\n     let Some(x) = Some(2) else {\n         panic!(\"{}\", x); //~ ERROR cannot find value `x` in this scope"}, {"sha": "3b4f0982940e831fd245f9ea77d0ce30ddabbaff", "filename": "src/test/ui/let-else/let-else-scope.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-scope.stderr?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,5 +1,5 @@\n error[E0425]: cannot find value `x` in this scope\n-  --> $DIR/let-else-scope.rs:5:22\n+  --> $DIR/let-else-scope.rs:3:22\n    |\n LL |         panic!(\"{}\", x);\n    |                      ^ not found in this scope"}, {"sha": "25770094bce99e5068c7d62682fc8866c8f9bfb9", "filename": "src/test/ui/let-else/let-else-slicing-error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-slicing-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-slicing-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-slicing-error.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,5 +1,5 @@\n // issue #92069\n-#![feature(let_else)]\n+\n \n fn main() {\n     let nums = vec![5, 4, 3, 2, 1];"}, {"sha": "ee378abcf2bad771e90f59711c185794001de7ca", "filename": "src/test/ui/let-else/let-else-source-expr-nomove-pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-source-expr-nomove-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-source-expr-nomove-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-source-expr-nomove-pass.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,7 +1,7 @@\n // run-pass\n // issue #89688\n \n-#![feature(let_else)]\n+\n \n fn example_let_else(value: Option<String>) {\n     let Some(inner) = value else {"}, {"sha": "6b4642d2f985219d039cd3a3dbc34d3139bc9a25", "filename": "src/test/ui/let-else/let-else-temp-borrowck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-temp-borrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-temp-borrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-temp-borrowck.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -3,7 +3,7 @@\n // from issue #93951, where borrowck complained the temporary that `foo(&x)` was stored in was to\n // be dropped sometime after `x` was. It then suggested adding a semicolon that was already there.\n \n-#![feature(let_else)]\n+\n use std::fmt::Debug;\n \n fn foo<'a>(x: &'a str) -> Result<impl Debug + 'a, ()> {"}, {"sha": "c23eaa997fe4d0ce82ffb7cf842d426dd254d615", "filename": "src/test/ui/let-else/let-else-temporary-lifetime.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-temporary-lifetime.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,6 +1,5 @@\n // run-pass\n // compile-flags: -Zvalidate-mir\n-#![feature(let_else)]\n \n use std::fmt::Display;\n use std::rc::Rc;"}, {"sha": "1c8f7d758e8a6e1a16d41187c352acbf5fa68926", "filename": "src/test/ui/let-else/let-else-then-diverge.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-then-diverge.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -2,7 +2,7 @@\n // popped up in in #94012, where an alternative desugaring was\n // causing unreachable code errors\n \n-#![feature(let_else)]\n+\n #![deny(unused_variables)]\n #![deny(unreachable_code)]\n "}, {"sha": "e8cd12ea4a2c487ccba294ea3ab9dc29744dd004", "filename": "src/test/ui/pattern/usefulness/top-level-alternation.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,5 +1,3 @@\n-#![feature(let_else)]\n-\n #![deny(unreachable_patterns)]\n \n fn main() {"}, {"sha": "17fa951c53905b4ca436739814a1c2e7aeefe022", "filename": "src/test/ui/pattern/usefulness/top-level-alternation.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Ftop-level-alternation.stderr?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,71 +1,71 @@\n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:6:23\n+  --> $DIR/top-level-alternation.rs:4:23\n    |\n LL |     while let 0..=2 | 1 = 0 {}\n    |                       ^\n    |\n note: the lint level is defined here\n-  --> $DIR/top-level-alternation.rs:3:9\n+  --> $DIR/top-level-alternation.rs:1:9\n    |\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:7:20\n+  --> $DIR/top-level-alternation.rs:5:20\n    |\n LL |     if let 0..=2 | 1 = 0 {}\n    |                    ^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:11:15\n+  --> $DIR/top-level-alternation.rs:9:15\n    |\n LL |             | 0 => {}\n    |               ^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:16:15\n+  --> $DIR/top-level-alternation.rs:14:15\n    |\n LL |             | Some(0) => {}\n    |               ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:21:9\n+  --> $DIR/top-level-alternation.rs:19:9\n    |\n LL |         (0, 0) => {}\n    |         ^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:41:9\n+  --> $DIR/top-level-alternation.rs:39:9\n    |\n LL |         _ => {}\n    |         ^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:45:9\n+  --> $DIR/top-level-alternation.rs:43:9\n    |\n LL |         Some(_) => {}\n    |         ^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:46:9\n+  --> $DIR/top-level-alternation.rs:44:9\n    |\n LL |         None => {}\n    |         ^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:51:9\n+  --> $DIR/top-level-alternation.rs:49:9\n    |\n LL |         None | Some(_) => {}\n    |         ^^^^^^^^^^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:55:9\n+  --> $DIR/top-level-alternation.rs:53:9\n    |\n LL |         1..=2 => {},\n    |         ^^^^^\n \n error: unreachable pattern\n-  --> $DIR/top-level-alternation.rs:58:14\n+  --> $DIR/top-level-alternation.rs:56:14\n    |\n LL |     let (0 | 0) = 0 else { return };\n    |              ^"}, {"sha": "2a6c144350a7a8fc48d4d774751c1763a1362d92", "filename": "src/test/ui/rfc-2497-if-let-chains/ensure-that-let-else-does-not-interact-with-let-chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2497-if-let-chains%2Fensure-that-let-else-does-not-interact-with-let-chains.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,4 +1,4 @@\n-#![feature(let_chains, let_else)]\n+#![feature(let_chains)]\n \n fn main() {\n     let opt = Some(1i32);"}, {"sha": "b5ae529699da230633724cc84cf21655f0f4a35b", "filename": "src/test/ui/unpretty/pretty-let-else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.rs?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,7 +1,7 @@\n // compile-flags: -Zunpretty=hir\n // check-pass\n \n-#![feature(let_else)]\n+\n \n fn foo(x: Option<u32>) {\n     let Some(_) = x else { panic!() };"}, {"sha": "35ad1cd1b181261bedbcce15dd1ae00f6fb8fd00", "filename": "src/test/ui/unpretty/pretty-let-else.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/9c7ae381e6ef737a484bce28e71fd04ab4e0b891/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funpretty%2Fpretty-let-else.stdout?ref=9c7ae381e6ef737a484bce28e71fd04ab4e0b891", "patch": "@@ -1,11 +1,11 @@\n-// compile-flags: -Zunpretty=hir\n-// check-pass\n-\n-#![feature(let_else)]\n #[prelude_import]\n use ::std::prelude::rust_2015::*;\n #[macro_use]\n extern crate std;\n+// compile-flags: -Zunpretty=hir\n+// check-pass\n+\n+\n \n fn foo(x:\n         Option<u32>) {"}]}