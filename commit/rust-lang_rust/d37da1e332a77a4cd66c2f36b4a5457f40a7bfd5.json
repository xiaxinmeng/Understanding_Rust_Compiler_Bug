{"sha": "d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "node_id": "C_kwDOAAsO6NoAKGQzN2RhMWUzMzJhNzdhNGNkNjZjMmYzNmI0YTU0NTdmNDBhN2JmZDU", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2022-01-20T19:07:54Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2022-03-03T23:58:37Z"}, "message": "Adjusted diagnostic output so that if there is no `use` in a item sequence,\nthen we just suggest the first legal position where you could inject a use.\n\nTo do this, I added `inject_use_span` field to `ModSpans`, and populate it in\nparser (it is the span of the first token found after inner attributes, if any).\nThen I rewrote the use-suggestion code to utilize it, and threw out some stuff\nthat is now unnecessary with this in place. (I think the result is easier to\nunderstand.)\n\nThen I added a test of issue 87613.", "tree": {"sha": "f3638bd95437411b3a0c926e0ce9a864997542e9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3638bd95437411b3a0c926e0ce9a864997542e9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "html_url": "https://github.com/rust-lang/rust/commit/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b82795244e31ce1ad60bbb823c4e4b91f921c296", "url": "https://api.github.com/repos/rust-lang/rust/commits/b82795244e31ce1ad60bbb823c4e4b91f921c296", "html_url": "https://github.com/rust-lang/rust/commit/b82795244e31ce1ad60bbb823c4e4b91f921c296"}], "stats": {"total": 234, "additions": 168, "deletions": 66}, "files": [{"sha": "796dac57744c21f25838e02effd3293e32c25c8c", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "patch": "@@ -2322,16 +2322,17 @@ pub enum ModKind {\n     Unloaded,\n }\n \n-#[derive(Clone, Encodable, Decodable, Debug)]\n+#[derive(Copy, Clone, Encodable, Decodable, Debug)]\n pub struct ModSpans {\n     /// `inner_span` covers the body of the module; for a file module, its the whole file.\n     /// For an inline module, its the span inside the `{ ... }`, not including the curly braces.\n     pub inner_span: Span,\n+    pub inject_use_span: Span,\n }\n \n impl Default for ModSpans {\n     fn default() -> ModSpans {\n-        ModSpans { inner_span: Default::default() }\n+        ModSpans { inner_span: Default::default(), inject_use_span: Default::default() }\n     }\n }\n "}, {"sha": "b87637d2dde6ea303430b502c44d43fc251b806e", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "patch": "@@ -1009,8 +1009,9 @@ pub fn noop_visit_item_kind<T: MutVisitor>(kind: &mut ItemKind, vis: &mut T) {\n         ItemKind::Mod(unsafety, mod_kind) => {\n             visit_unsafety(unsafety, vis);\n             match mod_kind {\n-                ModKind::Loaded(items, _inline, ModSpans { inner_span }) => {\n+                ModKind::Loaded(items, _inline, ModSpans { inner_span, inject_use_span }) => {\n                     vis.visit_span(inner_span);\n+                    vis.visit_span(inject_use_span);\n                     items.flat_map_in_place(|item| vis.flat_map_item(item));\n                 }\n                 ModKind::Unloaded => {}\n@@ -1112,8 +1113,9 @@ pub fn noop_visit_crate<T: MutVisitor>(krate: &mut Crate, vis: &mut T) {\n     vis.visit_id(id);\n     visit_attrs(attrs, vis);\n     items.flat_map_in_place(|item| vis.flat_map_item(item));\n-    let ModSpans { inner_span } = spans;\n+    let ModSpans { inner_span, inject_use_span } = spans;\n     vis.visit_span(inner_span);\n+    vis.visit_span(inject_use_span);\n }\n \n // Mutates one item into possibly many items."}, {"sha": "a7401be6db32f4a55335e181dfe8f7e369c677a0", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "patch": "@@ -263,7 +263,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 })\n             }\n             ItemKind::Mod(_, ref mod_kind) => match mod_kind {\n-                ModKind::Loaded(items, _, ModSpans { inner_span }) => {\n+                ModKind::Loaded(items, _, ModSpans { inner_span, inject_use_span: _ }) => {\n                     hir::ItemKind::Mod(self.lower_mod(items, *inner_span))\n                 }\n                 ModKind::Unloaded => panic!(\"`mod` items should have been loaded by now\"),"}, {"sha": "e2553ab40cad4035dbc2c8b8d5ffdbb4bbbeec89", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "patch": "@@ -129,9 +129,8 @@ impl<'a> MutVisitor for TestHarnessGenerator<'a> {\n \n         // We don't want to recurse into anything other than mods, since\n         // mods or tests inside of functions will break things\n-        if let ast::ItemKind::Mod(_, ModKind::Loaded(.., ast::ModSpans { inner_span: span })) =\n-            item.kind\n-        {\n+        if let ast::ItemKind::Mod(_, ModKind::Loaded(.., ref spans)) = item.kind {\n+            let ast::ModSpans { inner_span: span, inject_use_span: _ } = *spans;\n             let prev_tests = mem::take(&mut self.tests);\n             noop_visit_item_kind(&mut item.kind, self);\n             self.add_test_cases(item.id, span, prev_tests);"}, {"sha": "c370195659d0c4decdede81a2145b78329fd95b1", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "patch": "@@ -55,6 +55,7 @@ impl<'a> Parser<'a> {\n         let lo = self.token.span;\n         let attrs = self.parse_inner_attributes()?;\n \n+        let post_attr_lo = self.token.span;\n         let mut items = vec![];\n         while let Some(item) = self.parse_item(ForceCollect::No)? {\n             items.push(item);\n@@ -71,7 +72,9 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        Ok((attrs, items, ModSpans { inner_span: lo.to(self.prev_token.span) }))\n+        let inject_use_span = post_attr_lo.data().with_hi(post_attr_lo.lo());\n+        let mod_spans = ModSpans { inner_span: lo.to(self.prev_token.span), inject_use_span };\n+        Ok((attrs, items, mod_spans))\n     }\n }\n "}, {"sha": "03b4f0609bfd2fa1716e45b43662a34ff994ebf0", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 48, "deletions": 53, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "patch": "@@ -71,7 +71,6 @@ use rustc_span::{Span, DUMMY_SP};\n use smallvec::{smallvec, SmallVec};\n use std::cell::{Cell, RefCell};\n use std::collections::BTreeSet;\n-use std::ops::ControlFlow;\n use std::{cmp, fmt, iter, mem, ptr};\n use tracing::debug;\n \n@@ -315,74 +314,70 @@ impl<'a> From<&'a ast::PathSegment> for Segment {\n     }\n }\n \n+#[derive(Debug)]\n struct UsePlacementFinder {\n     target_module: NodeId,\n-    span: Option<Span>,\n-    found_use: bool,\n+    first_legal_span: Option<Span>,\n+    first_use_span: Option<Span>,\n }\n \n impl UsePlacementFinder {\n     fn check(krate: &Crate, target_module: NodeId) -> (Option<Span>, bool) {\n-        let mut finder = UsePlacementFinder { target_module, span: None, found_use: false };\n-        if let ControlFlow::Continue(..) = finder.check_mod(&krate.items, CRATE_NODE_ID) {\n-            visit::walk_crate(&mut finder, krate);\n-        }\n-        (finder.span, finder.found_use)\n-    }\n-\n-    fn check_mod(&mut self, items: &[P<ast::Item>], node_id: NodeId) -> ControlFlow<()> {\n-        if self.span.is_some() {\n-            return ControlFlow::Break(());\n-        }\n-        if node_id != self.target_module {\n-            return ControlFlow::Continue(());\n-        }\n-        // find a use statement\n-        for item in items {\n-            match item.kind {\n-                ItemKind::Use(..) => {\n-                    // don't suggest placing a use before the prelude\n-                    // import or other generated ones\n-                    if !item.span.from_expansion() {\n-                        self.span = Some(item.span.shrink_to_lo());\n-                        self.found_use = true;\n-                        return ControlFlow::Break(());\n-                    }\n-                }\n-                // don't place use before extern crate\n-                ItemKind::ExternCrate(_) => {}\n-                // but place them before the first other item\n-                _ => {\n-                    if self.span.map_or(true, |span| item.span < span)\n-                        && !item.span.from_expansion()\n-                    {\n-                        self.span = Some(item.span.shrink_to_lo());\n-                        // don't insert between attributes and an item\n-                        // find the first attribute on the item\n-                        // FIXME: This is broken for active attributes.\n-                        for attr in &item.attrs {\n-                            if !attr.span.is_dummy()\n-                                && self.span.map_or(true, |span| attr.span < span)\n-                            {\n-                                self.span = Some(attr.span.shrink_to_lo());\n-                            }\n-                        }\n-                    }\n-                }\n+        let mut finder =\n+            UsePlacementFinder { target_module, first_legal_span: None, first_use_span: None };\n+        finder.visit_crate(krate);\n+        if let Some(use_span) = finder.first_use_span {\n+            (Some(use_span), true)\n+        } else {\n+            (finder.first_legal_span, false)\n+        }\n+    }\n+}\n+\n+fn is_span_suitable_for_use_injection(s: Span) -> bool {\n+    // don't suggest placing a use before the prelude\n+    // import or other generated ones\n+    !s.from_expansion()\n+}\n+\n+fn search_for_any_use_in_items(items: &[P<ast::Item>]) -> Option<Span> {\n+    for item in items {\n+        if let ItemKind::Use(..) = item.kind {\n+            if is_span_suitable_for_use_injection(item.span) {\n+                return Some(item.span.shrink_to_lo());\n             }\n         }\n-        ControlFlow::Continue(())\n     }\n+    return None;\n }\n \n impl<'tcx> Visitor<'tcx> for UsePlacementFinder {\n+    fn visit_crate(&mut self, c: &Crate) {\n+        if self.target_module == CRATE_NODE_ID {\n+            let inject = c.spans.inject_use_span;\n+            if is_span_suitable_for_use_injection(inject) {\n+                self.first_legal_span = Some(inject);\n+            }\n+            self.first_use_span = search_for_any_use_in_items(&c.items);\n+            return;\n+        } else {\n+            visit::walk_crate(self, c);\n+        }\n+    }\n+\n     fn visit_item(&mut self, item: &'tcx ast::Item) {\n-        if let ItemKind::Mod(_, ModKind::Loaded(items, ..)) = &item.kind {\n-            if let ControlFlow::Break(..) = self.check_mod(items, item.id) {\n+        if self.target_module == item.id {\n+            if let ItemKind::Mod(_, ModKind::Loaded(items, _inline, mod_spans)) = &item.kind {\n+                let inject = mod_spans.inject_use_span;\n+                if is_span_suitable_for_use_injection(inject) {\n+                    self.first_legal_span = Some(inject);\n+                }\n+                self.first_use_span = search_for_any_use_in_items(items);\n                 return;\n             }\n+        } else {\n+            visit::walk_item(self, item);\n         }\n-        visit::walk_item(self, item);\n     }\n }\n "}, {"sha": "746ced689d4482cc2d2d928f93e3dcc33d74c5e5", "filename": "src/test/ui/ast-json/ast-json-noexpand-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-noexpand-output.stdout?ref=d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "patch": "@@ -1 +1 @@\n-{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"spans\":{\"inner_span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"is_placeholder\":false}\n+{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"spans\":{\"inner_span\":{\"lo\":0,\"hi\":0},\"inject_use_span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"is_placeholder\":false}"}, {"sha": "b0aaa663f38c8146d5b6e28e2c2d73cdca9db5ee", "filename": "src/test/ui/ast-json/ast-json-output.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fast-json%2Fast-json-output.stdout?ref=d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "patch": "@@ -1 +1 @@\n-{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"rust_2015\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"spans\":{\"inner_span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"is_placeholder\":false}\n+{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"crate_type\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":{\"variant\":\"Eq\",\"fields\":[{\"lo\":0,\"hi\":0},{\"kind\":{\"variant\":\"Interpolated\",\"fields\":[{\"variant\":\"NtExpr\",\"fields\":[{\"id\":0,\"kind\":{\"variant\":\"Lit\",\"fields\":[{\"token\":{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null},\"kind\":{\"variant\":\"Str\",\"fields\":[\"lib\",\"Cooked\"]},\"span\":{\"lo\":0,\"hi\":0}}]},\"span\":{\"lo\":0,\"hi\":0},\"attrs\":{\"0\":null},\"tokens\":{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}}]}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Pound\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Joint\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Not\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Delimited\",\"fields\":[{\"open\":{\"lo\":0,\"hi\":0},\"close\":{\"lo\":0,\"hi\":0}},\"Bracket\",{\"0\":[[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Ident\",\"fields\":[\"crate_type\",false]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":\"Eq\",\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"],[{\"variant\":\"Token\",\"fields\":[{\"kind\":{\"variant\":\"Literal\",\"fields\":[{\"kind\":\"Str\",\"symbol\":\"lib\",\"suffix\":null}]},\"span\":{\"lo\":0,\"hi\":0}}]},\"Alone\"]]}]},\"Alone\"]]}]},\"id\":null,\"style\":\"Inner\",\"span\":{\"lo\":0,\"hi\":0}}],\"items\":[{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"prelude_import\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"Use\",\"fields\":[{\"prefix\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"{{root}}\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"prelude\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null},{\"ident\":{\"name\":\"rust_2015\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"kind\":\"Glob\",\"span\":{\"lo\":0,\"hi\":0}}]},\"tokens\":null},{\"attrs\":[{\"kind\":{\"variant\":\"Normal\",\"fields\":[{\"path\":{\"span\":{\"lo\":0,\"hi\":0},\"segments\":[{\"ident\":{\"name\":\"macro_use\",\"span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"args\":null}],\"tokens\":null},\"args\":\"Empty\",\"tokens\":null},null]},\"id\":null,\"style\":\"Outer\",\"span\":{\"lo\":0,\"hi\":0}}],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"std\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null},{\"attrs\":[],\"id\":0,\"span\":{\"lo\":0,\"hi\":0},\"vis\":{\"kind\":\"Inherited\",\"span\":{\"lo\":0,\"hi\":0},\"tokens\":null},\"ident\":{\"name\":\"core\",\"span\":{\"lo\":0,\"hi\":0}},\"kind\":{\"variant\":\"ExternCrate\",\"fields\":[null]},\"tokens\":null}],\"spans\":{\"inner_span\":{\"lo\":0,\"hi\":0},\"inject_use_span\":{\"lo\":0,\"hi\":0}},\"id\":0,\"is_placeholder\":false}"}, {"sha": "3ca7c847a88dde53dfa98dc2b509e747dc6e9de4", "filename": "src/test/ui/proc-macro/amputate-span.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.rs?ref=d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "patch": "@@ -0,0 +1,63 @@\n+// aux-build:amputate-span.rs\n+// edition:2018\n+// compile-flags: --extern amputate_span\n+\n+// This test has been crafted to ensure the following things:\n+//\n+// 1. There's a resolution error that prompts the compiler to suggest\n+//    adding a `use` item.\n+//\n+// 2. There are no `use` or `extern crate` items in the source\n+//    code. In fact, there is only one item, the `fn main`\n+//    declaration.\n+//\n+// 3. The single `fn main` declaration has an attribute attached to it\n+//    that just deletes the first token from the given item.\n+//\n+// You need all of these conditions to hold in order to replicate the\n+// scenario that yielded issue 87613, where the compiler's suggestion\n+// looks like:\n+//\n+// ```\n+// help: consider importing this struct\n+//    |\n+// 47 | hey */ async use std::process::Command;\n+//    |              ++++++++++++++++++++++++++\n+// ```\n+//\n+// The first condition is necessary to force the compiler issue a\n+// suggestion. The second condition is necessary to force the\n+// suggestion to be issued at a span associated with the sole\n+// `fn`-item of this crate. The third condition is necessary in order\n+// to yield the weird state where the associated span of the `fn`-item\n+// does not actually cover all of the original source code of the\n+// `fn`-item (which is why we are calling it an \"amputated\" span\n+// here).\n+//\n+// Note that satisfying conditions 2 and 3 requires the use of the\n+// `--extern` compile flag.\n+//\n+// You might ask yourself: What code would do such a thing?  The\n+// answer is: the #[tokio::main] attribute does *exactly* this (as\n+// well as injecting some other code into the `fn main` that it\n+// constructs).\n+\n+#[amputate_span::drop_first_token]\n+/* what the\n+hey */ async fn main() {\n+    Command::new(\"git\"); //~ ERROR [E0433]\n+}\n+\n+// (The /* ... */ comment in the above is not part of the original\n+// bug. It is just meant to illustrate one particular facet of the\n+// original non-ideal behavior, where we were transcribing the\n+// trailing comment as part of the emitted suggestion, for better or\n+// for worse.)\n+\n+mod inner {\n+    #[amputate_span::drop_first_token]\n+        /* another interesting\n+    case */ async fn foo() {\n+        Command::new(\"git\"); //~ ERROR [E0433]\n+    }\n+}"}, {"sha": "75c5cbdabc79ecd578117918b6fcf46c9dc3f2be", "filename": "src/test/ui/proc-macro/amputate-span.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.stderr?ref=d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "patch": "@@ -0,0 +1,25 @@\n+error[E0433]: failed to resolve: use of undeclared type `Command`\n+  --> $DIR/amputate-span.rs:48:5\n+   |\n+LL |     Command::new(\"git\");\n+   |     ^^^^^^^ not found in this scope\n+   |\n+help: consider importing this struct\n+   |\n+LL | use std::process::Command;\n+   |\n+\n+error[E0433]: failed to resolve: use of undeclared type `Command`\n+  --> $DIR/amputate-span.rs:61:9\n+   |\n+LL |         Command::new(\"git\");\n+   |         ^^^^^^^ not found in this scope\n+   |\n+help: consider importing this struct\n+   |\n+LL |     use std::process::Command;\n+   |\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "1a82119ae95e5239b1f2cff5e1786715be93a5b2", "filename": "src/test/ui/proc-macro/auxiliary/amputate-span.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Famputate-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Famputate-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Famputate-span.rs?ref=d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "patch": "@@ -0,0 +1,14 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn drop_first_token(attr: TokenStream, input: TokenStream) -> TokenStream {\n+    assert!(attr.is_empty());\n+    input.into_iter().skip(1).collect()\n+}"}, {"sha": "6983249c15d45404714abe79352ff8e39912f4c0", "filename": "src/tools/rustfmt/src/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fparse%2Fparser.rs?ref=d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "patch": "@@ -113,7 +113,7 @@ impl<'a> Parser<'a> {\n         let result = catch_unwind(AssertUnwindSafe(|| {\n             let mut parser = new_parser_from_file(sess.inner(), path, Some(span));\n             match parser.parse_mod(&TokenKind::Eof) {\n-                Ok((a, i, ast::ModSpans { inner_span })) => Some((a, i, inner_span)),\n+                Ok((a, i, ast::ModSpans { inner_span, inject_use_span: _ })) => Some((a, i, inner_span)),\n                 Err(mut e) => {\n                     e.emit();\n                     if sess.can_reset_errors() {"}, {"sha": "dec977e98caf5580085bc3af7c9a6666dbe933ac", "filename": "src/tools/rustfmt/src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fvisitor.rs?ref=d37da1e332a77a4cd66c2f36b4a5457f40a7bfd5", "patch": "@@ -916,7 +916,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n         self.push_str(&ident_str);\n \n         if let ast::ModKind::Loaded(ref items, ast::Inline::Yes, ref spans) = mod_kind {\n-            let ast::ModSpans { inner_span } = *spans;\n+            let ast::ModSpans{ inner_span, inject_use_span: _ } = *spans;\n             match self.config.brace_style() {\n                 BraceStyle::AlwaysNextLine => {\n                     let indent_str = self.block_indent.to_string_with_newline(self.config);"}]}