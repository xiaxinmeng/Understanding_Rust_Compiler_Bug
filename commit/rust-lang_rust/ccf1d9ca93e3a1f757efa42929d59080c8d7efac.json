{"sha": "ccf1d9ca93e3a1f757efa42929d59080c8d7efac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjZjFkOWNhOTNlM2ExZjc1N2VmYTQyOTI5ZDU5MDgwYzhkN2VmYWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-02T16:24:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-02T16:24:38Z"}, "message": "Rollup merge of #64967 - ecstatic-morse:issue-64945, r=oli-obk\n\nDon't mark borrows of zero-sized arrays as indirectly mutable\n\nResolves #64945\n\nr? @oli-obk", "tree": {"sha": "109af38b77e51277e6fa0ab1199d18f80f6dc142", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/109af38b77e51277e6fa0ab1199d18f80f6dc142"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccf1d9ca93e3a1f757efa42929d59080c8d7efac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdlM9GCRBK7hj4Ov3rIwAAdHIIAGF/uCgAAE16rvuApBgXnEn+\nQHQC6sevUciwIibGKnJYubqcepbPG2NJZBSK6e07q30cgh3NchaltaempITpRLp3\n1fgGIuOREDPA4OnETFgLz087D1qoSfXLtlF6uPME+MQfbi7ZtApUIzIUrrv726Sn\nAZ4qo5zOcs8t5gxZJ4QcPEU0PF0Bm44L76XXsc00+K3pSU8XfwUGyT7P+m8PWkfe\nIxU3yqZHFZ9Nz653gV10o9LyogSoLLe9BMEk0+PT5XN63mzKJ3G1/ZKS/yRF+vmn\nZioQFHMaz510ggxrjsk5O+6QrOL2reyI/rwuJ0pRMcNoW27Ew1luu+W5yhhf1iI=\n=duHv\n-----END PGP SIGNATURE-----\n", "payload": "tree 109af38b77e51277e6fa0ab1199d18f80f6dc142\nparent 475f5d4a5cf64af6a713b09907d2ffabb49b7fbe\nparent 4eeedd0953a86258c3b3379e0905ab9569eb3af6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570033478 +0200\ncommitter GitHub <noreply@github.com> 1570033478 +0200\n\nRollup merge of #64967 - ecstatic-morse:issue-64945, r=oli-obk\n\nDon't mark borrows of zero-sized arrays as indirectly mutable\n\nResolves #64945\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccf1d9ca93e3a1f757efa42929d59080c8d7efac", "html_url": "https://github.com/rust-lang/rust/commit/ccf1d9ca93e3a1f757efa42929d59080c8d7efac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccf1d9ca93e3a1f757efa42929d59080c8d7efac/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "475f5d4a5cf64af6a713b09907d2ffabb49b7fbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/475f5d4a5cf64af6a713b09907d2ffabb49b7fbe", "html_url": "https://github.com/rust-lang/rust/commit/475f5d4a5cf64af6a713b09907d2ffabb49b7fbe"}, {"sha": "4eeedd0953a86258c3b3379e0905ab9569eb3af6", "url": "https://api.github.com/repos/rust-lang/rust/commits/4eeedd0953a86258c3b3379e0905ab9569eb3af6", "html_url": "https://github.com/rust-lang/rust/commit/4eeedd0953a86258c3b3379e0905ab9569eb3af6"}], "stats": {"total": 109, "additions": 93, "deletions": 16}, "files": [{"sha": "990425c3252e0ecab664b93cc2903ef9a04cec57", "filename": "src/librustc_mir/dataflow/impls/indirect_mutation.rs", "status": "modified", "additions": 31, "deletions": 15, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ccf1d9ca93e3a1f757efa42929d59080c8d7efac/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf1d9ca93e3a1f757efa42929d59080c8d7efac/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Findirect_mutation.rs?ref=ccf1d9ca93e3a1f757efa42929d59080c8d7efac", "patch": "@@ -97,28 +97,44 @@ struct TransferFunction<'a, 'mir, 'tcx> {\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n+impl<'tcx> TransferFunction<'_, '_, 'tcx> {\n+    /// Returns `true` if this borrow would allow mutation of the `borrowed_place`.\n+    fn borrow_allows_mutation(\n+        &self,\n+        kind: mir::BorrowKind,\n+        borrowed_place: &mir::Place<'tcx>,\n+    ) -> bool {\n+        let borrowed_ty = borrowed_place.ty(self.body, self.tcx).ty;\n+\n+        // Zero-sized types cannot be mutated, since there is nothing inside to mutate.\n+        //\n+        // FIXME: For now, we only exempt arrays of length zero. We need to carefully\n+        // consider the effects before extending this to all ZSTs.\n+        if let ty::Array(_, len) = borrowed_ty.kind {\n+            if len.try_eval_usize(self.tcx, self.param_env) == Some(0) {\n+                return false;\n+            }\n+        }\n+\n+        match kind {\n+            mir::BorrowKind::Mut { .. } => true,\n+\n+            | mir::BorrowKind::Shared\n+            | mir::BorrowKind::Shallow\n+            | mir::BorrowKind::Unique\n+            => !borrowed_ty.is_freeze(self.tcx, self.param_env, DUMMY_SP),\n+        }\n+    }\n+}\n+\n impl<'tcx> Visitor<'tcx> for TransferFunction<'_, '_, 'tcx> {\n     fn visit_rvalue(\n         &mut self,\n         rvalue: &mir::Rvalue<'tcx>,\n         location: Location,\n     ) {\n         if let mir::Rvalue::Ref(_, kind, ref borrowed_place) = *rvalue {\n-            let is_mut = match kind {\n-                mir::BorrowKind::Mut { .. } => true,\n-\n-                | mir::BorrowKind::Shared\n-                | mir::BorrowKind::Shallow\n-                | mir::BorrowKind::Unique\n-                => {\n-                    !borrowed_place\n-                        .ty(self.body, self.tcx)\n-                        .ty\n-                        .is_freeze(self.tcx, self.param_env, DUMMY_SP)\n-                }\n-            };\n-\n-            if is_mut {\n+            if self.borrow_allows_mutation(kind, borrowed_place) {\n                 match borrowed_place.base {\n                     mir::PlaceBase::Local(borrowed_local) if !borrowed_place.is_indirect()\n                         => self.trans.gen(borrowed_local),"}, {"sha": "2d7b215b13c45d97e4497993294b7257403a3b6a", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccf1d9ca93e3a1f757efa42929d59080c8d7efac/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf1d9ca93e3a1f757efa42929d59080c8d7efac/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=ccf1d9ca93e3a1f757efa42929d59080c8d7efac", "patch": "@@ -137,7 +137,7 @@ pub fn compute_indirectly_mutable_locals<'mir, 'tcx>(\n         item.tcx,\n         item.body,\n         item.def_id,\n-        &[],\n+        &item.tcx.get_attrs(item.def_id),\n         &dead_unwinds,\n         old_dataflow::IndirectlyMutableLocals::new(item.tcx, item.body, item.param_env),\n         |_, local| old_dataflow::DebugFormatted::new(&local),"}, {"sha": "21360a1c471f652b54fe67d8cb14ccdea97cf7d4", "filename": "src/test/ui/consts/const-eval/generic-slice.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/ccf1d9ca93e3a1f757efa42929d59080c8d7efac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fgeneric-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccf1d9ca93e3a1f757efa42929d59080c8d7efac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fgeneric-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fgeneric-slice.rs?ref=ccf1d9ca93e3a1f757efa42929d59080c8d7efac", "patch": "@@ -0,0 +1,31 @@\n+// Several variants of #64945.\n+\n+// This struct is not important, we just use it to put `T` and `'a` in scope for our associated\n+// consts.\n+struct Generic<'a, T>(std::marker::PhantomData<&'a T>);\n+\n+impl<'a, T: 'static> Generic<'a, T> {\n+    const EMPTY_SLICE: &'a [T] = {\n+        let x: &'a [T] = &[];\n+        x\n+    };\n+\n+    const EMPTY_SLICE_REF: &'a &'static [T] = {\n+        let x: &'static [T] = &[];\n+        &x\n+        //~^ ERROR `x` does not live long enough\n+    };\n+}\n+\n+static mut INTERIOR_MUT_AND_DROP: &'static [std::cell::RefCell<Vec<i32>>] = {\n+    let x: &[_] = &[];\n+    x\n+};\n+\n+static mut INTERIOR_MUT_AND_DROP_REF: &'static &'static [std::cell::RefCell<Vec<i32>>] = {\n+    let x: &[_] = &[];\n+    &x\n+    //~^ ERROR `x` does not live long enough\n+};\n+\n+fn main() {}"}, {"sha": "c38088df4d8e62637d790d5f101f803beaa15ec3", "filename": "src/test/ui/consts/const-eval/generic-slice.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ccf1d9ca93e3a1f757efa42929d59080c8d7efac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fgeneric-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ccf1d9ca93e3a1f757efa42929d59080c8d7efac/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fgeneric-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fgeneric-slice.stderr?ref=ccf1d9ca93e3a1f757efa42929d59080c8d7efac", "patch": "@@ -0,0 +1,30 @@\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/generic-slice.rs:15:9\n+   |\n+LL | impl<'a, T: 'static> Generic<'a, T> {\n+   |      -- lifetime `'a` defined here\n+...\n+LL |         &x\n+   |         ^^\n+   |         |\n+   |         borrowed value does not live long enough\n+   |         using this value as a constant requires that `x` is borrowed for `'a`\n+LL |\n+LL |     };\n+   |     - `x` dropped here while still borrowed\n+\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/generic-slice.rs:27:5\n+   |\n+LL |     &x\n+   |     ^^\n+   |     |\n+   |     borrowed value does not live long enough\n+   |     using this value as a static requires that `x` is borrowed for `'static`\n+LL |\n+LL | };\n+   | - `x` dropped here while still borrowed\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}]}