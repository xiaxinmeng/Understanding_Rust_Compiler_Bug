{"sha": "60725def49834bb7dfd46c1a7b84d86f810e1d03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNzI1ZGVmNDk4MzRiYjdkZmQ0NmMxYTdiODRkODZmODEwZTFkMDM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-28T11:30:59Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-01-28T11:30:59Z"}, "message": "Simplify", "tree": {"sha": "08640bf8eb1cd8e7e36c65ba4266bdef87b7c628", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08640bf8eb1cd8e7e36c65ba4266bdef87b7c628"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60725def49834bb7dfd46c1a7b84d86f810e1d03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60725def49834bb7dfd46c1a7b84d86f810e1d03", "html_url": "https://github.com/rust-lang/rust/commit/60725def49834bb7dfd46c1a7b84d86f810e1d03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60725def49834bb7dfd46c1a7b84d86f810e1d03/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3cd2b2473b034f290d65e3dc839c0530e55de75b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3cd2b2473b034f290d65e3dc839c0530e55de75b", "html_url": "https://github.com/rust-lang/rust/commit/3cd2b2473b034f290d65e3dc839c0530e55de75b"}], "stats": {"total": 33, "additions": 5, "deletions": 28}, "files": [{"sha": "79a4c10d3cfa925a2d834c7ed6d968430ccc3dbc", "filename": "src/parser/event_parser/grammar/mod.rs", "status": "modified", "additions": 1, "deletions": 21, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/60725def49834bb7dfd46c1a7b84d86f810e1d03/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60725def49834bb7dfd46c1a7b84d86f810e1d03/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fgrammar%2Fmod.rs?ref=60725def49834bb7dfd46c1a7b84d86f810e1d03", "patch": "@@ -57,7 +57,7 @@ impl<'p> Parser<'p> {\n         err.complete(self, ERROR);\n     }\n \n-    pub(crate) fn expect(&mut self, kind: SyntaxKind) -> bool {\n+    fn expect(&mut self, kind: SyntaxKind) -> bool {\n         if self.at(kind) {\n             self.bump();\n             true\n@@ -77,40 +77,24 @@ impl<'p> Parser<'p> {\n \n trait Lookahead: Copy {\n     fn is_ahead(self, p: &Parser) -> bool;\n-    fn consume(p: &mut Parser);\n }\n \n impl Lookahead for SyntaxKind {\n     fn is_ahead(self, p: &Parser) -> bool {\n         p.current() == self\n     }\n-\n-    fn consume(p: &mut Parser) {\n-        p.bump();\n-    }\n }\n \n impl Lookahead for [SyntaxKind; 2] {\n     fn is_ahead(self, p: &Parser) -> bool {\n         p.current() == self[0] && p.raw_lookahead(1) == self[1]\n     }\n-\n-    fn consume(p: &mut Parser) {\n-        p.bump();\n-        p.bump();\n-    }\n }\n \n impl Lookahead for [SyntaxKind; 3] {\n     fn is_ahead(self, p: &Parser) -> bool {\n         p.current() == self[0] && p.raw_lookahead(1) == self[1] && p.raw_lookahead(2) == self[2]\n     }\n-\n-    fn consume(p: &mut Parser) {\n-        p.bump();\n-        p.bump();\n-        p.bump();\n-    }\n }\n \n #[derive(Clone, Copy)]\n@@ -121,8 +105,4 @@ impl<'a> Lookahead for AnyOf<'a> {\n         let curr = p.current();\n         self.0.iter().any(|&k| k == curr)\n     }\n-\n-    fn consume(p: &mut Parser) {\n-        p.bump();\n-    }\n }"}, {"sha": "2507af6bf975f5d7d981f045b04705a95590754e", "filename": "src/parser/event_parser/parser.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/60725def49834bb7dfd46c1a7b84d86f810e1d03/src%2Fparser%2Fevent_parser%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60725def49834bb7dfd46c1a7b84d86f810e1d03/src%2Fparser%2Fevent_parser%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fparser%2Fevent_parser%2Fparser.rs?ref=60725def49834bb7dfd46c1a7b84d86f810e1d03", "patch": "@@ -136,13 +136,6 @@ impl<'t> Parser<'t> {\n         self.events\n     }\n \n-    pub(crate) fn current(&self) -> SyntaxKind {\n-        if self.pos == self.tokens.len() {\n-            return EOF;\n-        }\n-        self.tokens[self.pos].kind\n-    }\n-\n     pub(crate) fn start(&mut self) -> Marker {\n         let m = Marker {\n             pos: self.events.len() as u32,\n@@ -175,6 +168,10 @@ impl<'t> Parser<'t> {\n         self.tokens.get(self.pos + n).map(|t| t.kind).unwrap_or(EOF)\n     }\n \n+    pub(crate) fn current(&self) -> SyntaxKind {\n+        self.raw_lookahead(0)\n+    }\n+\n     fn event(&mut self, event: Event) {\n         self.events.push(event)\n     }"}]}