{"sha": "aef8a9306d62fbad04a70c369e8472e47519f25d", "node_id": "C_kwDOAAsO6NoAKGFlZjhhOTMwNmQ2MmZiYWQwNGE3MGMzNjllODQ3MmU0NzUxOWYyNWQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-10T11:28:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-05-10T12:23:32Z"}, "message": "update/remove some old comments", "tree": {"sha": "5bad3c53918c0fae60a26d50783582f000a0d2d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bad3c53918c0fae60a26d50783582f000a0d2d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aef8a9306d62fbad04a70c369e8472e47519f25d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aef8a9306d62fbad04a70c369e8472e47519f25d", "html_url": "https://github.com/rust-lang/rust/commit/aef8a9306d62fbad04a70c369e8472e47519f25d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aef8a9306d62fbad04a70c369e8472e47519f25d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "600d9602610d1e6a79f98a2a07a660e945e3d22a", "url": "https://api.github.com/repos/rust-lang/rust/commits/600d9602610d1e6a79f98a2a07a660e945e3d22a", "html_url": "https://github.com/rust-lang/rust/commit/600d9602610d1e6a79f98a2a07a660e945e3d22a"}], "stats": {"total": 6, "additions": 1, "deletions": 5}, "files": [{"sha": "2c85a6103526967cab38a50467055a2c3b895e72", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aef8a9306d62fbad04a70c369e8472e47519f25d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aef8a9306d62fbad04a70c369e8472e47519f25d/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=aef8a9306d62fbad04a70c369e8472e47519f25d", "patch": "@@ -736,20 +736,16 @@ where\n         dest: &MPlaceTy<'tcx, M::PointerTag>,\n     ) -> InterpResult<'tcx> {\n         // Note that it is really important that the type here is the right one, and matches the\n-        // type things are read at. In case `src_val` is a `ScalarPair`, we don't do any magic here\n+        // type things are read at. In case `value` is a `ScalarPair`, we don't do any magic here\n         // to handle padding properly, which is only correct if we never look at this data with the\n         // wrong type.\n \n-        // Invalid places are a thing: the return place of a diverging function\n         let tcx = *self.tcx;\n         let Some(mut alloc) = self.get_place_alloc_mut(dest)? else {\n             // zero-sized access\n             return Ok(());\n         };\n \n-        // FIXME: We should check that there are dest.layout.size many bytes available in\n-        // memory.  The code below is not sufficient, with enough padding it might not\n-        // cover all the bytes!\n         match value {\n             Immediate::Scalar(scalar) => {\n                 let Abi::Scalar(s) = dest.layout.abi else { span_bug!("}]}