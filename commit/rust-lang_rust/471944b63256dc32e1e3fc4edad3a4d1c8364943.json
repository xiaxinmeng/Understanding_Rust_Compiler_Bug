{"sha": "471944b63256dc32e1e3fc4edad3a4d1c8364943", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MTk0NGI2MzI1NmRjMzJlMWUzZmM0ZWRhZDNhNGQxYzgzNjQ5NDM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-07-30T07:08:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-30T07:08:52Z"}, "message": "Merge pull request #381 from solson/sanity_checks\n\nUpdate to rustc sanity check branch", "tree": {"sha": "1f777e4844c083ca33bcea18a56defaeb6acbe28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f777e4844c083ca33bcea18a56defaeb6acbe28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/471944b63256dc32e1e3fc4edad3a4d1c8364943", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbXrmECRBK7hj4Ov3rIwAAdHIIAC77nei4bCwY955gdEsiyERC\nOpL6k9pY+7Ichf+QchBXS7zTMkOlAJwKzXFSpJLwB9IDjiKhiBV5NkB0O1HTu/Wq\nSqEo1pS05eKSHTWfw3OcBo1xHhXM8hlBEmn7fqdJ0R+4aA62TnZo+X21BVHk5hV6\n8/GavqHQKA8ewhuSYBOfTBfJfpJqCz+nZHQMViEk2pw91TNcVR9NI+IBq3liuCiY\n9jlrFycUd9CQ6z40GgRcUpRRy2Fop8e57gRs9X6FPc6YT/KOzWQaf2lREaNxwEJk\nfrc1SZnWxEc2MaTCJ66liOJ3gzBhlZW5xt7lO7n2JGfCJpiMgw6jA7EukGuswl4=\n=LUlm\n-----END PGP SIGNATURE-----\n", "payload": "tree 1f777e4844c083ca33bcea18a56defaeb6acbe28\nparent 79d0a01fa5db906d4280b0f9da0ab537a4c0232d\nparent bb6e7c824370d7431f35a3d7d52ab1836a045ad7\nauthor Ralf Jung <post@ralfj.de> 1532934532 +0200\ncommitter GitHub <noreply@github.com> 1532934532 +0200\n\nMerge pull request #381 from solson/sanity_checks\n\nUpdate to rustc sanity check branch"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/471944b63256dc32e1e3fc4edad3a4d1c8364943", "html_url": "https://github.com/rust-lang/rust/commit/471944b63256dc32e1e3fc4edad3a4d1c8364943", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/471944b63256dc32e1e3fc4edad3a4d1c8364943/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "79d0a01fa5db906d4280b0f9da0ab537a4c0232d", "url": "https://api.github.com/repos/rust-lang/rust/commits/79d0a01fa5db906d4280b0f9da0ab537a4c0232d", "html_url": "https://github.com/rust-lang/rust/commit/79d0a01fa5db906d4280b0f9da0ab537a4c0232d"}, {"sha": "bb6e7c824370d7431f35a3d7d52ab1836a045ad7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb6e7c824370d7431f35a3d7d52ab1836a045ad7", "html_url": "https://github.com/rust-lang/rust/commit/bb6e7c824370d7431f35a3d7d52ab1836a045ad7"}], "stats": {"total": 18, "additions": 11, "deletions": 7}, "files": [{"sha": "07ebca6491dd039663afb7cfbe05b314ab8f15cc", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/471944b63256dc32e1e3fc4edad3a4d1c8364943/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/471944b63256dc32e1e3fc4edad3a4d1c8364943/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=471944b63256dc32e1e3fc4edad3a4d1c8364943", "patch": "@@ -1,5 +1,3 @@\n-cargo-features = [\"default-run\"]\n-\n [package]\n authors = [\"Scott Olson <scott@solson.me>\"]\n description = \"An experimental interpreter for Rust MIR.\"\n@@ -8,7 +6,6 @@ name = \"miri\"\n repository = \"https://github.com/solson/miri\"\n version = \"0.1.0\"\n build = \"build.rs\"\n-default-run = \"miri\"\n \n [[bin]]\n doc = false\n@@ -33,5 +30,5 @@ log = \"0.4\"\n cargo_miri = [\"cargo_metadata\"]\n \n [dev-dependencies]\n-compiletest_rs = { version = \"0.3.4\", features = [\"tmp\"] }\n+compiletest_rs = { version = \"0.3.12\", features = [\"tmp\"] }\n colored = \"1.6\""}, {"sha": "dc2224c4ceefad270978ff11bfccb445c29fcc64", "filename": "src/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/471944b63256dc32e1e3fc4edad3a4d1c8364943/src%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471944b63256dc32e1e3fc4edad3a4d1c8364943/src%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic.rs?ref=471944b63256dc32e1e3fc4edad3a4d1c8364943", "patch": "@@ -245,10 +245,11 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n \n             \"discriminant_value\" => {\n                 let ty = substs.type_at(0);\n+                let layout = self.layout_of(ty)?;\n                 let adt_ptr = self.into_ptr(args[0].value)?;\n                 let adt_align = self.layout_of(args[0].ty)?.align;\n                 let place = Place::from_scalar_ptr(adt_ptr, adt_align);\n-                let discr_val = self.read_discriminant_value(place, ty)?;\n+                let discr_val = self.read_discriminant_value(place, layout)?;\n                 self.write_scalar(dest, Scalar::from_u128(discr_val), dest_layout.ty)?;\n             }\n \n@@ -343,7 +344,7 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'mir, 'tcx, super:\n                                 ty::layout::Abi::Scalar(_) => Value::Scalar(Scalar::null()),\n                                 _ => {\n                                     // FIXME(oli-obk): pass TyLayout to alloc_ptr instead of Ty\n-                                    let ptr = this.alloc_ptr(dest_layout.ty)?;\n+                                    let ptr = this.alloc_ptr(dest_layout)?;\n                                     let ptr = Scalar::Ptr(ptr);\n                                     this.memory.write_repeat(ptr, 0, size)?;\n                                     Value::ByRef(ptr, dest_layout.align)"}, {"sha": "676718ad7fe7623fdef93bdb7d2e44635d3f70f9", "filename": "src/validation.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/471944b63256dc32e1e3fc4edad3a4d1c8364943/src%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471944b63256dc32e1e3fc4edad3a4d1c8364943/src%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalidation.rs?ref=471944b63256dc32e1e3fc4edad3a4d1c8364943", "patch": "@@ -140,6 +140,7 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n             mir::Place::Static(ref s) => AbsPlace::Static(s.def_id),\n             mir::Place::Projection(ref p) =>\n                 AbsPlace::Projection(Box::new(self.abstract_place_projection(&*p)?)),\n+            _ => unimplemented!(\"validation is not currently maintained\"),\n         })\n     }\n \n@@ -765,7 +766,8 @@ impl<'a, 'mir, 'tcx: 'mir + 'a> EvalContextExt<'tcx> for EvalContext<'a, 'mir, '\n \n                     match adt.adt_kind() {\n                         AdtKind::Enum => {\n-                            let variant_idx = self.read_discriminant_as_variant_index(query.place.1, query.ty)?;\n+                            let layout = self.layout_of(query.ty)?;\n+                            let variant_idx = self.read_discriminant_as_variant_index(query.place.1, layout)?;\n                             let variant = &adt.variants[variant_idx];\n \n                             if !variant.fields.is_empty() {"}, {"sha": "6ac7f3e60c0d42fc3a03697d6adee46c256d6473", "filename": "tests/compile-fail/invalid_bool.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/471944b63256dc32e1e3fc4edad3a4d1c8364943/tests%2Fcompile-fail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471944b63256dc32e1e3fc4edad3a4d1c8364943/tests%2Fcompile-fail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool.rs?ref=471944b63256dc32e1e3fc4edad3a4d1c8364943", "patch": "@@ -1,3 +1,5 @@\n+//ignore-test FIXME (do some basic validation of invariants for all values in flight)\n+\n fn main() {\n     let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n     if b { unreachable!() } else { unreachable!() } //~ ERROR constant evaluation error"}, {"sha": "6ffba89fa5efbbaca3ad694d669b559ec6e9e755", "filename": "tests/compile-fail/modifying_constants.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/471944b63256dc32e1e3fc4edad3a4d1c8364943/tests%2Fcompile-fail%2Fmodifying_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/471944b63256dc32e1e3fc4edad3a4d1c8364943/tests%2Fcompile-fail%2Fmodifying_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmodifying_constants.rs?ref=471944b63256dc32e1e3fc4edad3a4d1c8364943", "patch": "@@ -1,3 +1,5 @@\n+// ignore-test FIXME: we are not making these statics read-only any more?\n+\n fn main() {\n     let x = &1; // the `&1` is promoted to a constant, but it used to be that only the pointer is marked static, not the pointee\n     let y = unsafe { &mut *(x as *const i32 as *mut i32) };"}]}