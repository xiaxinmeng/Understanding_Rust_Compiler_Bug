{"sha": "385b5a3a7d2d96701ebabd7a48a6332a212d9c99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4NWI1YTNhN2QyZDk2NzAxZWJhYmQ3YTQ4YTYzMzJhMjEyZDljOTk=", "commit": {"author": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-03-19T21:49:28Z"}, "committer": {"name": "Richo Healey", "email": "richo@psych0tik.net", "date": "2015-03-26T04:44:21Z"}, "message": "infer: Move TypeOrigin formatting onto it's enum\n\nThis doesn't actually solve the issue that prompted this, at:\n\nhttps://github.com/rust-lang/rust/blob/master/src/librustc/session/mod.rs#L262-271\n\nBut skimming the cfg it appears that all type information has been\ndiscarded long before that point.", "tree": {"sha": "050c2536288e46efc65480571d26538ce0552569", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/050c2536288e46efc65480571d26538ce0552569"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/385b5a3a7d2d96701ebabd7a48a6332a212d9c99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/385b5a3a7d2d96701ebabd7a48a6332a212d9c99", "html_url": "https://github.com/rust-lang/rust/commit/385b5a3a7d2d96701ebabd7a48a6332a212d9c99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/385b5a3a7d2d96701ebabd7a48a6332a212d9c99/comments", "author": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "richo", "id": 476418, "node_id": "MDQ6VXNlcjQ3NjQxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/476418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/richo", "html_url": "https://github.com/richo", "followers_url": "https://api.github.com/users/richo/followers", "following_url": "https://api.github.com/users/richo/following{/other_user}", "gists_url": "https://api.github.com/users/richo/gists{/gist_id}", "starred_url": "https://api.github.com/users/richo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/richo/subscriptions", "organizations_url": "https://api.github.com/users/richo/orgs", "repos_url": "https://api.github.com/users/richo/repos", "events_url": "https://api.github.com/users/richo/events{/privacy}", "received_events_url": "https://api.github.com/users/richo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed810385045ab0db90303574ba3ea47dfa2a36d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed810385045ab0db90303574ba3ea47dfa2a36d5", "html_url": "https://github.com/rust-lang/rust/commit/ed810385045ab0db90303574ba3ea47dfa2a36d5"}], "stats": {"total": 36, "additions": 21, "deletions": 15}, "files": [{"sha": "590099b596612d1a33543773645ce70f378b8254", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/385b5a3a7d2d96701ebabd7a48a6332a212d9c99/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385b5a3a7d2d96701ebabd7a48a6332a212d9c99/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=385b5a3a7d2d96701ebabd7a48a6332a212d9c99", "patch": "@@ -357,23 +357,9 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n         };\n \n-        let message_root_str = match trace.origin {\n-            infer::Misc(_) => \"mismatched types\",\n-            infer::MethodCompatCheck(_) => \"method not compatible with trait\",\n-            infer::ExprAssignable(_) => \"mismatched types\",\n-            infer::RelateTraitRefs(_) => \"mismatched traits\",\n-            infer::RelateSelfType(_) => \"mismatched types\",\n-            infer::RelateOutputImplTypes(_) => \"mismatched types\",\n-            infer::MatchExpressionArm(_, _) => \"match arms have incompatible types\",\n-            infer::IfExpression(_) => \"if and else have incompatible types\",\n-            infer::IfExpressionWithNoElse(_) => \"if may be missing an else clause\",\n-            infer::RangeExpression(_) => \"start and end of range have incompatible types\",\n-            infer::EquatePredicate(_) => \"equality predicate not satisfied\",\n-        };\n-\n         span_err!(self.tcx.sess, trace.origin.span(), E0308,\n             \"{}: {} ({})\",\n-                 message_root_str,\n+                 trace.origin,\n                  expected_found_str,\n                  ty::type_err_to_str(self.tcx, terr));\n "}, {"sha": "5ad37b0df62717621226ec6a3409db93e1dfb637", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/385b5a3a7d2d96701ebabd7a48a6332a212d9c99/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/385b5a3a7d2d96701ebabd7a48a6332a212d9c99/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=385b5a3a7d2d96701ebabd7a48a6332a212d9c99", "patch": "@@ -29,6 +29,7 @@ use middle::ty::replace_late_bound_regions;\n use middle::ty::{self, Ty};\n use middle::ty_fold::{TypeFolder, TypeFoldable};\n use std::cell::{RefCell};\n+use std::fmt;\n use std::rc::Rc;\n use syntax::ast;\n use syntax::codemap;\n@@ -128,6 +129,25 @@ pub enum TypeOrigin {\n     EquatePredicate(Span),\n }\n \n+impl fmt::Display for TypeOrigin {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(),fmt::Error> {\n+        let msg = match self {\n+            &TypeOrigin::Misc(_) => \"mismatched types\",\n+            &TypeOrigin::MethodCompatCheck(_) => \"method not compatible with trait\",\n+            &TypeOrigin::ExprAssignable(_) => \"mismatched types\",\n+            &TypeOrigin::RelateTraitRefs(_) => \"mismatched traits\",\n+            &TypeOrigin::RelateSelfType(_) => \"mismatched types\",\n+            &TypeOrigin::RelateOutputImplTypes(_) => \"mismatched types\",\n+            &TypeOrigin::MatchExpressionArm(_, _) => \"match arms have incompatible types\",\n+            &TypeOrigin::IfExpression(_) => \"if and else have incompatible types\",\n+            &TypeOrigin::IfExpressionWithNoElse(_) => \"if may be missing an else clause\",\n+            &TypeOrigin::RangeExpression(_) => \"start and end of range have incompatible types\",\n+            &TypeOrigin::EquatePredicate(_) => \"equality predicate not satisfied\",\n+        };\n+        fmt::Display::fmt(msg, f)\n+    }\n+}\n+\n /// See `error_reporting.rs` for more details\n #[derive(Clone, Debug)]\n pub enum ValuePairs<'tcx> {"}]}