{"sha": "f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYWIzMDI0YjI3Y2M3YzAyYTgwZmQ1NDM4MmExMGExYjRlZjNiY2Q=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-01-21T20:48:30Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2021-01-21T21:31:06Z"}, "message": "New lint: exhaustive_enums", "tree": {"sha": "9558720e5d3ec4380d97de2a4c613f71256c9574", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9558720e5d3ec4380d97de2a4c613f71256c9574"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd", "html_url": "https://github.com/rust-lang/rust/commit/f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "043cf97abc51bdb6df728d57957f1d194d988475", "url": "https://api.github.com/repos/rust-lang/rust/commits/043cf97abc51bdb6df728d57957f1d194d988475", "html_url": "https://github.com/rust-lang/rust/commit/043cf97abc51bdb6df728d57957f1d194d988475"}], "stats": {"total": 148, "additions": 148, "deletions": 0}, "files": [{"sha": "4cf2125ea2fc0e1d84dec31089bde70eec58181a", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd", "patch": "@@ -1938,6 +1938,7 @@ Released 2018-09-13\n [`erasing_op`]: https://rust-lang.github.io/rust-clippy/master/index.html#erasing_op\n [`eval_order_dependence`]: https://rust-lang.github.io/rust-clippy/master/index.html#eval_order_dependence\n [`excessive_precision`]: https://rust-lang.github.io/rust-clippy/master/index.html#excessive_precision\n+[`exhaustive_enums`]: https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_enums\n [`exit`]: https://rust-lang.github.io/rust-clippy/master/index.html#exit\n [`expect_fun_call`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_fun_call\n [`expect_used`]: https://rust-lang.github.io/rust-clippy/master/index.html#expect_used"}, {"sha": "099171962d3c983ee88eb0a46c4ca4d35edf47dc", "filename": "clippy_lints/src/exhaustive_enums.rs", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd/clippy_lints%2Fsrc%2Fexhaustive_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd/clippy_lints%2Fsrc%2Fexhaustive_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_enums.rs?ref=f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd", "patch": "@@ -0,0 +1,68 @@\n+use crate::utils::{snippet_opt, span_lint_and_help, span_lint_and_sugg};\n+use if_chain::if_chain;\n+use rustc_ast::ast::{Item, ItemKind};\n+use rustc_errors::Applicability;\n+use rustc_lint::{EarlyContext, EarlyLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Warns on any `enum`s that are not tagged `#[non_exhaustive]`\n+    ///\n+    /// **Why is this bad?** Exhaustive enums are typically fine, but a project which does\n+    /// not wish to make a stability commitment around enums may wish to disable them by default.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// enum Foo {\n+    ///     Bar,\n+    ///     Baz\n+    /// }\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// #[non_exhaustive]\n+    /// enum Foo {\n+    ///     Bar,\n+    ///     Baz\n+    /// }    /// ```\n+    pub EXHAUSTIVE_ENUMS,\n+    restriction,\n+    \"default lint description\"\n+}\n+\n+declare_lint_pass!(ExhaustiveEnums => [EXHAUSTIVE_ENUMS]);\n+\n+impl EarlyLintPass for ExhaustiveEnums {\n+    fn check_item(&mut self, cx: &EarlyContext<'_>, item: &Item) {\n+        if_chain! {\n+            if let ItemKind::Enum(..) = item.kind;\n+            if !item.attrs.iter().any(|a| a.has_name(sym::non_exhaustive));\n+            then {\n+                if let Some(snippet) = snippet_opt(cx, item.span) {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        EXHAUSTIVE_ENUMS,\n+                        item.span,\n+                        \"enums should not be exhaustive\",\n+                        \"try adding #[non_exhaustive]\",\n+                        format!(\"#[non_exhaustive]\\n{}\", snippet),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                } else {\n+                    span_lint_and_help(\n+                        cx,\n+                        EXHAUSTIVE_ENUMS,\n+                        item.span,\n+                        \"enums should not be exhaustive\",\n+                        None,\n+                        \"try adding #[non_exhaustive]\",\n+                    );\n+                }\n+            }\n+        }\n+    }\n+}"}, {"sha": "465ad3846cecfa3368c7e84e2b522cf47ab85140", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd", "patch": "@@ -200,6 +200,7 @@ mod escape;\n mod eta_reduction;\n mod eval_order_dependence;\n mod excessive_bools;\n+mod exhaustive_enums;\n mod exit;\n mod explicit_write;\n mod fallible_impl_from;\n@@ -611,6 +612,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &eval_order_dependence::EVAL_ORDER_DEPENDENCE,\n         &excessive_bools::FN_PARAMS_EXCESSIVE_BOOLS,\n         &excessive_bools::STRUCT_EXCESSIVE_BOOLS,\n+        &exhaustive_enums::EXHAUSTIVE_ENUMS,\n         &exit::EXIT,\n         &explicit_write::EXPLICIT_WRITE,\n         &fallible_impl_from::FALLIBLE_IMPL_FROM,\n@@ -1096,6 +1098,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box eval_order_dependence::EvalOrderDependence);\n     store.register_late_pass(|| box missing_doc::MissingDoc::new());\n     store.register_late_pass(|| box missing_inline::MissingInline);\n+    store.register_early_pass(move || box exhaustive_enums::ExhaustiveEnums);\n     store.register_late_pass(|| box if_let_some_result::OkIfLet);\n     store.register_late_pass(|| box partialeq_ne_impl::PartialEqNeImpl);\n     store.register_late_pass(|| box unused_io_amount::UnusedIoAmount);\n@@ -1246,6 +1249,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&create_dir::CREATE_DIR),\n         LintId::of(&dbg_macro::DBG_MACRO),\n         LintId::of(&else_if_without_else::ELSE_IF_WITHOUT_ELSE),\n+        LintId::of(&exhaustive_enums::EXHAUSTIVE_ENUMS),\n         LintId::of(&exit::EXIT),\n         LintId::of(&float_literal::LOSSY_FLOAT_LITERAL),\n         LintId::of(&implicit_return::IMPLICIT_RETURN),"}, {"sha": "2d5f0474bc0d807a4f8ddfc43d4532aaba919bbf", "filename": "tests/ui/exhaustive_enums.fixed", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd/tests%2Fui%2Fexhaustive_enums.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd/tests%2Fui%2Fexhaustive_enums.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexhaustive_enums.fixed?ref=f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd", "patch": "@@ -0,0 +1,24 @@\n+// run-rustfix\n+\n+#![deny(clippy::exhaustive_enums)]\n+#![allow(unused)]\n+\n+fn main() {\n+    // nop\n+}\n+\n+#[non_exhaustive]\n+enum Exhaustive {\n+    Foo,\n+    Bar,\n+    Baz,\n+    Quux(String),\n+}\n+\n+#[non_exhaustive]\n+enum NonExhaustive {\n+    Foo,\n+    Bar,\n+    Baz,\n+    Quux(String),\n+}"}, {"sha": "5c88454ae6121ec8e2fb8c28f928c0fcfb17f884", "filename": "tests/ui/exhaustive_enums.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd/tests%2Fui%2Fexhaustive_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd/tests%2Fui%2Fexhaustive_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexhaustive_enums.rs?ref=f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd", "patch": "@@ -0,0 +1,23 @@\n+// run-rustfix\n+\n+#![deny(clippy::exhaustive_enums)]\n+#![allow(unused)]\n+\n+fn main() {\n+    // nop\n+}\n+\n+enum Exhaustive {\n+    Foo,\n+    Bar,\n+    Baz,\n+    Quux(String),\n+}\n+\n+#[non_exhaustive]\n+enum NonExhaustive {\n+    Foo,\n+    Bar,\n+    Baz,\n+    Quux(String),\n+}"}, {"sha": "ee5a1836267eb4360642ddcde1855c3756c5e2d5", "filename": "tests/ui/exhaustive_enums.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd/tests%2Fui%2Fexhaustive_enums.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd/tests%2Fui%2Fexhaustive_enums.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexhaustive_enums.stderr?ref=f1ab3024b27cc7c02a80fd54382a10a1b4ef3bcd", "patch": "@@ -0,0 +1,28 @@\n+error: enums should not be exhaustive\n+  --> $DIR/exhaustive_enums.rs:10:1\n+   |\n+LL | / enum Exhaustive {\n+LL | |     Foo,\n+LL | |     Bar,\n+LL | |     Baz,\n+LL | |     Quux(String),\n+LL | | }\n+   | |_^\n+   |\n+note: the lint level is defined here\n+  --> $DIR/exhaustive_enums.rs:3:9\n+   |\n+LL | #![deny(clippy::exhaustive_enums)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^\n+help: try adding #[non_exhaustive]\n+   |\n+LL | #[non_exhaustive]\n+LL | enum Exhaustive {\n+LL |     Foo,\n+LL |     Bar,\n+LL |     Baz,\n+LL |     Quux(String),\n+ ...\n+\n+error: aborting due to previous error\n+"}]}