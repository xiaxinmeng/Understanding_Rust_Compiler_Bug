{"sha": "1d664622b6e46df7e41c0132ebbe60abcf482a21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkNjY0NjIyYjZlNDZkZjdlNDFjMDEzMmViYmU2MGFiY2Y0ODJhMjE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-11T12:41:21Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:59:38Z"}, "message": "remove `Canonicalization` trait, which serves no purpose", "tree": {"sha": "f1f616d68e79c471076a9fc52c0b26a33f0f2876", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1f616d68e79c471076a9fc52c0b26a33f0f2876"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d664622b6e46df7e41c0132ebbe60abcf482a21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d664622b6e46df7e41c0132ebbe60abcf482a21", "html_url": "https://github.com/rust-lang/rust/commit/1d664622b6e46df7e41c0132ebbe60abcf482a21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d664622b6e46df7e41c0132ebbe60abcf482a21/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d748dc5db04f8287510984caa3ecb6465836ecc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d748dc5db04f8287510984caa3ecb6465836ecc2", "html_url": "https://github.com/rust-lang/rust/commit/d748dc5db04f8287510984caa3ecb6465836ecc2"}], "stats": {"total": 183, "additions": 32, "deletions": 151}, "files": [{"sha": "aaa5a01e5016a9a812a44181c584001e4a9c3f9f", "filename": "src/librustc/infer/canonical/canonicalizer.rs", "status": "modified", "additions": 19, "deletions": 22, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fcanonicalizer.rs?ref=1d664622b6e46df7e41c0132ebbe60abcf482a21", "patch": "@@ -17,13 +17,13 @@\n \n use infer::canonical::{\n     Canonical, CanonicalTyVarKind, CanonicalVarInfo, CanonicalVarKind, CanonicalVarValues,\n-    Canonicalize,\n+    Canonicalized,\n };\n use infer::InferCtxt;\n use std::sync::atomic::Ordering;\n use ty::fold::{TypeFoldable, TypeFolder};\n use ty::subst::Kind;\n-use ty::{self, CanonicalVar, Slice, Ty, TyCtxt, TypeFlags};\n+use ty::{self, CanonicalVar, Lift, Slice, Ty, TyCtxt, TypeFlags};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::IndexVec;\n@@ -44,9 +44,12 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// out the [chapter in the rustc guide][c].\n     ///\n     /// [c]: https://rust-lang-nursery.github.io/rustc-guide/traits/canonicalization.html#canonicalizing-the-query\n-    pub fn canonicalize_query<V>(&self, value: &V) -> (V::Canonicalized, CanonicalVarValues<'tcx>)\n+    pub fn canonicalize_query<V>(\n+        &self,\n+        value: &V,\n+    ) -> (Canonicalized<'gcx, V>, CanonicalVarValues<'tcx>)\n     where\n-        V: Canonicalize<'gcx, 'tcx>,\n+        V: TypeFoldable<'tcx> + Lift<'gcx>,\n     {\n         self.tcx\n             .sess\n@@ -90,9 +93,9 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     pub fn canonicalize_response<V>(\n         &self,\n         value: &V,\n-    ) -> (V::Canonicalized, CanonicalVarValues<'tcx>)\n+    ) -> (Canonicalized<'gcx, V>, CanonicalVarValues<'tcx>)\n     where\n-        V: Canonicalize<'gcx, 'tcx>,\n+        V: TypeFoldable<'tcx> + Lift<'gcx>,\n     {\n         Canonicalizer::canonicalize(\n             value,\n@@ -233,9 +236,9 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n         infcx: Option<&'cx InferCtxt<'cx, 'gcx, 'tcx>>,\n         tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n         canonicalize_all_free_regions: CanonicalizeAllFreeRegions,\n-    ) -> (V::Canonicalized, CanonicalVarValues<'tcx>)\n+    ) -> (Canonicalized<'gcx, V>, CanonicalVarValues<'tcx>)\n     where\n-        V: Canonicalize<'gcx, 'tcx>,\n+        V: TypeFoldable<'tcx> + Lift<'gcx>,\n     {\n         debug_assert!(\n             !value.has_type_flags(TypeFlags::HAS_CANONICAL_VARS),\n@@ -254,13 +257,10 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n         // Fast path: nothing that needs to be canonicalized.\n         if !value.has_type_flags(needs_canonical_flags) {\n             let out_value = gcx.lift(value).unwrap();\n-            let canon_value = V::intern(\n-                gcx,\n-                Canonical {\n-                    variables: Slice::empty(),\n-                    value: out_value,\n-                },\n-            );\n+            let canon_value = Canonical {\n+                variables: Slice::empty(),\n+                value: out_value,\n+            };\n             let values = CanonicalVarValues {\n                 var_values: IndexVec::default(),\n             };\n@@ -291,13 +291,10 @@ impl<'cx, 'gcx, 'tcx> Canonicalizer<'cx, 'gcx, 'tcx> {\n \n         let canonical_variables = tcx.intern_canonical_var_infos(&canonicalizer.variables.raw);\n \n-        let canonical_value = V::intern(\n-            gcx,\n-            Canonical {\n-                variables: canonical_variables,\n-                value: out_value,\n-            },\n-        );\n+        let canonical_value = Canonical {\n+            variables: canonical_variables,\n+            value: out_value,\n+        };\n         let canonical_var_values = CanonicalVarValues {\n             var_values: canonicalizer.var_values,\n         };"}, {"sha": "62424ff9226dfe8588b16225076aba24ea5f0f91", "filename": "src/librustc/infer/canonical/mod.rs", "status": "modified", "additions": 2, "deletions": 29, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fmod.rs?ref=1d664622b6e46df7e41c0132ebbe60abcf482a21", "patch": "@@ -35,7 +35,6 @@ use infer::{InferCtxt, RegionVariableOrigin, TypeVariableOrigin};\n use rustc_data_structures::indexed_vec::IndexVec;\n use rustc_data_structures::sync::Lrc;\n use serialize::UseSpecializedDecodable;\n-use std::fmt::Debug;\n use std::ops::Index;\n use syntax::codemap::Span;\n use ty::fold::TypeFoldable;\n@@ -124,6 +123,8 @@ pub struct QueryResult<'tcx, R> {\n     pub value: R,\n }\n \n+pub type Canonicalized<'gcx, V> = Canonical<'gcx, <V as Lift<'gcx>>::Lifted>;\n+\n pub type CanonicalizedQueryResult<'gcx, T> =\n     Lrc<Canonical<'gcx, QueryResult<'gcx, <T as Lift<'gcx>>::Lifted>>>;\n \n@@ -184,19 +185,6 @@ impl<'tcx, R> Canonical<'tcx, QueryResult<'tcx, R>> {\n \n pub type QueryRegionConstraint<'tcx> = ty::Binder<ty::OutlivesPredicate<Kind<'tcx>, Region<'tcx>>>;\n \n-/// Trait implemented by values that can be canonicalized. It mainly\n-/// serves to identify the interning table we will use.\n-pub trait Canonicalize<'gcx: 'tcx, 'tcx>: TypeFoldable<'tcx> + Lift<'gcx> {\n-    type Canonicalized: 'gcx + Debug;\n-\n-    /// After a value has been fully canonicalized and lifted, this\n-    /// method will allocate it in a global arena.\n-    fn intern(\n-        gcx: TyCtxt<'_, 'gcx, 'gcx>,\n-        value: Canonical<'gcx, Self::Lifted>,\n-    ) -> Self::Canonicalized;\n-}\n-\n impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// Creates a substitution S for the canonical value with fresh\n     /// inference variables and applies it to the canonical value.\n@@ -344,18 +332,3 @@ impl<'tcx> Index<CanonicalVar> for CanonicalVarValues<'tcx> {\n         &self.var_values[value]\n     }\n }\n-\n-impl<'gcx: 'tcx, 'tcx, T> Canonicalize<'gcx, 'tcx> for QueryResult<'tcx, T>\n-where\n-    T: TypeFoldable<'tcx> + Lift<'gcx>,\n-{\n-    // we ought to intern this, but I'm too lazy just now\n-    type Canonicalized = Lrc<Canonical<'gcx, QueryResult<'gcx, T::Lifted>>>;\n-\n-    fn intern(\n-        _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n-        value: Canonical<'gcx, Self::Lifted>,\n-    ) -> Self::Canonicalized {\n-        Lrc::new(value)\n-    }\n-}"}, {"sha": "3fc68994e219782814903cc8136d60c5de3aa460", "filename": "src/librustc/infer/canonical/query_result.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fcanonical%2Fquery_result.rs?ref=1d664622b6e46df7e41c0132ebbe60abcf482a21", "patch": "@@ -19,13 +19,14 @@\n \n use infer::canonical::substitute::substitute_value;\n use infer::canonical::{\n-    Canonical, CanonicalVarValues, Canonicalize, CanonicalizedQueryResult, Certainty,\n+    Canonical, CanonicalVarValues, CanonicalizedQueryResult, Certainty,\n     QueryRegionConstraint, QueryResult,\n };\n use infer::region_constraints::{Constraint, RegionConstraintData};\n use infer::{InferCtxt, InferOk, InferResult, RegionObligation};\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::indexed_vec::IndexVec;\n+use rustc_data_structures::sync::Lrc;\n use std::fmt::Debug;\n use syntax::ast;\n use traits::query::NoSolution;\n@@ -72,7 +73,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n             canonical_result\n         );\n \n-        Ok(canonical_result)\n+        Ok(Lrc::new(canonical_result))\n     }\n \n     /// Helper for `make_canonicalized_query_result` that does\n@@ -84,8 +85,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         fulfill_cx: &mut FulfillmentContext<'tcx>,\n     ) -> Result<QueryResult<'tcx, T>, NoSolution>\n     where\n-        T: Debug,\n-        QueryResult<'tcx, T>: Canonicalize<'gcx, 'tcx>,\n+        T: Debug + TypeFoldable<'tcx> + Lift<'gcx>,\n     {\n         let tcx = self.tcx;\n "}, {"sha": "e9e2695fa5c7fc970a7eb1decb46c6101741cdbe", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=1d664622b6e46df7e41c0132ebbe60abcf482a21", "patch": "@@ -27,7 +27,6 @@ use ty::subst::Substs;\n use ty::{self, AdtKind, Slice, Ty, TyCtxt, GenericParamDefKind, ToPredicate};\n use ty::error::{ExpectedFound, TypeError};\n use ty::fold::{TypeFolder, TypeFoldable, TypeVisitor};\n-use infer::canonical::{Canonical, Canonicalize};\n use infer::{InferCtxt};\n \n use rustc_data_structures::sync::Lrc;\n@@ -1015,18 +1014,6 @@ pub fn provide(providers: &mut ty::query::Providers) {\n     };\n }\n \n-impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for ty::ParamEnvAnd<'tcx, Goal<'tcx>> {\n-    // we ought to intern this, but I'm too lazy just now\n-    type Canonicalized = Canonical<'gcx, ty::ParamEnvAnd<'gcx, Goal<'gcx>>>;\n-\n-    fn intern(\n-        _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n-        value: Canonical<'gcx, Self::Lifted>,\n-    ) -> Self::Canonicalized {\n-        value\n-    }\n-}\n-\n pub trait ExClauseFold<'tcx>\n where\n     Self: chalk_engine::context::Context + Clone,\n@@ -1053,20 +1040,3 @@ where\n         tcx: TyCtxt<'a, 'gcx, 'tcx>,\n     ) -> Option<Self::LiftedExClause>;\n }\n-\n-impl<'gcx: 'tcx, 'tcx, C> Canonicalize<'gcx, 'tcx> for chalk_engine::ExClause<C>\n-where\n-    C: chalk_engine::context::Context + Clone,\n-    C: ExClauseLift<'gcx> + ExClauseFold<'tcx>,\n-    C::Substitution: Clone,\n-    C::RegionConstraint: Clone,\n-{\n-    type Canonicalized = Canonical<'gcx, C::LiftedExClause>;\n-\n-    fn intern(\n-        _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n-        value: Canonical<'gcx, Self::Lifted>,\n-    ) -> Self::Canonicalized {\n-        value\n-    }\n-}"}, {"sha": "b843ae8f11afdc58b501c5027361b5da999d3468", "filename": "src/librustc/traits/query/dropck_outlives.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fdropck_outlives.rs?ref=1d664622b6e46df7e41c0132ebbe60abcf482a21", "patch": "@@ -9,12 +9,10 @@\n // except according to those terms.\n \n use infer::at::At;\n-use infer::canonical::{Canonical, Canonicalize};\n use infer::InferOk;\n use std::iter::FromIterator;\n-use traits::query::CanonicalTyGoal;\n-use ty::{self, Ty, TyCtxt};\n use ty::subst::Kind;\n+use ty::{self, Ty, TyCtxt};\n \n impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n     /// Given a type `ty` of some value being dropped, computes a set\n@@ -44,7 +42,10 @@ impl<'cx, 'gcx, 'tcx> At<'cx, 'gcx, 'tcx> {\n         // any destructor.\n         let tcx = self.infcx.tcx;\n         if trivial_dropck_outlives(tcx, ty) {\n-            return InferOk { value: vec![], obligations: vec![] };\n+            return InferOk {\n+                value: vec![],\n+                obligations: vec![],\n+            };\n         }\n \n         let gcx = tcx.global_tcx();\n@@ -152,17 +153,6 @@ impl<'tcx> FromIterator<DtorckConstraint<'tcx>> for DtorckConstraint<'tcx> {\n         result\n     }\n }\n-impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for ty::ParamEnvAnd<'tcx, Ty<'tcx>> {\n-    type Canonicalized = CanonicalTyGoal<'gcx>;\n-\n-    fn intern(\n-        _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n-        value: Canonical<'gcx, Self::Lifted>,\n-    ) -> Self::Canonicalized {\n-        value\n-    }\n-}\n-\n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for DropckOutlivesResult<'tcx> {\n         kinds, overflows"}, {"sha": "c81d1123d42af045f435f5fb9f5ca3da430e070c", "filename": "src/librustc/traits/query/evaluate_obligation.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fevaluate_obligation.rs?ref=1d664622b6e46df7e41c0132ebbe60abcf482a21", "patch": "@@ -9,11 +9,8 @@\n // except according to those terms.\n \n use infer::InferCtxt;\n-use infer::canonical::{Canonical, Canonicalize};\n use traits::{EvaluationResult, PredicateObligation, SelectionContext,\n              TraitQueryMode, OverflowError};\n-use traits::query::CanonicalPredicateGoal;\n-use ty::{ParamEnvAnd, Predicate, TyCtxt};\n \n impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// Evaluates whether the predicate can be satisfied (by any means)\n@@ -57,14 +54,3 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n }\n-\n-impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for ParamEnvAnd<'tcx, Predicate<'tcx>> {\n-    type Canonicalized = CanonicalPredicateGoal<'gcx>;\n-\n-    fn intern(\n-        _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n-        value: Canonical<'gcx, Self::Lifted>,\n-    ) -> Self::Canonicalized {\n-        value\n-    }\n-}"}, {"sha": "d459c2d82ad73817bf777d48db135921e6377e58", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=1d664622b6e46df7e41c0132ebbe60abcf482a21", "patch": "@@ -14,11 +14,9 @@\n \n use infer::{InferCtxt, InferOk};\n use infer::at::At;\n-use infer::canonical::{Canonical, Canonicalize};\n use middle::const_val::ConstVal;\n use mir::interpret::GlobalId;\n use traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n-use traits::query::CanonicalProjectionGoal;\n use traits::project::Normalized;\n use ty::{self, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder};\n@@ -250,17 +248,6 @@ BraceStructLiftImpl! {\n     }\n }\n \n-impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for ty::ParamEnvAnd<'tcx, ty::ProjectionTy<'tcx>> {\n-    type Canonicalized = CanonicalProjectionGoal<'gcx>;\n-\n-    fn intern(\n-        _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n-        value: Canonical<'gcx, Self::Lifted>,\n-    ) -> Self::Canonicalized {\n-        value\n-    }\n-}\n-\n impl_stable_hash_for!(struct NormalizationResult<'tcx> {\n     normalized_ty\n });"}, {"sha": "e89a022f818701ee93f7b2d2768204764965f485", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=1d664622b6e46df7e41c0132ebbe60abcf482a21", "patch": "@@ -21,7 +21,7 @@ use hir::map::DefPathData;\n use hir::svh::Svh;\n use ich::Fingerprint;\n use ich::StableHashingContext;\n-use infer::canonical::{Canonical, Canonicalize};\n+use infer::canonical::Canonical;\n use middle::lang_items::{FnTraitLangItem, FnMutTraitLangItem, FnOnceTraitLangItem};\n use middle::privacy::AccessLevels;\n use middle::resolve_lifetime::ObjectLifetimeDefault;\n@@ -591,15 +591,6 @@ impl<'tcx> serialize::UseSpecializedDecodable for Ty<'tcx> {}\n \n pub type CanonicalTy<'gcx> = Canonical<'gcx, Ty<'gcx>>;\n \n-impl <'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for Ty<'tcx> {\n-    type Canonicalized = CanonicalTy<'gcx>;\n-\n-    fn intern(_gcx: TyCtxt<'_, 'gcx, 'gcx>,\n-              value: Canonical<'gcx, Self::Lifted>) -> Self::Canonicalized {\n-        value\n-    }\n-}\n-\n extern {\n     /// A dummy type used to force Slice to by unsized without requiring fat pointers\n     type OpaqueSliceContents;"}, {"sha": "6062fe03e6a16d4651581af570ea2c42d86cb638", "filename": "src/librustc_traits/chalk_context.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc_traits%2Fchalk_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d664622b6e46df7e41c0132ebbe60abcf482a21/src%2Flibrustc_traits%2Fchalk_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fchalk_context.rs?ref=1d664622b6e46df7e41c0132ebbe60abcf482a21", "patch": "@@ -10,9 +10,7 @@\n \n use chalk_engine::fallible::Fallible as ChalkEngineFallible;\n use chalk_engine::{context, hh::HhGoal, DelayedLiteral, ExClause};\n-use rustc::infer::canonical::{\n-    Canonical, CanonicalVarValues, Canonicalize, QueryRegionConstraint, QueryResult,\n-};\n+use rustc::infer::canonical::{Canonical, CanonicalVarValues, QueryRegionConstraint, QueryResult};\n use rustc::infer::{InferCtxt, InferOk, LateBoundRegionConversionTime};\n use rustc::traits::{\n     WellFormed,\n@@ -519,14 +517,3 @@ BraceStructLiftImpl! {\n         subst, constraints\n     }\n }\n-\n-impl<'gcx: 'tcx, 'tcx> Canonicalize<'gcx, 'tcx> for ConstrainedSubst<'tcx> {\n-    type Canonicalized = Canonical<'gcx, ConstrainedSubst<'gcx>>;\n-\n-    fn intern(\n-        _gcx: TyCtxt<'_, 'gcx, 'gcx>,\n-        value: Canonical<'gcx, ConstrainedSubst<'gcx>>,\n-    ) -> Self::Canonicalized {\n-        value\n-    }\n-}"}]}