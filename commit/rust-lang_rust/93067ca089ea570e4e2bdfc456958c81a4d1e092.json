{"sha": "93067ca089ea570e4e2bdfc456958c81a4d1e092", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMDY3Y2EwODllYTU3MGU0ZTJiZGZjNDU2OTU4YzgxYTRkMWUwOTI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-08-26T16:23:42Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-09-03T10:39:35Z"}, "message": "Address comments and add requested tests", "tree": {"sha": "dcc0960db713f309dc92dd2fa23bfb596b9b9e8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcc0960db713f309dc92dd2fa23bfb596b9b9e8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93067ca089ea570e4e2bdfc456958c81a4d1e092", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93067ca089ea570e4e2bdfc456958c81a4d1e092", "html_url": "https://github.com/rust-lang/rust/commit/93067ca089ea570e4e2bdfc456958c81a4d1e092", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93067ca089ea570e4e2bdfc456958c81a4d1e092/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e67c2282afa3c527da49618b928280564e92868f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e67c2282afa3c527da49618b928280564e92868f", "html_url": "https://github.com/rust-lang/rust/commit/e67c2282afa3c527da49618b928280564e92868f"}], "stats": {"total": 643, "additions": 582, "deletions": 61}, "files": [{"sha": "541aeeb7d8dd7e861f6fa6519f358839862284ec", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 20, "deletions": 23, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -671,31 +671,28 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n \n         // Select just those fields of the `with`\n         // expression that will actually be used\n-        match with_cmt.ty.sty {\n-            ty::TyStruct(def, substs) => {\n-                // Consume those fields of the with expression that are needed.\n-                for with_field in &def.struct_variant().fields {\n-                    if !contains_field_named(with_field, fields) {\n-                        let cmt_field = self.mc.cat_field(\n-                            &*with_expr,\n-                            with_cmt.clone(),\n-                            with_field.name,\n-                            with_field.ty(self.tcx(), substs)\n-                        );\n-                        self.delegate_consume(with_expr.id, with_expr.span, cmt_field);\n-                    }\n+        if let ty::TyStruct(def, substs) = with_cmt.ty.sty {\n+            // Consume those fields of the with expression that are needed.\n+            for with_field in &def.struct_variant().fields {\n+                if !contains_field_named(with_field, fields) {\n+                    let cmt_field = self.mc.cat_field(\n+                        &*with_expr,\n+                        with_cmt.clone(),\n+                        with_field.name,\n+                        with_field.ty(self.tcx(), substs)\n+                    );\n+                    self.delegate_consume(with_expr.id, with_expr.span, cmt_field);\n                 }\n             }\n-            _ => {\n-                // the base expression should always evaluate to a\n-                // struct; however, when EUV is run during typeck, it\n-                // may not. This will generate an error earlier in typeck,\n-                // so we can just ignore it.\n-                if !self.tcx().sess.has_errors() {\n-                    span_bug!(\n-                        with_expr.span,\n-                        \"with expression doesn't evaluate to a struct\");\n-                }\n+        } else {\n+            // the base expression should always evaluate to a\n+            // struct; however, when EUV is run during typeck, it\n+            // may not. This will generate an error earlier in typeck,\n+            // so we can just ignore it.\n+            if !self.tcx().sess.has_errors() {\n+                span_bug!(\n+                    with_expr.span,\n+                    \"with expression doesn't evaluate to a struct\");\n             }\n         }\n "}, {"sha": "e88f72f2d84bc4a979ea85f64b77754060817ae6", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -1423,7 +1423,7 @@ bitflags! {\n         const IS_PHANTOM_DATA     = 1 << 3,\n         const IS_SIMD             = 1 << 4,\n         const IS_FUNDAMENTAL      = 1 << 5,\n-        const IS_UNION            = 1 << 7,\n+        const IS_UNION            = 1 << 6,\n     }\n }\n "}, {"sha": "c08dc9330b8fd0a877ab5634694483c0bba13698", "filename": "src/librustc_borrowck/borrowck/gather_loans/restrictions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Frestrictions.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -102,6 +102,7 @@ impl<'a, 'tcx> RestrictionsContext<'a, 'tcx> {\n                 let interior = interior.cleaned();\n                 let base_ty = cmt_base.ty;\n                 let result = self.restrict(cmt_base);\n+                // Borrowing one union field automatically borrows all its fields.\n                 if let ty::TyUnion(ref adt_def, _) = base_ty.sty {\n                     match result {\n                         RestrictionResult::Safe => RestrictionResult::Safe,"}, {"sha": "236a1a2835c2ae89c258a38783f3601701f35f23", "filename": "src/librustc_borrowck/borrowck/move_data.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmove_data.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -442,12 +442,12 @@ impl<'a, 'tcx> MoveData<'tcx> {\n         self.add_assignment_helper(tcx, lp.clone(), assign_id, span, assignee_id, mode);\n     }\n \n-    pub fn add_assignment_helper(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                 lp: Rc<LoanPath<'tcx>>,\n-                                 assign_id: ast::NodeId,\n-                                 span: Span,\n-                                 assignee_id: ast::NodeId,\n-                                 mode: euv::MutateMode) {\n+    fn add_assignment_helper(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                             lp: Rc<LoanPath<'tcx>>,\n+                             assign_id: ast::NodeId,\n+                             span: Span,\n+                             assignee_id: ast::NodeId,\n+                             mode: euv::MutateMode) {\n         debug!(\"add_assignment(lp={:?}, assign_id={}, assignee_id={}\",\n                lp, assign_id, assignee_id);\n "}, {"sha": "179863c16fff28f2b72c1371c63cfb9d1926608a", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 14, "deletions": 9, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -429,19 +429,24 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n                 let method = self.tcx.tables.borrow().method_map[&method_call];\n                 self.check_method(expr.span, method.def_id);\n             }\n-            hir::ExprStruct(_, ref fields, _) => {\n+            hir::ExprStruct(_, ref expr_fields, _) => {\n                 let adt = self.tcx.expr_ty(expr).ty_adt_def().unwrap();\n                 let variant = adt.variant_of_def(self.tcx.expect_def(expr.id));\n                 // RFC 736: ensure all unmentioned fields are visible.\n                 // Rather than computing the set of unmentioned fields\n-                // (i.e. `all_fields - fields`), just check them all.\n-                for field in variant.fields.iter() {\n-                    let span = if let Some(f) = fields.iter().find(|f| f.name.node == field.name) {\n-                        f.span\n-                    } else {\n-                        expr.span\n-                    };\n-                    self.check_field(span, adt, field);\n+                // (i.e. `all_fields - fields`), just check them all,\n+                // unless the ADT is a union, then unmentioned fields\n+                // are not checked.\n+                if adt.adt_kind() == ty::AdtKind::Union {\n+                    for expr_field in expr_fields {\n+                        self.check_field(expr.span, adt, variant.field_named(expr_field.name.node));\n+                    }\n+                } else {\n+                    for field in &variant.fields {\n+                        let expr_field = expr_fields.iter().find(|f| f.name.node == field.name);\n+                        let span = if let Some(f) = expr_field { f.span } else { expr.span };\n+                        self.check_field(span, adt, field);\n+                    }\n                 }\n             }\n             hir::ExprPath(..) => {"}, {"sha": "34c92f334d0ac6d387eebcfeecc45e3cfddf21aa", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -265,13 +265,13 @@ pub fn implement_drop_glue<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n     fcx.finish(bcx, DebugLoc::None);\n }\n \n-fn trans_struct_drop<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n+fn trans_custom_dtor<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                                  t: Ty<'tcx>,\n                                  v0: ValueRef,\n                                  shallow_drop: bool)\n                                  -> Block<'blk, 'tcx>\n {\n-    debug!(\"trans_struct_drop t: {}\", t);\n+    debug!(\"trans_custom_dtor t: {}\", t);\n     let tcx = bcx.tcx();\n     let mut bcx = bcx;\n \n@@ -489,11 +489,11 @@ fn make_drop_glue<'blk, 'tcx>(bcx: Block<'blk, 'tcx>, v0: ValueRef, g: DropGlueK\n         }\n         ty::TyStruct(def, _) | ty::TyEnum(def, _)\n                 if def.dtor_kind().is_present() && !skip_dtor => {\n-            trans_struct_drop(bcx, t, v0, false)\n+            trans_custom_dtor(bcx, t, v0, false)\n         }\n         ty::TyUnion(def, _) => {\n             if def.dtor_kind().is_present() && !skip_dtor {\n-                trans_struct_drop(bcx, t, v0, true)\n+                trans_custom_dtor(bcx, t, v0, true)\n             } else {\n                 bcx\n             }"}, {"sha": "12fce4b928e08fe26eae293553a68425d3b60e23", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -718,12 +718,11 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // Report an error if incorrect number of the fields were specified.\n         if kind_name == \"union\" {\n-            if fields.len() > 1 {\n-                tcx.sess.span_err(span, \"union patterns can have at most one field\");\n+            if fields.len() != 1 {\n+                tcx.sess.span_err(span, \"union patterns should have exactly one field\");\n             }\n-            if fields.is_empty() && !etc {\n-                tcx.sess.span_err(span, \"union patterns without `..` \\\n-                                         should have at least one field\");\n+            if etc {\n+                tcx.sess.span_err(span, \"`..` cannot be used in union patterns\");\n             }\n         } else if !etc {\n             for field in variant.fields"}, {"sha": "7a04d377608d4ac2627230461d2e20ce41d7c623", "filename": "src/rt/rust_test_helpers.c", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Frt%2Frust_test_helpers.c", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Frt%2Frust_test_helpers.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_test_helpers.c?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -247,3 +247,24 @@ double rust_interesting_average(uint64_t n, ...) {\n int32_t rust_int8_to_int32(int8_t x) {\n     return (int32_t)x;\n }\n+\n+typedef union LARGE_INTEGER {\n+  struct {\n+    uint32_t LowPart;\n+    uint32_t HighPart;\n+  };\n+  struct {\n+    uint32_t LowPart;\n+    uint32_t HighPart;\n+  } u;\n+  uint64_t QuadPart;\n+} LARGE_INTEGER;\n+\n+LARGE_INTEGER increment_all_parts(LARGE_INTEGER li) {\n+    li.LowPart += 1;\n+    li.HighPart += 1;\n+    li.u.LowPart += 1;\n+    li.u.HighPart += 1;\n+    li.QuadPart += 1;\n+    return li;\n+}"}, {"sha": "19975d79b60be3fae35df9a0e02ac06179bffcc6", "filename": "src/test/compile-fail/borrowck/borrowck-union-borrow-nested.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-borrow-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-borrow-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-borrow-nested.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/compile-fail/union-borrow-nested.rs"}, {"sha": "e8989a3c2d4998b733199b580fe9c6a8e84b6b80", "filename": "src/test/compile-fail/borrowck/borrowck-union-borrow.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-borrow.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/compile-fail/union-borrow.rs"}, {"sha": "d4d7bc6b0f7c5c5a038d2a14635b80a446cdcb24", "filename": "src/test/compile-fail/borrowck/borrowck-union-move-assign.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-move-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-move-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-move-assign.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/compile-fail/union-move-assign.rs"}, {"sha": "5320244cf43b3576a286f28a22a42606012f176e", "filename": "src/test/compile-fail/borrowck/borrowck-union-move.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-move.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/compile-fail/union-move.rs"}, {"sha": "36e062f8464e9962a0024a5555ac0b468f2496ec", "filename": "src/test/compile-fail/borrowck/borrowck-union-uninitialized.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-uninitialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-uninitialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-union-uninitialized.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/compile-fail/union-uninitialized.rs"}, {"sha": "4924fabafb0a0ee465be0c1991e26e3436b0e54c", "filename": "src/test/compile-fail/privacy/union-field-privacy-1.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Fprivacy%2Funion-field-privacy-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Fprivacy%2Funion-field-privacy-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Funion-field-privacy-1.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(pub_restricted)]\n+#![feature(untagged_unions)]\n+\n+mod m {\n+    pub union U {\n+        pub a: u8,\n+        pub(super) b: u8,\n+        c: u8,\n+    }\n+}\n+\n+fn main() {\n+    let u = m::U { a: 0 }; // OK\n+    let u = m::U { b: 0 }; // OK\n+    let u = m::U { c: 0 }; //~ ERROR field `c` of union `m::U` is private\n+\n+    let m::U { a } = u; // OK\n+    let m::U { b } = u; // OK\n+    let m::U { c } = u; //~ ERROR field `c` of union `m::U` is private\n+}"}, {"sha": "7151538f412568893dfab75a11a1636c594ac923", "filename": "src/test/compile-fail/privacy/union-field-privacy-2.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Fprivacy%2Funion-field-privacy-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Fprivacy%2Funion-field-privacy-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Funion-field-privacy-2.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(pub_restricted)]\n+#![feature(untagged_unions)]\n+\n+mod m {\n+    pub union U {\n+        pub a: u8,\n+        pub(super) b: u8,\n+        c: u8,\n+    }\n+}\n+\n+fn main() {\n+    let u = m::U { a: 10 };\n+\n+    let a = u.a; // OK\n+    let b = u.b; // OK\n+    let c = u.c; //~ ERROR field `c` of struct `m::U` is private\n+}"}, {"sha": "b2bf173c59c8667dd1363d5f036a6374b8cf2f26", "filename": "src/test/compile-fail/union/union-const-eval.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-const-eval.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/compile-fail/union-const-eval.rs"}, {"sha": "3d168980ed246b957bb7804ecca23989f555d6d7", "filename": "src/test/compile-fail/union/union-const-pat.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-const-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-const-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-const-pat.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/compile-fail/union-const-pat.rs"}, {"sha": "6e08ae0074d482069261440d1b9ce99947077428", "filename": "src/test/compile-fail/union/union-copy.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-copy.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+union U {\n+    a: u8\n+}\n+\n+union W {\n+    a: String\n+}\n+\n+impl Clone for U { fn clone(&self) { panic!(); } }\n+impl Clone for W { fn clone(&self) { panic!(); } }\n+impl Copy for U {} // OK\n+impl Copy for W {} //~ ERROR the trait `Copy` may not be implemented for this type\n+\n+fn main() {}"}, {"sha": "0f78e96f640c75b8c44b32dd28cdf6172372622b", "filename": "src/test/compile-fail/union/union-derive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-derive.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/compile-fail/union-derive.rs"}, {"sha": "ce5bbf60fee2547eeb9a6ccdfca8e4f2d9efb3be", "filename": "src/test/compile-fail/union/union-empty.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-empty.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/compile-fail/union-empty.rs"}, {"sha": "abfc4d909218b5490b0e1c1271411ffd53258d86", "filename": "src/test/compile-fail/union/union-feature-gate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-feature-gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-feature-gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-feature-gate.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+union U { //~ ERROR unions are unstable and possibly buggy\n+    a: u8,\n+}\n+\n+fn main() {}"}, {"sha": "a1721dda7decb70b44d39312831ce2cb5401ae57", "filename": "src/test/compile-fail/union/union-fields.rs", "status": "renamed", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-fields.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -24,11 +24,12 @@ fn main() {\n     let u = U { ..u }; //~ ERROR union expressions should have exactly one field\n                        //~^ ERROR functional record update syntax requires a struct\n \n-    let U {} = u; //~ ERROR union patterns without `..` should have at least one field\n+    let U {} = u; //~ ERROR union patterns should have exactly one field\n     let U { a } = u; // OK\n-    let U { a, b } = u; //~ ERROR union patterns can have at most one field\n-    let U { a, b, c } = u; //~ ERROR union patterns can have at most one field\n+    let U { a, b } = u; //~ ERROR union patterns should have exactly one field\n+    let U { a, b, c } = u; //~ ERROR union patterns should have exactly one field\n                            //~^ ERROR union `U` does not have a field named `c`\n-    let U { .. } = u; // OK\n-    let U { a, .. } = u; // OK\n+    let U { .. } = u; //~ ERROR union patterns should have exactly one field\n+                      //~^ ERROR `..` cannot be used in union patterns\n+    let U { a, .. } = u; //~ ERROR `..` cannot be used in union patterns\n }", "previous_filename": "src/test/compile-fail/union-fields.rs"}, {"sha": "e6586b0fb7f6adeb00e24b75b6c789210bda2d3a", "filename": "src/test/compile-fail/union/union-generic.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-generic.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+use std::rc::Rc;\n+\n+union U<T: Copy> {\n+    a: T\n+}\n+\n+fn main() {\n+    let u = U { a: Rc::new(0u32) };\n+    //~^ ERROR  the trait bound `std::rc::Rc<u32>: std::marker::Copy` is not satisfied\n+    let u = U::<Rc<u32>> { a: Default::default() };\n+    //~^ ERROR  the trait bound `std::rc::Rc<u32>: std::marker::Copy` is not satisfied\n+}"}, {"sha": "cb4683c2a0e12bf0abfcef0579ae2a8913472541", "filename": "src/test/compile-fail/union/union-nonrepresentable.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-nonrepresentable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-nonrepresentable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-nonrepresentable.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/compile-fail/union-nonrepresentable.rs"}, {"sha": "d7dfb126c93248d70d10c25c72f70956683cf664", "filename": "src/test/compile-fail/union/union-repr-c.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-repr-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-repr-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-repr-c.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+#![allow(unused)]\n+#![deny(improper_ctypes)]\n+\n+#[repr(C)]\n+union U {\n+    a: u8,\n+}\n+\n+union W {\n+    a: u8,\n+}\n+\n+extern \"C\" {\n+    static FOREIGN1: U; // OK\n+    static FOREIGN2: W; //~ ERROR found union without foreign-function-safe representation\n+}\n+\n+fn main() {}"}, {"sha": "b05e9b6e27334bae4d024537cdad3211147d83ef", "filename": "src/test/compile-fail/union/union-suggest-field.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-suggest-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-suggest-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-suggest-field.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+union U {\n+    principal: u8,\n+}\n+\n+impl U {\n+    fn calculate(&self) {}\n+}\n+\n+fn main() {\n+    let u = U { principle: 0 }; //~ ERROR union `U` has no field named `principle`\n+                                //~^ HELP did you mean `principal`?\n+    let w = u.principial; //~ ERROR attempted access of field `principial` on type `U`\n+                          //~^ HELP did you mean `principal`?\n+\n+    let y = u.calculate; //~ ERROR attempted to take value of method `calculate` on type `U`\n+                         //~^ HELP maybe a `()` to call it is missing?\n+}"}, {"sha": "97e1ec2cba865d24d9d8dcd52daf163a4f8a41e1", "filename": "src/test/compile-fail/union/union-unsafe.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsafe.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -15,9 +15,10 @@ union U {\n }\n \n fn main() {\n-    let u = U { a: 10 }; // OK\n+    let mut u = U { a: 10 }; // OK\n     let a = u.a; //~ ERROR access to union field requires unsafe function or block\n+    u.a = 11; //~ ERROR access to union field requires unsafe function or block\n     let U { a } = u; //~ ERROR matching on union field requires unsafe function or block\n-    if let U { a: 11 } = u {} //~ ERROR matching on union field requires unsafe function or block\n-    let U { .. } = u; // OK\n+    if let U { a: 12 } = u {} //~ ERROR matching on union field requires unsafe function or block\n+    // let U { .. } = u; // OK\n }", "previous_filename": "src/test/compile-fail/union-unsafe.rs"}, {"sha": "a238eaf052508460677a4c59f893754a2abf70f3", "filename": "src/test/compile-fail/union/union-unsized.rs", "status": "renamed", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-unsized.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -12,6 +12,12 @@\n \n union U {\n     a: str, //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n+    b: u8,\n+}\n+\n+union W {\n+    a: u8,\n+    b: str, //~ ERROR the trait bound `str: std::marker::Sized` is not satisfied\n }\n \n fn main() {}", "previous_filename": "src/test/compile-fail/union-unsized.rs"}, {"sha": "87a72efbe08e51fe8f77d5fdd857739112f28c63", "filename": "src/test/compile-fail/union/union-with-drop-fields-lint.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-with-drop-fields-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Fcompile-fail%2Funion%2Funion-with-drop-fields-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funion%2Funion-with-drop-fields-lint.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/compile-fail/union-with-drop-fields-lint.rs"}, {"sha": "dc0ca7c81c00952d455f688bd61f0921015b9212", "filename": "src/test/run-pass/union/auxiliary/union.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Fauxiliary%2Funion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Fauxiliary%2Funion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Fauxiliary%2Funion.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/run-pass/auxiliary/union.rs"}, {"sha": "9394b618ddf25b1aeef058f9b6fa1f6e5d8f6107", "filename": "src/test/run-pass/union/union-backcomp.rs", "status": "renamed", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-backcomp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-backcomp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-backcomp.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -10,7 +10,11 @@\n \n #![feature(untagged_unions)]\n \n+fn union() {}\n+\n fn main() {\n+    union();\n+\n     let union = 10;\n \n     union;", "previous_filename": "src/test/run-pass/union-backcomp.rs"}, {"sha": "1651aa901b966be61c1c2166fd7ebf243d66b259", "filename": "src/test/run-pass/union/union-basic.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-basic.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/run-pass/union-basic.rs"}, {"sha": "a9f97620ebd46e3c365f2c211a844c187645b66d", "filename": "src/test/run-pass/union/union-c-interop.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-c-interop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-c-interop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-c-interop.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+#[derive(Copy)]\n+#[repr(C)]\n+struct LARGE_INTEGER_U {\n+    LowPart: u32,\n+    HighPart: u32,\n+}\n+\n+#[derive(Copy)]\n+#[repr(C)]\n+union LARGE_INTEGER {\n+  __unnamed__: LARGE_INTEGER_U,\n+  u: LARGE_INTEGER_U,\n+  QuadPart: u64,\n+}\n+\n+impl Clone for LARGE_INTEGER_U { fn clone(&self) -> Self { *self } }\n+impl Clone for LARGE_INTEGER { fn clone(&self) -> Self { *self } }\n+\n+#[link(name = \"rust_test_helpers\")]\n+extern \"C\" {\n+    fn increment_all_parts(_: LARGE_INTEGER) -> LARGE_INTEGER;\n+}\n+\n+fn main() {\n+    unsafe {\n+        let mut li = LARGE_INTEGER { QuadPart: 0 };\n+        let li_c = increment_all_parts(li);\n+        li.__unnamed__.LowPart += 1;\n+        li.__unnamed__.HighPart += 1;\n+        li.u.LowPart += 1;\n+        li.u.HighPart += 1;\n+        li.QuadPart += 1;\n+        assert_eq!(li.QuadPart, li_c.QuadPart);\n+    }\n+}"}, {"sha": "bdae1a0eaf88f8accb505083de6303e4ff31abb3", "filename": "src/test/run-pass/union/union-const-trans.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-const-trans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-const-trans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-const-trans.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/run-pass/union-const-trans.rs"}, {"sha": "b71c23990a474ba3d618c08786c70a55dd5180bc", "filename": "src/test/run-pass/union/union-derive.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-derive.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/run-pass/union-derive.rs"}, {"sha": "0da68e43f32a1e91fb99ed4eddd7b63cc2d0bbcd", "filename": "src/test/run-pass/union/union-drop-assign.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-drop-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-drop-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-drop-assign.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/run-pass/union-drop-assign.rs"}, {"sha": "2ca68dc3b6e39dd0102e843d78e256eb20bae9b7", "filename": "src/test/run-pass/union/union-drop.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-drop.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/run-pass/union-drop.rs"}, {"sha": "9293805edbf832c92c3dc4e7702a54686b3bff3b", "filename": "src/test/run-pass/union/union-generic.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-generic.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -0,0 +1,43 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+union MaybeItem<T: Iterator> {\n+    elem: T::Item,\n+    none: (),\n+}\n+\n+union U<A, B> {\n+    a: A,\n+    b: B,\n+}\n+\n+unsafe fn union_transmute<A, B>(a: A) -> B {\n+    U { a: a }.b\n+}\n+\n+fn main() {\n+    unsafe {\n+        let u = U::<String, Vec<u8>> { a: String::from(\"abcd\") };\n+\n+        assert_eq!(u.b.len(), 4);\n+        assert_eq!(u.b[0], b'a');\n+\n+        let b = union_transmute::<(u8, u8), u16>((1, 1));\n+        assert_eq!(b, (1 << 8) + 1);\n+\n+        let v: Vec<u8> = vec![1, 2, 3];\n+        let mut i = v.iter();\n+        i.next();\n+        let mi = MaybeItem::<std::slice::Iter<_>> { elem: i.next().unwrap() };\n+        assert_eq!(*mi.elem, 2);\n+    }\n+}"}, {"sha": "adea27bd25462a58a737b5dfaef42a92fe61080a", "filename": "src/test/run-pass/union/union-inherent-method.rs", "status": "renamed", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-inherent-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-inherent-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-inherent-method.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -10,12 +10,15 @@\n \n #![feature(untagged_unions)]\n \n-mod m {\n-    pub union U {\n-        a: u8\n-    }\n+union U {\n+    a: u8,\n+}\n+\n+impl U {\n+    fn method(&self) -> u8 { unsafe { self.a } }\n }\n \n fn main() {\n-    let u = m::U { a: 0 }; //~ ERROR field `a` of union `m::U` is private\n+    let u = U { a: 10 };\n+    assert_eq!(u.method(), 10);\n }", "previous_filename": "src/test/compile-fail/union-field-privacy.rs"}, {"sha": "a23fbc3be9e2c8be22c0d715c774da7269311570", "filename": "src/test/run-pass/union/union-macro.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-macro.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+macro_rules! duplicate {\n+   ($i: item) => {\n+        mod m1 {\n+            $i\n+        }\n+        mod m2 {\n+            $i\n+        }\n+   }\n+}\n+\n+duplicate! {\n+    pub union U {\n+        pub a: u8\n+    }\n+}\n+\n+fn main() {\n+    let u1 = m1::U { a: 0 };\n+    let u2 = m2::U { a: 0 };\n+}"}, {"sha": "9389a6237bca61cbdf7d601ff095c2a3d146a900", "filename": "src/test/run-pass/union/union-overwrite.rs", "status": "added", "additions": 80, "deletions": 0, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-overwrite.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -0,0 +1,80 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+#[repr(C)]\n+struct Pair<T, U>(T, U);\n+#[repr(C)]\n+struct Triple<T>(T, T, T);\n+\n+#[repr(C)]\n+union U<A, B> {\n+    a: Pair<A, A>,\n+    b: B,\n+}\n+\n+#[repr(C)]\n+union W<A, B> {\n+    a: A,\n+    b: B,\n+}\n+\n+#[cfg(target_endian = \"little\")]\n+unsafe fn check() {\n+    let mut u = U::<u8, u16> { b: 0xDE_DE };\n+    u.a.0 = 0xBE;\n+    assert_eq!(u.b, 0xDE_BE);\n+\n+    let mut u = U::<u16, u32> { b: 0xDEAD_DEAD };\n+    u.a.0 = 0xBEEF;\n+    assert_eq!(u.b, 0xDEAD_BEEF);\n+\n+    let mut u = U::<u32, u64> { b: 0xDEADBEEF_DEADBEEF };\n+    u.a.0 = 0xBAADF00D;\n+    assert_eq!(u.b, 0xDEADBEEF_BAADF00D);\n+\n+    let mut w = W::<Pair<Triple<u8>, u8>, u32> { b: 0xDEAD_DEAD };\n+    w.a.0 = Triple(0, 0, 0);\n+    assert_eq!(w.b, 0xDE00_0000);\n+\n+    let mut w = W::<Pair<u8, Triple<u8>>, u32> { b: 0xDEAD_DEAD };\n+    w.a.1 = Triple(0, 0, 0);\n+    assert_eq!(w.b, 0x0000_00AD);\n+}\n+\n+#[cfg(target_endian = \"big\")]\n+unsafe fn check() {\n+    let mut u = U::<u8, u16> { b: 0xDE_DE };\n+    u.a.0 = 0xBE;\n+    assert_eq!(u.b, 0xBE_DE);\n+\n+    let mut u = U::<u16, u32> { b: 0xDEAD_DEAD };\n+    u.a.0 = 0xBEEF;\n+    assert_eq!(u.b, 0xBEEF_DEAD);\n+\n+    let mut u = U::<u32, u64> { b: 0xDEADBEEF_DEADBEEF };\n+    u.a.0 = 0xBAADF00D;\n+    assert_eq!(u.b, 0xBAADF00D_DEADBEEF);\n+\n+    let mut w = W::<Pair<Triple<u8>, u8>, u32> { b: 0xDEAD_DEAD };\n+    w.a.0 = Triple(0, 0, 0);\n+    assert_eq!(w.b, 0x0000_00AD);\n+\n+    let mut w = W::<Pair<u8, Triple<u8>>, u32> { b: 0xDEAD_DEAD };\n+    w.a.1 = Triple(0, 0, 0);\n+    assert_eq!(w.b, 0xDE00_0000);\n+}\n+\n+fn main() {\n+    unsafe {\n+        check();\n+    }\n+}"}, {"sha": "6a61280823e50ff43cd1a419a5cce5c424a90dc7", "filename": "src/test/run-pass/union/union-packed.rs", "status": "renamed", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-packed.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -71,4 +71,34 @@ fn main() {\n     assert_eq!(align_of::<Up>(), 1);\n     assert_eq!(align_of_val(&up), 1);\n     assert_eq!(align_of_val(&CUP), 1);\n+\n+    hybrid::check_hybrid();\n+}\n+\n+mod hybrid {\n+    use std::mem::size_of;\n+\n+    #[repr(packed)]\n+    struct S1 {\n+        a: u16,\n+        b: u8,\n+    }\n+\n+    #[repr(packed)]\n+    union U {\n+        s: S1,\n+        c: u16,\n+    }\n+\n+    #[repr(packed)]\n+    struct S2 {\n+        d: u8,\n+        u: U,\n+    }\n+\n+    pub fn check_hybrid() {\n+        assert_eq!(size_of::<S1>(), 3);\n+        assert_eq!(size_of::<U>(), 3);\n+        assert_eq!(size_of::<S2>(), 4);\n+    }\n }", "previous_filename": "src/test/run-pass/union-packed.rs"}, {"sha": "e6144f35f1d549056d4da1f98579fa6004ff1146", "filename": "src/test/run-pass/union/union-pat-refutability.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-pat-refutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-pat-refutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-pat-refutability.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/run-pass/union-pat-refutability.rs"}, {"sha": "a5a2be0133abaf55e13fef61a7086371d2403e46", "filename": "src/test/run-pass/union/union-trait-impl.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-trait-impl.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(untagged_unions)]\n+\n+use std::fmt;\n+\n+union U {\n+    a: u8\n+}\n+\n+impl fmt::Display for U {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+        unsafe { write!(f, \"Oh hai {}\", self.a) }\n+    }\n+}\n+\n+fn main() {\n+    assert_eq!(U { a: 2 }.to_string(), \"Oh hai 2\");\n+}"}, {"sha": "4eb66268ab8eab8fc55b20e60c6b7ed09a2db099", "filename": "src/test/run-pass/union/union-transmute.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-transmute.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/run-pass/union-transmute.rs"}, {"sha": "5a1424830d07480288f9b47f287f39109baa3deb", "filename": "src/test/run-pass/union/union-with-drop-fields-lint.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-with-drop-fields-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-with-drop-fields-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-with-drop-fields-lint.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-pretty\n+\n+#![feature(untagged_unions)]\n+#![allow(dead_code)]\n+#![allow(unions_with_drop_fields)]\n+\n+union U {\n+    a: u8, // OK\n+}\n+\n+union W {\n+    a: String, // OK\n+    b: String, // OK\n+}\n+\n+struct S(String);\n+\n+// `S` doesn't implement `Drop` trait, but still has non-trivial destructor\n+union Y {\n+    a: S, // OK\n+}\n+\n+// We don't know if `T` is trivially-destructable or not until trans\n+union J<T> {\n+    a: T, // OK\n+}\n+\n+union H<T: Copy> {\n+    a: T, // OK\n+}\n+\n+fn main() {}"}, {"sha": "2a76c96ef25f545b518bdb1a7f8c7a2a579015a1", "filename": "src/test/run-pass/union/union-xcrate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93067ca089ea570e4e2bdfc456958c81a4d1e092/src%2Ftest%2Frun-pass%2Funion%2Funion-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-xcrate.rs?ref=93067ca089ea570e4e2bdfc456958c81a4d1e092", "previous_filename": "src/test/run-pass/union-xcrate.rs"}]}