{"sha": "a876b3d8aaf21510e569ce62dfc6c50a3cf3efd3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4NzZiM2Q4YWFmMjE1MTBlNTY5Y2U2MmRmYzZjNTBhM2NmM2VmZDM=", "commit": {"author": {"name": "Jan Riemer", "email": "janriemer@users.noreply.github.com", "date": "2020-08-16T18:03:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-16T18:03:34Z"}, "message": "docs(marker/copy): provide example for `&T` being `Copy`\n\nIn the current documentation about the `Copy` marker trait, there is a section\r\nwith examples of structs that can implement `Copy`. Currently there is no example for\r\nshowing that shared references (`&T`) are also `Copy`.\r\nIt is worth to have a dedicated example for `&T` being `Copy`, because shared\r\nreferences are an integral part of the language and it being `Copy` is not as\r\nintuitive as other types that share this behaviour like `i32` or `bool`.\r\n\r\nThe example picks up on the previous non-`Copy` struct and shows that\r\nstructs can be `Copy`, even when they hold a shared reference to a non-`Copy` type.", "tree": {"sha": "a4613f1779c282298f3659ccd205211aaa90424b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a4613f1779c282298f3659ccd205211aaa90424b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a876b3d8aaf21510e569ce62dfc6c50a3cf3efd3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfOXT2CRBK7hj4Ov3rIwAAdHIIAGtRMPmkzuxFOpe91KOJAxXy\ntFnfkXEZysOzcZbR8YS/U8bLl2bnXuJq41SMtILDIAeiuULNMUsJtlRaPT9doF/7\njk3zejCj7HHeIqR38l9K7yc//EyxrPGn5X/2MVyCLwrJIkWDWNop5YMWqbi5v8Hk\n2HaPotYy45m0SFgBgqV30K/+Dm3lhx1VMjoT0kzQLaJcCnbnltlFsKVLzKeMZIAd\n76CUtOOrdiAAAxjDWApYaScks0shS7L2bpaMJhkQMyvynasL1xA3Y8KzfSCSWiC2\n9JRitZeaP6Kz0xYIZUgulKI8F6IztPdMDrJMHRYkWy5PUNMYAydWzU7VYBvM2qU=\n=6vuG\n-----END PGP SIGNATURE-----\n", "payload": "tree a4613f1779c282298f3659ccd205211aaa90424b\nparent 7835c8c06cc80b5a0d3d08c1ab1b91240a8aec52\nauthor Jan Riemer <janriemer@users.noreply.github.com> 1597601014 +0200\ncommitter GitHub <noreply@github.com> 1597601014 +0200\n\ndocs(marker/copy): provide example for `&T` being `Copy`\n\nIn the current documentation about the `Copy` marker trait, there is a section\r\nwith examples of structs that can implement `Copy`. Currently there is no example for\r\nshowing that shared references (`&T`) are also `Copy`.\r\nIt is worth to have a dedicated example for `&T` being `Copy`, because shared\r\nreferences are an integral part of the language and it being `Copy` is not as\r\nintuitive as other types that share this behaviour like `i32` or `bool`.\r\n\r\nThe example picks up on the previous non-`Copy` struct and shows that\r\nstructs can be `Copy`, even when they hold a shared reference to a non-`Copy` type."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a876b3d8aaf21510e569ce62dfc6c50a3cf3efd3", "html_url": "https://github.com/rust-lang/rust/commit/a876b3d8aaf21510e569ce62dfc6c50a3cf3efd3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a876b3d8aaf21510e569ce62dfc6c50a3cf3efd3/comments", "author": {"login": "janriemer", "id": 8432168, "node_id": "MDQ6VXNlcjg0MzIxNjg=", "avatar_url": "https://avatars.githubusercontent.com/u/8432168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/janriemer", "html_url": "https://github.com/janriemer", "followers_url": "https://api.github.com/users/janriemer/followers", "following_url": "https://api.github.com/users/janriemer/following{/other_user}", "gists_url": "https://api.github.com/users/janriemer/gists{/gist_id}", "starred_url": "https://api.github.com/users/janriemer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/janriemer/subscriptions", "organizations_url": "https://api.github.com/users/janriemer/orgs", "repos_url": "https://api.github.com/users/janriemer/repos", "events_url": "https://api.github.com/users/janriemer/events{/privacy}", "received_events_url": "https://api.github.com/users/janriemer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7835c8c06cc80b5a0d3d08c1ab1b91240a8aec52", "url": "https://api.github.com/repos/rust-lang/rust/commits/7835c8c06cc80b5a0d3d08c1ab1b91240a8aec52", "html_url": "https://github.com/rust-lang/rust/commit/7835c8c06cc80b5a0d3d08c1ab1b91240a8aec52"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "1458d25d7f7d2c3115c80ae0c5d6b7fe1db97eb6", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 16, "deletions": 3, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a876b3d8aaf21510e569ce62dfc6c50a3cf3efd3/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a876b3d8aaf21510e569ce62dfc6c50a3cf3efd3/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=a876b3d8aaf21510e569ce62dfc6c50a3cf3efd3", "patch": "@@ -315,6 +315,18 @@ pub trait StructuralEq {\n /// the trait `Copy` may not be implemented for this type; field `points` does not implement `Copy`\n /// ```\n ///\n+/// Shared references (`&T`) are also `Copy`, so a struct can be `Copy`, even when it holds\n+/// shared references of types `T` that are *not* `Copy`. Consider the following struct,\n+/// which can implement `Copy`, because it only holds a *shared reference* to our non-`Copy`\n+/// type `PointList` from above:\n+/// ```\n+/// # #![allow(dead_code)]\n+/// # struct PointList;\n+/// struct PointListWrapper<'a> {\n+///     point_list_ref: &'a PointList,\n+/// }\n+/// ```\n+///\n /// ## When *can't* my type be `Copy`?\n ///\n /// Some types can't be copied safely. For example, copying `&mut T` would create an aliased\n@@ -347,8 +359,9 @@ pub trait StructuralEq {\n /// * Tuple types, if each component also implements `Copy` (e.g., `()`, `(i32, bool)`)\n /// * Closure types, if they capture no value from the environment\n ///   or if all such captured values implement `Copy` themselves.\n-/// * Variables captured by shared reference (e.g. `&T`) implement `Copy`, even if the referent (`T`) doesn't,\n-///   while variables captured by mutable reference (e.g. `&mut T`) never implement `Copy`.\n+///   Note that variables captured by shared reference always implement `Copy`\n+///   (even if the referent doesn't),\n+///   while variables captured by mutable reference never implement `Copy`.\n ///\n /// [`Vec<T>`]: ../../std/vec/struct.Vec.html\n /// [`String`]: ../../std/string/struct.String.html\n@@ -539,7 +552,7 @@ macro_rules! impls {\n /// For a more in-depth explanation of how to use `PhantomData<T>`, please see\n /// [the Nomicon](../../nomicon/phantom-data.html).\n ///\n-/// # A ghastly note \ud83d\udc7b\ud83d\udc7b\ud83d\udc7b\n+/// # A ghastly note \n ///\n /// Though they both have scary names, `PhantomData` and 'phantom types' are\n /// related, but not identical. A phantom type parameter is simply a type"}]}