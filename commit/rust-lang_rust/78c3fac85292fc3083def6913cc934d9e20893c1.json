{"sha": "78c3fac85292fc3083def6913cc934d9e20893c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YzNmYWM4NTI5MmZjMzA4M2RlZjY5MTNjYzkzNGQ5ZTIwODkzYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-27T16:41:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-27T16:41:07Z"}, "message": "auto merge of #9535 : alexcrichton/rust/no-format-default, r=thestinger\n\nAs mentioned in #9456, the format! syntax extension would previously consider an\r\nempty format as a 'Unknown' format which could then also get coerced into a\r\ndifferent style of format on another argument.\r\n\r\nThis is unusual behavior because `{}` is a very common format and if you have\r\n`{0} {0:?}` you wouldn't expect them both to be coereced to the `Poly`\r\nformatter. This commit removes this coercion, but still retains the requirement\r\nthat each argument has exactly one format specified for it (an empty format now\r\ncounts as well).\r\n\r\nPerhaps at a later date we can add support for multiple formats of one argument,\r\nbut this puts us in at least a backwards-compatible situation if we decide to do\r\nthat.", "tree": {"sha": "b0c9e27d0d96c50b74d0fcfa92639f019b254adc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0c9e27d0d96c50b74d0fcfa92639f019b254adc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78c3fac85292fc3083def6913cc934d9e20893c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78c3fac85292fc3083def6913cc934d9e20893c1", "html_url": "https://github.com/rust-lang/rust/commit/78c3fac85292fc3083def6913cc934d9e20893c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78c3fac85292fc3083def6913cc934d9e20893c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10e7f12dafc2e24c9f072d68ff6c4929a28b5c8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/10e7f12dafc2e24c9f072d68ff6c4929a28b5c8c", "html_url": "https://github.com/rust-lang/rust/commit/10e7f12dafc2e24c9f072d68ff6c4929a28b5c8c"}, {"sha": "b74663e027521d351b5920e6ce95d5c58221cef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b74663e027521d351b5920e6ce95d5c58221cef5", "html_url": "https://github.com/rust-lang/rust/commit/b74663e027521d351b5920e6ce95d5c58221cef5"}], "stats": {"total": 31, "additions": 14, "deletions": 17}, "files": [{"sha": "1f720d2e92f09179728835f84c48b4f21d25f0ea", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/78c3fac85292fc3083def6913cc934d9e20893c1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c3fac85292fc3083def6913cc934d9e20893c1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=78c3fac85292fc3083def6913cc934d9e20893c1", "patch": "@@ -1159,11 +1159,12 @@ impl<'self> fmt::Default for Sidebar<'self> {\n                 write!(w, \"<a class='{ty} {class}' href='{curty, select,\n                                 mod{../}\n                                 other{}\n-                           }{ty, select,\n+                           }{tysel, select,\n                                 mod{{name}/index.html}\n                                 other{#.{name}.html}\n                            }'>{name}</a><br/>\",\n                        ty = short,\n+                       tysel = short,\n                        class = class,\n                        curty = shortty(cur),\n                        name = item.as_slice());"}, {"sha": "ef3879f56aec9481c37998b84b5737323789046d", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/78c3fac85292fc3083def6913cc934d9e20893c1/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c3fac85292fc3083def6913cc934d9e20893c1/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=78c3fac85292fc3083def6913cc934d9e20893c1", "patch": "@@ -22,7 +22,6 @@ use std::vec;\n \n #[deriving(Eq)]\n enum ArgumentType {\n-    Unknown,\n     Known(@str),\n     Unsigned,\n     String,\n@@ -153,14 +152,13 @@ impl Context {\n                     parse::ArgumentIs(i) => Left(i),\n                     parse::ArgumentNamed(s) => Right(s.to_managed()),\n                 };\n-                let ty = if arg.format.ty == \"\" {\n-                    Unknown\n-                } else { Known(arg.format.ty.to_managed()) };\n-                self.verify_arg_type(pos, ty);\n \n                 // and finally the method being applied\n                 match arg.method {\n-                    None => {}\n+                    None => {\n+                        let ty = Known(arg.format.ty.to_managed());\n+                        self.verify_arg_type(pos, ty);\n+                    }\n                     Some(ref method) => { self.verify_method(pos, *method); }\n                 }\n             }\n@@ -253,7 +251,7 @@ impl Context {\n                     return;\n                 }\n                 self.verify_same(self.args[arg].span, ty, self.arg_types[arg]);\n-                if ty != Unknown || self.arg_types[arg].is_none() {\n+                if self.arg_types[arg].is_none() {\n                     self.arg_types[arg] = Some(ty);\n                 }\n             }\n@@ -269,7 +267,7 @@ impl Context {\n                 };\n                 self.verify_same(span, ty,\n                                  self.name_types.find(&name).map(|&x| *x));\n-                if ty != Unknown || !self.name_types.contains_key(&name) {\n+                if !self.name_types.contains_key(&name) {\n                     self.name_types.insert(name, ty);\n                 }\n                 // Assign this named argument a slot in the arguments array if\n@@ -292,9 +290,8 @@ impl Context {\n     /// that: `Some(None) == Some(Some(x))`\n     fn verify_same(&self, sp: Span, ty: ArgumentType,\n                    before: Option<ArgumentType>) {\n-        if ty == Unknown { return }\n         let cur = match before {\n-            Some(Unknown) | None => return,\n+            None => return,\n             Some(t) => t,\n         };\n         if ty == cur { return }\n@@ -649,9 +646,9 @@ impl Context {\n         };\n \n         let fmt_trait = match ty {\n-            Unknown => \"Default\",\n             Known(tyname) => {\n                 match tyname.as_slice() {\n+                    \"\"  => \"Default\",\n                     \"?\" => \"Poly\",\n                     \"b\" => \"Bool\",\n                     \"c\" => \"Char\","}, {"sha": "aace3815e840a4478003026e0763ccb7c6bf28ee", "filename": "src/test/compile-fail/ifmt-bad-arg.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78c3fac85292fc3083def6913cc934d9e20893c1/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c3fac85292fc3083def6913cc934d9e20893c1/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fifmt-bad-arg.rs?ref=78c3fac85292fc3083def6913cc934d9e20893c1", "patch": "@@ -65,8 +65,8 @@ fn main() {\n     // format strings because otherwise the \"internal pointer of which argument\n     // is next\" would be invalidated if different cases had different numbers of\n     // arguments.\n-    format!(\"{0, select, other{{}}}\", \"a\"); //~ ERROR: cannot use implicit\n-    format!(\"{0, plural, other{{}}}\", 1); //~ ERROR: cannot use implicit\n+    format!(\"{1, select, other{{}}}\", 1, \"a\"); //~ ERROR: cannot use implicit\n+    format!(\"{1, plural, other{{}}}\", 1, 1); //~ ERROR: cannot use implicit\n     format!(\"{0, plural, other{{1:.*d}}}\", 1, 2); //~ ERROR: cannot use implicit\n \n     format!(\"foo } bar\"); //~ ERROR: unmatched `}` found"}, {"sha": "2f5d4380f2e18a05fa4b8f25442f8fb2f28fcb69", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78c3fac85292fc3083def6913cc934d9e20893c1/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78c3fac85292fc3083def6913cc934d9e20893c1/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=78c3fac85292fc3083def6913cc934d9e20893c1", "patch": "@@ -85,7 +85,6 @@ pub fn main() {\n     t!(format!(\"{1} {0}\", 0, 1), \"1 0\");\n     t!(format!(\"{foo} {bar}\", foo=0, bar=1), \"0 1\");\n     t!(format!(\"{foo} {1} {bar} {0}\", 0, 1, foo=2, bar=3), \"2 1 3 0\");\n-    t!(format!(\"{} {0:s}\", \"a\"), \"a a\");\n     t!(format!(\"{} {0}\", \"a\"), \"a a\");\n     t!(format!(\"{foo_bar}\", foo_bar=1), \"1\");\n \n@@ -98,8 +97,8 @@ pub fn main() {\n     t!(format!(\"{0, select, a{a#} b{b#} c{c#} other{d#}}\", \"b\"), \"bb\");\n     t!(format!(\"{0, select, a{a#} b{b#} c{c#} other{d#}}\", \"c\"), \"cc\");\n     t!(format!(\"{0, select, a{a#} b{b#} c{c#} other{d#}}\", \"d\"), \"dd\");\n-    t!(format!(\"{1, select, a{#{0:s}} other{#{1}}}\", \"b\", \"a\"), \"ab\");\n-    t!(format!(\"{1, select, a{#{0}} other{#{1}}}\", \"c\", \"b\"), \"bb\");\n+    t!(format!(\"{1, select, a{#{0:s}} other{#}}\", \"b\", \"a\"), \"ab\");\n+    t!(format!(\"{1, select, a{#{0}} other{#}}\", \"c\", \"b\"), \"b\");\n \n     // Formatting strings and their arguments\n     t!(format!(\"{:s}\", \"a\"), \"a\");"}]}