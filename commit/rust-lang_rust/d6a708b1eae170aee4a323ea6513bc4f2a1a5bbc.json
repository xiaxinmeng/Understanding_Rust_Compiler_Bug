{"sha": "d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2YTcwOGIxZWFlMTcwYWVlNGEzMjNlYTY1MTNiYzRmMmExYTViYmM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-01-15T12:51:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-15T12:51:20Z"}, "message": "Merge #7281\n\n7281: Insert `;` when completing keywords in let r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e5b5f19b0207028a0ac99d7b211d843cba6f9b8c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5b5f19b0207028a0ac99d7b211d843cba6f9b8c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAY/ICRBK7hj4Ov3rIwAAdHIIAAd9+2/Mv5fCxF3UlWbHhW0h\nYopB3xawXfFAts/pE59F3sSS+AN/Es8O+hkfR5iAeK6xPHhE//Hx1G9LCjUo+nVj\nB7z2lgftgkHx18L/n534hNTASLqzXHdTXT+7SBhAXuzHqNzK3gz8VtjW5Dlx7Jlo\nyD7I3OdARnkZHbdPnOiTcFuO33zI/PR16WLf7Ty/5RQ+4LhFL0yTEwYvlbFHFUxU\n5HKUjyEqFCE7hi+7ysqn0yWm1j+hcR03EPR58hafaX9hPMbbvY395b3ElSqGv7Tm\nqXLs3dC9KcTLIYuBErjT+8OI/V1m4CfIzqH+ChacCFMVozIZt6T8uII+Z4ju8Mg=\n=8kVP\n-----END PGP SIGNATURE-----\n", "payload": "tree e5b5f19b0207028a0ac99d7b211d843cba6f9b8c\nparent 054e2061521292a72748510f3f6cb7c8b1e8611b\nparent f2ba2048d1afb816623d037f265f4445a2f44b54\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1610715080 +0000\ncommitter GitHub <noreply@github.com> 1610715080 +0000\n\nMerge #7281\n\n7281: Insert `;` when completing keywords in let r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc", "html_url": "https://github.com/rust-lang/rust/commit/d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "054e2061521292a72748510f3f6cb7c8b1e8611b", "url": "https://api.github.com/repos/rust-lang/rust/commits/054e2061521292a72748510f3f6cb7c8b1e8611b", "html_url": "https://github.com/rust-lang/rust/commit/054e2061521292a72748510f3f6cb7c8b1e8611b"}, {"sha": "f2ba2048d1afb816623d037f265f4445a2f44b54", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2ba2048d1afb816623d037f265f4445a2f44b54", "html_url": "https://github.com/rust-lang/rust/commit/f2ba2048d1afb816623d037f265f4445a2f44b54"}], "stats": {"total": 124, "additions": 89, "deletions": 35}, "files": [{"sha": "c1af348dc642926e285333887a0be454e6651a2c", "filename": "crates/completion/src/completions/keyword.rs", "status": "modified", "additions": 77, "deletions": 29, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc", "patch": "@@ -1,6 +1,6 @@\n //! Completes keywords.\n \n-use syntax::{ast, SyntaxKind};\n+use syntax::SyntaxKind;\n use test_utils::mark;\n \n use crate::{CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions};\n@@ -86,8 +86,8 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         add_keyword(ctx, acc, \"match\", \"match $0 {}\");\n         add_keyword(ctx, acc, \"while\", \"while $0 {}\");\n         add_keyword(ctx, acc, \"loop\", \"loop {$0}\");\n-        add_keyword(ctx, acc, \"if\", \"if \");\n-        add_keyword(ctx, acc, \"if let\", \"if let \");\n+        add_keyword(ctx, acc, \"if\", \"if $0 {}\");\n+        add_keyword(ctx, acc, \"if let\", \"if let $1 = $0 {}\");\n     }\n \n     if ctx.if_is_prev || ctx.block_expr_parent {\n@@ -143,47 +143,49 @@ pub(crate) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         Some(it) => it,\n         None => return,\n     };\n-    acc.add_all(complete_return(ctx, &fn_def, ctx.can_be_stmt));\n-}\n-\n-fn keyword(ctx: &CompletionContext, kw: &str, snippet: &str) -> CompletionItem {\n-    let res = CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), kw)\n-        .kind(CompletionItemKind::Keyword);\n \n-    match ctx.config.snippet_cap {\n-        Some(cap) => res.insert_snippet(cap, snippet),\n-        _ => res.insert_text(if snippet.contains('$') { kw } else { snippet }),\n-    }\n-    .build()\n+    add_keyword(\n+        ctx,\n+        acc,\n+        \"return\",\n+        match (ctx.can_be_stmt, fn_def.ret_type().is_some()) {\n+            (true, true) => \"return $0;\",\n+            (true, false) => \"return;\",\n+            (false, true) => \"return $0\",\n+            (false, false) => \"return\",\n+        },\n+    )\n }\n \n fn add_keyword(ctx: &CompletionContext, acc: &mut Completions, kw: &str, snippet: &str) {\n-    acc.add(keyword(ctx, kw, snippet));\n-}\n-\n-fn complete_return(\n-    ctx: &CompletionContext,\n-    fn_def: &ast::Fn,\n-    can_be_stmt: bool,\n-) -> Option<CompletionItem> {\n-    let snip = match (can_be_stmt, fn_def.ret_type().is_some()) {\n-        (true, true) => \"return $0;\",\n-        (true, false) => \"return;\",\n-        (false, true) => \"return $0\",\n-        (false, false) => \"return\",\n+    let builder = CompletionItem::new(CompletionKind::Keyword, ctx.source_range(), kw)\n+        .kind(CompletionItemKind::Keyword);\n+    let builder = match ctx.config.snippet_cap {\n+        Some(cap) => {\n+            let tmp;\n+            let snippet = if snippet.ends_with('}') && ctx.incomplete_let {\n+                mark::hit!(let_semi);\n+                tmp = format!(\"{};\", snippet);\n+                &tmp\n+            } else {\n+                snippet\n+            };\n+            builder.insert_snippet(cap, snippet)\n+        }\n+        None => builder.insert_text(if snippet.contains('$') { kw } else { snippet }),\n     };\n-    Some(keyword(ctx, \"return\", snip))\n+    acc.add(builder.build());\n }\n \n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n+    use test_utils::mark;\n \n     use crate::{\n         test_utils::{check_edit, completion_list},\n         CompletionKind,\n     };\n-    use test_utils::mark;\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let actual = completion_list(ra_fixture, CompletionKind::Keyword);\n@@ -609,4 +611,50 @@ fn foo() {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn let_semi() {\n+        mark::check!(let_semi);\n+        check_edit(\n+            \"match\",\n+            r#\"\n+fn main() { let x = $0 }\n+\"#,\n+            r#\"\n+fn main() { let x = match $0 {}; }\n+\"#,\n+        );\n+\n+        check_edit(\n+            \"if\",\n+            r#\"\n+fn main() {\n+    let x = $0\n+    let y = 92;\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let x = if $0 {};\n+    let y = 92;\n+}\n+\"#,\n+        );\n+\n+        check_edit(\n+            \"loop\",\n+            r#\"\n+fn main() {\n+    let x = $0\n+    bar();\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let x = loop {$0};\n+    bar();\n+}\n+\"#,\n+        );\n+    }\n }"}, {"sha": "d809460e2b04fefdeacf12f7a09f2ddde6499797", "filename": "crates/completion/src/context.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc/crates%2Fcompletion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcontext.rs?ref=d6a708b1eae170aee4a323ea6513bc4f2a1a5bbc", "patch": "@@ -92,6 +92,7 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) has_item_list_or_source_file_parent: bool,\n     pub(super) for_is_prev2: bool,\n     pub(super) fn_is_prev: bool,\n+    pub(super) incomplete_let: bool,\n     pub(super) locals: Vec<(String, Local)>,\n }\n \n@@ -132,9 +133,9 @@ impl<'a> CompletionContext<'a> {\n             scope,\n             db,\n             config,\n+            position,\n             original_token,\n             token,\n-            position,\n             krate,\n             expected_type: None,\n             name_ref_syntax: None,\n@@ -155,30 +156,31 @@ impl<'a> CompletionContext<'a> {\n             is_expr: false,\n             is_new_item: false,\n             dot_receiver: None,\n+            dot_receiver_is_ambiguous_float_literal: false,\n             is_call: false,\n             is_pattern_call: false,\n             is_macro_call: false,\n             is_path_type: false,\n             has_type_args: false,\n-            dot_receiver_is_ambiguous_float_literal: false,\n             attribute_under_caret: None,\n             mod_declaration_under_caret: None,\n             unsafe_is_prev: false,\n-            in_loop_body: false,\n-            ref_pat_parent: false,\n-            bind_pat_parent: false,\n+            if_is_prev: false,\n             block_expr_parent: false,\n+            bind_pat_parent: false,\n+            ref_pat_parent: false,\n+            in_loop_body: false,\n             has_trait_parent: false,\n             has_impl_parent: false,\n             inside_impl_trait_block: false,\n             has_field_list_parent: false,\n             trait_as_prev_sibling: false,\n             impl_as_prev_sibling: false,\n-            if_is_prev: false,\n             is_match_arm: false,\n             has_item_list_or_source_file_parent: false,\n             for_is_prev2: false,\n             fn_is_prev: false,\n+            incomplete_let: false,\n             locals,\n         };\n \n@@ -270,6 +272,10 @@ impl<'a> CompletionContext<'a> {\n                 .filter(|module| module.item_list().is_none());\n         self.for_is_prev2 = for_is_prev2(syntax_element.clone());\n         self.fn_is_prev = fn_is_prev(syntax_element.clone());\n+        self.incomplete_let =\n+            syntax_element.ancestors().take(6).find_map(ast::LetStmt::cast).map_or(false, |it| {\n+                it.syntax().text_range().end() == syntax_element.text_range().end()\n+            });\n     }\n \n     fn fill("}]}