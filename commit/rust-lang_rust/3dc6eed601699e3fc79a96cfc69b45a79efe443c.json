{"sha": "3dc6eed601699e3fc79a96cfc69b45a79efe443c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYzZlZWQ2MDE2OTllM2ZjNzlhOTZjZmM2OWI0NWE3OWVmZTQ0M2M=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-09-28T09:48:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-09-28T09:48:57Z"}, "message": "Merge pull request #2816 from moxian/enum-discrim\n\nAdd option to vertically align enum discriminants.", "tree": {"sha": "050fce50568399b7aff9dc5ff7a53f8265f0464b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/050fce50568399b7aff9dc5ff7a53f8265f0464b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dc6eed601699e3fc79a96cfc69b45a79efe443c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbrfkJCRBK7hj4Ov3rIwAAdHIIAIpot8Cz7OijxCAy16g4zDm/\n1bFOc7YwaQu4SvyOkwGl7vS5W+9RUTxWZ1BH8VSlWS+OVbWbsW6NHYwXZyWlGpJp\nQ4g/iu2j1v7Ht5rIt3+0JND+jrz8tVXXFLmcSpcBoOLWxsyagUmBK6hb/Wd5V7nh\npYTpJIqwbd03cfvE5b4U62vpeZCiIAqp/JpW0T8FUuAi/FH4NCMm/DrHkbo6BfmB\nU4HSp7LMrNhGjglUMNScs3++04Ke1csS1Gihn7VnmdynYglHSMUvKj9pTwUzzFzZ\nH9h0kS+uhu4eMe3viHbXVJgmD6L19yzFXhS0j2JR9MUUTNFVAkI6VMQYX4zFxGE=\n=umd6\n-----END PGP SIGNATURE-----\n", "payload": "tree 050fce50568399b7aff9dc5ff7a53f8265f0464b\nparent 86fff9eafae995bd226260f7eb9f0114b7836bc4\nparent 65ae0b9a094d83616585438b86e38b36047d8b45\nauthor Nick Cameron <nrc@ncameron.org> 1538128137 +1200\ncommitter GitHub <noreply@github.com> 1538128137 +1200\n\nMerge pull request #2816 from moxian/enum-discrim\n\nAdd option to vertically align enum discriminants."}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dc6eed601699e3fc79a96cfc69b45a79efe443c", "html_url": "https://github.com/rust-lang/rust/commit/3dc6eed601699e3fc79a96cfc69b45a79efe443c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dc6eed601699e3fc79a96cfc69b45a79efe443c/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86fff9eafae995bd226260f7eb9f0114b7836bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/86fff9eafae995bd226260f7eb9f0114b7836bc4", "html_url": "https://github.com/rust-lang/rust/commit/86fff9eafae995bd226260f7eb9f0114b7836bc4"}, {"sha": "65ae0b9a094d83616585438b86e38b36047d8b45", "url": "https://api.github.com/repos/rust-lang/rust/commits/65ae0b9a094d83616585438b86e38b36047d8b45", "html_url": "https://github.com/rust-lang/rust/commit/65ae0b9a094d83616585438b86e38b36047d8b45"}], "stats": {"total": 149, "additions": 146, "deletions": 3}, "files": [{"sha": "824868bca098290a33e8404a903d5eb2d9d4034b", "filename": "Configurations.md", "status": "modified", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/3dc6eed601699e3fc79a96cfc69b45a79efe443c/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/3dc6eed601699e3fc79a96cfc69b45a79efe443c/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=3dc6eed601699e3fc79a96cfc69b45a79efe443c", "patch": "@@ -885,6 +885,53 @@ impl Lorem {\n See also [`brace_style`](#brace_style), [`control_brace_style`](#control_brace_style).\n \n \n+## `enum_discrim_align_threshold`\n+\n+The maximum length of enum variant having discriminant, that gets vertically aligned with others.\n+Variants without discriminants would be ignored for the purpose of alignment.\n+\n+Note that this is not how much whitespace is inserted, but instead the longest variant name that\n+doesn't get ignored when aligning.\n+\n+- **Default value** : 0\n+- **Possible values**: any positive integer\n+- **Stable**: No\n+\n+#### `0` (default):\n+\n+```rust\n+enum Bar {\n+    A = 0,\n+    Bb = 1,\n+    RandomLongVariantGoesHere = 10,\n+    Ccc = 71,\n+}\n+\n+enum Bar {\n+    VeryLongVariantNameHereA = 0,\n+    VeryLongVariantNameHereBb = 1,\n+    VeryLongVariantNameHereCcc = 2,\n+}\n+```\n+\n+#### `20`:\n+\n+```rust\n+enum Foo {\n+    A   = 0,\n+    Bb  = 1,\n+    RandomLongVariantGoesHere = 10,\n+    Ccc = 2,\n+}\n+\n+enum Bar {\n+    VeryLongVariantNameHereA = 0,\n+    VeryLongVariantNameHereBb = 1,\n+    VeryLongVariantNameHereCcc = 2,\n+}\n+```\n+\n+\n ## `fn_single_line`\n \n Put single-expression functions on a single line"}, {"sha": "a553bf2ee3c708284cda6132bfb7eff34b0624e9", "filename": "src/config/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3dc6eed601699e3fc79a96cfc69b45a79efe443c/src%2Fconfig%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc6eed601699e3fc79a96cfc69b45a79efe443c/src%2Fconfig%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Fmod.rs?ref=3dc6eed601699e3fc79a96cfc69b45a79efe443c", "patch": "@@ -89,6 +89,8 @@ create_config! {\n     combine_control_expr: bool, true, false, \"Combine control expressions with function calls\";\n     struct_field_align_threshold: usize, 0, false, \"Align struct fields if their diffs fits within \\\n                                              threshold\";\n+    enum_discrim_align_threshold: usize, 0, false,\n+        \"Align enum variants discrims, if their diffs fit within threshold\";\n     match_arm_blocks: bool, true, false, \"Wrap the body of arms in blocks when it does not fit on \\\n         the same line with the pattern of arms\";\n     force_multiline_blocks: bool, false, false,"}, {"sha": "17a9e529692196099368013c890e87e74c21edae", "filename": "src/items.rs", "status": "modified", "additions": 29, "deletions": 3, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3dc6eed601699e3fc79a96cfc69b45a79efe443c/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc6eed601699e3fc79a96cfc69b45a79efe443c/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=3dc6eed601699e3fc79a96cfc69b45a79efe443c", "patch": "@@ -500,6 +500,23 @@ impl<'a> FmtVisitor<'a> {\n         let original_offset = self.block_indent;\n         self.block_indent = self.block_indent.block_indent(self.config);\n \n+        // If enum variants have discriminants, try to vertically align those,\n+        // provided the discrims are not shifted too much  to the right\n+        let align_threshold: usize = self.config.enum_discrim_align_threshold();\n+        let discr_ident_lens: Vec<usize> = enum_def\n+            .variants\n+            .iter()\n+            .filter(|var| var.node.disr_expr.is_some())\n+            .map(|var| rewrite_ident(&self.get_context(), var.node.ident).len())\n+            .collect();\n+        // cut the list at the point of longest discrim shorter than the threshold\n+        // All of the discrims under the threshold will get padded, and all above - left as is.\n+        let pad_discrim_ident_to = *discr_ident_lens\n+            .iter()\n+            .filter(|&l| *l <= align_threshold)\n+            .max()\n+            .unwrap_or(&0);\n+\n         let itemize_list_with = |one_line_width: usize| {\n             itemize_list(\n                 self.snippet_provider,\n@@ -514,7 +531,7 @@ impl<'a> FmtVisitor<'a> {\n                     }\n                 },\n                 |f| f.span.hi(),\n-                |f| self.format_variant(f, one_line_width),\n+                |f| self.format_variant(f, one_line_width, pad_discrim_ident_to),\n                 body_lo,\n                 body_hi,\n                 false,\n@@ -543,7 +560,12 @@ impl<'a> FmtVisitor<'a> {\n     }\n \n     // Variant of an enum.\n-    fn format_variant(&self, field: &ast::Variant, one_line_width: usize) -> Option<String> {\n+    fn format_variant(\n+        &self,\n+        field: &ast::Variant,\n+        one_line_width: usize,\n+        pad_discrim_ident_to: usize,\n+    ) -> Option<String> {\n         if contains_skip(&field.node.attrs) {\n             let lo = field.node.attrs[0].span.lo();\n             let span = mk_sp(lo, field.span.hi());\n@@ -570,7 +592,11 @@ impl<'a> FmtVisitor<'a> {\n             )?,\n             ast::VariantData::Unit(..) => {\n                 if let Some(ref expr) = field.node.disr_expr {\n-                    let lhs = format!(\"{} =\", rewrite_ident(&context, field.node.ident));\n+                    let lhs = format!(\n+                        \"{:1$} =\",\n+                        rewrite_ident(&context, field.node.ident),\n+                        pad_discrim_ident_to\n+                    );\n                     rewrite_assign_rhs(&context, lhs, &*expr.value, shape)?\n                 } else {\n                     rewrite_ident(&context, field.node.ident).to_owned()"}, {"sha": "796e47c384ba54908dee83dad1874ad37aad1063", "filename": "tests/source/configs/enum_discrim_align_threshold/40.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3dc6eed601699e3fc79a96cfc69b45a79efe443c/tests%2Fsource%2Fconfigs%2Fenum_discrim_align_threshold%2F40.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc6eed601699e3fc79a96cfc69b45a79efe443c/tests%2Fsource%2Fconfigs%2Fenum_discrim_align_threshold%2F40.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs%2Fenum_discrim_align_threshold%2F40.rs?ref=3dc6eed601699e3fc79a96cfc69b45a79efe443c", "patch": "@@ -0,0 +1,34 @@\n+// rustfmt-enum_discrim_align_threshold: 40\r\n+\r\n+enum Standard {\r\n+    A = 1,\r\n+    Bcdef = 2,\r\n+}\r\n+\r\n+enum NoDiscrims {\r\n+    ThisIsAFairlyLongEnumVariantWithoutDiscrimLongerThan40,\r\n+    A = 1,\r\n+    ThisIsAnotherFairlyLongEnumVariantWithoutDiscrimLongerThan40,\r\n+    Bcdef = 2,\r\n+}\r\n+\r\n+enum TooLong {\r\n+    ThisOneHasDiscrimAaaaaaaaaaaaaaaaaaaaaaChar40 = 10,\r\n+    A = 1,\r\n+    Bcdef = 2,\r\n+}\r\n+\r\n+enum Borderline {\r\n+    ThisOneHasDiscrimAaaaaaaaaaaaaaaaaaaaaa = 10,\r\n+    A = 1,\r\n+    Bcdef = 2,\r\n+}\r\n+\r\n+// Live specimen from #1686\r\n+enum LongWithSmallDiff {\r\n+    SceneColorimetryEstimates = 0x73636F65,\r\n+    SceneAppearanceEstimates = 0x73617065,\r\n+    FocalPlaneColorimetryEstimates = 0x66706365,\r\n+    ReflectionHardcopyOriginalColorimetry = 0x72686F63,\r\n+    ReflectionPrintOutputColorimetry = 0x72706F63,\r\n+}\n\\ No newline at end of file"}, {"sha": "3ed66039c9dd31122c13813d8bae0e9d8e0835d4", "filename": "tests/target/configs/enum_discrim_align_threshold/40.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3dc6eed601699e3fc79a96cfc69b45a79efe443c/tests%2Ftarget%2Fconfigs%2Fenum_discrim_align_threshold%2F40.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dc6eed601699e3fc79a96cfc69b45a79efe443c/tests%2Ftarget%2Fconfigs%2Fenum_discrim_align_threshold%2F40.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs%2Fenum_discrim_align_threshold%2F40.rs?ref=3dc6eed601699e3fc79a96cfc69b45a79efe443c", "patch": "@@ -0,0 +1,34 @@\n+// rustfmt-enum_discrim_align_threshold: 40\r\n+\r\n+enum Standard {\r\n+    A     = 1,\r\n+    Bcdef = 2,\r\n+}\r\n+\r\n+enum NoDiscrims {\r\n+    ThisIsAFairlyLongEnumVariantWithoutDiscrimLongerThan40,\r\n+    A     = 1,\r\n+    ThisIsAnotherFairlyLongEnumVariantWithoutDiscrimLongerThan40,\r\n+    Bcdef = 2,\r\n+}\r\n+\r\n+enum TooLong {\r\n+    ThisOneHasDiscrimAaaaaaaaaaaaaaaaaaaaaaChar40 = 10,\r\n+    A     = 1,\r\n+    Bcdef = 2,\r\n+}\r\n+\r\n+enum Borderline {\r\n+    ThisOneHasDiscrimAaaaaaaaaaaaaaaaaaaaaa = 10,\r\n+    A                                       = 1,\r\n+    Bcdef                                   = 2,\r\n+}\r\n+\r\n+// Live specimen from #1686\r\n+enum LongWithSmallDiff {\r\n+    SceneColorimetryEstimates             = 0x73636F65,\r\n+    SceneAppearanceEstimates              = 0x73617065,\r\n+    FocalPlaneColorimetryEstimates        = 0x66706365,\r\n+    ReflectionHardcopyOriginalColorimetry = 0x72686F63,\r\n+    ReflectionPrintOutputColorimetry      = 0x72706F63,\r\n+}\r"}]}