{"sha": "b3433c7cc9811639ca2cb137da146222cc8bde55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNDMzYzdjYzk4MTE2MzljYTJjYjEzN2RhMTQ2MjIyY2M4YmRlNTU=", "commit": {"author": {"name": "ecstatic-morse", "email": "ecstaticmorse@gmail.com", "date": "2020-09-22T03:40:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-22T03:40:51Z"}, "message": "Rollup merge of #76783 - lzutao:rd_impl_kind, r=GuillaumeGomez\n\nOnly get ImplKind::Impl once\n\nWith this, the code panics in one place instead of two.", "tree": {"sha": "fca2894bb7617fda066464df0acbad4105aae187", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fca2894bb7617fda066464df0acbad4105aae187"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3433c7cc9811639ca2cb137da146222cc8bde55", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfaXJECRBK7hj4Ov3rIwAAdHIIACi+WmqFQKc6pU+QtVzYItFO\n9TnuG6mVbkPKJkf2HQUzHmesoCjvVcbXyCO9MLa1CvEGzS/Z9wYs2mxS9MuRKNSO\nBNGcLXASgbyEeqNYvx5zS89+P7wqO9ZFcYO1A4B2e2cohYvbhzuu3gfejA/zKupL\nIJXXO9IoGgU0F139X8LibrHM7Xz5cwuun2qTmkCIRzRpSGUEwX6ZKJqQTqFotVmv\nHwgxv0S+iOJbj/PUtEljrR8MzWaWVkqRxQD3gYT/8VW4zPo1UXhfZUCSUz6lEHjW\nUpCB0FzpXSHM9okdPV09ZVMmT+qbw+gAF/xi0clOecuvLyfDYMoZqzjXD190igw=\n=qA57\n-----END PGP SIGNATURE-----\n", "payload": "tree fca2894bb7617fda066464df0acbad4105aae187\nparent 537ede465f25c80c99286aa7eb79a5295f345bc0\nparent eede953c283c7bbe903a0e8abb44c923baf5cfac\nauthor ecstatic-morse <ecstaticmorse@gmail.com> 1600746051 -0700\ncommitter GitHub <noreply@github.com> 1600746051 -0700\n\nRollup merge of #76783 - lzutao:rd_impl_kind, r=GuillaumeGomez\n\nOnly get ImplKind::Impl once\n\nWith this, the code panics in one place instead of two.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3433c7cc9811639ca2cb137da146222cc8bde55", "html_url": "https://github.com/rust-lang/rust/commit/b3433c7cc9811639ca2cb137da146222cc8bde55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3433c7cc9811639ca2cb137da146222cc8bde55/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "537ede465f25c80c99286aa7eb79a5295f345bc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/537ede465f25c80c99286aa7eb79a5295f345bc0", "html_url": "https://github.com/rust-lang/rust/commit/537ede465f25c80c99286aa7eb79a5295f345bc0"}, {"sha": "eede953c283c7bbe903a0e8abb44c923baf5cfac", "url": "https://api.github.com/repos/rust-lang/rust/commits/eede953c283c7bbe903a0e8abb44c923baf5cfac", "html_url": "https://github.com/rust-lang/rust/commit/eede953c283c7bbe903a0e8abb44c923baf5cfac"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "31e8c32f062ab4adefcc451d395f154db7e3ef83", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 22, "deletions": 19, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b3433c7cc9811639ca2cb137da146222cc8bde55/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3433c7cc9811639ca2cb137da146222cc8bde55/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=b3433c7cc9811639ca2cb137da146222cc8bde55", "patch": "@@ -352,14 +352,22 @@ pub fn build_impl(\n         }\n     }\n \n-    let for_ = if let Some(did) = did.as_local() {\n-        let hir_id = tcx.hir().local_def_id_to_hir_id(did);\n-        match tcx.hir().expect_item(hir_id).kind {\n-            hir::ItemKind::Impl { self_ty, .. } => self_ty.clean(cx),\n-            _ => panic!(\"did given to build_impl was not an impl\"),\n+    let impl_item = match did.as_local() {\n+        Some(did) => {\n+            let hir_id = tcx.hir().local_def_id_to_hir_id(did);\n+            match tcx.hir().expect_item(hir_id).kind {\n+                hir::ItemKind::Impl { self_ty, ref generics, ref items, .. } => {\n+                    Some((self_ty, generics, items))\n+                }\n+                _ => panic!(\"`DefID` passed to `build_impl` is not an `impl\"),\n+            }\n         }\n-    } else {\n-        tcx.type_of(did).clean(cx)\n+        None => None,\n+    };\n+\n+    let for_ = match impl_item {\n+        Some((self_ty, _, _)) => self_ty.clean(cx),\n+        None => tcx.type_of(did).clean(cx),\n     };\n \n     // Only inline impl if the implementing type is\n@@ -379,17 +387,12 @@ pub fn build_impl(\n     }\n \n     let predicates = tcx.explicit_predicates_of(did);\n-    let (trait_items, generics) = if let Some(did) = did.as_local() {\n-        let hir_id = tcx.hir().local_def_id_to_hir_id(did);\n-        match tcx.hir().expect_item(hir_id).kind {\n-            hir::ItemKind::Impl { ref generics, ref items, .. } => (\n-                items.iter().map(|item| tcx.hir().impl_item(item.id).clean(cx)).collect::<Vec<_>>(),\n-                generics.clean(cx),\n-            ),\n-            _ => panic!(\"did given to build_impl was not an impl\"),\n-        }\n-    } else {\n-        (\n+    let (trait_items, generics) = match impl_item {\n+        Some((_, generics, items)) => (\n+            items.iter().map(|item| tcx.hir().impl_item(item.id).clean(cx)).collect::<Vec<_>>(),\n+            generics.clean(cx),\n+        ),\n+        None => (\n             tcx.associated_items(did)\n                 .in_definition_order()\n                 .filter_map(|item| {\n@@ -401,7 +404,7 @@ pub fn build_impl(\n                 })\n                 .collect::<Vec<_>>(),\n             clean::enter_impl_trait(cx, || (tcx.generics_of(did), predicates).clean(cx)),\n-        )\n+        ),\n     };\n     let polarity = tcx.impl_polarity(did);\n     let trait_ = associated_trait.clean(cx).map(|bound| match bound {"}]}