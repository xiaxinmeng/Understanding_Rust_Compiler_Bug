{"sha": "855a739ebf736db8a9a66e0e073c34631275fb22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1NWE3MzllYmY3MzZkYjhhOWE2NmUwZTA3M2MzNDYzMTI3NWZiMjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-08T05:46:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-08T05:46:15Z"}, "message": "Merge #8207\n\n8207: Show dbg remove assist on empty contents r=edwin0cheng a=ivan770\n\nCloses #8185\n\nCo-authored-by: ivan770 <leshenko.ivan770@gmail.com>\nCo-authored-by: ivan770 <ivan@ivan770.me>", "tree": {"sha": "a88dad0b8b76dfcc9e06a6c2a4594ffa33936ee4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a88dad0b8b76dfcc9e06a6c2a4594ffa33936ee4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/855a739ebf736db8a9a66e0e073c34631275fb22", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgbpinCRBK7hj4Ov3rIwAAdHIIABc+doxPLNmT6DIq7E4qymtn\nQxgsH7qRT2QnVVy6y2Tio5XeiGlVRr4Wbh4Mg+FJ0RFL9Z2V5IQns4tSG5Vfrd4G\nTZqszfqouwly8KqNDLUrjWoflkQBxnC7gEO+UrrLHv+WFGNZXUrQr6d8JbmOa660\ngcEU1K8xRLq512Jw5zqND5RQ+OCqsuus0VF9JZdxAuHLiYeRLo9Vw6JYf4Z+2udl\n2qq/fK/KJjL59tOAeN8KCZeMrqB14SZgVnHbdy6Jxy4rcu91WFMrcwiqwCaNlHRq\naVT/PZj4V1ZC6bmDmR/EFPu87VdXg7lJc9zaWdqyP3anM8UW/vO3mG/EtebgPWM=\n=oBW7\n-----END PGP SIGNATURE-----\n", "payload": "tree a88dad0b8b76dfcc9e06a6c2a4594ffa33936ee4\nparent 0c0d648b492b9e8491504e021f61df42e5627592\nparent f9d17c6d7c117b004dbf56d49718c729b9b7f58a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617860775 +0000\ncommitter GitHub <noreply@github.com> 1617860775 +0000\n\nMerge #8207\n\n8207: Show dbg remove assist on empty contents r=edwin0cheng a=ivan770\n\nCloses #8185\n\nCo-authored-by: ivan770 <leshenko.ivan770@gmail.com>\nCo-authored-by: ivan770 <ivan@ivan770.me>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/855a739ebf736db8a9a66e0e073c34631275fb22", "html_url": "https://github.com/rust-lang/rust/commit/855a739ebf736db8a9a66e0e073c34631275fb22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/855a739ebf736db8a9a66e0e073c34631275fb22/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c0d648b492b9e8491504e021f61df42e5627592", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c0d648b492b9e8491504e021f61df42e5627592", "html_url": "https://github.com/rust-lang/rust/commit/0c0d648b492b9e8491504e021f61df42e5627592"}, {"sha": "f9d17c6d7c117b004dbf56d49718c729b9b7f58a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d17c6d7c117b004dbf56d49718c729b9b7f58a", "html_url": "https://github.com/rust-lang/rust/commit/f9d17c6d7c117b004dbf56d49718c729b9b7f58a"}], "stats": {"total": 105, "additions": 94, "deletions": 11}, "files": [{"sha": "2862cfa9c20be481b0216fb859034cbbbc6e6524", "filename": "crates/ide_assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 94, "deletions": 11, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/855a739ebf736db8a9a66e0e073c34631275fb22/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855a739ebf736db8a9a66e0e073c34631275fb22/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=855a739ebf736db8a9a66e0e073c34631275fb22", "patch": "@@ -1,5 +1,5 @@\n use syntax::{\n-    ast::{self, AstNode},\n+    ast::{self, AstNode, AstToken},\n     match_ast, SyntaxElement, TextRange, TextSize, T,\n };\n \n@@ -24,7 +24,39 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let macro_call = ctx.find_node_at_offset::<ast::MacroCall>()?;\n     let new_contents = adjusted_macro_contents(&macro_call)?;\n \n-    let macro_text_range = macro_call.syntax().text_range();\n+    let parent = macro_call.syntax().parent();\n+\n+    let macro_text_range = if let Some(it) = parent.as_ref() {\n+        if new_contents.is_empty() {\n+            match_ast! {\n+                match it {\n+                    ast::BlockExpr(it) => {\n+                        macro_call.syntax()\n+                            .prev_sibling_or_token()\n+                            .and_then(whitespace_start)\n+                            .map(|start| TextRange::new(start, macro_call.syntax().text_range().end()))\n+                            .unwrap_or(macro_call.syntax().text_range())\n+                    },\n+                    ast::ExprStmt(it) => {\n+                        let start = it\n+                            .syntax()\n+                            .prev_sibling_or_token()\n+                            .and_then(whitespace_start)\n+                            .unwrap_or(it.syntax().text_range().start());\n+                        let end = it.syntax().text_range().end();\n+\n+                        TextRange::new(start, end)\n+                    },\n+                    _ => macro_call.syntax().text_range()\n+                }\n+            }\n+        } else {\n+            macro_call.syntax().text_range()\n+        }\n+    } else {\n+        macro_call.syntax().text_range()\n+    };\n+\n     let macro_end = if macro_call.semicolon_token().is_some() {\n         macro_text_range.end() - TextSize::of(';')\n     } else {\n@@ -36,11 +68,22 @@ pub(crate) fn remove_dbg(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         \"Remove dbg!()\",\n         macro_text_range,\n         |builder| {\n-            builder.replace(TextRange::new(macro_text_range.start(), macro_end), new_contents);\n+            builder.replace(\n+                TextRange::new(macro_text_range.start(), macro_end),\n+                if new_contents.is_empty() && parent.and_then(ast::LetStmt::cast).is_some() {\n+                    ast::make::expr_unit().to_string()\n+                } else {\n+                    new_contents\n+                },\n+            );\n         },\n     )\n }\n \n+fn whitespace_start(it: SyntaxElement) -> Option<TextSize> {\n+    Some(it.into_token().and_then(ast::Whitespace::cast)?.syntax().text_range().start())\n+}\n+\n fn adjusted_macro_contents(macro_call: &ast::MacroCall) -> Option<String> {\n     let contents = get_valid_macrocall_contents(&macro_call, \"dbg\")?;\n     let macro_text_with_brackets = macro_call.token_tree()?.syntax().text();\n@@ -94,15 +137,11 @@ fn get_valid_macrocall_contents(\n     let mut contents_between_brackets = children_with_tokens.collect::<Vec<_>>();\n     let last_child = contents_between_brackets.pop()?;\n \n-    if contents_between_brackets.is_empty() {\n-        None\n-    } else {\n-        match (first_child.kind(), last_child.kind()) {\n-            (T!['('], T![')']) | (T!['['], T![']']) | (T!['{'], T!['}']) => {\n-                Some(contents_between_brackets)\n-            }\n-            _ => None,\n+    match (first_child.kind(), last_child.kind()) {\n+        (T!['('], T![')']) | (T!['['], T![']']) | (T!['{'], T!['}']) => {\n+            Some(contents_between_brackets)\n         }\n+        _ => None,\n     }\n }\n \n@@ -415,6 +454,50 @@ fn main() {\n }\"#,\n             r#\"fn foo() {\n     match &x {}\n+}\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_remove_empty_dbg() {\n+        check_assist(remove_dbg, r#\"fn foo() { $0dbg!(); }\"#, r#\"fn foo() { }\"#);\n+        check_assist(\n+            remove_dbg,\n+            r#\"\n+fn foo() {\n+    $0dbg!();\n+}\n+\"#,\n+            r#\"\n+fn foo() {\n+}\n+\"#,\n+        );\n+        check_assist(\n+            remove_dbg,\n+            r#\"\n+fn foo() {\n+    let test = $0dbg!();\n+}\"#,\n+            r#\"\n+fn foo() {\n+    let test = ();\n+}\"#,\n+        );\n+        check_assist(\n+            remove_dbg,\n+            r#\"\n+fn foo() {\n+    let t = {\n+        println!(\"Hello, world\");\n+        $0dbg!()\n+    };\n+}\"#,\n+            r#\"\n+fn foo() {\n+    let t = {\n+        println!(\"Hello, world\");\n+    };\n }\"#,\n         );\n     }"}]}