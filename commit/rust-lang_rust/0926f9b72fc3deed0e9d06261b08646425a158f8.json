{"sha": "0926f9b72fc3deed0e9d06261b08646425a158f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5MjZmOWI3MmZjM2RlZWQwZTlkMDYyNjFiMDg2NDY0MjVhMTU4Zjg=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-12T12:58:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-12T12:58:44Z"}, "message": "Rollup merge of #42826 - Yorwba:type-mismatch-same-absolute-paths, r=arielb1\n\nNote different versions of same crate when absolute paths of different types match.\n\nThe current check to address #22750 only works when the paths of the mismatched types relative to the current crate are equal, but this does not always work if one of the types is only included through an indirect dependency. If reexports are involved, the indirectly included path can e.g. [contain private modules](https://github.com/rust-lang/rust/issues/22750#issuecomment-302755516).\n\nThis PR takes care of these cases by also comparing the *absolute* path, which is equal if the type hasn't moved in the module hierarchy between versions. A more coarse check would be to compare only the crate names instead of full paths, but that might lead to too many false positives.\n\nAdditionally, I believe it would be helpful to show where the differing crates came from, i.e. the information in `rustc::middle::cstore::CrateSource`, but I'm not sure yet how to nicely display all of that, so I'm leaving it to a future PR.", "tree": {"sha": "e2217824b480fd94d99b8577c83c206a32a9e118", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2217824b480fd94d99b8577c83c206a32a9e118"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0926f9b72fc3deed0e9d06261b08646425a158f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0926f9b72fc3deed0e9d06261b08646425a158f8", "html_url": "https://github.com/rust-lang/rust/commit/0926f9b72fc3deed0e9d06261b08646425a158f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0926f9b72fc3deed0e9d06261b08646425a158f8/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "500518ab7228aef2de33201857e135487bd40edc", "url": "https://api.github.com/repos/rust-lang/rust/commits/500518ab7228aef2de33201857e135487bd40edc", "html_url": "https://github.com/rust-lang/rust/commit/500518ab7228aef2de33201857e135487bd40edc"}, {"sha": "21bb60afc1d20399ceed73dcb7939432e05b5688", "url": "https://api.github.com/repos/rust-lang/rust/commits/21bb60afc1d20399ceed73dcb7939432e05b5688", "html_url": "https://github.com/rust-lang/rust/commit/21bb60afc1d20399ceed73dcb7939432e05b5688"}], "stats": {"total": 99, "additions": 98, "deletions": 1}, "files": [{"sha": "95722a93beda18c27ddc7084bb0048caedb7c614", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0926f9b72fc3deed0e9d06261b08646425a158f8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0926f9b72fc3deed0e9d06261b08646425a158f8/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=0926f9b72fc3deed0e9d06261b08646425a158f8", "patch": "@@ -347,9 +347,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n             if !(did1.is_local() || did2.is_local()) && did1.krate != did2.krate {\n                 let exp_path = self.tcx.item_path_str(did1);\n                 let found_path = self.tcx.item_path_str(did2);\n+                let exp_abs_path = self.tcx.absolute_item_path_str(did1);\n+                let found_abs_path = self.tcx.absolute_item_path_str(did2);\n                 // We compare strings because DefPath can be different\n                 // for imported and non-imported crates\n-                if exp_path == found_path {\n+                if exp_path == found_path\n+                || exp_abs_path == found_abs_path {\n                     let crate_name = self.tcx.sess.cstore.crate_name(did1.krate);\n                     err.span_note(sp, &format!(\"Perhaps two different versions \\\n                                                 of crate `{}` are being used?\","}, {"sha": "1044d73fd1a368d339228d1b4a35bc27e8c9571e", "filename": "src/test/run-make/type-mismatch-same-crate-name/Makefile", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0926f9b72fc3deed0e9d06261b08646425a158f8/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0926f9b72fc3deed0e9d06261b08646425a158f8/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FMakefile?ref=0926f9b72fc3deed0e9d06261b08646425a158f8", "patch": "@@ -0,0 +1,19 @@\n+-include ../tools.mk\n+\n+all:\n+\t# compile two different versions of crateA\n+\t$(RUSTC) --crate-type=rlib crateA.rs -C metadata=-1 -C extra-filename=-1\n+\t$(RUSTC) --crate-type=rlib crateA.rs -C metadata=-2 -C extra-filename=-2\n+\t# make crateB depend on version 1 of crateA\n+\t$(RUSTC) --crate-type=rlib crateB.rs --extern crateA=$(TMPDIR)/libcrateA-1.rlib\n+\t# make crateC depend on version 2 of crateA\n+\t$(RUSTC) crateC.rs --extern crateA=$(TMPDIR)/libcrateA-2.rlib 2>&1 | \\\n+\t\ttr -d '\\r\\n' | grep \\\n+\t\"mismatched types.*\\\n+\tcrateB::try_foo(foo2);.*\\\n+\texpected struct \\`crateA::foo::Foo\\`, found struct \\`crateA::Foo\\`.*\\\n+\tdifferent versions of crate \\`crateA\\`.*\\\n+\tmismatched types.*\\\n+\tcrateB::try_bar(bar2);.*\\\n+\texpected trait \\`crateA::bar::Bar\\`, found trait \\`crateA::Bar\\`.*\\\n+\tdifferent versions of crate \\`crateA\\`\""}, {"sha": "e40266bb4cdaaef5e3057b6c1c7f2cc7e883ed90", "filename": "src/test/run-make/type-mismatch-same-crate-name/crateA.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0926f9b72fc3deed0e9d06261b08646425a158f8/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateA.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0926f9b72fc3deed0e9d06261b08646425a158f8/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateA.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateA.rs?ref=0926f9b72fc3deed0e9d06261b08646425a158f8", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+mod foo {\n+    pub struct Foo;\n+}\n+\n+mod bar {\n+    pub trait Bar{}\n+\n+    pub fn bar() -> Box<Bar> {\n+        unimplemented!()\n+    }\n+}\n+\n+// This makes the publicly accessible path\n+// differ from the internal one.\n+pub use foo::Foo;\n+pub use bar::{Bar, bar};"}, {"sha": "da4ea1c9387e9d534f1788a0505c4705b1b54ec3", "filename": "src/test/run-make/type-mismatch-same-crate-name/crateB.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0926f9b72fc3deed0e9d06261b08646425a158f8/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateB.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0926f9b72fc3deed0e9d06261b08646425a158f8/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateB.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateB.rs?ref=0926f9b72fc3deed0e9d06261b08646425a158f8", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern crate crateA;\n+\n+pub fn try_foo(x: crateA::Foo){}\n+pub fn try_bar(x: Box<crateA::Bar>){}"}, {"sha": "da869d2145fe1df4422e926b4ac7e28b95bd3509", "filename": "src/test/run-make/type-mismatch-same-crate-name/crateC.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/0926f9b72fc3deed0e9d06261b08646425a158f8/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateC.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0926f9b72fc3deed0e9d06261b08646425a158f8/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateC.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftype-mismatch-same-crate-name%2FcrateC.rs?ref=0926f9b72fc3deed0e9d06261b08646425a158f8", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This tests the extra note reported when a type error deals with\n+// seemingly identical types.\n+// The main use case of this error is when there are two crates\n+// (generally different versions of the same crate) with the same name\n+// causing a type mismatch.\n+\n+// The test is nearly the same as the one in\n+// compile-fail/type-mismatch-same-crate-name.rs\n+// but deals with the case where one of the crates\n+// is only introduced as an indirect dependency.\n+// and the type is accessed via a reexport.\n+// This is similar to how the error can be introduced\n+// when using cargo's automatic dependency resolution.\n+\n+extern crate crateA;\n+\n+fn main() {\n+    let foo2 = crateA::Foo;\n+    let bar2 = crateA::bar();\n+    {\n+        extern crate crateB;\n+        crateB::try_foo(foo2);\n+        crateB::try_bar(bar2);\n+    }\n+}"}]}