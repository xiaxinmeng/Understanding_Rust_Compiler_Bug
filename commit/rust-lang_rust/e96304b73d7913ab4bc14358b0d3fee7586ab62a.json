{"sha": "e96304b73d7913ab4bc14358b0d3fee7586ab62a", "node_id": "C_kwDOAAsO6NoAKGU5NjMwNGI3M2Q3OTEzYWI0YmMxNDM1OGIwZDNmZWU3NTg2YWI2MmE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-12T21:17:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-12T21:17:01Z"}, "message": "Rollup merge of #95973 - oli-obk:tait_ub3, r=compiler-errors\n\nprevent opaque types from appearing in impl headers\n\ncc `@lqd`\n\nopaque types are not distinguishable from their hidden type at the codegen stage. So we could either end up with cases where the hidden type doesn't implement the trait (which will thus ICE) or where the hidden type does implement the trait (so we'd be using its impl instead of the one written for the opaque type). This can even lead to unsound behaviour without unsafe code.\n\nFixes https://github.com/rust-lang/rust/issues/86411.\nFixes https://github.com/rust-lang/rust/issues/84660.\n\nrebase of #87382 plus some diagnostic tweaks", "tree": {"sha": "f4db843f4bf7b5ed135024b22c30c38777b68b8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4db843f4bf7b5ed135024b22c30c38777b68b8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e96304b73d7913ab4bc14358b0d3fee7586ab62a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiVexNCRBK7hj4Ov3rIwAAzggIAKaZR69jb0l2ie0BgAHKxE7i\nfmbdQZevVrTMaA5cOm6tnV8fJ0lujnZ2JP+LGey9I5oo9nsswEZhVtfubBqKg+UQ\nCFrPPdv32/a3xyuPjcYmKGLioVFroRZm0wSJ8sXEj5VHfX8PoqnCdS2cUdiGrTnZ\nP6pMZHgtT7r6MM/BuX+DRh2N6EvOEI3pWzWl4u+PZnaerZBxCeD2BSIp0iaS8j0/\nM2wwXVYVVGdMVeHWZIzlf3ihD1gcoveLZhD4d7GP58k4qVk5FYv0uvVSfVuxD3mj\ndd3+jOuWYVeDJZ9rY9M/t9rjBatT6TyaiCyy8g80rhQSz36fOxdCakTLHJYJKvw=\n=3oqE\n-----END PGP SIGNATURE-----\n", "payload": "tree f4db843f4bf7b5ed135024b22c30c38777b68b8b\nparent d63a46ad2845683266479ee6e945ac476a85edc6\nparent 6d0349d2ea97e2a3e208e0342a6a95d6b90d92ea\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1649798221 +0200\ncommitter GitHub <noreply@github.com> 1649798221 +0200\n\nRollup merge of #95973 - oli-obk:tait_ub3, r=compiler-errors\n\nprevent opaque types from appearing in impl headers\n\ncc `@lqd`\n\nopaque types are not distinguishable from their hidden type at the codegen stage. So we could either end up with cases where the hidden type doesn't implement the trait (which will thus ICE) or where the hidden type does implement the trait (so we'd be using its impl instead of the one written for the opaque type). This can even lead to unsound behaviour without unsafe code.\n\nFixes https://github.com/rust-lang/rust/issues/86411.\nFixes https://github.com/rust-lang/rust/issues/84660.\n\nrebase of #87382 plus some diagnostic tweaks\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e96304b73d7913ab4bc14358b0d3fee7586ab62a", "html_url": "https://github.com/rust-lang/rust/commit/e96304b73d7913ab4bc14358b0d3fee7586ab62a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e96304b73d7913ab4bc14358b0d3fee7586ab62a/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d63a46ad2845683266479ee6e945ac476a85edc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d63a46ad2845683266479ee6e945ac476a85edc6", "html_url": "https://github.com/rust-lang/rust/commit/d63a46ad2845683266479ee6e945ac476a85edc6"}, {"sha": "6d0349d2ea97e2a3e208e0342a6a95d6b90d92ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0349d2ea97e2a3e208e0342a6a95d6b90d92ea", "html_url": "https://github.com/rust-lang/rust/commit/6d0349d2ea97e2a3e208e0342a6a95d6b90d92ea"}], "stats": {"total": 252, "additions": 204, "deletions": 48}, "files": [{"sha": "77a537448291719a0966c6435cb68f45c95ed087", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 51, "deletions": 7, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -7,6 +7,7 @@ use rustc_errors::ErrorGuaranteed;\n use rustc_hir as hir;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::TyCtxtInferExt;\n+use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::subst::{GenericArg, InternalSubsts};\n use rustc_middle::ty::{self, ImplPolarity, Ty, TyCtxt, TypeFoldable, TypeVisitor};\n use rustc_session::lint;\n@@ -141,13 +142,56 @@ fn orphan_check_impl(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Result<(), ErrorGua\n         }\n     }\n \n-    if let ty::Opaque(def_id, _) = *trait_ref.self_ty().kind() {\n-        let reported = tcx\n-            .sess\n-            .struct_span_err(sp, \"cannot implement trait on type alias impl trait\")\n-            .span_note(tcx.def_span(def_id), \"type alias impl trait defined here\")\n-            .emit();\n-        return Err(reported);\n+    // Ensure no opaque types are present in this impl header. See issues #76202 and #86411 for examples,\n+    // and #84660 where it would otherwise allow unsoundness.\n+    if trait_ref.has_opaque_types() {\n+        trace!(\"{:#?}\", item);\n+        // First we find the opaque type in question.\n+        for ty in trait_ref.substs {\n+            for ty in ty.walk() {\n+                let ty::subst::GenericArgKind::Type(ty) = ty.unpack() else { continue };\n+                let ty::Opaque(def_id, _) = *ty.kind() else { continue };\n+                trace!(?def_id);\n+\n+                // Then we search for mentions of the opaque type's type alias in the HIR\n+                struct SpanFinder<'tcx> {\n+                    sp: Span,\n+                    def_id: DefId,\n+                    tcx: TyCtxt<'tcx>,\n+                }\n+                impl<'v, 'tcx> hir::intravisit::Visitor<'v> for SpanFinder<'tcx> {\n+                    #[instrument(level = \"trace\", skip(self, _id))]\n+                    fn visit_path(&mut self, path: &'v hir::Path<'v>, _id: hir::HirId) {\n+                        // You can't mention an opaque type directly, so we look for type aliases\n+                        if let hir::def::Res::Def(hir::def::DefKind::TyAlias, def_id) = path.res {\n+                            // And check if that type alias's type contains the opaque type we're looking for\n+                            for arg in self.tcx.type_of(def_id).walk() {\n+                                if let GenericArgKind::Type(ty) = arg.unpack() {\n+                                    if let ty::Opaque(def_id, _) = *ty.kind() {\n+                                        if def_id == self.def_id {\n+                                            // Finally we update the span to the mention of the type alias\n+                                            self.sp = path.span;\n+                                            return;\n+                                        }\n+                                    }\n+                                }\n+                            }\n+                        }\n+                        hir::intravisit::walk_path(self, path)\n+                    }\n+                }\n+\n+                let mut visitor = SpanFinder { sp, def_id, tcx };\n+                hir::intravisit::walk_item(&mut visitor, item);\n+                let reported = tcx\n+                    .sess\n+                    .struct_span_err(visitor.sp, \"cannot implement trait on type alias impl trait\")\n+                    .span_note(tcx.def_span(def_id), \"type alias impl trait defined here\")\n+                    .emit();\n+                return Err(reported);\n+            }\n+        }\n+        span_bug!(sp, \"opaque type not found, but `has_opaque_types` is set\")\n     }\n \n     Ok(())"}, {"sha": "afa95645a27869ba85a4948bac49ac89d2d7c584", "filename": "src/test/ui/impl-trait/auto-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -20,6 +20,7 @@ impl<T: Send> AnotherTrait for T {}\n // in the future.)\n impl AnotherTrait for D<OpaqueType> {\n     //~^ ERROR conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n+    //~| ERROR cannot implement trait on type alias impl trait\n }\n \n fn main() {}"}, {"sha": "3b360f492b70e4d7ccbafdf05c8f9dd6aca8040a", "filename": "src/test/ui/impl-trait/auto-trait.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -1,3 +1,15 @@\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/auto-trait.rs:21:25\n+   |\n+LL | impl AnotherTrait for D<OpaqueType> {\n+   |                         ^^^^^^^^^^\n+   |\n+note: type alias impl trait defined here\n+  --> $DIR/auto-trait.rs:7:19\n+   |\n+LL | type OpaqueType = impl OpaqueTrait;\n+   |                   ^^^^^^^^^^^^^^^^\n+\n error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n   --> $DIR/auto-trait.rs:21:1\n    |\n@@ -7,6 +19,6 @@ LL | impl<T: Send> AnotherTrait for T {}\n LL | impl AnotherTrait for D<OpaqueType> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<OpaqueType>`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "da69bb349ae24ac586d98b727b36e32c47a3f328", "filename": "src/test/ui/impl-trait/negative-reasoning.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -18,6 +18,7 @@ impl<T: std::fmt::Debug> AnotherTrait for T {}\n // This is in error, because we cannot assume that `OpaqueType: !Debug`\n impl AnotherTrait for D<OpaqueType> {\n     //~^ ERROR conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n+    //~| ERROR cannot implement trait on type alias impl trait\n }\n \n fn main() {}"}, {"sha": "98f9fbd8fefb7cae56993bc6e06ebe167f564d4e", "filename": "src/test/ui/impl-trait/negative-reasoning.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -1,3 +1,15 @@\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/negative-reasoning.rs:19:25\n+   |\n+LL | impl AnotherTrait for D<OpaqueType> {\n+   |                         ^^^^^^^^^^\n+   |\n+note: type alias impl trait defined here\n+  --> $DIR/negative-reasoning.rs:7:19\n+   |\n+LL | type OpaqueType = impl OpaqueTrait;\n+   |                   ^^^^^^^^^^^^^^^^\n+\n error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n   --> $DIR/negative-reasoning.rs:19:1\n    |\n@@ -9,6 +21,6 @@ LL | impl AnotherTrait for D<OpaqueType> {\n    |\n    = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `OpaqueType` in future versions\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "621c4ea6e0d4822010620f79302bf3a13e3c6d7b", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.rs?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -5,13 +5,14 @@ type Foo = impl PartialEq<(Foo, i32)>;\n struct Bar;\n \n impl PartialEq<(Foo, i32)> for Bar {\n+//~^ ERROR cannot implement trait on type alias impl trait\n     fn eq(&self, _other: &(Foo, i32)) -> bool {\n         true\n     }\n }\n \n fn foo() -> Foo {\n-    Bar //~ ERROR can't compare `Bar` with `(Bar, i32)`\n+    Bar\n }\n \n fn main() {}"}, {"sha": "2ef1697ba341d8e259c7db468fa096a4c8f69827", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -1,12 +1,14 @@\n-error[E0277]: can't compare `Bar` with `(Bar, i32)`\n-  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs:14:5\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs:7:17\n    |\n-LL |     Bar\n-   |     ^^^ no implementation for `Bar == (Bar, i32)`\n+LL | impl PartialEq<(Foo, i32)> for Bar {\n+   |                 ^^^\n    |\n-   = help: the trait `PartialEq<(Bar, i32)>` is not implemented for `Bar`\n-   = help: the trait `PartialEq<(Foo, i32)>` is implemented for `Bar`\n+note: type alias impl trait defined here\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs:3:12\n+   |\n+LL | type Foo = impl PartialEq<(Foo, i32)>;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "df7966f00e17238570ef51fec97ac42bf99b071d", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.rs?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -2,7 +2,6 @@\n \n mod a {\n     type Foo = impl PartialEq<(Foo, i32)>;\n-    //~^ ERROR unconstrained opaque type\n \n     struct Bar;\n \n@@ -15,13 +14,12 @@ mod a {\n \n mod b {\n     type Foo = impl PartialEq<(Foo, i32)>;\n-    //~^ ERROR unconstrained opaque type\n \n     struct Bar;\n \n     impl PartialEq<(Foo, i32)> for Bar {\n+        //~^ ERROR cannot implement trait on type alias impl trait\n         fn eq(&self, _other: &(Bar, i32)) -> bool {\n-            //~^ ERROR impl has stricter requirements than trait\n             true\n         }\n     }"}, {"sha": "6cd63dcf81c7fcbb2e3531ed7da057faa13c1124", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.stderr", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -1,25 +1,14 @@\n-error: unconstrained opaque type\n-  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:4:16\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:20:21\n    |\n-LL |     type Foo = impl PartialEq<(Foo, i32)>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     impl PartialEq<(Foo, i32)> for Bar {\n+   |                     ^^^\n    |\n-   = note: `Foo` must be used in combination with a concrete type within the same module\n-\n-error: unconstrained opaque type\n-  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:17:16\n+note: type alias impl trait defined here\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:16:16\n    |\n LL |     type Foo = impl PartialEq<(Foo, i32)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `Foo` must be used in combination with a concrete type within the same module\n-\n-error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:23:9\n-   |\n-LL |         fn eq(&self, _other: &(Bar, i32)) -> bool {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `b::Bar: PartialEq<(b::Bar, i32)>`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0276`."}, {"sha": "bbc240b6aec4931eead6f42a28e3277ae89994f6", "filename": "src/test/ui/traits/alias/issue-83613.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Falias%2Fissue-83613.stderr?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -1,8 +1,8 @@\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-83613.rs:10:1\n+  --> $DIR/issue-83613.rs:10:23\n    |\n LL | impl AnotherTrait for OpaqueType {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                       ^^^^^^^^^^\n    |\n note: type alias impl trait defined here\n   --> $DIR/issue-83613.rs:4:19"}, {"sha": "41bcea27e1fa317f45f311ac9b9a6e332cdb25a6", "filename": "src/test/ui/type-alias-impl-trait/issue-65384.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-65384.stderr?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -1,8 +1,8 @@\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-65384.rs:10:1\n+  --> $DIR/issue-65384.rs:10:18\n    |\n LL | impl MyTrait for Bar {}\n-   | ^^^^^^^^^^^^^^^^^^^^\n+   |                  ^^^\n    |\n note: type alias impl trait defined here\n   --> $DIR/issue-65384.rs:8:12"}, {"sha": "2d4a6854a920be74ffc2add35ade869546709f08", "filename": "src/test/ui/type-alias-impl-trait/issue-76202-trait-impl-for-tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-76202-trait-impl-for-tait.stderr?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -1,8 +1,8 @@\n error: cannot implement trait on type alias impl trait\n-  --> $DIR/issue-76202-trait-impl-for-tait.rs:16:1\n+  --> $DIR/issue-76202-trait-impl-for-tait.rs:16:15\n    |\n LL | impl Test for F {\n-   | ^^^^^^^^^^^^^^^\n+   |               ^\n    |\n note: type alias impl trait defined here\n   --> $DIR/issue-76202-trait-impl-for-tait.rs:9:10"}, {"sha": "fa25d8f762e6c3f8031ea50e22ceac7a640f5e93", "filename": "src/test/ui/type-alias-impl-trait/issue-84660-trait-impl-for-tait.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-trait-impl-for-tait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-trait-impl-for-tait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-trait-impl-for-tait.rs?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -0,0 +1,23 @@\n+// Regression test for issues #84660 and #86411: both are variations on #76202.\n+// Tests that we don't ICE when we have an opaque type appearing anywhere in an impl header.\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Foo {}\n+impl Foo for () {}\n+type Bar = impl Foo;\n+fn _defining_use() -> Bar {}\n+\n+trait TraitArg<T> {\n+    fn f();\n+}\n+\n+impl TraitArg<Bar> for () { //~ ERROR cannot implement trait\n+    fn f() {\n+        println!(\"ho\");\n+    }\n+}\n+\n+fn main() {\n+    <() as TraitArg<Bar>>::f();\n+}"}, {"sha": "bb70d07be59bb0da395cd94836186ebc06d5e379", "filename": "src/test/ui/type-alias-impl-trait/issue-84660-trait-impl-for-tait.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-trait-impl-for-tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-trait-impl-for-tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-trait-impl-for-tait.stderr?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -0,0 +1,14 @@\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/issue-84660-trait-impl-for-tait.rs:15:15\n+   |\n+LL | impl TraitArg<Bar> for () {\n+   |               ^^^\n+   |\n+note: type alias impl trait defined here\n+  --> $DIR/issue-84660-trait-impl-for-tait.rs:8:12\n+   |\n+LL | type Bar = impl Foo;\n+   |            ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "f12d1b6d953cd6ee9890db3f4da4ddcdf5d972c4", "filename": "src/test/ui/type-alias-impl-trait/issue-84660-unsoundness.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-unsoundness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-unsoundness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-unsoundness.rs?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -0,0 +1,41 @@\n+// Another example from issue #84660, this time weaponized as a safe transmute: an opaque type in an\n+// impl header being accepted was used to create unsoundness.\n+\n+#![feature(type_alias_impl_trait)]\n+\n+trait Foo {}\n+impl Foo for () {}\n+type Bar = impl Foo;\n+fn _defining_use() -> Bar {}\n+\n+trait Trait<T, In> {\n+    type Out;\n+    fn convert(i: In) -> Self::Out;\n+}\n+\n+impl<In, Out> Trait<Bar, In> for Out { //~ ERROR cannot implement trait\n+    type Out = Out;\n+    fn convert(_i: In) -> Self::Out {\n+        unreachable!();\n+    }\n+}\n+\n+impl<In, Out> Trait<(), In> for Out {\n+    type Out = In;\n+    fn convert(i: In) -> Self::Out {\n+        i\n+    }\n+}\n+\n+fn transmute<In, Out>(i: In) -> Out {\n+    <Out as Trait<Bar, In>>::convert(i)\n+}\n+\n+fn main() {\n+    let d;\n+    {\n+        let x = \"Hello World\".to_string();\n+        d = transmute::<&String, &String>(&x);\n+    }\n+    println!(\"{}\", d);\n+}"}, {"sha": "f2d600fb46c54ee4e64922393a27b0e06bb27f02", "filename": "src/test/ui/type-alias-impl-trait/issue-84660-unsoundness.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-unsoundness.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-unsoundness.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-84660-unsoundness.stderr?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -0,0 +1,14 @@\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/issue-84660-unsoundness.rs:16:21\n+   |\n+LL | impl<In, Out> Trait<Bar, In> for Out {\n+   |                     ^^^\n+   |\n+note: type alias impl trait defined here\n+  --> $DIR/issue-84660-unsoundness.rs:8:12\n+   |\n+LL | type Bar = impl Foo;\n+   |            ^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "ebf3a99bbf9f09ae56bee7390c12aee4d6f0a487", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.rs?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -4,11 +4,11 @@\n use std::fmt::Debug;\n \n type FooX = impl Debug;\n-//~^ unconstrained opaque type\n \n trait Foo<A> { }\n \n impl Foo<FooX> for () { }\n+//~^ cannot implement trait on type alias impl trait\n \n fn foo() -> impl Foo<FooX> {\n     ()"}, {"sha": "4a3fb16733e04964fc53cc8f5ade4388a9c9aa6f", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference3.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e96304b73d7913ab4bc14358b0d3fee7586ab62a/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.stderr?ref=e96304b73d7913ab4bc14358b0d3fee7586ab62a", "patch": "@@ -1,10 +1,14 @@\n-error: unconstrained opaque type\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/nested-tait-inference3.rs:10:10\n+   |\n+LL | impl Foo<FooX> for () { }\n+   |          ^^^^\n+   |\n+note: type alias impl trait defined here\n   --> $DIR/nested-tait-inference3.rs:6:13\n    |\n LL | type FooX = impl Debug;\n    |             ^^^^^^^^^^\n-   |\n-   = note: `FooX` must be used in combination with a concrete type within the same module\n \n error: aborting due to previous error\n "}]}