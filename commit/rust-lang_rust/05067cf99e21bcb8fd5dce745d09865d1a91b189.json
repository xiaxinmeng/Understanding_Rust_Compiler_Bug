{"sha": "05067cf99e21bcb8fd5dce745d09865d1a91b189", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MDY3Y2Y5OWUyMWJjYjhmZDVkY2U3NDVkMDk4NjVkMWE5MWIxODk=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-16T20:26:50Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-17T17:15:24Z"}, "message": "Fix an ICE when attempting to transmute an uninhabited type", "tree": {"sha": "86b7bde652e3e1ff7c76e22958c28ad28f456dda", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86b7bde652e3e1ff7c76e22958c28ad28f456dda"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05067cf99e21bcb8fd5dce745d09865d1a91b189", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05067cf99e21bcb8fd5dce745d09865d1a91b189", "html_url": "https://github.com/rust-lang/rust/commit/05067cf99e21bcb8fd5dce745d09865d1a91b189", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05067cf99e21bcb8fd5dce745d09865d1a91b189/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbd10f81758381339f98994b8d31814cf5e98707", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbd10f81758381339f98994b8d31814cf5e98707", "html_url": "https://github.com/rust-lang/rust/commit/dbd10f81758381339f98994b8d31814cf5e98707"}], "stats": {"total": 49, "additions": 46, "deletions": 3}, "files": [{"sha": "bc5819791fa371041b80673490a6b4ca885693be", "filename": "src/librustc_codegen_llvm/mir/block.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/05067cf99e21bcb8fd5dce745d09865d1a91b189/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05067cf99e21bcb8fd5dce745d09865d1a91b189/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fblock.rs?ref=05067cf99e21bcb8fd5dce745d09865d1a91b189", "patch": "@@ -428,9 +428,19 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                 let intrinsic = intrinsic.as_ref().map(|s| &s[..]);\n \n                 if intrinsic == Some(\"transmute\") {\n-                    let &(ref dest, target) = destination.as_ref().unwrap();\n-                    self.codegen_transmute(&bx, &args[0], dest);\n-                    funclet_br(self, bx, target);\n+                    if let Some(destination_ref) = destination.as_ref() {\n+                        let &(ref dest, target) = destination_ref;\n+                        self.trans_transmute(&bx, &args[0], dest);\n+                        funclet_br(self, bx, target);\n+                    } else {\n+                        // If we are trying to transmute to an uninhabited type,\n+                        // it is likely there is no allotted destination. In fact,\n+                        // transmuting to an uninhabited type is UB, which means\n+                        // we can do what we like. Here, we declare that transmuting\n+                        // into an uninhabited type is impossible, so anything following\n+                        // it must be unreachable.\n+                        bx.unreachable();\n+                    }\n                     return;\n                 }\n "}, {"sha": "cbcc47f60c31328c250b2839b34095a0ebe7f37d", "filename": "src/test/compile-fail/never_transmute_never.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/05067cf99e21bcb8fd5dce745d09865d1a91b189/src%2Ftest%2Fcompile-fail%2Fnever_transmute_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05067cf99e21bcb8fd5dce745d09865d1a91b189/src%2Ftest%2Fcompile-fail%2Fnever_transmute_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnever_transmute_never.rs?ref=05067cf99e21bcb8fd5dce745d09865d1a91b189", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#![crate_type=\"lib\"]\n+\n+#![feature(never_type)]\n+#![allow(dead_code)]\n+#![allow(unreachable_code)]\n+#![allow(unused_variables)]\n+\n+struct Foo;\n+\n+pub fn f(x: !) -> ! {\n+    x\n+}\n+\n+pub fn ub() {\n+    // This is completely undefined behaviour,\n+    // but we still want to make sure it compiles.\n+    let x: ! = unsafe {\n+        std::mem::transmute::<Foo, !>(Foo)\n+    };\n+    f(x)\n+}"}]}