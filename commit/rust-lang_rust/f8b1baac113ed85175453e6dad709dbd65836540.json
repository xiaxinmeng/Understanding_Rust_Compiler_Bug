{"sha": "f8b1baac113ed85175453e6dad709dbd65836540", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4YjFiYWFjMTEzZWQ4NTE3NTQ1M2U2ZGFkNzA5ZGJkNjU4MzY1NDA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-01-15T22:31:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-15T22:31:03Z"}, "message": "Rollup merge of #81054 - LingMan:rem_as_ref, r=jyn514\n\nDrop a few unneeded borrows\n\n`@rustbot` modify labels +C-cleanup +T-compiler", "tree": {"sha": "e97216696e67db2baeeda6428a27ee3e2e5ac6cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e97216696e67db2baeeda6428a27ee3e2e5ac6cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8b1baac113ed85175453e6dad709dbd65836540", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAhenCRBK7hj4Ov3rIwAAdHIIAGPd5OKs8dDMW/UoiO5N92lK\nVLYsT2UkZQLQbEFsZ//pSbnuspeq9QDWx77lfg9lS+p19wr2WNat56pxtEOeaaJ3\nf6KYHIUFNM2+MvVar2d8YAMM9qr7NIn1TIsmSKrE7iWREldAYUAlB4Kt1+Xu+/XR\nceJceDrp9XUqJ42jOL87HCWwXCCg5pDXrJLkLth8yRUU+cv79ZxrXugGtHucTwUL\nWciP33Oze+xaKdO/BJtTVGTR+oszUVh8hGGRBVqbjBhUMVivNhv+/XXhkyl7z+fp\n4O0jw9EL7CocsASNZmPCq/VOwk18jdc2j7c6XAcQPxqdOZHOq1KaBTA0c1F2X6g=\n=L7wl\n-----END PGP SIGNATURE-----\n", "payload": "tree e97216696e67db2baeeda6428a27ee3e2e5ac6cf\nparent 1a194d90a251c5fe12196018317177d90082ad64\nparent ba1f036c7a3541729f43ca5a4127adddb4fc2e13\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1610749863 +0100\ncommitter GitHub <noreply@github.com> 1610749863 +0100\n\nRollup merge of #81054 - LingMan:rem_as_ref, r=jyn514\n\nDrop a few unneeded borrows\n\n`@rustbot` modify labels +C-cleanup +T-compiler\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b1baac113ed85175453e6dad709dbd65836540", "html_url": "https://github.com/rust-lang/rust/commit/f8b1baac113ed85175453e6dad709dbd65836540", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8b1baac113ed85175453e6dad709dbd65836540/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a194d90a251c5fe12196018317177d90082ad64", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a194d90a251c5fe12196018317177d90082ad64", "html_url": "https://github.com/rust-lang/rust/commit/1a194d90a251c5fe12196018317177d90082ad64"}, {"sha": "ba1f036c7a3541729f43ca5a4127adddb4fc2e13", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba1f036c7a3541729f43ca5a4127adddb4fc2e13", "html_url": "https://github.com/rust-lang/rust/commit/ba1f036c7a3541729f43ca5a4127adddb4fc2e13"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "6177e39ba9e4c09cba1c902a6afad49d70731037", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f8b1baac113ed85175453e6dad709dbd65836540/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b1baac113ed85175453e6dad709dbd65836540/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=f8b1baac113ed85175453e6dad709dbd65836540", "patch": "@@ -813,25 +813,25 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     if ty.is_never() {\n                         None\n                     } else {\n-                        Some(match &elem.kind {\n+                        Some(match elem.kind {\n                             // Point at the tail expression when possible.\n                             hir::ExprKind::Block(block, _) => {\n-                                block.expr.as_ref().map_or(block.span, |e| e.span)\n+                                block.expr.map_or(block.span, |e| e.span)\n                             }\n                             _ => elem.span,\n                         })\n                     }\n                 })\n         };\n \n-        if let hir::ExprKind::If(_, _, Some(el)) = &expr.kind {\n+        if let hir::ExprKind::If(_, _, Some(el)) = expr.kind {\n             if let Some(rslt) = check_in_progress(el) {\n                 return rslt;\n             }\n         }\n \n-        if let hir::ExprKind::Match(_, arms, _) = &expr.kind {\n-            let mut iter = arms.iter().filter_map(|arm| check_in_progress(&arm.body));\n+        if let hir::ExprKind::Match(_, arms, _) = expr.kind {\n+            let mut iter = arms.iter().filter_map(|arm| check_in_progress(arm.body));\n             if let Some(span) = iter.next() {\n                 if iter.next().is_none() {\n                     return span;"}]}