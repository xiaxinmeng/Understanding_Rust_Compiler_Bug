{"sha": "72ae73ae6119b9726f0f0b66da0445ca039e8059", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcyYWU3M2FlNjExOWI5NzI2ZjBmMGI2NmRhMDQ0NWNhMDM5ZTgwNTk=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-04-10T23:39:50Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-04-10T23:39:50Z"}, "message": "Pass the `PlaceElem::Index` local to `visit_local`", "tree": {"sha": "dc65b60d2f41a485dc8fb581364f65800810828d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc65b60d2f41a485dc8fb581364f65800810828d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/72ae73ae6119b9726f0f0b66da0445ca039e8059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/72ae73ae6119b9726f0f0b66da0445ca039e8059", "html_url": "https://github.com/rust-lang/rust/commit/72ae73ae6119b9726f0f0b66da0445ca039e8059", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/72ae73ae6119b9726f0f0b66da0445ca039e8059/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9682f0e14db95076454559a24c26287bcad57955", "url": "https://api.github.com/repos/rust-lang/rust/commits/9682f0e14db95076454559a24c26287bcad57955", "html_url": "https://github.com/rust-lang/rust/commit/9682f0e14db95076454559a24c26287bcad57955"}], "stats": {"total": 113, "additions": 39, "deletions": 74}, "files": [{"sha": "5c33db299ae8575939a27331c71d2579fb90cd6c", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 33, "deletions": 26, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/72ae73ae6119b9726f0f0b66da0445ca039e8059/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ae73ae6119b9726f0f0b66da0445ca039e8059/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=72ae73ae6119b9726f0f0b66da0445ca039e8059", "patch": "@@ -838,7 +838,7 @@ macro_rules! make_mir_visitor {\n }\n \n macro_rules! visit_place_fns {\n-    (mut) => (\n+    (mut) => {\n         fn tcx<'a>(&'a self) -> TyCtxt<'tcx>;\n \n         fn super_place(\n@@ -849,20 +849,21 @@ macro_rules! visit_place_fns {\n         ) {\n             self.visit_place_base(&mut place.local, context, location);\n \n-            if let Some(new_projection) = self.process_projection(&place.projection) {\n+            if let Some(new_projection) = self.process_projection(&place.projection, location) {\n                 place.projection = self.tcx().intern_place_elems(&new_projection);\n             }\n         }\n \n         fn process_projection(\n             &mut self,\n             projection: &'a [PlaceElem<'tcx>],\n+            location: Location,\n         ) -> Option<Vec<PlaceElem<'tcx>>> {\n             let mut projection = Cow::Borrowed(projection);\n \n             for i in 0..projection.len() {\n                 if let Some(elem) = projection.get(i) {\n-                    if let Some(elem) = self.process_projection_elem(elem) {\n+                    if let Some(elem) = self.process_projection_elem(elem, location) {\n                         // This converts the borrowed projection into `Cow::Owned(_)` and returns a\n                         // clone of the projection so we can mutate and reintern later.\n                         let vec = projection.to_mut();\n@@ -879,13 +880,30 @@ macro_rules! visit_place_fns {\n \n         fn process_projection_elem(\n             &mut self,\n-            _elem: &PlaceElem<'tcx>,\n+            elem: &PlaceElem<'tcx>,\n+            location: Location,\n         ) -> Option<PlaceElem<'tcx>> {\n-            None\n+            match elem {\n+                PlaceElem::Index(local) => {\n+                    let mut new_local = *local;\n+                    self.visit_local(\n+                        &mut new_local,\n+                        PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n+                        location,\n+                    );\n+\n+                    if new_local == *local { None } else { Some(PlaceElem::Index(new_local)) }\n+                }\n+                PlaceElem::Deref\n+                | PlaceElem::Field(..)\n+                | PlaceElem::ConstantIndex { .. }\n+                | PlaceElem::Subslice { .. }\n+                | PlaceElem::Downcast(..) => None,\n+            }\n         }\n-    );\n+    };\n \n-    () => (\n+    () => {\n         fn visit_projection(\n             &mut self,\n             local: Local,\n@@ -907,12 +925,7 @@ macro_rules! visit_place_fns {\n             self.super_projection_elem(local, proj_base, elem, context, location);\n         }\n \n-        fn super_place(\n-            &mut self,\n-            place: &Place<'tcx>,\n-            context: PlaceContext,\n-            location: Location,\n-        ) {\n+        fn super_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {\n             let mut context = context;\n \n             if !place.projection.is_empty() {\n@@ -925,10 +938,7 @@ macro_rules! visit_place_fns {\n \n             self.visit_place_base(&place.local, context, location);\n \n-            self.visit_projection(place.local,\n-                                  &place.projection,\n-                                  context,\n-                                  location);\n+            self.visit_projection(place.local, &place.projection, context, location);\n         }\n \n         fn super_projection(\n@@ -961,19 +971,16 @@ macro_rules! visit_place_fns {\n                     self.visit_local(\n                         local,\n                         PlaceContext::NonMutatingUse(NonMutatingUseContext::Copy),\n-                        location\n+                        location,\n                     );\n                 }\n-                ProjectionElem::Deref |\n-                ProjectionElem::Subslice { from: _, to: _, from_end: _ } |\n-                ProjectionElem::ConstantIndex { offset: _,\n-                                                min_length: _,\n-                                                from_end: _ } |\n-                ProjectionElem::Downcast(_, _) => {\n-                }\n+                ProjectionElem::Deref\n+                | ProjectionElem::Subslice { from: _, to: _, from_end: _ }\n+                | ProjectionElem::ConstantIndex { offset: _, min_length: _, from_end: _ }\n+                | ProjectionElem::Downcast(_, _) => {}\n             }\n         }\n-    );\n+    };\n }\n \n make_mir_visitor!(Visitor,);"}, {"sha": "a6b4aa74977224b115cc4b1e40e2c0e7807c0921", "filename": "src/librustc_mir/borrow_check/renumber.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/72ae73ae6119b9726f0f0b66da0445ca039e8059/src%2Flibrustc_mir%2Fborrow_check%2Frenumber.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ae73ae6119b9726f0f0b66da0445ca039e8059/src%2Flibrustc_mir%2Fborrow_check%2Frenumber.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Frenumber.rs?ref=72ae73ae6119b9726f0f0b66da0445ca039e8059", "patch": "@@ -64,7 +64,11 @@ impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n         debug!(\"visit_ty: ty={:?}\", ty);\n     }\n \n-    fn process_projection_elem(&mut self, elem: &PlaceElem<'tcx>) -> Option<PlaceElem<'tcx>> {\n+    fn process_projection_elem(\n+        &mut self,\n+        elem: &PlaceElem<'tcx>,\n+        _: Location,\n+    ) -> Option<PlaceElem<'tcx>> {\n         if let PlaceElem::Field(field, ty) = elem {\n             let new_ty = self.renumber_regions(ty);\n "}, {"sha": "bc3c20d9f409a914709f4fcee9419e93ef86e355", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72ae73ae6119b9726f0f0b66da0445ca039e8059/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ae73ae6119b9726f0f0b66da0445ca039e8059/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=72ae73ae6119b9726f0f0b66da0445ca039e8059", "patch": "@@ -89,13 +89,6 @@ impl<'tcx> MutVisitor<'tcx> for RenameLocalVisitor<'tcx> {\n             *local = self.to;\n         }\n     }\n-\n-    fn process_projection_elem(&mut self, elem: &PlaceElem<'tcx>) -> Option<PlaceElem<'tcx>> {\n-        match elem {\n-            PlaceElem::Index(local) if *local == self.from => Some(PlaceElem::Index(self.to)),\n-            _ => None,\n-        }\n-    }\n }\n \n struct DerefArgVisitor<'tcx> {"}, {"sha": "8121d4ead13943dfd5c0fc543cc2ff661802d765", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/72ae73ae6119b9726f0f0b66da0445ca039e8059/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ae73ae6119b9726f0f0b66da0445ca039e8059/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=72ae73ae6119b9726f0f0b66da0445ca039e8059", "patch": "@@ -706,18 +706,6 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Integrator<'a, 'tcx> {\n         self.super_place(place, context, location)\n     }\n \n-    fn process_projection_elem(&mut self, elem: &PlaceElem<'tcx>) -> Option<PlaceElem<'tcx>> {\n-        if let PlaceElem::Index(local) = elem {\n-            let new_local = self.make_integrate_local(*local);\n-\n-            if new_local != *local {\n-                return Some(PlaceElem::Index(new_local));\n-            }\n-        }\n-\n-        None\n-    }\n-\n     fn visit_basic_block_data(&mut self, block: BasicBlock, data: &mut BasicBlockData<'tcx>) {\n         self.in_cleanup_block = data.is_cleanup;\n         self.super_basic_block_data(block, data);"}, {"sha": "9579fe1f405ba4368d790fc84ed131b124a5811d", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/72ae73ae6119b9726f0f0b66da0445ca039e8059/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ae73ae6119b9726f0f0b66da0445ca039e8059/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=72ae73ae6119b9726f0f0b66da0445ca039e8059", "patch": "@@ -1036,15 +1036,6 @@ impl<'a, 'tcx> MutVisitor<'tcx> for Promoter<'a, 'tcx> {\n             *local = self.promote_temp(*local);\n         }\n     }\n-\n-    fn process_projection_elem(&mut self, elem: &PlaceElem<'tcx>) -> Option<PlaceElem<'tcx>> {\n-        match elem {\n-            PlaceElem::Index(local) if self.is_temp_kind(*local) => {\n-                Some(PlaceElem::Index(self.promote_temp(*local)))\n-            }\n-            _ => None,\n-        }\n-    }\n }\n \n pub fn promote_candidates<'tcx>("}, {"sha": "c0da2c446d65fa30c81654a392f7aa2c82b85d35", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/72ae73ae6119b9726f0f0b66da0445ca039e8059/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ae73ae6119b9726f0f0b66da0445ca039e8059/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=72ae73ae6119b9726f0f0b66da0445ca039e8059", "patch": "@@ -417,11 +417,4 @@ impl<'tcx> MutVisitor<'tcx> for LocalUpdater<'tcx> {\n     fn visit_local(&mut self, l: &mut Local, _: PlaceContext, _: Location) {\n         *l = self.map[*l].unwrap();\n     }\n-\n-    fn process_projection_elem(&mut self, elem: &PlaceElem<'tcx>) -> Option<PlaceElem<'tcx>> {\n-        match elem {\n-            PlaceElem::Index(local) => Some(PlaceElem::Index(self.map[*local].unwrap())),\n-            _ => None,\n-        }\n-    }\n }"}, {"sha": "0ac743359be96e2c91efbf06c25bd3fa6f718e7b", "filename": "src/librustc_mir/util/def_use.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/72ae73ae6119b9726f0f0b66da0445ca039e8059/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/72ae73ae6119b9726f0f0b66da0445ca039e8059/src%2Flibrustc_mir%2Futil%2Fdef_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fdef_use.rs?ref=72ae73ae6119b9726f0f0b66da0445ca039e8059", "patch": "@@ -2,9 +2,7 @@\n \n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::{MutVisitor, PlaceContext, Visitor};\n-use rustc_middle::mir::{\n-    Body, BodyAndCache, Local, Location, PlaceElem, ReadOnlyBodyAndCache, VarDebugInfo,\n-};\n+use rustc_middle::mir::{Body, BodyAndCache, Local, Location, ReadOnlyBodyAndCache, VarDebugInfo};\n use rustc_middle::ty::TyCtxt;\n use std::mem;\n \n@@ -157,13 +155,4 @@ impl MutVisitor<'tcx> for MutateUseVisitor<'tcx> {\n             *local = self.new_local;\n         }\n     }\n-\n-    fn process_projection_elem(&mut self, elem: &PlaceElem<'tcx>) -> Option<PlaceElem<'tcx>> {\n-        match elem {\n-            PlaceElem::Index(local) if *local == self.query => {\n-                Some(PlaceElem::Index(self.new_local))\n-            }\n-            _ => None,\n-        }\n-    }\n }"}]}