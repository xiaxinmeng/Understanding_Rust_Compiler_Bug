{"sha": "411fcf58fdb6c08c0bfa5bcefd87ceb95fbde2af", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxMWZjZjU4ZmRiNmMwOGMwYmZhNWJjZWZkODdjZWI5NWZiZGUyYWY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-01-30T13:12:16Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2018-03-08T07:34:15Z"}, "message": "Rename OptimizationFinder and don't propagate any borrows", "tree": {"sha": "14b0bda2c8aa2dcacdc22c1a6e28d2d0aa1e646f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14b0bda2c8aa2dcacdc22c1a6e28d2d0aa1e646f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/411fcf58fdb6c08c0bfa5bcefd87ceb95fbde2af", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEYFTdM4NKd7XQft77pp+NIls619kFAlqg53cACgkQpp+NIls6\n19nmLQ/6AhqignOXe80hHjZiuBBun6OPlTd3VIEIuq1dcHxMM1xPqeSoVADO/em0\nPIJG2paqoNwrNhgaoJKAMU1/HU/I3TDY8ug7GQ4eqevdOMqxACm6qvnxW1pIEYFH\njc2XBh6oagIwHGFDmTfvvXA90Ao8AbCQtscAAC72LKSA8HT0qcNJMUowvqTZhYbZ\nhb4jmDOMlJGzXQxqOZWoADDPzWcxRi0lbbcWDQhlqSdyMN7EtRmFHvqhxlQoNhev\nzeGuyxKt3ycmKVX+K4xAkxdbYvjlUHXm2sMeTIIqyLLCc/MF/863OlMDzQOHHT13\nf7Emerp6WvaiuJKAaUQW1ZEWJuWpFOzq1S90tF/C92PKSFOcroc+EPCf1jEcw1Fh\nhqIvTSYC2kY8ySn4ii2zzA/S2K2hU9uY0YhDM57voToaf5r3S7kNtiyyxd0C49K0\n/isv4pwK2eL2HnTObDjCbjynqfCu7pUztX3h7SEptY9X3ngvkpupz6SJLwGKRT4A\nYpMNUeUy1FqhlmNnZE5p4qkZnE4xeshtRDfleqvzULbEXP5t3ZRC7odahRQTAsWC\nO6CHojgJN3jAGh7x+y7CwfZe7tVbQMcoBkBByymN5NlQnMq+YYxLBHF477aLtj1r\nNLp2rnzYFbDgMDfWuLGwiGURmeaVTvZL2AyG3EHiutl9Q6wwXLE=\n=Qti2\n-----END PGP SIGNATURE-----", "payload": "tree 14b0bda2c8aa2dcacdc22c1a6e28d2d0aa1e646f\nparent 57ae890265d99c1c01ad50730d372b8354a8d7d7\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1517317936 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1520494455 +0100\n\nRename OptimizationFinder and don't propagate any borrows\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/411fcf58fdb6c08c0bfa5bcefd87ceb95fbde2af", "html_url": "https://github.com/rust-lang/rust/commit/411fcf58fdb6c08c0bfa5bcefd87ceb95fbde2af", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/411fcf58fdb6c08c0bfa5bcefd87ceb95fbde2af/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57ae890265d99c1c01ad50730d372b8354a8d7d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/57ae890265d99c1c01ad50730d372b8354a8d7d7", "html_url": "https://github.com/rust-lang/rust/commit/57ae890265d99c1c01ad50730d372b8354a8d7d7"}], "stats": {"total": 50, "additions": 12, "deletions": 38}, "files": [{"sha": "45cbdc7d0c1ee5f33a23dbda3f4ad712666dca7b", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 12, "deletions": 38, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/411fcf58fdb6c08c0bfa5bcefd87ceb95fbde2af/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/411fcf58fdb6c08c0bfa5bcefd87ceb95fbde2af/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=411fcf58fdb6c08c0bfa5bcefd87ceb95fbde2af", "patch": "@@ -15,7 +15,7 @@\n \n use rustc::mir::{Constant, Literal, Location, Place, Mir, Operand, Rvalue, Local};\n use rustc::mir::{NullOp, StatementKind, Statement, BasicBlock, LocalKind};\n-use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, BorrowKind};\n+use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp};\n use rustc::mir::visit::{Visitor, PlaceContext};\n use rustc::ty::layout::LayoutOf;\n use rustc::middle::const_val::ConstVal;\n@@ -40,7 +40,7 @@ impl MirPass for ConstProp {\n         // constants, instead of just checking for const-folding succeeding.\n         // That would require an uniform one-def no-mutation analysis\n         // and RPO (or recursing when needing the value of a local).\n-        let mut optimization_finder = OptimizationFinder::new(mir, tcx, source);\n+        let mut optimization_finder = ConstPropagator::new(mir, tcx, source);\n         optimization_finder.visit_mir(mir);\n \n         trace!(\"ConstProp done for {:?}\", source.def_id);\n@@ -50,30 +50,25 @@ impl MirPass for ConstProp {\n type Const<'tcx> = (Value, ty::Ty<'tcx>, Span);\n \n /// Finds optimization opportunities on the MIR.\n-struct OptimizationFinder<'b, 'a, 'tcx:'a+'b> {\n+struct ConstPropagator<'b, 'a, 'tcx:'a+'b> {\n     mir: &'b Mir<'tcx>,\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     source: MirSource,\n     places: IndexVec<Local, Option<Const<'tcx>>>,\n     can_const_prop: IndexVec<Local, bool>,\n }\n \n-impl<'b, 'a, 'tcx:'b> OptimizationFinder<'b, 'a, 'tcx> {\n+impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n     fn new(\n         mir: &'b Mir<'tcx>,\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         source: MirSource,\n-    ) -> OptimizationFinder<'b, 'a, 'tcx> {\n-        let can_const_prop = CanConstProp::check(\n-            mir,\n-            tcx,\n-            tcx.param_env(source.def_id),\n-        );\n-        OptimizationFinder {\n+    ) -> ConstPropagator<'b, 'a, 'tcx> {\n+        ConstPropagator {\n             mir,\n             tcx,\n             source,\n-            can_const_prop,\n+            can_const_prop: CanConstProp::check(mir),\n             places: IndexVec::from_elem(None, &mir.local_decls),\n         }\n     }\n@@ -277,28 +272,18 @@ fn type_size_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     (tcx, param_env).layout_of(ty).ok().map(|layout| layout.size.bytes())\n }\n \n-struct CanConstProp<'b, 'a, 'tcx:'a+'b> {\n+struct CanConstProp {\n     can_const_prop: IndexVec<Local, bool>,\n     // false at the beginning, once set, there are not allowed to be any more assignments\n     found_assignment: IndexVec<Local, bool>,\n-    mir: &'b Mir<'tcx>,\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    param_env: ty::ParamEnv<'tcx>,\n }\n \n-impl<'b, 'a, 'tcx:'b> CanConstProp<'b, 'a, 'tcx> {\n+impl CanConstProp {\n     /// returns true if `local` can be propagated\n-    fn check(\n-        mir: &'b Mir<'tcx>,\n-        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-        param_env: ty::ParamEnv<'tcx>,\n-    ) -> IndexVec<Local, bool> {\n+    fn check(mir: &Mir) -> IndexVec<Local, bool> {\n         let mut cpv = CanConstProp {\n             can_const_prop: IndexVec::from_elem(true, &mir.local_decls),\n             found_assignment: IndexVec::from_elem(false, &mir.local_decls),\n-            mir,\n-            tcx,\n-            param_env,\n         };\n         for (local, val) in cpv.can_const_prop.iter_enumerated_mut() {\n             *val = mir.local_kind(local) != LocalKind::Arg;\n@@ -308,7 +293,7 @@ impl<'b, 'a, 'tcx:'b> CanConstProp<'b, 'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'b, 'tcx> Visitor<'tcx> for CanConstProp<'a, 'b, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for CanConstProp {\n     fn visit_local(\n         &mut self,\n         &local: &Local,\n@@ -330,23 +315,12 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for CanConstProp<'a, 'b, 'tcx> {\n             StorageDead | StorageLive |\n             Validate |\n             Inspect => {},\n-            Borrow { kind: BorrowKind::Shared, .. } => {\n-                // cannot const prop immutable borrows of types with interior mutability\n-                let has_interior_mutability = self\n-                    .mir\n-                    .local_decls[local]\n-                    .ty\n-                    .is_freeze(self.tcx, self.param_env, self.mir.span);\n-                if has_interior_mutability {\n-                    self.can_const_prop[local] = false;\n-                }\n-            }\n             _ => self.can_const_prop[local] = false,\n         }\n     }\n }\n \n-impl<'b, 'a, 'tcx> Visitor<'tcx> for OptimizationFinder<'b, 'a, 'tcx> {\n+impl<'b, 'a, 'tcx> Visitor<'tcx> for ConstPropagator<'b, 'a, 'tcx> {\n     fn visit_constant(\n         &mut self,\n         constant: &Constant<'tcx>,"}]}