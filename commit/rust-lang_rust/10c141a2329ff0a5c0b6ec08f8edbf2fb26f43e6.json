{"sha": "10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYzE0MWEyMzI5ZmYwYTVjMGI2ZWMwOGY4ZWRiZjJmYjI2ZjQzZTY=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-01T21:48:02Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-06-02T03:40:34Z"}, "message": "Port more test cases to use classes instead of resources", "tree": {"sha": "fd213cb3ee02aea611a0b2a646e2ba3929cf4344", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd213cb3ee02aea611a0b2a646e2ba3929cf4344"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6", "html_url": "https://github.com/rust-lang/rust/commit/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc5cb4deb34cc767af20eedc55fed5f528680938", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc5cb4deb34cc767af20eedc55fed5f528680938", "html_url": "https://github.com/rust-lang/rust/commit/bc5cb4deb34cc767af20eedc55fed5f528680938"}], "stats": {"total": 70, "additions": 47, "deletions": 23}, "files": [{"sha": "8582bdeddfabb301673082a6fac6fcace10c2384", "filename": "src/test/run-pass/resource-in-struct.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-in-struct.rs?ref=10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6", "patch": "@@ -1,9 +1,14 @@\n-// Ensures that putting resources inside structual types keeps\n-// working.\n+// Ensures that class dtors run if the object is inside an enum\n+// variant\n \n type closable = @mut bool;\n \n-resource close_res(i: closable) { *i = false; }\n+class close_res {\n+  let i: closable;\n+ \n+  new(i: closable) { self.i = i; }\n+  drop { *(self.i) = false; }\n+}\n \n enum option<T> { none, some(T), }\n "}, {"sha": "a733f998160c943433ff4a80f774cfd203cefada", "filename": "src/test/run-pass/send-resource.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6/src%2Ftest%2Frun-pass%2Fsend-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-resource.rs?ref=10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6", "patch": "@@ -1,8 +1,10 @@\n import task::*;\n import comm::*;\n \n-resource test(_f: int) {\n-    // Do nothing\n+class test {\n+  let f: int;\n+  new(f: int) { self.f = f; }\n+  drop {}\n }\n \n fn main() {"}, {"sha": "8f19fab4413d12a746fb14682faaa01a93e7bf65", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6", "patch": "@@ -1,29 +1,30 @@\n-// xfail-test\n \n-// A port of task-killjoin to use a resource to manage\n+// A port of task-killjoin to use a class with a dtor to manage\n // the join.\n \n use std;\n import task;\n \n fn joinable(f: fn()) -> (task::task, comm::port<bool>) {\n-    resource notify(data: (comm::chan<bool>,\n-                           @mut bool)) {\n-        let (c, v) = data;\n-        #error[\"notify: task=%d v=%x unwinding=%b b=%b\",\n+    class notify {\n+        let ch: comm::chan<bool>; let v: @mut bool;\n+        new(ch: comm::chan<bool>, v: @mut bool) { self.ch = ch; self.v = v; }\n+        drop {\n+            #error[\"notify: task=%d v=%x unwinding=%b b=%b\",\n                task::get_task(),\n-               ptr::addr_of(*v) as uint,\n-               task::currently_unwinding(),\n-               *v];\n-        comm::send(c, *v);\n+               ptr::addr_of(*(self.v)) as uint,\n+               task::failing(),\n+               *(self.v)];\n+            comm::send(self.ch, *(self.v));\n+        }\n     }\n     fn wrapper(pair: (comm::chan<bool>, fn())) {\n         let (c, f) = pair;\n         let b = @mut false;\n         #error[\"wrapper: task=%d allocated v=%x\",\n                task::get_task(),\n                ptr::addr_of(*b) as uint];\n-        let _r = notify((c, b));\n+        let _r = notify(c, b);\n         f();\n         *b = true;\n     }"}, {"sha": "84b6eb896538e52b6c3fc0187bdc554e2b663df4", "filename": "src/test/run-pass/type-param-constraints.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftype-param-constraints.rs?ref=10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6", "patch": "@@ -2,7 +2,11 @@ fn p_foo<T>(pinned: T) { }\n fn s_foo<T: copy>(shared: T) { }\n fn u_foo<T: send>(unique: T) { }\n \n-resource r(i: int) { }\n+class r {\n+  let i: int;\n+  new(i:int) { self.i = i; }\n+  drop {}\n+}\n \n fn main() {\n     p_foo(r(10));"}, {"sha": "1bde7b3e60eb50123b6d83c2601fcf206375f9b0", "filename": "src/test/run-pass/unique-pinned-nocopy-2.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funique-pinned-nocopy-2.rs?ref=10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6", "patch": "@@ -1,5 +1,7 @@\n-resource r(i: @mut int) {\n-    *i = *i + 1;\n+class r {\n+  let i: @mut int;\n+  new(i: @mut int) { self.i = i; }\n+  drop { *(self.i) = *(self.i) + 1; }\n }\n \n fn main() {"}, {"sha": "7e09b5cca99d591285ec39fa75eaf89db9c4bca1", "filename": "src/test/run-pass/unwind-resource.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6/src%2Ftest%2Frun-pass%2Funwind-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource.rs?ref=10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6", "patch": "@@ -3,12 +3,18 @@ use std;\n import task;\n import comm;\n \n-resource complainer(c: comm::chan<bool>) {\n-    comm::send(c, true);\n+class complainer {\n+  let c: comm::chan<bool>;\n+  new(c: comm::chan<bool>) {\n+    #error(\"Hello!\");\n+    self.c = c; }\n+  drop { #error(\"About to send!\");\n+    comm::send(self.c, true);\n+    #error(\"Sent!\"); }\n }\n \n fn f(c: comm::chan<bool>) {\n-    let c <- complainer(c);\n+    let _c <- complainer(c);\n     fail;\n }\n \n@@ -18,5 +24,6 @@ fn main() {\n     let builder = task::builder();\n     task::unsupervise(builder);\n     task::run(builder) {|| f(c); }\n+    #error(\"hiiiiiiiii\");\n     assert comm::recv(p);\n }\n\\ No newline at end of file"}, {"sha": "20120cd6ddd76febadeceda143d6365c0b4b490e", "filename": "src/test/run-pass/unwind-resource2.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6/src%2Ftest%2Frun-pass%2Funwind-resource2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funwind-resource2.rs?ref=10c141a2329ff0a5c0b6ec08f8edbf2fb26f43e6", "patch": "@@ -3,7 +3,10 @@ use std;\n import task;\n import comm;\n \n-resource complainer(c: @int) {\n+class complainer {\n+  let c: @int;\n+  new(c: @int) { self.c = c; }\n+  drop {}\n }\n \n fn f() {"}]}