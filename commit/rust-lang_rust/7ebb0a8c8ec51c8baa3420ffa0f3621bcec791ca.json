{"sha": "7ebb0a8c8ec51c8baa3420ffa0f3621bcec791ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlYmIwYThjOGVjNTFjOGJhYTM0MjBmZmEwZjM2MjFiY2VjNzkxY2E=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-31T01:10:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-31T01:10:41Z"}, "message": "Rollup merge of #57106 - matthiaskrgr:trim_must_use, r=sfackler\n\nMark str::trim.* functions as #[must_use].\n\nThe functions return a reference to a new object and do not modify in-place\nas the following code shows:\n````\nlet s = String::from(\"   hello   \");\ns.trim();\nassert_eq!(s, \"   hello   \");\n````\n\nThe new reference should be bound to a variable as now indicated by #[must_use].", "tree": {"sha": "006c6c1a0f201f2971be9ee31c8033bf7e6d02ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/006c6c1a0f201f2971be9ee31c8033bf7e6d02ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ebb0a8c8ec51c8baa3420ffa0f3621bcec791ca", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcUksRCRBK7hj4Ov3rIwAAdHIIAF3FSYoTbGu6wcmQHnsk7QBk\n4UCvEJFkIsYIcvVxYfnTLvpVUR8oySCbuVbcDT8iaLVX3VOdWprDHHLKqRkE8a7j\ntDLBiRDCtPrnobK3Wz2XCibWxia0Zid760/Fy/kwUCFRydIJEbw1O8HB2nvMeHE7\nPMZ2gU+jiMnOTF3XdqZSroTn3BluShGos2ezFbKQweimaXQuYR7gOPk11UFImJaZ\nynYVkjBFcWp//w0xdh+EpzAiF6dcO8MnUkHwPh+5X/zkkyYIIRyk06hVBkvSTJcg\nbjc0bpgT8lJ5ZeQq6/fycGosrDMYNBH/kQMxs//dhRnC7zbeoazhja+qBn5PAsE=\n=YLG7\n-----END PGP SIGNATURE-----\n", "payload": "tree 006c6c1a0f201f2971be9ee31c8033bf7e6d02ba\nparent ab844daadb8c513488c9dc349120a58c4a71b27b\nparent 74e9057905c3c24303245a4a2c5671d80a9503b6\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1548897041 +0100\ncommitter GitHub <noreply@github.com> 1548897041 +0100\n\nRollup merge of #57106 - matthiaskrgr:trim_must_use, r=sfackler\n\nMark str::trim.* functions as #[must_use].\n\nThe functions return a reference to a new object and do not modify in-place\nas the following code shows:\n````\nlet s = String::from(\"   hello   \");\ns.trim();\nassert_eq!(s, \"   hello   \");\n````\n\nThe new reference should be bound to a variable as now indicated by #[must_use].\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ebb0a8c8ec51c8baa3420ffa0f3621bcec791ca", "html_url": "https://github.com/rust-lang/rust/commit/7ebb0a8c8ec51c8baa3420ffa0f3621bcec791ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ebb0a8c8ec51c8baa3420ffa0f3621bcec791ca/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab844daadb8c513488c9dc349120a58c4a71b27b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab844daadb8c513488c9dc349120a58c4a71b27b", "html_url": "https://github.com/rust-lang/rust/commit/ab844daadb8c513488c9dc349120a58c4a71b27b"}, {"sha": "74e9057905c3c24303245a4a2c5671d80a9503b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/74e9057905c3c24303245a4a2c5671d80a9503b6", "html_url": "https://github.com/rust-lang/rust/commit/74e9057905c3c24303245a4a2c5671d80a9503b6"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "80f324b805725ee89b75c4b1bfcf527636d9eed3", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/7ebb0a8c8ec51c8baa3420ffa0f3621bcec791ca/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ebb0a8c8ec51c8baa3420ffa0f3621bcec791ca/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=7ebb0a8c8ec51c8baa3420ffa0f3621bcec791ca", "patch": "@@ -3489,6 +3489,8 @@ impl str {\n     ///\n     /// assert_eq!(\"Hello\\tworld\", s.trim());\n     /// ```\n+    #[must_use = \"this returns the trimmed string as a slice, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim(&self) -> &str {\n         self.trim_matches(|c: char| c.is_whitespace())\n@@ -3524,6 +3526,8 @@ impl str {\n     /// let s = \"  \u05e2\u05d1\u05e8\u05d9\u05ea  \";\n     /// assert!(Some('\u05e2') == s.trim_start().chars().next());\n     /// ```\n+    #[must_use = \"this returns the trimmed string as a new slice, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"trim_direction\", since = \"1.30.0\")]\n     pub fn trim_start(&self) -> &str {\n         self.trim_start_matches(|c: char| c.is_whitespace())\n@@ -3559,6 +3563,8 @@ impl str {\n     /// let s = \"  \u05e2\u05d1\u05e8\u05d9\u05ea  \";\n     /// assert!(Some('\u05ea') == s.trim_end().chars().rev().next());\n     /// ```\n+    #[must_use = \"this returns the trimmed string as a new slice, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"trim_direction\", since = \"1.30.0\")]\n     pub fn trim_end(&self) -> &str {\n         self.trim_end_matches(|c: char| c.is_whitespace())\n@@ -3661,6 +3667,8 @@ impl str {\n     /// ```\n     /// assert_eq!(\"1foo1barXX\".trim_matches(|c| c == '1' || c == 'X'), \"foo1bar\");\n     /// ```\n+    #[must_use = \"this returns the trimmed string as a new slice, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n         where P::Searcher: DoubleEndedSearcher<'a>\n@@ -3706,6 +3714,8 @@ impl str {\n     /// let x: &[_] = &['1', '2'];\n     /// assert_eq!(\"12foo1bar12\".trim_start_matches(x), \"foo1bar12\");\n     /// ```\n+    #[must_use = \"this returns the trimmed string as a new slice, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"trim_direction\", since = \"1.30.0\")]\n     pub fn trim_start_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str {\n         let mut i = self.len();\n@@ -3749,6 +3759,8 @@ impl str {\n     /// ```\n     /// assert_eq!(\"1fooX\".trim_end_matches(|c| c == '1' || c == 'X'), \"1foo\");\n     /// ```\n+    #[must_use = \"this returns the trimmed string as a new slice, \\\n+                  without modifying the original\"]\n     #[stable(feature = \"trim_direction\", since = \"1.30.0\")]\n     pub fn trim_end_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n         where P::Searcher: ReverseSearcher<'a>"}]}