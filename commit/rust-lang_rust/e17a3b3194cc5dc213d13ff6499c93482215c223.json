{"sha": "e17a3b3194cc5dc213d13ff6499c93482215c223", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxN2EzYjMxOTRjYzVkYzIxM2QxM2ZmNjQ5OWM5MzQ4MjIxNWMyMjM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-19T04:10:05Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-19T04:20:14Z"}, "message": "cargo: Fix copies", "tree": {"sha": "769fb518ce7c6952b2b7428ffe06f0679abe3f95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/769fb518ce7c6952b2b7428ffe06f0679abe3f95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e17a3b3194cc5dc213d13ff6499c93482215c223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e17a3b3194cc5dc213d13ff6499c93482215c223", "html_url": "https://github.com/rust-lang/rust/commit/e17a3b3194cc5dc213d13ff6499c93482215c223", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e17a3b3194cc5dc213d13ff6499c93482215c223/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2906f2de31d3a4709a2e028c5cefe3274df1edd2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2906f2de31d3a4709a2e028c5cefe3274df1edd2", "html_url": "https://github.com/rust-lang/rust/commit/2906f2de31d3a4709a2e028c5cefe3274df1edd2"}], "stats": {"total": 66, "additions": 34, "deletions": 32}, "files": [{"sha": "d05a2c2f2b1c4d1a0745a6a9867eb4ace26d8259", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 34, "deletions": 32, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/e17a3b3194cc5dc213d13ff6499c93482215c223/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e17a3b3194cc5dc213d13ff6499c93482215c223/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=e17a3b3194cc5dc213d13ff6499c93482215c223", "patch": "@@ -572,7 +572,7 @@ fn load_one_source_package(src: source, p: map::HashMap<~str, json::Json>) {\n     log(debug, ~\"  loaded package: \" + src.name + ~\"/\" + name);\n }\n \n-fn load_source_info(c: cargo, src: source) {\n+fn load_source_info(c: &cargo, src: source) {\n     let dir = c.sourcedir.push(src.name);\n     let srcfile = dir.push(\"source.json\");\n     if !os::path_exists(&srcfile) { return; }\n@@ -593,7 +593,7 @@ fn load_source_info(c: cargo, src: source) {\n         }\n     };\n }\n-fn load_source_packages(c: cargo, src: source) {\n+fn load_source_packages(c: &cargo, src: source) {\n     log(debug, ~\"loading source: \" + src.name);\n     let dir = c.sourcedir.push(src.name);\n     let pkgfile = dir.push(\"packages.json\");\n@@ -697,7 +697,7 @@ fn configure(opts: options) -> cargo {\n \n     for sources.each_key |k| {\n         let mut s = sources.get(k);\n-        load_source_packages(c, s);\n+        load_source_packages(&c, s);\n         sources.insert(k, s);\n     }\n \n@@ -712,7 +712,7 @@ fn configure(opts: options) -> cargo {\n     c\n }\n \n-fn for_each_package(c: cargo, b: fn(source, package)) {\n+fn for_each_package(c: &cargo, b: fn(source, package)) {\n     for c.sources.each_value |v| {\n         for v.packages.each |p| {\n             b(v, p);\n@@ -746,7 +746,7 @@ fn run_in_buildpath(what: &str, path: &Path, subdir: &Path, cf: &Path,\n     Some(buildpath)\n }\n \n-fn test_one_crate(_c: cargo, path: &Path, cf: &Path) {\n+fn test_one_crate(_c: &cargo, path: &Path, cf: &Path) {\n     let buildpath = match run_in_buildpath(~\"testing\", path,\n                                            &Path(\"test\"),\n                                            cf,\n@@ -757,7 +757,7 @@ fn test_one_crate(_c: cargo, path: &Path, cf: &Path) {\n   run_programs(&buildpath);\n }\n \n-fn install_one_crate(c: cargo, path: &Path, cf: &Path) {\n+fn install_one_crate(c: &cargo, path: &Path, cf: &Path) {\n     let buildpath = match run_in_buildpath(~\"installing\", path,\n                                            &Path(\"build\"),\n                                            cf, ~[]) {\n@@ -798,7 +798,7 @@ fn rustc_sysroot() -> ~str {\n     }\n }\n \n-fn install_source(c: cargo, path: &Path) {\n+fn install_source(c: &cargo, path: &Path) {\n     debug!(\"source: %s\", path.to_str());\n     os::change_dir(path);\n \n@@ -837,7 +837,7 @@ fn install_source(c: cargo, path: &Path) {\n     }\n }\n \n-fn install_git(c: cargo, wd: &Path, url: ~str, reference: Option<~str>) {\n+fn install_git(c: &cargo, wd: &Path, url: ~str, reference: Option<~str>) {\n     run::program_output(~\"git\", ~[~\"clone\", url, wd.to_str()]);\n     if option::is_some(reference) {\n         let r = option::get(reference);\n@@ -848,7 +848,7 @@ fn install_git(c: cargo, wd: &Path, url: ~str, reference: Option<~str>) {\n     install_source(c, wd);\n }\n \n-fn install_curl(c: cargo, wd: &Path, url: ~str) {\n+fn install_curl(c: &cargo, wd: &Path, url: ~str) {\n     let tarpath = wd.push(\"pkg.tar\");\n     let p = run::program_output(~\"curl\", ~[~\"-f\", ~\"-s\", ~\"-o\",\n                                          tarpath.to_str(), url]);\n@@ -861,14 +861,14 @@ fn install_curl(c: cargo, wd: &Path, url: ~str) {\n     install_source(c, wd);\n }\n \n-fn install_file(c: cargo, wd: &Path, path: &Path) {\n+fn install_file(c: &cargo, wd: &Path, path: &Path) {\n     run::program_output(~\"tar\", ~[~\"-x\", ~\"--strip-components=1\",\n                                   ~\"-C\", wd.to_str(),\n                                   ~\"-f\", path.to_str()]);\n     install_source(c, wd);\n }\n \n-fn install_package(c: cargo, src: ~str, wd: &Path, pkg: package) {\n+fn install_package(c: &cargo, src: ~str, wd: &Path, pkg: package) {\n     let url = copy pkg.url;\n     let method = match pkg.method {\n         ~\"git\" => ~\"git\",\n@@ -886,7 +886,7 @@ fn install_package(c: cargo, src: ~str, wd: &Path, pkg: package) {\n     }\n }\n \n-fn cargo_suggestion(c: cargo, fallback: fn())\n+fn cargo_suggestion(c: &cargo, fallback: fn())\n {\n     if c.sources.size() == 0u {\n         error(~\"no sources defined - you may wish to run \" +\n@@ -896,7 +896,7 @@ fn cargo_suggestion(c: cargo, fallback: fn())\n     fallback();\n }\n \n-fn install_uuid(c: cargo, wd: &Path, uuid: ~str) {\n+fn install_uuid(c: &cargo, wd: &Path, uuid: ~str) {\n     let mut ps = ~[];\n     for_each_package(c, |s, p| {\n         if p.uuid == uuid {\n@@ -920,7 +920,7 @@ fn install_uuid(c: cargo, wd: &Path, uuid: ~str) {\n     }\n }\n \n-fn install_named(c: cargo, wd: &Path, name: ~str) {\n+fn install_named(c: &cargo, wd: &Path, name: ~str) {\n     let mut ps = ~[];\n     for_each_package(c, |s, p| {\n         if p.name == name {\n@@ -944,7 +944,7 @@ fn install_named(c: cargo, wd: &Path, name: ~str) {\n     }\n }\n \n-fn install_uuid_specific(c: cargo, wd: &Path, src: ~str, uuid: ~str) {\n+fn install_uuid_specific(c: &cargo, wd: &Path, src: ~str, uuid: ~str) {\n     match c.sources.find(src) {\n         Some(s) => {\n             for s.packages.each |p| {\n@@ -959,7 +959,7 @@ fn install_uuid_specific(c: cargo, wd: &Path, src: ~str, uuid: ~str) {\n     error(~\"can't find package: \" + src + ~\"/\" + uuid);\n }\n \n-fn install_named_specific(c: cargo, wd: &Path, src: ~str, name: ~str) {\n+fn install_named_specific(c: &cargo, wd: &Path, src: ~str, name: ~str) {\n     match c.sources.find(src) {\n         Some(s) => {\n             for s.packages.each |p| {\n@@ -974,7 +974,7 @@ fn install_named_specific(c: cargo, wd: &Path, src: ~str, name: ~str) {\n     error(~\"can't find package: \" + src + ~\"/\" + name);\n }\n \n-fn cmd_uninstall(c: cargo) {\n+fn cmd_uninstall(c: &cargo) {\n     if vec::len(c.opts.free) < 3u {\n         cmd_usage();\n         return;\n@@ -1026,7 +1026,7 @@ fn cmd_uninstall(c: cargo) {\n     }\n }\n \n-fn install_query(c: cargo, wd: &Path, target: ~str) {\n+fn install_query(c: &cargo, wd: &Path, target: ~str) {\n     match c.dep_cache.find(target) {\n         Some(inst) => {\n             if inst {\n@@ -1086,15 +1086,15 @@ fn install_query(c: cargo, wd: &Path, target: ~str) {\n     }\n }\n \n-fn get_temp_workdir(c: cargo) -> Path {\n+fn get_temp_workdir(c: &cargo) -> Path {\n     match tempfile::mkdtemp(&c.workdir, \"cargo\") {\n       Some(wd) => wd,\n       None => fail fmt!(\"needed temp dir: %s\",\n                         c.workdir.to_str())\n     }\n }\n \n-fn cmd_install(c: cargo) unsafe {\n+fn cmd_install(c: &cargo) unsafe {\n     let wd = get_temp_workdir(c);\n \n     if vec::len(c.opts.free) == 2u {\n@@ -1118,15 +1118,15 @@ fn cmd_install(c: cargo) unsafe {\n     install_query(c, &wd, query);\n }\n \n-fn sync(c: cargo) {\n+fn sync(c: &cargo) {\n     for c.sources.each_key |k| {\n         let mut s = c.sources.get(k);\n         sync_one(c, s);\n         c.sources.insert(k, s);\n     }\n }\n \n-fn sync_one_file(c: cargo, dir: &Path, src: source) -> bool {\n+fn sync_one_file(c: &cargo, dir: &Path, src: source) -> bool {\n     let name = src.name;\n     let srcfile = dir.push(\"source.json.new\");\n     let destsrcfile = dir.push(\"source.json\");\n@@ -1204,7 +1204,7 @@ fn sync_one_file(c: cargo, dir: &Path, src: source) -> bool {\n     return true;\n }\n \n-fn sync_one_git(c: cargo, dir: &Path, src: source) -> bool {\n+fn sync_one_git(c: &cargo, dir: &Path, src: source) -> bool {\n     let name = src.name;\n     let srcfile = dir.push(\"source.json\");\n     let pkgfile = dir.push(\"packages.json\");\n@@ -1307,7 +1307,7 @@ fn sync_one_git(c: cargo, dir: &Path, src: source) -> bool {\n     return true;\n }\n \n-fn sync_one_curl(c: cargo, dir: &Path, src: source) -> bool {\n+fn sync_one_curl(c: &cargo, dir: &Path, src: source) -> bool {\n     let name = src.name;\n     let srcfile = dir.push(\"source.json.new\");\n     let destsrcfile = dir.push(\"source.json\");\n@@ -1423,7 +1423,7 @@ fn sync_one_curl(c: cargo, dir: &Path, src: source) -> bool {\n     return true;\n }\n \n-fn sync_one(c: cargo, src: source) {\n+fn sync_one(c: &cargo, src: source) {\n     let name = src.name;\n     let dir = c.sourcedir.push(name);\n \n@@ -1443,7 +1443,7 @@ fn sync_one(c: cargo, src: source) {\n     }\n }\n \n-fn cmd_init(c: cargo) {\n+fn cmd_init(c: &cargo) {\n     let srcurl = ~\"http://www.rust-lang.org/cargo/sources.json\";\n     let sigurl = ~\"http://www.rust-lang.org/cargo/sources.json.sig\";\n \n@@ -1514,7 +1514,7 @@ fn print_source(s: source) {\n     }));\n }\n \n-fn cmd_list(c: cargo) {\n+fn cmd_list(c: &cargo) {\n     sync(c);\n \n     if vec::len(c.opts.free) >= 3u {\n@@ -1539,7 +1539,7 @@ fn cmd_list(c: cargo) {\n     }\n }\n \n-fn cmd_search(c: cargo) {\n+fn cmd_search(c: &cargo) {\n     if vec::len(c.opts.free) < 3u {\n         cmd_usage();\n         return;\n@@ -1572,7 +1572,7 @@ fn install_to_dir(srcfile: &Path, destdir: &Path) {\n     }\n }\n \n-fn dump_cache(c: cargo) {\n+fn dump_cache(c: &cargo) {\n     need_dir(&c.root);\n \n     let out = c.root.push(\"cache.json\");\n@@ -1582,7 +1582,7 @@ fn dump_cache(c: cargo) {\n         copy_warn(&out, &c.root.push(\"cache.json.old\"));\n     }\n }\n-fn dump_sources(c: cargo) {\n+fn dump_sources(c: &cargo) {\n     if c.sources.size() < 1u {\n         return;\n     }\n@@ -1638,7 +1638,7 @@ fn copy_warn(srcfile: &Path, destfile: &Path) {\n     }\n }\n \n-fn cmd_sources(c: cargo) {\n+fn cmd_sources(c: &cargo) {\n     if vec::len(c.opts.free) < 3u {\n         for c.sources.each_value |v| {\n             info(fmt!(\"%s (%s) via %s\",\n@@ -1923,12 +1923,14 @@ fn main(argv: ~[~str]) {\n     let first_time = os::path_exists(&home.push(\"sources.json\"));\n \n     if !first_time && o.free[1] != ~\"init\" {\n-        cmd_init(c);\n+        cmd_init(&c);\n \n         // FIXME (#2662): shouldn't need to reconfigure\n         c = configure(o);\n     }\n \n+    let c = &move c;\n+\n     match o.free[1] {\n         ~\"init\" => cmd_init(c),\n         ~\"install\" => cmd_install(c),"}]}