{"sha": "f39e64d56ab4929be5985d4a64020d2223706d96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzOWU2NGQ1NmFiNDkyOWJlNTk4NWQ0YTY0MDIwZDIyMjM3MDZkOTY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-04T22:54:10Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-08T23:33:40Z"}, "message": "rt: Change the scheme used for terminating the kernel\n\nInstead of joining on the scheduler threads, instead keep a count of active\nschedulers. When there are no more schedulers raise a signal for the main\nthread to continue.\n\nThis will be required once schedulers can be added and removed from the\nrunning kernel.", "tree": {"sha": "0c3c810c87372216986d47eadd9476a0d9150117", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c3c810c87372216986d47eadd9476a0d9150117"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f39e64d56ab4929be5985d4a64020d2223706d96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f39e64d56ab4929be5985d4a64020d2223706d96", "html_url": "https://github.com/rust-lang/rust/commit/f39e64d56ab4929be5985d4a64020d2223706d96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f39e64d56ab4929be5985d4a64020d2223706d96/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eafe5d772131c644a40ae1013a6016dcba037c4", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eafe5d772131c644a40ae1013a6016dcba037c4", "html_url": "https://github.com/rust-lang/rust/commit/6eafe5d772131c644a40ae1013a6016dcba037c4"}], "stats": {"total": 69, "additions": 58, "deletions": 11}, "files": [{"sha": "004e42a81382876bf3432f1e74946a6299f8054f", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 25, "deletions": 5, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f39e64d56ab4929be5985d4a64020d2223706d96/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f39e64d56ab4929be5985d4a64020d2223706d96/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=f39e64d56ab4929be5985d4a64020d2223706d96", "patch": "@@ -18,6 +18,11 @@ rust_kernel::rust_kernel(rust_srv *srv, size_t num_threads) :\n {\n     sched = new (this, \"rust_scheduler\")\n         rust_scheduler(this, srv, num_threads);\n+    live_schedulers = 1;\n+}\n+\n+rust_kernel::~rust_kernel() {\n+    delete sched;\n }\n \n void\n@@ -41,10 +46,6 @@ rust_kernel::fatal(char const *fmt, ...) {\n     va_end(args);\n }\n \n-rust_kernel::~rust_kernel() {\n-    delete sched;\n-}\n-\n void *\n rust_kernel::malloc(size_t size, const char *tag) {\n     return _region.malloc(size, tag);\n@@ -61,15 +62,34 @@ void rust_kernel::free(void *mem) {\n \n int rust_kernel::start_schedulers()\n {\n+    I(this, !sched_lock.lock_held_by_current_thread());\n     sched->start_task_threads();\n-    return rval;\n+    {\n+        scoped_lock with(sched_lock);\n+        // Schedulers could possibly have already exited\n+        if (live_schedulers != 0) {\n+            sched_lock.wait();\n+        }\n+        return rval;\n+    }\n }\n \n rust_scheduler *\n rust_kernel::get_default_scheduler() {\n     return sched;\n }\n \n+void\n+rust_kernel::release_scheduler() {\n+    I(this, !sched_lock.lock_held_by_current_thread());\n+    scoped_lock with(sched_lock);\n+    --live_schedulers;\n+    if (live_schedulers == 0) {\n+        // We're all done. Tell the main thread to continue\n+        sched_lock.signal();\n+    }\n+}\n+\n void\n rust_kernel::fail() {\n     // FIXME: On windows we're getting \"Application has requested the"}, {"sha": "9a59a35e9088c654f41678e966afc51e37dac847", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f39e64d56ab4929be5985d4a64020d2223706d96/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/f39e64d56ab4929be5985d4a64020d2223706d96/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=f39e64d56ab4929be5985d4a64020d2223706d96", "patch": "@@ -35,6 +35,13 @@ class rust_kernel {\n     lock_and_signal rval_lock;\n     int rval;\n \n+    // Protects live_schedulers\n+    lock_and_signal sched_lock;\n+    // Tracks the number of schedulers currently running.\n+    // When this hits 0 we will signal the sched_lock and the\n+    // kernel will terminate.\n+    uintptr_t live_schedulers;\n+\n public:\n \n     struct rust_env *env;\n@@ -53,6 +60,8 @@ class rust_kernel {\n \n     int start_schedulers();\n     rust_scheduler* get_default_scheduler();\n+    // Called by a scheduler to indicate that it is terminating\n+    void release_scheduler();\n \n #ifdef __WIN32__\n     void win32_require(LPCTSTR fn, BOOL ok);"}, {"sha": "904eb5cafcb9c2af4a7c97666935ed1fd32ee42b", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f39e64d56ab4929be5985d4a64020d2223706d96/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f39e64d56ab4929be5985d4a64020d2223706d96/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=f39e64d56ab4929be5985d4a64020d2223706d96", "patch": "@@ -7,6 +7,7 @@ rust_scheduler::rust_scheduler(rust_kernel *kernel,\n     kernel(kernel),\n     srv(srv),\n     env(srv->env),\n+    live_threads(num_threads),\n     num_threads(num_threads)\n {\n     isaac_init(kernel, &rctx);\n@@ -59,11 +60,6 @@ rust_scheduler::start_task_threads()\n         rust_task_thread *thread = threads[i];\n         thread->start();\n     }\n-\n-    for(size_t i = 0; i < num_threads; ++i) {\n-        rust_task_thread *thread = threads[i];\n-        thread->join();\n-    }\n }\n \n void\n@@ -102,3 +98,16 @@ size_t\n rust_scheduler::number_of_threads() {\n     return num_threads;\n }\n+\n+void\n+rust_scheduler::release_task_thread() {\n+    I(this, !lock.lock_held_by_current_thread());\n+    uintptr_t new_live_threads;\n+    {\n+\tscoped_lock with(lock);\n+\tnew_live_threads = --live_threads;\n+    }\n+    if (new_live_threads == 0) {\n+\tkernel->release_scheduler();\n+    }\n+}"}, {"sha": "16c1e04747d9c7b039c81a4d1d7db56d0ebb631f", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f39e64d56ab4929be5985d4a64020d2223706d96/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/f39e64d56ab4929be5985d4a64020d2223706d96/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=f39e64d56ab4929be5985d4a64020d2223706d96", "patch": "@@ -10,9 +10,13 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n     rust_srv *srv;\n     rust_env *env;\n private:\n+    // Protects the random number context and live_threads\n     lock_and_signal lock;\n-    array_list<rust_task_thread *> threads;\n+    // When this hits zero we'll tell the kernel to release us\n+    uintptr_t live_threads;\n     randctx rctx;\n+\n+    array_list<rust_task_thread *> threads;\n     const size_t num_threads;\n \n     void create_task_threads();\n@@ -31,8 +35,12 @@ class rust_scheduler : public kernel_owned<rust_scheduler> {\n \t\t\t     const char *name,\n \t\t\t     size_t init_stack_sz);\n     rust_task_id create_task(rust_task *spawner, const char *name);\n+\n     void exit();\n     size_t number_of_threads();\n+    // Called by each thread when it terminates. When all threads\n+    // terminate the scheduler does as well.\n+    void release_task_thread();\n };\n \n #endif /* RUST_SCHEDULER_H */"}, {"sha": "6251d5c24c11d6e1f77bd3e2b5d55b15e03ed398", "filename": "src/rt/rust_task_thread.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f39e64d56ab4929be5985d4a64020d2223706d96/src%2Frt%2Frust_task_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f39e64d56ab4929be5985d4a64020d2223706d96/src%2Frt%2Frust_task_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.cpp?ref=f39e64d56ab4929be5985d4a64020d2223706d96", "patch": "@@ -296,6 +296,7 @@ rust_task_thread::create_task(rust_task *spawner, const char *name,\n \n void rust_task_thread::run() {\n     this->start_main_loop();\n+    sched->release_task_thread();\n }\n \n #ifndef _WIN32"}]}