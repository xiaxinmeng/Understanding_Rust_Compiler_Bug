{"sha": "8d4b1d1cf38a51b92b91e020ecb22a5d442297be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNGIxZDFjZjM4YTUxYjkyYjkxZTAyMGVjYjIyYTVkNDQyMjk3YmU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-03-08T18:40:13Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-03-24T21:41:09Z"}, "message": "Introduce name resolution fallback for primitive types", "tree": {"sha": "05500947573c3adf63b5f051f3e7aa90817ab098", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05500947573c3adf63b5f051f3e7aa90817ab098"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d4b1d1cf38a51b92b91e020ecb22a5d442297be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4b1d1cf38a51b92b91e020ecb22a5d442297be", "html_url": "https://github.com/rust-lang/rust/commit/8d4b1d1cf38a51b92b91e020ecb22a5d442297be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d4b1d1cf38a51b92b91e020ecb22a5d442297be/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcfb8d72e99425686376298fd793715f35b5d512", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcfb8d72e99425686376298fd793715f35b5d512", "html_url": "https://github.com/rust-lang/rust/commit/dcfb8d72e99425686376298fd793715f35b5d512"}], "stats": {"total": 50, "additions": 38, "deletions": 12}, "files": [{"sha": "8efac52158ecedb73c388b16958a98926c123cb8", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 37, "deletions": 12, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8d4b1d1cf38a51b92b91e020ecb22a5d442297be/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4b1d1cf38a51b92b91e020ecb22a5d442297be/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=8d4b1d1cf38a51b92b91e020ecb22a5d442297be", "patch": "@@ -2654,15 +2654,27 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n         // Try to find a path to an item in a module.\n         let last_ident = segments.last().unwrap().identifier;\n-        if segments.len() <= 1 {\n-            let unqualified_def = self.resolve_identifier(last_ident, namespace, true);\n+        if segments.len() == 1 {\n+            // In `a(::assoc_item)*` `a` cannot be a module. If `a` does resolve to a module we\n+            // don't report an error right away, but try to fallback to a primitive type.\n+            // So, we are still able to successfully resolve something like\n+            //\n+            // use std::u8; // bring module u8 in scope\n+            // fn f() -> u8 { // OK, resolves to primitive u8, not to std::u8\n+            //     u8::MAX // OK, resolves to associated constant <u8>::MAX,\n+            //             // not to non-existent std::u8::MAX\n+            // }\n+            //\n+            // Such behavior is required for backward compatibility.\n+            // The same fallback is used when `a` resolves to nothing.\n+            let unqualified_def = self.resolve_identifier_with_fallback(last_ident, namespace, true);\n             return unqualified_def.and_then(|def| self.adjust_local_def(def, span))\n                                   .map(|def| {\n                                       PathResolution::new(def, path_depth)\n                                   });\n         }\n \n-        let unqualified_def = self.resolve_identifier(last_ident, namespace, false);\n+        let unqualified_def = self.resolve_identifier_with_fallback(last_ident, namespace, false);\n         let def = self.resolve_module_relative_path(span, segments, namespace);\n         match (def, unqualified_def) {\n             (Some(d), Some(ref ud)) if d == ud.def => {\n@@ -2678,6 +2690,28 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         def.map(mk_res)\n     }\n \n+    // Resolve a single identifier with fallback to primitive types\n+    fn resolve_identifier_with_fallback(&mut self,\n+                          identifier: hir::Ident,\n+                          namespace: Namespace,\n+                          check_ribs: bool,\n+                          record_used: bool)\n+                          -> Option<LocalDef> {\n+        let def = self.resolve_identifier(identifier, namespace, check_ribs, record_used);\n+        match def {\n+            None | Some(LocalDef{def: Def::Mod(..), ..}) => {\n+                if let Some(&prim_ty) = self.primitive_type_table\n+                                            .primitive_types\n+                                            .get(&identifier.unhygienic_name) {\n+                    Some(LocalDef::from_def(Def::PrimTy(prim_ty)))\n+                } else {\n+                    def\n+                }\n+            }\n+            _ => def\n+        }\n+    }\n+\n     // Resolve a single identifier\n     fn resolve_identifier(&mut self,\n                           identifier: hir::Ident,\n@@ -2688,15 +2722,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             return Some(LocalDef::from_def(Def::Err));\n         }\n \n-        // First, check to see whether the name is a primitive type.\n-        if namespace == TypeNS {\n-            if let Some(&prim_ty) = self.primitive_type_table\n-                                        .primitive_types\n-                                        .get(&identifier.unhygienic_name) {\n-                return Some(LocalDef::from_def(Def::PrimTy(prim_ty)));\n-            }\n-        }\n-\n         self.resolve_identifier_in_local_ribs(identifier, namespace, record_used)\n     }\n "}, {"sha": "7dedb9593e13c4c55fc1b66a46da57ef4bd6dbf9", "filename": "src/test/compile-fail/issue-20427.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d4b1d1cf38a51b92b91e020ecb22a5d442297be/src%2Ftest%2Fcompile-fail%2Fissue-20427.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4b1d1cf38a51b92b91e020ecb22a5d442297be/src%2Ftest%2Fcompile-fail%2Fissue-20427.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20427.rs?ref=8d4b1d1cf38a51b92b91e020ecb22a5d442297be", "patch": "@@ -17,6 +17,7 @@ fn u8(f32: f32) {}\n fn f<f64>(f64: f64) {}\n //~^ ERROR user-defined types or type parameters cannot shadow the primitive types\n type u16 = u16; //~ ERROR user-defined types or type parameters cannot shadow the primitive types\n+//~^ ERROR unsupported cyclic reference between types/traits detected\n enum u32 {} //~ ERROR user-defined types or type parameters cannot shadow the primitive types\n struct u64; //~ ERROR user-defined types or type parameters cannot shadow the primitive types\n trait bool {} //~ ERROR user-defined types or type parameters cannot shadow the primitive types"}]}