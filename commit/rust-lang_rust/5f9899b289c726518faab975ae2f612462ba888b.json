{"sha": "5f9899b289c726518faab975ae2f612462ba888b", "node_id": "C_kwDOAAsO6NoAKDVmOTg5OWIyODljNzI2NTE4ZmFhYjk3NWFlMmY2MTI0NjJiYTg4OGI", "commit": {"author": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-11-06T16:46:38Z"}, "committer": {"name": "onestacked", "email": "chrisi.schrefl@gmail.com", "date": "2022-11-06T16:46:38Z"}, "message": "Made `Sip` const `Hasher`", "tree": {"sha": "0f1fa7e3d32966f51c5a80fd02467e2595f6c931", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f1fa7e3d32966f51c5a80fd02467e2595f6c931"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f9899b289c726518faab975ae2f612462ba888b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f9899b289c726518faab975ae2f612462ba888b", "html_url": "https://github.com/rust-lang/rust/commit/5f9899b289c726518faab975ae2f612462ba888b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f9899b289c726518faab975ae2f612462ba888b/comments", "author": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chriss0612", "id": 18047460, "node_id": "MDQ6VXNlcjE4MDQ3NDYw", "avatar_url": "https://avatars.githubusercontent.com/u/18047460?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chriss0612", "html_url": "https://github.com/chriss0612", "followers_url": "https://api.github.com/users/chriss0612/followers", "following_url": "https://api.github.com/users/chriss0612/following{/other_user}", "gists_url": "https://api.github.com/users/chriss0612/gists{/gist_id}", "starred_url": "https://api.github.com/users/chriss0612/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chriss0612/subscriptions", "organizations_url": "https://api.github.com/users/chriss0612/orgs", "repos_url": "https://api.github.com/users/chriss0612/repos", "events_url": "https://api.github.com/users/chriss0612/events{/privacy}", "received_events_url": "https://api.github.com/users/chriss0612/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ea4165a774df7060707c68efb2573ae23f75f1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ea4165a774df7060707c68efb2573ae23f75f1b", "html_url": "https://github.com/rust-lang/rust/commit/3ea4165a774df7060707c68efb2573ae23f75f1b"}], "stats": {"total": 49, "additions": 32, "deletions": 17}, "files": [{"sha": "b389ae4a01995c8aefd3702dcc85c1da0aaff520", "filename": "library/core/src/hash/sip.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/5f9899b289c726518faab975ae2f612462ba888b/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9899b289c726518faab975ae2f612462ba888b/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fhash%2Fsip.rs?ref=5f9899b289c726518faab975ae2f612462ba888b", "patch": "@@ -118,7 +118,7 @@ macro_rules! load_int_le {\n /// Safety: this performs unchecked indexing of `buf` at `start..start+len`, so\n /// that must be in-bounds.\n #[inline]\n-unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {\n+const unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {\n     debug_assert!(len < 8);\n     let mut i = 0; // current byte index (from LSB) in the output u64\n     let mut out = 0;\n@@ -138,7 +138,7 @@ unsafe fn u8to64_le(buf: &[u8], start: usize, len: usize) -> u64 {\n         out |= (unsafe { *buf.get_unchecked(start + i) } as u64) << (i * 8);\n         i += 1;\n     }\n-    debug_assert_eq!(i, len);\n+    debug_assert!(i == len);\n     out\n }\n \n@@ -150,8 +150,9 @@ impl SipHasher {\n         since = \"1.13.0\",\n         note = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n     #[must_use]\n-    pub fn new() -> SipHasher {\n+    pub const fn new() -> SipHasher {\n         SipHasher::new_with_keys(0, 0)\n     }\n \n@@ -162,8 +163,9 @@ impl SipHasher {\n         since = \"1.13.0\",\n         note = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n     #[must_use]\n-    pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher {\n+    pub const fn new_with_keys(key0: u64, key1: u64) -> SipHasher {\n         SipHasher(SipHasher24 { hasher: Hasher::new_with_keys(key0, key1) })\n     }\n }\n@@ -176,7 +178,8 @@ impl SipHasher13 {\n         since = \"1.13.0\",\n         note = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n-    pub fn new() -> SipHasher13 {\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+    pub const fn new() -> SipHasher13 {\n         SipHasher13::new_with_keys(0, 0)\n     }\n \n@@ -187,14 +190,15 @@ impl SipHasher13 {\n         since = \"1.13.0\",\n         note = \"use `std::collections::hash_map::DefaultHasher` instead\"\n     )]\n-    pub fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+    pub const fn new_with_keys(key0: u64, key1: u64) -> SipHasher13 {\n         SipHasher13 { hasher: Hasher::new_with_keys(key0, key1) }\n     }\n }\n \n impl<S: Sip> Hasher<S> {\n     #[inline]\n-    fn new_with_keys(key0: u64, key1: u64) -> Hasher<S> {\n+    const fn new_with_keys(key0: u64, key1: u64) -> Hasher<S> {\n         let mut state = Hasher {\n             k0: key0,\n             k1: key1,\n@@ -209,7 +213,7 @@ impl<S: Sip> Hasher<S> {\n     }\n \n     #[inline]\n-    fn reset(&mut self) {\n+    const fn reset(&mut self) {\n         self.length = 0;\n         self.state.v0 = self.k0 ^ 0x736f6d6570736575;\n         self.state.v1 = self.k1 ^ 0x646f72616e646f6d;\n@@ -220,7 +224,8 @@ impl<S: Sip> Hasher<S> {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl super::Hasher for SipHasher {\n+#[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+impl const super::Hasher for SipHasher {\n     #[inline]\n     fn write(&mut self, msg: &[u8]) {\n         self.0.hasher.write(msg)\n@@ -238,7 +243,11 @@ impl super::Hasher for SipHasher {\n }\n \n #[unstable(feature = \"hashmap_internals\", issue = \"none\")]\n-impl super::Hasher for SipHasher13 {\n+#[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+impl const super::Hasher for SipHasher13\n+where\n+    Hasher<Sip13Rounds>: ~const super::Hasher,\n+{\n     #[inline]\n     fn write(&mut self, msg: &[u8]) {\n         self.hasher.write(msg)\n@@ -255,7 +264,7 @@ impl super::Hasher for SipHasher13 {\n     }\n }\n \n-impl<S: Sip> super::Hasher for Hasher<S> {\n+impl<S: ~const Sip> const super::Hasher for Hasher<S> {\n     // Note: no integer hashing methods (`write_u*`, `write_i*`) are defined\n     // for this type. We could add them, copy the `short_write` implementation\n     // in librustc_data_structures/sip128.rs, and add `write_u*`/`write_i*`\n@@ -335,7 +344,7 @@ impl<S: Sip> super::Hasher for Hasher<S> {\n     }\n }\n \n-impl<S: Sip> Clone for Hasher<S> {\n+impl<S: Sip> const Clone for Hasher<S> {\n     #[inline]\n     fn clone(&self) -> Hasher<S> {\n         Hasher {\n@@ -359,6 +368,7 @@ impl<S: Sip> Default for Hasher<S> {\n }\n \n #[doc(hidden)]\n+#[const_trait]\n trait Sip {\n     fn c_rounds(_: &mut State);\n     fn d_rounds(_: &mut State);\n@@ -367,7 +377,7 @@ trait Sip {\n #[derive(Debug, Clone, Default)]\n struct Sip13Rounds;\n \n-impl Sip for Sip13Rounds {\n+impl const Sip for Sip13Rounds {\n     #[inline]\n     fn c_rounds(state: &mut State) {\n         compress!(state);\n@@ -384,7 +394,7 @@ impl Sip for Sip13Rounds {\n #[derive(Debug, Clone, Default)]\n struct Sip24Rounds;\n \n-impl Sip for Sip24Rounds {\n+impl const Sip for Sip24Rounds {\n     #[inline]\n     fn c_rounds(state: &mut State) {\n         compress!(state);"}, {"sha": "5dc7427bee003c5cca37685b594f13babb3cc5de", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f9899b289c726518faab975ae2f612462ba888b/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9899b289c726518faab975ae2f612462ba888b/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=5f9899b289c726518faab975ae2f612462ba888b", "patch": "@@ -112,6 +112,7 @@\n #![feature(const_float_bits_conv)]\n #![feature(const_float_classify)]\n #![feature(const_fmt_arguments_new)]\n+#![feature(const_hash)]\n #![feature(const_heap)]\n #![feature(const_convert)]\n #![feature(const_index_range_slice_index)]"}, {"sha": "1963c24b6e94deced93ba6d2549d234747eb2411", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/5f9899b289c726518faab975ae2f612462ba888b/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9899b289c726518faab975ae2f612462ba888b/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=5f9899b289c726518faab975ae2f612462ba888b", "patch": "@@ -3161,14 +3161,16 @@ impl DefaultHasher {\n     #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n     #[inline]\n     #[allow(deprecated)]\n+    #[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n     #[must_use]\n-    pub fn new() -> DefaultHasher {\n+    pub const fn new() -> DefaultHasher {\n         DefaultHasher(SipHasher13::new_with_keys(0, 0))\n     }\n }\n \n #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n-impl Default for DefaultHasher {\n+#[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+impl const Default for DefaultHasher {\n     /// Creates a new `DefaultHasher` using [`new`].\n     /// See its documentation for more.\n     ///\n@@ -3180,7 +3182,8 @@ impl Default for DefaultHasher {\n }\n \n #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n-impl Hasher for DefaultHasher {\n+#[rustc_const_unstable(feature = \"const_hash\", issue = \"none\")]\n+impl const Hasher for DefaultHasher {\n     // The underlying `SipHasher13` doesn't override the other\n     // `write_*` methods, so it's ok not to forward them here.\n "}, {"sha": "8aa0424bc4bf0a0326a5edc0c83fd63e8897da22", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5f9899b289c726518faab975ae2f612462ba888b/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f9899b289c726518faab975ae2f612462ba888b/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=5f9899b289c726518faab975ae2f612462ba888b", "patch": "@@ -314,6 +314,7 @@\n #![feature(maybe_uninit_uninit_array)]\n #![feature(const_maybe_uninit_uninit_array)]\n #![feature(const_waker)]\n+#![feature(const_hash)]\n //\n // Library features (alloc):\n #![feature(alloc_layout_extra)]"}]}