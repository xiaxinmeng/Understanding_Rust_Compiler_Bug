{"sha": "7476a39e47d4c5d8e1a349adf590ee329501a0a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0NzZhMzllNDdkNGM1ZDhlMWEzNDlhZGY1OTBlZTMyOTUwMWEwYTg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-01T07:26:23Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-01T18:24:21Z"}, "message": "stdlib: Implement some preliminary libuv bindings\n\nstd::uv is intended to be low-level, exactly mirroring the C API.\nDifficult to continue the implementation now without scheduler\nimprovements.", "tree": {"sha": "ddd0b84f6db54324978580971153296cdc34c68e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddd0b84f6db54324978580971153296cdc34c68e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7476a39e47d4c5d8e1a349adf590ee329501a0a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7476a39e47d4c5d8e1a349adf590ee329501a0a8", "html_url": "https://github.com/rust-lang/rust/commit/7476a39e47d4c5d8e1a349adf590ee329501a0a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7476a39e47d4c5d8e1a349adf590ee329501a0a8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2fd6121c081bbb244256f9c98c338d6efd85326", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2fd6121c081bbb244256f9c98c338d6efd85326", "html_url": "https://github.com/rust-lang/rust/commit/b2fd6121c081bbb244256f9c98c338d6efd85326"}], "stats": {"total": 286, "additions": 284, "deletions": 2}, "files": [{"sha": "e45430f769072f8d839963700243d577977d90e2", "filename": "mk/rt.mk", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7476a39e47d4c5d8e1a349adf590ee329501a0a8/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/7476a39e47d4c5d8e1a349adf590ee329501a0a8/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=7476a39e47d4c5d8e1a349adf590ee329501a0a8", "patch": "@@ -47,6 +47,7 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_task_list.cpp \\\n               rt/rust_port.cpp \\\n               rt/rust_upcall.cpp \\\n+              rt/rust_uv.cpp \\\n               rt/rust_log.cpp \\\n               rt/rust_timer.cpp \\\n               rt/circular_buffer.cpp \\"}, {"sha": "7c9e611c9c1e3288cc36a077f25e7cabbf59c777", "filename": "src/etc/x86.supp", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7476a39e47d4c5d8e1a349adf590ee329501a0a8/src%2Fetc%2Fx86.supp", "raw_url": "https://github.com/rust-lang/rust/raw/7476a39e47d4c5d8e1a349adf590ee329501a0a8/src%2Fetc%2Fx86.supp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fx86.supp?ref=7476a39e47d4c5d8e1a349adf590ee329501a0a8", "patch": "@@ -364,3 +364,26 @@\n    fun:_Znwj\n    fun:_ZN4llvm4UsernwEjj\n }\n+\n+{\n+   libuv-0-byte-realloc1\n+   Memcheck:Leak\n+   fun:malloc\n+   fun:realloc\n+   fun:ev_realloc_emul\n+   fun:ev_realloc\n+   fun:epoll_destroy\n+   fun:ev_loop_destroy\n+   fun:uv_loop_delete\n+}\n+\n+{\n+   libuv-0-byte-realloc2\n+   Memcheck:Leak\n+   fun:malloc\n+   fun:realloc\n+   fun:ev_realloc_emul\n+   fun:ev_realloc\n+   fun:ev_loop_destroy\n+   fun:uv_loop_delete\n+}"}, {"sha": "48c4a85fcbcdbf6fb20ad9a318e48291fc5fb864", "filename": "src/lib/ctypes.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7476a39e47d4c5d8e1a349adf590ee329501a0a8/src%2Flib%2Fctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7476a39e47d4c5d8e1a349adf590ee329501a0a8/src%2Flib%2Fctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fctypes.rs?ref=7476a39e47d4c5d8e1a349adf590ee329501a0a8", "patch": "@@ -6,6 +6,7 @@ Definitions useful for C interop\n \n type c_int = i32;\n \n+type void = int; // Not really the same as C\n type long = int;\n type unsigned = u32;\n type ulong = uint;\n@@ -23,3 +24,6 @@ type off_t = uint;\n \n type fd_t = i32;      // not actually a C type, but should be.\n type pid_t = i32;\n+\n+// enum is implementation-defined, but is 32-bits in practice\n+type enum = u32;"}, {"sha": "1f0d1b060938810b0d71be351c249556c456f9e1", "filename": "src/lib/std.rc", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7476a39e47d4c5d8e1a349adf590ee329501a0a8/src%2Flib%2Fstd.rc", "raw_url": "https://github.com/rust-lang/rust/raw/7476a39e47d4c5d8e1a349adf590ee329501a0a8/src%2Flib%2Fstd.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstd.rc?ref=7476a39e47d4c5d8e1a349adf590ee329501a0a8", "patch": "@@ -9,7 +9,7 @@\n \n export box, char, float, int, str, ptr;\n export uint, u8, u32, u64, vec, bool;\n-export comm, fs, io, net, run, sys, task;\n+export comm, fs, io, net, run, sys, task, uv;\n export c_vec, ctypes, either, option, result, four, tri, util;\n export bitv, deque, fun_treemap, list, map, smallintmap, sort, treemap, ufind;\n export rope;\n@@ -46,6 +46,7 @@ mod net;\n mod run;\n mod sys;\n mod task;\n+mod uv;\n \n \n // Utility modules"}, {"sha": "17916b844e32805ec252831537b67830780ea855", "filename": "src/lib/uv.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/7476a39e47d4c5d8e1a349adf590ee329501a0a8/src%2Flib%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7476a39e47d4c5d8e1a349adf590ee329501a0a8/src%2Flib%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fuv.rs?ref=7476a39e47d4c5d8e1a349adf590ee329501a0a8", "patch": "@@ -0,0 +1,150 @@\n+/*\n+This is intended to be a low-level binding to libuv that very closely mimics\n+the C libuv API. Does very little right now pending scheduler improvements.\n+*/\n+\n+#[cfg(target_os = \"linux\")];\n+#[cfg(target_os = \"macos\")];\n+\n+export sanity_check;\n+export loop_t, idle_t;\n+export loop_new, loop_delete, default_loop, run, unref;\n+export idle_init, idle_start;\n+export idle_new;\n+\n+#[link_name = \"rustrt\"]\n+native mod uv {\n+    fn rust_uv_loop_new() -> *loop_t;\n+    fn rust_uv_loop_delete(loop: *loop_t);\n+    fn rust_uv_default_loop() -> *loop_t;\n+    fn rust_uv_run(loop: *loop_t) -> ctypes::c_int;\n+    fn rust_uv_unref(loop: *loop_t);\n+    fn rust_uv_idle_init(loop: *loop_t, idle: *idle_t) -> ctypes::c_int;\n+    fn rust_uv_idle_start(idle: *idle_t, cb: idle_cb) -> ctypes::c_int;\n+}\n+\n+#[link_name = \"rustrt\"]\n+native mod helpers {\n+    fn rust_uv_size_of_idle_t() -> ctypes::size_t;\n+}\n+\n+type opaque_cb = *ctypes::void;\n+\n+type handle_type = ctypes::enum;\n+\n+type close_cb = opaque_cb;\n+type idle_cb = opaque_cb;\n+\n+#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"macos\")]\n+type handle_private_fields = {\n+    a00: ctypes::c_int,\n+    a01: ctypes::c_int,\n+    a02: ctypes::c_int,\n+    a03: ctypes::c_int,\n+    a04: ctypes::c_int,\n+    a05: ctypes::c_int,\n+    a06: int,\n+    a07: int,\n+    a08: int,\n+    a09: int,\n+    a10: int,\n+    a11: int,\n+    a12: int\n+};\n+\n+type handle_fields = {\n+    loop: *loop_t,\n+    type_: handle_type,\n+    close_cb: close_cb,\n+    data: *ctypes::void,\n+    private: handle_private_fields\n+};\n+\n+type handle_t = {\n+    fields: handle_fields\n+};\n+\n+type loop_t = int;\n+\n+\n+\n+\n+type idle_t = {\n+    fields: handle_fields\n+    /* private: idle_private_fields */\n+};\n+\n+fn idle_init(loop: *loop_t, idle: *idle_t) -> ctypes::c_int {\n+    uv::rust_uv_idle_init(loop, idle)\n+}\n+\n+fn idle_start(idle: *idle_t, cb: idle_cb) -> ctypes::c_int {\n+    uv::rust_uv_idle_start(idle, cb)\n+}\n+\n+\n+\n+\n+fn default_loop() -> *loop_t {\n+    uv::rust_uv_default_loop()\n+}\n+\n+fn loop_new() -> *loop_t {\n+    uv::rust_uv_loop_new()\n+}\n+\n+fn loop_delete(loop: *loop_t) {\n+    uv::rust_uv_loop_delete(loop)\n+}\n+\n+fn run(loop: *loop_t) -> ctypes::c_int {\n+    uv::rust_uv_run(loop)\n+}\n+\n+fn unref(loop: *loop_t) {\n+    uv::rust_uv_unref(loop)\n+}\n+\n+\n+fn sanity_check() {\n+    fn check_size(t: str, uv: ctypes::size_t, rust: ctypes::size_t) {\n+        log #fmt(\"size of %s: uv: %u, rust: %u\", t, uv, rust);\n+        assert uv == rust;\n+    }\n+    check_size(\"idle_t\",\n+               helpers::rust_uv_size_of_idle_t(),\n+               sys::size_of::<idle_t>());\n+}\n+\n+#[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"macos\")]\n+fn handle_fields_new() -> handle_fields {\n+    {\n+        loop: ptr::null(),\n+        type_: 0u32,\n+        close_cb: ptr::null(),\n+        data: ptr::null(),\n+        private: {\n+            a00: 0i32,\n+            a01: 0i32,\n+            a02: 0i32,\n+            a03: 0i32,\n+            a04: 0i32,\n+            a05: 0i32,\n+            a06: 0,\n+            a07: 0,\n+            a08: 0,\n+            a09: 0,\n+            a10: 0,\n+            a11: 0,\n+            a12: 0\n+        }\n+    }\n+}\n+\n+fn idle_new() -> idle_t {\n+    {\n+        fields: handle_fields_new()\n+    }\n+}\n\\ No newline at end of file"}, {"sha": "b339d77c043a2f61f4d75d02ab7fccd59e9608d8", "filename": "src/rt/rust_uv.cpp", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7476a39e47d4c5d8e1a349adf590ee329501a0a8/src%2Frt%2Frust_uv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/7476a39e47d4c5d8e1a349adf590ee329501a0a8/src%2Frt%2Frust_uv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_uv.cpp?ref=7476a39e47d4c5d8e1a349adf590ee329501a0a8", "patch": "@@ -0,0 +1,50 @@\n+#include \"rust_internal.h\"\n+#include \"uv.h\"\n+\n+/*\n+  Wrappers of uv_* functions. These can be eliminated by figuring\n+  out how to build static uv with externs, or by just using dynamic libuv\n+ */\n+\n+extern \"C\" CDECL uv_loop_t*\n+rust_uv_default_loop() {\n+  return uv_default_loop();\n+}\n+\n+extern \"C\" CDECL uv_loop_t*\n+rust_uv_loop_new() {\n+  return uv_loop_new();\n+}\n+\n+extern \"C\" CDECL void\n+rust_uv_loop_delete(uv_loop_t *loop) {\n+  return uv_loop_delete(loop);\n+}\n+\n+extern \"C\" CDECL int\n+rust_uv_run(uv_loop_t *loop) {\n+  return uv_run(loop);\n+}\n+\n+extern \"C\" CDECL void\n+rust_uv_unref(uv_loop_t *loop) {\n+  return uv_unref(loop);\n+}\n+\n+extern \"C\" CDECL int\n+rust_uv_idle_init(uv_loop_t* loop, uv_idle_t* idle) {\n+  return uv_idle_init(loop, idle);\n+}\n+\n+extern \"C\" CDECL int\n+rust_uv_idle_start(uv_idle_t* idle, uv_idle_cb cb) {\n+  return uv_idle_start(idle, cb);\n+}\n+\n+\n+\n+\n+extern \"C\" CDECL size_t\n+rust_uv_size_of_idle_t() {\n+  return sizeof(uv_idle_t);\n+}"}, {"sha": "de9079800e238de724aacaa66e76f94d1bb5fc44", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7476a39e47d4c5d8e1a349adf590ee329501a0a8/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/7476a39e47d4c5d8e1a349adf590ee329501a0a8/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=7476a39e47d4c5d8e1a349adf590ee329501a0a8", "patch": "@@ -68,4 +68,12 @@ upcall_vec_push\n upcall_call_shim_on_c_stack\n upcall_new_stack\n upcall_del_stack\n-asm_call_on_stack\n\\ No newline at end of file\n+asm_call_on_stack\n+rust_uv_default_loop\n+rust_uv_loop_new\n+rust_uv_loop_delete\n+rust_uv_run\n+rust_uv_unref\n+rust_uv_idle_init\n+rust_uv_idle_start\n+rust_uv_size_of_idle_t\n\\ No newline at end of file"}, {"sha": "4cb4a5a3904a9b6a1945ef8ba470a1a7f02a6648", "filename": "src/test/stdtest/stdtest.rc", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7476a39e47d4c5d8e1a349adf590ee329501a0a8/src%2Ftest%2Fstdtest%2Fstdtest.rc", "raw_url": "https://github.com/rust-lang/rust/raw/7476a39e47d4c5d8e1a349adf590ee329501a0a8/src%2Ftest%2Fstdtest%2Fstdtest.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fstdtest.rc?ref=7476a39e47d4c5d8e1a349adf590ee329501a0a8", "patch": "@@ -40,6 +40,7 @@ mod tri;\n mod treemap;\n mod uint;\n mod unsafe;\n+mod uv;\n mod vec;\n \n // Local Variables:"}, {"sha": "1dda6957a5d85780cb3aca909e8323e71b00dad1", "filename": "src/test/stdtest/uv.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7476a39e47d4c5d8e1a349adf590ee329501a0a8/src%2Ftest%2Fstdtest%2Fuv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7476a39e47d4c5d8e1a349adf590ee329501a0a8/src%2Ftest%2Fstdtest%2Fuv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fuv.rs?ref=7476a39e47d4c5d8e1a349adf590ee329501a0a8", "patch": "@@ -0,0 +1,44 @@\n+#[cfg(target_os = \"linux\")];\n+#[cfg(target_os = \"macos\")];\n+\n+import std::uv;\n+import std::ptr;\n+\n+#[test]\n+fn sanity_check() {\n+    uv::sanity_check();\n+}\n+\n+// From test-ref.c\n+mod test_ref {\n+\n+    #[test]\n+    fn ref() {\n+        let loop = uv::loop_new();\n+        uv::run(loop);\n+        uv::loop_delete(loop);\n+    }\n+\n+    #[test]\n+    fn idle_ref() {\n+        let loop = uv::loop_new();\n+        let h = uv::idle_new();\n+        uv::idle_init(loop, ptr::addr_of(h));\n+        uv::idle_start(ptr::addr_of(h), ptr::null());\n+        uv::unref(loop);\n+        uv::run(loop);\n+        uv::loop_delete(loop);\n+    }\n+\n+    #[test]\n+    fn async_ref() {\n+        /*\n+        let loop = uv::loop_new();\n+        let h = uv::async_new();\n+        uv::async_init(loop, ptr::addr_of(h), ptr::null());\n+        uv::unref(loop);\n+        uv::run(loop);\n+        uv::loop_delete(loop);\n+        */\n+    }\n+}\n\\ No newline at end of file"}]}