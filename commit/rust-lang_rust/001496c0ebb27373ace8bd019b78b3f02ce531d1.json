{"sha": "001496c0ebb27373ace8bd019b78b3f02ce531d1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMTQ5NmMwZWJiMjczNzNhY2U4YmQwMTliNzhiM2YwMmNlNTMxZDE=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-06T02:41:15Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2020-05-06T04:16:05Z"}, "message": "Shrink `LocalDecl` by 16 bytes.\n\nBy boxing `user_ty`.", "tree": {"sha": "12edb66446bdfd4fdb2d56dae413b57e1ed3f7f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12edb66446bdfd4fdb2d56dae413b57e1ed3f7f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/001496c0ebb27373ace8bd019b78b3f02ce531d1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/001496c0ebb27373ace8bd019b78b3f02ce531d1", "html_url": "https://github.com/rust-lang/rust/commit/001496c0ebb27373ace8bd019b78b3f02ce531d1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/001496c0ebb27373ace8bd019b78b3f02ce531d1/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27ae2f0d60d9201133e1f9ec7a04c05c8e55e665", "url": "https://api.github.com/repos/rust-lang/rust/commits/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665", "html_url": "https://github.com/rust-lang/rust/commit/27ae2f0d60d9201133e1f9ec7a04c05c8e55e665"}], "stats": {"total": 92, "additions": 51, "deletions": 41}, "files": [{"sha": "15862660512262811e6c3f27829f92d35792e75f", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/001496c0ebb27373ace8bd019b78b3f02ce531d1/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001496c0ebb27373ace8bd019b78b3f02ce531d1/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=001496c0ebb27373ace8bd019b78b3f02ce531d1", "patch": "@@ -732,7 +732,7 @@ pub struct LocalDecl<'tcx> {\n     /// borrow checker needs this information since it can affect\n     /// region inference.\n     // FIXME(matthewjasper) Don't store in this in `Body`\n-    pub user_ty: UserTypeProjections,\n+    pub user_ty: Option<Box<UserTypeProjections>>,\n \n     /// The *syntactic* (i.e., not visibility) source scope the local is defined\n     /// in. If the local was defined in a let-statement, this\n@@ -818,7 +818,7 @@ pub struct LocalDecl<'tcx> {\n \n // `LocalDecl` is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(target_arch = \"x86_64\")]\n-static_assert_size!(LocalDecl<'_>, 72);\n+static_assert_size!(LocalDecl<'_>, 56);\n \n /// Extra information about a some locals that's used for diagnostics. (Not\n /// used for non-StaticRef temporaries, the return place, or anonymous function\n@@ -937,7 +937,7 @@ impl<'tcx> LocalDecl<'tcx> {\n             internal: false,\n             is_block_tail: None,\n             ty,\n-            user_ty: UserTypeProjections::none(),\n+            user_ty: None,\n             source_info,\n         }\n     }\n@@ -2451,14 +2451,18 @@ impl Constant<'tcx> {\n /// &'static str`.\n #[derive(Clone, Debug, RustcEncodable, RustcDecodable, HashStable, TypeFoldable)]\n pub struct UserTypeProjections {\n-    pub(crate) contents: Vec<(UserTypeProjection, Span)>,\n+    pub contents: Vec<(UserTypeProjection, Span)>,\n }\n \n impl<'tcx> UserTypeProjections {\n     pub fn none() -> Self {\n         UserTypeProjections { contents: vec![] }\n     }\n \n+    pub fn is_empty(&self) -> bool {\n+        self.contents.is_empty()\n+    }\n+\n     pub fn from_projections(projs: impl Iterator<Item = (UserTypeProjection, Span)>) -> Self {\n         UserTypeProjections { contents: projs.collect() }\n     }"}, {"sha": "2f3d89dc02980c6c17acdf9598c9bb9efd1ad2a0", "filename": "src/librustc_middle/mir/visit.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/001496c0ebb27373ace8bd019b78b3f02ce531d1/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001496c0ebb27373ace8bd019b78b3f02ce531d1/src%2Flibrustc_middle%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fvisit.rs?ref=001496c0ebb27373ace8bd019b78b3f02ce531d1", "patch": "@@ -715,8 +715,10 @@ macro_rules! make_mir_visitor {\n                     local,\n                     source_info: *source_info,\n                 });\n-                for (user_ty, _) in & $($mutability)? user_ty.contents {\n-                    self.visit_user_type_projection(user_ty);\n+                if let Some(user_ty) = user_ty {\n+                    for (user_ty, _) in & $($mutability)? user_ty.contents {\n+                        self.visit_user_type_projection(user_ty);\n+                    }\n                 }\n                 self.visit_source_info(source_info);\n             }"}, {"sha": "67254811ec52a6c8f36cd7756d6f381be5219a07", "filename": "src/librustc_mir/borrow_check/diagnostics/move_errors.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/001496c0ebb27373ace8bd019b78b3f02ce531d1/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001496c0ebb27373ace8bd019b78b3f02ce531d1/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmove_errors.rs?ref=001496c0ebb27373ace8bd019b78b3f02ce531d1", "patch": "@@ -482,10 +482,9 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         let mut suggestions: Vec<(Span, &str, String)> = Vec::new();\n         for local in binds_to {\n             let bind_to = &self.body.local_decls[*local];\n-            if let Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(VarBindingForm {\n-                pat_span,\n-                ..\n-            })))) = bind_to.local_info\n+            if let Some(box LocalInfo::User(ClearCrossCrate::Set(BindingForm::Var(\n+                VarBindingForm { pat_span, .. },\n+            )))) = bind_to.local_info\n             {\n                 if let Ok(pat_snippet) = self.infcx.tcx.sess.source_map().span_to_snippet(pat_span)\n                 {"}, {"sha": "bd38ad04e7eaa339e2048ee2f9d7eb6f4cc67ccc", "filename": "src/librustc_mir/borrow_check/type_check/mod.rs", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/001496c0ebb27373ace8bd019b78b3f02ce531d1/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001496c0ebb27373ace8bd019b78b3f02ce531d1/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fmod.rs?ref=001496c0ebb27373ace8bd019b78b3f02ce531d1", "patch": "@@ -405,35 +405,38 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for TypeVerifier<'a, 'b, 'tcx> {\n         self.super_local_decl(local, local_decl);\n         self.sanitize_type(local_decl, local_decl.ty);\n \n-        for (user_ty, span) in local_decl.user_ty.projections_and_spans() {\n-            let ty = if !local_decl.is_nonref_binding() {\n-                // If we have a binding of the form `let ref x: T = ..` then remove the outermost\n-                // reference so we can check the type annotation for the remaining type.\n-                if let ty::Ref(_, rty, _) = local_decl.ty.kind {\n-                    rty\n+        if let Some(user_ty) = &local_decl.user_ty {\n+            for (user_ty, span) in user_ty.projections_and_spans() {\n+                let ty = if !local_decl.is_nonref_binding() {\n+                    // If we have a binding of the form `let ref x: T = ..`\n+                    // then remove the outermost reference so we can check the\n+                    // type annotation for the remaining type.\n+                    if let ty::Ref(_, rty, _) = local_decl.ty.kind {\n+                        rty\n+                    } else {\n+                        bug!(\"{:?} with ref binding has wrong type {}\", local, local_decl.ty);\n+                    }\n                 } else {\n-                    bug!(\"{:?} with ref binding has wrong type {}\", local, local_decl.ty);\n-                }\n-            } else {\n-                local_decl.ty\n-            };\n+                    local_decl.ty\n+                };\n \n-            if let Err(terr) = self.cx.relate_type_and_user_type(\n-                ty,\n-                ty::Variance::Invariant,\n-                user_ty,\n-                Locations::All(*span),\n-                ConstraintCategory::TypeAnnotation,\n-            ) {\n-                span_mirbug!(\n-                    self,\n-                    local,\n-                    \"bad user type on variable {:?}: {:?} != {:?} ({:?})\",\n-                    local,\n-                    local_decl.ty,\n-                    local_decl.user_ty,\n-                    terr,\n-                );\n+                if let Err(terr) = self.cx.relate_type_and_user_type(\n+                    ty,\n+                    ty::Variance::Invariant,\n+                    user_ty,\n+                    Locations::All(*span),\n+                    ConstraintCategory::TypeAnnotation,\n+                ) {\n+                    span_mirbug!(\n+                        self,\n+                        local,\n+                        \"bad user type on variable {:?}: {:?} != {:?} ({:?})\",\n+                        local,\n+                        local_decl.ty,\n+                        local_decl.user_ty,\n+                        terr,\n+                    );\n+                }\n             }\n         }\n     }"}, {"sha": "090cd41543733b038174d44c20090db88b316a4c", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/001496c0ebb27373ace8bd019b78b3f02ce531d1/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001496c0ebb27373ace8bd019b78b3f02ce531d1/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=001496c0ebb27373ace8bd019b78b3f02ce531d1", "patch": "@@ -472,8 +472,10 @@ fn write_scope_tree(\n \n         let mut indented_decl =\n             format!(\"{0:1$}let {2}{3:?}: {4:?}\", INDENT, indent, mut_str, local, local_decl.ty);\n-        for user_ty in local_decl.user_ty.projections() {\n-            write!(indented_decl, \" as {:?}\", user_ty).unwrap();\n+        if let Some(user_ty) = &local_decl.user_ty {\n+            for user_ty in user_ty.projections() {\n+                write!(indented_decl, \" as {:?}\", user_ty).unwrap();\n+            }\n         }\n         indented_decl.push_str(\";\");\n "}, {"sha": "f14de38a3f9428acb11e83357e976f0b741c9ecc", "filename": "src/librustc_mir_build/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/001496c0ebb27373ace8bd019b78b3f02ce531d1/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/001496c0ebb27373ace8bd019b78b3f02ce531d1/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmatches%2Fmod.rs?ref=001496c0ebb27373ace8bd019b78b3f02ce531d1", "patch": "@@ -1949,7 +1949,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let local = LocalDecl::<'tcx> {\n             mutability,\n             ty: var_ty,\n-            user_ty,\n+            user_ty: if user_ty.is_empty() { None } else { Some(box user_ty) },\n             source_info,\n             internal: false,\n             is_block_tail: None,\n@@ -1976,7 +1976,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // immutable to avoid the unused mut lint.\n                 mutability: Mutability::Not,\n                 ty: tcx.mk_imm_ref(tcx.lifetimes.re_erased, var_ty),\n-                user_ty: UserTypeProjections::none(),\n+                user_ty: None,\n                 source_info,\n                 internal: false,\n                 is_block_tail: None,"}]}