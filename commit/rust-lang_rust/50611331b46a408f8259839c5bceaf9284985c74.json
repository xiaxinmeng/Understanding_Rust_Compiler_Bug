{"sha": "50611331b46a408f8259839c5bceaf9284985c74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNjExMzMxYjQ2YTQwOGY4MjU5ODM5YzViY2VhZjkyODQ5ODVjNzQ=", "commit": {"author": {"name": "Ricardo Signes", "email": "rjbs@cpan.org", "date": "2015-10-25T19:58:50Z"}, "committer": {"name": "Ricardo Signes", "email": "rjbs@cpan.org", "date": "2015-10-25T20:05:58Z"}, "message": "reformat the docs for hidden code in rust sections\n\nAs displayed before this commit, I found the book confusing in its\nexplanation of `#`-led comments in `rust` blocks.  Possibly the\nbiggest confusion was because the many-dashes construct does not\nbecome an HR element in the Markdown translator used, so things were\nnot being properly set off.\n\nThis change should more clearly show the as-rendered content as\nrendered, and the as-coded content as code.", "tree": {"sha": "769c87dfc62676a4c912e584688f2cb4d0659e9b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/769c87dfc62676a4c912e584688f2cb4d0659e9b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50611331b46a408f8259839c5bceaf9284985c74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50611331b46a408f8259839c5bceaf9284985c74", "html_url": "https://github.com/rust-lang/rust/commit/50611331b46a408f8259839c5bceaf9284985c74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50611331b46a408f8259839c5bceaf9284985c74/comments", "author": {"login": "rjbs", "id": 30682, "node_id": "MDQ6VXNlcjMwNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/30682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rjbs", "html_url": "https://github.com/rjbs", "followers_url": "https://api.github.com/users/rjbs/followers", "following_url": "https://api.github.com/users/rjbs/following{/other_user}", "gists_url": "https://api.github.com/users/rjbs/gists{/gist_id}", "starred_url": "https://api.github.com/users/rjbs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rjbs/subscriptions", "organizations_url": "https://api.github.com/users/rjbs/orgs", "repos_url": "https://api.github.com/users/rjbs/repos", "events_url": "https://api.github.com/users/rjbs/events{/privacy}", "received_events_url": "https://api.github.com/users/rjbs/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rjbs", "id": 30682, "node_id": "MDQ6VXNlcjMwNjgy", "avatar_url": "https://avatars.githubusercontent.com/u/30682?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rjbs", "html_url": "https://github.com/rjbs", "followers_url": "https://api.github.com/users/rjbs/followers", "following_url": "https://api.github.com/users/rjbs/following{/other_user}", "gists_url": "https://api.github.com/users/rjbs/gists{/gist_id}", "starred_url": "https://api.github.com/users/rjbs/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rjbs/subscriptions", "organizations_url": "https://api.github.com/users/rjbs/orgs", "repos_url": "https://api.github.com/users/rjbs/repos", "events_url": "https://api.github.com/users/rjbs/events{/privacy}", "received_events_url": "https://api.github.com/users/rjbs/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5acda1d3b2be1483ab7e047b5b896331bdfeb39a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5acda1d3b2be1483ab7e047b5b896331bdfeb39a", "html_url": "https://github.com/rust-lang/rust/commit/5acda1d3b2be1483ab7e047b5b896331bdfeb39a"}], "stats": {"total": 72, "additions": 35, "deletions": 37}, "files": [{"sha": "67964b9a0031ac557c12969eafa53c85947321a0", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 35, "deletions": 37, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/50611331b46a408f8259839c5bceaf9284985c74/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/50611331b46a408f8259839c5bceaf9284985c74/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=50611331b46a408f8259839c5bceaf9284985c74", "patch": "@@ -269,73 +269,71 @@ documentation comment, I need to add a little function definition below\n it. At the same time, it's just there to satisfy the compiler, so hiding\n it makes the example more clear. You can use this technique to explain\n longer examples in detail, while still preserving the testability of your\n-documentation. For example, this code:\n-\n-```rust\n-let x = 5;\n-let y = 6;\n-println!(\"{}\", x + y);\n-```\n-\n-Here's an explanation, rendered:\n-\n--------------------------------------------------------------------------------\n+documentation.\n \n-First, we set `x` to five:\n+For example, imagine that we wanted to document this code:\n \n ```rust\n let x = 5;\n-# let y = 6;\n-# println!(\"{}\", x + y);\n-```\n-\n-Next, we set `y` to six:\n-\n-```rust\n-# let x = 5;\n let y = 6;\n-# println!(\"{}\", x + y);\n-```\n-\n-Finally, we print the sum of `x` and `y`:\n-\n-```rust\n-# let x = 5;\n-# let y = 6;\n println!(\"{}\", x + y);\n ```\n \n--------------------------------------------------------------------------------\n-\n-Here's the same explanation, in raw text:\n-\n--------------------------------------------------------------------------------\n+We might want the documentation to end up looking like this:\n \n > First, we set `x` to five:\n >\n-> ```text\n+> ```rust\n > let x = 5;\n > # let y = 6;\n > # println!(\"{}\", x + y);\n > ```\n >\n > Next, we set `y` to six:\n >\n-> ```text\n+> ```rust\n > # let x = 5;\n > let y = 6;\n > # println!(\"{}\", x + y);\n > ```\n >\n > Finally, we print the sum of `x` and `y`:\n >\n-> ```text\n+> ```rust\n > # let x = 5;\n > # let y = 6;\n > println!(\"{}\", x + y);\n > ```\n \n--------------------------------------------------------------------------------\n+To keep each code block testable, we want the whole program in each block, but\n+we don't want the reader to see every line every time.  Here's what we put in\n+our source code:\n+\n+```text\n+    First, we set `x` to five:\n+\n+    ```text\n+    let x = 5;\n+    # let y = 6;\n+    # println!(\"{}\", x + y);\n+    ```\n+\n+    Next, we set `y` to six:\n+\n+    ```text\n+    # let x = 5;\n+    let y = 6;\n+    # println!(\"{}\", x + y);\n+    ```\n+\n+    Finally, we print the sum of `x` and `y`:\n+\n+    ```text\n+    # let x = 5;\n+    # let y = 6;\n+    println!(\"{}\", x + y);\n+    ```\n+```\n \n By repeating all parts of the example, you can ensure that your example still\n compiles, while only showing the parts that are relevant to that part of your"}]}