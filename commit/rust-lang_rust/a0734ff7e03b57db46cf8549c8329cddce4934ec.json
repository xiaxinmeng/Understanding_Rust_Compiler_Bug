{"sha": "a0734ff7e03b57db46cf8549c8329cddce4934ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwNzM0ZmY3ZTAzYjU3ZGI0NmNmODU0OWM4MzI5Y2RkY2U0OTM0ZWM=", "commit": {"author": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2015-01-08T00:10:40Z"}, "committer": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2015-01-08T00:22:04Z"}, "message": "rustdoc: Render associated type bindings\n\ne.g. `Foo<Output=A>`\n\nThis does not work cross-crate unfortunately.\n\nPart of #20646", "tree": {"sha": "abebcc584694f288e6f2854b9428b1e5370457b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abebcc584694f288e6f2854b9428b1e5370457b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a0734ff7e03b57db46cf8549c8329cddce4934ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a0734ff7e03b57db46cf8549c8329cddce4934ec", "html_url": "https://github.com/rust-lang/rust/commit/a0734ff7e03b57db46cf8549c8329cddce4934ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a0734ff7e03b57db46cf8549c8329cddce4934ec/comments", "author": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972", "html_url": "https://github.com/rust-lang/rust/commit/9f1ead8fadc56bad30dc74f5cc50d78af4fbc972"}], "stats": {"total": 52, "additions": 48, "deletions": 4}, "files": [{"sha": "ea6bfc64c2227d806a62bff8f312c28d13fb7122", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 23, "deletions": 2, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a0734ff7e03b57db46cf8549c8329cddce4934ec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0734ff7e03b57db46cf8549c8329cddce4934ec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a0734ff7e03b57db46cf8549c8329cddce4934ec", "patch": "@@ -530,7 +530,8 @@ fn external_path_params(cx: &DocContext, trait_did: Option<ast::DefId>,\n                 _ => {\n                     return PathParameters::AngleBracketed {\n                         lifetimes: lifetimes,\n-                        types: types.clean(cx)\n+                        types: types.clean(cx),\n+                        bindings: vec![]\n                     }\n                 }\n             };\n@@ -547,6 +548,7 @@ fn external_path_params(cx: &DocContext, trait_did: Option<ast::DefId>,\n             PathParameters::AngleBracketed {\n                 lifetimes: lifetimes,\n                 types: types.clean(cx),\n+                bindings: vec![] // FIXME(#20646)\n             }\n         }\n     }\n@@ -1766,6 +1768,7 @@ pub enum PathParameters {\n     AngleBracketed {\n         lifetimes: Vec<Lifetime>,\n         types: Vec<Type>,\n+        bindings: Vec<TypeBinding>\n     },\n     Parenthesized {\n         inputs: Vec<Type>,\n@@ -1779,7 +1782,8 @@ impl Clean<PathParameters> for ast::PathParameters {\n             ast::AngleBracketedParameters(ref data) => {\n                 PathParameters::AngleBracketed {\n                     lifetimes: data.lifetimes.clean(cx),\n-                    types: data.types.clean(cx)\n+                    types: data.types.clean(cx),\n+                    bindings: data.bindings.clean(cx)\n                 }\n             }\n \n@@ -2442,8 +2446,25 @@ fn lang_struct(cx: &DocContext, did: Option<ast::DefId>,\n                 params: PathParameters::AngleBracketed {\n                     lifetimes: vec![],\n                     types: vec![t.clean(cx)],\n+                    bindings: vec![]\n                 }\n             }],\n         },\n     }\n }\n+\n+/// An equality constraint on an associated type, e.g. `A=Bar` in `Foo<A=Bar>`\n+#[derive(Clone, PartialEq, RustcDecodable, RustcEncodable)]\n+pub struct TypeBinding {\n+    pub name: String,\n+    pub ty: Type\n+}\n+\n+impl Clean<TypeBinding> for ast::TypeBinding {\n+    fn clean(&self, cx: &DocContext) -> TypeBinding {\n+        TypeBinding {\n+            name: self.ident.clean(cx),\n+            ty: self.ty.clean(cx)\n+        }\n+    }\n+}"}, {"sha": "0757441ed878db9960c5203741d11fdcb2531258", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 25, "deletions": 2, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a0734ff7e03b57db46cf8549c8329cddce4934ec/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a0734ff7e03b57db46cf8549c8329cddce4934ec/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=a0734ff7e03b57db46cf8549c8329cddce4934ec", "patch": "@@ -250,8 +250,10 @@ impl fmt::Show for clean::PathParameters {\n impl fmt::String for clean::PathParameters {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {\n-            clean::PathParameters::AngleBracketed { ref lifetimes, ref types } => {\n-                if lifetimes.len() > 0 || types.len() > 0 {\n+            clean::PathParameters::AngleBracketed {\n+                ref lifetimes, ref types, ref bindings\n+            } => {\n+                if lifetimes.len() > 0 || types.len() > 0 || bindings.len() > 0 {\n                     try!(f.write_str(\"&lt;\"));\n                     let mut comma = false;\n                     for lifetime in lifetimes.iter() {\n@@ -268,6 +270,13 @@ impl fmt::String for clean::PathParameters {\n                         comma = true;\n                         try!(write!(f, \"{}\", *ty));\n                     }\n+                    for binding in bindings.iter() {\n+                        if comma {\n+                            try!(f.write_str(\", \"));\n+                        }\n+                        comma = true;\n+                        try!(write!(f, \"{}\", *binding));\n+                    }\n                     try!(f.write_str(\"&gt;\"));\n                 }\n             }\n@@ -855,6 +864,7 @@ impl fmt::String for clean::ViewListIdent {\n                         params: clean::PathParameters::AngleBracketed {\n                             lifetimes: Vec::new(),\n                             types: Vec::new(),\n+                            bindings: Vec::new()\n                         }\n                     })\n                 };\n@@ -865,6 +875,19 @@ impl fmt::String for clean::ViewListIdent {\n     }\n }\n \n+//NOTE(stage0): remove impl after snapshot\n+impl fmt::Show for clean::TypeBinding {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        fmt::String::fmt(self, f)\n+    }\n+}\n+\n+impl fmt::String for clean::TypeBinding {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        write!(f, \"{}={}\", self.name, self.ty)\n+    }\n+}\n+\n //NOTE(stage0): remove impl after snapshot\n #[cfg(stage0)]\n impl fmt::Show for MutableSpace {"}]}