{"sha": "b04599ff8405d476a05b83839c67e9aea3c640cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwNDU5OWZmODQwNWQ0NzZhMDViODM4MzljNjdlOWFlYTNjNjQwY2I=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2020-04-03T11:10:13Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2020-05-07T15:18:25Z"}, "message": "Add Arc::{incr,decr}_strong_count", "tree": {"sha": "2055f09f16eef998fab03f7b44f8fb16341424ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2055f09f16eef998fab03f7b44f8fb16341424ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b04599ff8405d476a05b83839c67e9aea3c640cb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b04599ff8405d476a05b83839c67e9aea3c640cb", "html_url": "https://github.com/rust-lang/rust/commit/b04599ff8405d476a05b83839c67e9aea3c640cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b04599ff8405d476a05b83839c67e9aea3c640cb/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "607b8582362be8e26df7acc12fa242359d7edf95", "url": "https://api.github.com/repos/rust-lang/rust/commits/607b8582362be8e26df7acc12fa242359d7edf95", "html_url": "https://github.com/rust-lang/rust/commit/607b8582362be8e26df7acc12fa242359d7edf95"}], "stats": {"total": 85, "additions": 80, "deletions": 5}, "files": [{"sha": "a7f14c0bfd4de4c09ce6ac615b969fcb4422003f", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/b04599ff8405d476a05b83839c67e9aea3c640cb/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04599ff8405d476a05b83839c67e9aea3c640cb/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=b04599ff8405d476a05b83839c67e9aea3c640cb", "patch": "@@ -751,6 +751,79 @@ impl<T: ?Sized> Arc<T> {\n         this.inner().strong.load(SeqCst)\n     }\n \n+    /// Increments the strong reference count on the `Arc<T>` associated with the\n+    /// provided pointer by one.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The pointer must have been obtained through `Arc::into_raw`, and the\n+    /// associated `Arc` instance must be valid (i.e. the strong count must be at\n+    /// least 1) for the duration of this method.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(arc_mutate_strong_count)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let five = Arc::new(5);\n+    ///\n+    /// unsafe {\n+    ///     let ptr = Arc::into_raw(five);\n+    ///     Arc::incr_strong_count(ptr);\n+    ///\n+    ///     // This assertion is deterministic because we haven't shared\n+    ///     // the `Arc` between threads.\n+    ///     let five = Arc::from_raw(ptr);\n+    ///     assert_eq!(2, Arc::strong_count(&five));\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"arc_mutate_strong_count\", issue = \"71983\")]\n+    pub unsafe fn incr_strong_count(ptr: *const T) {\n+        // Retain Arc, but don't touch refcount by wrapping in ManuallyDrop\n+        let arc = mem::ManuallyDrop::new(Arc::<T>::from_raw(ptr));\n+        // Now increase refcount, but don't drop new refcount either\n+        let _arc_clone: mem::ManuallyDrop<_> = arc.clone();\n+    }\n+\n+    /// Decrements the strong reference count on the `Arc<T>` associated with the\n+    /// provided pointer by one.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The pointer must have been obtained through `Arc::into_raw`, and the\n+    /// associated `Arc` instance must be valid (i.e. the strong count must be at\n+    /// least 1) when invoking this method. This method can be used to release the final\n+    /// `Arc` and backing storage, but **should not** be called after the final `Arc` has been\n+    /// released.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(arc_mutate_strong_count)]\n+    ///\n+    /// use std::sync::Arc;\n+    ///\n+    /// let five = Arc::new(5);\n+    ///\n+    /// unsafe {\n+    ///     let ptr = Arc::into_raw(five);\n+    ///     Arc::decr_strong_count(ptr);\n+    ///\n+    ///     // This assertion is deterministic because we haven't shared\n+    ///     // the `Arc` between threads.\n+    ///     let five = Arc::from_raw(ptr);\n+    ///     assert_eq!(0, Arc::strong_count(&five));\n+    /// }\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"arc_mutate_strong_count\", issue = \"71983\")]\n+    pub unsafe fn decr_strong_count(ptr: *const T) {\n+        mem::drop(Arc::from_raw(ptr));\n+    }\n+\n     #[inline]\n     fn inner(&self) -> &ArcInner<T> {\n         // This unsafety is ok because while this arc is alive we're guaranteed"}, {"sha": "745444a152e1b737ba4b399ee3970e424430f9fe", "filename": "src/liballoc/task.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b04599ff8405d476a05b83839c67e9aea3c640cb/src%2Fliballoc%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b04599ff8405d476a05b83839c67e9aea3c640cb/src%2Fliballoc%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftask.rs?ref=b04599ff8405d476a05b83839c67e9aea3c640cb", "patch": "@@ -1,6 +1,6 @@\n #![unstable(feature = \"wake_trait\", issue = \"69912\")]\n //! Types and Traits for working with asynchronous tasks.\n-use core::mem::{self, ManuallyDrop};\n+use core::mem::ManuallyDrop;\n use core::task::{RawWaker, RawWakerVTable, Waker};\n \n use crate::sync::Arc;\n@@ -60,9 +60,11 @@ impl<W: Wake + Send + Sync + 'static> From<Arc<W>> for RawWaker {\n fn raw_waker<W: Wake + Send + Sync + 'static>(waker: Arc<W>) -> RawWaker {\n     // Increment the reference count of the arc to clone it.\n     unsafe fn clone_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) -> RawWaker {\n-        let waker: Arc<W> = Arc::from_raw(waker as *const W);\n-        mem::forget(Arc::clone(&waker));\n-        raw_waker(waker)\n+        Arc::incr_strong_count(waker as *const W);\n+        RawWaker::new(\n+            waker as *const (),\n+            &RawWakerVTable::new(clone_waker::<W>, wake::<W>, wake_by_ref::<W>, drop_waker::<W>),\n+        )\n     }\n \n     // Wake by value, moving the Arc into the Wake::wake function\n@@ -79,7 +81,7 @@ fn raw_waker<W: Wake + Send + Sync + 'static>(waker: Arc<W>) -> RawWaker {\n \n     // Decrement the reference count of the Arc on drop\n     unsafe fn drop_waker<W: Wake + Send + Sync + 'static>(waker: *const ()) {\n-        mem::drop(Arc::from_raw(waker as *const W));\n+        Arc::decr_strong_count(waker as *const W);\n     }\n \n     RawWaker::new("}]}