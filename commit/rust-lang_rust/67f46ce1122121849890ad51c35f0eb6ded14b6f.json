{"sha": "67f46ce1122121849890ad51c35f0eb6ded14b6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY3ZjQ2Y2UxMTIyMTIxODQ5ODkwYWQ1MWMzNWYwZWI2ZGVkMTRiNmY=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-02-16T10:02:06Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-17T22:07:40Z"}, "message": "Use num::NonZero* instead of NonZero<_> in rustc and tests", "tree": {"sha": "8523a2ef4a2ebe803ec55ae60f282a34caf71951", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8523a2ef4a2ebe803ec55ae60f282a34caf71951"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/67f46ce1122121849890ad51c35f0eb6ded14b6f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/67f46ce1122121849890ad51c35f0eb6ded14b6f", "html_url": "https://github.com/rust-lang/rust/commit/67f46ce1122121849890ad51c35f0eb6ded14b6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/67f46ce1122121849890ad51c35f0eb6ded14b6f/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d13ddb6e14322edcd07135a436d0d848d127fb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d13ddb6e14322edcd07135a436d0d848d127fb2", "html_url": "https://github.com/rust-lang/rust/commit/2d13ddb6e14322edcd07135a436d0d848d127fb2"}], "stats": {"total": 84, "additions": 38, "deletions": 46}, "files": [{"sha": "9eaf7529dd3cf89ac03b953b4025c59029890ccb", "filename": "src/libcore/tests/nonzero.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/67f46ce1122121849890ad51c35f0eb6ded14b6f/src%2Flibcore%2Ftests%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f46ce1122121849890ad51c35f0eb6ded14b6f/src%2Flibcore%2Ftests%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fnonzero.rs?ref=67f46ce1122121849890ad51c35f0eb6ded14b6f", "patch": "@@ -8,36 +8,36 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::nonzero::NonZero;\n+use core::num::NonZeroU32;\n use core::option::Option;\n use core::option::Option::{Some, None};\n use std::mem::size_of;\n \n #[test]\n fn test_create_nonzero_instance() {\n     let _a = unsafe {\n-        NonZero::new_unchecked(21)\n+        NonZeroU32::new_unchecked(21)\n     };\n }\n \n #[test]\n fn test_size_nonzero_in_option() {\n-    assert_eq!(size_of::<NonZero<u32>>(), size_of::<Option<NonZero<u32>>>());\n+    assert_eq!(size_of::<NonZeroU32>(), size_of::<Option<NonZeroU32>>());\n }\n \n #[test]\n fn test_match_on_nonzero_option() {\n     let a = Some(unsafe {\n-        NonZero::new_unchecked(42)\n+        NonZeroU32::new_unchecked(42)\n     });\n     match a {\n         Some(val) => assert_eq!(val.get(), 42),\n-        None => panic!(\"unexpected None while matching on Some(NonZero(_))\")\n+        None => panic!(\"unexpected None while matching on Some(NonZeroU32(_))\")\n     }\n \n-    match unsafe { Some(NonZero::new_unchecked(43)) } {\n+    match unsafe { Some(NonZeroU32::new_unchecked(43)) } {\n         Some(val) => assert_eq!(val.get(), 43),\n-        None => panic!(\"unexpected None while matching on Some(NonZero(_))\")\n+        None => panic!(\"unexpected None while matching on Some(NonZeroU32(_))\")\n     }\n }\n "}, {"sha": "e7b58ae1564aa1683a86a36d92c5ee81eae26a47", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67f46ce1122121849890ad51c35f0eb6ded14b6f/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f46ce1122121849890ad51c35f0eb6ded14b6f/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=67f46ce1122121849890ad51c35f0eb6ded14b6f", "patch": "@@ -19,11 +19,11 @@ use syntax_pos::{Span, DUMMY_SP};\n use rustc_data_structures::accumulate_vec::AccumulateVec;\n \n use core::intrinsics;\n-use core::nonzero::NonZero;\n use std::fmt;\n use std::iter;\n use std::marker::PhantomData;\n use std::mem;\n+use std::num::NonZeroUsize;\n \n /// An entity in the Rust typesystem, which can be one of\n /// several kinds (only types and lifetimes for now).\n@@ -32,7 +32,7 @@ use std::mem;\n /// indicate the type (`Ty` or `Region`) it points to.\n #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n pub struct Kind<'tcx> {\n-    ptr: NonZero<usize>,\n+    ptr: NonZeroUsize,\n     marker: PhantomData<(Ty<'tcx>, ty::Region<'tcx>)>\n }\n \n@@ -63,7 +63,7 @@ impl<'tcx> UnpackedKind<'tcx> {\n \n         Kind {\n             ptr: unsafe {\n-                NonZero::new_unchecked(ptr | tag)\n+                NonZeroUsize::new_unchecked(ptr | tag)\n             },\n             marker: PhantomData\n         }"}, {"sha": "37512e4bcd57f334e971f44aff537f61475d2eba", "filename": "src/librustc_data_structures/obligation_forest/node_index.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67f46ce1122121849890ad51c35f0eb6ded14b6f/src%2Flibrustc_data_structures%2Fobligation_forest%2Fnode_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f46ce1122121849890ad51c35f0eb6ded14b6f/src%2Flibrustc_data_structures%2Fobligation_forest%2Fnode_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fnode_index.rs?ref=67f46ce1122121849890ad51c35f0eb6ded14b6f", "patch": "@@ -8,18 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use core::nonzero::NonZero;\n+use std::num::NonZeroU32;\n use std::u32;\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n pub struct NodeIndex {\n-    index: NonZero<u32>,\n+    index: NonZeroU32,\n }\n \n impl NodeIndex {\n     pub fn new(value: usize) -> NodeIndex {\n         assert!(value < (u32::MAX as usize));\n-        NodeIndex { index: NonZero::new((value as u32) + 1).unwrap() }\n+        NodeIndex { index: NonZeroU32::new((value as u32) + 1).unwrap() }\n     }\n \n     pub fn get(self) -> usize {"}, {"sha": "9f6cf8c036e19a686e44febe3a783e252f8dd44c", "filename": "src/librustc_mir/dataflow/move_paths/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/67f46ce1122121849890ad51c35f0eb6ded14b6f/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f46ce1122121849890ad51c35f0eb6ded14b6f/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmove_paths%2Fmod.rs?ref=67f46ce1122121849890ad51c35f0eb6ded14b6f", "patch": "@@ -29,17 +29,17 @@ mod abs_domain;\n // (which is likely to yield a subtle off-by-one error).\n pub(crate) mod indexes {\n     use std::fmt;\n-    use core::nonzero::NonZero;\n+    use std::num::NonZeroUsize;\n     use rustc_data_structures::indexed_vec::Idx;\n \n     macro_rules! new_index {\n         ($Index:ident, $debug_name:expr) => {\n             #[derive(Copy, Clone, PartialEq, Eq, Hash)]\n-            pub struct $Index(NonZero<usize>);\n+            pub struct $Index(NonZeroUsize);\n \n             impl Idx for $Index {\n                 fn new(idx: usize) -> Self {\n-                    $Index(NonZero::new(idx + 1).unwrap())\n+                    $Index(NonZeroUsize::new(idx + 1).unwrap())\n                 }\n                 fn index(self) -> usize {\n                     self.0.get() - 1"}, {"sha": "12f17a1575e8211a09ca43a4ec28e96fad193b49", "filename": "src/test/run-pass/enum-null-pointer-opt.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/67f46ce1122121849890ad51c35f0eb6ded14b6f/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f46ce1122121849890ad51c35f0eb6ded14b6f/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-null-pointer-opt.rs?ref=67f46ce1122121849890ad51c35f0eb6ded14b6f", "patch": "@@ -10,10 +10,9 @@\n \n #![feature(nonzero, core)]\n \n-extern crate core;\n-\n-use core::nonzero::NonZero;\n use std::mem::size_of;\n+use std::num::NonZeroUsize;\n+use std::ptr::NonNull;\n use std::rc::Rc;\n use std::sync::Arc;\n \n@@ -59,8 +58,8 @@ fn main() {\n     assert_eq!(size_of::<[Box<isize>; 1]>(), size_of::<Option<[Box<isize>; 1]>>());\n \n     // Should apply to NonZero\n-    assert_eq!(size_of::<NonZero<usize>>(), size_of::<Option<NonZero<usize>>>());\n-    assert_eq!(size_of::<NonZero<*mut i8>>(), size_of::<Option<NonZero<*mut i8>>>());\n+    assert_eq!(size_of::<NonZeroUsize>(), size_of::<Option<NonZeroUsize>>());\n+    assert_eq!(size_of::<NonNull<i8>>(), size_of::<Option<NonNull<i8>>>());\n \n     // Should apply to types that use NonZero internally\n     assert_eq!(size_of::<Vec<isize>>(), size_of::<Option<Vec<isize>>>());"}, {"sha": "9547b2f08a6bcc8bc3fce498c12c6ecb7aebc49a", "filename": "src/test/run-pass/issue-23433.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/67f46ce1122121849890ad51c35f0eb6ded14b6f/src%2Ftest%2Frun-pass%2Fissue-23433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f46ce1122121849890ad51c35f0eb6ded14b6f/src%2Ftest%2Frun-pass%2Fissue-23433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-23433.rs?ref=67f46ce1122121849890ad51c35f0eb6ded14b6f", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// Don't fail if we encounter a NonZero<*T> where T is an unsized type\n+// Don't fail if we encounter a NonNull<T> where T is an unsized type\n \n use std::ptr::NonNull;\n "}, {"sha": "875883a2cca7fe74e8ecc883f2066f7354a49be0", "filename": "src/test/ui/print_type_sizes/niche-filling.rs", "status": "modified", "additions": 11, "deletions": 20, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/67f46ce1122121849890ad51c35f0eb6ded14b6f/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/67f46ce1122121849890ad51c35f0eb6ded14b6f/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.rs?ref=67f46ce1122121849890ad51c35f0eb6ded14b6f", "patch": "@@ -14,7 +14,7 @@\n // This file illustrates how niche-filling enums are handled,\n // modelled after cases like `Option<&u32>`, `Option<bool>` and such.\n //\n-// It uses NonZero directly, rather than `&_` or `Unique<_>`, because\n+// It uses NonZeroU32 rather than `&_` or `Unique<_>`, because\n // the test is not set up to deal with target-dependent pointer width.\n //\n // It avoids using u64/i64 because on some targets that is only 4-byte\n@@ -25,8 +25,7 @@\n #![feature(nonzero)]\n #![allow(dead_code)]\n \n-extern crate core;\n-use core::nonzero::{NonZero, Zeroable};\n+use std::num::NonZeroU32;\n \n pub enum MyOption<T> { None, Some(T) }\n \n@@ -36,40 +35,32 @@ impl<T> Default for MyOption<T> {\n \n pub enum EmbeddedDiscr {\n     None,\n-    Record { pre: u8, val: NonZero<u32>, post: u16 },\n+    Record { pre: u8, val: NonZeroU32, post: u16 },\n }\n \n impl Default for EmbeddedDiscr {\n     fn default() -> Self { EmbeddedDiscr::None }\n }\n \n #[derive(Default)]\n-pub struct IndirectNonZero<T: Zeroable + One> {\n+pub struct IndirectNonZero {\n     pre: u8,\n-    nested: NestedNonZero<T>,\n+    nested: NestedNonZero,\n     post: u16,\n }\n \n-pub struct NestedNonZero<T: Zeroable> {\n+pub struct NestedNonZero {\n     pre: u8,\n-    val: NonZero<T>,\n+    val: NonZeroU32,\n     post: u16,\n }\n \n-impl<T: Zeroable+One> Default for NestedNonZero<T> {\n+impl Default for NestedNonZero {\n     fn default() -> Self {\n-        NestedNonZero { pre: 0, val: NonZero::new(T::one()).unwrap(), post: 0 }\n+        NestedNonZero { pre: 0, val: NonZeroU32::new(1).unwrap(), post: 0 }\n     }\n }\n \n-pub trait One {\n-    fn one() -> Self;\n-}\n-\n-impl One for u32 {\n-    fn one() -> Self { 1 }\n-}\n-\n pub enum Enum4<A, B, C, D> {\n     One(A),\n     Two(B),\n@@ -79,9 +70,9 @@ pub enum Enum4<A, B, C, D> {\n \n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {\n-    let _x: MyOption<NonZero<u32>> = Default::default();\n+    let _x: MyOption<NonZeroU32> = Default::default();\n     let _y: EmbeddedDiscr = Default::default();\n-    let _z: MyOption<IndirectNonZero<u32>> = Default::default();\n+    let _z: MyOption<IndirectNonZero> = Default::default();\n     let _a: MyOption<bool> = Default::default();\n     let _b: MyOption<char> = Default::default();\n     let _c: MyOption<std::cmp::Ordering> = Default::default();"}, {"sha": "79f9ef5a231d38bad05b799e861b8f9fc3d3d092", "filename": "src/test/ui/print_type_sizes/niche-filling.stdout", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/67f46ce1122121849890ad51c35f0eb6ded14b6f/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/67f46ce1122121849890ad51c35f0eb6ded14b6f/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout?ref=67f46ce1122121849890ad51c35f0eb6ded14b6f", "patch": "@@ -1,9 +1,9 @@\n-print-type-size type: `IndirectNonZero<u32>`: 12 bytes, alignment: 4 bytes\n+print-type-size type: `IndirectNonZero`: 12 bytes, alignment: 4 bytes\n print-type-size     field `.nested`: 8 bytes\n print-type-size     field `.post`: 2 bytes\n print-type-size     field `.pre`: 1 bytes\n print-type-size     end padding: 1 bytes\n-print-type-size type: `MyOption<IndirectNonZero<u32>>`: 12 bytes, alignment: 4 bytes\n+print-type-size type: `MyOption<IndirectNonZero>`: 12 bytes, alignment: 4 bytes\n print-type-size     variant `None`: 0 bytes\n print-type-size     variant `Some`: 12 bytes\n print-type-size         field `.0`: 12 bytes\n@@ -14,7 +14,7 @@ print-type-size         field `.val`: 4 bytes\n print-type-size         field `.post`: 2 bytes\n print-type-size         field `.pre`: 1 bytes\n print-type-size     end padding: 1 bytes\n-print-type-size type: `NestedNonZero<u32>`: 8 bytes, alignment: 4 bytes\n+print-type-size type: `NestedNonZero`: 8 bytes, alignment: 4 bytes\n print-type-size     field `.val`: 4 bytes\n print-type-size     field `.post`: 2 bytes\n print-type-size     field `.pre`: 1 bytes\n@@ -32,12 +32,14 @@ print-type-size type: `MyOption<char>`: 4 bytes, alignment: 4 bytes\n print-type-size     variant `None`: 0 bytes\n print-type-size     variant `Some`: 4 bytes\n print-type-size         field `.0`: 4 bytes\n-print-type-size type: `MyOption<core::nonzero::NonZero<u32>>`: 4 bytes, alignment: 4 bytes\n+print-type-size type: `MyOption<std::num::NonZeroU32>`: 4 bytes, alignment: 4 bytes\n print-type-size     variant `None`: 0 bytes\n print-type-size     variant `Some`: 4 bytes\n print-type-size         field `.0`: 4 bytes\n print-type-size type: `core::nonzero::NonZero<u32>`: 4 bytes, alignment: 4 bytes\n print-type-size     field `.0`: 4 bytes\n+print-type-size type: `std::num::NonZeroU32`: 4 bytes, alignment: 4 bytes\n+print-type-size     field `.0`: 4 bytes\n print-type-size type: `Enum4<(), (), (), MyOption<u8>>`: 2 bytes, alignment: 1 bytes\n print-type-size     variant `One`: 0 bytes\n print-type-size         field `.0`: 0 bytes"}]}