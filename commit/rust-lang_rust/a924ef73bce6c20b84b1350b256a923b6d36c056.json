{"sha": "a924ef73bce6c20b84b1350b256a923b6d36c056", "node_id": "C_kwDOAAsO6NoAKGE5MjRlZjczYmNlNmMyMGI4NGIxMzUwYjI1NmE5MjNiNmQzNmMwNTY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-21T10:06:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-02-21T10:06:24Z"}, "message": "Auto merge of #94108 - compiler-errors:just-confirmation-normalization, r=jackh726\n\nNormalize obligation and expected trait_refs in confirm_poly_trait_refs\n\nConsolidate normalization the obligation and expected trait refs in `confirm_poly_trait_refs`. Also, _always_ normalize these trait refs -- we were already normalizing the obligation trait ref when confirming closure and generator candidates, but this does it for fn pointer confirmation as well.\n\nThis presumably does more work in the case that the obligation's trait ref is already normalized, but we can see from the perf runs in #94070, it actually (paradoxically, perhaps) improves performance when paired with logic that normalizes projections in fulfillment loop.", "tree": {"sha": "e3635b9bc59fb9ca6b66e90635230c59f5eff7be", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3635b9bc59fb9ca6b66e90635230c59f5eff7be"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a924ef73bce6c20b84b1350b256a923b6d36c056", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a924ef73bce6c20b84b1350b256a923b6d36c056", "html_url": "https://github.com/rust-lang/rust/commit/a924ef73bce6c20b84b1350b256a923b6d36c056", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a924ef73bce6c20b84b1350b256a923b6d36c056/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd", "url": "https://api.github.com/repos/rust-lang/rust/commits/026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd", "html_url": "https://github.com/rust-lang/rust/commit/026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd"}, {"sha": "b59c958ba6d1a6834c8915ce8146f9a8e81557b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b59c958ba6d1a6834c8915ce8146f9a8e81557b6", "html_url": "https://github.com/rust-lang/rust/commit/b59c958ba6d1a6834c8915ce8146f9a8e81557b6"}], "stats": {"total": 157, "additions": 36, "deletions": 121}, "files": [{"sha": "2579e4b3174349d0cb0d734c56a5a8e1723f99c9", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 30, "deletions": 73, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/a924ef73bce6c20b84b1350b256a923b6d36c056/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a924ef73bce6c20b84b1350b256a923b6d36c056/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=a924ef73bce6c20b84b1350b256a923b6d36c056", "patch": "@@ -553,23 +553,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         )\n         .map_bound(|(trait_ref, _)| trait_ref);\n \n-        let Normalized { value: trait_ref, mut obligations } = ensure_sufficient_stack(|| {\n-            normalize_with_depth(\n-                self,\n-                obligation.param_env,\n-                obligation.cause.clone(),\n-                obligation.recursion_depth + 1,\n-                trait_ref,\n-            )\n-        });\n-\n-        obligations.extend(self.confirm_poly_trait_refs(\n-            obligation.cause.clone(),\n-            obligation.param_env,\n-            obligation.predicate.to_poly_trait_ref(),\n-            trait_ref,\n-        )?);\n-        Ok(ImplSourceFnPointerData { fn_ty: self_ty, nested: obligations })\n+        let nested = self.confirm_poly_trait_refs(obligation, trait_ref)?;\n+        Ok(ImplSourceFnPointerData { fn_ty: self_ty, nested })\n     }\n \n     fn confirm_trait_alias_candidate(\n@@ -616,26 +601,11 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         debug!(?obligation, ?generator_def_id, ?substs, \"confirm_generator_candidate\");\n \n         let trait_ref = self.generator_trait_ref_unnormalized(obligation, substs);\n-        let Normalized { value: trait_ref, mut obligations } = ensure_sufficient_stack(|| {\n-            normalize_with_depth(\n-                self,\n-                obligation.param_env,\n-                obligation.cause.clone(),\n-                obligation.recursion_depth + 1,\n-                trait_ref,\n-            )\n-        });\n \n-        debug!(?trait_ref, ?obligations, \"generator candidate obligations\");\n-\n-        obligations.extend(self.confirm_poly_trait_refs(\n-            obligation.cause.clone(),\n-            obligation.param_env,\n-            obligation.predicate.to_poly_trait_ref(),\n-            trait_ref,\n-        )?);\n+        let nested = self.confirm_poly_trait_refs(obligation, trait_ref)?;\n+        debug!(?trait_ref, ?nested, \"generator candidate obligations\");\n \n-        Ok(ImplSourceGeneratorData { generator_def_id, substs, nested: obligations })\n+        Ok(ImplSourceGeneratorData { generator_def_id, substs, nested })\n     }\n \n     #[instrument(skip(self), level = \"debug\")]\n@@ -657,52 +627,23 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             _ => bug!(\"closure candidate for non-closure {:?}\", obligation),\n         };\n \n-        let obligation_predicate = obligation.predicate;\n-        let Normalized { value: obligation_predicate, mut obligations } =\n-            ensure_sufficient_stack(|| {\n-                normalize_with_depth(\n-                    self,\n-                    obligation.param_env,\n-                    obligation.cause.clone(),\n-                    obligation.recursion_depth + 1,\n-                    obligation_predicate,\n-                )\n-            });\n-\n         let trait_ref = self.closure_trait_ref_unnormalized(obligation, substs);\n-        let Normalized { value: trait_ref, obligations: trait_ref_obligations } =\n-            ensure_sufficient_stack(|| {\n-                normalize_with_depth(\n-                    self,\n-                    obligation.param_env,\n-                    obligation.cause.clone(),\n-                    obligation.recursion_depth + 1,\n-                    trait_ref,\n-                )\n-            });\n+        let mut nested = self.confirm_poly_trait_refs(obligation, trait_ref)?;\n \n-        debug!(?closure_def_id, ?trait_ref, ?obligations, \"confirm closure candidate obligations\");\n-\n-        obligations.extend(trait_ref_obligations);\n-        obligations.extend(self.confirm_poly_trait_refs(\n-            obligation.cause.clone(),\n-            obligation.param_env,\n-            obligation_predicate.to_poly_trait_ref(),\n-            trait_ref,\n-        )?);\n+        debug!(?closure_def_id, ?trait_ref, ?nested, \"confirm closure candidate obligations\");\n \n         // FIXME: Chalk\n \n         if !self.tcx().sess.opts.debugging_opts.chalk {\n-            obligations.push(Obligation::new(\n+            nested.push(Obligation::new(\n                 obligation.cause.clone(),\n                 obligation.param_env,\n                 ty::Binder::dummy(ty::PredicateKind::ClosureKind(closure_def_id, substs, kind))\n                     .to_predicate(self.tcx()),\n             ));\n         }\n \n-        Ok(ImplSourceClosureData { closure_def_id, substs, nested: obligations })\n+        Ok(ImplSourceClosureData { closure_def_id, substs, nested })\n     }\n \n     /// In the case of closure types and fn pointers,\n@@ -733,15 +674,31 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     #[instrument(skip(self), level = \"trace\")]\n     fn confirm_poly_trait_refs(\n         &mut self,\n-        obligation_cause: ObligationCause<'tcx>,\n-        obligation_param_env: ty::ParamEnv<'tcx>,\n-        obligation_trait_ref: ty::PolyTraitRef<'tcx>,\n+        obligation: &TraitObligation<'tcx>,\n         expected_trait_ref: ty::PolyTraitRef<'tcx>,\n     ) -> Result<Vec<PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n+        let obligation_trait_ref = obligation.predicate.to_poly_trait_ref();\n+        // Normalize the obligation and expected trait refs together, because why not\n+        let Normalized { obligations: nested, value: (obligation_trait_ref, expected_trait_ref) } =\n+            ensure_sufficient_stack(|| {\n+                self.infcx.commit_unconditionally(|_| {\n+                    normalize_with_depth(\n+                        self,\n+                        obligation.param_env,\n+                        obligation.cause.clone(),\n+                        obligation.recursion_depth + 1,\n+                        (obligation_trait_ref, expected_trait_ref),\n+                    )\n+                })\n+            });\n+\n         self.infcx\n-            .at(&obligation_cause, obligation_param_env)\n+            .at(&obligation.cause, obligation.param_env)\n             .sup(obligation_trait_ref, expected_trait_ref)\n-            .map(|InferOk { obligations, .. }| obligations)\n+            .map(|InferOk { mut obligations, .. }| {\n+                obligations.extend(nested);\n+                obligations\n+            })\n             .map_err(|e| OutputTypeParameterMismatch(expected_trait_ref, obligation_trait_ref, e))\n     }\n "}, {"sha": "ce196dcbd863d34bacf061bee3c9621da85b7282", "filename": "src/test/ui/generic-associated-types/bugs/issue-88382.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a924ef73bce6c20b84b1350b256a923b6d36c056/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a924ef73bce6c20b84b1350b256a923b6d36c056/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fbugs%2Fissue-88382.stderr?ref=a924ef73bce6c20b84b1350b256a923b6d36c056", "patch": "@@ -2,18 +2,18 @@ error[E0631]: type mismatch in function arguments\n   --> $DIR/issue-88382.rs:28:40\n    |\n LL |     do_something(SomeImplementation(), test);\n-   |     ------------                       ^^^^ expected signature of `for<'a> fn(&mut <SomeImplementation as Iterable>::Iterator<'a>) -> _`\n+   |     ------------                       ^^^^ expected signature of `for<'r> fn(&'r mut std::iter::Empty<usize>) -> _`\n    |     |\n    |     required by a bound introduced by this call\n ...\n LL | fn test<'a, I: Iterable>(_: &mut I::Iterator<'a>) {}\n-   | ------------------------------------------------- found signature of `for<'r> fn(&'r mut std::iter::Empty<usize>) -> _`\n+   | ------------------------------------------------- found signature of `for<'r, 'a> fn(&'r mut <_ as Iterable>::Iterator<'a>) -> _`\n    |\n note: required by a bound in `do_something`\n-  --> $DIR/issue-88382.rs:22:56\n+  --> $DIR/issue-88382.rs:22:48\n    |\n LL | fn do_something<I: Iterable>(i: I, mut f: impl for<'a> Fn(&mut I::Iterator<'a>)) {\n-   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `do_something`\n+   |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `do_something`\n \n error: aborting due to previous error\n "}, {"sha": "05315b3f9f5e9931275c7dbc590c99ba4b6a7bfc", "filename": "src/test/ui/higher-rank-trait-bounds/issue-60283.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a924ef73bce6c20b84b1350b256a923b6d36c056/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-60283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a924ef73bce6c20b84b1350b256a923b6d36c056/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-60283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-60283.rs?ref=a924ef73bce6c20b84b1350b256a923b6d36c056", "patch": "@@ -1,3 +1,5 @@\n+// check-pass\n+\n pub trait Trait<'a> {\n     type Item;\n }\n@@ -15,6 +17,4 @@ where\n \n fn main() {\n     foo((), drop)\n-    //~^ ERROR type mismatch in function arguments\n-    //~| ERROR size for values of type `<() as Trait<'_>>::Item` cannot be known at compilation time\n }"}, {"sha": "34893cd8f19d908ffcc7f8b93750145dc5bda854", "filename": "src/test/ui/higher-rank-trait-bounds/issue-60283.stderr", "status": "removed", "additions": 0, "deletions": 42, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-60283.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-60283.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-60283.stderr?ref=026d8ce7f5f66ba6fbb8aaf4babb533e95ee3efd", "patch": "@@ -1,42 +0,0 @@\n-error[E0631]: type mismatch in function arguments\n-  --> $DIR/issue-60283.rs:17:13\n-   |\n-LL |     foo((), drop)\n-   |     ---     ^^^^\n-   |     |       |\n-   |     |       expected signature of `for<'a> fn(<() as Trait<'a>>::Item) -> _`\n-   |     |       found signature of `fn(()) -> _`\n-   |     required by a bound introduced by this call\n-   |\n-note: required by a bound in `foo`\n-  --> $DIR/issue-60283.rs:12:16\n-   |\n-LL | pub fn foo<T, F>(_: T, _: F)\n-   |        --- required by a bound in this\n-...\n-LL |     F: for<'a> FnMut(<T as Trait<'a>>::Item),\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `foo`\n-\n-error[E0277]: the size for values of type `<() as Trait<'_>>::Item` cannot be known at compilation time\n-  --> $DIR/issue-60283.rs:17:13\n-   |\n-LL |     foo((), drop)\n-   |     ---     ^^^^ doesn't have a size known at compile-time\n-   |     |\n-   |     required by a bound introduced by this call\n-   |\n-   = help: the trait `Sized` is not implemented for `<() as Trait<'_>>::Item`\n-note: required by a bound in `std::mem::drop`\n-  --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n-   |\n-LL | pub fn drop<T>(_x: T) {}\n-   |             ^ required by this bound in `std::mem::drop`\n-help: consider further restricting the associated type\n-   |\n-LL | fn main() where <() as Trait<'_>>::Item: Sized {\n-   |           ++++++++++++++++++++++++++++++++++++\n-\n-error: aborting due to 2 previous errors\n-\n-Some errors have detailed explanations: E0277, E0631.\n-For more information about an error, try `rustc --explain E0277`."}]}