{"sha": "fe0ab7f1b21e8ade84beb2b83132bdb2092ab166", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMGFiN2YxYjIxZThhZGU4NGJlYjJiODMxMzJiZGIyMDkyYWIxNjY=", "commit": {"author": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-01-05T14:53:07Z"}, "committer": {"name": "Frank Steffahn", "email": "frank.steffahn@stu.uni-kiel.de", "date": "2021-01-21T18:39:21Z"}, "message": "Make documentation of which items the prelude exports more readably.", "tree": {"sha": "2060584d87002ee35e337c775f267160ea8dde1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2060584d87002ee35e337c775f267160ea8dde1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe0ab7f1b21e8ade84beb2b83132bdb2092ab166", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe0ab7f1b21e8ade84beb2b83132bdb2092ab166", "html_url": "https://github.com/rust-lang/rust/commit/fe0ab7f1b21e8ade84beb2b83132bdb2092ab166", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe0ab7f1b21e8ade84beb2b83132bdb2092ab166/comments", "author": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steffahn", "id": 3986214, "node_id": "MDQ6VXNlcjM5ODYyMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3986214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steffahn", "html_url": "https://github.com/steffahn", "followers_url": "https://api.github.com/users/steffahn/followers", "following_url": "https://api.github.com/users/steffahn/following{/other_user}", "gists_url": "https://api.github.com/users/steffahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/steffahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steffahn/subscriptions", "organizations_url": "https://api.github.com/users/steffahn/orgs", "repos_url": "https://api.github.com/users/steffahn/repos", "events_url": "https://api.github.com/users/steffahn/events{/privacy}", "received_events_url": "https://api.github.com/users/steffahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a243ad280a4ac57c1b8427e30e31c5b505cf10de", "url": "https://api.github.com/repos/rust-lang/rust/commits/a243ad280a4ac57c1b8427e30e31c5b505cf10de", "html_url": "https://github.com/rust-lang/rust/commit/a243ad280a4ac57c1b8427e30e31c5b505cf10de"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "e0f26c3a4cf261ce55dd8edaaf6497260646b9ee", "filename": "library/std/src/prelude/mod.rs", "status": "modified", "additions": 33, "deletions": 33, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/fe0ab7f1b21e8ade84beb2b83132bdb2092ab166/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe0ab7f1b21e8ade84beb2b83132bdb2092ab166/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprelude%2Fmod.rs?ref=fe0ab7f1b21e8ade84beb2b83132bdb2092ab166", "patch": "@@ -1,4 +1,4 @@\n-//! # The Rust Prelude\n+//! The Rust Prelude.\n //!\n //! Rust comes with a variety of things in its standard library. However, if\n //! you had to manually import every single thing that you used, it would be\n@@ -28,53 +28,53 @@\n //! The current version of the prelude (version 1) lives in\n //! [`std::prelude::v1`], and re-exports the following:\n //!\n-//! * [`std::marker`]::{[`Copy`], [`Send`], [`Sized`], [`Sync`], [`Unpin`]}:\n+//! * <code>[std::marker]::{[Copy], [Send], [Sized], [Sync], [Unpin]}</code>,\n //!   marker traits that indicate fundamental properties of types.\n-//! * [`std::ops`]::{[`Drop`], [`Fn`], [`FnMut`], [`FnOnce`]}: various\n+//! * <code>[std::ops]::{[Drop], [Fn], [FnMut], [FnOnce]}</code>, various\n //!   operations for both destructors and overloading `()`.\n-//! * [`std::mem`]::[`drop`][`mem::drop`]: a convenience function for explicitly\n+//! * <code>[std::mem]::[drop][mem::drop]</code>, a convenience function for explicitly\n //!   dropping a value.\n-//! * [`std::boxed`]::[`Box`]: a way to allocate values on the heap.\n-//! * [`std::borrow`]::[`ToOwned`]: the conversion trait that defines\n+//! * <code>[std::boxed]::[Box]</code>, a way to allocate values on the heap.\n+//! * <code>[std::borrow]::[ToOwned]</code>, the conversion trait that defines\n //!   [`to_owned`], the generic method for creating an owned type from a\n //!   borrowed type.\n-//! * [`std::clone`]::[`Clone`]: the ubiquitous trait that defines\n-//!   [`clone`][`Clone::clone`], the method for producing a copy of a value.\n-//! * [`std::cmp`]::{[`PartialEq`], [`PartialOrd`], [`Eq`], [`Ord`]}: the\n+//! * <code>[std::clone]::[Clone]</code>, the ubiquitous trait that defines\n+//!   [`clone`][Clone::clone], the method for producing a copy of a value.\n+//! * <code>[std::cmp]::{[PartialEq], [PartialOrd], [Eq], [Ord]}</code>, the\n //!   comparison traits, which implement the comparison operators and are often\n //!   seen in trait bounds.\n-//! * [`std::convert`]::{[`AsRef`], [`AsMut`], [`Into`], [`From`]}: generic\n+//! * <code>[std::convert]::{[AsRef], [AsMut], [Into], [From]}</code>, generic\n //!   conversions, used by savvy API authors to create overloaded methods.\n-//! * [`std::default`]::[`Default`], types that have default values.\n-//! * [`std::iter`]::{[`Iterator`], [`Extend`], [`IntoIterator`],\n-//!   [`DoubleEndedIterator`], [`ExactSizeIterator`]}: iterators of various\n+//! * <code>[std::default]::[Default]</code>, types that have default values.\n+//! * <code>[std::iter]::{[Iterator], [Extend], [IntoIterator], [DoubleEndedIterator], [ExactSizeIterator]}</code>,\n+//!   iterators of various\n //!   kinds.\n-//! * [`std::option`]::[`Option`]::{[`self`][`Option`], [`Some`], [`None`]}, a\n+//! * <code>[std::option]::[Option]::{[self][Option], [Some], [None]}</code>, a\n //!   type which expresses the presence or absence of a value. This type is so\n //!   commonly used, its variants are also exported.\n-//! * [`std::result`]::[`Result`]::{[`self`][`Result`], [`Ok`], [`Err`]}: a type\n+//! * <code>[std::result]::[Result]::{[self][Result], [Ok], [Err]}</code>, a type\n //!   for functions that may succeed or fail. Like [`Option`], its variants are\n //!   exported as well.\n-//! * [`std::string`]::{[`String`], [`ToString`]}: heap-allocated strings.\n-//! * [`std::vec`]::[`Vec`]: a growable, heap-allocated vector.\n+//! * <code>[std::string]::{[String], [ToString]}</code>, heap-allocated strings.\n+//! * <code>[std::vec]::[Vec]</code>, a growable, heap-allocated vector.\n //!\n-//! [`mem::drop`]: crate::mem::drop\n-//! [`std::borrow`]: crate::borrow\n-//! [`std::boxed`]: crate::boxed\n-//! [`std::clone`]: crate::clone\n-//! [`std::cmp`]: crate::cmp\n-//! [`std::convert`]: crate::convert\n-//! [`std::default`]: crate::default\n-//! [`std::iter`]: crate::iter\n-//! [`std::marker`]: crate::marker\n-//! [`std::mem`]: crate::mem\n-//! [`std::ops`]: crate::ops\n-//! [`std::option`]: crate::option\n+//! [mem::drop]: crate::mem::drop\n+//! [std::borrow]: crate::borrow\n+//! [std::boxed]: crate::boxed\n+//! [std::clone]: crate::clone\n+//! [std::cmp]: crate::cmp\n+//! [std::convert]: crate::convert\n+//! [std::default]: crate::default\n+//! [std::iter]: crate::iter\n+//! [std::marker]: crate::marker\n+//! [std::mem]: crate::mem\n+//! [std::ops]: crate::ops\n+//! [std::option]: crate::option\n //! [`std::prelude::v1`]: v1\n-//! [`std::result`]: crate::result\n-//! [`std::slice`]: crate::slice\n-//! [`std::string`]: crate::string\n-//! [`std::vec`]: mod@crate::vec\n+//! [std::result]: crate::result\n+//! [std::slice]: crate::slice\n+//! [std::string]: crate::string\n+//! [std::vec]: mod@crate::vec\n //! [`to_owned`]: crate::borrow::ToOwned::to_owned\n //! [book-closures]: ../../book/ch13-01-closures.html\n //! [book-dtor]: ../../book/ch15-03-drop.html"}]}