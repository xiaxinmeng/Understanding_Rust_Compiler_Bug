{"sha": "d557ff983f75ad21a90240dea0a80e318175b504", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NTdmZjk4M2Y3NWFkMjFhOTAyNDBkZWEwYTgwZTMxODE3NWI1MDQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-04-13T23:07:25Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2018-05-15T13:21:03Z"}, "message": "Eliminate ty::Generics::lifetimes()\n\nBegone lazy lifetime code!", "tree": {"sha": "ce641f4dd3cbe58b8a9a89375477e954f8ca785d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce641f4dd3cbe58b8a9a89375477e954f8ca785d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d557ff983f75ad21a90240dea0a80e318175b504", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d557ff983f75ad21a90240dea0a80e318175b504", "html_url": "https://github.com/rust-lang/rust/commit/d557ff983f75ad21a90240dea0a80e318175b504", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d557ff983f75ad21a90240dea0a80e318175b504/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b75f421ee912edc096c546b1fac19fd8990a180c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b75f421ee912edc096c546b1fac19fd8990a180c", "html_url": "https://github.com/rust-lang/rust/commit/b75f421ee912edc096c546b1fac19fd8990a180c"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "a83eb7fd354a376d9c5dd85cf75aa8cae36ffe5f", "filename": "src/librustc/infer/anon_types/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d557ff983f75ad21a90240dea0a80e318175b504/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d557ff983f75ad21a90240dea0a80e318175b504/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fanon_types%2Fmod.rs?ref=d557ff983f75ad21a90240dea0a80e318175b504", "patch": "@@ -14,7 +14,7 @@ use infer::outlives::free_region_map::FreeRegionRelations;\n use rustc_data_structures::fx::FxHashMap;\n use syntax::ast;\n use traits::{self, PredicateObligation};\n-use ty::{self, Ty, TyCtxt};\n+use ty::{self, Ty, TyCtxt, GenericParamDef};\n use ty::fold::{BottomUpFolder, TypeFoldable, TypeFolder};\n use ty::outlives::Component;\n use ty::subst::{Kind, Substs, UnpackedKind};\n@@ -313,7 +313,13 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         // `['a]` for the first impl trait and `'b` for the\n         // second.\n         let mut least_region = None;\n-        for region_def in abstract_type_generics.lifetimes_depr() {\n+        for region_def in abstract_type_generics.params.iter().filter_map(|param| {\n+            if let GenericParamDef::Lifetime(lt) = param {\n+                Some(lt)\n+            } else {\n+                None\n+            }\n+        }) {\n             // Find the index of this region in the list of substitutions.\n             let index = region_def.index as usize;\n "}, {"sha": "680c03f02e1d5f6df3ec808de37e18e8688ca509", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d557ff983f75ad21a90240dea0a80e318175b504/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d557ff983f75ad21a90240dea0a80e318175b504/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=d557ff983f75ad21a90240dea0a80e318175b504", "patch": "@@ -847,16 +847,6 @@ impl<'a, 'gcx, 'tcx> Generics {\n         count\n     }\n \n-    pub fn lifetimes_depr(&self) -> impl DoubleEndedIterator<Item = &RegionParamDef> {\n-        self.params.iter().filter_map(|p| {\n-            if let GenericParamDef::Lifetime(lt) = p {\n-                Some(lt)\n-            } else {\n-                None\n-            }\n-        })\n-    }\n-\n     pub fn types_depr(&self) -> impl DoubleEndedIterator<Item = &TypeParamDef> {\n         self.params.iter().filter_map(|p| {\n             if let GenericParamDef::Type(ty) = p {"}, {"sha": "01e2bc3137433eadf53ef0df626c20cdd39736e1", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d557ff983f75ad21a90240dea0a80e318175b504/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d557ff983f75ad21a90240dea0a80e318175b504/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=d557ff983f75ad21a90240dea0a80e318175b504", "patch": "@@ -104,14 +104,6 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     ctp::identify_constrained_type_params(\n         tcx, &impl_predicates.predicates.as_slice(), impl_trait_ref, &mut input_parameters);\n \n-    // Disallow ANY unconstrained type parameters.\n-    for (ty_param, param) in impl_generics.types_depr().zip(impl_hir_generics.ty_params()) {\n-        let param_ty = ty::ParamTy::for_def(ty_param);\n-        if !input_parameters.contains(&ctp::Parameter::from(param_ty)) {\n-            report_unused_parameter(tcx, param.span, \"type\", &param_ty.to_string());\n-        }\n-    }\n-\n     // Disallow unconstrained lifetimes, but only if they appear in assoc types.\n     let lifetimes_in_associated_types: FxHashSet<_> = impl_item_refs.iter()\n         .map(|item_ref| tcx.hir.local_def_id(item_ref.id.node_id))\n@@ -122,13 +114,27 @@ fn enforce_impl_params_are_constrained<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         .flat_map(|def_id| {\n             ctp::parameters_for(&tcx.type_of(def_id), true)\n         }).collect();\n-    for (ty_lt, lt) in impl_generics.lifetimes_depr().zip(impl_hir_generics.lifetimes()) {\n-        let param = ctp::Parameter::from(ty_lt.to_early_bound_region_data());\n \n-        if lifetimes_in_associated_types.contains(&param) && // (*)\n-            !input_parameters.contains(&param) {\n-            report_unused_parameter(tcx, lt.lifetime.span,\n-                                    \"lifetime\", &lt.lifetime.name.name().to_string());\n+    for (ty_param, hir_param) in impl_generics.params.iter()\n+                                              .zip(impl_hir_generics.params.iter()) {\n+        match (ty_param, hir_param) {\n+            // Disallow ANY unconstrained type parameters.\n+            (ty::GenericParamDef::Type(ty_ty), hir::GenericParamDef::Type(hir_ty)) => {\n+                let param_ty = ty::ParamTy::for_def(ty_ty);\n+                if !input_parameters.contains(&ctp::Parameter::from(param_ty)) {\n+                    report_unused_parameter(tcx, hir_ty.span, \"type\", &param_ty.to_string());\n+                }\n+            }\n+            (ty::GenericParamDef::Lifetime(ty_lt), hir::GenericParamDef::Lifetime(hir_lt)) => {\n+                let param = ctp::Parameter::from(ty_lt.to_early_bound_region_data());\n+                if lifetimes_in_associated_types.contains(&param) && // (*)\n+                    !input_parameters.contains(&param) {\n+                    report_unused_parameter(tcx, hir_lt.lifetime.span,\n+                                            \"lifetime\", &hir_lt.lifetime.name.name().to_string());\n+                }\n+            }\n+            (ty::GenericParamDef::Type(_), _) => continue,\n+            (ty::GenericParamDef::Lifetime(_), _) => continue,\n         }\n     }\n "}, {"sha": "6848b25097b8d7e7a6e978773bebf78a24247a41", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d557ff983f75ad21a90240dea0a80e318175b504/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d557ff983f75ad21a90240dea0a80e318175b504/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=d557ff983f75ad21a90240dea0a80e318175b504", "patch": "@@ -1849,10 +1849,15 @@ impl<'a, 'tcx> Clean<Generics> for (&'a ty::Generics,\n         // and instead see `where T: Foo + Bar + Sized + 'a`\n \n         Generics {\n-            params: gens.lifetimes_depr()\n-                        .into_iter()\n-                        .map(|lp| GenericParamDef::Lifetime(lp.clean(cx)))\n-                        .chain(\n+            params: gens.params\n+                        .iter()\n+                        .flat_map(|param| {\n+                            if let ty::GenericParamDef::Lifetime(lt) = param {\n+                                Some(GenericParamDef::Lifetime(lt.clean(cx)))\n+                            } else {\n+                                None\n+                            }\n+                        }).chain(\n                             simplify::ty_params(stripped_typarams)\n                                 .into_iter()\n                                 .map(|tp| GenericParamDef::Type(tp))"}]}