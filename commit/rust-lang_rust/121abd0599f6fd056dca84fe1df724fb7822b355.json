{"sha": "121abd0599f6fd056dca84fe1df724fb7822b355", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyMWFiZDA1OTlmNmZkMDU2ZGNhODRmZTFkZjcyNGZiNzgyMmIzNTU=", "commit": {"author": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-04-17T13:33:39Z"}, "committer": {"name": "flip1995", "email": "uwdkn@student.kit.edu", "date": "2018-05-02T10:05:13Z"}, "message": "make it compile again", "tree": {"sha": "ac94e33099b35abc0bd5e7302419c4f2391793cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac94e33099b35abc0bd5e7302419c4f2391793cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/121abd0599f6fd056dca84fe1df724fb7822b355", "comment_count": 0, "verification": {"verified": false, "reason": "unverified_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz66kzxK9mXB0K2lyZ1erJvcvAIQFAlrpjV0ACgkQZ1erJvcv\nAIQ5fw/9Hl5Iavp9PFs/PvGUAER/3wusX7oewXoBtkQ5IJUikpQHqKy+4G7r5Rva\nMBra144/rSJRvoSAbMjXH+XK+5AhwqwQkPkjwGSLCPdR9Q9vbR9IjIM6Etgitmm/\nqcRfFpH2PqwEkycVvr+NeMK8KvMR6aviLm/2o51k/dv8ZGlmlkmyr3U4yxzX9TdB\nMc7kofRsrFwqWblRrEdhX5TrivYiGCx8PV88oGsu5i69dPMk7KSHmbjK/LcbGPXG\n90Cgj1MzPw2W8KWZI7HOwR+fqS1MhjfKhfGzJJDXnap0L853UUhRTDWejGgctIrp\nqk3MXXRxEXwhMtPxfmesbFr33M0nJa4rdw07msv132WkgzOHfMKcqAWPiZexI6MK\nXPSza5hWxLGr5gw7+cLTWrOKSbjOIP3Lfpy/kF+dXU4kDf3XfirNWCJ2M1wOizmg\nwTRtK5EHpLpNSttg1nHg+/SaVJg1+0dn3DV/r04bjLfTOR48D9wiV9vlk4A9SGNI\ntlsVCdKezlO47g9eyDZ8INv7z7L70W6rGiRpC2tcWNJiwn5qSEJUdV5cIkFxlqJj\nrKxXjSXBI80SplaOmcudMxAD0D+lmJ2SrS7UkGmiCVMagBfiDzlTbRsvOQvn0hts\nBvCaGpr0pZadu8wQ3Ls7X74FFdQyA10OT0XwdU5VKFKETU9jeCA=\n=waVv\n-----END PGP SIGNATURE-----", "payload": "tree ac94e33099b35abc0bd5e7302419c4f2391793cd\nparent 24a6284fcd1d40c0d8f8b58d29a672ec78cfa94b\nauthor flip1995 <uwdkn@student.kit.edu> 1523972019 +0200\ncommitter flip1995 <uwdkn@student.kit.edu> 1525255513 +0200\n\nmake it compile again\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/121abd0599f6fd056dca84fe1df724fb7822b355", "html_url": "https://github.com/rust-lang/rust/commit/121abd0599f6fd056dca84fe1df724fb7822b355", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/121abd0599f6fd056dca84fe1df724fb7822b355/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "24a6284fcd1d40c0d8f8b58d29a672ec78cfa94b", "url": "https://api.github.com/repos/rust-lang/rust/commits/24a6284fcd1d40c0d8f8b58d29a672ec78cfa94b", "html_url": "https://github.com/rust-lang/rust/commit/24a6284fcd1d40c0d8f8b58d29a672ec78cfa94b"}], "stats": {"total": 186, "additions": 92, "deletions": 94}, "files": [{"sha": "24a1256c9d35bdf16bdaccd11a99c563f1a99f33", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -308,7 +308,7 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n \n     fn check_used(&self, item: &hir::Item, target: Target) {\n         for attr in &item.attrs {\n-            if attr.name().map(|name| name == \"used\").unwrap_or(false) && target != Target::Static {\n+            if attr.name() == \"used\" && target != Target::Static {\n                 self.tcx.sess\n                     .span_err(attr.span, \"attribute must be applied to a `static` variable\");\n             }"}, {"sha": "1cf9b7bf4780e785a8a2b52a4035201fc7e465ce", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -216,7 +216,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for ast::Path {\n                                           hasher: &mut StableHasher<W>) {\n         self.segments.len().hash_stable(hcx, hasher);\n         for segment in &self.segments {\n-            segment.identifier.name.hash_stable(hcx, hasher);\n+            segment.ident.name.hash_stable(hcx, hasher);\n         }\n     }\n }"}, {"sha": "d158f52c643ceca2c2896acabe6c8cf02bd21add", "filename": "src/librustc/lint/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustc%2Flint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustc%2Flint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Flevels.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -221,7 +221,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                         continue\n                     }\n                 };\n-                let name = word.ident.name;\n+                let name = word.name();\n                 match store.check_lint_name(&name.as_str()) {\n                     CheckLintNameResult::Ok(ids) => {\n                         let src = LintSource::Node(name, li.span);\n@@ -260,7 +260,7 @@ impl<'a> LintLevelsBuilder<'a> {\n                                                 Some(li.span.into()),\n                                                 &msg);\n                         if name.as_str().chars().any(|c| c.is_uppercase()) {\n-                            let name_lower = name.as_str().to_lowercase();\n+                            let name_lower = name.as_str().to_lowercase().to_string();\n                             if let CheckLintNameResult::NoLint =\n                                     store.check_lint_name(&name_lower) {\n                                 db.emit();"}, {"sha": "dc97c941567059cd5912250a945af3fdc4f0e938", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -1683,7 +1683,7 @@ pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> ast::CrateConfig {\n                 early_error(ErrorOutputType::default(), &msg)\n             }\n \n-            (meta_item.ident.name, meta_item.value_str())\n+            (meta_item.name(), meta_item.value_str())\n         })\n         .collect::<ast::CrateConfig>()\n }"}, {"sha": "3cf7af30b3d551a0442f509f2a5279f2494cd5a3", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -190,7 +190,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n         for command in self.subcommands.iter().chain(Some(self)).rev() {\n             if let Some(ref condition) = command.condition {\n                 if !attr::eval_condition(condition, &tcx.sess.parse_sess, &mut |c| {\n-                    options.contains(&(c.ident.name.as_str().to_string(),\n+                    options.contains(&(c.name().as_str().to_string(),\n                                       match c.value_str().map(|s| s.as_str().to_string()) {\n                                           Some(s) => Some(s),\n                                           None => None"}, {"sha": "a1052ca6c3ca9520fc7cf8f4e38ebc106f8263a7", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -1060,7 +1060,7 @@ impl RustcDefaultCalls {\n                     let mut cfgs = Vec::new();\n                     for &(name, ref value) in sess.parse_sess.config.iter() {\n                         let gated_cfg = GatedCfg::gate(&ast::MetaItem {\n-                            name: ast::Path::from_ident(DUMMY_SP, name.to_ident()),\n+                            ident: ast::Path::from_ident(name.to_ident()),\n                             node: ast::MetaItemKind::Word,\n                             span: DUMMY_SP,\n                         });"}, {"sha": "38e891008f7308c073fb30b82c976418a4760b4e", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx> IfThisChanged<'a, 'tcx> {\n         for list_item in attr.meta_item_list().unwrap_or_default() {\n             match list_item.word() {\n                 Some(word) if value.is_none() =>\n-                    value = Some(word.ident.name),\n+                    value = Some(word.name()),\n                 _ =>\n                     // FIXME better-encapsulate meta_item (don't directly access `node`)\n                     span_bug!(list_item.span(), \"unexpected meta-item {:?}\", list_item.node),"}, {"sha": "4522a0b8624301fcdd426248107c82e187119c56", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -702,7 +702,7 @@ impl<'a> Resolver<'a> {\n                 match attr.meta_item_list() {\n                     Some(names) => for attr in names {\n                         if let Some(word) = attr.word() {\n-                            imports.imports.push((word.ident.name, attr.span()));\n+                            imports.imports.push((word.name(), attr.span()));\n                         } else {\n                             span_err!(self.session, attr.span(), E0466, \"bad macro import\");\n                         }"}, {"sha": "d5e0f95ddf4356ac3396314dc6614889c9095418", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -438,7 +438,7 @@ mod test {\n \n     fn dummy_meta_item_word(name: &str) -> MetaItem {\n         MetaItem {\n-            name: Path::from_ident(DUMMY_SP, Ident::from_str(name)),\n+            ident: Path::from_ident(Ident::from_str(name)),\n             node: MetaItemKind::Word,\n             span: DUMMY_SP,\n         }\n@@ -447,7 +447,7 @@ mod test {\n     macro_rules! dummy_meta_item_list {\n         ($name:ident, [$($list:ident),* $(,)*]) => {\n             MetaItem {\n-                name: Path::from_ident(DUMMY_SP, Ident::from_str(stringify!($name))),\n+                ident: Path::from_ident(Ident::from_str(stringify!($name))),\n                 node: MetaItemKind::List(vec![\n                     $(\n                         dummy_spanned(NestedMetaItemKind::MetaItem(\n@@ -461,7 +461,7 @@ mod test {\n \n         ($name:ident, [$($list:expr),* $(,)*]) => {\n             MetaItem {\n-                name: Path::from_ident(DUMMY_SP, Ident::from_str(stringify!($name))),\n+                ident: Path::from_ident(Ident::from_str(stringify!($name))),\n                 node: MetaItemKind::List(vec![\n                     $(\n                         dummy_spanned(NestedMetaItemKind::MetaItem($list)),\n@@ -601,7 +601,7 @@ mod test {\n             assert_eq!(Cfg::parse(&mi), Ok(word_cfg(\"all\")));\n \n             let mi = MetaItem {\n-                name: Path::from_ident(DUMMY_SP, Ident::from_str(\"all\")),\n+                ident: Path::from_ident(Ident::from_str(\"all\")),\n                 node: MetaItemKind::NameValue(dummy_spanned(LitKind::Str(\n                     Symbol::intern(\"done\"),\n                     StrStyle::Cooked,\n@@ -636,7 +636,7 @@ mod test {\n     fn test_parse_err() {\n         with_globals(|| {\n             let mi = MetaItem {\n-                name: Path::from_ident(DUMMY_SP, Ident::from_str(\"foo\")),\n+                ident: Path::from_ident(Ident::from_str(\"foo\")),\n                 node: MetaItemKind::NameValue(dummy_spanned(LitKind::Bool(false))),\n                 span: DUMMY_SP,\n             };"}, {"sha": "e9520573f8bd6dca32321b0e4275ee9c1d9f6a6c", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -3284,7 +3284,7 @@ fn item_enum(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n }\n \n fn render_attribute(attr: &ast::MetaItem) -> Option<String> {\n-    let name = attr.ident.name;\n+    let name = attr.name();\n \n     if attr.is_word() {\n         Some(format!(\"{}\", name))"}, {"sha": "f8cd6103bdfa110e4e421ba0e5c129b1b2f4115c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -477,7 +477,7 @@ pub enum NestedMetaItemKind {\n /// E.g. `#[test]`, `#[derive(..)]`, `#[rustfmt::skip]` or `#[feature = \"foo\"]`\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct MetaItem {\n-    pub name: Path,\n+    pub ident: Path,\n     pub node: MetaItemKind,\n     pub span: Span,\n }"}, {"sha": "82e04ff32ca98a3d300e074b0b01ecf9ffe3026a", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 32, "deletions": 51, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -18,7 +18,7 @@ use ast;\n use ast::{AttrId, Attribute, Name, Ident};\n use ast::{MetaItem, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use ast::{Lit, LitKind, Expr, ExprKind, Item, Local, Stmt, StmtKind};\n-use codemap::{Spanned, respan, dummy_spanned};\n+use codemap::{BytePos, Spanned, respan, dummy_spanned};\n use syntax_pos::Span;\n use errors::Handler;\n use feature_gate::{Features, GatedCfg};\n@@ -111,7 +111,7 @@ const RUST_KNOWN_TOOL: &[&str] = &[\"clippy\", \"rustfmt\"];\n \n pub fn is_known_tool(attr: &Attribute) -> bool {\n     let tool_name =\n-        attr.path.segments.iter().next().expect(\"empty path in attribute\").identifier.name;\n+        attr.path.segments.iter().next().expect(\"empty path in attribute\").ident.name;\n     RUST_KNOWN_TOOL.contains(&tool_name.as_str().as_ref())\n }\n \n@@ -213,7 +213,7 @@ impl NestedMetaItem {\n }\n \n fn name_from_path(path: &ast::Path) -> Name {\n-    path.segments.last().expect(\"empty path in attribute\").identifier.name\n+    path.segments.last().expect(\"empty path in attribute\").ident.name\n }\n \n impl Attribute {\n@@ -266,7 +266,7 @@ impl Attribute {\n \n impl MetaItem {\n     pub fn name(&self) -> Name {\n-        name_from_path(&self.name)\n+        name_from_path(&self.ident)\n     }\n \n     pub fn value_str(&self) -> Option<Symbol> {\n@@ -315,7 +315,7 @@ impl Attribute {\n     pub fn meta(&self) -> Option<MetaItem> {\n         let mut tokens = self.tokens.trees().peekable();\n         Some(MetaItem {\n-            name: self.path.clone(),\n+            ident: self.path.clone(),\n             node: if let Some(node) = MetaItemKind::from_tokens(&mut tokens) {\n                 if tokens.peek().is_some() {\n                     return None;\n@@ -361,7 +361,7 @@ impl Attribute {\n \n     pub fn parse_meta<'a>(&self, sess: &'a ParseSess) -> PResult<'a, MetaItem> {\n         Ok(MetaItem {\n-            name: self.path.clone(),\n+            ident: self.path.clone(),\n             node: self.parse(sess, |parser| parser.parse_meta_item_kind())?,\n             span: self.span,\n         })\n@@ -399,41 +399,19 @@ pub fn mk_name_value_item_str(ident: Ident, value: Spanned<Symbol>) -> MetaItem\n }\n \n pub fn mk_name_value_item(span: Span, ident: Ident, value: ast::Lit) -> MetaItem {\n-    MetaItem { ident, span, node: MetaItemKind::NameValue(value) }\n+    MetaItem { ident: ast::Path::from_ident(ident), span, node: MetaItemKind::NameValue(value) }\n }\n \n pub fn mk_list_item(span: Span, ident: Ident, items: Vec<NestedMetaItem>) -> MetaItem {\n-    MetaItem { ident, span, node: MetaItemKind::List(items) }\n+    MetaItem { ident: ast::Path::from_ident(ident), span, node: MetaItemKind::List(items) }\n }\n \n pub fn mk_word_item(ident: Ident) -> MetaItem {\n-    MetaItem { ident, span: ident.span, node: MetaItemKind::Word }\n+    MetaItem { ident: ast::Path::from_ident(ident), span: ident.span, node: MetaItemKind::Word }\n }\n \n-pub fn mk_word_item(name: Name) -> MetaItem {\n-    mk_spanned_word_item(DUMMY_SP, name)\n-}\n-\n-macro_rules! mk_spanned_meta_item {\n-    ($sp:ident, $name:ident, $node:expr) => {\n-        MetaItem {\n-            span: $sp,\n-            name: ast::Path::from_ident($sp, ast::Ident::with_empty_ctxt($name)),\n-            node: $node,\n-        }\n-    }\n-}\n-\n-pub fn mk_spanned_name_value_item(sp: Span, name: Name, value: ast::Lit) -> MetaItem {\n-    mk_spanned_meta_item!(sp, name, MetaItemKind::NameValue(value))\n-}\n-\n-pub fn mk_spanned_list_item(sp: Span, name: Name, items: Vec<NestedMetaItem>) -> MetaItem {\n-    mk_spanned_meta_item!(sp, name, MetaItemKind::List(items))\n-}\n-\n-pub fn mk_spanned_word_item(sp: Span, name: Name) -> MetaItem {\n-    mk_spanned_meta_item!(sp, name, MetaItemKind::Word)\n+pub fn mk_nested_word_item(ident: Ident) -> NestedMetaItem {\n+    respan(ident.span, NestedMetaItemKind::MetaItem(mk_word_item(ident)))\n }\n \n pub fn mk_attr_id() -> AttrId {\n@@ -457,7 +435,7 @@ pub fn mk_spanned_attr_inner(sp: Span, id: AttrId, item: MetaItem) -> Attribute\n     Attribute {\n         id,\n         style: ast::AttrStyle::Inner,\n-        path: item.name,\n+        path: item.ident,\n         tokens: item.node.tokens(item.span),\n         is_sugared_doc: false,\n         span: sp,\n@@ -475,7 +453,7 @@ pub fn mk_spanned_attr_outer(sp: Span, id: AttrId, item: MetaItem) -> Attribute\n     Attribute {\n         id,\n         style: ast::AttrStyle::Outer,\n-        path: item.name,\n+        path: item.ident,\n         tokens: item.node.tokens(item.span),\n         is_sugared_doc: false,\n         span: sp,\n@@ -1082,7 +1060,7 @@ pub fn find_repr_attrs(diagnostic: &Handler, attr: &Attribute) -> Vec<ReprAttr>\n                     }\n                 } else {\n                     if let Some(meta_item) = item.meta_item() {\n-                        if meta_item.ident.name == \"align\" {\n+                        if meta_item.name() == \"align\" {\n                             if let MetaItemKind::NameValue(ref value) = meta_item.node {\n                                 recognised = true;\n                                 let mut err = struct_span_err!(diagnostic, item.span, E0693,\n@@ -1165,14 +1143,17 @@ impl MetaItem {\n         let mut idents = vec![];\n         let mut last_pos = BytePos(0 as u32);\n         // FIXME: Share code with `parse_path`.\n-        for (i, segment) in self.name.segments.iter().enumerate() {\n+        for (i, segment) in self.ident.segments.iter().enumerate() {\n             let is_first = i == 0;\n             if !is_first {\n-                let mod_sep_span = Span::new(last_pos, segment.span.lo(), segment.span.ctxt());\n+                let mod_sep_span = Span::new(last_pos,\n+                                             segment.ident.span.lo(),\n+                                             segment.ident.span.ctxt());\n                 idents.push(TokenTree::Token(mod_sep_span, Token::ModSep).into());\n             }\n-            idents.push(TokenTree::Token(segment.span, Token::Ident(segment.identifier)).into());\n-            last_pos = segment.span.hi();\n+            idents.push(TokenTree::Token(segment.ident.span,\n+                                         Token::from_ast_ident(segment.ident)).into());\n+            last_pos = segment.ident.span.hi();\n         }\n         idents.push(self.node.tokens(self.span));\n         TokenStream::concat(idents)\n@@ -1181,14 +1162,14 @@ impl MetaItem {\n     fn from_tokens<I>(tokens: &mut iter::Peekable<I>) -> Option<MetaItem>\n         where I: Iterator<Item = TokenTree>,\n     {\n-        let name = match tokens.next() {\n-            Some(TokenTree::Token(span, Token::Ident(ident))) => {\n+        let ident = match tokens.next() {\n+            Some(TokenTree::Token(span, Token::Ident(ident, _))) => {\n                 if let Some(TokenTree::Token(_, Token::ModSep)) = tokens.peek() {\n                     tokens.next();\n                     let mut segments = vec![];\n                     loop {\n-                        if let Some(TokenTree::Token(span, Token::Ident(ident))) = tokens.next() {\n-                            segments.push(ast::PathSegment::from_ident(ident, span));\n+                        if let Some(TokenTree::Token(_, Token::Ident(ident, _))) = tokens.next() {\n+                            segments.push(ast::PathSegment::from_ident(ident));\n                         } else {\n                             return None;\n                         }\n@@ -1200,12 +1181,12 @@ impl MetaItem {\n                     }\n                     ast::Path { span, segments }\n                 } else {\n-                    ast::Path::from_ident(span, ident)\n+                    ast::Path::from_ident(ident)\n                 }\n             }\n             Some(TokenTree::Token(_, Token::Interpolated(ref nt))) => match nt.0 {\n-                token::Nonterminal::NtIdent(ident) => {\n-                    ast::Path::from_ident(ident.span, ident.node)\n+                token::Nonterminal::NtIdent(ident, _) => {\n+                    ast::Path::from_ident(ident)\n                 }\n                 token::Nonterminal::NtMeta(ref meta) => return Some(meta.clone()),\n                 token::Nonterminal::NtPath(ref path) => path.clone(),\n@@ -1217,11 +1198,11 @@ impl MetaItem {\n         let node = MetaItemKind::from_tokens(tokens)?;\n         let hi = match node {\n             MetaItemKind::NameValue(ref lit) => lit.span.hi(),\n-            MetaItemKind::List(..) => list_closing_paren_pos.unwrap_or(name.span.hi()),\n-            _ => name.span.hi(),\n+            MetaItemKind::List(..) => list_closing_paren_pos.unwrap_or(ident.span.hi()),\n+            _ => ident.span.hi(),\n         };\n-        let span = name.span.with_hi(hi);\n-        Some(MetaItem { name, node, span })\n+        let span = ident.span.with_hi(hi);\n+        Some(MetaItem { ident, node, span })\n     }\n }\n "}, {"sha": "584b9455a93ada1e39174e6ed92c7ae2ab2eaf50", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -810,7 +810,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                 invoc.expansion_data.mark.set_expn_info(expn_info);\n                 let span = span.with_ctxt(self.cx.backtrace());\n                 let dummy = ast::MetaItem { // FIXME(jseyfried) avoid this\n-                    name: Path::from_ident(DUMMY_SP, keywords::Invalid.ident()),\n+                    ident: Path::from_ident(keywords::Invalid.ident()),\n                     span: DUMMY_SP,\n                     node: ast::MetaItemKind::Word,\n                 };"}, {"sha": "18bf54451239a93ebb0e220f8a7d8a2a2c09b926", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -462,7 +462,7 @@ declare_features! (\n     (active, extern_prelude, \"1.27.0\", Some(44660), Some(Edition::Edition2018)),\n     \n     // Scoped attributes\n-    (active, tool_attributes, \"1.25.0\", Some(44690)),\n+    (active, tool_attributes, \"1.25.0\", Some(44690), None),\n );\n \n declare_features! (\n@@ -1175,12 +1175,28 @@ impl<'a> Context<'a> {\n             // before the plugin attributes are registered\n             // so we skip this then\n             if !is_macro {\n-                gate_feature!(self, custom_attribute, attr.span,\n-                              &format!(\"The attribute `{}` is currently \\\n-                                        unknown to the compiler and \\\n-                                        may have meaning \\\n-                                        added to it in the future\",\n-                                       attr.path));\n+                if attr.is_scoped() {\n+                    gate_feature!(self, tool_attributes, attr.span,\n+                                  &format!(\"scoped attribute `{}` is experimental\", attr.path));\n+                    if attr::is_known_tool(attr) {\n+                        attr::mark_used(attr);\n+                    } else {\n+                        span_err!(\n+                            self.parse_sess.span_diagnostic,\n+                            attr.span,\n+                            E0694,\n+                            \"an unknown tool name found in scoped attribute: `{}`.\",\n+                            attr.path\n+                        );\n+                    }\n+                } else {\n+                    gate_feature!(self, custom_attribute, attr.span,\n+                                  &format!(\"the attribute `{}` is currently \\\n+                                            unknown to the compiler and \\\n+                                            may have meaning \\\n+                                            added to it in the future\",\n+                                           attr.path));\n+                }\n             }\n         }\n     }\n@@ -1846,7 +1862,7 @@ pub fn get_features(span_handler: &Handler, krate_attrs: &[ast::Attribute],\n                 for mi in list {\n \n                     let name = if let Some(word) = mi.word() {\n-                        word.ident.name\n+                        word.name()\n                     } else {\n                         span_err!(span_handler, mi.span, E0556,\n                                   \"malformed feature, expected just one word\");"}, {"sha": "cceed589212561c06d0482a79b7f011222956156", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -149,7 +149,7 @@ impl<'a> Parser<'a> {\n         };\n         Ok(if let Some(meta) = meta {\n             self.bump();\n-            (meta.name, meta.node.tokens(meta.span))\n+            (meta.ident, meta.node.tokens(meta.span))\n         } else {\n             (self.parse_path(PathStyle::Mod)?, self.parse_tokens())\n         })\n@@ -225,10 +225,10 @@ impl<'a> Parser<'a> {\n         }\n \n         let lo = self.span;\n-        let name = self.parse_path(PathStyle::Mod)?;\n+        let ident = self.parse_path(PathStyle::Mod)?;\n         let node = self.parse_meta_item_kind()?;\n         let span = lo.to(self.prev_span);\n-        Ok(ast::MetaItem { name, node, span })\n+        Ok(ast::MetaItem { ident, node, span })\n     }\n \n     pub fn parse_meta_item_kind(&mut self) -> PResult<'a, ast::MetaItemKind> {"}, {"sha": "0e3bced3222f6d489c27cf7f0b4c9b787f242e7c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -1955,17 +1955,17 @@ impl<'a> Parser<'a> {\n     /// Like `parse_path`, but also supports parsing `Word` meta items into paths for back-compat.\n     /// This is used when parsing derive macro paths in `#[derive]` attributes.\n     pub fn parse_path_allowing_meta(&mut self, style: PathStyle) -> PResult<'a, ast::Path> {\n-        let meta_name = match self.token {\n+        let meta_ident = match self.token {\n             token::Interpolated(ref nt) => match nt.0 {\n                 token::NtMeta(ref meta) => match meta.node {\n-                    ast::MetaItemKind::Word => Some(meta.name.clone()),\n+                    ast::MetaItemKind::Word => Some(meta.ident.clone()),\n                     _ => None,\n                 },\n                 _ => None,\n             },\n             _ => None,\n         };\n-        if let Some(path) = meta_name {\n+        if let Some(path) = meta_ident {\n             self.bump();\n             return Ok(path);\n         }"}, {"sha": "f78e3f3084bdb387d56b86cc7fa08c9afaec864b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -719,12 +719,12 @@ pub trait PrintState<'a> {\n             if i > 0 {\n                 self.writer().word(\"::\")?\n             }\n-            if segment.identifier.name != keywords::CrateRoot.name() &&\n-               segment.identifier.name != keywords::DollarCrate.name()\n+            if segment.ident.name != keywords::CrateRoot.name() &&\n+               segment.ident.name != keywords::DollarCrate.name()\n             {\n-                self.writer().word(&segment.identifier.name.as_str())?;\n-            } else if segment.identifier.name == keywords::DollarCrate.name() {\n-                self.print_dollar_crate(segment.identifier.ctxt)?;\n+                self.writer().word(&segment.ident.name.as_str())?;\n+            } else if segment.ident.name == keywords::DollarCrate.name() {\n+                self.print_dollar_crate(segment.ident.span.ctxt())?;\n             }\n         }\n         Ok(())\n@@ -773,15 +773,15 @@ pub trait PrintState<'a> {\n     fn print_meta_item(&mut self, item: &ast::MetaItem) -> io::Result<()> {\n         self.ibox(INDENT_UNIT)?;\n         match item.node {\n-            ast::MetaItemKind::Word => self.print_attribute_path(&item.name)?,\n+            ast::MetaItemKind::Word => self.print_attribute_path(&item.ident)?,\n             ast::MetaItemKind::NameValue(ref value) => {\n-                self.print_attribute_path(&item.name)?;\n+                self.print_attribute_path(&item.ident)?;\n                 self.writer().space()?;\n                 self.word_space(\"=\")?;\n                 self.print_literal(value)?;\n             }\n             ast::MetaItemKind::List(ref items) => {\n-                self.print_attribute_path(&item.name)?;\n+                self.print_attribute_path(&item.ident)?;\n                 self.popen()?;\n                 self.commasep(Consistent,\n                               &items[..],"}, {"sha": "c2192a21d90501026685cdeadd82c30dff2e3086", "filename": "src/test/compile-fail/unknown-tool-name.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Ftest%2Fcompile-fail%2Funknown-tool-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Ftest%2Fcompile-fail%2Funknown-tool-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funknown-tool-name.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(tool_attributes)]\n \n-#![foo::bar] //~ ERROR An unknown tool name found in scoped attributes: `foo::bar`. [E0693]\n+#![foo::bar] //~ ERROR an unknown tool name found in scoped attribute: `foo::bar`. [E0694]\n \n-#[foo::bar] //~ ERROR An unknown tool name found in scoped attributes: `foo::bar`. [E0693]\n+#[foo::bar] //~ ERROR an unknown tool name found in scoped attribute: `foo::bar`. [E0694]\n fn main() {}"}, {"sha": "ba38c297a1127924e9d5cd62778ca254f8baeba8", "filename": "src/test/compile-fail/unknown_tool_attributes-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Ftest%2Fcompile-fail%2Funknown_tool_attributes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Ftest%2Fcompile-fail%2Funknown_tool_attributes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funknown_tool_attributes-1.rs?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -14,5 +14,5 @@\n \n #[foo::bar]\n //~^ ERROR scoped attribute `foo::bar` is experimental (see issue #44690) [E0658]\n-//~^^ ERROR An unknown tool name found in scoped attributes: `foo::bar`. [E0693]\n+//~^^ ERROR an unknown tool name found in scoped attribute: `foo::bar`. [E0694]\n fn main() {}"}, {"sha": "da89c4a5ef692634badba632f031afb2c0009dcb", "filename": "src/test/ui/feature-gate-tool_attributes.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Ftest%2Fui%2Ffeature-gate-tool_attributes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/121abd0599f6fd056dca84fe1df724fb7822b355/src%2Ftest%2Fui%2Ffeature-gate-tool_attributes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-tool_attributes.stderr?ref=121abd0599f6fd056dca84fe1df724fb7822b355", "patch": "@@ -1,10 +1,11 @@\n error[E0658]: scoped attribute `rustfmt::skip` is experimental (see issue #44690)\n   --> $DIR/feature-gate-tool_attributes.rs:12:5\n    |\n-12 |     #[rustfmt::skip] //~ ERROR scoped attribute `rustfmt::skip` is experimental\n+LL |     #[rustfmt::skip] //~ ERROR scoped attribute `rustfmt::skip` is experimental\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = help: add #![feature(tool_attributes)] to the crate attributes to enable\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0658`."}]}