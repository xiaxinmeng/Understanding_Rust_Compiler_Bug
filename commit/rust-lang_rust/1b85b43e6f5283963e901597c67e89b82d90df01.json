{"sha": "1b85b43e6f5283963e901597c67e89b82d90df01", "node_id": "C_kwDOAAsO6NoAKDFiODViNDNlNmY1MjgzOTYzZTkwMTU5N2M2N2U4OWI4MmQ5MGRmMDE", "commit": {"author": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-03-08T19:39:58Z"}, "committer": {"name": "hkalbasi", "email": "hamidrezakalbasi@protonmail.com", "date": "2023-03-17T09:38:35Z"}, "message": "add mir-stats to analysis-stats", "tree": {"sha": "6956ef318917c601b2c7b10efaa98783dea3ac14", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6956ef318917c601b2c7b10efaa98783dea3ac14"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b85b43e6f5283963e901597c67e89b82d90df01", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b85b43e6f5283963e901597c67e89b82d90df01", "html_url": "https://github.com/rust-lang/rust/commit/1b85b43e6f5283963e901597c67e89b82d90df01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b85b43e6f5283963e901597c67e89b82d90df01/comments", "author": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "HKalbasi", "id": 45197576, "node_id": "MDQ6VXNlcjQ1MTk3NTc2", "avatar_url": "https://avatars.githubusercontent.com/u/45197576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/HKalbasi", "html_url": "https://github.com/HKalbasi", "followers_url": "https://api.github.com/users/HKalbasi/followers", "following_url": "https://api.github.com/users/HKalbasi/following{/other_user}", "gists_url": "https://api.github.com/users/HKalbasi/gists{/gist_id}", "starred_url": "https://api.github.com/users/HKalbasi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/HKalbasi/subscriptions", "organizations_url": "https://api.github.com/users/HKalbasi/orgs", "repos_url": "https://api.github.com/users/HKalbasi/repos", "events_url": "https://api.github.com/users/HKalbasi/events{/privacy}", "received_events_url": "https://api.github.com/users/HKalbasi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7b9ae59a081f0ecbd11d66e205307328cd5cfbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b9ae59a081f0ecbd11d66e205307328cd5cfbe", "html_url": "https://github.com/rust-lang/rust/commit/b7b9ae59a081f0ecbd11d66e205307328cd5cfbe"}], "stats": {"total": 26, "additions": 26, "deletions": 0}, "files": [{"sha": "e1504743bfdb6ee3e4fd39c0c53d8102f5919fb0", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/1b85b43e6f5283963e901597c67e89b82d90df01/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b85b43e6f5283963e901597c67e89b82d90df01/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=1b85b43e6f5283963e901597c67e89b82d90df01", "patch": "@@ -2,6 +2,7 @@\n //! errors.\n \n use std::{\n+    collections::HashMap,\n     env,\n     time::{SystemTime, UNIX_EPOCH},\n };\n@@ -153,6 +154,10 @@ impl flags::AnalysisStats {\n             self.run_inference(&host, db, &vfs, &funcs, verbosity);\n         }\n \n+        if self.mir_stats {\n+            self.lower_mir(db, &funcs);\n+        }\n+\n         let total_span = analysis_sw.elapsed();\n         eprintln!(\"{:<20} {total_span}\", \"Total:\");\n         report_metric(\"total time\", total_span.time.as_millis() as u64, \"ms\");\n@@ -189,6 +194,24 @@ impl flags::AnalysisStats {\n         Ok(())\n     }\n \n+    fn lower_mir(&self, db: &RootDatabase, funcs: &[Function]) {\n+        let all = funcs.len();\n+        let mut fail = 0;\n+        let mut h: HashMap<String, usize> = HashMap::new();\n+        for f in funcs {\n+            let f = FunctionId::from(*f);\n+            let Err(e) = db.mir_body(f.into()) else {\n+                continue;\n+            };\n+            let es = format!(\"{:?}\", e);\n+            *h.entry(es).or_default() += 1;\n+            fail += 1;\n+        }\n+        let h = h.into_iter().sorted_by_key(|x| x.1).collect::<Vec<_>>();\n+        eprintln!(\"Mir failed reasons: {:#?}\", h);\n+        eprintln!(\"Mir failed bodies: {fail} ({}%)\", fail * 100 / all);\n+    }\n+\n     fn run_inference(\n         &self,\n         host: &AnalysisHost,"}, {"sha": "b085a0a892a50a2c3edf1839491ca158b93c5cf1", "filename": "crates/rust-analyzer/src/cli/flags.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1b85b43e6f5283963e901597c67e89b82d90df01/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b85b43e6f5283963e901597c67e89b82d90df01/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fflags.rs?ref=1b85b43e6f5283963e901597c67e89b82d90df01", "patch": "@@ -66,6 +66,8 @@ xflags::xflags! {\n             optional --memory-usage\n             /// Print the total length of all source and macro files (whitespace is not counted).\n             optional --source-stats\n+            /// Print the number of bodies that fail to lower to mir, in addition to failed reasons.\n+            optional --mir-stats\n \n             /// Only analyze items matching this path.\n             optional -o, --only path: String\n@@ -172,6 +174,7 @@ pub struct AnalysisStats {\n     pub parallel: bool,\n     pub memory_usage: bool,\n     pub source_stats: bool,\n+    pub mir_stats: bool,\n     pub only: Option<String>,\n     pub with_deps: bool,\n     pub no_sysroot: bool,"}]}