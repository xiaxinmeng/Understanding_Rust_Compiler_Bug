{"sha": "ef03fda339923e659d3d3ca3321de887316d2807", "node_id": "C_kwDOAAsO6NoAKGVmMDNmZGEzMzk5MjNlNjU5ZDNkM2NhMzMyMWRlODg3MzE2ZDI4MDc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-21T08:44:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-21T08:44:17Z"}, "message": "Auto merge of #106967 - saethlin:remove-vec-as-ptr-assume, r=thomcc\n\nRemove the assume(!is_null) from Vec::as_ptr\n\nAt a guess, this code is leftover from LLVM was worse at keeping track of the niche information here. In any case, we don't need this anymore: Removing this `assume` doesn't get rid of the `nonnull` attribute on the return type.", "tree": {"sha": "8062b70fc24aefc4b475add14768849c01014c11", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8062b70fc24aefc4b475add14768849c01014c11"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef03fda339923e659d3d3ca3321de887316d2807", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef03fda339923e659d3d3ca3321de887316d2807", "html_url": "https://github.com/rust-lang/rust/commit/ef03fda339923e659d3d3ca3321de887316d2807", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef03fda339923e659d3d3ca3321de887316d2807/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84c47b8279b39e165dfebeb529eb6d92592e4f8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/84c47b8279b39e165dfebeb529eb6d92592e4f8d", "html_url": "https://github.com/rust-lang/rust/commit/84c47b8279b39e165dfebeb529eb6d92592e4f8d"}, {"sha": "738c8b08d5edb4c9fff605533a6b186e57c9596e", "url": "https://api.github.com/repos/rust-lang/rust/commits/738c8b08d5edb4c9fff605533a6b186e57c9596e", "html_url": "https://github.com/rust-lang/rust/commit/738c8b08d5edb4c9fff605533a6b186e57c9596e"}], "stats": {"total": 32, "additions": 21, "deletions": 11}, "files": [{"sha": "9f0111db4524ca27b2fe57f96b2f22e2cab0bc71", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ef03fda339923e659d3d3ca3321de887316d2807/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef03fda339923e659d3d3ca3321de887316d2807/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=ef03fda339923e659d3d3ca3321de887316d2807", "patch": "@@ -59,7 +59,6 @@ use core::cmp::Ordering;\n use core::convert::TryFrom;\n use core::fmt;\n use core::hash::{Hash, Hasher};\n-use core::intrinsics::assume;\n use core::iter;\n #[cfg(not(no_global_oom_handling))]\n use core::iter::FromIterator;\n@@ -1240,11 +1239,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     pub fn as_ptr(&self) -> *const T {\n         // We shadow the slice method of the same name to avoid going through\n         // `deref`, which creates an intermediate reference.\n-        let ptr = self.buf.ptr();\n-        unsafe {\n-            assume(!ptr.is_null());\n-        }\n-        ptr\n+        self.buf.ptr()\n     }\n \n     /// Returns an unsafe mutable pointer to the vector's buffer, or a dangling\n@@ -1277,11 +1272,7 @@ impl<T, A: Allocator> Vec<T, A> {\n     pub fn as_mut_ptr(&mut self) -> *mut T {\n         // We shadow the slice method of the same name to avoid going through\n         // `deref_mut`, which creates an intermediate reference.\n-        let ptr = self.buf.ptr();\n-        unsafe {\n-            assume(!ptr.is_null());\n-        }\n-        ptr\n+        self.buf.ptr()\n     }\n \n     /// Returns a reference to the underlying allocator."}, {"sha": "8ff7ba9cb64ca6c9d522e449f5ef8cfa35425f7e", "filename": "tests/codegen/vec-as-ptr.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ef03fda339923e659d3d3ca3321de887316d2807/tests%2Fcodegen%2Fvec-as-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef03fda339923e659d3d3ca3321de887316d2807/tests%2Fcodegen%2Fvec-as-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcodegen%2Fvec-as-ptr.rs?ref=ef03fda339923e659d3d3ca3321de887316d2807", "patch": "@@ -0,0 +1,19 @@\n+// compile-flags: -O -Zmerge-functions=disabled\n+\n+#![crate_type = \"lib\"]\n+\n+// Test that even though we return a *const u8 not a &[u8] or a NonNull<u8>, LLVM knows that this\n+// pointer is nonnull.\n+// CHECK: nonnull {{i8\\*|ptr}} @vec_as_ptr\n+#[no_mangle]\n+pub fn vec_as_ptr(v: &Vec<u8>) -> *const u8 {\n+    v.as_ptr()\n+}\n+\n+// Test that even though we return a *const u8 not a &[u8] or a NonNull<u8>, LLVM knows that this\n+// pointer is nonnull.\n+// CHECK: nonnull {{i8\\*|ptr}} @vec_as_mut_ptr\n+#[no_mangle]\n+pub fn vec_as_mut_ptr(v: &mut Vec<u8>) -> *mut u8 {\n+    v.as_mut_ptr()\n+}"}]}