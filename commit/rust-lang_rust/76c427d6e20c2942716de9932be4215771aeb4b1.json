{"sha": "76c427d6e20c2942716de9932be4215771aeb4b1", "node_id": "C_kwDOAAsO6NoAKDc2YzQyN2Q2ZTIwYzI5NDI3MTZkZTk5MzJiZTQyMTU3NzFhZWI0YjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-15T00:22:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-15T00:22:38Z"}, "message": "Auto merge of #100510 - compiler-errors:as-a-treat, r=jackh726\n\nmake `TypeError` impl `Copy`\n\nr? `@ghost`", "tree": {"sha": "ff7740b8f34f3b86f702f73f4599ef1236dde66c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff7740b8f34f3b86f702f73f4599ef1236dde66c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76c427d6e20c2942716de9932be4215771aeb4b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76c427d6e20c2942716de9932be4215771aeb4b1", "html_url": "https://github.com/rust-lang/rust/commit/76c427d6e20c2942716de9932be4215771aeb4b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76c427d6e20c2942716de9932be4215771aeb4b1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8c0a01b2b651416f5e7461209ff1a93a98619e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8c0a01b2b651416f5e7461209ff1a93a98619e4", "html_url": "https://github.com/rust-lang/rust/commit/b8c0a01b2b651416f5e7461209ff1a93a98619e4"}, {"sha": "75dfe55a5da5181c4b8a0be16227e0729525a162", "url": "https://api.github.com/repos/rust-lang/rust/commits/75dfe55a5da5181c4b8a0be16227e0729525a162", "html_url": "https://github.com/rust-lang/rust/commit/75dfe55a5da5181c4b8a0be16227e0729525a162"}], "stats": {"total": 75, "additions": 37, "deletions": 38}, "files": [{"sha": "b1def189230f76c90eeb0c7a253c185047331354", "filename": "compiler/rustc_borrowck/src/diagnostics/bound_region_errors.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76c427d6e20c2942716de9932be4215771aeb4b1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c427d6e20c2942716de9932be4215771aeb4b1/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fbound_region_errors.rs?ref=76c427d6e20c2942716de9932be4215771aeb4b1", "patch": "@@ -484,9 +484,7 @@ fn try_extract_error_from_region_constraints<'tcx>(\n     };\n     nice_error.try_report_from_nll().or_else(|| {\n         if let SubregionOrigin::Subtype(trace) = cause {\n-            Some(\n-                infcx.report_and_explain_type_error(*trace, &TypeError::RegionsPlaceholderMismatch),\n-            )\n+            Some(infcx.report_and_explain_type_error(*trace, TypeError::RegionsPlaceholderMismatch))\n         } else {\n             None\n         }"}, {"sha": "fcb87a9f32f1eca292ce75eda184beb6456987fa", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/76c427d6e20c2942716de9932be4215771aeb4b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c427d6e20c2942716de9932be4215771aeb4b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=76c427d6e20c2942716de9932be4215771aeb4b1", "patch": "@@ -457,7 +457,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     }\n \n     /// Adds a note if the types come from similarly named crates\n-    fn check_and_note_conflicting_crates(&self, err: &mut Diagnostic, terr: &TypeError<'tcx>) {\n+    fn check_and_note_conflicting_crates(&self, err: &mut Diagnostic, terr: TypeError<'tcx>) {\n         use hir::def_id::CrateNum;\n         use rustc_hir::definitions::DisambiguatedDefPathData;\n         use ty::print::Printer;\n@@ -561,7 +561,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 }\n             }\n         };\n-        match *terr {\n+        match terr {\n             TypeError::Sorts(ref exp_found) => {\n                 // if they are both \"path types\", there's a chance of ambiguity\n                 // due to different versions of the same crate\n@@ -583,7 +583,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         err: &mut Diagnostic,\n         cause: &ObligationCause<'tcx>,\n         exp_found: Option<ty::error::ExpectedFound<Ty<'tcx>>>,\n-        terr: &TypeError<'tcx>,\n+        terr: TypeError<'tcx>,\n     ) {\n         match *cause.code() {\n             ObligationCauseCode::Pattern { origin_expr: true, span: Some(span), root_ty } => {\n@@ -1432,7 +1432,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         cause: &ObligationCause<'tcx>,\n         secondary_span: Option<(Span, String)>,\n         mut values: Option<ValuePairs<'tcx>>,\n-        terr: &TypeError<'tcx>,\n+        terr: TypeError<'tcx>,\n         swap_secondary_and_primary: bool,\n         prefer_label: bool,\n     ) {\n@@ -1713,7 +1713,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             ty::error::TypeError::Sorts(terr)\n                 if exp_found.map_or(false, |ef| terr.found == ef.found) =>\n             {\n-                Some(*terr)\n+                Some(terr)\n             }\n             _ => exp_found,\n         };\n@@ -2091,7 +2091,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     pub fn report_and_explain_type_error(\n         &self,\n         trace: TypeTrace<'tcx>,\n-        terr: &TypeError<'tcx>,\n+        terr: TypeError<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         use crate::traits::ObligationCauseCode::MatchExpressionArm;\n \n@@ -2781,12 +2781,12 @@ pub enum FailureCode {\n }\n \n pub trait ObligationCauseExt<'tcx> {\n-    fn as_failure_code(&self, terr: &TypeError<'tcx>) -> FailureCode;\n+    fn as_failure_code(&self, terr: TypeError<'tcx>) -> FailureCode;\n     fn as_requirement_str(&self) -> &'static str;\n }\n \n impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n-    fn as_failure_code(&self, terr: &TypeError<'tcx>) -> FailureCode {\n+    fn as_failure_code(&self, terr: TypeError<'tcx>) -> FailureCode {\n         use self::FailureCode::*;\n         use crate::traits::ObligationCauseCode::*;\n         match self.code() {\n@@ -2823,7 +2823,7 @@ impl<'tcx> ObligationCauseExt<'tcx> for ObligationCause<'tcx> {\n                 TypeError::IntrinsicCast => {\n                     Error0308(\"cannot coerce intrinsics to function pointers\")\n                 }\n-                TypeError::ObjectUnsafeCoercion(did) => Error0038(*did),\n+                TypeError::ObjectUnsafeCoercion(did) => Error0038(did),\n                 _ => Error0308(\"mismatched types\"),\n             },\n         }"}, {"sha": "8dabdfd55c7e8f719dddb5134581853a567bead3", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76c427d6e20c2942716de9932be4215771aeb4b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c427d6e20c2942716de9932be4215771aeb4b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=76c427d6e20c2942716de9932be4215771aeb4b1", "patch": "@@ -107,7 +107,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         match origin {\n             infer::Subtype(box trace) => {\n                 let terr = TypeError::RegionsDoesNotOutlive(sup, sub);\n-                let mut err = self.report_and_explain_type_error(trace, &terr);\n+                let mut err = self.report_and_explain_type_error(trace, terr);\n                 match (*sub, *sup) {\n                     (ty::RePlaceholder(_), ty::RePlaceholder(_)) => {}\n                     (ty::RePlaceholder(_), _) => {\n@@ -406,7 +406,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             }\n             infer::Subtype(box trace) => {\n                 let terr = TypeError::RegionsPlaceholderMismatch;\n-                return self.report_and_explain_type_error(trace, &terr);\n+                return self.report_and_explain_type_error(trace, terr);\n             }\n             _ => return self.report_concrete_failure(placeholder_origin, sub, sup),\n         }"}, {"sha": "1e26e7bb86ef03a1b086e7e9821d9f52cbd4fd28", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76c427d6e20c2942716de9932be4215771aeb4b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c427d6e20c2942716de9932be4215771aeb4b1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=76c427d6e20c2942716de9932be4215771aeb4b1", "patch": "@@ -1527,8 +1527,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         actual: Ty<'tcx>,\n         err: TypeError<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let trace = TypeTrace::types(cause, true, expected, actual);\n-        self.report_and_explain_type_error(trace, &err)\n+        self.report_and_explain_type_error(TypeTrace::types(cause, true, expected, actual), err)\n     }\n \n     pub fn report_mismatched_consts(\n@@ -1538,8 +1537,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         actual: ty::Const<'tcx>,\n         err: TypeError<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-        let trace = TypeTrace::consts(cause, true, expected, actual);\n-        self.report_and_explain_type_error(trace, &err)\n+        self.report_and_explain_type_error(TypeTrace::consts(cause, true, expected, actual), err)\n     }\n \n     pub fn replace_bound_vars_with_fresh_vars<T>("}, {"sha": "8e6af936ded18442c2e3549bfaa394469cb7004f", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/76c427d6e20c2942716de9932be4215771aeb4b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c427d6e20c2942716de9932be4215771aeb4b1/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=76c427d6e20c2942716de9932be4215771aeb4b1", "patch": "@@ -30,7 +30,8 @@ impl<T> ExpectedFound<T> {\n }\n \n // Data structures used in type unification\n-#[derive(Clone, Debug, TypeFoldable, TypeVisitable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n+#[rustc_pass_by_value]\n pub enum TypeError<'tcx> {\n     Mismatch,\n     ConstnessMismatch(ExpectedFound<ty::BoundConstness>),\n@@ -211,7 +212,7 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n }\n \n impl<'tcx> TypeError<'tcx> {\n-    pub fn must_include_note(&self) -> bool {\n+    pub fn must_include_note(self) -> bool {\n         use self::TypeError::*;\n         match self {\n             CyclicTy(_) | CyclicConst(_) | UnsafetyMismatch(_) | ConstnessMismatch(_)\n@@ -347,7 +348,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     pub fn note_and_explain_type_err(\n         self,\n         diag: &mut Diagnostic,\n-        err: &TypeError<'tcx>,\n+        err: TypeError<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         sp: Span,\n         body_owner_def_id: DefId,\n@@ -568,7 +569,7 @@ impl<T> Trait<T> for X {\n             }\n             TargetFeatureCast(def_id) => {\n                 let target_spans =\n-                    self.get_attrs(*def_id, sym::target_feature).map(|attr| attr.span);\n+                    self.get_attrs(def_id, sym::target_feature).map(|attr| attr.span);\n                 diag.note(\n                     \"functions with `#[target_feature]` can only be coerced to `unsafe` function pointers\"\n                 );\n@@ -640,7 +641,7 @@ impl<T> Trait<T> for X {\n         self,\n         diag: &mut Diagnostic,\n         proj_ty: &ty::ProjectionTy<'tcx>,\n-        values: &ExpectedFound<Ty<'tcx>>,\n+        values: ExpectedFound<Ty<'tcx>>,\n         body_owner_def_id: DefId,\n         cause_code: &ObligationCauseCode<'_>,\n     ) {"}, {"sha": "4260cb53adc1c6fe07a10422b497414746643c2a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/76c427d6e20c2942716de9932be4215771aeb4b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c427d6e20c2942716de9932be4215771aeb4b1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=76c427d6e20c2942716de9932be4215771aeb4b1", "patch": "@@ -1507,8 +1507,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         }\n \n         self.probe(|_| {\n-            let err_buf;\n-            let mut err = &error.err;\n+            let mut err = error.err;\n             let mut values = None;\n \n             // try to find the mismatched types to report the error with.\n@@ -1544,14 +1543,13 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n                         | ObligationCauseCode::ObjectCastObligation(..)\n                         | ObligationCauseCode::OpaqueType\n                 );\n-                if let Err(error) = self.at(&obligation.cause, obligation.param_env).eq_exp(\n+                if let Err(new_err) = self.at(&obligation.cause, obligation.param_env).eq_exp(\n                     is_normalized_ty_expected,\n                     normalized_ty,\n                     data.term,\n                 ) {\n                     values = Some((data, is_normalized_ty_expected, normalized_ty, data.term));\n-                    err_buf = error;\n-                    err = &err_buf;\n+                    err = new_err;\n                 }\n             }\n "}, {"sha": "ec8d22e81d1c01dd702c8a2e513df63ba221ed99", "filename": "compiler/rustc_typeck/src/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/76c427d6e20c2942716de9932be4215771aeb4b1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c427d6e20c2942716de9932be4215771aeb4b1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcompare_method.rs?ref=76c427d6e20c2942716de9932be4215771aeb4b1", "patch": "@@ -291,7 +291,7 @@ fn compare_predicate_entailment<'tcx>(\n             debug!(\"sub_types failed: impl ty {:?}, trait ty {:?}\", impl_fty, trait_fty);\n \n             let (impl_err_span, trait_err_span) =\n-                extract_spans_for_error_reporting(&infcx, &terr, &cause, impl_m, trait_m);\n+                extract_spans_for_error_reporting(&infcx, terr, &cause, impl_m, trait_m);\n \n             cause.span = impl_err_span;\n \n@@ -381,7 +381,7 @@ fn compare_predicate_entailment<'tcx>(\n                     expected: trait_fty.into(),\n                     found: impl_fty.into(),\n                 })),\n-                &terr,\n+                terr,\n                 false,\n                 false,\n             );\n@@ -468,7 +468,7 @@ fn check_region_bounds_on_impl_item<'tcx>(\n #[instrument(level = \"debug\", skip(infcx))]\n fn extract_spans_for_error_reporting<'a, 'tcx>(\n     infcx: &infer::InferCtxt<'a, 'tcx>,\n-    terr: &TypeError<'_>,\n+    terr: TypeError<'_>,\n     cause: &ObligationCause<'tcx>,\n     impl_m: &ty::AssocItem,\n     trait_m: &ty::AssocItem,\n@@ -488,7 +488,7 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n             _ => bug!(\"{:?} is not a TraitItemKind::Fn\", trait_m),\n         });\n \n-    match *terr {\n+    match terr {\n         TypeError::ArgumentMutability(i) => {\n             (impl_args.nth(i).unwrap(), trait_args.and_then(|mut args| args.nth(i)))\n         }\n@@ -1143,7 +1143,7 @@ pub(crate) fn compare_const_impl<'tcx>(\n                     expected: trait_ty.into(),\n                     found: impl_ty.into(),\n                 })),\n-                &terr,\n+                terr,\n                 false,\n                 false,\n             );"}, {"sha": "1177113ad8a5fb1cab18d191fd17d75f80bd109f", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76c427d6e20c2942716de9932be4215771aeb4b1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76c427d6e20c2942716de9932be4215771aeb4b1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=76c427d6e20c2942716de9932be4215771aeb4b1", "patch": "@@ -578,7 +578,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // First, check if we just need to wrap some arguments in a tuple.\n         if let Some((mismatch_idx, terr)) =\n             compatibility_diagonal.iter().enumerate().find_map(|(i, c)| {\n-                if let Compatibility::Incompatible(Some(terr)) = c { Some((i, terr)) } else { None }\n+                if let Compatibility::Incompatible(Some(terr)) = c {\n+                    Some((i, *terr))\n+                } else {\n+                    None\n+                }\n             })\n         {\n             // Is the first bad expected argument a tuple?\n@@ -707,8 +711,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let (expected_ty, _) = formal_and_expected_inputs[*expected_idx];\n                 let cause = &self.misc(provided_span);\n                 let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n-                if !matches!(trace.cause.as_failure_code(e), FailureCode::Error0308(_)) {\n-                    self.report_and_explain_type_error(trace, e).emit();\n+                if !matches!(trace.cause.as_failure_code(*e), FailureCode::Error0308(_)) {\n+                    self.report_and_explain_type_error(trace, *e).emit();\n                     return true;\n                 }\n                 false\n@@ -732,7 +736,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let (provided_ty, provided_arg_span) = provided_arg_tys[*provided_idx];\n             let cause = &self.misc(provided_arg_span);\n             let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n-            let mut err = self.report_and_explain_type_error(trace, err);\n+            let mut err = self.report_and_explain_type_error(trace, *err);\n             self.emit_coerce_suggestions(\n                 &mut err,\n                 &provided_args[*provided_idx],\n@@ -802,7 +806,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Error::Invalid(provided_idx, expected_idx, compatibility) => {\n                     let (formal_ty, expected_ty) = formal_and_expected_inputs[expected_idx];\n                     let (provided_ty, provided_span) = provided_arg_tys[provided_idx];\n-                    if let Compatibility::Incompatible(error) = &compatibility {\n+                    if let Compatibility::Incompatible(error) = compatibility {\n                         let cause = &self.misc(provided_span);\n                         let trace = TypeTrace::types(cause, true, expected_ty, provided_ty);\n                         if let Some(e) = error {"}]}