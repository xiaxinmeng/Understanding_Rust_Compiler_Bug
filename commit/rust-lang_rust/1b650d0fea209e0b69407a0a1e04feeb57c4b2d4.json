{"sha": "1b650d0fea209e0b69407a0a1e04feeb57c4b2d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNjUwZDBmZWEyMDllMGI2OTQwN2EwYTFlMDRmZWViNTdjNGIyZDQ=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-08-30T10:48:50Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-09-01T21:06:47Z"}, "message": "datastructures: replace `lazy_static` by `SyncLazy` from std", "tree": {"sha": "4947a3c442a8c95d461111137fe0e9073bc14000", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4947a3c442a8c95d461111137fe0e9073bc14000"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b650d0fea209e0b69407a0a1e04feeb57c4b2d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b650d0fea209e0b69407a0a1e04feeb57c4b2d4", "html_url": "https://github.com/rust-lang/rust/commit/1b650d0fea209e0b69407a0a1e04feeb57c4b2d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b650d0fea209e0b69407a0a1e04feeb57c4b2d4/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd49eec3d76d5894b539a28309c2fe24f915ee94", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd49eec3d76d5894b539a28309c2fe24f915ee94", "html_url": "https://github.com/rust-lang/rust/commit/bd49eec3d76d5894b539a28309c2fe24f915ee94"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "c710bf164a859147e9f970bd34e3aa60c5c1cde8", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b650d0fea209e0b69407a0a1e04feeb57c4b2d4/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1b650d0fea209e0b69407a0a1e04feeb57c4b2d4/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1b650d0fea209e0b69407a0a1e04feeb57c4b2d4", "patch": "@@ -3417,7 +3417,6 @@ dependencies = [\n  \"ena\",\n  \"indexmap\",\n  \"jobserver\",\n- \"lazy_static\",\n  \"libc\",\n  \"measureme\",\n  \"parking_lot 0.10.2\","}, {"sha": "fcae9b936ed2af613842196306a2acd111f91e61", "filename": "compiler/rustc_data_structures/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1b650d0fea209e0b69407a0a1e04feeb57c4b2d4/compiler%2Frustc_data_structures%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1b650d0fea209e0b69407a0a1e04feeb57c4b2d4/compiler%2Frustc_data_structures%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2FCargo.toml?ref=1b650d0fea209e0b69407a0a1e04feeb57c4b2d4", "patch": "@@ -12,7 +12,6 @@ ena = \"0.14\"\n indexmap = \"1.5.1\"\n tracing = \"0.1\"\n jobserver_crate = { version = \"0.1.13\", package = \"jobserver\" }\n-lazy_static = \"1\"\n rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_graphviz = { path = \"../rustc_graphviz\" }"}, {"sha": "41605afb44e021220f896536bff2f9ec7b9bf2a5", "filename": "compiler/rustc_data_structures/src/jobserver.rs", "status": "modified", "additions": 25, "deletions": 27, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/1b650d0fea209e0b69407a0a1e04feeb57c4b2d4/compiler%2Frustc_data_structures%2Fsrc%2Fjobserver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b650d0fea209e0b69407a0a1e04feeb57c4b2d4/compiler%2Frustc_data_structures%2Fsrc%2Fjobserver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fjobserver.rs?ref=1b650d0fea209e0b69407a0a1e04feeb57c4b2d4", "patch": "@@ -1,33 +1,31 @@\n pub use jobserver_crate::Client;\n-use lazy_static::lazy_static;\n+use std::lazy::SyncLazy;\n \n-lazy_static! {\n-    // We can only call `from_env` once per process\n+// We can only call `from_env` once per process\n \n-    // Note that this is unsafe because it may misinterpret file descriptors\n-    // on Unix as jobserver file descriptors. We hopefully execute this near\n-    // the beginning of the process though to ensure we don't get false\n-    // positives, or in other words we try to execute this before we open\n-    // any file descriptors ourselves.\n-    //\n-    // Pick a \"reasonable maximum\" if we don't otherwise have\n-    // a jobserver in our environment, capping out at 32 so we\n-    // don't take everything down by hogging the process run queue.\n-    // The fixed number is used to have deterministic compilation\n-    // across machines.\n-    //\n-    // Also note that we stick this in a global because there could be\n-    // multiple rustc instances in this process, and the jobserver is\n-    // per-process.\n-    static ref GLOBAL_CLIENT: Client = unsafe {\n-        Client::from_env().unwrap_or_else(|| {\n-            let client = Client::new(32).expect(\"failed to create jobserver\");\n-            // Acquire a token for the main thread which we can release later\n-            client.acquire_raw().ok();\n-            client\n-        })\n-    };\n-}\n+// Note that this is unsafe because it may misinterpret file descriptors\n+// on Unix as jobserver file descriptors. We hopefully execute this near\n+// the beginning of the process though to ensure we don't get false\n+// positives, or in other words we try to execute this before we open\n+// any file descriptors ourselves.\n+//\n+// Pick a \"reasonable maximum\" if we don't otherwise have\n+// a jobserver in our environment, capping out at 32 so we\n+// don't take everything down by hogging the process run queue.\n+// The fixed number is used to have deterministic compilation\n+// across machines.\n+//\n+// Also note that we stick this in a global because there could be\n+// multiple rustc instances in this process, and the jobserver is\n+// per-process.\n+static GLOBAL_CLIENT: SyncLazy<Client> = SyncLazy::new(|| unsafe {\n+    Client::from_env().unwrap_or_else(|| {\n+        let client = Client::new(32).expect(\"failed to create jobserver\");\n+        // Acquire a token for the main thread which we can release later\n+        client.acquire_raw().ok();\n+        client\n+    })\n+});\n \n pub fn client() -> Client {\n     GLOBAL_CLIENT.clone()"}]}