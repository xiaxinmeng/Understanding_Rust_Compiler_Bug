{"sha": "5c5fedb9454b4fcb237728da7c9e29e981fcdc3a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjNWZlZGI5NDU0YjRmY2IyMzc3MjhkYTdjOWUyOWU5ODFmY2RjM2E=", "commit": {"author": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-19T18:12:09Z"}, "committer": {"name": "Dawer", "email": "7803845+iDawer@users.noreply.github.com", "date": "2021-05-19T18:27:51Z"}, "message": "add_explicit_type respects `@` patterns", "tree": {"sha": "6f8d68f044ef88b5d90c90b43d96dd501e29f0c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6f8d68f044ef88b5d90c90b43d96dd501e29f0c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c5fedb9454b4fcb237728da7c9e29e981fcdc3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c5fedb9454b4fcb237728da7c9e29e981fcdc3a", "html_url": "https://github.com/rust-lang/rust/commit/5c5fedb9454b4fcb237728da7c9e29e981fcdc3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c5fedb9454b4fcb237728da7c9e29e981fcdc3a/comments", "author": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iDawer", "id": 7803845, "node_id": "MDQ6VXNlcjc4MDM4NDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7803845?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iDawer", "html_url": "https://github.com/iDawer", "followers_url": "https://api.github.com/users/iDawer/followers", "following_url": "https://api.github.com/users/iDawer/following{/other_user}", "gists_url": "https://api.github.com/users/iDawer/gists{/gist_id}", "starred_url": "https://api.github.com/users/iDawer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iDawer/subscriptions", "organizations_url": "https://api.github.com/users/iDawer/orgs", "repos_url": "https://api.github.com/users/iDawer/repos", "events_url": "https://api.github.com/users/iDawer/events{/privacy}", "received_events_url": "https://api.github.com/users/iDawer/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49a5d6a8d4a5da296ead4c44ac43090b9b0e8034", "url": "https://api.github.com/repos/rust-lang/rust/commits/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034", "html_url": "https://github.com/rust-lang/rust/commit/49a5d6a8d4a5da296ead4c44ac43090b9b0e8034"}], "stats": {"total": 25, "additions": 20, "deletions": 5}, "files": [{"sha": "b7617ca3da8c14e251db1ba6ff1a5a9379c36673", "filename": "crates/ide_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5c5fedb9454b4fcb237728da7c9e29e981fcdc3a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c5fedb9454b4fcb237728da7c9e29e981fcdc3a/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=5c5fedb9454b4fcb237728da7c9e29e981fcdc3a", "patch": "@@ -1,6 +1,6 @@\n use hir::HirDisplay;\n use syntax::{\n-    ast::{self, AstNode, LetStmt, NameOwner},\n+    ast::{self, AstNode, LetStmt},\n     TextRange,\n };\n \n@@ -31,9 +31,6 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n         _ => return None,\n     };\n     let pat_range = pat.syntax().text_range();\n-    // The binding must have a name\n-    let name = pat.name()?;\n-    let name_range = name.syntax().text_range();\n \n     // Assist should only be applicable if cursor is between 'let' and '='\n     let cursor_in_range = {\n@@ -74,7 +71,7 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n                 builder.replace(ascribed_ty.syntax().text_range(), inferred_type);\n             }\n             None => {\n-                builder.insert(name_range.end(), format!(\": {}\", inferred_type));\n+                builder.insert(pat_range.end(), format!(\": {}\", inferred_type));\n             }\n         },\n     )\n@@ -243,6 +240,24 @@ struct Test<K, T = u8> { k: K, t: T }\n fn main() {\n     let test: Test<i32> = Test { t: 23u8, k: 33 };\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn type_should_be_added_after_pattern() {\n+        // LetStmt = Attr* 'let' Pat (':' Type)? '=' initializer:Expr ';'\n+        check_assist(\n+            add_explicit_type,\n+            r#\"\n+fn main() {\n+    let $0test @ () = ();\n+}\n+\"#,\n+            r#\"\n+fn main() {\n+    let test @ (): () = ();\n+}\n \"#,\n         );\n     }"}]}