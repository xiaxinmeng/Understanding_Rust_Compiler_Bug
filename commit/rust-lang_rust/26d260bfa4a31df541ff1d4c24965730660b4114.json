{"sha": "26d260bfa4a31df541ff1d4c24965730660b4114", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZDI2MGJmYTRhMzFkZjU0MWZmMWQ0YzI0OTY1NzMwNjYwYjQxMTQ=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-03-27T05:04:32Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2021-03-30T01:10:28Z"}, "message": "Run LLVM coverage instrumentation passes before optimization passes\n\nThis matches the behavior of Clang and allows us to remove several\nhacks which were needed to ensure functions weren't optimized away\nbefore reaching the instrumentation pass.", "tree": {"sha": "d1515135bac6e48886b4e4fe7a6873fcf2ca9b3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1515135bac6e48886b4e4fe7a6873fcf2ca9b3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26d260bfa4a31df541ff1d4c24965730660b4114", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26d260bfa4a31df541ff1d4c24965730660b4114", "html_url": "https://github.com/rust-lang/rust/commit/26d260bfa4a31df541ff1d4c24965730660b4114", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26d260bfa4a31df541ff1d4c24965730660b4114/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3debe9acb8df363e0b5363f23f8218c2d7919904", "url": "https://api.github.com/repos/rust-lang/rust/commits/3debe9acb8df363e0b5363f23f8218c2d7919904", "html_url": "https://github.com/rust-lang/rust/commit/3debe9acb8df363e0b5363f23f8218c2d7919904"}], "stats": {"total": 231, "additions": 92, "deletions": 139}, "files": [{"sha": "c45d637177eb1306123abcb2c59ae63db157c1a6", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/26d260bfa4a31df541ff1d4c24965730660b4114/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26d260bfa4a31df541ff1d4c24965730660b4114/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=26d260bfa4a31df541ff1d4c24965730660b4114", "patch": "@@ -548,6 +548,11 @@ pub(crate) unsafe fn optimize(\n                     llvm::LLVMRustAddPass(fpm, find_pass(\"lint\").unwrap());\n                     continue;\n                 }\n+                if pass_name == \"insert-gcov-profiling\" || pass_name == \"instrprof\" {\n+                    // Instrumentation should be inserted before optimization.\n+                    llvm::LLVMRustAddPass(mpm, find_pass(pass_name).unwrap());\n+                    continue;\n+                }\n \n                 if let Some(pass) = find_pass(pass_name) {\n                     extra_passes.push(pass);"}, {"sha": "6c2468b9ffe0b1c937d2a1fc53d5fb331d35668d", "filename": "compiler/rustc_middle/src/mir/mono.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/26d260bfa4a31df541ff1d4c24965730660b4114/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26d260bfa4a31df541ff1d4c24965730660b4114/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmono.rs?ref=26d260bfa4a31df541ff1d4c24965730660b4114", "patch": "@@ -84,14 +84,7 @@ impl<'tcx> MonoItem<'tcx> {\n             .debugging_opts\n             .inline_in_all_cgus\n             .unwrap_or_else(|| tcx.sess.opts.optimize != OptLevel::No)\n-            && !tcx.sess.link_dead_code()\n-            && !tcx.sess.instrument_coverage();\n-        // Disabled for `-Z instrument-coverage` because some LLVM optimizations can sometimes\n-        // break coverage results. A test that failed at certain optimization levels is now\n-        // validated at that optimization level (via `compile-flags` directive):\n-        //   * `src/test/run-make-fulldeps/coverage/closure.rs` broke with `-C opt-level=2`, and\n-        //     also required disabling `internalize_symbols` in\n-        //     `rustc_mir/monomorphize/partitioning/mod.rs`\n+            && !tcx.sess.link_dead_code();\n \n         match *self {\n             MonoItem::Fn(ref instance) => {"}, {"sha": "dc2379fd92b834cba2dc31d3919230fbbede99f1", "filename": "compiler/rustc_mir/src/monomorphize/partitioning/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/26d260bfa4a31df541ff1d4c24965730660b4114/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26d260bfa4a31df541ff1d4c24965730660b4114/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fpartitioning%2Fmod.rs?ref=26d260bfa4a31df541ff1d4c24965730660b4114", "patch": "@@ -196,13 +196,7 @@ pub fn partition<'tcx>(\n \n     // Next we try to make as many symbols \"internal\" as possible, so LLVM has\n     // more freedom to optimize.\n-    if !tcx.sess.link_dead_code() && !tcx.sess.instrument_coverage() {\n-        // Disabled for `-Z instrument-coverage` because some LLVM optimizations can sometimes\n-        // break coverage results. Tests that failed at certain optimization levels are now\n-        // validated at those optimization levels (via `compile-flags` directive); for example:\n-        //   * `src/test/run-make-fulldeps/coverage/async.rs` broke with `-C opt-level=1`\n-        //   * `src/test/run-make-fulldeps/coverage/closure.rs` broke with `-C opt-level=2`, and\n-        //     also required disabling `generate_gcu_internal_copies` in `rustc_middle/mir/mono.rs`\n+    if !tcx.sess.link_dead_code() {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_internalize_symbols\");\n         partitioner.internalize_symbols(cx, &mut post_inlining);\n     }"}, {"sha": "cb0eea1b7067c7585eeb47dd51847904f2711f0c", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/26d260bfa4a31df541ff1d4c24965730660b4114/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26d260bfa4a31df541ff1d4c24965730660b4114/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=26d260bfa4a31df541ff1d4c24965730660b4114", "patch": "@@ -2889,17 +2889,7 @@ fn codegen_fn_attrs(tcx: TyCtxt<'_>, id: DefId) -> CodegenFnAttrs {\n                     .emit();\n                     InlineAttr::None\n                 } else if list_contains_name(&items[..], sym::always) {\n-                    if tcx.sess.instrument_coverage() {\n-                        // Fixes Issue #82875. Forced inlining allows LLVM to discard functions\n-                        // marked with `#[inline(always)]`, which can break coverage reporting if\n-                        // that function was referenced from a coverage map.\n-                        //\n-                        // FIXME(#83429): Is there a better place, e.g., in codegen, to check and\n-                        // convert `Always` to `Hint`?\n-                        InlineAttr::Hint\n-                    } else {\n-                        InlineAttr::Always\n-                    }\n+                    InlineAttr::Always\n                 } else if list_contains_name(&items[..], sym::never) {\n                     InlineAttr::Never\n                 } else {"}, {"sha": "7d9121ee2f8347293d6accf1fa815c5ff39bf378", "filename": "src/test/run-make-fulldeps/coverage-llvmir/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26d260bfa4a31df541ff1d4c24965730660b4114/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/26d260bfa4a31df541ff1d4c24965730660b4114/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-llvmir%2FMakefile?ref=26d260bfa4a31df541ff1d4c24965730660b4114", "patch": "@@ -17,7 +17,7 @@ else\n \tCOMDAT_IF_SUPPORTED=, comdat\n endif\n \n-DEFINE_INTERNAL=define hidden\n+DEFINE_INTERNAL=define internal\n \n ifdef IS_WINDOWS\n \tLLVM_FILECHECK_OPTIONS=\\"}, {"sha": "7b38ffb87cba89b257125b6585d09100014763df", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.generics.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26d260bfa4a31df541ff1d4c24965730660b4114/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generics.txt", "raw_url": "https://github.com/rust-lang/rust/raw/26d260bfa4a31df541ff1d4c24965730660b4114/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generics.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.generics.txt?ref=26d260bfa4a31df541ff1d4c24965730660b4114", "patch": "@@ -29,12 +29,12 @@\n    18|      2|        println!(\"BOOM times {}!!!\", self.strength);\n    19|      2|    }\n   ------------------\n-  | <generics::Firework<f64> as core::ops::drop::Drop>::drop:\n+  | <generics::Firework<i32> as core::ops::drop::Drop>::drop:\n   |   17|      1|    fn drop(&mut self) {\n   |   18|      1|        println!(\"BOOM times {}!!!\", self.strength);\n   |   19|      1|    }\n   ------------------\n-  | <generics::Firework<i32> as core::ops::drop::Drop>::drop:\n+  | <generics::Firework<f64> as core::ops::drop::Drop>::drop:\n   |   17|      1|    fn drop(&mut self) {\n   |   18|      1|        println!(\"BOOM times {}!!!\", self.strength);\n   |   19|      1|    }"}, {"sha": "cdcbd8fca948243c33c80a3c902b11bb84f6ecc3", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_crate.txt", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/26d260bfa4a31df541ff1d4c24965730660b4114/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/26d260bfa4a31df541ff1d4c24965730660b4114/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_crate.txt?ref=26d260bfa4a31df541ff1d4c24965730660b4114", "patch": "@@ -36,12 +36,12 @@\n    22|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n    23|      2|}\n   ------------------\n-  | used_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n+  | used_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n   |   21|      1|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   22|      1|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   23|      1|}\n   ------------------\n-  | used_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n+  | used_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n   |   21|      1|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n   |   22|      1|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n   |   23|      1|}"}, {"sha": "c38d2f87ace4b41161774f0abf691eebd7a8adb4", "filename": "src/test/run-make-fulldeps/coverage-reports/expected_show_coverage.uses_inline_crate.txt", "status": "modified", "additions": 79, "deletions": 102, "changes": 181, "blob_url": "https://github.com/rust-lang/rust/blob/26d260bfa4a31df541ff1d4c24965730660b4114/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "raw_url": "https://github.com/rust-lang/rust/raw/26d260bfa4a31df541ff1d4c24965730660b4114/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage-reports%2Fexpected_show_coverage.uses_inline_crate.txt?ref=26d260bfa4a31df541ff1d4c24965730660b4114", "patch": "@@ -30,127 +30,104 @@\n                    ^0\n    29|      1|    use_this_lib_crate();\n    30|      1|}\n-  ------------------\n-  | used_inline_crate::used_inline_function:\n-  |   20|      1|pub fn used_inline_function() {\n-  |   21|       |    // Initialize test constants in a way that cannot be determined at compile time, to ensure\n-  |   22|       |    // rustc and LLVM cannot optimize out statements (or coverage counters) downstream from\n-  |   23|       |    // dependent conditions.\n-  |   24|      1|    let is_true = std::env::args().len() == 1;\n-  |   25|      1|    let mut countdown = 0;\n-  |   26|      1|    if is_true {\n-  |   27|      1|        countdown = 10;\n-  |   28|      1|    }\n-  |                   ^0\n-  |   29|      1|    use_this_lib_crate();\n-  |   30|      1|}\n-  ------------------\n-  | Unexecuted instantiation: used_inline_crate::used_inline_function\n-  ------------------\n-   31|       |// Expect for above function:\n-   32|       |//\n-   33|       |// | Unexecuted instantiation: used_crate::used_only_from_bin_crate_generic_function::<_>\n-   34|       |//\n-   35|       |// With `#[inline(always)]` this function is instantiated twice, in both the library crate (which\n-   36|       |// does not use it) and the `uses_inline_crate` binary (which does use/call it).\n-   37|       |\n-   38|       |#[inline(always)]\n-   39|      2|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n-   40|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n-   41|      2|}\n+   31|       |\n+   32|       |#[inline(always)]\n+   33|      2|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n+   34|      2|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n+   35|      2|}\n   ------------------\n   | used_inline_crate::used_only_from_bin_crate_generic_function::<&alloc::vec::Vec<i32>>:\n-  |   39|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n-  |   40|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n-  |   41|      1|}\n+  |   33|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n+  |   34|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n+  |   35|      1|}\n   ------------------\n   | used_inline_crate::used_only_from_bin_crate_generic_function::<&str>:\n-  |   39|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n-  |   40|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n-  |   41|      1|}\n+  |   33|      1|pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {\n+  |   34|      1|    println!(\"used_only_from_bin_crate_generic_function with {:?}\", arg);\n+  |   35|      1|}\n   ------------------\n   | Unexecuted instantiation: used_inline_crate::used_only_from_bin_crate_generic_function::<_>\n   ------------------\n-   42|       |// Expect for above function: `Unexecuted instantiation` (see notes in `used_crate.rs`)\n-   43|       |\n-   44|       |#[inline(always)]\n-   45|      4|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n-   46|      4|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n-   47|      4|}\n+   36|       |// Expect for above function: `Unexecuted instantiation` (see notes in `used_crate.rs`)\n+   37|       |\n+   38|       |#[inline(always)]\n+   39|      4|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n+   40|      4|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n+   41|      4|}\n   ------------------\n   | used_inline_crate::used_only_from_this_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n-  |   45|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n-  |   46|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n-  |   47|      2|}\n+  |   39|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   40|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n+  |   41|      2|}\n   ------------------\n   | used_inline_crate::used_only_from_this_lib_crate_generic_function::<&str>:\n-  |   45|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n-  |   46|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n-  |   47|      2|}\n+  |   39|      2|pub fn used_only_from_this_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   40|      2|    println!(\"used_only_from_this_lib_crate_generic_function with {:?}\", arg);\n+  |   41|      2|}\n   ------------------\n-   48|       |\n-   49|       |#[inline(always)]\n-   50|      3|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n-   51|      3|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n-   52|      3|}\n+   42|       |\n+   43|       |#[inline(always)]\n+   44|      3|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+   45|      3|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+   46|      3|}\n   ------------------\n   | used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::<alloc::vec::Vec<i32>>:\n-  |   50|      1|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n-  |   51|      1|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n-  |   52|      1|}\n+  |   44|      1|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   45|      1|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   46|      1|}\n   ------------------\n   | used_inline_crate::used_from_bin_crate_and_lib_crate_generic_function::<&str>:\n-  |   50|      2|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n-  |   51|      2|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n-  |   52|      2|}\n+  |   44|      2|pub fn used_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   45|      2|    println!(\"used_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   46|      2|}\n   ------------------\n-   53|       |\n-   54|       |#[inline(always)]\n-   55|      3|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n-   56|      3|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n-   57|      3|}\n+   47|       |\n+   48|       |#[inline(always)]\n+   49|      3|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+   50|      3|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+   51|      3|}\n   ------------------\n   | used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::<&str>:\n-  |   55|      1|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n-  |   56|      1|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n-  |   57|      1|}\n+  |   49|      1|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   50|      1|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   51|      1|}\n   ------------------\n   | used_inline_crate::used_with_same_type_from_bin_crate_and_lib_crate_generic_function::<&str>:\n-  |   55|      2|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n-  |   56|      2|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n-  |   57|      2|}\n-  ------------------\n-   58|       |\n-   59|       |#[inline(always)]\n-   60|      0|pub fn unused_generic_function<T: Debug>(arg: T) {\n-   61|      0|    println!(\"unused_generic_function with {:?}\", arg);\n-   62|      0|}\n-   63|       |\n-   64|       |#[inline(always)]\n-   65|      0|pub fn unused_function() {\n-   66|      0|    let is_true = std::env::args().len() == 1;\n-   67|      0|    let mut countdown = 2;\n-   68|      0|    if !is_true {\n-   69|      0|        countdown = 20;\n-   70|      0|    }\n-   71|      0|}\n-   72|       |\n-   73|       |#[inline(always)]\n-   74|      0|fn unused_private_function() {\n-   75|      0|    let is_true = std::env::args().len() == 1;\n-   76|      0|    let mut countdown = 2;\n-   77|      0|    if !is_true {\n-   78|      0|        countdown = 20;\n-   79|      0|    }\n-   80|      0|}\n-   81|       |\n-   82|      2|fn use_this_lib_crate() {\n-   83|      2|    used_from_bin_crate_and_lib_crate_generic_function(\"used from library used_crate.rs\");\n-   84|      2|    used_with_same_type_from_bin_crate_and_lib_crate_generic_function(\n-   85|      2|        \"used from library used_crate.rs\",\n-   86|      2|    );\n-   87|      2|    let some_vec = vec![5, 6, 7, 8];\n-   88|      2|    used_only_from_this_lib_crate_generic_function(some_vec);\n-   89|      2|    used_only_from_this_lib_crate_generic_function(\"used ONLY from library used_crate.rs\");\n-   90|      2|}\n+  |   49|      2|pub fn used_with_same_type_from_bin_crate_and_lib_crate_generic_function<T: Debug>(arg: T) {\n+  |   50|      2|    println!(\"used_with_same_type_from_bin_crate_and_lib_crate_generic_function with {:?}\", arg);\n+  |   51|      2|}\n+  ------------------\n+   52|       |\n+   53|       |#[inline(always)]\n+   54|      0|pub fn unused_generic_function<T: Debug>(arg: T) {\n+   55|      0|    println!(\"unused_generic_function with {:?}\", arg);\n+   56|      0|}\n+   57|       |\n+   58|       |#[inline(always)]\n+   59|      0|pub fn unused_function() {\n+   60|      0|    let is_true = std::env::args().len() == 1;\n+   61|      0|    let mut countdown = 2;\n+   62|      0|    if !is_true {\n+   63|      0|        countdown = 20;\n+   64|      0|    }\n+   65|      0|}\n+   66|       |\n+   67|       |#[inline(always)]\n+   68|      0|fn unused_private_function() {\n+   69|      0|    let is_true = std::env::args().len() == 1;\n+   70|      0|    let mut countdown = 2;\n+   71|      0|    if !is_true {\n+   72|      0|        countdown = 20;\n+   73|      0|    }\n+   74|      0|}\n+   75|       |\n+   76|      2|fn use_this_lib_crate() {\n+   77|      2|    used_from_bin_crate_and_lib_crate_generic_function(\"used from library used_crate.rs\");\n+   78|      2|    used_with_same_type_from_bin_crate_and_lib_crate_generic_function(\n+   79|      2|        \"used from library used_crate.rs\",\n+   80|      2|    );\n+   81|      2|    let some_vec = vec![5, 6, 7, 8];\n+   82|      2|    used_only_from_this_lib_crate_generic_function(some_vec);\n+   83|      2|    used_only_from_this_lib_crate_generic_function(\"used ONLY from library used_crate.rs\");\n+   84|      2|}\n "}, {"sha": "249e99fccb8b5e1eaad13385f965e83629d7b774", "filename": "src/test/run-make-fulldeps/coverage/lib/used_inline_crate.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/26d260bfa4a31df541ff1d4c24965730660b4114/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_inline_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26d260bfa4a31df541ff1d4c24965730660b4114/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_inline_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fcoverage%2Flib%2Fused_inline_crate.rs?ref=26d260bfa4a31df541ff1d4c24965730660b4114", "patch": "@@ -28,12 +28,6 @@ pub fn used_inline_function() {\n     }\n     use_this_lib_crate();\n }\n-// Expect for above function:\n-//\n-// | Unexecuted instantiation: used_crate::used_only_from_bin_crate_generic_function::<_>\n-//\n-// With `#[inline(always)]` this function is instantiated twice, in both the library crate (which\n-// does not use it) and the `uses_inline_crate` binary (which does use/call it).\n \n #[inline(always)]\n pub fn used_only_from_bin_crate_generic_function<T: Debug>(arg: T) {"}]}