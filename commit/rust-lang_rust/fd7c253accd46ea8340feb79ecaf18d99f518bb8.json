{"sha": "fd7c253accd46ea8340feb79ecaf18d99f518bb8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkN2MyNTNhY2NkNDZlYTgzNDBmZWI3OWVjYWYxOGQ5OWY1MThiYjg=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-03-30T22:06:09Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-05-20T15:12:49Z"}, "message": "Update tests.", "tree": {"sha": "feea292bca793ad38ae2204f0a8d7c692d613b34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/feea292bca793ad38ae2204f0a8d7c692d613b34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fd7c253accd46ea8340feb79ecaf18d99f518bb8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fd7c253accd46ea8340feb79ecaf18d99f518bb8", "html_url": "https://github.com/rust-lang/rust/commit/fd7c253accd46ea8340feb79ecaf18d99f518bb8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fd7c253accd46ea8340feb79ecaf18d99f518bb8/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aea954b74de16888f09ff003ebfdf97f9f7ef001", "url": "https://api.github.com/repos/rust-lang/rust/commits/aea954b74de16888f09ff003ebfdf97f9f7ef001", "html_url": "https://github.com/rust-lang/rust/commit/aea954b74de16888f09ff003ebfdf97f9f7ef001"}], "stats": {"total": 1319, "additions": 1259, "deletions": 60}, "files": [{"sha": "85724cb7c6e851d1a20f8b441f9ba7ebe81c1fa5", "filename": "src/test/ui/associated-types/associated-types-overridden-binding-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-overridden-binding-2.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -6,7 +6,7 @@ LL |     let _: &I32Iterator<Item = u32> = &vec![42].into_iter();\n    |\n    = note: expected type `u32`\n               found type `i32`\n-   = note: required for the cast to the object type `dyn I32Iterator<Item = u32, Item = i32>`\n+   = note: required for the cast to the object type `dyn std::iter::Iterator<Item = u32, Item = i32>`\n \n error: aborting due to previous error\n "}, {"sha": "671840acdbfe8d191cfbfb6a6dcfc393ca9e3f62", "filename": "src/test/ui/bad/bad-sized.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fbad%2Fbad-sized.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -2,7 +2,9 @@ error[E0225]: only auto traits can be used as additional traits in a trait objec\n   --> $DIR/bad-sized.rs:4:24\n    |\n LL |     let x: Vec<Trait + Sized> = Vec::new();\n-   |                        ^^^^^ non-auto additional trait\n+   |                -----   ^^^^^ additional non-auto trait\n+   |                |\n+   |                first non-auto trait\n \n error[E0277]: the size for values of type `dyn Trait` cannot be known at compilation time\n   --> $DIR/bad-sized.rs:4:12"}, {"sha": "183cf0aad643994bda42d8dd2270f01579d3e6c8", "filename": "src/test/ui/error-codes/E0225.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0225.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -2,16 +2,20 @@ error[E0225]: only auto traits can be used as additional traits in a trait objec\n   --> $DIR/E0225.rs:6:32\n    |\n LL |     let _: Box<std::io::Read + std::io::Write>;\n-   |                                ^^^^^^^^^^^^^^ non-auto additional trait\n+   |                -------------   ^^^^^^^^^^^^^^ additional non-auto trait\n+   |                |\n+   |                first non-auto trait\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/E0225.rs:8:16\n    |\n LL | trait Foo = std::io::Read + std::io::Write;\n-   |                             -------------- non-auto additional trait\n+   |             -------------   -------------- additional non-auto trait\n+   |             |\n+   |             first non-auto trait\n ...\n LL |     let _: Box<Foo>;\n-   |                ^^^ expanded from this alias\n+   |                ^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "2c6f4d9d45f7c24a7280dfe51aac99d5def97a1a", "filename": "src/test/ui/issues/issue-22560.stderr", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22560.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -1,34 +1,42 @@\n error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-22560.rs:3:13\n+  --> $DIR/issue-22560.rs:6:13\n    |\n-LL | type Test = Add +\n+LL |             Sub;\n    |             ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0393]: the type parameter `Rhs` must be explicitly specified\n-  --> $DIR/issue-22560.rs:6:13\n+  --> $DIR/issue-22560.rs:3:13\n    |\n-LL |             Sub;\n+LL | type Test = Add +\n    |             ^^^ missing reference to `Rhs`\n    |\n    = note: because of the default `Self` reference, type parameters must be specified on object types\n \n error[E0225]: only auto traits can be used as additional traits in a trait object\n   --> $DIR/issue-22560.rs:6:13\n    |\n+LL | type Test = Add +\n+   |             --- first non-auto trait\n+...\n LL |             Sub;\n-   |             ^^^ non-auto additional trait\n+   |             ^^^ additional non-auto trait\n \n-error[E0191]: the value of the associated type `Output` (from the trait `std::ops::Add`) must be specified\n+error[E0191]: the value of the associated types `Output` (from the trait `std::ops::Add`), `Output` (from the trait `std::ops::Sub`) must be specified\n   --> $DIR/issue-22560.rs:3:13\n    |\n LL |   type Test = Add +\n    |  _____________^\n+   | |_____________|\n+   | |\n LL | |\n LL | |\n LL | |             Sub;\n-   | |_______________^ associated type `Output` must be specified\n+   | |               ^\n+   | |_______________|\n+   | |_______________associated type `Output` must be specified\n+   |                 associated type `Output` must be specified\n \n error: aborting due to 4 previous errors\n "}, {"sha": "381ccdbeb99922d989a0ad23254b27a519be4fa4", "filename": "src/test/ui/issues/issue-32963.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-32963.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -2,7 +2,9 @@ error[E0225]: only auto traits can be used as additional traits in a trait objec\n   --> $DIR/issue-32963.rs:8:25\n    |\n LL |     size_of_copy::<Misc+Copy>();\n-   |                         ^^^^ non-auto additional trait\n+   |                    ---- ^^^^ additional non-auto trait\n+   |                    |\n+   |                    first non-auto trait\n \n error[E0277]: the trait bound `dyn Misc: std::marker::Copy` is not satisfied\n   --> $DIR/issue-32963.rs:8:5"}, {"sha": "7defd8d3943b15d622a37d0f23fffe6974c7b5c1", "filename": "src/test/ui/maybe-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Fmaybe-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Fmaybe-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmaybe-bounds.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -1,6 +1,6 @@\n trait Tr: ?Sized {} //~ ERROR `?Trait` is not permitted in supertraits\n \n-type A1 = Tr + (?Sized); //~ ERROR `?Trait` is not permitted in trait object types\n-type A2 = for<'a> Tr + (?Sized); //~ ERROR `?Trait` is not permitted in trait object types\n+type A1 = Tr + (?Sized);\n+type A2 = for<'a> Tr + (?Sized);\n \n fn main() {}"}, {"sha": "d8c2adfc61c50488d9dfdaed886d491c28270821", "filename": "src/test/ui/maybe-bounds.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Fmaybe-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Fmaybe-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmaybe-bounds.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -6,17 +6,5 @@ LL | trait Tr: ?Sized {}\n    |\n    = note: traits are `?Sized` by default\n \n-error: `?Trait` is not permitted in trait object types\n-  --> $DIR/maybe-bounds.rs:3:16\n-   |\n-LL | type A1 = Tr + (?Sized);\n-   |                ^^^^^^^^\n-\n-error: `?Trait` is not permitted in trait object types\n-  --> $DIR/maybe-bounds.rs:4:24\n-   |\n-LL | type A2 = for<'a> Tr + (?Sized);\n-   |                        ^^^^^^^^\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n "}, {"sha": "49373564f673962bd032e445cbdf55c14362ac8d", "filename": "src/test/ui/parser/trait-object-trait-parens.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -4,9 +4,7 @@ fn f<T: (Copy) + (?Sized) + (for<'a> Trait<'a>)>() {}\n \n fn main() {\n     let _: Box<(Copy) + (?Sized) + (for<'a> Trait<'a>)>;\n-    //~^ ERROR `?Trait` is not permitted in trait object types\n     let _: Box<(?Sized) + (for<'a> Trait<'a>) + (Copy)>;\n     let _: Box<(for<'a> Trait<'a>) + (Copy) + (?Sized)>;\n-    //~^ ERROR `?Trait` is not permitted in trait object types\n-    //~| ERROR use of undeclared lifetime name `'a`\n+    //~^ ERROR use of undeclared lifetime name `'a`\n }"}, {"sha": "1cf40b30406c3dcb3bf38c2faae6c53a871cf620", "filename": "src/test/ui/parser/trait-object-trait-parens.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrait-object-trait-parens.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -1,21 +1,9 @@\n-error: `?Trait` is not permitted in trait object types\n-  --> $DIR/trait-object-trait-parens.rs:6:25\n-   |\n-LL |     let _: Box<(Copy) + (?Sized) + (for<'a> Trait<'a>)>;\n-   |                         ^^^^^^^^\n-\n-error: `?Trait` is not permitted in trait object types\n-  --> $DIR/trait-object-trait-parens.rs:9:47\n-   |\n-LL |     let _: Box<(for<'a> Trait<'a>) + (Copy) + (?Sized)>;\n-   |                                               ^^^^^^^^\n-\n error[E0261]: use of undeclared lifetime name `'a`\n-  --> $DIR/trait-object-trait-parens.rs:9:31\n+  --> $DIR/trait-object-trait-parens.rs:8:31\n    |\n LL |     let _: Box<(for<'a> Trait<'a>) + (Copy) + (?Sized)>;\n    |                               ^^ undeclared lifetime\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0261`."}, {"sha": "379637401179b100c6d26947b0fab085b864932c", "filename": "src/test/ui/traits/trait-alias-object.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/aea954b74de16888f09ff003ebfdf97f9f7ef001/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aea954b74de16888f09ff003ebfdf97f9f7ef001/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias-object.rs?ref=aea954b74de16888f09ff003ebfdf97f9f7ef001", "patch": "@@ -1,9 +0,0 @@\n-#![feature(trait_alias)]\n-\n-trait EqAlias = Eq;\n-trait IteratorAlias = Iterator;\n-\n-fn main() {\n-    let _: &dyn EqAlias = &123; //~ ERROR `EqAlias` cannot be made into an object\n-    let _: &dyn IteratorAlias = &vec![123].into_iter(); //~ ERROR must be specified\n-}"}, {"sha": "9e56b87e088133d6e632ec47f25b066698297922", "filename": "src/test/ui/traits/trait-alias/auxiliary/trait_alias.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Fauxiliary%2Ftrait_alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Fauxiliary%2Ftrait_alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Fauxiliary%2Ftrait_alias.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "previous_filename": "src/test/ui/traits/auxiliary/trait_alias.rs"}, {"sha": "428ce5102bad89415067d057c1a4da107e5b1c91", "filename": "src/test/ui/traits/trait-alias/trait-alias-bounds.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-bounds.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -1,3 +1,5 @@\n+// run-pass\n+\n #![feature(trait_alias)]\n \n use std::marker::PhantomData;", "previous_filename": "src/test/run-pass/traits/trait-alias-bounds.rs"}, {"sha": "259fc4fa5d1ce9ef2ce92eeb1df727027bd290dd", "filename": "src/test/ui/traits/trait-alias/trait-alias-cross-crate.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "previous_filename": "src/test/ui/traits/trait-alias-cross-crate.rs"}, {"sha": "972d213ac8f8f30a79de429403850aa998dfbeb9", "filename": "src/test/ui/traits/trait-alias/trait-alias-cross-crate.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-cross-crate.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "previous_filename": "src/test/ui/traits/trait-alias-cross-crate.stderr"}, {"sha": "6e35793a0669a9f593bfb8ceabc2e16b9f373e97", "filename": "src/test/ui/traits/trait-alias/trait-alias-impl.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-impl.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "previous_filename": "src/test/ui/traits/trait-alias-impl.rs"}, {"sha": "301db4fb71c65b88572a249ee3b5fc20bc824ad0", "filename": "src/test/ui/traits/trait-alias/trait-alias-impl.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-impl.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "previous_filename": "src/test/ui/traits/trait-alias-impl.stderr"}, {"sha": "f444dba5d28915a61a84616004ea6daaa32e5b41", "filename": "src/test/ui/traits/trait-alias/trait-alias-maybe-bound.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-maybe-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-maybe-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-maybe-bound.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -0,0 +1,27 @@\n+// Test that `dyn ... + ?Sized + ...` resulting from the expansion of trait aliases is okay.\n+\n+#![feature(trait_alias)]\n+\n+trait S = ?Sized;\n+\n+// Nest a couple of levels deep:\n+trait _0 = S;\n+trait _1 = _0;\n+\n+// Straight list expansion:\n+type _T0 = dyn _1;\n+//~^ ERROR at least one non-builtin trait is required for an object type [E0224]\n+\n+// In second position:\n+type _T1 = dyn Copy + _1;\n+\n+// ... and with an auto trait:\n+type _T2 = dyn Copy + Send + _1;\n+\n+// Twice:\n+trait _2 = _1 + _1;\n+\n+type _T3 = dyn _2;\n+//~^ ERROR at least one non-builtin trait is required for an object type [E0224]\n+\n+fn main() {}"}, {"sha": "52e90c00c3741372671aefae5b16b2c91b1bee9c", "filename": "src/test/ui/traits/trait-alias/trait-alias-maybe-bound.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-maybe-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-maybe-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-maybe-bound.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -0,0 +1,14 @@\n+error[E0224]: at least one non-builtin trait is required for an object type\n+  --> $DIR/trait-alias-maybe-bound.rs:12:12\n+   |\n+LL | type _T0 = dyn _1;\n+   |            ^^^^^^\n+\n+error[E0224]: at least one non-builtin trait is required for an object type\n+  --> $DIR/trait-alias-maybe-bound.rs:24:12\n+   |\n+LL | type _T3 = dyn _2;\n+   |            ^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "95525883c6432c6c3bddf8e7535baa459c5b34d4", "filename": "src/test/ui/traits/trait-alias/trait-alias-no-duplicates.rs", "status": "added", "additions": 126, "deletions": 0, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-duplicates.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -0,0 +1,126 @@\n+// The purpose of this test is to demonstrate that duplicating object safe traits\n+// that are not auto traits is rejected with trait aliases even though one could\n+// reasonably accept this.\n+\n+#![feature(trait_alias)]\n+\n+use std::marker::Unpin;\n+\n+// Some arbitray object-safe trait:\n+trait Obj {}\n+\n+// Nest a few levels deep:\n+trait _0 = Obj;\n+trait _1 = _0;\n+\n+type _T00 = dyn _0 + _0;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T01 = dyn _1 + _0;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T02 = dyn _1 + _1;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T03 = dyn Obj + _1;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T04 = dyn _1 + Obj;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Nest some more and in weird ways:\n+\n+trait _2 = _0 + _1;\n+trait _3 = Obj;\n+trait _4 = _3;\n+\n+type _T10 = dyn _2 + _3;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T11 = dyn _3 + _2;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T12 = dyn Obj + _2;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T13 = dyn _2 + Obj;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T14 = dyn _1 + _3;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T15 = dyn _3 + _1;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T16 = dyn _1 + _4;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T17 = dyn _4 + _1;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Include auto traits:\n+\n+trait _5 = Obj + Send;\n+\n+type _T20 = dyn _5 + _5;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T21 = dyn Obj + _5;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T22 = dyn _5 + Obj;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T23 = dyn _5 + Send + Sync + Obj;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Also nest:\n+\n+trait _6 = _5 + _5; // ==> Obj + Send + Obj + Send\n+\n+type _T30 = dyn _6;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T31 = dyn _6 + Send;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T32 = dyn Send + _6;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Nest some more:\n+\n+trait _7 = _5 + Sync;\n+trait _8 = Unpin + _7;\n+\n+type _T40 = dyn _8 + Obj;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T41 = dyn Obj + _8;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T42 = dyn _8 + _4;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T43 = dyn _4 + _8;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T44 = dyn _4 + Send + Sync + _8;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Take higher ranked types into account.\n+\n+// Note that `'a` and `'b` are intentionally different to make sure we consider\n+// them semantically the same.\n+trait ObjL<'l> {}\n+trait _9 = for<'a> ObjL<'a>;\n+trait _10 = for<'b> ObjL<'b>;\n+type _T50 = _9 + _10;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+trait ObjT<T> {}\n+trait _11 = ObjT<for<'a> fn(&'a u8)>;\n+trait _12 = ObjT<for<'b> fn(&'b u8)>;\n+type _T60 = _11 + _12;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+fn main() {}"}, {"sha": "3cdf1582ab9c913dbb51e2c3f292ab9cb1fa346e", "filename": "src/test/ui/traits/trait-alias/trait-alias-no-duplicates.stderr", "status": "added", "additions": 358, "deletions": 0, "changes": 358, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-duplicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-duplicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-duplicates.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -0,0 +1,358 @@\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:16:22\n+   |\n+LL | trait _0 = Obj;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+...\n+LL | type _T00 = dyn _0 + _0;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:19:22\n+   |\n+LL | trait _0 = Obj;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+...\n+LL | type _T01 = dyn _1 + _0;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:22:22\n+   |\n+LL | trait _0 = Obj;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here\n+...\n+LL | type _T02 = dyn _1 + _1;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:25:23\n+   |\n+LL | trait _0 = Obj;\n+   |            --- additional non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here\n+...\n+LL | type _T03 = dyn Obj + _1;\n+   |                 ---   ^^\n+   |                 |\n+   |                 first non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:28:22\n+   |\n+LL | trait _0 = Obj;\n+   |            --- first non-auto trait\n+...\n+LL | type _T04 = dyn _1 + Obj;\n+   |                      ^^^ additional non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:37:17\n+   |\n+LL | trait _0 = Obj;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here\n+...\n+LL | trait _2 = _0 + _1;\n+   |                 -- referenced here\n+...\n+LL | type _T10 = dyn _2 + _3;\n+   |                 ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:40:22\n+   |\n+LL | trait _0 = Obj;\n+   |            --- additional non-auto trait\n+...\n+LL | trait _2 = _0 + _1;\n+   |            -- referenced here\n+LL | trait _3 = Obj;\n+   |            --- first non-auto trait\n+...\n+LL | type _T11 = dyn _3 + _2;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:43:23\n+   |\n+LL | trait _0 = Obj;\n+   |            --- additional non-auto trait\n+...\n+LL | trait _2 = _0 + _1;\n+   |            -- referenced here\n+...\n+LL | type _T12 = dyn Obj + _2;\n+   |                 ---   ^^\n+   |                 |\n+   |                 first non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:46:17\n+   |\n+LL | trait _0 = Obj;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here\n+...\n+LL | trait _2 = _0 + _1;\n+   |                 -- referenced here\n+...\n+LL | type _T13 = dyn _2 + Obj;\n+   |                 ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:49:22\n+   |\n+LL | trait _0 = Obj;\n+   |            --- first non-auto trait\n+...\n+LL | trait _3 = Obj;\n+   |            --- additional non-auto trait\n+...\n+LL | type _T14 = dyn _1 + _3;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:52:22\n+   |\n+LL | trait _0 = Obj;\n+   |            --- additional non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here\n+...\n+LL | trait _3 = Obj;\n+   |            --- first non-auto trait\n+...\n+LL | type _T15 = dyn _3 + _1;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:55:22\n+   |\n+LL | trait _0 = Obj;\n+   |            --- first non-auto trait\n+...\n+LL | trait _3 = Obj;\n+   |            --- additional non-auto trait\n+LL | trait _4 = _3;\n+   |            -- referenced here\n+...\n+LL | type _T16 = dyn _1 + _4;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:58:22\n+   |\n+LL | trait _0 = Obj;\n+   |            --- additional non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here\n+...\n+LL | trait _3 = Obj;\n+   |            --- first non-auto trait\n+...\n+LL | type _T17 = dyn _4 + _1;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:65:22\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+LL | \n+LL | type _T20 = dyn _5 + _5;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:68:23\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            --- additional non-auto trait\n+...\n+LL | type _T21 = dyn Obj + _5;\n+   |                 ---   ^^\n+   |                 |\n+   |                 first non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:71:22\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            --- first non-auto trait\n+...\n+LL | type _T22 = dyn _5 + Obj;\n+   |                      ^^^ additional non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:74:36\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            --- first non-auto trait\n+...\n+LL | type _T23 = dyn _5 + Send + Sync + Obj;\n+   |                                    ^^^ additional non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:81:17\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+...\n+LL | trait _6 = _5 + _5; // ==> Obj + Send + Obj + Send\n+   |                 -- referenced here\n+LL | \n+LL | type _T30 = dyn _6;\n+   |                 ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:84:17\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+...\n+LL | trait _6 = _5 + _5; // ==> Obj + Send + Obj + Send\n+   |                 -- referenced here\n+...\n+LL | type _T31 = dyn _6 + Send;\n+   |                 ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:87:24\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            ---\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+...\n+LL | trait _6 = _5 + _5; // ==> Obj + Send + Obj + Send\n+   |                 -- referenced here\n+...\n+LL | type _T32 = dyn Send + _6;\n+   |                        ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:95:22\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            --- first non-auto trait\n+...\n+LL | type _T40 = dyn _8 + Obj;\n+   |                      ^^^ additional non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:98:23\n+   |\n+LL | trait _5 = Obj + Send;\n+   |            --- additional non-auto trait\n+...\n+LL | trait _7 = _5 + Sync;\n+   |            -- referenced here\n+LL | trait _8 = Unpin + _7;\n+   |                    -- referenced here\n+...\n+LL | type _T41 = dyn Obj + _8;\n+   |                 ---   ^^\n+   |                 |\n+   |                 first non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:101:22\n+   |\n+LL | trait _3 = Obj;\n+   |            --- additional non-auto trait\n+LL | trait _4 = _3;\n+   |            -- referenced here\n+...\n+LL | trait _5 = Obj + Send;\n+   |            --- first non-auto trait\n+...\n+LL | type _T42 = dyn _8 + _4;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:104:22\n+   |\n+LL | trait _3 = Obj;\n+   |            --- first non-auto trait\n+...\n+LL | trait _5 = Obj + Send;\n+   |            --- additional non-auto trait\n+...\n+LL | trait _7 = _5 + Sync;\n+   |            -- referenced here\n+LL | trait _8 = Unpin + _7;\n+   |                    -- referenced here\n+...\n+LL | type _T43 = dyn _4 + _8;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:107:36\n+   |\n+LL | trait _3 = Obj;\n+   |            --- first non-auto trait\n+...\n+LL | trait _5 = Obj + Send;\n+   |            --- additional non-auto trait\n+...\n+LL | trait _7 = _5 + Sync;\n+   |            -- referenced here\n+LL | trait _8 = Unpin + _7;\n+   |                    -- referenced here\n+...\n+LL | type _T44 = dyn _4 + Send + Sync + _8;\n+   |                                    ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:117:18\n+   |\n+LL | trait _9 = for<'a> ObjL<'a>;\n+   |            ---------------- first non-auto trait\n+LL | trait _10 = for<'b> ObjL<'b>;\n+   |             ---------------- additional non-auto trait\n+LL | type _T50 = _9 + _10;\n+   |                  ^^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-duplicates.rs:123:19\n+   |\n+LL | trait _11 = ObjT<for<'a> fn(&'a u8)>;\n+   |             ------------------------ first non-auto trait\n+LL | trait _12 = ObjT<for<'b> fn(&'b u8)>;\n+   |             ------------------------ additional non-auto trait\n+LL | type _T60 = _11 + _12;\n+   |                   ^^^\n+\n+error: aborting due to 27 previous errors\n+\n+For more information about this error, try `rustc --explain E0225`."}, {"sha": "54c177f0db807b9c83bbc6eafa0f33214dd42eba", "filename": "src/test/ui/traits/trait-alias/trait-alias-no-extra-traits.rs", "status": "added", "additions": 121, "deletions": 0, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-extra-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-extra-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-extra-traits.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -0,0 +1,121 @@\n+// The purpose of this test is to demonstrate that trait alias expansion\n+// preserves the rule that `dyn Trait` may only reference one non-auto trait.\n+\n+#![feature(trait_alias)]\n+\n+use std::marker::Unpin;\n+\n+// Some arbitray object-safe traits:\n+trait ObjA {}\n+trait ObjB {}\n+\n+// Nest a few levels deep:\n+trait _0 = ObjA;\n+trait _1 = _0;\n+\n+type _T00 = dyn _0 + ObjB;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T01 = dyn ObjB + _0;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T02 = dyn ObjB + _1;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T03 = dyn _1 + ObjB;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Nest some more and in weird ways:\n+\n+trait _2 = ObjB;\n+trait _3 = _2;\n+trait _4 = _3;\n+\n+type _T10 = dyn _2 + _3;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T11 = dyn _3 + _2;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T12 = dyn _2 + _4;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T13 = dyn _4 + _2;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Include auto traits:\n+\n+trait _5 = Sync + ObjB + Send;\n+\n+type _T20 = dyn _5 + _1;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T21 = dyn _1 + _5;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T22 = dyn _5 + ObjA;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T23 = dyn ObjA + _5;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T24 = dyn Send + _5 + _1 + Sync;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T25 = dyn _1 + Sync + _5 + Send;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T26 = dyn Sync + Send + _5 + ObjA;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T27 = dyn Send + Sync + ObjA + _5;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Also nest:\n+\n+trait _6 = _1 + _5;\n+trait _7 = _6;\n+trait _8 = _7;\n+\n+type _T30 = dyn _6;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T31 = dyn _6 + Send;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T32 = dyn Send + _6;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T33 = dyn _8;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T34 = dyn _8 + Send;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T35 = dyn Send + _8;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Nest some more:\n+\n+trait _9 = _5 + Sync;\n+trait _10 = Unpin + _9;\n+\n+type _T40 = dyn _10 + ObjA;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T41 = dyn ObjA + _10;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T42 = dyn _10 + _1;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T43 = dyn Send + _10 + Sync + ObjA;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T44 = dyn ObjA + _10 + Send + Sync;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _T45 = dyn Sync + Send + _10 + _1;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+fn main() {}"}, {"sha": "d73667a07097a1378c49b20d69cceb6e167e8a4e", "filename": "src/test/ui/traits/trait-alias/trait-alias-no-extra-traits.stderr", "status": "added", "additions": 371, "deletions": 0, "changes": 371, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-extra-traits.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-extra-traits.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-no-extra-traits.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -0,0 +1,371 @@\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:16:22\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+...\n+LL | type _T00 = dyn _0 + ObjB;\n+   |                      ^^^^ additional non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:19:24\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- additional non-auto trait\n+...\n+LL | type _T01 = dyn ObjB + _0;\n+   |                 ----   ^^\n+   |                 |\n+   |                 first non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:22:24\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- additional non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here\n+...\n+LL | type _T02 = dyn ObjB + _1;\n+   |                 ----   ^^\n+   |                 |\n+   |                 first non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:25:22\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+...\n+LL | type _T03 = dyn _1 + ObjB;\n+   |                      ^^^^ additional non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:34:22\n+   |\n+LL | trait _2 = ObjB;\n+   |            ----\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+LL | trait _3 = _2;\n+   |            -- referenced here\n+...\n+LL | type _T10 = dyn _2 + _3;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:37:22\n+   |\n+LL | trait _2 = ObjB;\n+   |            ----\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+...\n+LL | type _T11 = dyn _3 + _2;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:40:22\n+   |\n+LL | trait _2 = ObjB;\n+   |            ----\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+LL | trait _3 = _2;\n+   |            -- referenced here\n+LL | trait _4 = _3;\n+   |            -- referenced here\n+...\n+LL | type _T12 = dyn _2 + _4;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:43:22\n+   |\n+LL | trait _2 = ObjB;\n+   |            ----\n+   |            |\n+   |            additional non-auto trait\n+   |            first non-auto trait\n+...\n+LL | type _T13 = dyn _4 + _2;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:50:22\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- additional non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- first non-auto trait\n+LL | \n+LL | type _T20 = dyn _5 + _1;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:53:22\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | type _T21 = dyn _1 + _5;\n+   |                      ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:56:22\n+   |\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- first non-auto trait\n+...\n+LL | type _T22 = dyn _5 + ObjA;\n+   |                      ^^^^ additional non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:59:24\n+   |\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | type _T23 = dyn ObjA + _5;\n+   |                 ----   ^^\n+   |                 |\n+   |                 first non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:62:29\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- additional non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- first non-auto trait\n+...\n+LL | type _T24 = dyn Send + _5 + _1 + Sync;\n+   |                             ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:65:29\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | type _T25 = dyn _1 + Sync + _5 + Send;\n+   |                             ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:68:36\n+   |\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- first non-auto trait\n+...\n+LL | type _T26 = dyn Sync + Send + _5 + ObjA;\n+   |                                    ^^^^ additional non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:71:38\n+   |\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | type _T27 = dyn Send + Sync + ObjA + _5;\n+   |                               ----   ^^\n+   |                               |\n+   |                               first non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:80:17\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | trait _6 = _1 + _5;\n+   |                 -- referenced here\n+...\n+LL | type _T30 = dyn _6;\n+   |                 ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:83:17\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | trait _6 = _1 + _5;\n+   |                 -- referenced here\n+...\n+LL | type _T31 = dyn _6 + Send;\n+   |                 ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:86:24\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | trait _6 = _1 + _5;\n+   |                 -- referenced here\n+...\n+LL | type _T32 = dyn Send + _6;\n+   |                        ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:89:17\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | trait _6 = _1 + _5;\n+   |                 -- referenced here\n+LL | trait _7 = _6;\n+   |            -- referenced here\n+LL | trait _8 = _7;\n+   |            -- referenced here\n+...\n+LL | type _T33 = dyn _8;\n+   |                 ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:92:17\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | trait _6 = _1 + _5;\n+   |                 -- referenced here\n+LL | trait _7 = _6;\n+   |            -- referenced here\n+LL | trait _8 = _7;\n+   |            -- referenced here\n+...\n+LL | type _T34 = dyn _8 + Send;\n+   |                 ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:95:24\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- first non-auto trait\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | trait _6 = _1 + _5;\n+   |                 -- referenced here\n+LL | trait _7 = _6;\n+   |            -- referenced here\n+LL | trait _8 = _7;\n+   |            -- referenced here\n+...\n+LL | type _T35 = dyn Send + _8;\n+   |                        ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:103:23\n+   |\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- first non-auto trait\n+...\n+LL | type _T40 = dyn _10 + ObjA;\n+   |                       ^^^^ additional non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:106:24\n+   |\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | trait _9 = _5 + Sync;\n+   |            -- referenced here\n+LL | trait _10 = Unpin + _9;\n+   |                     -- referenced here\n+...\n+LL | type _T41 = dyn ObjA + _10;\n+   |                 ----   ^^^\n+   |                 |\n+   |                 first non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:109:23\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- additional non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- first non-auto trait\n+...\n+LL | type _T42 = dyn _10 + _1;\n+   |                       ^^\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:112:37\n+   |\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- first non-auto trait\n+...\n+LL | type _T43 = dyn Send + _10 + Sync + ObjA;\n+   |                                     ^^^^ additional non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:115:24\n+   |\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- additional non-auto trait\n+...\n+LL | trait _9 = _5 + Sync;\n+   |            -- referenced here\n+LL | trait _10 = Unpin + _9;\n+   |                     -- referenced here\n+...\n+LL | type _T44 = dyn ObjA + _10 + Send + Sync;\n+   |                 ----   ^^^\n+   |                 |\n+   |                 first non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/trait-alias-no-extra-traits.rs:118:37\n+   |\n+LL | trait _0 = ObjA;\n+   |            ---- additional non-auto trait\n+LL | trait _1 = _0;\n+   |            -- referenced here\n+...\n+LL | trait _5 = Sync + ObjB + Send;\n+   |                   ---- first non-auto trait\n+...\n+LL | type _T45 = dyn Sync + Send + _10 + _1;\n+   |                                     ^^\n+\n+error: aborting due to 28 previous errors\n+\n+For more information about this error, try `rustc --explain E0225`."}, {"sha": "d62fd7e59c9204b6c89f8f643d283ff665d8d1b0", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-fail.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -0,0 +1,11 @@\n+#![feature(trait_alias)]\n+\n+trait EqAlias = Eq;\n+trait IteratorAlias = Iterator;\n+\n+fn main() {\n+    let _: &dyn EqAlias = &123;\n+    //~^ ERROR the trait `std::cmp::Eq` cannot be made into an object [E0038]\n+    let _: &dyn IteratorAlias = &vec![123].into_iter();\n+    //~^ ERROR must be specified\n+}"}, {"sha": "9a9b91770308516c902d4b38165d095e4b3fd492", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-fail.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-fail.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -1,13 +1,13 @@\n-error[E0038]: the trait `EqAlias` cannot be made into an object\n-  --> $DIR/trait-alias-object.rs:7:13\n+error[E0038]: the trait `std::cmp::Eq` cannot be made into an object\n+  --> $DIR/trait-alias-object-fail.rs:7:13\n    |\n LL |     let _: &dyn EqAlias = &123;\n-   |             ^^^^^^^^^^^ the trait `EqAlias` cannot be made into an object\n+   |             ^^^^^^^^^^^ the trait `std::cmp::Eq` cannot be made into an object\n    |\n    = note: the trait cannot use `Self` as a type parameter in the supertraits or where-clauses\n \n error[E0191]: the value of the associated type `Item` (from the trait `std::iter::Iterator`) must be specified\n-  --> $DIR/trait-alias-object.rs:8:13\n+  --> $DIR/trait-alias-object-fail.rs:9:13\n    |\n LL |     let _: &dyn IteratorAlias = &vec![123].into_iter();\n    |             ^^^^^^^^^^^^^^^^^ associated type `Item` must be specified", "previous_filename": "src/test/ui/traits/trait-alias-object.stderr"}, {"sha": "6383e8b6e10f671b7f07a3bde1ed049a27757157", "filename": "src/test/ui/traits/trait-alias/trait-alias-object-wf.rs", "status": "added", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object-wf.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -0,0 +1,71 @@\n+// run-pass\n+\n+// This test checks that trait objects involving trait aliases are well-formed.\n+\n+#![feature(trait_alias)]\n+\n+trait Obj {}\n+\n+trait _0 = Send + Sync;\n+\n+// Just auto traits:\n+\n+trait _1 = _0 + Send + Sync;\n+\n+use std::marker::Unpin;\n+\n+type _T01 = dyn _0;\n+type _T02 = dyn _1;\n+type _T03 = dyn Unpin + _1 + Send + Sync;\n+\n+// Include object safe traits:\n+\n+type _T10 = dyn Obj + _0;\n+type _T11 = dyn Obj + _1;\n+type _T12 = dyn Obj + _1 + _0;\n+\n+// And when the object safe trait is in a trait alias:\n+\n+trait _2 = Obj;\n+\n+type _T20 = dyn _2 + _0;\n+type _T21 = dyn _2 + _1;\n+type _T22 = dyn _2 + _1 + _0;\n+\n+// And it should also work when that trait is has auto traits to the right of it.\n+\n+trait _3 = Obj + Unpin;\n+\n+type _T30 = dyn _3 + _0;\n+type _T31 = dyn _3 + _1;\n+type _T32 = dyn _3 + _1 + _0;\n+\n+// Nest the trait deeply:\n+\n+trait _4 = _3;\n+trait _5 = _4 + Sync + _0 + Send;\n+trait _6 = _5 + Send + _1 + Sync;\n+\n+type _T60 = dyn _6 + _0;\n+type _T61 = dyn _6 + _1;\n+type _T62 = dyn _6 + _1 + _0;\n+\n+// Just nest the trait alone:\n+\n+trait _7 = _2;\n+trait _8 = _7;\n+trait _9 = _8;\n+\n+type _T9 = dyn _9;\n+\n+// First bound is auto trait:\n+\n+trait _10 = Send + Obj;\n+trait _11 = Obj + Send;\n+trait _12 = Sync + _11;\n+trait _13 = Send + _12;\n+\n+type _T70 = dyn _0;\n+type _T71 = dyn _3;\n+\n+fn main() {}"}, {"sha": "12177cd827fdfd2aa5ccfeeebbcb2b1b7aa07748", "filename": "src/test/ui/traits/trait-alias/trait-alias-object.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-object.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -1,3 +1,5 @@\n+// run-pass\n+\n #![feature(trait_alias)]\n \n trait Foo = PartialEq<i32> + Send;", "previous_filename": "src/test/run-pass/traits/trait-alias-object.rs"}, {"sha": "5948d45b6987fcd778123f9e06a1f74e77d6b7c0", "filename": "src/test/ui/traits/trait-alias/trait-alias-syntax-fail.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "previous_filename": "src/test/ui/traits/trait-alias-syntax.rs"}, {"sha": "f456a2d778c259cbeaccc8c8546a7f66478f43ef", "filename": "src/test/ui/traits/trait-alias/trait-alias-syntax-fail.stderr", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax-fail.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -1,11 +1,11 @@\n error: trait aliases cannot be `auto`\n-  --> $DIR/trait-alias-syntax.rs:4:19\n+  --> $DIR/trait-alias-syntax-fail.rs:4:19\n    |\n LL | auto trait A = Foo;\n    |                   ^ trait aliases cannot be `auto`\n \n error: trait aliases cannot be `unsafe`\n-  --> $DIR/trait-alias-syntax.rs:5:21\n+  --> $DIR/trait-alias-syntax-fail.rs:5:21\n    |\n LL | unsafe trait B = Foo;\n    |                     ^ trait aliases cannot be `unsafe`", "previous_filename": "src/test/ui/traits/trait-alias-syntax.stderr"}, {"sha": "17557a51aa7234aeca9340e25ed845993207c15e", "filename": "src/test/ui/traits/trait-alias/trait-alias-syntax.rs", "status": "renamed", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-syntax.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -1,3 +1,5 @@\n+// run-pass\n+\n #![feature(trait_alias)]\n \n trait SimpleAlias = Default;", "previous_filename": "src/test/run-pass/traits/trait-alias-syntax.rs"}, {"sha": "d10e2abb0e1a39b40a6d3364572c7221a84ea5db", "filename": "src/test/ui/traits/trait-alias/trait-alias-wf.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "previous_filename": "src/test/ui/traits/trait-alias-wf.rs"}, {"sha": "ee2dd5b24afed9eabda43c1d668110690b7389ac", "filename": "src/test/ui/traits/trait-alias/trait-alias-wf.stderr", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-wf.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "previous_filename": "src/test/ui/traits/trait-alias-wf.stderr"}, {"sha": "d8168f2990c4675b68cb6af0716eee43e0b4355c", "filename": "src/test/ui/traits/trait-alias/trait-alias.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+\n #![feature(trait_alias)]\n \n pub trait Foo {}", "previous_filename": "src/test/ui/run-pass/traits/trait-alias.rs"}, {"sha": "f0c2c1082b09f8b3952175cb4bb2239a9b0184d7", "filename": "src/test/ui/traits/traits-static-outlives-a-where-clause.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftraits-static-outlives-a-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Ftraits-static-outlives-a-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftraits-static-outlives-a-where-clause.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "previous_filename": "src/test/ui/run-pass/traits/traits-static-outlives-a-where-clause.rs"}, {"sha": "68f0155faf9bb447dc55a3cb37851abf4e48a94d", "filename": "src/test/ui/traits/wf-trait-object-maybe-bound.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -0,0 +1,13 @@\n+// The purpose of this test is to demonstrate that `?Sized` is allowed in trait objects\n+// (thought it has no effect).\n+\n+type _0 = dyn ?Sized;\n+//~^ ERROR at least one non-builtin trait is required for an object type [E0224]\n+\n+type _1 = dyn Clone + ?Sized;\n+\n+type _2 = dyn Clone + ?Sized + ?Sized;\n+\n+type _3 = dyn ?Sized + Clone;\n+\n+fn main() {}"}, {"sha": "ba24b83421181926e2ecf2a1b6f446d9e99c0d2a", "filename": "src/test/ui/traits/wf-trait-object-maybe-bound.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-maybe-bound.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -0,0 +1,8 @@\n+error[E0224]: at least one non-builtin trait is required for an object type\n+  --> $DIR/wf-trait-object-maybe-bound.rs:4:11\n+   |\n+LL | type _0 = dyn ?Sized;\n+   |           ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "dd6d73619bceb7b9665cf64aff45f4079bb80ffa", "filename": "src/test/ui/traits/wf-trait-object-no-duplicates.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-no-duplicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-no-duplicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-no-duplicates.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -0,0 +1,33 @@\n+// The purpose of this test is to demonstrate that duplicating object safe traits\n+// that are not auto-traits is rejected even though one could reasonably accept this.\n+\n+// Some arbitray object-safe trait:\n+trait Obj {}\n+\n+// Demonstrate that recursive expansion of trait aliases doesn't affect stable behavior:\n+type _0 = dyn Obj + Obj;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+// Some variations:\n+\n+type _1 = dyn Send + Obj + Obj;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _2 = dyn Obj + Send + Obj;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+type _3 = dyn Obj + Send + Send; // But it is OK to duplicate auto traits.\n+\n+// Take higher ranked types into account.\n+\n+// Note that `'a` and `'b` are intentionally different to make sure we consider\n+// them semantically the same.\n+trait ObjL<'l> {}\n+type _4 = dyn for<'a> ObjL<'a> + for<'b> ObjL<'b>;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+trait ObjT<T> {}\n+type _5 = dyn ObjT<for<'a> fn(&'a u8)> + ObjT<for<'b> fn(&'b u8)>;\n+//~^ ERROR only auto traits can be used as additional traits in a trait object [E0225]\n+\n+fn main() {}"}, {"sha": "75dacb2e156553a50fe695f0dbd50ec01e416df1", "filename": "src/test/ui/traits/wf-trait-object-no-duplicates.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-no-duplicates.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-no-duplicates.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-no-duplicates.stderr?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -0,0 +1,43 @@\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/wf-trait-object-no-duplicates.rs:8:21\n+   |\n+LL | type _0 = dyn Obj + Obj;\n+   |               ---   ^^^ additional non-auto trait\n+   |               |\n+   |               first non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/wf-trait-object-no-duplicates.rs:13:28\n+   |\n+LL | type _1 = dyn Send + Obj + Obj;\n+   |                      ---   ^^^ additional non-auto trait\n+   |                      |\n+   |                      first non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/wf-trait-object-no-duplicates.rs:16:28\n+   |\n+LL | type _2 = dyn Obj + Send + Obj;\n+   |               ---          ^^^ additional non-auto trait\n+   |               |\n+   |               first non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/wf-trait-object-no-duplicates.rs:26:34\n+   |\n+LL | type _4 = dyn for<'a> ObjL<'a> + for<'b> ObjL<'b>;\n+   |               ----------------   ^^^^^^^^^^^^^^^^ additional non-auto trait\n+   |               |\n+   |               first non-auto trait\n+\n+error[E0225]: only auto traits can be used as additional traits in a trait object\n+  --> $DIR/wf-trait-object-no-duplicates.rs:30:42\n+   |\n+LL | type _5 = dyn ObjT<for<'a> fn(&'a u8)> + ObjT<for<'b> fn(&'b u8)>;\n+   |               ------------------------   ^^^^^^^^^^^^^^^^^^^^^^^^ additional non-auto trait\n+   |               |\n+   |               first non-auto trait\n+\n+error: aborting due to 5 previous errors\n+\n+For more information about this error, try `rustc --explain E0225`."}, {"sha": "f9c584ace5b245ff1d37a94ea3919a53fa9ee2ab", "filename": "src/test/ui/traits/wf-trait-object-reverse-order.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-reverse-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fd7c253accd46ea8340feb79ecaf18d99f518bb8/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-reverse-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-reverse-order.rs?ref=fd7c253accd46ea8340feb79ecaf18d99f518bb8", "patch": "@@ -0,0 +1,15 @@\n+// run-pass\n+\n+// Ensure that `dyn $($AutoTrait) + ObjSafe` is well-formed.\n+\n+use std::marker::Unpin;\n+\n+// Some arbitray object-safe trait:\n+trait Obj {}\n+\n+type _0 = Unpin;\n+type _1 = Send + Obj;\n+type _2 = Send + Unpin + Obj;\n+type _3 = Send + Unpin + Sync + Obj;\n+\n+fn main() {}"}]}