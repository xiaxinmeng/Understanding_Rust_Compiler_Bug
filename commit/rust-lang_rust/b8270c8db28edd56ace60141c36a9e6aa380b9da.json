{"sha": "b8270c8db28edd56ace60141c36a9e6aa380b9da", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4MjcwYzhkYjI4ZWRkNTZhY2U2MDE0MWMzNmE5ZTZhYTM4MGI5ZGE=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-21T03:44:45Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-21T03:44:45Z"}, "message": "Remove Rng.choose(), rename Rng.choose_option() to .choose()\n\nRng.choose() is used so rarely that it doesn't necessitate having two\nmethods, especially since the failing, non-option variant also requires\nClone.\n\n[breaking-change]", "tree": {"sha": "600c28b85b48897c358419587321611f297273b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/600c28b85b48897c358419587321611f297273b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8270c8db28edd56ace60141c36a9e6aa380b9da", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8270c8db28edd56ace60141c36a9e6aa380b9da", "html_url": "https://github.com/rust-lang/rust/commit/b8270c8db28edd56ace60141c36a9e6aa380b9da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8270c8db28edd56ace60141c36a9e6aa380b9da/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e546452727379f701f2104eb826141a29d4b39fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/e546452727379f701f2104eb826141a29d4b39fd", "html_url": "https://github.com/rust-lang/rust/commit/e546452727379f701f2104eb826141a29d4b39fd"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "76d803cdaccedc20c6170512d8f8241b63daa1a6", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8270c8db28edd56ace60141c36a9e6aa380b9da/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8270c8db28edd56ace60141c36a9e6aa380b9da/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=b8270c8db28edd56ace60141c36a9e6aa380b9da", "patch": "@@ -125,7 +125,7 @@ mod tests {\n         for _ in range(0, 20) {\n             let mut input = vec![];\n             for _ in range(0, 2000) {\n-                input.push_all(r.choose(words.as_slice()).as_slice());\n+                input.push_all(r.choose(words.as_slice()).unwrap().as_slice());\n             }\n             debug!(\"de/inflate of {} bytes of random word-sequences\",\n                    input.len());"}, {"sha": "c7a29ff728577fe49ef396dc7ccc4b3f9d243313", "filename": "src/librand/lib.rs", "status": "modified", "additions": 16, "deletions": 22, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b8270c8db28edd56ace60141c36a9e6aa380b9da/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8270c8db28edd56ace60141c36a9e6aa380b9da/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=b8270c8db28edd56ace60141c36a9e6aa380b9da", "patch": "@@ -266,37 +266,39 @@ pub trait Rng {\n                                                              0123456789\");\n         let mut s = StrBuf::with_capacity(len);\n         for _ in range(0, len) {\n-            s.push_char(self.choose(GEN_ASCII_STR_CHARSET) as char)\n+            s.push_char(*self.choose(GEN_ASCII_STR_CHARSET).unwrap() as char)\n         }\n         s\n     }\n \n-    /// Choose an item randomly, failing if `values` is empty.\n-    fn choose<T: Clone>(&mut self, values: &[T]) -> T {\n-        self.choose_option(values).expect(\"Rng.choose: `values` is empty\").clone()\n-    }\n-\n-    /// Choose `Some(&item)` randomly, returning `None` if values is\n-    /// empty.\n+    /// Return a random element from `values`.\n+    ///\n+    /// Return `None` if `values` is empty.\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n+    /// ```\n     /// use rand::{task_rng, Rng};\n     ///\n     /// let choices = [1, 2, 4, 8, 16, 32];\n     /// let mut rng = task_rng();\n-    /// println!(\"{:?}\", rng.choose_option(choices));\n-    /// println!(\"{:?}\", rng.choose_option(choices.slice_to(0)));\n+    /// println!(\"{}\", rng.choose(choices));\n+    /// assert_eq!(rng.choose(choices.slice_to(0)), None);\n     /// ```\n-    fn choose_option<'a, T>(&mut self, values: &'a [T]) -> Option<&'a T> {\n+    fn choose<'a, T>(&mut self, values: &'a [T]) -> Option<&'a T> {\n         if values.is_empty() {\n             None\n         } else {\n             Some(&values[self.gen_range(0u, values.len())])\n         }\n     }\n \n+    /// Deprecated name for `choose()`.\n+    #[deprecated = \"replaced by .choose()\"]\n+    fn choose_option<'a, T>(&mut self, values: &'a [T]) -> Option<&'a T> {\n+        self.choose(values)\n+    }\n+\n     /// Shuffle a mutable slice in place.\n     ///\n     /// # Example\n@@ -793,18 +795,10 @@ mod test {\n     #[test]\n     fn test_choose() {\n         let mut r = task_rng();\n-        assert_eq!(r.choose([1, 1, 1]), 1);\n-    }\n+        assert_eq!(r.choose([1, 1, 1]).map(|&x|x), Some(1));\n \n-    #[test]\n-    fn test_choose_option() {\n-        let mut r = task_rng();\n         let v: &[int] = &[];\n-        assert!(r.choose_option(v).is_none());\n-\n-        let i = 1;\n-        let v = [1,1,1];\n-        assert_eq!(r.choose_option(v), Some(&i));\n+        assert_eq!(r.choose(v), None);\n     }\n \n     #[test]"}]}