{"sha": "750f32dbb5d550959d356821d757c03524367219", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1MGYzMmRiYjVkNTUwOTU5ZDM1NjgyMWQ3NTdjMDM1MjQzNjcyMTk=", "commit": {"author": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-16T01:55:52Z"}, "committer": {"name": "blake2-ppc", "email": "blake2-ppc", "date": "2013-07-16T02:09:41Z"}, "message": "hashmap: Iterators for hashset diff, sym. diff, intersec, union\n\nImplement the difference, union, etc iterators with the help of a custom\niterator combinator with explicit closure environment. Reported issue #7814\nto be able to use the std::iterator filter combinator.", "tree": {"sha": "2856d16d6c65b444ceb1d38c6c63be30cbdc336e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2856d16d6c65b444ceb1d38c6c63be30cbdc336e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/750f32dbb5d550959d356821d757c03524367219", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/750f32dbb5d550959d356821d757c03524367219", "html_url": "https://github.com/rust-lang/rust/commit/750f32dbb5d550959d356821d757c03524367219", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/750f32dbb5d550959d356821d757c03524367219/comments", "author": null, "committer": null, "parents": [{"sha": "cf4127f503b58823a7cd287ddebeb6f0f3de5794", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf4127f503b58823a7cd287ddebeb6f0f3de5794", "html_url": "https://github.com/rust-lang/rust/commit/cf4127f503b58823a7cd287ddebeb6f0f3de5794"}], "stats": {"total": 80, "additions": 70, "deletions": 10}, "files": [{"sha": "79c6c4fb21dcc21457017d38ee213be54768bd8b", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 70, "deletions": 10, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/750f32dbb5d550959d356821d757c03524367219/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/750f32dbb5d550959d356821d757c03524367219/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=750f32dbb5d550959d356821d757c03524367219", "patch": "@@ -16,9 +16,10 @@\n #[mutable_doc];\n \n use container::{Container, Mutable, Map, MutableMap, Set, MutableSet};\n+use clone::Clone;\n use cmp::{Eq, Equiv};\n use hash::Hash;\n-use iterator::{Iterator, IteratorUtil, FromIterator};\n+use iterator::{Iterator, IteratorUtil, FromIterator, ChainIterator};\n use num;\n use option::{None, Option, Some};\n use rand::RngUtil;\n@@ -703,25 +704,24 @@ impl<T:Hash + Eq> Set<T> for HashSet<T> {\n \n     /// Visit the values representing the difference\n     fn difference(&self, other: &HashSet<T>, f: &fn(&T) -> bool) -> bool {\n-        self.iter().advance(|v| other.contains(v) || f(v))\n+        self.difference_iter(other).advance(f)\n     }\n \n     /// Visit the values representing the symmetric difference\n     fn symmetric_difference(&self,\n                             other: &HashSet<T>,\n                             f: &fn(&T) -> bool) -> bool {\n-        self.difference(other, |t| f(t)) && other.difference(self, |t| f(t))\n+        self.symmetric_difference_iter(other).advance(f)\n     }\n \n     /// Visit the values representing the intersection\n     fn intersection(&self, other: &HashSet<T>, f: &fn(&T) -> bool) -> bool {\n-        self.iter().advance(|v| !other.contains(v) || f(v))\n+        self.intersection_iter(other).advance(f)\n     }\n \n     /// Visit the values representing the union\n     fn union(&self, other: &HashSet<T>, f: &fn(&T) -> bool) -> bool {\n-        self.iter().advance(|t| f(t)) &&\n-            other.iter().advance(|v| self.contains(v) || f(v))\n+        self.union_iter(other).advance(f)\n     }\n }\n \n@@ -776,6 +776,33 @@ impl<T:Hash + Eq> HashSet<T> {\n     pub fn iter<'a>(&'a self) -> HashSetIterator<'a, T> {\n         HashSetIterator { iter: self.map.buckets.iter() }\n     }\n+\n+    /// Visit the values representing the difference\n+    pub fn difference_iter<'a>(&'a self, other: &'a HashSet<T>)\n+        -> SetAlgebraIter<'a, T> {\n+        EnvFilterIterator{iter: self.iter(), env: other,\n+                          filter: |elt, other| !other.contains(elt) }\n+    }\n+\n+    /// Visit the values representing the symmetric difference\n+    pub fn symmetric_difference_iter<'a>(&'a self, other: &'a HashSet<T>)\n+        -> ChainIterator<&'a T, SetAlgebraIter<'a, T>, SetAlgebraIter<'a, T>> {\n+        self.difference_iter(other).chain_(other.difference_iter(self))\n+    }\n+\n+    /// Visit the values representing the intersection\n+    pub fn intersection_iter<'a>(&'a self, other: &'a HashSet<T>)\n+        -> SetAlgebraIter<'a, T> {\n+        EnvFilterIterator{iter: self.iter(), env: other,\n+                          filter: |elt, other| other.contains(elt) }\n+    }\n+\n+    /// Visit the values representing the union\n+    pub fn union_iter<'a>(&'a self, other: &'a HashSet<T>)\n+        -> ChainIterator<&'a T, HashSetIterator<'a, T>, SetAlgebraIter<'a, T>> {\n+        self.iter().chain_(other.difference_iter(self))\n+    }\n+\n }\n \n impl<K: Eq + Hash, T: Iterator<K>> FromIterator<K, T> for HashSet<K> {\n@@ -791,6 +818,39 @@ impl<K: Eq + Hash, T: Iterator<K>> FromIterator<K, T> for HashSet<K> {\n     }\n }\n \n+// FIXME #7814: use std::iterator::FilterIterator\n+/// Building block for Set operation iterators\n+pub struct EnvFilterIterator<A, Env, I> {\n+    priv env: Env,\n+    priv filter: &'static fn(&A, Env) -> bool,\n+    priv iter: I,\n+}\n+\n+impl<'self, A, Env: Clone, I: Iterator<&'self A>> Iterator<&'self A>\n+        for EnvFilterIterator<A, Env, I> {\n+    #[inline]\n+    fn next(&mut self) -> Option<&'self A> {\n+        loop {\n+            match self.iter.next() {\n+                Some(elt) => if (self.filter)(elt, self.env.clone()) {\n+                    return Some(elt)\n+                },\n+                None => return None,\n+            }\n+        }\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let (_, upper) = self.iter.size_hint();\n+        (0, upper)\n+    }\n+}\n+\n+/// Set operations iterator\n+pub type SetAlgebraIter<'self, T> =\n+    EnvFilterIterator<T, &'self HashSet<T>, HashSetIterator<'self, T>>;\n+\n \n #[cfg(test)]\n mod test_map {\n@@ -1126,7 +1186,7 @@ mod test_set {\n \n         let mut i = 0;\n         let expected = [3, 5, 11, 77];\n-        for a.intersection(&b) |x| {\n+        for a.intersection_iter(&b).advance |x| {\n             assert!(expected.contains(x));\n             i += 1\n         }\n@@ -1149,7 +1209,7 @@ mod test_set {\n \n         let mut i = 0;\n         let expected = [1, 5, 11];\n-        for a.difference(&b) |x| {\n+        for a.difference_iter(&b).advance |x| {\n             assert!(expected.contains(x));\n             i += 1\n         }\n@@ -1175,7 +1235,7 @@ mod test_set {\n \n         let mut i = 0;\n         let expected = [-2, 1, 5, 11, 14, 22];\n-        for a.symmetric_difference(&b) |x| {\n+        for a.symmetric_difference_iter(&b).advance |x| {\n             assert!(expected.contains(x));\n             i += 1\n         }\n@@ -1205,7 +1265,7 @@ mod test_set {\n \n         let mut i = 0;\n         let expected = [-2, 1, 3, 5, 9, 11, 13, 16, 19, 24];\n-        for a.union(&b) |x| {\n+        for a.union_iter(&b).advance |x| {\n             assert!(expected.contains(x));\n             i += 1\n         }"}]}