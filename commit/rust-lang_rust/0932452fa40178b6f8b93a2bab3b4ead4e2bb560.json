{"sha": "0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "node_id": "C_kwDOAAsO6NoAKDA5MzI0NTJmYTQwMTc4YjZmOGI5M2EyYmFiM2I0ZWFkNGUyYmI1NjA", "commit": {"author": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-02-27T13:17:29Z"}, "committer": {"name": "clubby789", "email": "jamie@hill-daniel.co.uk", "date": "2023-03-12T13:19:46Z"}, "message": "Remove `box_syntax` from AST and use in tools", "tree": {"sha": "640a6f9236a494096b535bffd7bbb30f1f62318e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/640a6f9236a494096b535bffd7bbb30f1f62318e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "html_url": "https://github.com/rust-lang/rust/commit/0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/comments", "author": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "committer": {"login": "clubby789", "id": 13556931, "node_id": "MDQ6VXNlcjEzNTU2OTMx", "avatar_url": "https://avatars.githubusercontent.com/u/13556931?v=4", "gravatar_id": "", "url": "https://api.github.com/users/clubby789", "html_url": "https://github.com/clubby789", "followers_url": "https://api.github.com/users/clubby789/followers", "following_url": "https://api.github.com/users/clubby789/following{/other_user}", "gists_url": "https://api.github.com/users/clubby789/gists{/gist_id}", "starred_url": "https://api.github.com/users/clubby789/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/clubby789/subscriptions", "organizations_url": "https://api.github.com/users/clubby789/orgs", "repos_url": "https://api.github.com/users/clubby789/repos", "events_url": "https://api.github.com/users/clubby789/events{/privacy}", "received_events_url": "https://api.github.com/users/clubby789/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd7df04e168324fc002ab4985b6c7513f08ccf49", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd7df04e168324fc002ab4985b6c7513f08ccf49", "html_url": "https://github.com/rust-lang/rust/commit/dd7df04e168324fc002ab4985b6c7513f08ccf49"}], "stats": {"total": 135, "additions": 40, "deletions": 95}, "files": [{"sha": "6503bf2bab7627c84d47829563aa12294b8ffd86", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -1230,7 +1230,6 @@ impl Expr {\n \n     pub fn precedence(&self) -> ExprPrecedence {\n         match self.kind {\n-            ExprKind::Box(_) => ExprPrecedence::Box,\n             ExprKind::Array(_) => ExprPrecedence::Array,\n             ExprKind::ConstBlock(_) => ExprPrecedence::ConstBlock,\n             ExprKind::Call(..) => ExprPrecedence::Call,\n@@ -1291,8 +1290,7 @@ impl Expr {\n     /// To a first-order approximation, is this a pattern?\n     pub fn is_approximately_pattern(&self) -> bool {\n         match &self.peel_parens().kind {\n-            ExprKind::Box(_)\n-            | ExprKind::Array(_)\n+            ExprKind::Array(_)\n             | ExprKind::Call(_, _)\n             | ExprKind::Tup(_)\n             | ExprKind::Lit(_)\n@@ -1363,8 +1361,6 @@ pub struct StructExpr {\n \n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum ExprKind {\n-    /// A `box x` expression.\n-    Box(P<Expr>),\n     /// An array (`[a, b, c, d]`)\n     Array(ThinVec<P<Expr>>),\n     /// Allow anonymous constants from an inline `const` block"}, {"sha": "45a5a3ecb53f0624a852808d0d154ba1ef16ac86", "filename": "compiler/rustc_ast/src/mut_visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fmut_visit.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -1316,7 +1316,6 @@ pub fn noop_visit_expr<T: MutVisitor>(\n     vis: &mut T,\n ) {\n     match kind {\n-        ExprKind::Box(expr) => vis.visit_expr(expr),\n         ExprKind::Array(exprs) => visit_thin_exprs(exprs, vis),\n         ExprKind::ConstBlock(anon_const) => {\n             vis.visit_anon_const(anon_const);"}, {"sha": "607b77705cf83987acf0038e8d1683c48148e117", "filename": "compiler/rustc_ast/src/util/classify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fclassify.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -35,7 +35,6 @@ pub fn expr_trailing_brace(mut expr: &ast::Expr) -> Option<&ast::Expr> {\n             | Assign(_, e, _)\n             | AssignOp(_, _, e)\n             | Binary(_, _, e)\n-            | Box(e)\n             | Break(_, Some(e))\n             | Let(_, e, _)\n             | Range(_, Some(e), _)"}, {"sha": "9a4da6d439600f955f39198b3acd5fd9e56edac7", "filename": "compiler/rustc_ast/src/visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fvisit.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -772,7 +772,6 @@ pub fn walk_expr<'a, V: Visitor<'a>>(visitor: &mut V, expression: &'a Expr) {\n     walk_list!(visitor, visit_attribute, expression.attrs.iter());\n \n     match &expression.kind {\n-        ExprKind::Box(subexpression) => visitor.visit_expr(subexpression),\n         ExprKind::Array(subexpressions) => {\n             walk_list!(visitor, visit_expr, subexpressions);\n         }"}, {"sha": "4390680c45a6eec361933e3a73cd2aba264ee29a", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -70,7 +70,6 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             self.lower_attrs(hir_id, &e.attrs);\n \n             let kind = match &e.kind {\n-                ExprKind::Box(inner) => hir::ExprKind::Box(self.lower_expr(inner)),\n                 ExprKind::Array(exprs) => hir::ExprKind::Array(self.lower_exprs(exprs)),\n                 ExprKind::ConstBlock(anon_const) => {\n                     let anon_const = self.lower_anon_const(anon_const);"}, {"sha": "109f83d4d18d0072d22dfd7f70e72060aefb2c78", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -395,14 +395,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n \n     fn visit_expr(&mut self, e: &'a ast::Expr) {\n         match e.kind {\n-            ast::ExprKind::Box(_) => {\n-                gate_feature_post!(\n-                    &self,\n-                    box_syntax,\n-                    e.span,\n-                    \"box expression syntax is experimental; you can call `Box::new` instead\"\n-                );\n-            }\n             ast::ExprKind::Type(..) => {\n                 if self.sess.parse_sess.span_diagnostic.err_count() == 0 {\n                     // To avoid noise about type ascription in common syntax errors,\n@@ -613,7 +605,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(box_patterns, \"box pattern syntax is experimental\");\n     gate_all!(exclusive_range_pattern, \"exclusive range pattern syntax is experimental\");\n     gate_all!(try_blocks, \"`try` blocks are unstable\");\n-    gate_all!(box_syntax, \"box expression syntax is experimental; you can call `Box::new` instead\");\n     gate_all!(type_ascription, \"type ascription is experimental\");\n \n     visit::walk_crate(&mut visitor, krate);"}, {"sha": "e2f63641ffa53b74a5b9eea4656b2690f48756d3", "filename": "compiler/rustc_ast_pretty/src/pprust/state/expr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate%2Fexpr.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -296,10 +296,6 @@ impl<'a> State<'a> {\n         self.ibox(INDENT_UNIT);\n         self.ann.pre(self, AnnNode::Expr(expr));\n         match &expr.kind {\n-            ast::ExprKind::Box(expr) => {\n-                self.word_space(\"box\");\n-                self.print_expr_maybe_paren(expr, parser::PREC_PREFIX);\n-            }\n             ast::ExprKind::Array(exprs) => {\n                 self.print_expr_vec(exprs);\n             }"}, {"sha": "5d8f4db76f9b17ef7f780f8e5efc7d5c7052a481", "filename": "compiler/rustc_builtin_macros/src/assert/context.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fassert%2Fcontext.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -290,7 +290,6 @@ impl<'cx, 'a> Context<'cx, 'a> {\n             | ExprKind::Async(_, _, _)\n             | ExprKind::Await(_)\n             | ExprKind::Block(_, _)\n-            | ExprKind::Box(_)\n             | ExprKind::Break(_, _)\n             | ExprKind::Closure(_)\n             | ExprKind::ConstBlock(_)"}, {"sha": "c893b34b4ac25e357f612f449c340a711007fcc7", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -200,8 +200,6 @@ declare_features! (\n     (active, auto_traits, \"1.50.0\", Some(13231), None),\n     /// Allows using `box` in patterns (RFC 469).\n     (active, box_patterns, \"1.0.0\", Some(29641), None),\n-    /// Allows using the `box $expr` syntax.\n-    (active, box_syntax, \"1.0.0\", Some(49733), None),\n     /// Allows `#[doc(notable_trait)]`.\n     /// Renamed from `doc_spotlight`.\n     (active, doc_notable_trait, \"1.52.0\", Some(45040), None),"}, {"sha": "48d9fbfa6d2619e71a2262cee0c5e1e986b04c66", "filename": "compiler/rustc_feature/src/removed.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fremoved.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -52,6 +52,8 @@ declare_features! (\n     (removed, allow_fail, \"1.19.0\", Some(46488), None, Some(\"removed due to no clear use cases\")),\n     (removed, await_macro, \"1.38.0\", Some(50547), None,\n      Some(\"subsumed by `.await` syntax\")),\n+    /// Allows using the `box $expr` syntax.\n+    (removed, box_syntax, \"CURRENT_RUSTC_VERSION\", Some(49733), None, Some(\"replaced with `#[rustc_box]`\")),\n     /// Allows capturing disjoint fields in a closure/generator (RFC 2229).\n     (removed, capture_disjoint_fields, \"1.49.0\", Some(53488), None, Some(\"stabilized in Rust 2021\")),\n     /// Allows comparing raw pointers during const eval."}, {"sha": "c39ada95a4ec47a012e266cedd14eb4b8bbb0436", "filename": "compiler/rustc_parse/messages.ftl", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_parse%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_parse%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fmessages.ftl?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -731,3 +731,6 @@ parse_unknown_start_of_token = unknown start of token: {$escaped}\n         [one] once more\n         *[other] {$repeats} more times\n     }\n+\n+parse_box_syntax_removed = `box_syntax` has been removed\n+    .suggestion = use `Box::new()` instead"}, {"sha": "af0c3026c6605acd9734bc3c0691b8d80ceb112e", "filename": "compiler/rustc_parse/src/errors.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Ferrors.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -2300,3 +2300,16 @@ impl HelpUseLatestEdition {\n         }\n     }\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(parse_box_syntax_removed)]\n+pub struct BoxSyntaxRemoved<'a> {\n+    #[primary_span]\n+    #[suggestion(\n+        code = \"Box::new({code})\",\n+        applicability = \"machine-applicable\",\n+        style = \"verbose\"\n+    )]\n+    pub span: Span,\n+    pub code: &'a str,\n+}"}, {"sha": "275167162860ea74624546a9e96d91f42554ffdc", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -607,9 +607,6 @@ impl<'a> Parser<'a> {\n                 let operand_expr = this.parse_expr_dot_or_call(Default::default())?;\n                 this.recover_from_prefix_increment(operand_expr, pre_span, starts_stmt)\n             }\n-            token::Ident(..) if this.token.is_keyword(kw::Box) => {\n-                make_it!(this, attrs, |this, _| this.parse_expr_box(lo))\n-            }\n             token::Ident(..) if this.may_recover() && this.is_mistaken_not_ident_negation() => {\n                 make_it!(this, attrs, |this, _| this.recover_not_expr(lo))\n             }\n@@ -636,13 +633,6 @@ impl<'a> Parser<'a> {\n         self.parse_expr_unary(lo, UnOp::Not)\n     }\n \n-    /// Parse `box expr`.\n-    fn parse_expr_box(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n-        let (span, expr) = self.parse_expr_prefix_common(lo)?;\n-        self.sess.gated_spans.gate(sym::box_syntax, span);\n-        Ok((span, ExprKind::Box(expr)))\n-    }\n-\n     fn is_mistaken_not_ident_negation(&self) -> bool {\n         let token_cannot_continue_expr = |t: &Token| match t.uninterpolate().kind {\n             // These tokens can start an expression after `!`, but"}, {"sha": "3e0d53029ef995bce40160725cb524b96b8af0b3", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -565,7 +565,7 @@ impl<'v> ast_visit::Visitor<'v> for StatCollector<'v> {\n         record_variants!(\n             (self, e, e.kind, Id::None, ast, Expr, ExprKind),\n             [\n-                Box, Array, ConstBlock, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type, Let,\n+                Array, ConstBlock, Call, MethodCall, Tup, Binary, Unary, Lit, Cast, Type, Let,\n                 If, While, ForLoop, Loop, Match, Closure, Block, Async, Await, TryBlock, Assign,\n                 AssignOp, Field, Index, Range, Underscore, Path, AddrOf, Break, Continue, Ret,\n                 InlineAsm, FormatArgs, MacCall, Struct, Repeat, Paren, Try, Yield, Yeet, IncludedBytes, Err"}, {"sha": "a1ac09633b759f1c0c31d37ab58e6f56036576e0", "filename": "src/doc/unstable-book/src/language-features/box-patterns.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fbox-patterns.md?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -4,8 +4,6 @@ The tracking issue for this feature is: [#29641]\n \n [#29641]: https://github.com/rust-lang/rust/issues/29641\n \n-See also [`box_syntax`](box-syntax.md)\n-\n ------------------------\n \n Box patterns let you match on `Box<T>`s:"}, {"sha": "8aa47b62ebff48c4e4aebedb4c2955b2b00eb5e1", "filename": "src/tools/clippy/clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -596,8 +596,7 @@ fn ident_difference_expr_with_base_location(\n         | (MethodCall(_), MethodCall(_))\n         | (Call(_, _), Call(_, _))\n         | (ConstBlock(_), ConstBlock(_))\n-        | (Array(_), Array(_))\n-        | (Box(_), Box(_)) => {\n+        | (Array(_), Array(_)) => {\n             // keep going\n         },\n         _ => {"}, {"sha": "809d654603a6989473a89b1965c787277e746a2a", "filename": "src/tools/clippy/clippy_utils/src/ast_utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fast_utils.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -143,7 +143,7 @@ pub fn eq_expr(l: &Expr, r: &Expr) -> bool {\n         (Paren(l), _) => eq_expr(l, r),\n         (_, Paren(r)) => eq_expr(l, r),\n         (Err, Err) => true,\n-        (Box(l), Box(r)) | (Try(l), Try(r)) | (Await(l), Await(r)) => eq_expr(l, r),\n+        (Try(l), Try(r)) | (Await(l), Await(r)) => eq_expr(l, r),\n         (Array(l), Array(r)) => over(l, r, |l, r| eq_expr(l, r)),\n         (Tup(l), Tup(r)) => over(l, r, |l, r| eq_expr(l, r)),\n         (Repeat(le, ls), Repeat(re, rs)) => eq_expr(le, re) && eq_expr(&ls.value, &rs.value),"}, {"sha": "85bf28b708b7c168f7514769def023015621ef01", "filename": "src/tools/clippy/clippy_utils/src/sugg.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fsugg.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -188,7 +188,6 @@ impl<'a> Sugg<'a> {\n         match expr.kind {\n             _ if expr.span.ctxt() != ctxt => Sugg::NonParen(snippet_with_context(cx, expr.span, ctxt, default, app).0),\n             ast::ExprKind::AddrOf(..)\n-            | ast::ExprKind::Box(..)\n             | ast::ExprKind::Closure { .. }\n             | ast::ExprKind::If(..)\n             | ast::ExprKind::Let(..)"}, {"sha": "c95e9a97b43d33419f4eba82b7c503f8233d2b81", "filename": "src/tools/rustfmt/src/closures.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fclosures.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -195,7 +195,6 @@ fn rewrite_closure_expr(\n             | ast::ExprKind::Struct(..) => true,\n \n             ast::ExprKind::AddrOf(_, _, ref expr)\n-            | ast::ExprKind::Box(ref expr)\n             | ast::ExprKind::Try(ref expr)\n             | ast::ExprKind::Unary(_, ref expr)\n             | ast::ExprKind::Cast(ref expr, _) => allow_multi_line(expr),\n@@ -441,7 +440,6 @@ fn is_block_closure_forced_inner(expr: &ast::Expr, version: Version) -> bool {\n         ast::ExprKind::If(..) | ast::ExprKind::While(..) | ast::ExprKind::ForLoop(..) => true,\n         ast::ExprKind::Loop(..) if version == Version::Two => true,\n         ast::ExprKind::AddrOf(_, _, ref expr)\n-        | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n         | ast::ExprKind::Cast(ref expr, _) => is_block_closure_forced_inner(expr, version),"}, {"sha": "7273402ec760f5916a0a86c0cc85b286d768c365", "filename": "src/tools/rustfmt/src/expr.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fexpr.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -236,7 +236,6 @@ pub(crate) fn format_expr(\n         ast::ExprKind::Yeet(Some(ref expr)) => {\n             rewrite_unary_prefix(context, \"do yeet \", &**expr, shape)\n         }\n-        ast::ExprKind::Box(ref expr) => rewrite_unary_prefix(context, \"box \", &**expr, shape),\n         ast::ExprKind::AddrOf(borrow_kind, mutability, ref expr) => {\n             rewrite_expr_addrof(context, borrow_kind, mutability, expr, shape)\n         }\n@@ -1299,7 +1298,6 @@ pub(crate) fn is_simple_expr(expr: &ast::Expr) -> bool {\n         ast::ExprKind::Lit(..) => true,\n         ast::ExprKind::Path(ref qself, ref path) => qself.is_none() && path.segments.len() <= 1,\n         ast::ExprKind::AddrOf(_, _, ref expr)\n-        | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Cast(ref expr, _)\n         | ast::ExprKind::Field(ref expr, _)\n         | ast::ExprKind::Try(ref expr)\n@@ -1361,7 +1359,6 @@ pub(crate) fn can_be_overflowed_expr(\n \n         // Handle unary-like expressions\n         ast::ExprKind::AddrOf(_, _, ref expr)\n-        | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n         | ast::ExprKind::Cast(ref expr, _) => can_be_overflowed_expr(context, expr, args_len),\n@@ -1373,7 +1370,6 @@ pub(crate) fn is_nested_call(expr: &ast::Expr) -> bool {\n     match expr.kind {\n         ast::ExprKind::Call(..) | ast::ExprKind::MacCall(..) => true,\n         ast::ExprKind::AddrOf(_, _, ref expr)\n-        | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n         | ast::ExprKind::Cast(ref expr, _) => is_nested_call(expr),\n@@ -2133,7 +2129,6 @@ pub(crate) fn is_method_call(expr: &ast::Expr) -> bool {\n     match expr.kind {\n         ast::ExprKind::MethodCall(..) => true,\n         ast::ExprKind::AddrOf(_, _, ref expr)\n-        | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Cast(ref expr, _)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr) => is_method_call(expr),"}, {"sha": "aac5e59b8603ae68325a7fbacfcae2c8f8623159", "filename": "src/tools/rustfmt/src/matches.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/src%2Ftools%2Frustfmt%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/src%2Ftools%2Frustfmt%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Fmatches.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -592,7 +592,6 @@ fn can_flatten_block_around_this(body: &ast::Expr) -> bool {\n         | ast::ExprKind::Struct(..)\n         | ast::ExprKind::Tup(..) => true,\n         ast::ExprKind::AddrOf(_, _, ref expr)\n-        | ast::ExprKind::Box(ref expr)\n         | ast::ExprKind::Try(ref expr)\n         | ast::ExprKind::Unary(_, ref expr)\n         | ast::ExprKind::Index(ref expr, _)"}, {"sha": "a26375ee64384ff906e635846489fa8556b33162", "filename": "src/tools/rustfmt/src/utils.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Fsrc%2Futils.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -492,7 +492,6 @@ pub(crate) fn is_block_expr(context: &RewriteContext<'_>, expr: &ast::Expr, repr\n         | ast::ExprKind::Assign(..)\n         | ast::ExprKind::AssignOp(..)\n         | ast::ExprKind::Await(..)\n-        | ast::ExprKind::Box(..)\n         | ast::ExprKind::Break(..)\n         | ast::ExprKind::Cast(..)\n         | ast::ExprKind::Continue(..)"}, {"sha": "870253d2f052e3455c508631b552d48c625e2bea", "filename": "tests/ui/feature-gates/feature-gate-box-expr.rs", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dd7df04e168324fc002ab4985b6c7513f08ccf49/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7df04e168324fc002ab4985b6c7513f08ccf49/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.rs?ref=dd7df04e168324fc002ab4985b6c7513f08ccf49", "patch": "@@ -1,14 +0,0 @@\n-// gate-test-box_syntax\n-\n-// Check that `box EXPR` is feature-gated.\n-//\n-// See also feature-gate-placement-expr.rs\n-//\n-// (Note that the two tests are separated since the checks appear to\n-// be performed at distinct phases, with an abort_if_errors call\n-// separating them.)\n-\n-fn main() {\n-    let x = box 'c'; //~ ERROR box expression syntax is experimental\n-    println!(\"x: {}\", x);\n-}"}, {"sha": "af864b25f14bf601d34ecde1523322ab71ad8188", "filename": "tests/ui/feature-gates/feature-gate-box-expr.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd7df04e168324fc002ab4985b6c7513f08ccf49/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd7df04e168324fc002ab4985b6c7513f08ccf49/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box-expr.stderr?ref=dd7df04e168324fc002ab4985b6c7513f08ccf49", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: box expression syntax is experimental; you can call `Box::new` instead\n-  --> $DIR/feature-gate-box-expr.rs:12:13\n-   |\n-LL |     let x = box 'c';\n-   |             ^^^^^^^\n-   |\n-   = note: see issue #49733 <https://github.com/rust-lang/rust/issues/49733> for more information\n-   = help: add `#![feature(box_syntax)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "778660cc0b54991d1b456e33f18095a108f091d3", "filename": "tests/ui/feature-gates/feature-gate-box_syntax.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dd7df04e168324fc002ab4985b6c7513f08ccf49/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dd7df04e168324fc002ab4985b6c7513f08ccf49/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.rs?ref=dd7df04e168324fc002ab4985b6c7513f08ccf49", "patch": "@@ -1,6 +0,0 @@\n-// Test that the use of the box syntax is gated by `box_syntax` feature gate.\n-\n-fn main() {\n-    let x = box 3;\n-    //~^ ERROR box expression syntax is experimental; you can call `Box::new` instead\n-}"}, {"sha": "dcf8eeed7cfce3a8d8d4ca9cb211a46127e64c6f", "filename": "tests/ui/feature-gates/feature-gate-box_syntax.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dd7df04e168324fc002ab4985b6c7513f08ccf49/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dd7df04e168324fc002ab4985b6c7513f08ccf49/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffeature-gates%2Ffeature-gate-box_syntax.stderr?ref=dd7df04e168324fc002ab4985b6c7513f08ccf49", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: box expression syntax is experimental; you can call `Box::new` instead\n-  --> $DIR/feature-gate-box_syntax.rs:4:13\n-   |\n-LL |     let x = box 3;\n-   |             ^^^^^\n-   |\n-   = note: see issue #49733 <https://github.com/rust-lang/rust/issues/49733> for more information\n-   = help: add `#![feature(box_syntax)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "b0e8eb0410ef61cfc6861105b8af0699f3578171", "filename": "tests/ui/parser/removed-syntax-box.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/tests%2Fui%2Fparser%2Fremoved-syntax-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/tests%2Fui%2Fparser%2Fremoved-syntax-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fremoved-syntax-box.rs?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    struct T {\n+        a: u8,\n+        b: u8,\n+    }\n+    let _ = box () //~ ERROR expected expression, found reserved keyword `box`\n+    let _ = box 1;\n+    let _ = box T { a: 12, b: 18 };\n+    let _ = box [5; 30];\n+}"}, {"sha": "8c8d5b3c4cb3cbb8fb0877fefd6f194de5bdd7db", "filename": "tests/ui/parser/removed-syntax-box.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/tests%2Fui%2Fparser%2Fremoved-syntax-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0932452fa40178b6f8b93a2bab3b4ead4e2bb560/tests%2Fui%2Fparser%2Fremoved-syntax-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fremoved-syntax-box.stderr?ref=0932452fa40178b6f8b93a2bab3b4ead4e2bb560", "patch": "@@ -0,0 +1,8 @@\n+error: expected expression, found reserved keyword `box`\n+  --> $DIR/removed-syntax-box.rs:6:13\n+   |\n+LL |     let _ = box ()\n+   |             ^^^ expected expression\n+\n+error: aborting due to previous error\n+"}]}