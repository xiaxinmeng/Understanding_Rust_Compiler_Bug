{"sha": "f7850c5368de4d477b6484ecee2c3eedb9ba997e", "node_id": "C_kwDOAAsO6NoAKGY3ODUwYzUzNjhkZTRkNDc3YjY0ODRlY2VlMmMzZWVkYjliYTk5N2U", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-14T11:29:22Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2023-01-14T11:29:22Z"}, "message": "Improve comments in `parser/expr.rs`", "tree": {"sha": "12244944479b13c61382bc15e9b04058ee2e23a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12244944479b13c61382bc15e9b04058ee2e23a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7850c5368de4d477b6484ecee2c3eedb9ba997e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7850c5368de4d477b6484ecee2c3eedb9ba997e", "html_url": "https://github.com/rust-lang/rust/commit/f7850c5368de4d477b6484ecee2c3eedb9ba997e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7850c5368de4d477b6484ecee2c3eedb9ba997e/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ecb1ad11d9df883f4070695276c0714c148c751b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ecb1ad11d9df883f4070695276c0714c148c751b", "html_url": "https://github.com/rust-lang/rust/commit/ecb1ad11d9df883f4070695276c0714c148c751b"}], "stats": {"total": 22, "additions": 13, "deletions": 9}, "files": [{"sha": "645f8633941057ecd984751f340c768e6a783374", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f7850c5368de4d477b6484ecee2c3eedb9ba997e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7850c5368de4d477b6484ecee2c3eedb9ba997e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=f7850c5368de4d477b6484ecee2c3eedb9ba997e", "patch": "@@ -562,17 +562,23 @@ impl<'a> Parser<'a> {\n \n         // Note: when adding new unary operators, don't forget to adjust TokenKind::can_begin_expr()\n         match this.token.uninterpolate().kind {\n-            token::Not => make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Not)), // `!expr`\n-            token::Tilde => make_it!(this, attrs, |this, _| this.recover_tilde_expr(lo)), // `~expr`\n+            // `!expr`\n+            token::Not => make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Not)),\n+            // `~expr`\n+            token::Tilde => make_it!(this, attrs, |this, _| this.recover_tilde_expr(lo)),\n+            // `-expr`\n             token::BinOp(token::Minus) => {\n                 make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Neg))\n-            } // `-expr`\n+            }\n+            // `*expr`\n             token::BinOp(token::Star) => {\n                 make_it!(this, attrs, |this, _| this.parse_unary_expr(lo, UnOp::Deref))\n-            } // `*expr`\n+            }\n+            // `&expr` and `&&expr`\n             token::BinOp(token::And) | token::AndAnd => {\n                 make_it!(this, attrs, |this, _| this.parse_borrow_expr(lo))\n             }\n+            // `+lit`\n             token::BinOp(token::Plus) if this.look_ahead(1, |tok| tok.is_numeric_lit()) => {\n                 let mut err =\n                     LeadingPlusNotSupported { span: lo, remove_plus: None, add_parentheses: None };\n@@ -587,7 +593,7 @@ impl<'a> Parser<'a> {\n \n                 this.bump();\n                 this.parse_prefix_expr(None)\n-            } // `+expr`\n+            }\n             // Recover from `++x`:\n             token::BinOp(token::Plus)\n                 if this.look_ahead(1, |t| *t == token::BinOp(token::Plus)) =>\n@@ -624,7 +630,7 @@ impl<'a> Parser<'a> {\n         Ok((span, self.mk_unary(op, expr)))\n     }\n \n-    // Recover on `!` suggesting for bitwise negation instead.\n+    /// Recover on `~expr` in favor of `!expr`.\n     fn recover_tilde_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n         self.sess.emit_err(TildeAsUnaryOperator(lo));\n \n@@ -651,7 +657,6 @@ impl<'a> Parser<'a> {\n \n     /// Recover on `not expr` in favor of `!expr`.\n     fn recover_not_expr(&mut self, lo: Span) -> PResult<'a, (Span, ExprKind)> {\n-        // Emit the error...\n         let negated_token = self.look_ahead(1, |t| t.clone());\n \n         let sub_diag = if negated_token.is_numeric_lit() {\n@@ -672,7 +677,6 @@ impl<'a> Parser<'a> {\n             ),\n         });\n \n-        // ...and recover!\n         self.parse_unary_expr(lo, UnOp::Not)\n     }\n \n@@ -1593,7 +1597,7 @@ impl<'a> Parser<'a> {\n                     vis.0\n                 };\n \n-                // Suggestion involves adding a (as of time of writing this, unstable) labeled block.\n+                // Suggestion involves adding a labeled block.\n                 //\n                 // If there are no breaks that may use this label, suggest removing the label and\n                 // recover to the unmodified expression."}]}