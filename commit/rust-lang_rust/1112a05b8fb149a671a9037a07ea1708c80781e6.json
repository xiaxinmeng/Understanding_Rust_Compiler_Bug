{"sha": "1112a05b8fb149a671a9037a07ea1708c80781e6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMTJhMDViOGZiMTQ5YTY3MWE5MDM3YTA3ZWExNzA4YzgwNzgxZTY=", "commit": {"author": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-05-27T20:57:10Z"}, "committer": {"name": "Ulrik Sverdrup", "email": "root@localhost", "date": "2015-06-10T07:15:07Z"}, "message": "collections: Remove redundant slicing for str\n\nThis is a remnant from a previous implementation of the str methods.\nUsing `self` is fine now.", "tree": {"sha": "9adf34a25de0cc50960405dbd63542d2d2609b78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9adf34a25de0cc50960405dbd63542d2d2609b78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1112a05b8fb149a671a9037a07ea1708c80781e6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1112a05b8fb149a671a9037a07ea1708c80781e6", "html_url": "https://github.com/rust-lang/rust/commit/1112a05b8fb149a671a9037a07ea1708c80781e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1112a05b8fb149a671a9037a07ea1708c80781e6/comments", "author": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "committer": {"login": "invalid-email-address", "id": 148100, "node_id": "MDQ6VXNlcjE0ODEwMA==", "avatar_url": "https://avatars.githubusercontent.com/u/148100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/invalid-email-address", "html_url": "https://github.com/invalid-email-address", "followers_url": "https://api.github.com/users/invalid-email-address/followers", "following_url": "https://api.github.com/users/invalid-email-address/following{/other_user}", "gists_url": "https://api.github.com/users/invalid-email-address/gists{/gist_id}", "starred_url": "https://api.github.com/users/invalid-email-address/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/invalid-email-address/subscriptions", "organizations_url": "https://api.github.com/users/invalid-email-address/orgs", "repos_url": "https://api.github.com/users/invalid-email-address/repos", "events_url": "https://api.github.com/users/invalid-email-address/events{/privacy}", "received_events_url": "https://api.github.com/users/invalid-email-address/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d43bf539482b8244690824e0880a80ed578d5429", "url": "https://api.github.com/repos/rust-lang/rust/commits/d43bf539482b8244690824e0880a80ed578d5429", "html_url": "https://github.com/rust-lang/rust/commit/d43bf539482b8244690824e0880a80ed578d5429"}], "stats": {"total": 90, "additions": 45, "deletions": 45}, "files": [{"sha": "b30d2aba8937b1e0519f866cb9096b2d35c89ea9", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 45, "deletions": 45, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/1112a05b8fb149a671a9037a07ea1708c80781e6/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1112a05b8fb149a671a9037a07ea1708c80781e6/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=1112a05b8fb149a671a9037a07ea1708c80781e6", "patch": "@@ -439,7 +439,7 @@ impl str {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn len(&self) -> usize {\n-        core_str::StrExt::len(&self[..])\n+        core_str::StrExt::len(self)\n     }\n \n     /// Returns true if this slice has a length of zero bytes.\n@@ -452,7 +452,7 @@ impl str {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn is_empty(&self) -> bool {\n-        core_str::StrExt::is_empty(&self[..])\n+        core_str::StrExt::is_empty(self)\n     }\n \n     /// Returns a string's displayed width in columns.\n@@ -473,7 +473,7 @@ impl str {\n     #[unstable(feature = \"unicode\",\n                reason = \"this functionality may only be provided by libunicode\")]\n     pub fn width(&self, is_cjk: bool) -> usize {\n-        UnicodeStr::width(&self[..], is_cjk)\n+        UnicodeStr::width(self, is_cjk)\n     }\n \n     /// Checks that `index`-th byte lies at the start and/or end of a\n@@ -509,7 +509,7 @@ impl str {\n                          this method may want to be replaced with checked \\\n                          slicing\")]\n     pub fn is_char_boundary(&self, index: usize) -> bool {\n-        core_str::StrExt::is_char_boundary(&self[..], index)\n+        core_str::StrExt::is_char_boundary(self, index)\n     }\n \n     /// Converts `self` to a byte slice.\n@@ -522,7 +522,7 @@ impl str {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline(always)]\n     pub fn as_bytes(&self) -> &[u8] {\n-        core_str::StrExt::as_bytes(&self[..])\n+        core_str::StrExt::as_bytes(self)\n     }\n \n     /// Returns an unsafe pointer to the `&str`'s buffer.\n@@ -540,7 +540,7 @@ impl str {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn as_ptr(&self) -> *const u8 {\n-        core_str::StrExt::as_ptr(&self[..])\n+        core_str::StrExt::as_ptr(self)\n     }\n \n     /// Takes a bytewise slice from a string.\n@@ -564,7 +564,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub unsafe fn slice_unchecked(&self, begin: usize, end: usize) -> &str {\n-        core_str::StrExt::slice_unchecked(&self[..], begin, end)\n+        core_str::StrExt::slice_unchecked(self, begin, end)\n     }\n \n     /// Returns a slice of the string from the character range [`begin`..`end`).\n@@ -594,7 +594,7 @@ impl str {\n     #[unstable(feature = \"collections\",\n                reason = \"may have yet to prove its worth\")]\n     pub fn slice_chars(&self, begin: usize, end: usize) -> &str {\n-        core_str::StrExt::slice_chars(&self[..], begin, end)\n+        core_str::StrExt::slice_chars(self, begin, end)\n     }\n \n     /// Given a byte position, return the next char and its index.\n@@ -644,7 +644,7 @@ impl str {\n                          be removed in favor of just char_at() or eventually \\\n                          removed altogether\")]\n     pub fn char_range_at(&self, start: usize) -> CharRange {\n-        core_str::StrExt::char_range_at(&self[..], start)\n+        core_str::StrExt::char_range_at(self, start)\n     }\n \n     /// Given a byte position, return the previous `char` and its position.\n@@ -696,7 +696,7 @@ impl str {\n                          be removed in favor of just char_at_reverse() or \\\n                          eventually removed altogether\")]\n     pub fn char_range_at_reverse(&self, start: usize) -> CharRange {\n-        core_str::StrExt::char_range_at_reverse(&self[..], start)\n+        core_str::StrExt::char_range_at_reverse(self, start)\n     }\n \n     /// Given a byte position, return the `char` at that position.\n@@ -721,7 +721,7 @@ impl str {\n                          iterators or by getting the first char from a \\\n                          subslice\")]\n     pub fn char_at(&self, i: usize) -> char {\n-        core_str::StrExt::char_at(&self[..], i)\n+        core_str::StrExt::char_at(self, i)\n     }\n \n     /// Given a byte position, return the `char` at that position, counting\n@@ -745,7 +745,7 @@ impl str {\n                          are also somewhat unclear, especially with which \\\n                          cases generate panics\")]\n     pub fn char_at_reverse(&self, i: usize) -> char {\n-        core_str::StrExt::char_at_reverse(&self[..], i)\n+        core_str::StrExt::char_at_reverse(self, i)\n     }\n \n     /// Retrieves the first character from a `&str` and returns it.\n@@ -776,7 +776,7 @@ impl str {\n                          may not be warranted with the existence of the chars \\\n                          and/or char_indices iterators\")]\n     pub fn slice_shift_char(&self) -> Option<(char, &str)> {\n-        core_str::StrExt::slice_shift_char(&self[..])\n+        core_str::StrExt::slice_shift_char(self)\n     }\n \n     /// Divide one string slice into two at an index.\n@@ -817,7 +817,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn chars(&self) -> Chars {\n-        core_str::StrExt::chars(&self[..])\n+        core_str::StrExt::chars(self)\n     }\n \n     /// An iterator over the characters of `self` and their byte offsets.\n@@ -832,7 +832,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn char_indices(&self) -> CharIndices {\n-        core_str::StrExt::char_indices(&self[..])\n+        core_str::StrExt::char_indices(self)\n     }\n \n     /// An iterator over the bytes of `self`.\n@@ -846,7 +846,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn bytes(&self) -> Bytes {\n-        core_str::StrExt::bytes(&self[..])\n+        core_str::StrExt::bytes(self)\n     }\n \n     /// An iterator over the non-empty substrings of `self` which contain no whitespace,\n@@ -862,7 +862,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"split_whitespace\", since = \"1.1.0\")]\n     pub fn split_whitespace(&self) -> SplitWhitespace {\n-        UnicodeStr::split_whitespace(&self[..])\n+        UnicodeStr::split_whitespace(self)\n     }\n \n     /// An iterator over the non-empty substrings of `self` which contain no whitespace,\n@@ -884,7 +884,7 @@ impl str {\n                reason = \"the precise algorithm to use is unclear\")]\n     #[allow(deprecated)]\n     pub fn words(&self) -> Words {\n-        UnicodeStr::words(&self[..])\n+        UnicodeStr::words(self)\n     }\n \n     /// An iterator over the lines of a string, separated by `\\n`.\n@@ -910,7 +910,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn lines(&self) -> Lines {\n-        core_str::StrExt::lines(&self[..])\n+        core_str::StrExt::lines(self)\n     }\n \n     /// An iterator over the lines of a string, separated by either\n@@ -937,7 +937,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn lines_any(&self) -> LinesAny {\n-        core_str::StrExt::lines_any(&self[..])\n+        core_str::StrExt::lines_any(self)\n     }\n \n     /// Returns an iterator over the string in Unicode Normalization Form D\n@@ -1043,7 +1043,7 @@ impl str {\n     #[unstable(feature = \"unicode\",\n                reason = \"this functionality may only be provided by libunicode\")]\n     pub fn graphemes(&self, is_extended: bool) -> Graphemes {\n-        UnicodeStr::graphemes(&self[..], is_extended)\n+        UnicodeStr::graphemes(self, is_extended)\n     }\n \n     /// Returns an iterator over the grapheme clusters of `self` and their\n@@ -1064,7 +1064,7 @@ impl str {\n     #[unstable(feature = \"unicode\",\n                reason = \"this functionality may only be provided by libunicode\")]\n     pub fn grapheme_indices(&self, is_extended: bool) -> GraphemeIndices {\n-        UnicodeStr::grapheme_indices(&self[..], is_extended)\n+        UnicodeStr::grapheme_indices(self, is_extended)\n     }\n \n     /// Returns an iterator of `u16` over the string encoded as UTF-16.\n@@ -1085,7 +1085,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn contains<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {\n-        core_str::StrExt::contains(&self[..], pat)\n+        core_str::StrExt::contains(self, pat)\n     }\n \n     /// Returns `true` if the given `&str` is a prefix of the string.\n@@ -1097,7 +1097,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn starts_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool {\n-        core_str::StrExt::starts_with(&self[..], pat)\n+        core_str::StrExt::starts_with(self, pat)\n     }\n \n     /// Returns true if the given `&str` is a suffix of the string.\n@@ -1111,7 +1111,7 @@ impl str {\n     pub fn ends_with<'a, P: Pattern<'a>>(&'a self, pat: P) -> bool\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        core_str::StrExt::ends_with(&self[..], pat)\n+        core_str::StrExt::ends_with(self, pat)\n     }\n \n     /// Returns the byte index of the first character of `self` that matches\n@@ -1156,7 +1156,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn find<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize> {\n-        core_str::StrExt::find(&self[..], pat)\n+        core_str::StrExt::find(self, pat)\n     }\n \n     /// Returns the byte index of the last character of `self` that\n@@ -1200,7 +1200,7 @@ impl str {\n     pub fn rfind<'a, P: Pattern<'a>>(&'a self, pat: P) -> Option<usize>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        core_str::StrExt::rfind(&self[..], pat)\n+        core_str::StrExt::rfind(self, pat)\n     }\n \n     /// An iterator over substrings of `self`, separated by characters\n@@ -1253,7 +1253,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn split<'a, P: Pattern<'a>>(&'a self, pat: P) -> Split<'a, P> {\n-        core_str::StrExt::split(&self[..], pat)\n+        core_str::StrExt::split(self, pat)\n     }\n \n     /// An iterator over substrings of `self`, separated by characters\n@@ -1301,7 +1301,7 @@ impl str {\n     pub fn rsplit<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplit<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        core_str::StrExt::rsplit(&self[..], pat)\n+        core_str::StrExt::rsplit(self, pat)\n     }\n \n     /// An iterator over substrings of `self`, separated by characters\n@@ -1339,7 +1339,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn split_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> SplitTerminator<'a, P> {\n-        core_str::StrExt::split_terminator(&self[..], pat)\n+        core_str::StrExt::split_terminator(self, pat)\n     }\n \n     /// An iterator over substrings of `self`, separated by characters\n@@ -1377,7 +1377,7 @@ impl str {\n     pub fn rsplit_terminator<'a, P: Pattern<'a>>(&'a self, pat: P) -> RSplitTerminator<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        core_str::StrExt::rsplit_terminator(&self[..], pat)\n+        core_str::StrExt::rsplit_terminator(self, pat)\n     }\n \n     /// An iterator over substrings of `self`, separated by a pattern,\n@@ -1424,7 +1424,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn splitn<'a, P: Pattern<'a>>(&'a self, count: usize, pat: P) -> SplitN<'a, P> {\n-        core_str::StrExt::splitn(&self[..], count, pat)\n+        core_str::StrExt::splitn(self, count, pat)\n     }\n \n     /// An iterator over substrings of `self`, separated by a pattern,\n@@ -1471,7 +1471,7 @@ impl str {\n     pub fn rsplitn<'a, P: Pattern<'a>>(&'a self, count: usize, pat: P) -> RSplitN<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        core_str::StrExt::rsplitn(&self[..], count, pat)\n+        core_str::StrExt::rsplitn(self, count, pat)\n     }\n \n     /// An iterator over the matches of a pattern within `self`.\n@@ -1505,7 +1505,7 @@ impl str {\n     #[unstable(feature = \"collections\",\n                reason = \"method got recently added\")]\n     pub fn matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> Matches<'a, P> {\n-        core_str::StrExt::matches(&self[..], pat)\n+        core_str::StrExt::matches(self, pat)\n     }\n \n     /// An iterator over the matches of a pattern within `self`, yielded in\n@@ -1540,7 +1540,7 @@ impl str {\n     pub fn rmatches<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatches<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        core_str::StrExt::rmatches(&self[..], pat)\n+        core_str::StrExt::rmatches(self, pat)\n     }\n \n     /// An iterator over the start and end indices of the disjoint matches\n@@ -1585,7 +1585,7 @@ impl str {\n     // NB: Right now MatchIndices yields `(usize, usize)`, but it would\n     // be more consistent with `matches` and `char_indices` to return `(usize, &str)`\n     pub fn match_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> MatchIndices<'a, P> {\n-        core_str::StrExt::match_indices(&self[..], pat)\n+        core_str::StrExt::match_indices(self, pat)\n     }\n \n     /// An iterator over the start and end indices of the disjoint matches of\n@@ -1631,7 +1631,7 @@ impl str {\n     pub fn rmatch_indices<'a, P: Pattern<'a>>(&'a self, pat: P) -> RMatchIndices<'a, P>\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        core_str::StrExt::rmatch_indices(&self[..], pat)\n+        core_str::StrExt::rmatch_indices(self, pat)\n     }\n \n     /// Returns the byte offset of an inner slice relative to an enclosing\n@@ -1655,7 +1655,7 @@ impl str {\n     #[unstable(feature = \"collections\",\n                reason = \"awaiting convention about comparability of arbitrary slices\")]\n     pub fn subslice_offset(&self, inner: &str) -> usize {\n-        core_str::StrExt::subslice_offset(&self[..], inner)\n+        core_str::StrExt::subslice_offset(self, inner)\n     }\n \n     /// Returns a `&str` with leading and trailing whitespace removed.\n@@ -1668,7 +1668,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim(&self) -> &str {\n-        UnicodeStr::trim(&self[..])\n+        UnicodeStr::trim(self)\n     }\n \n     /// Returns a `&str` with leading whitespace removed.\n@@ -1681,7 +1681,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim_left(&self) -> &str {\n-        UnicodeStr::trim_left(&self[..])\n+        UnicodeStr::trim_left(self)\n     }\n \n     /// Returns a `&str` with trailing whitespace removed.\n@@ -1694,7 +1694,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim_right(&self) -> &str {\n-        UnicodeStr::trim_right(&self[..])\n+        UnicodeStr::trim_right(self)\n     }\n \n     /// Returns a string with all pre- and suffixes that match a pattern\n@@ -1724,7 +1724,7 @@ impl str {\n     pub fn trim_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n         where P::Searcher: DoubleEndedSearcher<'a>\n     {\n-        core_str::StrExt::trim_matches(&self[..], pat)\n+        core_str::StrExt::trim_matches(self, pat)\n     }\n \n     /// Returns a string with all prefixes that match a pattern\n@@ -1744,7 +1744,7 @@ impl str {\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn trim_left_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str {\n-        core_str::StrExt::trim_left_matches(&self[..], pat)\n+        core_str::StrExt::trim_left_matches(self, pat)\n     }\n \n     /// Returns a string with all suffixes that match a pattern\n@@ -1774,7 +1774,7 @@ impl str {\n     pub fn trim_right_matches<'a, P: Pattern<'a>>(&'a self, pat: P) -> &'a str\n         where P::Searcher: ReverseSearcher<'a>\n     {\n-        core_str::StrExt::trim_right_matches(&self[..], pat)\n+        core_str::StrExt::trim_right_matches(self, pat)\n     }\n \n     /// Parses `self` into the specified type.\n@@ -1797,7 +1797,7 @@ impl str {\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn parse<F: FromStr>(&self) -> Result<F, F::Err> {\n-        core_str::StrExt::parse(&self[..])\n+        core_str::StrExt::parse(self)\n     }\n \n     /// Replaces all occurrences of one string with another."}]}