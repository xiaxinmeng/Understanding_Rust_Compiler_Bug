{"sha": "f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMzY3NDM5NGYyZTc3YjdhYTQ2ODZhNWFlOWYyZjYwZDZmYWE0Mjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-04T02:49:12Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-08-04T02:49:12Z"}, "message": "rustc: Merge fn& and fn in favor of fn&.\n\nThis is a step on the way to moving the function \"proto\" sigil out front.", "tree": {"sha": "4c4d8d805f80254a9aa2f2788d288e053d88fe62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4c4d8d805f80254a9aa2f2788d288e053d88fe62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "html_url": "https://github.com/rust-lang/rust/commit/f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "51a5a4ad0e2501b260a8059a72e4b0eebe78d6f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/51a5a4ad0e2501b260a8059a72e4b0eebe78d6f9", "html_url": "https://github.com/rust-lang/rust/commit/51a5a4ad0e2501b260a8059a72e4b0eebe78d6f9"}], "stats": {"total": 77, "additions": 33, "deletions": 44}, "files": [{"sha": "27cd21d1d9ffff1c4468032dbaa482d833e245e5", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -178,7 +178,6 @@ enum mutability { m_mutbl, m_imm, m_const, }\n #[auto_serialize]\n enum proto {\n     proto_bare,    // foreign fn\n-    proto_any,     // fn\n     proto_uniq,    // fn~\n     proto_box,     // fn@\n     proto_block,   // fn&\n@@ -195,7 +194,7 @@ enum vstore {\n \n pure fn is_blockish(p: ast::proto) -> bool {\n     alt p {\n-      proto_any | proto_block { true }\n+      proto_block { true }\n       proto_bare | proto_uniq | proto_box { false }\n     }\n }"}, {"sha": "cc37b5cc8d081deacddb3a35d4d5a38839ddfc0e", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -186,10 +186,10 @@ impl helpers of ext_ctxt_helpers for ext_ctxt {\n         };\n \n         @{id: self.next_id(),\n-          node: ast::ty_fn(ast::proto_any, {inputs: args,\n-                                            output: output,\n-                                            purity: ast::impure_fn,\n-                                            cf: ast::return_val}),\n+          node: ast::ty_fn(ast::proto_block, {inputs: args,\n+                                              output: output,\n+                                              purity: ast::impure_fn,\n+                                              cf: ast::return_val}),\n           span: span}\n     }\n "}, {"sha": "4769e4ab38417fef5f2f8e6d0a5027291e9437c4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -41,13 +41,13 @@ import ast::{_mod, add, alt_check, alt_exhaustive, arg, arm, attribute,\n              match_nonterminal, match_seq, match_tok, method, mode, mt, mul,\n              mutability, neg, noreturn, not, pat, pat_box, pat_enum,\n              pat_ident, pat_lit, pat_range, pat_rec, pat_tup, pat_uniq,\n-             pat_wild, path, private, proto, proto_any, proto_bare,\n-             proto_block, proto_box, proto_uniq, provided, public, pure_fn,\n-             purity, re_anon, re_named, region, rem, required, ret_style,\n-             return_val, self_ty, shl, shr, stmt, stmt_decl, stmt_expr,\n-             stmt_semi, subtract, sty_box, sty_by_ref, sty_region, sty_uniq,\n-             sty_value, token_tree, trait_method, trait_ref, tt_delim, tt_seq,\n-             tt_tok, tt_nonterminal, ty, ty_, ty_bot, ty_box, ty_field, ty_fn,\n+             pat_wild, path, private, proto, proto_bare, proto_block,\n+             proto_box, proto_uniq, provided, public, pure_fn, purity,\n+             re_anon, re_named, region, rem, required, ret_style, return_val,\n+             self_ty, shl, shr, stmt, stmt_decl, stmt_expr, stmt_semi,\n+             subtract, sty_box, sty_by_ref, sty_region, sty_uniq, sty_value,\n+             token_tree, trait_method, trait_ref, tt_delim, tt_seq, tt_tok,\n+             tt_nonterminal, ty, ty_, ty_bot, ty_box, ty_field, ty_fn,\n              ty_infer, ty_mac, ty_method, ty_nil, ty_param, ty_path, ty_ptr,\n              ty_rec, ty_rptr, ty_tup, ty_u32, ty_uniq, ty_vec,\n              ty_fixed_length, unchecked_blk, uniq, unsafe_blk, unsafe_fn,\n@@ -801,9 +801,6 @@ class parser {\n             let proto = self.parse_fn_ty_proto();\n             alt proto {\n               proto_bare { self.fatal(~\"fn expr are deprecated, use fn@\"); }\n-              proto_any {\n-                self.fatal(~\"fn* cannot be used in an expression\");\n-              }\n               _ { /* fallthrough */ }\n             }\n             return pexpr(self.parse_fn_expr(proto));\n@@ -2781,7 +2778,7 @@ class parser {\n             proto_block\n           }\n           _ {\n-            proto_any\n+            proto_block\n           }\n         }\n     }"}, {"sha": "eaacf6cd424efa857e03473c5523cd4849a88f5b", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -1823,7 +1823,6 @@ fn print_purity(s: ps, p: ast::purity) {\n fn proto_to_str(p: ast::proto) -> ~str {\n     return alt p {\n       ast::proto_bare { ~\"extern fn\" }\n-      ast::proto_any { ~\"fn\" }\n       ast::proto_block { ~\"fn&\" }\n       ast::proto_uniq { ~\"fn~\" }\n       ast::proto_box { ~\"fn@\" }"}, {"sha": "ad3f09f80867e940bce1b58151d36bb6a9027684", "filename": "src/rustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftydecode.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -89,7 +89,6 @@ fn parse_proto(c: char) -> ast::proto {\n     alt c {\n       '~' { ast::proto_uniq }\n       '@' { ast::proto_box }\n-      '*' { ast::proto_any }\n       '&' { ast::proto_block }\n       'n' { ast::proto_bare }\n       _ { fail ~\"illegal fn type kind \" + str::from_char(c); }"}, {"sha": "01fc90cc19d8069f9d2b8addae29ec1e0f8a4847", "filename": "src/rustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Ftyencode.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -311,7 +311,6 @@ fn enc_proto(w: io::writer, proto: proto) {\n       proto_uniq { w.write_str(&\"f~\"); }\n       proto_box { w.write_str(&\"f@\"); }\n       proto_block { w.write_str(~\"f&\"); }\n-      proto_any { w.write_str(&\"f*\"); }\n       proto_bare { w.write_str(&\"fn\"); }\n     }\n }"}, {"sha": "f2516a30bca08bb3f49dfdfa9441c32d144b1ca7", "filename": "src/rustc/middle/borrowck/categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcategorization.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -244,7 +244,7 @@ impl public_methods for borrowck_ctxt {\n             let ty = ty::node_id_to_type(self.tcx, fn_node_id);\n             let proto = ty::ty_fn_proto(ty);\n             alt proto {\n-              ast::proto_any | ast::proto_block {\n+              ast::proto_block {\n                 let upcmt = self.cat_def(id, span, expr_ty, *inner);\n                 @{id:id, span:span,\n                   cat:cat_stack_upvar(upcmt), lp:upcmt.lp,"}, {"sha": "022bdcebfb1554cec9778169e1e9cfd859090e43", "filename": "src/rustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -220,7 +220,7 @@ impl methods for check_loan_ctxt {\n         let fn_ty = ty::node_id_to_type(self.tcx(), id);\n         let proto = ty::ty_fn_proto(fn_ty);\n         alt proto {\n-          ast::proto_block | ast::proto_any {true}\n+          ast::proto_block {true}\n           ast::proto_bare | ast::proto_uniq | ast::proto_box {false}\n         }\n     }"}, {"sha": "dcb7a70ab503a51970d569cf1e5e8276543ac28a", "filename": "src/rustc/middle/capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Fcapture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Fcapture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fcapture.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -102,7 +102,7 @@ fn compute_capture_vars(tcx: ty::ctxt,\n     // named and add that\n \n     let implicit_mode = alt fn_proto {\n-      ast::proto_any | ast::proto_block { cap_ref }\n+      ast::proto_block { cap_ref }\n       ast::proto_bare | ast::proto_box | ast::proto_uniq { cap_copy }\n     };\n "}, {"sha": "263af391a930cf24abc5ac664a4fbdc494d3ffb0", "filename": "src/rustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fkind.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -148,7 +148,7 @@ fn with_appropriate_checker(cx: ctx, id: node_id, b: fn(check_fn)) {\n       proto_uniq { b(check_for_uniq) }\n       proto_box { b(check_for_box) }\n       proto_bare { b(check_for_bare) }\n-      proto_any | proto_block { b(check_for_block) }\n+      proto_block { b(check_for_block) }\n     }\n }\n "}, {"sha": "7204ba6738005eb7a36a4da1ba17ea3b4725c24f", "filename": "src/rustc/middle/trans/closure.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fclosure.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -388,7 +388,7 @@ fn trans_expr_fn(bcx: block,\n     };\n \n     let {bcx: bcx, val: closure} = alt proto {\n-      ast::proto_any | ast::proto_block { trans_closure_env(ty::ck_block) }\n+      ast::proto_block { trans_closure_env(ty::ck_block) }\n       ast::proto_box { trans_closure_env(ty::ck_box) }\n       ast::proto_uniq { trans_closure_env(ty::ck_uniq) }\n       ast::proto_bare {\n@@ -423,8 +423,7 @@ fn make_fn_glue(\n \n     return alt ty::get(t).struct {\n       ty::ty_fn({proto: ast::proto_bare, _}) |\n-      ty::ty_fn({proto: ast::proto_block, _}) |\n-      ty::ty_fn({proto: ast::proto_any, _}) { bcx }\n+      ty::ty_fn({proto: ast::proto_block, _}) { bcx }\n       ty::ty_fn({proto: ast::proto_uniq, _}) { fn_env(ty::ck_uniq) }\n       ty::ty_fn({proto: ast::proto_box, _}) { fn_env(ty::ck_box) }\n       _ { fail ~\"make_fn_glue invoked on non-function type\" }"}, {"sha": "ceca9aa2ef4f920a43ff97d32b30460dd2c60a12", "filename": "src/rustc/middle/trans/foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -968,7 +968,7 @@ fn trans_intrinsic(ccx: @crate_ctxt, decl: ValueRef, item: @ast::foreign_item,\n         let frameaddress_val = Call(bcx, frameaddress, ~[C_i32(0i32)]);\n         let fty = ty::mk_fn(bcx.tcx(), {\n             purity: ast::impure_fn,\n-            proto: ast::proto_any,\n+            proto: ast::proto_block,\n             inputs: ~[{\n                 mode: ast::expl(ast::by_val),\n                 ty: ty::mk_imm_ptr("}, {"sha": "f83d4a2ccc654a125751e7b0127956223f75cb5f", "filename": "src/rustc/middle/trans/reflect.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -186,7 +186,6 @@ impl methods for reflector {\n             };\n             let protoval = alt fty.proto {\n               ast::proto_bare { 0u }\n-              ast::proto_any { 1u }\n               ast::proto_uniq { 2u }\n               ast::proto_box { 3u }\n               ast::proto_block { 4u }"}, {"sha": "1e25501da6ce1233e6177ad029c1f3aac62fb743", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -354,8 +354,7 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t) -> ~[u8] {\n       }\n       ty::ty_fn({proto: ast::proto_box, _}) { ~[shape_box_fn] }\n       ty::ty_fn({proto: ast::proto_uniq, _}) { ~[shape_uniq_fn] }\n-      ty::ty_fn({proto: ast::proto_block, _}) |\n-      ty::ty_fn({proto: ast::proto_any, _}) { ~[shape_stack_fn] }\n+      ty::ty_fn({proto: ast::proto_block, _}) { ~[shape_stack_fn] }\n       ty::ty_fn({proto: ast::proto_bare, _}) { ~[shape_bare_fn] }\n       ty::ty_opaque_closure_ptr(_) { ~[shape_opaque_closure_ptr] }\n       ty::ty_var(_) | ty::ty_var_integral(_) | ty::ty_self {"}, {"sha": "fd21d227632799dbeff335d6d06ffc8374b16297", "filename": "src/rustc/middle/trans/type_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Ftype_use.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -192,7 +192,7 @@ fn mark_for_expr(cx: ctx, e: @expr) {\n       }\n       expr_fn(*) | expr_fn_block(*) {\n         alt ty::ty_fn_proto(ty::expr_ty(cx.ccx.tcx, e)) {\n-          proto_bare | proto_any | proto_uniq {}\n+          proto_bare | proto_uniq {}\n           proto_box | proto_block {\n             for vec::each(*freevars::get_freevars(cx.ccx.tcx, e.id)) |fv| {\n                 let node_id = ast_util::def_id_of_def(fv.def).node;"}, {"sha": "af05c3cfcbfe0e05e63bf6cd9e08468dddb3bf1d", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -1291,7 +1291,7 @@ fn type_needs_drop(cx: ctxt, ty: t) -> bool {\n       }\n       ty_fn(fty) {\n         alt fty.proto {\n-          proto_bare | proto_any | proto_block { false }\n+          proto_bare | proto_block { false }\n           _ { true }\n         }\n       }\n@@ -1533,7 +1533,6 @@ pure fn kind_is_owned(k: kind) -> bool {\n \n fn proto_kind(p: proto) -> kind {\n     alt p {\n-      ast::proto_any { kind_noncopyable() }\n       ast::proto_block { kind_noncopyable() }\n       ast::proto_box { kind_safe_for_default_mode() | kind_owned() }\n       ast::proto_uniq { kind_send_copy() | kind_owned() }"}, {"sha": "b362b00c55b419b5c12b8ff1ec634a7b469144c4", "filename": "src/rustc/middle/typeck/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcheck.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -2396,7 +2396,7 @@ fn check_intrinsic_type(ccx: @crate_ctxt, it: @ast::foreign_item) {\n       ~\"frame_address\" {\n         let fty = ty::mk_fn(ccx.tcx, {\n             purity: ast::impure_fn,\n-            proto: ast::proto_any,\n+            proto: ast::proto_block,\n             inputs: ~[{\n                 mode: ast::expl(ast::by_val),\n                 ty: ty::mk_imm_ptr("}, {"sha": "2a357decd2ece0a7a5b9fdf582ffed7d606d153f", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -395,7 +395,7 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n                  tps: ty::ty_params_to_tys(tcx, tps)});\n             let t_ctor = ty::mk_fn(\n                 tcx, {purity: ast::impure_fn,\n-                      proto: ast::proto_any,\n+                      proto: ast::proto_block,\n                       inputs: t_args,\n                       output: t_res,\n                       ret_style: ast::return_val});\n@@ -410,7 +410,7 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n             // Write the dtor type\n             let t_dtor = ty::mk_fn(\n                 tcx,\n-                ty_of_fn_decl(ccx, type_rscope(rp), ast::proto_any,\n+                ty_of_fn_decl(ccx, type_rscope(rp), ast::proto_block,\n                               ast_util::dtor_dec(), none));\n             write_ty_to_tcx(tcx, dtor.node.id, t_dtor);\n             tcx.tcache.insert(local_def(dtor.node.id),"}, {"sha": "4dec95eee3057aa069ab0036f945b28d9fee0f4f", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -2120,7 +2120,7 @@ impl of combine for lub {\n         } else if p1 == p2 {\n             ok(p1)\n         } else {\n-            ok(ast::proto_any)\n+            ok(ast::proto_block)\n         }\n     }\n \n@@ -2314,9 +2314,9 @@ impl of combine for glb {\n     }\n \n     fn protos(p1: ast::proto, p2: ast::proto) -> cres<ast::proto> {\n-        if p1 == ast::proto_any {\n+        if p1 == ast::proto_block {\n             ok(p2)\n-        } else if p2 == ast::proto_any {\n+        } else if p2 == ast::proto_block {\n             ok(p1)\n         } else if p1 == p2 {\n             ok(p1)"}, {"sha": "dfa2fdab6e3e1c7a6ea9fce395fb7da64357d63b", "filename": "src/test/compile-fail/block-coerce-no.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fblock-coerce-no.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -6,7 +6,7 @@ fn coerce(b: fn()) -> extern fn() {\n            g: fn()) -> extern fn() { return f(g); }\n     fn fn_id(f: extern fn()) -> extern fn() { return f }\n     return lol(fn_id, b);\n-    //~^ ERROR mismatched types: expected `extern fn(fn()) -> extern fn()`\n+    //~^ ERROR mismatched types: expected `extern fn(fn&()) -> extern fn()`\n }\n \n fn main() {"}, {"sha": "dccd127987139c7210c84428671ccefa55a5f86d", "filename": "src/test/compile-fail/extern-wrong-value-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fextern-wrong-value-type.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -1,8 +1,8 @@\n-// error-pattern:expected `fn()` but found `*u8`\n+// error-pattern:expected `fn&()` but found `*u8`\n extern fn f() {\n }\n \n fn main() {\n     // extern functions are *u8 types\n     let _x: fn() = f;\n-}\n\\ No newline at end of file\n+}"}, {"sha": "83c6bc32cc9d675426b1ad7eda593a7fe1a4d535", "filename": "src/test/compile-fail/missing-do.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f23674394f2e77b7aa4686a5ae9f2f60d6faa428/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmissing-do.rs?ref=f23674394f2e77b7aa4686a5ae9f2f60d6faa428", "patch": "@@ -4,6 +4,6 @@ fn foo(f: fn()) { f() }\n \n fn main() {\n     ~\"\" || 42; //~ ERROR binary operation || cannot be applied to type `~str`\n-    foo || {}; //~ ERROR binary operation || cannot be applied to type `extern fn(fn())`\n+    foo || {}; //~ ERROR binary operation || cannot be applied to type `extern fn(fn&())`\n     //~^ NOTE did you forget the 'do' keyword for the call?\n }"}]}