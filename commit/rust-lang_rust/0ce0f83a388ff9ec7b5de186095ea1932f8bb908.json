{"sha": "0ce0f83a388ff9ec7b5de186095ea1932f8bb908", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZTBmODNhMzg4ZmY5ZWM3YjVkZTE4NjA5NWVhMTkzMmY4YmI5MDg=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-11T04:08:36Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2013-01-11T04:10:09Z"}, "message": "std: Fix test that was commented out", "tree": {"sha": "8ea74793ff32293d9e0ee4a58f9ace2f633daa23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ea74793ff32293d9e0ee4a58f9ace2f633daa23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ce0f83a388ff9ec7b5de186095ea1932f8bb908", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ce0f83a388ff9ec7b5de186095ea1932f8bb908", "html_url": "https://github.com/rust-lang/rust/commit/0ce0f83a388ff9ec7b5de186095ea1932f8bb908", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ce0f83a388ff9ec7b5de186095ea1932f8bb908/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1c52a4a9f9bcc99f7978f65dd53302050f04de4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c52a4a9f9bcc99f7978f65dd53302050f04de4", "html_url": "https://github.com/rust-lang/rust/commit/e1c52a4a9f9bcc99f7978f65dd53302050f04de4"}], "stats": {"total": 25, "additions": 11, "deletions": 14}, "files": [{"sha": "1dab605a5af175f0e55379b01521bc66e6605616", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 11, "deletions": 14, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0ce0f83a388ff9ec7b5de186095ea1932f8bb908/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ce0f83a388ff9ec7b5de186095ea1932f8bb908/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=0ce0f83a388ff9ec7b5de186095ea1932f8bb908", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n //! High-level interface to libuv's TCP functionality\n-// XXX Need FFI fixes\n+// FIXME #4425: Need FFI fixes\n #[allow(deprecated_mode)];\n \n use future;\n@@ -1546,23 +1546,21 @@ pub mod test {\n         }\n     }\n     pub fn impl_gl_tcp_ipv4_server_client_reader_writer() {\n-        /*\n-         XXX: Causes an ICE.\n \n         let iotask = uv::global_loop::get();\n         let server_ip = ~\"127.0.0.1\";\n         let server_port = 8891u;\n         let expected_req = ~\"ping\";\n         let expected_resp = ~\"pong\";\n \n-        let server_result_po = core::comm::port::<~str>();\n-        let server_result_ch = core::comm::chan(server_result_po);\n+        let server_result_po = oldcomm::Port::<~str>();\n+        let server_result_ch = oldcomm::Chan(&server_result_po);\n \n-        let cont_po = core::comm::port::<()>();\n-        let cont_ch = core::comm::chan(cont_po);\n+        let cont_po = oldcomm::Port::<()>();\n+        let cont_ch = oldcomm::Chan(&cont_po);\n         // server\n         do task::spawn_sched(task::ManualThreads(1u)) {\n-            let actual_req = do comm::listen |server_ch| {\n+            let actual_req = do oldcomm::listen |server_ch| {\n                 run_tcp_test_server(\n                     server_ip,\n                     server_port,\n@@ -1573,29 +1571,28 @@ pub mod test {\n             };\n             server_result_ch.send(actual_req);\n         };\n-        core::comm::recv(cont_po);\n+        oldcomm::recv(cont_po);\n         // client\n         let server_addr = ip::v4::parse_addr(server_ip);\n         let conn_result = connect(server_addr, server_port, iotask);\n-        if result::is_err(conn_result) {\n+        if result::is_err(&conn_result) {\n             assert false;\n         }\n         let sock_buf = @socket_buf(result::unwrap(conn_result));\n         buf_write(sock_buf, expected_req);\n \n         // so contrived!\n-        let actual_resp = do str::as_bytes(expected_resp) |resp_buf| {\n-            buf_read(sock_buf, vec::len(resp_buf))\n+        let actual_resp = do str::as_bytes(&expected_resp) |resp_buf| {\n+            buf_read(sock_buf, resp_buf.len())\n         };\n \n-        let actual_req = core::comm::recv(server_result_po);\n+        let actual_req = oldcomm::recv(server_result_po);\n         log(debug, fmt!(\"REQ: expected: '%s' actual: '%s'\",\n                        expected_req, actual_req));\n         log(debug, fmt!(\"RESP: expected: '%s' actual: '%s'\",\n                        expected_resp, actual_resp));\n         assert str::contains(actual_req, expected_req);\n         assert str::contains(actual_resp, expected_resp);\n-        */\n     }\n \n     pub fn impl_tcp_socket_impl_reader_handles_eof() {"}]}