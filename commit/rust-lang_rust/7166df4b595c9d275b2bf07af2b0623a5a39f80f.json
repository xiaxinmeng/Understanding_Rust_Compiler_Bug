{"sha": "7166df4b595c9d275b2bf07af2b0623a5a39f80f", "node_id": "C_kwDOAAsO6NoAKDcxNjZkZjRiNTk1YzlkMjc1YjJiZjA3YWYyYjA2MjNhNWEzOWY4MGY", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-14T20:26:59Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-14T20:26:59Z"}, "message": "Inline on_mir_pass and add inline to dump_mir", "tree": {"sha": "513227bf9880631e235e82d067cadd863a8f62ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/513227bf9880631e235e82d067cadd863a8f62ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7166df4b595c9d275b2bf07af2b0623a5a39f80f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7166df4b595c9d275b2bf07af2b0623a5a39f80f", "html_url": "https://github.com/rust-lang/rust/commit/7166df4b595c9d275b2bf07af2b0623a5a39f80f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7166df4b595c9d275b2bf07af2b0623a5a39f80f/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf1d702411b856e99ff9a3d2a465b9680536e7f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf1d702411b856e99ff9a3d2a465b9680536e7f0", "html_url": "https://github.com/rust-lang/rust/commit/cf1d702411b856e99ff9a3d2a465b9680536e7f0"}], "stats": {"total": 35, "additions": 8, "deletions": 27}, "files": [{"sha": "8e363cfbff562d594d9850dfa52c0a6ed2ed553e", "filename": "compiler/rustc_middle/src/mir/pretty.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7166df4b595c9d275b2bf07af2b0623a5a39f80f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7166df4b595c9d275b2bf07af2b0623a5a39f80f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fpretty.rs?ref=7166df4b595c9d275b2bf07af2b0623a5a39f80f", "patch": "@@ -71,6 +71,7 @@ pub enum PassWhere {\n ///   or `typeck` appears in the name.\n /// - `foo & nll | bar & typeck` == match if `foo` and `nll` both appear in the name\n ///   or `typeck` and `bar` both appear in the name.\n+#[inline]\n pub fn dump_mir<'tcx, F>(\n     tcx: TyCtxt<'tcx>,\n     pass_num: Option<&dyn Display>,"}, {"sha": "6b995141a2bef7602ea8cfb6b7c9038bdad1cd21", "filename": "compiler/rustc_mir_transform/src/dump_mir.rs", "status": "modified", "additions": 1, "deletions": 23, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7166df4b595c9d275b2bf07af2b0623a5a39f80f/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7166df4b595c9d275b2bf07af2b0623a5a39f80f/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdump_mir.rs?ref=7166df4b595c9d275b2bf07af2b0623a5a39f80f", "patch": "@@ -1,13 +1,12 @@\n //! This pass just dumps MIR at a specified point.\n \n use std::borrow::Cow;\n-use std::fmt;\n use std::fs::File;\n use std::io;\n \n use crate::MirPass;\n+use rustc_middle::mir::write_mir_pretty;\n use rustc_middle::mir::Body;\n-use rustc_middle::mir::{dump_mir, write_mir_pretty};\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{OutputFilenames, OutputType};\n \n@@ -21,27 +20,6 @@ impl<'tcx> MirPass<'tcx> for Marker {\n     fn run_pass(&self, _tcx: TyCtxt<'tcx>, _body: &mut Body<'tcx>) {}\n }\n \n-pub struct Disambiguator {\n-    is_after: bool,\n-}\n-\n-impl fmt::Display for Disambiguator {\n-    fn fmt(&self, formatter: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        let title = if self.is_after { \"after\" } else { \"before\" };\n-        write!(formatter, \"{}\", title)\n-    }\n-}\n-\n-pub fn on_mir_pass<'tcx>(\n-    tcx: TyCtxt<'tcx>,\n-    pass_num: &dyn fmt::Display,\n-    pass_name: &str,\n-    body: &Body<'tcx>,\n-    is_after: bool,\n-) {\n-    dump_mir(tcx, Some(pass_num), pass_name, &Disambiguator { is_after }, body, |_, _| Ok(()));\n-}\n-\n pub fn emit_mir(tcx: TyCtxt<'_>, outputs: &OutputFilenames) -> io::Result<()> {\n     let path = outputs.path(OutputType::Mir);\n     let mut f = io::BufWriter::new(File::create(&path)?);"}, {"sha": "39a686977fae9dfeba1de748c0673a405864945f", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7166df4b595c9d275b2bf07af2b0623a5a39f80f/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7166df4b595c9d275b2bf07af2b0623a5a39f80f/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=7166df4b595c9d275b2bf07af2b0623a5a39f80f", "patch": "@@ -27,7 +27,7 @@ use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::Visitor as _;\n-use rustc_middle::mir::{traversal, Body, ConstQualifs, MirPhase, Promoted};\n+use rustc_middle::mir::{dump_mir, traversal, Body, ConstQualifs, MirPhase, Promoted};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeFoldable};\n use rustc_span::{Span, Symbol};\n@@ -187,12 +187,14 @@ fn run_passes(\n     let mut index = 0;\n     let mut run_pass = |pass: &dyn MirPass<'tcx>| {\n         let run_hooks = |body: &_, index, is_after| {\n-            dump_mir::on_mir_pass(\n+            let disambiguator = if is_after { \"after\" } else { \"before\" };\n+            dump_mir(\n                 tcx,\n-                &format_args!(\"{:03}-{:03}\", phase_index, index),\n+                Some(&format_args!(\"{:03}-{:03}\", phase_index, index)),\n                 &pass.name(),\n+                &disambiguator,\n                 body,\n-                is_after,\n+                |_, _| Ok(()),\n             );\n         };\n         run_hooks(body, index, false);"}]}