{"sha": "19b8579803979dd3b1e83f7aa9655920eef14b98", "node_id": "C_kwDOAAsO6NoAKDE5Yjg1Nzk4MDM5NzlkZDNiMWU4M2Y3YWE5NjU1OTIwZWVmMTRiOTg", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-10-24T16:06:45Z"}, "committer": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2022-12-28T11:53:48Z"}, "message": "Address changes of pr 103345", "tree": {"sha": "dc8609f69622d000097d367774fd4c7e3ee59fa6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc8609f69622d000097d367774fd4c7e3ee59fa6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19b8579803979dd3b1e83f7aa9655920eef14b98", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEAWou4Gq79HasRseDspeR1Nh440UFAmOsLkwACgkQspeR1Nh4\n40U8PBAAkVF/Laxfyp24BaBmOeVz615zWVLln3lFwJLtlG4lqPGx1dJNYP97EmkW\nUzQvrYZVmnWnYr6K+j1PN+RE9jbrTV5F/oytAT9OO3BYZh2gWBrKARAhHkTBZ/u2\nIIXargol/x02izOhL/5w922aZnkI5TSEZ2o9SshHo7Lbk7P8MuYgTAM5K7nBRnRF\n1ixiiUdjVaYZZ4Ckwk1fwNYVPn5NFmy6SfDXMiz2znXi4Aj9loeaIMaBCD0EFb46\ngqgahlyqEZJD9RQazRuhWSb/LQ3MD3r48kli3nEFcdiuoSl2eRGzlAclRh5beMfW\n2d0HG/bji3NN/HH+B0PCCcomqLj9dQ304mYyroaWWLOxbURfkKuMGe2Lai4btpMx\nIBovh/geeQC5BpAIcQsJHTdPmSsCb7802AVBLcDYvux0XZjVqPWDPdnl/F1aX/QO\nszBGIs21/LXQ/oVskVcFzeTxZMefaXt5WPBjekNaPWtC7sttcgbCxn0Dzvsfgzun\nwMupk5jek0fbKlWGAGjLOA0HNyfDoCW6P8/b+3n5TVdA3Y1ceGkriI1Ssld9XZqa\nPnjUBiQ3zEqsEPUd0TF8616Q09uY9mPravh0SGk3jt7RRdXC7BjmfLHBuavdCUO4\nc7FBDUer540VuZw9DkNdREZ+WgvSeiKzFKcGZnXS4Fi/oqDh+Fw=\n=BWSB\n-----END PGP SIGNATURE-----", "payload": "tree dc8609f69622d000097d367774fd4c7e3ee59fa6\nparent 40b221814ea00a9d279474188d81b9a063eb3f68\nauthor Nikita Tomashevich <quant3234@gmail.com> 1666627605 +0300\ncommitter Nikita Tomashevich <quant3234@gmail.com> 1672228428 +0300\n\nAddress changes of pr 103345\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19b8579803979dd3b1e83f7aa9655920eef14b98", "html_url": "https://github.com/rust-lang/rust/commit/19b8579803979dd3b1e83f7aa9655920eef14b98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19b8579803979dd3b1e83f7aa9655920eef14b98/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40b221814ea00a9d279474188d81b9a063eb3f68", "url": "https://api.github.com/repos/rust-lang/rust/commits/40b221814ea00a9d279474188d81b9a063eb3f68", "html_url": "https://github.com/rust-lang/rust/commit/40b221814ea00a9d279474188d81b9a063eb3f68"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "51b04eb0df011287851db58a847b0a4e89385730", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 46, "deletions": 46, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/19b8579803979dd3b1e83f7aa9655920eef14b98/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19b8579803979dd3b1e83f7aa9655920eef14b98/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=19b8579803979dd3b1e83f7aa9655920eef14b98", "patch": "@@ -523,7 +523,7 @@ pub struct MismatchedStaticLifetime<'a> {\n }\n \n #[derive(Diagnostic)]\n-#[diag(infer::explicit_lifetime_required, code = \"E0621\")]\n+#[diag(infer_explicit_lifetime_required, code = \"E0621\")]\n pub struct ExplicitLifetimeRequired<'a> {\n     #[primary_span]\n     #[label]\n@@ -533,7 +533,7 @@ pub struct ExplicitLifetimeRequired<'a> {\n     pub named: String,\n \n     #[suggestion(\n-        infer::explicit_lifetime_required_sugg,\n+        infer_explicit_lifetime_required_sugg,\n         code = \"{new_ty}\",\n         applicability = \"unspecified\"\n     )]\n@@ -544,88 +544,88 @@ pub struct ExplicitLifetimeRequired<'a> {\n \n #[derive(Subdiagnostic)]\n pub enum ActualImplExplNotes {\n-    #[note(infer::actual_impl_expl_expected_signature_two)]\n+    #[note(infer_actual_impl_expl_expected_signature_two)]\n     ExpectedSignatureTwo {\n         leading_ellipsis: bool,\n         ty_or_sig: String,\n         trait_path: String,\n         lifetime_1: usize,\n         lifetime_2: usize,\n     },\n-    #[note(infer::actual_impl_expl_expected_signature_any)]\n+    #[note(infer_actual_impl_expl_expected_signature_any)]\n     ExpectedSignatureAny {\n         leading_ellipsis: bool,\n         ty_or_sig: String,\n         trait_path: String,\n         lifetime_1: usize,\n     },\n-    #[note(infer::actual_impl_expl_expected_signature_some)]\n+    #[note(infer_actual_impl_expl_expected_signature_some)]\n     ExpectedSignatureSome {\n         leading_ellipsis: bool,\n         ty_or_sig: String,\n         trait_path: String,\n         lifetime_1: usize,\n     },\n-    #[note(infer::actual_impl_expl_expected_signature_nothing)]\n+    #[note(infer_actual_impl_expl_expected_signature_nothing)]\n     ExpectedSignatureNothing { leading_ellipsis: bool, ty_or_sig: String, trait_path: String },\n-    #[note(infer::actual_impl_expl_expected_passive_two)]\n+    #[note(infer_actual_impl_expl_expected_passive_two)]\n     ExpectedPassiveTwo {\n         leading_ellipsis: bool,\n         ty_or_sig: String,\n         trait_path: String,\n         lifetime_1: usize,\n         lifetime_2: usize,\n     },\n-    #[note(infer::actual_impl_expl_expected_passive_any)]\n+    #[note(infer_actual_impl_expl_expected_passive_any)]\n     ExpectedPassiveAny {\n         leading_ellipsis: bool,\n         ty_or_sig: String,\n         trait_path: String,\n         lifetime_1: usize,\n     },\n-    #[note(infer::actual_impl_expl_expected_passive_some)]\n+    #[note(infer_actual_impl_expl_expected_passive_some)]\n     ExpectedPassiveSome {\n         leading_ellipsis: bool,\n         ty_or_sig: String,\n         trait_path: String,\n         lifetime_1: usize,\n     },\n-    #[note(infer::actual_impl_expl_expected_passive_nothing)]\n+    #[note(infer_actual_impl_expl_expected_passive_nothing)]\n     ExpectedPassiveNothing { leading_ellipsis: bool, ty_or_sig: String, trait_path: String },\n-    #[note(infer::actual_impl_expl_expected_other_two)]\n+    #[note(infer_actual_impl_expl_expected_other_two)]\n     ExpectedOtherTwo {\n         leading_ellipsis: bool,\n         ty_or_sig: String,\n         trait_path: String,\n         lifetime_1: usize,\n         lifetime_2: usize,\n     },\n-    #[note(infer::actual_impl_expl_expected_other_any)]\n+    #[note(infer_actual_impl_expl_expected_other_any)]\n     ExpectedOtherAny {\n         leading_ellipsis: bool,\n         ty_or_sig: String,\n         trait_path: String,\n         lifetime_1: usize,\n     },\n-    #[note(infer::actual_impl_expl_expected_other_some)]\n+    #[note(infer_actual_impl_expl_expected_other_some)]\n     ExpectedOtherSome {\n         leading_ellipsis: bool,\n         ty_or_sig: String,\n         trait_path: String,\n         lifetime_1: usize,\n     },\n-    #[note(infer::actual_impl_expl_expected_other_nothing)]\n+    #[note(infer_actual_impl_expl_expected_other_nothing)]\n     ExpectedOtherNothing { leading_ellipsis: bool, ty_or_sig: String, trait_path: String },\n-    #[note(infer::actual_impl_expl_but_actually_implements_trait)]\n+    #[note(infer_actual_impl_expl_but_actually_implements_trait)]\n     ButActuallyImplementsTrait { trait_path: String, has_lifetime: bool, lifetime: usize },\n-    #[note(infer::actual_impl_expl_but_actually_implemented_for_ty)]\n+    #[note(infer_actual_impl_expl_but_actually_implemented_for_ty)]\n     ButActuallyImplementedForTy {\n         trait_path: String,\n         has_lifetime: bool,\n         lifetime: usize,\n         ty: String,\n     },\n-    #[note(infer::actual_impl_expl_but_actually_ty_implements)]\n+    #[note(infer_actual_impl_expl_but_actually_ty_implements)]\n     ButActuallyTyImplements { trait_path: String, has_lifetime: bool, lifetime: usize, ty: String },\n }\n \n@@ -712,15 +712,15 @@ impl ActualImplExplNotes {\n }\n \n #[derive(Diagnostic)]\n-#[diag(infer::trait_placeholder_mismatch)]\n+#[diag(infer_trait_placeholder_mismatch)]\n pub struct TraitPlaceholderMismatch {\n     #[primary_span]\n     pub span: Span,\n-    #[label(infer::label_satisfy)]\n+    #[label(label_satisfy)]\n     pub satisfy_span: Option<Span>,\n-    #[label(infer::label_where)]\n+    #[label(label_where)]\n     pub where_span: Option<Span>,\n-    #[label(infer::label_dup)]\n+    #[label(label_dup)]\n     pub dup_span: Option<Span>,\n     pub def_id: String,\n     pub trait_def_id: String,\n@@ -741,26 +741,26 @@ impl AddToDiagnostic for ConsiderBorrowingParamHelp {\n         let mut type_param_span: MultiSpan = self.spans.clone().into();\n         for &span in &self.spans {\n             // Seems like we can't call f() here as Into<DiagnosticMessage> is required\n-            type_param_span.push_span_label(span, fluent::infer::tid_consider_borrowing);\n+            type_param_span.push_span_label(span, fluent::infer_tid_consider_borrowing);\n         }\n-        let msg = f(diag, fluent::infer::tid_param_help.into());\n+        let msg = f(diag, fluent::infer_tid_param_help.into());\n         diag.span_help(type_param_span, msg);\n     }\n }\n \n #[derive(Subdiagnostic)]\n-#[help(infer::tid_rel_help)]\n+#[help(infer_tid_rel_help)]\n pub struct RelationshipHelp;\n \n #[derive(Diagnostic)]\n-#[diag(infer::trait_impl_diff)]\n+#[diag(infer_trait_impl_diff)]\n pub struct TraitImplDiff {\n     #[primary_span]\n-    #[label(infer::found)]\n+    #[label(found)]\n     pub sp: Span,\n-    #[label(infer::expected)]\n+    #[label(expected)]\n     pub trait_sp: Span,\n-    #[note(infer::expected_found)]\n+    #[note(expected_found)]\n     pub note: (),\n     #[subdiagnostic]\n     pub param_help: ConsiderBorrowingParamHelp,\n@@ -783,11 +783,11 @@ impl AddToDiagnostic for DynTraitConstraintSuggestion {\n         F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n     {\n         let mut multi_span: MultiSpan = vec![self.span].into();\n-        multi_span.push_span_label(self.span, fluent::infer::dtcs_has_lifetime_req_label);\n-        multi_span.push_span_label(self.ident.span, fluent::infer::dtcs_introduces_requirement);\n-        let msg = f(diag, fluent::infer::dtcs_has_req_note.into());\n+        multi_span.push_span_label(self.span, fluent::infer_dtcs_has_lifetime_req_label);\n+        multi_span.push_span_label(self.ident.span, fluent::infer_dtcs_introduces_requirement);\n+        let msg = f(diag, fluent::infer_dtcs_has_req_note.into());\n         diag.span_note(multi_span, msg);\n-        let msg = f(diag, fluent::infer::dtcs_suggestion.into());\n+        let msg = f(diag, fluent::infer_dtcs_suggestion.into());\n         diag.span_suggestion_verbose(\n             self.span.shrink_to_hi(),\n             msg,\n@@ -798,12 +798,12 @@ impl AddToDiagnostic for DynTraitConstraintSuggestion {\n }\n \n #[derive(Diagnostic)]\n-#[diag(infer::but_calling_introduces, code = \"E0772\")]\n+#[diag(infer_but_calling_introduces, code = \"E0772\")]\n pub struct ButCallingIntroduces {\n-    #[label(infer::label1)]\n+    #[label(label1)]\n     pub param_ty_span: Span,\n     #[primary_span]\n-    #[label(infer::label2)]\n+    #[label(label2)]\n     pub cause_span: Span,\n \n     pub has_param_name: bool,\n@@ -829,14 +829,14 @@ impl AddToDiagnostic for ReqIntroducedLocations {\n         F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n     {\n         for sp in self.spans {\n-            self.span.push_span_label(sp, fluent::infer::ril_introduced_here);\n+            self.span.push_span_label(sp, fluent::infer_ril_introduced_here);\n         }\n \n         if self.add_label {\n-            self.span.push_span_label(self.fn_decl_span, fluent::infer::ril_introduced_by);\n+            self.span.push_span_label(self.fn_decl_span, fluent::infer_ril_introduced_by);\n         }\n-        self.span.push_span_label(self.cause_span, fluent::infer::ril_because_of);\n-        let msg = f(diag, fluent::infer::ril_static_introduced_by.into());\n+        self.span.push_span_label(self.cause_span, fluent::infer_ril_because_of);\n+        let msg = f(diag, fluent::infer_ril_static_introduced_by.into());\n         diag.span_note(self.span, msg);\n     }\n }\n@@ -851,25 +851,25 @@ impl AddToDiagnostic for MoreTargeted {\n         F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n     {\n         diag.code(rustc_errors::error_code!(E0772));\n-        diag.set_primary_message(fluent::infer::more_targeted);\n+        diag.set_primary_message(fluent::infer_more_targeted);\n         diag.set_arg(\"ident\", self.ident);\n     }\n }\n \n #[derive(Diagnostic)]\n-#[diag(infer::but_needs_to_satisfy, code = \"E0759\")]\n+#[diag(infer_but_needs_to_satisfy, code = \"E0759\")]\n pub struct ButNeedsToSatisfy {\n     #[primary_span]\n     pub sp: Span,\n-    #[label(infer::influencer)]\n+    #[label(influencer)]\n     pub influencer_point: Span,\n-    #[label(infer::used_here)]\n+    #[label(used_here)]\n     pub spans: Vec<Span>,\n-    #[label(infer::require)]\n+    #[label(require)]\n     pub require_span_as_label: Option<Span>,\n-    #[note(infer::require)]\n+    #[note(require)]\n     pub require_span_as_note: Option<Span>,\n-    #[note(infer::introduced_by_bound)]\n+    #[note(introduced_by_bound)]\n     pub bound: Option<Span>,\n \n     #[subdiagnostic]"}]}