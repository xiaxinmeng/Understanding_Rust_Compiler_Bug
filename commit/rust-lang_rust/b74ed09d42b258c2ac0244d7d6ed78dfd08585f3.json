{"sha": "b74ed09d42b258c2ac0244d7d6ed78dfd08585f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NGVkMDlkNDJiMjU4YzJhYzAyNDRkN2Q2ZWQ3OGRmZDA4NTg1ZjM=", "commit": {"author": {"name": "laurent", "email": "laurent.mazare@gmail.com", "date": "2017-11-17T21:18:32Z"}, "committer": {"name": "laurent", "email": "laurent.mazare@gmail.com", "date": "2017-11-19T11:29:25Z"}, "message": "Use a struct to store most of the recurse parameters for boolean expr suggestion.", "tree": {"sha": "2d800fea8009311549cd900c3be60bcfae084d29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d800fea8009311549cd900c3be60bcfae084d29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b74ed09d42b258c2ac0244d7d6ed78dfd08585f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b74ed09d42b258c2ac0244d7d6ed78dfd08585f3", "html_url": "https://github.com/rust-lang/rust/commit/b74ed09d42b258c2ac0244d7d6ed78dfd08585f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b74ed09d42b258c2ac0244d7d6ed78dfd08585f3/comments", "author": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acc81cf921721ccbb253ecb7ccf5590ea016a1cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/acc81cf921721ccbb253ecb7ccf5590ea016a1cf", "html_url": "https://github.com/rust-lang/rust/commit/acc81cf921721ccbb253ecb7ccf5590ea016a1cf"}], "stats": {"total": 134, "additions": 72, "deletions": 62}, "files": [{"sha": "6fd935ea0f8479a1e73e8225161e52a9fa6f95ec", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 72, "deletions": 62, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/b74ed09d42b258c2ac0244d7d6ed78dfd08585f3/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b74ed09d42b258c2ac0244d7d6ed78dfd08585f3/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=b74ed09d42b258c2ac0244d7d6ed78dfd08585f3", "patch": "@@ -159,120 +159,130 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n     }\n }\n \n-fn simplify_not(expr: &Expr, cx: &LateContext) -> Option<String> {\n-    let snip = |e: &Expr| snippet_opt(cx, e.span).expect(\"don't try to improve booleans created by macros\");\n-    match expr.node {\n-        ExprBinary(binop, ref lhs, ref rhs) => {\n-            match binop.node {\n-                BiEq => Some(\" != \"),\n-                BiNe => Some(\" == \"),\n-                BiLt => Some(\" >= \"),\n-                BiGt => Some(\" <= \"),\n-                BiLe => Some(\" > \"),\n-                BiGe => Some(\" < \"),\n-                _ => None,\n-            }.map(|op| format!(\"{}{}{}\", &snip(lhs), op, &snip(rhs)))\n-        },\n-        ExprMethodCall(ref path, _, ref args) if args.len() == 1 => {\n-            METHODS_WITH_NEGATION\n-                .iter().cloned()\n-                .flat_map(|(a, b)| vec![(a, b), (b, a)])\n-                .find(|&(a, _)| a == path.name.as_str())\n-                .map(|(_, neg_method)| format!(\"{}.{}()\", &snip(&args[0]), neg_method))\n-        },\n-        _ => None,\n-    }\n+struct SuggestContext<'a, 'tcx: 'a, 'v> {\n+    terminals: &'v [&'v Expr],\n+    cx: &'a LateContext<'a, 'tcx>,\n+    output: String,\n+    simplified: bool,\n }\n \n-// The boolean part of the return indicates whether some simplifications have been applied.\n-fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> (String, bool) {\n-    fn recurse(\n-        brackets: bool,\n-        cx: &LateContext,\n-        suggestion: &Bool,\n-        terminals: &[&Expr],\n-        s: &mut String,\n-        simplified: &mut bool,\n-    ) {\n+impl<'a, 'tcx, 'v> SuggestContext<'a, 'tcx, 'v> {\n+    fn snip(&self, e: &Expr) -> String {\n+        snippet_opt(self.cx, e.span).expect(\"don't try to improve booleans created by macros\")\n+    }\n+\n+    fn simplify_not(&self, expr: &Expr) -> Option<String> {\n+        match expr.node {\n+            ExprBinary(binop, ref lhs, ref rhs) => {\n+                match binop.node {\n+                    BiEq => Some(\" != \"),\n+                    BiNe => Some(\" == \"),\n+                    BiLt => Some(\" >= \"),\n+                    BiGt => Some(\" <= \"),\n+                    BiLe => Some(\" > \"),\n+                    BiGe => Some(\" < \"),\n+                    _ => None,\n+                }.map(|op| format!(\"{}{}{}\", self.snip(lhs), op, self.snip(rhs)))\n+            },\n+            ExprMethodCall(ref path, _, ref args) if args.len() == 1 => {\n+                METHODS_WITH_NEGATION\n+                    .iter().cloned()\n+                    .flat_map(|(a, b)| vec![(a, b), (b, a)])\n+                    .find(|&(a, _)| a == path.name.as_str())\n+                    .map(|(_, neg_method)| format!(\"{}.{}()\", self.snip(&args[0]), neg_method))\n+            },\n+            _ => None,\n+        }\n+    }\n+\n+    fn recurse(&mut self, brackets: bool, suggestion: &Bool) {\n         use quine_mc_cluskey::Bool::*;\n-        let snip = |e: &Expr| snippet_opt(cx, e.span).expect(\"don't try to improve booleans created by macros\");\n         match *suggestion {\n             True => {\n-                s.push_str(\"true\");\n+                self.output.push_str(\"true\");\n             },\n             False => {\n-                s.push_str(\"false\");\n+                self.output.push_str(\"false\");\n             },\n             Not(ref inner) => match **inner {\n                 And(_) | Or(_) => {\n-                    s.push('!');\n-                    recurse(true, cx, inner, terminals, s, simplified)\n+                    self.output.push('!');\n+                    self.recurse(true, inner)\n                 },\n                 Term(n) => {\n-                    if let Some(str) = simplify_not(terminals[n as usize], cx) {\n-                        *simplified = true;\n-                        s.push_str(&str)\n+                    if let Some(str) = self.simplify_not(self.terminals[n as usize]) {\n+                        self.simplified = true;\n+                        self.output.push_str(&str)\n                     } else {\n-                        s.push('!');\n-                        recurse(false, cx, inner, terminals, s, simplified)\n+                        self.output.push('!');\n+                        self.recurse(false, inner)\n                     }\n                 },\n                 True | False | Not(_) => {\n-                    s.push('!');\n-                    recurse(false, cx, inner, terminals, s, simplified)\n+                    self.output.push('!');\n+                    self.recurse(false, inner)\n                 },\n             },\n             And(ref v) => {\n                 if brackets {\n-                    s.push('(');\n+                    self.output.push('(');\n                 }\n                 for (index, inner) in v.iter().enumerate() {\n                     if index > 0 {\n-                        s.push_str(\" && \");\n+                        self.output.push_str(\" && \");\n                     }\n                     if let Or(_) = *inner {\n-                        recurse(true, cx, inner, terminals, s, simplified);\n+                        self.recurse(true, inner);\n                     } else {\n-                        recurse(false, cx, inner, terminals, s, simplified);\n+                        self.recurse(false, inner);\n                     }\n                 }\n                 if brackets {\n-                    s.push(')');\n+                    self.output.push(')');\n                 }\n             },\n             Or(ref v) => {\n                 if brackets {\n-                    s.push('(');\n+                    self.output.push('(');\n                 }\n                 for (index, inner) in v.iter().enumerate() {\n                     if index > 0 {\n-                        s.push_str(\" || \");\n+                        self.output.push_str(\" || \");\n                     }\n-                    recurse(false, cx, inner, terminals, s, simplified);\n+                    self.recurse(false, inner);\n                 }\n                 if brackets {\n-                    s.push(')');\n+                    self.output.push(')');\n                 }\n             },\n             Term(n) => {\n-                let brackets = brackets && match terminals[n as usize].node {\n+                let brackets = brackets && match self.terminals[n as usize].node {\n                     ExprBinary(..) => true,\n                     _ => false,\n                 };\n                 if brackets {\n-                    s.push('(');\n+                    self.output.push('(');\n                 }\n-                s.push_str(&snip(terminals[n as usize]));\n+                let snip = self.snip(self.terminals[n as usize]);\n+                self.output.push_str(&snip);\n                 if brackets {\n-                    s.push(')');\n+                    self.output.push(')');\n                 }\n             },\n         }\n     }\n-    let mut simplified = false;\n-    let mut s = String::new();\n-    recurse(false, cx, suggestion, terminals, &mut s, &mut simplified);\n-    (s, simplified)\n+}\n+\n+// The boolean part of the return indicates whether some simplifications have been applied.\n+fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> (String, bool) {\n+    let mut suggest_context = SuggestContext {\n+        terminals: terminals,\n+        cx: cx,\n+        output: String::new(),\n+        simplified: false,\n+    };\n+    suggest_context.recurse(false, suggestion);\n+    (suggest_context.output, suggest_context.simplified)\n }\n \n fn simple_negate(b: Bool) -> Bool {"}]}