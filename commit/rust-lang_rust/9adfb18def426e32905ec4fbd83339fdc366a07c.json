{"sha": "9adfb18def426e32905ec4fbd83339fdc366a07c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhZGZiMThkZWY0MjZlMzI5MDVlYzRmYmQ4MzMzOWZkYzM2NmEwN2M=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-21T07:51:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-21T07:51:10Z"}, "message": "Rollup merge of #67888 - Zoxc:metadata-prefetch, r=matthewjasper\n\nPrefetch some queries used by the metadata encoder\n\nThis brings the time for `metadata encoding and writing` for `syntex_syntax` from 1.338s to 0.997s with 6 threads in non-incremental debug mode.\n\nr? @Mark-Simulacrum", "tree": {"sha": "5cb7de8d460687b4b958304fc3729a25bc37a8a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cb7de8d460687b4b958304fc3729a25bc37a8a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9adfb18def426e32905ec4fbd83339fdc366a07c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJedcduCRBK7hj4Ov3rIwAAdHIIADL13BDpSQawLFqQO/2MKp2D\nOqoAZb71BRaIKLxLDw3qR1k/sTHmL+BXRN8KEsosvgcY5Ms8GhWxshjCzv8a+1ml\n6j0VzJnPDSZ7G8uwZS3U8LOhq4BXY90cBFJ71vrlEN6+M0Nxb2841ij+lt5uGMmw\nNMbCq/lDVwGPNdo86df83CCwJqVjTjs2mva7uPfkD2J+j1KOVkGvEgowdUo6+FIw\nbxDyxp5U3+cvqrjrzv+g1g4Wnirp0Yvud12uj9Nb701ODSdkjm20cDbBVYy8aGLa\nKwx6ns28iVFL8HPfAo8v74T7//yNSgdkI1DPBJhQ/L38S2/xnwmxGzLJ3pvqk4A=\n=WQ6v\n-----END PGP SIGNATURE-----\n", "payload": "tree 5cb7de8d460687b4b958304fc3729a25bc37a8a3\nparent 5f13820478907b09d50baf74f3ff2b78499ecd6c\nparent 027c8d998e30a362319b54b80aaf8cf8ff5bc39d\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584777070 +0100\ncommitter GitHub <noreply@github.com> 1584777070 +0100\n\nRollup merge of #67888 - Zoxc:metadata-prefetch, r=matthewjasper\n\nPrefetch some queries used by the metadata encoder\n\nThis brings the time for `metadata encoding and writing` for `syntex_syntax` from 1.338s to 0.997s with 6 threads in non-incremental debug mode.\n\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9adfb18def426e32905ec4fbd83339fdc366a07c", "html_url": "https://github.com/rust-lang/rust/commit/9adfb18def426e32905ec4fbd83339fdc366a07c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9adfb18def426e32905ec4fbd83339fdc366a07c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f13820478907b09d50baf74f3ff2b78499ecd6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f13820478907b09d50baf74f3ff2b78499ecd6c", "html_url": "https://github.com/rust-lang/rust/commit/5f13820478907b09d50baf74f3ff2b78499ecd6c"}, {"sha": "027c8d998e30a362319b54b80aaf8cf8ff5bc39d", "url": "https://api.github.com/repos/rust-lang/rust/commits/027c8d998e30a362319b54b80aaf8cf8ff5bc39d", "html_url": "https://github.com/rust-lang/rust/commit/027c8d998e30a362319b54b80aaf8cf8ff5bc39d"}], "stats": {"total": 169, "additions": 136, "deletions": 33}, "files": [{"sha": "9b67d4235102d7d7df72e61e74662199c286181d", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9adfb18def426e32905ec4fbd83339fdc366a07c/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9adfb18def426e32905ec4fbd83339fdc366a07c/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=9adfb18def426e32905ec4fbd83339fdc366a07c", "patch": "@@ -1323,7 +1323,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn encode_metadata(self) -> EncodedMetadata {\n-        let _prof_timer = self.prof.generic_activity(\"generate_crate_metadata\");\n+        let _prof_timer = self.prof.verbose_generic_activity(\"generate_crate_metadata\");\n         self.cstore.encode_metadata(self)\n     }\n "}, {"sha": "5963047fc760d7fd678849926a0873f4ade3bb68", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 133, "deletions": 31, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/9adfb18def426e32905ec4fbd83339fdc366a07c/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9adfb18def426e32905ec4fbd83339fdc366a07c/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=9adfb18def426e32905ec4fbd83339fdc366a07c", "patch": "@@ -18,12 +18,13 @@ use rustc_ast::attr;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::StableHasher;\n-use rustc_data_structures::sync::Lrc;\n+use rustc_data_structures::sync::{join, Lrc};\n use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n+use rustc_hir::def_id::DefIdSet;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n-use rustc_hir::itemlikevisit::ItemLikeVisitor;\n+use rustc_hir::itemlikevisit::{ItemLikeVisitor, ParItemLikeVisitor};\n use rustc_hir::{AnonConst, GenericParamKind};\n use rustc_index::vec::Idx;\n use rustc_serialize::{opaque, Encodable, Encoder, SpecializedEncoder};\n@@ -467,12 +468,6 @@ impl<'tcx> EncodeContext<'tcx> {\n         let impls = self.encode_impls();\n         let impl_bytes = self.position() - i;\n \n-        // Encode exported symbols info.\n-        i = self.position();\n-        let exported_symbols = self.tcx.exported_symbols(LOCAL_CRATE);\n-        let exported_symbols = self.encode_exported_symbols(&exported_symbols);\n-        let exported_symbols_bytes = self.position() - i;\n-\n         let tcx = self.tcx;\n \n         // Encode the items.\n@@ -513,6 +508,13 @@ impl<'tcx> EncodeContext<'tcx> {\n         let proc_macro_data = self.encode_proc_macros();\n         let proc_macro_data_bytes = self.position() - i;\n \n+        // Encode exported symbols info. This is prefetched in `encode_metadata` so we encode\n+        // this last to give the prefetching as much time as possible to complete.\n+        i = self.position();\n+        let exported_symbols = self.tcx.exported_symbols(LOCAL_CRATE);\n+        let exported_symbols = self.encode_exported_symbols(&exported_symbols);\n+        let exported_symbols_bytes = self.position() - i;\n+\n         let attrs = tcx.hir().krate_attrs();\n         let has_default_lib_allocator = attr::contains_name(&attrs, sym::default_lib_allocator);\n \n@@ -888,6 +890,8 @@ impl EncodeContext<'tcx> {\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n+\n+        // This should be kept in sync with `PrefetchVisitor.visit_trait_item`.\n         self.encode_optimized_mir(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n@@ -959,6 +963,9 @@ impl EncodeContext<'tcx> {\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n+\n+        // The following part should be kept in sync with `PrefetchVisitor.visit_impl_item`.\n+\n         let mir = match ast_item.kind {\n             hir::ImplItemKind::Const(..) => true,\n             hir::ImplItemKind::Fn(ref sig, _) => {\n@@ -1250,6 +1257,8 @@ impl EncodeContext<'tcx> {\n             _ => {}\n         }\n \n+        // The following part should be kept in sync with `PrefetchVisitor.visit_item`.\n+\n         let mir = match item.kind {\n             hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => true,\n             hir::ItemKind::Fn(ref sig, ..) => {\n@@ -1697,6 +1706,70 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n     }\n }\n \n+/// Used to prefetch queries which will be needed later by metadata encoding.\n+/// Only a subset of the queries are actually prefetched to keep this code smaller.\n+struct PrefetchVisitor<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    mir_keys: &'tcx DefIdSet,\n+}\n+\n+impl<'tcx> PrefetchVisitor<'tcx> {\n+    fn prefetch_mir(&self, def_id: DefId) {\n+        if self.mir_keys.contains(&def_id) {\n+            self.tcx.optimized_mir(def_id);\n+            self.tcx.promoted_mir(def_id);\n+        }\n+    }\n+}\n+\n+impl<'tcx, 'v> ParItemLikeVisitor<'v> for PrefetchVisitor<'tcx> {\n+    fn visit_item(&self, item: &hir::Item<'_>) {\n+        // This should be kept in sync with `encode_info_for_item`.\n+        let tcx = self.tcx;\n+        match item.kind {\n+            hir::ItemKind::Static(..) | hir::ItemKind::Const(..) => {\n+                self.prefetch_mir(tcx.hir().local_def_id(item.hir_id))\n+            }\n+            hir::ItemKind::Fn(ref sig, ..) => {\n+                let def_id = tcx.hir().local_def_id(item.hir_id);\n+                let generics = tcx.generics_of(def_id);\n+                let needs_inline = generics.requires_monomorphization(tcx)\n+                    || tcx.codegen_fn_attrs(def_id).requests_inline();\n+                if needs_inline || sig.header.constness == hir::Constness::Const {\n+                    self.prefetch_mir(def_id)\n+                }\n+            }\n+            _ => (),\n+        }\n+    }\n+\n+    fn visit_trait_item(&self, trait_item: &'v hir::TraitItem<'v>) {\n+        // This should be kept in sync with `encode_info_for_trait_item`.\n+        self.prefetch_mir(self.tcx.hir().local_def_id(trait_item.hir_id));\n+    }\n+\n+    fn visit_impl_item(&self, impl_item: &'v hir::ImplItem<'v>) {\n+        // This should be kept in sync with `encode_info_for_impl_item`.\n+        let tcx = self.tcx;\n+        match impl_item.kind {\n+            hir::ImplItemKind::Const(..) => {\n+                self.prefetch_mir(tcx.hir().local_def_id(impl_item.hir_id))\n+            }\n+            hir::ImplItemKind::Fn(ref sig, _) => {\n+                let def_id = tcx.hir().local_def_id(impl_item.hir_id);\n+                let generics = tcx.generics_of(def_id);\n+                let needs_inline = generics.requires_monomorphization(tcx)\n+                    || tcx.codegen_fn_attrs(def_id).requests_inline();\n+                let is_const_fn = sig.header.constness == hir::Constness::Const;\n+                if needs_inline || is_const_fn {\n+                    self.prefetch_mir(def_id)\n+                }\n+            }\n+            hir::ImplItemKind::OpaqueTy(..) | hir::ImplItemKind::TyAlias(..) => (),\n+        }\n+    }\n+}\n+\n // NOTE(eddyb) The following comment was preserved for posterity, even\n // though it's no longer relevant as EBML (which uses nested & tagged\n // \"documents\") was replaced with a scheme that can't go out of bounds.\n@@ -1721,35 +1794,64 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n // generated regardless of trailing bytes that end up in it.\n \n pub(super) fn encode_metadata(tcx: TyCtxt<'_>) -> EncodedMetadata {\n+    // Since encoding metadata is not in a query, and nothing is cached,\n+    // there's no need to do dep-graph tracking for any of it.\n+    tcx.dep_graph.assert_ignored();\n+\n+    join(\n+        || encode_metadata_impl(tcx),\n+        || {\n+            if tcx.sess.threads() == 1 {\n+                return;\n+            }\n+            // Prefetch some queries used by metadata encoding.\n+            // This is not necessary for correctness, but is only done for performance reasons.\n+            // It can be removed if it turns out to cause trouble or be detrimental to performance.\n+            join(\n+                || {\n+                    if !tcx.sess.opts.output_types.should_codegen() {\n+                        // We won't emit MIR, so don't prefetch it.\n+                        return;\n+                    }\n+                    tcx.hir().krate().par_visit_all_item_likes(&PrefetchVisitor {\n+                        tcx,\n+                        mir_keys: tcx.mir_keys(LOCAL_CRATE),\n+                    });\n+                },\n+                || tcx.exported_symbols(LOCAL_CRATE),\n+            );\n+        },\n+    )\n+    .0\n+}\n+\n+fn encode_metadata_impl(tcx: TyCtxt<'_>) -> EncodedMetadata {\n     let mut encoder = opaque::Encoder::new(vec![]);\n     encoder.emit_raw_bytes(METADATA_HEADER);\n \n     // Will be filled with the root position after encoding everything.\n     encoder.emit_raw_bytes(&[0, 0, 0, 0]);\n \n-    // Since encoding metadata is not in a query, and nothing is cached,\n-    // there's no need to do dep-graph tracking for any of it.\n-    let (root, mut result) = tcx.dep_graph.with_ignore(move || {\n-        let mut ecx = EncodeContext {\n-            opaque: encoder,\n-            tcx,\n-            per_def: Default::default(),\n-            lazy_state: LazyState::NoNode,\n-            type_shorthands: Default::default(),\n-            predicate_shorthands: Default::default(),\n-            source_file_cache: tcx.sess.source_map().files()[0].clone(),\n-            interpret_allocs: Default::default(),\n-            interpret_allocs_inverse: Default::default(),\n-        };\n-\n-        // Encode the rustc version string in a predictable location.\n-        rustc_version().encode(&mut ecx).unwrap();\n-\n-        // Encode all the entries and extra information in the crate,\n-        // culminating in the `CrateRoot` which points to all of it.\n-        let root = ecx.encode_crate_root();\n-        (root, ecx.opaque.into_inner())\n-    });\n+    let mut ecx = EncodeContext {\n+        opaque: encoder,\n+        tcx,\n+        per_def: Default::default(),\n+        lazy_state: LazyState::NoNode,\n+        type_shorthands: Default::default(),\n+        predicate_shorthands: Default::default(),\n+        source_file_cache: tcx.sess.source_map().files()[0].clone(),\n+        interpret_allocs: Default::default(),\n+        interpret_allocs_inverse: Default::default(),\n+    };\n+\n+    // Encode the rustc version string in a predictable location.\n+    rustc_version().encode(&mut ecx).unwrap();\n+\n+    // Encode all the entries and extra information in the crate,\n+    // culminating in the `CrateRoot` which points to all of it.\n+    let root = ecx.encode_crate_root();\n+\n+    let mut result = ecx.opaque.into_inner();\n \n     // Encode the root position.\n     let header = METADATA_HEADER.len();"}, {"sha": "448c1610c13684f7e4aa142175209dc57a9fe6b9", "filename": "src/librustc_metadata/rmeta/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9adfb18def426e32905ec4fbd83339fdc366a07c/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9adfb18def426e32905ec4fbd83339fdc366a07c/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fmod.rs?ref=9adfb18def426e32905ec4fbd83339fdc366a07c", "patch": "@@ -196,14 +196,15 @@ crate struct CrateRoot<'tcx> {\n     source_map: Lazy<[rustc_span::SourceFile]>,\n     def_path_table: Lazy<map::definitions::DefPathTable>,\n     impls: Lazy<[TraitImpls]>,\n-    exported_symbols: Lazy!([(ExportedSymbol<'tcx>, SymbolExportLevel)]),\n     interpret_alloc_index: Lazy<[u32]>,\n \n     per_def: LazyPerDefTables<'tcx>,\n \n     /// The DefIndex's of any proc macros declared by this crate.\n     proc_macro_data: Option<Lazy<[DefIndex]>>,\n \n+    exported_symbols: Lazy!([(ExportedSymbol<'tcx>, SymbolExportLevel)]),\n+\n     compiler_builtins: bool,\n     needs_allocator: bool,\n     needs_panic_runtime: bool,"}]}