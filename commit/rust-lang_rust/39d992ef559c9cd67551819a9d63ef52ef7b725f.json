{"sha": "39d992ef559c9cd67551819a9d63ef52ef7b725f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5ZDk5MmVmNTU5YzljZDY3NTUxODE5YTlkNjNlZjUyZWY3YjcyNWY=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-01T18:35:21Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-04-01T18:35:21Z"}, "message": "Intern Attr, MacroCall and Path components", "tree": {"sha": "49e1e59d00e46a8bb110d2b28d911c07d4a058f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49e1e59d00e46a8bb110d2b28d911c07d4a058f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/39d992ef559c9cd67551819a9d63ef52ef7b725f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/39d992ef559c9cd67551819a9d63ef52ef7b725f", "html_url": "https://github.com/rust-lang/rust/commit/39d992ef559c9cd67551819a9d63ef52ef7b725f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/39d992ef559c9cd67551819a9d63ef52ef7b725f/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b00266b79f0e2c2a5e332b30f7e6aba83b5e6e5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b00266b79f0e2c2a5e332b30f7e6aba83b5e6e5a", "html_url": "https://github.com/rust-lang/rust/commit/b00266b79f0e2c2a5e332b30f7e6aba83b5e6e5a"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "2bab121d993032fb06f3e071b6315adabfdaa65c", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/39d992ef559c9cd67551819a9d63ef52ef7b725f/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d992ef559c9cd67551819a9d63ef52ef7b725f/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=39d992ef559c9cd67551819a9d63ef52ef7b725f", "patch": "@@ -18,6 +18,7 @@ use tt::Subtree;\n \n use crate::{\n     db::DefDatabase,\n+    intern::Interned,\n     item_tree::{ItemTreeId, ItemTreeNode},\n     nameres::ModuleSource,\n     path::{ModPath, PathKind},\n@@ -98,7 +99,7 @@ impl RawAttrs {\n                 Either::Right(comment) => comment.doc_comment().map(|doc| Attr {\n                     index: i as u32,\n                     input: Some(AttrInput::Literal(SmolStr::new(doc))),\n-                    path: ModPath::from(hir_expand::name!(doc)),\n+                    path: Interned::new(ModPath::from(hir_expand::name!(doc))),\n                 }),\n             })\n             .collect::<Arc<_>>();\n@@ -510,7 +511,7 @@ impl AttrSourceMap {\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct Attr {\n     index: u32,\n-    pub(crate) path: ModPath,\n+    pub(crate) path: Interned<ModPath>,\n     pub(crate) input: Option<AttrInput>,\n }\n \n@@ -524,7 +525,7 @@ pub enum AttrInput {\n \n impl Attr {\n     fn from_src(ast: ast::Attr, hygiene: &Hygiene, index: u32) -> Option<Attr> {\n-        let path = ModPath::from_src(ast.path()?, hygiene)?;\n+        let path = Interned::new(ModPath::from_src(ast.path()?, hygiene)?);\n         let input = if let Some(ast::Expr::Literal(lit)) = ast.expr() {\n             let value = match lit.kind() {\n                 ast::LiteralKind::String(string) => string.value()?.into(),"}, {"sha": "4d8fbd32494319ad21f8f80ef8c236bf698c9289", "filename": "crates/hir_def/src/intern.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/39d992ef559c9cd67551819a9d63ef52ef7b725f/crates%2Fhir_def%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d992ef559c9cd67551819a9d63ef52ef7b725f/crates%2Fhir_def%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fintern.rs?ref=39d992ef559c9cd67551819a9d63ef52ef7b725f", "patch": "@@ -15,6 +15,7 @@ use rustc_hash::FxHasher;\n \n type InternMap<T> = DashMap<Arc<T>, (), BuildHasherDefault<FxHasher>>;\n \n+#[derive(Hash)]\n pub struct Interned<T: Internable> {\n     arc: Arc<T>,\n }\n@@ -152,6 +153,6 @@ macro_rules! impl_internable {\n     )+ };\n }\n \n-impl_internable!(crate::type_ref::TypeRef, crate::type_ref::TraitRef);\n+impl_internable!(crate::type_ref::TypeRef, crate::type_ref::TraitRef, crate::path::ModPath);\n \n // endregion"}, {"sha": "69a313c7e2d44cb8146aacb70959e13800857a55", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d992ef559c9cd67551819a9d63ef52ef7b725f/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d992ef559c9cd67551819a9d63ef52ef7b725f/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=39d992ef559c9cd67551819a9d63ef52ef7b725f", "patch": "@@ -694,7 +694,7 @@ pub enum ModKind {\n #[derive(Debug, Clone, Eq, PartialEq)]\n pub struct MacroCall {\n     /// Path to the called macro.\n-    pub path: ModPath,\n+    pub path: Interned<ModPath>,\n     pub ast_id: FileAstId<ast::MacroCall>,\n }\n "}, {"sha": "5247379c58c4a66be55a28ca2b03c65a6888f2c4", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d992ef559c9cd67551819a9d63ef52ef7b725f/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d992ef559c9cd67551819a9d63ef52ef7b725f/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=39d992ef559c9cd67551819a9d63ef52ef7b725f", "patch": "@@ -606,7 +606,7 @@ impl Ctx {\n     }\n \n     fn lower_macro_call(&mut self, m: &ast::MacroCall) -> Option<FileItemTreeId<MacroCall>> {\n-        let path = ModPath::from_src(m.path()?, &self.hygiene)?;\n+        let path = Interned::new(ModPath::from_src(m.path()?, &self.hygiene)?);\n         let ast_id = self.source_ast_id_map.ast_id(m);\n         let res = MacroCall { path, ast_id };\n         Some(id(self.data().macro_calls.alloc(res)))"}, {"sha": "5badefabf5786bbfc492096bdff9365ef5df783e", "filename": "crates/hir_def/src/nameres/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/39d992ef559c9cd67551819a9d63ef52ef7b725f/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d992ef559c9cd67551819a9d63ef52ef7b725f/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=39d992ef559c9cd67551819a9d63ef52ef7b725f", "patch": "@@ -1464,7 +1464,7 @@ impl ModCollector<'_, '_> {\n     }\n \n     fn collect_macro_call(&mut self, mac: &MacroCall) {\n-        let mut ast_id = AstIdWithPath::new(self.file_id, mac.ast_id, mac.path.clone());\n+        let mut ast_id = AstIdWithPath::new(self.file_id, mac.ast_id, (*mac.path).clone());\n \n         // Case 1: try to resolve in legacy scope and expand macro_rules\n         let mut error = None;"}, {"sha": "a3e83e2cf1e8953231a0b8829e1ca163b236890a", "filename": "crates/hir_def/src/path.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/39d992ef559c9cd67551819a9d63ef52ef7b725f/crates%2Fhir_def%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d992ef559c9cd67551819a9d63ef52ef7b725f/crates%2Fhir_def%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath.rs?ref=39d992ef559c9cd67551819a9d63ef52ef7b725f", "patch": "@@ -7,7 +7,7 @@ use std::{\n     sync::Arc,\n };\n \n-use crate::{body::LowerCtx, type_ref::LifetimeRef};\n+use crate::{body::LowerCtx, intern::Interned, type_ref::LifetimeRef};\n use base_db::CrateId;\n use hir_expand::{\n     hygiene::Hygiene,\n@@ -48,7 +48,7 @@ pub enum ImportAlias {\n \n impl ModPath {\n     pub fn from_src(path: ast::Path, hygiene: &Hygiene) -> Option<ModPath> {\n-        lower::lower_path(path, hygiene).map(|it| it.mod_path)\n+        lower::lower_path(path, hygiene).map(|it| (*it.mod_path).clone())\n     }\n \n     pub fn from_segments(kind: PathKind, segments: impl IntoIterator<Item = Name>) -> ModPath {\n@@ -123,7 +123,7 @@ pub struct Path {\n     /// Type based path like `<T>::foo`.\n     /// Note that paths like `<Type as Trait>::foo` are desugard to `Trait::<Self=Type>::foo`.\n     type_anchor: Option<Box<TypeRef>>,\n-    mod_path: ModPath,\n+    mod_path: Interned<ModPath>,\n     /// Invariant: the same len as `self.mod_path.segments`\n     generic_args: Vec<Option<Arc<GenericArgs>>>,\n }\n@@ -176,7 +176,7 @@ impl Path {\n         path: ModPath,\n         generic_args: Vec<Option<Arc<GenericArgs>>>,\n     ) -> Path {\n-        Path { type_anchor: None, mod_path: path, generic_args }\n+        Path { type_anchor: None, mod_path: Interned::new(path), generic_args }\n     }\n \n     pub fn kind(&self) -> &PathKind {\n@@ -204,10 +204,10 @@ impl Path {\n         }\n         let res = Path {\n             type_anchor: self.type_anchor.clone(),\n-            mod_path: ModPath::from_segments(\n+            mod_path: Interned::new(ModPath::from_segments(\n                 self.mod_path.kind.clone(),\n                 self.mod_path.segments[..self.mod_path.segments.len() - 1].iter().cloned(),\n-            ),\n+            )),\n             generic_args: self.generic_args[..self.generic_args.len() - 1].to_vec(),\n         };\n         Some(res)\n@@ -283,7 +283,7 @@ impl From<Name> for Path {\n     fn from(name: Name) -> Path {\n         Path {\n             type_anchor: None,\n-            mod_path: ModPath::from_segments(PathKind::Plain, iter::once(name)),\n+            mod_path: Interned::new(ModPath::from_segments(PathKind::Plain, iter::once(name))),\n             generic_args: vec![None],\n         }\n     }"}, {"sha": "28f6244da199634dcfc60ccf01cc6649c9bfe260", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/39d992ef559c9cd67551819a9d63ef52ef7b725f/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/39d992ef559c9cd67551819a9d63ef52ef7b725f/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=39d992ef559c9cd67551819a9d63ef52ef7b725f", "patch": "@@ -2,6 +2,7 @@\n \n mod lower_use;\n \n+use crate::intern::Interned;\n use std::sync::Arc;\n \n use either::Either;\n@@ -74,10 +75,11 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n                     // <T as Trait<A>>::Foo desugars to Trait<Self=T, A>::Foo\n                     Some(trait_ref) => {\n                         let path = Path::from_src(trait_ref.path()?, hygiene)?;\n+                        let mod_path = (*path.mod_path).clone();\n                         let num_segments = path.mod_path.segments.len();\n-                        kind = path.mod_path.kind;\n+                        kind = mod_path.kind;\n \n-                        let mut prefix_segments = path.mod_path.segments;\n+                        let mut prefix_segments = mod_path.segments;\n                         prefix_segments.reverse();\n                         segments.extend(prefix_segments);\n \n@@ -140,7 +142,7 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n         }\n     }\n \n-    let mod_path = ModPath::from_segments(kind, segments);\n+    let mod_path = Interned::new(ModPath::from_segments(kind, segments));\n     return Some(Path { type_anchor, mod_path, generic_args });\n \n     fn qualifier(path: &ast::Path) -> Option<ast::Path> {"}]}