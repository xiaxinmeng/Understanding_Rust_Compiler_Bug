{"sha": "ca3a9f83f4815840a507291778910df1e521d423", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhM2E5ZjgzZjQ4MTU4NDBhNTA3MjkxNzc4OTEwZGYxZTUyMWQ0MjM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-03T22:36:47Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-05-03T22:36:47Z"}, "message": "Annotate more FIXMES in libstd (comments only)", "tree": {"sha": "013aabbc9f3d6706a25223b96717e28c206edb31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/013aabbc9f3d6706a25223b96717e28c206edb31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca3a9f83f4815840a507291778910df1e521d423", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca3a9f83f4815840a507291778910df1e521d423", "html_url": "https://github.com/rust-lang/rust/commit/ca3a9f83f4815840a507291778910df1e521d423", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca3a9f83f4815840a507291778910df1e521d423/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f029e1f486d965c0a20410644e9faa9b294e03c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f029e1f486d965c0a20410644e9faa9b294e03c9", "html_url": "https://github.com/rust-lang/rust/commit/f029e1f486d965c0a20410644e9faa9b294e03c9"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "0f30e5e6e12c1a44b904ac17d3c663c0b78f561b", "filename": "src/libstd/deque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca3a9f83f4815840a507291778910df1e521d423/src%2Flibstd%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca3a9f83f4815840a507291778910df1e521d423/src%2Flibstd%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fdeque.rs?ref=ca3a9f83f4815840a507291778910df1e521d423", "patch": "@@ -14,7 +14,7 @@ iface t<T> {\n }\n \n // FIXME eventually, a proper datatype plus an exported impl would be\n-// preferrable\n+// preferrable (#2343)\n fn create<T: copy>() -> t<T> {\n     type cell<T> = option<T>;\n "}, {"sha": "f797ffeff765f5f1f75eefb88386e730d0f998fd", "filename": "src/libstd/map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca3a9f83f4815840a507291778910df1e521d423/src%2Flibstd%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca3a9f83f4815840a507291778910df1e521d423/src%2Flibstd%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmap.rs?ref=ca3a9f83f4815840a507291778910df1e521d423", "patch": "@@ -66,7 +66,7 @@ iface map<K: copy, V: copy> {\n }\n \n // FIXME: package this up and export it as a datatype usable for\n-// external code that doesn't want to pay the cost of a box.\n+// external code that doesn't want to pay the cost of a box. (#2344)\n mod chained {\n     type entry<K, V> = {\n         hash: uint,"}, {"sha": "dbb5a22f40448ce64fbd1bbc826f728241201dec", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ca3a9f83f4815840a507291778910df1e521d423/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca3a9f83f4815840a507291778910df1e521d423/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=ca3a9f83f4815840a507291778910df1e521d423", "patch": "@@ -61,7 +61,7 @@ fn sha1() -> sha1 {\n          work_buf: [mut u32]};\n \n     fn add_input(st: sha1state, msg: [u8]) {\n-        // FIXME: Should be typestate precondition\n+        /* FIXME: Should be typestate precondition (#2345) */\n         assert (!st.computed);\n         for vec::each(msg) {|element|\n             st.msg_block[st.msg_block_idx] = element;\n@@ -70,7 +70,7 @@ fn sha1() -> sha1 {\n             if st.len_low == 0u32 {\n                 st.len_high += 1u32;\n                 if st.len_high == 0u32 {\n-                    // FIXME: Need better failure mode\n+                    // FIXME: Need better failure mode (#2346)\n \n                     fail;\n                 }\n@@ -79,7 +79,7 @@ fn sha1() -> sha1 {\n         }\n     }\n     fn process_msg_block(st: sha1state) {\n-        // FIXME: Make precondition\n+        // FIXME: Make precondition (#2345)\n         assert (vec::len(st.h) == digest_buf_len);\n         assert (vec::len(st.work_buf) == work_buf_len);\n         let mut t: int; // Loop counter\n@@ -181,7 +181,7 @@ fn sha1() -> sha1 {\n      * can be assumed that the message digest has been computed.\n      */\n     fn pad_msg(st: sha1state) {\n-        // FIXME: Should be a precondition\n+        // FIXME: Should be a precondition (#2345)\n         assert (vec::len(st.msg_block) == msg_block_len);\n \n         /*\n@@ -220,7 +220,7 @@ fn sha1() -> sha1 {\n \n     impl of sha1 for sha1state {\n         fn reset() {\n-            // FIXME: Should be typestate precondition\n+            // FIXME: Should be typestate precondition (#2345)\n             assert (vec::len(self.h) == digest_buf_len);\n             self.len_low = 0u32;\n             self.len_high = 0u32;"}]}