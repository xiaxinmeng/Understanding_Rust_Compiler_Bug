{"sha": "95b4978baa7d318b4648df3058ece4212f502bf7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YjQ5NzhiYWE3ZDMxOGI0NjQ4ZGYzMDU4ZWNlNDIxMmY1MDJiZjc=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2018-06-05T08:28:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-05T08:28:32Z"}, "message": "Merge pull request #2767 from topecongiro/issue-2759\n\nFix breaking code block with `#` in doc comments", "tree": {"sha": "efe5337554260f077e9a197989cb75f16114a712", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efe5337554260f077e9a197989cb75f16114a712"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95b4978baa7d318b4648df3058ece4212f502bf7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbFkmwCRBK7hj4Ov3rIwAAdHIIAKMRUAsQMoLlaP8JGzjWK2Kf\nTI4jkOhPA/ALosNKK9Yxb78asqzKjrY2JDwKJkM14o688fhdMMyPmpzTBTF+uyAG\nmwGwSep2LO/ohOvYO1qm+wr9TrEc2oLFLa+JrJWAFIExNjkCArh5SXZIrmXkPrbc\n2H2AL2X9ZIYzXZwrBODRMlzFsv+lXBBaDmdAVqoJSYIYXXzpbALTn/rKvoU6p4KT\ncFz+fw2alXk1/n+atU4Y0rn7xhMbieZhhx5OZ8uH1p/v0DSMgUgQYlPTCbciVPgz\nesQqITKm/kcFu2gZ6p/IMNAeS8PqUQYJLG9B5J2jSf9mVj0Ng3Vt8czYVVQe2ZY=\n=QdhL\n-----END PGP SIGNATURE-----\n", "payload": "tree efe5337554260f077e9a197989cb75f16114a712\nparent 9e208cb13a9e5ed39932de7abddffeeeddb769aa\nparent 604764abe15c2742af85c1461e6f8055083e3c0b\nauthor Nick Cameron <nrc@ncameron.org> 1528187312 +1200\ncommitter GitHub <noreply@github.com> 1528187312 +1200\n\nMerge pull request #2767 from topecongiro/issue-2759\n\nFix breaking code block with `#` in doc comments"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95b4978baa7d318b4648df3058ece4212f502bf7", "html_url": "https://github.com/rust-lang/rust/commit/95b4978baa7d318b4648df3058ece4212f502bf7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95b4978baa7d318b4648df3058ece4212f502bf7/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e208cb13a9e5ed39932de7abddffeeeddb769aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e208cb13a9e5ed39932de7abddffeeeddb769aa", "html_url": "https://github.com/rust-lang/rust/commit/9e208cb13a9e5ed39932de7abddffeeeddb769aa"}, {"sha": "604764abe15c2742af85c1461e6f8055083e3c0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/604764abe15c2742af85c1461e6f8055083e3c0b", "html_url": "https://github.com/rust-lang/rust/commit/604764abe15c2742af85c1461e6f8055083e3c0b"}], "stats": {"total": 83, "additions": 78, "deletions": 5}, "files": [{"sha": "f684a6291fff6a7c90dd67fa76798dbb36c6a6d7", "filename": "src/comment.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/95b4978baa7d318b4648df3058ece4212f502bf7/src%2Fcomment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b4978baa7d318b4648df3058ece4212f502bf7/src%2Fcomment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomment.rs?ref=95b4978baa7d318b4648df3058ece4212f502bf7", "patch": "@@ -390,8 +390,10 @@ fn rewrite_comment_inner(\n                 let code_block = {\n                     let mut config = config.clone();\n                     config.set().wrap_comments(false);\n-                    ::format_code_block(&code_block_buffer, &config)\n-                        .map_or_else(|| code_block_buffer.to_owned(), trim_custom_comment_prefix)\n+                    match ::format_code_block(&code_block_buffer, &config) {\n+                        Some(ref s) => trim_custom_comment_prefix(s),\n+                        None => trim_custom_comment_prefix(&code_block_buffer),\n+                    }\n                 };\n                 result.push_str(&join_code_block_with_comment_line_separator(&code_block));\n                 code_block_buffer.clear();\n@@ -406,7 +408,7 @@ fn rewrite_comment_inner(\n                     // We will leave them untouched.\n                     result.push_str(&comment_line_separator);\n                     result.push_str(&join_code_block_with_comment_line_separator(\n-                        &code_block_buffer,\n+                        &trim_custom_comment_prefix(&code_block_buffer),\n                     ));\n                 }\n             }\n@@ -505,9 +507,16 @@ fn hide_sharp_behind_comment<'a>(s: &'a str) -> Cow<'a, str> {\n     }\n }\n \n-fn trim_custom_comment_prefix(s: String) -> String {\n+fn trim_custom_comment_prefix(s: &str) -> String {\n     s.lines()\n-        .map(|line| line.trim_left_matches(RUSTFMT_CUSTOM_COMMENT_PREFIX))\n+        .map(|line| {\n+            let left_trimmed = line.trim_left();\n+            if left_trimmed.starts_with(RUSTFMT_CUSTOM_COMMENT_PREFIX) {\n+                left_trimmed.trim_left_matches(RUSTFMT_CUSTOM_COMMENT_PREFIX)\n+            } else {\n+                line\n+            }\n+        })\n         .collect::<Vec<_>>()\n         .join(\"\\n\")\n }"}, {"sha": "3685afbdc0e72208fbbbaf57874ff365fdb03aff", "filename": "tests/target/issue-2759.rs", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/95b4978baa7d318b4648df3058ece4212f502bf7/tests%2Ftarget%2Fissue-2759.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95b4978baa7d318b4648df3058ece4212f502bf7/tests%2Ftarget%2Fissue-2759.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2759.rs?ref=95b4978baa7d318b4648df3058ece4212f502bf7", "patch": "@@ -0,0 +1,64 @@\n+// rustfmt-wrap_comments: true\n+// rustfmt-max_width: 89\n+\n+// Code block in doc comments that will exceed max width.\n+/// ```rust\n+/// extern crate actix_web;\n+/// use actix_web::{actix, server, App, HttpResponse};\n+///\n+/// fn main() {\n+///     // Run actix system, this method actually starts all async processes\n+///     actix::System::run(|| {\n+///         server::new(|| App::new().resource(\"/\", |r| r.h(|_| HttpResponse::Ok())))\n+///             .bind(\"127.0.0.1:0\")\n+///             .expect(\"Can not bind to 127.0.0.1:0\")\n+///             .start();\n+/// #           actix::Arbiter::system().do_send(actix::msgs::SystemExit(0));\n+///     });\n+/// }\n+/// ```\n+fn foo() {}\n+\n+// Code block in doc comments without the closing '```'.\n+/// ```rust\n+/// # extern crate actix_web;\n+/// use actix_web::{App, HttpResponse, http};\n+///\n+/// fn main() {\n+///     let app = App::new()\n+///         .resource(\n+///             \"/\", |r| r.method(http::Method::GET).f(|r| HttpResponse::Ok()))\n+///         .finish();\n+/// }\n+fn bar() {}\n+\n+// `#` with indent.\n+/// ```rust\n+/// # use std::thread;\n+/// # extern crate actix_web;\n+/// use actix_web::{server, App, HttpResponse};\n+///\n+/// struct State1;\n+///\n+/// struct State2;\n+///\n+/// fn main() {\n+///     # thread::spawn(|| {\n+///     server::new(|| {\n+///         vec![\n+///             App::with_state(State1)\n+///                 .prefix(\"/app1\")\n+///                 .resource(\"/\", |r| r.f(|r| HttpResponse::Ok()))\n+///                 .boxed(),\n+///             App::with_state(State2)\n+///                 .prefix(\"/app2\")\n+///                 .resource(\"/\", |r| r.f(|r| HttpResponse::Ok()))\n+///                 .boxed(),\n+///         ]\n+///     }).bind(\"127.0.0.1:8080\")\n+///         .unwrap()\n+///         .run()\n+///     # });\n+/// }\n+/// ```\n+fn foobar() {}"}]}