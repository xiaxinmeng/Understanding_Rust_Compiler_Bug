{"sha": "c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwNDIwYjFhNTlkYTRlNTNhYTk2YjBmN2JlYTZlYjQzYWI3ZDI3ZjM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-24T07:12:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-24T07:12:21Z"}, "message": "do not use InterpError::description outside librustc::mir", "tree": {"sha": "a7389d067c061cff722c031d870de7d3a5555c8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7389d067c061cff722c031d870de7d3a5555c8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3", "html_url": "https://github.com/rust-lang/rust/commit/c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a7f28678bbf4e16893bb6a718e427504167a9494", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7f28678bbf4e16893bb6a718e427504167a9494", "html_url": "https://github.com/rust-lang/rust/commit/a7f28678bbf4e16893bb6a718e427504167a9494"}], "stats": {"total": 11, "additions": 6, "deletions": 5}, "files": [{"sha": "b5ff55e2f0e995ac4d97ff75610cb86bc6b41176", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3", "patch": "@@ -330,7 +330,7 @@ pub enum InterpError<'tcx, O> {\n pub type InterpResult<'tcx, T = ()> = Result<T, InterpErrorInfo<'tcx>>;\n \n impl<'tcx, O> InterpError<'tcx, O> {\n-    pub fn description(&self) -> &str {\n+    pub(crate) fn description(&self) -> &str {\n         use self::InterpError::*;\n         match *self {\n             MachineError(ref inner) => inner,"}, {"sha": "27eddca8542d0ef7e43fe4fbe934eb6155913715", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3", "patch": "@@ -418,8 +418,8 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     vec![file_line_col, index, len])\n             }\n             _ => {\n-                let str = msg.description();\n-                let msg_str = LocalInternedString::intern(str);\n+                let str = format!(\"{:?}\", msg);\n+                let msg_str = LocalInternedString::intern(&str);\n                 let msg_file_line_col = bx.static_panic_msg(\n                     Some(msg_str),\n                     filename,"}, {"sha": "1d3d20f298d77067380ea85a20f702b1872e1f34", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=c0420b1a59da4e53aa96b0f7bea6eb43ab7d27f3", "patch": "@@ -809,7 +809,7 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n         self.super_terminator(terminator, location);\n         let source_info = terminator.source_info;\n         match &mut terminator.kind {\n-            TerminatorKind::Assert { expected, msg, ref mut cond, .. } => {\n+            TerminatorKind::Assert { expected, ref msg, ref mut cond, .. } => {\n                 if let Some(value) = self.eval_operand(&cond, source_info) {\n                     trace!(\"assertion on {:?} should be {:?}\", value, expected);\n                     let expected = ScalarMaybeUndef::from(Scalar::from_bool(*expected));\n@@ -836,7 +836,8 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n                             Panic(PanicMessage::Overflow(_)) |\n                             Panic(PanicMessage::OverflowNeg) |\n                             Panic(PanicMessage::DivisionByZero) |\n-                            Panic(PanicMessage::RemainderByZero) => msg.description().to_owned(),\n+                            Panic(PanicMessage::RemainderByZero) =>\n+                                format!(\"{:?}\", msg),\n                             Panic(PanicMessage::BoundsCheck { ref len, ref index }) => {\n                                 let len = self\n                                     .eval_operand(len, source_info)"}]}