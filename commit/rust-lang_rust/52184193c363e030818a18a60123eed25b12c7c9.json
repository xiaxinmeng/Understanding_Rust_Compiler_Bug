{"sha": "52184193c363e030818a18a60123eed25b12c7c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMTg0MTkzYzM2M2UwMzA4MThhMThhNjAxMjNlZWQyNWIxMmM3Yzk=", "commit": {"author": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-06T21:41:05Z"}, "committer": {"name": "Vytautas Astrauskas", "email": "astrauv@amazon.com", "date": "2020-04-27T21:23:32Z"}, "message": "Fix comments in TLS.", "tree": {"sha": "1e5941bb872c02974c97782d92dc9af4ca8f5bf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e5941bb872c02974c97782d92dc9af4ca8f5bf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52184193c363e030818a18a60123eed25b12c7c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52184193c363e030818a18a60123eed25b12c7c9", "html_url": "https://github.com/rust-lang/rust/commit/52184193c363e030818a18a60123eed25b12c7c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52184193c363e030818a18a60123eed25b12c7c9/comments", "author": null, "committer": null, "parents": [{"sha": "ed9c7d168b0ded92e4bfb53acd2f71b61b54e306", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed9c7d168b0ded92e4bfb53acd2f71b61b54e306", "html_url": "https://github.com/rust-lang/rust/commit/ed9c7d168b0ded92e4bfb53acd2f71b61b54e306"}], "stats": {"total": 23, "additions": 11, "deletions": 12}, "files": [{"sha": "a7d62897b8f01f0ea9a29544c67f10a40e8b7659", "filename": "src/machine.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/52184193c363e030818a18a60123eed25b12c7c9/src%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52184193c363e030818a18a60123eed25b12c7c9/src%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmachine.rs?ref=52184193c363e030818a18a60123eed25b12c7c9", "patch": "@@ -27,7 +27,7 @@ use rustc_target::abi::{LayoutOf, Size};\n \n use crate::*;\n \n-pub use crate::threads::{ThreadId, ThreadSet, ThreadLocalStorage};\n+pub use crate::threads::{ThreadId, ThreadSet, ThreadState, ThreadLocalStorage};\n \n // Some global facts about the emulated machine.\n pub const PAGE_SIZE: u64 = 4 * 1024; // FIXME: adjust to target architecture"}, {"sha": "ec8c31fe2c1277e55179a7d7766ec00834c6f0a1", "filename": "src/shims/tls.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52184193c363e030818a18a60123eed25b12c7c9/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52184193c363e030818a18a60123eed25b12c7c9/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=52184193c363e030818a18a60123eed25b12c7c9", "patch": "@@ -9,7 +9,7 @@ use rustc_middle::ty;\n use rustc_target::abi::{Size, HasDataLayout};\n \n use crate::{HelpersEvalContextExt, ThreadsEvalContextExt, InterpResult, MPlaceTy, Scalar, StackPopCleanup, Tag};\n-use crate::machine::ThreadId;\n+use crate::machine::{ThreadId, ThreadState};\n \n pub type TlsKey = u128;\n \n@@ -174,7 +174,7 @@ impl<'tcx> TlsData<'tcx> {\n \n impl<'mir, 'tcx: 'mir> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n-    /// Run TLS destructors for the currently active thread.\n+    /// Run TLS destructors for all threads.\n     fn run_tls_dtors(&mut self) -> InterpResult<'tcx> {\n         let this = self.eval_context_mut();\n         assert!(!this.machine.tls.dtors_running, \"running TLS dtors twice\");\n@@ -223,7 +223,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n \n         // Now run the \"keyed\" destructors.\n-        for thread_id in this.get_all_thread_ids() {\n+        for (thread_id, thread_state) in this.get_all_thread_ids_with_states() {\n+            assert!(thread_state == ThreadState::Terminated,\n+                    \"TLS destructors should be executed after all threads terminated.\");\n             this.set_active_thread(thread_id)?;\n             let mut dtor = this.machine.tls.fetch_tls_dtor(None, thread_id);\n             while let Some((instance, thread_id, ptr, key)) = dtor {"}, {"sha": "4458f4410e4c7664349a057799b219a814691461", "filename": "src/threads.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/52184193c363e030818a18a60123eed25b12c7c9/src%2Fthreads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52184193c363e030818a18a60123eed25b12c7c9/src%2Fthreads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fthreads.rs?ref=52184193c363e030818a18a60123eed25b12c7c9", "patch": "@@ -97,10 +97,7 @@ impl<'mir, 'tcx> Default for ThreadSet<'mir, 'tcx> {\n     fn default() -> Self {\n         let mut threads = IndexVec::new();\n         threads.push(Default::default());\n-        Self {\n-            active_thread: ThreadId::new(0),\n-            threads: threads,\n-        }\n+        Self { active_thread: ThreadId::new(0), threads: threads }\n     }\n }\n \n@@ -156,8 +153,8 @@ impl<'mir, 'tcx: 'mir> ThreadSet<'mir, 'tcx> {\n         }\n     }\n     /// Get ids of all threads ever allocated.\n-    fn get_all_thread_ids(&mut self) -> Vec<ThreadId> {\n-        (0..self.threads.len()).map(ThreadId::new).collect()\n+    fn get_all_thread_ids_with_states(&self) -> Vec<(ThreadId, ThreadState)> {\n+        self.threads.iter_enumerated().map(|(id, thread)| (id, thread.state)).collect()\n     }\n     /// Decide which thread to run next.\n     ///\n@@ -283,9 +280,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let this = self.eval_context_mut();\n         this.machine.threads.active_thread_stack_mut()\n     }\n-    fn get_all_thread_ids(&mut self) -> Vec<ThreadId> {\n+    fn get_all_thread_ids_with_states(&mut self) -> Vec<(ThreadId, ThreadState)> {\n         let this = self.eval_context_mut();\n-        this.machine.threads.get_all_thread_ids()\n+        this.machine.threads.get_all_thread_ids_with_states()\n     }\n     /// Decide which thread to run next.\n     ///"}]}