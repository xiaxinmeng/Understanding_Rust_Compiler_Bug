{"sha": "66b7c11c90cdbaebc07fcfaf88bebfbc64a85663", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2YjdjMTFjOTBjZGJhZWJjMDdmY2ZhZjg4YmViZmJjNjRhODU2NjM=", "commit": {"author": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2014-05-03T12:53:52Z"}, "committer": {"name": "Guillaume Pinot", "email": "texitoi@texitoi.eu", "date": "2014-05-03T12:53:52Z"}, "message": "shootout-mandelbrot rewrite\n\n- removed warning\n- improved performances\n- parallelization", "tree": {"sha": "35b7cdb56e1ab632068602114aab78337a3d5fcb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35b7cdb56e1ab632068602114aab78337a3d5fcb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66b7c11c90cdbaebc07fcfaf88bebfbc64a85663", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66b7c11c90cdbaebc07fcfaf88bebfbc64a85663", "html_url": "https://github.com/rust-lang/rust/commit/66b7c11c90cdbaebc07fcfaf88bebfbc64a85663", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66b7c11c90cdbaebc07fcfaf88bebfbc64a85663/comments", "author": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TeXitoi", "id": 5787066, "node_id": "MDQ6VXNlcjU3ODcwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5787066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TeXitoi", "html_url": "https://github.com/TeXitoi", "followers_url": "https://api.github.com/users/TeXitoi/followers", "following_url": "https://api.github.com/users/TeXitoi/following{/other_user}", "gists_url": "https://api.github.com/users/TeXitoi/gists{/gist_id}", "starred_url": "https://api.github.com/users/TeXitoi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TeXitoi/subscriptions", "organizations_url": "https://api.github.com/users/TeXitoi/orgs", "repos_url": "https://api.github.com/users/TeXitoi/repos", "events_url": "https://api.github.com/users/TeXitoi/events{/privacy}", "received_events_url": "https://api.github.com/users/TeXitoi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0d261e576817817bf3433deee6a1434cec47002", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0d261e576817817bf3433deee6a1434cec47002", "html_url": "https://github.com/rust-lang/rust/commit/e0d261e576817817bf3433deee6a1434cec47002"}], "stats": {"total": 107, "additions": 52, "deletions": 55}, "files": [{"sha": "e7b4d0a5c1c6d346bb5e92a0f5c4e48fe1e2f69e", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 52, "deletions": 55, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/66b7c11c90cdbaebc07fcfaf88bebfbc64a85663/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66b7c11c90cdbaebc07fcfaf88bebfbc64a85663/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=66b7c11c90cdbaebc07fcfaf88bebfbc64a85663", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,72 +8,69 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::io;\n+extern crate sync;\n \n-struct DummyWriter;\n-impl Writer for DummyWriter {\n-    fn write(&mut self, _: &[u8]) -> io::IoResult<()> { Ok(()) }\n-}\n+use std::io;\n+use sync::Future;\n \n static ITER: int = 50;\n static LIMIT: f64 = 2.0;\n \n-fn main() {\n-    let args = std::os::args();\n-    let (w, mut out) = if args.len() < 2 {\n-        println!(\"Test mode: do not dump the image because it's not utf8, \\\n-                  which interferes with the test runner.\");\n-        (1000, ~DummyWriter as ~Writer)\n-    } else {\n-        (from_str(args[1]).unwrap(),\n-         ~std::io::stdout() as ~Writer)\n-    };\n-    let h = w;\n-    let mut byte_acc = 0u8;\n-    let mut bit_num = 0;\n-\n-    writeln!(out, \"P4\\n{} {}\", w, h);\n-\n-    for y in range(0, h) {\n-        let y = y as f64;\n-        for x in range(0, w) {\n-            let mut z_r = 0f64;\n-            let mut z_i = 0f64;\n-            let mut t_r = 0f64;\n-            let mut t_i = 0f64;\n-            let c_r = 2.0 * (x as f64) / (w as f64) - 1.5;\n-            let c_i = 2.0 * (y as f64) / (h as f64) - 1.0;\n-\n+fn write_line(init_i: f64, vec_init_r: &[f64], res: &mut Vec<u8>) {\n+    for chunk_init_r in vec_init_r.chunks(8) {\n+        let mut cur_byte = 0xff;\n+        let mut cur_bitmask = 0x80;\n+        for &init_r in chunk_init_r.iter() {\n+            let mut cur_r = init_r;\n+            let mut cur_i = init_i;\n             for _ in range(0, ITER) {\n-                if t_r + t_i > LIMIT * LIMIT {\n+                let r = cur_r;\n+                let i = cur_i;\n+                cur_r = r * r - i * i + init_r;\n+                cur_i = 2.0 * r * i + init_i;\n+\n+                if r * r + i * i > LIMIT * LIMIT {\n+                    cur_byte &= !cur_bitmask;\n                     break;\n                 }\n-\n-                z_i = 2.0 * z_r * z_i + c_i;\n-                z_r = t_r - t_i + c_r;\n-                t_r = z_r * z_r;\n-                t_i = z_i * z_i;\n-            }\n-\n-            byte_acc <<= 1;\n-            if t_r + t_i <= LIMIT * LIMIT {\n-                byte_acc |= 1;\n             }\n+            cur_bitmask >>= 1;\n+        }\n+        res.push(cur_byte);\n+    }\n+}\n \n-            bit_num += 1;\n+fn mandelbrot<W: io::Writer>(w: uint, mut out: W) -> io::IoResult<()> {\n+    // Ensure w and h are multiples of 8.\n+    let w = (w + 7) / 8 * 8;\n+    let h = w;\n+    let chunk_size = h / 8;\n \n-            if bit_num == 8 {\n-                out.write_u8(byte_acc);\n-                byte_acc = 0;\n-                bit_num = 0;\n-            } else if x == w - 1 {\n-                byte_acc <<= 8 - w % 8;\n-                out.write_u8(byte_acc);\n-                byte_acc = 0;\n-                bit_num = 0;\n-            }\n+    let data: Vec<Future<Vec<u8>>> = range(0u, 8).map(|i| Future::spawn(proc () {\n+        let vec_init_r = Vec::from_fn(w, |x| 2.0 * (x as f64) / (w as f64) - 1.5);\n+        let mut res: Vec<u8> = Vec::with_capacity((chunk_size * w) / 8);\n+        for y in range(i * chunk_size, (i + 1) * chunk_size) {\n+            let init_i = 2.0 * (y as f64) / (h as f64) - 1.0;\n+            write_line(init_i, vec_init_r.as_slice(), &mut res);\n         }\n+        res\n+    })).collect();\n+\n+    try!(writeln!(&mut out as &mut Writer, \"P4\\n{} {}\", w, h));\n+    for res in data.move_iter() {\n+        try!(out.write(res.unwrap().as_slice()));\n     }\n+    out.flush()\n+}\n \n-    out.flush();\n+fn main() {\n+    let args = std::os::args();\n+    let res = if args.len() < 2 {\n+        println!(\"Test mode: do not dump the image because it's not utf8, \\\n+                  which interferes with the test runner.\");\n+        mandelbrot(1000, std::io::util::NullWriter)\n+    } else {\n+        mandelbrot(from_str(args[1]).unwrap(), std::io::stdout())\n+    };\n+    res.unwrap();\n }"}]}