{"sha": "09dbf37213a5462c08e5e62e931aabc2fb3b92e4", "node_id": "C_kwDOAAsO6NoAKDA5ZGJmMzcyMTNhNTQ2MmMwOGU1ZTYyZTkzMWFhYmMyZmIzYjkyZTQ", "commit": {"author": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-10-12T09:19:14Z"}, "committer": {"name": "Esteban Kuber", "email": "esteban@kuber.com.ar", "date": "2021-12-10T03:08:23Z"}, "message": "Add filtering based on involved required lifetime\n\nMore accurate filtering still needed.", "tree": {"sha": "2c8c8c1a39c990cf61f6087900f1b0676de827b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c8c8c1a39c990cf61f6087900f1b0676de827b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/09dbf37213a5462c08e5e62e931aabc2fb3b92e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/09dbf37213a5462c08e5e62e931aabc2fb3b92e4", "html_url": "https://github.com/rust-lang/rust/commit/09dbf37213a5462c08e5e62e931aabc2fb3b92e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/09dbf37213a5462c08e5e62e931aabc2fb3b92e4/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab45ab83ac0c9b19b6d692ca5d2e9b7b98c3565a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab45ab83ac0c9b19b6d692ca5d2e9b7b98c3565a", "html_url": "https://github.com/rust-lang/rust/commit/ab45ab83ac0c9b19b6d692ca5d2e9b7b98c3565a"}], "stats": {"total": 44, "additions": 21, "deletions": 23}, "files": [{"sha": "daeb406a839838a6bea3eee89a23712ec835e348", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/09dbf37213a5462c08e5e62e931aabc2fb3b92e4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dbf37213a5462c08e5e62e931aabc2fb3b92e4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=09dbf37213a5462c08e5e62e931aabc2fb3b92e4", "patch": "@@ -156,11 +156,13 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         spans.dedup_by_key(|span| (span.lo(), span.hi()));\n \n         // We try to make the output have fewer overlapping spans if possible.\n-        let (require_msg, require_span) = if sup_origin.span().overlaps(return_sp) {\n-            (\"...is captured and required to live as long as `'static` here\", sup_origin.span())\n+        let require_msg = if spans.is_empty() {\n+            \"...is captured and required to live as long as `'static` here\"\n         } else {\n-            (\"...and is required to live as long as `'static` here\", return_sp)\n+            \"...and is required to live as long as `'static` here\"\n         };\n+        let require_span =\n+            if sup_origin.span().overlaps(return_sp) { sup_origin.span() } else { return_sp };\n \n         for span in &spans {\n             err.span_label(*span, \"...is captured here...\");"}, {"sha": "b6c1e1f5922fc57c91c59c0ca4433f8565a89290", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/mod.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/09dbf37213a5462c08e5e62e931aabc2fb3b92e4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/09dbf37213a5462c08e5e62e931aabc2fb3b92e4/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2Fmod.rs?ref=09dbf37213a5462c08e5e62e931aabc2fb3b92e4", "patch": "@@ -48,7 +48,7 @@ pub fn resolve<'tcx>(\n \n             values.values.iter_mut().for_each(|v| match *v {\n                 VarValue::Value(ref mut r) => *r = re_erased,\n-                VarValue::ErrorValue => {}\n+                VarValue::ErrorValue(_) => {}\n             });\n             (values, errors)\n         }\n@@ -69,7 +69,7 @@ pub struct LexicalRegionResolutions<'tcx> {\n #[derive(Copy, Clone, Debug)]\n enum VarValue<'tcx> {\n     Value(Region<'tcx>),\n-    ErrorValue,\n+    ErrorValue(RegionVid),\n }\n \n #[derive(Clone, Debug)]\n@@ -233,7 +233,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     (None, a_region, b_vid, b_data)\n                 }\n                 Constraint::VarSubVar(a_vid, b_vid) => match *var_values.value(a_vid) {\n-                    VarValue::ErrorValue => continue,\n+                    VarValue::ErrorValue(_) => continue,\n                     VarValue::Value(a_region) => {\n                         let b_data = var_values.value_mut(b_vid);\n                         (Some(a_vid), a_region, b_vid, b_data)\n@@ -250,7 +250,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n             }\n             if let Some(a_vid) = a_vid {\n                 match *b_data {\n-                    VarValue::Value(ReStatic) | VarValue::ErrorValue => (),\n+                    VarValue::Value(ReStatic) | VarValue::ErrorValue(_) => (),\n                     _ => {\n                         constraints[a_vid].push((a_vid, b_vid));\n                         constraints[b_vid].push((a_vid, b_vid));\n@@ -262,14 +262,14 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         while let Some(vid) = changes.pop() {\n             constraints[vid].retain(|&(a_vid, b_vid)| {\n                 let a_region = match *var_values.value(a_vid) {\n-                    VarValue::ErrorValue => return false,\n+                    VarValue::ErrorValue(_) => return false,\n                     VarValue::Value(a_region) => a_region,\n                 };\n                 let b_data = var_values.value_mut(b_vid);\n                 if self.expand_node(a_region, b_vid, b_data) {\n                     changes.push(b_vid);\n                 }\n-                !matches!(b_data, VarValue::Value(ReStatic) | VarValue::ErrorValue)\n+                !matches!(b_data, VarValue::Value(ReStatic) | VarValue::ErrorValue(_))\n             });\n         }\n     }\n@@ -332,7 +332,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                 true\n             }\n \n-            VarValue::ErrorValue => false,\n+            VarValue::ErrorValue(_) => false,\n         }\n     }\n \n@@ -476,7 +476,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                     debug!(\"contraction: {:?} == {:?}, {:?}\", a_vid, a_data, b_region);\n \n                     let a_region = match *a_data {\n-                        VarValue::ErrorValue => continue,\n+                        VarValue::ErrorValue(_) => continue,\n                         VarValue::Value(a_region) => a_region,\n                     };\n \n@@ -489,7 +489,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                             cannot verify that {:?}={:?} <= {:?}\",\n                             origin, a_vid, a_region, b_region\n                         );\n-                        *a_data = VarValue::ErrorValue;\n+                        *a_data = VarValue::ErrorValue(a_vid);\n                     }\n                 }\n             }\n@@ -545,7 +545,7 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n         for (node_vid, value) in var_data.values.iter_enumerated() {\n             match *value {\n                 VarValue::Value(_) => { /* Inference successful */ }\n-                VarValue::ErrorValue => {\n+                VarValue::ErrorValue(reg) => {\n                     // Inference impossible: this value contains\n                     // inconsistent constraints.\n                     //\n@@ -577,9 +577,10 @@ impl<'cx, 'tcx> LexicalResolver<'cx, 'tcx> {\n                         .constraints\n                         .iter()\n                         .filter_map(|(constraint, origin)| match (constraint, origin) {\n-                            (Constraint::VarSubVar(_, _), SubregionOrigin::DataBorrowed(_, sp)) => {\n-                                Some(*sp)\n-                            }\n+                            (\n+                                Constraint::VarSubVar(_, sup),\n+                                SubregionOrigin::DataBorrowed(_, sp),\n+                            ) if sup == &reg => Some(*sp),\n                             _ => None,\n                         })\n                         .collect();\n@@ -898,7 +899,7 @@ impl<'tcx> LexicalRegionResolutions<'tcx> {\n     pub fn resolve_var(&self, rid: RegionVid) -> ty::Region<'tcx> {\n         let result = match self.values[rid] {\n             VarValue::Value(r) => r,\n-            VarValue::ErrorValue => self.error_region,\n+            VarValue::ErrorValue(_) => self.error_region,\n         };\n         debug!(\"resolve_var({:?}) = {:?}\", rid, result);\n         result"}, {"sha": "11fb7c86c3bdd4f5ab9d6661c31605f4651e943c", "filename": "src/test/ui/async-await/issues/issue-62097.stderr", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/09dbf37213a5462c08e5e62e931aabc2fb3b92e4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/09dbf37213a5462c08e5e62e931aabc2fb3b92e4/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-62097.stderr?ref=09dbf37213a5462c08e5e62e931aabc2fb3b92e4", "patch": "@@ -4,13 +4,8 @@ error[E0759]: `self` has an anonymous lifetime `'_` but it needs to satisfy a `'\n LL |     pub async fn run_dummy_fn(&self) {\n    |                               ^^^^^ this data with an anonymous lifetime `'_`...\n LL |         foo(|| self.bar()).await;\n-   |         ------------------------ ...is captured here...\n+   |         --- ...is captured and required to live as long as `'static` here\n    |\n-note: ...and is required to live as long as `'static` here\n-  --> $DIR/issue-62097.rs:13:9\n-   |\n-LL |         foo(|| self.bar()).await;\n-   |         ^^^\n note: `'static` lifetime requirement introduced by this bound\n   --> $DIR/issue-62097.rs:4:19\n    |"}]}