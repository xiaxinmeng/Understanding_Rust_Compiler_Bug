{"sha": "0d242b3f9098fe13518da4442692f29915cf2da4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMjQyYjNmOTA5OGZlMTM1MThkYTQ0NDI2OTJmMjk5MTVjZjJkYTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-17T08:13:47Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-08-17T09:56:58Z"}, "message": "invalid_value: warn for types with custom valid range", "tree": {"sha": "4280d12cda7337b362b3a4e7a86ff87d2933a3c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4280d12cda7337b362b3a4e7a86ff87d2933a3c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d242b3f9098fe13518da4442692f29915cf2da4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d242b3f9098fe13518da4442692f29915cf2da4", "html_url": "https://github.com/rust-lang/rust/commit/0d242b3f9098fe13518da4442692f29915cf2da4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d242b3f9098fe13518da4442692f29915cf2da4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "25d8a0a3514c3d8dd8362d0eb68272dc50168af3", "url": "https://api.github.com/repos/rust-lang/rust/commits/25d8a0a3514c3d8dd8362d0eb68272dc50168af3", "html_url": "https://github.com/rust-lang/rust/commit/25d8a0a3514c3d8dd8362d0eb68272dc50168af3"}], "stats": {"total": 132, "additions": 102, "deletions": 30}, "files": [{"sha": "f4f6bd37774c78ddc1b73ea3154ba982d81fd92f", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 18, "deletions": 2, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0d242b3f9098fe13518da4442692f29915cf2da4/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d242b3f9098fe13518da4442692f29915cf2da4/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0d242b3f9098fe13518da4442692f29915cf2da4", "patch": "@@ -1928,8 +1928,25 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                     Some((format!(\"Booleans must be `true` or `false`\"), None)),\n                 Char if init == InitKind::Uninit =>\n                     Some((format!(\"Characters must be a valid unicode codepoint\"), None)),\n-                // Recurse for some compound types.\n+                // Recurse and checks for some compound types.\n                 Adt(adt_def, substs) if !adt_def.is_union() => {\n+                    // First check f this ADT has a layout attribute (like `NonNull` and friends).\n+                    use std::ops::Bound;\n+                    match tcx.layout_scalar_valid_range(adt_def.did) {\n+                        // We exploit here that `layout_scalar_valid_range` will never\n+                        // return `Bound::Excluded`.  (And we have tests checking that we\n+                        // handle the attribute correctly.)\n+                        (Bound::Included(lo), _) if lo > 0 =>\n+                            return Some((format!(\"{} must be non-null\", ty), None)),\n+                        (Bound::Included(_), _) | (_, Bound::Included(_))\n+                        if init == InitKind::Uninit =>\n+                            return Some((\n+                                format!(\"{} must be initialized inside its custom valid range\", ty),\n+                                None,\n+                            )),\n+                        _ => {}\n+                    }\n+                    // Now, recurse.\n                     match adt_def.variants.len() {\n                         0 => Some((format!(\"0-variant enums have no valid value\"), None)),\n                         1 => {\n@@ -1961,7 +1978,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidValue {\n                     // Proceed recursively, check all fields.\n                     ty.tuple_fields().find_map(|field| ty_find_init_error(tcx, field, init))\n                 }\n-                // FIXME: Would be nice to also warn for `NonNull`/`NonZero*`.\n                 // FIXME: *Only for `mem::uninitialized`*, we could also warn for multivariant enum.\n                 // Conservative fallback.\n                 _ => None,"}, {"sha": "237f2c0141dcea647941059aa0e9e7aecfd34548", "filename": "src/test/ui/lint/uninitialized-zeroed.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0d242b3f9098fe13518da4442692f29915cf2da4/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d242b3f9098fe13518da4442692f29915cf2da4/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.rs?ref=0d242b3f9098fe13518da4442692f29915cf2da4", "patch": "@@ -2,7 +2,7 @@\n // This test checks that calling `mem::{uninitialized,zeroed}` with certain types results\n // in a lint.\n \n-#![feature(never_type)]\n+#![feature(never_type, rustc_attrs)]\n #![allow(deprecated)]\n #![deny(invalid_value)]\n \n@@ -16,6 +16,11 @@ struct RefPair((&'static i32, i32));\n struct Wrap<T> { wrapped: T }\n enum WrapEnum<T> { Wrapped(T) }\n \n+#[rustc_layout_scalar_valid_range_start(0)]\n+#[rustc_layout_scalar_valid_range_end(128)]\n+#[repr(transparent)]\n+pub(crate) struct NonBig(u64);\n+\n #[allow(unused)]\n fn generic<T: 'static>() {\n     unsafe {\n@@ -29,6 +34,7 @@ fn generic<T: 'static>() {\n \n fn main() {\n     unsafe {\n+        // Things that cannot even be zero.\n         let _val: ! = mem::zeroed(); //~ ERROR: does not permit zero-initialization\n         let _val: ! = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n \n@@ -56,14 +62,23 @@ fn main() {\n         let _val: Wrap<(RefPair, i32)> = mem::zeroed(); //~ ERROR: does not permit zero-initialization\n         let _val: Wrap<(RefPair, i32)> = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n \n+        let _val: Vec<i32> = mem::zeroed(); //~ ERROR: does not permit zero-initialization\n+        let _val: Vec<i32> = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n+\n+        // Things that can be zero, but not uninit.\n+        let _val: bool = mem::zeroed();\n         let _val: bool = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n+\n+        let _val: Wrap<char> = mem::zeroed();\n         let _val: Wrap<char> = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n \n-        // Some types that should work just fine.\n+        let _val: NonBig = mem::zeroed();\n+        let _val: NonBig = mem::uninitialized(); //~ ERROR: does not permit being left uninitialized\n+\n+        // Some more types that should work just fine.\n         let _val: Option<&'static i32> = mem::zeroed();\n         let _val: Option<fn()> = mem::zeroed();\n         let _val: MaybeUninit<&'static i32> = mem::zeroed();\n-        let _val: bool = mem::zeroed();\n         let _val: i32 = mem::zeroed();\n     }\n }"}, {"sha": "c5006345e52f13cd22f3df9d4466d9e09d6d395e", "filename": "src/test/ui/lint/uninitialized-zeroed.stderr", "status": "modified", "additions": 66, "deletions": 25, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/0d242b3f9098fe13518da4442692f29915cf2da4/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d242b3f9098fe13518da4442692f29915cf2da4/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funinitialized-zeroed.stderr?ref=0d242b3f9098fe13518da4442692f29915cf2da4", "patch": "@@ -1,5 +1,5 @@\n error: the type `&'static T` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:22:32\n+  --> $DIR/uninitialized-zeroed.rs:27:32\n    |\n LL |         let _val: &'static T = mem::zeroed();\n    |                                ^^^^^^^^^^^^^\n@@ -15,7 +15,7 @@ LL | #![deny(invalid_value)]\n    = note: References must be non-null\n \n error: the type `&'static T` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:23:32\n+  --> $DIR/uninitialized-zeroed.rs:28:32\n    |\n LL |         let _val: &'static T = mem::uninitialized();\n    |                                ^^^^^^^^^^^^^^^^^^^^\n@@ -26,7 +26,7 @@ LL |         let _val: &'static T = mem::uninitialized();\n    = note: References must be non-null\n \n error: the type `Wrap<&'static T>` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:25:38\n+  --> $DIR/uninitialized-zeroed.rs:30:38\n    |\n LL |         let _val: Wrap<&'static T> = mem::zeroed();\n    |                                      ^^^^^^^^^^^^^\n@@ -41,7 +41,7 @@ LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `Wrap<&'static T>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:26:38\n+  --> $DIR/uninitialized-zeroed.rs:31:38\n    |\n LL |         let _val: Wrap<&'static T> = mem::uninitialized();\n    |                                      ^^^^^^^^^^^^^^^^^^^^\n@@ -56,7 +56,7 @@ LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `!` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:32:23\n+  --> $DIR/uninitialized-zeroed.rs:38:23\n    |\n LL |         let _val: ! = mem::zeroed();\n    |                       ^^^^^^^^^^^^^\n@@ -67,7 +67,7 @@ LL |         let _val: ! = mem::zeroed();\n    = note: The never type (`!`) has no valid value\n \n error: the type `!` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:33:23\n+  --> $DIR/uninitialized-zeroed.rs:39:23\n    |\n LL |         let _val: ! = mem::uninitialized();\n    |                       ^^^^^^^^^^^^^^^^^^^^\n@@ -78,7 +78,7 @@ LL |         let _val: ! = mem::uninitialized();\n    = note: The never type (`!`) has no valid value\n \n error: the type `(i32, !)` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:35:30\n+  --> $DIR/uninitialized-zeroed.rs:41:30\n    |\n LL |         let _val: (i32, !) = mem::zeroed();\n    |                              ^^^^^^^^^^^^^\n@@ -89,7 +89,7 @@ LL |         let _val: (i32, !) = mem::zeroed();\n    = note: The never type (`!`) has no valid value\n \n error: the type `(i32, !)` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:36:30\n+  --> $DIR/uninitialized-zeroed.rs:42:30\n    |\n LL |         let _val: (i32, !) = mem::uninitialized();\n    |                              ^^^^^^^^^^^^^^^^^^^^\n@@ -100,7 +100,7 @@ LL |         let _val: (i32, !) = mem::uninitialized();\n    = note: The never type (`!`) has no valid value\n \n error: the type `Void` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:38:26\n+  --> $DIR/uninitialized-zeroed.rs:44:26\n    |\n LL |         let _val: Void = mem::zeroed();\n    |                          ^^^^^^^^^^^^^\n@@ -111,7 +111,7 @@ LL |         let _val: Void = mem::zeroed();\n    = note: 0-variant enums have no valid value\n \n error: the type `Void` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:39:26\n+  --> $DIR/uninitialized-zeroed.rs:45:26\n    |\n LL |         let _val: Void = mem::uninitialized();\n    |                          ^^^^^^^^^^^^^^^^^^^^\n@@ -122,7 +122,7 @@ LL |         let _val: Void = mem::uninitialized();\n    = note: 0-variant enums have no valid value\n \n error: the type `&'static i32` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:41:34\n+  --> $DIR/uninitialized-zeroed.rs:47:34\n    |\n LL |         let _val: &'static i32 = mem::zeroed();\n    |                                  ^^^^^^^^^^^^^\n@@ -133,7 +133,7 @@ LL |         let _val: &'static i32 = mem::zeroed();\n    = note: References must be non-null\n \n error: the type `&'static i32` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:42:34\n+  --> $DIR/uninitialized-zeroed.rs:48:34\n    |\n LL |         let _val: &'static i32 = mem::uninitialized();\n    |                                  ^^^^^^^^^^^^^^^^^^^^\n@@ -144,7 +144,7 @@ LL |         let _val: &'static i32 = mem::uninitialized();\n    = note: References must be non-null\n \n error: the type `Ref` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:44:25\n+  --> $DIR/uninitialized-zeroed.rs:50:25\n    |\n LL |         let _val: Ref = mem::zeroed();\n    |                         ^^^^^^^^^^^^^\n@@ -159,7 +159,7 @@ LL | struct Ref(&'static i32);\n    |            ^^^^^^^^^^^^\n \n error: the type `Ref` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:45:25\n+  --> $DIR/uninitialized-zeroed.rs:51:25\n    |\n LL |         let _val: Ref = mem::uninitialized();\n    |                         ^^^^^^^^^^^^^^^^^^^^\n@@ -174,7 +174,7 @@ LL | struct Ref(&'static i32);\n    |            ^^^^^^^^^^^^\n \n error: the type `fn()` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:47:26\n+  --> $DIR/uninitialized-zeroed.rs:53:26\n    |\n LL |         let _val: fn() = mem::zeroed();\n    |                          ^^^^^^^^^^^^^\n@@ -185,7 +185,7 @@ LL |         let _val: fn() = mem::zeroed();\n    = note: Function pointers must be non-null\n \n error: the type `fn()` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:48:26\n+  --> $DIR/uninitialized-zeroed.rs:54:26\n    |\n LL |         let _val: fn() = mem::uninitialized();\n    |                          ^^^^^^^^^^^^^^^^^^^^\n@@ -196,7 +196,7 @@ LL |         let _val: fn() = mem::uninitialized();\n    = note: Function pointers must be non-null\n \n error: the type `Wrap<fn()>` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:50:32\n+  --> $DIR/uninitialized-zeroed.rs:56:32\n    |\n LL |         let _val: Wrap<fn()> = mem::zeroed();\n    |                                ^^^^^^^^^^^^^\n@@ -211,7 +211,7 @@ LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `Wrap<fn()>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:51:32\n+  --> $DIR/uninitialized-zeroed.rs:57:32\n    |\n LL |         let _val: Wrap<fn()> = mem::uninitialized();\n    |                                ^^^^^^^^^^^^^^^^^^^^\n@@ -226,7 +226,7 @@ LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n error: the type `WrapEnum<fn()>` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:53:36\n+  --> $DIR/uninitialized-zeroed.rs:59:36\n    |\n LL |         let _val: WrapEnum<fn()> = mem::zeroed();\n    |                                    ^^^^^^^^^^^^^\n@@ -241,7 +241,7 @@ LL | enum WrapEnum<T> { Wrapped(T) }\n    |                            ^\n \n error: the type `WrapEnum<fn()>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:54:36\n+  --> $DIR/uninitialized-zeroed.rs:60:36\n    |\n LL |         let _val: WrapEnum<fn()> = mem::uninitialized();\n    |                                    ^^^^^^^^^^^^^^^^^^^^\n@@ -256,7 +256,7 @@ LL | enum WrapEnum<T> { Wrapped(T) }\n    |                            ^\n \n error: the type `Wrap<(RefPair, i32)>` does not permit zero-initialization\n-  --> $DIR/uninitialized-zeroed.rs:56:42\n+  --> $DIR/uninitialized-zeroed.rs:62:42\n    |\n LL |         let _val: Wrap<(RefPair, i32)> = mem::zeroed();\n    |                                          ^^^^^^^^^^^^^\n@@ -271,7 +271,7 @@ LL | struct RefPair((&'static i32, i32));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n error: the type `Wrap<(RefPair, i32)>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:57:42\n+  --> $DIR/uninitialized-zeroed.rs:63:42\n    |\n LL |         let _val: Wrap<(RefPair, i32)> = mem::uninitialized();\n    |                                          ^^^^^^^^^^^^^^^^^^^^\n@@ -285,8 +285,38 @@ note: References must be non-null (in this struct field)\n LL | struct RefPair((&'static i32, i32));\n    |                ^^^^^^^^^^^^^^^^^^^\n \n+error: the type `std::vec::Vec<i32>` does not permit zero-initialization\n+  --> $DIR/uninitialized-zeroed.rs:65:30\n+   |\n+LL |         let _val: Vec<i32> = mem::zeroed();\n+   |                              ^^^^^^^^^^^^^\n+   |                              |\n+   |                              this code causes undefined behavior when executed\n+   |                              help: use `MaybeUninit<T>` instead\n+   |\n+note: std::ptr::Unique<i32> must be non-null (in this struct field)\n+  --> $SRC_DIR/liballoc/raw_vec.rs:LL:COL\n+   |\n+LL |     ptr: Unique<T>,\n+   |     ^^^^^^^^^^^^^^\n+\n+error: the type `std::vec::Vec<i32>` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:66:30\n+   |\n+LL |         let _val: Vec<i32> = mem::uninitialized();\n+   |                              ^^^^^^^^^^^^^^^^^^^^\n+   |                              |\n+   |                              this code causes undefined behavior when executed\n+   |                              help: use `MaybeUninit<T>` instead\n+   |\n+note: std::ptr::Unique<i32> must be non-null (in this struct field)\n+  --> $SRC_DIR/liballoc/raw_vec.rs:LL:COL\n+   |\n+LL |     ptr: Unique<T>,\n+   |     ^^^^^^^^^^^^^^\n+\n error: the type `bool` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:59:26\n+  --> $DIR/uninitialized-zeroed.rs:70:26\n    |\n LL |         let _val: bool = mem::uninitialized();\n    |                          ^^^^^^^^^^^^^^^^^^^^\n@@ -297,7 +327,7 @@ LL |         let _val: bool = mem::uninitialized();\n    = note: Booleans must be `true` or `false`\n \n error: the type `Wrap<char>` does not permit being left uninitialized\n-  --> $DIR/uninitialized-zeroed.rs:60:32\n+  --> $DIR/uninitialized-zeroed.rs:73:32\n    |\n LL |         let _val: Wrap<char> = mem::uninitialized();\n    |                                ^^^^^^^^^^^^^^^^^^^^\n@@ -311,5 +341,16 @@ note: Characters must be a valid unicode codepoint (in this struct field)\n LL | struct Wrap<T> { wrapped: T }\n    |                  ^^^^^^^^^^\n \n-error: aborting due to 24 previous errors\n+error: the type `NonBig` does not permit being left uninitialized\n+  --> $DIR/uninitialized-zeroed.rs:76:28\n+   |\n+LL |         let _val: NonBig = mem::uninitialized();\n+   |                            ^^^^^^^^^^^^^^^^^^^^\n+   |                            |\n+   |                            this code causes undefined behavior when executed\n+   |                            help: use `MaybeUninit<T>` instead\n+   |\n+   = note: NonBig must be initialized inside its custom valid range\n+\n+error: aborting due to 27 previous errors\n "}]}