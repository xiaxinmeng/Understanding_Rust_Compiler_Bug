{"sha": "253408b4090bc15b88bb5faecaf1e9765be80587", "node_id": "C_kwDOAAsO6NoAKDI1MzQwOGI0MDkwYmMxNWI4OGJiNWZhZWNhZjFlOTc2NWJlODA1ODc", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-10T14:19:19Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-05-13T10:09:11Z"}, "message": "Check that closures satisfy their where bounds", "tree": {"sha": "5244b56a59a36d6c692d1eff1972dbd09e625dad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5244b56a59a36d6c692d1eff1972dbd09e625dad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/253408b4090bc15b88bb5faecaf1e9765be80587", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/253408b4090bc15b88bb5faecaf1e9765be80587", "html_url": "https://github.com/rust-lang/rust/commit/253408b4090bc15b88bb5faecaf1e9765be80587", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/253408b4090bc15b88bb5faecaf1e9765be80587/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f001f9301c889101d8a71358b64b96e9707c832b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f001f9301c889101d8a71358b64b96e9707c832b", "html_url": "https://github.com/rust-lang/rust/commit/f001f9301c889101d8a71358b64b96e9707c832b"}], "stats": {"total": 365, "additions": 343, "deletions": 22}, "files": [{"sha": "ca40c3452e25b710a2e46353a4a778b2a6ec8d11", "filename": "compiler/rustc_trait_selection/src/traits/wf.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/253408b4090bc15b88bb5faecaf1e9765be80587/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253408b4090bc15b88bb5faecaf1e9765be80587/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fwf.rs?ref=253408b4090bc15b88bb5faecaf1e9765be80587", "patch": "@@ -575,7 +575,7 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     // generators don't take arguments.\n                 }\n \n-                ty::Closure(_, substs) => {\n+                ty::Closure(did, substs) => {\n                     // Only check the upvar types for WF, not the rest\n                     // of the types within. This is needed because we\n                     // capture the signature and it may not be WF\n@@ -596,18 +596,26 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                     // probably always be WF, because it should be\n                     // shorthand for something like `where(T: 'a) {\n                     // fn(&'a T) }`, as discussed in #25860.\n-                    //\n-                    // Note that we are also skipping the generic\n-                    // types. This is consistent with the `outlives`\n-                    // code, but anyway doesn't matter: within the fn\n+                    walker.skip_current_subtree(); // subtree handled below\n+                    // FIXME(eddyb) add the type to `walker` instead of recursing.\n+                    self.compute(substs.as_closure().tupled_upvars_ty().into());\n+                    // Note that we cannot skip the generic types\n+                    // types. Normally, within the fn\n                     // body where they are created, the generics will\n                     // always be WF, and outside of that fn body we\n                     // are not directly inspecting closure types\n                     // anyway, except via auto trait matching (which\n                     // only inspects the upvar types).\n-                    walker.skip_current_subtree(); // subtree handled below\n-                    // FIXME(eddyb) add the type to `walker` instead of recursing.\n-                    self.compute(substs.as_closure().tupled_upvars_ty().into());\n+                    // But when a closure is part of a type-alias-impl-trait\n+                    // then the function that created the defining site may\n+                    // have had more bounds available than the type alias\n+                    // specifies. This may cause us to have a closure in the\n+                    // hidden type that is not actually well formed and\n+                    // can cause compiler crashes when the user abuses unsafe\n+                    // code to procure such a closure.\n+                    // See src/test/ui/type-alias-impl-trait/wf_check_closures.rs\n+                    let obligations = self.nominal_obligations(did, substs);\n+                    self.out.extend(obligations);\n                 }\n \n                 ty::FnPtr(_) => {"}, {"sha": "1ea310d063b82a6db2fe30bfd88d429e21d9efbd", "filename": "src/test/ui/const-generics/generic_const_exprs/closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.rs?ref=253408b4090bc15b88bb5faecaf1e9765be80587", "patch": "@@ -1,6 +1,6 @@\n #![feature(generic_const_exprs)]\n #![allow(incomplete_features)]\n fn test<const N: usize>() -> [u8; N + (|| 42)()] {}\n-//~^ ERROR overly complex generic constant\n+//~^ ERROR cycle detected when building an abstract representation\n \n fn main() {}"}, {"sha": "a15dd2016e9e4cc2138de513fd443af4ba9883a7", "filename": "src/test/ui/const-generics/generic_const_exprs/closures.stderr", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Fclosures.stderr?ref=253408b4090bc15b88bb5faecaf1e9765be80587", "patch": "@@ -1,13 +1,26 @@\n-error: overly complex generic constant\n+error[E0391]: cycle detected when building an abstract representation for test::{constant#0}\n   --> $DIR/closures.rs:3:35\n    |\n LL | fn test<const N: usize>() -> [u8; N + (|| 42)()] {}\n-   |                                   ^^^^-------^^\n-   |                                       |\n-   |                                       borrowing is not supported in generic constants\n+   |                                   ^^^^^^^^^^^^^\n    |\n-   = help: consider moving this anonymous constant into a `const` function\n-   = note: this operation may be supported in the future\n+note: ...which requires building THIR for `test::{constant#0}`...\n+  --> $DIR/closures.rs:3:35\n+   |\n+LL | fn test<const N: usize>() -> [u8; N + (|| 42)()] {}\n+   |                                   ^^^^^^^^^^^^^\n+note: ...which requires type-checking `test::{constant#0}`...\n+  --> $DIR/closures.rs:3:35\n+   |\n+LL | fn test<const N: usize>() -> [u8; N + (|| 42)()] {}\n+   |                                   ^^^^^^^^^^^^^\n+   = note: ...which again requires building an abstract representation for test::{constant#0}, completing the cycle\n+note: cycle used when checking that `test` is well-formed\n+  --> $DIR/closures.rs:3:1\n+   |\n+LL | fn test<const N: usize>() -> [u8; N + (|| 42)()] {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0391`."}, {"sha": "15e83ab5a347dfa72ed6971a59661b101fa7e97c", "filename": "src/test/ui/higher-rank-trait-bounds/issue-59311.nll.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.nll.stderr?ref=253408b4090bc15b88bb5faecaf1e9765be80587", "patch": "@@ -0,0 +1,18 @@\n+error: higher-ranked lifetime error\n+  --> $DIR/issue-59311.rs:17:5\n+   |\n+LL |     v.t(|| {});\n+   |     ^^^^^^^^^^\n+   |\n+   = note: could not prove [closure@$DIR/issue-59311.rs:17:9: 17:14] well-formed\n+\n+error: higher-ranked lifetime error\n+  --> $DIR/issue-59311.rs:17:9\n+   |\n+LL |     v.t(|| {});\n+   |         ^^^^^\n+   |\n+   = note: could not prove for<'a> &'a V: 'static\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "69708577285607ca9573267e414387446d124757", "filename": "src/test/ui/higher-rank-trait-bounds/issue-59311.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.rs?ref=253408b4090bc15b88bb5faecaf1e9765be80587", "patch": "@@ -14,7 +14,7 @@ pub fn crash<V>(v: &V)\n where\n     for<'a> &'a V: T + 'static,\n {\n-    v.t(|| {}); //~ ERROR: higher-ranked lifetime error\n+    v.t(|| {}); //~ ERROR: `&'a V` does not fulfill the required lifetime\n }\n \n fn main() {}"}, {"sha": "3dd05bba5c0a1b3b00a2fd1bebb84f1e0b163e4f", "filename": "src/test/ui/higher-rank-trait-bounds/issue-59311.stderr", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fissue-59311.stderr?ref=253408b4090bc15b88bb5faecaf1e9765be80587", "patch": "@@ -1,10 +1,15 @@\n-error: higher-ranked lifetime error\n-  --> $DIR/issue-59311.rs:17:9\n+error[E0477]: the type `&'a V` does not fulfill the required lifetime\n+  --> $DIR/issue-59311.rs:17:5\n    |\n LL |     v.t(|| {});\n-   |         ^^^^^\n+   |     ^^^^^^^^^^\n    |\n-   = note: could not prove for<'a> &'a V: 'static\n+note: type must satisfy the static lifetime as required by this binding\n+  --> $DIR/issue-59311.rs:15:24\n+   |\n+LL |     for<'a> &'a V: T + 'static,\n+   |                        ^^^^^^^\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0477`."}, {"sha": "45792ba97a7a09482a65f4cb35e4d05e5c42d3a7", "filename": "src/test/ui/type-alias-impl-trait/issue-53092.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092.rs?ref=253408b4090bc15b88bb5faecaf1e9765be80587", "patch": "@@ -0,0 +1,14 @@\n+#![feature(type_alias_impl_trait)]\n+#![allow(dead_code)]\n+\n+type Bug<T, U> = impl Fn(T) -> U + Copy;\n+\n+const CONST_BUG: Bug<u8, ()> = unsafe { std::mem::transmute(|_: u8| ()) };\n+\n+fn make_bug<T, U: From<T>>() -> Bug<T, U> {\n+    |x| x.into() //~ ERROR the trait bound `U: From<T>` is not satisfied\n+}\n+\n+fn main() {\n+    CONST_BUG(0);\n+}"}, {"sha": "2d423a0c0dff50c7d8bd6d0cdd7373e4960e5e9a", "filename": "src/test/ui/type-alias-impl-trait/issue-53092.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-53092.stderr?ref=253408b4090bc15b88bb5faecaf1e9765be80587", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `U: From<T>` is not satisfied\n+  --> $DIR/issue-53092.rs:9:5\n+   |\n+LL |     |x| x.into()\n+   |     ^^^^^^^^^^^^ the trait `From<T>` is not implemented for `U`\n+   |\n+note: required by a bound in `make_bug`\n+  --> $DIR/issue-53092.rs:8:19\n+   |\n+LL | fn make_bug<T, U: From<T>>() -> Bug<T, U> {\n+   |                   ^^^^^^^ required by this bound in `make_bug`\n+help: consider restricting type parameter `U`\n+   |\n+LL | type Bug<T, U: std::convert::From<T>> = impl Fn(T) -> U + Copy;\n+   |              +++++++++++++++++++++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "38accc8241cb50bfd6c2f6fc036232914a577bbf", "filename": "src/test/ui/type-alias-impl-trait/issue-60564-working.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564-working.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564-working.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564-working.rs?ref=253408b4090bc15b88bb5faecaf1e9765be80587", "patch": "@@ -0,0 +1,24 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// check-pass\n+\n+trait IterBits {\n+    type BitsIter: Iterator<Item = u8>;\n+    fn iter_bits(self, n: u8) -> Self::BitsIter;\n+}\n+\n+impl<T: Copy, E> IterBits for T\n+where\n+    T: std::ops::Shr<Output = T>\n+        + std::ops::BitAnd<T, Output = T>\n+        + std::convert::From<u8>\n+        + std::convert::TryInto<u8, Error = E>,\n+    E: std::fmt::Debug,\n+{\n+    type BitsIter = impl std::iter::Iterator<Item = u8>;\n+    fn iter_bits(self, n: u8) -> Self::BitsIter {\n+        (0u8..n).rev().map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "48d8dff2b9392658ee7618661f1cead37a3054aa", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.rs?ref=253408b4090bc15b88bb5faecaf1e9765be80587", "patch": "@@ -20,6 +20,13 @@ where\n         (0u8..n).rev().map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n         //~^ ERROR non-defining opaque type use in defining scope\n         //~| ERROR type mismatch resolving\n+        //~| ERROR type mismatch resolving `<T as TryInto<u8>>::Error == E`\n+        //~| ERROR no implementation for `T >> T`\n+        //~| ERROR no implementation for `T & T`\n+        //~| ERROR the trait bound `T: From<u8>`\n+        //~| ERROR the trait bound `T: Copy` is not satisfied\n+        //~| ERROR `E` doesn't implement `Debug`\n+        //~| ERROR the trait bound `u8: From<T>` is not satisfied\n     }\n }\n "}, {"sha": "4ef53973a7c7411dcbc5a1831b2d53f39ed5cef6", "filename": "src/test/ui/type-alias-impl-trait/issue-60564.stderr", "status": "modified", "additions": 119, "deletions": 2, "changes": 121, "blob_url": "https://github.com/rust-lang/rust/blob/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-60564.stderr?ref=253408b4090bc15b88bb5faecaf1e9765be80587", "patch": "@@ -11,6 +11,122 @@ LL |         (0u8..n).rev().map(move |shift| ((self >> T::from(shift)) & T::from\n            found type parameter `I`\n    = note: required because of the requirements on the impl of `Iterator` for `Map<Rev<std::ops::Range<u8>>, [closure@$DIR/issue-60564.rs:20:28: 20:100]>`\n \n+error[E0271]: type mismatch resolving `<T as TryInto<u8>>::Error == E`\n+  --> $DIR/issue-60564.rs:20:9\n+   |\n+LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n+   |                      - this type parameter\n+...\n+LL |         (0u8..n).rev().map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected type parameter `E`, found enum `Infallible`\n+   |\n+   = note: expected type parameter `E`\n+                        found enum `Infallible`\n+note: required by a bound in `<T as IterBits>`\n+  --> $DIR/issue-60564.rs:15:37\n+   |\n+LL |         + std::convert::TryInto<u8, Error = E>,\n+   |                                     ^^^^^^^^^ required by this bound in `<T as IterBits>`\n+\n+error[E0277]: no implementation for `T >> T`\n+  --> $DIR/issue-60564.rs:20:9\n+   |\n+LL |         (0u8..n).rev().map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `T >> T`\n+   |\n+note: required by a bound in `<T as IterBits>`\n+  --> $DIR/issue-60564.rs:12:8\n+   |\n+LL |     T: std::ops::Shr<Output = T>\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `<T as IterBits>`\n+help: consider restricting type parameter `T`\n+   |\n+LL | type IterBitsIter<T: std::ops::Shr, E, I> = impl std::iter::Iterator<Item = I>;\n+   |                    +++++++++++++++\n+\n+error[E0277]: no implementation for `T & T`\n+  --> $DIR/issue-60564.rs:20:9\n+   |\n+LL |         (0u8..n).rev().map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `T & T`\n+   |\n+note: required by a bound in `<T as IterBits>`\n+  --> $DIR/issue-60564.rs:13:11\n+   |\n+LL |         + std::ops::BitAnd<T, Output = T>\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `<T as IterBits>`\n+help: consider restricting type parameter `T`\n+   |\n+LL | type IterBitsIter<T: std::ops::BitAnd, E, I> = impl std::iter::Iterator<Item = I>;\n+   |                    ++++++++++++++++++\n+\n+error[E0277]: the trait bound `T: From<u8>` is not satisfied\n+  --> $DIR/issue-60564.rs:20:9\n+   |\n+LL |         (0u8..n).rev().map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<u8>` is not implemented for `T`\n+   |\n+note: required by a bound in `<T as IterBits>`\n+  --> $DIR/issue-60564.rs:14:11\n+   |\n+LL |         + std::convert::From<u8>\n+   |           ^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `<T as IterBits>`\n+help: consider restricting type parameter `T`\n+   |\n+LL | type IterBitsIter<T: std::convert::From<u8>, E, I> = impl std::iter::Iterator<Item = I>;\n+   |                    ++++++++++++++++++++++++\n+\n+error[E0277]: the trait bound `T: Copy` is not satisfied\n+  --> $DIR/issue-60564.rs:20:9\n+   |\n+LL |         (0u8..n).rev().map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |\n+note: required by a bound in `<T as IterBits>`\n+  --> $DIR/issue-60564.rs:10:9\n+   |\n+LL | impl<T: Copy, E> IterBits for T\n+   |         ^^^^ required by this bound in `<T as IterBits>`\n+help: consider restricting type parameter `T`\n+   |\n+LL | type IterBitsIter<T: std::marker::Copy, E, I> = impl std::iter::Iterator<Item = I>;\n+   |                    +++++++++++++++++++\n+\n+error[E0277]: `E` doesn't implement `Debug`\n+  --> $DIR/issue-60564.rs:20:9\n+   |\n+LL |         (0u8..n).rev().map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `E` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |\n+note: required by a bound in `<T as IterBits>`\n+  --> $DIR/issue-60564.rs:16:8\n+   |\n+LL |     E: std::fmt::Debug,\n+   |        ^^^^^^^^^^^^^^^ required by this bound in `<T as IterBits>`\n+help: consider restricting type parameter `E`\n+   |\n+LL | type IterBitsIter<T, E: std::fmt::Debug, I> = impl std::iter::Iterator<Item = I>;\n+   |                       +++++++++++++++++\n+\n+error[E0277]: the trait bound `u8: From<T>` is not satisfied\n+  --> $DIR/issue-60564.rs:20:9\n+   |\n+LL |         (0u8..n).rev().map(move |shift| ((self >> T::from(shift)) & T::from(1)).try_into().unwrap())\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `From<T>` is not implemented for `u8`\n+   |\n+   = note: required because of the requirements on the impl of `Into<u8>` for `T`\n+   = note: required because of the requirements on the impl of `TryFrom<T>` for `u8`\n+   = note: required because of the requirements on the impl of `TryInto<u8>` for `T`\n+note: required by a bound in `<T as IterBits>`\n+  --> $DIR/issue-60564.rs:15:11\n+   |\n+LL |         + std::convert::TryInto<u8, Error = E>,\n+   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `<T as IterBits>`\n+help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n+   |\n+LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I> where u8: From<T>;\n+   |                                                                 +++++++++++++++++\n+\n error: non-defining opaque type use in defining scope\n   --> $DIR/issue-60564.rs:20:9\n    |\n@@ -23,6 +139,7 @@ note: used non-generic type `u8` for generic parameter\n LL | type IterBitsIter<T, E, I> = impl std::iter::Iterator<Item = I>;\n    |                         ^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 9 previous errors\n \n-For more information about this error, try `rustc --explain E0271`.\n+Some errors have detailed explanations: E0271, E0277.\n+For more information about an error, try `rustc --explain E0271`."}, {"sha": "449e9fbd0d847de4308a03af9e764bcb4e224dd0", "filename": "src/test/ui/type-alias-impl-trait/wf-check-fn-def.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fwf-check-fn-def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fwf-check-fn-def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fwf-check-fn-def.rs?ref=253408b4090bc15b88bb5faecaf1e9765be80587", "patch": "@@ -0,0 +1,18 @@\n+#![feature(type_alias_impl_trait)]\n+\n+trait Bar {\n+    fn bar(&self);\n+}\n+\n+type FooFn<B> = impl FnOnce(B);\n+\n+fn foo<B: Bar>() -> FooFn<B> {\n+    fn mop<B: Bar>(bar: B) { bar.bar() }\n+    mop // NOTE: no function pointer, but function zst item\n+    //~^ ERROR the trait bound `B: Bar` is not satisfied\n+}\n+\n+fn main() {\n+    let boom: FooFn<u32> = unsafe { core::mem::zeroed() };\n+    boom(42);\n+}"}, {"sha": "e0005489d1e7c0bdb59b5ad7e31fa252084fc02d", "filename": "src/test/ui/type-alias-impl-trait/wf-check-fn-def.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fwf-check-fn-def.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fwf-check-fn-def.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fwf-check-fn-def.stderr?ref=253408b4090bc15b88bb5faecaf1e9765be80587", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `B: Bar` is not satisfied\n+  --> $DIR/wf-check-fn-def.rs:11:5\n+   |\n+LL |     mop // NOTE: no function pointer, but function zst item\n+   |     ^^^ the trait `Bar` is not implemented for `B`\n+   |\n+note: required by a bound in `mop`\n+  --> $DIR/wf-check-fn-def.rs:10:15\n+   |\n+LL |     fn mop<B: Bar>(bar: B) { bar.bar() }\n+   |               ^^^ required by this bound in `mop`\n+help: consider restricting type parameter `B`\n+   |\n+LL | type FooFn<B: Bar> = impl FnOnce(B);\n+   |             +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "3b8470e4ae6287db591179cf1ad10c9046f13a62", "filename": "src/test/ui/type-alias-impl-trait/wf-check-fn-ptrs.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fwf-check-fn-ptrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fwf-check-fn-ptrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fwf-check-fn-ptrs.rs?ref=253408b4090bc15b88bb5faecaf1e9765be80587", "patch": "@@ -0,0 +1,23 @@\n+#![feature(type_alias_impl_trait)]\n+\n+// build-pass\n+\n+trait Bar {\n+    fn bar(&self);\n+}\n+\n+type FooFn<B> = impl FnOnce(B);\n+\n+fn foo<B: Bar>() -> FooFn<B> {\n+    fn mop<B: Bar>(bar: B) { bar.bar() }\n+    mop as fn(B)\n+    // function pointers don't have any obligations on them,\n+    // thus the above compiles. It's obviously unsound to just\n+    // procure a `FooFn` from the ether without making sure that\n+    // the pointer is actually legal for all `B`\n+}\n+\n+fn main() {\n+    let boom: FooFn<u32> = unsafe { core::mem::zeroed() };\n+    boom(42);\n+}"}, {"sha": "2c70696ffcf48e59938f44cdd41c3ea56d7f32b1", "filename": "src/test/ui/type-alias-impl-trait/wf_check_closures.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fwf_check_closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fwf_check_closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fwf_check_closures.rs?ref=253408b4090bc15b88bb5faecaf1e9765be80587", "patch": "@@ -0,0 +1,17 @@\n+#![feature(type_alias_impl_trait)]\n+\n+trait Bar {\n+    fn bar(&self);\n+}\n+\n+type FooFn<B> = impl FnOnce();\n+\n+fn foo<B: Bar>(bar: B) -> FooFn<B> {\n+    move || { bar.bar() }\n+    //~^ ERROR the trait bound `B: Bar` is not satisfied\n+}\n+\n+fn main() {\n+    let boom: FooFn<u32> = unsafe { core::mem::zeroed() };\n+    boom();\n+}"}, {"sha": "58ae8617b9bd97d0a284f35a87d3f2a27491bcfc", "filename": "src/test/ui/type-alias-impl-trait/wf_check_closures.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fwf_check_closures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/253408b4090bc15b88bb5faecaf1e9765be80587/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fwf_check_closures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fwf_check_closures.stderr?ref=253408b4090bc15b88bb5faecaf1e9765be80587", "patch": "@@ -0,0 +1,19 @@\n+error[E0277]: the trait bound `B: Bar` is not satisfied\n+  --> $DIR/wf_check_closures.rs:10:5\n+   |\n+LL |     move || { bar.bar() }\n+   |     ^^^^^^^^^^^^^^^^^^^^^ the trait `Bar` is not implemented for `B`\n+   |\n+note: required by a bound in `foo`\n+  --> $DIR/wf_check_closures.rs:9:11\n+   |\n+LL | fn foo<B: Bar>(bar: B) -> FooFn<B> {\n+   |           ^^^ required by this bound in `foo`\n+help: consider restricting type parameter `B`\n+   |\n+LL | type FooFn<B: Bar> = impl FnOnce();\n+   |             +++++\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}