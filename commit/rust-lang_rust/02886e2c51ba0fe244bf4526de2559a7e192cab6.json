{"sha": "02886e2c51ba0fe244bf4526de2559a7e192cab6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyODg2ZTJjNTFiYTBmZTI0NGJmNDUyNmRlMjU1OWE3ZTE5MmNhYjY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-07-04T16:11:52Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2019-07-04T16:11:52Z"}, "message": "Add missing links in Option documentation", "tree": {"sha": "36978a2d87002079ead6549f8248b0e50de82dd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36978a2d87002079ead6549f8248b0e50de82dd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02886e2c51ba0fe244bf4526de2559a7e192cab6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02886e2c51ba0fe244bf4526de2559a7e192cab6", "html_url": "https://github.com/rust-lang/rust/commit/02886e2c51ba0fe244bf4526de2559a7e192cab6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02886e2c51ba0fe244bf4526de2559a7e192cab6/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "765eebf064ae17347f3532791760fc5c2150b5ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/765eebf064ae17347f3532791760fc5c2150b5ea", "html_url": "https://github.com/rust-lang/rust/commit/765eebf064ae17347f3532791760fc5c2150b5ea"}], "stats": {"total": 32, "additions": 22, "deletions": 10}, "files": [{"sha": "8eadc4abaae822620f19dc91fb99e1622c30138b", "filename": "src/libcore/option.rs", "status": "modified", "additions": 22, "deletions": 10, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/02886e2c51ba0fe244bf4526de2559a7e192cab6/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02886e2c51ba0fe244bf4526de2559a7e192cab6/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=02886e2c51ba0fe244bf4526de2559a7e192cab6", "patch": "@@ -263,7 +263,7 @@ impl<T> Option<T> {\n     }\n \n \n-    /// Converts from `Pin<&Option<T>>` to `Option<Pin<&T>>`\n+    /// Converts from [`Pin`]`<&Option<T>>` to `Option<`[`Pin`]`<&T>>`.\n     #[inline]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_ref<'a>(self: Pin<&'a Option<T>>) -> Option<Pin<&'a T>> {\n@@ -272,7 +272,7 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Converts from `Pin<&mut Option<T>>` to `Option<Pin<&mut T>>`\n+    /// Converts from [`Pin`]`<&mut Option<T>>` to `Option<`[`Pin`]`<&mut T>>`.\n     #[inline]\n     #[stable(feature = \"pin\", since = \"1.33.0\")]\n     pub fn as_pin_mut<'a>(self: Pin<&'a mut Option<T>>) -> Option<Pin<&'a mut T>> {\n@@ -626,14 +626,14 @@ impl<T> Option<T> {\n         }\n     }\n \n-    /// Returns `None` if the option is `None`, otherwise calls `predicate`\n+    /// Returns [`None`] if the option is [`None`], otherwise calls `predicate`\n     /// with the wrapped value and returns:\n     ///\n-    /// - `Some(t)` if `predicate` returns `true` (where `t` is the wrapped\n+    /// - [`Some(t)`] if `predicate` returns `true` (where `t` is the wrapped\n     ///   value), and\n-    /// - `None` if `predicate` returns `false`.\n+    /// - [`None`] if `predicate` returns `false`.\n     ///\n-    /// This function works similar to `Iterator::filter()`. You can imagine\n+    /// This function works similar to [`Iterator::filter()`]. You can imagine\n     /// the `Option<T>` being an iterator over one or zero elements. `filter()`\n     /// lets you decide which elements to keep.\n     ///\n@@ -648,6 +648,10 @@ impl<T> Option<T> {\n     /// assert_eq!(Some(3).filter(is_even), None);\n     /// assert_eq!(Some(4).filter(is_even), Some(4));\n     /// ```\n+    ///\n+    /// [`None`]: #variant.None\n+    /// [`Some(t)`]: #variant.Some\n+    /// [`Iterator::filter()`]: ../../std/iter/trait.Iterator.html#method.filter\n     #[inline]\n     #[stable(feature = \"option_filter\", since = \"1.27.0\")]\n     pub fn filter<P: FnOnce(&T) -> bool>(self, predicate: P) -> Self {\n@@ -994,17 +998,25 @@ impl<T: Deref> Option<T> {\n     /// Converts from `&Option<T>` to `Option<&T::Target>`.\n     ///\n     /// Leaves the original Option in-place, creating a new one with a reference\n-    /// to the original one, additionally coercing the contents via `Deref`.\n+    /// to the original one, additionally coercing the contents via [`Deref`].\n+    ///\n+    /// [`Deref`]: ../../std/ops/trait.Deref.html\n     pub fn deref(&self) -> Option<&T::Target> {\n         self.as_ref().map(|t| t.deref())\n     }\n }\n \n impl<T, E> Option<Result<T, E>> {\n-    /// Transposes an `Option` of a `Result` into a `Result` of an `Option`.\n+    /// Transposes an `Option` of a [`Result`] into a [`Result`] of an `Option`.\n     ///\n-    /// `None` will be mapped to `Ok(None)`.\n-    /// `Some(Ok(_))` and `Some(Err(_))` will be mapped to `Ok(Some(_))` and `Err(_)`.\n+    /// [`None`] will be mapped to [`Ok`]`(`[`None`]`)`.\n+    /// [`Some`]`(`[`Ok`]`(_))` and [`Some`]`(`[`Err`]`(_))` will be mapped to\n+    /// [`Ok`]`(`[`Some`]`(_))` and [`Err`]`(_)`.\n+    ///\n+    /// [`None`]: #variant.None\n+    /// [`Ok`]: ../../std/result/enum.Result.html#variant.Ok\n+    /// [`Some`]: #variant.Some\n+    /// [`Err`]: ../../std/result/enum.Result.html#variant.Err\n     ///\n     /// # Examples\n     ///"}]}