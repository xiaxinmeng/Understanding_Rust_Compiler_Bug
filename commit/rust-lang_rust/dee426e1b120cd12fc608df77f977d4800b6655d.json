{"sha": "dee426e1b120cd12fc608df77f977d4800b6655d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZTQyNmUxYjEyMGNkMTJmYzYwOGRmNzdmOTc3ZDQ4MDBiNjY1NWQ=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-12T18:25:50Z"}, "committer": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-25T18:45:21Z"}, "message": "simplify and reduce number of values explored", "tree": {"sha": "c236e76683d22ec0ffc514db6755419edd37b9a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c236e76683d22ec0ffc514db6755419edd37b9a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dee426e1b120cd12fc608df77f977d4800b6655d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dee426e1b120cd12fc608df77f977d4800b6655d", "html_url": "https://github.com/rust-lang/rust/commit/dee426e1b120cd12fc608df77f977d4800b6655d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dee426e1b120cd12fc608df77f977d4800b6655d/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d98744c2a929c35852d20b5724ef5b6be1e3312", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d98744c2a929c35852d20b5724ef5b6be1e3312", "html_url": "https://github.com/rust-lang/rust/commit/3d98744c2a929c35852d20b5724ef5b6be1e3312"}], "stats": {"total": 52, "additions": 23, "deletions": 29}, "files": [{"sha": "29301bff3548ef3e7160a7aed337449dabd26ce1", "filename": "crates/ra_text_edit/src/test_utils.rs", "status": "modified", "additions": 23, "deletions": 29, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/dee426e1b120cd12fc608df77f977d4800b6655d/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dee426e1b120cd12fc608df77f977d4800b6655d/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2Fsrc%2Ftest_utils.rs?ref=dee426e1b120cd12fc608df77f977d4800b6655d", "patch": "@@ -24,41 +24,35 @@ pub fn arb_offset(text: &str) -> BoxedStrategy<TextUnit> {\n }\n \n pub fn arb_edits(text: &str) -> BoxedStrategy<Vec<AtomTextEdit>> {\n-    let offsets = text_offsets(text);\n-    let offsets_len = offsets.len();\n-\n-    if offsets_len == 0 {\n-        return proptest::bool::ANY\n-            .prop_flat_map(|b| {\n-                // only valid edits\n-                if b {\n-                    arb_text()\n-                        .prop_map(|text| vec![AtomTextEdit::insert(TextUnit::from(0), text)])\n-                        .boxed()\n-                } else {\n-                    Just(vec![]).boxed()\n-                }\n-            })\n+    if text.is_empty() {\n+        // only valid edits\n+        return Just(vec![])\n+            .boxed()\n+            .prop_union(\n+                arb_text()\n+                    .prop_map(|text| vec![AtomTextEdit::insert(TextUnit::from(0), text)])\n+                    .boxed(),\n+            )\n             .boxed();\n     }\n \n-    proptest::sample::subsequence(offsets, 0..offsets_len)\n-        .prop_flat_map(|xs| {\n-            let strategies: Vec<_> = xs\n+    let offsets = text_offsets(text);\n+    let max_cuts = offsets.len().min(7);\n+\n+    proptest::sample::subsequence(offsets, 0..max_cuts)\n+        .prop_flat_map(|cuts| {\n+            let strategies: Vec<_> = cuts\n                 .chunks(2)\n                 .map(|chunk| match chunk {\n                     &[from, to] => {\n                         let range = TextRange::from_to(from, to);\n-                        (proptest::bool::ANY)\n-                            .prop_flat_map(move |b| {\n-                                if b {\n-                                    Just(AtomTextEdit::delete(range)).boxed()\n-                                } else {\n-                                    arb_text()\n-                                        .prop_map(move |text| AtomTextEdit::replace(range, text))\n-                                        .boxed()\n-                                }\n-                            })\n+                        Just(AtomTextEdit::delete(range))\n+                            .boxed()\n+                            .prop_union(\n+                                arb_text()\n+                                    .prop_map(move |text| AtomTextEdit::replace(range, text))\n+                                    .boxed(),\n+                            )\n                             .boxed()\n                     }\n                     &[x] => arb_text()\n@@ -92,7 +86,7 @@ fn intersect(r1: TextRange, r2: TextRange) -> Option<TextRange> {\n }\n \n proptest! {\n-#[test]\n+    #[test]\n     fn atom_text_edits_are_valid((text, edits) in arb_text_with_edits()) {\n         proptest_atom_text_edits_are_valid(text, edits)\n     }"}]}