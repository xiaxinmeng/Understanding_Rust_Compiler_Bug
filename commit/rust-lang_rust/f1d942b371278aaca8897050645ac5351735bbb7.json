{"sha": "f1d942b371278aaca8897050645ac5351735bbb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxZDk0MmIzNzEyNzhhYWNhODg5NzA1MDY0NWFjNTM1MTczNWJiYjc=", "commit": {"author": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-10-28T00:31:12Z"}, "committer": {"name": "Adam Perry", "email": "adam.n.perry@gmail.com", "date": "2019-12-06T04:56:57Z"}, "message": "Add field to FunctionCx for passing caller location.", "tree": {"sha": "55f06f087ccd6014a2ebe4a2376f5b94283b5a94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/55f06f087ccd6014a2ebe4a2376f5b94283b5a94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1d942b371278aaca8897050645ac5351735bbb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1d942b371278aaca8897050645ac5351735bbb7", "html_url": "https://github.com/rust-lang/rust/commit/f1d942b371278aaca8897050645ac5351735bbb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1d942b371278aaca8897050645ac5351735bbb7/comments", "author": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "anp", "id": 6812281, "node_id": "MDQ6VXNlcjY4MTIyODE=", "avatar_url": "https://avatars.githubusercontent.com/u/6812281?v=4", "gravatar_id": "", "url": "https://api.github.com/users/anp", "html_url": "https://github.com/anp", "followers_url": "https://api.github.com/users/anp/followers", "following_url": "https://api.github.com/users/anp/following{/other_user}", "gists_url": "https://api.github.com/users/anp/gists{/gist_id}", "starred_url": "https://api.github.com/users/anp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/anp/subscriptions", "organizations_url": "https://api.github.com/users/anp/orgs", "repos_url": "https://api.github.com/users/anp/repos", "events_url": "https://api.github.com/users/anp/events{/privacy}", "received_events_url": "https://api.github.com/users/anp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d47043b1c9ad716f8f773c4f03848be232558f6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d47043b1c9ad716f8f773c4f03848be232558f6c", "html_url": "https://github.com/rust-lang/rust/commit/d47043b1c9ad716f8f773c4f03848be232558f6c"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "4f47d84047d015ef9f7fd66b96b23bd2a03b0edf", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f1d942b371278aaca8897050645ac5351735bbb7/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d942b371278aaca8897050645ac5351735bbb7/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=f1d942b371278aaca8897050645ac5351735bbb7", "patch": "@@ -1004,14 +1004,18 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         bx: &mut Bx,\n         span: Span,\n     ) -> OperandRef<'tcx, Bx::Value> {\n-        let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n-        let caller = bx.tcx().sess.source_map().lookup_char_pos(topmost.lo());\n-        let const_loc = bx.tcx().const_caller_location((\n-            Symbol::intern(&caller.file.name.to_string()),\n-            caller.line as u32,\n-            caller.col_display as u32 + 1,\n-        ));\n-        OperandRef::from_const(bx, const_loc)\n+        if let Some(l) = self.caller_location {\n+            bx.load_operand(l)\n+        } else {\n+            let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n+            let caller = bx.tcx().sess.source_map().lookup_char_pos(topmost.lo());\n+            let const_loc = bx.tcx().const_caller_location((\n+                Symbol::intern(&caller.file.name.to_string()),\n+                caller.line as u32,\n+                caller.col_display as u32 + 1,\n+            ));\n+            OperandRef::from_const(bx, const_loc)\n+        }\n     }\n \n     fn get_personality_slot("}, {"sha": "a6333ef23f5e8a7cbf473c8167d26c0d07c33939", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1d942b371278aaca8897050645ac5351735bbb7/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1d942b371278aaca8897050645ac5351735bbb7/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=f1d942b371278aaca8897050645ac5351735bbb7", "patch": "@@ -77,6 +77,9 @@ pub struct FunctionCx<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> {\n     /// All `VarDebuginfo` from the MIR body, partitioned by `Local`.\n     /// This is `None` if no variable debuginfo/names are needed.\n     per_local_var_debug_info: Option<IndexVec<mir::Local, Vec<&'tcx mir::VarDebugInfo<'tcx>>>>,\n+\n+    /// Caller location propagated if this function has `#[track_caller]`.\n+    caller_location: Option<PlaceRef<'tcx, Bx::Value>>,\n }\n \n impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n@@ -172,6 +175,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         locals: IndexVec::new(),\n         debug_context,\n         per_local_var_debug_info: debuginfo::per_local_var_debug_info(cx.tcx(), mir_body),\n+        caller_location: None,\n     };\n \n     let memory_locals = analyze::non_ssa_locals(&fx);"}]}