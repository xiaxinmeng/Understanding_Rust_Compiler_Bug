{"sha": "65dd6218afe62fa36e701ceb27bd4e17ec764acc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY1ZGQ2MjE4YWZlNjJmYTM2ZTcwMWNlYjI3YmQ0ZTE3ZWM3NjRhY2M=", "commit": {"author": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-06-14T19:23:42Z"}, "committer": {"name": "Vadim Chugunov", "email": "vadimcn@gmail.com", "date": "2013-06-17T15:41:25Z"}, "message": "Fixed remaining issues to pass debug-test/* tests.\nMade debugger scripts source line insensitive.", "tree": {"sha": "30780909a53562dfbe623e4a5a00cd00ae23e505", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30780909a53562dfbe623e4a5a00cd00ae23e505"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/65dd6218afe62fa36e701ceb27bd4e17ec764acc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/65dd6218afe62fa36e701ceb27bd4e17ec764acc", "html_url": "https://github.com/rust-lang/rust/commit/65dd6218afe62fa36e701ceb27bd4e17ec764acc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/65dd6218afe62fa36e701ceb27bd4e17ec764acc/comments", "author": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vadimcn", "id": 3203809, "node_id": "MDQ6VXNlcjMyMDM4MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/3203809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vadimcn", "html_url": "https://github.com/vadimcn", "followers_url": "https://api.github.com/users/vadimcn/followers", "following_url": "https://api.github.com/users/vadimcn/following{/other_user}", "gists_url": "https://api.github.com/users/vadimcn/gists{/gist_id}", "starred_url": "https://api.github.com/users/vadimcn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vadimcn/subscriptions", "organizations_url": "https://api.github.com/users/vadimcn/orgs", "repos_url": "https://api.github.com/users/vadimcn/repos", "events_url": "https://api.github.com/users/vadimcn/events{/privacy}", "received_events_url": "https://api.github.com/users/vadimcn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62e86e044db030b2ffb7883075720360a8dccdd4", "url": "https://api.github.com/repos/rust-lang/rust/commits/62e86e044db030b2ffb7883075720360a8dccdd4", "html_url": "https://github.com/rust-lang/rust/commit/62e86e044db030b2ffb7883075720360a8dccdd4"}], "stats": {"total": 101, "additions": 73, "deletions": 28}, "files": [{"sha": "559db3f9b848d1f3815c7ea62c057c188c8d7db0", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=65dd6218afe62fa36e701ceb27bd4e17ec764acc", "patch": "@@ -2045,6 +2045,14 @@ pub mod llvm {\n             AlwaysPreserve: bool,\n             Flags: c_uint,\n             ArgNo: c_uint) -> DIVariable;\n+            \n+        #[fast_ffi]\n+        pub unsafe fn LLVMDIBuilderCreateArrayType(\n+            Builder: DIBuilderRef,\n+            Size: c_ulonglong,\n+            AlignInBits: c_ulonglong,\n+            Ty: DIType,\n+            Subscripts: DIArray) -> DIType;            \n \n         #[fast_ffi]\n         pub unsafe fn LLVMDIBuilderCreateVectorType("}, {"sha": "07aedf4b2c9090d3ac5b1e31e14e8c20b03f2c99", "filename": "src/librustc/middle/trans/debuginfo.rs", "status": "modified", "additions": 23, "deletions": 13, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fdebuginfo.rs?ref=65dd6218afe62fa36e701ceb27bd4e17ec764acc", "patch": "@@ -24,6 +24,7 @@ use util::ppaux::ty_to_str;\n use core::hashmap::HashMap;\n use core::libc;\n use core::libc::c_uint;\n+use core::cmp;\n use core::ptr;\n use core::str::as_c_str;\n use core::sys;\n@@ -204,8 +205,7 @@ fn create_block(bcx: block) -> DILexicalBlock {\n \n fn size_and_align_of(cx: @CrateContext, t: ty::t) -> (uint, uint) {\n     let llty = type_of::type_of(cx, t);\n-    (machine::llsize_of_real(cx, llty),\n-     machine::llalign_of_pref(cx, llty))\n+    (machine::llsize_of_real(cx, llty), machine::llalign_of_min(cx, llty))\n }\n \n fn create_basic_type(cx: @CrateContext, t: ty::t, span: span) -> DIType{\n@@ -277,46 +277,56 @@ struct StructContext {\n \n impl StructContext {\n     fn create(cx: @CrateContext, file: DIFile, name: ~str, line: uint) -> ~StructContext {\n+        debug!(\"StructContext::create: %s\", name);\n         let scx = ~StructContext {\n             cx: cx,\n             file: file,\n             name: name,\n             line: line,\n             members: ~[],\n             total_size: 0,\n-            align: 64 //XXX different alignment per arch?\n+            align: 1\n         };\n         return scx;\n     }\n \n     fn add_member(&mut self, name: &str, line: uint, size: uint, align: uint, ty: DIType) {\n+        debug!(\"StructContext(%s)::add_member: %s, size=%u, align=%u\", self.name, name, size, align);\n+        let offset = roundup(self.total_size, align);\n         let mem_t = do as_c_str(name) |name| { unsafe {\n             llvm::LLVMDIBuilderCreateMemberType(dbg_cx(self.cx).builder,\n                 ptr::null(), name, self.file, line as c_uint,\n-                size * 8 as u64, align * 8 as u64, self.total_size as u64,\n+                size * 8 as u64, align * 8 as u64, offset * 8 as u64,\n                 0, ty)\n             }};\n-        // XXX What about member alignment???\n         self.members.push(mem_t);\n-        self.total_size += size * 8;\n+        self.total_size = offset + size;\n+        // struct alignment is the max alignment of its' members\n+        self.align = cmp::max(self.align, align);\n     }\n \n     fn finalize(&self) -> DICompositeType {\n+        debug!(\"StructContext(%s)::finalize: total_size=%u, align=%u\", self.name, self.total_size, self.align);\n         let dcx = dbg_cx(self.cx);\n         let members_md = create_DIArray(dcx.builder, self.members);\n \n         let struct_md =\n             do as_c_str(self.name) |name| { unsafe {\n                 llvm::LLVMDIBuilderCreateStructType(\n-                    dcx.builder, ptr::null(), name,\n+                    dcx.builder, self.file, name,\n                     self.file, self.line as c_uint,\n-                    self.total_size as u64, self.align as u64, 0, ptr::null(),\n+                    self.total_size * 8 as u64, self.align * 8 as u64, 0, ptr::null(),\n                     members_md, 0, ptr::null())\n             }};\n         return struct_md;\n     }\n }\n \n+#[inline(always)]\n+fn roundup(x: uint, a: uint) -> uint { \n+    ((x + (a - 1)) / a) * a \n+}\n+\n fn create_struct(cx: @CrateContext, t: ty::t, fields: ~[ty::field], span: span) -> DICompositeType {\n     let loc = span_start(cx, span);\n     let file_md = create_file(cx, loc.file.name);\n@@ -390,12 +400,12 @@ fn create_fixed_vec(cx: @CrateContext, vec_t: ty::t, elem_t: ty::t,\n     let (size, align) = size_and_align_of(cx, elem_t);\n \n     let subrange = unsafe {\n-        llvm::LLVMDIBuilderGetOrCreateSubrange(dcx.builder, 0_i64, (len-1) as i64) };\n+        llvm::LLVMDIBuilderGetOrCreateSubrange(dcx.builder, 0_i64, len as i64) };\n \n     let subscripts = create_DIArray(dcx.builder, [subrange]);\n     return unsafe {\n-        llvm::LLVMDIBuilderCreateVectorType(dcx.builder,\n-            size * len as u64, align as u64, elem_ty_md, subscripts)\n+        llvm::LLVMDIBuilderCreateArrayType(dcx.builder,\n+            size * len * 8 as u64, align * 8 as u64, elem_ty_md, subscripts)\n     };\n }\n \n@@ -418,8 +428,8 @@ fn create_boxed_vec(cx: @CrateContext, vec_t: ty::t, elem_t: ty::t,\n     let name = fmt!(\"[%s]\", ty_to_str(cx.tcx, elem_t));\n \n     let subscripts = create_DIArray(dcx.builder, [subrange]);\n-    let data_ptr = unsafe { llvm::LLVMDIBuilderCreateVectorType(dcx.builder,\n-                arr_size as u64, arr_align as u64, elem_ty_md, subscripts) };\n+    let data_ptr = unsafe { llvm::LLVMDIBuilderCreateArrayType(dcx.builder,\n+                arr_size * 8 as u64, arr_align * 8 as u64, elem_ty_md, subscripts) };\n     vec_scx.add_member(\"data\", 0, 0, // clang says the size should be 0\n                sys::min_align_of::<u8>(), data_ptr);\n     let vec_md = vec_scx.finalize();"}, {"sha": "6537e232f8b3b5a34a9129ff20b4daaaedf809e4", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=65dd6218afe62fa36e701ceb27bd4e17ec764acc", "patch": "@@ -725,6 +725,17 @@ extern \"C\" LLVMValueRef LLVMDIBuilderCreateLocalVariable(\n         unwrapDI<DIType>(Ty), AlwaysPreserve, Flags, ArgNo));\n }\n \n+extern \"C\" LLVMValueRef LLVMDIBuilderCreateArrayType(\n+    DIBuilderRef Builder,\n+    uint64_t Size,  \n+    uint64_t AlignInBits,  \n+    LLVMValueRef Ty, \n+    LLVMValueRef Subscripts) {\n+    return wrap(Builder->createArrayType(Size, AlignInBits,\n+        unwrapDI<DIType>(Ty), \n+        unwrapDI<DIArray>(Subscripts)));\n+}\n+\n extern \"C\" LLVMValueRef LLVMDIBuilderCreateVectorType(\n     DIBuilderRef Builder,\n     uint64_t Size,  "}, {"sha": "2a3f7de9bf5a07659ba2ef9b74c50c71a531090e", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=65dd6218afe62fa36e701ceb27bd4e17ec764acc", "patch": "@@ -601,6 +601,7 @@ LLVMDIBuilderCreatePointerType\n LLVMDIBuilderCreateMemberType\n LLVMDIBuilderCreateStructType\n LLVMDIBuilderGetOrCreateSubrange\n+LLVMDIBuilderCreateArrayType\n LLVMDIBuilderCreateVectorType\n LLVMDIBuilderCreateSubroutineType\n LLVMDIBuilderGetOrCreateArray"}, {"sha": "616740c850c5431d81d8c99a2b80630197ad2d2d", "filename": "src/test/debug-info/basic-types.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Ftest%2Fdebug-info%2Fbasic-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Ftest%2Fdebug-info%2Fbasic-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbasic-types.rs?ref=65dd6218afe62fa36e701ceb27bd4e17ec764acc", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n \n // Caveats - gdb prints any 8-bit value (meaning rust i8 and u8 values)\n // as its numerical value along with its associated ASCII char, there\n@@ -17,8 +17,9 @@\n // its numerical value.\n \n // compile-flags:-Z extra-debug-info\n-// debugger:break 67\n+// debugger:break _zzz\n // debugger:run\n+// debugger:finish\n // debugger:print b\n // check:$1 = false\n // debugger:print i\n@@ -66,5 +67,7 @@ fn main() {\n     let f: float = 1.5;\n     let f32: f32 = 2.5;\n     let f64: f64 = 3.5;\n-    let _z = ();\n+    _zzz();\n }\n+\n+fn _zzz() {()}"}, {"sha": "3e5483ad75b3a4a0360d472ea8cfecf17ae9c0e3", "filename": "src/test/debug-info/box.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Ftest%2Fdebug-info%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Ftest%2Fdebug-info%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fbox.rs?ref=65dd6218afe62fa36e701ceb27bd4e17ec764acc", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break 29\n+// debugger:break _zzz\n // debugger:run\n+// debugger:finish\n // debugger:print a->boxed\n // check:$1 = 1\n // debugger:print b->boxed\n@@ -28,5 +29,7 @@ fn main() {\n     let b = ~(2, 3.5);\n     let c = @4;\n     let d = @false;\n-    let _z = 0;\n+    _zzz();\n }\n+\n+fn _zzz() {()}\n\\ No newline at end of file"}, {"sha": "ddfac9cbeea8f6312632990e585df7b034a73f27", "filename": "src/test/debug-info/struct.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Ftest%2Fdebug-info%2Fstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Ftest%2Fdebug-info%2Fstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fstruct.rs?ref=65dd6218afe62fa36e701ceb27bd4e17ec764acc", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break 29\n+// debugger:break _zzz\n // debugger:run\n+// debugger:finish\n // debugger:print pair\n // check:$1 = {x = 1, y = 2}\n // debugger:print pair.x\n@@ -28,5 +29,7 @@ struct Pair {\n \n fn main() {\n     let pair = Pair { x: 1, y: 2 };\n-    let _z = ();\n+    _zzz();\n }\n+\n+fn _zzz() {()}\n\\ No newline at end of file"}, {"sha": "a50996871cee98e9e960b0abbcffdb91fd2cb6bc", "filename": "src/test/debug-info/tuple.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Ftest%2Fdebug-info%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Ftest%2Fdebug-info%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Ftuple.rs?ref=65dd6218afe62fa36e701ceb27bd4e17ec764acc", "patch": "@@ -8,16 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break 20\n+// debugger:break _zzz\n // debugger:run\n+// debugger:finish\n // debugger:print t\n // check:$1 = {4, 5.5, true}\n \n fn main() {\n     let t = (4, 5.5, true);\n-    let _z = ();\n+    _zzz();\n }\n+\n+fn _zzz() {()}\n\\ No newline at end of file"}, {"sha": "c87849ac4b6ddc9b4fbbdee0f0eabb314d69d7b3", "filename": "src/test/debug-info/vec.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Ftest%2Fdebug-info%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/65dd6218afe62fa36e701ceb27bd4e17ec764acc/src%2Ftest%2Fdebug-info%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebug-info%2Fvec.rs?ref=65dd6218afe62fa36e701ceb27bd4e17ec764acc", "patch": "@@ -8,12 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// xfail-test\n+// xfail-win32 Broken because of LLVM bug: http://llvm.org/bugs/show_bug.cgi?id=16249\n \n // compile-flags:-Z extra-debug-info\n // debugger:set print pretty off\n-// debugger:break 29\n+// debugger:break _zzz\n // debugger:run\n+// debugger:finish\n // debugger:print a\n // check:$1 = {1, 2, 3}\n // debugger:print b.vec[0]\n@@ -28,5 +29,7 @@ fn main() {\n     let b = &[4, 5, 6];\n     let c = @[7, 8, 9];\n     let d = ~[10, 11, 12];\n-    let _z = 0;\n+    _zzz();\n }\n+\n+fn _zzz() {()}\n\\ No newline at end of file"}]}