{"sha": "e4cf24bd451363cfb675af70b40dbb96a1ec2716", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0Y2YyNGJkNDUxMzYzY2ZiNjc1YWY3MGI0MGRiYjk2YTFlYzI3MTY=", "commit": {"author": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-10-08T22:17:35Z"}, "committer": {"name": "Thom Chiovoloni", "email": "chiovolonit@gmail.com", "date": "2020-10-08T22:17:35Z"}, "message": "Fiddle with the comments", "tree": {"sha": "3561a15e55eccf85a847394d4dc6f142265ee355", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3561a15e55eccf85a847394d4dc6f142265ee355"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4cf24bd451363cfb675af70b40dbb96a1ec2716", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4cf24bd451363cfb675af70b40dbb96a1ec2716", "html_url": "https://github.com/rust-lang/rust/commit/e4cf24bd451363cfb675af70b40dbb96a1ec2716", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4cf24bd451363cfb675af70b40dbb96a1ec2716/comments", "author": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "thomcc", "id": 860665, "node_id": "MDQ6VXNlcjg2MDY2NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/860665?v=4", "gravatar_id": "", "url": "https://api.github.com/users/thomcc", "html_url": "https://github.com/thomcc", "followers_url": "https://api.github.com/users/thomcc/followers", "following_url": "https://api.github.com/users/thomcc/following{/other_user}", "gists_url": "https://api.github.com/users/thomcc/gists{/gist_id}", "starred_url": "https://api.github.com/users/thomcc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/thomcc/subscriptions", "organizations_url": "https://api.github.com/users/thomcc/orgs", "repos_url": "https://api.github.com/users/thomcc/repos", "events_url": "https://api.github.com/users/thomcc/events{/privacy}", "received_events_url": "https://api.github.com/users/thomcc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f30cc74fb41916d11a27e6b29ebbe73298534573", "url": "https://api.github.com/repos/rust-lang/rust/commits/f30cc74fb41916d11a27e6b29ebbe73298534573", "html_url": "https://github.com/rust-lang/rust/commit/f30cc74fb41916d11a27e6b29ebbe73298534573"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "d6a5cc26df2393ed93aa53db8d1bd7dfee516465", "filename": "library/std/src/sys/unix/time.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4cf24bd451363cfb675af70b40dbb96a1ec2716/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4cf24bd451363cfb675af70b40dbb96a1ec2716/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Ftime.rs?ref=e4cf24bd451363cfb675af70b40dbb96a1ec2716", "patch": "@@ -235,11 +235,11 @@ mod inner {\n         static INITIALIZED: AtomicBool = AtomicBool::new(false);\n         static INFO_BITS: AtomicU64 = AtomicU64::new(0);\n \n-        // If a previous thread has filled in this global INITIALIZED, use that.\n+        // If a previous thread has initialized `INFO_BITS`, use that.\n         if INITIALIZED.load(Ordering::Acquire) {\n-            // The Acquire/Release pair used for INITIALIZED ensures that this\n-            // load can see the corresponding `INFO_BITS` store, despite them\n-            // both being Relaxed.\n+            // Note: `Relaxed` is correct here and below --\u00a0the `Acquire` /\n+            // `Release` pair used for `INITIALIZED` ensures this load can see\n+            // the corresponding store below.\n             return info_from_bits(INFO_BITS.load(Ordering::Relaxed));\n         }\n \n@@ -253,7 +253,7 @@ mod inner {\n             mach_timebase_info(&mut info);\n         }\n \n-        // Note: This is racy, but the race is against other threads trying to\n+        // This is racy, but the race should be against other threads trying to\n         // write the same value.\n         INFO_BITS.store(info_to_bits(info), Ordering::Relaxed);\n "}]}