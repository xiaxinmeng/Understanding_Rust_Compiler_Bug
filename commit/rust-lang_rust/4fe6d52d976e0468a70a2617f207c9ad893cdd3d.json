{"sha": "4fe6d52d976e0468a70a2617f207c9ad893cdd3d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmZTZkNTJkOTc2ZTA0NjhhNzBhMjYxN2YyMDdjOWFkODkzY2RkM2Q=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-05-16T17:46:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-16T17:46:36Z"}, "message": "Rollup merge of #72094 - petrochenkov:overfeature, r=nikic\n\ncmdline: Make target features individually overridable\n\nFixes https://github.com/rust-lang/rust/issues/56527\n\nPreviously `-C target-feature=+avx2 -C target-feature=+fma` was equivalent to `-C target-feature=+fma` because the later `-C target-feature` option fully overridden previous `-C target-feature`.\nWith this PR `-C target-feature=+avx2 -C target-feature=+fma` is equivalent to `-C target-feature=+avx2,+fma` and the options are combined.\n\nI'm not sure where the comma-separated features in a single option came from (clang uses a scheme with single feature per-option), but logically these features are entirely independent options.\nSo they should be overridable individually as well to be more useful in hierarchical build system, and more consistent with other rustc options and clang behavior as well.\n\nTarget feature options have a few other issues (https://github.com/rust-lang/rust/issues/44815), but fixing those is going to be a bit more invasive.", "tree": {"sha": "569b350363f89772087cab721afcabe62b4ea91a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/569b350363f89772087cab721afcabe62b4ea91a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fe6d52d976e0468a70a2617f207c9ad893cdd3d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJewCb8CRBK7hj4Ov3rIwAAdHIIAE12K8nBAisHy/W9QFjPteVB\n5h06SVku8xU9h+Edi4c1mNrJ3sqqthDcT3VSsV7XZkV22UxtQG8EtOLqhuq15fVg\ni60a6FqXvw4phWJRIeiUqM5FIOoLmI2aFzkM7bu75Lw4qkP7he92ais7QYPMRcY+\nruF26RUipBPRAeBy8bTLrku1NFitcjfLvqY93Is7gxqluUdRBZY45MnUPAsbGkj4\ngshouclDbWbIDg0jxZdUwg+ji9rOwJ8qeb6hWUcYnYAfgmoaDEnxh7qnpZ8rPPQF\noERKrgAJS7uifshDn4b4efXdZA/BIkkSziVQ2N5RvhOjF7r1Opb7oyrfBr4Dxrw=\n=8bFt\n-----END PGP SIGNATURE-----\n", "payload": "tree 569b350363f89772087cab721afcabe62b4ea91a\nparent ae66c62245240eda5a60d0cf8b564f2b6c4e3875\nparent 00dcb665e7ede908ba11638e8230340f396674f8\nauthor Ralf Jung <post@ralfj.de> 1589651196 +0200\ncommitter GitHub <noreply@github.com> 1589651196 +0200\n\nRollup merge of #72094 - petrochenkov:overfeature, r=nikic\n\ncmdline: Make target features individually overridable\n\nFixes https://github.com/rust-lang/rust/issues/56527\n\nPreviously `-C target-feature=+avx2 -C target-feature=+fma` was equivalent to `-C target-feature=+fma` because the later `-C target-feature` option fully overridden previous `-C target-feature`.\nWith this PR `-C target-feature=+avx2 -C target-feature=+fma` is equivalent to `-C target-feature=+avx2,+fma` and the options are combined.\n\nI'm not sure where the comma-separated features in a single option came from (clang uses a scheme with single feature per-option), but logically these features are entirely independent options.\nSo they should be overridable individually as well to be more useful in hierarchical build system, and more consistent with other rustc options and clang behavior as well.\n\nTarget feature options have a few other issues (https://github.com/rust-lang/rust/issues/44815), but fixing those is going to be a bit more invasive.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fe6d52d976e0468a70a2617f207c9ad893cdd3d", "html_url": "https://github.com/rust-lang/rust/commit/4fe6d52d976e0468a70a2617f207c9ad893cdd3d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fe6d52d976e0468a70a2617f207c9ad893cdd3d/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae66c62245240eda5a60d0cf8b564f2b6c4e3875", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae66c62245240eda5a60d0cf8b564f2b6c4e3875", "html_url": "https://github.com/rust-lang/rust/commit/ae66c62245240eda5a60d0cf8b564f2b6c4e3875"}, {"sha": "00dcb665e7ede908ba11638e8230340f396674f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/00dcb665e7ede908ba11638e8230340f396674f8", "html_url": "https://github.com/rust-lang/rust/commit/00dcb665e7ede908ba11638e8230340f396674f8"}], "stats": {"total": 35, "additions": 33, "deletions": 2}, "files": [{"sha": "c638f88057a526aa394457bc425acc88a49f1d57", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4fe6d52d976e0468a70a2617f207c9ad893cdd3d/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/4fe6d52d976e0468a70a2617f207c9ad893cdd3d/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=4fe6d52d976e0468a70a2617f207c9ad893cdd3d", "patch": "@@ -464,7 +464,15 @@ machine. Each target has a default base CPU.\n \n Individual targets will support different features; this flag lets you control\n enabling or disabling a feature. Each feature should be prefixed with a `+` to\n-enable it or `-` to disable it. Separate multiple features with commas.\n+enable it or `-` to disable it.\n+\n+Features from multiple `-C target-feature` options are combined. \\\n+Multiple features can be specified in a single option by separating them\n+with commas - `-C target-feature=+x,-y`. \\\n+If some feature is specified more than once with both `+` and `-`,\n+then values passed later override values passed earlier. \\\n+For example, `-C target-feature=+x,-y,+z -Ctarget-feature=-x,+y`\n+is equivalent to `-C target-feature=-x,+y,+z`.\n \n To see the valid options and an example of use, run `rustc --print\n target-features`."}, {"sha": "e2c82a397c7384c150db62c9fa0f5d55de309acf", "filename": "src/librustc_session/options.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4fe6d52d976e0468a70a2617f207c9ad893cdd3d/src%2Flibrustc_session%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe6d52d976e0468a70a2617f207c9ad893cdd3d/src%2Flibrustc_session%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_session%2Foptions.rs?ref=4fe6d52d976e0468a70a2617f207c9ad893cdd3d", "patch": "@@ -271,6 +271,7 @@ macro_rules! options {\n             \"one of supported relocation models (`rustc --print relocation-models`)\";\n         pub const parse_tls_model: &str =\n             \"one of supported TLS models (`rustc --print tls-models`)\";\n+        pub const parse_target_feature: &str = parse_string;\n     }\n \n     #[allow(dead_code)]\n@@ -647,6 +648,19 @@ macro_rules! options {\n             }\n             true\n         }\n+\n+        fn parse_target_feature(slot: &mut String, v: Option<&str>) -> bool {\n+            match v {\n+                Some(s) => {\n+                    if !slot.is_empty() {\n+                        slot.push_str(\",\");\n+                    }\n+                    slot.push_str(s);\n+                    true\n+                }\n+                None => false,\n+            }\n+        }\n     }\n ) }\n \n@@ -742,7 +756,7 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"use soft float ABI (*eabihf targets only) (default: no)\"),\n     target_cpu: Option<String> = (None, parse_opt_string, [TRACKED],\n         \"select target processor (`rustc --print target-cpus` for details)\"),\n-    target_feature: String = (String::new(), parse_string, [TRACKED],\n+    target_feature: String = (String::new(), parse_target_feature, [TRACKED],\n         \"target specific attributes. (`rustc --print target-features` for details). \\\n         This feature is unsafe.\"),\n "}, {"sha": "f71a9c3c58216b119738d90c6977dc7bea28a158", "filename": "src/test/codegen/target-feature-multiple.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4fe6d52d976e0468a70a2617f207c9ad893cdd3d/src%2Ftest%2Fcodegen%2Ftarget-feature-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fe6d52d976e0468a70a2617f207c9ad893cdd3d/src%2Ftest%2Fcodegen%2Ftarget-feature-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ftarget-feature-multiple.rs?ref=4fe6d52d976e0468a70a2617f207c9ad893cdd3d", "patch": "@@ -0,0 +1,9 @@\n+// only-x86_64\n+// compile-flags: -C target-feature=+sse2,-avx,+avx2 -C target-feature=+avx,-avx2\n+\n+#![crate_type = \"lib\"]\n+\n+#[no_mangle]\n+pub fn foo() {\n+    // CHECK: attributes #0 = { {{.*}}\"target-features\"=\"+sse2,-avx,+avx2,+avx,-avx2\"{{.*}} }\n+}"}]}