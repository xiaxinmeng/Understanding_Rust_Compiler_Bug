{"sha": "86b2bdb4350ceb98cb0f292dfb25dc7b703c2297", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2YjJiZGI0MzUwY2ViOThjYjBmMjkyZGZiMjVkYzdiNzAzYzIyOTc=", "commit": {"author": {"name": "Mark-Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-12T13:48:39Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2016-12-21T03:02:48Z"}, "message": "Rename LandingPad to Funclet\n\nChanges internal storage to direct field values instead of Options,\nsince both fields are always either set or not set.", "tree": {"sha": "d62d310ef0005b5e7caaa7bfb15e9c82b49830fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d62d310ef0005b5e7caaa7bfb15e9c82b49830fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297", "html_url": "https://github.com/rust-lang/rust/commit/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f3d824cc70ecae51ea373da4006cfd6427a530f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f3d824cc70ecae51ea373da4006cfd6427a530f", "html_url": "https://github.com/rust-lang/rust/commit/8f3d824cc70ecae51ea373da4006cfd6427a530f"}], "stats": {"total": 122, "additions": 61, "deletions": 61}, "files": [{"sha": "dc5fd1d009c2f8b51a0e822f84fac4cfba920012", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=86b2bdb4350ceb98cb0f292dfb25dc7b703c2297", "patch": "@@ -762,7 +762,7 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n             param_substs: param_substs,\n             span: None,\n             //block_arena: block_arena,\n-            lpad_arena: TypedArena::new(),\n+            funclet_arena: TypedArena::new(),\n             ccx: ccx,\n             debug_context: debug_context,\n             scopes: RefCell::new(Vec::new()),"}, {"sha": "b29eae1587c6bbab04a0f193d575ad06534ddc42", "filename": "src/librustc_trans/cleanup.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297/src%2Flibrustc_trans%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297/src%2Flibrustc_trans%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcleanup.rs?ref=86b2bdb4350ceb98cb0f292dfb25dc7b703c2297", "patch": "@@ -119,7 +119,7 @@ pub use self::EarlyExitLabel::*;\n use llvm::{BasicBlockRef, ValueRef};\n use base::{self, Lifetime};\n use common;\n-use common::{BlockAndBuilder, FunctionContext, LandingPad};\n+use common::{BlockAndBuilder, FunctionContext, Funclet};\n use debuginfo::{DebugLoc};\n use glue;\n use type_::Type;\n@@ -343,7 +343,7 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n \n         let mut bcx = bcx;\n         for cleanup in scope.cleanups.iter().rev() {\n-            bcx = cleanup.trans(bcx);\n+            bcx = cleanup.trans(bcx.funclet(), bcx);\n         }\n         bcx\n     }\n@@ -430,7 +430,7 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n                                     bcx.call(\n                                         bcx.fcx().eh_unwind_resume().reify(bcx.ccx()),\n                                         &[exc_ptr],\n-                                        bcx.lpad().and_then(|b| b.bundle()));\n+                                        bcx.funclet().map(|b| b.bundle()));\n                                 }\n                             }\n                             UnwindKind::CleanupPad(_) => {\n@@ -495,7 +495,7 @@ impl<'blk, 'tcx> FunctionContext<'blk, 'tcx> {\n                 let mut bcx_out = bcx_in;\n                 let len = scope.cleanups.len();\n                 for cleanup in scope.cleanups.iter().rev().take(len - skip) {\n-                    bcx_out = cleanup.trans(bcx_out);\n+                    bcx_out = cleanup.trans(bcx_out.funclet(), bcx_out);\n                 }\n                 skip = 0;\n                 exit_label.branch(&bcx_out, prev_llbb);\n@@ -645,7 +645,7 @@ impl EarlyExitLabel {\n     /// for the same kind of early exit label that `self` is.\n     ///\n     /// This function will appropriately configure `bcx` based on the kind of\n-    /// label this is. For UnwindExit labels, the `lpad` field of the block will\n+    /// label this is. For UnwindExit labels, the `funclet` field of the block will\n     /// be set to `Some`, and for MSVC exceptions this function will generate a\n     /// `cleanuppad` instruction at the start of the block so it may be jumped\n     /// to in the future (e.g. so this block can be cached as an early exit).\n@@ -656,11 +656,11 @@ impl EarlyExitLabel {\n         match *self {\n             UnwindExit(UnwindKind::CleanupPad(..)) => {\n                 let pad = bcx.cleanup_pad(None, &[]);\n-                bcx.set_lpad_ref(Some(bcx.fcx().lpad_arena.alloc(LandingPad::msvc(pad))));\n+                bcx.set_funclet(Funclet::msvc(pad));\n                 UnwindExit(UnwindKind::CleanupPad(pad))\n             }\n             UnwindExit(UnwindKind::LandingPad) => {\n-                bcx.set_lpad_ref(Some(bcx.fcx().lpad_arena.alloc(LandingPad::gnu())));\n+                bcx.set_funclet(Funclet::gnu());\n                 *self\n             }\n         }\n@@ -689,18 +689,20 @@ pub struct DropValue<'tcx> {\n }\n \n impl<'tcx> DropValue<'tcx> {\n-    fn trans<'blk>(&self, bcx: BlockAndBuilder<'blk, 'tcx>) -> BlockAndBuilder<'blk, 'tcx> {\n+    fn trans<'blk>(\n+        &self,\n+        funclet: Option<&'blk Funclet>,\n+        bcx: BlockAndBuilder<'blk, 'tcx>,\n+    ) -> BlockAndBuilder<'blk, 'tcx> {\n         if self.is_immediate {\n             let vp = base::alloc_ty(&bcx, self.ty, \"\");\n             Lifetime::Start.call(&bcx, vp);\n             base::store_ty(&bcx, self.val, vp, self.ty);\n-            let lpad = bcx.lpad();\n-            let bcx = glue::call_drop_glue(bcx, vp, self.ty, self.skip_dtor, lpad);\n+            let bcx = glue::call_drop_glue(bcx, vp, self.ty, self.skip_dtor, funclet);\n             Lifetime::End.call(&bcx, vp);\n             bcx\n         } else {\n-            let lpad = bcx.lpad();\n-            glue::call_drop_glue(bcx, self.val, self.ty, self.skip_dtor, lpad)\n+            glue::call_drop_glue(bcx, self.val, self.ty, self.skip_dtor, funclet)\n         }\n     }\n }"}, {"sha": "440ae8326f5407918af84a7c79bfc52c6d023a56", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=86b2bdb4350ceb98cb0f292dfb25dc7b703c2297", "patch": "@@ -308,7 +308,7 @@ pub struct FunctionContext<'a, 'tcx: 'a> {\n     //pub block_arena: &'a TypedArena<BlockS<'a, 'tcx>>,\n \n     // The arena that landing pads are allocated from.\n-    pub lpad_arena: TypedArena<LandingPad>,\n+    pub funclet_arena: TypedArena<Funclet>,\n \n     // This function's enclosing crate context.\n     pub ccx: &'a CrateContext<'a, 'tcx>,\n@@ -483,7 +483,7 @@ pub struct BlockAndBuilder<'blk, 'tcx: 'blk> {\n \n     // If this block part of a landing pad, then this is `Some` indicating what\n     // kind of landing pad its in, otherwise this is none.\n-    lpad: Cell<Option<&'blk LandingPad>>,\n+    funclet: Cell<Option<&'blk Funclet>>,\n \n     // The function context for the function to which this block is\n     // attached.\n@@ -499,7 +499,7 @@ impl<'blk, 'tcx> BlockAndBuilder<'blk, 'tcx> {\n         owned_builder.builder.position_at_end(llbb);\n         BlockAndBuilder {\n             llbb: llbb,\n-            lpad: Cell::new(None),\n+            funclet: Cell::new(None),\n             fcx: fcx,\n             owned_builder: owned_builder,\n         }\n@@ -535,17 +535,17 @@ impl<'blk, 'tcx> BlockAndBuilder<'blk, 'tcx> {\n         self.fcx.mir()\n     }\n \n-    pub fn set_lpad(&self, lpad: Option<LandingPad>) {\n-        self.set_lpad_ref(lpad.map(|p| &*self.fcx().lpad_arena.alloc(p)))\n+    pub fn set_funclet(&self, funclet: Option<Funclet>) {\n+        self.set_funclet_ref(funclet.map(|p| &*self.fcx().funclet_arena.alloc(p)))\n     }\n \n-    pub fn set_lpad_ref(&self, lpad: Option<&'blk LandingPad>) {\n+    pub fn set_funclet_ref(&self, funclet: Option<&'blk Funclet>) {\n         // FIXME: use an IVar?\n-        self.lpad.set(lpad);\n+        self.funclet.set(funclet);\n     }\n \n-    pub fn lpad(&self) -> Option<&'blk LandingPad> {\n-        self.lpad.get()\n+    pub fn funclet(&self) -> Option<&'blk Funclet> {\n+        self.funclet.get()\n     }\n }\n \n@@ -570,39 +570,37 @@ impl<'blk, 'tcx> Deref for BlockAndBuilder<'blk, 'tcx> {\n /// When inside of a landing pad, each function call in LLVM IR needs to be\n /// annotated with which landing pad it's a part of. This is accomplished via\n /// the `OperandBundleDef` value created for MSVC landing pads.\n-pub struct LandingPad {\n-    cleanuppad: Option<ValueRef>,\n-    operand: Option<OperandBundleDef>,\n+pub struct Funclet {\n+    cleanuppad: ValueRef,\n+    operand: OperandBundleDef,\n }\n \n-impl LandingPad {\n-    pub fn gnu() -> LandingPad {\n-        LandingPad { cleanuppad: None, operand: None }\n+impl Funclet {\n+    pub fn gnu() -> Option<Funclet> {\n+        None\n     }\n \n-    pub fn msvc(cleanuppad: ValueRef) -> LandingPad {\n-        LandingPad {\n-            cleanuppad: Some(cleanuppad),\n-            operand: Some(OperandBundleDef::new(\"funclet\", &[cleanuppad])),\n-        }\n+    pub fn msvc(cleanuppad: ValueRef) -> Option<Funclet> {\n+        Some(Funclet {\n+            cleanuppad: cleanuppad,\n+            operand: OperandBundleDef::new(\"funclet\", &[cleanuppad]),\n+        })\n     }\n \n-    pub fn bundle(&self) -> Option<&OperandBundleDef> {\n-        self.operand.as_ref()\n+    pub fn cleanuppad(&self) -> ValueRef {\n+        self.cleanuppad\n     }\n \n-    pub fn cleanuppad(&self) -> Option<ValueRef> {\n-        self.cleanuppad\n+    pub fn bundle(&self) -> &OperandBundleDef {\n+        &self.operand\n     }\n }\n \n-impl Clone for LandingPad {\n-    fn clone(&self) -> LandingPad {\n-        LandingPad {\n+impl Clone for Funclet {\n+    fn clone(&self) -> Funclet {\n+        Funclet {\n             cleanuppad: self.cleanuppad,\n-            operand: self.cleanuppad.map(|p| {\n-                OperandBundleDef::new(\"funclet\", &[p])\n-            }),\n+            operand: OperandBundleDef::new(\"funclet\", &[self.cleanuppad]),\n         }\n     }\n }"}, {"sha": "c7394ba68755a3242fd6cf00cc824dd4edcf1b1f", "filename": "src/librustc_trans/glue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297/src%2Flibrustc_trans%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297/src%2Flibrustc_trans%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fglue.rs?ref=86b2bdb4350ceb98cb0f292dfb25dc7b703c2297", "patch": "@@ -133,7 +133,7 @@ pub fn call_drop_glue<'blk, 'tcx>(\n     v: ValueRef,\n     t: Ty<'tcx>,\n     skip_dtor: bool,\n-    lpad: Option<&'blk LandingPad>,\n+    funclet: Option<&'blk Funclet>,\n ) -> BlockAndBuilder<'blk, 'tcx> {\n     // NB: v is an *alias* of type t here, not a direct value.\n     debug!(\"call_drop_glue(t={:?}, skip_dtor={})\", t, skip_dtor);\n@@ -154,7 +154,7 @@ pub fn call_drop_glue<'blk, 'tcx>(\n         };\n \n         // No drop-hint ==> call standard drop glue\n-        bcx.call(glue, &[ptr], lpad.and_then(|b| b.bundle()));\n+        bcx.call(glue, &[ptr], funclet.map(|b| b.bundle()));\n     }\n     bcx\n }"}, {"sha": "3fa88c8706d4ff51d35b0a547d69c073b03d74a2", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=86b2bdb4350ceb98cb0f292dfb25dc7b703c2297", "patch": "@@ -17,7 +17,7 @@ use abi::{Abi, FnType, ArgType};\n use adt;\n use base::{self, Lifetime};\n use callee::{Callee, CalleeData, Fn, Intrinsic, NamedTupleConstructor, Virtual};\n-use common::{self, BlockAndBuilder, LandingPad};\n+use common::{self, BlockAndBuilder, Funclet};\n use common::{C_bool, C_str_slice, C_struct, C_u32, C_undef};\n use consts;\n use debuginfo::DebugLoc;\n@@ -44,20 +44,20 @@ use std::ptr;\n \n impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n     pub fn trans_block(&mut self, bb: mir::BasicBlock,\n-        lpads: &IndexVec<mir::BasicBlock, Option<LandingPad>>) {\n+        funclets: &IndexVec<mir::BasicBlock, Option<Funclet>>) {\n         let mut bcx = self.build_block(bb);\n         let data = &CellRef::clone(&self.mir)[bb];\n \n         debug!(\"trans_block({:?}={:?})\", bb, data);\n \n-        let lpad = match self.cleanup_kinds[bb] {\n-            CleanupKind::Internal { funclet } => lpads[funclet].as_ref(),\n-            _ => lpads[bb].as_ref(),\n+        let funclet = match self.cleanup_kinds[bb] {\n+            CleanupKind::Internal { funclet } => funclets[funclet].as_ref(),\n+            _ => funclets[bb].as_ref(),\n         };\n \n         // Create the cleanup bundle, if needed.\n-        let cleanup_pad = lpad.and_then(|lp| lp.cleanuppad());\n-        let cleanup_bundle = lpad.and_then(|l| l.bundle());\n+        let cleanup_pad = funclet.map(|lp| lp.cleanuppad());\n+        let cleanup_bundle = funclet.map(|l| l.bundle());\n \n         let funclet_br = |this: &Self, bcx: BlockAndBuilder, bb: mir::BasicBlock| {\n             let lltarget = this.blocks[bb];\n@@ -866,28 +866,28 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n     }\n \n     pub fn init_cpad(&mut self, bb: mir::BasicBlock,\n-        lpads: &mut IndexVec<mir::BasicBlock, Option<LandingPad>>) {\n+        funclets: &mut IndexVec<mir::BasicBlock, Option<Funclet>>) {\n         let bcx = self.build_block(bb);\n         let data = &self.mir[bb];\n         debug!(\"init_cpad({:?})\", data);\n \n         match self.cleanup_kinds[bb] {\n             CleanupKind::NotCleanup => {\n-                lpads[bb] = None;\n+                funclets[bb] = None;\n             }\n             _ if !base::wants_msvc_seh(bcx.sess()) => {\n-                lpads[bb] = Some(LandingPad::gnu());\n+                funclets[bb] = Funclet::gnu();\n             }\n             CleanupKind::Internal { funclet: _ } => {\n                 // FIXME: is this needed?\n                 bcx.set_personality_fn(self.fcx.eh_personality());\n-                lpads[bb] = None;\n+                funclets[bb] = None;\n             }\n             CleanupKind::Funclet => {\n                 bcx.set_personality_fn(self.fcx.eh_personality());\n                 DebugLoc::None.apply_to_bcx(&bcx);\n                 let cleanup_pad = bcx.cleanup_pad(None, &[]);\n-                lpads[bb] = Some(LandingPad::msvc(cleanup_pad));\n+                funclets[bb] = Funclet::msvc(cleanup_pad);\n             }\n         };\n     }"}, {"sha": "60fd80a8f902350dd90594bfdb1d7809a4ae3b95", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86b2bdb4350ceb98cb0f292dfb25dc7b703c2297/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=86b2bdb4350ceb98cb0f292dfb25dc7b703c2297", "patch": "@@ -15,7 +15,7 @@ use rustc::mir;\n use rustc::mir::tcx::LvalueTy;\n use session::config::FullDebugInfo;\n use base;\n-use common::{self, BlockAndBuilder, CrateContext, FunctionContext, C_null, LandingPad};\n+use common::{self, BlockAndBuilder, CrateContext, FunctionContext, C_null, Funclet};\n use debuginfo::{self, declare_local, DebugLoc, VariableAccess, VariableKind, FunctionDebugContext};\n use type_of;\n \n@@ -285,19 +285,19 @@ pub fn trans_mir<'blk, 'tcx: 'blk>(fcx: &'blk FunctionContext<'blk, 'tcx>) {\n \n     let mut rpo = traversal::reverse_postorder(&mir);\n \n-    let mut lpads: IndexVec<mir::BasicBlock, Option<LandingPad>> =\n+    let mut funclets: IndexVec<mir::BasicBlock, Option<Funclet>> =\n         IndexVec::from_elem(None, mir.basic_blocks());\n \n     // Prepare each block for translation.\n     for (bb, _) in rpo.by_ref() {\n-        mircx.init_cpad(bb, &mut lpads);\n+        mircx.init_cpad(bb, &mut funclets);\n     }\n     rpo.reset();\n \n     // Translate the body of each block using reverse postorder\n     for (bb, _) in rpo {\n         visited.insert(bb.index());\n-        mircx.trans_block(bb, &lpads);\n+        mircx.trans_block(bb, &funclets);\n     }\n \n     // Remove blocks that haven't been visited, or have no"}]}