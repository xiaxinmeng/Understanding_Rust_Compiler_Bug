{"sha": "e22ceea1a751f7a66277c323fc39c05832f59214", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUyMmNlZWExYTc1MWY3YTY2Mjc3YzMyM2ZjMzljMDU4MzJmNTkyMTQ=", "commit": {"author": {"name": "Michael F. Lamb", "email": "mike@datagrok.org", "date": "2016-01-06T23:46:58Z"}, "committer": {"name": "Michael F. Lamb", "email": "mike@datagrok.org", "date": "2016-01-07T00:06:55Z"}, "message": "Explain surprising new syntax appearing in example code\n\nIn a straight-through read of \"Syntax and Semantics,\" the first time we\nmeet a generic, and the first time we meet a vector, is when a Vec<T> shows\nup in this example. I'm not sure that I could argue that the whole section\nshould appear later in the book than the ones on vectors and generics, so\ninstead just give the reader a brief introduction to both and a promise to\nfollow up later.", "tree": {"sha": "cd2097c3e9f7cfd4bcc15e0fcf31cb12177f6e32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd2097c3e9f7cfd4bcc15e0fcf31cb12177f6e32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e22ceea1a751f7a66277c323fc39c05832f59214", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e22ceea1a751f7a66277c323fc39c05832f59214", "html_url": "https://github.com/rust-lang/rust/commit/e22ceea1a751f7a66277c323fc39c05832f59214", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e22ceea1a751f7a66277c323fc39c05832f59214/comments", "author": {"login": "datagrok", "id": 569728, "node_id": "MDQ6VXNlcjU2OTcyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/569728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datagrok", "html_url": "https://github.com/datagrok", "followers_url": "https://api.github.com/users/datagrok/followers", "following_url": "https://api.github.com/users/datagrok/following{/other_user}", "gists_url": "https://api.github.com/users/datagrok/gists{/gist_id}", "starred_url": "https://api.github.com/users/datagrok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datagrok/subscriptions", "organizations_url": "https://api.github.com/users/datagrok/orgs", "repos_url": "https://api.github.com/users/datagrok/repos", "events_url": "https://api.github.com/users/datagrok/events{/privacy}", "received_events_url": "https://api.github.com/users/datagrok/received_events", "type": "User", "site_admin": false}, "committer": {"login": "datagrok", "id": 569728, "node_id": "MDQ6VXNlcjU2OTcyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/569728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/datagrok", "html_url": "https://github.com/datagrok", "followers_url": "https://api.github.com/users/datagrok/followers", "following_url": "https://api.github.com/users/datagrok/following{/other_user}", "gists_url": "https://api.github.com/users/datagrok/gists{/gist_id}", "starred_url": "https://api.github.com/users/datagrok/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/datagrok/subscriptions", "organizations_url": "https://api.github.com/users/datagrok/orgs", "repos_url": "https://api.github.com/users/datagrok/repos", "events_url": "https://api.github.com/users/datagrok/events{/privacy}", "received_events_url": "https://api.github.com/users/datagrok/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5daa75373d870f255923aed37d99db73a661bd51", "url": "https://api.github.com/repos/rust-lang/rust/commits/5daa75373d870f255923aed37d99db73a661bd51", "html_url": "https://github.com/rust-lang/rust/commit/5daa75373d870f255923aed37d99db73a661bd51"}], "stats": {"total": 21, "additions": 15, "deletions": 6}, "files": [{"sha": "0a13d813f74885808c654721e22b632737b5a34a", "filename": "src/doc/book/ownership.md", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e22ceea1a751f7a66277c323fc39c05832f59214/src%2Fdoc%2Fbook%2Fownership.md", "raw_url": "https://github.com/rust-lang/rust/raw/e22ceea1a751f7a66277c323fc39c05832f59214/src%2Fdoc%2Fbook%2Fownership.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fownership.md?ref=e22ceea1a751f7a66277c323fc39c05832f59214", "patch": "@@ -51,15 +51,24 @@ fn foo() {\n }\n ```\n \n-When `v` comes into scope, a new [`Vec<T>`][vect] is created. In this case, the\n-vector also allocates space on [the heap][heap], for the three elements. When\n-`v` goes out of scope at the end of `foo()`, Rust will clean up everything\n-related to the vector, even the heap-allocated memory. This happens\n-deterministically, at the end of the scope.\n+When `v` comes into scope, a new [vector][] is created, and it allocates space\n+on the heap for each of its elements. When `v` goes out of scope at the end of\n+`foo()`, Rust will clean up everything related to the vector, even the\n+heap-allocated memory. This happens deterministically, at the end of the scope.\n \n-[vect]: ../std/vec/struct.Vec.html\n+We'll cover [vectors][vector] in detail later in this chapter; we only use them\n+here as an example of a type that allocates space on the heap at runtime. They\n+behave like [arrays][], except their size may change by `push()`ing more\n+elements onto them.\n+\n+Vectors have a [generic type][generics] `Vec<T>`, so in this example `v` will have type\n+`Vec<i32>`. We'll cover generics in detail later in this chapter.\n+\n+[arrays]: primitive-types.html#arrays\n+[vector]: vectors.html\n [heap]: the-stack-and-the-heap.html\n [bindings]: variable-bindings.html\n+[generics]: generics.html\n \n # Move semantics\n "}]}