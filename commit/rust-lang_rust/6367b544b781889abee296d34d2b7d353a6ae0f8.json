{"sha": "6367b544b781889abee296d34d2b7d353a6ae0f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNjdiNTQ0Yjc4MTg4OWFiZWUyOTZkMzRkMmI3ZDM1M2E2YWUwZjg=", "commit": {"author": {"name": "Joe Richey", "email": "joerichey@google.com", "date": "2020-05-26T08:57:49Z"}, "committer": {"name": "Joe Richey", "email": "joerichey@google.com", "date": "2020-05-26T09:06:15Z"}, "message": "librustc_middle: Add function for computing unsigned abs\n\nThis is tricky to get right if we want to avoid panicking or wrapping.\n\nSigned-off-by: Joe Richey <joerichey@google.com>", "tree": {"sha": "df7652fdf865e1b63861ed58ec7d52cf881109ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df7652fdf865e1b63861ed58ec7d52cf881109ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6367b544b781889abee296d34d2b7d353a6ae0f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6367b544b781889abee296d34d2b7d353a6ae0f8", "html_url": "https://github.com/rust-lang/rust/commit/6367b544b781889abee296d34d2b7d353a6ae0f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6367b544b781889abee296d34d2b7d353a6ae0f8/comments", "author": {"login": "josephlr", "id": 5506060, "node_id": "MDQ6VXNlcjU1MDYwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5506060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephlr", "html_url": "https://github.com/josephlr", "followers_url": "https://api.github.com/users/josephlr/followers", "following_url": "https://api.github.com/users/josephlr/following{/other_user}", "gists_url": "https://api.github.com/users/josephlr/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephlr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephlr/subscriptions", "organizations_url": "https://api.github.com/users/josephlr/orgs", "repos_url": "https://api.github.com/users/josephlr/repos", "events_url": "https://api.github.com/users/josephlr/events{/privacy}", "received_events_url": "https://api.github.com/users/josephlr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "josephlr", "id": 5506060, "node_id": "MDQ6VXNlcjU1MDYwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5506060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephlr", "html_url": "https://github.com/josephlr", "followers_url": "https://api.github.com/users/josephlr/followers", "following_url": "https://api.github.com/users/josephlr/following{/other_user}", "gists_url": "https://api.github.com/users/josephlr/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephlr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephlr/subscriptions", "organizations_url": "https://api.github.com/users/josephlr/orgs", "repos_url": "https://api.github.com/users/josephlr/repos", "events_url": "https://api.github.com/users/josephlr/events{/privacy}", "received_events_url": "https://api.github.com/users/josephlr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55577b411cd829b6793be8fd0af0e8811ba89e5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/55577b411cd829b6793be8fd0af0e8811ba89e5c", "html_url": "https://github.com/rust-lang/rust/commit/55577b411cd829b6793be8fd0af0e8811ba89e5c"}], "stats": {"total": 22, "additions": 14, "deletions": 8}, "files": [{"sha": "061bc9750e1c27d033961bc17cc400e60237719a", "filename": "src/librustc_middle/mir/interpret/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6367b544b781889abee296d34d2b7d353a6ae0f8/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6367b544b781889abee296d34d2b7d353a6ae0f8/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fmod.rs?ref=6367b544b781889abee296d34d2b7d353a6ae0f8", "patch": "@@ -598,3 +598,12 @@ pub fn truncate(value: u128, size: Size) -> u128 {\n     // Truncate (shift left to drop out leftover values, shift right to fill with zeroes).\n     (value << shift) >> shift\n }\n+\n+/// Computes the unsigned absolute value without wrapping or panicking.\n+#[inline]\n+pub fn uabs(value: i64) -> u64 {\n+    // The only tricky part here is if value == i64::MIN. In that case,\n+    // wrapping_abs() returns i64::MIN == -2^63. Casting this value to a u64\n+    // gives 2^63, the correct value.\n+    value.wrapping_abs() as u64\n+}"}, {"sha": "019c96bc511eb9bb8c40de20e47bb1f3e2939ff7", "filename": "src/librustc_middle/mir/interpret/pointer.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6367b544b781889abee296d34d2b7d353a6ae0f8/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6367b544b781889abee296d34d2b7d353a6ae0f8/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs?ref=6367b544b781889abee296d34d2b7d353a6ae0f8", "patch": "@@ -1,4 +1,4 @@\n-use super::{AllocId, InterpResult};\n+use super::{uabs, AllocId, InterpResult};\n \n use rustc_macros::HashStable;\n use rustc_target::abi::{HasDataLayout, Size};\n@@ -48,15 +48,12 @@ pub trait PointerArithmetic: HasDataLayout {\n \n     #[inline]\n     fn overflowing_signed_offset(&self, val: u64, i: i64) -> (u64, bool) {\n-        if i < 0 {\n-            // Trickery to ensure that `i64::MIN` works fine: compute `n = -i`.\n-            // This formula only works for true negative values; it overflows for zero!\n-            let n = u64::MAX - (i as u64) + 1;\n+        let n = uabs(i);\n+        if i >= 0 {\n+            self.overflowing_offset(val, n)\n+        } else {\n             let res = val.overflowing_sub(n);\n             self.truncate_to_ptr(res)\n-        } else {\n-            // `i >= 0`, so the cast is safe.\n-            self.overflowing_offset(val, i as u64)\n         }\n     }\n "}]}