{"sha": "ab958a7ab0f65536fb921896a526ce81e4dee32d", "node_id": "C_kwDOAAsO6NoAKGFiOTU4YTdhYjBmNjU1MzZmYjkyMTg5NmE1MjZjZTgxZTRkZWUzMmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-11-17T14:58:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-17T14:58:02Z"}, "message": "Rollup merge of #90861 - 5225225:nonprinting-char, r=davidtwco\n\nPrint escaped string if char literal has multiple characters, but only one printable character\n\nFixes #90857\n\nI'm not sure about the error message here, it could get rather long and *maybe* using the names of characters would be better? That wouldn't help the length any, though.", "tree": {"sha": "1f5db2c39c2e8d6e96ed67cce55a4457d5e9cc03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f5db2c39c2e8d6e96ed67cce55a4457d5e9cc03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab958a7ab0f65536fb921896a526ce81e4dee32d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhlRh7CRBK7hj4Ov3rIwAAbt4IAKrt20OvxpvPh3TB1Dl4fSfT\nFIYqELnhTD2qJtgBxP1yLhU4rJIMxwcphbEG2DEXjUnyRBSLTY0y5vY4tP/o9qAm\n5WVpGg33LtPhZ16BtnIQRqlWFwG9vySP6YjGdmvqI0G1dUpPi5tEjrHDJLL16hMj\nuSTfHKCqdjXRo4TIQEt6qsBXJ4MD2hz/jjhdEApVG6RMw1/RAp7BDauDKp7yWqLV\nyEb+bjoePFlMaLkEyLA+xsFL8hjkSCMZzfwtHbF05OxgtQPyGozf3SanYSPbLkEz\n2SmEAIp2jVvVWUY7wZYKh33Gktz0qjZ4f1v8DaC4hrJ0P1Mcp9td0YVgJGYPZ2A=\n=tv3r\n-----END PGP SIGNATURE-----\n", "payload": "tree 1f5db2c39c2e8d6e96ed67cce55a4457d5e9cc03\nparent 904dba506640f290c182f5f6e717a82c6e5b8dae\nparent eee29b0b95aedd9568df63a49340ca6efbf4bbb0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1637161082 +0100\ncommitter GitHub <noreply@github.com> 1637161082 +0100\n\nRollup merge of #90861 - 5225225:nonprinting-char, r=davidtwco\n\nPrint escaped string if char literal has multiple characters, but only one printable character\n\nFixes #90857\n\nI'm not sure about the error message here, it could get rather long and *maybe* using the names of characters would be better? That wouldn't help the length any, though.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab958a7ab0f65536fb921896a526ce81e4dee32d", "html_url": "https://github.com/rust-lang/rust/commit/ab958a7ab0f65536fb921896a526ce81e4dee32d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab958a7ab0f65536fb921896a526ce81e4dee32d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "904dba506640f290c182f5f6e717a82c6e5b8dae", "url": "https://api.github.com/repos/rust-lang/rust/commits/904dba506640f290c182f5f6e717a82c6e5b8dae", "html_url": "https://github.com/rust-lang/rust/commit/904dba506640f290c182f5f6e717a82c6e5b8dae"}, {"sha": "eee29b0b95aedd9568df63a49340ca6efbf4bbb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/eee29b0b95aedd9568df63a49340ca6efbf4bbb0", "html_url": "https://github.com/rust-lang/rust/commit/eee29b0b95aedd9568df63a49340ca6efbf4bbb0"}], "stats": {"total": 55, "additions": 54, "deletions": 1}, "files": [{"sha": "7f68112a427ba1be2270c2bf58dfe06b6c09cdc2", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ab958a7ab0f65536fb921896a526ce81e4dee32d/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab958a7ab0f65536fb921896a526ce81e4dee32d/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=ab958a7ab0f65536fb921896a526ce81e4dee32d", "patch": "@@ -82,6 +82,33 @@ pub(crate) fn emit_unescape_error(\n                         Applicability::MachineApplicable,\n                     );\n                 }\n+            } else {\n+                let printable: Vec<char> = lit\n+                    .chars()\n+                    .filter(|&x| {\n+                        unicode_width::UnicodeWidthChar::width(x).unwrap_or(0) != 0\n+                            && !x.is_whitespace()\n+                    })\n+                    .collect();\n+\n+                if let [ch] = printable.as_slice() {\n+                    has_help = true;\n+\n+                    handler.span_note(\n+                        span,\n+                        &format!(\n+                            \"there are non-printing characters, the full sequence is `{}`\",\n+                            lit.escape_default(),\n+                        ),\n+                    );\n+\n+                    handler.span_suggestion(\n+                        span,\n+                        \"consider removing the non-printing characters\",\n+                        ch.to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n             }\n \n             if !has_help {"}, {"sha": "de5e09204b46298027efc90efd86a72f3899bf9c", "filename": "src/test/ui/parser/char/whitespace-character-literal.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ab958a7ab0f65536fb921896a526ce81e4dee32d/src%2Ftest%2Fui%2Fparser%2Fchar%2Fwhitespace-character-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab958a7ab0f65536fb921896a526ce81e4dee32d/src%2Ftest%2Fui%2Fparser%2Fchar%2Fwhitespace-character-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fchar%2Fwhitespace-character-literal.rs?ref=ab958a7ab0f65536fb921896a526ce81e4dee32d", "patch": "@@ -0,0 +1,10 @@\n+// This tests that the error generated when a character literal has multiple\n+// characters in it contains a note about non-printing characters.\n+\n+fn main() {\n+    let _hair_space_around = '\u200ax\u200b';\n+    //~^ ERROR: character literal may only contain one codepoint\n+    //~| NOTE: there are non-printing characters, the full sequence is `\\u{200a}x\\u{200b}`\n+    //~| HELP: consider removing the non-printing characters\n+    //~| SUGGESTION: x\n+}"}, {"sha": "d73de41a8099ba633043906c44f3ba9086d62100", "filename": "src/test/ui/parser/char/whitespace-character-literal.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ab958a7ab0f65536fb921896a526ce81e4dee32d/src%2Ftest%2Fui%2Fparser%2Fchar%2Fwhitespace-character-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ab958a7ab0f65536fb921896a526ce81e4dee32d/src%2Ftest%2Fui%2Fparser%2Fchar%2Fwhitespace-character-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fchar%2Fwhitespace-character-literal.stderr?ref=ab958a7ab0f65536fb921896a526ce81e4dee32d", "patch": "@@ -0,0 +1,16 @@\n+error: character literal may only contain one codepoint\n+  --> $DIR/whitespace-character-literal.rs:5:30\n+   |\n+LL |     let _hair_space_around = '\u200ax\u200b';\n+   |                              ^--^\n+   |                               |\n+   |                               help: consider removing the non-printing characters: `x`\n+   |\n+note: there are non-printing characters, the full sequence is `\\u{200a}x\\u{200b}`\n+  --> $DIR/whitespace-character-literal.rs:5:31\n+   |\n+LL |     let _hair_space_around = '\u200ax\u200b';\n+   |                               ^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "681b2486d07cc0bc20b54ccf95ac22dc20d7e798", "filename": "src/tools/tidy/src/ui_tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab958a7ab0f65536fb921896a526ce81e4dee32d/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab958a7ab0f65536fb921896a526ce81e4dee32d/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fui_tests.rs?ref=ab958a7ab0f65536fb921896a526ce81e4dee32d", "patch": "@@ -9,7 +9,7 @@ const ENTRY_LIMIT: usize = 1000;\n // FIXME: The following limits should be reduced eventually.\n const ROOT_ENTRY_LIMIT: usize = 1102;\n const ISSUES_ENTRY_LIMIT: usize = 2310;\n-const PARSER_LIMIT: usize = 1004;\n+const PARSER_LIMIT: usize = 1005;\n \n fn check_entries(path: &Path, bad: &mut bool) {\n     let dirs = walkdir::WalkDir::new(&path.join(\"test/ui\"))"}]}