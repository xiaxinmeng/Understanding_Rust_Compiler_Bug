{"sha": "8fd42ec130148cb49e83028153f17dab6843966e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZDQyZWMxMzAxNDhjYjQ5ZTgzMDI4MTUzZjE3ZGFiNjg0Mzk2NmU=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-03-10T14:02:17Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2018-04-03T17:39:16Z"}, "message": "Extract default Config into function\n\nWill permit creating Config in tests without having to parse a toml\nfile.", "tree": {"sha": "8ee6bee1704a8a493b95e58ef8d2afe87cb4035f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ee6bee1704a8a493b95e58ef8d2afe87cb4035f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fd42ec130148cb49e83028153f17dab6843966e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fd42ec130148cb49e83028153f17dab6843966e", "html_url": "https://github.com/rust-lang/rust/commit/8fd42ec130148cb49e83028153f17dab6843966e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fd42ec130148cb49e83028153f17dab6843966e/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fde70b09637c2ac50ac76c6916c42a2d1505117c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fde70b09637c2ac50ac76c6916c42a2d1505117c", "html_url": "https://github.com/rust-lang/rust/commit/fde70b09637c2ac50ac76c6916c42a2d1505117c"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "0848590a9bc10787ba3cdc17a0723784dad66e91", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8fd42ec130148cb49e83028153f17dab6843966e/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fd42ec130148cb49e83028153f17dab6843966e/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=8fd42ec130148cb49e83028153f17dab6843966e", "patch": "@@ -318,11 +318,8 @@ struct TomlTarget {\n }\n \n impl Config {\n-    pub fn parse(args: &[String]) -> Config {\n-        let flags = Flags::parse(&args);\n-        let file = flags.config.clone();\n+    pub fn default_opts() -> Config {\n         let mut config = Config::default();\n-        config.exclude = flags.exclude;\n         config.llvm_enabled = true;\n         config.llvm_optimize = true;\n         config.llvm_version_check = true;\n@@ -342,11 +339,26 @@ impl Config {\n         config.rust_codegen_backends = vec![INTERNER.intern_str(\"llvm\")];\n         config.rust_codegen_backends_dir = \"codegen-backends\".to_owned();\n \n+        // set by bootstrap.py\n+        config.src = env::var_os(\"SRC\").map(PathBuf::from).expect(\"'SRC' to be set\");\n+        config.build = INTERNER.intern_str(&env::var(\"BUILD\").expect(\"'BUILD' to be set\"));\n+        config.out = env::var_os(\"BUILD_DIR\").map(PathBuf::from).expect(\"'BUILD_DIR' set\");\n+\n+        let stage0_root = config.out.join(&config.build).join(\"stage0/bin\");\n+        config.initial_rustc = stage0_root.join(exe(\"rustc\", &config.build));\n+        config.initial_cargo = stage0_root.join(exe(\"cargo\", &config.build));\n+\n+        config\n+    }\n+\n+    pub fn parse(args: &[String]) -> Config {\n+        let flags = Flags::parse(&args);\n+        let file = flags.config.clone();\n+        let mut config = Config::default_opts();\n+        config.exclude = flags.exclude;\n         config.rustc_error_format = flags.rustc_error_format;\n         config.on_fail = flags.on_fail;\n         config.stage = flags.stage;\n-        // set by bootstrap.py\n-        config.src = env::var_os(\"SRC\").map(PathBuf::from).expect(\"'SRC' to be set\");\n         config.jobs = flags.jobs;\n         config.cmd = flags.cmd;\n         config.incremental = flags.incremental;\n@@ -371,7 +383,6 @@ impl Config {\n \n         let build = toml.build.clone().unwrap_or(Build::default());\n         // set by bootstrap.py\n-        config.build = INTERNER.intern_str(&env::var(\"BUILD\").unwrap());\n         config.hosts.push(config.build.clone());\n         for host in build.host.iter() {\n             let host = INTERNER.intern_str(host);\n@@ -539,22 +550,12 @@ impl Config {\n             set(&mut config.rust_dist_src, t.src_tarball);\n         }\n \n-        let out = env::var_os(\"BUILD_DIR\").map(PathBuf::from).expect(\"'BUILD_DIR' set\");\n-        config.out = out.clone();\n-\n-        let stage0_root = out.join(&config.build).join(\"stage0/bin\");\n-        config.initial_rustc = match build.rustc {\n-            Some(s) => PathBuf::from(s),\n-            None => stage0_root.join(exe(\"rustc\", &config.build)),\n-        };\n-        config.initial_cargo = match build.cargo {\n-            Some(s) => PathBuf::from(s),\n-            None => stage0_root.join(exe(\"cargo\", &config.build)),\n-        };\n-\n         // Now that we've reached the end of our configuration, infer the\n         // default values for all options that we haven't otherwise stored yet.\n \n+        set(&mut config.initial_rustc, build.rustc.map(PathBuf::from));\n+        set(&mut config.initial_rustc, build.cargo.map(PathBuf::from));\n+\n         let default = false;\n         config.llvm_assertions = llvm_assertions.unwrap_or(default);\n "}]}