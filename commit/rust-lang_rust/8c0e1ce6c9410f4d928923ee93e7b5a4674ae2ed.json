{"sha": "8c0e1ce6c9410f4d928923ee93e7b5a4674ae2ed", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMGUxY2U2Yzk0MTBmNGQ5Mjg5MjNlZTkzZTdiNWE0Njc0YWUyZWQ=", "commit": {"author": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-14T03:48:09Z"}, "committer": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-14T03:48:09Z"}, "message": "Make check_for_move_of_borrowed_path take an &LoanPath rather than an &Rc<LoanPath>\n\nIt doesn't actually need the Rc, and it reduces the net number of\npointer manipulations.", "tree": {"sha": "e87f18316727ce6390f88f7711833bcae533d7e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e87f18316727ce6390f88f7711833bcae533d7e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c0e1ce6c9410f4d928923ee93e7b5a4674ae2ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c0e1ce6c9410f4d928923ee93e7b5a4674ae2ed", "html_url": "https://github.com/rust-lang/rust/commit/8c0e1ce6c9410f4d928923ee93e7b5a4674ae2ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c0e1ce6c9410f4d928923ee93e7b5a4674ae2ed/comments", "author": null, "committer": null, "parents": [{"sha": "d2d8fa2a0980fc6bf1a842cfff7d77ae9b95185f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2d8fa2a0980fc6bf1a842cfff7d77ae9b95185f", "html_url": "https://github.com/rust-lang/rust/commit/d2d8fa2a0980fc6bf1a842cfff7d77ae9b95185f"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "45d15a9afac1ea2a9ad80dcc30b56cd8d8c2d9c3", "filename": "src/librustc/middle/borrowck/check_loans.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8c0e1ce6c9410f4d928923ee93e7b5a4674ae2ed/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c0e1ce6c9410f4d928923ee93e7b5a4674ae2ed/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fcheck_loans.rs?ref=8c0e1ce6c9410f4d928923ee93e7b5a4674ae2ed", "patch": "@@ -454,7 +454,7 @@ impl<'a> CheckLoanCtxt<'a> {\n                             }\n                             Some(move_kind) => {\n                                 self.check_for_move_of_borrowed_path(id, span,\n-                                                                     &lp, move_kind);\n+                                                                     &*lp, move_kind);\n                                 if move_kind == move_data::Captured {\n                                     MovedInCapture\n                                 } else {\n@@ -474,20 +474,20 @@ impl<'a> CheckLoanCtxt<'a> {\n     fn check_for_move_of_borrowed_path(&self,\n                                        id: ast::NodeId,\n                                        span: Span,\n-                                       move_path: &Rc<LoanPath>,\n+                                       move_path: &LoanPath,\n                                        move_kind: move_data::MoveKind) {\n-        match self.analyze_move_out_from(id, &**move_path) {\n+        match self.analyze_move_out_from(id, move_path) {\n             MoveOk => { }\n             MoveWhileBorrowed(loan_path, loan_span) => {\n                 let err_message = match move_kind {\n                     move_data::Captured =>\n                         format!(\"cannot move `{}` into closure because it is borrowed\",\n-                                self.bccx.loan_path_to_str(&**move_path).as_slice()),\n+                                self.bccx.loan_path_to_str(move_path).as_slice()),\n                     move_data::Declared |\n                     move_data::MoveExpr |\n                     move_data::MovePat =>\n                         format!(\"cannot move out of `{}` because it is borrowed\",\n-                                self.bccx.loan_path_to_str(&**move_path).as_slice())\n+                                self.bccx.loan_path_to_str(move_path).as_slice())\n                 };\n \n                 self.bccx.span_err(span, err_message.as_slice());"}]}