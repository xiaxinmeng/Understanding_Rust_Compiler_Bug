{"sha": "3fb676afb061edc708030a5ed1e5f3983e0beaa5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmYjY3NmFmYjA2MWVkYzcwODAzMGE1ZWQxZTVmMzk4M2UwYmVhYTU=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-11-30T22:35:25Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2016-12-26T09:58:33Z"}, "message": "Move some compile-fail tests into UI directory", "tree": {"sha": "f06a2361158bd406e3931f60e410037a74e674c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f06a2361158bd406e3931f60e410037a74e674c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fb676afb061edc708030a5ed1e5f3983e0beaa5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fb676afb061edc708030a5ed1e5f3983e0beaa5", "html_url": "https://github.com/rust-lang/rust/commit/3fb676afb061edc708030a5ed1e5f3983e0beaa5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fb676afb061edc708030a5ed1e5f3983e0beaa5/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5752eae5f5ce3517d36f6668619dd2c70e6d2d88", "url": "https://api.github.com/repos/rust-lang/rust/commits/5752eae5f5ce3517d36f6668619dd2c70e6d2d88", "html_url": "https://github.com/rust-lang/rust/commit/5752eae5f5ce3517d36f6668619dd2c70e6d2d88"}], "stats": {"total": 1608, "additions": 1285, "deletions": 323}, "files": [{"sha": "c7bd343bc9a33aef72a3c784702b892bfb98472b", "filename": "src/test/compile-fail/issue-14254.rs", "status": "removed", "additions": 0, "deletions": 137, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/5752eae5f5ce3517d36f6668619dd2c70e6d2d88/src%2Ftest%2Fcompile-fail%2Fissue-14254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5752eae5f5ce3517d36f6668619dd2c70e6d2d88/src%2Ftest%2Fcompile-fail%2Fissue-14254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-14254.rs?ref=5752eae5f5ce3517d36f6668619dd2c70e6d2d88", "patch": "@@ -1,137 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-trait Foo {\n-    fn bar(&self);\n-    fn baz(&self) { }\n-    fn bah(_: Option<&Self>) { }\n-}\n-\n-struct BarTy {\n-    x : isize,\n-    y : f64,\n-}\n-\n-impl BarTy {\n-    fn a() {}\n-    fn b(&self) {}\n-}\n-\n-impl Foo for *const BarTy {\n-    fn bar(&self) {\n-        baz();\n-        //~^ ERROR: unresolved name `baz`\n-        //~| NOTE did you mean to call `self.baz`?\n-        a;\n-        //~^ ERROR: unresolved name `a`\n-        //~| NOTE unresolved name\n-    }\n-}\n-\n-impl<'a> Foo for &'a BarTy {\n-    fn bar(&self) {\n-        baz();\n-        //~^ ERROR: unresolved name `baz`\n-        //~| NOTE did you mean to call `self.baz`?\n-        x;\n-        //~^ ERROR: unresolved name `x`\n-        //~| NOTE did you mean `self.x`?\n-        y;\n-        //~^ ERROR: unresolved name `y`\n-        //~| NOTE did you mean `self.y`?\n-        a;\n-        //~^ ERROR: unresolved name `a`\n-        //~| NOTE unresolved name\n-        bah;\n-        //~^ ERROR: unresolved name `bah`\n-        //~| NOTE did you mean to call `Foo::bah`?\n-        b;\n-        //~^ ERROR: unresolved name `b`\n-        //~| NOTE unresolved name\n-    }\n-}\n-\n-impl<'a> Foo for &'a mut BarTy {\n-    fn bar(&self) {\n-        baz();\n-        //~^ ERROR: unresolved name `baz`\n-        //~| NOTE did you mean to call `self.baz`?\n-        x;\n-        //~^ ERROR: unresolved name `x`\n-        //~| NOTE did you mean `self.x`?\n-        y;\n-        //~^ ERROR: unresolved name `y`\n-        //~| NOTE did you mean `self.y`?\n-        a;\n-        //~^ ERROR: unresolved name `a`\n-        //~| NOTE unresolved name\n-        bah;\n-        //~^ ERROR: unresolved name `bah`\n-        //~| NOTE did you mean to call `Foo::bah`?\n-        b;\n-        //~^ ERROR: unresolved name `b`\n-        //~| NOTE unresolved name\n-    }\n-}\n-\n-impl Foo for Box<BarTy> {\n-    fn bar(&self) {\n-        baz();\n-        //~^ ERROR: unresolved name `baz`\n-        //~| NOTE did you mean to call `self.baz`?\n-        bah;\n-        //~^ ERROR: unresolved name `bah`\n-        //~| NOTE did you mean to call `Foo::bah`?\n-    }\n-}\n-\n-impl Foo for *const isize {\n-    fn bar(&self) {\n-        baz();\n-        //~^ ERROR: unresolved name `baz`\n-        //~| NOTE did you mean to call `self.baz`?\n-        bah;\n-        //~^ ERROR: unresolved name `bah`\n-        //~| NOTE did you mean to call `Foo::bah`?\n-    }\n-}\n-\n-impl<'a> Foo for &'a isize {\n-    fn bar(&self) {\n-        baz();\n-        //~^ ERROR: unresolved name `baz`\n-        //~| NOTE did you mean to call `self.baz`?\n-        bah;\n-        //~^ ERROR: unresolved name `bah`\n-        //~| NOTE did you mean to call `Foo::bah`?\n-    }\n-}\n-\n-impl<'a> Foo for &'a mut isize {\n-    fn bar(&self) {\n-        baz();\n-        //~^ ERROR: unresolved name `baz`\n-        //~| NOTE did you mean to call `self.baz`?\n-        bah;\n-        //~^ ERROR: unresolved name `bah`\n-        //~| NOTE did you mean to call `Foo::bah`?\n-    }\n-}\n-\n-impl Foo for Box<isize> {\n-    fn bar(&self) {\n-        baz();\n-        //~^ ERROR: unresolved name `baz`\n-        //~| NOTE did you mean to call `self.baz`?\n-        bah;\n-        //~^ ERROR: unresolved name `bah`\n-        //~| NOTE did you mean to call `Foo::bah`?\n-    }\n-}"}, {"sha": "d7635d7bc9473fc1b482e2d9b2c418cfba30eb73", "filename": "src/test/compile-fail/issue-2356.rs", "status": "removed", "additions": 0, "deletions": 109, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/5752eae5f5ce3517d36f6668619dd2c70e6d2d88/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5752eae5f5ce3517d36f6668619dd2c70e6d2d88/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2356.rs?ref=5752eae5f5ce3517d36f6668619dd2c70e6d2d88", "patch": "@@ -1,109 +0,0 @@\n-// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-trait Groom {\n-    fn shave(other: usize);\n-}\n-\n-pub struct cat {\n-  whiskers: isize,\n-}\n-\n-pub enum MaybeDog {\n-    Dog,\n-    NoDog\n-}\n-\n-impl MaybeDog {\n-  fn bark() {\n-    // If this provides a suggestion, it's a bug as MaybeDog doesn't impl Groom\n-    shave();\n-    //~^ ERROR: unresolved name `shave`\n-    //~| NOTE unresolved name\n-  }\n-}\n-\n-impl Groom for cat {\n-  fn shave(other: usize) {\n-    whiskers -= other;\n-    //~^ ERROR: unresolved name `whiskers`\n-    //~| NOTE unresolved name\n-    //~| HELP this is an associated function\n-    shave(4);\n-    //~^ ERROR: unresolved name `shave`\n-    //~| NOTE did you mean to call `Groom::shave`?\n-    purr();\n-    //~^ ERROR: unresolved name `purr`\n-    //~| NOTE unresolved name\n-  }\n-}\n-\n-impl cat {\n-    fn static_method() {}\n-\n-    fn purr_louder() {\n-        static_method();\n-        //~^ ERROR: unresolved name `static_method`\n-        //~| NOTE unresolved name\n-        purr();\n-        //~^ ERROR: unresolved name `purr`\n-        //~| NOTE unresolved name\n-        purr();\n-        //~^ ERROR: unresolved name `purr`\n-        //~| NOTE unresolved name\n-        purr();\n-        //~^ ERROR: unresolved name `purr`\n-        //~| NOTE unresolved name\n-    }\n-}\n-\n-impl cat {\n-  fn meow() {\n-    if self.whiskers > 3 {\n-        //~^ ERROR `self` is not available in a static method [E0424]\n-        //~| NOTE not available in static method\n-        //~| NOTE maybe a `self` argument is missing?\n-        println!(\"MEOW\");\n-    }\n-  }\n-\n-  fn purr(&self) {\n-    grow_older();\n-    //~^ ERROR: unresolved name `grow_older`\n-    //~| NOTE unresolved name\n-    shave();\n-    //~^ ERROR: unresolved name `shave`\n-    //~| NOTE unresolved name\n-  }\n-\n-  fn burn_whiskers(&mut self) {\n-    whiskers = 0;\n-    //~^ ERROR: unresolved name `whiskers`\n-    //~| NOTE did you mean `self.whiskers`?\n-  }\n-\n-  pub fn grow_older(other:usize) {\n-    whiskers = 4;\n-    //~^ ERROR: unresolved name `whiskers`\n-    //~| NOTE unresolved name\n-    //~| HELP this is an associated function\n-    purr_louder();\n-    //~^ ERROR: unresolved name `purr_louder`\n-    //~| NOTE unresolved name\n-  }\n-}\n-\n-fn main() {\n-    self += 1;\n-    //~^ ERROR: unresolved name `self`\n-    //~| NOTE unresolved name\n-    //~| HELP: module `self`\n-    // it's a bug if this suggests a missing `self` as we're not in a method\n-}"}, {"sha": "fae0fe16a266c4e5c3bdc7de5576a93bca2c0480", "filename": "src/test/ui/resolve/auxiliary/issue-21221-3.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fissue-21221-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fissue-21221-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fissue-21221-3.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "previous_filename": "src/test/compile-fail/auxiliary/issue-21221-3.rs"}, {"sha": "fffe060ee24a54261b3822e33b5d8a52327268b3", "filename": "src/test/ui/resolve/auxiliary/issue-21221-4.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fissue-21221-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fissue-21221-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fissue-21221-4.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "previous_filename": "src/test/compile-fail/auxiliary/issue-21221-4.rs"}, {"sha": "205566e4b1f54afda5d78bae232873894c9440b8", "filename": "src/test/ui/resolve/auxiliary/issue_19452_aux.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fissue_19452_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fissue_19452_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fissue_19452_aux.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "previous_filename": "src/test/compile-fail/auxiliary/issue_19452_aux.rs"}, {"sha": "6472c08c222965b6a6ba1a4e411747d3b26bc0ee", "filename": "src/test/ui/resolve/auxiliary/issue_3907.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fissue_3907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fissue_3907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fissue_3907.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "previous_filename": "src/test/compile-fail/auxiliary/issue_3907.rs"}, {"sha": "3bf39b788db6e1e2b6b8c3f9728c1485916cb5ad", "filename": "src/test/ui/resolve/auxiliary/namespaced_enums.rs", "status": "renamed", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fnamespaced_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fnamespaced_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fauxiliary%2Fnamespaced_enums.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -8,10 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn f<F:Nonexist(isize) -> isize>(x: F) {} //~ ERROR trait `Nonexist` is not in scope\n+pub enum Foo {\n+    A,\n+    B(isize),\n+    C { a: isize },\n+}\n \n-type Typedef = isize;\n-\n-fn g<F:Typedef(isize) -> isize>(x: F) {} //~ ERROR `Typedef` is not a trait\n-\n-fn main() {}\n+impl Foo {\n+    pub fn foo() {}\n+    pub fn bar(&self) {}\n+}", "previous_filename": "src/test/compile-fail/unboxed-closure-sugar-nonexistent-trait.rs"}, {"sha": "4f55f33d7f8083d6659b7765fdbaebab78111b08", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.rs", "status": "renamed", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -12,8 +12,13 @@\n extern crate namespaced_enums;\n \n fn main() {\n-    let _ = namespaced_enums::A; //~ ERROR unresolved name\n-    let _ = namespaced_enums::B(10); //~ ERROR unresolved name\n+    let _ = namespaced_enums::A;\n+    //~^ ERROR unresolved value `namespaced_enums::A`\n+    //~| HELP you can import it into scope: `use namespaced_enums::Foo::A;`\n+    let _ = namespaced_enums::B(10);\n+    //~^ ERROR unresolved function `namespaced_enums::B`\n+    //~| HELP you can import it into scope: `use namespaced_enums::Foo::B;`\n     let _ = namespaced_enums::C { a: 10 };\n     //~^ ERROR unresolved struct, variant or union type `namespaced_enums::C`\n+    //~| HELP you can import it into scope: `use namespaced_enums::Foo::C;`\n }", "previous_filename": "src/test/compile-fail/enums-are-namespaced-xc.rs"}, {"sha": "5c88d4456da231fc704c148cd3d9134048b0c1bb", "filename": "src/test/ui/resolve/enums-are-namespaced-xc.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fenums-are-namespaced-xc.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,20 @@\n+error[E0425]: unresolved name `namespaced_enums::A`\n+  --> $DIR/enums-are-namespaced-xc.rs:15:13\n+   |\n+15 |     let _ = namespaced_enums::A;\n+   |             ^^^^^^^^^^^^^^^^^^^ unresolved name\n+\n+error[E0425]: unresolved name `namespaced_enums::B`\n+  --> $DIR/enums-are-namespaced-xc.rs:18:13\n+   |\n+18 |     let _ = namespaced_enums::B(10);\n+   |             ^^^^^^^^^^^^^^^^^^^ unresolved name\n+\n+error[E0531]: unresolved struct, variant or union type `namespaced_enums::C`\n+  --> $DIR/enums-are-namespaced-xc.rs:21:13\n+   |\n+21 |     let _ = namespaced_enums::C { a: 10 };\n+   |             ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "b1fc6c477207a0a79c38be8c4abb7272d8c7069f", "filename": "src/test/ui/resolve/issue-14254.rs", "status": "added", "additions": 137, "deletions": 0, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,137 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn bar(&self);\n+    fn baz(&self) { }\n+    fn bah(_: Option<&Self>) { }\n+}\n+\n+struct BarTy {\n+    x : isize,\n+    y : f64,\n+}\n+\n+impl BarTy {\n+    fn a() {}\n+    fn b(&self) {}\n+}\n+\n+impl Foo for *const BarTy {\n+    fn bar(&self) {\n+        baz();\n+        //~^ ERROR unresolved function `baz`\n+        //~| NOTE did you mean `self.baz(...)`?\n+        a;\n+        //~^ ERROR unresolved value `a`\n+        //~| NOTE no resolution found\n+    }\n+}\n+\n+impl<'a> Foo for &'a BarTy {\n+    fn bar(&self) {\n+        baz();\n+        //~^ ERROR unresolved function `baz`\n+        //~| NOTE did you mean `self.baz(...)`?\n+        x;\n+        //~^ ERROR unresolved value `x`\n+        //~| NOTE did you mean `self.x`?\n+        y;\n+        //~^ ERROR unresolved value `y`\n+        //~| NOTE did you mean `self.y`?\n+        a;\n+        //~^ ERROR unresolved value `a`\n+        //~| NOTE no resolution found\n+        bah;\n+        //~^ ERROR unresolved value `bah`\n+        //~| NOTE did you mean `Self::bah`?\n+        b;\n+        //~^ ERROR unresolved value `b`\n+        //~| NOTE no resolution found\n+    }\n+}\n+\n+impl<'a> Foo for &'a mut BarTy {\n+    fn bar(&self) {\n+        baz();\n+        //~^ ERROR unresolved function `baz`\n+        //~| NOTE did you mean `self.baz(...)`?\n+        x;\n+        //~^ ERROR unresolved value `x`\n+        //~| NOTE did you mean `self.x`?\n+        y;\n+        //~^ ERROR unresolved value `y`\n+        //~| NOTE did you mean `self.y`?\n+        a;\n+        //~^ ERROR unresolved value `a`\n+        //~| NOTE no resolution found\n+        bah;\n+        //~^ ERROR unresolved value `bah`\n+        //~| NOTE did you mean `Self::bah`?\n+        b;\n+        //~^ ERROR unresolved value `b`\n+        //~| NOTE no resolution found\n+    }\n+}\n+\n+impl Foo for Box<BarTy> {\n+    fn bar(&self) {\n+        baz();\n+        //~^ ERROR unresolved function `baz`\n+        //~| NOTE did you mean `self.baz(...)`?\n+        bah;\n+        //~^ ERROR unresolved value `bah`\n+        //~| NOTE did you mean `Self::bah`?\n+    }\n+}\n+\n+impl Foo for *const isize {\n+    fn bar(&self) {\n+        baz();\n+        //~^ ERROR unresolved function `baz`\n+        //~| NOTE did you mean `self.baz(...)`?\n+        bah;\n+        //~^ ERROR unresolved value `bah`\n+        //~| NOTE did you mean `Self::bah`?\n+    }\n+}\n+\n+impl<'a> Foo for &'a isize {\n+    fn bar(&self) {\n+        baz();\n+        //~^ ERROR unresolved function `baz`\n+        //~| NOTE did you mean `self.baz(...)`?\n+        bah;\n+        //~^ ERROR unresolved value `bah`\n+        //~| NOTE did you mean `Self::bah`?\n+    }\n+}\n+\n+impl<'a> Foo for &'a mut isize {\n+    fn bar(&self) {\n+        baz();\n+        //~^ ERROR unresolved function `baz`\n+        //~| NOTE did you mean `self.baz(...)`?\n+        bah;\n+        //~^ ERROR unresolved value `bah`\n+        //~| NOTE did you mean `Self::bah`?\n+    }\n+}\n+\n+impl Foo for Box<isize> {\n+    fn bar(&self) {\n+        baz();\n+        //~^ ERROR unresolved function `baz`\n+        //~| NOTE did you mean `self.baz(...)`?\n+        bah;\n+        //~^ ERROR unresolved value `bah`\n+        //~| NOTE did you mean `Self::bah`?\n+    }\n+}"}, {"sha": "b80a4be535be976362c8ea18821c66c5041193b0", "filename": "src/test/ui/resolve/issue-14254.stderr", "status": "added", "additions": 148, "deletions": 0, "changes": 148, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-14254.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,148 @@\n+error[E0425]: unresolved name `baz`\n+  --> $DIR/issue-14254.rs:29:9\n+   |\n+29 |         baz();\n+   |         ^^^ did you mean to call `self.baz`?\n+\n+error[E0425]: unresolved name `a`\n+  --> $DIR/issue-14254.rs:32:9\n+   |\n+32 |         a;\n+   |         ^ unresolved name\n+\n+error[E0425]: unresolved name `baz`\n+  --> $DIR/issue-14254.rs:40:9\n+   |\n+40 |         baz();\n+   |         ^^^ did you mean to call `self.baz`?\n+\n+error[E0425]: unresolved name `x`\n+  --> $DIR/issue-14254.rs:43:9\n+   |\n+43 |         x;\n+   |         ^ did you mean `self.x`?\n+\n+error[E0425]: unresolved name `y`\n+  --> $DIR/issue-14254.rs:46:9\n+   |\n+46 |         y;\n+   |         ^ did you mean `self.y`?\n+\n+error[E0425]: unresolved name `a`\n+  --> $DIR/issue-14254.rs:49:9\n+   |\n+49 |         a;\n+   |         ^ unresolved name\n+\n+error[E0425]: unresolved name `bah`\n+  --> $DIR/issue-14254.rs:52:9\n+   |\n+52 |         bah;\n+   |         ^^^ did you mean to call `Foo::bah`?\n+\n+error[E0425]: unresolved name `b`\n+  --> $DIR/issue-14254.rs:55:9\n+   |\n+55 |         b;\n+   |         ^ unresolved name\n+\n+error[E0425]: unresolved name `baz`\n+  --> $DIR/issue-14254.rs:63:9\n+   |\n+63 |         baz();\n+   |         ^^^ did you mean to call `self.baz`?\n+\n+error[E0425]: unresolved name `x`\n+  --> $DIR/issue-14254.rs:66:9\n+   |\n+66 |         x;\n+   |         ^ did you mean `self.x`?\n+\n+error[E0425]: unresolved name `y`\n+  --> $DIR/issue-14254.rs:69:9\n+   |\n+69 |         y;\n+   |         ^ did you mean `self.y`?\n+\n+error[E0425]: unresolved name `a`\n+  --> $DIR/issue-14254.rs:72:9\n+   |\n+72 |         a;\n+   |         ^ unresolved name\n+\n+error[E0425]: unresolved name `bah`\n+  --> $DIR/issue-14254.rs:75:9\n+   |\n+75 |         bah;\n+   |         ^^^ did you mean to call `Foo::bah`?\n+\n+error[E0425]: unresolved name `b`\n+  --> $DIR/issue-14254.rs:78:9\n+   |\n+78 |         b;\n+   |         ^ unresolved name\n+\n+error[E0425]: unresolved name `baz`\n+  --> $DIR/issue-14254.rs:86:9\n+   |\n+86 |         baz();\n+   |         ^^^ did you mean to call `self.baz`?\n+\n+error[E0425]: unresolved name `bah`\n+  --> $DIR/issue-14254.rs:89:9\n+   |\n+89 |         bah;\n+   |         ^^^ did you mean to call `Foo::bah`?\n+\n+error[E0425]: unresolved name `baz`\n+  --> $DIR/issue-14254.rs:97:9\n+   |\n+97 |         baz();\n+   |         ^^^ did you mean to call `self.baz`?\n+\n+error[E0425]: unresolved name `bah`\n+   --> $DIR/issue-14254.rs:100:9\n+    |\n+100 |         bah;\n+    |         ^^^ did you mean to call `Foo::bah`?\n+\n+error[E0425]: unresolved name `baz`\n+   --> $DIR/issue-14254.rs:108:9\n+    |\n+108 |         baz();\n+    |         ^^^ did you mean to call `self.baz`?\n+\n+error[E0425]: unresolved name `bah`\n+   --> $DIR/issue-14254.rs:111:9\n+    |\n+111 |         bah;\n+    |         ^^^ did you mean to call `Foo::bah`?\n+\n+error[E0425]: unresolved name `baz`\n+   --> $DIR/issue-14254.rs:119:9\n+    |\n+119 |         baz();\n+    |         ^^^ did you mean to call `self.baz`?\n+\n+error[E0425]: unresolved name `bah`\n+   --> $DIR/issue-14254.rs:122:9\n+    |\n+122 |         bah;\n+    |         ^^^ did you mean to call `Foo::bah`?\n+\n+error[E0425]: unresolved name `baz`\n+   --> $DIR/issue-14254.rs:130:9\n+    |\n+130 |         baz();\n+    |         ^^^ did you mean to call `self.baz`?\n+\n+error[E0425]: unresolved name `bah`\n+   --> $DIR/issue-14254.rs:133:9\n+    |\n+133 |         bah;\n+    |         ^^^ did you mean to call `Foo::bah`?\n+\n+error: main function not found\n+\n+error: aborting due to 25 previous errors\n+"}, {"sha": "1f777e53632dd93e59b5920a6985d68620484963", "filename": "src/test/ui/resolve/issue-16058.rs", "status": "renamed", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -16,7 +16,12 @@ pub struct GslResult {\n \n impl GslResult {\n     pub fn new() -> GslResult {\n-        Result { //~ ERROR: expected struct, variant or union type, found enum `Result`\n+        Result {\n+//~^ ERROR expected struct, variant or union type, found enum `Result`\n+//~| HELP possible better candidates are found in other modules, you can import them into scope\n+//~| HELP std::fmt::Result\n+//~| HELP std::io::Result\n+//~| HELP std::thread::Result\n             val: 0f64,\n             err: 0f64\n         }", "previous_filename": "src/test/compile-fail/issue-16058.rs"}, {"sha": "049f2de7bb4180d6f319e706f991485b1892cdc1", "filename": "src/test/ui/resolve/issue-16058.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-16058.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,8 @@\n+error[E0532]: expected struct, variant or union type, found enum `Result`\n+  --> $DIR/issue-16058.rs:19:9\n+   |\n+19 |         Result {\n+   |         ^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "3ac9b379d189253e08b29c163c7a028c43d69e82", "filename": "src/test/ui/resolve/issue-17518.rs", "status": "renamed", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -14,4 +14,5 @@ enum SomeEnum {\n \n fn main() {\n     E { name: \"foobar\" }; //~ ERROR unresolved struct, variant or union type `E`\n+                          //~^ HELP you can import it into scope: `use SomeEnum::E;`\n }", "previous_filename": "src/test/compile-fail/issue-17518.rs"}, {"sha": "4c0bb20d09c6117e73533109dfb6c0fd80ce7990", "filename": "src/test/ui/resolve/issue-17518.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-17518.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,8 @@\n+error[E0531]: unresolved struct, variant or union type `E`\n+  --> $DIR/issue-17518.rs:16:5\n+   |\n+16 |     E { name: \"foobar\" }; //~ ERROR unresolved struct, variant or union type `E`\n+   |     ^\n+\n+error: aborting due to previous error\n+"}, {"sha": "02c6643a920c7d961b52d928497e87c8db48c5ad", "filename": "src/test/ui/resolve/issue-18252.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -14,6 +14,5 @@ enum Foo {\n \n fn main() {\n     let f = Foo::Variant(42);\n-    //~^ ERROR uses it like a function\n-    //~| struct called like a function\n+    //~^ ERROR expected function, found struct variant `Foo::Variant`\n }", "previous_filename": "src/test/compile-fail/issue-18252.rs"}, {"sha": "fa1604f46ece4baaf5b11cca66ec3ad18365d246", "filename": "src/test/ui/resolve/issue-18252.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-18252.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,10 @@\n+error[E0423]: `Foo::Variant` is the name of a struct or struct variant, but this expression uses it like a function name\n+  --> $DIR/issue-18252.rs:16:13\n+   |\n+16 |     let f = Foo::Variant(42);\n+   |             ^^^^^^^^^^^^ struct called like a function\n+   |\n+   = help: did you mean to write: `Foo::Variant { /* fields */ }`?\n+\n+error: aborting due to previous error\n+"}, {"sha": "080fb064c9fb5fc8afe58fa764c6d95030422dc2", "filename": "src/test/ui/resolve/issue-19452.rs", "status": "renamed", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -17,10 +17,8 @@ enum Homura {\n \n fn main() {\n     let homura = Homura::Madoka;\n-    //~^ ERROR uses it like a function\n-    //~| struct called like a function\n+    //~^ ERROR expected value, found struct variant `Homura::Madoka`\n \n     let homura = issue_19452_aux::Homura::Madoka;\n-    //~^ ERROR uses it like a function\n-    //~| struct called like a function\n+    //~^ ERROR expected value, found struct variant `issue_19452_aux::Homura::Madoka`\n }", "previous_filename": "src/test/compile-fail/issue-19452.rs"}, {"sha": "c0c4047ef1261497d9bcb48d2037ae2c40203706", "filename": "src/test/ui/resolve/issue-19452.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-19452.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,18 @@\n+error[E0423]: `Homura::Madoka` is the name of a struct or struct variant, but this expression uses it like a function name\n+  --> $DIR/issue-19452.rs:19:18\n+   |\n+19 |     let homura = Homura::Madoka;\n+   |                  ^^^^^^^^^^^^^^ struct called like a function\n+   |\n+   = help: did you mean to write: `Homura::Madoka { /* fields */ }`?\n+\n+error[E0423]: `issue_19452_aux::Homura::Madoka` is the name of a struct or struct variant, but this expression uses it like a function name\n+  --> $DIR/issue-19452.rs:22:18\n+   |\n+22 |     let homura = issue_19452_aux::Homura::Madoka;\n+   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ struct called like a function\n+   |\n+   = help: did you mean to write: `issue_19452_aux::Homura::Madoka { /* fields */ }`?\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "b1266a5af358174a0262d58d173c7d7c9fbc38cb", "filename": "src/test/ui/resolve/issue-21221-1.rs", "status": "renamed", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -51,11 +51,11 @@ struct Foo;\n //   help:   `std::ops::Mul`\n \n impl Mul for Foo {\n-//~^ ERROR trait `Mul` is not in scope\n+//~^ ERROR unresolved trait `Mul`\n+//~| HELP possible candidates are found in other modules, you can import them into scope\n //~| HELP `mul1::Mul`\n //~| HELP `mul2::Mul`\n //~| HELP `std::ops::Mul`\n-//~| HELP you can import several candidates into scope (`use ...;`):\n }\n \n // BEFORE, we got:\n@@ -70,24 +70,23 @@ impl Mul for Foo {\n //   help:   `mul4::Mul`\n //   help:   and 2 other candidates\n fn getMul() -> Mul {\n-//~^ ERROR type name `Mul` is undefined or not in scope\n+//~^ ERROR unresolved type `Mul`\n+//~| HELP possible candidates are found in other modules, you can import them into scope\n //~| HELP `mul1::Mul`\n //~| HELP `mul2::Mul`\n //~| HELP `mul3::Mul`\n //~| HELP `mul4::Mul`\n //~| HELP and 2 other candidates\n-//~| HELP you can import several candidates into scope (`use ...;`):\n }\n \n // Let's also test what happens if the trait doesn't exist:\n impl ThisTraitReallyDoesntExistInAnyModuleReally for Foo {\n-//~^ ERROR trait `ThisTraitReallyDoesntExistInAnyModuleReally` is not in scope\n-//~| HELP no candidates by the name of `ThisTraitReallyDoesntExistInAnyModuleReally` found\n+//~^ ERROR unresolved trait `ThisTraitReallyDoesntExistInAnyModuleReally`\n }\n \n // Let's also test what happens if there's just one alternative:\n impl Div for Foo {\n-//~^ ERROR trait `Div` is not in scope\n+//~^ ERROR unresolved trait `Div`\n //~| HELP `use std::ops::Div;`\n }\n ", "previous_filename": "src/test/compile-fail/issue-21221-1.rs"}, {"sha": "e16eedf71efb62b4da9c4d0c37e03879bc446cf8", "filename": "src/test/ui/resolve/issue-21221-1.stderr", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-1.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,42 @@\n+error[E0405]: trait `Mul` is not in scope\n+  --> $DIR/issue-21221-1.rs:53:6\n+   |\n+53 | impl Mul for Foo {\n+   |      ^^^ `Mul` is not in scope\n+   |\n+   = help: you can import several candidates into scope (`use ...;`):\n+   = help:   `mul1::Mul`\n+   = help:   `mul2::Mul`\n+   = help:   `std::ops::Mul`\n+\n+error[E0412]: type name `Mul` is undefined or not in scope\n+  --> $DIR/issue-21221-1.rs:72:16\n+   |\n+72 | fn getMul() -> Mul {\n+   |                ^^^ undefined or not in scope\n+   |\n+   = help: you can import several candidates into scope (`use ...;`):\n+   = help:   `mul1::Mul`\n+   = help:   `mul2::Mul`\n+   = help:   `mul3::Mul`\n+   = help:   `mul4::Mul`\n+   = help:   and 2 other candidates\n+\n+error[E0405]: trait `ThisTraitReallyDoesntExistInAnyModuleReally` is not in scope\n+  --> $DIR/issue-21221-1.rs:83:6\n+   |\n+83 | impl ThisTraitReallyDoesntExistInAnyModuleReally for Foo {\n+   |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `ThisTraitReallyDoesntExistInAnyModuleReally` is not in scope\n+   |\n+   = help: no candidates by the name of `ThisTraitReallyDoesntExistInAnyModuleReally` found in your project; maybe you misspelled the name or forgot to import an external crate?\n+\n+error[E0405]: trait `Div` is not in scope\n+  --> $DIR/issue-21221-1.rs:88:6\n+   |\n+88 | impl Div for Foo {\n+   |      ^^^ `Div` is not in scope\n+   |\n+   = help: you can import it into scope: `use std::ops::Div;`.\n+\n+error: cannot continue compilation due to previous error\n+"}, {"sha": "15e859329c407db226c90440af6b49dfaa087bdf", "filename": "src/test/ui/resolve/issue-21221-2.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -26,5 +26,5 @@ pub mod baz {\n \n struct Foo;\n impl T for Foo { }\n-//~^ ERROR trait `T` is not in scope\n-//~| HELP you can import it into scope: `use foo::bar::T;`.\n+//~^ ERROR unresolved trait `T`\n+//~| HELP you can import it into scope: `use foo::bar::T;`", "previous_filename": "src/test/compile-fail/issue-21221-2.rs"}, {"sha": "dad56c6b087889e24b9d3dbab2e7db90d3677635", "filename": "src/test/ui/resolve/issue-21221-2.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-2.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,12 @@\n+error[E0405]: trait `T` is not in scope\n+  --> $DIR/issue-21221-2.rs:28:6\n+   |\n+28 | impl T for Foo { }\n+   |      ^ `T` is not in scope\n+   |\n+   = help: you can import it into scope: `use foo::bar::T;`.\n+\n+error: main function not found\n+\n+error: cannot continue compilation due to previous error\n+"}, {"sha": "5d62cb85914fd4cb12d505ca01ff69d3168f0edd", "filename": "src/test/ui/resolve/issue-21221-3.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -23,8 +23,8 @@ struct Foo;\n //   `issue_21221_3::outer::public_module::OuterTrait`\n // are hidden from the view.\n impl OuterTrait for Foo {}\n-//~^ ERROR trait `OuterTrait` is not in scope\n-//~| HELP you can import it into scope: `use issue_21221_3::outer::OuterTrait;`.\n+//~^ ERROR unresolved trait `OuterTrait`\n+//~| HELP you can import it into scope: `use issue_21221_3::outer::OuterTrait;`\n fn main() {\n     println!(\"Hello, world!\");\n }", "previous_filename": "src/test/compile-fail/issue-21221-3.rs"}, {"sha": "601487cf19ecf42387100131299cb3dc465e5ae0", "filename": "src/test/ui/resolve/issue-21221-3.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-3.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,10 @@\n+error[E0405]: trait `OuterTrait` is not in scope\n+  --> $DIR/issue-21221-3.rs:25:6\n+   |\n+25 | impl OuterTrait for Foo {}\n+   |      ^^^^^^^^^^ `OuterTrait` is not in scope\n+   |\n+   = help: you can import it into scope: `use issue_21221_3::outer::OuterTrait;`.\n+\n+error: cannot continue compilation due to previous error\n+"}, {"sha": "ff6698f8717bbe8348c4ed8bcb747bd49fa5b4eb", "filename": "src/test/ui/resolve/issue-21221-4.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -18,8 +18,8 @@ extern crate issue_21221_4;\n struct Foo;\n \n impl T for Foo {}\n-//~^ ERROR trait `T` is not in scope\n-//~| HELP you can import it into scope: `use issue_21221_4::T;`.\n+//~^ ERROR unresolved trait `T`\n+//~| HELP you can import it into scope: `use issue_21221_4::T;`\n \n fn main() {\n     println!(\"Hello, world!\");", "previous_filename": "src/test/compile-fail/issue-21221-4.rs"}, {"sha": "3ce9073e59f8f27e9b94ad4f077148a2a2ecb410", "filename": "src/test/ui/resolve/issue-21221-4.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-21221-4.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,10 @@\n+error[E0405]: trait `T` is not in scope\n+  --> $DIR/issue-21221-4.rs:20:6\n+   |\n+20 | impl T for Foo {}\n+   |      ^ `T` is not in scope\n+   |\n+   = help: you can import it into scope: `use issue_21221_4::T;`.\n+\n+error: cannot continue compilation due to previous error\n+"}, {"sha": "19069f4916769b14b618e27b9e8e6f36af8be4e6", "filename": "src/test/ui/resolve/issue-23305.rs", "status": "renamed", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -12,7 +12,11 @@ pub trait ToNbt<T> {\n     fn new(val: T) -> Self;\n }\n \n-impl ToNbt<Self> {} //~ ERROR use of `Self` outside of an impl or trait\n-//~^ ERROR the trait `ToNbt` cannot be made into an object\n+impl ToNbt<Self> {}\n+//~^ ERROR unresolved type `Self`\n+//~| NOTE `Self` is only available in traits and impls\n+//~| ERROR the trait `ToNbt` cannot be made into an object\n+//~| NOTE the trait `ToNbt` cannot be made into an object\n+//~| NOTE method `new` has no receiver\n \n fn main() {}", "previous_filename": "src/test/compile-fail/issue-23305.rs"}, {"sha": "02f27a47c9b6d610cbca70112b1c6e95509feb08", "filename": "src/test/ui/resolve/issue-23305.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-23305.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,16 @@\n+error[E0411]: use of `Self` outside of an impl or trait\n+  --> $DIR/issue-23305.rs:15:12\n+   |\n+15 | impl ToNbt<Self> {}\n+   |            ^^^^ used outside of impl or trait\n+\n+error[E0038]: the trait `ToNbt` cannot be made into an object\n+  --> $DIR/issue-23305.rs:15:6\n+   |\n+15 | impl ToNbt<Self> {}\n+   |      ^^^^^^^^^^^ the trait `ToNbt` cannot be made into an object\n+   |\n+   = note: method `new` has no receiver\n+\n+error: aborting due to previous error\n+"}, {"sha": "6deb598b631f550e9c73d5b105d338e43d24cc6c", "filename": "src/test/ui/resolve/issue-2356.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,125 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Groom {\n+    fn shave(other: usize);\n+}\n+\n+pub struct cat {\n+  whiskers: isize,\n+}\n+\n+pub enum MaybeDog {\n+    Dog,\n+    NoDog\n+}\n+\n+impl MaybeDog {\n+  fn bark() {\n+    // If this provides a suggestion, it's a bug as MaybeDog doesn't impl Groom\n+    shave();\n+    //~^ ERROR unresolved function `shave`\n+    //~| NOTE no resolution found\n+  }\n+}\n+\n+impl Clone for cat {\n+  fn clone(&self) -> Self {\n+    clone();\n+    //~^ ERROR unresolved function `clone`\n+    //~| NOTE did you mean `self.clone(...)`?\n+    loop {}\n+  }\n+}\n+impl Default for cat {\n+  fn default() -> Self {\n+    default();\n+    //~^ ERROR unresolved function `default`\n+    //~| NOTE did you mean `Self::default`?\n+    loop {}\n+  }\n+}\n+\n+impl Groom for cat {\n+  fn shave(other: usize) {\n+    whiskers -= other;\n+    //~^ ERROR unresolved value `whiskers`\n+    //~| ERROR unresolved value `whiskers`\n+    //~| NOTE did you mean `self.whiskers`?\n+    //~| NOTE `self` value is only available in methods with `self` parameter\n+    shave(4);\n+    //~^ ERROR unresolved function `shave`\n+    //~| NOTE did you mean `Self::shave`?\n+    purr();\n+    //~^ ERROR unresolved function `purr`\n+    //~| NOTE no resolution found\n+  }\n+}\n+\n+impl cat {\n+    fn static_method() {}\n+\n+    fn purr_louder() {\n+        static_method();\n+        //~^ ERROR unresolved function `static_method`\n+        //~| NOTE no resolution found\n+        purr();\n+        //~^ ERROR unresolved function `purr`\n+        //~| NOTE no resolution found\n+        purr();\n+        //~^ ERROR unresolved function `purr`\n+        //~| NOTE no resolution found\n+        purr();\n+        //~^ ERROR unresolved function `purr`\n+        //~| NOTE no resolution found\n+    }\n+}\n+\n+impl cat {\n+  fn meow() {\n+    if self.whiskers > 3 {\n+        //~^ ERROR expected value, found module `self`\n+        //~| NOTE `self` value is only available in methods with `self` parameter\n+        println!(\"MEOW\");\n+    }\n+  }\n+\n+  fn purr(&self) {\n+    grow_older();\n+    //~^ ERROR unresolved function `grow_older`\n+    //~| NOTE no resolution found\n+    shave();\n+    //~^ ERROR unresolved function `shave`\n+    //~| NOTE no resolution found\n+  }\n+\n+  fn burn_whiskers(&mut self) {\n+    whiskers = 0;\n+    //~^ ERROR unresolved value `whiskers`\n+    //~| NOTE did you mean `self.whiskers`?\n+  }\n+\n+  pub fn grow_older(other:usize) {\n+    whiskers = 4;\n+    //~^ ERROR unresolved value `whiskers`\n+    //~| ERROR unresolved value `whiskers`\n+    //~| NOTE did you mean `self.whiskers`?\n+    //~| NOTE `self` value is only available in methods with `self` parameter\n+    purr_louder();\n+    //~^ ERROR unresolved function `purr_louder`\n+    //~| NOTE no resolution found\n+  }\n+}\n+\n+fn main() {\n+    self += 1;\n+    //~^ ERROR expected value, found module `self`\n+    //~| NOTE `self` value is only available in methods with `self` parameter\n+}"}, {"sha": "c15228cc262f67181e342257eb360781b36c81ba", "filename": "src/test/ui/resolve/issue-2356.stderr", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-2356.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,112 @@\n+error[E0425]: unresolved name `shave`\n+  --> $DIR/issue-2356.rs:27:5\n+   |\n+27 |     shave();\n+   |     ^^^^^ unresolved name\n+\n+error[E0425]: unresolved name `clone`\n+  --> $DIR/issue-2356.rs:35:5\n+   |\n+35 |     clone();\n+   |     ^^^^^ did you mean to call `self.clone`?\n+\n+error[E0425]: unresolved name `default`\n+  --> $DIR/issue-2356.rs:43:5\n+   |\n+43 |     default();\n+   |     ^^^^^^^ did you mean to call `self.default`?\n+\n+error[E0425]: unresolved name `whiskers`\n+  --> $DIR/issue-2356.rs:52:5\n+   |\n+52 |     whiskers -= other;\n+   |     ^^^^^^^^ unresolved name\n+   |\n+   = help: this is an associated function, you don't have access to this type's fields or methods\n+\n+error[E0425]: unresolved name `shave`\n+  --> $DIR/issue-2356.rs:57:5\n+   |\n+57 |     shave(4);\n+   |     ^^^^^ did you mean to call `Groom::shave`?\n+\n+error[E0425]: unresolved name `purr`\n+  --> $DIR/issue-2356.rs:60:5\n+   |\n+60 |     purr();\n+   |     ^^^^ unresolved name\n+\n+error[E0425]: unresolved name `static_method`\n+  --> $DIR/issue-2356.rs:70:9\n+   |\n+70 |         static_method();\n+   |         ^^^^^^^^^^^^^ unresolved name\n+\n+error[E0425]: unresolved name `purr`\n+  --> $DIR/issue-2356.rs:73:9\n+   |\n+73 |         purr();\n+   |         ^^^^ unresolved name\n+\n+error[E0425]: unresolved name `purr`\n+  --> $DIR/issue-2356.rs:76:9\n+   |\n+76 |         purr();\n+   |         ^^^^ unresolved name\n+\n+error[E0425]: unresolved name `purr`\n+  --> $DIR/issue-2356.rs:79:9\n+   |\n+79 |         purr();\n+   |         ^^^^ unresolved name\n+\n+error[E0424]: `self` is not available in a static method\n+  --> $DIR/issue-2356.rs:87:8\n+   |\n+87 |     if self.whiskers > 3 {\n+   |        ^^^^ not available in static method\n+   |\n+   = note: maybe a `self` argument is missing?\n+\n+error[E0425]: unresolved name `grow_older`\n+  --> $DIR/issue-2356.rs:95:5\n+   |\n+95 |     grow_older();\n+   |     ^^^^^^^^^^ unresolved name\n+\n+error[E0425]: unresolved name `shave`\n+  --> $DIR/issue-2356.rs:98:5\n+   |\n+98 |     shave();\n+   |     ^^^^^ unresolved name\n+\n+error[E0425]: unresolved name `whiskers`\n+   --> $DIR/issue-2356.rs:104:5\n+    |\n+104 |     whiskers = 0;\n+    |     ^^^^^^^^ did you mean `self.whiskers`?\n+\n+error[E0425]: unresolved name `whiskers`\n+   --> $DIR/issue-2356.rs:110:5\n+    |\n+110 |     whiskers = 4;\n+    |     ^^^^^^^^ unresolved name\n+    |\n+    = help: this is an associated function, you don't have access to this type's fields or methods\n+\n+error[E0425]: unresolved name `purr_louder`\n+   --> $DIR/issue-2356.rs:115:5\n+    |\n+115 |     purr_louder();\n+    |     ^^^^^^^^^^^ unresolved name\n+\n+error[E0425]: unresolved name `self`\n+   --> $DIR/issue-2356.rs:122:5\n+    |\n+122 |     self += 1;\n+    |     ^^^^ unresolved name\n+    |\n+    = help: module `self` cannot be used as an expression\n+\n+error: aborting due to 17 previous errors\n+"}, {"sha": "0d562cab6b8b1a7efa5645133fcd5f5cc4bf2df1", "filename": "src/test/ui/resolve/issue-24968.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -9,7 +9,8 @@\n // except according to those terms.\n \n fn foo(_: Self) {\n-    //~^ ERROR use of `Self` outside of an impl or trait\n+//~^ ERROR unresolved type `Self`\n+//~| NOTE `Self` is only available in traits and impls\n }\n \n fn main() {}", "previous_filename": "src/test/compile-fail/issue-24968.rs"}, {"sha": "f8068d29fd6b3f4a92dd2de1141da650b0b3c61e", "filename": "src/test/ui/resolve/issue-24968.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-24968.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,8 @@\n+error[E0411]: use of `Self` outside of an impl or trait\n+  --> $DIR/issue-24968.rs:11:11\n+   |\n+11 | fn foo(_: Self) {\n+   |           ^^^^ used outside of impl or trait\n+\n+error: aborting due to previous error\n+"}, {"sha": "a97cc5e4101fca5b3a703cd2c30d74e422b5844b", "filename": "src/test/ui/resolve/issue-33876.rs", "status": "renamed", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-33876.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-33876.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-33876.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -17,7 +17,6 @@ trait Bar {}\n impl Bar for Foo {}\n \n fn main() {\n-    let any: &Any = &Bar; //~ ERROR E0425\n-                          //~| HELP trait `Bar`\n+    let any: &Any = &Bar; //~ ERROR expected value, found trait `Bar`\n     if any.is::<u32>() { println!(\"u32\"); }\n }", "previous_filename": "src/test/compile-fail/issue-33876.rs"}, {"sha": "ecc3a2b30e0bc1d8f1edd6e0d09542320f9a09b1", "filename": "src/test/ui/resolve/issue-33876.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-33876.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-33876.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-33876.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,10 @@\n+error[E0425]: unresolved name `Bar`\n+  --> $DIR/issue-33876.rs:20:22\n+   |\n+20 |     let any: &Any = &Bar; //~ ERROR expected value, found trait `Bar`\n+   |                      ^^^ unresolved name\n+   |\n+   = help: trait `Bar` cannot be used as an expression\n+\n+error: aborting due to previous error\n+"}, {"sha": "130647966f2d126760c07c634889ee17209b80cb", "filename": "src/test/ui/resolve/issue-3907-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "previous_filename": "src/test/compile-fail/issue-3907-2.rs"}, {"sha": "ef02250e21cdfe1f82ffa1613ed2715275403ecc", "filename": "src/test/ui/resolve/issue-3907-2.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907-2.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,10 @@\n+error[E0038]: the trait `issue_3907::Foo` cannot be made into an object\n+  --> $DIR/issue-3907-2.rs:20:1\n+   |\n+20 | fn bar(_x: Foo) {}\n+   | ^^^^^^^^^^^^^^^^^^ the trait `issue_3907::Foo` cannot be made into an object\n+   |\n+   = note: method `bar` has no receiver\n+\n+error: aborting due to previous error\n+"}, {"sha": "0e54e68df0dcd2c59f56744d01512f9d27b8fc7d", "filename": "src/test/ui/resolve/issue-3907.rs", "status": "renamed", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -17,9 +17,7 @@ struct S {\n     name: isize\n }\n \n-impl Foo for S { //~ ERROR: `Foo` is not a trait\n-                 //~| NOTE: expected trait, found type alias\n-                 //~| NOTE: type aliases cannot be used for traits\n+impl Foo for S { //~ ERROR expected trait, found type alias `Foo`\n     fn bar() { }\n }\n ", "previous_filename": "src/test/compile-fail/issue-3907.rs"}, {"sha": "4d0cd93d31fa12a86ee2b8f3b49dbd65400587df", "filename": "src/test/ui/resolve/issue-3907.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-3907.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,10 @@\n+error[E0404]: `Foo` is not a trait\n+  --> $DIR/issue-3907.rs:20:6\n+   |\n+20 | impl Foo for S { //~ ERROR expected trait, found type alias `Foo`\n+   |      ^^^ expected trait, found type alias\n+   |\n+   = note: type aliases cannot be used for traits\n+\n+error: cannot continue compilation due to previous error\n+"}, {"sha": "83ff95cc2ea48f59c0086e69e970eb4a3aa1752f", "filename": "src/test/ui/resolve/issue-5035-2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "previous_filename": "src/test/compile-fail/issue-5035-2.rs"}, {"sha": "72b1578e0d020f055fe12c5d5019aaaa159e40cb", "filename": "src/test/ui/resolve/issue-5035-2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035-2.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,11 @@\n+error[E0277]: the trait bound `I + 'static: std::marker::Sized` is not satisfied\n+  --> $DIR/issue-5035-2.rs:14:8\n+   |\n+14 | fn foo(_x: K) {} //~ ERROR: `I + 'static: std::marker::Sized` is not satisfied\n+   |        ^^ the trait `std::marker::Sized` is not implemented for `I + 'static`\n+   |\n+   = note: `I + 'static` does not have a constant size known at compile-time\n+   = note: all local variables must have a statically known size\n+\n+error: aborting due to previous error\n+"}, {"sha": "6263e6f6db44fc816ea21f2b0ebb97b6ab33d533", "filename": "src/test/ui/resolve/issue-5035.rs", "status": "renamed", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -10,9 +10,8 @@\n \n trait I {}\n type K = I;\n-impl K for isize {} //~ ERROR: `K` is not a trait\n-                    //~| NOTE: expected trait, found type alias\n-                    //~| NOTE: aliases cannot be used for traits\n+impl K for isize {} //~ ERROR expected trait, found type alias `K`\n+                    //~| NOTE type aliases cannot be used for traits\n \n use ImportError; //~ ERROR unresolved import `ImportError` [E0432]\n                  //~^ no `ImportError` in the root", "previous_filename": "src/test/compile-fail/issue-5035.rs"}, {"sha": "def1aba694b470ba0b5de71af92b881371e5e700", "filename": "src/test/ui/resolve/issue-5035.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-5035.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,16 @@\n+error[E0432]: unresolved import `ImportError`\n+  --> $DIR/issue-5035.rs:16:5\n+   |\n+16 | use ImportError; //~ ERROR unresolved import `ImportError` [E0432]\n+   |     ^^^^^^^^^^^ no `ImportError` in the root\n+\n+error[E0404]: `K` is not a trait\n+  --> $DIR/issue-5035.rs:13:6\n+   |\n+13 | impl K for isize {} //~ ERROR expected trait, found type alias `K`\n+   |      ^ expected trait, found type alias\n+   |\n+   = note: type aliases cannot be used for traits\n+\n+error: cannot continue compilation due to previous error\n+"}, {"sha": "b391ddf346938f1fe24c6f91c462e4855c980c33", "filename": "src/test/ui/resolve/issue-6702.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -14,6 +14,6 @@ struct Monster {\n \n \n fn main() {\n-    let _m = Monster(); //~ ERROR `Monster` is the name of a struct or\n-    //~^ HELP did you mean to write: `Monster { /* fields */ }`?\n+    let _m = Monster(); //~ ERROR expected function, found struct `Monster`\n+                        //~^ NOTE did you mean `Monster { /* fields */ }`?\n }", "previous_filename": "src/test/compile-fail/issue-6702.rs"}, {"sha": "c8df55225e26cc7655ca97b388dce7c9d485a255", "filename": "src/test/ui/resolve/issue-6702.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fissue-6702.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,10 @@\n+error[E0423]: `Monster` is the name of a struct or struct variant, but this expression uses it like a function name\n+  --> $DIR/issue-6702.rs:17:14\n+   |\n+17 |     let _m = Monster(); //~ ERROR expected function, found struct `Monster`\n+   |              ^^^^^^^ struct called like a function\n+   |\n+   = help: did you mean to write: `Monster { /* fields */ }`?\n+\n+error: aborting due to previous error\n+"}, {"sha": "53e26ddafec37d8acf9e9310136be4054867a26c", "filename": "src/test/ui/resolve/resolve-assoc-suggestions.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,58 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Make sure associated items are recommended only in appropriate contexts.\n+\n+struct S {\n+    field: u8,\n+}\n+\n+trait Tr {\n+    fn method(&self);\n+    type Type;\n+}\n+\n+impl Tr for S {\n+    type Type = u8;\n+\n+    fn method(&self) {\n+        let _: field;\n+        //~^ ERROR unresolved type `field`\n+        //~| NOTE no resolution found\n+        let field(..);\n+        //~^ ERROR unresolved tuple struct/variant `field`\n+        //~| NOTE no resolution found\n+        field;\n+        //~^ ERROR unresolved value `field`\n+        //~| NOTE did you mean `self.field`?\n+\n+        let _: Type;\n+        //~^ ERROR unresolved type `Type`\n+        //~| NOTE did you mean `Self::Type`?\n+        let Type(..);\n+        //~^ ERROR unresolved tuple struct/variant `Type`\n+        //~| NOTE no resolution found\n+        Type;\n+        //~^ ERROR unresolved value `Type`\n+        //~| NOTE no resolution found\n+\n+        let _: method;\n+        //~^ ERROR unresolved type `method`\n+        //~| NOTE no resolution found\n+        let method(..);\n+        //~^ ERROR unresolved tuple struct/variant `method`\n+        //~| NOTE no resolution found\n+        method;\n+        //~^ ERROR unresolved value `method`\n+        //~| NOTE did you mean `self.method(...)`?\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "09c66fa6c2816b65d4bfc8fa958764a714839bb4", "filename": "src/test/ui/resolve/resolve-assoc-suggestions.stderr", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-assoc-suggestions.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,62 @@\n+error[E0412]: type name `field` is undefined or not in scope\n+  --> $DIR/resolve-assoc-suggestions.rs:26:16\n+   |\n+26 |         let _: field;\n+   |                ^^^^^ undefined or not in scope\n+   |\n+   = help: no candidates by the name of `field` found in your project; maybe you misspelled the name or forgot to import an external crate?\n+\n+error[E0531]: unresolved tuple struct/variant `field`\n+  --> $DIR/resolve-assoc-suggestions.rs:29:13\n+   |\n+29 |         let field(..);\n+   |             ^^^^^\n+\n+error[E0425]: unresolved name `field`\n+  --> $DIR/resolve-assoc-suggestions.rs:32:9\n+   |\n+32 |         field;\n+   |         ^^^^^ did you mean `self.field`?\n+\n+error[E0412]: type name `Type` is undefined or not in scope\n+  --> $DIR/resolve-assoc-suggestions.rs:36:16\n+   |\n+36 |         let _: Type;\n+   |                ^^^^ undefined or not in scope\n+   |\n+   = help: no candidates by the name of `Type` found in your project; maybe you misspelled the name or forgot to import an external crate?\n+\n+error[E0531]: unresolved tuple struct/variant `Type`\n+  --> $DIR/resolve-assoc-suggestions.rs:39:13\n+   |\n+39 |         let Type(..);\n+   |             ^^^^\n+\n+error[E0425]: unresolved name `Type`\n+  --> $DIR/resolve-assoc-suggestions.rs:42:9\n+   |\n+42 |         Type;\n+   |         ^^^^ did you mean to call `self.Type`?\n+\n+error[E0412]: type name `method` is undefined or not in scope\n+  --> $DIR/resolve-assoc-suggestions.rs:46:16\n+   |\n+46 |         let _: method;\n+   |                ^^^^^^ undefined or not in scope\n+   |\n+   = help: no candidates by the name of `method` found in your project; maybe you misspelled the name or forgot to import an external crate?\n+\n+error[E0531]: unresolved tuple struct/variant `method`\n+  --> $DIR/resolve-assoc-suggestions.rs:49:13\n+   |\n+49 |         let method(..);\n+   |             ^^^^^^\n+\n+error[E0425]: unresolved name `method`\n+  --> $DIR/resolve-assoc-suggestions.rs:52:9\n+   |\n+52 |         method;\n+   |         ^^^^^^ did you mean to call `self.method`?\n+\n+error: aborting due to 9 previous errors\n+"}, {"sha": "72fd9a79376299b1769bc9d99400e348c1c45329", "filename": "src/test/ui/resolve/resolve-hint-macro.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -10,6 +10,6 @@\n \n fn main() {\n     assert(true);\n-    //~^ ERROR unresolved name `assert`\n-    //~| NOTE did you mean the macro `assert!`?\n+    //~^ ERROR expected function, found macro `assert`\n+    //~| NOTE did you mean `assert!(...)`?\n }", "previous_filename": "src/test/compile-fail/resolve-hint-macro.rs"}, {"sha": "ef7c2f7e632f081f99de693536354951f2ac0d37", "filename": "src/test/ui/resolve/resolve-hint-macro.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-hint-macro.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,8 @@\n+error[E0425]: unresolved name `assert`\n+  --> $DIR/resolve-hint-macro.rs:12:5\n+   |\n+12 |     assert(true);\n+   |     ^^^^^^ did you mean the macro `assert!`?\n+\n+error: aborting due to previous error\n+"}, {"sha": "95289e23f9e81a4b19b6b425c106a6248ff6d758", "filename": "src/test/ui/resolve/resolve-speculative-adjustment.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Make sure speculative path resolution works properly when resolution\n+// adjustment happens and no extra errors is reported.\n+\n+struct S {\n+    field: u8,\n+}\n+\n+trait Tr {\n+    fn method(&self);\n+}\n+\n+impl Tr for S {\n+    fn method(&self) {\n+        fn g() {\n+            // Speculative resolution of `Self` and `self` silently fails,\n+            // \"did you mean\" messages are not printed.\n+            field;\n+            //~^ ERROR unresolved value `field`\n+            //~| NOTE no resolution found\n+            method();\n+            //~^ ERROR unresolved function `method`\n+            //~| NOTE no resolution found\n+        }\n+\n+        field;\n+        //~^ ERROR unresolved value `field`\n+        //~| NOTE did you mean `self.field`?\n+        method();\n+        //~^ ERROR unresolved function `method`\n+        //~| NOTE did you mean `self.method(...)`?\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "7c1547221bac78b4ae302911622b51c6765a41af", "filename": "src/test/ui/resolve/resolve-speculative-adjustment.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fresolve-speculative-adjustment.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,26 @@\n+error[E0425]: unresolved name `field`\n+  --> $DIR/resolve-speculative-adjustment.rs:27:13\n+   |\n+27 |             field;\n+   |             ^^^^^ did you mean `self.field`?\n+\n+error[E0425]: unresolved name `method`\n+  --> $DIR/resolve-speculative-adjustment.rs:30:13\n+   |\n+30 |             method();\n+   |             ^^^^^^ did you mean to call `self.method`?\n+\n+error[E0425]: unresolved name `field`\n+  --> $DIR/resolve-speculative-adjustment.rs:35:9\n+   |\n+35 |         field;\n+   |         ^^^^^ did you mean `self.field`?\n+\n+error[E0425]: unresolved name `method`\n+  --> $DIR/resolve-speculative-adjustment.rs:38:9\n+   |\n+38 |         method();\n+   |         ^^^^^^ did you mean to call `self.method`?\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "789bdfb414db49b61a1c3dc51cdadbea17f31cbf", "filename": "src/test/ui/resolve/suggest-path-instead-of-mod-dot-item.rs", "status": "renamed", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -25,52 +25,52 @@ pub mod a {\n \n fn h1() -> i32 {\n     a.I\n-        //~^ ERROR E0425\n-        //~| HELP to reference an item from the `a` module, use `a::I`\n+    //~^ ERROR expected value, found module `a`\n+    //~| NOTE did you mean `a::I`?\n }\n \n fn h2() -> i32 {\n     a.g()\n-        //~^ ERROR E0425\n-        //~| HELP to call a function from the `a` module, use `a::g(..)`\n+    //~^ ERROR expected value, found module `a`\n+    //~| NOTE did you mean `a::g(...)`?\n }\n \n fn h3() -> i32 {\n     a.b.J\n-        //~^ ERROR E0425\n-        //~| HELP to reference an item from the `a` module, use `a::b`\n+    //~^ ERROR expected value, found module `a`\n+    //~| NOTE did you mean `a::b`?\n }\n \n fn h4() -> i32 {\n     a::b.J\n-        //~^ ERROR E0425\n-        //~| HELP to reference an item from the `a::b` module, use `a::b::J`\n+    //~^ ERROR expected value, found module `a::b`\n+    //~| NOTE did you mean `a::b::J`?\n }\n \n fn h5() {\n     a.b.f();\n-        //~^ ERROR E0425\n-        //~| HELP to reference an item from the `a` module, use `a::b`\n+    //~^ ERROR expected value, found module `a`\n+    //~| NOTE did you mean `a::b`?\n     let v = Vec::new();\n     v.push(a::b);\n-        //~^ ERROR E0425\n-        //~| HELP module `a::b` cannot be used as an expression\n+    //~^ ERROR expected value, found module `a::b`\n+    //~| NOTE not a value\n }\n \n fn h6() -> i32 {\n     a::b.f()\n-        //~^ ERROR E0425\n-        //~| HELP to call a function from the `a::b` module, use `a::b::f(..)`\n+    //~^ ERROR expected value, found module `a::b`\n+    //~| NOTE did you mean `a::b::f(...)`?\n }\n \n fn h7() {\n     a::b\n-        //~^ ERROR E0425\n-        //~| HELP module `a::b` cannot be used as an expression\n+    //~^ ERROR expected value, found module `a::b`\n+    //~| NOTE not a value\n }\n \n fn h8() -> i32 {\n     a::b()\n-        //~^ ERROR E0425\n-        //~| HELP module `a::b` cannot be used as an expression\n+    //~^ ERROR expected function, found module `a::b`\n+    //~| NOTE not a function\n }", "previous_filename": "src/test/compile-fail/suggest-path-instead-of-mod-dot-item.rs"}, {"sha": "bd98223ffd2a08cde68d13476a4f1b076fbe1193", "filename": "src/test/ui/resolve/suggest-path-instead-of-mod-dot-item.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fsuggest-path-instead-of-mod-dot-item.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,76 @@\n+error[E0425]: unresolved name `a`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:27:5\n+   |\n+27 |     a.I\n+   |     ^ unresolved name\n+   |\n+   = help: to reference an item from the `a` module, use `a::I`\n+\n+error[E0425]: unresolved name `a`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:33:5\n+   |\n+33 |     a.g()\n+   |     ^ unresolved name\n+   |\n+   = help: to call a function from the `a` module, use `a::g(..)`\n+\n+error[E0425]: unresolved name `a`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:39:5\n+   |\n+39 |     a.b.J\n+   |     ^ unresolved name\n+   |\n+   = help: to reference an item from the `a` module, use `a::b`\n+\n+error[E0425]: unresolved name `a::b`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:45:5\n+   |\n+45 |     a::b.J\n+   |     ^^^^ unresolved name\n+   |\n+   = help: to reference an item from the `a::b` module, use `a::b::J`\n+\n+error[E0425]: unresolved name `a`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:51:5\n+   |\n+51 |     a.b.f();\n+   |     ^ unresolved name\n+   |\n+   = help: to reference an item from the `a` module, use `a::b`\n+\n+error[E0425]: unresolved name `a::b`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:55:12\n+   |\n+55 |     v.push(a::b);\n+   |            ^^^^ unresolved name\n+   |\n+   = help: module `a::b` cannot be used as an expression\n+\n+error[E0425]: unresolved name `a::b`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:61:5\n+   |\n+61 |     a::b.f()\n+   |     ^^^^ unresolved name\n+   |\n+   = help: to call a function from the `a::b` module, use `a::b::f(..)`\n+\n+error[E0425]: unresolved name `a::b`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:67:5\n+   |\n+67 |     a::b\n+   |     ^^^^ unresolved name\n+   |\n+   = help: module `a::b` cannot be used as an expression\n+\n+error[E0425]: unresolved name `a::b`\n+  --> $DIR/suggest-path-instead-of-mod-dot-item.rs:73:5\n+   |\n+73 |     a::b()\n+   |     ^^^^ unresolved name\n+   |\n+   = help: module `a::b` cannot be used as an expression\n+\n+error: main function not found\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "6fa1260d18041820687c2234762f58dd7b18e897", "filename": "src/test/ui/resolve/token-error-correct-2.rs", "status": "renamed", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -11,8 +11,9 @@\n // Test that we do some basic error correcton in the tokeniser (and don't ICE).\n \n fn main() {\n-    if foo { //~ NOTE: unclosed delimiter\n-    //~^ ERROR: unresolved name `foo`\n-    //~| NOTE unresolved name\n+    if foo {\n+    //~^ NOTE: unclosed delimiter\n+    //~| ERROR: unresolved value `foo`\n+    //~| NOTE: no resolution found\n     ) //~ ERROR: incorrect close delimiter: `)`\n }", "previous_filename": "src/test/compile-fail/token-error-correct-2.rs"}, {"sha": "77927b14e8c88d20e0f3f01bd65c23735de47399", "filename": "src/test/ui/resolve/token-error-correct-2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-2.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,20 @@\n+error: incorrect close delimiter: `)`\n+  --> $DIR/token-error-correct-2.rs:18:5\n+   |\n+18 |     ) //~ ERROR: incorrect close delimiter: `)`\n+   |     ^\n+   |\n+note: unclosed delimiter\n+  --> $DIR/token-error-correct-2.rs:14:12\n+   |\n+14 |     if foo {\n+   |            ^\n+\n+error[E0425]: unresolved name `foo`\n+  --> $DIR/token-error-correct-2.rs:14:8\n+   |\n+14 |     if foo {\n+   |        ^^^ unresolved name\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "f72b7adf593a962c171f61809798f1709f5b9abd", "filename": "src/test/ui/resolve/token-error-correct-3.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -18,8 +18,8 @@ pub mod raw {\n     pub fn ensure_dir_exists<P: AsRef<Path>, F: FnOnce(&Path)>(path: P,\n                                                                callback: F)\n                                                                -> io::Result<bool> {\n-        if !is_directory(path.as_ref()) { //~ ERROR: unresolved name `is_directory`\n-                                          //~| NOTE unresolved name\n+        if !is_directory(path.as_ref()) { //~ ERROR: unresolved function `is_directory`\n+                                          //~^ NOTE: no resolution found\n             callback(path.as_ref();  //~ NOTE: unclosed delimiter\n                      //~^ ERROR: expected one of\n             fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types", "previous_filename": "src/test/compile-fail/token-error-correct-3.rs"}, {"sha": "e210449a39826a491ee105f8e500a58b44faf0f4", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,41 @@\n+error: incorrect close delimiter: `}`\n+  --> $DIR/token-error-correct-3.rs:29:9\n+   |\n+29 |         } else { //~ ERROR: incorrect close delimiter: `}`\n+   |         ^\n+   |\n+note: unclosed delimiter\n+  --> $DIR/token-error-correct-3.rs:23:21\n+   |\n+23 |             callback(path.as_ref();  //~ NOTE: unclosed delimiter\n+   |                     ^\n+\n+error: expected one of `,`, `.`, `?`, or an operator, found `;`\n+  --> $DIR/token-error-correct-3.rs:23:35\n+   |\n+23 |             callback(path.as_ref();  //~ NOTE: unclosed delimiter\n+   |                                   ^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `)`\n+  --> $DIR/token-error-correct-3.rs:29:9\n+   |\n+29 |         } else { //~ ERROR: incorrect close delimiter: `}`\n+   |         ^\n+\n+error[E0425]: unresolved name `is_directory`\n+  --> $DIR/token-error-correct-3.rs:21:13\n+   |\n+21 |         if !is_directory(path.as_ref()) { //~ ERROR: unresolved function `is_directory`\n+   |             ^^^^^^^^^^^^ unresolved name\n+\n+error[E0308]: mismatched types\n+  --> $DIR/token-error-correct-3.rs:25:13\n+   |\n+25 |             fs::create_dir_all(path.as_ref()).map(|()| true) //~ ERROR: mismatched types\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found enum `std::result::Result`\n+   |\n+   = note: expected type `()`\n+   = note:    found type `std::result::Result<bool, std::io::Error>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "5fd35e51336f3fd57b38b163ab00df2f37e6433e", "filename": "src/test/ui/resolve/token-error-correct.rs", "status": "renamed", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -11,14 +11,16 @@\n // Test that we do some basic error correcton in the tokeniser.\n \n fn main() {\n-    foo(bar(; //~ NOTE: unclosed delimiter\n+    foo(bar(;\n     //~^ NOTE: unclosed delimiter\n-    //~^^ ERROR: expected expression, found `;`\n-    //~^^^ ERROR: unresolved name `bar`\n-    //~^^^^ ERROR: unresolved name `foo`\n-    //~^^^^^ ERROR: expected one of `)`, `,`, `.`, `<`, `?`\n-    //~| NOTE unresolved name\n-    //~| NOTE unresolved name\n-} //~ ERROR: incorrect close delimiter: `}`\n+    //~| NOTE: unclosed delimiter\n+    //~| ERROR: expected expression, found `;`\n+    //~| ERROR: unresolved function `foo`\n+    //~| NOTE: no resolution found\n+    //~| ERROR: unresolved function `bar`\n+    //~| NOTE: no resolution found\n+    //~| ERROR: expected one of `)`, `,`, `.`, `<`, `?`\n+}\n //~^ ERROR: incorrect close delimiter: `}`\n-//~^^ ERROR: expected expression, found `)`\n+//~| ERROR: incorrect close delimiter: `}`\n+//~| ERROR: expected expression, found `)`", "previous_filename": "src/test/compile-fail/token-error-correct.rs"}, {"sha": "d8af4e842a32af5df5822f5eaf48e57172660fbd", "filename": "src/test/ui/resolve/token-error-correct.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,56 @@\n+error: incorrect close delimiter: `}`\n+  --> $DIR/token-error-correct.rs:23:1\n+   |\n+23 | }\n+   | ^\n+   |\n+note: unclosed delimiter\n+  --> $DIR/token-error-correct.rs:14:12\n+   |\n+14 |     foo(bar(;\n+   |            ^\n+\n+error: incorrect close delimiter: `}`\n+  --> $DIR/token-error-correct.rs:23:1\n+   |\n+23 | }\n+   | ^\n+   |\n+note: unclosed delimiter\n+  --> $DIR/token-error-correct.rs:14:8\n+   |\n+14 |     foo(bar(;\n+   |        ^\n+\n+error: expected expression, found `;`\n+  --> $DIR/token-error-correct.rs:14:13\n+   |\n+14 |     foo(bar(;\n+   |             ^\n+\n+error: expected one of `)`, `,`, `.`, `<`, `?`, `break`, `continue`, `false`, `for`, `if`, `loop`, `match`, `move`, `return`, `true`, `unsafe`, `while`, or an operator, found `;`\n+  --> $DIR/token-error-correct.rs:14:13\n+   |\n+14 |     foo(bar(;\n+   |             ^\n+\n+error: expected expression, found `)`\n+  --> $DIR/token-error-correct.rs:23:1\n+   |\n+23 | }\n+   | ^\n+\n+error[E0425]: unresolved name `foo`\n+  --> $DIR/token-error-correct.rs:14:5\n+   |\n+14 |     foo(bar(;\n+   |     ^^^ unresolved name\n+\n+error[E0425]: unresolved name `bar`\n+  --> $DIR/token-error-correct.rs:14:9\n+   |\n+14 |     foo(bar(;\n+   |         ^^^ unresolved name\n+\n+error: aborting due to 7 previous errors\n+"}, {"sha": "57f6ddd2d3c6cfd094bbff3b6c828a7c807ffde5", "filename": "src/test/ui/resolve/unboxed-closure-sugar-nonexistent-trait.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Funboxed-closure-sugar-nonexistent-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Funboxed-closure-sugar-nonexistent-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Funboxed-closure-sugar-nonexistent-trait.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn f<F:Nonexist(isize) -> isize>(x: F) {}\n+//~^ ERROR unresolved trait `Nonexist`\n+//~| NOTE no resolution found\n+\n+type Typedef = isize;\n+\n+fn g<F:Typedef(isize) -> isize>(x: F) {}\n+//~^ ERROR expected trait, found type alias `Typedef`\n+//~| NOTE type aliases cannot be used for traits\n+\n+fn main() {}"}, {"sha": "a21c114c3b16c8f573297657e8ebb637a42ea2ee", "filename": "src/test/ui/resolve/unboxed-closure-sugar-nonexistent-trait.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Funboxed-closure-sugar-nonexistent-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Funboxed-closure-sugar-nonexistent-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Funboxed-closure-sugar-nonexistent-trait.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,18 @@\n+error[E0405]: trait `Nonexist` is not in scope\n+  --> $DIR/unboxed-closure-sugar-nonexistent-trait.rs:11:8\n+   |\n+11 | fn f<F:Nonexist(isize) -> isize>(x: F) {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^^ `Nonexist` is not in scope\n+   |\n+   = help: no candidates by the name of `Nonexist` found in your project; maybe you misspelled the name or forgot to import an external crate?\n+\n+error[E0404]: `Typedef` is not a trait\n+  --> $DIR/unboxed-closure-sugar-nonexistent-trait.rs:17:8\n+   |\n+17 | fn g<F:Typedef(isize) -> isize>(x: F) {}\n+   |        ^^^^^^^^^^^^^^^^^^^^^^^ expected trait, found type alias\n+   |\n+   = note: type aliases cannot be used for traits\n+\n+error: cannot continue compilation due to previous error\n+"}, {"sha": "19beabd88232edac294e3f06ffb5e7600d475caa", "filename": "src/test/ui/resolve/unresolved_static_type_field.rs", "status": "renamed", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.rs?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -16,8 +16,11 @@ struct Foo {\n \n impl Foo {\n     fn bar() {\n-        f(cx); //~ ERROR E0425\n-               //~| HELP this is an associated function\n+        f(cx);\n+        //~^ ERROR unresolved value `cx`\n+        //~| ERROR unresolved value `cx`\n+        //~| NOTE did you mean `self.cx`?\n+        //~| NOTE `self` value is only available in methods with `self` parameter\n     }\n }\n ", "previous_filename": "src/test/compile-fail/unresolved_static_type_field.rs"}, {"sha": "ffda25db3b700d333277da3da95fdd40a3724329", "filename": "src/test/ui/resolve/unresolved_static_type_field.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3fb676afb061edc708030a5ed1e5f3983e0beaa5/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Funresolved_static_type_field.stderr?ref=3fb676afb061edc708030a5ed1e5f3983e0beaa5", "patch": "@@ -0,0 +1,10 @@\n+error[E0425]: unresolved name `cx`\n+  --> $DIR/unresolved_static_type_field.rs:19:11\n+   |\n+19 |         f(cx);\n+   |           ^^ unresolved name\n+   |\n+   = help: this is an associated function, you don't have access to this type's fields or methods\n+\n+error: aborting due to previous error\n+"}]}