{"sha": "c522669f00865c6bfc9160b2c810499ef8fa5552", "node_id": "C_kwDOAAsO6NoAKGM1MjI2NjlmMDA4NjVjNmJmYzkxNjBiMmM4MTA0OTllZjhmYTU1NTI", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-03T13:46:17Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-06-03T13:46:17Z"}, "message": "Remove dead code", "tree": {"sha": "cbccb0fdbb5e90c59714cf0a8c91f3d6ee0e265d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cbccb0fdbb5e90c59714cf0a8c91f3d6ee0e265d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c522669f00865c6bfc9160b2c810499ef8fa5552", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c522669f00865c6bfc9160b2c810499ef8fa5552", "html_url": "https://github.com/rust-lang/rust/commit/c522669f00865c6bfc9160b2c810499ef8fa5552", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c522669f00865c6bfc9160b2c810499ef8fa5552/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5dcc77b40a19dada837e50374d1851754f5eb2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5dcc77b40a19dada837e50374d1851754f5eb2a", "html_url": "https://github.com/rust-lang/rust/commit/c5dcc77b40a19dada837e50374d1851754f5eb2a"}], "stats": {"total": 81, "additions": 2, "deletions": 79}, "files": [{"sha": "22068096ba08b910992918d9ab41bc4992c21d96", "filename": "crates/ide-completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c522669f00865c6bfc9160b2c810499ef8fa5552/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c522669f00865c6bfc9160b2c810499ef8fa5552/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=c522669f00865c6bfc9160b2c810499ef8fa5552", "patch": "@@ -110,10 +110,8 @@ pub(crate) fn import_on_the_fly(acc: &mut Completions, ctx: &CompletionContext)\n     if !ctx.config.enable_imports_on_the_fly {\n         return None;\n     }\n-    if matches!(ctx.path_kind(), Some(PathKind::Vis { .. } | PathKind::Use))\n+    if matches!(ctx.path_kind(), Some(PathKind::Vis { .. } | PathKind::Use | PathKind::Item { .. }))\n         || ctx.is_path_disallowed()\n-        || ctx.expects_item()\n-        || ctx.expects_assoc_item()\n     {\n         return None;\n     }"}, {"sha": "f8073f543104d93d812649bc9b9529b56679c615", "filename": "crates/ide-completion/src/context.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c522669f00865c6bfc9160b2c810499ef8fa5552/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c522669f00865c6bfc9160b2c810499ef8fa5552/crates%2Fide-completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcontext.rs?ref=c522669f00865c6bfc9160b2c810499ef8fa5552", "patch": "@@ -334,14 +334,6 @@ impl<'a> CompletionContext<'a> {\n         self.dot_receiver().is_some()\n     }\n \n-    pub(crate) fn expects_assoc_item(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::Trait | ImmediateLocation::Impl))\n-    }\n-\n-    pub(crate) fn expects_item(&self) -> bool {\n-        matches!(self.completion_location, Some(ImmediateLocation::ItemList))\n-    }\n-\n     // FIXME: This shouldn't exist\n     pub(crate) fn expects_generic_arg(&self) -> bool {\n         matches!(self.completion_location, Some(ImmediateLocation::GenericArgList(_)))"}, {"sha": "27b271dde46a39d3912e4eb5c3152a6175550ee9", "filename": "crates/ide-completion/src/patterns.rs", "status": "modified", "additions": 1, "deletions": 68, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/c522669f00865c6bfc9160b2c810499ef8fa5552/crates%2Fide-completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c522669f00865c6bfc9160b2c810499ef8fa5552/crates%2Fide-completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fpatterns.rs?ref=c522669f00865c6bfc9160b2c810499ef8fa5552", "patch": "@@ -39,13 +39,7 @@ pub(crate) enum TypeAnnotation {\n /// from which file the nodes are.\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub(crate) enum ImmediateLocation {\n-    Impl,\n-    Trait,\n-    TupleField,\n     RefExpr,\n-    IdentPat,\n-    StmtList,\n-    ItemList,\n     TypeBound,\n     /// Original file ast node\n     TypeAnnotation(TypeAnnotation),\n@@ -140,30 +134,14 @@ pub(crate) fn determine_location(\n             _ => parent,\n         },\n         // SourceFile\n-        None => {\n-            return match node.kind() {\n-                MACRO_ITEMS | SOURCE_FILE => Some(ImmediateLocation::ItemList),\n-                _ => None,\n-            }\n-        }\n+        None => return None,\n     };\n \n     let res = match_ast! {\n         match parent {\n-            ast::IdentPat(_) => ImmediateLocation::IdentPat,\n-            ast::StmtList(_) => ImmediateLocation::StmtList,\n-            ast::SourceFile(_) => ImmediateLocation::ItemList,\n-            ast::ItemList(_) => ImmediateLocation::ItemList,\n             ast::RefExpr(_) => ImmediateLocation::RefExpr,\n-            ast::TupleField(_) => ImmediateLocation::TupleField,\n-            ast::TupleFieldList(_) => ImmediateLocation::TupleField,\n             ast::TypeBound(_) => ImmediateLocation::TypeBound,\n             ast::TypeBoundList(_) => ImmediateLocation::TypeBound,\n-            ast::AssocItemList(it) => match it.syntax().parent().map(|it| it.kind()) {\n-                Some(IMPL) => ImmediateLocation::Impl,\n-                Some(TRAIT) => ImmediateLocation::Trait,\n-                _ => return None,\n-            },\n             ast::GenericArgList(_) => sema\n                 .find_node_at_offset_with_macros(original_file, offset)\n                 .map(ImmediateLocation::GenericArgList)?,\n@@ -359,56 +337,11 @@ mod tests {\n         });\n     }\n \n-    #[test]\n-    fn test_trait_loc() {\n-        check_location(r\"trait A { f$0 }\", ImmediateLocation::Trait);\n-        check_location(r\"trait A { #[attr] f$0 }\", ImmediateLocation::Trait);\n-        check_location(r\"trait A { f$0 fn f() {} }\", ImmediateLocation::Trait);\n-        check_location(r\"trait A { fn f() {} f$0 }\", ImmediateLocation::Trait);\n-        check_location(r\"trait A$0 {}\", None);\n-        check_location(r\"trait A { fn f$0 }\", None);\n-    }\n-\n-    #[test]\n-    fn test_impl_loc() {\n-        check_location(r\"impl A { f$0 }\", ImmediateLocation::Impl);\n-        check_location(r\"impl A { #[attr] f$0 }\", ImmediateLocation::Impl);\n-        check_location(r\"impl A { f$0 fn f() {} }\", ImmediateLocation::Impl);\n-        check_location(r\"impl A { fn f() {} f$0 }\", ImmediateLocation::Impl);\n-        check_location(r\"impl A$0 {}\", None);\n-        check_location(r\"impl A { fn f$0 }\", None);\n-    }\n-\n-    #[test]\n-    fn test_block_expr_loc() {\n-        check_location(r\"fn my_fn() { let a = 2; f$0 }\", ImmediateLocation::StmtList);\n-        check_location(r\"fn my_fn() { f$0 f }\", ImmediateLocation::StmtList);\n-    }\n-\n-    #[test]\n-    fn test_ident_pat_loc() {\n-        check_location(r\"fn my_fn(m$0) {}\", ImmediateLocation::IdentPat);\n-        check_location(r\"fn my_fn() { let m$0 }\", ImmediateLocation::IdentPat);\n-        check_location(r\"fn my_fn(&m$0) {}\", ImmediateLocation::IdentPat);\n-        check_location(r\"fn my_fn() { let &m$0 }\", ImmediateLocation::IdentPat);\n-    }\n-\n     #[test]\n     fn test_ref_expr_loc() {\n         check_location(r\"fn my_fn() { let x = &m$0 foo; }\", ImmediateLocation::RefExpr);\n     }\n \n-    #[test]\n-    fn test_item_list_loc() {\n-        check_location(r\"i$0\", ImmediateLocation::ItemList);\n-        check_location(r\"#[attr] i$0\", ImmediateLocation::ItemList);\n-        check_location(r\"fn f() {} i$0\", ImmediateLocation::ItemList);\n-        check_location(r\"mod foo { f$0 }\", ImmediateLocation::ItemList);\n-        check_location(r\"mod foo { #[attr] f$0 }\", ImmediateLocation::ItemList);\n-        check_location(r\"mod foo { fn f() {} f$0 }\", ImmediateLocation::ItemList);\n-        check_location(r\"mod foo$0 {}\", None);\n-    }\n-\n     #[test]\n     fn test_impl_prev_sibling() {\n         check_prev_sibling(r\"impl A w$0 \", ImmediatePrevSibling::ImplDefType);"}]}