{"sha": "bde4c1d6fbefcd914a06b5eab6ef6f9a6f26f271", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZTRjMWQ2ZmJlZmNkOTE0YTA2YjVlYWI2ZWY2ZjlhNmYyNmYyNzE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-27T23:13:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-02-27T23:13:35Z"}, "message": "Test fixes and rebase conflicts", "tree": {"sha": "f776ae018199c9ff2350a29dc569630f64455f87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f776ae018199c9ff2350a29dc569630f64455f87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bde4c1d6fbefcd914a06b5eab6ef6f9a6f26f271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bde4c1d6fbefcd914a06b5eab6ef6f9a6f26f271", "html_url": "https://github.com/rust-lang/rust/commit/bde4c1d6fbefcd914a06b5eab6ef6f9a6f26f271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bde4c1d6fbefcd914a06b5eab6ef6f9a6f26f271/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "158d99d3f13c2bef9097122b81adfb5e7185ca6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/158d99d3f13c2bef9097122b81adfb5e7185ca6a", "html_url": "https://github.com/rust-lang/rust/commit/158d99d3f13c2bef9097122b81adfb5e7185ca6a"}], "stats": {"total": 16, "additions": 6, "deletions": 10}, "files": [{"sha": "e61fb49add5b1e7aa5f53082113d483488178d3c", "filename": "src/test/auxiliary/static-methods-crate.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bde4c1d6fbefcd914a06b5eab6ef6f9a6f26f271/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde4c1d6fbefcd914a06b5eab6ef6f9a6f26f271/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstatic-methods-crate.rs?ref=bde4c1d6fbefcd914a06b5eab6ef6f9a6f26f271", "patch": "@@ -11,14 +11,12 @@\n #![crate_name=\"static_methods_crate\"]\n #![crate_type = \"lib\"]\n \n-use std::int;\n-\n pub trait read {\n     fn readMaybe(s: String) -> Option<Self>;\n }\n \n-impl read for int {\n-    fn readMaybe(s: String) -> Option<int> {\n+impl read for isize {\n+    fn readMaybe(s: String) -> Option<isize> {\n         s.parse().ok()\n     }\n }"}, {"sha": "6b365c348f782b52f26c1d6e1e57500a312ee3a5", "filename": "src/test/run-pass/deriving-primitive.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bde4c1d6fbefcd914a06b5eab6ef6f9a6f26f271/src%2Ftest%2Frun-pass%2Fderiving-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde4c1d6fbefcd914a06b5eab6ef6f9a6f26f271/src%2Ftest%2Frun-pass%2Fderiving-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-primitive.rs?ref=bde4c1d6fbefcd914a06b5eab6ef6f9a6f26f271", "patch": "@@ -9,18 +9,18 @@\n // except according to those terms.\n \n use std::num::FromPrimitive;\n-use std::int;\n+use std::isize;\n \n #[derive(PartialEq, FromPrimitive, Debug)]\n enum A {\n-    Foo = int::MAX,\n+    Foo = isize::MAX,\n     Bar = 1,\n     Baz = 3,\n     Qux,\n }\n \n pub fn main() {\n-    let x: Option<A> = FromPrimitive::from_int(int::MAX);\n+    let x: Option<A> = FromPrimitive::from_int(isize::MAX);\n     assert_eq!(x, Some(A::Foo));\n \n     let x: Option<A> = FromPrimitive::from_int(1);"}, {"sha": "d2e27fc822eebe8323a641772db87038842e2e8c", "filename": "src/test/run-pass/match-with-ret-arm.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bde4c1d6fbefcd914a06b5eab6ef6f9a6f26f271/src%2Ftest%2Frun-pass%2Fmatch-with-ret-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bde4c1d6fbefcd914a06b5eab6ef6f9a6f26f271/src%2Ftest%2Frun-pass%2Fmatch-with-ret-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-with-ret-arm.rs?ref=bde4c1d6fbefcd914a06b5eab6ef6f9a6f26f271", "patch": "@@ -8,13 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::uint;\n-\n pub fn main() {\n     // sometimes we have had trouble finding\n     // the right type for f, as we unified\n     // bot and u32 here\n-    let f = match \"1234\".parse::<uint>().ok() {\n+    let f = match \"1234\".parse::<usize>().ok() {\n         None => return (),\n         Some(num) => num as u32\n     };"}]}