{"sha": "b1cb4ac13d5b625dd497692b6396287a30ff12e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxY2I0YWMxM2Q1YjYyNWRkNDk3NjkyYjYzOTYyODdhMzBmZjEyZTI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-09T22:39:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-09T22:39:10Z"}, "message": "Merge #5693\n\n5693: Fix no inlay hints / unresolved tokens until manual edit to refresh r=jonas-schievink a=Veetaha\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/5349 \r\n\r\nNow we return ContentModified during the workspace loading. This signifies the language\r\nclient to retry the operation (i.e. the client will\r\ncontinue polling the server while it returns ContentModified).\r\nI believe that there might be cases of overly big projects where the backoff\r\nlogic we have setup in `sendRequestWithRetry` (which we use for inlay hints)\r\nmight bail too early (currently the largest retry standby time is 10 seconds).\r\nHowever, I've tried on one of my project with 500+ dependencies and it is still enough.\r\n\r\nHere are the examples before/after the change (the gifs are quite lengthy because they show testing rather large cargo workspace).\r\n\r\n<details>\r\n<summary>Before</summary>\r\n\r\nHere you can see that the client receives empty array of inlay hints and does nothing more.\r\nSame applies to semantic tokens. The client receives unresolved tokens and does nothing more.\r\nThe user needs to do a manual edit to refresh the editor.\r\n\r\n![prev-demo](https://user-images.githubusercontent.com/36276403/89717721-e4471280-d9c1-11ea-89ce-7dc3e83d9768.gif)\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>After</summary>\r\n\r\nHere the server returns ContentModified, so the client periodically retries the requests and eventually receives the wellformed response.\r\n\r\n![new-demo](https://user-images.githubusercontent.com/36276403/89717725-eb6e2080-d9c1-11ea-84c9-796bb2b22cec.gif)\r\n\r\n</details>\n\nCo-authored-by: Veetaha <veetaha2@gmail.com>", "tree": {"sha": "6a3465bc8ef80890503c39945f2cfddb49044dae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a3465bc8ef80890503c39945f2cfddb49044dae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1cb4ac13d5b625dd497692b6396287a30ff12e2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfMHsOCRBK7hj4Ov3rIwAAdHIIABuG3Eaulx2lMXQgrQCLaZly\n5y470XM8nO0EpvTrLHZ5q3QDaONpJs2EOp2Jh1e2dq3AJNAhgCqJmHNjaNURgqVR\nBclBQK8mkri4DbNuObTVZ9mjtW0IgNgAvgx1wXgnxCSYwgbCddgUJOvqF9R4tNDW\nXlIG5dJFikobMBeqe7pTGaooNT7p0PLoSn3NQmgrIyMkMZUgm9FMEEJQnJDXm+C9\nKfoWGmJqQJQLaq1RiPh6IGlU7YdmLhBKrWwMlUgd+Rx4InDQtL33+vmpTOSmb9XV\nEWpbhwhZi+Gpj6M1CWWXyH1PCppoHVrnHbb/xjj7RH8B5tQPlobaH6emC/HvPLQ=\n=dQVS\n-----END PGP SIGNATURE-----\n", "payload": "tree 6a3465bc8ef80890503c39945f2cfddb49044dae\nparent 9995e79cce548d43505d91653e2a1fdde8729134\nparent dbe7ede2eebc1301a40f0e1a3a408e11a86a0e84\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597012750 +0000\ncommitter GitHub <noreply@github.com> 1597012750 +0000\n\nMerge #5693\n\n5693: Fix no inlay hints / unresolved tokens until manual edit to refresh r=jonas-schievink a=Veetaha\n\nFixes https://github.com/rust-analyzer/rust-analyzer/issues/5349 \r\n\r\nNow we return ContentModified during the workspace loading. This signifies the language\r\nclient to retry the operation (i.e. the client will\r\ncontinue polling the server while it returns ContentModified).\r\nI believe that there might be cases of overly big projects where the backoff\r\nlogic we have setup in `sendRequestWithRetry` (which we use for inlay hints)\r\nmight bail too early (currently the largest retry standby time is 10 seconds).\r\nHowever, I've tried on one of my project with 500+ dependencies and it is still enough.\r\n\r\nHere are the examples before/after the change (the gifs are quite lengthy because they show testing rather large cargo workspace).\r\n\r\n<details>\r\n<summary>Before</summary>\r\n\r\nHere you can see that the client receives empty array of inlay hints and does nothing more.\r\nSame applies to semantic tokens. The client receives unresolved tokens and does nothing more.\r\nThe user needs to do a manual edit to refresh the editor.\r\n\r\n![prev-demo](https://user-images.githubusercontent.com/36276403/89717721-e4471280-d9c1-11ea-89ce-7dc3e83d9768.gif)\r\n\r\n</details>\r\n\r\n<details>\r\n<summary>After</summary>\r\n\r\nHere the server returns ContentModified, so the client periodically retries the requests and eventually receives the wellformed response.\r\n\r\n![new-demo](https://user-images.githubusercontent.com/36276403/89717725-eb6e2080-d9c1-11ea-84c9-796bb2b22cec.gif)\r\n\r\n</details>\n\nCo-authored-by: Veetaha <veetaha2@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1cb4ac13d5b625dd497692b6396287a30ff12e2", "html_url": "https://github.com/rust-lang/rust/commit/b1cb4ac13d5b625dd497692b6396287a30ff12e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1cb4ac13d5b625dd497692b6396287a30ff12e2/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9995e79cce548d43505d91653e2a1fdde8729134", "url": "https://api.github.com/repos/rust-lang/rust/commits/9995e79cce548d43505d91653e2a1fdde8729134", "html_url": "https://github.com/rust-lang/rust/commit/9995e79cce548d43505d91653e2a1fdde8729134"}, {"sha": "dbe7ede2eebc1301a40f0e1a3a408e11a86a0e84", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe7ede2eebc1301a40f0e1a3a408e11a86a0e84", "html_url": "https://github.com/rust-lang/rust/commit/dbe7ede2eebc1301a40f0e1a3a408e11a86a0e84"}], "stats": {"total": 16, "additions": 13, "deletions": 3}, "files": [{"sha": "0ac6434dd795d94ec95e0f4c1fdbe16e4dd8bd81", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1cb4ac13d5b625dd497692b6396287a30ff12e2/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1cb4ac13d5b625dd497692b6396287a30ff12e2/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=b1cb4ac13d5b625dd497692b6396287a30ff12e2", "patch": "@@ -337,6 +337,16 @@ impl GlobalState {\n     fn on_request(&mut self, request_received: Instant, req: Request) -> Result<()> {\n         self.register_request(&req, request_received);\n \n+        if self.status == Status::Loading && req.method != \"shutdown\" {\n+            self.respond(lsp_server::Response::new_err(\n+                req.id,\n+                // FIXME: i32 should impl From<ErrorCode> (from() guarantees lossless conversion)\n+                lsp_server::ErrorCode::ContentModified as i32,\n+                \"Rust Analyzer is still loading...\".to_owned(),\n+            ));\n+            return Ok(());\n+        }\n+\n         RequestDispatcher { req: Some(req), global_state: self }\n             .on_sync::<lsp_ext::ReloadWorkspace>(|s, ()| Ok(s.fetch_workspaces()))?\n             .on_sync::<lsp_ext::JoinLines>(|s, p| handlers::handle_join_lines(s.snapshot(), p))?"}, {"sha": "49d2d1c6fbe878e07ed71600fbaff81ac914060f", "filename": "editors/code/src/util.ts", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b1cb4ac13d5b625dd497692b6396287a30ff12e2/editors%2Fcode%2Fsrc%2Futil.ts", "raw_url": "https://github.com/rust-lang/rust/raw/b1cb4ac13d5b625dd497692b6396287a30ff12e2/editors%2Fcode%2Fsrc%2Futil.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futil.ts?ref=b1cb4ac13d5b625dd497692b6396287a30ff12e2", "patch": "@@ -64,7 +64,8 @@ export async function sendRequestWithRetry<TParam, TRet>(\n     param: TParam,\n     token?: vscode.CancellationToken,\n ): Promise<TRet> {\n-    for (const delay of [2, 4, 6, 8, 10, null]) {\n+    // The sequence is `10 * (2 ** (2 * n))` where n is 1, 2, 3...\n+    for (const delay of [40, 160, 640, 2560, 10240, null]) {\n         try {\n             return await (token\n                 ? client.sendRequest(reqType, param, token)\n@@ -84,8 +85,7 @@ export async function sendRequestWithRetry<TParam, TRet>(\n                 log.warn(\"LSP request failed\", { method: reqType.method, param, error });\n                 throw error;\n             }\n-\n-            await sleep(10 * (1 << delay));\n+            await sleep(delay);\n         }\n     }\n     throw 'unreachable';"}]}