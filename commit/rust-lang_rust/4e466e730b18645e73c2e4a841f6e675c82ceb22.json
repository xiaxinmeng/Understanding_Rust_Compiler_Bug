{"sha": "4e466e730b18645e73c2e4a841f6e675c82ceb22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNDY2ZTczMGIxODY0NWU3M2MyZTRhODQxZjZlNjc1YzgyY2ViMjI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-09T10:24:18Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-04-09T18:54:43Z"}, "message": "Rollup merge of #24207 - kmcallister:llvm-plugin, r=brson\n\n r? @brson\n\nI'm using this to integrate rustc with [american-fuzzy-lop](http://lcamtuf.coredump.cx/afl/). Building with afl instrumentation is no different from loading any other plugin library.\n\nI'd like this PR to include a `run-make` test with a custom LLVM pass; however I'm not sure it's worth the trouble of building C++ code and linking LLVM from the test suite (are there existing tests that do this?)", "tree": {"sha": "37467bb5a28494a2a7c37b6cd9a7bd0b8891d59c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37467bb5a28494a2a7c37b6cd9a7bd0b8891d59c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e466e730b18645e73c2e4a841f6e675c82ceb22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e466e730b18645e73c2e4a841f6e675c82ceb22", "html_url": "https://github.com/rust-lang/rust/commit/4e466e730b18645e73c2e4a841f6e675c82ceb22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e466e730b18645e73c2e4a841f6e675c82ceb22/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2dffe789791f2be95683b47a34f7a4c7f1014047", "url": "https://api.github.com/repos/rust-lang/rust/commits/2dffe789791f2be95683b47a34f7a4c7f1014047", "html_url": "https://github.com/rust-lang/rust/commit/2dffe789791f2be95683b47a34f7a4c7f1014047"}, {"sha": "0cb937944664f7a52895c87f9007fcdface78a7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cb937944664f7a52895c87f9007fcdface78a7e", "html_url": "https://github.com/rust-lang/rust/commit/0cb937944664f7a52895c87f9007fcdface78a7e"}], "stats": {"total": 80, "additions": 79, "deletions": 1}, "files": [{"sha": "322b5d3a8cf27bbee757d07bd1f1833b722cdbcf", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4e466e730b18645e73c2e4a841f6e675c82ceb22/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e466e730b18645e73c2e4a841f6e675c82ceb22/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=4e466e730b18645e73c2e4a841f6e675c82ceb22", "patch": "@@ -22,6 +22,7 @@ use syntax::ptr::P;\n use syntax::ast;\n \n use std::collections::HashMap;\n+use std::borrow::ToOwned;\n \n /// Structure used to register plugins.\n ///\n@@ -50,6 +51,9 @@ pub struct Registry<'a> {\n \n     #[doc(hidden)]\n     pub lint_groups: HashMap<&'static str, Vec<LintId>>,\n+\n+    #[doc(hidden)]\n+    pub llvm_passes: Vec<String>,\n }\n \n impl<'a> Registry<'a> {\n@@ -62,6 +66,7 @@ impl<'a> Registry<'a> {\n             syntax_exts: vec!(),\n             lint_passes: vec!(),\n             lint_groups: HashMap::new(),\n+            llvm_passes: vec!(),\n         }\n     }\n \n@@ -116,4 +121,13 @@ impl<'a> Registry<'a> {\n     pub fn register_lint_group(&mut self, name: &'static str, to: Vec<&'static Lint>) {\n         self.lint_groups.insert(name, to.into_iter().map(|x| LintId::of(x)).collect());\n     }\n+\n+    /// Register an LLVM pass.\n+    ///\n+    /// Registration with LLVM itself is handled through static C++ objects with\n+    /// constructors. This method simply adds a name to the list of passes to\n+    /// execute.\n+    pub fn register_llvm_pass(&mut self, name: &str) {\n+        self.llvm_passes.push(name.to_owned());\n+    }\n }"}, {"sha": "148f484b0ed5c487a5c1a045e1ab31ee67de1e95", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4e466e730b18645e73c2e4a841f6e675c82ceb22/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e466e730b18645e73c2e4a841f6e675c82ceb22/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=4e466e730b18645e73c2e4a841f6e675c82ceb22", "patch": "@@ -52,6 +52,7 @@ pub struct Session {\n     pub working_dir: PathBuf,\n     pub lint_store: RefCell<lint::LintStore>,\n     pub lints: RefCell<NodeMap<Vec<(lint::LintId, codemap::Span, String)>>>,\n+    pub plugin_llvm_passes: RefCell<Vec<String>>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n     pub crate_metadata: RefCell<Vec<String>>,\n     pub features: RefCell<feature_gate::Features>,\n@@ -391,6 +392,7 @@ pub fn build_session_(sopts: config::Options,\n         working_dir: env::current_dir().unwrap(),\n         lint_store: RefCell::new(lint::LintStore::new()),\n         lints: RefCell::new(NodeMap()),\n+        plugin_llvm_passes: RefCell::new(Vec::new()),\n         crate_types: RefCell::new(Vec::new()),\n         crate_metadata: RefCell::new(Vec::new()),\n         features: RefCell::new(feature_gate::Features::new()),"}, {"sha": "e310798b20ab78d55c8a000548922a7f7724eec5", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4e466e730b18645e73c2e4a841f6e675c82ceb22/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e466e730b18645e73c2e4a841f6e675c82ceb22/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=4e466e730b18645e73c2e4a841f6e675c82ceb22", "patch": "@@ -438,7 +438,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         }\n     });\n \n-    let Registry { syntax_exts, lint_passes, lint_groups, .. } = registry;\n+    let Registry { syntax_exts, lint_passes, lint_groups, llvm_passes, .. } = registry;\n \n     {\n         let mut ls = sess.lint_store.borrow_mut();\n@@ -449,6 +449,8 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         for (name, to) in lint_groups {\n             ls.register_group(Some(sess), true, name, to);\n         }\n+\n+        *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n     }\n \n     // Lint plugins are registered; now we can process command line flags."}, {"sha": "de21d62651499b1d0de33d9250ee8430525dfe40", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4e466e730b18645e73c2e4a841f6e675c82ceb22/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e466e730b18645e73c2e4a841f6e675c82ceb22/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=4e466e730b18645e73c2e4a841f6e675c82ceb22", "patch": "@@ -319,6 +319,8 @@ struct CodegenContext<'a> {\n     lto_ctxt: Option<(&'a Session, &'a [String])>,\n     // Handler to use for diagnostics produced during codegen.\n     handler: &'a Handler,\n+    // LLVM passes added by plugins.\n+    plugin_passes: Vec<String>,\n     // LLVM optimizations for which we want to print remarks.\n     remark: Passes,\n }\n@@ -328,6 +330,7 @@ impl<'a> CodegenContext<'a> {\n         CodegenContext {\n             lto_ctxt: Some((sess, reachable)),\n             handler: sess.diagnostic().handler(),\n+            plugin_passes: sess.plugin_llvm_passes.borrow().clone(),\n             remark: sess.opts.cg.remark.clone(),\n         }\n     }\n@@ -461,6 +464,16 @@ unsafe fn optimize_and_codegen(cgcx: &CodegenContext,\n                 }\n             }\n \n+            for pass in &cgcx.plugin_passes {\n+                let pass = CString::new(pass.clone()).unwrap();\n+                if !llvm::LLVMRustAddPass(mpm, pass.as_ptr()) {\n+                    cgcx.handler.err(&format!(\"a plugin asked for LLVM pass {:?} but LLVM \\\n+                                               does not recognize it\", pass));\n+                }\n+            }\n+\n+            cgcx.handler.abort_if_errors();\n+\n             // Finally, run the actual optimization passes\n             time(config.time_passes, \"llvm function passes\", (), |()|\n                  llvm::LLVMRustRunFunctionPassManager(fpm, llmod));\n@@ -907,6 +920,7 @@ fn run_work_multithreaded(sess: &Session,\n     for i in 0..num_workers {\n         let work_items_arc = work_items_arc.clone();\n         let diag_emitter = diag_emitter.clone();\n+        let plugin_passes = sess.plugin_llvm_passes.borrow().clone();\n         let remark = sess.opts.cg.remark.clone();\n \n         let (tx, rx) = channel();\n@@ -921,6 +935,7 @@ fn run_work_multithreaded(sess: &Session,\n             let cgcx = CodegenContext {\n                 lto_ctxt: None,\n                 handler: &diag_handler,\n+                plugin_passes: plugin_passes,\n                 remark: remark,\n             };\n "}, {"sha": "d61f47fd7ef27cf49556c5a86afb5248b3ae149a", "filename": "src/test/auxiliary/llvm_pass_plugin.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4e466e730b18645e73c2e4a841f6e675c82ceb22/src%2Ftest%2Fauxiliary%2Fllvm_pass_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e466e730b18645e73c2e4a841f6e675c82ceb22/src%2Ftest%2Fauxiliary%2Fllvm_pass_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fllvm_pass_plugin.rs?ref=4e466e730b18645e73c2e4a841f6e675c82ceb22", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// force-host\n+\n+#![feature(plugin_registrar)]\n+#![feature(rustc_private)]\n+\n+extern crate rustc;\n+\n+use rustc::plugin::Registry;\n+\n+#[plugin_registrar]\n+pub fn plugin_registrar(reg: &mut Registry) {\n+    // This pass is built in to LLVM.\n+    //\n+    // Normally, we would name a pass that was registered through\n+    // C++ static object constructors in the same .so file as the\n+    // plugin registrar.\n+    reg.register_llvm_pass(\"inline\");\n+}"}, {"sha": "5dfef636f9f365e92910d4c1b09d0c436b3d45f4", "filename": "src/test/run-pass-fulldeps/llvm-pass-plugin.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/4e466e730b18645e73c2e4a841f6e675c82ceb22/src%2Ftest%2Frun-pass-fulldeps%2Fllvm-pass-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e466e730b18645e73c2e4a841f6e675c82ceb22/src%2Ftest%2Frun-pass-fulldeps%2Fllvm-pass-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fllvm-pass-plugin.rs?ref=4e466e730b18645e73c2e4a841f6e675c82ceb22", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:llvm_pass_plugin.rs\n+// ignore-stage1\n+\n+#![feature(plugin)]\n+#![plugin(llvm_pass_plugin)]\n+\n+pub fn main() { }"}]}