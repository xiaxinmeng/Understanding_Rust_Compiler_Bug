{"sha": "6a6dfa59daa8be46df37a594ad0ffeeeccee97cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNmRmYTU5ZGFhOGJlNDZkZjM3YTU5NGFkMGZmZWVlY2NlZTk3Y2I=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-24T12:29:09Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-10-24T12:29:09Z"}, "message": "factor out decl dumping", "tree": {"sha": "28a49f8460d3751864a16523069ab08b9d01bd3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28a49f8460d3751864a16523069ab08b9d01bd3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a6dfa59daa8be46df37a594ad0ffeeeccee97cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYDf6VAAoJEFbW7qD8Z6xG+CQP/3ZIvqGCzL3qLcbBsi8QpOn1\nUlfckvpjq1zzPj+fl8GVO3IgO9DiF6NbaCQHXYH8xecdL7deTskFcwdHeMrdr8sI\nEgExU5kr5xagvJ2igcWkNMZprK/VGK066tXfNS8hvhNm9QTEV8l2Fv2lpGqCAr0A\nn/ZBQioVuSryNnU54v8shoqT2+iPAbCi4btarpC6oMBG2NT09wfjz7CqAgWOSKQ4\nX4wt8A8CvmoFS4elVp59ZW9gw2Rp8ro87v2BQ+/d6chJTzXqF1NRZ/oWXhqdkOSF\nzZY7QW6gE0zNqBBOD2XpBc+NmTE7pydfqZcNvIXYwtPaP1dO44XtMUj/SE+cz0+Y\n7uzSGDahaZIfP54qkKE/YHQ8PoFRRbUjrdeQqwoLFoSJ3fXSWQzZtBQx4sDr3LrV\nALDz4jt0PfexOxcUBBKutjR/voEPcMZWR++khv2v6GA2y/Mh8bpx6ph2MFTTPxZF\nLeJc9EgDrZPJZqPVlW8hJR3V2V246azrP/pDqx19IMuPv5FQRsTRiicjByXl6f4B\nX5ZklChlrrl9zujK1nC+16PenNce5TpqGFFe3+6Q3LfJjiYvUbXb1w3HVEIPgIvQ\nkFPSMEHGDmqInU2vfoSIhBeNPqpCraI8s/E2weLinGUlp5ie5PRVnBEH9atvCntK\n6aevUJ5LvzWB8gaCpGwc\n=Lk/n\n-----END PGP SIGNATURE-----", "payload": "tree 28a49f8460d3751864a16523069ab08b9d01bd3d\nparent 1248159f0dbbb00fe8731345deb347997fc44d69\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1477312149 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1477312149 +0200\n\nfactor out decl dumping"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a6dfa59daa8be46df37a594ad0ffeeeccee97cb", "html_url": "https://github.com/rust-lang/rust/commit/6a6dfa59daa8be46df37a594ad0ffeeeccee97cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a6dfa59daa8be46df37a594ad0ffeeeccee97cb/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1248159f0dbbb00fe8731345deb347997fc44d69", "url": "https://api.github.com/repos/rust-lang/rust/commits/1248159f0dbbb00fe8731345deb347997fc44d69", "html_url": "https://github.com/rust-lang/rust/commit/1248159f0dbbb00fe8731345deb347997fc44d69"}], "stats": {"total": 165, "additions": 87, "deletions": 78}, "files": [{"sha": "2707e694a84d9f1a310ce91b70b041aa4da658eb", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 87, "deletions": 78, "changes": 165, "blob_url": "https://github.com/rust-lang/rust/blob/6a6dfa59daa8be46df37a594ad0ffeeeccee97cb/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a6dfa59daa8be46df37a594ad0ffeeeccee97cb/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=6a6dfa59daa8be46df37a594ad0ffeeeccee97cb", "patch": "@@ -35,78 +35,33 @@ impl LateLintPass for Pass {\n         if !has_attr(&item.attrs) {\n             return;\n         }\n-        let did = cx.tcx.map.local_def_id(item.id);\n-        println!(\"item `{}`\", item.name);\n+        print_item(cx, item);\n+    }\n+\n+    fn check_impl_item(&mut self, cx: &LateContext, item: &hir::ImplItem) {\n+        if !has_attr(&item.attrs) {\n+            return;\n+        }\n+        println!(\"impl item `{}`\", item.name);\n         match item.vis {\n             hir::Visibility::Public => println!(\"public\"),\n             hir::Visibility::Crate => println!(\"visible crate wide\"),\n             hir::Visibility::Restricted { ref path, .. } => println!(\"visible in module `{}`\", path),\n             hir::Visibility::Inherited => println!(\"visibility inherited from outer item\"),\n         }\n+        if item.defaultness.is_default() {\n+            println!(\"default\");\n+        }\n         match item.node {\n-            hir::ItemExternCrate(ref _renamed_from) => {\n-                if let Some(crate_id) = cx.tcx.sess.cstore.extern_mod_stmt_cnum(item.id) {\n-                    let source = cx.tcx.sess.cstore.used_crate_source(crate_id);\n-                    if let Some(src) = source.dylib {\n-                        println!(\"extern crate dylib source: {:?}\", src.0);\n-                    }\n-                    if let Some(src) = source.rlib {\n-                        println!(\"extern crate rlib source: {:?}\", src.0);\n-                    }\n-                } else {\n-                    println!(\"weird extern crate without a crate id\");\n-                }\n-            }\n-            hir::ItemUse(ref path) => println!(\"{:?}\", path.node),\n-            hir::ItemStatic(..) => println!(\"static item: {:#?}\", cx.tcx.opt_lookup_item_type(did)),\n-            hir::ItemConst(..) => println!(\"const item: {:#?}\", cx.tcx.opt_lookup_item_type(did)),\n-            hir::ItemFn(..) => {\n-                let item_ty = cx.tcx.opt_lookup_item_type(did);\n-                println!(\"function: {:#?}\", item_ty);\n-            },\n-            hir::ItemMod(..) => println!(\"module\"),\n-            hir::ItemForeignMod(ref fm) => println!(\"foreign module with abi: {}\", fm.abi),\n-            hir::ItemTy(..) => {\n-                println!(\"type alias: {:?}\", cx.tcx.opt_lookup_item_type(did));\n-            },\n-            hir::ItemEnum(..) => {\n-                println!(\"enum definition: {:?}\", cx.tcx.opt_lookup_item_type(did));\n-            },\n-            hir::ItemStruct(..) => {\n-                println!(\"struct definition: {:?}\", cx.tcx.opt_lookup_item_type(did));\n-            },\n-            hir::ItemUnion(..) => {\n-                println!(\"union definition: {:?}\", cx.tcx.opt_lookup_item_type(did));\n-            },\n-            hir::ItemTrait(..) => {\n-                println!(\"trait decl\");\n-                if cx.tcx.trait_has_default_impl(did) {\n-                    println!(\"trait has a default impl\");\n-                } else {\n-                    println!(\"trait has no default impl\");\n-                }\n-            },\n-            hir::ItemDefaultImpl(_, ref trait_ref) => {\n-                let trait_did = cx.tcx.map.local_def_id(trait_ref.ref_id);\n-                println!(\"default impl for `{:?}`\", cx.tcx.item_path_str(trait_did));\n-            },\n-            hir::ItemImpl(_, _, _, Some(ref trait_ref), _, _) => {\n-                let trait_did = cx.tcx.map.local_def_id(trait_ref.ref_id);\n-                println!(\"impl of trait `{:?}`\", cx.tcx.item_path_str(trait_did));\n-            },\n-            hir::ItemImpl(_, _, _, None, _, _) => {\n-                println!(\"impl\");\n+            hir::ImplItemKind::Const(_, ref e) => {\n+                println!(\"associated constant\");\n+                print_expr(cx, e, 1);\n             },\n+            hir::ImplItemKind::Method(..) => println!(\"method\"),\n+            hir::ImplItemKind::Type(_) => println!(\"associated type\"),\n         }\n     }\n-\n /*\n-    fn check_impl_item(&mut self, cx: &LateContext, item: &hir::ImplItem) {\n-        if !has_attr(&item.attrs) {\n-            return;\n-        }\n-    }\n-\n     fn check_trait_item(&mut self, cx: &LateContext, item: &hir::TraitItem) {\n         if !has_attr(&item.attrs) {\n             return;\n@@ -133,18 +88,6 @@ impl LateLintPass for Pass {\n         print_expr(cx, expr, 0);\n     }\n \n-    fn check_decl(&mut self, cx: &LateContext, decl: &hir::Decl) {\n-        if !has_attr(decl.node.attrs()) {\n-            return;\n-        }\n-        match decl.node {\n-            hir::DeclLocal(ref local) => {\n-                println!(\"local variable of type {}\", cx.tcx.node_id_to_type(local.id));\n-            },\n-            hir::DeclItem(_) => println!(\"item decl\"),\n-        }\n-    }\n-/*\n     fn check_arm(&mut self, cx: &LateContext, arm: &hir::Arm) {\n         if !has_attr(&arm.attrs) {\n             return;\n@@ -164,13 +107,12 @@ impl LateLintPass for Pass {\n         if !has_attr(stmt.node.attrs()) {\n             return;\n         }\n-    }\n-\n-    fn check_local(&mut self, cx: &LateContext, local: &hir::Local) {\n-        if !has_attr(&local.attrs) {\n-            return;\n+        match stmt.node {\n+            hir::StmtDecl(ref decl, _) => print_decl(cx, decl),\n+            hir::StmtExpr(ref e, _) | hir::StmtSemi(ref e, _) => print_expr(cx, e, 0),\n         }\n     }\n+/*\n \n     fn check_foreign_item(&mut self, cx: &LateContext, item: &hir::ForeignItem) {\n         if !has_attr(&item.attrs) {\n@@ -380,6 +322,73 @@ fn print_expr(cx: &LateContext, expr: &hir::Expr, indent: usize) {\n         },\n     }\n }\n+\n+fn print_item(cx: &LateContext, item: &hir::Item) {\n+    let did = cx.tcx.map.local_def_id(item.id);\n+    println!(\"item `{}`\", item.name);\n+    match item.vis {\n+        hir::Visibility::Public => println!(\"public\"),\n+        hir::Visibility::Crate => println!(\"visible crate wide\"),\n+        hir::Visibility::Restricted { ref path, .. } => println!(\"visible in module `{}`\", path),\n+        hir::Visibility::Inherited => println!(\"visibility inherited from outer item\"),\n+    }\n+    match item.node {\n+        hir::ItemExternCrate(ref _renamed_from) => {\n+            if let Some(crate_id) = cx.tcx.sess.cstore.extern_mod_stmt_cnum(item.id) {\n+                let source = cx.tcx.sess.cstore.used_crate_source(crate_id);\n+                if let Some(src) = source.dylib {\n+                    println!(\"extern crate dylib source: {:?}\", src.0);\n+                }\n+                if let Some(src) = source.rlib {\n+                    println!(\"extern crate rlib source: {:?}\", src.0);\n+                }\n+            } else {\n+                println!(\"weird extern crate without a crate id\");\n+            }\n+        }\n+        hir::ItemUse(ref path) => println!(\"{:?}\", path.node),\n+        hir::ItemStatic(..) => println!(\"static item: {:#?}\", cx.tcx.opt_lookup_item_type(did)),\n+        hir::ItemConst(..) => println!(\"const item: {:#?}\", cx.tcx.opt_lookup_item_type(did)),\n+        hir::ItemFn(..) => {\n+            let item_ty = cx.tcx.opt_lookup_item_type(did);\n+            println!(\"function: {:#?}\", item_ty);\n+        },\n+        hir::ItemMod(..) => println!(\"module\"),\n+        hir::ItemForeignMod(ref fm) => println!(\"foreign module with abi: {}\", fm.abi),\n+        hir::ItemTy(..) => {\n+            println!(\"type alias: {:?}\", cx.tcx.opt_lookup_item_type(did));\n+        },\n+        hir::ItemEnum(..) => {\n+            println!(\"enum definition: {:?}\", cx.tcx.opt_lookup_item_type(did));\n+        },\n+        hir::ItemStruct(..) => {\n+            println!(\"struct definition: {:?}\", cx.tcx.opt_lookup_item_type(did));\n+        },\n+        hir::ItemUnion(..) => {\n+            println!(\"union definition: {:?}\", cx.tcx.opt_lookup_item_type(did));\n+        },\n+        hir::ItemTrait(..) => {\n+            println!(\"trait decl\");\n+            if cx.tcx.trait_has_default_impl(did) {\n+                println!(\"trait has a default impl\");\n+            } else {\n+                println!(\"trait has no default impl\");\n+            }\n+        },\n+        hir::ItemDefaultImpl(_, ref trait_ref) => {\n+            let trait_did = cx.tcx.map.local_def_id(trait_ref.ref_id);\n+            println!(\"default impl for `{:?}`\", cx.tcx.item_path_str(trait_did));\n+        },\n+        hir::ItemImpl(_, _, _, Some(ref trait_ref), _, _) => {\n+            let trait_did = cx.tcx.map.local_def_id(trait_ref.ref_id);\n+            println!(\"impl of trait `{:?}`\", cx.tcx.item_path_str(trait_did));\n+        },\n+        hir::ItemImpl(_, _, _, None, _, _) => {\n+            println!(\"impl\");\n+        },\n+    }\n+}\n+\n fn print_pat(cx: &LateContext, pat: &hir::Pat, indent: usize) {\n     let ind = \"  \".repeat(indent);\n     println!(\"{}+\", ind);"}]}