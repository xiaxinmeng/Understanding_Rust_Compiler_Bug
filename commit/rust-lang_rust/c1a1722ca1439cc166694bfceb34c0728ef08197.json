{"sha": "c1a1722ca1439cc166694bfceb34c0728ef08197", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxYTE3MjJjYTE0MzljYzE2NjY5NGJmY2ViMzRjMDcyOGVmMDgxOTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-01T08:16:14Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-01T08:16:14Z"}, "message": "rustdoc: Convert page_pass to pipes", "tree": {"sha": "f451c6824b35bc6aca3ee630556bb28e5b607d6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f451c6824b35bc6aca3ee630556bb28e5b607d6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1a1722ca1439cc166694bfceb34c0728ef08197", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a1722ca1439cc166694bfceb34c0728ef08197", "html_url": "https://github.com/rust-lang/rust/commit/c1a1722ca1439cc166694bfceb34c0728ef08197", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1a1722ca1439cc166694bfceb34c0728ef08197/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76679c1f91fc68134c850b2d77ff2b83b32a108f", "url": "https://api.github.com/repos/rust-lang/rust/commits/76679c1f91fc68134c850b2d77ff2b83b32a108f", "html_url": "https://github.com/rust-lang/rust/commit/76679c1f91fc68134c850b2d77ff2b83b32a108f"}], "stats": {"total": 31, "additions": 17, "deletions": 14}, "files": [{"sha": "c8509826fdbabebfb6d68b59f8166ebf38c4a221", "filename": "src/librustdoc/page_pass.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c1a1722ca1439cc166694bfceb34c0728ef08197/src%2Flibrustdoc%2Fpage_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1a1722ca1439cc166694bfceb34c0728ef08197/src%2Flibrustdoc%2Fpage_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpage_pass.rs?ref=c1a1722ca1439cc166694bfceb34c0728ef08197", "patch": "@@ -28,9 +28,9 @@ use sort_pass;\n use util::NominalOp;\n use util;\n \n-use core::oldcomm;\n use core::option;\n use core::vec;\n+use core::pipes::*;\n use syntax::ast;\n \n pub fn mk_pass(output_style: config::OutputStyle) -> Pass {\n@@ -52,24 +52,26 @@ pub fn run(\n         return doc;\n     }\n \n-    let (result_port, page_chan) = do util::spawn_conversation\n-        |page_port, result_chan| {\n-        oldcomm::send(result_chan, make_doc_from_pages(page_port));\n+    let (result_port, result_chan) = stream();\n+    let (page_port, page_chan) = stream();\n+    let page_chan = SharedChan(page_chan);\n+    do task::spawn {\n+        result_chan.send(make_doc_from_pages(&page_port));\n     };\n \n     find_pages(doc, page_chan);\n-    oldcomm::recv(result_port)\n+    result_port.recv()\n }\n \n-type PagePort = oldcomm::Port<Option<doc::Page>>;\n-type PageChan = oldcomm::Chan<Option<doc::Page>>;\n+type PagePort = Port<Option<doc::Page>>;\n+type PageChan = SharedChan<Option<doc::Page>>;\n \n type NominalPageChan = NominalOp<PageChan>;\n \n-fn make_doc_from_pages(page_port: PagePort) -> doc::Doc {\n+fn make_doc_from_pages(page_port: &PagePort) -> doc::Doc {\n     let mut pages = ~[];\n     loop {\n-        let val = oldcomm::recv(page_port);\n+        let val = page_port.recv();\n         if val.is_some() {\n             pages += ~[option::unwrap(move val)];\n         } else {\n@@ -83,14 +85,15 @@ fn make_doc_from_pages(page_port: PagePort) -> doc::Doc {\n \n fn find_pages(doc: doc::Doc, page_chan: PageChan) {\n     let fold = Fold {\n+        ctxt: NominalOp { op: page_chan.clone() },\n         fold_crate: fold_crate,\n         fold_mod: fold_mod,\n         fold_nmod: fold_nmod,\n-        .. fold::default_any_fold(NominalOp { op: page_chan })\n+        .. fold::default_any_fold(NominalOp { op: page_chan.clone() })\n     };\n     (fold.fold_doc)(&fold, copy doc);\n \n-    oldcomm::send(page_chan, None);\n+    page_chan.send(None);\n }\n \n fn fold_crate(\n@@ -105,7 +108,7 @@ fn fold_crate(\n         .. copy doc\n     });\n \n-    oldcomm::send(fold.ctxt.op, Some(page));\n+    fold.ctxt.op.send(Some(page));\n \n     doc\n }\n@@ -121,7 +124,7 @@ fn fold_mod(\n \n         let doc = strip_mod(copy doc);\n         let page = doc::ItemPage(doc::ModTag(doc));\n-        oldcomm::send(fold.ctxt.op, Some(page));\n+        fold.ctxt.op.send(Some(page));\n     }\n \n     doc\n@@ -146,7 +149,7 @@ fn fold_nmod(\n ) -> doc::NmodDoc {\n     let doc = fold::default_seq_fold_nmod(fold, doc);\n     let page = doc::ItemPage(doc::NmodTag(copy doc));\n-    oldcomm::send(fold.ctxt.op, Some(page));\n+    fold.ctxt.op.send(Some(page));\n     return doc;\n }\n "}]}