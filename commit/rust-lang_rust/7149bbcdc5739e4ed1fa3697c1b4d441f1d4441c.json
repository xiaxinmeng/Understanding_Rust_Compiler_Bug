{"sha": "7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c", "node_id": "C_kwDOAAsO6NoAKDcxNDliYmNkYzU3MzllNGVkMWZhMzY5N2MxYjRkNDQxZjFkNDQ0MWM", "commit": {"author": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-04-28T03:31:08Z"}, "committer": {"name": "SparrowLii", "email": "liyuan179@huawei.com", "date": "2022-04-29T19:42:57Z"}, "message": "Eliminate duplication of RPO calculation for mir\n\nadd `postorder_cache` to mir Body\n\nadd `ReversePostorderCache` struct\n\ncorrect struct name and comments", "tree": {"sha": "024ec5cb2168d94eaeb7621a9e20ffcf0d4d5bc0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/024ec5cb2168d94eaeb7621a9e20ffcf0d4d5bc0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c", "html_url": "https://github.com/rust-lang/rust/commit/7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c/comments", "author": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SparrowLii", "id": 68270294, "node_id": "MDQ6VXNlcjY4MjcwMjk0", "avatar_url": "https://avatars.githubusercontent.com/u/68270294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SparrowLii", "html_url": "https://github.com/SparrowLii", "followers_url": "https://api.github.com/users/SparrowLii/followers", "following_url": "https://api.github.com/users/SparrowLii/following{/other_user}", "gists_url": "https://api.github.com/users/SparrowLii/gists{/gist_id}", "starred_url": "https://api.github.com/users/SparrowLii/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SparrowLii/subscriptions", "organizations_url": "https://api.github.com/users/SparrowLii/orgs", "repos_url": "https://api.github.com/users/SparrowLii/repos", "events_url": "https://api.github.com/users/SparrowLii/events{/privacy}", "received_events_url": "https://api.github.com/users/SparrowLii/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c95346b8ac8f10927b4aec31e61d45c75b10ba74", "url": "https://api.github.com/repos/rust-lang/rust/commits/c95346b8ac8f10927b4aec31e61d45c75b10ba74", "html_url": "https://github.com/rust-lang/rust/commit/c95346b8ac8f10927b4aec31e61d45c75b10ba74"}], "stats": {"total": 103, "additions": 96, "deletions": 7}, "files": [{"sha": "0c958de64fa1c0edd42d1474cbbfe7ad24cf86ab", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c", "patch": "@@ -244,7 +244,6 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     fx.debug_introduce_locals(&mut bx);\n \n     // Codegen the body of each block using reverse postorder\n-    // FIXME(eddyb) reuse RPO iterator between `analysis` and this.\n     for (bb, _) in traversal::reverse_postorder(&mir) {\n         fx.codegen_block(bb);\n     }"}, {"sha": "1052d588fadce960edcb7e895f9ab4d37ec439e6", "filename": "compiler/rustc_const_eval/src/transform/promote_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fpromote_consts.rs?ref=7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c", "patch": "@@ -13,7 +13,7 @@\n //! move analysis runs after promotion on broken MIR.\n \n use rustc_hir as hir;\n-use rustc_middle::mir::traversal::ReversePostorder;\n+use rustc_middle::mir::traversal::ReversePostorderIter;\n use rustc_middle::mir::visit::{MutVisitor, MutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::cast::CastTy;\n@@ -170,7 +170,7 @@ impl<'tcx> Visitor<'tcx> for Collector<'_, 'tcx> {\n \n pub fn collect_temps_and_candidates<'tcx>(\n     ccx: &ConstCx<'_, 'tcx>,\n-    rpo: &mut ReversePostorder<'_, 'tcx>,\n+    rpo: &mut ReversePostorderIter<'_, 'tcx>,\n ) -> (IndexVec<Local, TempState>, Vec<Candidate>) {\n     let mut collector = Collector {\n         temps: IndexVec::from_elem(TempState::Undefined, &ccx.body.local_decls),"}, {"sha": "45999f8765897f036f8521f4d69ceb739fe619c6", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c", "patch": "@@ -62,7 +62,9 @@ pub mod spanview;\n mod switch_sources;\n pub mod tcx;\n pub mod terminator;\n+use crate::mir::traversal::PostorderCache;\n pub use terminator::*;\n+\n pub mod traversal;\n mod type_foldable;\n pub mod visit;\n@@ -323,6 +325,7 @@ pub struct Body<'tcx> {\n     predecessor_cache: PredecessorCache,\n     switch_source_cache: SwitchSourceCache,\n     is_cyclic: GraphIsCyclicCache,\n+    postorder_cache: PostorderCache,\n \n     pub tainted_by_errors: Option<ErrorGuaranteed>,\n }\n@@ -372,6 +375,7 @@ impl<'tcx> Body<'tcx> {\n             predecessor_cache: PredecessorCache::new(),\n             switch_source_cache: SwitchSourceCache::new(),\n             is_cyclic: GraphIsCyclicCache::new(),\n+            postorder_cache: PostorderCache::new(),\n             tainted_by_errors,\n         };\n         body.is_polymorphic = body.has_param_types_or_consts();\n@@ -401,6 +405,7 @@ impl<'tcx> Body<'tcx> {\n             predecessor_cache: PredecessorCache::new(),\n             switch_source_cache: SwitchSourceCache::new(),\n             is_cyclic: GraphIsCyclicCache::new(),\n+            postorder_cache: PostorderCache::new(),\n             tainted_by_errors: None,\n         };\n         body.is_polymorphic = body.has_param_types_or_consts();\n@@ -422,6 +427,7 @@ impl<'tcx> Body<'tcx> {\n         self.predecessor_cache.invalidate();\n         self.switch_source_cache.invalidate();\n         self.is_cyclic.invalidate();\n+        self.postorder_cache.invalidate();\n         &mut self.basic_blocks\n     }\n \n@@ -432,6 +438,7 @@ impl<'tcx> Body<'tcx> {\n         self.predecessor_cache.invalidate();\n         self.switch_source_cache.invalidate();\n         self.is_cyclic.invalidate();\n+        self.postorder_cache.invalidate();\n         (&mut self.basic_blocks, &mut self.local_decls)\n     }\n \n@@ -446,6 +453,7 @@ impl<'tcx> Body<'tcx> {\n         self.predecessor_cache.invalidate();\n         self.switch_source_cache.invalidate();\n         self.is_cyclic.invalidate();\n+        self.postorder_cache.invalidate();\n         (&mut self.basic_blocks, &mut self.local_decls, &mut self.var_debug_info)\n     }\n "}, {"sha": "8d831cc73b8a40409d5cb8b0deb3caa85c342e78", "filename": "compiler/rustc_middle/src/mir/traversal.rs", "status": "modified", "additions": 86, "deletions": 4, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftraversal.rs?ref=7149bbcdc5739e4ed1fa3697c1b4d441f1d4441c", "patch": "@@ -1,4 +1,7 @@\n+use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n+use rustc_data_structures::sync::OnceCell;\n use rustc_index::bit_set::BitSet;\n+use rustc_serialize as serialize;\n \n use super::*;\n \n@@ -268,10 +271,6 @@ impl<'a, 'tcx> ReversePostorder<'a, 'tcx> {\n     }\n }\n \n-pub fn reverse_postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> ReversePostorder<'a, 'tcx> {\n-    ReversePostorder::new(body, START_BLOCK)\n-}\n-\n impl<'a, 'tcx> Iterator for ReversePostorder<'a, 'tcx> {\n     type Item = (BasicBlock, &'a BasicBlockData<'tcx>);\n \n@@ -307,3 +306,86 @@ pub fn reachable_as_bitset<'tcx>(body: &Body<'tcx>) -> BitSet<BasicBlock> {\n     (&mut iter).for_each(drop);\n     iter.visited\n }\n+\n+#[derive(Clone)]\n+pub struct ReversePostorderIter<'a, 'tcx> {\n+    body: &'a Body<'tcx>,\n+    blocks: &'a Vec<BasicBlock>,\n+    idx: usize,\n+}\n+\n+impl<'a, 'tcx> Iterator for ReversePostorderIter<'a, 'tcx> {\n+    type Item = (BasicBlock, &'a BasicBlockData<'tcx>);\n+\n+    fn next(&mut self) -> Option<(BasicBlock, &'a BasicBlockData<'tcx>)> {\n+        if self.idx == 0 {\n+            return None;\n+        }\n+        self.idx -= 1;\n+\n+        self.blocks.get(self.idx).map(|&bb| (bb, &self.body[bb]))\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (self.idx, Some(self.idx))\n+    }\n+}\n+\n+impl<'a, 'tcx> ExactSizeIterator for ReversePostorderIter<'a, 'tcx> {}\n+\n+pub fn reverse_postorder<'a, 'tcx>(body: &'a Body<'tcx>) -> ReversePostorderIter<'a, 'tcx> {\n+    let blocks = body.postorder_cache.compute(body);\n+\n+    let len = blocks.len();\n+\n+    ReversePostorderIter { body, blocks, idx: len }\n+}\n+\n+#[derive(Clone, Debug)]\n+pub(super) struct PostorderCache {\n+    cache: OnceCell<Vec<BasicBlock>>,\n+}\n+\n+impl PostorderCache {\n+    #[inline]\n+    pub(super) fn new() -> Self {\n+        PostorderCache { cache: OnceCell::new() }\n+    }\n+\n+    /// Invalidates the postorder cache.\n+    #[inline]\n+    pub(super) fn invalidate(&mut self) {\n+        self.cache = OnceCell::new();\n+    }\n+\n+    /// Returns the &Vec<BasicBlocks> represents the postorder graph for this MIR.\n+    #[inline]\n+    pub(super) fn compute(&self, body: &Body<'_>) -> &Vec<BasicBlock> {\n+        self.cache.get_or_init(|| Postorder::new(body, START_BLOCK).map(|(bb, _)| bb).collect())\n+    }\n+}\n+\n+impl<S: serialize::Encoder> serialize::Encodable<S> for PostorderCache {\n+    #[inline]\n+    fn encode(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_unit()\n+    }\n+}\n+\n+impl<D: serialize::Decoder> serialize::Decodable<D> for PostorderCache {\n+    #[inline]\n+    fn decode(_: &mut D) -> Self {\n+        Self::new()\n+    }\n+}\n+\n+impl<CTX> HashStable<CTX> for PostorderCache {\n+    #[inline]\n+    fn hash_stable(&self, _: &mut CTX, _: &mut StableHasher) {\n+        // do nothing\n+    }\n+}\n+\n+TrivialTypeFoldableAndLiftImpls! {\n+    PostorderCache,\n+}"}]}