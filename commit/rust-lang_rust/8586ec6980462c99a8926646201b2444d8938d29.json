{"sha": "8586ec6980462c99a8926646201b2444d8938d29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ODZlYzY5ODA0NjJjOTlhODkyNjY0NjIwMWIyNDQ0ZDg5MzhkMjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-12T08:08:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-12T08:08:13Z"}, "message": "Auto merge of #54146 - kennytm:rollup, r=kennytm\n\nRollup of 15 pull requests\n\nSuccessful merges:\n\n - #52514 (Fix a few AMDGPU related issues)\n - #53703 (Document .0 to unpack integer from Wrapping)\n - #53777 (Implemented map_or_else for Result<T, E>)\n - #54031 (A few cleanups and minor improvements to rustc_passes)\n - #54046 (Update documentation for fill_buf in std::io::BufRead)\n - #54064 (`&CStr`, not `CStr`, is the counterpart of `&str`)\n - #54072 (Stabilization change for mod.rs)\n - #54073 (docs: Use dollar sign for all bash prompts)\n - #54074 (simplify ordering for Kind)\n - #54085 (Remove documentation about proc_macro being bare-bones)\n - #54087 (rustdoc: Remove generated blanket impls from trait pages)\n - #54106 (Reexport CheckLintNameResult)\n - #54107 (Fix typos in libstd hash map)\n - #54136 (Update LLVM to fix GlobalISel dbg.declare)\n - #54142 (Recover proper regression test for issue #16278.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "3a587254a39f2463c18874e31d3eadf471e7ee16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a587254a39f2463c18874e31d3eadf471e7ee16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8586ec6980462c99a8926646201b2444d8938d29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8586ec6980462c99a8926646201b2444d8938d29", "html_url": "https://github.com/rust-lang/rust/commit/8586ec6980462c99a8926646201b2444d8938d29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8586ec6980462c99a8926646201b2444d8938d29/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2b991b5305b770c7d5288ab3aa231428511c530", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2b991b5305b770c7d5288ab3aa231428511c530", "html_url": "https://github.com/rust-lang/rust/commit/a2b991b5305b770c7d5288ab3aa231428511c530"}, {"sha": "1fed251927ec14db621b7705b9cf10f267477254", "url": "https://api.github.com/repos/rust-lang/rust/commits/1fed251927ec14db621b7705b9cf10f267477254", "html_url": "https://github.com/rust-lang/rust/commit/1fed251927ec14db621b7705b9cf10f267477254"}], "stats": {"total": 630, "additions": 265, "deletions": 365}, "files": [{"sha": "0e5b7170bc6b4e320c13d0574a9bb3760b9662d8", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -125,9 +125,9 @@ you have a more recent version installed the build system doesn't understand\n then you may need to force rustbuild to use an older version. This can be done\n by manually calling the appropriate vcvars file before running the bootstrap.\n \n-```\n-CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\amd64\\vcvars64.bat\"\n-python x.py build\n+```batch\n+> CALL \"C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\bin\\amd64\\vcvars64.bat\"\n+> python x.py build\n ```\n \n #### Specifying an ABI"}, {"sha": "1e01d68fb3a614c5c3f6ce415269490f52c62d47", "filename": "src/bootstrap/README.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Fbootstrap%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Fbootstrap%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FREADME.md?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -8,14 +8,14 @@ system.\n \n The rustbuild build system has a primary entry point, a top level `x.py` script:\n \n-```\n-python ./x.py build\n+```sh\n+$ python ./x.py build\n ```\n \n Note that if you're on Unix you should be able to execute the script directly:\n \n-```\n-./x.py build\n+```sh\n+$ ./x.py build\n ```\n \n The script accepts commands, flags, and arguments to determine what to do:\n@@ -129,18 +129,18 @@ To follow this course of action, first thing you will want to do is to\n install a nightly, presumably using `rustup`. You will then want to\n configure your directory to use this build, like so:\n \n-```\n+```sh\n # configure to use local rust instead of downloading a beta.\n # `--local-rust-root` is optional here. If elided, we will\n # use whatever rustc we find on your PATH.\n-> ./configure --local-rust-root=~/.cargo/ --enable-local-rebuild\n+$ ./configure --local-rust-root=~/.cargo/ --enable-local-rebuild\n ```\n \n After that, you can use the `--incremental` flag to actually do\n incremental builds:\n \n-```\n-> ./x.py build --incremental\n+```sh\n+$ ./x.py build --incremental\n ```\n \n The `--incremental` flag will store incremental compilation artifacts\n@@ -159,7 +159,7 @@ will still be using the local nightly as your bootstrap).\n This build system houses all output under the `build` directory, which looks\n like this:\n \n-```\n+```sh\n # Root folder of all output. Everything is scoped underneath here\n build/\n "}, {"sha": "49c0026ce1a9b572d80989400df62d74a4199bc2", "filename": "src/doc/rustc/src/lints/index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Findex.md?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -12,7 +12,7 @@ $ cat main.rs\n fn main() {\n     let x = 5;\n }\n-> rustc main.rs\n+$ rustc main.rs\n warning: unused variable: `x`\n  --> main.rs:2:9\n   |"}, {"sha": "072c7585934e805a2209868043466317c48e1090", "filename": "src/doc/rustc/src/lints/levels.md", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -45,7 +45,7 @@ pub fn foo() {\n \n This will produce this warning:\n \n-```console\n+```bash\n $ rustc lib.rs --crate-type=lib\n warning: unused variable: `x`\n  --> lib.rs:2:9\n@@ -69,7 +69,7 @@ fn main() {\n ```\n \n ```bash\n-> rustc main.rs\n+$ rustc main.rs\n error: bitshift exceeds the type's number of bits\n  --> main.rs:2:13\n   |\n@@ -129,7 +129,10 @@ warning: missing documentation for a function\n   |\n 1 | pub fn foo() {}\n   | ^^^^^^^^^^^^\n-> rustc lib.rs --crate-type=lib -D missing-docs\n+```\n+\n+```bash\n+$ rustc lib.rs --crate-type=lib -D missing-docs\n error: missing documentation for crate\n  --> lib.rs:1:1\n   |\n@@ -150,21 +153,21 @@ error: aborting due to 2 previous errors\n You can also pass each flag more than once for changing multiple lints:\n \n ```bash\n-rustc lib.rs --crate-type=lib -D missing-docs -D unused-variables\n+$ rustc lib.rs --crate-type=lib -D missing-docs -D unused-variables\n ```\n \n And of course, you can mix these four flags together:\n \n ```bash\n-rustc lib.rs --crate-type=lib -D missing-docs -A unused-variables\n+$ rustc lib.rs --crate-type=lib -D missing-docs -A unused-variables\n ```\n \n ### Via an attribute\n \n You can also modify the lint level with a crate-wide attribute:\n \n ```bash\n-> cat lib.rs\n+$ cat lib.rs\n #![warn(missing_docs)]\n \n pub fn foo() {}"}, {"sha": "12da0455cc56be021cf2bf90db516db6f44e5b61", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -122,6 +122,9 @@ nonzero_integers! {\n /// all standard arithmetic operations on the underlying value are\n /// intended to have wrapping semantics.\n ///\n+/// The underlying value can be retrieved through the `.0` index of the\n+/// `Wrapping` tuple.\n+///\n /// # Examples\n ///\n /// ```"}, {"sha": "93ee11aac36b000937eb5756e7293a3df57658a7", "filename": "src/libcore/result.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -470,6 +470,36 @@ impl<T, E> Result<T, E> {\n         }\n     }\n \n+    /// Maps a `Result<T, E>` to `U` by applying a function to a\n+    /// contained [`Ok`] value, or a fallback function to a\n+    /// contained [`Err`] value.\n+    ///\n+    /// This function can be used to unpack a successful result\n+    /// while handling an error.\n+    ///\n+    /// [`Ok`]: enum.Result.html#variant.Ok\n+    /// [`Err`]: enum.Result.html#variant.Err\n+    ///\n+    /// # Examples\n+    ///\n+    /// Basic usage:\n+    ///\n+    /// ```\n+    /// #![feature(result_map_or_else)]\n+    /// let k = 21;\n+    ///\n+    /// let x : Result<_, &str> = Ok(\"foo\");\n+    /// assert_eq!(x.map_or_else(|e| k * 2, |v| v.len()), 3);\n+    ///\n+    /// let x : Result<&str, _> = Err(\"bar\");\n+    /// assert_eq!(x.map_or_else(|e| k * 2, |v| v.len()), 42);\n+    /// ```\n+    #[inline]\n+    #[unstable(feature = \"result_map_or_else\", issue = \"53268\")]\n+    pub fn map_or_else<U, M: FnOnce(T) -> U, F: FnOnce(E) -> U>(self, fallback: F, map: M) -> U {\n+        self.map(map).unwrap_or_else(fallback)\n+    }\n+\n     /// Maps a `Result<T, E>` to `Result<T, F>` by applying a function to a\n     /// contained [`Err`] value, leaving an [`Ok`] value untouched.\n     ///"}, {"sha": "1de9cd35442995ae618b1b4d630d965358751546", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -15,10 +15,6 @@\n //! function-like macros `#[proc_macro]`, macro attributes `#[proc_macro_attribute]` and\n //! custom derive attributes`#[proc_macro_derive]`.\n //!\n-//! Note that this crate is intentionally bare-bones currently.\n-//! This functionality is intended to be expanded over time as more surface\n-//! area for macro authors is stabilized.\n-//!\n //! See [the book](../book/first-edition/procedural-macros.html) for more.\n \n #![stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n@@ -73,9 +69,6 @@ use syntax_pos::{Pos, FileName};\n ///\n /// This is both the input and output of `#[proc_macro]`, `#[proc_macro_attribute]`\n /// and `#[proc_macro_derive]` definitions.\n-///\n-/// The API of this type is intentionally bare-bones, but it'll be expanded over\n-/// time!\n #[stable(feature = \"proc_macro_lib\", since = \"1.15.0\")]\n #[derive(Clone)]\n pub struct TokenStream(tokenstream::TokenStream);"}, {"sha": "8d2851d1b77442403e9604969d22e8c8dcc6cf4d", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -53,7 +53,7 @@ use ty::query::Providers;\n use util::nodemap::NodeMap;\n \n pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n-                        check_crate, check_ast_crate,\n+                        check_crate, check_ast_crate, CheckLintNameResult,\n                         FutureIncompatibleInfo, BufferedEarlyLint};\n \n /// Specification of a single lint."}, {"sha": "696c4d0043c14993dd374c9c10fc943d339174cc", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -42,7 +42,7 @@ const TAG_MASK: usize = 0b11;\n const TYPE_TAG: usize = 0b00;\n const REGION_TAG: usize = 0b01;\n \n-#[derive(Debug, RustcEncodable, RustcDecodable)]\n+#[derive(Debug, RustcEncodable, RustcDecodable, PartialEq, Eq, PartialOrd, Ord)]\n pub enum UnpackedKind<'tcx> {\n     Lifetime(ty::Region<'tcx>),\n     Type(Ty<'tcx>),\n@@ -74,17 +74,7 @@ impl<'tcx> UnpackedKind<'tcx> {\n \n impl<'tcx> Ord for Kind<'tcx> {\n     fn cmp(&self, other: &Kind) -> Ordering {\n-        match (self.unpack(), other.unpack()) {\n-            (UnpackedKind::Type(_), UnpackedKind::Lifetime(_)) => Ordering::Greater,\n-\n-            (UnpackedKind::Type(ty1), UnpackedKind::Type(ty2)) => {\n-                ty1.sty.cmp(&ty2.sty)\n-            }\n-\n-            (UnpackedKind::Lifetime(reg1), UnpackedKind::Lifetime(reg2)) => reg1.cmp(reg2),\n-\n-            (UnpackedKind::Lifetime(_), UnpackedKind::Type(_))  => Ordering::Less,\n-        }\n+        self.unpack().cmp(&other.unpack())\n     }\n }\n "}, {"sha": "51380db5b23df295c4f1125e5d12a3ec8f7d4c22", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -16,6 +16,7 @@ use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::session::Session;\n use rustc::session::config::Sanitizer;\n use rustc::ty::TyCtxt;\n+use rustc::ty::layout::HasTyCtxt;\n use rustc::ty::query::Providers;\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::fx::FxHashMap;\n@@ -32,12 +33,16 @@ use value::Value;\n \n /// Mark LLVM function to use provided inline heuristic.\n #[inline]\n-pub fn inline(val: &'ll Value, inline: InlineAttr) {\n+pub fn inline(cx: &CodegenCx<'ll, '_>, val: &'ll Value, inline: InlineAttr) {\n     use self::InlineAttr::*;\n     match inline {\n         Hint   => Attribute::InlineHint.apply_llfn(Function, val),\n         Always => Attribute::AlwaysInline.apply_llfn(Function, val),\n-        Never  => Attribute::NoInline.apply_llfn(Function, val),\n+        Never  => {\n+            if cx.tcx().sess.target.target.arch != \"amdgpu\" {\n+                Attribute::NoInline.apply_llfn(Function, val);\n+            }\n+        },\n         None   => {\n             Attribute::InlineHint.unapply_llfn(Function, val);\n             Attribute::AlwaysInline.unapply_llfn(Function, val);\n@@ -143,7 +148,7 @@ pub fn from_fn_attrs(\n     let codegen_fn_attrs = id.map(|id| cx.tcx.codegen_fn_attrs(id))\n         .unwrap_or(CodegenFnAttrs::new());\n \n-    inline(llfn, codegen_fn_attrs.inline);\n+    inline(cx, llfn, codegen_fn_attrs.inline);\n \n     // The `uwtable` attribute according to LLVM is:\n     //"}, {"sha": "e3526a5a2eead0888bb2b4e065a096ff84baa4bf", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -496,6 +496,14 @@ impl Builder<'a, 'll, 'tcx> {\n \n \n     pub fn range_metadata(&self, load: &'ll Value, range: Range<u128>) {\n+        if self.sess().target.target.arch == \"amdgpu\" {\n+            // amdgpu/LLVM does something weird and thinks a i64 value is\n+            // split into a v2i32, halving the bitwidth LLVM expects,\n+            // tripping an assertion. So, for now, just disable this\n+            // optimization.\n+            return;\n+        }\n+\n         unsafe {\n             let llty = val_ty(load);\n             let v = ["}, {"sha": "4b4ccb3b600b3a54f0d7a31dcac80ba472c2b828", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -96,7 +96,7 @@ pub fn get_fn(\n         debug!(\"get_fn: not casting pointer!\");\n \n         if instance.def.is_inline(tcx) {\n-            attributes::inline(llfn, attributes::InlineAttr::Hint);\n+            attributes::inline(cx, llfn, attributes::InlineAttr::Hint);\n         }\n         attributes::from_fn_attrs(cx, llfn, Some(instance.def.def_id()));\n "}, {"sha": "a8502e9244768b8aee7835dd4167bfffeff311fb", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -180,7 +180,7 @@ fn predefine_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n \n     debug!(\"predefine_fn: mono_ty = {:?} instance = {:?}\", mono_ty, instance);\n     if instance.def.is_inline(cx.tcx) {\n-        attributes::inline(lldecl, attributes::InlineAttr::Hint);\n+        attributes::inline(cx, lldecl, attributes::InlineAttr::Hint);\n     }\n     attributes::from_fn_attrs(cx, lldecl, Some(instance.def.def_id()));\n "}, {"sha": "7d01ed556c8ddbee7d76dbdc369c7cb937ab5480", "filename": "src/librustc_llvm/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_llvm%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_llvm%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fbuild.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -81,7 +81,7 @@ fn main() {\n     let is_crossed = target != host;\n \n     let mut optional_components =\n-        vec![\"x86\", \"arm\", \"aarch64\", \"mips\", \"powerpc\",\n+        vec![\"x86\", \"arm\", \"aarch64\", \"amdgpu\", \"mips\", \"powerpc\",\n              \"systemz\", \"jsbackend\", \"webassembly\", \"msp430\", \"sparc\", \"nvptx\"];\n \n     let mut version_cmd = Command::new(&llvm_config);"}, {"sha": "2ee5415018f934ece32799bb45f132a1139caac5", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 23, "deletions": 30, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -99,22 +99,19 @@ impl<'a> AstValidator<'a> {\n     }\n \n     fn check_trait_fn_not_const(&self, constness: Spanned<Constness>) {\n-        match constness.node {\n-            Constness::Const => {\n-                struct_span_err!(self.session, constness.span, E0379,\n-                                 \"trait fns cannot be declared const\")\n-                    .span_label(constness.span, \"trait fns cannot be const\")\n-                    .emit();\n-            }\n-            _ => {}\n+        if constness.node == Constness::Const {\n+            struct_span_err!(self.session, constness.span, E0379,\n+                             \"trait fns cannot be declared const\")\n+                .span_label(constness.span, \"trait fns cannot be const\")\n+                .emit();\n         }\n     }\n \n     fn no_questions_in_bounds(&self, bounds: &GenericBounds, where_: &str, is_trait: bool) {\n         for bound in bounds {\n             if let GenericBound::Trait(ref poly, TraitBoundModifier::Maybe) = *bound {\n                 let mut err = self.err_handler().struct_span_err(poly.span,\n-                                    &format!(\"`?Trait` is not permitted in {}\", where_));\n+                    &format!(\"`?Trait` is not permitted in {}\", where_));\n                 if is_trait {\n                     err.note(&format!(\"traits are `?{}` by default\", poly.trait_ref.path));\n                 }\n@@ -153,16 +150,16 @@ impl<'a> AstValidator<'a> {\n         // Check only lifetime parameters are present and that the lifetime\n         // parameters that are present have no bounds.\n         let non_lt_param_spans: Vec<_> = params.iter().filter_map(|param| match param.kind {\n-                GenericParamKind::Lifetime { .. } => {\n-                    if !param.bounds.is_empty() {\n-                        let spans: Vec<_> = param.bounds.iter().map(|b| b.span()).collect();\n-                        self.err_handler()\n-                            .span_err(spans, \"lifetime bounds cannot be used in this context\");\n-                    }\n-                    None\n+            GenericParamKind::Lifetime { .. } => {\n+                if !param.bounds.is_empty() {\n+                    let spans: Vec<_> = param.bounds.iter().map(|b| b.span()).collect();\n+                    self.err_handler()\n+                        .span_err(spans, \"lifetime bounds cannot be used in this context\");\n                 }\n-                _ => Some(param.ident.span),\n-            }).collect();\n+                None\n+            }\n+            _ => Some(param.ident.span),\n+        }).collect();\n         if !non_lt_param_spans.is_empty() {\n             self.err_handler().span_err(non_lt_param_spans,\n                 \"only lifetime parameters can be used in this context\");\n@@ -438,7 +435,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                     self.err_handler().span_err(item.span,\n                                                 \"tuple and unit unions are not permitted\");\n                 }\n-                if vdata.fields().len() == 0 {\n+                if vdata.fields().is_empty() {\n                     self.err_handler().span_err(item.span,\n                                                 \"unions cannot have zero fields\");\n                 }\n@@ -465,14 +462,11 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n     }\n \n     fn visit_vis(&mut self, vis: &'a Visibility) {\n-        match vis.node {\n-            VisibilityKind::Restricted { ref path, .. } => {\n-                path.segments.iter().find(|segment| segment.args.is_some()).map(|segment| {\n-                    self.err_handler().span_err(segment.args.as_ref().unwrap().span(),\n-                                                \"generic arguments in visibility path\");\n-                });\n-            }\n-            _ => {}\n+        if let VisibilityKind::Restricted { ref path, .. } = vis.node {\n+            path.segments.iter().find(|segment| segment.args.is_some()).map(|segment| {\n+                self.err_handler().span_err(segment.args.as_ref().unwrap().span(),\n+                                            \"generic arguments in visibility path\");\n+            });\n         }\n \n         visit::walk_vis(self, vis)\n@@ -642,8 +636,7 @@ impl<'a> Visitor<'a> for ImplTraitProjectionVisitor<'a> {\n             TyKind::ImplTrait(..) => {\n                 if self.is_banned {\n                     struct_span_err!(self.session, t.span, E0667,\n-                                 \"`impl Trait` is not allowed in path parameters\")\n-                        .emit();\n+                        \"`impl Trait` is not allowed in path parameters\").emit();\n                 }\n             }\n             TyKind::Path(ref qself, ref path) => {\n@@ -667,7 +660,7 @@ impl<'a> Visitor<'a> for ImplTraitProjectionVisitor<'a> {\n \n                 for (i, segment) in path.segments.iter().enumerate() {\n                     // Allow `impl Trait` iff we're on the final path segment\n-                    if i == (path.segments.len() - 1) {\n+                    if i == path.segments.len() - 1 {\n                         visit::walk_path_segment(self, path.span, segment);\n                     } else {\n                         self.with_ban(|this|"}, {"sha": "b65a2e3f0e5306f3033f71269c2e0db136a5c07c", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -61,10 +61,8 @@ pub fn print_ast_stats<'v>(krate: &'v ast::Crate, title: &str) {\n impl<'k> StatCollector<'k> {\n \n     fn record<T>(&mut self, label: &'static str, id: Id, node: &T) {\n-        if id != Id::None {\n-            if !self.seen.insert(id) {\n-                return\n-            }\n+        if id != Id::None && !self.seen.insert(id) {\n+            return\n         }\n \n         let entry = self.data.entry(label).or_insert(NodeData {\n@@ -135,40 +133,46 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_item(self, i)\n     }\n \n-    ///////////////////////////////////////////////////////////////////////////\n-\n     fn visit_mod(&mut self, m: &'v hir::Mod, _s: Span, n: NodeId) {\n         self.record(\"Mod\", Id::None, m);\n         hir_visit::walk_mod(self, m, n)\n     }\n+\n     fn visit_foreign_item(&mut self, i: &'v hir::ForeignItem) {\n         self.record(\"ForeignItem\", Id::Node(i.id), i);\n         hir_visit::walk_foreign_item(self, i)\n     }\n+\n     fn visit_local(&mut self, l: &'v hir::Local) {\n         self.record(\"Local\", Id::Node(l.id), l);\n         hir_visit::walk_local(self, l)\n     }\n+\n     fn visit_block(&mut self, b: &'v hir::Block) {\n         self.record(\"Block\", Id::Node(b.id), b);\n         hir_visit::walk_block(self, b)\n     }\n+\n     fn visit_stmt(&mut self, s: &'v hir::Stmt) {\n         self.record(\"Stmt\", Id::Node(s.node.id()), s);\n         hir_visit::walk_stmt(self, s)\n     }\n+\n     fn visit_arm(&mut self, a: &'v hir::Arm) {\n         self.record(\"Arm\", Id::None, a);\n         hir_visit::walk_arm(self, a)\n     }\n+\n     fn visit_pat(&mut self, p: &'v hir::Pat) {\n         self.record(\"Pat\", Id::Node(p.id), p);\n         hir_visit::walk_pat(self, p)\n     }\n+\n     fn visit_decl(&mut self, d: &'v hir::Decl) {\n         self.record(\"Decl\", Id::None, d);\n         hir_visit::walk_decl(self, d)\n     }\n+\n     fn visit_expr(&mut self, ex: &'v hir::Expr) {\n         self.record(\"Expr\", Id::Node(ex.id), ex);\n         hir_visit::walk_expr(self, ex)\n@@ -198,6 +202,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         self.record(\"TraitItem\", Id::Node(ti.id), ti);\n         hir_visit::walk_trait_item(self, ti)\n     }\n+\n     fn visit_impl_item(&mut self, ii: &'v hir::ImplItem) {\n         self.record(\"ImplItem\", Id::Node(ii.id), ii);\n         hir_visit::walk_impl_item(self, ii)\n@@ -220,31 +225,38 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         self.record(\"Variant\", Id::None, v);\n         hir_visit::walk_variant(self, v, g, item_id)\n     }\n+\n     fn visit_lifetime(&mut self, lifetime: &'v hir::Lifetime) {\n         self.record(\"Lifetime\", Id::Node(lifetime.id), lifetime);\n         hir_visit::walk_lifetime(self, lifetime)\n     }\n+\n     fn visit_qpath(&mut self, qpath: &'v hir::QPath, id: hir::HirId, span: Span) {\n         self.record(\"QPath\", Id::None, qpath);\n         hir_visit::walk_qpath(self, qpath, id, span)\n     }\n+\n     fn visit_path(&mut self, path: &'v hir::Path, _id: hir::HirId) {\n         self.record(\"Path\", Id::None, path);\n         hir_visit::walk_path(self, path)\n     }\n+\n     fn visit_path_segment(&mut self,\n                           path_span: Span,\n                           path_segment: &'v hir::PathSegment) {\n         self.record(\"PathSegment\", Id::None, path_segment);\n         hir_visit::walk_path_segment(self, path_span, path_segment)\n     }\n+\n     fn visit_assoc_type_binding(&mut self, type_binding: &'v hir::TypeBinding) {\n         self.record(\"TypeBinding\", Id::Node(type_binding.id), type_binding);\n         hir_visit::walk_assoc_type_binding(self, type_binding)\n     }\n+\n     fn visit_attribute(&mut self, attr: &'v ast::Attribute) {\n         self.record(\"Attribute\", Id::Attr(attr.id), attr);\n     }\n+\n     fn visit_macro_def(&mut self, macro_def: &'v hir::MacroDef) {\n         self.record(\"MacroDef\", Id::Node(macro_def.id), macro_def);\n         hir_visit::walk_macro_def(self, macro_def)"}, {"sha": "61c2ac161bb08096d35fa7d930246940f0436d34", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -114,9 +114,8 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                 };\n \n                 if loop_id != ast::DUMMY_NODE_ID {\n-                    match self.hir_map.find(loop_id).unwrap() {\n-                        Node::Block(_) => return,\n-                        _=> (),\n+                    if let Node::Block(_) = self.hir_map.find(loop_id).unwrap() {\n+                        return\n                     }\n                 }\n \n@@ -153,10 +152,10 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n \n                 self.require_break_cx(\"break\", e.span);\n             }\n-            hir::ExprKind::Continue(label) => {\n-                self.require_label_in_labeled_block(e.span, &label, \"continue\");\n+            hir::ExprKind::Continue(destination) => {\n+                self.require_label_in_labeled_block(e.span, &destination, \"continue\");\n \n-                match label.target_id {\n+                match destination.target_id {\n                     Ok(loop_id) => {\n                         if let Node::Block(block) = self.hir_map.find(loop_id).unwrap() {\n                             struct_span_err!(self.sess, e.span, E0696,\n@@ -171,7 +170,7 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                     Err(hir::LoopIdError::UnlabeledCfInWhileCondition) => {\n                         self.emit_unlabled_cf_in_while_condition(e.span, \"continue\");\n                     }\n-                    _ => {}\n+                    Err(_) => {}\n                 }\n                 self.require_break_cx(\"continue\", e.span)\n             },\n@@ -192,8 +191,7 @@ impl<'a, 'hir> CheckLoopVisitor<'a, 'hir> {\n \n     fn require_break_cx(&self, name: &str, span: Span) {\n         match self.cx {\n-            LabeledBlock |\n-            Loop(_) => {}\n+            LabeledBlock | Loop(_) => {}\n             Closure => {\n                 struct_span_err!(self.sess, span, E0267, \"`{}` inside of a closure\", name)\n                 .span_label(span, \"cannot break inside of a closure\")"}, {"sha": "0120b5bc5322f1239490cd405c588a6dd72c675e", "filename": "src/librustc_passes/mir_stats.rs", "status": "modified", "additions": 11, "deletions": 30, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_passes%2Fmir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_passes%2Fmir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fmir_stats.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -65,15 +65,12 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.super_mir(mir);\n     }\n \n-    fn visit_basic_block_data(&mut self,\n-                              block: BasicBlock,\n-                              data: &BasicBlockData<'tcx>) {\n+    fn visit_basic_block_data(&mut self, block: BasicBlock, data: &BasicBlockData<'tcx>) {\n         self.record(\"BasicBlockData\", data);\n         self.super_basic_block_data(block, data);\n     }\n \n-    fn visit_source_scope_data(&mut self,\n-                                   scope_data: &SourceScopeData) {\n+    fn visit_source_scope_data(&mut self, scope_data: &SourceScopeData) {\n         self.record(\"SourceScopeData\", scope_data);\n         self.super_source_scope_data(scope_data);\n     }\n@@ -130,9 +127,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.super_terminator_kind(block, kind, location);\n     }\n \n-    fn visit_assert_message(&mut self,\n-                            msg: &AssertMessage<'tcx>,\n-                            location: Location) {\n+    fn visit_assert_message(&mut self, msg: &AssertMessage<'tcx>, location: Location) {\n         self.record(\"AssertMessage\", msg);\n         self.record(match *msg {\n             EvalErrorKind::BoundsCheck { .. } => \"AssertMessage::BoundsCheck\",\n@@ -151,9 +146,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.super_assert_message(msg, location);\n     }\n \n-    fn visit_rvalue(&mut self,\n-                    rvalue: &Rvalue<'tcx>,\n-                    location: Location) {\n+    fn visit_rvalue(&mut self, rvalue: &Rvalue<'tcx>, location: Location) {\n         self.record(\"Rvalue\", rvalue);\n         let rvalue_kind = match *rvalue {\n             Rvalue::Use(..) => \"Rvalue::Use\",\n@@ -184,9 +177,7 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.super_rvalue(rvalue, location);\n     }\n \n-    fn visit_operand(&mut self,\n-                     operand: &Operand<'tcx>,\n-                     location: Location) {\n+    fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {\n         self.record(\"Operand\", operand);\n         self.record(match *operand {\n             Operand::Copy(..) => \"Operand::Copy\",\n@@ -234,42 +225,32 @@ impl<'a, 'tcx> mir_visit::Visitor<'tcx> for StatCollector<'a, 'tcx> {\n         self.super_projection_elem(place, context, location);\n     }\n \n-    fn visit_constant(&mut self,\n-                      constant: &Constant<'tcx>,\n-                      location: Location) {\n+    fn visit_constant(&mut self, constant: &Constant<'tcx>, location: Location) {\n         self.record(\"Constant\", constant);\n         self.super_constant(constant, location);\n     }\n \n-    fn visit_source_info(&mut self,\n-                         source_info: &SourceInfo) {\n+    fn visit_source_info(&mut self, source_info: &SourceInfo) {\n         self.record(\"SourceInfo\", source_info);\n         self.super_source_info(source_info);\n     }\n \n-    fn visit_closure_substs(&mut self,\n-                            substs: &ClosureSubsts<'tcx>,\n-                            _: Location) {\n+    fn visit_closure_substs(&mut self, substs: &ClosureSubsts<'tcx>, _: Location) {\n         self.record(\"ClosureSubsts\", substs);\n         self.super_closure_substs(substs);\n     }\n \n-    fn visit_const(&mut self,\n-                   constant: &&'tcx ty::Const<'tcx>,\n-                   _: Location) {\n+    fn visit_const(&mut self, constant: &&'tcx ty::Const<'tcx>, _: Location) {\n         self.record(\"Const\", constant);\n         self.super_const(constant);\n     }\n \n-    fn visit_local_decl(&mut self,\n-                        local: Local,\n-                        local_decl: &LocalDecl<'tcx>) {\n+    fn visit_local_decl(&mut self, local: Local, local_decl: &LocalDecl<'tcx>) {\n         self.record(\"LocalDecl\", local_decl);\n         self.super_local_decl(local, local_decl);\n     }\n \n-    fn visit_source_scope(&mut self,\n-                              scope: &SourceScope) {\n+    fn visit_source_scope(&mut self, scope: &SourceScope) {\n         self.record(\"VisiblityScope\", scope);\n         self.super_source_scope(scope);\n     }"}, {"sha": "74b010f57b01d7c1279b7375ef0ddb1c30210cd4", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 37, "deletions": 53, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -41,8 +41,7 @@ use syntax::ast;\n use syntax::attr;\n use syntax_pos::{Span, DUMMY_SP};\n use self::Promotability::*;\n-use std::ops::{BitAnd, BitOr};\n-\n+use std::ops::{BitAnd, BitAndAssign, BitOr};\n \n pub fn provide(providers: &mut Providers) {\n     *providers = Providers {\n@@ -114,7 +113,7 @@ struct CheckCrateVisitor<'a, 'tcx: 'a> {\n }\n \n #[must_use]\n-#[derive(Debug, PartialEq)]\n+#[derive(Debug, Clone, Copy, PartialEq)]\n enum Promotability {\n     Promotable,\n     NotPromotable\n@@ -125,23 +124,25 @@ impl BitAnd for Promotability {\n \n     fn bitand(self, rhs: Self) -> Self {\n         match (self, rhs) {\n-            (Promotable, NotPromotable) => NotPromotable,\n-            (NotPromotable, Promotable) => NotPromotable,\n-            (NotPromotable, NotPromotable) => NotPromotable,\n             (Promotable, Promotable) => Promotable,\n+            _ => NotPromotable,\n         }\n     }\n }\n \n+impl BitAndAssign for Promotability {\n+    fn bitand_assign(&mut self, rhs: Self) {\n+        *self = *self & rhs\n+    }\n+}\n+\n impl BitOr for Promotability {\n     type Output = Self;\n \n     fn bitor(self, rhs: Self) -> Self {\n         match (self, rhs) {\n-            (Promotable, NotPromotable) => Promotable,\n-            (NotPromotable, Promotable) => Promotable,\n             (NotPromotable, NotPromotable) => NotPromotable,\n-            (Promotable, Promotable) => Promotable,\n+            _ => Promotable,\n         }\n     }\n }\n@@ -161,7 +162,7 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n \n     fn handle_const_fn_call(&mut self, def_id: DefId,\n                             ret_ty: Ty<'gcx>, span: Span) -> Promotability {\n-        if let NotPromotable = self.type_promotability(ret_ty) {\n+        if self.type_promotability(ret_ty) == NotPromotable {\n             return NotPromotable;\n         }\n \n@@ -266,9 +267,8 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n                             }\n                         }\n \n-                        match local.init {\n-                            Some(ref expr) => { let _ = self.check_expr(&expr); },\n-                            None => {},\n+                        if let Some(ref expr) = local.init {\n+                            let _ = self.check_expr(&expr);\n                         }\n                         NotPromotable\n                     }\n@@ -287,7 +287,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n     fn check_expr(&mut self, ex: &'tcx hir::Expr) -> Promotability {\n         let node_ty = self.tables.node_id_to_type(ex.hir_id);\n         let mut outer = check_expr_kind(self, ex, node_ty);\n-        outer = outer & check_adjustments(self, ex);\n+        outer &= check_adjustments(self, ex);\n \n         // Handle borrows on (or inside the autorefs of) this expression.\n         if self.mut_rvalue_borrows.remove(&ex.id) {\n@@ -303,7 +303,7 @@ impl<'a, 'tcx> CheckCrateVisitor<'a, 'tcx> {\n     fn check_block(&mut self, block: &'tcx hir::Block) -> Promotability {\n         let mut iter_result = Promotable;\n         for index in block.stmts.iter() {\n-            iter_result = iter_result & self.check_stmt(index);\n+            iter_result &= self.check_stmt(index);\n         }\n         match block.expr {\n             Some(ref box_expr) => iter_result & self.check_expr(&*box_expr),\n@@ -336,10 +336,7 @@ fn check_expr_kind<'a, 'tcx>(\n         }\n         hir::ExprKind::Unary(op, ref expr) => {\n             let expr_promotability = v.check_expr(expr);\n-            if v.tables.is_method_call(e) {\n-                return NotPromotable;\n-            }\n-            if op == hir::UnDeref {\n+            if v.tables.is_method_call(e) || op == hir::UnDeref {\n                 return NotPromotable;\n             }\n             expr_promotability\n@@ -353,8 +350,8 @@ fn check_expr_kind<'a, 'tcx>(\n             match v.tables.node_id_to_type(lhs.hir_id).sty {\n                 ty::RawPtr(_) => {\n                     assert!(op.node == hir::BinOpKind::Eq || op.node == hir::BinOpKind::Ne ||\n-                        op.node == hir::BinOpKind::Le || op.node == hir::BinOpKind::Lt ||\n-                        op.node == hir::BinOpKind::Ge || op.node == hir::BinOpKind::Gt);\n+                            op.node == hir::BinOpKind::Le || op.node == hir::BinOpKind::Lt ||\n+                            op.node == hir::BinOpKind::Ge || op.node == hir::BinOpKind::Gt);\n \n                     NotPromotable\n                 }\n@@ -400,7 +397,6 @@ fn check_expr_kind<'a, 'tcx>(\n                         debug!(\"Reference to Static(id={:?}) is unpromotable as it is not \\\n                                referenced from a static\", did);\n                         NotPromotable\n-\n                     }\n                 }\n \n@@ -425,7 +421,7 @@ fn check_expr_kind<'a, 'tcx>(\n         hir::ExprKind::Call(ref callee, ref hirvec) => {\n             let mut call_result = v.check_expr(callee);\n             for index in hirvec.iter() {\n-                call_result = call_result & v.check_expr(index);\n+                call_result &= v.check_expr(index);\n             }\n             let mut callee = &**callee;\n             loop {\n@@ -464,7 +460,7 @@ fn check_expr_kind<'a, 'tcx>(\n         hir::ExprKind::MethodCall(ref _pathsegment, ref _span, ref hirvec) => {\n             let mut method_call_result = Promotable;\n             for index in hirvec.iter() {\n-                method_call_result = method_call_result & v.check_expr(index);\n+                method_call_result &= v.check_expr(index);\n             }\n             if let Some(def) = v.tables.type_dependent_defs().get(e.hir_id) {\n                 let def_id = def.def_id();\n@@ -483,11 +479,10 @@ fn check_expr_kind<'a, 'tcx>(\n         hir::ExprKind::Struct(ref _qpath, ref hirvec, ref option_expr) => {\n             let mut struct_result = Promotable;\n             for index in hirvec.iter() {\n-                struct_result = struct_result & v.check_expr(&index.expr);\n+                struct_result &= v.check_expr(&index.expr);\n             }\n-            match *option_expr {\n-                Some(ref expr) => { struct_result = struct_result & v.check_expr(&expr); },\n-                None => {},\n+            if let Some(ref expr) = *option_expr {\n+                struct_result &= v.check_expr(&expr);\n             }\n             if let ty::Adt(adt, ..) = v.tables.expr_ty(e).sty {\n                 // unsafe_cell_type doesn't necessarily exist with no_core\n@@ -506,7 +501,7 @@ fn check_expr_kind<'a, 'tcx>(\n         }\n \n         hir::ExprKind::Closure(_capture_clause, ref _box_fn_decl,\n-                         body_id, _span, _option_generator_movability) => {\n+                               body_id, _span, _option_generator_movability) => {\n             let nested_body_promotable = v.check_nested_body(body_id);\n             // Paths in constant contexts cannot refer to local variables,\n             // as there are none, and thus closures can't have upvars there.\n@@ -543,7 +538,7 @@ fn check_expr_kind<'a, 'tcx>(\n         hir::ExprKind::Array(ref hirvec) => {\n             let mut array_result = Promotable;\n             for index in hirvec.iter() {\n-                array_result = array_result & v.check_expr(index);\n+                array_result &= v.check_expr(index);\n             }\n             array_result\n         }\n@@ -555,7 +550,7 @@ fn check_expr_kind<'a, 'tcx>(\n         hir::ExprKind::Tup(ref hirvec) => {\n             let mut tup_result = Promotable;\n             for index in hirvec.iter() {\n-                tup_result = tup_result & v.check_expr(index);\n+                tup_result &= v.check_expr(index);\n             }\n             tup_result\n         }\n@@ -576,23 +571,19 @@ fn check_expr_kind<'a, 'tcx>(\n             let _ = v.check_expr(expr);\n             for index in hirvec_arm.iter() {\n                 let _ = v.check_expr(&*index.body);\n-                match index.guard {\n-                    Some(hir::Guard::If(ref expr)) => {\n-                        let _ = v.check_expr(&expr);\n-                    },\n-                    None => {},\n-                };\n+                if let Some(hir::Guard::If(ref expr)) = index.guard {\n+                    let _ = v.check_expr(&expr);\n+                }\n             }\n             NotPromotable\n         }\n \n         hir::ExprKind::If(ref lhs, ref rhs, ref option_expr) => {\n             let _ = v.check_expr(lhs);\n             let _ = v.check_expr(rhs);\n-            match option_expr {\n-                Some(ref expr) => { let _ = v.check_expr(&expr); },\n-                None => {},\n-            };\n+            if let Some(ref expr) = option_expr {\n+                let _ = v.check_expr(&expr);\n+            }\n             NotPromotable\n         }\n \n@@ -610,9 +601,8 @@ fn check_expr_kind<'a, 'tcx>(\n \n         // More control flow (also not very meaningful).\n         hir::ExprKind::Break(_, ref option_expr) | hir::ExprKind::Ret(ref option_expr) => {\n-            match *option_expr {\n-                Some(ref expr) => { let _ = v.check_expr(&expr); },\n-                None => {},\n+            if let Some(ref expr) = *option_expr {\n+                 let _ = v.check_expr(&expr);\n             }\n             NotPromotable\n         }\n@@ -635,10 +625,7 @@ fn check_expr_kind<'a, 'tcx>(\n         }\n \n         hir::ExprKind::InlineAsm(ref _inline_asm, ref hirvec_lhs, ref hirvec_rhs) => {\n-            for index in hirvec_lhs.iter() {\n-                let _ = v.check_expr(index);\n-            }\n-            for index in hirvec_rhs.iter() {\n+            for index in hirvec_lhs.iter().chain(hirvec_rhs.iter()) {\n                 let _ = v.check_expr(index);\n             }\n             NotPromotable\n@@ -703,11 +690,8 @@ impl<'a, 'gcx, 'tcx> euv::Delegate<'tcx> for CheckCrateVisitor<'a, 'gcx> {\n         // These occur when we convert a &T or *T to a *U, as well as\n         // when making a thin pointer (e.g., `*T`) into a fat pointer\n         // (e.g., `*Trait`).\n-        match loan_cause {\n-            euv::LoanCause::AutoUnsafe => {\n-                return;\n-            }\n-            _ => {}\n+        if let euv::LoanCause::AutoUnsafe = loan_cause {\n+            return;\n         }\n \n         let mut cur = cmt;"}, {"sha": "62462f04d8f56574706e040b8daba5aa2988fde3", "filename": "src/librustc_target/abi/call/amdgpu.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_target%2Fabi%2Fcall%2Famdgpu.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_target%2Fabi%2Fcall%2Famdgpu.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Famdgpu.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use abi::call::{ArgType, FnType, };\n+use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n+\n+fn classify_ret_ty<'a, Ty, C>(_tuncx: C, ret: &mut ArgType<'a, Ty>)\n+  where Ty: TyLayoutMethods<'a, C> + Copy,\n+        C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n+  ret.extend_integer_width_to(32);\n+}\n+\n+fn classify_arg_ty<'a, Ty, C>(_cx: C, arg: &mut ArgType<'a, Ty>)\n+  where Ty: TyLayoutMethods<'a, C> + Copy,\n+        C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n+  arg.extend_integer_width_to(32);\n+}\n+\n+pub fn compute_abi_info<'a, Ty, C>(cx: C, fty: &mut FnType<'a, Ty>)\n+  where Ty: TyLayoutMethods<'a, C> + Copy,\n+        C: LayoutOf<Ty = Ty, TyLayout = TyLayout<'a, Ty>> + HasDataLayout\n+{\n+  if !fty.ret.is_ignore() {\n+    classify_ret_ty(cx, &mut fty.ret);\n+  }\n+\n+  for arg in &mut fty.args {\n+    if arg.is_ignore() {\n+      continue;\n+    }\n+    classify_arg_ty(cx, arg);\n+  }\n+}"}, {"sha": "788497a378fe9ee549874dfd2063b3fe84a23d56", "filename": "src/librustc_target/abi/call/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fcall%2Fmod.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -13,6 +13,7 @@ use abi::{HasDataLayout, LayoutOf, TyLayout, TyLayoutMethods};\n use spec::HasTargetSpec;\n \n mod aarch64;\n+mod amdgpu;\n mod arm;\n mod asmjs;\n mod hexagon;\n@@ -503,6 +504,7 @@ impl<'a, Ty> FnType<'a, Ty> {\n                 x86_64::compute_abi_info(cx, self);\n             },\n             \"aarch64\" => aarch64::compute_abi_info(cx, self),\n+            \"amdgpu\" => amdgpu::compute_abi_info(cx, self),\n             \"arm\" => arm::compute_abi_info(cx, self),\n             \"mips\" => mips::compute_abi_info(cx, self),\n             \"mips64\" => mips64::compute_abi_info(cx, self),"}, {"sha": "45a5e5115a39b0ed23d77d2bd248722109d3b667", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1257,9 +1257,11 @@ impl DocFolder for Cache {\n         // Collect all the implementors of traits.\n         if let clean::ImplItem(ref i) = item.inner {\n             if let Some(did) = i.trait_.def_id() {\n-                self.implementors.entry(did).or_default().push(Impl {\n-                    impl_item: item.clone(),\n-                });\n+                if i.blanket_impl.is_none() {\n+                    self.implementors.entry(did).or_default().push(Impl {\n+                        impl_item: item.clone(),\n+                    });\n+                }\n             }\n         }\n \n@@ -2931,7 +2933,6 @@ fn item_trait(\n \n \n         let (synthetic, concrete): (Vec<&&Impl>, Vec<&&Impl>) = local.iter()\n-            .filter(|i| i.inner_impl().blanket_impl.is_none())\n             .partition(|i| i.inner_impl().synthetic);\n \n         if !foreign.is_empty() {\n@@ -2941,17 +2942,14 @@ fn item_trait(\n                 </h2>\n             \")?;\n \n-            let mut foreign_cache = FxHashSet();\n             for implementor in foreign {\n-                if foreign_cache.insert(implementor.inner_impl().to_string()) {\n-                    let assoc_link = AssocItemLink::GotoSource(\n-                        implementor.impl_item.def_id,\n-                        &implementor.inner_impl().provided_trait_methods\n-                    );\n-                    render_impl(w, cx, &implementor, assoc_link,\n-                                RenderMode::Normal, implementor.impl_item.stable_since(), false,\n-                                None)?;\n-                }\n+                let assoc_link = AssocItemLink::GotoSource(\n+                    implementor.impl_item.def_id,\n+                    &implementor.inner_impl().provided_trait_methods\n+                );\n+                render_impl(w, cx, &implementor, assoc_link,\n+                            RenderMode::Normal, implementor.impl_item.stable_since(), false,\n+                            None)?;\n             }\n         }\n "}, {"sha": "804d43f4fc683a38bfd3a82168989fe7d4b2618c", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -166,14 +166,14 @@ impl DefaultResizePolicy {\n // Our hash generation scheme consists of generating a 64-bit hash and\n // truncating the most significant bits. When moving to the new table, we\n // simply introduce a new bit to the front of the hash. Therefore, if an\n-// elements has ideal index i in the old table, it can have one of two ideal\n+// element has ideal index i in the old table, it can have one of two ideal\n // locations in the new table. If the new bit is 0, then the new ideal index\n // is i. If the new bit is 1, then the new ideal index is n + i. Intuitively,\n // we are producing two independent tables of size n, and for each element we\n // independently choose which table to insert it into with equal probability.\n-// However the rather than wrapping around themselves on overflowing their\n-// indexes, the first table overflows into the first, and the first into the\n-// second. Visually, our new table will look something like:\n+// However, rather than wrapping around themselves on overflowing their\n+// indexes, the first table overflows into the second, and the second into the\n+// first. Visually, our new table will look something like:\n //\n // [yy_xxx_xxxx_xxx|xx_yyy_yyyy_yyy]\n //"}, {"sha": "372f3e83e3dcdccbd0df8fc8a75318f15d1fc917", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -33,7 +33,7 @@ use sys;\n /// type is a static guarantee that the underlying bytes contain no interior 0\n /// bytes (\"nul characters\") and that the final byte is 0 (\"nul terminator\").\n ///\n-/// `CString` is to [`CStr`] as [`String`] is to [`&str`]: the former\n+/// `CString` is to [`&CStr`] as [`String`] is to [`&str`]: the former\n /// in each pair are owned strings; the latter are borrowed\n /// references.\n ///\n@@ -88,6 +88,7 @@ use sys;\n /// [slice.len]: ../primitive.slice.html#method.len\n /// [`Deref`]: ../ops/trait.Deref.html\n /// [`CStr`]: struct.CStr.html\n+/// [`&CStr`]: struct.CStr.html\n ///\n /// # Examples\n ///\n@@ -137,7 +138,7 @@ pub struct CString {\n /// converted to a Rust [`&str`] by performing UTF-8 validation, or\n /// into an owned [`CString`].\n ///\n-/// `CStr` is to [`CString`] as [`&str`] is to [`String`]: the former\n+/// `&CStr` is to [`CString`] as [`&str`] is to [`String`]: the former\n /// in each pair are borrowed references; the latter are owned\n /// strings.\n ///"}, {"sha": "278ee7951b3d210d7a2a22c76b9e66678b9154ed", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1330,7 +1330,8 @@ fn read_until<R: BufRead + ?Sized>(r: &mut R, delim: u8, buf: &mut Vec<u8>)\n ///\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait BufRead: Read {\n-    /// Fills the internal buffer of this object, returning the buffer contents.\n+    /// Returns the contents of the internal buffer, filling it with more data\n+    /// from the inner reader if it is empty.\n     ///\n     /// This function is a lower-level call. It needs to be paired with the\n     /// [`consume`] method to function properly. When calling this"}, {"sha": "2b4daa6440c0cee481cead9042c16b7a35bff761", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 3, "deletions": 30, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -37,7 +37,7 @@ use visit::{self, FnKind, Visitor};\n use parse::ParseSess;\n use symbol::{keywords, Symbol};\n \n-use std::{env, path};\n+use std::{env};\n \n macro_rules! set {\n     // The const_fn feature also enables the min_const_fn feature, because `min_const_fn` allows\n@@ -406,9 +406,6 @@ declare_features! (\n     // Resolve absolute paths as paths from other crates\n     (active, extern_absolute_paths, \"1.24.0\", Some(44660), Some(Edition::Edition2018)),\n \n-    // `foo.rs` as an alternative to `foo/mod.rs`\n-    (active, non_modrs_mods, \"1.24.0\", Some(44660), Some(Edition::Edition2018)),\n-\n     // `extern` in paths\n     (active, extern_in_paths, \"1.23.0\", Some(44660), None),\n \n@@ -660,6 +657,8 @@ declare_features! (\n     (accepted, repr_transparent, \"1.28.0\", Some(43036), None),\n     // Defining procedural macros in `proc-macro` crates\n     (accepted, proc_macro, \"1.29.0\", Some(38356), None),\n+    // `foo.rs` as an alternative to `foo/mod.rs`\n+    (accepted, non_modrs_mods, \"1.30.0\", Some(44660), None),\n     // Allows use of the :vis macro fragment specifier\n     (accepted, macro_vis_matcher, \"1.30.0\", Some(41022), None),\n     // Allows importing and reexporting macros with `use`,\n@@ -1498,31 +1497,6 @@ impl<'a> PostExpansionVisitor<'a> {\n     }\n }\n \n-impl<'a> PostExpansionVisitor<'a> {\n-    fn whole_crate_feature_gates(&mut self, _krate: &ast::Crate) {\n-        for &(ident, span) in &*self.context.parse_sess.non_modrs_mods.borrow() {\n-            if !span.allows_unstable() {\n-                let cx = &self.context;\n-                let level = GateStrength::Hard;\n-                let has_feature = cx.features.non_modrs_mods;\n-                let name = \"non_modrs_mods\";\n-                debug!(\"gate_feature(feature = {:?}, span = {:?}); has? {}\",\n-                        name, span, has_feature);\n-\n-                if !has_feature && !span.allows_unstable() {\n-                    leveled_feature_err(\n-                        cx.parse_sess, name, span, GateIssue::Language,\n-                        \"mod statements in non-mod.rs files are unstable\", level\n-                    )\n-                    .help(&format!(\"on stable builds, rename this file to {}{}mod.rs\",\n-                                   ident, path::MAIN_SEPARATOR))\n-                    .emit();\n-                }\n-            }\n-        }\n-    }\n-}\n-\n impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n         if !attr.span.allows_unstable() {\n@@ -2092,7 +2066,6 @@ pub fn check_crate(krate: &ast::Crate,\n     };\n \n     let visitor = &mut PostExpansionVisitor { context: &ctx };\n-    visitor.whole_crate_feature_gates(krate);\n     visit::walk_crate(visitor, krate);\n }\n "}, {"sha": "5a081f0363340dd895d0958955d0c84661f60f05", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1 +1 @@\n-Subproject commit 2a1cdeadd3ea8e1eba9cc681037b83f07332763b\n+Subproject commit 5a081f0363340dd895d0958955d0c84661f60f05"}, {"sha": "29b7d508f1c1e5aa0f3bf53f02a7cc4ec1f6fc72", "filename": "src/rustllvm/llvm-rebuild-trigger", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Frustllvm%2Fllvm-rebuild-trigger", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Frustllvm%2Fllvm-rebuild-trigger", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Fllvm-rebuild-trigger?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,4 +1,4 @@\n # If this file is modified, then llvm will be (optionally) cleaned and then rebuilt.\n # The actual contents of this file do not matter, but to trigger a change on the\n # build bots then the contents should be changed so git updates the mtime.\n-2018-08-22\n+2018-09-11"}, {"sha": "c6a6f23074de0633519ae33822f4a0f18bfb024f", "filename": "src/test/run-pass/.gitattributes", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Frun-pass%2F.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Frun-pass%2F.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2F.gitattributes?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,2 +1 @@\n lexer-crlf-line-endings-string-literal-doc-comment.rs -text\n-issue-16278.rs -text"}, {"sha": "7b7f9013ca3341a29ba95ff71a2f2ad264e90ebb", "filename": "src/test/rustdoc/auxiliary/issue-53689.rs", "status": "renamed", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-53689.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-53689.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-53689.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,8 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: mod statements in non-mod.rs files are unstable\n-\n-mod mod_file_not_owning_aux1;\n-\n-fn main() {}\n+pub struct MyStruct;", "previous_filename": "src/test/ui/directory_ownership/mod_file_not_owning.rs"}, {"sha": "bfe5adf8888e6c44f6e2e54112e61c767dcb4f16", "filename": "src/test/rustdoc/issue-53689.rs", "status": "renamed", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Frustdoc%2Fissue-53689.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Frustdoc%2Fissue-53689.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-53689.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,8 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// error-pattern: mod statements in non-mod.rs files are unstable\n+// aux-build:issue-53689.rs\n \n-// This is not a directory owner since the file name is not \"mod.rs\".\n-#[path = \"mod_file_not_owning_aux1.rs\"]\n-mod foo;\n+#![crate_name = \"foo\"]\n+\n+extern crate issue_53689;\n+\n+// @has foo/trait.MyTrait.html\n+// @!has - 'MyStruct'\n+// @count - '//*[code=\"impl<T> MyTrait for T\"]' 1\n+pub trait MyTrait {}\n+\n+impl<T> MyTrait for T {}\n+\n+mod a {\n+    pub use issue_53689::MyStruct;\n+}", "previous_filename": "src/test/ui/directory_ownership/unowned_mod_with_path.rs"}, {"sha": "e2937573997fc941a313120c7a324f58b87b921f", "filename": "src/test/ui/directory_ownership/mod_file_not_owning.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a2b991b5305b770c7d5288ab3aa231428511c530/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmod_file_not_owning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2b991b5305b770c7d5288ab3aa231428511c530/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmod_file_not_owning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdirectory_ownership%2Fmod_file_not_owning.stderr?ref=a2b991b5305b770c7d5288ab3aa231428511c530", "patch": "@@ -1,15 +0,0 @@\n-error[E0658]: mod statements in non-mod.rs files are unstable (see issue #44660)\n-  --> $DIR/mod_file_not_owning_aux1.rs:14:17\n-   |\n-LL |     () => { mod mod_file_not_owning_aux2; }\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n-LL | }\n-LL | m!();\n-   | ----- in this macro invocation\n-   |\n-   = help: add #![feature(non_modrs_mods)] to the crate attributes to enable\n-   = help: on stable builds, rename this file to mod_file_not_owning_aux1/mod.rs\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "0c0b428143416e76ad597345a3f468bd61aecefa", "filename": "src/test/ui/directory_ownership/unowned_mod_with_path.stderr", "status": "removed", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a2b991b5305b770c7d5288ab3aa231428511c530/src%2Ftest%2Fui%2Fdirectory_ownership%2Funowned_mod_with_path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2b991b5305b770c7d5288ab3aa231428511c530/src%2Ftest%2Fui%2Fdirectory_ownership%2Funowned_mod_with_path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdirectory_ownership%2Funowned_mod_with_path.stderr?ref=a2b991b5305b770c7d5288ab3aa231428511c530", "patch": "@@ -1,15 +0,0 @@\n-error[E0658]: mod statements in non-mod.rs files are unstable (see issue #44660)\n-  --> $DIR/mod_file_not_owning_aux1.rs:14:17\n-   |\n-LL |     () => { mod mod_file_not_owning_aux2; }\n-   |                 ^^^^^^^^^^^^^^^^^^^^^^^^\n-LL | }\n-LL | m!();\n-   | ----- in this macro invocation\n-   |\n-   = help: add #![feature(non_modrs_mods)] to the crate attributes to enable\n-   = help: on stable builds, rename this file to foo/mod.rs\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "9dc85f4d3f92d7948f11bc3eacd9223484033a91", "filename": "src/test/ui/non_modrs_mods/non_modrs_mods.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a2b991b5305b770c7d5288ab3aa231428511c530/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fnon_modrs_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b991b5305b770c7d5288ab3aa231428511c530/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fnon_modrs_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fnon_modrs_mods.rs?ref=a2b991b5305b770c7d5288ab3aa231428511c530", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-//\n-// Tests the formatting of the feature-gate errors for non_modrs_mods\n-//\n-// gate-test-non_modrs_mods\n-// ignore-windows\n-// ignore-pretty issue #37195\n-pub mod modrs_mod;\n-pub mod foors_mod;\n-\n-#[path = \"some_crazy_attr_mod_dir/arbitrary_name.rs\"]\n-pub mod attr_mod;\n-\n-pub fn main() {\n-    modrs_mod::inner_modrs_mod::innest::foo();\n-    modrs_mod::inner_foors_mod::innest::foo();\n-    foors_mod::inner_modrs_mod::innest::foo();\n-    foors_mod::inner_foors_mod::innest::foo();\n-    attr_mod::inner_modrs_mod::innest::foo();\n-}"}, {"sha": "c45ab734fd57903fb078e51fa4bc7d6edec92dc6", "filename": "src/test/ui/non_modrs_mods/non_modrs_mods.stderr", "status": "removed", "additions": 0, "deletions": 39, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a2b991b5305b770c7d5288ab3aa231428511c530/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fnon_modrs_mods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a2b991b5305b770c7d5288ab3aa231428511c530/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fnon_modrs_mods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon_modrs_mods%2Fnon_modrs_mods.stderr?ref=a2b991b5305b770c7d5288ab3aa231428511c530", "patch": "@@ -1,39 +0,0 @@\n-error[E0658]: mod statements in non-mod.rs files are unstable (see issue #44660)\n-  --> $DIR/modrs_mod/inner_foors_mod.rs:11:9\n-   |\n-LL | pub mod innest;\n-   |         ^^^^^^\n-   |\n-   = help: add #![feature(non_modrs_mods)] to the crate attributes to enable\n-   = help: on stable builds, rename this file to inner_foors_mod/mod.rs\n-\n-error[E0658]: mod statements in non-mod.rs files are unstable (see issue #44660)\n-  --> $DIR/foors_mod.rs:13:9\n-   |\n-LL | pub mod inner_modrs_mod;\n-   |         ^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(non_modrs_mods)] to the crate attributes to enable\n-   = help: on stable builds, rename this file to foors_mod/mod.rs\n-\n-error[E0658]: mod statements in non-mod.rs files are unstable (see issue #44660)\n-  --> $DIR/foors_mod.rs:14:9\n-   |\n-LL | pub mod inner_foors_mod;\n-   |         ^^^^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(non_modrs_mods)] to the crate attributes to enable\n-   = help: on stable builds, rename this file to foors_mod/mod.rs\n-\n-error[E0658]: mod statements in non-mod.rs files are unstable (see issue #44660)\n-  --> $DIR/foors_mod/inner_foors_mod.rs:11:9\n-   |\n-LL | pub mod innest;\n-   |         ^^^^^^\n-   |\n-   = help: add #![feature(non_modrs_mods)] to the crate attributes to enable\n-   = help: on stable builds, rename this file to inner_foors_mod/mod.rs\n-\n-error: aborting due to 4 previous errors\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "4517a4a2f1eec82a9d8dfd6eb530ca15a9aedd8e", "filename": "src/test/ui/run-pass/issues/.gitattributes", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Frun-pass%2Fissues%2F.gitattributes", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Frun-pass%2Fissues%2F.gitattributes", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fissues%2F.gitattributes?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -0,0 +1 @@\n+issue-16278.rs -text"}, {"sha": "c3b6c5a38bad75b80fb0350ef2de67c025081583", "filename": "src/test/ui/run-pass/issues/issue-16278.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Frun-pass%2Fissues%2Fissue-16278.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8586ec6980462c99a8926646201b2444d8938d29/src%2Ftest%2Fui%2Frun-pass%2Fissues%2Fissue-16278.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fissues%2Fissue-16278.rs?ref=8586ec6980462c99a8926646201b2444d8938d29", "patch": "@@ -13,8 +13,9 @@\n \n // this file has some special \\r\\n endings (use xxd to see them)\n \n-fn main() {assert_eq!(b\"\", b\"\\\n+fn main() {assert_eq!(b\"\", b\"\\\r\n                                    \");\n-assert_eq!(b\"\\n\", b\"\n+assert_eq!(b\"\\n\", b\"\r\n \");\n }\n+"}, {"sha": "a9b240be804e3402806a535fca62302d67be3aee", "filename": "src/test/ui/run-pass/non_modrs_mods/non_modrs_mods.rs", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a2b991b5305b770c7d5288ab3aa231428511c530/src%2Ftest%2Fui%2Frun-pass%2Fnon_modrs_mods%2Fnon_modrs_mods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2b991b5305b770c7d5288ab3aa231428511c530/src%2Ftest%2Fui%2Frun-pass%2Fnon_modrs_mods%2Fnon_modrs_mods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frun-pass%2Fnon_modrs_mods%2Fnon_modrs_mods.rs?ref=a2b991b5305b770c7d5288ab3aa231428511c530", "patch": "@@ -1,28 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// run-pass\n-//\n-// ignore-pretty issue #37195\n-#![feature(non_modrs_mods)]\n-\n-pub mod modrs_mod;\n-pub mod foors_mod;\n-\n-#[path = \"some_crazy_attr_mod_dir/arbitrary_name.rs\"]\n-pub mod attr_mod;\n-\n-pub fn main() {\n-    modrs_mod::inner_modrs_mod::innest::foo();\n-    modrs_mod::inner_foors_mod::innest::foo();\n-    foors_mod::inner_modrs_mod::innest::foo();\n-    foors_mod::inner_foors_mod::innest::foo();\n-    attr_mod::inner_modrs_mod::innest::foo();\n-}"}]}