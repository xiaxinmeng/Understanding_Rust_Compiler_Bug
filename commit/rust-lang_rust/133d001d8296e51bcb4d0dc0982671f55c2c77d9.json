{"sha": "133d001d8296e51bcb4d0dc0982671f55c2c77d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzM2QwMDFkODI5NmU1MWJjYjRkMGRjMDk4MjY3MWY1NWMyYzc3ZDk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T12:10:20Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-13T12:10:20Z"}, "message": "world symbols", "tree": {"sha": "b0c17dddc00a9d05f5f7a0b2e14fcf2564459533", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0c17dddc00a9d05f5f7a0b2e14fcf2564459533"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/133d001d8296e51bcb4d0dc0982671f55c2c77d9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/133d001d8296e51bcb4d0dc0982671f55c2c77d9", "html_url": "https://github.com/rust-lang/rust/commit/133d001d8296e51bcb4d0dc0982671f55c2c77d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/133d001d8296e51bcb4d0dc0982671f55c2c77d9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed2ac1713326df6b926062efcc6109a20cdf7c37", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed2ac1713326df6b926062efcc6109a20cdf7c37", "html_url": "https://github.com/rust-lang/rust/commit/ed2ac1713326df6b926062efcc6109a20cdf7c37"}], "stats": {"total": 206, "additions": 199, "deletions": 7}, "files": [{"sha": "88b1099f2d258bfba445d3478b0e80d87578557c", "filename": "crates/libanalysis/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/133d001d8296e51bcb4d0dc0982671f55c2c77d9/crates%2Flibanalysis%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/133d001d8296e51bcb4d0dc0982671f55c2c77d9/crates%2Flibanalysis%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2FCargo.toml?ref=133d001d8296e51bcb4d0dc0982671f55c2c77d9", "patch": "@@ -8,5 +8,6 @@ log = \"0.4.2\"\n failure = \"0.1.2\"\n parking_lot = \"0.6.3\"\n once_cell = \"0.1.4\"\n+fst = { git = \"https://github.com/matklad/fst\", branch = \"subsequence\"}\n libsyntax2 = { path = \"../libsyntax2\" }\n libeditor = { path = \"../libeditor\" }"}, {"sha": "69a635aefe6db4a27c871e8c0e7e9c0dad87c6b2", "filename": "crates/libanalysis/idx.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/133d001d8296e51bcb4d0dc0982671f55c2c77d9/crates%2Flibanalysis%2Fidx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133d001d8296e51bcb4d0dc0982671f55c2c77d9/crates%2Flibanalysis%2Fidx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fidx.rs?ref=133d001d8296e51bcb4d0dc0982671f55c2c77d9", "patch": "@@ -0,0 +1,84 @@\n+use std::path::PathBuf;\n+\n+use fst;\n+use fst::IntoStreamer;\n+use file;\n+\n+use fall_tree::{TextRange, NodeType};\n+use indxr::{FileIndex, IndexableFileSet};\n+\n+use editor::line_index::{LineCol, LineIndex};\n+use editor::fst_subseq::FstSubSeq;\n+use editor::file_symbols::process_symbols;\n+\n+use syntax::{STRUCT_DEF, ENUM_DEF, TRAIT_DEF, TYPE_DEF};\n+\n+\n+pub struct SymbolIndex {\n+    index: FileIndex<FileSymbols>,\n+}\n+\n+impl SymbolIndex {\n+    pub fn new(roots: Vec<PathBuf>) -> SymbolIndex {\n+        let file_set = IndexableFileSet::new(roots, \"rs\");\n+        let index = FileIndex::new(file_set, Box::new(|path| {\n+            let text = file::get_text(path).ok()?;\n+            Some(FileSymbols::new(text))\n+        }));\n+        SymbolIndex { index }\n+    }\n+\n+    pub fn query(&self, query: &str) -> Vec<(PathBuf, Symbol)> {\n+        let mut query = Query::new(query);\n+        let mut result = Vec::new();\n+        self.process_query(&query, &mut result);\n+        if result.is_empty() && !query.all_symbols {\n+            query.all_symbols = true;\n+            self.process_query(&query, &mut result);\n+        }\n+        result\n+    }\n+\n+    fn process_query(&self, query: &Query, acc: &mut Vec<(PathBuf, Symbol)>) {\n+        self.index.process_files(&mut |file| {\n+            query.process(&file.value, &mut |symbol| {\n+                acc.push((file.path.clone(), symbol))\n+            });\n+            acc.len() > 512\n+        });\n+    }\n+}\n+\n+struct Query {\n+    query: String,\n+    all_symbols: bool,\n+}\n+\n+impl Query {\n+    fn new(query: &str) -> Query {\n+        let all_symbols = query.contains(\"#\");\n+        let query: String = query.chars()\n+            .filter(|&c| c != '#')\n+            .flat_map(char::to_lowercase)\n+            .collect();\n+        Query { query, all_symbols }\n+    }\n+\n+    fn process(&self, file: &FileSymbols, acc: &mut FnMut(Symbol)) {\n+        fn is_type(ty: NodeType) -> bool {\n+            match ty {\n+                STRUCT_DEF | ENUM_DEF | TRAIT_DEF| TYPE_DEF => true,\n+                _ => false,\n+            }\n+        }\n+\n+        let a = FstSubSeq::new(&self.query);\n+        for idx in file.map.search(a).into_stream().into_values() {\n+            let idx = idx as usize;\n+            let symbol = file.symbols[idx].clone();\n+            if self.all_symbols || is_type(symbol.ty) {\n+                acc(symbol)\n+            }\n+        }\n+    }\n+}"}, {"sha": "f0d0cf0a4f6bcaad553345d3e1f039793a0c8844", "filename": "crates/libanalysis/src/lib.rs", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/133d001d8296e51bcb4d0dc0982671f55c2c77d9/crates%2Flibanalysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133d001d8296e51bcb4d0dc0982671f55c2c77d9/crates%2Flibanalysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Flib.rs?ref=133d001d8296e51bcb4d0dc0982671f55c2c77d9", "patch": "@@ -6,6 +6,9 @@ extern crate log;\n extern crate once_cell;\n extern crate libsyntax2;\n extern crate libeditor;\n+extern crate fst;\n+\n+mod symbol_index;\n \n use once_cell::sync::OnceCell;\n \n@@ -14,8 +17,11 @@ use std::{\n     collections::hash_map::HashMap,\n     path::{PathBuf, Path},\n };\n+\n use libsyntax2::ast;\n-use libeditor::LineIndex;\n+use libeditor::{LineIndex, FileSymbol};\n+\n+use self::symbol_index::{FileSymbols, Query};\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n \n@@ -70,12 +76,7 @@ impl WorldState {\n impl World {\n     pub fn file_syntax(&self, path: &Path) -> Result<ast::File> {\n         let data = self.file_data(path)?;\n-        let syntax = data.syntax\n-            .get_or_init(|| {\n-                trace!(\"parsing: {}\", path.display());\n-                ast::File::parse(&data.text)\n-            }).clone();\n-        Ok(syntax)\n+        Ok(data.syntax(path).clone())\n     }\n \n     pub fn file_line_index(&self, path: &Path) -> Result<LineIndex> {\n@@ -88,6 +89,16 @@ impl World {\n         Ok(index.clone())\n     }\n \n+    pub fn world_symbols(&self, query: &str, f: &mut FnMut(&Path, &FileSymbol) -> Search) {\n+        let q = Query::new(query);\n+        for (path, data) in self.data.file_map.iter() {\n+            let symbols = data.symbols(path.as_path());\n+            if q.process(symbols, &mut |symbol| f(path, symbol)) == Search::Break {\n+                break;\n+            }\n+        }\n+    }\n+\n     fn file_data(&self, path: &Path) -> Result<Arc<FileData>> {\n         match self.data.file_map.get(path) {\n             Some(data) => Ok(data.clone()),\n@@ -96,6 +107,12 @@ impl World {\n     }\n }\n \n+#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n+pub enum Search {\n+    Continue,\n+    Break,\n+}\n+\n \n #[derive(Default, Debug)]\n struct WorldData {\n@@ -105,6 +122,7 @@ struct WorldData {\n #[derive(Debug)]\n struct FileData {\n     text: String,\n+    symbols: OnceCell<FileSymbols>,\n     syntax: OnceCell<ast::File>,\n     lines: OnceCell<LineIndex>,\n }\n@@ -113,8 +131,23 @@ impl FileData {\n     fn new(text: String) -> FileData {\n         FileData {\n             text,\n+            symbols: OnceCell::new(),\n             syntax: OnceCell::new(),\n             lines: OnceCell::new(),\n         }\n     }\n+\n+    fn syntax(&self, path: &Path) -> &ast::File {\n+        self.syntax\n+            .get_or_init(|| {\n+                trace!(\"parsing: {}\", path.display());\n+                ast::File::parse(&self.text)\n+            })\n+    }\n+\n+    fn symbols(&self, path: &Path) -> &FileSymbols {\n+        let syntax = self.syntax(path);\n+        self.symbols\n+            .get_or_init(|| FileSymbols::new(syntax))\n+    }\n }"}, {"sha": "1878fae997fb84456b01d74f526433c6ecaa7419", "filename": "crates/libanalysis/src/symbol_index.rs", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/133d001d8296e51bcb4d0dc0982671f55c2c77d9/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/133d001d8296e51bcb4d0dc0982671f55c2c77d9/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibanalysis%2Fsrc%2Fsymbol_index.rs?ref=133d001d8296e51bcb4d0dc0982671f55c2c77d9", "patch": "@@ -0,0 +1,74 @@\n+use libeditor::{FileSymbol, file_symbols};\n+use libsyntax2::{\n+    ast,\n+    SyntaxKind::{self, *},\n+};\n+use fst::{self, IntoStreamer};\n+\n+use Search;\n+\n+#[derive(Debug)]\n+pub(crate) struct FileSymbols {\n+    symbols: Vec<FileSymbol>,\n+    map: fst::Map,\n+}\n+\n+impl FileSymbols {\n+    pub(crate) fn new(file: &ast::File) -> FileSymbols {\n+        let mut symbols = file_symbols(file)\n+            .into_iter()\n+            .map(|s| (s.name.as_str().to_lowercase(), s))\n+            .collect::<Vec<_>>();\n+\n+        symbols.sort_by(|s1, s2| s1.0.cmp(&s2.0));\n+        symbols.dedup_by(|s1, s2| s1.0 == s2.0);\n+        let (names, symbols): (Vec<String>, Vec<FileSymbol>) =\n+            symbols.into_iter().unzip();\n+\n+        let map = fst::Map::from_iter(\n+            names.into_iter().zip(0u64..)\n+        ).unwrap();\n+        FileSymbols { symbols, map }\n+    }\n+}\n+\n+pub(crate) struct Query {\n+    query: String,\n+    all_symbols: bool,\n+}\n+\n+impl Query {\n+    pub(crate) fn new(query: &str) -> Query {\n+        let all_symbols = query.contains(\"#\");\n+        let query: String = query.chars()\n+            .filter(|&c| c != '#')\n+            .flat_map(char::to_lowercase)\n+            .collect();\n+        Query { query, all_symbols }\n+    }\n+\n+    pub(crate) fn process(\n+        &self,\n+        file: &FileSymbols,\n+        acc: &mut FnMut(&FileSymbol) -> Search,\n+    ) -> Search {\n+        fn is_type(kind: SyntaxKind) -> bool {\n+            match kind {\n+                STRUCT | ENUM | TRAIT | TYPE_ITEM => true,\n+                _ => false,\n+            }\n+        }\n+        let automaton = fst::automaton::Subsequence::new(&self.query);\n+        for idx in file.map.search(automaton).into_stream().into_values() {\n+            let idx = idx as usize;\n+            let symbol = &file.symbols[idx];\n+            if self.all_symbols || is_type(symbol.kind) {\n+                if acc(&symbol) == Search::Break {\n+                    return Search::Break;\n+                }\n+            }\n+        }\n+        Search::Continue\n+    }\n+}\n+"}]}