{"sha": "99d9ccd5478c1cdfbe96216a59e3ce5b2e936278", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5ZDljY2Q1NDc4YzFjZGZiZTk2MjE2YTU5ZTNjZTViMmU5MzYyNzg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-24T18:52:12Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-05-30T17:21:58Z"}, "message": "Improve output of argument anonymous borrow missing annotation involving opaque return type\n\nGo from\n\n```\nerror[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n  --> file8.rs:22:5\n   |\n22 | /     move || {\n23 | |         *dest = g.get();\n24 | |     }\n   | |_____^\n   |\nnote: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the function body at 18:1...\n  --> file8.rs:18:1\n   |\n18 | / fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n19 | | where\n20 | |     G: Get<T>\n21 | | {\n...  |\n24 | |     }\n25 | | }\n   | |_^\nnote: ...so that the types are compatible\n  --> file8.rs:22:5\n   |\n22 | /     move || { //~ ERROR cannot infer an appropriate lifetime\n23 | |         *dest = g.get();\n24 | |     }\n   | |_____^\n   = note: expected  `&mut T`\n              found  `&mut T`\nnote: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 18:8...\n  --> file8.rs:18:8\n   |\n18 | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n   |        ^^\nnote: ...so that return value is valid for the call\n  --> file8.rs:18:45\n   |\n18 | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n   |                                             ^^^^^^^^^^^^^^^^^^^^^^^\n```\n\nto\n\n```\nerror[E0621]: explicit lifetime required in the type of `dest`\n  --> file8.rs:18:45\n   |\n18 | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n   |                                  ------     ^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\n   |                                  |\n   |                                  help: add explicit lifetime `'a` to the type of `dest`: `&'a mut T`\n   ```", "tree": {"sha": "7ec466e6308ae9262c1a10747eabad5d444a7393", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ec466e6308ae9262c1a10747eabad5d444a7393"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278", "html_url": "https://github.com/rust-lang/rust/commit/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f49ebbb891c2b6d3226bf77fd82c9cd22e389f32", "url": "https://api.github.com/repos/rust-lang/rust/commits/f49ebbb891c2b6d3226bf77fd82c9cd22e389f32", "html_url": "https://github.com/rust-lang/rust/commit/f49ebbb891c2b6d3226bf77fd82c9cd22e389f32"}], "stats": {"total": 113, "additions": 37, "deletions": 76}, "files": [{"sha": "a7b40d39215e29ee2b46052bdca2c60aff5dbf85", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=99d9ccd5478c1cdfbe96216a59e3ce5b2e936278", "patch": "@@ -1917,14 +1917,15 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             \"...\",\n         );\n \n+        debug!(\"report_sub_sup_conflict: var_origin={:?}\", var_origin);\n+        debug!(\"report_sub_sup_conflict: sub_region={:?}\", sub_region);\n+        debug!(\"report_sub_sup_conflict: sub_origin={:?}\", sub_origin);\n+        debug!(\"report_sub_sup_conflict: sup_region={:?}\", sup_region);\n+        debug!(\"report_sub_sup_conflict: sup_origin={:?}\", sup_origin);\n+\n         if let (&infer::Subtype(ref sup_trace), &infer::Subtype(ref sub_trace)) =\n             (&sup_origin, &sub_origin)\n         {\n-            debug!(\"report_sub_sup_conflict: var_origin={:?}\", var_origin);\n-            debug!(\"report_sub_sup_conflict: sub_region={:?}\", sub_region);\n-            debug!(\"report_sub_sup_conflict: sub_origin={:?}\", sub_origin);\n-            debug!(\"report_sub_sup_conflict: sup_region={:?}\", sup_region);\n-            debug!(\"report_sub_sup_conflict: sup_origin={:?}\", sup_origin);\n             debug!(\"report_sub_sup_conflict: sup_trace={:?}\", sup_trace);\n             debug!(\"report_sub_sup_conflict: sub_trace={:?}\", sub_trace);\n             debug!(\"report_sub_sup_conflict: sup_trace.values={:?}\", sup_trace.values);"}, {"sha": "9da24138eeb0341f7aa8b408a93fb291596cda17", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=99d9ccd5478c1cdfbe96216a59e3ce5b2e936278", "patch": "@@ -74,13 +74,22 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         }\n \n         if let Some((_, fndecl)) = self.find_anon_type(anon, &br) {\n-            if self.is_return_type_anon(scope_def_id, br, fndecl).is_some()\n-                || self.is_self_anon(is_first, scope_def_id)\n-            {\n+            let return_type_anon = self.is_return_type_anon(scope_def_id, br, fndecl);\n+            let is_self_anon = self.is_self_anon(is_first, scope_def_id);\n+            debug!(\n+                \"try_report_named_anon_conflict: fndecl {:?} {:?} {}\",\n+                fndecl, return_type_anon, is_self_anon\n+            );\n+            if is_self_anon {\n+                // We used to check for `return_type_anon.is_some()` here. Removing that improves\n+                // some diagnostics, but we might have to readd the check if there are regressions\n+                // in the wild.\n                 return None;\n             }\n             if let FnRetTy::Return(ty) = &fndecl.output {\n+                debug!(\"try_report_named_anon_conflict: ret ty {:?}\", ty);\n                 if let (TyKind::Def(_, _), ty::ReStatic) = (&ty.kind, sub) {\n+                    debug!(\"try_report_named_anon_conflict: impl Trait + 'static\");\n                     // This is an impl Trait return that evaluates de need of 'static.\n                     // We handle this case better in `static_impl_trait`.\n                     return None;"}, {"sha": "589d04c9b19620a0e531fe7c3adfec9d4c4b70ae", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.rs?ref=99d9ccd5478c1cdfbe96216a59e3ce5b2e936278", "patch": "@@ -55,12 +55,12 @@ where\n }\n \n // After applying suggestion for `qux`:\n-// FIXME: we should suggest be suggesting to change `dest` to `&'a mut T`.\n fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n+//~^ ERROR explicit lifetime required in the type of `dest`\n where\n     G: Get<T>\n {\n-    move || { //~ ERROR cannot infer an appropriate lifetime\n+    move || {\n         *dest = g.get();\n     }\n }"}, {"sha": "0326616337d6c581154d6ca9e13c8cb4f5077a7e", "filename": "src/test/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 6, "deletions": 37, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=99d9ccd5478c1cdfbe96216a59e3ce5b2e936278", "patch": "@@ -87,44 +87,13 @@ help: consider introducing an explicit lifetime bound to unify the type paramete\n LL | fn qux<'b, 'a, G: 'b + 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'b\n    |        ^^^     ^^^^^^^                                                  ^^^^\n \n-error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/missing-lifetimes-in-signature.rs:63:5\n-   |\n-LL | /     move || {\n-LL | |         *dest = g.get();\n-LL | |     }\n-   | |_____^\n-   |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the function body at 59:1...\n-  --> $DIR/missing-lifetimes-in-signature.rs:59:1\n-   |\n-LL | / fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n-LL | | where\n-LL | |     G: Get<T>\n-LL | | {\n-...  |\n-LL | |     }\n-LL | | }\n-   | |_^\n-note: ...so that the types are compatible\n-  --> $DIR/missing-lifetimes-in-signature.rs:63:5\n-   |\n-LL | /     move || {\n-LL | |         *dest = g.get();\n-LL | |     }\n-   | |_____^\n-   = note: expected  `&mut T`\n-              found  `&mut T`\n-note: but, the lifetime must be valid for the lifetime `'a` as defined on the function body at 59:8...\n-  --> $DIR/missing-lifetimes-in-signature.rs:59:8\n-   |\n-LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n-   |        ^^\n-note: ...so that return value is valid for the call\n-  --> $DIR/missing-lifetimes-in-signature.rs:59:45\n+error[E0621]: explicit lifetime required in the type of `dest`\n+  --> $DIR/missing-lifetimes-in-signature.rs:58:45\n    |\n LL | fn bat<'a, G: 'a, T>(g: G, dest: &mut T) -> impl FnOnce() + '_ + 'a\n-   |                                             ^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                  ------     ^^^^^^^^^^^^^^^^^^^^^^^ lifetime `'a` required\n+   |                                  |\n+   |                                  help: add explicit lifetime `'a` to the type of `dest`: `&'a mut T`\n \n error[E0309]: the parameter type `G` may not live long enough\n   --> $DIR/missing-lifetimes-in-signature.rs:69:44\n@@ -142,5 +111,5 @@ LL | fn bak<'a, G, T>(g: G, dest: &'a mut T) -> impl FnOnce() + 'a\n \n error: aborting due to 6 previous errors\n \n-Some errors have detailed explanations: E0261, E0309, E0495.\n+Some errors have detailed explanations: E0261, E0309, E0621.\n For more information about an error, try `rustc --explain E0261`."}, {"sha": "a1f6c5386ae42d9f61a90280711e79bf5a721899", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=99d9ccd5478c1cdfbe96216a59e3ce5b2e936278", "patch": "@@ -1,11 +1,12 @@\n-error: lifetime may not live long enough\n+error[E0621]: explicit lifetime required in the type of `items`\n   --> $DIR/dyn-trait-underscore.rs:8:5\n    |\n LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n-   |                - let's call the lifetime of this reference `'1`\n+   |                ---- help: add explicit lifetime `'static` to the type of `items`: `&'static [T]`\n LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL |     Box::new(items.iter())\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ returning this value requires that `'1` must outlive `'static`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0621`."}, {"sha": "cd4781b8640c435b9e70660c89c1a110e416510a", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs?ref=99d9ccd5478c1cdfbe96216a59e3ce5b2e936278", "patch": "@@ -5,7 +5,7 @@\n \n fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n-    Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n+    Box::new(items.iter()) //~ ERROR explicit lifetime required in the type of `items`\n }\n \n fn b<T>(items: &[T]) -> Box<dyn Iterator<Item=&T> + '_> {"}, {"sha": "a1f6c5386ae42d9f61a90280711e79bf5a721899", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 6, "deletions": 25, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/99d9ccd5478c1cdfbe96216a59e3ce5b2e936278/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=99d9ccd5478c1cdfbe96216a59e3ce5b2e936278", "patch": "@@ -1,31 +1,12 @@\n-error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n-  --> $DIR/dyn-trait-underscore.rs:8:20\n-   |\n-LL |     Box::new(items.iter())\n-   |                    ^^^^\n-   |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the function body at 6:1...\n-  --> $DIR/dyn-trait-underscore.rs:6:1\n-   |\n-LL | / fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n-LL | |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n-LL | |     Box::new(items.iter())\n-LL | | }\n-   | |_^\n-note: ...so that reference does not outlive borrowed content\n-  --> $DIR/dyn-trait-underscore.rs:8:14\n-   |\n-LL |     Box::new(items.iter())\n-   |              ^^^^^\n-   = note: but, the lifetime must be valid for the static lifetime...\n-note: ...so that the expression is assignable\n+error[E0621]: explicit lifetime required in the type of `items`\n   --> $DIR/dyn-trait-underscore.rs:8:5\n    |\n+LL | fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n+   |                ---- help: add explicit lifetime `'static` to the type of `items`: `&'static [T]`\n+LL |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL |     Box::new(items.iter())\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: expected `std::boxed::Box<(dyn std::iter::Iterator<Item = &T> + 'static)>`\n-              found `std::boxed::Box<dyn std::iter::Iterator<Item = &T>>`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0495`.\n+For more information about this error, try `rustc --explain E0621`."}]}