{"sha": "8fe90966e19a4c3b6d05484d5368e5f9b444eb8b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmZTkwOTY2ZTE5YTRjM2I2ZDA1NDg0ZDUzNjhlNWY5YjQ0NGViOGI=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-07T15:19:38Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-12-08T21:57:50Z"}, "message": "Add (internal-only) SyncOnceCell::get_or_init_pin.", "tree": {"sha": "d35c53be1e1d17f308b0d1b8151c592948f2588d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d35c53be1e1d17f308b0d1b8151c592948f2588d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fe90966e19a4c3b6d05484d5368e5f9b444eb8b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fe90966e19a4c3b6d05484d5368e5f9b444eb8b", "html_url": "https://github.com/rust-lang/rust/commit/8fe90966e19a4c3b6d05484d5368e5f9b444eb8b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fe90966e19a4c3b6d05484d5368e5f9b444eb8b/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dc7f13c39febc6466c8f79ad4c270ab8a63881f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dc7f13c39febc6466c8f79ad4c270ab8a63881f", "html_url": "https://github.com/rust-lang/rust/commit/9dc7f13c39febc6466c8f79ad4c270ab8a63881f"}], "stats": {"total": 55, "additions": 55, "deletions": 0}, "files": [{"sha": "68f57958bb233c5c8f39eaca8de07ad67135674d", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/8fe90966e19a4c3b6d05484d5368e5f9b444eb8b/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fe90966e19a4c3b6d05484d5368e5f9b444eb8b/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=8fe90966e19a4c3b6d05484d5368e5f9b444eb8b", "patch": "@@ -10,6 +10,7 @@ use crate::{\n     mem::MaybeUninit,\n     ops::{Deref, Drop},\n     panic::{RefUnwindSafe, UnwindSafe},\n+    pin::Pin,\n     sync::Once,\n };\n \n@@ -297,6 +298,60 @@ impl<T> SyncOnceCell<T> {\n         Ok(unsafe { self.get_unchecked() })\n     }\n \n+    /// Internal-only API that gets the contents of the cell, initializing it\n+    /// in two steps with `f` and `g` if the cell was empty.\n+    ///\n+    /// `f` is called to construct the value, which is then moved into the cell\n+    /// and given as a (pinned) mutable reference to `g` to finish\n+    /// initialization.\n+    ///\n+    /// This allows `g` to inspect an manipulate the value after it has been\n+    /// moved into its final place in the cell, but before the cell is\n+    /// considered initialized.\n+    ///\n+    /// # Panics\n+    ///\n+    /// If `f` or `g` panics, the panic is propagated to the caller, and the\n+    /// cell remains uninitialized.\n+    ///\n+    /// With the current implementation, if `g` panics, the value from `f` will\n+    /// not be dropped. This should probably be fixed if this is ever used for\n+    /// a type where this matters.\n+    ///\n+    /// It is an error to reentrantly initialize the cell from `f`. The exact\n+    /// outcome is unspecified. Current implementation deadlocks, but this may\n+    /// be changed to a panic in the future.\n+    pub(crate) fn get_or_init_pin<F, G>(self: Pin<&Self>, f: F, g: G) -> Pin<&T>\n+    where\n+        F: FnOnce() -> T,\n+        G: FnOnce(Pin<&mut T>),\n+    {\n+        if let Some(value) = self.get_ref().get() {\n+            // SAFETY: The inner value was already initialized, and will not be\n+            // moved anymore.\n+            return unsafe { Pin::new_unchecked(value) };\n+        }\n+\n+        let slot = &self.value;\n+\n+        // Ignore poisoning from other threads\n+        // If another thread panics, then we'll be able to run our closure\n+        self.once.call_once_force(|_| {\n+            let value = f();\n+            // SAFETY: We use the Once (self.once) to guarantee unique access\n+            // to the UnsafeCell (slot).\n+            let value: &mut T = unsafe { (&mut *slot.get()).write(value) };\n+            // SAFETY: The value has been written to its final place in\n+            // self.value. We do not to move it anymore, which we promise here\n+            // with a Pin<&mut T>.\n+            g(unsafe { Pin::new_unchecked(value) });\n+        });\n+\n+        // SAFETY: The inner value has been initialized, and will not be moved\n+        // anymore.\n+        unsafe { Pin::new_unchecked(self.get_ref().get_unchecked()) }\n+    }\n+\n     /// Consumes the `SyncOnceCell`, returning the wrapped value. Returns\n     /// `None` if the cell was empty.\n     ///"}]}