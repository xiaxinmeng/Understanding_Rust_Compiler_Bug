{"sha": "a58fa29dc201f82891f11acb347e363f7cfcbd4e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1OGZhMjlkYzIwMWY4Mjg5MWYxMWFjYjM0N2UzNjNmN2NmY2JkNGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-28T13:00:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-28T13:00:33Z"}, "message": "Easier to debug timeouts in tests", "tree": {"sha": "44a32268ab35ba0770e6ffbb0b5e2835a595824b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44a32268ab35ba0770e6ffbb0b5e2835a595824b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a58fa29dc201f82891f11acb347e363f7cfcbd4e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a58fa29dc201f82891f11acb347e363f7cfcbd4e", "html_url": "https://github.com/rust-lang/rust/commit/a58fa29dc201f82891f11acb347e363f7cfcbd4e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a58fa29dc201f82891f11acb347e363f7cfcbd4e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad3cb2125dee4379c11f447216f510d6544c10c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad3cb2125dee4379c11f447216f510d6544c10c5", "html_url": "https://github.com/rust-lang/rust/commit/ad3cb2125dee4379c11f447216f510d6544c10c5"}], "stats": {"total": 34, "additions": 22, "deletions": 12}, "files": [{"sha": "f59958e8db74fbf983c7eeb33b4b0ef501ebffad", "filename": "crates/rust-analyzer/tests/rust-analyzer/support.rs", "status": "modified", "additions": 22, "deletions": 12, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a58fa29dc201f82891f11acb347e363f7cfcbd4e/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a58fa29dc201f82891f11acb347e363f7cfcbd4e/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fsupport.rs?ref=a58fa29dc201f82891f11acb347e363f7cfcbd4e", "patch": "@@ -188,8 +188,8 @@ impl Server {\n     }\n     fn send_request_(&self, r: Request) -> Value {\n         let id = r.id.clone();\n-        self.client.sender.send(r.into()).unwrap();\n-        while let Some(msg) = self.recv() {\n+        self.client.sender.send(r.clone().into()).unwrap();\n+        while let Some(msg) = self.recv().unwrap_or_else(|Timeout| panic!(\"timeout: {:?}\", r)) {\n             match msg {\n                 Message::Request(req) => {\n                     if req.method == \"window/workDoneProgress/create\" {\n@@ -216,7 +216,7 @@ impl Server {\n                 }\n             }\n         }\n-        panic!(\"no response\");\n+        panic!(\"no response for {:?}\", r);\n     }\n     pub(crate) fn wait_until_workspace_is_loaded(self) -> Server {\n         self.wait_for_message_cond(1, &|msg: &Message| match msg {\n@@ -230,28 +230,36 @@ impl Server {\n                 }\n             }\n             _ => false,\n-        });\n+        })\n+        .unwrap_or_else(|Timeout| panic!(\"timeout while waiting for ws to load\"));\n         self\n     }\n-    fn wait_for_message_cond(&self, n: usize, cond: &dyn Fn(&Message) -> bool) {\n+    fn wait_for_message_cond(\n+        &self,\n+        n: usize,\n+        cond: &dyn Fn(&Message) -> bool,\n+    ) -> Result<(), Timeout> {\n         let mut total = 0;\n         for msg in self.messages.borrow().iter() {\n             if cond(msg) {\n                 total += 1\n             }\n         }\n         while total < n {\n-            let msg = self.recv().expect(\"no response\");\n+            let msg = self.recv()?.expect(\"no response\");\n             if cond(&msg) {\n                 total += 1;\n             }\n         }\n+        Ok(())\n     }\n-    fn recv(&self) -> Option<Message> {\n-        recv_timeout(&self.client.receiver).map(|msg| {\n+    fn recv(&self) -> Result<Option<Message>, Timeout> {\n+        let msg = recv_timeout(&self.client.receiver)?;\n+        let msg = msg.map(|msg| {\n             self.messages.borrow_mut().push(msg.clone());\n             msg\n-        })\n+        });\n+        Ok(msg)\n     }\n     fn send_notification(&self, not: Notification) {\n         self.client.sender.send(Message::Notification(not)).unwrap();\n@@ -269,11 +277,13 @@ impl Drop for Server {\n     }\n }\n \n-fn recv_timeout(receiver: &Receiver<Message>) -> Option<Message> {\n+struct Timeout;\n+\n+fn recv_timeout(receiver: &Receiver<Message>) -> Result<Option<Message>, Timeout> {\n     let timeout =\n         if cfg!(target_os = \"macos\") { Duration::from_secs(300) } else { Duration::from_secs(120) };\n     select! {\n-        recv(receiver) -> msg => msg.ok(),\n-        recv(after(timeout)) -> _ => panic!(\"timed out\"),\n+        recv(receiver) -> msg => Ok(msg.ok()),\n+        recv(after(timeout)) -> _ => Err(Timeout),\n     }\n }"}]}