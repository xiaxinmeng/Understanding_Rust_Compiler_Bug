{"sha": "8e3980b8e8e77bda49856f26255028794b05a43e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMzk4MGI4ZThlNzdiZGE0OTg1NmYyNjI1NTAyODc5NGIwNWE0M2U=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-01-13T04:26:47Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-01-13T04:26:47Z"}, "message": "Rollup merge of #57436 - Xanewok:save-analysis-access-ice-fix, r=nikomatsakis\n\nsave-analysis: use a fallback when access levels couldn't be computed\n\nFixing an RLS regression I introduced in https://github.com/rust-lang/rust/pull/57343 :cry:\n\nI missed a case where we get [called back with analysis when type checking fails](https://github.com/rust-lang/rust/blob/9d54812829e9d92dac35a4a0f358cdc5a2475371/src/librustc_driver/driver.rs#L1264). Since privacy checking normally is done afterwards, when we execute the `privacy_access_levels` query inside the save_analysis callback we'll calculate it for the first time and since typeck info isn't complete, we'll crash there.\n\nDouble-checked locally and it seems to have fixed the problem.\n\nr? @nikomatsakis", "tree": {"sha": "fe689f86b7f70d5ee68a85bd897f2f4fc2dde3c8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe689f86b7f70d5ee68a85bd897f2f4fc2dde3c8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e3980b8e8e77bda49856f26255028794b05a43e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcOr4HCRBK7hj4Ov3rIwAAdHIIADjwJj8JMYVtSL+JjKytD9Lx\na9mE5hLinyrWzQPneXw2nEgU8ZEeUUXwWz+s4Nomp7IccWBO+KdLMrPn+OfWZlPn\nGb+tKJX7vWhI0cyCl2A+Fy64nhSbhg/trDVZRD0UcuOkPUB5owtm2/cUapCm4lq2\nmlmxsxtwEQZm1R0X/TMAW1zQLhUsmRxm0+FR7tQtWmubvU8GFaqyM4+pv44XL6aE\n4wm7TvK3QjTrHG6ZUC7MCUNj3psEs2ZHS/Nl0CMj8qsNXd0aUhTV5o4GOmTU7LYF\n2vF5fqMkRMCqjqU+wmf2ENTlF1EHYPLLgeKTYa5StaUPyyFoZOyUTkE6etuLJXk=\n=d3yf\n-----END PGP SIGNATURE-----\n", "payload": "tree fe689f86b7f70d5ee68a85bd897f2f4fc2dde3c8\nparent d3cb51c8702d1da709e26b6b8aa6a567b11c5a47\nparent eed163e11042c197c3e6aff65b1011abe1ca3980\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1547353607 +0100\ncommitter GitHub <noreply@github.com> 1547353607 +0100\n\nRollup merge of #57436 - Xanewok:save-analysis-access-ice-fix, r=nikomatsakis\n\nsave-analysis: use a fallback when access levels couldn't be computed\n\nFixing an RLS regression I introduced in https://github.com/rust-lang/rust/pull/57343 :cry:\n\nI missed a case where we get [called back with analysis when type checking fails](https://github.com/rust-lang/rust/blob/9d54812829e9d92dac35a4a0f358cdc5a2475371/src/librustc_driver/driver.rs#L1264). Since privacy checking normally is done afterwards, when we execute the `privacy_access_levels` query inside the save_analysis callback we'll calculate it for the first time and since typeck info isn't complete, we'll crash there.\n\nDouble-checked locally and it seems to have fixed the problem.\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e3980b8e8e77bda49856f26255028794b05a43e", "html_url": "https://github.com/rust-lang/rust/commit/8e3980b8e8e77bda49856f26255028794b05a43e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e3980b8e8e77bda49856f26255028794b05a43e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3cb51c8702d1da709e26b6b8aa6a567b11c5a47", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3cb51c8702d1da709e26b6b8aa6a567b11c5a47", "html_url": "https://github.com/rust-lang/rust/commit/d3cb51c8702d1da709e26b6b8aa6a567b11c5a47"}, {"sha": "eed163e11042c197c3e6aff65b1011abe1ca3980", "url": "https://api.github.com/repos/rust-lang/rust/commits/eed163e11042c197c3e6aff65b1011abe1ca3980", "html_url": "https://github.com/rust-lang/rust/commit/eed163e11042c197c3e6aff65b1011abe1ca3980"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "0c9e443efe0dbca27081c15d8b38167771dcdcda", "filename": "src/librustc_save_analysis/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e3980b8e8e77bda49856f26255028794b05a43e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3980b8e8e77bda49856f26255028794b05a43e/src%2Flibrustc_save_analysis%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Fdump_visitor.rs?ref=8e3980b8e8e77bda49856f26255028794b05a43e", "patch": "@@ -14,7 +14,7 @@\n //! recording the output.\n \n use rustc::hir::def::Def as HirDef;\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::hir::def_id::DefId;\n use rustc::session::config::Input;\n use rustc::ty::{self, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n@@ -56,14 +56,14 @@ macro_rules! access_from {\n     ($save_ctxt:expr, $vis:expr, $id:expr) => {\n         Access {\n             public: $vis.node.is_pub(),\n-            reachable: $save_ctxt.tcx.privacy_access_levels(LOCAL_CRATE).is_reachable($id),\n+            reachable: $save_ctxt.access_levels.is_reachable($id),\n         }\n     };\n \n     ($save_ctxt:expr, $item:expr) => {\n         Access {\n             public: $item.vis.node.is_pub(),\n-            reachable: $save_ctxt.tcx.privacy_access_levels(LOCAL_CRATE).is_reachable($item.id),\n+            reachable: $save_ctxt.access_levels.is_reachable($item.id),\n         }\n     };\n }"}, {"sha": "13ecc6b8a956f11c96eaa569e7d81faba4f46a21", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8e3980b8e8e77bda49856f26255028794b05a43e/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e3980b8e8e77bda49856f26255028794b05a43e/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=8e3980b8e8e77bda49856f26255028794b05a43e", "patch": "@@ -35,11 +35,13 @@ use rustc::hir;\n use rustc::hir::def::Def as HirDef;\n use rustc::hir::Node;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc::middle::privacy::AccessLevels;\n use rustc::middle::cstore::ExternCrate;\n use rustc::session::config::{CrateType, Input, OutputType};\n use rustc::ty::{self, TyCtxt};\n use rustc_typeck::hir_ty_to_ty;\n use rustc_codegen_utils::link::{filename_for_metadata, out_filename};\n+use rustc_data_structures::sync::Lrc;\n \n use std::cell::Cell;\n use std::default::Default;\n@@ -68,6 +70,7 @@ use rls_data::config::Config;\n pub struct SaveContext<'l, 'tcx: 'l> {\n     tcx: TyCtxt<'l, 'tcx, 'tcx>,\n     tables: &'l ty::TypeckTables<'tcx>,\n+    access_levels: &'l AccessLevels,\n     analysis: &'l ty::CrateAnalysis,\n     span_utils: SpanUtils<'tcx>,\n     config: Config,\n@@ -1126,10 +1129,18 @@ pub fn process_crate<'l, 'tcx, H: SaveHandler>(\n \n         info!(\"Dumping crate {}\", cratename);\n \n+        // Privacy checking requires and is done after type checking; use a\n+        // fallback in case the access levels couldn't have been correctly computed.\n+        let access_levels = match tcx.sess.compile_status() {\n+            Ok(..) => tcx.privacy_access_levels(LOCAL_CRATE),\n+            Err(..) => Lrc::new(AccessLevels::default()),\n+        };\n+\n         let save_ctxt = SaveContext {\n             tcx,\n             tables: &ty::TypeckTables::empty(None),\n             analysis,\n+            access_levels: &access_levels,\n             span_utils: SpanUtils::new(&tcx.sess),\n             config: find_config(config),\n             impl_counter: Cell::new(0),"}]}