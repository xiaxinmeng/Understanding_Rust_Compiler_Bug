{"sha": "70d22fa0519c8970cecbae400e7f6ebf69704d92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwZDIyZmEwNTE5Yzg5NzBjZWNiYWU0MDBlN2Y2ZWJmNjk3MDRkOTI=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-06-07T06:19:52Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-06-18T00:04:23Z"}, "message": "Improve `Node::{parent,dependents}` interplay.\n\nThis patch:\n\n- Reorders things a bit so that `parent` is always handled before\n  `dependents`.\n\n- Uses iterator chaining to avoid some code duplication.", "tree": {"sha": "f6b78f352185f136e010c45956c2610494916a16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6b78f352185f136e010c45956c2610494916a16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70d22fa0519c8970cecbae400e7f6ebf69704d92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70d22fa0519c8970cecbae400e7f6ebf69704d92", "html_url": "https://github.com/rust-lang/rust/commit/70d22fa0519c8970cecbae400e7f6ebf69704d92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70d22fa0519c8970cecbae400e7f6ebf69704d92/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6151bab8e1b94510eeb3929eb969ef8679a24294", "url": "https://api.github.com/repos/rust-lang/rust/commits/6151bab8e1b94510eeb3929eb969ef8679a24294", "html_url": "https://github.com/rust-lang/rust/commit/6151bab8e1b94510eeb3929eb969ef8679a24294"}], "stats": {"total": 24, "additions": 9, "deletions": 15}, "files": [{"sha": "df34891ff033b0c6afd159aea7f244c412970936", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/70d22fa0519c8970cecbae400e7f6ebf69704d92/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70d22fa0519c8970cecbae400e7f6ebf69704d92/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=70d22fa0519c8970cecbae400e7f6ebf69704d92", "patch": "@@ -91,13 +91,14 @@ struct Node<O> {\n     obligation: O,\n     state: Cell<NodeState>,\n \n-    /// Obligations that depend on this obligation for their\n-    /// completion. They must all be in a non-pending state.\n-    dependents: Vec<NodeIndex>,\n     /// The parent of a node - the original obligation of\n     /// which it is a subobligation. Except for error reporting,\n-    /// this is just another member of `dependents`.\n+    /// it is just like any member of `dependents`.\n     parent: Option<NodeIndex>,\n+\n+    /// Obligations that depend on this obligation for their\n+    /// completion. They must all be in a non-pending state.\n+    dependents: Vec<NodeIndex>,\n }\n \n /// The state of one node in some tree within the forest. This\n@@ -383,10 +384,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             NodeState::Success => {\n                 node.state.set(NodeState::OnDfsStack);\n                 stack.push(index);\n-                if let Some(parent) = node.parent {\n-                    self.find_cycles_from_node(stack, processor, parent.get());\n-                }\n-                for dependent in &node.dependents {\n+                for dependent in node.parent.iter().chain(node.dependents.iter()) {\n                     self.find_cycles_from_node(stack, processor, dependent.get());\n                 }\n                 stack.pop();\n@@ -430,7 +428,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n             }\n \n             error_stack.extend(\n-                node.dependents.iter().cloned().chain(node.parent).map(|x| x.get())\n+                node.parent.iter().chain(node.dependents.iter()).map(|x| x.get())\n             );\n         }\n \n@@ -440,11 +438,7 @@ impl<O: ForestObligation> ObligationForest<O> {\n \n     #[inline]\n     fn mark_neighbors_as_waiting_from(&self, node: &Node<O>) {\n-        if let Some(parent) = node.parent {\n-            self.mark_as_waiting_from(&self.nodes[parent.get()]);\n-        }\n-\n-        for dependent in &node.dependents {\n+        for dependent in node.parent.iter().chain(node.dependents.iter()) {\n             self.mark_as_waiting_from(&self.nodes[dependent.get()]);\n         }\n     }\n@@ -591,8 +585,8 @@ impl<O> Node<O> {\n     fn new(parent: Option<NodeIndex>, obligation: O) -> Node<O> {\n         Node {\n             obligation,\n-            parent,\n             state: Cell::new(NodeState::Pending),\n+            parent,\n             dependents: vec![],\n         }\n     }"}]}