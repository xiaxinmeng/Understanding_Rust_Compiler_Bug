{"sha": "2bc71971e5d91834d165b80b16858a49c9e00aba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYzcxOTcxZTVkOTE4MzRkMTY1YjgwYjE2ODU4YTQ5YzllMDBhYmE=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-26T17:41:10Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-08-04T12:54:34Z"}, "message": "Normalize DebugInfoLevel to standard style", "tree": {"sha": "ed8f669426901c0788ca05dbe9ee5cb8fcb70b83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed8f669426901c0788ca05dbe9ee5cb8fcb70b83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bc71971e5d91834d165b80b16858a49c9e00aba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc71971e5d91834d165b80b16858a49c9e00aba", "html_url": "https://github.com/rust-lang/rust/commit/2bc71971e5d91834d165b80b16858a49c9e00aba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bc71971e5d91834d165b80b16858a49c9e00aba/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "442a4744e38136b79f818833d784145eb952b26a", "url": "https://api.github.com/repos/rust-lang/rust/commits/442a4744e38136b79f818833d784145eb952b26a", "html_url": "https://github.com/rust-lang/rust/commit/442a4744e38136b79f818833d784145eb952b26a"}], "stats": {"total": 78, "additions": 38, "deletions": 40}, "files": [{"sha": "2281aca7a624e7498fb5d883f0a598daacd120e6", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 13, "deletions": 15, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=2bc71971e5d91834d165b80b16858a49c9e00aba", "patch": "@@ -11,8 +11,6 @@\n //! Contains infrastructure for configuring the compiler, including parsing\n //! command line options.\n \n-pub use self::DebugInfoLevel::*;\n-\n use std::str::FromStr;\n \n use session::{early_error, early_warn, Session};\n@@ -110,10 +108,10 @@ impl CrossLangLto {\n }\n \n #[derive(Clone, Copy, PartialEq, Hash)]\n-pub enum DebugInfoLevel {\n-    NoDebugInfo,\n-    LimitedDebugInfo,\n-    FullDebugInfo,\n+pub enum DebugInfo {\n+    None,\n+    Limited,\n+    Full,\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, PartialOrd, Ord, RustcEncodable, RustcDecodable)]\n@@ -378,7 +376,7 @@ top_level_options!(\n         // Include the debug_assertions flag into dependency tracking, since it\n         // can influence whether overflow checks are done or not.\n         debug_assertions: bool [TRACKED],\n-        debuginfo: DebugInfoLevel [TRACKED],\n+        debuginfo: DebugInfo [TRACKED],\n         lint_opts: Vec<(String, lint::Level)> [TRACKED],\n         lint_cap: Option<lint::Level> [TRACKED],\n         describe_lints: bool [UNTRACKED],\n@@ -603,7 +601,7 @@ pub fn basic_options() -> Options {\n     Options {\n         crate_types: Vec::new(),\n         optimize: OptLevel::No,\n-        debuginfo: NoDebugInfo,\n+        debuginfo: DebugInfo::None,\n         lint_opts: Vec::new(),\n         lint_cap: None,\n         describe_lints: false,\n@@ -2080,12 +2078,12 @@ pub fn build_session_options_and_crate_config(\n         if cg.debuginfo.is_some() {\n             early_error(error_format, \"-g and -C debuginfo both provided\");\n         }\n-        FullDebugInfo\n+        DebugInfo::Full\n     } else {\n         match cg.debuginfo {\n-            None | Some(0) => NoDebugInfo,\n-            Some(1) => LimitedDebugInfo,\n-            Some(2) => FullDebugInfo,\n+            None | Some(0) => DebugInfo::None,\n+            Some(1) => DebugInfo::Limited,\n+            Some(2) => DebugInfo::Full,\n             Some(arg) => {\n                 early_error(\n                     error_format,\n@@ -2184,7 +2182,7 @@ pub fn build_session_options_and_crate_config(\n         Some(m) => early_error(error_format, &format!(\"unknown borrowck mode `{}`\", m)),\n     };\n \n-    if !cg.remark.is_empty() && debuginfo == NoDebugInfo {\n+    if !cg.remark.is_empty() && debuginfo == DebugInfo::None {\n         early_warn(\n             error_format,\n             \"-C remark will not show source locations without \\\n@@ -2391,7 +2389,7 @@ mod dep_tracking {\n     use std::hash::Hash;\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n-    use super::{CrateType, DebugInfoLevel, ErrorOutputType, Lto, OptLevel, OutputTypes,\n+    use super::{CrateType, DebugInfo, ErrorOutputType, Lto, OptLevel, OutputTypes,\n                 Passes, Sanitizer, CrossLangLto};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_target::spec::{PanicStrategy, RelroLevel, TargetTriple};\n@@ -2448,7 +2446,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(Passes);\n     impl_dep_tracking_hash_via_hash!(OptLevel);\n     impl_dep_tracking_hash_via_hash!(Lto);\n-    impl_dep_tracking_hash_via_hash!(DebugInfoLevel);\n+    impl_dep_tracking_hash_via_hash!(DebugInfo);\n     impl_dep_tracking_hash_via_hash!(UnstableFeatures);\n     impl_dep_tracking_hash_via_hash!(OutputTypes);\n     impl_dep_tracking_hash_via_hash!(cstore::NativeLibraryKind);"}, {"sha": "108734b67d3b837a92efb20e85e24d56d719a3ee", "filename": "src/librustc_codegen_llvm/back/link.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flink.rs?ref=2bc71971e5d91834d165b80b16858a49c9e00aba", "patch": "@@ -17,7 +17,7 @@ use super::command::Command;\n use super::rpath::RPathConfig;\n use super::rpath;\n use metadata::METADATA_FILENAME;\n-use rustc::session::config::{self, NoDebugInfo, OutputFilenames, OutputType, PrintRequest};\n+use rustc::session::config::{self, DebugInfo, OutputFilenames, OutputType, PrintRequest};\n use rustc::session::config::{RUST_CGU_EXT, Lto};\n use rustc::session::filesearch;\n use rustc::session::search_paths::PathKind;\n@@ -200,7 +200,7 @@ pub(crate) fn link_binary(sess: &Session,\n /// split-dwarf like schemes.\n fn preserve_objects_for_their_debuginfo(sess: &Session) -> bool {\n     // If the objects don't have debuginfo there's nothing to preserve.\n-    if sess.opts.debuginfo == NoDebugInfo {\n+    if sess.opts.debuginfo == DebugInfo::None {\n         return false\n     }\n \n@@ -834,7 +834,7 @@ fn link_natively(sess: &Session,\n     // the symbols. Note, though, that if the object files are being preserved\n     // for their debug information there's no need for us to run dsymutil.\n     if sess.target.target.options.is_like_osx &&\n-        sess.opts.debuginfo != NoDebugInfo &&\n+        sess.opts.debuginfo != DebugInfo::None &&\n         !preserve_objects_for_their_debuginfo(sess)\n     {\n         match Command::new(\"dsymutil\").arg(out_filename).output() {"}, {"sha": "e0a30ef5dbc9abe10befecbda24285ef84a394fd", "filename": "src/librustc_codegen_llvm/back/linker.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flinker.rs?ref=2bc71971e5d91834d165b80b16858a49c9e00aba", "patch": "@@ -21,7 +21,7 @@ use back::symbol_export;\n use rustc::hir::def_id::{LOCAL_CRATE, CrateNum};\n use rustc::middle::dependency_format::Linkage;\n use rustc::session::Session;\n-use rustc::session::config::{self, CrateType, OptLevel, DebugInfoLevel,\n+use rustc::session::config::{self, CrateType, OptLevel, DebugInfo,\n                              CrossLangLto};\n use rustc::ty::TyCtxt;\n use rustc_target::spec::{LinkerFlavor, LldFlavor};\n@@ -338,7 +338,7 @@ impl<'a> Linker for GccLinker<'a> {\n \n     fn debuginfo(&mut self) {\n         match self.sess.opts.debuginfo {\n-            DebugInfoLevel::NoDebugInfo => {\n+            DebugInfo::None => {\n                 // If we are building without debuginfo enabled and we were called with\n                 // `-Zstrip-debuginfo-if-disabled=yes`, tell the linker to strip any debuginfo\n                 // found when linking to get rid of symbols from libstd.\n@@ -826,9 +826,9 @@ impl<'a> Linker for EmLinker<'a> {\n     fn debuginfo(&mut self) {\n         // Preserve names or generate source maps depending on debug info\n         self.cmd.arg(match self.sess.opts.debuginfo {\n-            DebugInfoLevel::NoDebugInfo => \"-g0\",\n-            DebugInfoLevel::LimitedDebugInfo => \"-g3\",\n-            DebugInfoLevel::FullDebugInfo => \"-g4\"\n+            DebugInfo::None => \"-g0\",\n+            DebugInfo::Limited => \"-g3\",\n+            DebugInfo::Full => \"-g4\"\n         });\n     }\n "}, {"sha": "a5c6a0d5cd690e4828b2b4595db3220b9a7cb291", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=2bc71971e5d91834d165b80b16858a49c9e00aba", "patch": "@@ -344,7 +344,7 @@ pub struct CodegenContext {\n     pub tm_factory: Arc<dyn Fn() -> Result<&'static mut llvm::TargetMachine, String> + Send + Sync>,\n     pub msvc_imps_needed: bool,\n     pub target_pointer_width: String,\n-    debuginfo: config::DebugInfoLevel,\n+    debuginfo: config::DebugInfo,\n \n     // Number of cgus excluding the allocator/metadata modules\n     pub total_cgus: usize,"}, {"sha": "41336165684f61ff630eb59570c7653610dbd0b9", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=2bc71971e5d91834d165b80b16858a49c9e00aba", "patch": "@@ -46,7 +46,7 @@ use rustc::middle::cstore::{self, LinkMeta, LinkagePreference};\n use rustc::middle::exported_symbols;\n use rustc::util::common::{time, print_time_passes_entry};\n use rustc::util::profiling::ProfileCategory;\n-use rustc::session::config::{self, NoDebugInfo, EntryFnType};\n+use rustc::session::config::{self, DebugInfo, EntryFnType};\n use rustc::session::Session;\n use rustc_incremental;\n use allocator;\n@@ -1249,7 +1249,7 @@ fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n \n             // Finalize debuginfo\n-            if cx.sess().opts.debuginfo != NoDebugInfo {\n+            if cx.sess().opts.debuginfo != DebugInfo::None {\n                 debuginfo::finalize(&cx);\n             }\n "}, {"sha": "2f557d0b099986eb9d716ce5f2569b28e4819709", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=2bc71971e5d91834d165b80b16858a49c9e00aba", "patch": "@@ -26,7 +26,7 @@ use type_of::PointeeInfo;\n \n use rustc_data_structures::base_n;\n use rustc::mir::mono::Stats;\n-use rustc::session::config::{self, NoDebugInfo};\n+use rustc::session::config::{self, DebugInfo};\n use rustc::session::Session;\n use rustc::ty::layout::{LayoutError, LayoutOf, Size, TyLayout};\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -270,7 +270,7 @@ impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n \n         let (llcx, llmod) = (&*llvm_module.llcx, llvm_module.llmod());\n \n-        let dbg_cx = if tcx.sess.opts.debuginfo != NoDebugInfo {\n+        let dbg_cx = if tcx.sess.opts.debuginfo != DebugInfo::None {\n             let dctx = debuginfo::CrateDebugContext::new(llmod);\n             debuginfo::metadata::compile_unit_metadata(tcx,\n                                                         &codegen_unit.name().as_str(),\n@@ -770,7 +770,7 @@ fn declare_intrinsic(cx: &CodegenCx<'ll, '_>, key: &str) -> Option<&'ll Value> {\n     ifn!(\"llvm.assume\", fn(i1) -> void);\n     ifn!(\"llvm.prefetch\", fn(i8p, t_i32, t_i32, t_i32) -> void);\n \n-    if cx.sess().opts.debuginfo != NoDebugInfo {\n+    if cx.sess().opts.debuginfo != DebugInfo::None {\n         ifn!(\"llvm.dbg.declare\", fn(Type::metadata(cx), Type::metadata(cx)) -> void);\n         ifn!(\"llvm.dbg.value\", fn(Type::metadata(cx), t_i64, Type::metadata(cx)) -> void);\n     }"}, {"sha": "f6faddb894ffdf41c532659fffc92afea806f412", "filename": "src/librustc_codegen_llvm/debuginfo/gdb.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fgdb.rs?ref=2bc71971e5d91834d165b80b16858a49c9e00aba", "patch": "@@ -15,7 +15,7 @@ use llvm;\n use common::{C_bytes, CodegenCx, C_i32};\n use builder::Builder;\n use declare;\n-use rustc::session::config::NoDebugInfo;\n+use rustc::session::config::DebugInfo;\n use type_::Type;\n use value::Value;\n \n@@ -81,6 +81,6 @@ pub fn needs_gdb_debug_scripts_section(cx: &CodegenCx) -> bool {\n                             \"omit_gdb_pretty_printer_section\");\n \n     !omit_gdb_pretty_printer_section &&\n-    cx.sess().opts.debuginfo != NoDebugInfo &&\n+    cx.sess().opts.debuginfo != DebugInfo::None &&\n     cx.sess().target.target.options.emit_debug_gdb_scripts\n }"}, {"sha": "d4fb2549a752c80f6d03c287c8462dfb07bf180c", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=2bc71971e5d91834d165b80b16858a49c9e00aba", "patch": "@@ -32,7 +32,7 @@ use builder::Builder;\n use monomorphize::Instance;\n use rustc::ty::{self, ParamEnv, Ty, InstanceDef};\n use rustc::mir;\n-use rustc::session::config::{self, FullDebugInfo, LimitedDebugInfo, NoDebugInfo};\n+use rustc::session::config::{self, DebugInfo};\n use rustc::util::nodemap::{DefIdMap, FxHashMap, FxHashSet};\n use value::Value;\n \n@@ -214,7 +214,7 @@ pub fn create_function_debug_context(\n     llfn: &'ll Value,\n     mir: &mir::Mir,\n ) -> FunctionDebugContext<'ll> {\n-    if cx.sess().opts.debuginfo == NoDebugInfo {\n+    if cx.sess().opts.debuginfo == DebugInfo::None {\n         return FunctionDebugContext::DebugInfoDisabled;\n     }\n \n@@ -314,7 +314,7 @@ pub fn create_function_debug_context(\n         cx: &CodegenCx<'ll, 'tcx>,\n         sig: ty::FnSig<'tcx>,\n     ) -> &'ll DIArray {\n-        if cx.sess().opts.debuginfo == LimitedDebugInfo {\n+        if cx.sess().opts.debuginfo == DebugInfo::Limited {\n             return create_DIArray(DIB(cx), &[]);\n         }\n \n@@ -400,7 +400,7 @@ pub fn create_function_debug_context(\n         name_to_append_suffix_to.push('>');\n \n         // Again, only create type information if full debuginfo is enabled\n-        let template_params: Vec<_> = if cx.sess().opts.debuginfo == FullDebugInfo {\n+        let template_params: Vec<_> = if cx.sess().opts.debuginfo == DebugInfo::Full {\n             let names = get_parameter_names(cx, generics);\n             substs.iter().zip(names).filter_map(|(kind, name)| {\n                 if let UnpackedKind::Type(ty) = kind.unpack() {"}, {"sha": "8fdb67f5930cecb8f05d9eea7d86df76a79fd7aa", "filename": "src/librustc_codegen_llvm/mir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fmod.rs?ref=2bc71971e5d91834d165b80b16858a49c9e00aba", "patch": "@@ -16,7 +16,7 @@ use rustc::ty::{self, Ty, TypeFoldable, UpvarSubsts};\n use rustc::ty::layout::{LayoutOf, TyLayout};\n use rustc::mir::{self, Mir};\n use rustc::ty::subst::Substs;\n-use rustc::session::config::FullDebugInfo;\n+use rustc::session::config::DebugInfo;\n use base;\n use builder::Builder;\n use common::{CodegenCx, Funclet};\n@@ -267,7 +267,7 @@ pub fn codegen_mir(\n             if let Some(name) = decl.name {\n                 // User variable\n                 let debug_scope = fx.scopes[decl.visibility_scope];\n-                let dbg = debug_scope.is_valid() && bx.sess().opts.debuginfo == FullDebugInfo;\n+                let dbg = debug_scope.is_valid() && bx.sess().opts.debuginfo == DebugInfo::Full;\n \n                 if !memory_locals.contains(local) && !dbg {\n                     debug!(\"alloc: {:?} ({}) -> operand\", local, name);\n@@ -426,7 +426,7 @@ fn arg_local_refs(\n \n     // Get the argument scope, if it exists and if we need it.\n     let arg_scope = scopes[mir::OUTERMOST_SOURCE_SCOPE];\n-    let arg_scope = if bx.sess().opts.debuginfo == FullDebugInfo {\n+    let arg_scope = if bx.sess().opts.debuginfo == DebugInfo::Full {\n         arg_scope.scope_metadata\n     } else {\n         None"}, {"sha": "164790db4b5ec81b0f0ab62420b4481f8afc6419", "filename": "src/librustc_mir/transform/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc71971e5d91834d165b80b16858a49c9e00aba/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fsimplify.rs?ref=2bc71971e5d91834d165b80b16858a49c9e00aba", "patch": "@@ -42,7 +42,7 @@ use rustc_data_structures::indexed_vec::{Idx, IndexVec};\n use rustc::ty::TyCtxt;\n use rustc::mir::*;\n use rustc::mir::visit::{MutVisitor, Visitor, PlaceContext};\n-use rustc::session::config::FullDebugInfo;\n+use rustc::session::config::DebugInfo;\n use std::borrow::Cow;\n use transform::{MirPass, MirSource};\n \n@@ -294,7 +294,7 @@ impl MirPass for SimplifyLocals {\n         }\n \n         // We may need to keep dead user variables live for debuginfo.\n-        if tcx.sess.opts.debuginfo == FullDebugInfo {\n+        if tcx.sess.opts.debuginfo == DebugInfo::Full {\n             for local in mir.vars_iter() {\n                 marker.locals.insert(local);\n             }"}]}