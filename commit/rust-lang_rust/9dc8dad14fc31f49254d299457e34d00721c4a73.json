{"sha": "9dc8dad14fc31f49254d299457e34d00721c4a73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYzhkYWQxNGZjMzFmNDkyNTRkMjk5NDU3ZTM0ZDAwNzIxYzRhNzM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-02T00:07:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-02T00:07:06Z"}, "message": "Auto merge of #69432 - petrochenkov:alldeps, r=eddyb\n\nrustc_metadata: Load metadata for indirect macro-only dependencies\n\nImagine this dependency chain between crates\n```\nExecutable crate -> Library crate -> Macro crate\n```\nwhere \"Library crate\" uses the macros from \"Macro crate\" for some code generation, but doesn't reexport them any further.\n\nCurrently, when compiling \"Executable crate\" we don't even load metadata for it, because why would we want to load any metadata from \"Macro crate\" if it already did all its code generation job when compiling \"Library crate\".\nRight?\n\nWrong!\nHygiene data and spans (https://github.com/rust-lang/rust/issues/68686, https://github.com/rust-lang/rust/pull/68941) from \"Macro crate\" still may need to be decoded from \"Executable crate\".\nSo we'll have to load them properly.\n\nQuestions:\n- How this will affect compile times for larger crate trees in practice? How to measure it?\nHygiene/span encoding/decoding will necessarily slow down compilation because right now we just don't do some work that we should do, but this introduces a whole new way to slow down things. E.g. loading metadata for `syn` (and its dependencies) when compiling your executable if one of its library dependencies uses it.\n- We are currently detecting whether a crate reexports macros from \"Macro crate\" or not, could we similarly detect whether a crate \"reexports spans\" and keep it unloaded if it doesn't?\nOr at least \"reexports important spans\" affecting hygiene, we can probably lose spans that only affect diagnostics.", "tree": {"sha": "956e0bd709e733d7693932cc6e0fc01a4e253874", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/956e0bd709e733d7693932cc6e0fc01a4e253874"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9dc8dad14fc31f49254d299457e34d00721c4a73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9dc8dad14fc31f49254d299457e34d00721c4a73", "html_url": "https://github.com/rust-lang/rust/commit/9dc8dad14fc31f49254d299457e34d00721c4a73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9dc8dad14fc31f49254d299457e34d00721c4a73/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cf090e8d1916987dc02385ad552be57e4815b4b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf090e8d1916987dc02385ad552be57e4815b4b", "html_url": "https://github.com/rust-lang/rust/commit/1cf090e8d1916987dc02385ad552be57e4815b4b"}, {"sha": "487c378fc670e1305454b83f7bf33164c9ec379b", "url": "https://api.github.com/repos/rust-lang/rust/commits/487c378fc670e1305454b83f7bf33164c9ec379b", "html_url": "https://github.com/rust-lang/rust/commit/487c378fc670e1305454b83f7bf33164c9ec379b"}], "stats": {"total": 29, "additions": 5, "deletions": 24}, "files": [{"sha": "42d56c654627ab6975c2fb76ad8abd5ba49b1eb5", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9dc8dad14fc31f49254d299457e34d00721c4a73/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc8dad14fc31f49254d299457e34d00721c4a73/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=9dc8dad14fc31f49254d299457e34d00721c4a73", "patch": "@@ -53,9 +53,6 @@ impl CrateSource {\n     HashStable\n )]\n pub enum DepKind {\n-    /// A dependency that is only used for its macros, none of which are visible from other crates.\n-    /// These are included in the metadata only as placeholders and are ignored when decoding.\n-    UnexportedMacrosOnly,\n     /// A dependency that is only used for its macros.\n     MacrosOnly,\n     /// A dependency that is always injected into the dependency list and so\n@@ -69,7 +66,7 @@ pub enum DepKind {\n impl DepKind {\n     pub fn macros_only(self) -> bool {\n         match self {\n-            DepKind::UnexportedMacrosOnly | DepKind::MacrosOnly => true,\n+            DepKind::MacrosOnly => true,\n             DepKind::Implicit | DepKind::Explicit => false,\n         }\n     }"}, {"sha": "5254471051ffdf4584c9a5fd6432583ff04e5025", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9dc8dad14fc31f49254d299457e34d00721c4a73/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc8dad14fc31f49254d299457e34d00721c4a73/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=9dc8dad14fc31f49254d299457e34d00721c4a73", "patch": "@@ -463,7 +463,7 @@ impl<'a> CrateLoader<'a> {\n             self.load(&mut locator)\n                 .map(|r| (r, None))\n                 .or_else(|| {\n-                    dep_kind = DepKind::UnexportedMacrosOnly;\n+                    dep_kind = DepKind::MacrosOnly;\n                     self.load_proc_macro(&mut locator, path_kind)\n                 })\n                 .ok_or_else(move || LoadError::LocatorError(locator))?\n@@ -473,7 +473,7 @@ impl<'a> CrateLoader<'a> {\n             (LoadResult::Previous(cnum), None) => {\n                 let data = self.cstore.get_crate_data(cnum);\n                 if data.is_proc_macro_crate() {\n-                    dep_kind = DepKind::UnexportedMacrosOnly;\n+                    dep_kind = DepKind::MacrosOnly;\n                 }\n                 data.update_dep_kind(|data_dep_kind| cmp::max(data_dep_kind, dep_kind));\n                 Ok(cnum)\n@@ -547,9 +547,6 @@ impl<'a> CrateLoader<'a> {\n                     \"resolving dep crate {} hash: `{}` extra filename: `{}`\",\n                     dep.name, dep.hash, dep.extra_filename\n                 );\n-                if dep.kind == DepKind::UnexportedMacrosOnly {\n-                    return krate;\n-                }\n                 let dep_kind = match dep_kind {\n                     DepKind::MacrosOnly => DepKind::MacrosOnly,\n                     _ => dep.kind,\n@@ -850,7 +847,7 @@ impl<'a> CrateLoader<'a> {\n                     None => item.ident.name,\n                 };\n                 let dep_kind = if attr::contains_name(&item.attrs, sym::no_link) {\n-                    DepKind::UnexportedMacrosOnly\n+                    DepKind::MacrosOnly\n                 } else {\n                     DepKind::Explicit\n                 };"}, {"sha": "be229350f3bcc4842641818d7be20eded9e73529", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9dc8dad14fc31f49254d299457e34d00721c4a73/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc8dad14fc31f49254d299457e34d00721c4a73/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=9dc8dad14fc31f49254d299457e34d00721c4a73", "patch": "@@ -7,7 +7,7 @@ use crate::rmeta::{self, encoder};\n use rustc::hir::exports::Export;\n use rustc::hir::map::definitions::DefPathTable;\n use rustc::hir::map::{DefKey, DefPath, DefPathHash};\n-use rustc::middle::cstore::{CrateSource, CrateStore, DepKind, EncodedMetadata, NativeLibraryKind};\n+use rustc::middle::cstore::{CrateSource, CrateStore, EncodedMetadata, NativeLibraryKind};\n use rustc::middle::exported_symbols::ExportedSymbol;\n use rustc::middle::stability::DeprecationEntry;\n use rustc::session::{CrateDisambiguator, Session};\n@@ -393,14 +393,6 @@ pub fn provide(providers: &mut Providers<'_>) {\n }\n \n impl CStore {\n-    pub fn export_macros_untracked(&self, cnum: CrateNum) {\n-        let data = self.get_crate_data(cnum);\n-        let mut dep_kind = data.dep_kind.lock();\n-        if *dep_kind == DepKind::UnexportedMacrosOnly {\n-            *dep_kind = DepKind::MacrosOnly;\n-        }\n-    }\n-\n     pub fn struct_field_names_untracked(&self, def: DefId, sess: &Session) -> Vec<Spanned<Symbol>> {\n         self.get_crate_data(def.krate).get_struct_field_names(def.index, sess)\n     }"}, {"sha": "1d502e52de4b5e028920441ed9781e6ad2e220b0", "filename": "src/librustc_resolve/imports.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9dc8dad14fc31f49254d299457e34d00721c4a73/src%2Flibrustc_resolve%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9dc8dad14fc31f49254d299457e34d00721c4a73/src%2Flibrustc_resolve%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fimports.rs?ref=9dc8dad14fc31f49254d299457e34d00721c4a73", "patch": "@@ -1403,11 +1403,6 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n             if is_good_import || binding.is_macro_def() {\n                 let res = binding.res();\n                 if res != Res::Err {\n-                    if let Some(def_id) = res.opt_def_id() {\n-                        if !def_id.is_local() {\n-                            this.cstore().export_macros_untracked(def_id.krate);\n-                        }\n-                    }\n                     reexports.push(Export { ident, res, span: binding.span, vis: binding.vis });\n                 }\n             }"}]}