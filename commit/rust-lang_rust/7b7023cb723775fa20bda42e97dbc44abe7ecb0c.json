{"sha": "7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "node_id": "C_kwDOAAsO6NoAKDdiNzAyM2NiNzIzNzc1ZmEyMGJkYTQyZTk3ZGJjNDRhYmU3ZWNiMGM", "commit": {"author": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-07T06:10:01Z"}, "committer": {"name": "Noah Lev", "email": "camelidcamel@gmail.com", "date": "2021-11-07T16:41:18Z"}, "message": "rustdoc: Refactor `Impl.{synthetic,blanket_impl}` into enum\n\nThis change has two advantages:\n\n1. It makes the possible states clearer, and it makes it impossible to\n   construct invalid states, such as a blanket impl that is also an auto\n   trait impl.\n\n2. It shrinks the size of `Impl` a bit, since now there is only one\n   field, rather than two.", "tree": {"sha": "2e2407a5108e2369989d9b28a33b717d5e2661b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e2407a5108e2369989d9b28a33b717d5e2661b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "html_url": "https://github.com/rust-lang/rust/commit/7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/comments", "author": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camelid", "id": 37223377, "node_id": "MDQ6VXNlcjM3MjIzMzc3", "avatar_url": "https://avatars.githubusercontent.com/u/37223377?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camelid", "html_url": "https://github.com/camelid", "followers_url": "https://api.github.com/users/camelid/followers", "following_url": "https://api.github.com/users/camelid/following{/other_user}", "gists_url": "https://api.github.com/users/camelid/gists{/gist_id}", "starred_url": "https://api.github.com/users/camelid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camelid/subscriptions", "organizations_url": "https://api.github.com/users/camelid/orgs", "repos_url": "https://api.github.com/users/camelid/repos", "events_url": "https://api.github.com/users/camelid/events{/privacy}", "received_events_url": "https://api.github.com/users/camelid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c32ee54380bfa39cb300a330f1ce886b9f90eaaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/c32ee54380bfa39cb300a330f1ce886b9f90eaaf", "html_url": "https://github.com/rust-lang/rust/commit/c32ee54380bfa39cb300a330f1ce886b9f90eaaf"}], "stats": {"total": 102, "additions": 66, "deletions": 36}, "files": [{"sha": "3cac4c148b5cad760ce7da62489ef68ec3a0aa3d", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "patch": "@@ -121,8 +121,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                 for_: ty.clean(self.cx),\n                 items: Vec::new(),\n                 negative_polarity,\n-                synthetic: true,\n-                blanket_impl: None,\n+                kind: ImplKind::Auto,\n             }),\n             cfg: None,\n         })"}, {"sha": "9b80fe0736dddaabec991c82647f7b5d15cffb8e", "filename": "src/librustdoc/clean/blanket_impl.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fblanket_impl.rs?ref=7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "patch": "@@ -124,8 +124,7 @@ impl<'a, 'tcx> BlanketImplFinder<'a, 'tcx> {\n                             .collect::<Vec<_>>()\n                             .clean(self.cx),\n                         negative_polarity: false,\n-                        synthetic: false,\n-                        blanket_impl: Some(box trait_ref.self_ty().clean(self.cx)),\n+                        kind: ImplKind::Blanket(box trait_ref.self_ty().clean(self.cx)),\n                     }),\n                     cfg: None,\n                 });"}, {"sha": "fccb53183ed131eb78c114132c4078e54765c101", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "patch": "@@ -14,7 +14,9 @@ use rustc_middle::ty::{self, TyCtxt};\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Symbol};\n \n-use crate::clean::{self, utils, Attributes, AttributesExt, ItemId, NestedAttributesExt, Type};\n+use crate::clean::{\n+    self, utils, Attributes, AttributesExt, ImplKind, ItemId, NestedAttributesExt, Type,\n+};\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n \n@@ -496,8 +498,7 @@ crate fn build_impl(\n             for_,\n             items: trait_items,\n             negative_polarity: polarity.clean(cx),\n-            synthetic: false,\n-            blanket_impl: None,\n+            kind: ImplKind::Normal,\n         }),\n         box merged_attrs,\n         cx,"}, {"sha": "862dfa5e324553a6cb217aed9a41eeb5b78b4e6f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "patch": "@@ -1895,8 +1895,7 @@ fn clean_impl(impl_: &hir::Impl<'_>, hir_id: hir::HirId, cx: &mut DocContext<'_>\n             for_,\n             items,\n             negative_polarity: tcx.impl_polarity(def_id).clean(cx),\n-            synthetic: false,\n-            blanket_impl: None,\n+            kind: ImplKind::Normal,\n         });\n         Item::from_hir_id_and_parts(hir_id, None, kind, cx)\n     };"}, {"sha": "47895616abcdd4f0ad623a22c66dced6eea365f6", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "patch": "@@ -393,8 +393,8 @@ impl Item {\n         };\n         match kind {\n             ItemKind::ModuleItem(Module { span, .. }) => *span,\n-            ItemKind::ImplItem(Impl { synthetic: true, .. }) => Span::dummy(),\n-            ItemKind::ImplItem(Impl { blanket_impl: Some(_), .. }) => {\n+            ItemKind::ImplItem(Impl { kind: ImplKind::Auto, .. }) => Span::dummy(),\n+            ItemKind::ImplItem(Impl { kind: ImplKind::Blanket(_), .. }) => {\n                 if let ItemId::Blanket { impl_id, .. } = self.def_id {\n                     rustc_span(impl_id, tcx)\n                 } else {\n@@ -2178,11 +2178,22 @@ crate struct Impl {\n     crate for_: Type,\n     crate items: Vec<Item>,\n     crate negative_polarity: bool,\n-    crate synthetic: bool,\n-    crate blanket_impl: Option<Box<Type>>,\n+    crate kind: ImplKind,\n }\n \n impl Impl {\n+    crate fn is_auto_impl(&self) -> bool {\n+        self.kind.is_auto()\n+    }\n+\n+    crate fn is_blanket_impl(&self) -> bool {\n+        self.kind.is_blanket()\n+    }\n+\n+    crate fn blanket_impl_ty(&self) -> Option<&Type> {\n+        self.kind.as_blanket_ty()\n+    }\n+\n     crate fn provided_trait_methods(&self, tcx: TyCtxt<'_>) -> FxHashSet<Symbol> {\n         self.trait_\n             .as_ref()\n@@ -2192,6 +2203,30 @@ impl Impl {\n     }\n }\n \n+#[derive(Clone, Debug)]\n+crate enum ImplKind {\n+    Normal,\n+    Auto,\n+    Blanket(Box<Type>),\n+}\n+\n+impl ImplKind {\n+    crate fn is_auto(&self) -> bool {\n+        matches!(self, ImplKind::Auto)\n+    }\n+\n+    crate fn is_blanket(&self) -> bool {\n+        matches!(self, ImplKind::Blanket(_))\n+    }\n+\n+    crate fn as_blanket_ty(&self) -> Option<&Type> {\n+        match self {\n+            ImplKind::Blanket(ty) => Some(ty),\n+            _ => None,\n+        }\n+    }\n+}\n+\n #[derive(Clone, Debug)]\n crate struct Import {\n     crate kind: ImportKind,"}, {"sha": "2a3998f4f9d66da0010352fb118e078156ef9330", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "patch": "@@ -228,7 +228,7 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n         // Collect all the implementors of traits.\n         if let clean::ImplItem(ref i) = *item.kind {\n             if let Some(trait_) = &i.trait_ {\n-                if i.blanket_impl.is_none() {\n+                if !i.is_blanket_impl() {\n                     self.cache\n                         .implementors\n                         .entry(trait_.def_id())"}, {"sha": "5a4ff8dc837a58ae88c2f41b1d48a41f78aa93d4", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "patch": "@@ -997,7 +997,7 @@ impl clean::Impl {\n                 write!(f, \" for \")?;\n             }\n \n-            if let Some(ref ty) = self.blanket_impl {\n+            if let Some(ref ty) = self.blanket_impl_ty() {\n                 fmt_type(ty, f, use_absolute, cx)?;\n             } else {\n                 fmt_type(&self.for_, f, use_absolute, cx)?;"}, {"sha": "91bd1107d874c703ce85130663498560a80e9689", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "patch": "@@ -1147,9 +1147,9 @@ fn render_assoc_items_inner(\n         }\n \n         let (synthetic, concrete): (Vec<&&Impl>, Vec<&&Impl>) =\n-            traits.iter().partition(|t| t.inner_impl().synthetic);\n+            traits.iter().partition(|t| t.inner_impl().is_auto_impl());\n         let (blanket_impl, concrete): (Vec<&&Impl>, _) =\n-            concrete.into_iter().partition(|t| t.inner_impl().blanket_impl.is_some());\n+            concrete.into_iter().partition(|t| t.inner_impl().is_blanket_impl());\n \n         let mut impls = Buffer::empty_from(w);\n         render_impls(cx, &mut impls, &concrete, containing_item);\n@@ -2058,10 +2058,9 @@ fn sidebar_assoc_items(cx: &Context<'_>, out: &mut Buffer, it: &clean::Item) {\n             };\n \n             let (synthetic, concrete): (Vec<&Impl>, Vec<&Impl>) =\n-                v.iter().partition::<Vec<_>, _>(|i| i.inner_impl().synthetic);\n-            let (blanket_impl, concrete): (Vec<&Impl>, Vec<&Impl>) = concrete\n-                .into_iter()\n-                .partition::<Vec<_>, _>(|i| i.inner_impl().blanket_impl.is_some());\n+                v.iter().partition::<Vec<_>, _>(|i| i.inner_impl().is_auto_impl());\n+            let (blanket_impl, concrete): (Vec<&Impl>, Vec<&Impl>) =\n+                concrete.into_iter().partition::<Vec<_>, _>(|i| i.inner_impl().is_blanket_impl());\n \n             let concrete_format = format_impls(concrete);\n             let synthetic_format = format_impls(synthetic);"}, {"sha": "10afe18b33c6d8badd37971a4a465a6871043492", "filename": "src/librustdoc/html/render/print_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fprint_item.rs?ref=7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "patch": "@@ -746,7 +746,7 @@ fn item_trait(w: &mut Buffer, cx: &Context<'_>, it: &clean::Item, t: &clean::Tra\n         });\n \n         let (mut synthetic, mut concrete): (Vec<&&Impl>, Vec<&&Impl>) =\n-            local.iter().partition(|i| i.inner_impl().synthetic);\n+            local.iter().partition(|i| i.inner_impl().is_auto_impl());\n \n         synthetic.sort_by(|a, b| compare_impl(a, b, cx));\n         concrete.sort_by(|a, b| compare_impl(a, b, cx));"}, {"sha": "cf12d668569fb1ba5a0079a3afa8c1dffc451e2f", "filename": "src/librustdoc/html/render/write_shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fwrite_shared.rs?ref=7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "patch": "@@ -585,7 +585,7 @@ pub(super) fn write_shared(\n                 } else {\n                     Some(Implementor {\n                         text: imp.inner_impl().print(false, cx).to_string(),\n-                        synthetic: imp.inner_impl().synthetic,\n+                        synthetic: imp.inner_impl().is_auto_impl(),\n                         types: collect_paths_for_type(imp.inner_impl().for_.clone(), cache),\n                     })\n                 }"}, {"sha": "94069b99c7d36f51b9cb9124fcd533561a61114b", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "patch": "@@ -500,21 +500,19 @@ impl FromWithTcx<clean::Trait> for Trait {\n impl FromWithTcx<clean::Impl> for Impl {\n     fn from_tcx(impl_: clean::Impl, tcx: TyCtxt<'_>) -> Self {\n         let provided_trait_methods = impl_.provided_trait_methods(tcx);\n-        let clean::Impl {\n-            unsafety,\n-            generics,\n-            trait_,\n-            for_,\n-            items,\n-            negative_polarity,\n-            synthetic,\n-            blanket_impl,\n-        } = impl_;\n+        let clean::Impl { unsafety, generics, trait_, for_, items, negative_polarity, kind } =\n+            impl_;\n         // FIXME: should `trait_` be a clean::Path equivalent in JSON?\n         let trait_ = trait_.map(|path| {\n             let did = path.def_id();\n             clean::ResolvedPath { path, did }.into_tcx(tcx)\n         });\n+        // FIXME: use something like ImplKind in JSON?\n+        let (synthetic, blanket_impl) = match kind {\n+            clean::ImplKind::Normal => (false, None),\n+            clean::ImplKind::Auto => (true, None),\n+            clean::ImplKind::Blanket(ty) => (false, Some(*ty)),\n+        };\n         Impl {\n             is_unsafe: unsafety == rustc_hir::Unsafety::Unsafe,\n             generics: generics.into_tcx(tcx),\n@@ -527,7 +525,7 @@ impl FromWithTcx<clean::Impl> for Impl {\n             items: ids(items),\n             negative: negative_polarity,\n             synthetic,\n-            blanket_impl: blanket_impl.map(|x| (*x).into_tcx(tcx)),\n+            blanket_impl: blanket_impl.map(|x| x.into_tcx(tcx)),\n         }\n     }\n }"}, {"sha": "ea50134f00d477c485322b5ef9c0f423a4086d4c", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b7023cb723775fa20bda42e97dbc44abe7ecb0c/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=7b7023cb723775fa20bda42e97dbc44abe7ecb0c", "patch": "@@ -111,12 +111,12 @@ crate fn collect_trait_impls(mut krate: Crate, cx: &mut DocContext<'_>) -> Crate\n     }\n \n     new_items.retain(|it| {\n-        if let ImplItem(Impl { ref for_, ref trait_, ref blanket_impl, .. }) = *it.kind {\n+        if let ImplItem(Impl { ref for_, ref trait_, ref kind, .. }) = *it.kind {\n             cleaner.keep_impl(\n                 for_,\n                 trait_.as_ref().map(|t| t.def_id()) == cx.tcx.lang_items().deref_trait(),\n             ) || trait_.as_ref().map_or(false, |t| cleaner.keep_impl_with_def_id(t.def_id().into()))\n-                || blanket_impl.is_some()\n+                || kind.is_blanket()\n         } else {\n             true\n         }"}]}