{"sha": "6899471497614d73f8bc13ac074d7624b4554091", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OTk0NzE0OTc2MTRkNzNmOGJjMTNhYzA3NGQ3NjI0YjQ1NTQwOTE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-07-20T02:27:56Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-07-20T04:05:18Z"}, "message": "Check for comments after the `=>` in a match arm\n\nCloses #2188", "tree": {"sha": "0617e5cfbc27e471090fbc61485acb01b662f515", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0617e5cfbc27e471090fbc61485acb01b662f515"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6899471497614d73f8bc13ac074d7624b4554091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6899471497614d73f8bc13ac074d7624b4554091", "html_url": "https://github.com/rust-lang/rust/commit/6899471497614d73f8bc13ac074d7624b4554091", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6899471497614d73f8bc13ac074d7624b4554091/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa61bd5c1a1fa968d154dc1175a79d161ecfaf85", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa61bd5c1a1fa968d154dc1175a79d161ecfaf85", "html_url": "https://github.com/rust-lang/rust/commit/aa61bd5c1a1fa968d154dc1175a79d161ecfaf85"}], "stats": {"total": 76, "additions": 54, "deletions": 22}, "files": [{"sha": "6abb5a9ef6d16be9a59a81c769aeb8bbb99bc6f8", "filename": "rustfmt.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6899471497614d73f8bc13ac074d7624b4554091/rustfmt.toml", "raw_url": "https://github.com/rust-lang/rust/raw/6899471497614d73f8bc13ac074d7624b4554091/rustfmt.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rustfmt.toml?ref=6899471497614d73f8bc13ac074d7624b4554091", "patch": "@@ -1,3 +1,3 @@\n error_on_line_overflow = true\n error_on_unformatted = true\n-edition = \"Edition2018\"\n\\ No newline at end of file\n+edition = \"Edition2018\""}, {"sha": "791f34cefe8ded442117fe601ed9c6820e7c1c94", "filename": "src/matches.rs", "status": "modified", "additions": 50, "deletions": 20, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6899471497614d73f8bc13ac074d7624b4554091/src%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6899471497614d73f8bc13ac074d7624b4554091/src%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmatches.rs?ref=6899471497614d73f8bc13ac074d7624b4554091", "patch": "@@ -17,7 +17,7 @@ use syntax::codemap::{BytePos, Span};\n use syntax::{ast, ptr};\n \n use codemap::SpanUtils;\n-use comment::combine_strs_with_missing_comments;\n+use comment::{combine_strs_with_missing_comments, rewrite_comment};\n use config::{Config, ControlBraceStyle, IndentStyle};\n use expr::{\n     format_expr, is_empty_block, is_simple_block, is_unsafe_block, prefer_next_line,\n@@ -267,12 +267,15 @@ fn rewrite_match_arm(\n                     false,\n                 )\n             })?;\n+\n+    let arrow_span = mk_sp(arm.pats.last().unwrap().span.hi(), arm.body.span.lo());\n     rewrite_match_body(\n         context,\n         &arm.body,\n         &pats_str,\n         shape,\n         arm.guard.is_some(),\n+        arrow_span,\n         is_last,\n     )\n }\n@@ -345,6 +348,7 @@ fn rewrite_match_body(\n     pats_str: &str,\n     shape: Shape,\n     has_guard: bool,\n+    arrow_span: Span,\n     is_last: bool,\n ) -> Option<String> {\n     let (extend, body) = flatten_arm_body(context, body);\n@@ -369,24 +373,43 @@ fn rewrite_match_body(\n         Some(format!(\"{} =>{}{}{}\", pats_str, block_sep, body_str, comma))\n     };\n \n-    let forbid_same_line = has_guard && pats_str.contains('\\n') && !is_empty_block;\n     let next_line_indent = if !is_block || is_empty_block {\n         shape.indent.block_indent(context.config)\n     } else {\n         shape.indent\n     };\n+\n+    let forbid_same_line = has_guard && pats_str.contains('\\n') && !is_empty_block;\n+\n+    // Look for comments between `=>` and the start of the body.\n+    let arrow_comment = {\n+        let arrow_snippet = context.snippet(arrow_span).trim();\n+        let arrow_index = arrow_snippet.find(\"=>\").unwrap();\n+        // 2 = `=>`\n+        let comment_str = arrow_snippet[arrow_index + 2..].trim();\n+        if comment_str.is_empty() {\n+            String::new()\n+        } else {\n+            rewrite_comment(comment_str, false, shape, &context.config)?\n+        }\n+    };\n+\n     let combine_next_line_body = |body_str: &str| {\n+        let nested_indent_str = next_line_indent.to_string_with_newline(context.config);\n+\n         if is_block {\n-            return Some(format!(\n-                \"{} =>{}{}\",\n-                pats_str,\n-                next_line_indent.to_string_with_newline(context.config),\n-                body_str\n-            ));\n+            let mut result = pats_str.to_owned();\n+            result.push_str(\" =>\");\n+            if !arrow_comment.is_empty() {\n+                result.push_str(&nested_indent_str);\n+                result.push_str(&arrow_comment);\n+            }\n+            result.push_str(&nested_indent_str);\n+            result.push_str(&body_str);\n+            return Some(result);\n         }\n \n         let indent_str = shape.indent.to_string_with_newline(context.config);\n-        let nested_indent_str = next_line_indent.to_string_with_newline(context.config);\n         let (body_prefix, body_suffix) = if context.config.match_arm_blocks() {\n             let comma = if context.config.match_block_trailing_comma() {\n                 \",\"\n@@ -401,32 +424,40 @@ fn rewrite_match_body(\n         let block_sep = match context.config.control_brace_style() {\n             ControlBraceStyle::AlwaysNextLine => format!(\"{}{}\", alt_block_sep, body_prefix),\n             _ if body_prefix.is_empty() => \"\".to_owned(),\n-            _ if forbid_same_line => format!(\"{}{}\", alt_block_sep, body_prefix),\n+            _ if forbid_same_line || !arrow_comment.is_empty() => {\n+                format!(\"{}{}\", alt_block_sep, body_prefix)\n+            }\n             _ => format!(\" {}\", body_prefix),\n         } + &nested_indent_str;\n \n-        Some(format!(\n-            \"{} =>{}{}{}\",\n-            pats_str, block_sep, body_str, body_suffix\n-        ))\n+        let mut result = pats_str.to_owned();\n+        result.push_str(\" =>\");\n+        if !arrow_comment.is_empty() {\n+            result.push_str(&indent_str);\n+            result.push_str(&arrow_comment);\n+        }\n+        result.push_str(&block_sep);\n+        result.push_str(&body_str);\n+        result.push_str(&body_suffix);\n+        Some(result)\n     };\n \n     // Let's try and get the arm body on the same line as the condition.\n     // 4 = ` => `.len()\n     let orig_body_shape = shape\n         .offset_left(extra_offset(pats_str, shape) + 4)\n         .and_then(|shape| shape.sub_width(comma.len()));\n-    let orig_body = if let Some(body_shape) = orig_body_shape {\n+    let orig_body = if forbid_same_line || !arrow_comment.is_empty() {\n+        None\n+    } else if let Some(body_shape) = orig_body_shape {\n         let rewrite = nop_block_collapse(\n             format_expr(body, ExprType::Statement, context, body_shape),\n             body_shape.width,\n         );\n \n         match rewrite {\n             Some(ref body_str)\n-                if !forbid_same_line\n-                    && (is_block\n-                        || (!body_str.contains('\\n') && body_str.len() <= body_shape.width)) =>\n+                if is_block || (!body_str.contains('\\n') && body_str.len() <= body_shape.width) =>\n             {\n                 return combine_orig_body(body_str);\n             }\n@@ -445,8 +476,7 @@ fn rewrite_match_body(\n     );\n     match (orig_body, next_line_body) {\n         (Some(ref orig_str), Some(ref next_line_str))\n-            if forbid_same_line\n-                || prefer_next_line(orig_str, next_line_str, RhsTactics::Default) =>\n+            if prefer_next_line(orig_str, next_line_str, RhsTactics::Default) =>\n         {\n             combine_next_line_body(next_line_str)\n         }"}, {"sha": "b1fa0ff6fe119a5d8c9d08952d9f6979d20087c7", "filename": "tests/target/comment-not-disappear.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6899471497614d73f8bc13ac074d7624b4554091/tests%2Ftarget%2Fcomment-not-disappear.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6899471497614d73f8bc13ac074d7624b4554091/tests%2Ftarget%2Fcomment-not-disappear.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcomment-not-disappear.rs?ref=6899471497614d73f8bc13ac074d7624b4554091", "patch": "@@ -11,8 +11,10 @@ fn a() {\n fn b() {\n     match x {\n         X =>\n-            // A comment\n+        // A comment\n+        {\n             y\n+        }\n     }\n }\n "}]}