{"sha": "b7501620d3edf00fc44084b0823fe8470197b818", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NTAxNjIwZDNlZGYwMGZjNDQwODRiMDgyM2ZlODQ3MDE5N2I4MTg=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-02-03T07:41:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-03T07:41:24Z"}, "message": "Rollup merge of #81573 - ehuss:cell-links, r=jackh726\n\nAdd some links to the cell docs.\n\nThis adds a few links to the cell module docs to make it a little easier to navigate to the types and functions it references.", "tree": {"sha": "084b17f077ca88c9c54efd3365879e88005ddfaa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/084b17f077ca88c9c54efd3365879e88005ddfaa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7501620d3edf00fc44084b0823fe8470197b818", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgGlOlCRBK7hj4Ov3rIwAAdHIIAC7HwHWsSslIpq7BvZf+aWd9\nx20XACYDZUuGl/UZFv7cBnTREsAf2EL12ReeepSOoZ2HZf9tkeMWugBce/3ss3kc\ns0FlpsEjwAAeljPn4tAkvaot3vnJnlHHovJ4jbR38XBuEExcGrvwUYKOtUQw1EdT\nNieuhCGYb9+kRfTp+1DpXKgyrRxGGxIvwHdj68672pznAojL6OvHOYHpMGukf+8I\ncwPPZObbE2FuAPgDgT+iKlgLbwxMnx91h/mPR3c72nUkwqfGBZ1JTlKLz3u/czpa\nKcnu97he+KEBYIwnwz4qryA/LhxdjDh0sOb+onh/2yB2dbQIV5NyHByVa09AgRs=\n=/Wlk\n-----END PGP SIGNATURE-----\n", "payload": "tree 084b17f077ca88c9c54efd3365879e88005ddfaa\nparent 7330a9ce32485287f73e83ca5bb12aa1ed00feb2\nparent 4749ad091261b531145388aca0e40cb0575a7ff9\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1612338084 +0100\ncommitter GitHub <noreply@github.com> 1612338084 +0100\n\nRollup merge of #81573 - ehuss:cell-links, r=jackh726\n\nAdd some links to the cell docs.\n\nThis adds a few links to the cell module docs to make it a little easier to navigate to the types and functions it references.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7501620d3edf00fc44084b0823fe8470197b818", "html_url": "https://github.com/rust-lang/rust/commit/b7501620d3edf00fc44084b0823fe8470197b818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7501620d3edf00fc44084b0823fe8470197b818/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7330a9ce32485287f73e83ca5bb12aa1ed00feb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7330a9ce32485287f73e83ca5bb12aa1ed00feb2", "html_url": "https://github.com/rust-lang/rust/commit/7330a9ce32485287f73e83ca5bb12aa1ed00feb2"}, {"sha": "4749ad091261b531145388aca0e40cb0575a7ff9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4749ad091261b531145388aca0e40cb0575a7ff9", "html_url": "https://github.com/rust-lang/rust/commit/4749ad091261b531145388aca0e40cb0575a7ff9"}], "stats": {"total": 44, "additions": 24, "deletions": 20}, "files": [{"sha": "885422732e40138ec4e0bc939dffbe40984a9770", "filename": "library/core/src/cell.rs", "status": "modified", "additions": 24, "deletions": 20, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/b7501620d3edf00fc44084b0823fe8470197b818/library%2Fcore%2Fsrc%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7501620d3edf00fc44084b0823fe8470197b818/library%2Fcore%2Fsrc%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcell.rs?ref=b7501620d3edf00fc44084b0823fe8470197b818", "patch": "@@ -11,12 +11,10 @@\n //! mutate it.\n //!\n //! Shareable mutable containers exist to permit mutability in a controlled manner, even in the\n-//! presence of aliasing. Both `Cell<T>` and `RefCell<T>` allow doing this in a single-threaded\n+//! presence of aliasing. Both [`Cell<T>`] and [`RefCell<T>`] allow doing this in a single-threaded\n //! way. However, neither `Cell<T>` nor `RefCell<T>` are thread safe (they do not implement\n-//! `Sync`). If you need to do aliasing and mutation between multiple threads it is possible to\n-//! use [`Mutex`](../../std/sync/struct.Mutex.html),\n-//! [`RwLock`](../../std/sync/struct.RwLock.html) or\n-//! [`atomic`](../../core/sync/atomic/index.html) types.\n+//! [`Sync`]). If you need to do aliasing and mutation between multiple threads it is possible to\n+//! use [`Mutex<T>`], [`RwLock<T>`] or [`atomic`] types.\n //!\n //! Values of the `Cell<T>` and `RefCell<T>` types may be mutated through shared references (i.e.\n //! the common `&T` type), whereas most Rust types can only be mutated through unique (`&mut T`)\n@@ -28,13 +26,14 @@\n //! one must use the `RefCell<T>` type, acquiring a write lock before mutating. `Cell<T>` provides\n //! methods to retrieve and change the current interior value:\n //!\n-//!  - For types that implement `Copy`, the `get` method retrieves the current interior value.\n-//!  - For types that implement `Default`, the `take` method replaces the current interior value\n-//!    with `Default::default()` and returns the replaced value.\n-//!  - For all types, the `replace` method replaces the current interior value and returns the\n-//!    replaced value and the `into_inner` method consumes the `Cell<T>` and returns the interior\n-//!    value. Additionally, the `set` method replaces the interior value, dropping the replaced\n-//!    value.\n+//!  - For types that implement [`Copy`], the [`get`](Cell::get) method retrieves the current\n+//!    interior value.\n+//!  - For types that implement [`Default`], the [`take`](Cell::take) method replaces the current\n+//!    interior value with [`Default::default()`] and returns the replaced value.\n+//!  - For all types, the [`replace`](Cell::replace) method replaces the current interior value and\n+//!    returns the replaced value and the [`into_inner`](Cell::into_inner) method consumes the\n+//!    `Cell<T>` and returns the interior value. Additionally, the [`set`](Cell::set) method\n+//!    replaces the interior value, dropping the replaced value.\n //!\n //! `RefCell<T>` uses Rust's lifetimes to implement 'dynamic borrowing', a process whereby one can\n //! claim temporary, exclusive, mutable access to the inner value. Borrows for `RefCell<T>`s are\n@@ -54,12 +53,12 @@\n //!\n //! * Introducing mutability 'inside' of something immutable\n //! * Implementation details of logically-immutable methods.\n-//! * Mutating implementations of `Clone`.\n+//! * Mutating implementations of [`Clone`].\n //!\n //! ## Introducing mutability 'inside' of something immutable\n //!\n-//! Many shared smart pointer types, including `Rc<T>` and `Arc<T>`, provide containers that can be\n-//! cloned and shared between multiple parties. Because the contained values may be\n+//! Many shared smart pointer types, including [`Rc<T>`] and [`Arc<T>`], provide containers that can\n+//! be cloned and shared between multiple parties. Because the contained values may be\n //! multiply-aliased, they can only be borrowed with `&`, not `&mut`. Without cells it would be\n //! impossible to mutate data inside of these smart pointers at all.\n //!\n@@ -91,7 +90,7 @@\n //! ```\n //!\n //! Note that this example uses `Rc<T>` and not `Arc<T>`. `RefCell<T>`s are for single-threaded\n-//! scenarios. Consider using `RwLock<T>` or `Mutex<T>` if you need shared mutability in a\n+//! scenarios. Consider using [`RwLock<T>`] or [`Mutex<T>`] if you need shared mutability in a\n //! multi-threaded situation.\n //!\n //! ## Implementation details of logically-immutable methods\n@@ -127,10 +126,10 @@\n //! ## Mutating implementations of `Clone`\n //!\n //! This is simply a special - but common - case of the previous: hiding mutability for operations\n-//! that appear to be immutable. The `clone` method is expected to not change the source value, and\n-//! is declared to take `&self`, not `&mut self`. Therefore, any mutation that happens in the\n-//! `clone` method must use cell types. For example, `Rc<T>` maintains its reference counts within a\n-//! `Cell<T>`.\n+//! that appear to be immutable. The [`clone`](Clone::clone) method is expected to not change the\n+//! source value, and is declared to take `&self`, not `&mut self`. Therefore, any mutation that\n+//! happens in the `clone` method must use cell types. For example, [`Rc<T>`] maintains its\n+//! reference counts within a `Cell<T>`.\n //!\n //! ```\n //! use std::cell::Cell;\n@@ -185,6 +184,11 @@\n //! }\n //! ```\n //!\n+//! [`Arc<T>`]: ../../std/sync/struct.Arc.html\n+//! [`Rc<T>`]: ../../std/rc/struct.Rc.html\n+//! [`RwLock<T>`]: ../../std/sync/struct.RwLock.html\n+//! [`Mutex<T>`]: ../../std/sync/struct.Mutex.html\n+//! [`atomic`]: ../../core/sync/atomic/index.html\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n "}]}