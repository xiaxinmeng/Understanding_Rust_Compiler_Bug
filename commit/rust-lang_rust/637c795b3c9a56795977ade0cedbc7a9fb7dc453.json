{"sha": "637c795b3c9a56795977ade0cedbc7a9fb7dc453", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzN2M3OTViM2M5YTU2Nzk1OTc3YWRlMGNlZGJjN2E5ZmI3ZGM0NTM=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2020-03-12T14:01:53Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2020-03-12T14:01:53Z"}, "message": "Correctly handle multi-line fixes from cargo/clippy", "tree": {"sha": "c88f77b45c2a5f24b31f1b7ed10956619438989f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c88f77b45c2a5f24b31f1b7ed10956619438989f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/637c795b3c9a56795977ade0cedbc7a9fb7dc453", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/637c795b3c9a56795977ade0cedbc7a9fb7dc453", "html_url": "https://github.com/rust-lang/rust/commit/637c795b3c9a56795977ade0cedbc7a9fb7dc453", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/637c795b3c9a56795977ade0cedbc7a9fb7dc453/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "05b4fc6d79060fc3120f92b01119e3a851c37829", "url": "https://api.github.com/repos/rust-lang/rust/commits/05b4fc6d79060fc3120f92b01119e3a851c37829", "html_url": "https://github.com/rust-lang/rust/commit/05b4fc6d79060fc3120f92b01119e3a851c37829"}], "stats": {"total": 297, "additions": 267, "deletions": 30}, "files": [{"sha": "a3f05bedeffaa709c505dc92852b9a63b9be76bd", "filename": "crates/ra_cargo_watch/src/conv.rs", "status": "modified", "additions": 19, "deletions": 28, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/637c795b3c9a56795977ade0cedbc7a9fb7dc453/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637c795b3c9a56795977ade0cedbc7a9fb7dc453/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs?ref=637c795b3c9a56795977ade0cedbc7a9fb7dc453", "patch": "@@ -8,6 +8,7 @@ use lsp_types::{\n     Location, NumberOrString, Position, Range, TextEdit, Url, WorkspaceEdit,\n };\n use std::{\n+    collections::HashMap,\n     fmt::Write,\n     path::{Component, Path, PathBuf, Prefix},\n     str::FromStr,\n@@ -126,44 +127,34 @@ fn map_rust_child_diagnostic(\n     rd: &RustDiagnostic,\n     workspace_root: &PathBuf,\n ) -> MappedRustChildDiagnostic {\n-    let span: &DiagnosticSpan = match rd.spans.iter().find(|s| s.is_primary) {\n-        Some(span) => span,\n-        None => {\n-            // `rustc` uses these spanless children as a way to print multi-line\n-            // messages\n-            return MappedRustChildDiagnostic::MessageLine(rd.message.clone());\n-        }\n-    };\n-\n-    // If we have a primary span use its location, otherwise use the parent\n-    let location = map_span_to_location(&span, workspace_root);\n-\n-    if let Some(suggested_replacement) = &span.suggested_replacement {\n-        // Include our replacement in the title unless it's empty\n-        let title = if !suggested_replacement.is_empty() {\n-            format!(\"{}: '{}'\", rd.message, suggested_replacement)\n-        } else {\n-            rd.message.clone()\n-        };\n+    let spans: Vec<&DiagnosticSpan> = rd.spans.iter().filter(|s| s.is_primary).collect();\n+    if spans.is_empty() {\n+        // `rustc` uses these spanless children as a way to print multi-line\n+        // messages\n+        return MappedRustChildDiagnostic::MessageLine(rd.message.clone());\n+    }\n \n-        let edit = {\n-            let edits = vec![TextEdit::new(location.range, suggested_replacement.clone())];\n-            let mut edit_map = std::collections::HashMap::new();\n-            edit_map.insert(location.uri, edits);\n-            WorkspaceEdit::new(edit_map)\n-        };\n+    let mut edit_map: HashMap<Url, Vec<TextEdit>> = HashMap::new();\n+    for &span in &spans {\n+        if let Some(suggested_replacement) = &span.suggested_replacement {\n+            let location = map_span_to_location(span, workspace_root);\n+            let edit = TextEdit::new(location.range, suggested_replacement.clone());\n+            edit_map.entry(location.uri).or_default().push(edit);\n+        }\n+    }\n \n+    if !edit_map.is_empty() {\n         MappedRustChildDiagnostic::SuggestedFix(CodeAction {\n-            title,\n+            title: rd.message.clone(),\n             kind: Some(\"quickfix\".to_string()),\n             diagnostics: None,\n-            edit: Some(edit),\n+            edit: Some(WorkspaceEdit::new(edit_map)),\n             command: None,\n             is_preferred: None,\n         })\n     } else {\n         MappedRustChildDiagnostic::Related(DiagnosticRelatedInformation {\n-            location,\n+            location: map_span_to_location(spans[0], workspace_root),\n             message: rd.message.clone(),\n         })\n     }"}, {"sha": "47801ae79ce1172a250e26cda3e446c89216051d", "filename": "crates/ra_cargo_watch/src/conv/snapshots/ra_cargo_watch__conv__test__snap_clippy_pass_by_ref.snap", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/637c795b3c9a56795977ade0cedbc7a9fb7dc453/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_clippy_pass_by_ref.snap", "raw_url": "https://github.com/rust-lang/rust/raw/637c795b3c9a56795977ade0cedbc7a9fb7dc453/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_clippy_pass_by_ref.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_clippy_pass_by_ref.snap?ref=637c795b3c9a56795977ade0cedbc7a9fb7dc453", "patch": "@@ -63,7 +63,7 @@ MappedRustDiagnostic {\n     },\n     fixes: [\n         CodeAction {\n-            title: \"consider passing by value instead: \\'self\\'\",\n+            title: \"consider passing by value instead\",\n             kind: Some(\n                 \"quickfix\",\n             ),"}, {"sha": "23c4f5a2c401ff13f4984ed5d151993a13f15e0c", "filename": "crates/ra_cargo_watch/src/conv/snapshots/ra_cargo_watch__conv__test__snap_multi_line_fix.snap", "status": "added", "additions": 112, "deletions": 0, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/637c795b3c9a56795977ade0cedbc7a9fb7dc453/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_multi_line_fix.snap", "raw_url": "https://github.com/rust-lang/rust/raw/637c795b3c9a56795977ade0cedbc7a9fb7dc453/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_multi_line_fix.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_multi_line_fix.snap?ref=637c795b3c9a56795977ade0cedbc7a9fb7dc453", "patch": "@@ -0,0 +1,112 @@\n+---\n+source: crates/ra_cargo_watch/src/conv/test.rs\n+expression: diag\n+---\n+MappedRustDiagnostic {\n+    location: Location {\n+        uri: \"file:///test/src/main.rs\",\n+        range: Range {\n+            start: Position {\n+                line: 3,\n+                character: 4,\n+            },\n+            end: Position {\n+                line: 3,\n+                character: 5,\n+            },\n+        },\n+    },\n+    diagnostic: Diagnostic {\n+        range: Range {\n+            start: Position {\n+                line: 3,\n+                character: 4,\n+            },\n+            end: Position {\n+                line: 3,\n+                character: 5,\n+            },\n+        },\n+        severity: Some(\n+            Warning,\n+        ),\n+        code: Some(\n+            String(\n+                \"let_and_return\",\n+            ),\n+        ),\n+        source: Some(\n+            \"clippy\",\n+        ),\n+        message: \"returning the result of a let binding from a block\\n`#[warn(clippy::let_and_return)]` on by default\\nfor further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\",\n+        related_information: Some(\n+            [\n+                DiagnosticRelatedInformation {\n+                    location: Location {\n+                        uri: \"file:///test/src/main.rs\",\n+                        range: Range {\n+                            start: Position {\n+                                line: 2,\n+                                character: 4,\n+                            },\n+                            end: Position {\n+                                line: 2,\n+                                character: 30,\n+                            },\n+                        },\n+                    },\n+                    message: \"unnecessary let binding\",\n+                },\n+            ],\n+        ),\n+        tags: None,\n+    },\n+    fixes: [\n+        CodeAction {\n+            title: \"return the expression directly\",\n+            kind: Some(\n+                \"quickfix\",\n+            ),\n+            diagnostics: None,\n+            edit: Some(\n+                WorkspaceEdit {\n+                    changes: Some(\n+                        {\n+                            \"file:///test/src/main.rs\": [\n+                                TextEdit {\n+                                    range: Range {\n+                                        start: Position {\n+                                            line: 2,\n+                                            character: 4,\n+                                        },\n+                                        end: Position {\n+                                            line: 2,\n+                                            character: 30,\n+                                        },\n+                                    },\n+                                    new_text: \"\",\n+                                },\n+                                TextEdit {\n+                                    range: Range {\n+                                        start: Position {\n+                                            line: 3,\n+                                            character: 4,\n+                                        },\n+                                        end: Position {\n+                                            line: 3,\n+                                            character: 5,\n+                                        },\n+                                    },\n+                                    new_text: \"(0..10).collect()\",\n+                                },\n+                            ],\n+                        },\n+                    ),\n+                    document_changes: None,\n+                },\n+            ),\n+            command: None,\n+            is_preferred: None,\n+        },\n+    ],\n+}"}, {"sha": "8bab09540c339a3e0f5532aa294a62ecc91527ec", "filename": "crates/ra_cargo_watch/src/conv/snapshots/ra_cargo_watch__conv__test__snap_rustc_unused_variable.snap", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/637c795b3c9a56795977ade0cedbc7a9fb7dc453/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_rustc_unused_variable.snap", "raw_url": "https://github.com/rust-lang/rust/raw/637c795b3c9a56795977ade0cedbc7a9fb7dc453/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_rustc_unused_variable.snap", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Fsnapshots%2Fra_cargo_watch__conv__test__snap_rustc_unused_variable.snap?ref=637c795b3c9a56795977ade0cedbc7a9fb7dc453", "patch": "@@ -48,7 +48,7 @@ MappedRustDiagnostic {\n     },\n     fixes: [\n         CodeAction {\n-            title: \"consider prefixing with an underscore: \\'_foo\\'\",\n+            title: \"consider prefixing with an underscore\",\n             kind: Some(\n                 \"quickfix\",\n             ),"}, {"sha": "c880dcdc39b0de72c686e80facd9d0e7cc99b82d", "filename": "crates/ra_cargo_watch/src/conv/test.rs", "status": "modified", "additions": 134, "deletions": 0, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/637c795b3c9a56795977ade0cedbc7a9fb7dc453/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/637c795b3c9a56795977ade0cedbc7a9fb7dc453/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv%2Ftest.rs?ref=637c795b3c9a56795977ade0cedbc7a9fb7dc453", "patch": "@@ -936,3 +936,137 @@ fn snap_macro_compiler_error() {\n     let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n     insta::assert_debug_snapshot!(diag);\n }\n+\n+#[test]\n+#[cfg(not(windows))]\n+fn snap_multi_line_fix() {\n+    let diag = parse_diagnostic(\n+        r##\"{\n+            \"rendered\": \"warning: returning the result of a let binding from a block\\n --> src/main.rs:4:5\\n  |\\n3 |     let a = (0..10).collect();\\n  |     -------------------------- unnecessary let binding\\n4 |     a\\n  |     ^\\n  |\\n  = note: `#[warn(clippy::let_and_return)]` on by default\\n  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\\nhelp: return the expression directly\\n  |\\n3 |     \\n4 |     (0..10).collect()\\n  |\\n\\n\",\n+            \"children\": [\n+                {\n+                \"children\": [],\n+                \"code\": null,\n+                \"level\": \"note\",\n+                \"message\": \"`#[warn(clippy::let_and_return)]` on by default\",\n+                \"rendered\": null,\n+                \"spans\": []\n+                },\n+                {\n+                \"children\": [],\n+                \"code\": null,\n+                \"level\": \"help\",\n+                \"message\": \"for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return\",\n+                \"rendered\": null,\n+                \"spans\": []\n+                },\n+                {\n+                \"children\": [],\n+                \"code\": null,\n+                \"level\": \"help\",\n+                \"message\": \"return the expression directly\",\n+                \"rendered\": null,\n+                \"spans\": [\n+                    {\n+                    \"byte_end\": 55,\n+                    \"byte_start\": 29,\n+                    \"column_end\": 31,\n+                    \"column_start\": 5,\n+                    \"expansion\": null,\n+                    \"file_name\": \"src/main.rs\",\n+                    \"is_primary\": true,\n+                    \"label\": null,\n+                    \"line_end\": 3,\n+                    \"line_start\": 3,\n+                    \"suggested_replacement\": \"\",\n+                    \"suggestion_applicability\": \"MachineApplicable\",\n+                    \"text\": [\n+                        {\n+                        \"highlight_end\": 31,\n+                        \"highlight_start\": 5,\n+                        \"text\": \"    let a = (0..10).collect();\"\n+                        }\n+                    ]\n+                    },\n+                    {\n+                    \"byte_end\": 61,\n+                    \"byte_start\": 60,\n+                    \"column_end\": 6,\n+                    \"column_start\": 5,\n+                    \"expansion\": null,\n+                    \"file_name\": \"src/main.rs\",\n+                    \"is_primary\": true,\n+                    \"label\": null,\n+                    \"line_end\": 4,\n+                    \"line_start\": 4,\n+                    \"suggested_replacement\": \"(0..10).collect()\",\n+                    \"suggestion_applicability\": \"MachineApplicable\",\n+                    \"text\": [\n+                        {\n+                        \"highlight_end\": 6,\n+                        \"highlight_start\": 5,\n+                        \"text\": \"    a\"\n+                        }\n+                    ]\n+                    }\n+                ]\n+                }\n+            ],\n+            \"code\": {\n+                \"code\": \"clippy::let_and_return\",\n+                \"explanation\": null\n+            },\n+            \"level\": \"warning\",\n+            \"message\": \"returning the result of a let binding from a block\",\n+            \"spans\": [\n+                {\n+                \"byte_end\": 55,\n+                \"byte_start\": 29,\n+                \"column_end\": 31,\n+                \"column_start\": 5,\n+                \"expansion\": null,\n+                \"file_name\": \"src/main.rs\",\n+                \"is_primary\": false,\n+                \"label\": \"unnecessary let binding\",\n+                \"line_end\": 3,\n+                \"line_start\": 3,\n+                \"suggested_replacement\": null,\n+                \"suggestion_applicability\": null,\n+                \"text\": [\n+                    {\n+                    \"highlight_end\": 31,\n+                    \"highlight_start\": 5,\n+                    \"text\": \"    let a = (0..10).collect();\"\n+                    }\n+                ]\n+                },\n+                {\n+                \"byte_end\": 61,\n+                \"byte_start\": 60,\n+                \"column_end\": 6,\n+                \"column_start\": 5,\n+                \"expansion\": null,\n+                \"file_name\": \"src/main.rs\",\n+                \"is_primary\": true,\n+                \"label\": null,\n+                \"line_end\": 4,\n+                \"line_start\": 4,\n+                \"suggested_replacement\": null,\n+                \"suggestion_applicability\": null,\n+                \"text\": [\n+                    {\n+                    \"highlight_end\": 6,\n+                    \"highlight_start\": 5,\n+                    \"text\": \"    a\"\n+                    }\n+                ]\n+                }\n+            ]\n+        }\n+        \"##,\n+    );\n+\n+    let workspace_root = PathBuf::from(\"/test/\");\n+    let diag = map_rust_diagnostic_to_lsp(&diag, &workspace_root).expect(\"couldn't map diagnostic\");\n+    insta::assert_debug_snapshot!(diag);\n+}"}]}