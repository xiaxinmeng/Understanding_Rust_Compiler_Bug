{"sha": "5e9ca5b25530ab58f9d0b09662884928b054f271", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlOWNhNWIyNTUzMGFiNThmOWQwYjA5NjYyODg0OTI4YjA1NGYyNzE=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-04T00:43:25Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:45Z"}, "message": "libcore: use unboxed closures in `IteratorExt` methods", "tree": {"sha": "289da302cf95970816ec69b25817555e1a81a0ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/289da302cf95970816ec69b25817555e1a81a0ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e9ca5b25530ab58f9d0b09662884928b054f271", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9ca5b25530ab58f9d0b09662884928b054f271", "html_url": "https://github.com/rust-lang/rust/commit/5e9ca5b25530ab58f9d0b09662884928b054f271", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e9ca5b25530ab58f9d0b09662884928b054f271/comments", "author": null, "committer": null, "parents": [{"sha": "216bcfd66b63a9f60e41e4b736145f62edda4150", "url": "https://api.github.com/repos/rust-lang/rust/commits/216bcfd66b63a9f60e41e4b736145f62edda4150", "html_url": "https://github.com/rust-lang/rust/commit/216bcfd66b63a9f60e41e4b736145f62edda4150"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "e886dfadb47e7abc29f5c707dc41988c3aed6738", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5e9ca5b25530ab58f9d0b09662884928b054f271/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e9ca5b25530ab58f9d0b09662884928b054f271/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=5e9ca5b25530ab58f9d0b09662884928b054f271", "patch": "@@ -521,7 +521,7 @@ pub trait IteratorExt<A>: Iterator<A> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures, just changed to take self by value\"]\n-    fn fold<B>(mut self, init: B, f: |B, A| -> B) -> B {\n+    fn fold<B, F>(mut self, init: B, mut f: F) -> B where F: FnMut(B, A) -> B {\n         let mut accum = init;\n         for x in self {\n             accum = f(accum, x);\n@@ -555,7 +555,7 @@ pub trait IteratorExt<A>: Iterator<A> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures, just changed to take self by value\"]\n-    fn all(mut self, f: |A| -> bool) -> bool {\n+    fn all<F>(mut self, mut f: F) -> bool where F: FnMut(A) -> bool {\n         for x in self { if !f(x) { return false; } }\n         true\n     }\n@@ -573,7 +573,7 @@ pub trait IteratorExt<A>: Iterator<A> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    fn any(&mut self, f: |A| -> bool) -> bool {\n+    fn any<F>(&mut self, mut f: F) -> bool where F: FnMut(A) -> bool {\n         for x in *self { if f(x) { return true; } }\n         false\n     }\n@@ -583,7 +583,7 @@ pub trait IteratorExt<A>: Iterator<A> {\n     /// Does not consume the iterator past the first found element.\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    fn find(&mut self, predicate: |&A| -> bool) -> Option<A> {\n+    fn find<P>(&mut self, mut predicate: P) -> Option<A> where P: FnMut(&A) -> bool {\n         for x in *self {\n             if predicate(&x) { return Some(x) }\n         }\n@@ -593,7 +593,7 @@ pub trait IteratorExt<A>: Iterator<A> {\n     /// Return the index of the first element satisfying the specified predicate\n     #[inline]\n     #[unstable = \"waiting for unboxed closures\"]\n-    fn position(&mut self, predicate: |A| -> bool) -> Option<uint> {\n+    fn position<P>(&mut self, mut predicate: P) -> Option<uint> where P: FnMut(A) -> bool {\n         let mut i = 0;\n         for x in *self {\n             if predicate(x) {\n@@ -617,7 +617,7 @@ pub trait IteratorExt<A>: Iterator<A> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures, just changed to take self by value\"]\n-    fn max_by<B: Ord>(self, f: |&A| -> B) -> Option<A> {\n+    fn max_by<B: Ord, F>(self, mut f: F) -> Option<A> where F: FnMut(&A) -> B {\n         self.fold(None, |max: Option<(A, B)>, x| {\n             let x_val = f(&x);\n             match max {\n@@ -644,7 +644,7 @@ pub trait IteratorExt<A>: Iterator<A> {\n     /// ```\n     #[inline]\n     #[unstable = \"waiting for unboxed closures, just changed to take self by value\"]\n-    fn min_by<B: Ord>(self, f: |&A| -> B) -> Option<A> {\n+    fn min_by<B: Ord, F>(self, mut f: F) -> Option<A> where F: FnMut(&A) -> B {\n         self.fold(None, |min: Option<(A, B)>, x| {\n             let x_val = f(&x);\n             match min {"}]}