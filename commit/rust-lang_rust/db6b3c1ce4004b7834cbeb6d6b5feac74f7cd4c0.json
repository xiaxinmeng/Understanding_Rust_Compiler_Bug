{"sha": "db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNmIzYzFjZTQwMDRiNzgzNGNiZWI2ZDZiNWZlYWM3NGY3Y2Q0YzA=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-09T17:36:31Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2020-08-09T18:41:51Z"}, "message": "Remove normalization of `Span` debug output in proc-macro tests\n\nFixes #74800\n\nThe definition of `is_x86_feature_detected!` (and similar macros)\ndepends on the platform - it is produced by a `cfg_if!` invocation on\nx86, and a plain `#[cfg]` on other platforms. Since it is part of the\nprelude, we will end up importing different hygiene information\ndepending on the platform. This previously required us to avoid printing raw\n`SyntaxContext` ids in any tests that uses the standard library, since\nthe captured output will be platform-dependent.\n\nPreviously, we replaced all `SyntaxContext` ids with \"#CTXT\", and the\nraw `Span` lo/hi bytes with \"LO..HI\".\n\nThis commit adds `#![no_std]` and `extern crate std` to all proc-macro\ntests that print spans. This suppresses the prelude import, while\nstill using lang items from `std` (which gives us a buildable binary).\nWith this apporach, we will only load hygiene information for things\nwhich we explicitly import. This lets us re-add\n`-Z unpretty=expanded,hygiene`, since its output can now be made stable\nacross all platforms.\n\nAdditionally, we use `-Z span-debug` in more places, which lets us avoid\nthe \"LO..HI\" normalization hack.", "tree": {"sha": "a48decd23c235b4d337a4f9ad123da21a024415c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a48decd23c235b4d337a4f9ad123da21a024415c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl8wQ4cACgkQtAh+UQ6Y\nsWQjVBAAoNIeG25mNQyok3zZMkQbZ8RbJQL12c9AW008sddfXxGMrIEOunlWBQky\nhG9+gzDIpefCMzWw+cUrQ4yJw5gGap7N9iIiEMtx7rcKU2y3Nu/VedVLcLTWXrHt\nBTyGKGw0fbBp64M8JlcjF5HavMgkN4UGn8cVhiusGvruWJErFPHuH6U8decO63gf\nrp3yB9VoFQA+4UgB8/mNgEi32o8tiRyODrn7xRzERG/jGasfaEWx/fdNseU6CGI7\nloVbqREjeb1OQcXnP2Te9C/agD8irHpXYQlMvec6FKPdqwX10arCuvl/v5Ko+gic\nCOCqfxkOzPLeu9PABCBb9v+Z4yWLGnPWz9y2+lJbK1DLcX756TVCfh3hcNjzolLd\nAdXXDMpvIu5fxIJ4PVdxRxDFgWIV+vC4mAKsYmdLghvoA6m7Bm8478gs2Dwk1Kmr\nB40CCj1SNCK9BQ7S8jLZqUGBIrhBpk9ILqsHTOwFzXUtWoMADnkUpdZZ86YL76ET\n0DM58iCVBVsTC9VWoagMHmfjiGzbJo/WN9Lp97p6WBb/vujY8ytNh7T4j2hGlIRw\n1nZK5Q//77CgjzrCMCdY5RjT33M0p9sLw4zwQM0sUELdS79rsQ1sWhcH+LB1VQbx\nHImY6UPawBJC1JNx9FIZu2xQirtr98tMnVfP/dBaNW5K74pH038=\n=BSG1\n-----END PGP SIGNATURE-----", "payload": "tree a48decd23c235b4d337a4f9ad123da21a024415c\nparent 543f03d24118d3af784aa98c507c00e30c796a0e\nauthor Aaron Hill <aa1ronham@gmail.com> 1596994591 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1596998511 -0400\n\nRemove normalization of `Span` debug output in proc-macro tests\n\nFixes #74800\n\nThe definition of `is_x86_feature_detected!` (and similar macros)\ndepends on the platform - it is produced by a `cfg_if!` invocation on\nx86, and a plain `#[cfg]` on other platforms. Since it is part of the\nprelude, we will end up importing different hygiene information\ndepending on the platform. This previously required us to avoid printing raw\n`SyntaxContext` ids in any tests that uses the standard library, since\nthe captured output will be platform-dependent.\n\nPreviously, we replaced all `SyntaxContext` ids with \"#CTXT\", and the\nraw `Span` lo/hi bytes with \"LO..HI\".\n\nThis commit adds `#![no_std]` and `extern crate std` to all proc-macro\ntests that print spans. This suppresses the prelude import, while\nstill using lang items from `std` (which gives us a buildable binary).\nWith this apporach, we will only load hygiene information for things\nwhich we explicitly import. This lets us re-add\n`-Z unpretty=expanded,hygiene`, since its output can now be made stable\nacross all platforms.\n\nAdditionally, we use `-Z span-debug` in more places, which lets us avoid\nthe \"LO..HI\" normalization hack.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "html_url": "https://github.com/rust-lang/rust/commit/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "543f03d24118d3af784aa98c507c00e30c796a0e", "url": "https://api.github.com/repos/rust-lang/rust/commits/543f03d24118d3af784aa98c507c00e30c796a0e", "html_url": "https://github.com/rust-lang/rust/commit/543f03d24118d3af784aa98c507c00e30c796a0e"}], "stats": {"total": 396, "additions": 233, "deletions": 163}, "files": [{"sha": "ed8ca99bd2c945ed27932c6b09919e553dcd9924", "filename": "src/test/ui/proc-macro/doc-comment-preserved.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fdoc-comment-preserved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fdoc-comment-preserved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdoc-comment-preserved.rs?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -1,9 +1,9 @@\n // check-pass\n+// compile-flags: -Z span-debug\n // aux-build:test-macros.rs\n \n-// Anonymize unstable non-dummy spans while still showing dummy spans `0..0`.\n-// normalize-stdout-test \"bytes\\([^0]\\w*\\.\\.(\\w+)\\)\" -> \"bytes(LO..$1)\"\n-// normalize-stdout-test \"bytes\\((\\w+)\\.\\.[^0]\\w*\\)\" -> \"bytes($1..HI)\"\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n \n #[macro_use]\n extern crate test_macros;"}, {"sha": "f4160d7da80e5c4854c7a6b1dd0488b099fb7fcf", "filename": "src/test/ui/proc-macro/doc-comment-preserved.stdout", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fdoc-comment-preserved.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fdoc-comment-preserved.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdoc-comment-preserved.stdout?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -11,44 +11,44 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n     Punct {\n         ch: '#',\n         spacing: Alone,\n-        span: #0 bytes(LO..HI),\n+        span: $DIR/doc-comment-preserved.rs:13:1: 19:3 (#0),\n     },\n     Group {\n         delimiter: Bracket,\n         stream: TokenStream [\n             Ident {\n                 ident: \"doc\",\n-                span: #0 bytes(LO..HI),\n+                span: $DIR/doc-comment-preserved.rs:13:1: 19:3 (#0),\n             },\n             Punct {\n                 ch: '=',\n                 spacing: Alone,\n-                span: #0 bytes(LO..HI),\n+                span: $DIR/doc-comment-preserved.rs:13:1: 19:3 (#0),\n             },\n             Literal {\n                 kind: Str,\n                 symbol: \"\\n*******\\n* DOC *\\n* DOC *\\n* DOC *\\n*******\\n\",\n                 suffix: None,\n-                span: #0 bytes(LO..HI),\n+                span: $DIR/doc-comment-preserved.rs:13:1: 19:3 (#0),\n             },\n         ],\n-        span: #0 bytes(LO..HI),\n+        span: $DIR/doc-comment-preserved.rs:13:1: 19:3 (#0),\n     },\n     Ident {\n         ident: \"pub\",\n-        span: #0 bytes(LO..HI),\n+        span: $DIR/doc-comment-preserved.rs:20:1: 20:4 (#0),\n     },\n     Ident {\n         ident: \"struct\",\n-        span: #0 bytes(LO..HI),\n+        span: $DIR/doc-comment-preserved.rs:20:5: 20:11 (#0),\n     },\n     Ident {\n         ident: \"S\",\n-        span: #0 bytes(LO..HI),\n+        span: $DIR/doc-comment-preserved.rs:20:12: 20:13 (#0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #0 bytes(LO..HI),\n+        span: $DIR/doc-comment-preserved.rs:20:13: 20:14 (#0),\n     },\n ]"}, {"sha": "27bfa099f211a929db46dce92df9f9ab39d93952", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.rs?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -1,11 +1,10 @@\n // check-pass\n // edition:2018\n+// compile-flags: -Z span-debug\n // aux-build:test-macros.rs\n \n-// Anonymize unstable non-dummy spans while still showing dummy spans `0..0`.\n-// normalize-stdout-test \"bytes\\([^0]\\w*\\.\\.(\\w+)\\)\" -> \"bytes(LO..$1)\"\n-// normalize-stdout-test \"bytes\\((\\w+)\\.\\.[^0]\\w*\\)\" -> \"bytes($1..HI)\"\n-// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n \n #[macro_use]\n extern crate test_macros;"}, {"sha": "9a5afbd604f42f532bc92f6976449d3a85661fa3", "filename": "src/test/ui/proc-macro/dollar-crate-issue-57089.stdout", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-57089.stdout?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -2,79 +2,79 @@ PRINT-BANG INPUT (DISPLAY): struct M($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate-issue-57089.rs:17:13: 17:19 (#3),\n     },\n     Ident {\n         ident: \"M\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate-issue-57089.rs:17:20: 17:21 (#3),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate-issue-57089.rs:17:22: 17:28 (#3),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate-issue-57089.rs:17:28: 17:30 (#3),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate-issue-57089.rs:17:28: 17:30 (#3),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate-issue-57089.rs:17:30: 17:31 (#3),\n             },\n         ],\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate-issue-57089.rs:17:21: 17:32 (#3),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate-issue-57089.rs:17:32: 17:33 (#3),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate-issue-57089.rs:21:9: 21:15 (#3),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate-issue-57089.rs:21:16: 21:17 (#3),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate-issue-57089.rs:21:18: 21:24 (#3),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate-issue-57089.rs:21:24: 21:26 (#3),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate-issue-57089.rs:21:24: 21:26 (#3),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate-issue-57089.rs:21:26: 21:27 (#3),\n             },\n         ],\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate-issue-57089.rs:21:17: 21:28 (#3),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate-issue-57089.rs:21:28: 21:29 (#3),\n     },\n ]"}, {"sha": "d828fb9fd805dcc43518759ee84f0b3d10152f62", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.rs?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -1,12 +1,12 @@\n // check-pass\n // edition:2018\n+// compile-flags: -Z span-debug\n // aux-build:test-macros.rs\n // aux-build:dollar-crate-external.rs\n \n-// Anonymize unstable non-dummy spans while still showing dummy spans `0..0`.\n-// normalize-stdout-test \"bytes\\([^0]\\w*\\.\\.(\\w+)\\)\" -> \"bytes(LO..$1)\"\n-// normalize-stdout-test \"bytes\\((\\w+)\\.\\.[^0]\\w*\\)\" -> \"bytes($1..HI)\"\n-// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n \n #[macro_use]\n extern crate test_macros;"}, {"sha": "fc62eadd31376d72dfe12959fa2e9bf0954ad51c", "filename": "src/test/ui/proc-macro/dollar-crate-issue-62325.stdout", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate-issue-62325.stdout?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -2,109 +2,109 @@ PRINT-ATTR INPUT (DISPLAY): struct A(identity ! ($crate :: S)) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate-issue-62325.rs:19:5: 19:11 (#3),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate-issue-62325.rs:19:12: 19:13 (#3),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"identity\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate-issue-62325.rs:19:14: 19:22 (#3),\n             },\n             Punct {\n                 ch: '!',\n                 spacing: Alone,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate-issue-62325.rs:19:22: 19:23 (#3),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"$crate\",\n-                        span: #CTXT bytes(LO..HI),\n+                        span: $DIR/dollar-crate-issue-62325.rs:19:24: 19:30 (#3),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Joint,\n-                        span: #CTXT bytes(LO..HI),\n+                        span: $DIR/dollar-crate-issue-62325.rs:19:30: 19:32 (#3),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Alone,\n-                        span: #CTXT bytes(LO..HI),\n+                        span: $DIR/dollar-crate-issue-62325.rs:19:30: 19:32 (#3),\n                     },\n                     Ident {\n                         ident: \"S\",\n-                        span: #CTXT bytes(LO..HI),\n+                        span: $DIR/dollar-crate-issue-62325.rs:19:32: 19:33 (#3),\n                     },\n                 ],\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate-issue-62325.rs:19:23: 19:34 (#3),\n             },\n         ],\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate-issue-62325.rs:19:13: 19:35 (#3),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate-issue-62325.rs:19:35: 19:36 (#3),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct B(identity ! ($crate :: S)) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/auxiliary/dollar-crate-external.rs:21:5: 21:11 (#10),\n     },\n     Ident {\n         ident: \"B\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/auxiliary/dollar-crate-external.rs:21:12: 21:13 (#10),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"identity\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:21:14: 21:22 (#10),\n             },\n             Punct {\n                 ch: '!',\n                 spacing: Alone,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:21:22: 21:23 (#10),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [\n                     Ident {\n                         ident: \"$crate\",\n-                        span: #CTXT bytes(LO..HI),\n+                        span: $DIR/auxiliary/dollar-crate-external.rs:21:24: 21:30 (#10),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Joint,\n-                        span: #CTXT bytes(LO..HI),\n+                        span: $DIR/auxiliary/dollar-crate-external.rs:21:30: 21:32 (#10),\n                     },\n                     Punct {\n                         ch: ':',\n                         spacing: Alone,\n-                        span: #CTXT bytes(LO..HI),\n+                        span: $DIR/auxiliary/dollar-crate-external.rs:21:30: 21:32 (#10),\n                     },\n                     Ident {\n                         ident: \"S\",\n-                        span: #CTXT bytes(LO..HI),\n+                        span: $DIR/auxiliary/dollar-crate-external.rs:21:32: 21:33 (#10),\n                     },\n                 ],\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:21:23: 21:34 (#10),\n             },\n         ],\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/auxiliary/dollar-crate-external.rs:21:13: 21:35 (#10),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/auxiliary/dollar-crate-external.rs:21:35: 21:36 (#10),\n     },\n ]"}, {"sha": "ac27dfa1aeb4480775764c1e57c9a66862e7918a", "filename": "src/test/ui/proc-macro/dollar-crate.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.rs?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -1,12 +1,11 @@\n // check-pass\n // edition:2018\n+// compile-flags: -Z span-debug\n // aux-build:test-macros.rs\n // aux-build:dollar-crate-external.rs\n \n-// Anonymize unstable non-dummy spans while still showing dummy spans `0..0`.\n-// normalize-stdout-test \"bytes\\([^0]\\w*\\.\\.(\\w+)\\)\" -> \"bytes(LO..$1)\"\n-// normalize-stdout-test \"bytes\\((\\w+)\\.\\.[^0]\\w*\\)\" -> \"bytes($1..HI)\"\n-// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n \n #[macro_use]\n extern crate test_macros;"}, {"sha": "72fc6588583041ccb30ad0992efc01305361a125", "filename": "src/test/ui/proc-macro/dollar-crate.stdout", "status": "modified", "additions": 48, "deletions": 48, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fdollar-crate.stdout?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -2,239 +2,239 @@ PRINT-BANG INPUT (DISPLAY): struct M($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate.rs:20:17: 20:23 (#3),\n     },\n     Ident {\n         ident: \"M\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate.rs:20:24: 20:25 (#3),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate.rs:20:26: 20:32 (#3),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate.rs:20:32: 20:34 (#3),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate.rs:20:32: 20:34 (#3),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate.rs:20:34: 20:35 (#3),\n             },\n         ],\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate.rs:20:25: 20:36 (#3),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate.rs:20:36: 20:37 (#3),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate.rs:24:13: 24:19 (#3),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate.rs:24:20: 24:21 (#3),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate.rs:24:22: 24:28 (#3),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate.rs:24:28: 24:30 (#3),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate.rs:24:28: 24:30 (#3),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate.rs:24:30: 24:31 (#3),\n             },\n         ],\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate.rs:24:21: 24:32 (#3),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate.rs:24:32: 24:33 (#3),\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct D($crate :: S) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate.rs:27:13: 27:19 (#3),\n     },\n     Ident {\n         ident: \"D\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate.rs:27:20: 27:21 (#3),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate.rs:27:22: 27:28 (#3),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate.rs:27:28: 27:30 (#3),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate.rs:27:28: 27:30 (#3),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/dollar-crate.rs:27:30: 27:31 (#3),\n             },\n         ],\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate.rs:27:21: 27:32 (#3),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/dollar-crate.rs:27:32: 27:33 (#3),\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): struct M($crate :: S) ;\n PRINT-BANG INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/auxiliary/dollar-crate-external.rs:7:13: 7:19 (#13),\n     },\n     Ident {\n         ident: \"M\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/auxiliary/dollar-crate-external.rs:7:20: 7:21 (#13),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:7:22: 7:28 (#13),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:7:28: 7:30 (#13),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:7:28: 7:30 (#13),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:7:30: 7:31 (#13),\n             },\n         ],\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/auxiliary/dollar-crate-external.rs:7:21: 7:32 (#13),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/auxiliary/dollar-crate-external.rs:7:32: 7:33 (#13),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): struct A($crate :: S) ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/auxiliary/dollar-crate-external.rs:11:9: 11:15 (#13),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/auxiliary/dollar-crate-external.rs:11:16: 11:17 (#13),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:11:18: 11:24 (#13),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:11:24: 11:26 (#13),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:11:24: 11:26 (#13),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:11:26: 11:27 (#13),\n             },\n         ],\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/auxiliary/dollar-crate-external.rs:11:17: 11:28 (#13),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/auxiliary/dollar-crate-external.rs:11:28: 11:29 (#13),\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct D($crate :: S) ;\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/auxiliary/dollar-crate-external.rs:14:9: 14:15 (#13),\n     },\n     Ident {\n         ident: \"D\",\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/auxiliary/dollar-crate-external.rs:14:16: 14:17 (#13),\n     },\n     Group {\n         delimiter: Parenthesis,\n         stream: TokenStream [\n             Ident {\n                 ident: \"$crate\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:14:18: 14:24 (#13),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Joint,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:14:24: 14:26 (#13),\n             },\n             Punct {\n                 ch: ':',\n                 spacing: Alone,\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:14:24: 14:26 (#13),\n             },\n             Ident {\n                 ident: \"S\",\n-                span: #CTXT bytes(LO..HI),\n+                span: $DIR/auxiliary/dollar-crate-external.rs:14:26: 14:27 (#13),\n             },\n         ],\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/auxiliary/dollar-crate-external.rs:14:17: 14:28 (#13),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #CTXT bytes(LO..HI),\n+        span: $DIR/auxiliary/dollar-crate-external.rs:14:28: 14:29 (#13),\n     },\n ]"}, {"sha": "5e49e330cacfa211680ee44149ca64e0154e2e04", "filename": "src/test/ui/proc-macro/input-interpolated.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.rs?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -1,9 +1,12 @@\n // Check what token streams proc macros see when interpolated tokens are passed to them as input.\n \n // check-pass\n-// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n+// edition:2018\n // aux-build:test-macros.rs\n \n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n #[macro_use]\n extern crate test_macros;\n "}, {"sha": "9cf33ba4a9df46b74eae828cb7cf99a8659b4204", "filename": "src/test/ui/proc-macro/input-interpolated.stdout", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Finput-interpolated.stdout?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -5,61 +5,61 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         stream: TokenStream [\n             Ident {\n                 ident: \"A\",\n-                span: #CTXT bytes(445..446),\n+                span: #0 bytes(503..504),\n             },\n         ],\n-        span: #CTXT bytes(312..314),\n+        span: #3 bytes(370..372),\n     },\n ]\n PRINT-ATTR INPUT (DISPLAY): const A : u8 = 0 ;\n PRINT-ATTR INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"const\",\n-        span: #CTXT bytes(0..0),\n+        span: #0 bytes(0..0),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #CTXT bytes(0..0),\n+        span: #0 bytes(0..0),\n     },\n     Punct {\n         ch: ':',\n         spacing: Alone,\n-        span: #CTXT bytes(0..0),\n+        span: #0 bytes(0..0),\n     },\n     Ident {\n         ident: \"u8\",\n-        span: #CTXT bytes(0..0),\n+        span: #0 bytes(0..0),\n     },\n     Punct {\n         ch: '=',\n         spacing: Alone,\n-        span: #CTXT bytes(0..0),\n+        span: #0 bytes(0..0),\n     },\n     Literal {\n         kind: Integer,\n         symbol: \"0\",\n         suffix: None,\n-        span: #CTXT bytes(0..0),\n+        span: #0 bytes(0..0),\n     },\n     Punct {\n         ch: ';',\n         spacing: Alone,\n-        span: #CTXT bytes(0..0),\n+        span: #0 bytes(0..0),\n     },\n ]\n PRINT-DERIVE INPUT (DISPLAY): struct A { }\n PRINT-DERIVE INPUT (DEBUG): TokenStream [\n     Ident {\n         ident: \"struct\",\n-        span: #CTXT bytes(0..0),\n+        span: #0 bytes(0..0),\n     },\n     Ident {\n         ident: \"A\",\n-        span: #CTXT bytes(0..0),\n+        span: #0 bytes(0..0),\n     },\n     Group {\n         delimiter: Brace,\n         stream: TokenStream [],\n-        span: #CTXT bytes(0..0),\n+        span: #0 bytes(0..0),\n     },\n ]"}, {"sha": "c11cf42956f2175315d687768320efe7ed18ecaf", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.rs?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -1,13 +1,16 @@\n // aux-build:make-macro.rs\n // aux-build:meta-macro.rs\n // edition:2018\n-// compile-flags: -Z span-debug -Z macro-backtrace\n+// compile-flags: -Z span-debug -Z macro-backtrace -Z unpretty=expanded,hygiene\n // check-pass\n-// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n // normalize-stdout-test \"\\d+#\" -> \"0#\"\n //\n // We don't care about symbol ids, so we set them all to 0\n // in the stdout\n+\n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n extern crate meta_macro;\n \n macro_rules! produce_it {"}, {"sha": "dfd3e6a839a806cfccfa12c77b17126725b23c8e", "filename": "src/test/ui/proc-macro/meta-macro-hygiene.stdout", "status": "modified", "additions": 63, "deletions": 3, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro-hygiene.stdout?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -1,3 +1,63 @@\n-Def site: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#CTXT)\n-Input: TokenStream [Ident { ident: \"$crate\", span: $DIR/meta-macro-hygiene.rs:20:37: 20:43 (#CTXT) }, Punct { ch: ':', spacing: Joint, span: $DIR/meta-macro-hygiene.rs:20:43: 20:45 (#CTXT) }, Punct { ch: ':', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:20:43: 20:45 (#CTXT) }, Ident { ident: \"dummy\", span: $DIR/meta-macro-hygiene.rs:20:45: 20:50 (#CTXT) }, Punct { ch: '!', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:20:50: 20:51 (#CTXT) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/meta-macro-hygiene.rs:20:51: 20:53 (#CTXT) }]\n-Respanned: TokenStream [Ident { ident: \"$crate\", span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#CTXT) }, Punct { ch: ':', spacing: Joint, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#CTXT) }, Punct { ch: ':', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#CTXT) }, Ident { ident: \"dummy\", span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#CTXT) }, Punct { ch: '!', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#CTXT) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#CTXT) }]\n+Def site: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#4)\n+Input: TokenStream [Ident { ident: \"$crate\", span: $DIR/meta-macro-hygiene.rs:23:37: 23:43 (#3) }, Punct { ch: ':', spacing: Joint, span: $DIR/meta-macro-hygiene.rs:23:43: 23:45 (#3) }, Punct { ch: ':', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:23:43: 23:45 (#3) }, Ident { ident: \"dummy\", span: $DIR/meta-macro-hygiene.rs:23:45: 23:50 (#3) }, Punct { ch: '!', spacing: Alone, span: $DIR/meta-macro-hygiene.rs:23:50: 23:51 (#3) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/meta-macro-hygiene.rs:23:51: 23:53 (#3) }]\n+Respanned: TokenStream [Ident { ident: \"$crate\", span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#4) }, Punct { ch: ':', spacing: Joint, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#4) }, Punct { ch: ':', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#4) }, Ident { ident: \"dummy\", span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#4) }, Punct { ch: '!', spacing: Alone, span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#4) }, Group { delimiter: Parenthesis, stream: TokenStream [], span: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#4) }]\n+#![feature /* 0#0 */(prelude_import)]\n+// aux-build:make-macro.rs\n+// aux-build:meta-macro.rs\n+// edition:2018\n+// compile-flags: -Z span-debug -Z macro-backtrace -Z unpretty=expanded,hygiene\n+// check-pass\n+// normalize-stdout-test \"\\d+#\" -> \"0#\"\n+//\n+// We don't care about symbol ids, so we set them all to 0\n+// in the stdout\n+\n+#![no_std /* 0#0 */]\n+#[prelude_import /* 0#1 */]\n+use core /* 0#1 */::prelude /* 0#1 */::v1 /* 0#1 */::*;\n+#[macro_use /* 0#1 */]\n+extern crate core /* 0#1 */;\n+#[macro_use /* 0#1 */]\n+extern crate compiler_builtins /* 0#1 */;\n+// Don't load unnecessary hygiene information from std\n+extern crate std /* 0#0 */;\n+\n+extern crate meta_macro /* 0#0 */;\n+\n+macro_rules! produce_it\n+    /*\n+    0#0\n+    */ {\n+    () =>\n+    {\n+        meta_macro :: print_def_site ! ($ crate :: dummy ! ()) ;\n+        // `print_def_site!` will respan the `$crate` identifier\n+        // with `Span::def_site()`. This should cause it to resolve\n+        // relative to `meta_macro`, *not* `make_macro` (despite\n+        // the fact that that `print_def_site` is produced by\n+        // a `macro_rules!` macro in `make_macro`).\n+    }\n+}\n+\n+fn main /* 0#0 */() { }\n+\n+/*\n+Expansions:\n+0: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Root\n+1: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: AstPass(StdImports)\n+2: parent: ExpnId(0), call_site_ctxt: #0, def_site_ctxt: #0, kind: Macro(Bang, \"produce_it\")\n+3: parent: ExpnId(2), call_site_ctxt: #3, def_site_ctxt: #0, kind: Macro(Bang, \"meta_macro::print_def_site\")\n+4: parent: ExpnId(3), call_site_ctxt: #4, def_site_ctxt: #0, kind: Macro(Bang, \"$crate::dummy\")\n+\n+SyntaxContexts:\n+#0: parent: #0, outer_mark: (ExpnId(0), Opaque)\n+#1: parent: #0, outer_mark: (ExpnId(1), Opaque)\n+#2: parent: #0, outer_mark: (ExpnId(1), Transparent)\n+#3: parent: #0, outer_mark: (ExpnId(2), SemiTransparent)\n+#4: parent: #0, outer_mark: (ExpnId(3), Opaque)\n+#5: parent: #3, outer_mark: (ExpnId(3), Transparent)\n+#6: parent: #0, outer_mark: (ExpnId(3), SemiTransparent)\n+#7: parent: #0, outer_mark: (ExpnId(4), Opaque)\n+#8: parent: #4, outer_mark: (ExpnId(4), Transparent)\n+#9: parent: #4, outer_mark: (ExpnId(4), SemiTransparent)\n+*/"}, {"sha": "dbac90382d1d7477d421ca2824026cb4778e415f", "filename": "src/test/ui/proc-macro/meta-macro.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.rs?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -2,9 +2,11 @@\n // aux-build:meta-macro.rs\n // edition:2018\n // compile-flags: -Z span-debug\n-// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n // run-pass\n \n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n extern crate meta_macro;\n \n fn main() {"}, {"sha": "71aa565f4dd6d83198d93b3dd553455776f3244f", "filename": "src/test/ui/proc-macro/meta-macro.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fmeta-macro.stdout?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -1,3 +1,3 @@\n-Def site: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#CTXT)\n+Def site: $DIR/auxiliary/make-macro.rs:7:9: 16:10 (#3)\n Input: TokenStream []\n Respanned: TokenStream []"}, {"sha": "2fef0e5fad0748477396478eaccf9770f51a9d4a", "filename": "src/test/ui/proc-macro/nested-macro-rules.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.rs?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -2,9 +2,11 @@\n // aux-build:nested-macro-rules.rs\n // aux-build:test-macros.rs\n // compile-flags: -Z span-debug\n-// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n // edition:2018\n \n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n extern crate nested_macro_rules;\n extern crate test_macros;\n "}, {"sha": "7feea56c5d8601ea9363176b75d87fae5bb37c33", "filename": "src/test/ui/proc-macro/nested-macro-rules.stdout", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnested-macro-rules.stdout?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -5,10 +5,10 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         stream: TokenStream [\n             Ident {\n                 ident: \"FirstStruct\",\n-                span: $DIR/auxiliary/nested-macro-rules.rs:15:14: 15:25 (#CTXT),\n+                span: $DIR/auxiliary/nested-macro-rules.rs:15:14: 15:25 (#5),\n             },\n         ],\n-        span: $DIR/auxiliary/nested-macro-rules.rs:9:27: 9:32 (#CTXT),\n+        span: $DIR/auxiliary/nested-macro-rules.rs:9:27: 9:32 (#4),\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): SecondStruct\n@@ -18,9 +18,9 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         stream: TokenStream [\n             Ident {\n                 ident: \"SecondStruct\",\n-                span: $DIR/nested-macro-rules.rs:19:38: 19:50 (#CTXT),\n+                span: $DIR/nested-macro-rules.rs:21:38: 21:50 (#11),\n             },\n         ],\n-        span: $DIR/auxiliary/nested-macro-rules.rs:9:27: 9:32 (#CTXT),\n+        span: $DIR/auxiliary/nested-macro-rules.rs:9:27: 9:32 (#10),\n     },\n ]"}, {"sha": "db2a879f405040c77a9d4b2537e4b51b3a240d08", "filename": "src/test/ui/proc-macro/nodelim-groups.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.rs?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -1,11 +1,13 @@\n // run-pass\n // aux-build:test-macros.rs\n // compile-flags: -Z span-debug\n-// normalize-stdout-test \"#\\d+\" -> \"#CTXT\"\n // edition:2018\n //\n // Tests the pretty-printing behavior of inserting `NoDelim` groups\n \n+#![no_std] // Don't load unnecessary hygiene information from std\n+extern crate std;\n+\n extern crate test_macros;\n use test_macros::print_bang_consume;\n "}, {"sha": "2fcd41f6da05603341e44f0d434e40197d31e998", "filename": "src/test/ui/proc-macro/nodelim-groups.stdout", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fnodelim-groups.stdout?ref=db6b3c1ce4004b7834cbeb6d6b5feac74f7cd4c0", "patch": "@@ -4,7 +4,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         kind: Str,\n         symbol: \"hi\",\n         suffix: None,\n-        span: $DIR/nodelim-groups.rs:14:42: 14:46 (#CTXT),\n+        span: $DIR/nodelim-groups.rs:16:42: 16:46 (#3),\n     },\n     Group {\n         delimiter: None,\n@@ -13,12 +13,12 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n                 kind: Integer,\n                 symbol: \"1\",\n                 suffix: None,\n-                span: $DIR/nodelim-groups.rs:18:16: 18:17 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:20:16: 20:17 (#0),\n             },\n             Punct {\n                 ch: '+',\n                 spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:18:18: 18:19 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:20:18: 20:19 (#0),\n             },\n             Group {\n                 delimiter: Parenthesis,\n@@ -27,24 +27,24 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n                         kind: Integer,\n                         symbol: \"25\",\n                         suffix: None,\n-                        span: $DIR/nodelim-groups.rs:18:21: 18:23 (#CTXT),\n+                        span: $DIR/nodelim-groups.rs:20:21: 20:23 (#0),\n                     },\n                 ],\n-                span: $DIR/nodelim-groups.rs:18:20: 18:24 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:20:20: 20:24 (#0),\n             },\n             Punct {\n                 ch: '+',\n                 spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:18:25: 18:26 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:20:25: 20:26 (#0),\n             },\n             Literal {\n                 kind: Integer,\n                 symbol: \"1\",\n                 suffix: None,\n-                span: $DIR/nodelim-groups.rs:18:27: 18:28 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:20:27: 20:28 (#0),\n             },\n         ],\n-        span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n+        span: $DIR/nodelim-groups.rs:16:47: 16:51 (#3),\n     },\n     Group {\n         delimiter: Parenthesis,\n@@ -53,21 +53,21 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n                 kind: Integer,\n                 symbol: \"1\",\n                 suffix: None,\n-                span: $DIR/nodelim-groups.rs:14:53: 14:54 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:16:53: 16:54 (#3),\n             },\n             Punct {\n                 ch: '+',\n                 spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:14:55: 14:56 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:16:55: 16:56 (#3),\n             },\n             Literal {\n                 kind: Integer,\n                 symbol: \"1\",\n                 suffix: None,\n-                span: $DIR/nodelim-groups.rs:14:57: 14:58 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:16:57: 16:58 (#3),\n             },\n         ],\n-        span: $DIR/nodelim-groups.rs:14:52: 14:59 (#CTXT),\n+        span: $DIR/nodelim-groups.rs:16:52: 16:59 (#3),\n     },\n ]\n PRINT-BANG INPUT (DISPLAY): \"hi\" \"hello\".len() + \"world\".len() (1 + 1)\n@@ -77,7 +77,7 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n         kind: Str,\n         symbol: \"hi\",\n         suffix: None,\n-        span: $DIR/nodelim-groups.rs:14:42: 14:46 (#CTXT),\n+        span: $DIR/nodelim-groups.rs:16:42: 16:46 (#8),\n     },\n     Group {\n         delimiter: None,\n@@ -86,49 +86,49 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n                 kind: Str,\n                 symbol: \"hello\",\n                 suffix: None,\n-                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n             },\n             Punct {\n                 ch: '.',\n                 spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n             },\n             Ident {\n                 ident: \"len\",\n-                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [],\n-                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n             },\n             Punct {\n                 ch: '+',\n                 spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n             },\n             Literal {\n                 kind: Str,\n                 symbol: \"world\",\n                 suffix: None,\n-                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n             },\n             Punct {\n                 ch: '.',\n                 spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n             },\n             Ident {\n                 ident: \"len\",\n-                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n             },\n             Group {\n                 delimiter: Parenthesis,\n                 stream: TokenStream [],\n-                span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n             },\n         ],\n-        span: $DIR/nodelim-groups.rs:14:47: 14:51 (#CTXT),\n+        span: $DIR/nodelim-groups.rs:16:47: 16:51 (#8),\n     },\n     Group {\n         delimiter: Parenthesis,\n@@ -137,20 +137,20 @@ PRINT-BANG INPUT (DEBUG): TokenStream [\n                 kind: Integer,\n                 symbol: \"1\",\n                 suffix: None,\n-                span: $DIR/nodelim-groups.rs:14:53: 14:54 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:16:53: 16:54 (#8),\n             },\n             Punct {\n                 ch: '+',\n                 spacing: Alone,\n-                span: $DIR/nodelim-groups.rs:14:55: 14:56 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:16:55: 16:56 (#8),\n             },\n             Literal {\n                 kind: Integer,\n                 symbol: \"1\",\n                 suffix: None,\n-                span: $DIR/nodelim-groups.rs:14:57: 14:58 (#CTXT),\n+                span: $DIR/nodelim-groups.rs:16:57: 16:58 (#8),\n             },\n         ],\n-        span: $DIR/nodelim-groups.rs:14:52: 14:59 (#CTXT),\n+        span: $DIR/nodelim-groups.rs:16:52: 16:59 (#8),\n     },\n ]"}]}