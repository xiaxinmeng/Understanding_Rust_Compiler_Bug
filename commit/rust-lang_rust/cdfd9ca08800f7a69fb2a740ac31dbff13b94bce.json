{"sha": "cdfd9ca08800f7a69fb2a740ac31dbff13b94bce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkZmQ5Y2EwODgwMGY3YTY5ZmIyYTc0MGFjMzFkYmZmMTNiOTRiY2U=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-06-06T22:31:57Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2018-06-07T10:25:05Z"}, "message": "Simplify `process_obligation`.\n\n`process_predicates` returns a\n`Result<Option<Vec<PredicateObligation>>>`. `process_obligation` calls\nit and then fiddles with the output (using `map`, `map`, `into_iter`,\n`collect`) to produce a a\n`Result<Option<Vec<PendingPredicateObligation>>>`.\n\nThis function is sufficiently hot that the fiddling is expensive. It's\nmuch better for `process_predicate` to directly return a\n`Result<Option<Vec<PendingPredicateObligation>>>` because `Ok(None)`\naccounts for ~90% of the results, and `Ok(vec![])` accounts for another\n~5%.", "tree": {"sha": "0d1138c259146a95665519c08e346037a619d775", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d1138c259146a95665519c08e346037a619d775"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cdfd9ca08800f7a69fb2a740ac31dbff13b94bce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cdfd9ca08800f7a69fb2a740ac31dbff13b94bce", "html_url": "https://github.com/rust-lang/rust/commit/cdfd9ca08800f7a69fb2a740ac31dbff13b94bce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cdfd9ca08800f7a69fb2a740ac31dbff13b94bce/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c131bdcaff68d35f96e954baac4340206779335f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c131bdcaff68d35f96e954baac4340206779335f", "html_url": "https://github.com/rust-lang/rust/commit/c131bdcaff68d35f96e954baac4340206779335f"}], "stats": {"total": 21, "additions": 12, "deletions": 9}, "files": [{"sha": "b8ed9da8fce90f8f7878b01e9a2bd07d47e2bc62", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/cdfd9ca08800f7a69fb2a740ac31dbff13b94bce/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cdfd9ca08800f7a69fb2a740ac31dbff13b94bce/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=cdfd9ca08800f7a69fb2a740ac31dbff13b94bce", "patch": "@@ -251,6 +251,13 @@ struct FulfillProcessor<'a, 'b: 'a, 'gcx: 'tcx, 'tcx: 'b> {\n     register_region_obligations: bool\n }\n \n+fn mk_pending(os: Vec<PredicateObligation<'tcx>>) -> Vec<PendingPredicateObligation<'tcx>> {\n+    os.into_iter().map(|o| PendingPredicateObligation {\n+        obligation: o,\n+        stalled_on: vec![]\n+    }).collect()\n+}\n+\n impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx, 'tcx> {\n     type Obligation = PendingPredicateObligation<'tcx>;\n     type Error = FulfillmentErrorCode<'tcx>;\n@@ -260,10 +267,6 @@ impl<'a, 'b, 'gcx, 'tcx> ObligationProcessor for FulfillProcessor<'a, 'b, 'gcx,\n                           -> Result<Option<Vec<Self::Obligation>>, Self::Error>\n     {\n         process_predicate(self.selcx, obligation, self.register_region_obligations)\n-            .map(|os| os.map(|os| os.into_iter().map(|o| PendingPredicateObligation {\n-                obligation: o,\n-                stalled_on: vec![]\n-            }).collect()))\n     }\n \n     fn process_backedge<'c, I>(&mut self, cycle: I,\n@@ -300,7 +303,7 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n     selcx: &mut SelectionContext<'a, 'gcx, 'tcx>,\n     pending_obligation: &mut PendingPredicateObligation<'tcx>,\n     register_region_obligations: bool)\n-    -> Result<Option<Vec<PredicateObligation<'tcx>>>,\n+    -> Result<Option<Vec<PendingPredicateObligation<'tcx>>>,\n               FulfillmentErrorCode<'tcx>>\n {\n     // if we were stalled on some unresolved variables, first check\n@@ -343,7 +346,7 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n                 Ok(Some(vtable)) => {\n                     debug!(\"selecting trait `{:?}` at depth {} yielded Ok(Some)\",\n                            data, obligation.recursion_depth);\n-                    Ok(Some(vtable.nested_obligations()))\n+                    Ok(Some(mk_pending(vtable.nested_obligations())))\n                 }\n                 Ok(None) => {\n                     debug!(\"selecting trait `{:?}` at depth {} yielded Ok(None)\",\n@@ -444,7 +447,7 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n                         trait_ref_type_vars(selcx, data.to_poly_trait_ref(tcx));\n                     Ok(None)\n                 }\n-                Ok(v) => Ok(v),\n+                Ok(Some(os)) => Ok(Some(mk_pending(os))),\n                 Err(e) => Err(CodeProjectionError(e))\n             }\n         }\n@@ -481,7 +484,7 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n                     pending_obligation.stalled_on = vec![ty];\n                     Ok(None)\n                 }\n-                s => Ok(s)\n+                Some(os) => Ok(Some(mk_pending(os)))\n             }\n         }\n \n@@ -496,7 +499,7 @@ fn process_predicate<'a, 'gcx, 'tcx>(\n                     Ok(None)\n                 }\n                 Some(Ok(ok)) => {\n-                    Ok(Some(ok.obligations))\n+                    Ok(Some(mk_pending(ok.obligations)))\n                 }\n                 Some(Err(err)) => {\n                     let expected_found = ExpectedFound::new(subtype.skip_binder().a_is_expected,"}]}