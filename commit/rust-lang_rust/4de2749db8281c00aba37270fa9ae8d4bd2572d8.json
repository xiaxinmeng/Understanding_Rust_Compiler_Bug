{"sha": "4de2749db8281c00aba37270fa9ae8d4bd2572d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkZTI3NDlkYjgyODFjMDBhYmEzNzI3MGZhOWFlOGQ0YmQyNTcyZDg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-19T23:28:11Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-19T23:28:46Z"}, "message": "Explain the purpose of `ast::make` module more clearly", "tree": {"sha": "1ec6bea678f9c00b97d4f6dd3b45e88bd1b87d05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ec6bea678f9c00b97d4f6dd3b45e88bd1b87d05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4de2749db8281c00aba37270fa9ae8d4bd2572d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4de2749db8281c00aba37270fa9ae8d4bd2572d8", "html_url": "https://github.com/rust-lang/rust/commit/4de2749db8281c00aba37270fa9ae8d4bd2572d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4de2749db8281c00aba37270fa9ae8d4bd2572d8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "28f6b5b8493024b87f53ea9be4d517442588b7e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/28f6b5b8493024b87f53ea9be4d517442588b7e5", "html_url": "https://github.com/rust-lang/rust/commit/28f6b5b8493024b87f53ea9be4d517442588b7e5"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "b379b55a83fe7095c1a37605bbf63bad0bc4eac6", "filename": "crates/ra_assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4de2749db8281c00aba37270fa9ae8d4bd2572d8/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de2749db8281c00aba37270fa9ae8d4bd2572d8/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=4de2749db8281c00aba37270fa9ae8d4bd2572d8", "patch": "@@ -51,7 +51,7 @@ pub(crate) fn replace_unwrap_with_match(acc: &mut Assists, ctx: &AssistContext)\n         let bind_path = make::path_unqualified(make::path_segment(make::name_ref(\"a\")));\n         let ok_arm = make::match_arm(iter::once(ok_tuple), make::expr_path(bind_path));\n \n-        let unreachable_call = make::unreachable_macro_call().into();\n+        let unreachable_call = make::expr_unreachable();\n         let err_arm = make::match_arm(iter::once(make::placeholder_pat().into()), unreachable_call);\n \n         let match_arm_list = make::match_arm_list(vec![ok_arm, err_arm]);"}, {"sha": "2db017038887365105304fd36701e76e1869d11b", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4de2749db8281c00aba37270fa9ae8d4bd2572d8/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4de2749db8281c00aba37270fa9ae8d4bd2572d8/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=4de2749db8281c00aba37270fa9ae8d4bd2572d8", "patch": "@@ -1,5 +1,9 @@\n //! This module contains free-standing functions for creating AST fragments out\n //! of smaller pieces.\n+//!\n+//! Note that all functions here intended to be stupid constructors, which just\n+//! assemble a finish node from immediate children. If you want to do something\n+//! smarter than that, it probably doesn't belong in this module.\n use itertools::Itertools;\n use stdx::format_to;\n \n@@ -95,6 +99,9 @@ pub fn expr_empty_block() -> ast::Expr {\n pub fn expr_unimplemented() -> ast::Expr {\n     expr_from_text(\"unimplemented!()\")\n }\n+pub fn expr_unreachable() -> ast::Expr {\n+    expr_from_text(\"unreachable!()\")\n+}\n pub fn expr_todo() -> ast::Expr {\n     expr_from_text(\"todo!()\")\n }\n@@ -264,10 +271,6 @@ pub fn token(kind: SyntaxKind) -> SyntaxToken {\n         .unwrap_or_else(|| panic!(\"unhandled token: {:?}\", kind))\n }\n \n-pub fn unreachable_macro_call() -> ast::MacroCall {\n-    ast_from_text(&format!(\"unreachable!()\"))\n-}\n-\n pub fn param(name: String, ty: String) -> ast::Param {\n     ast_from_text(&format!(\"fn f({}: {}) {{ }}\", name, ty))\n }"}]}