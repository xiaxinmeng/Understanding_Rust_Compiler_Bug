{"sha": "58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819", "node_id": "C_kwDOAAsO6NoAKDU4ZTE4ZGRmODZlNjdhMTIxMGE2MGFiNGEwYWQ1ZTFhZGZiYmM4MTk", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-05-25T18:39:10Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-05-29T18:26:44Z"}, "message": "Switch doc::{Std, Rustc} to `crate_or_deps`\n\nPreviously they were using `all_krates` and various hacks to determine\nwhich crates to document. Switch them to `crate_or_deps` so `ShouldRun`\ntells them which crate to document instead of having to guess.\n\nThis also makes a few other refactors:\n- Remove the now unused `all_krates`; new code should only use\n  `crate_or_deps`.\n- Add tests for documenting Std\n- Remove the unnecessary `run_cargo_rustdoc_for` closure so that we only\n  run cargo once\n- Give a more helpful error message when documenting a no_std target\n- Use `builder.msg` in the Steps instead of `builder.info`", "tree": {"sha": "42c48cb6d8290ba8f4a6b304660480926208c8b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42c48cb6d8290ba8f4a6b304660480926208c8b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819", "html_url": "https://github.com/rust-lang/rust/commit/58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb4b7f631980e6f78a486be46ec653ad322ce12e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb4b7f631980e6f78a486be46ec653ad322ce12e", "html_url": "https://github.com/rust-lang/rust/commit/cb4b7f631980e6f78a486be46ec653ad322ce12e"}], "stats": {"total": 224, "additions": 100, "deletions": 124}, "files": [{"sha": "b16e34c0b935c2f71ec43f5e96fc3be8bc0db9ee", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819", "patch": "@@ -430,25 +430,6 @@ impl<'a> ShouldRun<'a> {\n         }\n     }\n \n-    /// Indicates it should run if the command-line selects the given crate or\n-    /// any of its (local) dependencies.\n-    ///\n-    /// Compared to `krate`, this treats the dependencies as aliases for the\n-    /// same job. Generally it is preferred to use `krate`, and treat each\n-    /// individual path separately. For example `./x.py test src/liballoc`\n-    /// (which uses `krate`) will test just `liballoc`. However, `./x.py check\n-    /// src/liballoc` (which uses `all_krates`) will check all of `libtest`.\n-    /// `all_krates` should probably be removed at some point.\n-    pub fn all_krates(mut self, name: &str) -> Self {\n-        let mut set = BTreeSet::new();\n-        for krate in self.builder.in_tree_crates(name, None) {\n-            let path = krate.local_path(self.builder);\n-            set.insert(TaskPath { path, kind: Some(self.kind) });\n-        }\n-        self.paths.insert(PathSet::Set(set));\n-        self\n-    }\n-\n     /// Indicates it should run if the command-line selects the given crate or\n     /// any of its (local) dependencies.\n     ///"}, {"sha": "d76b830b0e530d62477b20d797101b0578366d0d", "filename": "src/bootstrap/builder/tests.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819/src%2Fbootstrap%2Fbuilder%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder%2Ftests.rs?ref=58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819", "patch": "@@ -1,5 +1,6 @@\n use super::*;\n use crate::config::{Config, DryRun, TargetSelection};\n+use crate::doc::DocumentationFormat;\n use std::thread;\n \n fn configure(cmd: &str, host: &[&str], target: &[&str]) -> Config {\n@@ -66,6 +67,16 @@ macro_rules! std {\n     };\n }\n \n+macro_rules! doc_std {\n+    ($host:ident => $target:ident, stage = $stage:literal) => {\n+        doc::Std::new(\n+            $stage,\n+            TargetSelection::from_user(stringify!($target)),\n+            DocumentationFormat::HTML,\n+        )\n+    };\n+}\n+\n macro_rules! rustc {\n     ($host:ident => $target:ident, stage = $stage:literal) => {\n         compile::Rustc::new(\n@@ -144,6 +155,9 @@ fn alias_and_path_for_library() {\n         first(cache.all::<compile::Std>()),\n         &[std!(A => A, stage = 0), std!(A => A, stage = 1)]\n     );\n+\n+    let mut cache = run_build(&[\"library\".into(), \"core\".into()], configure(\"doc\", &[\"A\"], &[\"A\"]));\n+    assert_eq!(first(cache.all::<doc::Std>()), &[doc_std!(A => A, stage = 0)]);\n }\n \n #[test]"}, {"sha": "46fc5b80e99d48f12aa1b80663b6a8d49e2c415f", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819", "patch": "@@ -106,11 +106,7 @@ impl Step for JsonDocs {\n     /// Builds the `rust-docs-json` installer component.\n     fn run(self, builder: &Builder<'_>) -> Option<GeneratedTarball> {\n         let host = self.host;\n-        builder.ensure(crate::doc::Std {\n-            stage: builder.top_stage,\n-            target: host,\n-            format: DocumentationFormat::JSON,\n-        });\n+        builder.ensure(crate::doc::Std::new(builder.top_stage, host, DocumentationFormat::JSON));\n \n         let dest = \"share/doc/rust/json\";\n "}, {"sha": "357cd778b6c39cef9929314bc98d275d51a31b06", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 79, "deletions": 94, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819", "patch": "@@ -16,6 +16,7 @@ use crate::builder::crate_description;\n use crate::builder::{Builder, Compiler, Kind, RunConfig, ShouldRun, Step};\n use crate::cache::{Interned, INTERNER};\n use crate::compile;\n+use crate::compile::make_run_crates;\n use crate::config::{Config, TargetSelection};\n use crate::tool::{self, prepare_tool_cargo, SourceType, Tool};\n use crate::util::{symlink_dir, t, up_to_date};\n@@ -87,15 +88,6 @@ book!(\n     StyleGuide, \"src/doc/style-guide\", \"style-guide\";\n );\n \n-// \"library/std\" -> [\"library\", \"std\"]\n-//\n-// Used for deciding whether a particular step is one requested by the user on\n-// the `x.py doc` command line, which determines whether `--open` will open that\n-// page.\n-pub(crate) fn components_simplified(path: &PathBuf) -> Vec<&str> {\n-    path.iter().map(|component| component.to_str().unwrap_or(\"???\")).collect()\n-}\n-\n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct UnstableBook {\n     target: TargetSelection,\n@@ -425,11 +417,18 @@ impl Step for SharedAssets {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord)]\n pub struct Std {\n     pub stage: u32,\n     pub target: TargetSelection,\n     pub format: DocumentationFormat,\n+    crates: Interned<Vec<String>>,\n+}\n+\n+impl Std {\n+    pub(crate) fn new(stage: u32, target: TargetSelection, format: DocumentationFormat) -> Self {\n+        Std { stage, target, format, crates: INTERNER.intern_list(vec![]) }\n+    }\n }\n \n impl Step for Std {\n@@ -438,7 +437,7 @@ impl Step for Std {\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n         let builder = run.builder;\n-        run.all_krates(\"sysroot\").path(\"library\").default_condition(builder.config.docs)\n+        run.crate_or_deps(\"sysroot\").path(\"library\").default_condition(builder.config.docs)\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n@@ -450,14 +449,15 @@ impl Step for Std {\n             } else {\n                 DocumentationFormat::HTML\n             },\n+            crates: make_run_crates(&run, \"library\"),\n         });\n     }\n \n     /// Compile all standard library documentation.\n     ///\n     /// This will generate all documentation for the standard library and its\n     /// dependencies. This is largely just a wrapper around `cargo doc`.\n-    fn run(self, builder: &Builder<'_>) {\n+    fn run(mut self, builder: &Builder<'_>) {\n         let stage = self.stage;\n         let target = self.target;\n         let out = match self.format {\n@@ -487,25 +487,7 @@ impl Step for Std {\n             extra_args.push(OsStr::new(\"--disable-minification\"));\n         }\n \n-        let requested_crates = builder\n-            .paths\n-            .iter()\n-            .map(components_simplified)\n-            .filter_map(|path| {\n-                if path.len() >= 2 && path.get(0) == Some(&\"library\") {\n-                    // single crate\n-                    Some(path[1].to_owned())\n-                } else if !path.is_empty() {\n-                    // ??\n-                    Some(path[0].to_owned())\n-                } else {\n-                    // all library crates\n-                    None\n-                }\n-            })\n-            .collect::<Vec<_>>();\n-\n-        doc_std(builder, self.format, stage, target, &out, &extra_args, &requested_crates);\n+        doc_std(builder, self.format, stage, target, &out, &extra_args, &self.crates);\n \n         // Don't open if the format is json\n         if let DocumentationFormat::JSON = self.format {\n@@ -514,7 +496,11 @@ impl Step for Std {\n \n         // Look for library/std, library/core etc in the `x.py doc` arguments and\n         // open the corresponding rendered docs.\n-        for requested_crate in requested_crates {\n+        if self.crates.is_empty() {\n+            self.crates = INTERNER.intern_list(vec![\"library\".to_owned()]);\n+        };\n+\n+        for requested_crate in &*self.crates {\n             if requested_crate == \"library\" {\n                 // For `x.py doc library --open`, open `std` by default.\n                 let index = out.join(\"std\").join(\"index.html\");\n@@ -538,7 +524,7 @@ impl Step for Std {\n /// or remote link.\n const STD_PUBLIC_CRATES: [&str; 5] = [\"core\", \"alloc\", \"std\", \"proc_macro\", \"test\"];\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n+#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq, PartialOrd, Ord)]\n pub enum DocumentationFormat {\n     HTML,\n     JSON,\n@@ -566,21 +552,19 @@ fn doc_std(\n     extra_args: &[&OsStr],\n     requested_crates: &[String],\n ) {\n-    builder.info(&format!(\n-        \"Documenting{} stage{} library ({}) in {} format\",\n-        crate_description(requested_crates),\n-        stage,\n-        target,\n-        format.as_str()\n-    ));\n     if builder.no_std(target) == Some(true) {\n         panic!(\n             \"building std documentation for no_std target {target} is not supported\\n\\\n-             Set `docs = false` in the config to disable documentation.\"\n+             Set `docs = false` in the config to disable documentation, or pass `--exclude doc::library`.\"\n         );\n     }\n+\n     let compiler = builder.compiler(stage, builder.config.build);\n \n+    let description =\n+        format!(\"library{} in {} format\", crate_description(&requested_crates), format.as_str());\n+    let _guard = builder.msg(Kind::Doc, stage, &description, compiler.host, target);\n+\n     let target_doc_dir_name = if format == DocumentationFormat::JSON { \"json-doc\" } else { \"doc\" };\n     let target_dir =\n         builder.stage_out(compiler, Mode::Std).join(target.triple).join(target_doc_dir_name);\n@@ -590,42 +574,56 @@ fn doc_std(\n     // as a function parameter.\n     let out_dir = target_dir.join(target.triple).join(\"doc\");\n \n-    let run_cargo_rustdoc_for = |package: &str| {\n-        let mut cargo = builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"rustdoc\");\n-        compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n-        cargo\n-            .arg(\"--target-dir\")\n-            .arg(&*target_dir.to_string_lossy())\n-            .arg(\"-p\")\n-            .arg(package)\n-            .arg(\"-Zskip-rustdoc-fingerprint\")\n-            .arg(\"--\")\n-            .arg(\"-Z\")\n-            .arg(\"unstable-options\")\n-            .arg(\"--resource-suffix\")\n-            .arg(&builder.version)\n-            .args(extra_args);\n-        if builder.config.library_docs_private_items {\n-            cargo.arg(\"--document-private-items\").arg(\"--document-hidden-items\");\n-        }\n-        builder.run(&mut cargo.into());\n-    };\n+    let mut cargo = builder.cargo(compiler, Mode::Std, SourceType::InTree, target, \"rustdoc\");\n+    compile::std_cargo(builder, target, compiler.stage, &mut cargo);\n+    cargo.arg(\"--target-dir\").arg(&*target_dir.to_string_lossy()).arg(\"-Zskip-rustdoc-fingerprint\");\n \n-    for krate in STD_PUBLIC_CRATES {\n-        run_cargo_rustdoc_for(krate);\n-        if requested_crates.iter().any(|p| p == krate) {\n-            // No need to document more of the libraries if we have the one we want.\n-            break;\n-        }\n+    for krate in requested_crates {\n+        cargo.arg(\"-p\").arg(krate);\n     }\n \n+    cargo\n+        .arg(\"--\")\n+        .arg(\"-Z\")\n+        .arg(\"unstable-options\")\n+        .arg(\"--resource-suffix\")\n+        .arg(&builder.version)\n+        .args(extra_args);\n+\n+    if builder.config.library_docs_private_items {\n+        cargo.arg(\"--document-private-items\").arg(\"--document-hidden-items\");\n+    }\n+\n+    builder.run(&mut cargo.into());\n     builder.cp_r(&out_dir, &out);\n }\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct Rustc {\n     pub stage: u32,\n     pub target: TargetSelection,\n+    crates: Interned<Vec<String>>,\n+}\n+\n+impl Rustc {\n+    pub(crate) fn new(stage: u32, target: TargetSelection, builder: &Builder<'_>) -> Self {\n+        // Find dependencies for top level crates.\n+        let root_crates = vec![\n+            INTERNER.intern_str(\"rustc_driver\"),\n+            INTERNER.intern_str(\"rustc_codegen_llvm\"),\n+            INTERNER.intern_str(\"rustc_codegen_ssa\"),\n+        ];\n+        let crates: Vec<_> = root_crates\n+            .iter()\n+            .flat_map(|krate| {\n+                builder\n+                    .in_tree_crates(krate, Some(target))\n+                    .into_iter()\n+                    .map(|krate| krate.name.to_string())\n+            })\n+            .collect();\n+        Self { stage, target, crates: INTERNER.intern_list(crates) }\n+    }\n }\n \n impl Step for Rustc {\n@@ -641,7 +639,11 @@ impl Step for Rustc {\n     }\n \n     fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Rustc { stage: run.builder.top_stage, target: run.target });\n+        run.builder.ensure(Rustc {\n+            stage: run.builder.top_stage,\n+            target: run.target,\n+            crates: make_run_crates(&run, \"compiler\"),\n+        });\n     }\n \n     /// Generates compiler documentation.\n@@ -654,15 +656,6 @@ impl Step for Rustc {\n         let stage = self.stage;\n         let target = self.target;\n \n-        let paths = builder\n-            .paths\n-            .iter()\n-            .filter(|path| {\n-                let components = components_simplified(path);\n-                components.len() >= 2 && components[0] == \"compiler\"\n-            })\n-            .collect::<Vec<_>>();\n-\n         // This is the intended out directory for compiler documentation.\n         let out = builder.compiler_doc_out(target);\n         t!(fs::create_dir_all(&out));\n@@ -672,7 +665,13 @@ impl Step for Rustc {\n         let compiler = builder.compiler(stage, builder.config.build);\n         builder.ensure(compile::Std::new(compiler, builder.config.build));\n \n-        builder.info(&format!(\"Documenting stage{} compiler ({})\", stage, target));\n+        let _guard = builder.msg(\n+            Kind::Doc,\n+            stage,\n+            &format!(\"compiler{}\", crate_description(&self.crates)),\n+            compiler.host,\n+            target,\n+        );\n \n         // This uses a shared directory so that librustdoc documentation gets\n         // correctly built and merged with the rustc documentation. This is\n@@ -710,22 +709,8 @@ impl Step for Rustc {\n         cargo.rustdocflag(\"--extern-html-root-url\");\n         cargo.rustdocflag(\"ena=https://docs.rs/ena/latest/\");\n \n-        let root_crates = if paths.is_empty() {\n-            vec![\n-                INTERNER.intern_str(\"rustc_driver\"),\n-                INTERNER.intern_str(\"rustc_codegen_llvm\"),\n-                INTERNER.intern_str(\"rustc_codegen_ssa\"),\n-            ]\n-        } else {\n-            paths.into_iter().map(|p| builder.crate_paths[p]).collect()\n-        };\n-        // Find dependencies for top level crates.\n-        let compiler_crates = root_crates.iter().flat_map(|krate| {\n-            builder.in_tree_crates(krate, Some(target)).into_iter().map(|krate| krate.name)\n-        });\n-\n         let mut to_open = None;\n-        for krate in compiler_crates {\n+        for krate in &*self.crates {\n             // Create all crate output directories first to make sure rustdoc uses\n             // relative links.\n             // FIXME: Cargo should probably do this itself.\n@@ -785,7 +770,7 @@ macro_rules! tool_doc {\n \n                 if true $(&& $rustc_tool)? {\n                     // Build rustc docs so that we generate relative links.\n-                    builder.ensure(Rustc { stage, target });\n+                    builder.ensure(Rustc::new(stage, target, builder));\n \n                     // Rustdoc needs the rustc sysroot available to build.\n                     // FIXME: is there a way to only ensure `check::Rustc` here? Last time I tried it failed"}, {"sha": "960abb31b2016693e9aa00cef431655406d50687", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=58e18ddf86e67a1210a60ab4a0ad5e1adfbbc819", "patch": "@@ -220,7 +220,7 @@ impl Step for HtmlCheck {\n         }\n         // Ensure that a few different kinds of documentation are available.\n         builder.default_doc(&[]);\n-        builder.ensure(crate::doc::Rustc { target: self.target, stage: builder.top_stage });\n+        builder.ensure(crate::doc::Rustc::new(builder.top_stage, self.target, builder));\n \n         try_run(builder, builder.tool_cmd(Tool::HtmlChecker).arg(builder.doc_out(self.target)));\n     }\n@@ -886,11 +886,11 @@ impl Step for RustdocJSStd {\n                     command.arg(\"--test-file\").arg(path);\n                 }\n             }\n-            builder.ensure(crate::doc::Std {\n-                target: self.target,\n-                stage: builder.top_stage,\n-                format: DocumentationFormat::HTML,\n-            });\n+            builder.ensure(crate::doc::Std::new(\n+                builder.top_stage,\n+                self.target,\n+                DocumentationFormat::HTML,\n+            ));\n             builder.run(&mut command);\n         } else {\n             builder.info(\"No nodejs found, skipping \\\"tests/rustdoc-js-std\\\" tests\");"}]}