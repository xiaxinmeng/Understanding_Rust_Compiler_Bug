{"sha": "489dd2e504446a483ad7bb1241aefe3d9bdc3dab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4OWRkMmU1MDQ0NDZhNDgzYWQ3YmIxMjQxYWVmZTNkOWJkYzNkYWI=", "commit": {"author": {"name": "Devin R", "email": "devin.ragotzy@gmail.com", "date": "2020-04-20T19:08:44Z"}, "committer": {"name": "Devin R", "email": "devin.ragotzy@gmail.com", "date": "2020-04-20T19:08:44Z"}, "message": "factor ifs into function, add differing mutex test", "tree": {"sha": "20f6d365664f0eca3d949f0a720a77379f01ad08", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20f6d365664f0eca3d949f0a720a77379f01ad08"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/489dd2e504446a483ad7bb1241aefe3d9bdc3dab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/489dd2e504446a483ad7bb1241aefe3d9bdc3dab", "html_url": "https://github.com/rust-lang/rust/commit/489dd2e504446a483ad7bb1241aefe3d9bdc3dab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/489dd2e504446a483ad7bb1241aefe3d9bdc3dab/comments", "author": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DevinR528", "id": 29749111, "node_id": "MDQ6VXNlcjI5NzQ5MTEx", "avatar_url": "https://avatars.githubusercontent.com/u/29749111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DevinR528", "html_url": "https://github.com/DevinR528", "followers_url": "https://api.github.com/users/DevinR528/followers", "following_url": "https://api.github.com/users/DevinR528/following{/other_user}", "gists_url": "https://api.github.com/users/DevinR528/gists{/gist_id}", "starred_url": "https://api.github.com/users/DevinR528/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DevinR528/subscriptions", "organizations_url": "https://api.github.com/users/DevinR528/orgs", "repos_url": "https://api.github.com/users/DevinR528/repos", "events_url": "https://api.github.com/users/DevinR528/events{/privacy}", "received_events_url": "https://api.github.com/users/DevinR528/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1b1a4c5ebcc2bcd665cee441332a2312ea9c512", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1b1a4c5ebcc2bcd665cee441332a2312ea9c512", "html_url": "https://github.com/rust-lang/rust/commit/d1b1a4c5ebcc2bcd665cee441332a2312ea9c512"}], "stats": {"total": 46, "additions": 34, "deletions": 12}, "files": [{"sha": "b2ece37fdb0a9c126f8f4617c4eca2dd1c150fbc", "filename": "clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/489dd2e504446a483ad7bb1241aefe3d9bdc3dab/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489dd2e504446a483ad7bb1241aefe3d9bdc3dab/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=489dd2e504446a483ad7bb1241aefe3d9bdc3dab", "patch": "@@ -93,12 +93,9 @@ impl<'tcx, 'l> Visitor<'tcx> for OppVisitor<'tcx, 'l> {\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path, _span, args) = &expr.kind;\n-            if path.ident.to_string() == \"lock\";\n-            let ty = self.cx.tables.expr_ty(&args[0]);\n-            if match_type(self.cx, ty, &paths::MUTEX);\n+            if let Some(mutex) = is_mutex_lock_call(self.cx, expr);\n             then {\n-                self.found_mutex = Some(&args[0]);\n+                self.found_mutex = Some(mutex);\n                 self.mutex_lock_called = true;\n                 return;\n             }\n@@ -123,12 +120,9 @@ impl<'tcx, 'l> Visitor<'tcx> for ArmVisitor<'tcx, 'l> {\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'tcx>) {\n         if_chain! {\n-            if let ExprKind::MethodCall(path, _span, args) = &expr.kind;\n-            if path.ident.to_string() == \"lock\";\n-            let ty = self.cx.tables.expr_ty(&args[0]);\n-            if match_type(self.cx, ty, &paths::MUTEX);\n+            if let Some(mutex) = is_mutex_lock_call(self.cx, expr);\n             then {\n-                self.found_mutex = Some(&args[0]);\n+                self.found_mutex = Some(mutex);\n                 self.mutex_lock_called = true;\n                 return;\n             }\n@@ -150,3 +144,17 @@ impl<'tcx, 'l> ArmVisitor<'tcx, 'l> {\n         }\n     }\n }\n+\n+fn is_mutex_lock_call<'a>(cx: &LateContext<'a, '_>, expr: &'a Expr<'_>) -> Option<&'a Expr<'a>> {\n+    if_chain! {\n+        if let ExprKind::MethodCall(path, _span, args) = &expr.kind;\n+        if path.ident.to_string() == \"lock\";\n+        let ty = cx.tables.expr_ty(&args[0]);\n+        if match_type(cx, ty, &paths::MUTEX);\n+        then {\n+            Some(&args[0])\n+        } else {\n+            None\n+        }\n+    }\n+}"}, {"sha": "9ad1315c17521c146f2d396ae38f5a9f7b1d8017", "filename": "doc/adding_lints.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/489dd2e504446a483ad7bb1241aefe3d9bdc3dab/doc%2Fadding_lints.md", "raw_url": "https://github.com/rust-lang/rust/raw/489dd2e504446a483ad7bb1241aefe3d9bdc3dab/doc%2Fadding_lints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fadding_lints.md?ref=489dd2e504446a483ad7bb1241aefe3d9bdc3dab", "patch": "@@ -101,8 +101,8 @@ Once we are satisfied with the output, we need to run\n Please note that, we should run `TESTNAME=foo_functions cargo uitest`\n every time before running `tests/ui/update-all-references.sh`.\n Running `TESTNAME=foo_functions cargo uitest` should pass then. When we commit\n-our lint, we need to commit the generated `.stderr` files, too. In general you\n-should only commit changed files by `tests/ui/update-all-references.sh` for the\n+our lint, we need to commit the generated `.stderr` files, too. In general, you\n+should only commit files changed by `tests/ui/update-all-references.sh` for the\n specific lint you are creating/editing.\n \n ## Rustfix tests"}, {"sha": "58feae422a3c121f3d89cc14278147037191a99a", "filename": "tests/ui/if_let_mutex.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/489dd2e504446a483ad7bb1241aefe3d9bdc3dab/tests%2Fui%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/489dd2e504446a483ad7bb1241aefe3d9bdc3dab/tests%2Fui%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fif_let_mutex.rs?ref=489dd2e504446a483ad7bb1241aefe3d9bdc3dab", "patch": "@@ -15,6 +15,8 @@ fn if_let() {\n     };\n }\n \n+// This is the most common case as the above case is pretty\n+// contrived.\n fn if_let_option() {\n     let m = Mutex::new(Some(0_u8));\n     if let Some(locked) = m.lock().unwrap().deref() {\n@@ -25,4 +27,16 @@ fn if_let_option() {\n     };\n }\n \n+// When mutexs are different don't warn\n+fn if_let_different_mutex() {\n+    let m = Mutex::new(Some(0_u8));\n+    let other = Mutex::new(None::<u8>);\n+    if let Some(locked) = m.lock().unwrap().deref() {\n+        do_stuff(locked);\n+    } else {\n+        let lock = other.lock().unwrap();\n+        do_stuff(lock);\n+    };\n+}\n+\n fn main() {}"}]}