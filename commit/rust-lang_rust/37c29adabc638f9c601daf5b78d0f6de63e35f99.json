{"sha": "37c29adabc638f9c601daf5b78d0f6de63e35f99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3YzI5YWRhYmM2MzhmOWM2MDFkYWY1Yjc4ZDBmNmRlNjNlMzVmOTk=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-05T16:59:53Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-08-06T20:37:20Z"}, "message": "allow complex expressions in assoc consts", "tree": {"sha": "7a1f4d8a1bc4f28d8d67842efbb35081d104dc84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a1f4d8a1bc4f28d8d67842efbb35081d104dc84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/37c29adabc638f9c601daf5b78d0f6de63e35f99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/37c29adabc638f9c601daf5b78d0f6de63e35f99", "html_url": "https://github.com/rust-lang/rust/commit/37c29adabc638f9c601daf5b78d0f6de63e35f99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/37c29adabc638f9c601daf5b78d0f6de63e35f99/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d54f571c10dbc7e6d8632698c5f08f77b4a7578", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d54f571c10dbc7e6d8632698c5f08f77b4a7578", "html_url": "https://github.com/rust-lang/rust/commit/0d54f571c10dbc7e6d8632698c5f08f77b4a7578"}], "stats": {"total": 70, "additions": 36, "deletions": 34}, "files": [{"sha": "b5fc69f9f310e6ffd97297c682592c4fc9e44ae1", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/37c29adabc638f9c601daf5b78d0f6de63e35f99/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c29adabc638f9c601daf5b78d0f6de63e35f99/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=37c29adabc638f9c601daf5b78d0f6de63e35f99", "patch": "@@ -948,10 +948,14 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                         // Only impose the restrictions of `ConstRibKind` for an\n                                         // actual constant expression in a provided default.\n                                         if let Some(expr) = default {\n-                                            this.with_constant_rib(\n-                                                expr.is_potential_trivial_const_param(),\n-                                                |this| this.visit_expr(expr),\n-                                            );\n+                                            // We allow arbitrary const expressions inside of associated consts,\n+                                            // even if they are potentially not const evaluatable.\n+                                            //\n+                                            // Type parameters can already be used and as associated consts are\n+                                            // not used as part of the type system, this is far less surprising.\n+                                            this.with_constant_rib(true, |this| {\n+                                                this.visit_expr(expr)\n+                                            });\n                                         }\n                                     }\n                                     AssocItemKind::Fn(_, _, generics, _) => {\n@@ -1225,7 +1229,7 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                 for item in impl_items {\n                                     use crate::ResolutionError::*;\n                                     match &item.kind {\n-                                        AssocItemKind::Const(_default, _ty, expr) => {\n+                                        AssocItemKind::Const(_default, _ty, _expr) => {\n                                             debug!(\"resolve_implementation AssocItemKind::Const\",);\n                                             // If this is a trait impl, ensure the const\n                                             // exists in trait\n@@ -1236,18 +1240,14 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                                                 |n, s| ConstNotMemberOfTrait(n, s),\n                                             );\n \n-                                            this.with_constant_rib(\n-                                                expr.as_ref().map_or(false, |e| {\n-                                                    e.is_potential_trivial_const_param()\n-                                                }),\n-                                                |this| {\n-                                                    visit::walk_assoc_item(\n-                                                        this,\n-                                                        item,\n-                                                        AssocCtxt::Impl,\n-                                                    )\n-                                                },\n-                                            );\n+                                            // We allow arbitrary const expressions inside of associated consts,\n+                                            // even if they are potentially not const evaluatable.\n+                                            //\n+                                            // Type parameters can already be used and as associated consts are\n+                                            // not used as part of the type system, this is far less surprising.\n+                                            this.with_constant_rib(true, |this| {\n+                                                visit::walk_assoc_item(this, item, AssocCtxt::Impl)\n+                                            });\n                                         }\n                                         AssocItemKind::Fn(_, _, generics, _) => {\n                                             // We also need a new scope for the impl item type parameters."}, {"sha": "fa75613d9ddc1d621394e259ee308dd9e6be4b53", "filename": "src/test/ui/const-generics/min_const_generics/assoc_const.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/37c29adabc638f9c601daf5b78d0f6de63e35f99/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fassoc_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c29adabc638f9c601daf5b78d0f6de63e35f99/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fassoc_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fassoc_const.rs?ref=37c29adabc638f9c601daf5b78d0f6de63e35f99", "patch": "@@ -0,0 +1,18 @@\n+// check-pass\n+#![feature(min_const_generics)]\n+\n+struct Foo<const N: usize>;\n+\n+impl<const N: usize> Foo<N> {\n+    const VALUE: usize = N * 2;\n+}\n+\n+trait Bar {\n+    const ASSOC: usize;\n+}\n+\n+impl<const N: usize> Bar for Foo<N> {\n+    const ASSOC: usize = N * 3;\n+}\n+\n+fn main() {}"}, {"sha": "f9cb0d2829d6ea84e8f5630cd12335710be16aaa", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/37c29adabc638f9c601daf5b78d0f6de63e35f99/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/37c29adabc638f9c601daf5b78d0f6de63e35f99/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.rs?ref=37c29adabc638f9c601daf5b78d0f6de63e35f99", "patch": "@@ -26,12 +26,4 @@ trait Foo {\n     const ASSOC: usize;\n }\n \n-impl<const N: usize> Foo for [u8; N] {\n-    const ASSOC: usize = N + 1;\n-    //~^ ERROR generic parameters must not be used inside of non trivial constant values\n-    // FIXME(min_const_generics): We probably have to allow this as we can\n-    // already allow referencing type parameters here on stable.\n-}\n-\n-\n fn main() {}"}, {"sha": "baed8d13f00f1f6d2c934df21f30799f4757ca06", "filename": "src/test/ui/const-generics/min_const_generics/complex-expression.stderr", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/37c29adabc638f9c601daf5b78d0f6de63e35f99/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/37c29adabc638f9c601daf5b78d0f6de63e35f99/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fmin_const_generics%2Fcomplex-expression.stderr?ref=37c29adabc638f9c601daf5b78d0f6de63e35f99", "patch": "@@ -30,13 +30,5 @@ LL |     let _ = [0; N + 1];\n    |\n    = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n \n-error: generic parameters must not be used inside of non trivial constant values\n-  --> $DIR/complex-expression.rs:30:26\n-   |\n-LL |     const ASSOC: usize = N + 1;\n-   |                          ^ non-trivial anonymous constants must not depend on the parameter `N`\n-   |\n-   = help: it is currently only allowed to use either `N` or `{ N }` as generic constants\n-\n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n "}]}