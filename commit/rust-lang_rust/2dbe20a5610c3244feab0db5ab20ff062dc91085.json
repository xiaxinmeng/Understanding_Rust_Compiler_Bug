{"sha": "2dbe20a5610c3244feab0db5ab20ff062dc91085", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYmUyMGE1NjEwYzMyNDRmZWFiMGRiNWFiMjBmZjA2MmRjOTEwODU=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-03T18:50:43Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-04-19T18:53:34Z"}, "message": "libstd: Micro-optimize vuint_at", "tree": {"sha": "4f3d2df36d26fc762ec98c7c87926842faeae256", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f3d2df36d26fc762ec98c7c87926842faeae256"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2dbe20a5610c3244feab0db5ab20ff062dc91085", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2dbe20a5610c3244feab0db5ab20ff062dc91085", "html_url": "https://github.com/rust-lang/rust/commit/2dbe20a5610c3244feab0db5ab20ff062dc91085", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2dbe20a5610c3244feab0db5ab20ff062dc91085/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c29b4cb93ee090a22d27faf4e700bfc2364ebc5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c29b4cb93ee090a22d27faf4e700bfc2364ebc5", "html_url": "https://github.com/rust-lang/rust/commit/4c29b4cb93ee090a22d27faf4e700bfc2364ebc5"}], "stats": {"total": 57, "additions": 53, "deletions": 4}, "files": [{"sha": "7b479bc7578bd96c3a8a7fae0c565f031c136d3f", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 53, "deletions": 4, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/2dbe20a5610c3244feab0db5ab20ff062dc91085/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2dbe20a5610c3244feab0db5ab20ff062dc91085/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=2dbe20a5610c3244feab0db5ab20ff062dc91085", "patch": "@@ -59,10 +59,13 @@ pub mod reader {\n     use ebml::{EsVec, EsVecElt, EsVecLen, TaggedDoc};\n     use serialize;\n \n+    use core::cast::transmute;\n     use core::int;\n     use core::io;\n     use core::prelude::*;\n+    use core::ptr::offset;\n     use core::str;\n+    use core::unstable::intrinsics::bswap32;\n     use core::vec;\n \n     // ebml reading\n@@ -78,7 +81,8 @@ pub mod reader {\n         next: uint\n     }\n \n-    fn vuint_at(data: &[u8], start: uint) -> Res {\n+    #[inline(never)]\n+    fn vuint_at_slow(data: &[u8], start: uint) -> Res {\n         let a = data[start];\n         if a & 0x80u8 != 0u8 {\n             return Res {val: (a & 0x7fu8) as uint, next: start + 1u};\n@@ -87,18 +91,63 @@ pub mod reader {\n             return Res {val: ((a & 0x3fu8) as uint) << 8u |\n                         (data[start + 1u] as uint),\n                     next: start + 2u};\n-        } else if a & 0x20u8 != 0u8 {\n+        }\n+        if a & 0x20u8 != 0u8 {\n             return Res {val: ((a & 0x1fu8) as uint) << 16u |\n                         (data[start + 1u] as uint) << 8u |\n                         (data[start + 2u] as uint),\n                     next: start + 3u};\n-        } else if a & 0x10u8 != 0u8 {\n+        }\n+        if a & 0x10u8 != 0u8 {\n             return Res {val: ((a & 0x0fu8) as uint) << 24u |\n                         (data[start + 1u] as uint) << 16u |\n                         (data[start + 2u] as uint) << 8u |\n                         (data[start + 3u] as uint),\n                     next: start + 4u};\n-        } else { error!(\"vint too big\"); fail!(); }\n+        }\n+        fail!(~\"vint too big\");\n+    }\n+\n+    #[cfg(target_arch = \"x86\")]\n+    #[cfg(target_arch = \"x86_64\")]\n+    pub fn vuint_at(data: &[u8], start: uint) -> Res {\n+        if data.len() - start < 4 {\n+            return vuint_at_slow(data, start);\n+        }\n+\n+        unsafe {\n+            let (ptr, _): (*u8, uint) = transmute(data);\n+            let ptr = offset(ptr, start);\n+            let ptr: *i32 = transmute(ptr);\n+            let val = bswap32(*ptr);\n+            let val: u32 = transmute(val);\n+            if (val & 0x80000000) != 0 {\n+                Res {\n+                    val: ((val >> 24) & 0x7f) as uint,\n+                    next: start + 1\n+                }\n+            } else if (val & 0x40000000) != 0 {\n+                Res {\n+                    val: ((val >> 16) & 0x3fff) as uint,\n+                    next: start + 2\n+                }\n+            } else if (val & 0x20000000) != 0 {\n+                Res {\n+                    val: ((val >> 8) & 0x1fffff) as uint,\n+                    next: start + 3\n+                }\n+            } else {\n+                Res {\n+                    val: (val & 0x0fffffff) as uint,\n+                    next: start + 4\n+                }\n+            }\n+        }\n+    }\n+\n+    #[cfg(target_arch = \"arm\")]\n+    pub fn vuint_at(data: &[u8], start: uint) -> Res {\n+        vuint_at_slow(data, start)\n     }\n \n     pub fn Doc(data: @~[u8]) -> Doc {"}]}