{"sha": "05ee406cc83d5498b94873f949ee1de1bba2869f", "node_id": "C_kwDOAAsO6NoAKDA1ZWU0MDZjYzgzZDU0OThiOTQ4NzNmOTQ5ZWUxZGUxYmJhMjg2OWY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-31T17:16:16Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-31T17:49:57Z"}, "message": "Add test.", "tree": {"sha": "33655ab6ce6ccc887d8b0fd14828f139fb726c02", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33655ab6ce6ccc887d8b0fd14828f139fb726c02"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05ee406cc83d5498b94873f949ee1de1bba2869f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05ee406cc83d5498b94873f949ee1de1bba2869f", "html_url": "https://github.com/rust-lang/rust/commit/05ee406cc83d5498b94873f949ee1de1bba2869f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05ee406cc83d5498b94873f949ee1de1bba2869f/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7bf469fecc75792e1598a0842ac40b361f0107b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7bf469fecc75792e1598a0842ac40b361f0107b", "html_url": "https://github.com/rust-lang/rust/commit/c7bf469fecc75792e1598a0842ac40b361f0107b"}], "stats": {"total": 161, "additions": 161, "deletions": 0}, "files": [{"sha": "7759e50e55851be716a4d998cec5966466f16ced", "filename": "tests/mir-opt/copy-prop/issue_107511.main.CopyProp.diff", "status": "added", "additions": 146, "deletions": 0, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/05ee406cc83d5498b94873f949ee1de1bba2869f/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/05ee406cc83d5498b94873f949ee1de1bba2869f/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.main.CopyProp.diff?ref=05ee406cc83d5498b94873f949ee1de1bba2869f", "patch": "@@ -0,0 +1,146 @@\n+- // MIR for `main` before CopyProp\n++ // MIR for `main` after CopyProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/issue_107511.rs:+0:11: +0:11\n+      let mut _1: i32;                     // in scope 0 at $DIR/issue_107511.rs:+1:9: +1:16\n+      let _3: ();                          // in scope 0 at $DIR/issue_107511.rs:+6:5: +8:6\n+      let mut _4: std::ops::Range<usize>;  // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _5: std::ops::Range<usize>;  // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _6: usize;                   // in scope 0 at $DIR/issue_107511.rs:+6:17: +6:24\n+      let mut _7: &[i32];                  // in scope 0 at $DIR/issue_107511.rs:+6:17: +6:24\n+      let mut _8: &[i32; 4];               // in scope 0 at $DIR/issue_107511.rs:+6:17: +6:24\n+      let mut _10: ();                     // in scope 0 at $DIR/issue_107511.rs:+0:1: +11:2\n+      let _11: ();                         // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _12: std::option::Option<usize>; // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _13: &mut std::ops::Range<usize>; // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _14: &mut std::ops::Range<usize>; // in scope 0 at $DIR/issue_107511.rs:+6:14: +6:24\n+      let mut _15: isize;                  // in scope 0 at $DIR/issue_107511.rs:+6:5: +8:6\n+      let mut _16: !;                      // in scope 0 at $DIR/issue_107511.rs:+6:5: +8:6\n+      let mut _18: i32;                    // in scope 0 at $DIR/issue_107511.rs:+7:16: +7:20\n+      let _19: usize;                      // in scope 0 at $DIR/issue_107511.rs:+7:18: +7:19\n+      let mut _20: usize;                  // in scope 0 at $DIR/issue_107511.rs:+7:16: +7:20\n+      let mut _21: bool;                   // in scope 0 at $DIR/issue_107511.rs:+7:16: +7:20\n+      scope 1 {\n+          debug sum => _1;                 // in scope 1 at $DIR/issue_107511.rs:+1:9: +1:16\n+          let _2: [i32; 4];                // in scope 1 at $DIR/issue_107511.rs:+2:9: +2:10\n+          scope 2 {\n+              debug a => _2;               // in scope 2 at $DIR/issue_107511.rs:+2:9: +2:10\n+              let mut _9: std::ops::Range<usize>; // in scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+              scope 3 {\n+                  debug iter => _9;        // in scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+                  let _17: usize;          // in scope 3 at $DIR/issue_107511.rs:+6:9: +6:10\n+                  scope 4 {\n+                      debug i => _17;      // in scope 4 at $DIR/issue_107511.rs:+6:9: +6:10\n+                  }\n+              }\n+              scope 5 {\n+              }\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/issue_107511.rs:+1:9: +1:16\n+          _1 = const 0_i32;                // scope 0 at $DIR/issue_107511.rs:+1:19: +1:20\n+          StorageLive(_2);                 // scope 1 at $DIR/issue_107511.rs:+2:9: +2:10\n+          _2 = [const 0_i32, const 10_i32, const 20_i32, const 30_i32]; // scope 1 at $DIR/issue_107511.rs:+2:13: +2:28\n+-         StorageLive(_3);                 // scope 2 at $DIR/issue_107511.rs:+6:5: +8:6\n+          StorageLive(_4);                 // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageLive(_5);                 // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageLive(_6);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+          StorageLive(_7);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+          StorageLive(_8);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+          _8 = &_2;                        // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+          _7 = move _8 as &[i32] (Pointer(Unsize)); // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+          StorageDead(_8);                 // scope 2 at $DIR/issue_107511.rs:+6:17: +6:18\n+          _6 = core::slice::<impl [i32]>::len(move _7) -> bb1; // scope 2 at $DIR/issue_107511.rs:+6:17: +6:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue_107511.rs:10:19: 10:22\n+                                           // + literal: Const { ty: for<'a> fn(&'a [i32]) -> usize {core::slice::<impl [i32]>::len}, val: Value(<ZST>) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_7);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n+          Deinit(_5);                      // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          (_5.0: usize) = const 0_usize;   // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          (_5.1: usize) = move _6;         // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageDead(_6);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n+          _4 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _5) -> bb2; // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue_107511.rs:10:14: 10:24\n+                                           // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }\n+      }\n+  \n+      bb2: {\n+          StorageDead(_5);                 // scope 2 at $DIR/issue_107511.rs:+6:23: +6:24\n+          StorageLive(_9);                 // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          _9 = move _4;                    // scope 2 at $DIR/issue_107511.rs:+6:14: +6:24\n+          goto -> bb3;                     // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n+      }\n+  \n+      bb3: {\n+-         StorageLive(_11);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageLive(_12);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageLive(_13);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          StorageLive(_14);                // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          _14 = &mut _9;                   // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          _13 = &mut (*_14);               // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          _12 = <std::ops::Range<usize> as Iterator>::next(move _13) -> bb4; // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/issue_107511.rs:10:14: 10:24\n+                                           // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }\n+      }\n+  \n+      bb4: {\n+          StorageDead(_13);                // scope 3 at $DIR/issue_107511.rs:+6:23: +6:24\n+          _15 = discriminant(_12);         // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+          switchInt(move _15) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+      }\n+  \n+      bb5: {\n+          StorageLive(_17);                // scope 3 at $DIR/issue_107511.rs:+6:9: +6:10\n+          _17 = ((_12 as Some).0: usize);  // scope 3 at $DIR/issue_107511.rs:+6:9: +6:10\n+          StorageLive(_18);                // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+-         StorageLive(_19);                // scope 4 at $DIR/issue_107511.rs:+7:18: +7:19\n+-         _19 = _17;                       // scope 4 at $DIR/issue_107511.rs:+7:18: +7:19\n+          _20 = Len(_2);                   // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+-         _21 = Lt(_19, _20);              // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+-         assert(move _21, \"index out of bounds: the length is {} but the index is {}\", move _20, _19) -> bb8; // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n++         _21 = Lt(_17, _20);              // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n++         assert(move _21, \"index out of bounds: the length is {} but the index is {}\", move _20, _17) -> bb8; // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+      }\n+  \n+      bb6: {\n+          unreachable;                     // scope 3 at $DIR/issue_107511.rs:+6:14: +6:24\n+      }\n+  \n+      bb7: {\n+-         _3 = const ();                   // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n+          StorageDead(_14);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_12);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+-         StorageDead(_11);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_9);                 // scope 2 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_4);                 // scope 2 at $DIR/issue_107511.rs:+8:5: +8:6\n+-         StorageDead(_3);                 // scope 2 at $DIR/issue_107511.rs:+8:5: +8:6\n+          _0 = const ();                   // scope 0 at $DIR/issue_107511.rs:+0:11: +11:2\n+          StorageDead(_2);                 // scope 1 at $DIR/issue_107511.rs:+11:1: +11:2\n+          StorageDead(_1);                 // scope 0 at $DIR/issue_107511.rs:+11:1: +11:2\n+          return;                          // scope 0 at $DIR/issue_107511.rs:+11:2: +11:2\n+      }\n+  \n+      bb8: {\n+-         _18 = _2[_19];                   // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n++         _18 = _2[_17];                   // scope 4 at $DIR/issue_107511.rs:+7:16: +7:20\n+          _1 = Add(_1, move _18);          // scope 4 at $DIR/issue_107511.rs:+7:9: +7:20\n+          StorageDead(_18);                // scope 4 at $DIR/issue_107511.rs:+7:19: +7:20\n+-         StorageDead(_19);                // scope 4 at $DIR/issue_107511.rs:+7:20: +7:21\n+-         _11 = const ();                  // scope 4 at $DIR/issue_107511.rs:+6:25: +8:6\n+-         StorageDead(_17);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_14);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+          StorageDead(_12);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+-         StorageDead(_11);                // scope 3 at $DIR/issue_107511.rs:+8:5: +8:6\n+-         _10 = const ();                  // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n+          goto -> bb3;                     // scope 3 at $DIR/issue_107511.rs:+6:5: +8:6\n+      }\n+  }\n+  "}, {"sha": "0b872b89834ae94e4bbc79472006d3533ed024e7", "filename": "tests/mir-opt/copy-prop/issue_107511.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/05ee406cc83d5498b94873f949ee1de1bba2869f/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05ee406cc83d5498b94873f949ee1de1bba2869f/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcopy-prop%2Fissue_107511.rs?ref=05ee406cc83d5498b94873f949ee1de1bba2869f", "patch": "@@ -0,0 +1,15 @@\n+// unit-test: CopyProp\n+\n+// EMIT_MIR issue_107511.main.CopyProp.diff\n+fn main() {\n+    let mut sum = 0;\n+    let a = [0, 10, 20, 30];\n+\n+    // `i` is assigned in a loop. Only removing its `StorageDead` would mean that\n+    // execution sees repeated `StorageLive`. This would be UB.\n+    for i in 0..a.len() {\n+        sum += a[i];\n+    }\n+\n+    let _ = sum;\n+}"}]}