{"sha": "e752d4cde359cebad6decc2e98334ff999031eba", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NTJkNGNkZTM1OWNlYmFkNmRlY2MyZTk4MzM0ZmY5OTkwMzFlYmE=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-09T18:36:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-03-23T20:37:48Z"}, "message": "track the innermost scope for every stmt", "tree": {"sha": "31ab11905fdfe13d68a4340161ef8c76bf23870f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31ab11905fdfe13d68a4340161ef8c76bf23870f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e752d4cde359cebad6decc2e98334ff999031eba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e752d4cde359cebad6decc2e98334ff999031eba", "html_url": "https://github.com/rust-lang/rust/commit/e752d4cde359cebad6decc2e98334ff999031eba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e752d4cde359cebad6decc2e98334ff999031eba/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "323d7f4e98c2e6039efb8c9afda405c156d21299", "url": "https://api.github.com/repos/rust-lang/rust/commits/323d7f4e98c2e6039efb8c9afda405c156d21299", "html_url": "https://github.com/rust-lang/rust/commit/323d7f4e98c2e6039efb8c9afda405c156d21299"}], "stats": {"total": 83, "additions": 55, "deletions": 28}, "files": [{"sha": "7f28fe05beab087bcee669b8ed5f195201443cbf", "filename": "src/librustc/mir/repr.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc%2Fmir%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc%2Fmir%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Frepr.rs?ref=e752d4cde359cebad6decc2e98334ff999031eba", "patch": "@@ -458,6 +458,7 @@ impl<'tcx> Terminator<'tcx> {\n #[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Statement<'tcx> {\n     pub span: Span,\n+    pub scope: ScopeId,\n     pub kind: StatementKind<'tcx>,\n }\n \n@@ -474,6 +475,7 @@ impl<'tcx> Debug for Statement<'tcx> {\n         }\n     }\n }\n+\n ///////////////////////////////////////////////////////////////////////////\n // Lvalues\n "}, {"sha": "7ada408361d0582ac81a319cc4cfffb724ca2c7e", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=e752d4cde359cebad6decc2e98334ff999031eba", "patch": "@@ -71,7 +71,8 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 unpack!(block = this.into(destination, block, expr));\n             } else {\n                 // FIXME(#31472)\n-                this.cfg.push_assign_unit(block, span, destination);\n+                let scope_id = this.innermost_scope_id();\n+                this.cfg.push_assign_unit(block, scope_id, span, destination);\n             }\n             // Finally, we pop all the let scopes before exiting out from the scope of block\n             // itself."}, {"sha": "e85c8ccce84731dc7abbc5d9d117800176b1a36e", "filename": "src/librustc_mir/build/cfg.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fcfg.rs?ref=e752d4cde359cebad6decc2e98334ff999031eba", "patch": "@@ -50,28 +50,33 @@ impl<'tcx> CFG<'tcx> {\n \n     pub fn push_assign(&mut self,\n                        block: BasicBlock,\n+                       scope: ScopeId,\n                        span: Span,\n                        lvalue: &Lvalue<'tcx>,\n                        rvalue: Rvalue<'tcx>) {\n         self.push(block, Statement {\n+            scope: scope,\n             span: span,\n             kind: StatementKind::Assign(lvalue.clone(), rvalue)\n         });\n     }\n \n     pub fn push_assign_constant(&mut self,\n                                 block: BasicBlock,\n+                                scope: ScopeId,\n                                 span: Span,\n                                 temp: &Lvalue<'tcx>,\n                                 constant: Constant<'tcx>) {\n-        self.push_assign(block, span, temp, Rvalue::Use(Operand::Constant(constant)));\n+        self.push_assign(block, scope, span, temp,\n+                         Rvalue::Use(Operand::Constant(constant)));\n     }\n \n     pub fn push_assign_unit(&mut self,\n                             block: BasicBlock,\n+                            scope: ScopeId,\n                             span: Span,\n                             lvalue: &Lvalue<'tcx>) {\n-        self.push_assign(block, span, lvalue, Rvalue::Aggregate(\n+        self.push_assign(block, scope, span, lvalue, Rvalue::Aggregate(\n             AggregateKind::Tuple, vec![]\n         ));\n     }"}, {"sha": "fba1ff6434bb9e45381cea1740d8e31b6c11696b", "filename": "src/librustc_mir/build/expr/as_lvalue.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_lvalue.rs?ref=e752d4cde359cebad6decc2e98334ff999031eba", "patch": "@@ -34,6 +34,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         debug!(\"expr_as_lvalue(block={:?}, expr={:?})\", block, expr);\n \n         let this = self;\n+        let scope_id = this.innermost_scope_id();\n         let expr_span = expr.span;\n         match expr.kind {\n             ExprKind::Scope { extent, value } => {\n@@ -58,9 +59,9 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n \n                 // bounds check:\n                 let (len, lt) = (this.temp(usize_ty.clone()), this.temp(bool_ty));\n-                this.cfg.push_assign(block, expr_span, // len = len(slice)\n+                this.cfg.push_assign(block, scope_id, expr_span, // len = len(slice)\n                                      &len, Rvalue::Len(slice.clone()));\n-                this.cfg.push_assign(block, expr_span, // lt = idx < len\n+                this.cfg.push_assign(block, scope_id, expr_span, // lt = idx < len\n                                      &lt, Rvalue::BinaryOp(BinOp::Lt,\n                                                            idx.clone(),\n                                                            Operand::Consume(len.clone())));"}, {"sha": "b340d933e64c3f35f764399a378be2f28f0da6a0", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=e752d4cde359cebad6decc2e98334ff999031eba", "patch": "@@ -33,6 +33,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         debug!(\"expr_as_rvalue(block={:?}, expr={:?})\", block, expr);\n \n         let this = self;\n+        let scope_id = this.innermost_scope_id();\n         let expr_span = expr.span;\n \n         match expr.kind {\n@@ -75,7 +76,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 let value = this.hir.mirror(value);\n                 let result = this.temp(expr.ty);\n                 // to start, malloc some memory of suitable type (thus far, uninitialized):\n-                this.cfg.push_assign(block, expr_span, &result, Rvalue::Box(value.ty));\n+                this.cfg.push_assign(block, scope_id, expr_span, &result, Rvalue::Box(value.ty));\n                 this.in_scope(value_extents, block, |this, _| {\n                     // schedule a shallow free of that memory, lest we unwind:\n                     this.schedule_box_free(expr_span, value_extents, &result, value.ty);"}, {"sha": "30a42bcd709d26db3906523d4b05bf36bc98497b", "filename": "src/librustc_mir/build/expr/as_temp.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_temp.rs?ref=e752d4cde359cebad6decc2e98334ff999031eba", "patch": "@@ -55,7 +55,8 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 let expr_span = expr.span;\n                 let lvalue = unpack!(block = this.as_lvalue(block, expr));\n                 let rvalue = Rvalue::Use(Operand::Consume(lvalue));\n-                this.cfg.push_assign(block, expr_span, &temp, rvalue);\n+                let scope_id = this.innermost_scope_id();\n+                this.cfg.push_assign(block, scope_id, expr_span, &temp, rvalue);\n             }\n             _ => {\n                 unpack!(block = this.into(&temp, block, expr));"}, {"sha": "08b156c07bb419e4d91e73aca122f525be290b00", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 10, "deletions": 8, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=e752d4cde359cebad6decc2e98334ff999031eba", "patch": "@@ -36,6 +36,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         // just use the name `this` uniformly\n         let this = self;\n         let expr_span = expr.span;\n+        let scope_id = this.innermost_scope_id();\n \n         match expr.kind {\n             ExprKind::Scope { extent, value } => {\n@@ -63,7 +64,8 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 } else {\n                     // Body of the `if` expression without an `else` clause must return `()`, thus\n                     // we implicitly generate a `else {}` if it is not specified.\n-                    this.cfg.push_assign_unit(else_block, expr_span, destination);\n+                    let scope_id = this.innermost_scope_id();\n+                    this.cfg.push_assign_unit(else_block, scope_id, expr_span, destination);\n                     else_block\n                 };\n \n@@ -104,15 +106,15 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 });\n \n                 this.cfg.push_assign_constant(\n-                    true_block, expr_span, destination,\n+                    true_block, scope_id, expr_span, destination,\n                     Constant {\n                         span: expr_span,\n                         ty: this.hir.bool_ty(),\n                         literal: this.hir.true_literal(),\n                     });\n \n                 this.cfg.push_assign_constant(\n-                    false_block, expr_span, destination,\n+                    false_block, scope_id, expr_span, destination,\n                     Constant {\n                         span: expr_span,\n                         ty: this.hir.bool_ty(),\n@@ -178,7 +180,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 // If the loop may reach its exit_block, we assign an empty tuple to the\n                 // destination to keep the MIR well-formed.\n                 if might_break {\n-                    this.cfg.push_assign_unit(exit_block, expr_span, destination);\n+                    this.cfg.push_assign_unit(exit_block, scope_id, expr_span, destination);\n                 }\n                 exit_block.unit()\n             }\n@@ -189,7 +191,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 let rhs = unpack!(block = this.as_operand(block, rhs));\n                 let lhs = unpack!(block = this.as_lvalue(block, lhs));\n                 unpack!(block = this.build_drop(block, lhs.clone()));\n-                this.cfg.push_assign(block, expr_span, &lhs, Rvalue::Use(rhs));\n+                this.cfg.push_assign(block, scope_id, expr_span, &lhs, Rvalue::Use(rhs));\n                 block.unit()\n             }\n             ExprKind::AssignOp { op, lhs, rhs } => {\n@@ -208,7 +210,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 // we don't have to drop prior contents or anything\n                 // because AssignOp is only legal for Copy types\n                 // (overloaded ops should be desugared into a call).\n-                this.cfg.push_assign(block, expr_span, &lhs,\n+                this.cfg.push_assign(block, scope_id, expr_span, &lhs,\n                                      Rvalue::BinaryOp(op,\n                                                       Operand::Consume(lhs.clone()),\n                                                       rhs));\n@@ -229,7 +231,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 block = match value {\n                     Some(value) => unpack!(this.into(&Lvalue::ReturnPointer, block, value)),\n                     None => {\n-                        this.cfg.push_assign_unit(block, expr_span, &Lvalue::ReturnPointer);\n+                        this.cfg.push_assign_unit(block, scope_id, expr_span, &Lvalue::ReturnPointer);\n                         block\n                     }\n                 };\n@@ -293,7 +295,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 });\n \n                 let rvalue = unpack!(block = this.as_rvalue(block, expr));\n-                this.cfg.push_assign(block, expr_span, destination, rvalue);\n+                this.cfg.push_assign(block, scope_id, expr_span, destination, rvalue);\n                 block.unit()\n             }\n         }"}, {"sha": "7f38324bca4aa6ceb0f41cd4906eefc357132340", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=e752d4cde359cebad6decc2e98334ff999031eba", "patch": "@@ -584,7 +584,9 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                     Rvalue::Ref(region, borrow_kind, binding.source),\n             };\n \n-            self.cfg.push_assign(block, binding.span, &Lvalue::Var(var_index), rvalue);\n+            let scope_id = self.innermost_scope_id();\n+            self.cfg.push_assign(block, scope_id, binding.span,\n+                                 &Lvalue::Var(var_index), rvalue);\n         }\n     }\n "}, {"sha": "f5e7cfb2d28078e438818ca9bbd47c14b8dc0d10", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=e752d4cde359cebad6decc2e98334ff999031eba", "patch": "@@ -146,6 +146,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                         lvalue: &Lvalue<'tcx>,\n                         test: &Test<'tcx>)\n                         -> Vec<BasicBlock> {\n+        let scope_id = self.innermost_scope_id();\n         match test.kind {\n             TestKind::Switch { adt_def } => {\n                 let num_enum_variants = self.hir.num_variants(adt_def);\n@@ -189,7 +190,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                         if let ty::TyArray(_, _) = mt.ty.sty {\n                             ty = tcx.mk_imm_ref(region, tcx.mk_slice(tcx.types.u8));\n                             let val_slice = self.temp(ty);\n-                            self.cfg.push_assign(block, test.span, &val_slice,\n+                            self.cfg.push_assign(block, scope_id, test.span, &val_slice,\n                                                  Rvalue::Cast(CastKind::Unsize, val, ty));\n                             val = Operand::Consume(val_slice);\n                         }\n@@ -204,7 +205,7 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                     });\n \n                     let slice = self.temp(ty);\n-                    self.cfg.push_assign(block, test.span, &slice,\n+                    self.cfg.push_assign(block, scope_id, test.span, &slice,\n                                          Rvalue::Cast(CastKind::Unsize, array, ty));\n                     Operand::Consume(slice)\n                 } else {\n@@ -268,13 +269,14 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 let (actual, result) = (self.temp(usize_ty), self.temp(bool_ty));\n \n                 // actual = len(lvalue)\n-                self.cfg.push_assign(block, test.span, &actual, Rvalue::Len(lvalue.clone()));\n+                self.cfg.push_assign(block, scope_id, test.span, &actual, Rvalue::Len(lvalue.clone()));\n \n                 // expected = <N>\n-                let expected = self.push_usize(block, test.span, len);\n+                let expected = self.push_usize(block, scope_id, test.span, len);\n \n                 // result = actual == expected OR result = actual < expected\n                 self.cfg.push_assign(block,\n+                                     scope_id,\n                                      test.span,\n                                      &result,\n                                      Rvalue::BinaryOp(op,\n@@ -305,7 +307,9 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         let result = self.temp(bool_ty);\n \n         // result = op(left, right)\n-        self.cfg.push_assign(block, span, &result, Rvalue::BinaryOp(op, left, right));\n+        let scope_id = self.innermost_scope_id();\n+        self.cfg.push_assign(block, scope_id, span, &result,\n+                             Rvalue::BinaryOp(op, left, right));\n \n         // branch based on result\n         let target_block = self.cfg.start_new_block();"}, {"sha": "101d7594309a9a505b2ca2b12187627a37d8468d", "filename": "src/librustc_mir/build/matches/util.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Futil.rs?ref=e752d4cde359cebad6decc2e98334ff999031eba", "patch": "@@ -61,7 +61,8 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n                 from_end: suffix_len,\n             };\n             let temp = self.temp(slice.ty.clone()); // no need to schedule drop, temp is always copy\n-            self.cfg.push_assign(block, slice.span, &temp, rvalue);\n+            let scope_id = self.innermost_scope_id();\n+            self.cfg.push_assign(block, scope_id, slice.span, &temp, rvalue);\n             match_pairs.push(MatchPair::new(temp, slice));\n         }\n "}, {"sha": "0d1690783301be37dc0efbfdb1aa59112743d4a1", "filename": "src/librustc_mir/build/misc.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmisc.rs?ref=e752d4cde359cebad6decc2e98334ff999031eba", "patch": "@@ -46,11 +46,16 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         Operand::Constant(constant)\n     }\n \n-    pub fn push_usize(&mut self, block: BasicBlock, span: Span, value: u64) -> Lvalue<'tcx> {\n+    pub fn push_usize(&mut self,\n+                      block: BasicBlock,\n+                      scope_id: ScopeId,\n+                      span: Span,\n+                      value: u64)\n+                      -> Lvalue<'tcx> {\n         let usize_ty = self.hir.usize_ty();\n         let temp = self.temp(usize_ty);\n         self.cfg.push_assign_constant(\n-            block, span, &temp,\n+            block, scope_id, span, &temp,\n             Constant {\n                 span: span,\n                 ty: self.hir.usize_ty(),"}, {"sha": "61b35b94e7000cce9d7b83c505d371d737b77321", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e752d4cde359cebad6decc2e98334ff999031eba/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=e752d4cde359cebad6decc2e98334ff999031eba", "patch": "@@ -464,13 +464,14 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         let (tuple, tuple_ref) = (self.temp(tup_ty), self.temp(ref_ty));\n         let (file, line) = self.span_to_fileline_args(span);\n         let elems = vec![Operand::Constant(file), Operand::Constant(line)];\n+        let scope_id = self.innermost_scope_id();\n         // FIXME: We should have this as a constant, rather than a stack variable (to not pollute\n         // icache with cold branch code), however to achieve that we either have to rely on rvalue\n         // promotion or have some way, in MIR, to create constants.\n-        self.cfg.push_assign(block, span, &tuple, // tuple = (file_arg, line_arg);\n+        self.cfg.push_assign(block, scope_id, span, &tuple, // tuple = (file_arg, line_arg);\n                              Rvalue::Aggregate(AggregateKind::Tuple, elems));\n         // FIXME: is this region really correct here?\n-        self.cfg.push_assign(block, span, &tuple_ref, // tuple_ref = &tuple;\n+        self.cfg.push_assign(block, scope_id, span, &tuple_ref, // tuple_ref = &tuple;\n                              Rvalue::Ref(region, BorrowKind::Shared, tuple));\n         let cleanup = self.diverge_cleanup();\n         self.cfg.terminate(block, Terminator::Call {\n@@ -505,13 +506,14 @@ impl<'a,'tcx> Builder<'a,'tcx> {\n         let elems = vec![Operand::Constant(message),\n                          Operand::Constant(file),\n                          Operand::Constant(line)];\n+        let scope_id = self.innermost_scope_id();\n         // FIXME: We should have this as a constant, rather than a stack variable (to not pollute\n         // icache with cold branch code), however to achieve that we either have to rely on rvalue\n         // promotion or have some way, in MIR, to create constants.\n-        self.cfg.push_assign(block, span, &tuple, // tuple = (message_arg, file_arg, line_arg);\n+        self.cfg.push_assign(block, scope_id, span, &tuple, // tuple = (message_arg, file_arg, line_arg);\n                              Rvalue::Aggregate(AggregateKind::Tuple, elems));\n         // FIXME: is this region really correct here?\n-        self.cfg.push_assign(block, span, &tuple_ref, // tuple_ref = &tuple;\n+        self.cfg.push_assign(block, scope_id, span, &tuple_ref, // tuple_ref = &tuple;\n                              Rvalue::Ref(region, BorrowKind::Shared, tuple));\n         let cleanup = self.diverge_cleanup();\n         self.cfg.terminate(block, Terminator::Call {"}]}