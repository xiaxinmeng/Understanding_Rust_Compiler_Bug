{"sha": "c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0", "node_id": "C_kwDOAAsO6NoAKGM5N2QwMmNkYjVjYTVmNWU5ZWZmMWZhOWU0NTYwZDIyMGQxZmQyYTA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-05T20:47:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-05T20:47:39Z"}, "message": "Auto merge of #102394 - dingxiangfei2009:issue-102317, r=oli-obk\n\nFix unwind drop glue for if-then scopes\n\ncc `@est31`\n\nFix #102317\nFix #99852\n\nThis PR fixes the drop glue for unwinding from a panic originated in a drop while breaking out for the else block in an `if-then` scope.\nMIR validation does not fail for the synchronous versions of the test program, because `StorageDead` statements are skipped over in the unwinding process. It is only becoming a problem when it is inside a generator where `StorageDead` must be kept around.", "tree": {"sha": "a1f4d6366cbbaf82445e15044966c745226e9846", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1f4d6366cbbaf82445e15044966c745226e9846"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0", "html_url": "https://github.com/rust-lang/rust/commit/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75ada3a1534fbc4801c73fafecd0f7455f1e3419", "url": "https://api.github.com/repos/rust-lang/rust/commits/75ada3a1534fbc4801c73fafecd0f7455f1e3419", "html_url": "https://github.com/rust-lang/rust/commit/75ada3a1534fbc4801c73fafecd0f7455f1e3419"}, {"sha": "565c35aa5c3c39626fcd332bafbd8936b70ed989", "url": "https://api.github.com/repos/rust-lang/rust/commits/565c35aa5c3c39626fcd332bafbd8936b70ed989", "html_url": "https://github.com/rust-lang/rust/commit/565c35aa5c3c39626fcd332bafbd8936b70ed989"}], "stats": {"total": 95, "additions": 76, "deletions": 19}, "files": [{"sha": "183db56d7a08c0e868923ac572e7553fcd57e7f4", "filename": "compiler/rustc_mir_build/src/build/block.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fblock.rs?ref=c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0", "patch": "@@ -245,11 +245,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                                 OutsideGuard,\n                                                 true,\n                                             );\n-                                            this.schedule_drop_for_binding(\n-                                                node,\n-                                                span,\n-                                                OutsideGuard,\n-                                            );\n                                         },\n                                     );\n                                     this.ast_let_else("}, {"sha": "24ecd0a539949c2bc945dfdbf2a96f4e8ebd1c2f", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                                 this.source_info(then_expr.span)\n                             };\n                             let (then_block, else_block) =\n-                                this.in_if_then_scope(condition_scope, |this| {\n+                                this.in_if_then_scope(condition_scope, then_expr.span, |this| {\n                                     let then_blk = unpack!(this.then_else_break(\n                                         block,\n                                         &this.thir[cond],\n@@ -107,7 +107,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             }\n             ExprKind::Let { expr, ref pat } => {\n                 let scope = this.local_scope();\n-                let (true_block, false_block) = this.in_if_then_scope(scope, |this| {\n+                let (true_block, false_block) = this.in_if_then_scope(scope, expr_span, |this| {\n                     this.lower_let_expr(block, &this.thir[expr], pat, scope, None, expr_span)\n                 });\n "}, {"sha": "3f813e0af0da362e0b74918a3726c6f194a8cb8d", "filename": "compiler/rustc_mir_build/src/build/matches/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmatches%2Fmod.rs?ref=c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0", "patch": "@@ -1986,7 +1986,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             let mut guard_span = rustc_span::DUMMY_SP;\n \n             let (post_guard_block, otherwise_post_guard_block) =\n-                self.in_if_then_scope(match_scope, |this| match *guard {\n+                self.in_if_then_scope(match_scope, guard_span, |this| match *guard {\n                     Guard::If(e) => {\n                         let e = &this.thir[e];\n                         guard_span = e.span;\n@@ -2301,7 +2301,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         pattern: &Pat<'tcx>,\n     ) -> BlockAnd<BasicBlock> {\n         let else_block_span = self.thir[else_block].span;\n-        let (matching, failure) = self.in_if_then_scope(*let_else_scope, |this| {\n+        let (matching, failure) = self.in_if_then_scope(*let_else_scope, else_block_span, |this| {\n             let scrutinee = unpack!(block = this.lower_scrutinee(block, init, initializer_span));\n             let pat = Pat { ty: init.ty, span: else_block_span, kind: PatKind::Wild };\n             let mut wildcard = Candidate::new(scrutinee.clone(), &pat, false, this);"}, {"sha": "3cebd5ebed660dac13d99c560af352e708170ddb", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0", "patch": "@@ -466,9 +466,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         let normal_exit_block = f(self);\n         let breakable_scope = self.scopes.breakable_scopes.pop().unwrap();\n         assert!(breakable_scope.region_scope == region_scope);\n-        let break_block = self.build_exit_tree(breakable_scope.break_drops, None);\n+        let break_block =\n+            self.build_exit_tree(breakable_scope.break_drops, region_scope, span, None);\n         if let Some(drops) = breakable_scope.continue_drops {\n-            self.build_exit_tree(drops, loop_block);\n+            self.build_exit_tree(drops, region_scope, span, loop_block);\n         }\n         match (normal_exit_block, break_block) {\n             (Some(block), None) | (None, Some(block)) => block,\n@@ -510,6 +511,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     pub(crate) fn in_if_then_scope<F>(\n         &mut self,\n         region_scope: region::Scope,\n+        span: Span,\n         f: F,\n     ) -> (BasicBlock, BasicBlock)\n     where\n@@ -524,7 +526,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         assert!(if_then_scope.region_scope == region_scope);\n \n         let else_block = self\n-            .build_exit_tree(if_then_scope.else_drops, None)\n+            .build_exit_tree(if_then_scope.else_drops, region_scope, span, None)\n             .map_or_else(|| self.cfg.start_new_block(), |else_block_and| unpack!(else_block_and));\n \n         (then_block, else_block)\n@@ -997,10 +999,18 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// Returns the [DropIdx] for the innermost drop if the function unwound at\n     /// this point. The `DropIdx` will be created if it doesn't already exist.\n     fn diverge_cleanup(&mut self) -> DropIdx {\n-        let is_generator = self.generator_kind.is_some();\n-        let (uncached_scope, mut cached_drop) = self\n-            .scopes\n-            .scopes\n+        // It is okay to use dummy span because the getting scope index on the topmost scope\n+        // must always succeed.\n+        self.diverge_cleanup_target(self.scopes.topmost(), DUMMY_SP)\n+    }\n+\n+    /// This is similar to [diverge_cleanup](Self::diverge_cleanup) except its target is set to\n+    /// some ancestor scope instead of the current scope.\n+    /// It is possible to unwind to some ancestor scope if some drop panics as\n+    /// the program breaks out of a if-then scope.\n+    fn diverge_cleanup_target(&mut self, target_scope: region::Scope, span: Span) -> DropIdx {\n+        let target = self.scopes.scope_index(target_scope, span);\n+        let (uncached_scope, mut cached_drop) = self.scopes.scopes[..=target]\n             .iter()\n             .enumerate()\n             .rev()\n@@ -1009,7 +1019,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             })\n             .unwrap_or((0, ROOT_NODE));\n \n-        for scope in &mut self.scopes.scopes[uncached_scope..] {\n+        if uncached_scope > target {\n+            return cached_drop;\n+        }\n+\n+        let is_generator = self.generator_kind.is_some();\n+        for scope in &mut self.scopes.scopes[uncached_scope..=target] {\n             for drop in &scope.drops {\n                 if is_generator || drop.kind == DropKind::Value {\n                     cached_drop = self.scopes.unwind_drops.add_drop(*drop, cached_drop);\n@@ -1222,21 +1237,24 @@ impl<'a, 'tcx: 'a> Builder<'a, 'tcx> {\n     fn build_exit_tree(\n         &mut self,\n         mut drops: DropTree,\n+        else_scope: region::Scope,\n+        span: Span,\n         continue_block: Option<BasicBlock>,\n     ) -> Option<BlockAnd<()>> {\n         let mut blocks = IndexVec::from_elem(None, &drops.drops);\n         blocks[ROOT_NODE] = continue_block;\n \n         drops.build_mir::<ExitScopes>(&mut self.cfg, &mut blocks);\n+        let is_generator = self.generator_kind.is_some();\n \n         // Link the exit drop tree to unwind drop tree.\n         if drops.drops.iter().any(|(drop, _)| drop.kind == DropKind::Value) {\n-            let unwind_target = self.diverge_cleanup();\n+            let unwind_target = self.diverge_cleanup_target(else_scope, span);\n             let mut unwind_indices = IndexVec::from_elem_n(unwind_target, 1);\n             for (drop_idx, drop_data) in drops.drops.iter_enumerated().skip(1) {\n                 match drop_data.0.kind {\n                     DropKind::Storage => {\n-                        if self.generator_kind.is_some() {\n+                        if is_generator {\n                             let unwind_drop = self\n                                 .scopes\n                                 .unwind_drops"}, {"sha": "7369b4938eed482f6bcc442774048083cbea6b41", "filename": "src/test/ui/let-else/issue-102317.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0/src%2Ftest%2Fui%2Flet-else%2Fissue-102317.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0/src%2Ftest%2Fui%2Flet-else%2Fissue-102317.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Fissue-102317.rs?ref=c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0", "patch": "@@ -0,0 +1,20 @@\n+// issue #102317\n+// build-pass\n+// compile-flags: --edition 2021 -C opt-level=3 -Zvalidate-mir\n+\n+struct SegmentJob;\n+\n+impl Drop for SegmentJob {\n+    fn drop(&mut self) {}\n+}\n+\n+pub async fn run() -> Result<(), ()> {\n+    let jobs = Vec::<SegmentJob>::new();\n+    let Some(_job) = jobs.into_iter().next() else {\n+        return Ok(())\n+    };\n+\n+    Ok(())\n+}\n+\n+fn main() {}"}, {"sha": "1c675788ee93318a0ef1378190c2766697ba8836", "filename": "src/test/ui/mir/issue-99852.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0/src%2Ftest%2Fui%2Fmir%2Fissue-99852.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0/src%2Ftest%2Fui%2Fmir%2Fissue-99852.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmir%2Fissue-99852.rs?ref=c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+// compile-flags: -Z validate-mir\n+#![feature(let_chains)]\n+\n+fn lambda<T, U>() -> U\n+where\n+    T: Default,\n+    U: Default,\n+{\n+    let foo: Result<T, ()> = Ok(T::default());\n+    let baz: U = U::default();\n+\n+    if let Ok(foo) = foo && let Ok(bar) = transform(foo) {\n+        bar\n+    } else {\n+        baz\n+    }\n+}\n+\n+fn transform<T, U>(input: T) -> Result<U, ()> {\n+    todo!()\n+}\n+\n+fn main() {}"}]}