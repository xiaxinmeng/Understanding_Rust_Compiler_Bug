{"sha": "d6238bd8d4fe283968abbf46357c8e56f283b65b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MjM4YmQ4ZDRmZTI4Mzk2OGFiYmY0NjM1N2M4ZTU2ZjI4M2I2NWI=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T21:21:00Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-02-15T21:21:00Z"}, "message": "reject assoc statics & extern consts during parsing", "tree": {"sha": "c6acbcaf3fe6c10cf44c972afa1df223bed981fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c6acbcaf3fe6c10cf44c972afa1df223bed981fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d6238bd8d4fe283968abbf46357c8e56f283b65b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d6238bd8d4fe283968abbf46357c8e56f283b65b", "html_url": "https://github.com/rust-lang/rust/commit/d6238bd8d4fe283968abbf46357c8e56f283b65b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d6238bd8d4fe283968abbf46357c8e56f283b65b/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5abedd81e04dc1b76db423ca351ef5d3056a6f97", "url": "https://api.github.com/repos/rust-lang/rust/commits/5abedd81e04dc1b76db423ca351ef5d3056a6f97", "html_url": "https://github.com/rust-lang/rust/commit/5abedd81e04dc1b76db423ca351ef5d3056a6f97"}], "stats": {"total": 278, "additions": 183, "deletions": 95}, "files": [{"sha": "d3fcb589fd0ff04b899af8581189328a4d1796fc", "filename": "src/librustc_ast_passes/ast_validation.rs", "status": "modified", "additions": 3, "deletions": 25, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Flibrustc_ast_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Flibrustc_ast_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_passes%2Fast_validation.rs?ref=d6238bd8d4fe283968abbf46357c8e56f283b65b", "patch": "@@ -533,20 +533,6 @@ impl<'a> AstValidator<'a> {\n         }\n     }\n \n-    fn error_foreign_const(&self, ident: Ident, span: Span) {\n-        self.err_handler()\n-            .struct_span_err(ident.span, \"extern items cannot be `const`\")\n-            .span_suggestion(\n-                span.with_hi(ident.span.lo()),\n-                \"try using a static value\",\n-                \"static \".to_string(),\n-                Applicability::MachineApplicable,\n-            )\n-            .span_label(self.current_extern_span(), \"in this `extern` block\")\n-            .note(MORE_EXTERN)\n-            .emit();\n-    }\n-\n     /// Reject C-varadic type unless the function is foreign,\n     /// or free and `unsafe extern \"C\"` semantically.\n     fn check_c_varadic_type(&self, fk: FnKind<'a>) {\n@@ -1003,10 +989,7 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             ForeignItemKind::Static(_, _, body) => {\n                 self.check_foreign_kind_bodyless(fi.ident, \"static\", body.as_ref().map(|b| b.span));\n             }\n-            ForeignItemKind::Const(..) => {\n-                self.error_foreign_const(fi.ident, fi.span);\n-            }\n-            ForeignItemKind::Macro(..) => {}\n+            ForeignItemKind::Const(..) | ForeignItemKind::Macro(..) => {}\n         }\n \n         visit::walk_foreign_item(self, fi)\n@@ -1267,13 +1250,8 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n             }\n         }\n \n-        match item.kind {\n-            AssocItemKind::Const(..) => self.check_item_named(item.ident, \"const\"),\n-            AssocItemKind::Static(..) => self\n-                .err_handler()\n-                .struct_span_err(item.span, \"associated `static` items are not allowed\")\n-                .emit(),\n-            _ => {}\n+        if let AssocItemKind::Const(..) = item.kind {\n+            self.check_item_named(item.ident, \"const\");\n         }\n \n         self.with_in_trait_impl(false, |this| visit::walk_assoc_item(this, item, ctxt));"}, {"sha": "da72da043650c2cad55a45dcd033a1773b63a0d8", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 26, "deletions": 1, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=d6238bd8d4fe283968abbf46357c8e56f283b65b", "patch": "@@ -643,9 +643,16 @@ impl<'a> Parser<'a> {\n         if !item.attrs.iter().any(|attr| attr.style == AttrStyle::Inner) {\n             item.tokens = Some(tokens);\n         }\n+        self.error_on_assoc_static(&item);\n         Ok(P(item))\n     }\n \n+    fn error_on_assoc_static(&self, item: &AssocItem) {\n+        if let AssocItemKind::Static(..) = item.kind {\n+            self.struct_span_err(item.span, \"associated `static` items are not allowed\").emit();\n+        }\n+    }\n+\n     fn parse_assoc_item_(\n         &mut self,\n         at_end: &mut bool,\n@@ -868,7 +875,25 @@ impl<'a> Parser<'a> {\n         let lo = self.token.span;\n         let vis = self.parse_visibility(FollowedByType::No)?;\n         let (ident, kind) = self.parse_assoc_item_kind(at_end, &mut attrs, |_| true, &vis)?;\n-        Ok(P(self.mk_item(lo, ident, kind, vis, attrs)))\n+        let item = self.mk_item(lo, ident, kind, vis, attrs);\n+        self.error_on_foreign_const(&item);\n+        Ok(P(item))\n+    }\n+\n+    fn error_on_foreign_const(&self, item: &ForeignItem) {\n+        if let AssocItemKind::Const(..) = item.kind {\n+            self.struct_span_err(item.ident.span, \"extern items cannot be `const`\")\n+                .span_suggestion(\n+                    item.span.with_hi(item.ident.span.lo()),\n+                    \"try using a static value\",\n+                    \"static \".to_string(),\n+                    Applicability::MachineApplicable,\n+                )\n+                .note(\n+                    \"for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\",\n+                )\n+                .emit();\n+        }\n     }\n \n     fn is_static_global(&mut self) -> bool {"}, {"sha": "7f67adbdb19c718061798bd3d9010dd4b0cea5a1", "filename": "src/test/ui/extern/extern-const.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Ftest%2Fui%2Fextern%2Fextern-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Ftest%2Fui%2Fextern%2Fextern-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-const.stderr?ref=d6238bd8d4fe283968abbf46357c8e56f283b65b", "patch": "@@ -1,8 +1,6 @@\n error: extern items cannot be `const`\n   --> $DIR/extern-const.rs:16:11\n    |\n-LL | extern \"C\" {\n-   | ---------- in this `extern` block\n LL |     const rust_dbg_static_mut: libc::c_int;\n    |     ------^^^^^^^^^^^^^^^^^^^\n    |     |"}, {"sha": "d02e2855c7e62f1cf4e560231ad816c203628f00", "filename": "src/test/ui/parser/assoc-static-semantic-fail.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-semantic-fail.stderr?ref=d6238bd8d4fe283968abbf46357c8e56f283b65b", "patch": "@@ -34,30 +34,12 @@ error: associated `static` items are not allowed\n LL |     static TB: u8;\n    |     ^^^^^^^^^^^^^^\n \n-error: `default` is only allowed on items in `impl` definitions\n-  --> $DIR/assoc-static-semantic-fail.rs:24:5\n-   |\n-LL |     default static TC: u8 = 0;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: associated `static` items are not allowed\n   --> $DIR/assoc-static-semantic-fail.rs:24:5\n    |\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: `default` is only allowed on items in `impl` definitions\n-  --> $DIR/assoc-static-semantic-fail.rs:27:5\n-   |\n-LL |     pub(crate) default static TD: u8;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error[E0449]: unnecessary visibility qualifier\n-  --> $DIR/assoc-static-semantic-fail.rs:27:5\n-   |\n-LL |     pub(crate) default static TD: u8;\n-   |     ^^^^^^^^^^\n-\n error: associated `static` items are not allowed\n   --> $DIR/assoc-static-semantic-fail.rs:27:5\n    |\n@@ -82,17 +64,35 @@ error: associated `static` items are not allowed\n LL |     default static TC: u8 = 0;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0449]: unnecessary visibility qualifier\n+error: associated `static` items are not allowed\n   --> $DIR/assoc-static-semantic-fail.rs:40:5\n    |\n LL |     pub default static TD: u8;\n-   |     ^^^ `pub` not permitted here because it's implied\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: associated `static` items are not allowed\n+error: `default` is only allowed on items in `impl` definitions\n+  --> $DIR/assoc-static-semantic-fail.rs:24:5\n+   |\n+LL |     default static TC: u8 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: `default` is only allowed on items in `impl` definitions\n+  --> $DIR/assoc-static-semantic-fail.rs:27:5\n+   |\n+LL |     pub(crate) default static TD: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0449]: unnecessary visibility qualifier\n+  --> $DIR/assoc-static-semantic-fail.rs:27:5\n+   |\n+LL |     pub(crate) default static TD: u8;\n+   |     ^^^^^^^^^^\n+\n+error[E0449]: unnecessary visibility qualifier\n   --> $DIR/assoc-static-semantic-fail.rs:40:5\n    |\n LL |     pub default static TD: u8;\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^ `pub` not permitted here because it's implied\n \n error: aborting due to 16 previous errors\n "}, {"sha": "8f042767e5503101352c43ff9b05c7a2679da877", "filename": "src/test/ui/parser/assoc-static-syntactic-fail.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.rs?ref=d6238bd8d4fe283968abbf46357c8e56f283b65b", "patch": "@@ -0,0 +1,27 @@\n+// Syntactically, we do allow e.g., `static X: u8 = 0;` as an associated item.\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+impl S {\n+    static IA: u8 = 0; //~ ERROR associated `static` items are not allowed\n+    static IB: u8; //~ ERROR associated `static` items are not allowed\n+    default static IC: u8 = 0; //~ ERROR associated `static` items are not allowed\n+    pub(crate) default static ID: u8; //~ ERROR associated `static` items are not allowed\n+}\n+\n+#[cfg(FALSE)]\n+trait T {\n+    static TA: u8 = 0; //~ ERROR associated `static` items are not allowed\n+    static TB: u8; //~ ERROR associated `static` items are not allowed\n+    default static TC: u8 = 0; //~ ERROR associated `static` items are not allowed\n+    pub(crate) default static TD: u8; //~ ERROR associated `static` items are not allowed\n+}\n+\n+#[cfg(FALSE)]\n+impl T for S {\n+    static TA: u8 = 0; //~ ERROR associated `static` items are not allowed\n+    static TB: u8; //~ ERROR associated `static` items are not allowed\n+    default static TC: u8 = 0; //~ ERROR associated `static` items are not allowed\n+    pub default static TD: u8; //~ ERROR associated `static` items are not allowed\n+}"}, {"sha": "bb1e5c4be2e9c5f20bcee3e02fcd0a4f4a9f2577", "filename": "src/test/ui/parser/assoc-static-syntactic-fail.stderr", "status": "added", "additions": 74, "deletions": 0, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-fail.stderr?ref=d6238bd8d4fe283968abbf46357c8e56f283b65b", "patch": "@@ -0,0 +1,74 @@\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-syntactic-fail.rs:7:5\n+   |\n+LL |     static IA: u8 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-syntactic-fail.rs:8:5\n+   |\n+LL |     static IB: u8;\n+   |     ^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-syntactic-fail.rs:9:5\n+   |\n+LL |     default static IC: u8 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-syntactic-fail.rs:10:5\n+   |\n+LL |     pub(crate) default static ID: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-syntactic-fail.rs:15:5\n+   |\n+LL |     static TA: u8 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-syntactic-fail.rs:16:5\n+   |\n+LL |     static TB: u8;\n+   |     ^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-syntactic-fail.rs:17:5\n+   |\n+LL |     default static TC: u8 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-syntactic-fail.rs:18:5\n+   |\n+LL |     pub(crate) default static TD: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-syntactic-fail.rs:23:5\n+   |\n+LL |     static TA: u8 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-syntactic-fail.rs:24:5\n+   |\n+LL |     static TB: u8;\n+   |     ^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-syntactic-fail.rs:25:5\n+   |\n+LL |     default static TC: u8 = 0;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: associated `static` items are not allowed\n+  --> $DIR/assoc-static-syntactic-fail.rs:26:5\n+   |\n+LL |     pub default static TD: u8;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 12 previous errors\n+"}, {"sha": "7f5b9f7933563dfc7646ced3e83c31145dc9d12d", "filename": "src/test/ui/parser/assoc-static-syntactic-pass.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5abedd81e04dc1b76db423ca351ef5d3056a6f97/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abedd81e04dc1b76db423ca351ef5d3056a6f97/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fassoc-static-syntactic-pass.rs?ref=5abedd81e04dc1b76db423ca351ef5d3056a6f97", "patch": "@@ -1,29 +0,0 @@\n-// Syntactically, we do allow e.g., `static X: u8 = 0;` as an associated item.\n-\n-// check-pass\n-\n-fn main() {}\n-\n-#[cfg(FALSE)]\n-impl S {\n-    static IA: u8 = 0;\n-    static IB: u8;\n-    default static IC: u8 = 0;\n-    pub(crate) default static ID: u8;\n-}\n-\n-#[cfg(FALSE)]\n-trait T {\n-    static TA: u8 = 0;\n-    static TB: u8;\n-    default static TC: u8 = 0;\n-    pub(crate) default static TD: u8;\n-}\n-\n-#[cfg(FALSE)]\n-impl T for S {\n-    static TA: u8 = 0;\n-    static TB: u8;\n-    default static TC: u8 = 0;\n-    pub default static TD: u8;\n-}"}, {"sha": "f364f11bb038db393239b9773eddf9fbd17131d9", "filename": "src/test/ui/parser/foreign-const-semantic-fail.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-const-semantic-fail.stderr?ref=d6238bd8d4fe283968abbf46357c8e56f283b65b", "patch": "@@ -1,8 +1,6 @@\n error: extern items cannot be `const`\n   --> $DIR/foreign-const-semantic-fail.rs:4:11\n    |\n-LL | extern {\n-   | ------ in this `extern` block\n LL |     const A: isize;\n    |     ------^\n    |     |\n@@ -13,9 +11,6 @@ LL |     const A: isize;\n error: extern items cannot be `const`\n   --> $DIR/foreign-const-semantic-fail.rs:6:11\n    |\n-LL | extern {\n-   | ------ in this `extern` block\n-...\n LL |     const B: isize = 42;\n    |     ------^\n    |     |"}, {"sha": "a78f8b1623a80120a2a0eb98b17d4c7d7f7fe56d", "filename": "src/test/ui/parser/foreign-const-syntactic-fail.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Ftest%2Fui%2Fparser%2Fforeign-const-syntactic-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Ftest%2Fui%2Fparser%2Fforeign-const-syntactic-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-const-syntactic-fail.rs?ref=d6238bd8d4fe283968abbf46357c8e56f283b65b", "patch": "@@ -0,0 +1,9 @@\n+// Syntactically, a `const` item inside an `extern { ... }` block is not allowed.\n+\n+fn main() {}\n+\n+#[cfg(FALSE)]\n+extern {\n+    const A: isize; //~ ERROR extern items cannot be `const`\n+    const B: isize = 42; //~ ERROR extern items cannot be `const`\n+}"}, {"sha": "9cf58fa95fb2dc1af38ea57019135e01dc251ac8", "filename": "src/test/ui/parser/foreign-const-syntactic-fail.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Ftest%2Fui%2Fparser%2Fforeign-const-syntactic-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d6238bd8d4fe283968abbf46357c8e56f283b65b/src%2Ftest%2Fui%2Fparser%2Fforeign-const-syntactic-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-const-syntactic-fail.stderr?ref=d6238bd8d4fe283968abbf46357c8e56f283b65b", "patch": "@@ -0,0 +1,22 @@\n+error: extern items cannot be `const`\n+  --> $DIR/foreign-const-syntactic-fail.rs:7:11\n+   |\n+LL |     const A: isize;\n+   |     ------^\n+   |     |\n+   |     help: try using a static value: `static`\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: extern items cannot be `const`\n+  --> $DIR/foreign-const-syntactic-fail.rs:8:11\n+   |\n+LL |     const B: isize = 42;\n+   |     ------^\n+   |     |\n+   |     help: try using a static value: `static`\n+   |\n+   = note: for more information, visit https://doc.rust-lang.org/std/keyword.extern.html\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "bacef8e71d62e4bfe8454c11dc58a2311650c8b5", "filename": "src/test/ui/parser/foreign-const-syntactic-pass.rs", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5abedd81e04dc1b76db423ca351ef5d3056a6f97/src%2Ftest%2Fui%2Fparser%2Fforeign-const-syntactic-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5abedd81e04dc1b76db423ca351ef5d3056a6f97/src%2Ftest%2Fui%2Fparser%2Fforeign-const-syntactic-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fforeign-const-syntactic-pass.rs?ref=5abedd81e04dc1b76db423ca351ef5d3056a6f97", "patch": "@@ -1,11 +0,0 @@\n-// Syntactically, a `const` item inside an `extern { ... }` block is allowed.\n-\n-// check-pass\n-\n-fn main() {}\n-\n-#[cfg(FALSE)]\n-extern {\n-    const A: isize;\n-    const B: isize = 42;\n-}"}]}