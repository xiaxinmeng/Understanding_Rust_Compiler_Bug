{"sha": "cd8ec6d9236867d3f088432033f56b6ad29c15a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkOGVjNmQ5MjM2ODY3ZDNmMDg4NDMyMDMzZjU2YjZhZDI5YzE1YTc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-11T02:35:58Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-11T02:36:11Z"}, "message": "Fix ebml tests", "tree": {"sha": "3481d9389ef1a18f8a617c7ada2337290b600e2a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3481d9389ef1a18f8a617c7ada2337290b600e2a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd8ec6d9236867d3f088432033f56b6ad29c15a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd8ec6d9236867d3f088432033f56b6ad29c15a7", "html_url": "https://github.com/rust-lang/rust/commit/cd8ec6d9236867d3f088432033f56b6ad29c15a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd8ec6d9236867d3f088432033f56b6ad29c15a7/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "url": "https://api.github.com/repos/rust-lang/rust/commits/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64", "html_url": "https://github.com/rust-lang/rust/commit/298eb8c7260fe321e30d9c5e22f4ecefc82c4f64"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "1d70bfaf00a2d1675f97dc2b6fc383a8147cd1c7", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd8ec6d9236867d3f088432033f56b6ad29c15a7/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd8ec6d9236867d3f088432033f56b6ad29c15a7/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=cd8ec6d9236867d3f088432033f56b6ad29c15a7", "patch": "@@ -570,11 +570,11 @@ impl EbmlDeserializer: serialization::Deserializer {\n \n #[test]\n fn test_option_int() {\n-    fn serialize_1<S: serialization::serializer>(s: S, v: int) {\n+    fn serialize_1<S: serialization::Serializer>(s: S, v: int) {\n         s.emit_i64(v as i64);\n     }\n \n-    fn serialize_0<S: serialization::serializer>(s: S, v: Option<int>) {\n+    fn serialize_0<S: serialization::Serializer>(s: S, v: Option<int>) {\n         do s.emit_enum(~\"core::option::t\") {\n             match v {\n               None => s.emit_enum_variant(\n@@ -588,11 +588,11 @@ fn test_option_int() {\n         }\n     }\n \n-    fn deserialize_1<S: serialization::deserializer>(s: S) -> int {\n+    fn deserialize_1<S: serialization::Deserializer>(s: S) -> int {\n         s.read_i64() as int\n     }\n \n-    fn deserialize_0<S: serialization::deserializer>(s: S) -> Option<int> {\n+    fn deserialize_0<S: serialization::Deserializer>(s: S) -> Option<int> {\n         do s.read_enum(~\"core::option::t\") {\n             do s.read_enum_variant |i| {\n                 match i {"}]}