{"sha": "1fdfd3b1d60b49a9f3c248781c7a82c617c55769", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmZGZkM2IxZDYwYjQ5YTlmM2MyNDg3ODFjN2E4MmM2MTdjNTU3Njk=", "commit": {"author": {"name": "Jakub Wieczorek", "email": "jakubw@jakubw.net", "date": "2012-12-15T23:11:58Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-12-18T00:50:40Z"}, "message": "Simplify the exhaustiveness check and add comments", "tree": {"sha": "a2c97d9715f422afa8be0a0af5f12bdc92186337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2c97d9715f422afa8be0a0af5f12bdc92186337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1fdfd3b1d60b49a9f3c248781c7a82c617c55769", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1fdfd3b1d60b49a9f3c248781c7a82c617c55769", "html_url": "https://github.com/rust-lang/rust/commit/1fdfd3b1d60b49a9f3c248781c7a82c617c55769", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1fdfd3b1d60b49a9f3c248781c7a82c617c55769/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "856dbac56726e34a010d2a74d5e19ef5c3e2ede3", "url": "https://api.github.com/repos/rust-lang/rust/commits/856dbac56726e34a010d2a74d5e19ef5c3e2ede3", "html_url": "https://github.com/rust-lang/rust/commit/856dbac56726e34a010d2a74d5e19ef5c3e2ede3"}], "stats": {"total": 74, "additions": 37, "deletions": 37}, "files": [{"sha": "ef192a0fda730d7ac44e520a8e4e1c021b12bf60", "filename": "src/librustc/middle/check_alt.rs", "status": "modified", "additions": 37, "deletions": 37, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/1fdfd3b1d60b49a9f3c248781c7a82c617c55769/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1fdfd3b1d60b49a9f3c248781c7a82c617c55769/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_alt.rs?ref=1fdfd3b1d60b49a9f3c248781c7a82c617c55769", "patch": "@@ -392,49 +392,49 @@ fn missing_ctor(cx: @AltCheckCtxt,\n         else { Some(val(const_bool(true))) }\n       }\n       ty::ty_unboxed_vec(*) | ty::ty_evec(*) => {\n-        let max_len = do m.foldr(0) |r, max_len| {\n-          match r[0].node {\n-            pat_vec(elems, _) => uint::max(elems.len(), max_len),\n-            _ => max_len\n-          }\n-        };\n-        let min_len_with_tail = do m.foldr(max_len + 1) |r, min_len| {\n-          match r[0].node {\n-            pat_vec(elems, tail) => {\n-              if tail.is_some() && elems.len() < min_len {\n-                elems.len()\n-              } else {\n-                min_len\n-              }\n-            }\n-            _ => min_len\n-          }\n-        };\n-        let vec_lens = do m.filter_map |r| {\n-          match r[0].node {\n-            pat_vec(elems, tail) => {\n-              match tail {\n-                None if elems.len() < min_len_with_tail => Some(elems.len()),\n+\n+        // Find the lengths and tails of all vector patterns.\n+        let vec_pat_lens = do m.filter_map |r| {\n+            match r[0].node {\n+                pat_vec(elems, tail) => {\n+                    Some((elems.len(), tail.is_some()))\n+                }\n                 _ => None\n-              }\n             }\n-            _ => None\n-          }\n-        };\n-        let mut sorted_vec_lens = do sort::merge_sort(vec_lens) |a, b| {\n-          a < b\n         };\n+\n+        // Sort them by length such that for patterns of the same length,\n+        // those with a destructured tail come first.\n+        let mut sorted_vec_lens = sort::merge_sort(vec_pat_lens,\n+            |&(len1, tail1), &(len2, tail2)| {\n+                if len1 == len2 {\n+                    tail1 > tail2\n+                } else {\n+                    len1 <= len2\n+                }\n+            }\n+        );\n         vec::dedup(&mut sorted_vec_lens);\n \n+        let mut found_tail = false;\n+        let mut next = 0;\n         let mut missing = None;\n-        for uint::range(0, min_len_with_tail) |i| {\n-          if i >= sorted_vec_lens.len() || i != sorted_vec_lens[i] {\n-            missing = Some(i);\n-            break;\n-          }\n-        };\n-        if missing.is_none() && min_len_with_tail > max_len {\n-          missing = Some(min_len_with_tail);\n+        for sorted_vec_lens.each |&(length, tail)| {\n+            if length != next {\n+                missing = Some(next);\n+                break;\n+            }\n+            if tail {\n+                found_tail = true;\n+                break;\n+            }\n+            next += 1;\n+        }\n+\n+        // We found patterns of all lengths within <0, next), yet there was no\n+        // pattern with a tail - therefore, we report vec(next) as missing.\n+        if !found_tail {\n+            missing = Some(next);\n         }\n         match missing {\n           Some(k) => Some(vec(k)),"}]}