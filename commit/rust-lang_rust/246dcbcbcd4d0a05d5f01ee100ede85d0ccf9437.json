{"sha": "246dcbcbcd4d0a05d5f01ee100ede85d0ccf9437", "node_id": "C_kwDOAAsO6NoAKDI0NmRjYmNiY2Q0ZDBhMDVkNWYwMWVlMTAwZWRlODVkMGNjZjk0Mzc", "commit": {"author": {"name": "beetrees", "email": "b@beetr.ee", "date": "2023-04-08T20:47:21Z"}, "committer": {"name": "beetrees", "email": "b@beetr.ee", "date": "2023-05-15T14:04:45Z"}, "message": "Add test for `FileTimes`", "tree": {"sha": "52dec1dcd01fb40ad092868c2359f405b52f9d34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52dec1dcd01fb40ad092868c2359f405b52f9d34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/246dcbcbcd4d0a05d5f01ee100ede85d0ccf9437", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYKAB0WIQT9oej+Slbzs/bk2IuHkb11QZHr1gUCZGI7/QAKCRCHkb11QZHr\n1rAhAP9b3ASNCF6SruG7PyHPcbroiY3Iiw8oqh8E9uVyy9k+vQEApQcTQMKVxUZe\njXJlAdUlSbhd55Vdct9sJrrhRlZSuwg=\n=Of5J\n-----END PGP SIGNATURE-----", "payload": "tree 52dec1dcd01fb40ad092868c2359f405b52f9d34\nparent db90a0b78d9d4f455fa6e1fd9676ca264e370803\nauthor beetrees <b@beetr.ee> 1680986841 +0100\ncommitter beetrees <b@beetr.ee> 1684159485 +0100\n\nAdd test for `FileTimes`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/246dcbcbcd4d0a05d5f01ee100ede85d0ccf9437", "html_url": "https://github.com/rust-lang/rust/commit/246dcbcbcd4d0a05d5f01ee100ede85d0ccf9437", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/246dcbcbcd4d0a05d5f01ee100ede85d0ccf9437/comments", "author": {"login": "beetrees", "id": 107947675, "node_id": "U_kgDOBm8mmw", "avatar_url": "https://avatars.githubusercontent.com/u/107947675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beetrees", "html_url": "https://github.com/beetrees", "followers_url": "https://api.github.com/users/beetrees/followers", "following_url": "https://api.github.com/users/beetrees/following{/other_user}", "gists_url": "https://api.github.com/users/beetrees/gists{/gist_id}", "starred_url": "https://api.github.com/users/beetrees/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beetrees/subscriptions", "organizations_url": "https://api.github.com/users/beetrees/orgs", "repos_url": "https://api.github.com/users/beetrees/repos", "events_url": "https://api.github.com/users/beetrees/events{/privacy}", "received_events_url": "https://api.github.com/users/beetrees/received_events", "type": "User", "site_admin": false}, "committer": {"login": "beetrees", "id": 107947675, "node_id": "U_kgDOBm8mmw", "avatar_url": "https://avatars.githubusercontent.com/u/107947675?v=4", "gravatar_id": "", "url": "https://api.github.com/users/beetrees", "html_url": "https://github.com/beetrees", "followers_url": "https://api.github.com/users/beetrees/followers", "following_url": "https://api.github.com/users/beetrees/following{/other_user}", "gists_url": "https://api.github.com/users/beetrees/gists{/gist_id}", "starred_url": "https://api.github.com/users/beetrees/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/beetrees/subscriptions", "organizations_url": "https://api.github.com/users/beetrees/orgs", "repos_url": "https://api.github.com/users/beetrees/repos", "events_url": "https://api.github.com/users/beetrees/events{/privacy}", "received_events_url": "https://api.github.com/users/beetrees/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db90a0b78d9d4f455fa6e1fd9676ca264e370803", "url": "https://api.github.com/repos/rust-lang/rust/commits/db90a0b78d9d4f455fa6e1fd9676ca264e370803", "html_url": "https://github.com/rust-lang/rust/commit/db90a0b78d9d4f455fa6e1fd9676ca264e370803"}], "stats": {"total": 54, "additions": 52, "deletions": 2}, "files": [{"sha": "e2480bcbbc729381e259441d74949de48594d518", "filename": "library/std/src/fs/tests.rs", "status": "modified", "additions": 52, "deletions": 2, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/246dcbcbcd4d0a05d5f01ee100ede85d0ccf9437/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/246dcbcbcd4d0a05d5f01ee100ede85d0ccf9437/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ffs%2Ftests.rs?ref=246dcbcbcd4d0a05d5f01ee100ede85d0ccf9437", "patch": "@@ -1,15 +1,15 @@\n use crate::io::prelude::*;\n \n use crate::env;\n-use crate::fs::{self, File, OpenOptions};\n+use crate::fs::{self, File, FileTimes, OpenOptions};\n use crate::io::{BorrowedBuf, ErrorKind, SeekFrom};\n use crate::mem::MaybeUninit;\n use crate::path::Path;\n use crate::str;\n use crate::sync::Arc;\n use crate::sys_common::io::test::{tmpdir, TempDir};\n use crate::thread;\n-use crate::time::{Duration, Instant};\n+use crate::time::{Duration, Instant, SystemTime};\n \n use rand::RngCore;\n \n@@ -1633,3 +1633,53 @@ fn rename_directory() {\n     assert!(new_path.join(\"newdir\").is_dir());\n     assert!(new_path.join(\"newdir/temp.txt\").exists());\n }\n+\n+#[test]\n+fn test_file_times() {\n+    #[cfg(target_os = \"ios\")]\n+    use crate::os::ios::fs::FileTimesExt;\n+    #[cfg(target_os = \"macos\")]\n+    use crate::os::macos::fs::FileTimesExt;\n+    #[cfg(target_os = \"watchos\")]\n+    use crate::os::watchos::fs::FileTimesExt;\n+    #[cfg(windows)]\n+    use crate::os::windows::fs::FileTimesExt;\n+\n+    let tmp = tmpdir();\n+    let file = File::create(tmp.join(\"foo\")).unwrap();\n+    let mut times = FileTimes::new();\n+    let accessed = SystemTime::UNIX_EPOCH + Duration::from_secs(12345);\n+    let modified = SystemTime::UNIX_EPOCH + Duration::from_secs(54321);\n+    times = times.set_accessed(accessed).set_modified(modified);\n+    #[cfg(any(windows, target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n+    let created = SystemTime::UNIX_EPOCH + Duration::from_secs(32123);\n+    #[cfg(any(windows, target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n+    {\n+        times = times.set_created(created);\n+    }\n+    match file.set_times(times) {\n+        // Allow unsupported errors on platforms which don't support setting times.\n+        #[cfg(not(any(\n+            windows,\n+            all(\n+                unix,\n+                not(any(\n+                    target_os = \"android\",\n+                    target_os = \"redox\",\n+                    target_os = \"espidf\",\n+                    target_os = \"horizon\"\n+                ))\n+            )\n+        )))]\n+        Err(e) if e.kind() == ErrorKind::Unsupported => return,\n+        Err(e) => panic!(\"error setting file times: {e:?}\"),\n+        Ok(_) => {}\n+    }\n+    let metadata = file.metadata().unwrap();\n+    assert_eq!(metadata.accessed().unwrap(), accessed);\n+    assert_eq!(metadata.modified().unwrap(), modified);\n+    #[cfg(any(windows, target_os = \"macos\", target_os = \"ios\", target_os = \"watchos\"))]\n+    {\n+        assert_eq!(metadata.created().unwrap(), created);\n+    }\n+}"}]}