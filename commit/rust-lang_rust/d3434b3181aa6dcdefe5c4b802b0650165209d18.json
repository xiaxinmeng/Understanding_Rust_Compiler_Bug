{"sha": "d3434b3181aa6dcdefe5c4b802b0650165209d18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNDM0YjMxODFhYTZkY2RlZmU1YzRiODAyYjA2NTAxNjUyMDlkMTg=", "commit": {"author": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-09-02T20:20:51Z"}, "committer": {"name": "Ellen", "email": "supbscripter@gmail.com", "date": "2021-09-02T20:22:13Z"}, "message": "E-not-needs-test", "tree": {"sha": "e3426fae1aa771b699675a6ade30578062206038", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3426fae1aa771b699675a6ade30578062206038"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3434b3181aa6dcdefe5c4b802b0650165209d18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3434b3181aa6dcdefe5c4b802b0650165209d18", "html_url": "https://github.com/rust-lang/rust/commit/d3434b3181aa6dcdefe5c4b802b0650165209d18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3434b3181aa6dcdefe5c4b802b0650165209d18/comments", "author": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BoxyUwU", "id": 21149742, "node_id": "MDQ6VXNlcjIxMTQ5NzQy", "avatar_url": "https://avatars.githubusercontent.com/u/21149742?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BoxyUwU", "html_url": "https://github.com/BoxyUwU", "followers_url": "https://api.github.com/users/BoxyUwU/followers", "following_url": "https://api.github.com/users/BoxyUwU/following{/other_user}", "gists_url": "https://api.github.com/users/BoxyUwU/gists{/gist_id}", "starred_url": "https://api.github.com/users/BoxyUwU/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BoxyUwU/subscriptions", "organizations_url": "https://api.github.com/users/BoxyUwU/orgs", "repos_url": "https://api.github.com/users/BoxyUwU/repos", "events_url": "https://api.github.com/users/BoxyUwU/events{/privacy}", "received_events_url": "https://api.github.com/users/BoxyUwU/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1cf8fdd4f0be26bcfa9e3b1e10d4bf80107ba492", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cf8fdd4f0be26bcfa9e3b1e10d4bf80107ba492", "html_url": "https://github.com/rust-lang/rust/commit/1cf8fdd4f0be26bcfa9e3b1e10d4bf80107ba492"}], "stats": {"total": 203, "additions": 203, "deletions": 0}, "files": [{"sha": "a3a0d8d06e87cb5de00620a2dd22d490769b1ba5", "filename": "src/test/ui/const-generics/issues/issue-82956.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.rs?ref=d3434b3181aa6dcdefe5c4b802b0650165209d18", "patch": "@@ -0,0 +1,33 @@\n+#![feature(generic_const_exprs, array_map)]\n+#![allow(incomplete_features)]\n+\n+pub struct ConstCheck<const CHECK: bool>;\n+\n+pub trait True {}\n+impl True for ConstCheck<true> {}\n+\n+pub trait OrdesDec {\n+    type Newlen;\n+    type Output;\n+\n+    fn pop(self) -> (Self::Newlen, Self::Output);\n+}\n+\n+impl<T, const N: usize> OrdesDec for [T; N]\n+where\n+    ConstCheck<{N > 1}>: True,\n+    [T; N - 1]: Sized,\n+{\n+    type Newlen = [T; N - 1];\n+    type Output = T;\n+\n+    fn pop(self) -> (Self::Newlen, Self::Output) {\n+        let mut iter = IntoIter::new(self);\n+        //~^ ERROR: failed to resolve: use of undeclared type `IntoIter`\n+        let end = iter.next_back().unwrap();\n+        let new = [(); N - 1].map(move |()| iter.next().unwrap());\n+        (new, end)\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "c8b999da9810437f0c033db1a8f536a7bffb60ee", "filename": "src/test/ui/const-generics/issues/issue-82956.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.stderr?ref=d3434b3181aa6dcdefe5c4b802b0650165209d18", "patch": "@@ -0,0 +1,21 @@\n+error[E0433]: failed to resolve: use of undeclared type `IntoIter`\n+  --> $DIR/issue-82956.rs:25:24\n+   |\n+LL |         let mut iter = IntoIter::new(self);\n+   |                        ^^^^^^^^ not found in this scope\n+   |\n+help: consider importing one of these items\n+   |\n+LL | use std::array::IntoIter;\n+   |\n+LL | use std::collections::binary_heap::IntoIter;\n+   |\n+LL | use std::collections::btree_map::IntoIter;\n+   |\n+LL | use std::collections::btree_set::IntoIter;\n+   |\n+     and 8 other candidates\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0433`."}, {"sha": "440ca740af2b05dee11fab5be35e4770bba37d3c", "filename": "src/test/ui/const-generics/issues/issue-84659.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-84659.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-84659.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-84659.rs?ref=d3434b3181aa6dcdefe5c4b802b0650165209d18", "patch": "@@ -0,0 +1,12 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_const_exprs)]\n+\n+trait Bar<const N: usize> {}\n+\n+trait Foo<'a> {\n+    const N: usize;\n+    type Baz: Bar<{ Self::N }>;\n+    //~^ ERROR: unconstrained generic constant\n+}\n+\n+fn main() {}"}, {"sha": "2dfc48a34e4b19d4a06e9bb9f63e94fafdf988b8", "filename": "src/test/ui/const-generics/issues/issue-84659.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-84659.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-84659.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-84659.stderr?ref=d3434b3181aa6dcdefe5c4b802b0650165209d18", "patch": "@@ -0,0 +1,10 @@\n+error: unconstrained generic constant\n+  --> $DIR/issue-84659.rs:8:15\n+   |\n+LL |     type Baz: Bar<{ Self::N }>;\n+   |               ^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); { Self::N }]:`\n+\n+error: aborting due to previous error\n+"}, {"sha": "919d3ca197f8f093d15f0b8aa0153f7f930fd97d", "filename": "src/test/ui/const-generics/issues/issue-86530.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.rs?ref=d3434b3181aa6dcdefe5c4b802b0650165209d18", "patch": "@@ -0,0 +1,20 @@\n+#![feature(generic_const_exprs)]\n+#![allow(incomplete_features)]                                                                                                                                                                                                                \n+\n+pub trait X {\n+    const Y: usize;\n+}\n+\n+fn z<T>(t: T)\n+where\n+    T: X,\n+    [(); T::Y]: ,\n+{\n+}\n+\n+fn unit_literals() {\n+    z(\" \");\n+    //~^ ERROR: the trait bound `&str: X` is not satisfied\n+}\n+\n+fn main() {}"}, {"sha": "7cdfc9dfcdf5a2404ff2b095e37a9f1ed8acb9e1", "filename": "src/test/ui/const-generics/issues/issue-86530.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86530.stderr?ref=d3434b3181aa6dcdefe5c4b802b0650165209d18", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `&str: X` is not satisfied\n+  --> $DIR/issue-86530.rs:16:7\n+   |\n+LL |     z(\" \");\n+   |       ^^^ the trait `X` is not implemented for `&str`\n+   |\n+note: required by a bound in `z`\n+  --> $DIR/issue-86530.rs:10:8\n+   |\n+LL | fn z<T>(t: T)\n+   |    - required by a bound in this\n+LL | where\n+LL |     T: X,\n+   |        ^ required by this bound in `z`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "9a02b09b15502f855f097b20f38a3b38ed905e77", "filename": "src/test/ui/const-generics/issues/issue-86535-2.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86535-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86535-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86535-2.rs?ref=d3434b3181aa6dcdefe5c4b802b0650165209d18", "patch": "@@ -0,0 +1,19 @@\n+// run-pass\n+#![feature(adt_const_params, generic_const_exprs)]\n+#![allow(incomplete_features)]                                                                                                                                                                                                                \n+\n+pub trait Foo {\n+    const ASSOC_C: usize;\n+    fn foo() where [(); Self::ASSOC_C]:;\n+}\n+\n+struct Bar<const N: &'static ()>;\n+impl<const N: &'static ()> Foo for Bar<N> {\n+    const ASSOC_C: usize = 3;\n+\n+    fn foo() where [u8; Self::ASSOC_C]: {\n+        let _: [u8; Self::ASSOC_C] = loop {};\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "5289c4e99dd6fb062cc122eb282cebd7175803d4", "filename": "src/test/ui/const-generics/issues/issue-86535.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86535.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86535.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-86535.rs?ref=d3434b3181aa6dcdefe5c4b802b0650165209d18", "patch": "@@ -0,0 +1,20 @@\n+// run-pass\n+#![feature(adt_const_params, generic_const_exprs)]\n+#![allow(incomplete_features, unused_variables)]\n+\n+struct F<const S: &'static str>;\n+impl<const S: &'static str> X for F<{ S }> {\n+    const W: usize = 3;\n+\n+    fn d(r: &[u8; Self::W]) -> F<{ S }> {\n+        let x: [u8; Self::W] = [0; Self::W];\n+        F\n+    }\n+}\n+\n+pub trait X {\n+    const W: usize;\n+    fn d(r: &[u8; Self::W]) -> Self;\n+}\n+\n+fn main() {}"}, {"sha": "b147c246bdac8546c963e37d116253884607b445", "filename": "src/test/ui/const-generics/sneaky-array-repeat-expr.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.rs?ref=d3434b3181aa6dcdefe5c4b802b0650165209d18", "patch": "@@ -0,0 +1,32 @@\n+trait Trait<const N: usize> {\n+    const Assoc: usize;\n+}\n+\n+impl<const N: usize> Trait<N> for () {\n+    const Assoc: usize = 1;\n+}\n+\n+\n+pub const fn foo<const N: usize>() where (): Trait<N> {\n+    let bar = [(); <()>::Assoc];\n+    //~^ error: constant expression depends on a generic parameter\n+}\n+\n+trait Trait2<const N: usize> {\n+    const Assoc2: usize;\n+}\n+\n+impl<const N: usize> Trait2<N> for () {\n+    const Assoc2: usize = N - 1;\n+}\n+\n+\n+pub const fn foo2<const N: usize>() where (): Trait2<N> {\n+    let bar2 = [(); <()>::Assoc2];\n+    //~^ error: constant expression depends on a generic parameter\n+}\n+\n+fn main() {\n+    foo::<0>();\n+    foo2::<0>();\n+}"}, {"sha": "5c77375d39934a1d532f6f2b7dd979c29039db83", "filename": "src/test/ui/const-generics/sneaky-array-repeat-expr.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d3434b3181aa6dcdefe5c4b802b0650165209d18/src%2Ftest%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fsneaky-array-repeat-expr.stderr?ref=d3434b3181aa6dcdefe5c4b802b0650165209d18", "patch": "@@ -0,0 +1,18 @@\n+error: constant expression depends on a generic parameter\n+  --> $DIR/sneaky-array-repeat-expr.rs:11:20\n+   |\n+LL |     let bar = [(); <()>::Assoc];\n+   |                    ^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/sneaky-array-repeat-expr.rs:25:21\n+   |\n+LL |     let bar2 = [(); <()>::Assoc2];\n+   |                     ^^^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n+"}]}