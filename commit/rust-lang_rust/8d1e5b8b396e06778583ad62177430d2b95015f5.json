{"sha": "8d1e5b8b396e06778583ad62177430d2b95015f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMWU1YjhiMzk2ZTA2Nzc4NTgzYWQ2MjE3NzQzMGQyYjk1MDE1ZjU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-03-19T03:47:07Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-10T17:41:10Z"}, "message": "Various test changes", "tree": {"sha": "b80a16cc476b31285d49767f1f71a4f41a53920d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b80a16cc476b31285d49767f1f71a4f41a53920d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d1e5b8b396e06778583ad62177430d2b95015f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1e5b8b396e06778583ad62177430d2b95015f5", "html_url": "https://github.com/rust-lang/rust/commit/8d1e5b8b396e06778583ad62177430d2b95015f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d1e5b8b396e06778583ad62177430d2b95015f5/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "99039689f0c097703c7258c339b05d1c88e54ff8", "url": "https://api.github.com/repos/rust-lang/rust/commits/99039689f0c097703c7258c339b05d1c88e54ff8", "html_url": "https://github.com/rust-lang/rust/commit/99039689f0c097703c7258c339b05d1c88e54ff8"}], "stats": {"total": 219, "additions": 200, "deletions": 19}, "files": [{"sha": "6bc7d286e3adba5b6826647ddb77a5a6342e16a2", "filename": "src/test/incremental/hashes/if_expressions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Fif_expressions.rs?ref=8d1e5b8b396e06778583ad62177430d2b95015f5", "patch": "@@ -94,7 +94,7 @@ pub fn add_else_branch(x: bool) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_else_branch(x: bool) -> u32 {\n     let mut ret = 1;\n@@ -191,7 +191,7 @@ pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\n }\n \n #[cfg(not(cfail1))]\n-#[rustc_clean(cfg=\"cfail2\", except=\"HirBody,typeck_tables_of\")]\n+#[rustc_clean(cfg=\"cfail2\", except=\"HirBody\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn add_else_branch_if_let(x: Option<u32>) -> u32 {\n     let mut ret = 1;"}, {"sha": "a64281833e5cbc438632ed3037c2f84ac3b9a8f5", "filename": "src/test/run-pass/if-ret.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Frun-pass%2Fif-ret.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Frun-pass%2Fif-ret.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-ret.stderr?ref=8d1e5b8b396e06778583ad62177430d2b95015f5", "patch": "@@ -0,0 +1,8 @@\n+warning: unreachable block in `if` expression\n+  --> $DIR/if-ret.rs:4:24\n+   |\n+LL | fn foo() { if (return) { } }\n+   |                        ^^^\n+   |\n+   = note: #[warn(unreachable_code)] on by default\n+"}, {"sha": "0f8815f0479f5fa256c449d316c9193d1dadd430", "filename": "src/test/ui/if/if-let-arm-types.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.rs?ref=8d1e5b8b396e06778583ad62177430d2b95015f5", "patch": "@@ -1,11 +1,12 @@\n fn main() {\n     if let Some(b) = None {\n-        //~^ NOTE if let` arms have incompatible types\n+        //~^ NOTE if and else have incompatible types\n         ()\n+        //~^ NOTE expected because of this\n     } else {\n         1\n     };\n-    //~^^ ERROR: `if let` arms have incompatible types\n+    //~^^ ERROR: if and else have incompatible types\n     //~| NOTE expected (), found integer\n     //~| NOTE expected type `()`\n }"}, {"sha": "ff88de20f76ccf709b9991361d3fe2edf1b67e20", "filename": "src/test/ui/if/if-let-arm-types.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-let-arm-types.stderr?ref=8d1e5b8b396e06778583ad62177430d2b95015f5", "patch": "@@ -1,14 +1,16 @@\n-error[E0308]: `if let` arms have incompatible types\n-  --> $DIR/if-let-arm-types.rs:6:9\n+error[E0308]: if and else have incompatible types\n+  --> $DIR/if-let-arm-types.rs:7:9\n    |\n LL | /     if let Some(b) = None {\n LL | |\n LL | |         ()\n+   | |         -- expected because of this\n+LL | |\n LL | |     } else {\n LL | |         1\n    | |         ^ expected (), found integer\n LL | |     };\n-   | |_____- `if let` arms have incompatible types\n+   | |_____- if and else have incompatible types\n    |\n    = note: expected type `()`\n               found type `{integer}`"}, {"sha": "15892de83854c215f7e81cf8ba2ca20762a78c56", "filename": "src/test/ui/if/if-without-else-as-fn-expr.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.rs?ref=8d1e5b8b396e06778583ad62177430d2b95015f5", "patch": "@@ -3,13 +3,15 @@ fn foo(bar: usize) -> usize {\n         return 3;\n     }\n     //~^^^ ERROR if may be missing an else clause\n+    //~| ERROR mismatched types [E0308]\n }\n \n fn foo2(bar: usize) -> usize {\n     let x: usize = if bar % 5 == 0 {\n         return 3;\n     };\n     //~^^^ ERROR if may be missing an else clause\n+    //~| ERROR mismatched types [E0308]\n     x\n }\n \n@@ -18,8 +20,36 @@ fn foo3(bar: usize) -> usize {\n         3\n     }\n     //~^^^ ERROR if may be missing an else clause\n+    //~| ERROR mismatched types [E0308]\n }\n \n+fn foo_let(bar: usize) -> usize {\n+    if let 0 = 1 {\n+        return 3;\n+    }\n+    //~^^^ ERROR if may be missing an else clause\n+    //~| ERROR mismatched types [E0308]\n+}\n+\n+fn foo2_let(bar: usize) -> usize {\n+    let x: usize = if let 0 = 1 {\n+        return 3;\n+    };\n+    //~^^^ ERROR if may be missing an else clause\n+    //~| ERROR mismatched types [E0308]\n+    x\n+}\n+\n+fn foo3_let(bar: usize) -> usize {\n+    if let 0 = 1 {\n+        3\n+    }\n+    //~^^^ ERROR if may be missing an else clause\n+    //~| ERROR mismatched types [E0308]\n+}\n+\n+// FIXME(60254): deduplicate first error in favor of second.\n+\n fn main() {\n     let _ = foo(1);\n }"}, {"sha": "06600b1cb9aea34da952af9915b9d05085e482cd", "filename": "src/test/ui/if/if-without-else-as-fn-expr.stderr", "status": "modified", "additions": 119, "deletions": 4, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-else-as-fn-expr.stderr?ref=8d1e5b8b396e06778583ad62177430d2b95015f5", "patch": "@@ -1,3 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/if-without-else-as-fn-expr.rs:2:5\n+   |\n+LL | /     if bar % 5 == 0 {\n+LL | |         return 3;\n+LL | |     }\n+   | |_____^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+\n error[E0317]: if may be missing an else clause\n   --> $DIR/if-without-else-as-fn-expr.rs:2:5\n    |\n@@ -13,8 +24,20 @@ LL | |     }\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n+error[E0308]: mismatched types\n+  --> $DIR/if-without-else-as-fn-expr.rs:10:20\n+   |\n+LL |       let x: usize = if bar % 5 == 0 {\n+   |  ____________________^\n+LL | |         return 3;\n+LL | |     };\n+   | |_____^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+\n error[E0317]: if may be missing an else clause\n-  --> $DIR/if-without-else-as-fn-expr.rs:9:20\n+  --> $DIR/if-without-else-as-fn-expr.rs:10:20\n    |\n LL |       let x: usize = if bar % 5 == 0 {\n    |  _________-__________^\n@@ -29,8 +52,19 @@ LL | |     };\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n+error[E0308]: mismatched types\n+  --> $DIR/if-without-else-as-fn-expr.rs:19:5\n+   |\n+LL | /     if bar % 5 == 0 {\n+LL | |         3\n+LL | |     }\n+   | |_____^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+\n error[E0317]: if may be missing an else clause\n-  --> $DIR/if-without-else-as-fn-expr.rs:17:5\n+  --> $DIR/if-without-else-as-fn-expr.rs:19:5\n    |\n LL |   fn foo3(bar: usize) -> usize {\n    |                          ----- expected `usize` because of this return type\n@@ -44,6 +78,87 @@ LL | |     }\n    = note: `if` expressions without `else` evaluate to `()`\n    = help: consider adding an `else` block that evaluates to the expected type\n \n-error: aborting due to 3 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/if-without-else-as-fn-expr.rs:27:5\n+   |\n+LL | /     if let 0 = 1 {\n+LL | |         return 3;\n+LL | |     }\n+   | |_____^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+\n+error[E0317]: if may be missing an else clause\n+  --> $DIR/if-without-else-as-fn-expr.rs:27:5\n+   |\n+LL |   fn foo_let(bar: usize) -> usize {\n+   |                             ----- expected `usize` because of this return type\n+LL | /     if let 0 = 1 {\n+LL | |         return 3;\n+LL | |     }\n+   | |_____^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+   = note: `if` expressions without `else` evaluate to `()`\n+   = help: consider adding an `else` block that evaluates to the expected type\n+\n+error[E0308]: mismatched types\n+  --> $DIR/if-without-else-as-fn-expr.rs:35:20\n+   |\n+LL |       let x: usize = if let 0 = 1 {\n+   |  ____________________^\n+LL | |         return 3;\n+LL | |     };\n+   | |_____^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+\n+error[E0317]: if may be missing an else clause\n+  --> $DIR/if-without-else-as-fn-expr.rs:35:20\n+   |\n+LL |       let x: usize = if let 0 = 1 {\n+   |  _________-__________^\n+   | |         |\n+   | |         expected because of this assignment\n+LL | |         return 3;\n+LL | |     };\n+   | |_____^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+   = note: `if` expressions without `else` evaluate to `()`\n+   = help: consider adding an `else` block that evaluates to the expected type\n+\n+error[E0308]: mismatched types\n+  --> $DIR/if-without-else-as-fn-expr.rs:44:5\n+   |\n+LL | /     if let 0 = 1 {\n+LL | |         3\n+LL | |     }\n+   | |_____^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+\n+error[E0317]: if may be missing an else clause\n+  --> $DIR/if-without-else-as-fn-expr.rs:44:5\n+   |\n+LL |   fn foo3_let(bar: usize) -> usize {\n+   |                              ----- expected `usize` because of this return type\n+LL | /     if let 0 = 1 {\n+LL | |         3\n+LL | |     }\n+   | |_____^ expected usize, found ()\n+   |\n+   = note: expected type `usize`\n+              found type `()`\n+   = note: `if` expressions without `else` evaluate to `()`\n+   = help: consider adding an `else` block that evaluates to the expected type\n+\n+error: aborting due to 12 previous errors\n \n-For more information about this error, try `rustc --explain E0317`.\n+Some errors have detailed explanations: E0308, E0317.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "d9ea910adef5027c7302e7b5671bd319f33256c6", "filename": "src/test/ui/issues/issue-19991.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19991.stderr?ref=8d1e5b8b396e06778583ad62177430d2b95015f5", "patch": "@@ -6,11 +6,14 @@ LL | |\n LL | |\n LL | |\n LL | |         765\n+   | |         --- found here\n LL | |     };\n    | |_____^ expected (), found integer\n    |\n    = note: expected type `()`\n               found type `{integer}`\n+   = note: `if` expressions without `else` evaluate to `()`\n+   = help: consider adding an `else` block that evaluates to the expected type\n \n error: aborting due to previous error\n "}, {"sha": "bf892a8daa27ff5877d335903919e694a5bab8b0", "filename": "src/test/ui/issues/issue-50577.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Fissues%2Fissue-50577.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Fissues%2Fissue-50577.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50577.rs?ref=8d1e5b8b396e06778583ad62177430d2b95015f5", "patch": "@@ -2,5 +2,6 @@ fn main() {\n     enum Foo {\n         Drop = assert_eq!(1, 1)\n         //~^ ERROR if may be missing an else clause\n+        //~| ERROR mismatched types [E0308]\n     }\n }"}, {"sha": "413c8c5c80b52c6c4ff97520c260f0e2d30679cd", "filename": "src/test/ui/issues/issue-50577.stderr", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-50577.stderr?ref=8d1e5b8b396e06778583ad62177430d2b95015f5", "patch": "@@ -1,3 +1,13 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-50577.rs:3:16\n+   |\n+LL |         Drop = assert_eq!(1, 1)\n+   |                ^^^^^^^^^^^^^^^^ expected isize, found ()\n+   |\n+   = note: expected type `isize`\n+              found type `()`\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n error[E0317]: if may be missing an else clause\n   --> $DIR/issue-50577.rs:3:16\n    |\n@@ -13,6 +23,7 @@ LL |         Drop = assert_eq!(1, 1)\n    = help: consider adding an `else` block that evaluates to the expected type\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0317`.\n+Some errors have detailed explanations: E0308, E0317.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "a3d54892de5bbc61f2649a85ec512fbb9cc8dcdc", "filename": "src/test/ui/reachable/expr_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Freachable%2Fexpr_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Freachable%2Fexpr_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.rs?ref=8d1e5b8b396e06778583ad62177430d2b95015f5", "patch": "@@ -4,7 +4,7 @@\n #![deny(unreachable_code)]\n \n fn foo() {\n-    if {return} {\n+    if {return} { //~ ERROR unreachable block in `if` expression\n         println!(\"Hello, world!\");\n     }\n }"}, {"sha": "f1690e595e5d1367941ccc95e3a742a9b96dc6c1", "filename": "src/test/ui/reachable/expr_if.stderr", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8d1e5b8b396e06778583ad62177430d2b95015f5/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Freachable%2Fexpr_if.stderr?ref=8d1e5b8b396e06778583ad62177430d2b95015f5", "patch": "@@ -1,15 +1,25 @@\n-error: unreachable statement\n-  --> $DIR/expr_if.rs:27:5\n+error: unreachable block in `if` expression\n+  --> $DIR/expr_if.rs:7:17\n    |\n-LL |     println!(\"But I am.\");\n-   |     ^^^^^^^^^^^^^^^^^^^^^^\n+LL |       if {return} {\n+   |  _________________^\n+LL | |         println!(\"Hello, world!\");\n+LL | |     }\n+   | |_____^\n    |\n note: lint level defined here\n   --> $DIR/expr_if.rs:4:9\n    |\n LL | #![deny(unreachable_code)]\n    |         ^^^^^^^^^^^^^^^^\n+\n+error: unreachable statement\n+  --> $DIR/expr_if.rs:27:5\n+   |\n+LL |     println!(\"But I am.\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n    = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}]}