{"sha": "457019967bd2be3ce20b71e6d0beb3897b0a10eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NzAxOTk2N2JkMmJlM2NlMjBiNzFlNmQwYmViMzg5N2IwYTEwZWI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-10-04T16:02:19Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-10-04T16:02:19Z"}, "message": "Add symbol hash to trans::partitioning debug output.", "tree": {"sha": "0e7719a22a72fdbd5df72d9447a29f2dad649d64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e7719a22a72fdbd5df72d9447a29f2dad649d64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/457019967bd2be3ce20b71e6d0beb3897b0a10eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/457019967bd2be3ce20b71e6d0beb3897b0a10eb", "html_url": "https://github.com/rust-lang/rust/commit/457019967bd2be3ce20b71e6d0beb3897b0a10eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/457019967bd2be3ce20b71e6d0beb3897b0a10eb/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29212ecdc9867fe90cca637374c1c73eb2e43e6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/29212ecdc9867fe90cca637374c1c73eb2e43e6b", "html_url": "https://github.com/rust-lang/rust/commit/29212ecdc9867fe90cca637374c1c73eb2e43e6b"}], "stats": {"total": 21, "additions": 16, "deletions": 5}, "files": [{"sha": "0f76d358e78f12b57d083e9f964f29d57778eeb6", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 16, "deletions": 5, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/457019967bd2be3ce20b71e6d0beb3897b0a10eb/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/457019967bd2be3ce20b71e6d0beb3897b0a10eb/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=457019967bd2be3ce20b71e6d0beb3897b0a10eb", "patch": "@@ -266,14 +266,14 @@ pub fn partition<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n     let mut initial_partitioning = place_root_translation_items(scx,\n                                                                 trans_items);\n \n-    debug_dump(tcx, \"INITIAL PARTITONING:\", initial_partitioning.codegen_units.iter());\n+    debug_dump(scx, \"INITIAL PARTITONING:\", initial_partitioning.codegen_units.iter());\n \n     // If the partitioning should produce a fixed count of codegen units, merge\n     // until that count is reached.\n     if let PartitioningStrategy::FixedUnitCount(count) = strategy {\n         merge_codegen_units(&mut initial_partitioning, count, &tcx.crate_name[..]);\n \n-        debug_dump(tcx, \"POST MERGING:\", initial_partitioning.codegen_units.iter());\n+        debug_dump(scx, \"POST MERGING:\", initial_partitioning.codegen_units.iter());\n     }\n \n     // In the next step, we use the inlining map to determine which addtional\n@@ -283,7 +283,7 @@ pub fn partition<'a, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n     let post_inlining = place_inlined_translation_items(initial_partitioning,\n                                                         inlining_map);\n \n-    debug_dump(tcx, \"POST INLINING:\", post_inlining.0.iter());\n+    debug_dump(scx, \"POST INLINING:\", post_inlining.0.iter());\n \n     // Finally, sort by codegen unit name, so that we get deterministic results\n     let mut result = post_inlining.0;\n@@ -551,7 +551,7 @@ fn numbered_codegen_unit_name(crate_name: &str, index: usize) -> InternedString\n         index)[..])\n }\n \n-fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+fn debug_dump<'a, 'b, 'tcx, I>(scx: &SharedCrateContext<'a, 'tcx>,\n                                label: &str,\n                                cgus: I)\n     where I: Iterator<Item=&'b CodegenUnit<'tcx>>,\n@@ -560,10 +560,21 @@ fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     if cfg!(debug_assertions) {\n         debug!(\"{}\", label);\n         for cgu in cgus {\n+            let symbol_map = SymbolMap::build(scx, cgu.items\n+                                                      .iter()\n+                                                      .map(|(&trans_item, _)| trans_item));\n             debug!(\"CodegenUnit {}:\", cgu.name);\n \n             for (trans_item, linkage) in &cgu.items {\n-                debug!(\" - {} [{:?}]\", trans_item.to_string(tcx), linkage);\n+                let symbol_name = symbol_map.get_or_compute(scx, *trans_item);\n+                let symbol_hash_start = symbol_name.rfind('h');\n+                let symbol_hash = symbol_hash_start.map(|i| &symbol_name[i ..])\n+                                                   .unwrap_or(\"<no hash>\");\n+\n+                debug!(\" - {} [{:?}] [{}]\",\n+                       trans_item.to_string(scx.tcx()),\n+                       linkage,\n+                       symbol_hash);\n             }\n \n             debug!(\"\");"}]}