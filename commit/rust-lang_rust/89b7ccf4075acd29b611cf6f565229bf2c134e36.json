{"sha": "89b7ccf4075acd29b611cf6f565229bf2c134e36", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YjdjY2Y0MDc1YWNkMjliNjExY2Y2ZjU2NTIyOWJmMmMxMzRlMzY=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-18T02:47:36Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-10-18T04:55:13Z"}, "message": "Rollup merge of #55142 - RalfJung:miri-uninhabited-enum, r=oli-obk\n\nmiri: layout should not affect CTFE checks (outside of validation)\n\nEither the enum has no valid discriminant, then the code later will catch that; or it does, then we shouldn't error out so early (absent enforcing validity).\n\nInterestingly, the miri test suite still passes; my guess is we don't even get here for uninhabited types?\n\nr? @oli-obk", "tree": {"sha": "c2379eaba0a426d1d8371e3b96be1efc0a8bf687", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2379eaba0a426d1d8371e3b96be1efc0a8bf687"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89b7ccf4075acd29b611cf6f565229bf2c134e36", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlvIEjEACgkQ/vbIBR0O\nATzWSRAAvuuDAYZHBCd/sdIMRQgrA6iAi78+K2w1D4iam4byimgbzR+9fV7wOCCK\nJH9d+icSagRQPMJOscVa3XFrBNH569BhdGs/PD/NqQtJnv6y5M4qobyOtRx7SFA7\nry04DMy1cerbGMvxwgjzOeeRxP68ROzTeqEAMMgH3R0TBEgtvsVj45rikCIZPiRk\nRSW2mu3rQjXfyl2CLjdnpBM3IQxHywVr2gnBleqsYDTtFPUzeOlrXq42HqW1ifu2\nIttQczeHNoasejTiWT4+XoCcBGwaKDNfU6hVOlbZLT/IwV/Tl77fergjVhZXuF/0\nj0gb/3h8ZdhndLqWVdT+zRZyGauCwPLYkaxGuzIOAoJ4CT1asnczKKrFoAgV8gaf\nSGO/4CeJ14mbMqvZZbBY+fspTxyaXqSGDqCeCHaKmWpYxBr/ZsCYTMJOiF3iH42v\nETtha332WE08lnEdc3ZJxdXBQWT4E/wsY05aNyeBRsKzMPpT70dj63pO6IFt6nrX\nJ6bvkEz71hyxkR4HwIm/xMMXyKkSjo4ihb5psBSQD6nSVkv5fzEECVmra6D7r2uQ\nMTUxcuL1foJ1JQQBJsWm+CX52pFgxZ5IhGQcoQwGWFUEGdI9LmiQVreUk5dBOi6S\niVvclu2U9VA5WdC+Nbz3werro8UtU5mygtiXI+mGo0ufwYuc1Qs=\n=R3B1\n-----END PGP SIGNATURE-----", "payload": "tree c2379eaba0a426d1d8371e3b96be1efc0a8bf687\nparent 6f6878c073333f99fba834ac836757e10d989e10\nparent c31819b3ff35be5bdec58cba9515578fbff0a5b8\nauthor kennytm <kennytm@gmail.com> 1539830856 +0800\ncommitter kennytm <kennytm@gmail.com> 1539838513 +0800\n\nRollup merge of #55142 - RalfJung:miri-uninhabited-enum, r=oli-obk\n\nmiri: layout should not affect CTFE checks (outside of validation)\n\nEither the enum has no valid discriminant, then the code later will catch that; or it does, then we shouldn't error out so early (absent enforcing validity).\n\nInterestingly, the miri test suite still passes; my guess is we don't even get here for uninhabited types?\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89b7ccf4075acd29b611cf6f565229bf2c134e36", "html_url": "https://github.com/rust-lang/rust/commit/89b7ccf4075acd29b611cf6f565229bf2c134e36", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89b7ccf4075acd29b611cf6f565229bf2c134e36/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6f6878c073333f99fba834ac836757e10d989e10", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f6878c073333f99fba834ac836757e10d989e10", "html_url": "https://github.com/rust-lang/rust/commit/6f6878c073333f99fba834ac836757e10d989e10"}, {"sha": "c31819b3ff35be5bdec58cba9515578fbff0a5b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c31819b3ff35be5bdec58cba9515578fbff0a5b8", "html_url": "https://github.com/rust-lang/rust/commit/c31819b3ff35be5bdec58cba9515578fbff0a5b8"}], "stats": {"total": 3, "additions": 0, "deletions": 3}, "files": [{"sha": "2d6b19ca4a7fcc42b44e0d06426bf00ef1a27593", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89b7ccf4075acd29b611cf6f565229bf2c134e36/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89b7ccf4075acd29b611cf6f565229bf2c134e36/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=89b7ccf4075acd29b611cf6f565229bf2c134e36", "patch": "@@ -688,9 +688,6 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n         rval: OpTy<'tcx, M::PointerTag>,\n     ) -> EvalResult<'tcx, (u128, usize)> {\n         trace!(\"read_discriminant_value {:#?}\", rval.layout);\n-        if rval.layout.abi.is_uninhabited() {\n-            return err!(Unreachable);\n-        }\n \n         match rval.layout.variants {\n             layout::Variants::Single { index } => {"}]}