{"sha": "5b98000279e058a390670c3b6f304af7aa02e46a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViOTgwMDAyNzllMDU4YTM5MDY3MGMzYjZmMzA0YWY3YWEwMmU0NmE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-01T00:42:41Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-01T00:42:41Z"}, "message": "core: Move global_env mod into os mod", "tree": {"sha": "f876a3a8765fb46796c724ef4f8cc02683d48cc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f876a3a8765fb46796c724ef4f8cc02683d48cc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b98000279e058a390670c3b6f304af7aa02e46a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b98000279e058a390670c3b6f304af7aa02e46a", "html_url": "https://github.com/rust-lang/rust/commit/5b98000279e058a390670c3b6f304af7aa02e46a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b98000279e058a390670c3b6f304af7aa02e46a/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46cc11ea882681a3b524df97d86442c967bf30e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/46cc11ea882681a3b524df97d86442c967bf30e2", "html_url": "https://github.com/rust-lang/rust/commit/46cc11ea882681a3b524df97d86442c967bf30e2"}], "stats": {"total": 252, "additions": 127, "deletions": 125}, "files": [{"sha": "fa423809404ea05a0564d5e173183ac276282423", "filename": "src/libcore/core.rc", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5b98000279e058a390670c3b6f304af7aa02e46a/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/5b98000279e058a390670c3b6f304af7aa02e46a/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=5b98000279e058a390670c3b6f304af7aa02e46a", "patch": "@@ -199,7 +199,6 @@ mod extfmt;\n mod unicode;\n mod priv;\n mod cmath;\n-mod global_env;\n \n \n // Local Variables:"}, {"sha": "5a63ec400bef4319b23391435d077dc3d0023790", "filename": "src/libcore/global_env.rs", "status": "removed", "additions": 0, "deletions": 124, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Flibcore%2Fglobal_env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/46cc11ea882681a3b524df97d86442c967bf30e2/src%2Flibcore%2Fglobal_env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fglobal_env.rs?ref=46cc11ea882681a3b524df97d86442c967bf30e2", "patch": "@@ -1,124 +0,0 @@\n-#[doc = \"Internal module for serializing access to getenv/setenv\"];\n-\n-export getenv;\n-export setenv;\n-\n-native mod rustrt {\n-    fn rust_global_env_chan_ptr() -> *libc::uintptr_t;\n-}\n-\n-enum msg {\n-    msg_getenv(str, comm::chan<option<str>>),\n-    msg_setenv(str, str, comm::chan<()>)\n-}\n-\n-fn getenv(n: str) -> option<str> {\n-    let env_ch = get_global_env_chan();\n-    let po = comm::port();\n-    comm::send(env_ch, msg_getenv(n, comm::chan(po)));\n-    comm::recv(po)\n-}\n-\n-fn setenv(n: str, v: str) {\n-    let env_ch = get_global_env_chan();\n-    let po = comm::port();\n-    comm::send(env_ch, msg_setenv(n, v, comm::chan(po)));\n-    comm::recv(po)\n-}\n-\n-fn get_global_env_chan() -> comm::chan<msg> {\n-    let global_ptr = rustrt::rust_global_env_chan_ptr();\n-    let builder_fn = {||\n-        let builder = task::builder();\n-        task::unsupervise(builder);\n-        task::set_opts(builder, {\n-            sched:  some({\n-                mode: task::single_threaded,\n-                // FIXME: This would be a good place to use\n-                // a very small native stack\n-                native_stack_size: none\n-            })\n-            with task::get_opts(builder)\n-        });\n-        builder\n-    };\n-    unsafe {\n-        priv::chan_from_global_ptr(\n-            global_ptr, builder_fn, global_env_task)\n-    }\n-}\n-\n-fn global_env_task(msg_po: comm::port<msg>) unsafe {\n-    priv::weaken_task {|weak_po|\n-        loop {\n-            alt comm::select2(msg_po, weak_po) {\n-              either::left(msg_getenv(n, resp_ch)) {\n-                comm::send(resp_ch, impl::getenv(n))\n-              }\n-              either::left(msg_setenv(n, v, resp_ch)) {\n-                comm::send(resp_ch, impl::setenv(n, v))\n-              }\n-              either::right(_) {\n-                break;\n-              }\n-            }\n-        }\n-    }\n-}\n-\n-mod impl {\n-\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n-    fn getenv(n: str) -> option<str> unsafe {\n-        let s = str::as_c_str(n, libc::getenv);\n-        ret if unsafe::reinterpret_cast(s) == 0 {\n-            option::none::<str>\n-        } else {\n-            let s = unsafe::reinterpret_cast(s);\n-            option::some::<str>(str::unsafe::from_buf(s))\n-        };\n-    }\n-\n-    #[cfg(target_os = \"win32\")]\n-    fn getenv(n: str) -> option<str> unsafe {\n-        import libc::types::os::arch::extra::*;\n-        import libc::funcs::extra::kernel32::*;\n-        import win32::*;\n-        as_utf16_p(n) {|u|\n-            fill_utf16_buf_and_decode() {|buf, sz|\n-                GetEnvironmentVariableW(u, buf, sz)\n-            }\n-        }\n-    }\n-\n-\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"freebsd\")]\n-    fn setenv(n: str, v: str) {\n-\n-        // FIXME: remove this when export globs work properly.\n-        import libc::funcs::posix01::unistd::setenv;\n-        str::as_c_str(n) {|nbuf|\n-            str::as_c_str(v) {|vbuf|\n-                setenv(nbuf, vbuf, 1i32);\n-            }\n-        }\n-    }\n-\n-\n-    #[cfg(target_os = \"win32\")]\n-    fn setenv(n: str, v: str) {\n-        // FIXME: remove imports when export globs work properly.\n-        import libc::funcs::extra::kernel32::*;\n-        import win32::*;\n-        as_utf16_p(n) {|nbuf|\n-            as_utf16_p(v) {|vbuf|\n-                SetEnvironmentVariableW(nbuf, vbuf);\n-            }\n-        }\n-    }\n-\n-}\n\\ No newline at end of file"}, {"sha": "09617355e1ac5eec77a57044fa74cca2b559c8aa", "filename": "src/libcore/os.rs", "status": "modified", "additions": 127, "deletions": 0, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/5b98000279e058a390670c3b6f304af7aa02e46a/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b98000279e058a390670c3b6f304af7aa02e46a/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=5b98000279e058a390670c3b6f304af7aa02e46a", "patch": "@@ -129,6 +129,133 @@ fn setenv(n: str, v: str) {\n     global_env::setenv(n, v)\n }\n \n+mod global_env {\n+    #[doc = \"Internal module for serializing access to getenv/setenv\"];\n+\n+    export getenv;\n+    export setenv;\n+\n+    native mod rustrt {\n+        fn rust_global_env_chan_ptr() -> *libc::uintptr_t;\n+    }\n+\n+    enum msg {\n+        msg_getenv(str, comm::chan<option<str>>),\n+        msg_setenv(str, str, comm::chan<()>)\n+    }\n+\n+    fn getenv(n: str) -> option<str> {\n+        let env_ch = get_global_env_chan();\n+        let po = comm::port();\n+        comm::send(env_ch, msg_getenv(n, comm::chan(po)));\n+        comm::recv(po)\n+    }\n+\n+    fn setenv(n: str, v: str) {\n+        let env_ch = get_global_env_chan();\n+        let po = comm::port();\n+        comm::send(env_ch, msg_setenv(n, v, comm::chan(po)));\n+        comm::recv(po)\n+    }\n+\n+    fn get_global_env_chan() -> comm::chan<msg> {\n+        let global_ptr = rustrt::rust_global_env_chan_ptr();\n+        let builder_fn = {||\n+            let builder = task::builder();\n+            task::unsupervise(builder);\n+            task::set_opts(builder, {\n+                sched:  some({\n+                    mode: task::single_threaded,\n+                    // FIXME: This would be a good place to use\n+                    // a very small native stack\n+                    native_stack_size: none\n+                })\n+                with task::get_opts(builder)\n+            });\n+            builder\n+        };\n+        unsafe {\n+            priv::chan_from_global_ptr(\n+                global_ptr, builder_fn, global_env_task)\n+        }\n+    }\n+\n+    fn global_env_task(msg_po: comm::port<msg>) unsafe {\n+        priv::weaken_task {|weak_po|\n+            loop {\n+                alt comm::select2(msg_po, weak_po) {\n+                  either::left(msg_getenv(n, resp_ch)) {\n+                    comm::send(resp_ch, impl::getenv(n))\n+                  }\n+                  either::left(msg_setenv(n, v, resp_ch)) {\n+                    comm::send(resp_ch, impl::setenv(n, v))\n+                  }\n+                  either::right(_) {\n+                    break;\n+                  }\n+                }\n+            }\n+        }\n+    }\n+\n+    mod impl {\n+\n+        #[cfg(target_os = \"linux\")]\n+        #[cfg(target_os = \"macos\")]\n+        #[cfg(target_os = \"freebsd\")]\n+        fn getenv(n: str) -> option<str> unsafe {\n+            let s = str::as_c_str(n, libc::getenv);\n+            ret if unsafe::reinterpret_cast(s) == 0 {\n+                option::none::<str>\n+            } else {\n+                let s = unsafe::reinterpret_cast(s);\n+                option::some::<str>(str::unsafe::from_buf(s))\n+            };\n+        }\n+\n+        #[cfg(target_os = \"win32\")]\n+        fn getenv(n: str) -> option<str> unsafe {\n+            import libc::types::os::arch::extra::*;\n+            import libc::funcs::extra::kernel32::*;\n+            import win32::*;\n+            as_utf16_p(n) {|u|\n+                fill_utf16_buf_and_decode() {|buf, sz|\n+                    GetEnvironmentVariableW(u, buf, sz)\n+                }\n+            }\n+        }\n+\n+\n+        #[cfg(target_os = \"linux\")]\n+        #[cfg(target_os = \"macos\")]\n+        #[cfg(target_os = \"freebsd\")]\n+        fn setenv(n: str, v: str) {\n+\n+            // FIXME: remove this when export globs work properly.\n+            import libc::funcs::posix01::unistd::setenv;\n+            str::as_c_str(n) {|nbuf|\n+                str::as_c_str(v) {|vbuf|\n+                    setenv(nbuf, vbuf, 1i32);\n+                }\n+            }\n+        }\n+\n+\n+        #[cfg(target_os = \"win32\")]\n+        fn setenv(n: str, v: str) {\n+            // FIXME: remove imports when export globs work properly.\n+            import libc::funcs::extra::kernel32::*;\n+            import win32::*;\n+            as_utf16_p(n) {|nbuf|\n+                as_utf16_p(v) {|vbuf|\n+                    SetEnvironmentVariableW(nbuf, vbuf);\n+                }\n+            }\n+        }\n+\n+    }\n+}\n+\n fn fdopen(fd: c_int) -> *FILE {\n     ret as_c_charp(\"r\") {|modebuf|\n         libc::fdopen(fd, modebuf)"}]}