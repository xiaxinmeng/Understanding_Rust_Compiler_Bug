{"sha": "9d408d972f7cf16162ec3ab35e11c659ccee9566", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkNDA4ZDk3MmY3Y2YxNjE2MmVjM2FiMzVlMTFjNjU5Y2NlZTk1NjY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-29T18:50:49Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-18T16:27:31Z"}, "message": "Add todo!() macro\n\nThe use-case of `todo!()` macro is to be a much easier to type\nalternative to `unimplemented!()` macro.", "tree": {"sha": "a21fcb6ff829cf50c5bfd566ac867c533e0ff0f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a21fcb6ff829cf50c5bfd566ac867c533e0ff0f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d408d972f7cf16162ec3ab35e11c659ccee9566", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d408d972f7cf16162ec3ab35e11c659ccee9566", "html_url": "https://github.com/rust-lang/rust/commit/9d408d972f7cf16162ec3ab35e11c659ccee9566", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d408d972f7cf16162ec3ab35e11c659ccee9566/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f88167f89fffe321590c5148f21b7d51d44388d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f88167f89fffe321590c5148f21b7d51d44388d", "html_url": "https://github.com/rust-lang/rust/commit/0f88167f89fffe321590c5148f21b7d51d44388d"}], "stats": {"total": 62, "additions": 61, "deletions": 1}, "files": [{"sha": "d77936c7ddd913fe9cad93e213742ff693a6bb9f", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/9d408d972f7cf16162ec3ab35e11c659ccee9566/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d408d972f7cf16162ec3ab35e11c659ccee9566/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=9d408d972f7cf16162ec3ab35e11c659ccee9566", "patch": "@@ -559,6 +559,65 @@ macro_rules! unimplemented {\n     ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)*)));\n }\n \n+/// A standardized placeholder for marking unfinished code.\n+///\n+/// This can be useful if you are prototyping and are just looking to have your\n+/// code typecheck. `todo!` works exactly like `unimplemented!`, there only\n+/// difference between the two macros is the name.\n+///\n+/// # Panics\n+///\n+/// This will always [panic!](macro.panic.html)\n+///\n+/// # Examples\n+///\n+/// Here's an example of some in-progress code. We have a trait `Foo`:\n+///\n+/// ```\n+/// trait Foo {\n+///     fn bar(&self);\n+///     fn baz(&self);\n+/// }\n+/// ```\n+///\n+/// We want to implement `Foo` on one of our types, but we also want to work on\n+/// just `bar()` first. In order for our code to compile, we need to implement\n+/// `baz()`, so we can use `todo!`:\n+///\n+/// ```\n+/// #![feature(todo_macro)]\n+///\n+/// # trait Foo {\n+/// #     fn bar(&self);\n+/// #     fn baz(&self);\n+/// # }\n+/// struct MyStruct;\n+///\n+/// impl Foo for MyStruct {\n+///     fn bar(&self) {\n+///         // implementation goes here\n+///     }\n+///\n+///     fn baz(&self) {\n+///         // let's not worry about implementing baz() for now\n+///         todo!();\n+///     }\n+/// }\n+///\n+/// fn main() {\n+///     let s = MyStruct;\n+///     s.bar();\n+///\n+///     // we aren't even using baz() yet, so this is fine.\n+/// }\n+/// ```\n+#[macro_export]\n+#[unstable(feature = \"todo_macro\", issue = \"59277\")]\n+macro_rules! todo {\n+    () => (panic!(\"not yet implemented\"));\n+    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)*)));\n+}\n+\n /// A macro to create an array of [`MaybeUninit`]\n ///\n /// This macro constructs an uninitialized array of the type `[MaybeUninit<K>; N]`."}, {"sha": "296c4c887274e61eb7b3f9d719c9915b322f69e7", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9d408d972f7cf16162ec3ab35e11c659ccee9566/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d408d972f7cf16162ec3ab35e11c659ccee9566/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=9d408d972f7cf16162ec3ab35e11c659ccee9566", "patch": "@@ -301,6 +301,7 @@\n #![feature(stmt_expr_attributes)]\n #![feature(str_internals)]\n #![feature(thread_local)]\n+#![feature(todo_macro)]\n #![feature(toowned_clone_into)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]\n@@ -323,7 +324,7 @@ use prelude::v1::*;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::{assert_eq, assert_ne, debug_assert, debug_assert_eq, debug_assert_ne};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use core::{unreachable, unimplemented, write, writeln, r#try};\n+pub use core::{unreachable, unimplemented, write, writeln, r#try, todo};\n \n #[allow(unused_imports)] // macros from `alloc` are not used on all platforms\n #[macro_use]"}]}