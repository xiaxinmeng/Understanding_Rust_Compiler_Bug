{"sha": "36b3951c7338ae0d69e125383038e76d00fc7d77", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2YjM5NTFjNzMzOGFlMGQ2OWUxMjUzODMwMzhlNzZkMDBmYzdkNzc=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-01-01T22:45:21Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-01-06T11:57:52Z"}, "message": "Create personality slot when translating Resume\n\nThis considerably simplifies code around calling functions and translation of Resume itself. This\nremoves requirement that a block containing Resume terminator is always translated after something\nwhich creates a landing pad, thus allowing us to actually translate some valid MIRs we could not\ntranslate before.\n\nHowever, an assumption is added that translator is correct (in regards to landing pad generation)\nand code will never reach the Resume terminator without going through a landing pad first. Breaking\nthese assumptions would pass an `undef` value into the personality functions.", "tree": {"sha": "f601375c0efa9fdde4ac0bbb45f9886d0db5548c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f601375c0efa9fdde4ac0bbb45f9886d0db5548c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/36b3951c7338ae0d69e125383038e76d00fc7d77", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/36b3951c7338ae0d69e125383038e76d00fc7d77", "html_url": "https://github.com/rust-lang/rust/commit/36b3951c7338ae0d69e125383038e76d00fc7d77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/36b3951c7338ae0d69e125383038e76d00fc7d77/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9814242dc0066441db9391af9b56dea8fa4376f", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9814242dc0066441db9391af9b56dea8fa4376f", "html_url": "https://github.com/rust-lang/rust/commit/f9814242dc0066441db9391af9b56dea8fa4376f"}], "stats": {"total": 64, "additions": 26, "deletions": 38}, "files": [{"sha": "aa0b3a25ebb0cabc8f3603255922c8c2bdd484f1", "filename": "src/librustc_trans/trans/mir/block.rs", "status": "modified", "additions": 26, "deletions": 35, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/36b3951c7338ae0d69e125383038e76d00fc7d77/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b3951c7338ae0d69e125383038e76d00fc7d77/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fblock.rs?ref=36b3951c7338ae0d69e125383038e76d00fc7d77", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use llvm::BasicBlockRef;\n+use llvm::{BasicBlockRef, ValueRef};\n use rustc::mir::repr as mir;\n use trans::adt;\n use trans::base;\n@@ -80,13 +80,10 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n             }\n \n             mir::Terminator::Resume => {\n-                if let Some(personalityslot) = self.llpersonalityslot {\n-                    let lp = build::Load(bcx, personalityslot);\n-                    base::call_lifetime_end(bcx, personalityslot);\n-                    build::Resume(bcx, lp);\n-                } else {\n-                    panic!(\"resume terminator without personality slot set\")\n-                }\n+                let ps = self.get_personality_slot(bcx);\n+                let lp = build::Load(bcx, ps);\n+                base::call_lifetime_end(bcx, ps);\n+                base::trans_unwind_resume(bcx, lp);\n             }\n \n             mir::Terminator::Return => {\n@@ -187,29 +184,17 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                             build::Br(target, postinvoketarget.llbb, debugloc);\n                         }\n                     },\n-                    // Everything else uses the regular `Call`, but we have to be careful to\n-                    // generate landing pads for later, even if we do not use it.\n-                    // FIXME: maybe just change Resume to not panic in that case?\n-                    (_, k@&mir::CallKind::DivergingCleanup(_)) |\n-                    (_, k@&mir::CallKind::Diverging) => {\n-                        if let mir::CallKind::DivergingCleanup(_) = *k {\n-                            // make a landing pad regardless, so it sets the personality slot.\n-                            let block = self.unreachable_block();\n-                            self.make_landing_pad(block);\n-                        }\n+                    (_, &mir::CallKind::DivergingCleanup(_)) |\n+                    (_, &mir::CallKind::Diverging) => {\n                         build::Call(bcx, callee.immediate(), &llargs[..], Some(attrs), debugloc);\n                         build::Unreachable(bcx);\n                     }\n                     (_, k@&mir::CallKind::ConvergingCleanup { .. }) |\n                     (_, k@&mir::CallKind::Converging { .. }) => {\n-                        let ret = match *k {\n+                        // Bug #20046\n+                        let target = match *k {\n+                            mir::CallKind::ConvergingCleanup { targets, .. } => targets.0,\n                             mir::CallKind::Converging { target, .. } => target,\n-                            mir::CallKind::ConvergingCleanup { targets, .. } => {\n-                                // make a landing pad regardless (so it sets the personality slot.\n-                                let block = self.unreachable_block();\n-                                self.make_landing_pad(block);\n-                                targets.0\n-                            },\n                             _ => unreachable!()\n                         };\n                         let llret = build::Call(bcx,\n@@ -222,29 +207,35 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                                 .expect(\"return destination and type not set\");\n                             base::store_ty(bcx, llret, ret_dest.llval, ret_ty);\n                         }\n-                        build::Br(bcx, self.llblock(ret), debugloc)\n+                        build::Br(bcx, self.llblock(target), debugloc);\n                     }\n                 }\n             }\n         }\n     }\n \n+    fn get_personality_slot(&mut self, bcx: Block<'bcx, 'tcx>) -> ValueRef {\n+        let ccx = bcx.ccx();\n+        if let Some(slot) = self.llpersonalityslot {\n+            slot\n+        } else {\n+            let llretty = Type::struct_(ccx, &[Type::i8p(ccx), Type::i32(ccx)], false);\n+            let slot = base::alloca(bcx, llretty, \"personalityslot\");\n+            self.llpersonalityslot = Some(slot);\n+            base::call_lifetime_start(bcx, slot);\n+            slot\n+        }\n+    }\n+\n     fn make_landing_pad(&mut self, cleanup: Block<'bcx, 'tcx>) -> Block<'bcx, 'tcx> {\n         let bcx = cleanup.fcx.new_block(true, \"cleanup\", None);\n         let ccx = bcx.ccx();\n         let llpersonality = bcx.fcx.eh_personality();\n         let llretty = Type::struct_(ccx, &[Type::i8p(ccx), Type::i32(ccx)], false);\n         let llretval = build::LandingPad(bcx, llretty, llpersonality, 1);\n         build::SetCleanup(bcx, llretval);\n-        match self.llpersonalityslot {\n-            Some(slot) => build::Store(bcx, llretval, slot),\n-            None => {\n-                let personalityslot = base::alloca(bcx, llretty, \"personalityslot\");\n-                self.llpersonalityslot = Some(personalityslot);\n-                base::call_lifetime_start(bcx, personalityslot);\n-                build::Store(bcx, llretval, personalityslot)\n-            }\n-        };\n+        let slot = self.get_personality_slot(bcx);\n+        build::Store(bcx, llretval, slot);\n         build::Br(bcx, cleanup.llbb, DebugLoc::None);\n         bcx\n     }"}, {"sha": "75ce33da2c9b9da66eb84a77ad40fbdabb3f1eaf", "filename": "src/librustc_trans/trans/mir/mod.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/36b3951c7338ae0d69e125383038e76d00fc7d77/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/36b3951c7338ae0d69e125383038e76d00fc7d77/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmir%2Fmod.rs?ref=36b3951c7338ae0d69e125383038e76d00fc7d77", "patch": "@@ -136,9 +136,6 @@ pub fn trans_mir<'bcx, 'tcx>(bcx: Block<'bcx, 'tcx>) {\n \n     // Translate the body of each block\n     for &bb in &mir_blocks {\n-        // NB that we do not handle the Resume terminator specially, because a block containing\n-        // that terminator will have a higher block number than a function call which should take\n-        // care of filling in that information.\n         mircx.trans_block(bb);\n     }\n }"}]}