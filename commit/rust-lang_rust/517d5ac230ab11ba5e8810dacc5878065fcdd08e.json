{"sha": "517d5ac230ab11ba5e8810dacc5878065fcdd08e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxN2Q1YWMyMzBhYjExYmE1ZTg4MTBkYWNjNTg3ODA2NWZjZGQwOGU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-03-25T10:43:03Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2021-03-25T13:05:00Z"}, "message": "Allow for reading raw bytes from rustc_serialize::Decoder without unsafe code.", "tree": {"sha": "e49e08df4360808e2dde2bf8d71273eb4bdf0dba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e49e08df4360808e2dde2bf8d71273eb4bdf0dba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/517d5ac230ab11ba5e8810dacc5878065fcdd08e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/517d5ac230ab11ba5e8810dacc5878065fcdd08e", "html_url": "https://github.com/rust-lang/rust/commit/517d5ac230ab11ba5e8810dacc5878065fcdd08e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/517d5ac230ab11ba5e8810dacc5878065fcdd08e/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbc37a97dcf08984163133cff85af5190af037ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbc37a97dcf08984163133cff85af5190af037ca", "html_url": "https://github.com/rust-lang/rust/commit/dbc37a97dcf08984163133cff85af5190af037ca"}], "stats": {"total": 93, "additions": 48, "deletions": 45}, "files": [{"sha": "c0c0e7be3ca85cb36b95f4a9e6c933d08c833b65", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/517d5ac230ab11ba5e8810dacc5878065fcdd08e/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517d5ac230ab11ba5e8810dacc5878065fcdd08e/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=517d5ac230ab11ba5e8810dacc5878065fcdd08e", "patch": "@@ -1,7 +1,7 @@\n use crate::stable_hasher;\n use rustc_serialize::{Decodable, Encodable};\n+use std::convert::TryInto;\n use std::hash::{Hash, Hasher};\n-use std::mem::{self, MaybeUninit};\n \n #[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy)]\n #[repr(C)]\n@@ -60,6 +60,29 @@ impl Fingerprint {\n     pub fn to_hex(&self) -> String {\n         format!(\"{:x}{:x}\", self.0, self.1)\n     }\n+\n+    #[inline]\n+    pub fn to_le_bytes(&self) -> [u8; 16] {\n+        // This seems to optimize to the same machine code as\n+        // `unsafe { mem::transmute(*k) }`. Well done, LLVM! :)\n+        let mut result = [0u8; 16];\n+\n+        let first_half: &mut [u8; 8] = (&mut result[0..8]).try_into().unwrap();\n+        *first_half = self.0.to_le_bytes();\n+\n+        let second_half: &mut [u8; 8] = (&mut result[8..16]).try_into().unwrap();\n+        *second_half = self.1.to_le_bytes();\n+\n+        result\n+    }\n+\n+    #[inline]\n+    pub fn from_le_bytes(bytes: [u8; 16]) -> Fingerprint {\n+        Fingerprint(\n+            u64::from_le_bytes(bytes[0..8].try_into().unwrap()),\n+            u64::from_le_bytes(bytes[8..16].try_into().unwrap()),\n+        )\n+    }\n }\n \n impl std::fmt::Display for Fingerprint {\n@@ -119,20 +142,17 @@ impl_stable_hash_via_hash!(Fingerprint);\n impl<E: rustc_serialize::Encoder> Encodable<E> for Fingerprint {\n     #[inline]\n     fn encode(&self, s: &mut E) -> Result<(), E::Error> {\n-        let bytes: [u8; 16] = unsafe { mem::transmute([self.0.to_le(), self.1.to_le()]) };\n-        s.emit_raw_bytes(&bytes)?;\n+        s.emit_raw_bytes(&self.to_le_bytes()[..])?;\n         Ok(())\n     }\n }\n \n impl<D: rustc_serialize::Decoder> Decodable<D> for Fingerprint {\n     #[inline]\n     fn decode(d: &mut D) -> Result<Self, D::Error> {\n-        let mut bytes: [MaybeUninit<u8>; 16] = MaybeUninit::uninit_array();\n-        d.read_raw_bytes(&mut bytes)?;\n-\n-        let [l, r]: [u64; 2] = unsafe { mem::transmute(bytes) };\n-        Ok(Fingerprint(u64::from_le(l), u64::from_le(r)))\n+        let mut bytes = [0u8; 16];\n+        d.read_raw_bytes_into(&mut bytes[..])?;\n+        Ok(Fingerprint::from_le_bytes(bytes))\n     }\n }\n "}, {"sha": "3225efd05e4515c3e4754068822440bba222bf76", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/517d5ac230ab11ba5e8810dacc5878065fcdd08e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517d5ac230ab11ba5e8810dacc5878065fcdd08e/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=517d5ac230ab11ba5e8810dacc5878065fcdd08e", "patch": "@@ -473,8 +473,8 @@ macro_rules! implement_ty_decoder {\n                 }\n \n                 #[inline]\n-                fn read_raw_bytes(&mut self, bytes: &mut [std::mem::MaybeUninit<u8>]) -> Result<(), Self::Error> {\n-                    self.opaque.read_raw_bytes(bytes)\n+                fn read_raw_bytes_into(&mut self, bytes: &mut [u8]) -> Result<(), Self::Error> {\n+                    self.opaque.read_raw_bytes_into(bytes)\n                 }\n \n                 fn error(&mut self, err: &str) -> Self::Error {"}, {"sha": "78a102c5c23304ae043b05f5cc58b1a5bef82def", "filename": "compiler/rustc_serialize/src/json.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/517d5ac230ab11ba5e8810dacc5878065fcdd08e/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517d5ac230ab11ba5e8810dacc5878065fcdd08e/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fjson.rs?ref=517d5ac230ab11ba5e8810dacc5878065fcdd08e", "patch": "@@ -188,7 +188,6 @@ use std::collections::{BTreeMap, HashMap};\n use std::io;\n use std::io::prelude::*;\n use std::mem::swap;\n-use std::mem::MaybeUninit;\n use std::num::FpCategory as Fp;\n use std::ops::Index;\n use std::str::FromStr;\n@@ -2367,10 +2366,9 @@ impl crate::Decoder for Decoder {\n         expect!(self.pop(), String).map(Cow::Owned)\n     }\n \n-    fn read_raw_bytes(&mut self, s: &mut [MaybeUninit<u8>]) -> Result<(), Self::Error> {\n+    fn read_raw_bytes_into(&mut self, s: &mut [u8]) -> Result<(), Self::Error> {\n         for c in s.iter_mut() {\n-            let h = self.read_u8()?;\n-            unsafe { *c.as_mut_ptr() = h };\n+            *c = self.read_u8()?;\n         }\n         Ok(())\n     }"}, {"sha": "6e36184aff051776552c22f1bfb8b4272261c271", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 15, "deletions": 29, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/517d5ac230ab11ba5e8810dacc5878065fcdd08e/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517d5ac230ab11ba5e8810dacc5878065fcdd08e/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=517d5ac230ab11ba5e8810dacc5878065fcdd08e", "patch": "@@ -1,6 +1,7 @@\n use crate::leb128::{self, max_leb128_len};\n-use crate::serialize::{self, Decoder as _, Encoder as _};\n+use crate::serialize::{self, Encoder as _};\n use std::borrow::Cow;\n+use std::convert::TryInto;\n use std::fs::File;\n use std::io::{self, Write};\n use std::mem::MaybeUninit;\n@@ -539,6 +540,13 @@ impl<'a> Decoder<'a> {\n     pub fn advance(&mut self, bytes: usize) {\n         self.position += bytes;\n     }\n+\n+    #[inline]\n+    pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {\n+        let start = self.position;\n+        self.position += bytes;\n+        &self.data[start..self.position]\n+    }\n }\n \n macro_rules! read_leb128 {\n@@ -659,22 +667,10 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     }\n \n     #[inline]\n-    fn read_raw_bytes(&mut self, s: &mut [MaybeUninit<u8>]) -> Result<(), String> {\n+    fn read_raw_bytes_into(&mut self, s: &mut [u8]) -> Result<(), String> {\n         let start = self.position;\n-        let end = start + s.len();\n-        assert!(end <= self.data.len());\n-\n-        // SAFETY: Both `src` and `dst` point to at least `s.len()` elements:\n-        // `src` points to at least `s.len()` elements by above assert, and\n-        // `dst` points to `s.len()` elements by derivation from `s`.\n-        unsafe {\n-            let src = self.data.as_ptr().add(start);\n-            let dst = s.as_mut_ptr() as *mut u8;\n-            ptr::copy_nonoverlapping(src, dst, s.len());\n-        }\n-\n-        self.position = end;\n-\n+        self.position += s.len();\n+        s.copy_from_slice(&self.data[start..self.position]);\n         Ok(())\n     }\n }\n@@ -705,16 +701,7 @@ impl serialize::Encodable<FileEncoder> for [u8] {\n impl<'a> serialize::Decodable<Decoder<'a>> for Vec<u8> {\n     fn decode(d: &mut Decoder<'a>) -> Result<Self, String> {\n         let len = serialize::Decoder::read_usize(d)?;\n-\n-        let mut v = Vec::with_capacity(len);\n-        let buf = &mut v.spare_capacity_mut()[..len];\n-        d.read_raw_bytes(buf)?;\n-\n-        unsafe {\n-            v.set_len(len);\n-        }\n-\n-        Ok(v)\n+        Ok(d.read_raw_bytes(len).to_owned())\n     }\n }\n \n@@ -750,13 +737,12 @@ impl serialize::Encodable<FileEncoder> for IntEncodedWithFixedSize {\n impl<'a> serialize::Decodable<Decoder<'a>> for IntEncodedWithFixedSize {\n     #[inline]\n     fn decode(decoder: &mut Decoder<'a>) -> Result<IntEncodedWithFixedSize, String> {\n-        let mut bytes = MaybeUninit::uninit_array();\n         let _start_pos = decoder.position();\n-        decoder.read_raw_bytes(&mut bytes)?;\n+        let bytes = decoder.read_raw_bytes(IntEncodedWithFixedSize::ENCODED_SIZE);\n         let _end_pos = decoder.position();\n         debug_assert_eq!((_end_pos - _start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);\n \n-        let value = u64::from_le_bytes(unsafe { MaybeUninit::array_assume_init(bytes) });\n+        let value = u64::from_le_bytes(bytes.try_into().unwrap());\n         Ok(IntEncodedWithFixedSize(value))\n     }\n }"}, {"sha": "d3e5f306970c519e0ec58f92795516a19374d00c", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/517d5ac230ab11ba5e8810dacc5878065fcdd08e/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517d5ac230ab11ba5e8810dacc5878065fcdd08e/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=517d5ac230ab11ba5e8810dacc5878065fcdd08e", "patch": "@@ -7,7 +7,6 @@ Core encoding and decoding interfaces.\n use std::borrow::Cow;\n use std::cell::{Cell, RefCell};\n use std::marker::PhantomData;\n-use std::mem::MaybeUninit;\n use std::path;\n use std::rc::Rc;\n use std::sync::Arc;\n@@ -226,7 +225,7 @@ pub trait Decoder {\n     fn read_f32(&mut self) -> Result<f32, Self::Error>;\n     fn read_char(&mut self) -> Result<char, Self::Error>;\n     fn read_str(&mut self) -> Result<Cow<'_, str>, Self::Error>;\n-    fn read_raw_bytes(&mut self, s: &mut [MaybeUninit<u8>]) -> Result<(), Self::Error>;\n+    fn read_raw_bytes_into(&mut self, s: &mut [u8]) -> Result<(), Self::Error>;\n \n     // Compound types:\n     #[inline]"}]}