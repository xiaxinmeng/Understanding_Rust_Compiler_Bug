{"sha": "a7c0ff3fa676aaa3e6d27a413c302abb0eba9805", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YzBmZjNmYTY3NmFhYTNlNmQyN2E0MTNjMzAyYWJiMGViYTk4MDU=", "commit": {"author": {"name": "Shea Newton", "email": "shnewto@gmail.com", "date": "2018-06-13T23:28:57Z"}, "committer": {"name": "Shea Newton", "email": "shnewto@gmail.com", "date": "2018-06-19T16:28:10Z"}, "message": "This commit represents an attempt to address changes requested in the process of reviewing PR #2790.\nThe changes reflected in this commit are as follows:\n\n- Revised `IndexingSlicingPass` struct name to IndexingSlicing for consistency with the rest of the code base.\n- Revised match arm condition to use `(..)` shorthand in favor of `(_, _, _)`.\n- Restored a couple telling variable names.\n- Calls to `cx.span_lint` were revised to use `utils::span_help_and_lint`.\n- Took a stab at refactoring some generalizable calls to `utils::span_help_and_lint` to minimize duplicate code.\n- Revised INDEXING_SLICING declaration to pedantic rather than restriction.\n- Added `&x[0..].get(..3)` to the test cases.", "tree": {"sha": "c5eae6dfa7697e0d1547e72a059708ffa2529bf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5eae6dfa7697e0d1547e72a059708ffa2529bf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7c0ff3fa676aaa3e6d27a413c302abb0eba9805", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJbKS8aAAoJEBfrkSLclYZDNEEP+gOgN3BvULcZ5CTOHYTHYGcI\nbCbQIUjBTXa3NGNJj/6mtmJrBxyMYBCa+eCG9o3sskD9ZegWlamSv4r6VZYqeo0m\nTADTEjp6dhyTBLIN3tyrlGVYKmrA9nq0NxIXKQh0OgzvNL+RWG19EeIHYCuHhzhL\nusISPoYRKcqi0QvW7aKLLuT6BkBACSWLG9YacButw1KF9y2ODM4n4AHbk7qskwON\nldrgweibrPELc2plC6wvV5lYjF26vjJGEoQ/t6OlDVIKTRvlH0f+c5g2idTUAypA\nK7oMRm3derEt6hYPLpDwAbm6KSZui178sxEdG/gmK8yEDi8QsNg/BB+y0BRoywYl\nPM/fGfsiTNyGrYy5V2kDYFx5Q+G9soRN5p4qJoqPTIp9h9OjLZsbSnWMdUvCDOFu\nRk9MSONTBI0bo5CNdDzrVmepjOkds3Xg5HDnRc4MVuUgs/qv/vptbxoKdBx0wnVt\nc5ufXRA9HRshiMoqO+i7udb5OGA5QyEWk4g9MD9HQ8TDmHKJmKjlb7qzvTi0T6ZB\nXSrFni6LClvKZl8BS3njz/1vgVBGxnQWUOEwPddpnRdS/EQP3HLHukC+whvPRkMv\nyxCpCie5wawXQLZsBAnoDw5LWGotWcxGrfuWwdwMf9+p6oGQT55+A0neEgHYmxlV\nwWgS2AUNV/VaMfp0SBEz\n=bLoY\n-----END PGP SIGNATURE-----", "payload": "tree c5eae6dfa7697e0d1547e72a059708ffa2529bf3\nparent 5b759efa4c9702aa095f1564e9cfa76046abf2b1\nauthor Shea Newton <shnewto@gmail.com> 1528932537 +0000\ncommitter Shea Newton <shnewto@gmail.com> 1529425690 +0000\n\nThis commit represents an attempt to address changes requested in the process of reviewing PR #2790.\nThe changes reflected in this commit are as follows:\n\n- Revised `IndexingSlicingPass` struct name to IndexingSlicing for consistency with the rest of the code base.\n- Revised match arm condition to use `(..)` shorthand in favor of `(_, _, _)`.\n- Restored a couple telling variable names.\n- Calls to `cx.span_lint` were revised to use `utils::span_help_and_lint`.\n- Took a stab at refactoring some generalizable calls to `utils::span_help_and_lint` to minimize duplicate code.\n- Revised INDEXING_SLICING declaration to pedantic rather than restriction.\n- Added `&x[0..].get(..3)` to the test cases.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c0ff3fa676aaa3e6d27a413c302abb0eba9805", "html_url": "https://github.com/rust-lang/rust/commit/a7c0ff3fa676aaa3e6d27a413c302abb0eba9805", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7c0ff3fa676aaa3e6d27a413c302abb0eba9805/comments", "author": {"login": "shnewto", "id": 5607902, "node_id": "MDQ6VXNlcjU2MDc5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5607902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shnewto", "html_url": "https://github.com/shnewto", "followers_url": "https://api.github.com/users/shnewto/followers", "following_url": "https://api.github.com/users/shnewto/following{/other_user}", "gists_url": "https://api.github.com/users/shnewto/gists{/gist_id}", "starred_url": "https://api.github.com/users/shnewto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shnewto/subscriptions", "organizations_url": "https://api.github.com/users/shnewto/orgs", "repos_url": "https://api.github.com/users/shnewto/repos", "events_url": "https://api.github.com/users/shnewto/events{/privacy}", "received_events_url": "https://api.github.com/users/shnewto/received_events", "type": "User", "site_admin": false}, "committer": {"login": "shnewto", "id": 5607902, "node_id": "MDQ6VXNlcjU2MDc5MDI=", "avatar_url": "https://avatars.githubusercontent.com/u/5607902?v=4", "gravatar_id": "", "url": "https://api.github.com/users/shnewto", "html_url": "https://github.com/shnewto", "followers_url": "https://api.github.com/users/shnewto/followers", "following_url": "https://api.github.com/users/shnewto/following{/other_user}", "gists_url": "https://api.github.com/users/shnewto/gists{/gist_id}", "starred_url": "https://api.github.com/users/shnewto/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/shnewto/subscriptions", "organizations_url": "https://api.github.com/users/shnewto/orgs", "repos_url": "https://api.github.com/users/shnewto/repos", "events_url": "https://api.github.com/users/shnewto/events{/privacy}", "received_events_url": "https://api.github.com/users/shnewto/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b759efa4c9702aa095f1564e9cfa76046abf2b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b759efa4c9702aa095f1564e9cfa76046abf2b1", "html_url": "https://github.com/rust-lang/rust/commit/5b759efa4c9702aa095f1564e9cfa76046abf2b1"}], "stats": {"total": 278, "additions": 164, "deletions": 114}, "files": [{"sha": "1f2c7755eee898c7640a11a495caa2b11c57938a", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 38, "deletions": 38, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a7c0ff3fa676aaa3e6d27a413c302abb0eba9805/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c0ff3fa676aaa3e6d27a413c302abb0eba9805/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=a7c0ff3fa676aaa3e6d27a413c302abb0eba9805", "patch": "@@ -59,30 +59,30 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub INDEXING_SLICING,\n-    restriction,\n+    pedantic,\n     \"indexing/slicing usage\"\n }\n \n #[derive(Copy, Clone)]\n-pub struct IndexingSlicingPass;\n+pub struct IndexingSlicing;\n \n-impl LintPass for IndexingSlicingPass {\n+impl LintPass for IndexingSlicing {\n     fn get_lints(&self) -> LintArray {\n         lint_array!(INDEXING_SLICING, OUT_OF_BOUNDS_INDEXING)\n     }\n }\n \n-impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicingPass {\n+impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicing {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr) {\n-        if let ExprIndex(ref a, ref b) = &expr.node {\n-            match &b.node {\n+        if let ExprIndex(ref array, ref index) = &expr.node {\n+            match &index.node {\n                 // Both ExprStruct and ExprPath require this approach's checks\n-                // on the `range` returned by `higher::range(cx, b)`.\n+                // on the `range` returned by `higher::range(cx, index)`.\n                 // ExprStruct handles &x[n..m], &x[n..] and &x[..n].\n                 // ExprPath handles &x[..] and x[var]\n-                ExprStruct(_, _, _) | ExprPath(_) => {\n-                    if let Some(range) = higher::range(cx, b) {\n-                        let ty = cx.tables.expr_ty(a);\n+                ExprStruct(..) | ExprPath(..) => {\n+                    if let Some(range) = higher::range(cx, index) {\n+                        let ty = cx.tables.expr_ty(array);\n                         if let ty::TyArray(_, s) = ty.sty {\n                             let size: u128 = s.assert_usize(cx.tcx).unwrap().into();\n                             // Index is a constant range.\n@@ -100,49 +100,48 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicingPass {\n                                 }\n                             }\n                         }\n+\n+                        let help_msg;\n                         match (range.start, range.end) {\n                             (None, Some(_)) => {\n-                                cx.span_lint(\n-                                    INDEXING_SLICING,\n-                                    expr.span,\n-                                    \"slicing may panic. Consider using \\\n-                                     `.get(..n)`or `.get_mut(..n)` instead\",\n-                                );\n+                                help_msg = \"Consider using `.get(..n)`or `.get_mut(..n)` instead\";\n                             }\n                             (Some(_), None) => {\n-                                cx.span_lint(\n-                                    INDEXING_SLICING,\n-                                    expr.span,\n-                                    \"slicing may panic. Consider using \\\n-                                     `.get(n..)` or .get_mut(n..)` instead\",\n-                                );\n+                                help_msg = \"Consider using `.get(n..)` or .get_mut(n..)` instead\";\n                             }\n                             (Some(_), Some(_)) => {\n-                                cx.span_lint(\n-                                    INDEXING_SLICING,\n-                                    expr.span,\n-                                    \"slicing may panic. Consider using \\\n-                                     `.get(n..m)` or `.get_mut(n..m)` instead\",\n-                                );\n+                                help_msg =\n+                                    \"Consider using `.get(n..m)` or `.get_mut(n..m)` instead\";\n                             }\n-                            (None, None) => (),\n+                            (None, None) => return, // [..] is ok\n                         }\n+\n+                        utils::span_help_and_lint(\n+                            cx,\n+                            INDEXING_SLICING,\n+                            expr.span,\n+                            \"slicing may panic.\",\n+                            help_msg,\n+                        );\n                     } else {\n-                        cx.span_lint(\n+                        utils::span_help_and_lint(\n+                            cx,\n                             INDEXING_SLICING,\n                             expr.span,\n-                            \"indexing may panic. Consider using `.get(n)` or \\\n-                             `.get_mut(n)` instead\",\n+                            \"indexing may panic.\",\n+                            \"Consider using `.get(n)` or `.get_mut(n)` instead\",\n                         );\n                     }\n                 }\n-                ExprLit(_) => {\n+                ExprLit(..) => {\n                     // [n]\n-                    let ty = cx.tables.expr_ty(a);\n+                    let ty = cx.tables.expr_ty(array);\n                     if let ty::TyArray(_, s) = ty.sty {\n                         let size: u128 = s.assert_usize(cx.tcx).unwrap().into();\n                         // Index is a constant uint.\n-                        if let Some((Constant::Int(const_index), _)) = constant(cx, cx.tables, b) {\n+                        if let Some((Constant::Int(const_index), _)) =\n+                            constant(cx, cx.tables, index)\n+                        {\n                             if size <= const_index {\n                                 utils::span_lint(\n                                     cx,\n@@ -154,11 +153,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for IndexingSlicingPass {\n                             // Else index is in bounds, ok.\n                         }\n                     } else {\n-                        cx.span_lint(\n+                        utils::span_help_and_lint(\n+                            cx,\n                             INDEXING_SLICING,\n                             expr.span,\n-                            \"indexing may panic. Consider using `.get(n)` or \\\n-                             `.get_mut(n)` instead\",\n+                            \"indexing may panic.\",\n+                            \"Consider using `.get(n)` or `.get_mut(n)` instead\",\n                         );\n                     }\n                 }"}, {"sha": "621b21429a9861fb93130da282809def2ccc63b3", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7c0ff3fa676aaa3e6d27a413c302abb0eba9805/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c0ff3fa676aaa3e6d27a413c302abb0eba9805/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=a7c0ff3fa676aaa3e6d27a413c302abb0eba9805", "patch": "@@ -431,7 +431,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n     reg.register_late_lint_pass(box unwrap::Pass);\n     reg.register_late_lint_pass(box duration_subsec::DurationSubsec);\n     reg.register_late_lint_pass(box default_trait_access::DefaultTraitAccess);\n-    reg.register_late_lint_pass(box indexing_slicing::IndexingSlicingPass);\n+    reg.register_late_lint_pass(box indexing_slicing::IndexingSlicing);\n \n     reg.register_lint_group(\"clippy_restriction\", vec![\n         arithmetic::FLOAT_ARITHMETIC,"}, {"sha": "913063b8dd548f81cce6435855f53427f345c2e7", "filename": "tests/ui/indexing_slicing.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a7c0ff3fa676aaa3e6d27a413c302abb0eba9805/tests%2Fui%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c0ff3fa676aaa3e6d27a413c302abb0eba9805/tests%2Fui%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.rs?ref=a7c0ff3fa676aaa3e6d27a413c302abb0eba9805", "patch": "@@ -21,6 +21,7 @@ fn main() {\n     &x[1..][..5];\n     &x[0..3];\n     &x[0..][..3];\n+    &x[0..].get(..3); // Ok\n     &x[0..=4];\n     &x[..=4];\n     &x[..];"}, {"sha": "642817d9e94033e57cc55caf6fa0c1818eac97f2", "filename": "tests/ui/indexing_slicing.stderr", "status": "modified", "additions": 124, "deletions": 75, "changes": 199, "blob_url": "https://github.com/rust-lang/rust/blob/a7c0ff3fa676aaa3e6d27a413c302abb0eba9805/tests%2Fui%2Findexing_slicing.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7c0ff3fa676aaa3e6d27a413c302abb0eba9805/tests%2Fui%2Findexing_slicing.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Findexing_slicing.stderr?ref=a7c0ff3fa676aaa3e6d27a413c302abb0eba9805", "patch": "@@ -1,40 +1,51 @@\n-error: indexing may panic. Consider using `.get(n)` or `.get_mut(n)` instead\n+error: indexing may panic.\n   --> $DIR/indexing_slicing.rs:11:5\n    |\n 11 |     x[index];\n    |     ^^^^^^^^\n    |\n    = note: `-D indexing-slicing` implied by `-D warnings`\n+   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: slicing may panic. Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n+error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:12:6\n    |\n 12 |     &x[index_from..index_to];\n    |      ^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n-error: slicing may panic. Consider using `.get(..n)`or `.get_mut(..n)` instead\n+error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:13:6\n    |\n 13 |     &x[index_from..][..index_to];\n    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n-error: slicing may panic. Consider using `.get(n..)` or .get_mut(n..)` instead\n+error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:13:6\n    |\n 13 |     &x[index_from..][..index_to];\n    |      ^^^^^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n-error: slicing may panic. Consider using `.get(n..)` or .get_mut(n..)` instead\n+error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:14:6\n    |\n 14 |     &x[index..];\n    |      ^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n-error: slicing may panic. Consider using `.get(..n)`or `.get_mut(..n)` instead\n+error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:15:6\n    |\n 15 |     &x[..index];\n    |      ^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: const index is out of bounds\n   --> $DIR/indexing_slicing.rs:18:5\n@@ -50,173 +61,211 @@ error: range is out of bounds\n 20 |     &x[1..5];\n    |      ^^^^^^^\n \n-error: slicing may panic. Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n+error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:20:6\n    |\n 20 |     &x[1..5];\n    |      ^^^^^^^\n+   |\n+   = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n-error: slicing may panic. Consider using `.get(..n)`or `.get_mut(..n)` instead\n+error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:21:6\n    |\n 21 |     &x[1..][..5];\n    |      ^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n-error: slicing may panic. Consider using `.get(..n)`or `.get_mut(..n)` instead\n+error: slicing may panic.\n   --> $DIR/indexing_slicing.rs:23:6\n    |\n 23 |     &x[0..][..3];\n    |      ^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:25:6\n+  --> $DIR/indexing_slicing.rs:26:6\n    |\n-25 |     &x[..=4];\n+26 |     &x[..=4];\n    |      ^^^^^^^\n \n-error: slicing may panic. Consider using `.get(..n)`or `.get_mut(..n)` instead\n-  --> $DIR/indexing_slicing.rs:25:6\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:26:6\n    |\n-25 |     &x[..=4];\n+26 |     &x[..=4];\n    |      ^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:29:6\n+  --> $DIR/indexing_slicing.rs:30:6\n    |\n-29 |     &x[5..];\n+30 |     &x[5..];\n    |      ^^^^^^\n \n-error: slicing may panic. Consider using `.get(n..)` or .get_mut(n..)` instead\n-  --> $DIR/indexing_slicing.rs:29:6\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:30:6\n    |\n-29 |     &x[5..];\n+30 |     &x[5..];\n    |      ^^^^^^\n+   |\n+   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:31:6\n+  --> $DIR/indexing_slicing.rs:32:6\n    |\n-31 |     &x[..5];\n+32 |     &x[..5];\n    |      ^^^^^^\n \n-error: slicing may panic. Consider using `.get(..n)`or `.get_mut(..n)` instead\n-  --> $DIR/indexing_slicing.rs:31:6\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:32:6\n    |\n-31 |     &x[..5];\n+32 |     &x[..5];\n    |      ^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n-error: indexing may panic. Consider using `.get(n)` or `.get_mut(n)` instead\n-  --> $DIR/indexing_slicing.rs:34:5\n+error: indexing may panic.\n+  --> $DIR/indexing_slicing.rs:35:5\n    |\n-34 |     y[0];\n+35 |     y[0];\n    |     ^^^^\n+   |\n+   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: slicing may panic. Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n-  --> $DIR/indexing_slicing.rs:35:6\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:36:6\n    |\n-35 |     &y[1..2];\n+36 |     &y[1..2];\n    |      ^^^^^^^\n+   |\n+   = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n-error: slicing may panic. Consider using `.get(..n)`or `.get_mut(..n)` instead\n-  --> $DIR/indexing_slicing.rs:38:6\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:39:6\n    |\n-38 |     &y[..=4];\n+39 |     &y[..=4];\n    |      ^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: const index is out of bounds\n-  --> $DIR/indexing_slicing.rs:41:5\n+  --> $DIR/indexing_slicing.rs:42:5\n    |\n-41 |     empty[0];\n+42 |     empty[0];\n    |     ^^^^^^^^\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:42:6\n+  --> $DIR/indexing_slicing.rs:43:6\n    |\n-42 |     &empty[1..5];\n+43 |     &empty[1..5];\n    |      ^^^^^^^^^^^\n \n-error: slicing may panic. Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n-  --> $DIR/indexing_slicing.rs:42:6\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:43:6\n    |\n-42 |     &empty[1..5];\n+43 |     &empty[1..5];\n    |      ^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:44:6\n+  --> $DIR/indexing_slicing.rs:45:6\n    |\n-44 |     &empty[..=4];\n+45 |     &empty[..=4];\n    |      ^^^^^^^^^^^\n \n-error: slicing may panic. Consider using `.get(..n)`or `.get_mut(..n)` instead\n-  --> $DIR/indexing_slicing.rs:44:6\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:45:6\n    |\n-44 |     &empty[..=4];\n+45 |     &empty[..=4];\n    |      ^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:49:6\n+  --> $DIR/indexing_slicing.rs:50:6\n    |\n-49 |     &empty[..=0];\n+50 |     &empty[..=0];\n    |      ^^^^^^^^^^^\n \n-error: slicing may panic. Consider using `.get(..n)`or `.get_mut(..n)` instead\n-  --> $DIR/indexing_slicing.rs:49:6\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:50:6\n    |\n-49 |     &empty[..=0];\n+50 |     &empty[..=0];\n    |      ^^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:51:6\n+  --> $DIR/indexing_slicing.rs:52:6\n    |\n-51 |     &empty[1..];\n+52 |     &empty[1..];\n    |      ^^^^^^^^^^\n \n-error: slicing may panic. Consider using `.get(n..)` or .get_mut(n..)` instead\n-  --> $DIR/indexing_slicing.rs:51:6\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:52:6\n    |\n-51 |     &empty[1..];\n+52 |     &empty[1..];\n    |      ^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n error: range is out of bounds\n-  --> $DIR/indexing_slicing.rs:52:6\n+  --> $DIR/indexing_slicing.rs:53:6\n    |\n-52 |     &empty[..4];\n+53 |     &empty[..4];\n    |      ^^^^^^^^^^\n \n-error: slicing may panic. Consider using `.get(..n)`or `.get_mut(..n)` instead\n-  --> $DIR/indexing_slicing.rs:52:6\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:53:6\n    |\n-52 |     &empty[..4];\n+53 |     &empty[..4];\n    |      ^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n-error: indexing may panic. Consider using `.get(n)` or `.get_mut(n)` instead\n-  --> $DIR/indexing_slicing.rs:55:5\n+error: indexing may panic.\n+  --> $DIR/indexing_slicing.rs:56:5\n    |\n-55 |     v[0];\n+56 |     v[0];\n    |     ^^^^\n+   |\n+   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: indexing may panic. Consider using `.get(n)` or `.get_mut(n)` instead\n-  --> $DIR/indexing_slicing.rs:56:5\n+error: indexing may panic.\n+  --> $DIR/indexing_slicing.rs:57:5\n    |\n-56 |     v[10];\n+57 |     v[10];\n    |     ^^^^^\n+   |\n+   = help: Consider using `.get(n)` or `.get_mut(n)` instead\n \n-error: slicing may panic. Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n-  --> $DIR/indexing_slicing.rs:57:6\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:58:6\n    |\n-57 |     &v[10..100];\n+58 |     &v[10..100];\n    |      ^^^^^^^^^^\n+   |\n+   = help: Consider using `.get(n..m)` or `.get_mut(n..m)` instead\n \n-error: slicing may panic. Consider using `.get(n..)` or .get_mut(n..)` instead\n-  --> $DIR/indexing_slicing.rs:58:6\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:59:6\n    |\n-58 |     &v[10..];\n+59 |     &v[10..];\n    |      ^^^^^^^\n+   |\n+   = help: Consider using `.get(n..)` or .get_mut(n..)` instead\n \n-error: slicing may panic. Consider using `.get(..n)`or `.get_mut(..n)` instead\n-  --> $DIR/indexing_slicing.rs:59:6\n+error: slicing may panic.\n+  --> $DIR/indexing_slicing.rs:60:6\n    |\n-59 |     &v[..100];\n+60 |     &v[..100];\n    |      ^^^^^^^^\n+   |\n+   = help: Consider using `.get(..n)`or `.get_mut(..n)` instead\n \n error: aborting due to 36 previous errors\n "}]}