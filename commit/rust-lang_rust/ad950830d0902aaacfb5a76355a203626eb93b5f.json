{"sha": "ad950830d0902aaacfb5a76355a203626eb93b5f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkOTUwODMwZDA5MDJhYWFjZmI1YTc2MzU1YTIwMzYyNmViOTNiNWY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-27T14:13:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-27T14:13:09Z"}, "message": "Merge #2090\n\n2090: move public stuff to top r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "2b782268a2d4e7fcc9a3a33f0ea805aee9d373fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b782268a2d4e7fcc9a3a33f0ea805aee9d373fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad950830d0902aaacfb5a76355a203626eb93b5f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdtaX1CRBK7hj4Ov3rIwAAdHIIAC8ahd4zEt/ti7kBMiwyponX\nHTfWyAueOYCXb1ypB98QyifjYmxOLDbG+gi3GD37mnjXydDt1RZnm6+s19LqQdkV\nDc1d+DaRwUXGgqu3A0BclSuS88m3SeZCmV5IjTkfs9cKkptCWF1ZRSSLx7Oq8FfE\n3PftZva8HQUm/ZlVUSm90LFkUYslRSJXvsuU3bVsXeVpmIT4rqnm8I0/jvqaxOeC\nDH6InQKVuFjDgOKIXhuSDsvpLSLElkwC9GiOJxe1LiMpKrXPk5KlD9G00e0X4557\nVo072PuOP6Xq3VevKBIRvWP6kYmB8IFsCeNyu81L/jiC0TOkmWn0NHKAFi5MPYo=\n=S8W5\n-----END PGP SIGNATURE-----\n", "payload": "tree 2b782268a2d4e7fcc9a3a33f0ea805aee9d373fa\nparent 6a454c7133f8f4a8c167f9b0422c719062574e5b\nparent be0f48f7cf801a6330d3e6a65b3352d544d32f63\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572185589 +0000\ncommitter GitHub <noreply@github.com> 1572185589 +0000\n\nMerge #2090\n\n2090: move public stuff to top r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad950830d0902aaacfb5a76355a203626eb93b5f", "html_url": "https://github.com/rust-lang/rust/commit/ad950830d0902aaacfb5a76355a203626eb93b5f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad950830d0902aaacfb5a76355a203626eb93b5f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6a454c7133f8f4a8c167f9b0422c719062574e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a454c7133f8f4a8c167f9b0422c719062574e5b", "html_url": "https://github.com/rust-lang/rust/commit/6a454c7133f8f4a8c167f9b0422c719062574e5b"}, {"sha": "be0f48f7cf801a6330d3e6a65b3352d544d32f63", "url": "https://api.github.com/repos/rust-lang/rust/commits/be0f48f7cf801a6330d3e6a65b3352d544d32f63", "html_url": "https://github.com/rust-lang/rust/commit/be0f48f7cf801a6330d3e6a65b3352d544d32f63"}], "stats": {"total": 202, "additions": 101, "deletions": 101}, "files": [{"sha": "149d1403fec57768a7ab916712ce943d6fa44bc3", "filename": "crates/ra_assists/src/assists/add_import.rs", "status": "renamed", "additions": 98, "deletions": 98, "changes": 196, "blob_url": "https://github.com/rust-lang/rust/blob/ad950830d0902aaacfb5a76355a203626eb93b5f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad950830d0902aaacfb5a76355a203626eb93b5f/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs?ref=ad950830d0902aaacfb5a76355a203626eb93b5f", "patch": "@@ -1,18 +1,90 @@\n //! FIXME: write short doc here\n \n use hir::{self, db::HirDatabase};\n-use ra_text_edit::TextEditBuilder;\n-\n-use crate::{\n-    assist_ctx::{Assist, AssistCtx},\n-    AssistId,\n-};\n use ra_syntax::{\n     ast::{self, NameOwner},\n     AstNode, Direction, SmolStr,\n     SyntaxKind::{PATH, PATH_SEGMENT},\n     SyntaxNode, TextRange, T,\n };\n+use ra_text_edit::TextEditBuilder;\n+\n+use crate::{\n+    assist_ctx::{Assist, AssistCtx},\n+    AssistId,\n+};\n+\n+// This function produces sequence of text edits into edit\n+// to import the target path in the most appropriate scope given\n+// the cursor position\n+pub fn auto_import_text_edit(\n+    // Ideally the position of the cursor, used to\n+    position: &SyntaxNode,\n+    // The statement to use as anchor (last resort)\n+    anchor: &SyntaxNode,\n+    // The path to import as a sequence of strings\n+    target: &[SmolStr],\n+    edit: &mut TextEditBuilder,\n+) {\n+    let container = position.ancestors().find_map(|n| {\n+        if let Some(module) = ast::Module::cast(n.clone()) {\n+            return module.item_list().map(|it| it.syntax().clone());\n+        }\n+        ast::SourceFile::cast(n).map(|it| it.syntax().clone())\n+    });\n+\n+    if let Some(container) = container {\n+        let action = best_action_for_target(container, anchor.clone(), target);\n+        make_assist(&action, target, edit);\n+    }\n+}\n+\n+pub(crate) fn add_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let path: ast::Path = ctx.find_node_at_offset()?;\n+    // We don't want to mess with use statements\n+    if path.syntax().ancestors().find_map(ast::UseItem::cast).is_some() {\n+        return None;\n+    }\n+\n+    let hir_path = hir::Path::from_ast(path.clone())?;\n+    let segments = collect_hir_path_segments(&hir_path)?;\n+    if segments.len() < 2 {\n+        return None;\n+    }\n+\n+    if let Some(module) = path.syntax().ancestors().find_map(ast::Module::cast) {\n+        if let (Some(item_list), Some(name)) = (module.item_list(), module.name()) {\n+            ctx.add_action(\n+                AssistId(\"add_import\"),\n+                format!(\"import {} in mod {}\", fmt_segments(&segments), name.text()),\n+                |edit| {\n+                    apply_auto_import(\n+                        item_list.syntax(),\n+                        &path,\n+                        &segments,\n+                        edit.text_edit_builder(),\n+                    );\n+                },\n+            );\n+        }\n+    } else {\n+        let current_file = path.syntax().ancestors().find_map(ast::SourceFile::cast)?;\n+        ctx.add_action(\n+            AssistId(\"add_import\"),\n+            format!(\"import {} in the current file\", fmt_segments(&segments)),\n+            |edit| {\n+                apply_auto_import(\n+                    current_file.syntax(),\n+                    &path,\n+                    &segments,\n+                    edit.text_edit_builder(),\n+                );\n+            },\n+        );\n+    }\n+\n+    ctx.build()\n+}\n \n fn collect_path_segments_raw(\n     segments: &mut Vec<ast::PathSegment>,\n@@ -505,7 +577,7 @@ fn apply_auto_import(\n     }\n }\n \n-pub fn collect_hir_path_segments(path: &hir::Path) -> Option<Vec<SmolStr>> {\n+fn collect_hir_path_segments(path: &hir::Path) -> Option<Vec<SmolStr>> {\n     let mut ps = Vec::<SmolStr>::with_capacity(10);\n     match path.kind {\n         hir::PathKind::Abs => ps.push(\"\".into()),\n@@ -521,78 +593,6 @@ pub fn collect_hir_path_segments(path: &hir::Path) -> Option<Vec<SmolStr>> {\n     Some(ps)\n }\n \n-// This function produces sequence of text edits into edit\n-// to import the target path in the most appropriate scope given\n-// the cursor position\n-pub fn auto_import_text_edit(\n-    // Ideally the position of the cursor, used to\n-    position: &SyntaxNode,\n-    // The statement to use as anchor (last resort)\n-    anchor: &SyntaxNode,\n-    // The path to import as a sequence of strings\n-    target: &[SmolStr],\n-    edit: &mut TextEditBuilder,\n-) {\n-    let container = position.ancestors().find_map(|n| {\n-        if let Some(module) = ast::Module::cast(n.clone()) {\n-            return module.item_list().map(|it| it.syntax().clone());\n-        }\n-        ast::SourceFile::cast(n).map(|it| it.syntax().clone())\n-    });\n-\n-    if let Some(container) = container {\n-        let action = best_action_for_target(container, anchor.clone(), target);\n-        make_assist(&action, target, edit);\n-    }\n-}\n-\n-pub(crate) fn auto_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n-    let path: ast::Path = ctx.find_node_at_offset()?;\n-    // We don't want to mess with use statements\n-    if path.syntax().ancestors().find_map(ast::UseItem::cast).is_some() {\n-        return None;\n-    }\n-\n-    let hir_path = hir::Path::from_ast(path.clone())?;\n-    let segments = collect_hir_path_segments(&hir_path)?;\n-    if segments.len() < 2 {\n-        return None;\n-    }\n-\n-    if let Some(module) = path.syntax().ancestors().find_map(ast::Module::cast) {\n-        if let (Some(item_list), Some(name)) = (module.item_list(), module.name()) {\n-            ctx.add_action(\n-                AssistId(\"auto_import\"),\n-                format!(\"import {} in mod {}\", fmt_segments(&segments), name.text()),\n-                |edit| {\n-                    apply_auto_import(\n-                        item_list.syntax(),\n-                        &path,\n-                        &segments,\n-                        edit.text_edit_builder(),\n-                    );\n-                },\n-            );\n-        }\n-    } else {\n-        let current_file = path.syntax().ancestors().find_map(ast::SourceFile::cast)?;\n-        ctx.add_action(\n-            AssistId(\"auto_import\"),\n-            format!(\"import {} in the current file\", fmt_segments(&segments)),\n-            |edit| {\n-                apply_auto_import(\n-                    current_file.syntax(),\n-                    &path,\n-                    &segments,\n-                    edit.text_edit_builder(),\n-                );\n-            },\n-        );\n-    }\n-\n-    ctx.build()\n-}\n-\n #[cfg(test)]\n mod tests {\n     use super::*;\n@@ -601,7 +601,7 @@ mod tests {\n     #[test]\n     fn test_auto_import_add_use_no_anchor() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n std::fmt::Debug<|>\n     \",\n@@ -615,7 +615,7 @@ Debug<|>\n     #[test]\n     fn test_auto_import_add_use_no_anchor_with_item_below() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n std::fmt::Debug<|>\n \n@@ -636,7 +636,7 @@ fn main() {\n     #[test]\n     fn test_auto_import_add_use_no_anchor_with_item_above() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n fn main() {\n }\n@@ -657,7 +657,7 @@ Debug<|>\n     #[test]\n     fn test_auto_import_add_use_no_anchor_2seg() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n std::fmt<|>::Debug\n     \",\n@@ -672,7 +672,7 @@ fmt<|>::Debug\n     #[test]\n     fn test_auto_import_add_use() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use stdx;\n \n@@ -692,7 +692,7 @@ impl Debug<|> for Foo {\n     #[test]\n     fn test_auto_import_file_use_other_anchor() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n impl std::fmt::Debug<|> for Foo {\n }\n@@ -709,7 +709,7 @@ impl Debug<|> for Foo {\n     #[test]\n     fn test_auto_import_add_use_other_anchor_indent() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n     impl std::fmt::Debug<|> for Foo {\n     }\n@@ -726,7 +726,7 @@ impl Debug<|> for Foo {\n     #[test]\n     fn test_auto_import_split_different() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt;\n \n@@ -745,7 +745,7 @@ impl io<|> for Foo {\n     #[test]\n     fn test_auto_import_split_self_for_use() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt;\n \n@@ -764,7 +764,7 @@ impl Debug<|> for Foo {\n     #[test]\n     fn test_auto_import_split_self_for_target() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt::Debug;\n \n@@ -783,7 +783,7 @@ impl fmt<|> for Foo {\n     #[test]\n     fn test_auto_import_add_to_nested_self_nested() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt::{Debug, nested::{Display}};\n \n@@ -802,7 +802,7 @@ impl nested<|> for Foo {\n     #[test]\n     fn test_auto_import_add_to_nested_self_already_included() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt::{Debug, nested::{self, Display}};\n \n@@ -821,7 +821,7 @@ impl nested<|> for Foo {\n     #[test]\n     fn test_auto_import_add_to_nested_nested() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt::{Debug, nested::{Display}};\n \n@@ -840,7 +840,7 @@ impl Debug<|> for Foo {\n     #[test]\n     fn test_auto_import_split_common_target_longer() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt::Debug;\n \n@@ -859,7 +859,7 @@ impl Display<|> for Foo {\n     #[test]\n     fn test_auto_import_split_common_use_longer() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt::nested::Debug;\n \n@@ -878,7 +878,7 @@ impl Display<|> for Foo {\n     #[test]\n     fn test_auto_import_alias() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt as foo;\n \n@@ -897,7 +897,7 @@ impl Debug<|> for Foo {\n     #[test]\n     fn test_auto_import_not_applicable_one_segment() {\n         check_assist_not_applicable(\n-            auto_import,\n+            add_import,\n             \"\n impl foo<|> for Foo {\n }\n@@ -908,7 +908,7 @@ impl foo<|> for Foo {\n     #[test]\n     fn test_auto_import_not_applicable_in_use() {\n         check_assist_not_applicable(\n-            auto_import,\n+            add_import,\n             \"\n use std::fmt<|>;\n \",\n@@ -918,7 +918,7 @@ use std::fmt<|>;\n     #[test]\n     fn test_auto_import_add_use_no_anchor_in_mod_mod() {\n         check_assist(\n-            auto_import,\n+            add_import,\n             \"\n mod foo {\n     mod bar {", "previous_filename": "crates/ra_assists/src/assists/auto_import.rs"}, {"sha": "7a1657d87f624997c01dfddf720c79d6f72fb07d", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ad950830d0902aaacfb5a76355a203626eb93b5f/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad950830d0902aaacfb5a76355a203626eb93b5f/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=ad950830d0902aaacfb5a76355a203626eb93b5f", "patch": "@@ -17,7 +17,7 @@ use ra_syntax::{TextRange, TextUnit};\n use ra_text_edit::TextEdit;\n \n pub(crate) use crate::assist_ctx::{Assist, AssistCtx};\n-pub use crate::assists::auto_import::auto_import_text_edit;\n+pub use crate::assists::add_import::auto_import_text_edit;\n \n /// Unique identifier of the assist, should not be shown to the user\n /// directly.\n@@ -107,7 +107,7 @@ mod assists {\n     mod replace_if_let_with_match;\n     mod split_import;\n     mod remove_dbg;\n-    pub(crate) mod auto_import;\n+    pub(crate) mod add_import;\n     mod add_missing_impl_members;\n     mod move_guard;\n     mod move_bounds;\n@@ -129,7 +129,7 @@ mod assists {\n             replace_if_let_with_match::replace_if_let_with_match,\n             split_import::split_import,\n             remove_dbg::remove_dbg,\n-            auto_import::auto_import,\n+            add_import::add_import,\n             add_missing_impl_members::add_missing_impl_members,\n             add_missing_impl_members::add_missing_default_members,\n             inline_local_variable::inline_local_varialbe,"}]}