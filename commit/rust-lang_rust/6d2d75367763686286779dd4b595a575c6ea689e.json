{"sha": "6d2d75367763686286779dd4b595a575c6ea689e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMmQ3NTM2Nzc2MzY4NjI4Njc3OWRkNGI1OTVhNTc1YzZlYTY4OWU=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-03-09T17:57:13Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-03-14T00:01:46Z"}, "message": "vscode: prepare config for nightlies", "tree": {"sha": "8d390ded695e1299b270dcf46434c8ed69dcecf4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d390ded695e1299b270dcf46434c8ed69dcecf4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d2d75367763686286779dd4b595a575c6ea689e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2d75367763686286779dd4b595a575c6ea689e", "html_url": "https://github.com/rust-lang/rust/commit/6d2d75367763686286779dd4b595a575c6ea689e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d2d75367763686286779dd4b595a575c6ea689e/comments", "author": null, "committer": null, "parents": [{"sha": "bc98c02dd0cdc33e3b34c0054c1570702e198d9b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc98c02dd0cdc33e3b34c0054c1570702e198d9b", "html_url": "https://github.com/rust-lang/rust/commit/bc98c02dd0cdc33e3b34c0054c1570702e198d9b"}], "stats": {"total": 111, "additions": 96, "deletions": 15}, "files": [{"sha": "e2b0f6f84700d438c70ad4f1e42a91a6a0096bba", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 96, "deletions": 15, "changes": 111, "blob_url": "https://github.com/rust-lang/rust/blob/6d2d75367763686286779dd4b595a575c6ea689e/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/6d2d75367763686286779dd4b595a575c6ea689e/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=6d2d75367763686286779dd4b595a575c6ea689e", "patch": "@@ -23,22 +23,36 @@ export interface CargoFeatures {\n     allFeatures: boolean;\n     features: string[];\n }\n+\n+export const enum UpdatesChannel {\n+    Stable = \"stable\",\n+    Nightly = \"nightly\"\n+}\n+\n+export const NIGHTLY_TAG = \"nightly\";\n export class Config {\n-    private static readonly rootSection = \"rust-analyzer\";\n-    private static readonly requiresReloadOpts = [\n+    readonly extensionId = \"matklad.rust-analyzer\";\n+\n+    private readonly rootSection = \"rust-analyzer\";\n+    private readonly requiresReloadOpts = [\n         \"cargoFeatures\",\n         \"cargo-watch\",\n         \"highlighting.semanticTokens\",\n         \"inlayHints\",\n     ]\n-        .map(opt => `${Config.rootSection}.${opt}`);\n+        .map(opt => `${this.rootSection}.${opt}`);\n \n-    private static readonly extensionVersion: string = (() => {\n+    /**\n+     * Either `nightly` or `YYYY-MM-DD` (i.e. `stable` release)\n+     */\n+    private readonly extensionVersion: string = (() => {\n         const packageJsonVersion = vscode\n             .extensions\n-            .getExtension(\"matklad.rust-analyzer\")!\n+            .getExtension(this.extensionId)!\n             .packageJSON\n-            .version as string; // n.n.YYYYMMDD\n+            .version as string;\n+\n+        if (packageJsonVersion.endsWith(NIGHTLY_TAG)) return NIGHTLY_TAG;\n \n         const realVersionRegexp = /^\\d+\\.\\d+\\.(\\d{4})(\\d{2})(\\d{2})/;\n         const [, yyyy, mm, dd] = packageJsonVersion.match(realVersionRegexp)!;\n@@ -54,7 +68,7 @@ export class Config {\n     }\n \n     private refreshConfig() {\n-        this.cfg = vscode.workspace.getConfiguration(Config.rootSection);\n+        this.cfg = vscode.workspace.getConfiguration(this.rootSection);\n         const enableLogging = this.cfg.get(\"trace.extension\") as boolean;\n         log.setEnabled(enableLogging);\n         log.debug(\"Using configuration:\", this.cfg);\n@@ -63,7 +77,7 @@ export class Config {\n     private async onConfigChange(event: vscode.ConfigurationChangeEvent) {\n         this.refreshConfig();\n \n-        const requiresReloadOpt = Config.requiresReloadOpts.find(\n+        const requiresReloadOpt = this.requiresReloadOpts.find(\n             opt => event.affectsConfiguration(opt)\n         );\n \n@@ -121,8 +135,16 @@ export class Config {\n         }\n     }\n \n+    get installedExtensionUpdateChannel() {\n+        if (this.serverPath !== null) return null;\n+\n+        return this.extensionVersion === NIGHTLY_TAG\n+            ? UpdatesChannel.Nightly\n+            : UpdatesChannel.Stable;\n+    }\n+\n     get serverSource(): null | ArtifactSource {\n-        const serverPath = RA_LSP_DEBUG ?? this.cfg.get<null | string>(\"serverPath\");\n+        const serverPath = RA_LSP_DEBUG ?? this.serverPath;\n \n         if (serverPath) {\n             return {\n@@ -135,23 +157,47 @@ export class Config {\n \n         if (!prebuiltBinaryName) return null;\n \n+        return this.createGithubReleaseSource(\n+            prebuiltBinaryName,\n+            this.extensionVersion\n+        );\n+    }\n+\n+    private createGithubReleaseSource(file: string, tag: string): ArtifactSource.GithubRelease {\n         return {\n             type: ArtifactSource.Type.GithubRelease,\n+            file,\n+            tag,\n             dir: this.ctx.globalStoragePath,\n-            file: prebuiltBinaryName,\n-            storage: this.ctx.globalState,\n-            tag: Config.extensionVersion,\n-            askBeforeDownload: this.cfg.get(\"updates.askBeforeDownload\") as boolean,\n             repo: {\n                 name: \"rust-analyzer\",\n-                owner: \"rust-analyzer\",\n+                owner: \"rust-analyzer\"\n             }\n-        };\n+        }\n     }\n \n+    get nightlyVsixSource(): ArtifactSource.GithubRelease {\n+        return this.createGithubReleaseSource(\"rust-analyzer.vsix\", NIGHTLY_TAG);\n+    }\n+\n+    readonly installedNightlyExtensionReleaseDate = new DateStorage(\n+        \"rust-analyzer-installed-nightly-extension-release-date\",\n+        this.ctx.globalState\n+    );\n+    readonly serverReleaseDate = new DateStorage(\n+        \"rust-analyzer-server-release-date\",\n+        this.ctx.globalState\n+    );\n+    readonly serverReleaseTag = new StringStorage(\n+        \"rust-analyzer-release-tag\", this.ctx.globalState\n+    );\n+\n     // We don't do runtime config validation here for simplicity. More on stackoverflow:\n     // https://stackoverflow.com/questions/60135780/what-is-the-best-way-to-type-check-the-configuration-for-vscode-extension\n \n+    private get serverPath() { return this.cfg.get(\"serverPath\") as null | string; }\n+    get updatesChannel() { return this.cfg.get(\"updates.channel\") as UpdatesChannel; }\n+    get askBeforeDownload() { return this.cfg.get(\"updates.askBeforeDownload\") as boolean; }\n     get highlightingSemanticTokens() { return this.cfg.get(\"highlighting.semanticTokens\") as boolean; }\n     get highlightingOn() { return this.cfg.get(\"highlightingOn\") as boolean; }\n     get rainbowHighlightingOn() { return this.cfg.get(\"rainbowHighlightingOn\") as boolean; }\n@@ -189,3 +235,38 @@ export class Config {\n     // for internal use\n     get withSysroot() { return this.cfg.get(\"withSysroot\", true) as boolean; }\n }\n+\n+export class StringStorage {\n+    constructor(\n+        private readonly key: string,\n+        private readonly storage: vscode.Memento\n+    ) {}\n+\n+    get(): null | string {\n+        const tag = this.storage.get(this.key, null);\n+        log.debug(this.key, \"==\", tag);\n+        return tag;\n+    }\n+    async set(tag: string) {\n+        log.debug(this.key, \"=\", tag);\n+        await this.storage.update(this.key, tag);\n+    }\n+}\n+export class DateStorage {\n+\n+    constructor(\n+        private readonly key: string,\n+        private readonly storage: vscode.Memento\n+    ) {}\n+\n+    get(): null | Date {\n+        const date = this.storage.get(this.key, null);\n+        log.debug(this.key, \"==\", date);\n+        return date ? new Date(date) : null;\n+    }\n+\n+    async set(date: null | Date) {\n+        log.debug(this.key, \"=\", date);\n+        await this.storage.update(this.key, date);\n+    }\n+}"}]}