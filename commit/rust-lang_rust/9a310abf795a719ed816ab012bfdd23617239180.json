{"sha": "9a310abf795a719ed816ab012bfdd23617239180", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhMzEwYWJmNzk1YTcxOWVkODE2YWIwMTJiZmRkMjM2MTcyMzkxODA=", "commit": {"author": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-06-22T23:08:07Z"}, "committer": {"name": "Taylor Cramer", "email": "cramertj@google.com", "date": "2018-06-22T23:08:07Z"}, "message": "Remove impl trait names and move bits of await into a function", "tree": {"sha": "6276ab0a2fb8f1ef27ecef856962ee89cb3dc561", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6276ab0a2fb8f1ef27ecef856962ee89cb3dc561"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a310abf795a719ed816ab012bfdd23617239180", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a310abf795a719ed816ab012bfdd23617239180", "html_url": "https://github.com/rust-lang/rust/commit/9a310abf795a719ed816ab012bfdd23617239180", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a310abf795a719ed816ab012bfdd23617239180/comments", "author": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cramertj", "id": 5963049, "node_id": "MDQ6VXNlcjU5NjMwNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5963049?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cramertj", "html_url": "https://github.com/cramertj", "followers_url": "https://api.github.com/users/cramertj/followers", "following_url": "https://api.github.com/users/cramertj/following{/other_user}", "gists_url": "https://api.github.com/users/cramertj/gists{/gist_id}", "starred_url": "https://api.github.com/users/cramertj/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cramertj/subscriptions", "organizations_url": "https://api.github.com/users/cramertj/orgs", "repos_url": "https://api.github.com/users/cramertj/repos", "events_url": "https://api.github.com/users/cramertj/events{/privacy}", "received_events_url": "https://api.github.com/users/cramertj/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b2d2d1dc55f4446b18d0f5375afcd51639eae50", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2d2d1dc55f4446b18d0f5375afcd51639eae50", "html_url": "https://github.com/rust-lang/rust/commit/0b2d2d1dc55f4446b18d0f5375afcd51639eae50"}], "stats": {"total": 58, "additions": 28, "deletions": 30}, "files": [{"sha": "d6da2fce69a7469819fa05116467a98ab56148f4", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9a310abf795a719ed816ab012bfdd23617239180/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a310abf795a719ed816ab012bfdd23617239180/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=9a310abf795a719ed816ab012bfdd23617239180", "patch": "@@ -877,7 +877,7 @@ impl<'a> LoweringContext<'a> {\n \n         let unstable_span = self.allow_internal_unstable(CompilerDesugaringKind::Async, span);\n         let gen_future = self.expr_std_path(\n-            unstable_span, &[\"future\", \"future_from_generator\"], None, ThinVec::new());\n+            unstable_span, &[\"future\", \"from_generator\"], None, ThinVec::new());\n         hir::ExprCall(P(gen_future), hir_vec![generator])\n     }\n \n@@ -1173,11 +1173,8 @@ impl<'a> LoweringContext<'a> {\n                 let span = t.span;\n                 match itctx {\n                     ImplTraitContext::Existential(fn_def_id) => {\n-                        // Set the name to `impl Bound1 + Bound2`\n-                        let exist_ty_name = Symbol::intern(&pprust::ty_to_string(t));\n                         self.lower_existential_impl_trait(\n-                            span, fn_def_id, exist_ty_name,\n-                            |this| this.lower_param_bounds(bounds, itctx))\n+                            span, fn_def_id, |this| this.lower_param_bounds(bounds, itctx))\n                     }\n                     ImplTraitContext::Universal(def_id) => {\n                         let def_node_id = self.next_id().node_id;\n@@ -1245,7 +1242,6 @@ impl<'a> LoweringContext<'a> {\n         &mut self,\n         span: Span,\n         fn_def_id: DefId,\n-        exist_ty_name: Name,\n         lower_bounds: impl FnOnce(&mut LoweringContext) -> hir::GenericBounds,\n     ) -> hir::Ty_ {\n         // We need to manually repeat the code of `next_id` because the lowering\n@@ -1307,7 +1303,7 @@ impl<'a> LoweringContext<'a> {\n             let exist_ty_item = hir::Item {\n                 id: exist_ty_id.node_id,\n                 hir_id: exist_ty_id.hir_id,\n-                name: exist_ty_name,\n+                name: keywords::Invalid.name(),\n                 attrs: Default::default(),\n                 node: exist_ty_item_kind,\n                 vis: hir::Visibility::Inherited,\n@@ -2090,19 +2086,13 @@ impl<'a> LoweringContext<'a> {\n             lifetime_collector.output_lifetime\n         };\n \n-        let output_ty_name_owned;\n-        let (output_ty_name, span) = match output {\n-            FunctionRetTy::Ty(ty) => {\n-                output_ty_name_owned = pprust::ty_to_string(ty);\n-                (&*output_ty_name_owned, ty.span)\n-            },\n-            FunctionRetTy::Default(span) => (\"()\", *span),\n+        let span = match output {\n+            FunctionRetTy::Ty(ty) => ty.span,\n+            FunctionRetTy::Default(span) => *span,\n         };\n \n-        // FIXME(cramertj) add lifetimes (see FIXME below) to the name\n-        let exist_ty_name = Symbol::intern(&format!(\"impl Future<Output = {}>\", output_ty_name));\n         let impl_trait_ty = self.lower_existential_impl_trait(\n-            span, fn_def_id, exist_ty_name, |this| {\n+            span, fn_def_id, |this| {\n             let output_ty = match output {\n                 FunctionRetTy::Ty(ty) =>\n                     this.lower_ty(ty, ImplTraitContext::Existential(fn_def_id)),"}, {"sha": "2da775fdc949e20f0be1cefcfddbe2333881aa26", "filename": "src/libstd/future.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9a310abf795a719ed816ab012bfdd23617239180/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a310abf795a719ed816ab012bfdd23617239180/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=9a310abf795a719ed816ab012bfdd23617239180", "patch": "@@ -26,7 +26,7 @@ pub use core::future::*;\n /// This function returns a `GenFuture` underneath, but hides it in `impl Trait` to give\n /// better error messages (`impl Future` rather than `GenFuture<[closure.....]>`).\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n-pub fn future_from_generator<T: Generator<Yield = ()>>(x: T) -> impl Future<Output = T::Return> {\n+pub fn from_generator<T: Generator<Yield = ()>>(x: T) -> impl Future<Output = T::Return> {\n     GenFuture(x)\n }\n \n@@ -71,31 +71,32 @@ where\n     F: FnOnce() -> R\n {\n     let old_cx = TLS_CX.with(|tls_cx| {\n-        let old_cx = tls_cx.get();\n-        tls_cx.set(NonNull::new(\n-                cx as *mut task::Context as *mut () as *mut task::Context<'static>));\n-        old_cx\n+        tls_cx.replace(NonNull::new(\n+            cx\n+                as *mut task::Context\n+                as *mut ()\n+                as *mut task::Context<'static>\n+        ))\n     });\n     let _reset_cx = SetOnDrop(old_cx);\n-    let res = f();\n-    res\n+    f()\n }\n \n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n /// Retrieves the thread-local task context used by async/await futures.\n ///\n+/// This function acquires exclusive access to the task context.\n+///\n /// Panics if no task has been set or if the task context has already been\n /// retrived by a surrounding call to get_task_cx.\n pub fn get_task_cx<F, R>(f: F) -> R\n where\n     F: FnOnce(&mut task::Context) -> R\n {\n     let cx_ptr = TLS_CX.with(|tls_cx| {\n-        let cx_ptr = tls_cx.get();\n         // Clear the entry so that nested `with_get_cx` calls\n         // will fail or set their own value.\n-        tls_cx.set(None);\n-        cx_ptr\n+        tls_cx.replace(None)\n     });\n     let _reset_cx = SetOnDrop(cx_ptr);\n \n@@ -104,3 +105,12 @@ where\n         Please file an issue on https://github.com/rust-lang/rust.\");\n     unsafe { f(cx_ptr.as_mut()) }\n }\n+\n+#[unstable(feature = \"gen_future\", issue = \"50547\")]\n+/// Polls a future in the current thread-local task context.\n+pub fn poll_in_task_cx<F>(f: &mut PinMut<F>) -> Poll<F::Output>\n+where\n+    F: Future\n+{\n+    get_task_cx(|cx| f.reborrow().poll(cx))\n+}"}, {"sha": "a856e7736fbaab1e2882827dcbabb77a4b15d55b", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9a310abf795a719ed816ab012bfdd23617239180/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a310abf795a719ed816ab012bfdd23617239180/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=9a310abf795a719ed816ab012bfdd23617239180", "patch": "@@ -222,9 +222,7 @@ macro_rules! await {\n         let mut pinned = $e;\n         let mut pinned = unsafe { $crate::mem::PinMut::new_unchecked(&mut pinned) };\n         loop {\n-            match $crate::future::get_task_cx(|cx|\n-                $crate::future::Future::poll(pinned.reborrow(), cx))\n-            {\n+            match $crate::future::poll_in_task_cx(&mut pinned) {\n                 // FIXME(cramertj) prior to stabilizing await, we have to ensure that this\n                 // can't be used to create a generator on stable via `|| await!()`.\n                 $crate::task::Poll::Pending => yield,"}]}