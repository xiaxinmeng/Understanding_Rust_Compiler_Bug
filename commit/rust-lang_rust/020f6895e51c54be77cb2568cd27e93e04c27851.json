{"sha": "020f6895e51c54be77cb2568cd27e93e04c27851", "node_id": "C_kwDOAAsO6NoAKDAyMGY2ODk1ZTUxYzU0YmU3N2NiMjU2OGNkMjdlOTNlMDRjMjc4NTE", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-03T15:08:18Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-09-03T15:32:21Z"}, "message": "Fix nested break expressions, expecting unknown types", "tree": {"sha": "a1022512826d9f9c93e9ae736579742b2f606f2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1022512826d9f9c93e9ae736579742b2f606f2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/020f6895e51c54be77cb2568cd27e93e04c27851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/020f6895e51c54be77cb2568cd27e93e04c27851", "html_url": "https://github.com/rust-lang/rust/commit/020f6895e51c54be77cb2568cd27e93e04c27851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/020f6895e51c54be77cb2568cd27e93e04c27851/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afa374e58e0bce33b666ee83baa24f16cb486a75", "url": "https://api.github.com/repos/rust-lang/rust/commits/afa374e58e0bce33b666ee83baa24f16cb486a75", "html_url": "https://github.com/rust-lang/rust/commit/afa374e58e0bce33b666ee83baa24f16cb486a75"}], "stats": {"total": 57, "additions": 35, "deletions": 22}, "files": [{"sha": "2d04a864a2cfd98455a5d198edaec33cc8303f0b", "filename": "crates/hir-ty/src/infer/expr.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/020f6895e51c54be77cb2568cd27e93e04c27851/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020f6895e51c54be77cb2568cd27e93e04c27851/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Finfer%2Fexpr.rs?ref=020f6895e51c54be77cb2568cd27e93e04c27851", "patch": "@@ -382,36 +382,35 @@ impl<'a> InferenceContext<'a> {\n                 TyKind::Never.intern(Interner)\n             }\n             Expr::Break { expr, label } => {\n-                let mut coerce = match find_breakable(&mut self.breakables, label.as_ref()) {\n-                    Some(ctxt) => {\n-                        // avoiding the borrowck\n-                        mem::replace(\n-                            &mut ctxt.coerce,\n-                            CoerceMany::new(self.result.standard_types.unknown.clone()),\n-                        )\n-                    }\n-                    None => CoerceMany::new(self.result.standard_types.unknown.clone()),\n-                };\n-\n                 let val_ty = if let Some(expr) = *expr {\n                     self.infer_expr(expr, &Expectation::none())\n                 } else {\n                     TyBuilder::unit()\n                 };\n \n-                // FIXME: create a synthetic `()` during lowering so we have something to refer to here?\n-                coerce.coerce(self, *expr, &val_ty);\n+                match find_breakable(&mut self.breakables, label.as_ref()) {\n+                    Some(ctxt) => {\n+                        // avoiding the borrowck\n+                        let mut coerce = mem::replace(\n+                            &mut ctxt.coerce,\n+                            CoerceMany::new(self.result.standard_types.unknown.clone()),\n+                        );\n \n-                if let Some(ctxt) = find_breakable(&mut self.breakables, label.as_ref()) {\n-                    ctxt.coerce = coerce;\n-                    ctxt.may_break = true;\n-                } else {\n-                    self.push_diagnostic(InferenceDiagnostic::BreakOutsideOfLoop {\n-                        expr: tgt_expr,\n-                        is_break: true,\n-                    });\n-                };\n+                        // FIXME: create a synthetic `()` during lowering so we have something to refer to here?\n+                        coerce.coerce(self, *expr, &val_ty);\n \n+                        let ctxt = find_breakable(&mut self.breakables, label.as_ref())\n+                            .expect(\"breakable stack changed during coercion\");\n+                        ctxt.coerce = coerce;\n+                        ctxt.may_break = true;\n+                    }\n+                    None => {\n+                        self.push_diagnostic(InferenceDiagnostic::BreakOutsideOfLoop {\n+                            expr: tgt_expr,\n+                            is_break: true,\n+                        });\n+                    }\n+                }\n                 TyKind::Never.intern(Interner)\n             }\n             Expr::Return { expr } => {"}, {"sha": "4ea103e5d9ec3cf1bc5fc85e4ff0866b18388826", "filename": "crates/hir-ty/src/tests/simple.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/020f6895e51c54be77cb2568cd27e93e04c27851/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/020f6895e51c54be77cb2568cd27e93e04c27851/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Ftests%2Fsimple.rs?ref=020f6895e51c54be77cb2568cd27e93e04c27851", "patch": "@@ -3069,3 +3069,17 @@ fn main() {\n         \"#,\n     );\n }\n+\n+#[test]\n+fn nested_break() {\n+    check_no_mismatches(\n+        r#\"\n+fn func() {\n+    let int = loop {\n+        break 0;\n+        break (break 0);\n+    };\n+}\n+    \"#,\n+    );\n+}"}]}