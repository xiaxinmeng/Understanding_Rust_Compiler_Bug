{"sha": "d5caeac0964c0ce23e38e1bf75706fedbf1cd32c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1Y2FlYWMwOTY0YzBjZTIzZTM4ZTFiZjc1NzA2ZmVkYmYxY2QzMmM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-07T06:06:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-09-07T06:06:11Z"}, "message": "Rollup merge of #64233 - varkor:correct-pluralisation, r=estebank\n\nCorrect pluralisation of various diagnostic messages", "tree": {"sha": "0ae5ee3328672bf878bc4dcd1f9d00776374948b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ae5ee3328672bf878bc4dcd1f9d00776374948b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdc0jUCRBK7hj4Ov3rIwAAdHIIAGXqR0aIocp3wEdEx5mYDUck\nGbxvTshfCljF/kZJkjGJwmBRNY0tFmqBL/xRs66JmxYiVfKu4awORI/ULBasFK53\nHV5MH6UJDiNgrseyKRjlsVZFLPUKuhUXJPi7nmoy45e4v3nqyIsKwEA2sJClnGz9\nRBHaseMCbsY+Jpi1o5gw4BzdFfTAW8peGJ1muC83lsttGD1UE9i1xGbrrvs6h7pv\n0KpkoXY7EO2f4YFZ3Vho17nos7fZBIQD8Me5kS1tpnhSDODMEJE79RxurltfI2ra\n2qf2TErYCL4Ur3TxW++Kc/F9y1r3zPK3h6dkKpD+2e5/JNheM1Vnx33HHTsaxhA=\n=LCIa\n-----END PGP SIGNATURE-----\n", "payload": "tree 0ae5ee3328672bf878bc4dcd1f9d00776374948b\nparent 84cb3529b627e8ae034237156c04bdad84ea8b61\nparent 0b97726e6c524d2cc0de4c2f5b1284eca010a7b2\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1567836371 +0200\ncommitter GitHub <noreply@github.com> 1567836371 +0200\n\nRollup merge of #64233 - varkor:correct-pluralisation, r=estebank\n\nCorrect pluralisation of various diagnostic messages\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c", "html_url": "https://github.com/rust-lang/rust/commit/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84cb3529b627e8ae034237156c04bdad84ea8b61", "url": "https://api.github.com/repos/rust-lang/rust/commits/84cb3529b627e8ae034237156c04bdad84ea8b61", "html_url": "https://github.com/rust-lang/rust/commit/84cb3529b627e8ae034237156c04bdad84ea8b61"}, {"sha": "0b97726e6c524d2cc0de4c2f5b1284eca010a7b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b97726e6c524d2cc0de4c2f5b1284eca010a7b2", "html_url": "https://github.com/rust-lang/rust/commit/0b97726e6c524d2cc0de4c2f5b1284eca010a7b2"}], "stats": {"total": 64, "additions": 42, "deletions": 22}, "files": [{"sha": "f67526ea4a1d9a27e35dd20aec8b6607bdfa9499", "filename": "src/librustc/ty/error.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Flibrustc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Flibrustc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ferror.rs?ref=d5caeac0964c0ce23e38e1bf75706fedbf1cd32c", "patch": "@@ -200,7 +200,9 @@ impl<'tcx> ty::TyS<'tcx> {\n             ty::Array(_, n) => {\n                 let n = tcx.lift_to_global(&n).unwrap();\n                 match n.try_eval_usize(tcx, ty::ParamEnv::empty()) {\n-                    Some(n) => format!(\"array of {} elements\", n).into(),\n+                    Some(n) => {\n+                        format!(\"array of {} element{}\", n, if n != 1 { \"s\" } else { \"\" }).into()\n+                    }\n                     None => \"array\".into(),\n                 }\n             }"}, {"sha": "8502b89de1469b78c718075d4a5025f513e20274", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 23, "deletions": 10, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=d5caeac0964c0ce23e38e1bf75706fedbf1cd32c", "patch": "@@ -1098,22 +1098,35 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     fn error_scrutinee_inconsistent_length(&self, span: Span, min_len: u64, size: u64) {\n         struct_span_err!(\n-            self.tcx.sess, span, E0527,\n-            \"pattern requires {} elements but array has {}\",\n-            min_len, size\n+            self.tcx.sess,\n+            span,\n+            E0527,\n+            \"pattern requires {} element{} but array has {}\",\n+            min_len,\n+            if min_len != 1 { \"s\" } else { \"\" },\n+            size,\n         )\n-        .span_label(span, format!(\"expected {} elements\", size))\n+        .span_label(span, format!(\"expected {} element{}\", size, if size != 1 { \"s\" } else { \"\" }))\n         .emit();\n     }\n \n     fn error_scrutinee_with_rest_inconsistent_length(&self, span: Span, min_len: u64, size: u64) {\n         struct_span_err!(\n-            self.tcx.sess, span, E0528,\n-            \"pattern requires at least {} elements but array has {}\",\n-            min_len, size\n-        )\n-        .span_label(span, format!(\"pattern cannot match array of {} elements\", size))\n-        .emit();\n+            self.tcx.sess,\n+            span,\n+            E0528,\n+            \"pattern requires at least {} element{} but array has {}\",\n+            min_len,\n+            if min_len != 1 { \"s\" } else { \"\" },\n+            size,\n+        ).span_label(\n+            span,\n+            format!(\n+                \"pattern cannot match array of {} element{}\",\n+                size,\n+                if size != 1 { \"s\" } else { \"\" },\n+            ),\n+        ).emit();\n     }\n \n     fn error_scrutinee_unfixed_length(&self, span: Span) {"}, {"sha": "23735727fe8cfbc1c700cf83f64fca94dea1fc8f", "filename": "src/libsyntax/ext/tt/transcribe.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Ftranscribe.rs?ref=d5caeac0964c0ce23e38e1bf75706fedbf1cd32c", "patch": "@@ -345,8 +345,13 @@ impl LockstepIterSize {\n                 LockstepIterSize::Constraint(r_len, _) if l_len == r_len => self,\n                 LockstepIterSize::Constraint(r_len, r_id) => {\n                     let msg = format!(\n-                        \"meta-variable `{}` repeats {} times, but `{}` repeats {} times\",\n-                        l_id, l_len, r_id, r_len\n+                        \"meta-variable `{}` repeats {} time{}, but `{}` repeats {} time{}\",\n+                        l_id,\n+                        l_len,\n+                        if l_len != 1 { \"s\" } else { \"\" },\n+                        r_id,\n+                        r_len,\n+                        if r_len != 1 { \"s\" } else { \"\" },\n                     );\n                     LockstepIterSize::Contradiction(msg)\n                 }"}, {"sha": "dec84c8286292bb03c2ee7287e42ada09dcbab6b", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=d5caeac0964c0ce23e38e1bf75706fedbf1cd32c", "patch": "@@ -291,7 +291,7 @@ impl<'a, 'b> Context<'a, 'b> {\n                 &format!(\n                     \"{} positional argument{} in format string, but {}\",\n                     count,\n-                    if count > 1 { \"s\" } else { \"\" },\n+                    if count != 1 { \"s\" } else { \"\" },\n                     self.describe_num_args(),\n                 ),\n             );"}, {"sha": "b69edcf26063738cc7d22383b64ff3649c82fa4d", "filename": "src/test/ui/coercion/coercion-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.rs?ref=d5caeac0964c0ce23e38e1bf75706fedbf1cd32c", "patch": "@@ -4,5 +4,5 @@ fn main() {\n     let _: &[i32] = [0];\n     //~^ ERROR mismatched types\n     //~| expected type `&[i32]`\n-    //~| expected &[i32], found array of 1 elements\n+    //~| expected &[i32], found array of 1 element\n }"}, {"sha": "ccd776e9879382b0bddada16fd54304b5e64482e", "filename": "src/test/ui/coercion/coercion-slice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoercion%2Fcoercion-slice.stderr?ref=d5caeac0964c0ce23e38e1bf75706fedbf1cd32c", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched types\n LL |     let _: &[i32] = [0];\n    |                     ^^^\n    |                     |\n-   |                     expected &[i32], found array of 1 elements\n+   |                     expected &[i32], found array of 1 element\n    |                     help: consider borrowing here: `&[0]`\n    |\n    = note: expected type `&[i32]`"}, {"sha": "5189f550cfbd6c67ff23b8e4f1c055dc50e37976", "filename": "src/test/ui/issues/issue-15783.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Ftest%2Fui%2Fissues%2Fissue-15783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Ftest%2Fui%2Fissues%2Fissue-15783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15783.rs?ref=d5caeac0964c0ce23e38e1bf75706fedbf1cd32c", "patch": "@@ -6,9 +6,9 @@ fn main() {\n     let name = \"Foo\";\n     let x = Some(&[name]);\n     let msg = foo(x);\n-//~^ ERROR mismatched types\n-//~| expected type `std::option::Option<&[&str]>`\n-//~| found type `std::option::Option<&[&str; 1]>`\n-//~| expected slice, found array of 1 elements\n+    //~^ ERROR mismatched types\n+    //~| expected type `std::option::Option<&[&str]>`\n+    //~| found type `std::option::Option<&[&str; 1]>`\n+    //~| expected slice, found array of 1 element\n     assert_eq!(msg, 3);\n }"}, {"sha": "1d54b2830d6c5b6b87470c54e87aca9edb311ae2", "filename": "src/test/ui/issues/issue-15783.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-15783.stderr?ref=d5caeac0964c0ce23e38e1bf75706fedbf1cd32c", "patch": "@@ -2,7 +2,7 @@ error[E0308]: mismatched types\n   --> $DIR/issue-15783.rs:8:19\n    |\n LL |     let msg = foo(x);\n-   |                   ^ expected slice, found array of 1 elements\n+   |                   ^ expected slice, found array of 1 element\n    |\n    = note: expected type `std::option::Option<&[&str]>`\n               found type `std::option::Option<&[&str; 1]>`"}, {"sha": "a3523bb689e6b326bee7c2274a5a7c0bd6f15bb7", "filename": "src/test/ui/match/match-vec-mismatch.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Ftest%2Fui%2Fmatch%2Fmatch-vec-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d5caeac0964c0ce23e38e1bf75706fedbf1cd32c/src%2Ftest%2Fui%2Fmatch%2Fmatch-vec-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-vec-mismatch.stderr?ref=d5caeac0964c0ce23e38e1bf75706fedbf1cd32c", "patch": "@@ -10,7 +10,7 @@ error[E0529]: expected an array or slice, found `std::string::String`\n LL |         ['f', 'o', ..] => {}\n    |         ^^^^^^^^^^^^^^ pattern cannot match with input type `std::string::String`\n \n-error[E0527]: pattern requires 1 elements but array has 3\n+error[E0527]: pattern requires 1 element but array has 3\n   --> $DIR/match-vec-mismatch.rs:20:9\n    |\n LL |         [0] => {},"}]}