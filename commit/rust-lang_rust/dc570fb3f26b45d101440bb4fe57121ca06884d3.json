{"sha": "dc570fb3f26b45d101440bb4fe57121ca06884d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjNTcwZmIzZjI2YjQ1ZDEwMTQ0MGJiNGZlNTcxMjFjYTA2ODg0ZDM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-22T21:11:37Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-02-22T21:37:54Z"}, "message": "also add examples to MaybeUninit::into_initialized", "tree": {"sha": "11a206ed1f9a6ade7d738737fa51f73bdd9f0a60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11a206ed1f9a6ade7d738737fa51f73bdd9f0a60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc570fb3f26b45d101440bb4fe57121ca06884d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc570fb3f26b45d101440bb4fe57121ca06884d3", "html_url": "https://github.com/rust-lang/rust/commit/dc570fb3f26b45d101440bb4fe57121ca06884d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc570fb3f26b45d101440bb4fe57121ca06884d3/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13ffbee1735c7329d6e7b3521712996c914c4ef9", "url": "https://api.github.com/repos/rust-lang/rust/commits/13ffbee1735c7329d6e7b3521712996c914c4ef9", "html_url": "https://github.com/rust-lang/rust/commit/13ffbee1735c7329d6e7b3521712996c914c4ef9"}], "stats": {"total": 29, "additions": 28, "deletions": 1}, "files": [{"sha": "42f30c1dd6d7233fed381e2d47d0d38ea40cc45e", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/dc570fb3f26b45d101440bb4fe57121ca06884d3/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc570fb3f26b45d101440bb4fe57121ca06884d3/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=dc570fb3f26b45d101440bb4fe57121ca06884d3", "patch": "@@ -1178,6 +1178,31 @@ impl<T> MaybeUninit<T> {\n     /// It is up to the caller to guarantee that the `MaybeUninit` really is in an initialized\n     /// state. Calling this when the content is not yet fully initialized causes undefined\n     /// behavior.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Correct usage of this method:\n+    ///\n+    /// ```rust\n+    /// #![feature(maybe_uninit)]\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let mut x = MaybeUninit::<bool>::uninitialized();\n+    /// x.set(true);\n+    /// let x_init = unsafe { x.into_initialized() };\n+    /// assert_eq!(x_init, true);\n+    /// ```\n+    ///\n+    /// *Incorrect* usage of this method:\n+    ///\n+    /// ```rust,no_run\n+    /// #![feature(maybe_uninit)]\n+    /// use std::mem::MaybeUninit;\n+    ///\n+    /// let x = MaybeUninit::<Vec<u32>>::uninitialized();\n+    /// let x_init = unsafe { x.into_initialized() };\n+    /// // `x` had not been initialized yet, so this last line causes undefined behavior.\n+    /// ```\n     #[unstable(feature = \"maybe_uninit\", issue = \"53491\")]\n     #[inline(always)]\n     pub unsafe fn into_initialized(self) -> T {\n@@ -1212,15 +1237,17 @@ impl<T> MaybeUninit<T> {\n     /// let x1 = unsafe { x.read_initialized() };\n     /// // `u32` is `Copy`, so we may read multiple times.\n     /// let x2 = unsafe { x.read_initialized() };\n+    /// assert_eq!(x1, x2);\n     ///\n     /// let mut x = MaybeUninit::<Option<Vec<u32>>>::uninitialized();\n     /// x.set(None);\n     /// let x1 = unsafe { x.read_initialized() };\n     /// // Duplicating a `None` value is okay, so we may read multiple times.\n     /// let x2 = unsafe { x.read_initialized() };\n+    /// assert_eq!(x1, x2);\n     /// ```\n     ///\n-    /// *Incorrect* usafe of this method:\n+    /// *Incorrect* usage of this method:\n     ///\n     /// ```rust,no_run\n     /// #![feature(maybe_uninit)]"}]}