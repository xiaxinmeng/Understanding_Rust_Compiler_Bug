{"sha": "327762f0885c1c291e8f8dda671e1efd2b7030d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyNzc2MmYwODg1YzFjMjkxZThmOGRkYTY3MWUxZWZkMmI3MDMwZDY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-02-12T10:32:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-12T10:32:07Z"}, "message": "Rollup merge of #81831 - LeSeulArtichaut:81289-mut-arg, r=camelid\n\nDon't display `mut` in arguments for functions documentation\n\nFixes #81289 by reverting #80799, as requested in https://github.com/rust-lang/rust/pull/81328#issuecomment-766364413.\nSupersedes #81328.\nr? ``@camelid`` cc ``@jyn514``", "tree": {"sha": "9997ff1d990f4af954ae6f4abdc34fa6cd90b641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9997ff1d990f4af954ae6f4abdc34fa6cd90b641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/327762f0885c1c291e8f8dda671e1efd2b7030d6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgJlknCRBK7hj4Ov3rIwAAdHIIAFWMdiRlBAMokxjTz5SX2GIs\nhkyTdXMzbC2Rf1a2/01NWVyJUUKhvgYDPecDC7rj3hS8n99zrGRn4yshGNQXNAI0\nGAPYt9PX3Cr0Cg8QgYGb6A+NnZ3Ol0LmfnepTrU3DzlB2kjN11RRuyvhWtY0FvN6\nZx4k7gwqqqHQ8ro6sGpCqGZZ6S0CF7MgqHjuJ9HQ4MxZTpZeDkxfHxV0BVkhk+ql\noCGtCBMXmDRd9VQkkdPXqvU1mEy2nKHVap33vkY+LZ5yQF8mBvqUmVkV4iW5GhA0\na1eAr3dQxw6+uooudRZCVcF4zTUUm4UsrVOImeOGXoy4PZRXalOsCTtvC8dP1FE=\n=fP8Y\n-----END PGP SIGNATURE-----\n", "payload": "tree 9997ff1d990f4af954ae6f4abdc34fa6cd90b641\nparent 0b6876cbe7856f8896a7939ddba97f22c1a37492\nparent 089ee27dd0ef2a639647cddecb2ea332c8d02bac\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1613125927 +0900\ncommitter GitHub <noreply@github.com> 1613125927 +0900\n\nRollup merge of #81831 - LeSeulArtichaut:81289-mut-arg, r=camelid\n\nDon't display `mut` in arguments for functions documentation\n\nFixes #81289 by reverting #80799, as requested in https://github.com/rust-lang/rust/pull/81328#issuecomment-766364413.\nSupersedes #81328.\nr? ``@camelid`` cc ``@jyn514``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/327762f0885c1c291e8f8dda671e1efd2b7030d6", "html_url": "https://github.com/rust-lang/rust/commit/327762f0885c1c291e8f8dda671e1efd2b7030d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/327762f0885c1c291e8f8dda671e1efd2b7030d6/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b6876cbe7856f8896a7939ddba97f22c1a37492", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b6876cbe7856f8896a7939ddba97f22c1a37492", "html_url": "https://github.com/rust-lang/rust/commit/0b6876cbe7856f8896a7939ddba97f22c1a37492"}, {"sha": "089ee27dd0ef2a639647cddecb2ea332c8d02bac", "url": "https://api.github.com/repos/rust-lang/rust/commits/089ee27dd0ef2a639647cddecb2ea332c8d02bac", "html_url": "https://github.com/rust-lang/rust/commit/089ee27dd0ef2a639647cddecb2ea332c8d02bac"}], "stats": {"total": 89, "additions": 87, "deletions": 2}, "files": [{"sha": "4d0d7e75aec624f9e644f6ea26be2cc6b583bffe", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/327762f0885c1c291e8f8dda671e1efd2b7030d6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327762f0885c1c291e8f8dda671e1efd2b7030d6/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=327762f0885c1c291e8f8dda671e1efd2b7030d6", "patch": "@@ -961,7 +961,7 @@ impl<'a> Clean<Arguments> for (&'a [hir::Ty<'a>], hir::BodyId) {\n                 .iter()\n                 .enumerate()\n                 .map(|(i, ty)| Argument {\n-                    name: Symbol::intern(&rustc_hir_pretty::param_to_string(&body.params[i])),\n+                    name: name_from_pat(&body.params[i].pat),\n                     type_: ty.clean(cx),\n                 })\n                 .collect(),"}, {"sha": "8640e3c324439db5f7743be61b1b35ba924f07fb", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/327762f0885c1c291e8f8dda671e1efd2b7030d6/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327762f0885c1c291e8f8dda671e1efd2b7030d6/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=327762f0885c1c291e8f8dda671e1efd2b7030d6", "patch": "@@ -195,6 +195,25 @@ crate fn strip_path(path: &Path) -> Path {\n     Path { global: path.global, res: path.res, segments }\n }\n \n+crate fn qpath_to_string(p: &hir::QPath<'_>) -> String {\n+    let segments = match *p {\n+        hir::QPath::Resolved(_, ref path) => &path.segments,\n+        hir::QPath::TypeRelative(_, ref segment) => return segment.ident.to_string(),\n+        hir::QPath::LangItem(lang_item, ..) => return lang_item.name().to_string(),\n+    };\n+\n+    let mut s = String::new();\n+    for (i, seg) in segments.iter().enumerate() {\n+        if i > 0 {\n+            s.push_str(\"::\");\n+        }\n+        if seg.ident.name != kw::PathRoot {\n+            s.push_str(&seg.ident.as_str());\n+        }\n+    }\n+    s\n+}\n+\n crate fn build_deref_target_impls(cx: &DocContext<'_>, items: &[Item], ret: &mut Vec<Item>) {\n     let tcx = cx.tcx;\n \n@@ -232,6 +251,54 @@ impl ToSource for rustc_span::Span {\n     }\n }\n \n+crate fn name_from_pat(p: &hir::Pat<'_>) -> Symbol {\n+    use rustc_hir::*;\n+    debug!(\"trying to get a name from pattern: {:?}\", p);\n+\n+    Symbol::intern(&match p.kind {\n+        PatKind::Wild => return kw::Underscore,\n+        PatKind::Binding(_, _, ident, _) => return ident.name,\n+        PatKind::TupleStruct(ref p, ..) | PatKind::Path(ref p) => qpath_to_string(p),\n+        PatKind::Struct(ref name, ref fields, etc) => format!(\n+            \"{} {{ {}{} }}\",\n+            qpath_to_string(name),\n+            fields\n+                .iter()\n+                .map(|fp| format!(\"{}: {}\", fp.ident, name_from_pat(&fp.pat)))\n+                .collect::<Vec<String>>()\n+                .join(\", \"),\n+            if etc { \", ..\" } else { \"\" }\n+        ),\n+        PatKind::Or(ref pats) => pats\n+            .iter()\n+            .map(|p| name_from_pat(&**p).to_string())\n+            .collect::<Vec<String>>()\n+            .join(\" | \"),\n+        PatKind::Tuple(ref elts, _) => format!(\n+            \"({})\",\n+            elts.iter()\n+                .map(|p| name_from_pat(&**p).to_string())\n+                .collect::<Vec<String>>()\n+                .join(\", \")\n+        ),\n+        PatKind::Box(ref p) => return name_from_pat(&**p),\n+        PatKind::Ref(ref p, _) => return name_from_pat(&**p),\n+        PatKind::Lit(..) => {\n+            warn!(\n+                \"tried to get argument name from PatKind::Lit, which is silly in function arguments\"\n+            );\n+            return Symbol::intern(\"()\");\n+        }\n+        PatKind::Range(..) => return kw::Underscore,\n+        PatKind::Slice(ref begin, ref mid, ref end) => {\n+            let begin = begin.iter().map(|p| name_from_pat(&**p).to_string());\n+            let mid = mid.as_ref().map(|p| format!(\"..{}\", name_from_pat(&**p))).into_iter();\n+            let end = end.iter().map(|p| name_from_pat(&**p).to_string());\n+            format!(\"[{}]\", begin.chain(mid).chain(end).collect::<Vec<_>>().join(\", \"))\n+        }\n+    })\n+}\n+\n crate fn print_const(cx: &DocContext<'_>, n: &'tcx ty::Const<'_>) -> String {\n     match n.val {\n         ty::ConstKind::Unevaluated(def, _, promoted) => {"}, {"sha": "1ef7e304fa256bd3f4a8a34e4433de5756f97eb8", "filename": "src/test/rustdoc/mut-params.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/327762f0885c1c291e8f8dda671e1efd2b7030d6/src%2Ftest%2Frustdoc%2Fmut-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327762f0885c1c291e8f8dda671e1efd2b7030d6/src%2Ftest%2Frustdoc%2Fmut-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fmut-params.rs?ref=327762f0885c1c291e8f8dda671e1efd2b7030d6", "patch": "@@ -0,0 +1,18 @@\n+// Rustdoc shouldn't display `mut` in function arguments, which are\n+// implementation details. Regression test for #81289.\n+\n+#![crate_name = \"foo\"]\n+\n+pub struct Foo;\n+\n+// @count foo/struct.Foo.html '//*[@class=\"impl-items\"]//*[@class=\"method\"]' 2\n+// @!has - '//*[@class=\"impl-items\"]//*[@class=\"method\"]' 'mut'\n+impl Foo {\n+    pub fn foo(mut self) {}\n+\n+    pub fn bar(mut bar: ()) {}\n+}\n+\n+// @count foo/fn.baz.html '//*[@class=\"rust fn\"]' 1\n+// @!has - '//*[@class=\"rust fn\"]' 'mut'\n+pub fn baz(mut foo: Foo) {}"}, {"sha": "c08faaad0eccfc6a8dabc6c224f225f7fdfabcab", "filename": "src/test/rustdoc/range-arg-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/327762f0885c1c291e8f8dda671e1efd2b7030d6/src%2Ftest%2Frustdoc%2Frange-arg-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/327762f0885c1c291e8f8dda671e1efd2b7030d6/src%2Ftest%2Frustdoc%2Frange-arg-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Frange-arg-pattern.rs?ref=327762f0885c1c291e8f8dda671e1efd2b7030d6", "patch": "@@ -1,5 +1,5 @@\n #![crate_name = \"foo\"]\n \n // @has foo/fn.f.html\n-// @has - '//*[@class=\"rust fn\"]' 'pub fn f(0u8 ...255: u8)'\n+// @has - '//*[@class=\"rust fn\"]' 'pub fn f(_: u8)'\n pub fn f(0u8...255: u8) {}"}]}