{"sha": "8c88308c68691b795815a776d41b3aa11717c146", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjODgzMDhjNjg2OTFiNzk1ODE1YTc3NmQ0MWIzYWExMTcxN2MxNDY=", "commit": {"author": {"name": "Kyle Mayes", "email": "kyle@mayeses.com", "date": "2015-11-11T20:19:01Z"}, "committer": {"name": "Kyle Mayes", "email": "kyle@mayeses.com", "date": "2015-11-11T20:19:01Z"}, "message": "libsyntax: Add more quasiquoting macros", "tree": {"sha": "74b789f44c7e1728f003cc5d54e121ef849b1609", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74b789f44c7e1728f003cc5d54e121ef849b1609"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c88308c68691b795815a776d41b3aa11717c146", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c88308c68691b795815a776d41b3aa11717c146", "html_url": "https://github.com/rust-lang/rust/commit/8c88308c68691b795815a776d41b3aa11717c146", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c88308c68691b795815a776d41b3aa11717c146/comments", "author": {"login": "KyleMayes", "id": 1016104, "node_id": "MDQ6VXNlcjEwMTYxMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1016104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KyleMayes", "html_url": "https://github.com/KyleMayes", "followers_url": "https://api.github.com/users/KyleMayes/followers", "following_url": "https://api.github.com/users/KyleMayes/following{/other_user}", "gists_url": "https://api.github.com/users/KyleMayes/gists{/gist_id}", "starred_url": "https://api.github.com/users/KyleMayes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KyleMayes/subscriptions", "organizations_url": "https://api.github.com/users/KyleMayes/orgs", "repos_url": "https://api.github.com/users/KyleMayes/repos", "events_url": "https://api.github.com/users/KyleMayes/events{/privacy}", "received_events_url": "https://api.github.com/users/KyleMayes/received_events", "type": "User", "site_admin": false}, "committer": {"login": "KyleMayes", "id": 1016104, "node_id": "MDQ6VXNlcjEwMTYxMDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1016104?v=4", "gravatar_id": "", "url": "https://api.github.com/users/KyleMayes", "html_url": "https://github.com/KyleMayes", "followers_url": "https://api.github.com/users/KyleMayes/followers", "following_url": "https://api.github.com/users/KyleMayes/following{/other_user}", "gists_url": "https://api.github.com/users/KyleMayes/gists{/gist_id}", "starred_url": "https://api.github.com/users/KyleMayes/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/KyleMayes/subscriptions", "organizations_url": "https://api.github.com/users/KyleMayes/orgs", "repos_url": "https://api.github.com/users/KyleMayes/repos", "events_url": "https://api.github.com/users/KyleMayes/events{/privacy}", "received_events_url": "https://api.github.com/users/KyleMayes/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1f5c04c07f2e888c43cb577810659a7c1d87a00", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1f5c04c07f2e888c43cb577810659a7c1d87a00", "html_url": "https://github.com/rust-lang/rust/commit/f1f5c04c07f2e888c43cb577810659a7c1d87a00"}], "stats": {"total": 148, "additions": 137, "deletions": 11}, "files": [{"sha": "3e854cd72bac4db63450249dd52830febda63c80", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8c88308c68691b795815a776d41b3aa11717c146/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c88308c68691b795815a776d41b3aa11717c146/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=8c88308c68691b795815a776d41b3aa11717c146", "patch": "@@ -512,6 +512,18 @@ fn initial_syntax_expander_table<'feat>(ecfg: &expand::ExpansionConfig<'feat>)\n         syntax_expanders.insert(intern(\"quote_attr\"),\n                            builtin_normal_expander(\n                                 ext::quote::expand_quote_attr));\n+        syntax_expanders.insert(intern(\"quote_arg\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_arg));\n+        syntax_expanders.insert(intern(\"quote_block\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_block));\n+        syntax_expanders.insert(intern(\"quote_meta_item\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_meta_item));\n+        syntax_expanders.insert(intern(\"quote_path\"),\n+                           builtin_normal_expander(\n+                                ext::quote::expand_quote_path));\n     }\n \n     syntax_expanders.insert(intern(\"line\"),"}, {"sha": "dc4a061ce782ebbe22d4fc7d8fdafe34bb289de3", "filename": "src/libsyntax/ext/quote.rs", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8c88308c68691b795815a776d41b3aa11717c146/src%2Flibsyntax%2Fext%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c88308c68691b795815a776d41b3aa11717c146/src%2Flibsyntax%2Fext%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fquote.rs?ref=8c88308c68691b795815a776d41b3aa11717c146", "patch": "@@ -158,6 +158,18 @@ pub mod rt {\n         }\n     }\n \n+    impl ToTokens for ast::Arg {\n+        fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n+            vec![TokenTree::Token(DUMMY_SP, token::Interpolated(token::NtArg(self.clone())))]\n+        }\n+    }\n+\n+    impl ToTokens for P<ast::Block> {\n+        fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n+            vec![TokenTree::Token(DUMMY_SP, token::Interpolated(token::NtBlock(self.clone())))]\n+        }\n+    }\n+\n     macro_rules! impl_to_tokens_slice {\n         ($t: ty, $sep: expr) => {\n             impl ToTokens for [$t] {\n@@ -177,6 +189,7 @@ pub mod rt {\n \n     impl_to_tokens_slice! { ast::Ty, [TokenTree::Token(DUMMY_SP, token::Comma)] }\n     impl_to_tokens_slice! { P<ast::Item>, [] }\n+    impl_to_tokens_slice! { ast::Arg, [TokenTree::Token(DUMMY_SP, token::Comma)] }\n \n     impl ToTokens for P<ast::MetaItem> {\n         fn to_tokens(&self, _cx: &ExtCtxt) -> Vec<TokenTree> {\n@@ -383,6 +396,39 @@ pub fn expand_quote_attr(cx: &mut ExtCtxt,\n     base::MacEager::expr(expanded)\n }\n \n+pub fn expand_quote_arg(cx: &mut ExtCtxt,\n+                        sp: Span,\n+                        tts: &[TokenTree])\n+                        -> Box<base::MacResult+'static> {\n+    let expanded = expand_parse_call(cx, sp, \"parse_arg_panic\", vec!(), tts);\n+    base::MacEager::expr(expanded)\n+}\n+\n+pub fn expand_quote_block(cx: &mut ExtCtxt,\n+                        sp: Span,\n+                        tts: &[TokenTree])\n+                        -> Box<base::MacResult+'static> {\n+    let expanded = expand_parse_call(cx, sp, \"parse_block_panic\", vec!(), tts);\n+    base::MacEager::expr(expanded)\n+}\n+\n+pub fn expand_quote_meta_item(cx: &mut ExtCtxt,\n+                        sp: Span,\n+                        tts: &[TokenTree])\n+                        -> Box<base::MacResult+'static> {\n+    let expanded = expand_parse_call(cx, sp, \"parse_meta_item_panic\", vec!(), tts);\n+    base::MacEager::expr(expanded)\n+}\n+\n+pub fn expand_quote_path(cx: &mut ExtCtxt,\n+                        sp: Span,\n+                        tts: &[TokenTree])\n+                        -> Box<base::MacResult+'static> {\n+    let mode = mk_parser_path(cx, sp, \"LifetimeAndTypesWithoutColons\");\n+    let expanded = expand_parse_call(cx, sp, \"parse_path_panic\", vec!(mode), tts);\n+    base::MacEager::expr(expanded)\n+}\n+\n pub fn expand_quote_matcher(cx: &mut ExtCtxt,\n                             sp: Span,\n                             tts: &[TokenTree])\n@@ -440,6 +486,11 @@ fn mk_token_path(cx: &ExtCtxt, sp: Span, name: &str) -> P<ast::Expr> {\n     cx.expr_path(cx.path_global(sp, idents))\n }\n \n+fn mk_parser_path(cx: &ExtCtxt, sp: Span, name: &str) -> P<ast::Expr> {\n+    let idents = vec!(id_ext(\"syntax\"), id_ext(\"parse\"), id_ext(\"parser\"), id_ext(name));\n+    cx.expr_path(cx.path_global(sp, idents))\n+}\n+\n fn mk_binop(cx: &ExtCtxt, sp: Span, bop: token::BinOpToken) -> P<ast::Expr> {\n     let name = match bop {\n         token::Plus     => \"Plus\","}, {"sha": "66ee5aa12ca885fb16e5ee61bf47170e46b04395", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c88308c68691b795815a776d41b3aa11717c146/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c88308c68691b795815a776d41b3aa11717c146/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=8c88308c68691b795815a776d41b3aa11717c146", "patch": "@@ -684,6 +684,7 @@ pub fn noop_fold_interpolated<T: Folder>(nt: token::Nonterminal, fld: &mut T)\n         token::NtGenerics(generics) => token::NtGenerics(fld.fold_generics(generics)),\n         token::NtWhereClause(where_clause) =>\n             token::NtWhereClause(fld.fold_where_clause(where_clause)),\n+        token::NtArg(arg) => token::NtArg(fld.fold_arg(arg)),\n     }\n }\n "}, {"sha": "f5e4114464fbc26af083c14c7657a9a22cd29591", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8c88308c68691b795815a776d41b3aa11717c146/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c88308c68691b795815a776d41b3aa11717c146/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=8c88308c68691b795815a776d41b3aa11717c146", "patch": "@@ -393,6 +393,22 @@ impl<'a> Parser<'a> {\n         panictry!(self.parse_attribute(permit_inner))\n     }\n \n+    pub fn parse_arg_panic(&mut self) -> Arg {\n+        panictry!(self.parse_arg())\n+    }\n+\n+    pub fn parse_block_panic(&mut self) -> P<Block> {\n+        panictry!(self.parse_block())\n+    }\n+\n+    pub fn parse_meta_item_panic(&mut self) -> P<ast::MetaItem> {\n+        panictry!(self.parse_meta_item())\n+    }\n+\n+    pub fn parse_path_panic(&mut self, mode: PathParsingMode) -> ast::Path {\n+        panictry!(self.parse_path(mode))\n+    }\n+\n     /// Convert a token to a string using self's reader\n     pub fn token_to_string(token: &token::Token) -> String {\n         pprust::token_to_string(token)\n@@ -1455,6 +1471,8 @@ impl<'a> Parser<'a> {\n     /// This version of parse arg doesn't necessarily require\n     /// identifier names.\n     pub fn parse_arg_general(&mut self, require_name: bool) -> PResult<Arg> {\n+        maybe_whole!(no_clone self, NtArg);\n+\n         let pat = if require_name || self.is_named_argument() {\n             debug!(\"parse_arg_general parse_pat (require_name:{})\",\n                    require_name);"}, {"sha": "5e4449af60405876b19c54ef4c86b14b5096d5d1", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c88308c68691b795815a776d41b3aa11717c146/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c88308c68691b795815a776d41b3aa11717c146/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=8c88308c68691b795815a776d41b3aa11717c146", "patch": "@@ -381,12 +381,13 @@ pub enum Nonterminal {\n     NtMeta(P<ast::MetaItem>),\n     NtPath(Box<ast::Path>),\n     NtTT(P<ast::TokenTree>), // needs P'ed to break a circularity\n-    // These is not exposed to macros, but is used by quasiquote.\n+    // These are not exposed to macros, but are used by quasiquote.\n     NtArm(ast::Arm),\n     NtImplItem(P<ast::ImplItem>),\n     NtTraitItem(P<ast::TraitItem>),\n     NtGenerics(ast::Generics),\n     NtWhereClause(ast::WhereClause),\n+    NtArg(ast::Arg),\n }\n \n impl fmt::Debug for Nonterminal {\n@@ -407,6 +408,7 @@ impl fmt::Debug for Nonterminal {\n             NtTraitItem(..) => f.pad(\"NtTraitItem(..)\"),\n             NtGenerics(..) => f.pad(\"NtGenerics(..)\"),\n             NtWhereClause(..) => f.pad(\"NtWhereClause(..)\"),\n+            NtArg(..) => f.pad(\"NtArg(..)\"),\n         }\n     }\n }"}, {"sha": "5b8f5c0aef6f78857ade02f6b5e3c7683b72bf7e", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c88308c68691b795815a776d41b3aa11717c146/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c88308c68691b795815a776d41b3aa11717c146/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=8c88308c68691b795815a776d41b3aa11717c146", "patch": "@@ -305,6 +305,7 @@ pub fn token_to_string(tok: &Token) -> String {\n             token::NtTraitItem(ref e)   => trait_item_to_string(&**e),\n             token::NtGenerics(ref e)    => generics_to_string(&*e),\n             token::NtWhereClause(ref e) => where_clause_to_string(&*e),\n+            token::NtArg(ref e)         => arg_to_string(&*e),\n         }\n     }\n }"}, {"sha": "cd801fbcd889be760e192fef18b71cf809029299", "filename": "src/test/compile-fail-fulldeps/gated-quote.rs", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8c88308c68691b795815a776d41b3aa11717c146/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-quote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c88308c68691b795815a776d41b3aa11717c146/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-quote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fgated-quote.rs?ref=8c88308c68691b795815a776d41b3aa11717c146", "patch": "@@ -37,14 +37,18 @@ impl ParseSess {\n \n pub fn main() {\n     let ecx = &ParseSess;\n-    let x = quote_tokens!(ecx, 3);   //~ ERROR macro undefined: 'quote_tokens!'\n-    let x = quote_expr!(ecx, 3);     //~ ERROR macro undefined: 'quote_expr!'\n-    let x = quote_ty!(ecx, 3);       //~ ERROR macro undefined: 'quote_ty!'\n-    let x = quote_method!(ecx, 3);   //~ ERROR macro undefined: 'quote_method!'\n-    let x = quote_item!(ecx, 3);     //~ ERROR macro undefined: 'quote_item!'\n-    let x = quote_pat!(ecx, 3);      //~ ERROR macro undefined: 'quote_pat!'\n-    let x = quote_arm!(ecx, 3);      //~ ERROR macro undefined: 'quote_arm!'\n-    let x = quote_stmt!(ecx, 3);     //~ ERROR macro undefined: 'quote_stmt!'\n-    let x = quote_matcher!(ecx, 3);  //~ ERROR macro undefined: 'quote_matcher!'\n-    let x = quote_attr!(ecx, 3);     //~ ERROR macro undefined: 'quote_attr!'\n+    let x = quote_tokens!(ecx, 3);    //~ ERROR macro undefined: 'quote_tokens!'\n+    let x = quote_expr!(ecx, 3);      //~ ERROR macro undefined: 'quote_expr!'\n+    let x = quote_ty!(ecx, 3);        //~ ERROR macro undefined: 'quote_ty!'\n+    let x = quote_method!(ecx, 3);    //~ ERROR macro undefined: 'quote_method!'\n+    let x = quote_item!(ecx, 3);      //~ ERROR macro undefined: 'quote_item!'\n+    let x = quote_pat!(ecx, 3);       //~ ERROR macro undefined: 'quote_pat!'\n+    let x = quote_arm!(ecx, 3);       //~ ERROR macro undefined: 'quote_arm!'\n+    let x = quote_stmt!(ecx, 3);      //~ ERROR macro undefined: 'quote_stmt!'\n+    let x = quote_matcher!(ecx, 3);   //~ ERROR macro undefined: 'quote_matcher!'\n+    let x = quote_attr!(ecx, 3);      //~ ERROR macro undefined: 'quote_attr!'\n+    let x = quote_arg!(ecx, 3);       //~ ERROR macro undefined: 'quote_arg!'\n+    let x = quote_block!(ecx, 3);     //~ ERROR macro undefined: 'quote_block!'\n+    let x = quote_meta_item!(ecx, 3); //~ ERROR macro undefined: 'quote_meta_item!'\n+    let x = quote_path!(ecx, 3);      //~ ERROR macro undefined: 'quote_path!'\n }"}, {"sha": "edaa88452c4854ecc53bd57671907b4200ccc9eb", "filename": "src/test/run-pass-fulldeps/qquote.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/8c88308c68691b795815a776d41b3aa11717c146/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c88308c68691b795815a776d41b3aa11717c146/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fqquote.rs?ref=8c88308c68691b795815a776d41b3aa11717c146", "patch": "@@ -63,4 +63,41 @@ fn main() {\n \n     let attr = quote_attr!(cx, #![cfg(foo = \"bar\")]);\n     check!(attribute_to_string, attr, quote_attr!(cx, $attr); r#\"#![cfg(foo = \"bar\")]\"#);\n+\n+    // quote_arg!\n+\n+    let arg = quote_arg!(cx, foo: i32);\n+    check!(arg_to_string, arg, quote_arg!(cx, $arg); \"foo: i32\");\n+\n+    let function = quote_item!(cx, fn f($arg) { }).unwrap();\n+    check!(item_to_string, function; \"fn f(foo: i32) { }\");\n+\n+    let args = vec![arg, quote_arg!(cx, bar: u32)];\n+    let args = &args[..];\n+    let function = quote_item!(cx, fn f($args) { }).unwrap();\n+    check!(item_to_string, function; \"fn f(foo: i32, bar: u32) { }\");\n+\n+    // quote_block!\n+\n+    let block = quote_block!(cx, { $stmt let y = 40u32; });\n+    check!(block_to_string, block, *quote_block!(cx, $block); \"{ let x = 20u16; let y = 40u32; }\");\n+\n+    let function = quote_item!(cx, fn f() $block).unwrap();\n+    check!(item_to_string, function; \"fn f() { let x = 20u16; let y = 40u32; }\");\n+\n+    // quote_path!\n+\n+    let path = quote_path!(cx, ::syntax::ptr::P<MetaItem>);\n+    check!(path_to_string, path, quote_path!(cx, $path); \"::syntax::ptr::P<MetaItem>\");\n+\n+    let ty = quote_ty!(cx, $path);\n+    check!(ty_to_string, ty; \"::syntax::ptr::P<MetaItem>\");\n+\n+    // quote_meta_item!\n+\n+    let meta = quote_meta_item!(cx, cfg(foo = \"bar\"));\n+    check!(meta_item_to_string, meta, *quote_meta_item!(cx, $meta); r#\"cfg(foo = \"bar\")\"#);\n+\n+    let attr = quote_attr!(cx, #![$meta]);\n+    check!(attribute_to_string, attr; r#\"#![cfg(foo = \"bar\")]\"#);\n }"}]}