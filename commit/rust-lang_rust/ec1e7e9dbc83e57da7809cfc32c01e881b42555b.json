{"sha": "ec1e7e9dbc83e57da7809cfc32c01e881b42555b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMWU3ZTlkYmM4M2U1N2RhNzgwOWNmYzMyYzAxZTg4MWI0MjU1NWI=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-11T06:26:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-11T06:26:22Z"}, "message": "Rollup merge of #71322 - petrochenkov:tuple00, r=nikomatsakis\n\nAccept tuple.0.0 as tuple indexing (take 2)\n\nIf we expect something identifier-like when parsing a field name after `.`, but encounter a float token, we break that float token into parts, similarly to how we break `&&` into `&` `&`, or `<<` into `<` `<`, etc.\n\nAn alternative to https://github.com/rust-lang/rust/pull/70420.", "tree": {"sha": "da8a4d60b718bf7f476ce2cfb875bc7dbaaee4e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da8a4d60b718bf7f476ce2cfb875bc7dbaaee4e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec1e7e9dbc83e57da7809cfc32c01e881b42555b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCVuOCRBK7hj4Ov3rIwAAdHIIAJZMMAimZdFIAuvL4ZCJtlxA\noRL8KAbD/Q21JjrlfN0uBbNWZFzVZ5O/eeQGb1248VkNVlP42g7tUATX+BZBmzUJ\nW/K+4MNi0lmS03LFr0Rgd6aAP339wMXFIUgpHhsejQvGtq2k6hACs53EvcTbwhxh\nUXYgqo2aqmlnEPhF2pVs4qRFwQoPxK8F7Da2JIEtlLa4Nt9WmVIiakNaGSQTkJ/F\niX5aSoNEBryhtOrGzZ9H2zm2Rmnt14X0tleO0e0pruV1g/2lKMPyADWyd19xPGti\nR+HogzS68gDk/QjAGPaT/AJMj0rQai6DXa2SaMkI3yUQDKGqGKS6FkiJv+aoSTw=\n=cdKm\n-----END PGP SIGNATURE-----\n", "payload": "tree da8a4d60b718bf7f476ce2cfb875bc7dbaaee4e5\nparent daecab3a784f28082df90cebb204998051f3557d\nparent 52bdaaa0edb2824af1610b67664f06580335fd78\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594448782 -0700\ncommitter GitHub <noreply@github.com> 1594448782 -0700\n\nRollup merge of #71322 - petrochenkov:tuple00, r=nikomatsakis\n\nAccept tuple.0.0 as tuple indexing (take 2)\n\nIf we expect something identifier-like when parsing a field name after `.`, but encounter a float token, we break that float token into parts, similarly to how we break `&&` into `&` `&`, or `<<` into `<` `<`, etc.\n\nAn alternative to https://github.com/rust-lang/rust/pull/70420.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec1e7e9dbc83e57da7809cfc32c01e881b42555b", "html_url": "https://github.com/rust-lang/rust/commit/ec1e7e9dbc83e57da7809cfc32c01e881b42555b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "daecab3a784f28082df90cebb204998051f3557d", "url": "https://api.github.com/repos/rust-lang/rust/commits/daecab3a784f28082df90cebb204998051f3557d", "html_url": "https://github.com/rust-lang/rust/commit/daecab3a784f28082df90cebb204998051f3557d"}, {"sha": "52bdaaa0edb2824af1610b67664f06580335fd78", "url": "https://api.github.com/repos/rust-lang/rust/commits/52bdaaa0edb2824af1610b67664f06580335fd78", "html_url": "https://github.com/rust-lang/rust/commit/52bdaaa0edb2824af1610b67664f06580335fd78"}], "stats": {"total": 673, "additions": 614, "deletions": 59}, "files": [{"sha": "d52cea74520bd8a7202b1f4f1cc09e530c3fac9a", "filename": "src/librustc_parse/parser/expr.rs", "status": "modified", "additions": 81, "deletions": 38, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Flibrustc_parse%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fexpr.rs?ref=ec1e7e9dbc83e57da7809cfc32c01e881b42555b", "patch": "@@ -770,10 +770,10 @@ impl<'a> Parser<'a> {\n         match self.token.uninterpolate().kind {\n             token::Ident(..) => self.parse_dot_suffix(base, lo),\n             token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) => {\n-                Ok(self.parse_tuple_field_access_expr(lo, base, symbol, suffix))\n+                Ok(self.parse_tuple_field_access_expr(lo, base, symbol, suffix, None))\n             }\n-            token::Literal(token::Lit { kind: token::Float, symbol, .. }) => {\n-                self.recover_field_access_by_float_lit(lo, base, symbol)\n+            token::Literal(token::Lit { kind: token::Float, symbol, suffix }) => {\n+                Ok(self.parse_tuple_field_access_expr_float(lo, base, symbol, suffix))\n             }\n             _ => {\n                 self.error_unexpected_after_dot();\n@@ -788,45 +788,84 @@ impl<'a> Parser<'a> {\n         self.struct_span_err(self.token.span, &format!(\"unexpected token: `{}`\", actual)).emit();\n     }\n \n-    fn recover_field_access_by_float_lit(\n+    // We need and identifier or integer, but the next token is a float.\n+    // Break the float into components to extract the identifier or integer.\n+    // FIXME: With current `TokenCursor` it's hard to break tokens into more than 2\n+    // parts unless those parts are processed immediately. `TokenCursor` should either\n+    // support pushing \"future tokens\" (would be also helpful to `break_and_eat`), or\n+    // we should break everything including floats into more basic proc-macro style\n+    // tokens in the lexer (probably preferable).\n+    fn parse_tuple_field_access_expr_float(\n         &mut self,\n         lo: Span,\n         base: P<Expr>,\n-        sym: Symbol,\n-    ) -> PResult<'a, P<Expr>> {\n-        self.bump();\n-\n-        let fstr = sym.as_str();\n-        let msg = format!(\"unexpected token: `{}`\", sym);\n-\n-        let mut err = self.struct_span_err(self.prev_token.span, &msg);\n-        err.span_label(self.prev_token.span, \"unexpected token\");\n-\n-        if fstr.chars().all(|x| \"0123456789.\".contains(x)) {\n-            let float = match fstr.parse::<f64>() {\n-                Ok(f) => f,\n-                Err(_) => {\n-                    err.emit();\n-                    return Ok(base);\n+        float: Symbol,\n+        suffix: Option<Symbol>,\n+    ) -> P<Expr> {\n+        #[derive(Debug)]\n+        enum FloatComponent {\n+            IdentLike(String),\n+            Punct(char),\n+        }\n+        use FloatComponent::*;\n+\n+        let mut components = Vec::new();\n+        let mut ident_like = String::new();\n+        for c in float.as_str().chars() {\n+            if c == '_' || c.is_ascii_alphanumeric() {\n+                ident_like.push(c);\n+            } else if matches!(c, '.' | '+' | '-') {\n+                if !ident_like.is_empty() {\n+                    components.push(IdentLike(mem::take(&mut ident_like)));\n                 }\n-            };\n-            let sugg = pprust::to_string(|s| {\n-                s.popen();\n-                s.print_expr(&base);\n-                s.s.word(\".\");\n-                s.print_usize(float.trunc() as usize);\n-                s.pclose();\n-                s.s.word(\".\");\n-                s.s.word(fstr.splitn(2, '.').last().unwrap().to_string())\n-            });\n-            err.span_suggestion(\n-                lo.to(self.prev_token.span),\n-                \"try parenthesizing the first index\",\n-                sugg,\n-                Applicability::MachineApplicable,\n-            );\n+                components.push(Punct(c));\n+            } else {\n+                panic!(\"unexpected character in a float token: {:?}\", c)\n+            }\n+        }\n+        if !ident_like.is_empty() {\n+            components.push(IdentLike(ident_like));\n+        }\n+\n+        // FIXME: Make the span more precise.\n+        let span = self.token.span;\n+        match &*components {\n+            // 1e2\n+            [IdentLike(i)] => {\n+                self.parse_tuple_field_access_expr(lo, base, Symbol::intern(&i), suffix, None)\n+            }\n+            // 1.\n+            [IdentLike(i), Punct('.')] => {\n+                assert!(suffix.is_none());\n+                let symbol = Symbol::intern(&i);\n+                self.token = Token::new(token::Ident(symbol, false), span);\n+                let next_token = Token::new(token::Dot, span);\n+                self.parse_tuple_field_access_expr(lo, base, symbol, None, Some(next_token))\n+            }\n+            // 1.2 | 1.2e3\n+            [IdentLike(i1), Punct('.'), IdentLike(i2)] => {\n+                let symbol1 = Symbol::intern(&i1);\n+                self.token = Token::new(token::Ident(symbol1, false), span);\n+                let next_token1 = Token::new(token::Dot, span);\n+                let base1 =\n+                    self.parse_tuple_field_access_expr(lo, base, symbol1, None, Some(next_token1));\n+                let symbol2 = Symbol::intern(&i2);\n+                let next_token2 = Token::new(token::Ident(symbol2, false), span);\n+                self.bump_with(next_token2); // `.`\n+                self.parse_tuple_field_access_expr(lo, base1, symbol2, suffix, None)\n+            }\n+            // 1e+ | 1e- (recovered)\n+            [IdentLike(_), Punct('+' | '-')] |\n+            // 1e+2 | 1e-2\n+            [IdentLike(_), Punct('+' | '-'), IdentLike(_)] |\n+            // 1.2e+3 | 1.2e-3\n+            [IdentLike(_), Punct('.'), IdentLike(_), Punct('+' | '-'), IdentLike(_)] => {\n+                // See the FIXME about `TokenCursor` above.\n+                self.error_unexpected_after_dot();\n+                base\n+            }\n+            _ => panic!(\"unexpected components in a float token: {:?}\", components),\n         }\n-        Err(err)\n     }\n \n     fn parse_tuple_field_access_expr(\n@@ -835,8 +874,12 @@ impl<'a> Parser<'a> {\n         base: P<Expr>,\n         field: Symbol,\n         suffix: Option<Symbol>,\n+        next_token: Option<Token>,\n     ) -> P<Expr> {\n-        self.bump();\n+        match next_token {\n+            Some(next_token) => self.bump_with(next_token),\n+            None => self.bump(),\n+        }\n         let span = self.prev_token.span;\n         let field = ExprKind::Field(base, Ident::new(field, span));\n         self.expect_no_suffix(span, \"a tuple index\", suffix);"}, {"sha": "a30532035365bd3285a54050431c0fe8eb22d6b7", "filename": "src/test/ui/parser/float-field-interpolated.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Fparser%2Ffloat-field-interpolated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Fparser%2Ffloat-field-interpolated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffloat-field-interpolated.rs?ref=ec1e7e9dbc83e57da7809cfc32c01e881b42555b", "patch": "@@ -0,0 +1,17 @@\n+struct S(u8, (u8, u8));\n+\n+macro_rules! generate_field_accesses {\n+    ($a:tt, $b:literal, $c:expr) => {\n+        let s = S(0, (0, 0));\n+\n+        s.$a; // OK\n+        { s.$b; } //~ ERROR unexpected token: `1.1`\n+                  //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1`\n+        { s.$c; } //~ ERROR unexpected token: `1.1`\n+                  //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1`\n+    };\n+}\n+\n+fn main() {\n+    generate_field_accesses!(1.1, 1.1, 1.1);\n+}"}, {"sha": "fb974f085cbf15e3c78b8b3f13cc904a5cbe45e1", "filename": "src/test/ui/parser/float-field-interpolated.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Fparser%2Ffloat-field-interpolated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Fparser%2Ffloat-field-interpolated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffloat-field-interpolated.stderr?ref=ec1e7e9dbc83e57da7809cfc32c01e881b42555b", "patch": "@@ -0,0 +1,46 @@\n+error: unexpected token: `1.1`\n+  --> $DIR/float-field-interpolated.rs:8:13\n+   |\n+LL |         { s.$b; }\n+   |             ^^\n+...\n+LL |     generate_field_accesses!(1.1, 1.1, 1.1);\n+   |     ---------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1`\n+  --> $DIR/float-field-interpolated.rs:8:13\n+   |\n+LL |         { s.$b; }\n+   |             ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+...\n+LL |     generate_field_accesses!(1.1, 1.1, 1.1);\n+   |     ---------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: unexpected token: `1.1`\n+  --> $DIR/float-field-interpolated.rs:10:13\n+   |\n+LL |         { s.$c; }\n+   |             ^^\n+...\n+LL |     generate_field_accesses!(1.1, 1.1, 1.1);\n+   |     ---------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1`\n+  --> $DIR/float-field-interpolated.rs:10:13\n+   |\n+LL |         { s.$c; }\n+   |             ^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+...\n+LL |     generate_field_accesses!(1.1, 1.1, 1.1);\n+   |     ---------------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "eaa7465dc4d06f66a792d31ff0f1acc29bf21a32", "filename": "src/test/ui/parser/float-field.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Fparser%2Ffloat-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Fparser%2Ffloat-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffloat-field.rs?ref=ec1e7e9dbc83e57da7809cfc32c01e881b42555b", "patch": "@@ -0,0 +1,62 @@\n+struct S(u8, (u8, u8));\n+\n+fn main() {\n+    let s = S(0, (0, 0));\n+\n+    s.1e1; //~ ERROR no field `1e1` on type `S`\n+    s.1.; //~ ERROR unexpected token: `;`\n+    s.1.1;\n+    s.1.1e1; //~ ERROR no field `1e1` on type `(u8, u8)`\n+    { s.1e+; } //~ ERROR unexpected token: `1e+`\n+               //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1e+`\n+               //~| ERROR expected at least one digit in exponent\n+    { s.1e-; } //~ ERROR unexpected token: `1e-`\n+               //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1e-`\n+               //~| ERROR expected at least one digit in exponent\n+    { s.1e+1; } //~ ERROR unexpected token: `1e+1`\n+                //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1e+1`\n+    { s.1e-1; } //~ ERROR unexpected token: `1e-1`\n+                //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1e-1`\n+    { s.1.1e+1; } //~ ERROR unexpected token: `1.1e+1`\n+                  //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1e+1`\n+    { s.1.1e-1; } //~ ERROR unexpected token: `1.1e-1`\n+                  //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1e-1`\n+    s.0x1e1;  //~ ERROR no field `0x1e1` on type `S`\n+    s.0x1.; //~ ERROR no field `0x1` on type `S`\n+            //~| ERROR hexadecimal float literal is not supported\n+            //~| ERROR unexpected token: `;`\n+    s.0x1.1; //~ ERROR no field `0x1` on type `S`\n+             //~| ERROR hexadecimal float literal is not supported\n+    s.0x1.1e1; //~ ERROR no field `0x1` on type `S`\n+               //~| ERROR hexadecimal float literal is not supported\n+    { s.0x1e+; } //~ ERROR expected expression, found `;`\n+    { s.0x1e-; } //~ ERROR expected expression, found `;`\n+    s.0x1e+1; //~ ERROR no field `0x1e` on type `S`\n+    s.0x1e-1; //~ ERROR no field `0x1e` on type `S`\n+    { s.0x1.1e+1; } //~ ERROR unexpected token: `0x1.1e+1`\n+                    //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `0x1.1e+1`\n+                    //~| ERROR hexadecimal float literal is not supported\n+    { s.0x1.1e-1; } //~ ERROR unexpected token: `0x1.1e-1`\n+                    //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `0x1.1e-1`\n+                    //~| ERROR hexadecimal float literal is not supported\n+    s.1e1f32; //~ ERROR no field `1e1` on type `S`\n+              //~| ERROR suffixes on a tuple index are invalid\n+    s.1.f32; //~ ERROR no field `f32` on type `(u8, u8)`\n+    s.1.1f32; //~ ERROR suffixes on a tuple index are invalid\n+    s.1.1e1f32; //~ ERROR no field `1e1` on type `(u8, u8)`\n+                //~| ERROR suffixes on a tuple index are invalid\n+    { s.1e+f32; } //~ ERROR unexpected token: `1e+f32`\n+                  //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1e+f32`\n+                  //~| ERROR expected at least one digit in exponent\n+    { s.1e-f32; } //~ ERROR unexpected token: `1e-f32`\n+                  //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1e-f32`\n+                  //~| ERROR expected at least one digit in exponent\n+    { s.1e+1f32; } //~ ERROR unexpected token: `1e+1f32`\n+                   //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1e+1f32`\n+    { s.1e-1f32; } //~ ERROR unexpected token: `1e-1f32`\n+                   //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1e-1f32`\n+    { s.1.1e+1f32; } //~ ERROR unexpected token: `1.1e+1f32`\n+                    //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1e+1f32`\n+    { s.1.1e-1f32; } //~ ERROR unexpected token: `1.1e-1f32`\n+                    //~| ERROR expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1e-1f32`\n+}"}, {"sha": "62202b999648d1417b1e4f1455f165d5debba228", "filename": "src/test/ui/parser/float-field.stderr", "status": "added", "additions": 349, "deletions": 0, "changes": 349, "blob_url": "https://github.com/rust-lang/rust/blob/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Fparser%2Ffloat-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Fparser%2Ffloat-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ffloat-field.stderr?ref=ec1e7e9dbc83e57da7809cfc32c01e881b42555b", "patch": "@@ -0,0 +1,349 @@\n+error: expected at least one digit in exponent\n+  --> $DIR/float-field.rs:10:9\n+   |\n+LL |     { s.1e+; }\n+   |         ^^^\n+\n+error: expected at least one digit in exponent\n+  --> $DIR/float-field.rs:13:9\n+   |\n+LL |     { s.1e-; }\n+   |         ^^^\n+\n+error: hexadecimal float literal is not supported\n+  --> $DIR/float-field.rs:25:7\n+   |\n+LL |     s.0x1.;\n+   |       ^^^^\n+\n+error: hexadecimal float literal is not supported\n+  --> $DIR/float-field.rs:28:7\n+   |\n+LL |     s.0x1.1;\n+   |       ^^^^^\n+\n+error: hexadecimal float literal is not supported\n+  --> $DIR/float-field.rs:30:7\n+   |\n+LL |     s.0x1.1e1;\n+   |       ^^^^^^^\n+\n+error: hexadecimal float literal is not supported\n+  --> $DIR/float-field.rs:36:9\n+   |\n+LL |     { s.0x1.1e+1; }\n+   |         ^^^^^^^^\n+\n+error: hexadecimal float literal is not supported\n+  --> $DIR/float-field.rs:39:9\n+   |\n+LL |     { s.0x1.1e-1; }\n+   |         ^^^^^^^^\n+\n+error: expected at least one digit in exponent\n+  --> $DIR/float-field.rs:48:9\n+   |\n+LL |     { s.1e+f32; }\n+   |         ^^^^^^\n+\n+error: expected at least one digit in exponent\n+  --> $DIR/float-field.rs:51:9\n+   |\n+LL |     { s.1e-f32; }\n+   |         ^^^^^^\n+\n+error: unexpected token: `;`\n+  --> $DIR/float-field.rs:7:9\n+   |\n+LL |     s.1.;\n+   |         ^\n+\n+error: unexpected token: `1e+`\n+  --> $DIR/float-field.rs:10:9\n+   |\n+LL |     { s.1e+; }\n+   |         ^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1e+`\n+  --> $DIR/float-field.rs:10:9\n+   |\n+LL |     { s.1e+; }\n+   |         ^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1e-`\n+  --> $DIR/float-field.rs:13:9\n+   |\n+LL |     { s.1e-; }\n+   |         ^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1e-`\n+  --> $DIR/float-field.rs:13:9\n+   |\n+LL |     { s.1e-; }\n+   |         ^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1e+1`\n+  --> $DIR/float-field.rs:16:9\n+   |\n+LL |     { s.1e+1; }\n+   |         ^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1e+1`\n+  --> $DIR/float-field.rs:16:9\n+   |\n+LL |     { s.1e+1; }\n+   |         ^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1e-1`\n+  --> $DIR/float-field.rs:18:9\n+   |\n+LL |     { s.1e-1; }\n+   |         ^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1e-1`\n+  --> $DIR/float-field.rs:18:9\n+   |\n+LL |     { s.1e-1; }\n+   |         ^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1.1e+1`\n+  --> $DIR/float-field.rs:20:9\n+   |\n+LL |     { s.1.1e+1; }\n+   |         ^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1e+1`\n+  --> $DIR/float-field.rs:20:9\n+   |\n+LL |     { s.1.1e+1; }\n+   |         ^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1.1e-1`\n+  --> $DIR/float-field.rs:22:9\n+   |\n+LL |     { s.1.1e-1; }\n+   |         ^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1e-1`\n+  --> $DIR/float-field.rs:22:9\n+   |\n+LL |     { s.1.1e-1; }\n+   |         ^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `;`\n+  --> $DIR/float-field.rs:25:11\n+   |\n+LL |     s.0x1.;\n+   |           ^\n+\n+error: expected expression, found `;`\n+  --> $DIR/float-field.rs:32:14\n+   |\n+LL |     { s.0x1e+; }\n+   |              ^ expected expression\n+\n+error: expected expression, found `;`\n+  --> $DIR/float-field.rs:33:14\n+   |\n+LL |     { s.0x1e-; }\n+   |              ^ expected expression\n+\n+error: unexpected token: `0x1.1e+1`\n+  --> $DIR/float-field.rs:36:9\n+   |\n+LL |     { s.0x1.1e+1; }\n+   |         ^^^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `0x1.1e+1`\n+  --> $DIR/float-field.rs:36:9\n+   |\n+LL |     { s.0x1.1e+1; }\n+   |         ^^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `0x1.1e-1`\n+  --> $DIR/float-field.rs:39:9\n+   |\n+LL |     { s.0x1.1e-1; }\n+   |         ^^^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `0x1.1e-1`\n+  --> $DIR/float-field.rs:39:9\n+   |\n+LL |     { s.0x1.1e-1; }\n+   |         ^^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: suffixes on a tuple index are invalid\n+  --> $DIR/float-field.rs:42:7\n+   |\n+LL |     s.1e1f32;\n+   |       ^^^^^^ invalid suffix `f32`\n+\n+error: suffixes on a tuple index are invalid\n+  --> $DIR/float-field.rs:45:7\n+   |\n+LL |     s.1.1f32;\n+   |       ^^^^^^ invalid suffix `f32`\n+\n+error: suffixes on a tuple index are invalid\n+  --> $DIR/float-field.rs:46:7\n+   |\n+LL |     s.1.1e1f32;\n+   |       ^^^^^^^^ invalid suffix `f32`\n+\n+error: unexpected token: `1e+f32`\n+  --> $DIR/float-field.rs:48:9\n+   |\n+LL |     { s.1e+f32; }\n+   |         ^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1e+f32`\n+  --> $DIR/float-field.rs:48:9\n+   |\n+LL |     { s.1e+f32; }\n+   |         ^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1e-f32`\n+  --> $DIR/float-field.rs:51:9\n+   |\n+LL |     { s.1e-f32; }\n+   |         ^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1e-f32`\n+  --> $DIR/float-field.rs:51:9\n+   |\n+LL |     { s.1e-f32; }\n+   |         ^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1e+1f32`\n+  --> $DIR/float-field.rs:54:9\n+   |\n+LL |     { s.1e+1f32; }\n+   |         ^^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1e+1f32`\n+  --> $DIR/float-field.rs:54:9\n+   |\n+LL |     { s.1e+1f32; }\n+   |         ^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1e-1f32`\n+  --> $DIR/float-field.rs:56:9\n+   |\n+LL |     { s.1e-1f32; }\n+   |         ^^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1e-1f32`\n+  --> $DIR/float-field.rs:56:9\n+   |\n+LL |     { s.1e-1f32; }\n+   |         ^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1.1e+1f32`\n+  --> $DIR/float-field.rs:58:9\n+   |\n+LL |     { s.1.1e+1f32; }\n+   |         ^^^^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1e+1f32`\n+  --> $DIR/float-field.rs:58:9\n+   |\n+LL |     { s.1.1e+1f32; }\n+   |         ^^^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error: unexpected token: `1.1e-1f32`\n+  --> $DIR/float-field.rs:60:9\n+   |\n+LL |     { s.1.1e-1f32; }\n+   |         ^^^^^^^^^\n+\n+error: expected one of `.`, `;`, `?`, `}`, or an operator, found `1.1e-1f32`\n+  --> $DIR/float-field.rs:60:9\n+   |\n+LL |     { s.1.1e-1f32; }\n+   |         ^^^^^^^^^ expected one of `.`, `;`, `?`, `}`, or an operator\n+\n+error[E0609]: no field `1e1` on type `S`\n+  --> $DIR/float-field.rs:6:7\n+   |\n+LL |     s.1e1;\n+   |       ^^^ unknown field\n+   |\n+   = note: available fields are: `0`, `1`\n+\n+error[E0609]: no field `1e1` on type `(u8, u8)`\n+  --> $DIR/float-field.rs:9:7\n+   |\n+LL |     s.1.1e1;\n+   |       ^^^^^\n+\n+error[E0609]: no field `0x1e1` on type `S`\n+  --> $DIR/float-field.rs:24:7\n+   |\n+LL |     s.0x1e1;\n+   |       ^^^^^ unknown field\n+   |\n+   = note: available fields are: `0`, `1`\n+\n+error[E0609]: no field `0x1` on type `S`\n+  --> $DIR/float-field.rs:25:7\n+   |\n+LL |     s.0x1.;\n+   |       ^^^^ unknown field\n+   |\n+   = note: available fields are: `0`, `1`\n+\n+error[E0609]: no field `0x1` on type `S`\n+  --> $DIR/float-field.rs:28:7\n+   |\n+LL |     s.0x1.1;\n+   |       ^^^^^ unknown field\n+   |\n+   = note: available fields are: `0`, `1`\n+\n+error[E0609]: no field `0x1` on type `S`\n+  --> $DIR/float-field.rs:30:7\n+   |\n+LL |     s.0x1.1e1;\n+   |       ^^^^^^^ unknown field\n+   |\n+   = note: available fields are: `0`, `1`\n+\n+error[E0609]: no field `0x1e` on type `S`\n+  --> $DIR/float-field.rs:34:7\n+   |\n+LL |     s.0x1e+1;\n+   |       ^^^^ unknown field\n+   |\n+   = note: available fields are: `0`, `1`\n+\n+error[E0609]: no field `0x1e` on type `S`\n+  --> $DIR/float-field.rs:35:7\n+   |\n+LL |     s.0x1e-1;\n+   |       ^^^^ unknown field\n+   |\n+   = note: available fields are: `0`, `1`\n+\n+error[E0609]: no field `1e1` on type `S`\n+  --> $DIR/float-field.rs:42:7\n+   |\n+LL |     s.1e1f32;\n+   |       ^^^^^^ unknown field\n+   |\n+   = note: available fields are: `0`, `1`\n+\n+error[E0609]: no field `f32` on type `(u8, u8)`\n+  --> $DIR/float-field.rs:44:9\n+   |\n+LL |     s.1.f32;\n+   |         ^^^\n+\n+error[E0609]: no field `1e1` on type `(u8, u8)`\n+  --> $DIR/float-field.rs:46:7\n+   |\n+LL |     s.1.1e1f32;\n+   |       ^^^^^^^^\n+\n+error: aborting due to 55 previous errors\n+\n+For more information about this error, try `rustc --explain E0609`."}, {"sha": "eda2bf48581a0b3ec03554938e436b0289d305a6", "filename": "src/test/ui/tuple/index-float.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Ftuple%2Findex-float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Ftuple%2Findex-float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Findex-float.rs?ref=ec1e7e9dbc83e57da7809cfc32c01e881b42555b", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+fn main() {\n+    let tuple = (((),),);\n+\n+    let _ = tuple. 0.0; // OK, whitespace\n+    let _ = tuple.0. 0; // OK, whitespace\n+\n+    let _ = tuple./*special cases*/0.0; // OK, comment\n+}"}, {"sha": "d36f6cfe3df7fd72697007e1934207680b08ee47", "filename": "src/test/ui/tuple/index-invalid.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Ftuple%2Findex-invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Ftuple%2Findex-invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Findex-invalid.rs?ref=ec1e7e9dbc83e57da7809cfc32c01e881b42555b", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let _ = (((),),).1.0; //~ ERROR no field `1` on type `(((),),)`\n+\n+    let _ = (((),),).0.1; //~ ERROR no field `1` on type `((),)`\n+\n+    let _ = (((),),).000.000; //~ ERROR no field `000` on type `(((),),)`\n+}"}, {"sha": "800b5a31d98ab93bb6626fcb80446a0fc66be77d", "filename": "src/test/ui/tuple/index-invalid.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Ftuple%2Findex-invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Ftuple%2Findex-invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Findex-invalid.stderr?ref=ec1e7e9dbc83e57da7809cfc32c01e881b42555b", "patch": "@@ -0,0 +1,21 @@\n+error[E0609]: no field `1` on type `(((),),)`\n+  --> $DIR/index-invalid.rs:2:22\n+   |\n+LL |     let _ = (((),),).1.0;\n+   |                      ^^^\n+\n+error[E0609]: no field `1` on type `((),)`\n+  --> $DIR/index-invalid.rs:4:22\n+   |\n+LL |     let _ = (((),),).0.1;\n+   |                      ^^^\n+\n+error[E0609]: no field `000` on type `(((),),)`\n+  --> $DIR/index-invalid.rs:6:22\n+   |\n+LL |     let _ = (((),),).000.000;\n+   |                      ^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0609`."}, {"sha": "bef4a69ab23c9ce67a64a660398888c1a3e5c62d", "filename": "src/test/ui/tuple/indexing-in-macro.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Ftuple%2Findexing-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Ftuple%2Findexing-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Findexing-in-macro.rs?ref=ec1e7e9dbc83e57da7809cfc32c01e881b42555b", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+\n+macro_rules! m {\n+    (.$l:literal) => {};\n+}\n+\n+m!(.0.0); // OK, `0.0` after a dot is still a float token.\n+\n+fn main() {}"}, {"sha": "a3232d6fc361e8a7de04ecbcc6dcdf68d58aff52", "filename": "src/test/ui/tuple/nested-index.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Ftuple%2Fnested-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1e7e9dbc83e57da7809cfc32c01e881b42555b/src%2Ftest%2Fui%2Ftuple%2Fnested-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Fnested-index.rs?ref=ec1e7e9dbc83e57da7809cfc32c01e881b42555b", "patch": "@@ -0,0 +1,12 @@\n+// run-pass\n+\n+fn main () {\n+    let n = (1, (2, 3)).1.1;\n+    assert_eq!(n, 3);\n+\n+    let n = (1, (2, (3, 4))).1.1.1;\n+    assert_eq!(n, 4);\n+\n+    // This is a range expression, not nested indexing.\n+    let _ = 0.0..1.1;\n+}"}, {"sha": "cd1a85a9d2442805413880f8f992a284604ed71e", "filename": "src/test/ui/tuple/tuple-float-index.fixed", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/daecab3a784f28082df90cebb204998051f3557d/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/daecab3a784f28082df90cebb204998051f3557d/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.fixed?ref=daecab3a784f28082df90cebb204998051f3557d", "patch": "@@ -1,5 +0,0 @@\n-// run-rustfix\n-\n-fn main () {\n-    ((1, (2, 3)).1).1; //~ ERROR unexpected token: `1.1`\n-}"}, {"sha": "1faabac2bcdac3b21b8c9ef8dd3889066441c2a8", "filename": "src/test/ui/tuple/tuple-float-index.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/daecab3a784f28082df90cebb204998051f3557d/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/daecab3a784f28082df90cebb204998051f3557d/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.rs?ref=daecab3a784f28082df90cebb204998051f3557d", "patch": "@@ -1,5 +0,0 @@\n-// run-rustfix\n-\n-fn main () {\n-    (1, (2, 3)).1.1; //~ ERROR unexpected token: `1.1`\n-}"}, {"sha": "a0ea0e0a30a725796e190c08369068ab4fee1684", "filename": "src/test/ui/tuple/tuple-float-index.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/daecab3a784f28082df90cebb204998051f3557d/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/daecab3a784f28082df90cebb204998051f3557d/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple%2Ftuple-float-index.stderr?ref=daecab3a784f28082df90cebb204998051f3557d", "patch": "@@ -1,11 +0,0 @@\n-error: unexpected token: `1.1`\n-  --> $DIR/tuple-float-index.rs:4:17\n-   |\n-LL |     (1, (2, 3)).1.1;\n-   |     ------------^^^\n-   |     |           |\n-   |     |           unexpected token\n-   |     help: try parenthesizing the first index: `((1, (2, 3)).1).1`\n-\n-error: aborting due to previous error\n-"}]}