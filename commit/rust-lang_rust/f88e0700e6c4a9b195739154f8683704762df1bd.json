{"sha": "f88e0700e6c4a9b195739154f8683704762df1bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4OGUwNzAwZTZjNGE5YjE5NTczOTE1NGY4NjgzNzA0NzYyZGYxYmQ=", "commit": {"author": {"name": "DJMcNab", "email": "36049421+DJMcNab@users.noreply.github.com", "date": "2018-12-08T16:02:23Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-12-08T16:28:10Z"}, "message": "Add a better text for hover and stop duplicating work done in approximatelly_resolve_symbol", "tree": {"sha": "f263d568056f88be01fbd6d4e67f967b71645b60", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f263d568056f88be01fbd6d4e67f967b71645b60"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f88e0700e6c4a9b195739154f8683704762df1bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f88e0700e6c4a9b195739154f8683704762df1bd", "html_url": "https://github.com/rust-lang/rust/commit/f88e0700e6c4a9b195739154f8683704762df1bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f88e0700e6c4a9b195739154f8683704762df1bd/comments", "author": {"login": "DJMcNab", "id": 36049421, "node_id": "MDQ6VXNlcjM2MDQ5NDIx", "avatar_url": "https://avatars.githubusercontent.com/u/36049421?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DJMcNab", "html_url": "https://github.com/DJMcNab", "followers_url": "https://api.github.com/users/DJMcNab/followers", "following_url": "https://api.github.com/users/DJMcNab/following{/other_user}", "gists_url": "https://api.github.com/users/DJMcNab/gists{/gist_id}", "starred_url": "https://api.github.com/users/DJMcNab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DJMcNab/subscriptions", "organizations_url": "https://api.github.com/users/DJMcNab/orgs", "repos_url": "https://api.github.com/users/DJMcNab/repos", "events_url": "https://api.github.com/users/DJMcNab/events{/privacy}", "received_events_url": "https://api.github.com/users/DJMcNab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d548d944fade78edd474433b2436bae3237737e", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d548d944fade78edd474433b2436bae3237737e", "html_url": "https://github.com/rust-lang/rust/commit/6d548d944fade78edd474433b2436bae3237737e"}], "stats": {"total": 128, "additions": 98, "deletions": 30}, "files": [{"sha": "07357fc84f8d953d5a1578a462e15079ce32f1bd", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f88e0700e6c4a9b195739154f8683704762df1bd/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88e0700e6c4a9b195739154f8683704762df1bd/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=f88e0700e6c4a9b195739154f8683704762df1bd", "patch": "@@ -323,6 +323,17 @@ impl AnalysisImpl {\n \n         Ok(symbol.docs(&file))\n     }\n+    pub fn doc_text_for(&self, file_id: FileId, symbol: FileSymbol) -> Cancelable<Option<String>> {\n+        let file = self.db.source_file(file_id);\n+        let result = match (symbol.description(&file), symbol.docs(&file)) {\n+            (Some(desc), Some(docs)) => Some(\"```rust\\n\".to_string() + &*desc + \"\\n```\\n\\n\" + &*docs),\n+            (Some(desc), None) => Some(\"```rust\\n\".to_string() + &*desc + \"\\n```\"),\n+            (None, Some(docs)) => Some(docs),\n+            _ => None,\n+        };\n+\n+        Ok(result)\n+    }\n \n     pub fn diagnostics(&self, file_id: FileId) -> Cancelable<Vec<Diagnostic>> {\n         let syntax = self.db.source_file(file_id);"}, {"sha": "d33f3e4ca89649de20e98c98d6bba7342c58e040", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f88e0700e6c4a9b195739154f8683704762df1bd/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88e0700e6c4a9b195739154f8683704762df1bd/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=f88e0700e6c4a9b195739154f8683704762df1bd", "patch": "@@ -236,7 +236,7 @@ impl Analysis {\n     pub fn approximately_resolve_symbol(\n         &self,\n         position: FilePosition,\n-    ) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n+    ) -> Cancelable<Option<(TextRange, Vec<(FileId, FileSymbol)>)>> {\n         self.imp.approximately_resolve_symbol(position)\n     }\n     pub fn find_all_refs(&self, position: FilePosition) -> Cancelable<Vec<(FileId, TextRange)>> {\n@@ -249,6 +249,9 @@ impl Analysis {\n     ) -> Cancelable<Option<String>> {\n         self.imp.doc_comment_for(file_id, symbol)\n     }\n+    pub fn doc_text_for(&self, file_id: FileId, symbol: FileSymbol) -> Cancelable<Option<String>> {\n+        self.imp.doc_text_for(file_id, symbol)\n+    }\n     pub fn parent_module(&self, position: FilePosition) -> Cancelable<Vec<(FileId, FileSymbol)>> {\n         self.imp.parent_module(position)\n     }"}, {"sha": "05ad687aeb61bdfb8763129bfc642b6baad5a95a", "filename": "crates/ra_analysis/tests/tests.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f88e0700e6c4a9b195739154f8683704762df1bd/crates%2Fra_analysis%2Ftests%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88e0700e6c4a9b195739154f8683704762df1bd/crates%2Fra_analysis%2Ftests%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Ftests%2Ftests.rs?ref=f88e0700e6c4a9b195739154f8683704762df1bd", "patch": "@@ -21,9 +21,9 @@ fn approximate_resolve_works_in_items() {\n     \",\n     );\n \n-    let symbols = analysis.approximately_resolve_symbol(pos).unwrap();\n+    let symbols = analysis.approximately_resolve_symbol(pos).unwrap().unwrap();\n     assert_eq_dbg(\n-        r#\"[(FileId(1), FileSymbol { name: \"Foo\", node_range: [0; 11), kind: STRUCT_DEF })]\"#,\n+        r#\"([23; 26), [(FileId(1), FileSymbol { name: \"Foo\", node_range: [0; 11), kind: STRUCT_DEF })])\"#,\n         &symbols,\n     );\n }\n@@ -39,9 +39,9 @@ fn test_resolve_module() {\n     \",\n     );\n \n-    let symbols = analysis.approximately_resolve_symbol(pos).unwrap();\n+    let symbols = analysis.approximately_resolve_symbol(pos).unwrap().unwrap();\n     assert_eq_dbg(\n-        r#\"[(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })]\"#,\n+        r#\"([4; 7), [(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })])\"#,\n         &symbols,\n     );\n \n@@ -54,9 +54,9 @@ fn test_resolve_module() {\n     \",\n     );\n \n-    let symbols = analysis.approximately_resolve_symbol(pos).unwrap();\n+    let symbols = analysis.approximately_resolve_symbol(pos).unwrap().unwrap();\n     assert_eq_dbg(\n-        r#\"[(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })]\"#,\n+        r#\"([4; 7), [(FileId(2), FileSymbol { name: \"foo\", node_range: [0; 0), kind: MODULE })])\"#,\n         &symbols,\n     );\n }"}, {"sha": "9e25decfbc311c6544c55c99aedcaeaba32b08cb", "filename": "crates/ra_editor/src/symbols.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/f88e0700e6c4a9b195739154f8683704762df1bd/crates%2Fra_editor%2Fsrc%2Fsymbols.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88e0700e6c4a9b195739154f8683704762df1bd/crates%2Fra_editor%2Fsrc%2Fsymbols.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fsymbols.rs?ref=f88e0700e6c4a9b195739154f8683704762df1bd", "patch": "@@ -50,6 +50,61 @@ impl FileSymbol {\n             })\n             .nth(0)\n     }\n+    /// Get a description of this node.\n+    ///\n+    /// e.g. `struct Name`, `enum Name`, `fn Name`\n+    pub fn description(&self, file: &SourceFileNode) -> Option<String> {\n+        // TODO: After type inference is done, add type information to improve the output\n+        file.syntax()\n+            .descendants()\n+            .filter(|node| node.kind() == self.kind && node.range() == self.node_range)\n+            .filter_map(|node: SyntaxNodeRef| {\n+                // TODO: Refactor to be have less repetition\n+                visitor()\n+                    .visit(|node: ast::FnDef| {\n+                        let mut string = \"fn \".to_string();\n+                        node.name()?.syntax().text().push_to(&mut string);\n+                        Some(string)\n+                    })\n+                    .visit(|node: ast::StructDef| {\n+                        let mut string = \"struct \".to_string();\n+                        node.name()?.syntax().text().push_to(&mut string);\n+                        Some(string)\n+                    })\n+                    .visit(|node: ast::EnumDef| {\n+                        let mut string = \"enum \".to_string();\n+                        node.name()?.syntax().text().push_to(&mut string);\n+                        Some(string)\n+                    })\n+                    .visit(|node: ast::TraitDef| {\n+                        let mut string = \"trait \".to_string();\n+                        node.name()?.syntax().text().push_to(&mut string);\n+                        Some(string)\n+                    })\n+                    .visit(|node: ast::Module| {\n+                        let mut string = \"mod \".to_string();\n+                        node.name()?.syntax().text().push_to(&mut string);\n+                        Some(string)\n+                    })\n+                    .visit(|node: ast::TypeDef| {\n+                        let mut string = \"type \".to_string();\n+                        node.name()?.syntax().text().push_to(&mut string);\n+                        Some(string)\n+                    })\n+                    .visit(|node: ast::ConstDef| {\n+                        let mut string = \"const \".to_string();\n+                        node.name()?.syntax().text().push_to(&mut string);\n+                        Some(string)\n+                    })\n+                    .visit(|node: ast::StaticDef| {\n+                        let mut string = \"static \".to_string();\n+                        node.name()?.syntax().text().push_to(&mut string);\n+                        Some(string)\n+                    })\n+                    .accept(node)?\n+            })\n+            .nth(0)\n+    }\n }\n \n pub fn file_symbols(file: &SourceFileNode) -> Vec<FileSymbol> {"}, {"sha": "7d9234045692d16dceb95f0a490b67b743401c24", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 22, "deletions": 21, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/f88e0700e6c4a9b195739154f8683704762df1bd/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88e0700e6c4a9b195739154f8683704762df1bd/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=f88e0700e6c4a9b195739154f8683704762df1bd", "patch": "@@ -204,7 +204,10 @@ pub fn handle_goto_definition(\n ) -> Result<Option<req::GotoDefinitionResponse>> {\n     let position = params.try_conv_with(&world)?;\n     let mut res = Vec::new();\n-    for (file_id, symbol) in world.analysis().approximately_resolve_symbol(position)? {\n+    for (file_id, symbol) in match world.analysis().approximately_resolve_symbol(position)? {\n+        None => return Ok(None),\n+        Some(it) => it.1,\n+    } {\n         let line_index = world.analysis().file_line_index(file_id);\n         let location = to_location(file_id, symbol.node_range, &world, &line_index)?;\n         res.push(location)\n@@ -504,33 +507,31 @@ pub fn handle_hover(\n     world: ServerWorld,\n     params: req::TextDocumentPositionParams,\n ) -> Result<Option<Hover>> {\n+    // TODO: Cut down on number of allocations\n     let position = params.try_conv_with(&world)?;\n     let line_index = world.analysis().file_line_index(position.file_id);\n-    let file = world.analysis().file_syntax(position.file_id);\n-\n-    for (file_id, symbol) in world.analysis().approximately_resolve_symbol(position)? {\n-        let comment = world.analysis.doc_comment_for(file_id, symbol)?;\n-\n-        if comment.is_some() {\n-            let range = match ra_syntax::algo::find_leaf_at_offset(file.syntax(), position.offset)\n-                .left_biased()\n-            {\n-                None => return Ok(None),\n-                Some(it) => it.range(),\n-            };\n-            let range = range.conv_with(&line_index);\n-            let contents = HoverContents::Scalar(MarkedString::String(comment.unwrap()));\n-\n-            return Ok(Some(Hover {\n-                contents,\n-                range: Some(range),\n-            }));\n+    let (range, resolved) = match world.analysis().approximately_resolve_symbol(position)? {\n+        None => return Ok(None),\n+        Some(it) => it,\n+    };\n+    let mut result = Vec::new();\n+    for (file_id, symbol) in resolved {\n+        if let Some(docs) = world.analysis().doc_text_for(file_id, symbol)? {\n+            result.push(docs);\n         }\n     }\n-\n+    let range = range.conv_with(&line_index);\n+    if result.len() > 0 {\n+        return Ok(Some(Hover {\n+            contents: HoverContents::Scalar(MarkedString::String(result.join(\"\\n\\n---\\n\"))),\n+            range: Some(range),\n+        }));\n+    }\n     Ok(None)\n }\n \n+\n+/// Test doc comment\n pub fn handle_prepare_rename(\n     world: ServerWorld,\n     params: req::TextDocumentPositionParams,"}, {"sha": "3a869ad34b386c61cbbf8d044f050fe0e2f64f26", "filename": "crates/ra_syntax/src/syntax_kinds/generated.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f88e0700e6c4a9b195739154f8683704762df1bd/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f88e0700e6c4a9b195739154f8683704762df1bd/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs?ref=f88e0700e6c4a9b195739154f8683704762df1bd", "patch": "@@ -560,4 +560,3 @@ impl SyntaxKind {\n         Some(tok)\n     }\n }\n-"}, {"sha": "21f9444b1e7c0db7e43471dbdcd8508cbec8f283", "filename": "crates/ra_syntax/src/syntax_kinds/generated.rs.tera", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f88e0700e6c4a9b195739154f8683704762df1bd/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs.tera", "raw_url": "https://github.com/rust-lang/rust/raw/f88e0700e6c4a9b195739154f8683704762df1bd/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs.tera", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fsyntax_kinds%2Fgenerated.rs.tera?ref=f88e0700e6c4a9b195739154f8683704762df1bd", "patch": "@@ -75,4 +75,3 @@ impl SyntaxKind {\n         Some(tok)\n     }\n }\n-"}]}