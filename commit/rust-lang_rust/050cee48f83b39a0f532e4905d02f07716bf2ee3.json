{"sha": "050cee48f83b39a0f532e4905d02f07716bf2ee3", "node_id": "C_kwDOAAsO6NoAKDA1MGNlZTQ4ZjgzYjM5YTBmNTMyZTQ5MDVkMDJmMDc3MTZiZjJlZTM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-29T11:52:48Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-29T11:52:48Z"}, "message": "Replace a macro with a function", "tree": {"sha": "13de5ebed7ee03d48f416fd659f29b0c1c5d67b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13de5ebed7ee03d48f416fd659f29b0c1c5d67b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/050cee48f83b39a0f532e4905d02f07716bf2ee3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/050cee48f83b39a0f532e4905d02f07716bf2ee3", "html_url": "https://github.com/rust-lang/rust/commit/050cee48f83b39a0f532e4905d02f07716bf2ee3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/050cee48f83b39a0f532e4905d02f07716bf2ee3/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0", "html_url": "https://github.com/rust-lang/rust/commit/1ef685ea39280cc4a4a32f7c3c586d2ce946e8f0"}], "stats": {"total": 29, "additions": 13, "deletions": 16}, "files": [{"sha": "c5297bff193c3602d1559bfaa3d192fbd9549122", "filename": "compiler/rustc_serialize/src/leb128.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/050cee48f83b39a0f532e4905d02f07716bf2ee3/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050cee48f83b39a0f532e4905d02f07716bf2ee3/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fleb128.rs?ref=050cee48f83b39a0f532e4905d02f07716bf2ee3", "patch": "@@ -1,22 +1,19 @@\n-#![macro_use]\n-\n-macro_rules! max_leb128_len {\n-    ($int_ty:ty) => {\n-        // The longest LEB128 encoding for an integer uses 7 bits per byte.\n-        (std::mem::size_of::<$int_ty>() * 8 + 6) / 7\n-    };\n+/// Returns the longest LEB128 encoding for `T`, assuming `T` is an integer type\n+pub const fn max_leb128_len<T>() -> usize {\n+    // The longest LEB128 encoding for an integer uses 7 bits per byte.\n+    (std::mem::size_of::<T>() * 8 + 6) / 7\n }\n \n /// Returns the longest LEB128 encoding of all supported integer types.\n-pub const fn max_leb128_len() -> usize {\n-    max_leb128_len!(u128)\n+pub const fn max_max_leb128_len() -> usize {\n+    max_leb128_len::<u128>()\n }\n \n macro_rules! impl_write_unsigned_leb128 {\n     ($fn_name:ident, $int_ty:ty) => {\n         #[inline]\n         pub fn $fn_name(\n-            out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],\n+            out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len::<$int_ty>()],\n             mut value: $int_ty,\n         ) -> &[u8] {\n             let mut i = 0;\n@@ -90,7 +87,7 @@ macro_rules! impl_write_signed_leb128 {\n     ($fn_name:ident, $int_ty:ty) => {\n         #[inline]\n         pub fn $fn_name(\n-            out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len!($int_ty)],\n+            out: &mut [::std::mem::MaybeUninit<u8>; max_leb128_len::<$int_ty>()],\n             mut value: $int_ty,\n         ) -> &[u8] {\n             let mut i = 0;"}, {"sha": "7cd513e1eb92595290e22718eb3bf0753c3fab55", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/050cee48f83b39a0f532e4905d02f07716bf2ee3/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/050cee48f83b39a0f532e4905d02f07716bf2ee3/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=050cee48f83b39a0f532e4905d02f07716bf2ee3", "patch": "@@ -1,4 +1,4 @@\n-use crate::leb128::{self, max_leb128_len};\n+use crate::leb128::{self, max_max_leb128_len};\n use crate::serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::convert::TryInto;\n use std::fs::File;\n@@ -32,7 +32,7 @@ impl MemEncoder {\n \n macro_rules! write_leb128 {\n     ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{\n-        const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);\n+        const MAX_ENCODED_LEN: usize = $crate::leb128::max_leb128_len::<$int_ty>();\n         let old_len = $enc.data.len();\n \n         if MAX_ENCODED_LEN > $enc.data.capacity() - old_len {\n@@ -186,12 +186,12 @@ impl FileEncoder {\n     pub fn with_capacity<P: AsRef<Path>>(path: P, capacity: usize) -> io::Result<Self> {\n         // Require capacity at least as large as the largest LEB128 encoding\n         // here, so that we don't have to check or handle this on every write.\n-        assert!(capacity >= max_leb128_len());\n+        assert!(capacity >= max_max_leb128_len());\n \n         // Require capacity small enough such that some capacity checks can be\n         // done using guaranteed non-overflowing add rather than sub, which\n         // shaves an instruction off those code paths (on x86 at least).\n-        assert!(capacity <= usize::MAX - max_leb128_len());\n+        assert!(capacity <= usize::MAX - max_max_leb128_len());\n \n         // Create the file for reading and writing, because some encoders do both\n         // (e.g. the metadata encoder when -Zmeta-stats is enabled)\n@@ -411,7 +411,7 @@ impl Drop for FileEncoder {\n \n macro_rules! file_encoder_write_leb128 {\n     ($enc:expr, $value:expr, $int_ty:ty, $fun:ident) => {{\n-        const MAX_ENCODED_LEN: usize = max_leb128_len!($int_ty);\n+        const MAX_ENCODED_LEN: usize = $crate::leb128::max_leb128_len::<$int_ty>();\n \n         // We ensure this during `FileEncoder` construction.\n         debug_assert!($enc.capacity() >= MAX_ENCODED_LEN);"}]}