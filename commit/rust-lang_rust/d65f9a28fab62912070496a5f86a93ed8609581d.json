{"sha": "d65f9a28fab62912070496a5f86a93ed8609581d", "node_id": "C_kwDOAAsO6NoAKGQ2NWY5YTI4ZmFiNjI5MTIwNzA0OTZhNWY4NmE5M2VkODYwOTU4MWQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2022-03-12T13:14:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-12T13:14:31Z"}, "message": "Merge #11687 #11689\n\n11687: Highlight escape sequences in byte strings r=Veykril a=yipinliu\n\n#11605 \n\n11689: minor: Pad type inlay hints if no colons are requested r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: yipinliu <ypliu18@gmail.com>\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "c5fd689c78a9bab42771e2b3064d4cf2ca557105", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5fd689c78a9bab42771e2b3064d4cf2ca557105"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d65f9a28fab62912070496a5f86a93ed8609581d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiLJy3CRBK7hj4Ov3rIwAAjxsIAJXTdkhI5l7AJTP5x5E3q/Mp\ns8R4VCj8eldtTBB6L6woG/hXv0FMvn8RglWbNwE1NcOvh6i5tTp3Sre8lS+wlzEJ\nbLe3du97alDPNniRlpBiPqS8QNyxPBfcAeV14xqrRrylzPDmvylKahm2gdlSxURx\nyBGFRyUHakWpA5aC8eZAYxf9Gvtl2YBQ6c2Qil0SoPcCnjI4X+HCHEkog4v8to7N\nGmZLJHxc/Y1aP1SHWjeJVQ5mMndJMXFdz2v+3VoP97EpJjMGr7hPmB0/lLXJR523\n3Th91sfG0UqFrfa0OkqMLH/OOLUSCWkXwEcEyT9I43XoD8xC+mkJOyduZsPU0K0=\n=dEnb\n-----END PGP SIGNATURE-----\n", "payload": "tree c5fd689c78a9bab42771e2b3064d4cf2ca557105\nparent d75a46852a4273c74d2d383ffce528460d93bcf2\nparent c15ebcd84c8bc4e34226595a86fb1897714805fe\nparent 21af9ba4f0f56712a00ebce124bfbabd521a72af\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1647090871 +0000\ncommitter GitHub <noreply@github.com> 1647090871 +0000\n\nMerge #11687 #11689\n\n11687: Highlight escape sequences in byte strings r=Veykril a=yipinliu\n\n#11605 \n\n11689: minor: Pad type inlay hints if no colons are requested r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: yipinliu <ypliu18@gmail.com>\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d65f9a28fab62912070496a5f86a93ed8609581d", "html_url": "https://github.com/rust-lang/rust/commit/d65f9a28fab62912070496a5f86a93ed8609581d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d65f9a28fab62912070496a5f86a93ed8609581d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d75a46852a4273c74d2d383ffce528460d93bcf2", "url": "https://api.github.com/repos/rust-lang/rust/commits/d75a46852a4273c74d2d383ffce528460d93bcf2", "html_url": "https://github.com/rust-lang/rust/commit/d75a46852a4273c74d2d383ffce528460d93bcf2"}, {"sha": "c15ebcd84c8bc4e34226595a86fb1897714805fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/c15ebcd84c8bc4e34226595a86fb1897714805fe", "html_url": "https://github.com/rust-lang/rust/commit/c15ebcd84c8bc4e34226595a86fb1897714805fe"}, {"sha": "21af9ba4f0f56712a00ebce124bfbabd521a72af", "url": "https://api.github.com/repos/rust-lang/rust/commits/21af9ba4f0f56712a00ebce124bfbabd521a72af", "html_url": "https://github.com/rust-lang/rust/commit/21af9ba4f0f56712a00ebce124bfbabd521a72af"}], "stats": {"total": 82, "additions": 54, "deletions": 28}, "files": [{"sha": "e5d4ed8b92a0f21717faa3711e9d2ebddca15f2e", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 21, "deletions": 27, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/d65f9a28fab62912070496a5f86a93ed8609581d/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65f9a28fab62912070496a5f86a93ed8609581d/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=d65f9a28fab62912070496a5f86a93ed8609581d", "patch": "@@ -7,6 +7,7 @@ mod highlight;\n mod format;\n mod macro_;\n mod inject;\n+mod escape;\n \n mod html;\n #[cfg(test)]\n@@ -16,16 +17,13 @@ use hir::{InFile, Name, Semantics};\n use ide_db::RootDatabase;\n use rustc_hash::FxHashMap;\n use syntax::{\n-    ast::{self, IsString},\n-    AstNode, AstToken, NodeOrToken,\n-    SyntaxKind::*,\n-    SyntaxNode, TextRange, WalkEvent, T,\n+    ast, AstNode, AstToken, NodeOrToken, SyntaxKind::*, SyntaxNode, TextRange, WalkEvent, T,\n };\n \n use crate::{\n     syntax_highlighting::{\n-        format::highlight_format_string, highlights::Highlights, macro_::MacroHighlighter,\n-        tags::Highlight,\n+        escape::highlight_escape_string, format::highlight_format_string, highlights::Highlights,\n+        macro_::MacroHighlighter, tags::Highlight,\n     },\n     FileId, HlMod, HlTag,\n };\n@@ -371,29 +369,25 @@ fn traverse(\n         // string highlight injections, note this does not use the descended element as proc-macros\n         // can rewrite string literals which invalidates our indices\n         if let (Some(token), Some(descended_token)) = (token, descended_element.as_token()) {\n-            let string = ast::String::cast(token);\n-            let string_to_highlight = ast::String::cast(descended_token.clone());\n-            if let Some((string, expanded_string)) = string.zip(string_to_highlight) {\n-                if string.is_raw() {\n-                    if inject::ra_fixture(hl, sema, &string, &expanded_string).is_some() {\n-                        continue;\n+            if ast::String::can_cast(token.kind()) && ast::String::can_cast(descended_token.kind())\n+            {\n+                let string = ast::String::cast(token);\n+                let string_to_highlight = ast::String::cast(descended_token.clone());\n+                if let Some((string, expanded_string)) = string.zip(string_to_highlight) {\n+                    if string.is_raw() {\n+                        if inject::ra_fixture(hl, sema, &string, &expanded_string).is_some() {\n+                            continue;\n+                        }\n                     }\n+                    highlight_format_string(hl, &string, &expanded_string, range);\n+                    highlight_escape_string(hl, &string, range.start());\n+                }\n+            } else if ast::ByteString::can_cast(token.kind())\n+                && ast::ByteString::can_cast(descended_token.kind())\n+            {\n+                if let Some(byte_string) = ast::ByteString::cast(token) {\n+                    highlight_escape_string(hl, &byte_string, range.start());\n                 }\n-                highlight_format_string(hl, &string, &expanded_string, range);\n-                // Highlight escape sequences\n-                string.escaped_char_ranges(&mut |piece_range, char| {\n-                    if char.is_err() {\n-                        return;\n-                    }\n-\n-                    if string.text()[piece_range.start().into()..].starts_with('\\\\') {\n-                        hl.add(HlRange {\n-                            range: piece_range + range.start(),\n-                            highlight: HlTag::EscapeSequence.into(),\n-                            binding_hash: None,\n-                        });\n-                    }\n-                });\n             }\n         }\n "}, {"sha": "6a1236c793b83f737ac1b6450982529f42563be0", "filename": "crates/ide/src/syntax_highlighting/escape.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/d65f9a28fab62912070496a5f86a93ed8609581d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65f9a28fab62912070496a5f86a93ed8609581d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fescape.rs?ref=d65f9a28fab62912070496a5f86a93ed8609581d", "patch": "@@ -0,0 +1,25 @@\n+//! Syntax highlighting for escape sequences\n+use crate::syntax_highlighting::highlights::Highlights;\n+use crate::{HlRange, HlTag};\n+use syntax::ast::IsString;\n+use syntax::TextSize;\n+\n+pub(super) fn highlight_escape_string<T: IsString>(\n+    stack: &mut Highlights,\n+    string: &T,\n+    start: TextSize,\n+) {\n+    string.escaped_char_ranges(&mut |piece_range, char| {\n+        if char.is_err() {\n+            return;\n+        }\n+\n+        if string.text()[piece_range.start().into()..].starts_with('\\\\') {\n+            stack.add(HlRange {\n+                range: piece_range + start,\n+                highlight: HlTag::EscapeSequence.into(),\n+                binding_hash: None,\n+            });\n+        }\n+    });\n+}"}, {"sha": "3715164bbf79757d6ecfe69382e7229e8dd57829", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d65f9a28fab62912070496a5f86a93ed8609581d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/d65f9a28fab62912070496a5f86a93ed8609581d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=d65f9a28fab62912070496a5f86a93ed8609581d", "patch": "@@ -136,6 +136,9 @@\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal\">World\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"escape_sequence\">\\u{48}</span><span class=\"escape_sequence\">\\x65</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6C</span><span class=\"escape_sequence\">\\x6F</span><span class=\"string_literal\"> World\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n+    <span class=\"keyword\">let</span> <span class=\"punctuation\">_</span> <span class=\"operator\">=</span> <span class=\"string_literal\">\"</span><span class=\"escape_sequence\">\\x28</span><span class=\"escape_sequence\">\\x28</span><span class=\"escape_sequence\">\\x00</span><span class=\"escape_sequence\">\\x63</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal\">\"</span><span class=\"semicolon\">;</span>\n+    <span class=\"keyword\">let</span> <span class=\"punctuation\">_</span> <span class=\"operator\">=</span> <span class=\"string_literal\">b\"</span><span class=\"escape_sequence\">\\x28</span><span class=\"escape_sequence\">\\x28</span><span class=\"escape_sequence\">\\x00</span><span class=\"escape_sequence\">\\x63</span><span class=\"escape_sequence\">\\n</span><span class=\"string_literal\">\"</span><span class=\"semicolon\">;</span>\n+\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"escape_sequence\">\\x41</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> A <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println</span><span class=\"macro_bang\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">\u043d\u0438\u0447\u043e\u0441\u0438</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> \u043d\u0438\u0447\u043e\u0441\u0438 <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n "}, {"sha": "a8c69875e0c653e66d8b7b328fe7b43cc977ee50", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d65f9a28fab62912070496a5f86a93ed8609581d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65f9a28fab62912070496a5f86a93ed8609581d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=d65f9a28fab62912070496a5f86a93ed8609581d", "patch": "@@ -459,6 +459,9 @@ fn main() {\n     println!(\"Hello\\nWorld\");\n     println!(\"\\u{48}\\x65\\x6C\\x6C\\x6F World\");\n \n+    let _ = \"\\x28\\x28\\x00\\x63\\n\";\n+    let _ = b\"\\x28\\x28\\x00\\x63\\n\";\n+\n     println!(\"{\\x41}\", A = 92);\n     println!(\"{\u043d\u0438\u0447\u043e\u0441\u0438}\", \u043d\u0438\u0447\u043e\u0441\u0438 = 92);\n "}, {"sha": "2faef70072c872bae43ff98dd5c86b7a0929905a", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d65f9a28fab62912070496a5f86a93ed8609581d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65f9a28fab62912070496a5f86a93ed8609581d/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=d65f9a28fab62912070496a5f86a93ed8609581d", "patch": "@@ -437,7 +437,8 @@ pub(crate) fn inlay_hint(\n         },\n         tooltip: None,\n         padding_left: Some(match inlay_hint.kind {\n-            InlayKind::TypeHint | InlayKind::ParameterHint => false,\n+            InlayKind::TypeHint => !render_colons,\n+            InlayKind::ParameterHint => false,\n             InlayKind::ChainingHint => true,\n         }),\n         padding_right: Some(match inlay_hint.kind {"}]}