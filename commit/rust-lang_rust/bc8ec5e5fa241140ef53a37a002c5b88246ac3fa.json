{"sha": "bc8ec5e5fa241140ef53a37a002c5b88246ac3fa", "node_id": "C_kwDOAAsO6NoAKGJjOGVjNWU1ZmEyNDExNDBlZjUzYTM3YTAwMmM1Yjg4MjQ2YWMzZmE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-13T20:25:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-13T20:25:34Z"}, "message": "Rollup merge of #101266 - LuisCardosoOliveira:translation-rustcsession-pt3, r=davidtwco\n\ntranslations(rustc_session): migrates rustc_session to use SessionDiagnostic - Final\n\n# Description\nThis is the final part of the rustc_session https://github.com/rust-lang/rust/issues/100717#issuecomment-1220279883.\n\nPlease only review this [commit](https://github.com/rust-lang/rust/pull/101266/commits/a54534703774bfb9fc344f61d511760a7c43fe94). The other ones are from the PR https://github.com/rust-lang/rust/pull/101041# that is not yet merged.\n\nIn this PR, we migrate the file `output.rs`", "tree": {"sha": "46ab8a22b95b1cef2519621ab429aa27212b25cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/46ab8a22b95b1cef2519621ab429aa27212b25cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bc8ec5e5fa241140ef53a37a002c5b88246ac3fa", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjIOc+CRBK7hj4Ov3rIwAATrwIAJavJT8UGHyZLroZuq3OdfAH\np6BDYtJtNe7n71sSYWZGyPnmRp67gmpJxrFAi7iOtownJL3xX0lcrC/Iqmxcu96c\njdlmcA/Z9br5BMabUO2QpSYOh34RvEG6/90utQwkwWztUiup0OH46cJvgqQwNoGH\nM+9g9syMzJ7BtHAa6ehweEHyedfLu9O5toF722lvguscUqnVQ9AoszMtV0Y/gfWD\nRrENU2lygOdYVQ/gILv9AhKiZuMnMzTw3xoRhuuOjmnC0KVrrl8mqgjv3GyCFGoB\nL2G3hGEQOmlrZrT7zW/ilsgRwiUc2ayC/tNZ8cdygDAWfcBuTmJM/y+65d9M5Gk=\n=jE4V\n-----END PGP SIGNATURE-----\n", "payload": "tree 46ab8a22b95b1cef2519621ab429aa27212b25cd\nparent 1ce51982b8550c782ded466c1abff0d2b2e21c4e\nparent 329d5014b6a773d819e6cd56d5930a204bed7983\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1663100734 +0200\ncommitter GitHub <noreply@github.com> 1663100734 +0200\n\nRollup merge of #101266 - LuisCardosoOliveira:translation-rustcsession-pt3, r=davidtwco\n\ntranslations(rustc_session): migrates rustc_session to use SessionDiagnostic - Final\n\n# Description\nThis is the final part of the rustc_session https://github.com/rust-lang/rust/issues/100717#issuecomment-1220279883.\n\nPlease only review this [commit](https://github.com/rust-lang/rust/pull/101266/commits/a54534703774bfb9fc344f61d511760a7c43fe94). The other ones are from the PR https://github.com/rust-lang/rust/pull/101041# that is not yet merged.\n\nIn this PR, we migrate the file `output.rs`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bc8ec5e5fa241140ef53a37a002c5b88246ac3fa", "html_url": "https://github.com/rust-lang/rust/commit/bc8ec5e5fa241140ef53a37a002c5b88246ac3fa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bc8ec5e5fa241140ef53a37a002c5b88246ac3fa/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ce51982b8550c782ded466c1abff0d2b2e21c4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce51982b8550c782ded466c1abff0d2b2e21c4e", "html_url": "https://github.com/rust-lang/rust/commit/1ce51982b8550c782ded466c1abff0d2b2e21c4e"}, {"sha": "329d5014b6a773d819e6cd56d5930a204bed7983", "url": "https://api.github.com/repos/rust-lang/rust/commits/329d5014b6a773d819e6cd56d5930a204bed7983", "html_url": "https://github.com/rust-lang/rust/commit/329d5014b6a773d819e6cd56d5930a204bed7983"}], "stats": {"total": 144, "additions": 118, "deletions": 26}, "files": [{"sha": "76cae3c81e45182d192b23a5cc636402e93f060f", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bc8ec5e5fa241140ef53a37a002c5b88246ac3fa/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/bc8ec5e5fa241140ef53a37a002c5b88246ac3fa/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=bc8ec5e5fa241140ef53a37a002c5b88246ac3fa", "patch": "@@ -56,3 +56,13 @@ session_target_invalid_bits_size = {$err}\n session_target_stack_protector_not_supported = `-Z stack-protector={$stack_protector}` is not supported for target {$target_triple} and will be ignored\n \n session_split_debuginfo_unstable_platform = `-Csplit-debuginfo={$debuginfo}` is unstable on this platform\n+\n+session_file_is_not_writeable = output file {$file} is not writeable -- check its permissions\n+\n+session_crate_name_does_not_match = `--crate-name` and `#[crate_name]` are required to match, but `{$s}` != `{$name}`\n+\n+session_crate_name_invalid = crate names cannot start with a `-`, but `{$s}` has a leading hyphen\n+\n+session_crate_name_empty = crate name must not be empty\n+\n+session_invalid_character_in_create_name = invalid character `{$character}` in crate name: `{$crate_name}`"}, {"sha": "c36ca11fad6f214ea43a0216f6db5c4fb2d3d847", "filename": "compiler/rustc_errors/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc8ec5e5fa241140ef53a37a002c5b88246ac3fa/compiler%2Frustc_errors%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bc8ec5e5fa241140ef53a37a002c5b88246ac3fa/compiler%2Frustc_errors%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2FCargo.toml?ref=bc8ec5e5fa241140ef53a37a002c5b88246ac3fa", "patch": "@@ -13,9 +13,9 @@ rustc_serialize = { path = \"../rustc_serialize\" }\n rustc_span = { path = \"../rustc_span\" }\n rustc_macros = { path = \"../rustc_macros\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n+rustc_target = { path = \"../rustc_target\" }\n rustc_hir = { path = \"../rustc_hir\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n-rustc_target = { path = \"../rustc_target\" }\n unicode-width = \"0.1.4\"\n atty = \"0.2\"\n termcolor = \"1.0\""}, {"sha": "c6596ff24989985294b8a8fd665db56fae011c18", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/bc8ec5e5fa241140ef53a37a002c5b88246ac3fa/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8ec5e5fa241140ef53a37a002c5b88246ac3fa/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=bc8ec5e5fa241140ef53a37a002c5b88246ac3fa", "patch": "@@ -2,7 +2,7 @@ use std::num::NonZeroU32;\n \n use crate::cgu_reuse_tracker::CguReuse;\n use crate::{self as rustc_session, SessionDiagnostic};\n-use rustc_errors::{fluent, DiagnosticBuilder, Handler, MultiSpan};\n+use rustc_errors::{fluent, DiagnosticBuilder, ErrorGuaranteed, Handler, MultiSpan};\n use rustc_macros::SessionDiagnostic;\n use rustc_span::{Span, Symbol};\n use rustc_target::abi::TargetDataLayoutErrors;\n@@ -170,3 +170,52 @@ pub struct StackProtectorNotSupportedForTarget<'a> {\n pub struct SplitDebugInfoUnstablePlatform {\n     pub debuginfo: SplitDebuginfo,\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::file_is_not_writeable)]\n+pub struct FileIsNotWriteable<'a> {\n+    pub file: &'a std::path::Path,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::crate_name_does_not_match)]\n+pub struct CrateNameDoesNotMatch<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub s: &'a str,\n+    pub name: Symbol,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::crate_name_invalid)]\n+pub struct CrateNameInvalid<'a> {\n+    pub s: &'a str,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[diag(session::crate_name_empty)]\n+pub struct CrateNameEmpty {\n+    #[primary_span]\n+    pub span: Option<Span>,\n+}\n+\n+pub struct InvalidCharacterInCrateName<'a> {\n+    pub span: Option<Span>,\n+    pub character: char,\n+    pub crate_name: &'a str,\n+}\n+\n+impl crate::SessionDiagnostic<'_> for InvalidCharacterInCrateName<'_> {\n+    fn into_diagnostic(\n+        self,\n+        sess: &Handler,\n+    ) -> rustc_errors::DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        let mut diag = sess.struct_err(fluent::session::invalid_character_in_create_name);\n+        if let Some(sp) = self.span {\n+            diag.set_span(sp);\n+        }\n+        diag.set_arg(\"character\", self.character);\n+        diag.set_arg(\"crate_name\", self.crate_name);\n+        diag\n+    }\n+}"}, {"sha": "b9b243f6f0840f63e2da85cea10a8327e1ed0f42", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bc8ec5e5fa241140ef53a37a002c5b88246ac3fa/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8ec5e5fa241140ef53a37a002c5b88246ac3fa/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=bc8ec5e5fa241140ef53a37a002c5b88246ac3fa", "patch": "@@ -9,6 +9,8 @@\n #![feature(map_many_mut)]\n #![recursion_limit = \"256\"]\n #![allow(rustc::potential_query_instability)]\n+#![deny(rustc::untranslatable_diagnostic)]\n+#![deny(rustc::diagnostic_outside_of_impl)]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "2511bee46afebef62d59842f74d192194346a3af", "filename": "compiler/rustc_session/src/output.rs", "status": "modified", "additions": 11, "deletions": 24, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bc8ec5e5fa241140ef53a37a002c5b88246ac3fa/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8ec5e5fa241140ef53a37a002c5b88246ac3fa/compiler%2Frustc_session%2Fsrc%2Foutput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foutput.rs?ref=bc8ec5e5fa241140ef53a37a002c5b88246ac3fa", "patch": "@@ -1,5 +1,9 @@\n //! Related to out filenames of compilation (e.g. save analysis, binaries).\n use crate::config::{CrateType, Input, OutputFilenames, OutputType};\n+use crate::errors::{\n+    CrateNameDoesNotMatch, CrateNameEmpty, CrateNameInvalid, FileIsNotWriteable,\n+    InvalidCharacterInCrateName,\n+};\n use crate::Session;\n use rustc_ast as ast;\n use rustc_span::symbol::sym;\n@@ -30,11 +34,7 @@ pub fn out_filename(\n /// read-only file.  We should be consistent.\n pub fn check_file_is_writeable(file: &Path, sess: &Session) {\n     if !is_writeable(file) {\n-        sess.fatal(&format!(\n-            \"output file {} is not writeable -- check its \\\n-                            permissions\",\n-            file.display()\n-        ));\n+        sess.emit_fatal(FileIsNotWriteable { file });\n     }\n }\n \n@@ -61,11 +61,7 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n     if let Some(ref s) = sess.opts.crate_name {\n         if let Some((attr, name)) = attr_crate_name {\n             if name.as_str() != s {\n-                let msg = format!(\n-                    \"`--crate-name` and `#[crate_name]` are \\\n-                                   required to match, but `{s}` != `{name}`\"\n-                );\n-                sess.span_err(attr.span, &msg);\n+                sess.emit_err(CrateNameDoesNotMatch { span: attr.span, s, name });\n             }\n         }\n         return validate(s.clone(), None);\n@@ -77,11 +73,7 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n     if let Input::File(ref path) = *input {\n         if let Some(s) = path.file_stem().and_then(|s| s.to_str()) {\n             if s.starts_with('-') {\n-                let msg = format!(\n-                    \"crate names cannot start with a `-`, but \\\n-                                   `{s}` has a leading hyphen\"\n-                );\n-                sess.err(&msg);\n+                sess.emit_err(CrateNameInvalid { s });\n             } else {\n                 return validate(s.replace('-', \"_\"), None);\n             }\n@@ -94,15 +86,9 @@ pub fn find_crate_name(sess: &Session, attrs: &[ast::Attribute], input: &Input)\n pub fn validate_crate_name(sess: &Session, s: &str, sp: Option<Span>) {\n     let mut err_count = 0;\n     {\n-        let mut say = |s: &str| {\n-            match sp {\n-                Some(sp) => sess.span_err(sp, s),\n-                None => sess.err(s),\n-            };\n-            err_count += 1;\n-        };\n         if s.is_empty() {\n-            say(\"crate name must not be empty\");\n+            err_count += 1;\n+            sess.emit_err(CrateNameEmpty { span: sp });\n         }\n         for c in s.chars() {\n             if c.is_alphanumeric() {\n@@ -111,7 +97,8 @@ pub fn validate_crate_name(sess: &Session, s: &str, sp: Option<Span>) {\n             if c == '_' {\n                 continue;\n             }\n-            say(&format!(\"invalid character `{c}` in crate name: `{s}`\"));\n+            err_count += 1;\n+            sess.emit_err(InvalidCharacterInCrateName { span: sp, character: c, crate_name: s });\n         }\n     }\n "}, {"sha": "a001f87db00c63fa472a07fde2897b8f28dd659c", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/bc8ec5e5fa241140ef53a37a002c5b88246ac3fa/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bc8ec5e5fa241140ef53a37a002c5b88246ac3fa/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=bc8ec5e5fa241140ef53a37a002c5b88246ac3fa", "patch": "@@ -297,6 +297,8 @@ impl Session {\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -305,6 +307,8 @@ impl Session {\n         self.diagnostic().struct_span_warn(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn_with_expectation<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -314,6 +318,8 @@ impl Session {\n         self.diagnostic().struct_span_warn_with_expectation(sp, msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_warn_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -323,10 +329,14 @@ impl Session {\n         self.diagnostic().struct_span_warn_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_warn(msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_warn_with_expectation(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -335,6 +345,8 @@ impl Session {\n         self.diagnostic().struct_warn_with_expectation(msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_allow<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -343,10 +355,14 @@ impl Session {\n         self.diagnostic().struct_span_allow(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_allow(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n         self.diagnostic().struct_allow(msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_expect(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -355,6 +371,8 @@ impl Session {\n         self.diagnostic().struct_expect(msg, id)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -363,6 +381,8 @@ impl Session {\n         self.diagnostic().struct_span_err(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -373,13 +393,17 @@ impl Session {\n     }\n     // FIXME: This method should be removed (every error should have an associated error code).\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_err(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n         self.parse_sess.struct_err(msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_err_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -388,6 +412,8 @@ impl Session {\n         self.diagnostic().struct_err_with_code(msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_warn_with_code(\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n@@ -396,6 +422,8 @@ impl Session {\n         self.diagnostic().struct_warn_with_code(msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_fatal<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -404,6 +432,8 @@ impl Session {\n         self.diagnostic().struct_span_fatal(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -413,15 +443,21 @@ impl Session {\n         self.diagnostic().struct_span_fatal_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn struct_fatal(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, !> {\n         self.diagnostic().struct_fatal(msg)\n     }\n \n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().span_fatal(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -431,10 +467,14 @@ impl Session {\n         self.diagnostic().span_fatal_with_code(sp, msg, code)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn fatal(&self, msg: impl Into<DiagnosticMessage>) -> ! {\n         self.diagnostic().fatal(msg).raise()\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err_or_warn<S: Into<MultiSpan>>(\n         &self,\n         is_warning: bool,\n@@ -448,6 +488,8 @@ impl Session {\n         }\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err<S: Into<MultiSpan>>(\n         &self,\n         sp: S,\n@@ -456,6 +498,8 @@ impl Session {\n         self.diagnostic().span_err(sp, msg)\n     }\n     #[rustc_lint_diagnostics]\n+    #[allow(rustc::untranslatable_diagnostic)]\n+    #[allow(rustc::diagnostic_outside_of_impl)]\n     pub fn span_err_with_code<S: Into<MultiSpan>>(\n         &self,\n         sp: S,"}]}