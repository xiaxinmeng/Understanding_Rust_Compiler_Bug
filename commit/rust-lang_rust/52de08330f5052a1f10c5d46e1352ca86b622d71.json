{"sha": "52de08330f5052a1f10c5d46e1352ca86b622d71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyZGUwODMzMGY1MDUyYTFmMTBjNWQ0NmUxMzUyY2E4NmI2MjJkNzE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T20:56:19Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-10T20:56:19Z"}, "message": "dedupe", "tree": {"sha": "9f1adb749b2e4e344192e7060fcde8c748feede1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f1adb749b2e4e344192e7060fcde8c748feede1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/52de08330f5052a1f10c5d46e1352ca86b622d71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/52de08330f5052a1f10c5d46e1352ca86b622d71", "html_url": "https://github.com/rust-lang/rust/commit/52de08330f5052a1f10c5d46e1352ca86b622d71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/52de08330f5052a1f10c5d46e1352ca86b622d71/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf42a75f1e9a86247067611fadbed48ea9d379b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf42a75f1e9a86247067611fadbed48ea9d379b0", "html_url": "https://github.com/rust-lang/rust/commit/bf42a75f1e9a86247067611fadbed48ea9d379b0"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "6a609f10e8aa89d95660db7edc28ee122e7a8461", "filename": "crates/server/src/dispatch.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/52de08330f5052a1f10c5d46e1352ca86b622d71/crates%2Fserver%2Fsrc%2Fdispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52de08330f5052a1f10c5d46e1352ca86b622d71/crates%2Fserver%2Fsrc%2Fdispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fdispatch.rs?ref=52de08330f5052a1f10c5d46e1352ca86b622d71", "patch": "@@ -9,20 +9,17 @@ use drop_bomb::DropBomb;\n \n use ::{\n     Result,\n-    req::{Request, Notification},\n+    req::{ClientRequest, Notification},\n     io::{Io, RawMsg, RawResponse, RawRequest, RawNotification},\n };\n \n-pub struct Responder<R: Request> {\n+pub struct Responder<R: ClientRequest> {\n     id: u64,\n     bomb: DropBomb,\n     ph: PhantomData<R>,\n }\n \n-impl<R: Request> Responder<R>\n-    where\n-        R::Params: DeserializeOwned,\n-        R::Result: Serialize,\n+impl<R: ClientRequest> Responder<R>\n {\n     pub fn response(self, io: &mut Io, resp: Result<R::Result>) -> Result<()> {\n         match resp {\n@@ -52,11 +49,8 @@ impl<R: Request> Responder<R>\n }\n \n \n-fn parse_request_as<R>(raw: RawRequest) -> Result<::std::result::Result<(R::Params, Responder<R>), RawRequest>>\n-    where\n-        R: Request,\n-        R::Params: DeserializeOwned,\n-        R::Result: Serialize,\n+fn parse_request_as<R: ClientRequest>(raw: RawRequest)\n+    -> Result<::std::result::Result<(R::Params, Responder<R>), RawRequest>>\n {\n     if raw.method != R::METHOD {\n         return Ok(Err(raw));\n@@ -73,9 +67,7 @@ fn parse_request_as<R>(raw: RawRequest) -> Result<::std::result::Result<(R::Para\n \n pub fn handle_request<R, F>(req: &mut Option<RawRequest>, f: F) -> Result<()>\n     where\n-        R: Request,\n-        R::Params: DeserializeOwned,\n-        R::Result: Serialize,\n+        R: ClientRequest,\n         F: FnOnce(R::Params, Responder<R>) -> Result<()>\n {\n     match req.take() {\n@@ -90,11 +82,8 @@ pub fn handle_request<R, F>(req: &mut Option<RawRequest>, f: F) -> Result<()>\n     }\n }\n \n-pub fn expect_request<R>(io: &mut Io, raw: RawRequest) -> Result<Option<(R::Params, Responder<R>)>>\n-    where\n-        R: Request,\n-        R::Params: DeserializeOwned,\n-        R::Result: Serialize,\n+pub fn expect_request<R: ClientRequest>(io: &mut Io, raw: RawRequest)\n+    -> Result<Option<(R::Params, Responder<R>)>>\n {\n     let ret = match parse_request_as::<R>(raw)? {\n         Ok(x) => Some(x),"}, {"sha": "dfde8afb1698d5484e60e0567cae301042c6ad87", "filename": "crates/server/src/main.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/52de08330f5052a1f10c5d46e1352ca86b622d71/crates%2Fserver%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52de08330f5052a1f10c5d46e1352ca86b622d71/crates%2Fserver%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain.rs?ref=52de08330f5052a1f10c5d46e1352ca86b622d71", "patch": "@@ -28,12 +28,10 @@ use threadpool::ThreadPool;\n use crossbeam_channel::{bounded, Sender, Receiver};\n use flexi_logger::Logger;\n use languageserver_types::{TextDocumentItem, VersionedTextDocumentIdentifier, TextDocumentIdentifier};\n-use serde::{ser::Serialize, de::DeserializeOwned};\n use libanalysis::{WorldState, World};\n \n use ::{\n     io::{Io, RawMsg, RawRequest},\n-    req::Request,\n     handlers::{handle_syntax_tree, handle_extend_selection, publish_diagnostics},\n };\n \n@@ -261,17 +259,13 @@ fn main_loop(\n     }\n }\n \n-fn handle_request_on_threadpool<R>(\n+fn handle_request_on_threadpool<R: req::ClientRequest>(\n     req: &mut Option<RawRequest>,\n     pool: &ThreadPool,\n     world: &WorldState,\n     sender: &Sender<Thunk>,\n     f: fn(World, R::Params) -> Result<R::Result>,\n ) -> Result<()>\n-    where\n-        R: Request + Send + 'static,\n-        R::Params: DeserializeOwned + Send + 'static,\n-        R::Result: Serialize + Send + 'static,\n {\n     dispatch::handle_request::<R, _>(req, |params, resp| {\n         let world = world.snapshot();"}, {"sha": "10f0b291980fb456a996fcd6a2fb92068df300f5", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/52de08330f5052a1f10c5d46e1352ca86b622d71/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/52de08330f5052a1f10c5d46e1352ca86b622d71/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=52de08330f5052a1f10c5d46e1352ca86b622d71", "patch": "@@ -1,10 +1,29 @@\n+use serde::{ser::Serialize, de::DeserializeOwned};\n use languageserver_types::{TextDocumentIdentifier, Range};\n \n pub use languageserver_types::{\n     request::*, notification::*,\n-    InitializeResult, PublishDiagnosticsParams\n+    InitializeResult, PublishDiagnosticsParams,\n };\n \n+\n+pub trait ClientRequest: Send + 'static {\n+    type Params: DeserializeOwned + Send + 'static;\n+    type Result: Serialize + Send + 'static;\n+    const METHOD: &'static str;\n+}\n+\n+impl<T> ClientRequest for T\n+    where T: Request + Send + 'static,\n+          T::Params: DeserializeOwned + Send + 'static,\n+          T::Result: Serialize + Send + 'static,\n+{\n+    type Params = <T as Request>::Params;\n+    type Result = <T as Request>::Result;\n+    const METHOD: &'static str = <T as Request>::METHOD;\n+}\n+\n+\n pub enum SyntaxTree {}\n \n impl Request for SyntaxTree {"}]}