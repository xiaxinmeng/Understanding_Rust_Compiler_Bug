{"sha": "0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1", "node_id": "C_kwDOAAsO6NoAKDBlNjBkZjllZDE0MzljYjlkN2JjYzFhMDliZjJmYzg3ZDAzMzkzYjE", "commit": {"author": {"name": "Oleksii Lozovskyi", "email": "me@ilammy.net", "date": "2022-09-24T11:02:44Z"}, "committer": {"name": "Oleksii Lozovskyi", "email": "me@ilammy.net", "date": "2023-02-09T03:25:21Z"}, "message": "Parse \"-Z instrument-xray\" codegen option\n\nRecognize all bells and whistles that LLVM's XRay pass is capable of.\nThe always/never settings are a bit dumb without attributes but they're\nstill there. The default instruction count is chosen by the compiler,\nnot LLVM pass. We'll do it later.", "tree": {"sha": "7a7c2d687a42440c021c4190c01e13868832930b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a7c2d687a42440c021c4190c01e13868832930b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1", "html_url": "https://github.com/rust-lang/rust/commit/0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1/comments", "author": {"login": "ilammy", "id": 1256587, "node_id": "MDQ6VXNlcjEyNTY1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1256587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilammy", "html_url": "https://github.com/ilammy", "followers_url": "https://api.github.com/users/ilammy/followers", "following_url": "https://api.github.com/users/ilammy/following{/other_user}", "gists_url": "https://api.github.com/users/ilammy/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilammy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilammy/subscriptions", "organizations_url": "https://api.github.com/users/ilammy/orgs", "repos_url": "https://api.github.com/users/ilammy/repos", "events_url": "https://api.github.com/users/ilammy/events{/privacy}", "received_events_url": "https://api.github.com/users/ilammy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ilammy", "id": 1256587, "node_id": "MDQ6VXNlcjEyNTY1ODc=", "avatar_url": "https://avatars.githubusercontent.com/u/1256587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ilammy", "html_url": "https://github.com/ilammy", "followers_url": "https://api.github.com/users/ilammy/followers", "following_url": "https://api.github.com/users/ilammy/following{/other_user}", "gists_url": "https://api.github.com/users/ilammy/gists{/gist_id}", "starred_url": "https://api.github.com/users/ilammy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ilammy/subscriptions", "organizations_url": "https://api.github.com/users/ilammy/orgs", "repos_url": "https://api.github.com/users/ilammy/repos", "events_url": "https://api.github.com/users/ilammy/events{/privacy}", "received_events_url": "https://api.github.com/users/ilammy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef934d9b632b8ac00276558824664c104b92b5f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef934d9b632b8ac00276558824664c104b92b5f0", "html_url": "https://github.com/rust-lang/rust/commit/ef934d9b632b8ac00276558824664c104b92b5f0"}], "stats": {"total": 149, "additions": 146, "deletions": 3}, "files": [{"sha": "5daefadabba028466a61eef1d6a1e8de4da760c7", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1", "patch": "@@ -5,6 +5,7 @@ use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::{emitter::HumanReadableErrorType, registry, ColorConfig};\n use rustc_session::config::rustc_optgroups;\n use rustc_session::config::Input;\n+use rustc_session::config::InstrumentXRay;\n use rustc_session::config::TraitSolver;\n use rustc_session::config::{build_configuration, build_session_options, to_crate_config};\n use rustc_session::config::{\n@@ -755,6 +756,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(inline_mir_threshold, Some(123));\n     tracked!(instrument_coverage, Some(InstrumentCoverage::All));\n     tracked!(instrument_mcount, true);\n+    tracked!(instrument_xray, Some(InstrumentXRay::default()));\n     tracked!(link_only, true);\n     tracked!(llvm_plugins, vec![String::from(\"plugin_name\")]);\n     tracked!(location_detail, LocationDetail { file: true, line: false, column: false });"}, {"sha": "7d2fdf94baa367a4aadf412f6866f001dd186b22", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1", "patch": "@@ -174,6 +174,25 @@ pub enum InstrumentCoverage {\n     Off,\n }\n \n+/// Settings for `-Z instrument-xray` flag.\n+#[derive(Clone, Copy, Debug, Default, PartialEq, Eq, Hash)]\n+pub struct InstrumentXRay {\n+    /// `-Z instrument-xray=always`, force instrumentation\n+    pub always: bool,\n+    /// `-Z instrument-xray=never`, disable instrumentation\n+    pub never: bool,\n+    /// `-Z instrument-xray=ignore-loops`, ignore presence of loops,\n+    /// instrument functions based only on instruction count\n+    pub ignore_loops: bool,\n+    /// `-Z instrument-xray=instruction-threshold=N`, explicitly set instruction threshold\n+    /// for instrumentation, or `None` to use compiler's default\n+    pub instruction_threshold: Option<usize>,\n+    /// `-Z instrument-xray=skip-entry`, do not instrument function entry\n+    pub skip_entry: bool,\n+    /// `-Z instrument-xray=skip-exit`, do not instrument function exit\n+    pub skip_exit: bool,\n+}\n+\n #[derive(Clone, PartialEq, Hash, Debug)]\n pub enum LinkerPluginLto {\n     LinkerPlugin(PathBuf),\n@@ -2805,9 +2824,9 @@ impl PpMode {\n pub(crate) mod dep_tracking {\n     use super::{\n         BranchProtection, CFGuard, CFProtection, CrateType, DebugInfo, ErrorOutputType,\n-        InstrumentCoverage, LdImpl, LinkerPluginLto, LocationDetail, LtoCli, OomStrategy, OptLevel,\n-        OutputType, OutputTypes, Passes, SourceFileHashAlgorithm, SplitDwarfKind,\n-        SwitchWithOptPath, SymbolManglingVersion, TraitSolver, TrimmedDefPaths,\n+        InstrumentCoverage, InstrumentXRay, LdImpl, LinkerPluginLto, LocationDetail, LtoCli,\n+        OomStrategy, OptLevel, OutputType, OutputTypes, Passes, SourceFileHashAlgorithm,\n+        SplitDwarfKind, SwitchWithOptPath, SymbolManglingVersion, TraitSolver, TrimmedDefPaths,\n     };\n     use crate::lint;\n     use crate::options::WasiExecModel;\n@@ -2876,6 +2895,7 @@ pub(crate) mod dep_tracking {\n         CodeModel,\n         TlsModel,\n         InstrumentCoverage,\n+        InstrumentXRay,\n         CrateType,\n         MergeFunctions,\n         PanicStrategy,"}, {"sha": "a0a8a42575ef34a2c4e643d819ddfd9bb39dbb00", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1", "patch": "@@ -380,6 +380,7 @@ mod desc {\n     pub const parse_dump_mono_stats: &str = \"`markdown` (default) or `json`\";\n     pub const parse_instrument_coverage: &str =\n         \"`all` (default), `except-unused-generics`, `except-unused-functions`, or `off`\";\n+    pub const parse_instrument_xray: &str = \"either a boolean (`yes`, `no`, `on`, `off`, etc), or a comma separated list of settings: `always` or `never` (mutually exclusive), `ignore-loops`, `instruction-threshold=N`, `skip-entry`, `skip-exit`\";\n     pub const parse_unpretty: &str = \"`string` or `string=string`\";\n     pub const parse_treat_err_as_bug: &str = \"either no value or a number bigger than 0\";\n     pub const parse_trait_solver: &str =\n@@ -869,6 +870,68 @@ mod parse {\n         true\n     }\n \n+    pub(crate) fn parse_instrument_xray(\n+        slot: &mut Option<InstrumentXRay>,\n+        v: Option<&str>,\n+    ) -> bool {\n+        if v.is_some() {\n+            let mut bool_arg = None;\n+            if parse_opt_bool(&mut bool_arg, v) {\n+                *slot = if bool_arg.unwrap() { Some(InstrumentXRay::default()) } else { None };\n+                return true;\n+            }\n+        }\n+\n+        let mut options = slot.get_or_insert_default();\n+        let mut seen_always = false;\n+        let mut seen_never = false;\n+        let mut seen_ignore_loops = false;\n+        let mut seen_instruction_threshold = false;\n+        let mut seen_skip_entry = false;\n+        let mut seen_skip_exit = false;\n+        for option in v.into_iter().map(|v| v.split(',')).flatten() {\n+            match option {\n+                \"always\" if !seen_always && !seen_never => {\n+                    options.always = true;\n+                    options.never = false;\n+                    seen_always = true;\n+                }\n+                \"never\" if !seen_never && !seen_always => {\n+                    options.never = true;\n+                    options.always = false;\n+                    seen_never = true;\n+                }\n+                \"ignore-loops\" if !seen_ignore_loops => {\n+                    options.ignore_loops = true;\n+                    seen_ignore_loops = true;\n+                }\n+                option\n+                    if option.starts_with(\"instruction-threshold\")\n+                        && !seen_instruction_threshold =>\n+                {\n+                    let Some((\"instruction-threshold\", n)) = option.split_once('=') else {\n+                        return false;\n+                    };\n+                    match n.parse() {\n+                        Ok(n) => options.instruction_threshold = Some(n),\n+                        Err(_) => return false,\n+                    }\n+                    seen_instruction_threshold = true;\n+                }\n+                \"skip-entry\" if !seen_skip_entry => {\n+                    options.skip_entry = true;\n+                    seen_skip_entry = true;\n+                }\n+                \"skip-exit\" if !seen_skip_exit => {\n+                    options.skip_exit = true;\n+                    seen_skip_exit = true;\n+                }\n+                _ => return false,\n+            }\n+        }\n+        true\n+    }\n+\n     pub(crate) fn parse_treat_err_as_bug(slot: &mut Option<NonZeroUsize>, v: Option<&str>) -> bool {\n         match v {\n             Some(s) => {\n@@ -1397,6 +1460,16 @@ options! {\n         `=off` (default)\"),\n     instrument_mcount: bool = (false, parse_bool, [TRACKED],\n         \"insert function instrument code for mcount-based tracing (default: no)\"),\n+    instrument_xray: Option<InstrumentXRay> = (None, parse_instrument_xray, [TRACKED],\n+        \"insert function instrument code for XRay-based tracing (default: no)\n+         Optional extra settings:\n+         `=always`\n+         `=never`\n+         `=ignore-loops`\n+         `=instruction-threshold=N`\n+         `=skip-entry`\n+         `=skip-exit`\n+         Multiple options can be combined with commas.\"),\n     keep_hygiene_data: bool = (false, parse_bool, [UNTRACKED],\n         \"keep hygiene data after analysis (default: no)\"),\n     layout_seed: Option<u64> = (None, parse_opt_number, [TRACKED],"}, {"sha": "7fb33cd68b4a383c0e792f6d04fb2861a7c5a06b", "filename": "src/doc/unstable-book/src/compiler-flags/instrument-xray.md", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Finstrument-xray.md", "raw_url": "https://github.com/rust-lang/rust/raw/0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Finstrument-xray.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Finstrument-xray.md?ref=0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1", "patch": "@@ -0,0 +1,39 @@\n+# `instrument-xray`\n+\n+The tracking issue for this feature is: [#102921](https://github.com/rust-lang/rust/issues/102921).\n+\n+------------------------\n+\n+Enable generation of NOP sleds for XRay function tracing instrumentation.\n+For more information on XRay,\n+read [LLVM documentation](https://llvm.org/docs/XRay.html),\n+and/or the [XRay whitepaper](http://research.google.com/pubs/pub45287.html).\n+\n+Set the `-Z instrument-xray` compiler flag in order to enable XRay instrumentation.\n+\n+  - `-Z instrument-xray` \u2013 use the default settings\n+  - `-Z instrument-xray=skip-exit` \u2013 configure a custom setting\n+  - `-Z instrument-xray=ignore-loops,instruction-threshold=300` \u2013\n+    multiple settings separated by commas\n+\n+Supported options:\n+\n+  - `always` \u2013 force instrumentation of all functions\n+  - `never` \u2013 do no instrument any functions\n+  - `ignore-loops` \u2013 ignore presence of loops,\n+    instrument functions based only on instruction count\n+  - `instruction-threshold=10` \u2013 set a different instruction threshold for instrumentation\n+  - `skip-entry` \u2013 do no instrument function entry\n+  - `skip-exit` \u2013 do no instrument function exit\n+\n+The default settings are:\n+\n+  - instrument both entry & exit from functions\n+  - instrument functions with at least 200 instructions,\n+    or containing a non-trivial loop\n+\n+Note that `-Z instrument-xray` only enables generation of NOP sleds\n+which on their own don't do anything useful.\n+In order to actually trace the functions,\n+you will need to link a separate runtime library of your choice,\n+such as Clang's [XRay Runtime Library](https://www.llvm.org/docs/XRay.html#xray-runtime-library)."}, {"sha": "2169b89c9291e6a3ac6c57e70daf715d31d245a2", "filename": "tests/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1/tests%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1/tests%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fz-help.stdout?ref=0e60df9ed1439cb9d7bcc1a09bf2fc87d03393b1", "patch": "@@ -70,6 +70,15 @@\n         `=except-unused-functions`\n         `=off` (default)\n     -Z                       instrument-mcount=val -- insert function instrument code for mcount-based tracing (default: no)\n+    -Z                         instrument-xray=val -- insert function instrument code for XRay-based tracing (default: no)\n+         Optional extra settings:\n+         `=always`\n+         `=never`\n+         `=ignore-loops`\n+         `=instruction-threshold=N`\n+         `=skip-entry`\n+         `=skip-exit`\n+         Multiple options can be combined with commas.\n     -Z                       keep-hygiene-data=val -- keep hygiene data after analysis (default: no)\n     -Z                             layout-seed=val -- seed layout randomization\n     -Z                   link-native-libraries=val -- link native libraries in the linker invocation (default: yes)"}]}