{"sha": "30859d99f071121f6dc1148f9faef3b2b4e5037a", "node_id": "C_kwDOAAsO6NoAKDMwODU5ZDk5ZjA3MTEyMWY2ZGMxMTQ4ZjlmYWVmM2IyYjRlNTAzN2E", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-02-26T18:15:51Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-02-26T18:15:51Z"}, "message": "replace as_file_handle by as_any", "tree": {"sha": "2381117cd31b5cb09b5c1c8f5f708ee4d7b57a96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2381117cd31b5cb09b5c1c8f5f708ee4d7b57a96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/30859d99f071121f6dc1148f9faef3b2b4e5037a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/30859d99f071121f6dc1148f9faef3b2b4e5037a", "html_url": "https://github.com/rust-lang/rust/commit/30859d99f071121f6dc1148f9faef3b2b4e5037a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/30859d99f071121f6dc1148f9faef3b2b4e5037a/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b7294a4305e1687eed0c17e4a5d92e5619048746", "url": "https://api.github.com/repos/rust-lang/rust/commits/b7294a4305e1687eed0c17e4a5d92e5619048746", "html_url": "https://github.com/rust-lang/rust/commit/b7294a4305e1687eed0c17e4a5d92e5619048746"}], "stats": {"total": 52, "additions": 38, "deletions": 14}, "files": [{"sha": "1eca389e9842919ae99fcfce84ede03e902497bc", "filename": "src/tools/miri/src/shims/unix/fs.rs", "status": "modified", "additions": 38, "deletions": 14, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/30859d99f071121f6dc1148f9faef3b2b4e5037a/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/30859d99f071121f6dc1148f9faef3b2b4e5037a/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Funix%2Ffs.rs?ref=30859d99f071121f6dc1148f9faef3b2b4e5037a", "patch": "@@ -27,10 +27,6 @@ pub struct FileHandle {\n pub trait FileDescriptor: std::fmt::Debug + helpers::AsAny {\n     fn name(&self) -> &'static str;\n \n-    fn as_file_handle<'tcx>(&self) -> InterpResult<'tcx, &FileHandle> {\n-        throw_unsup_format!(\"{} cannot be used as FileHandle\", self.name());\n-    }\n-\n     fn read<'tcx>(\n         &mut self,\n         _communicate_allowed: bool,\n@@ -79,10 +75,6 @@ impl FileDescriptor for FileHandle {\n         \"FILE\"\n     }\n \n-    fn as_file_handle<'tcx>(&self) -> InterpResult<'tcx, &FileHandle> {\n-        Ok(self)\n-    }\n-\n     fn read<'tcx>(\n         &mut self,\n         communicate_allowed: bool,\n@@ -687,7 +679,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         } else if this.tcx.sess.target.os == \"macos\" && cmd == this.eval_libc_i32(\"F_FULLFSYNC\") {\n             if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n                 // FIXME: Support fullfsync for all FDs\n-                let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+                let FileHandle { file, writable } =\n+                    file_descriptor.as_any().downcast_ref::<FileHandle>().ok_or_else(|| {\n+                        err_unsup_format!(\n+                            \"`F_FULLFSYNC` is only supported on file-backed file descriptors\"\n+                        )\n+                    })?;\n                 let io_result = maybe_sync_file(file, *writable, File::sync_all);\n                 this.try_unwrap_io_result(io_result)\n             } else {\n@@ -1523,7 +1520,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n         Ok(Scalar::from_i32(\n             if let Some(file_descriptor) = this.machine.file_handler.handles.get_mut(&fd) {\n                 // FIXME: Support ftruncate64 for all FDs\n-                let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+                let FileHandle { file, writable } =\n+                    file_descriptor.as_any().downcast_ref::<FileHandle>().ok_or_else(|| {\n+                        err_unsup_format!(\n+                            \"`ftruncate64` is only supported on file-backed file descriptors\"\n+                        )\n+                    })?;\n                 if *writable {\n                     if let Ok(length) = length.try_into() {\n                         let result = file.set_len(length);\n@@ -1564,7 +1566,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n             // FIXME: Support fsync for all FDs\n-            let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+            let FileHandle { file, writable } =\n+                file_descriptor.as_any().downcast_ref::<FileHandle>().ok_or_else(|| {\n+                    err_unsup_format!(\"`fsync` is only supported on file-backed file descriptors\")\n+                })?;\n             let io_result = maybe_sync_file(file, *writable, File::sync_all);\n             this.try_unwrap_io_result(io_result)\n         } else {\n@@ -1586,7 +1591,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n             // FIXME: Support fdatasync for all FDs\n-            let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+            let FileHandle { file, writable } =\n+                file_descriptor.as_any().downcast_ref::<FileHandle>().ok_or_else(|| {\n+                    err_unsup_format!(\n+                        \"`fdatasync` is only supported on file-backed file descriptors\"\n+                    )\n+                })?;\n             let io_result = maybe_sync_file(file, *writable, File::sync_data);\n             this.try_unwrap_io_result(io_result)\n         } else {\n@@ -1631,7 +1641,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {\n             // FIXME: Support sync_data_range for all FDs\n-            let FileHandle { file, writable } = file_descriptor.as_file_handle()?;\n+            let FileHandle { file, writable } =\n+                file_descriptor.as_any().downcast_ref::<FileHandle>().ok_or_else(|| {\n+                    err_unsup_format!(\n+                        \"`sync_data_range` is only supported on file-backed file descriptors\"\n+                    )\n+                })?;\n             let io_result = maybe_sync_file(file, *writable, File::sync_data);\n             Ok(Scalar::from_i32(this.try_unwrap_io_result(io_result)?))\n         } else {\n@@ -1935,7 +1950,16 @@ impl FileMetadata {\n     ) -> InterpResult<'tcx, Option<FileMetadata>> {\n         let option = ecx.machine.file_handler.handles.get(&fd);\n         let file = match option {\n-            Some(file_descriptor) => &file_descriptor.as_file_handle()?.file,\n+            Some(file_descriptor) =>\n+                &file_descriptor\n+                    .as_any()\n+                    .downcast_ref::<FileHandle>()\n+                    .ok_or_else(|| {\n+                        err_unsup_format!(\n+                            \"obtaining metadata is only supported on file-backed file descriptors\"\n+                        )\n+                    })?\n+                    .file,\n             None => return ecx.handle_not_found().map(|_: i32| None),\n         };\n         let metadata = file.metadata();"}]}