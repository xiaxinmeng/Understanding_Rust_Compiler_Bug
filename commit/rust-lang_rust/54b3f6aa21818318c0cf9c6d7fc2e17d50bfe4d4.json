{"sha": "54b3f6aa21818318c0cf9c6d7fc2e17d50bfe4d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0YjNmNmFhMjE4MTgzMThjMGNmOWM2ZDdmYzJlMTdkNTBiZmU0ZDQ=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-03-31T20:48:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-03-31T20:48:29Z"}, "message": "Rollup merge of #40947 - stjepang:test-sort-random-cmp, r=alexcrichton\n\nTest sort algorithms using a random cmp function\n\nThis ensures that sorting using a broken comparison function doesn't panic nor fail in some other way (especially not segfault).\n\nr? @alexcrichton", "tree": {"sha": "3bd9adab1026631921ab10fca0efe84dc67b53aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bd9adab1026631921ab10fca0efe84dc67b53aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54b3f6aa21818318c0cf9c6d7fc2e17d50bfe4d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54b3f6aa21818318c0cf9c6d7fc2e17d50bfe4d4", "html_url": "https://github.com/rust-lang/rust/commit/54b3f6aa21818318c0cf9c6d7fc2e17d50bfe4d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54b3f6aa21818318c0cf9c6d7fc2e17d50bfe4d4/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9a9d7acaf74a57ad37cdd883c2f138ea59efc28", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9a9d7acaf74a57ad37cdd883c2f138ea59efc28", "html_url": "https://github.com/rust-lang/rust/commit/c9a9d7acaf74a57ad37cdd883c2f138ea59efc28"}, {"sha": "0e2d3d41bb42abe1c40585d2ed06aea2840e664f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e2d3d41bb42abe1c40585d2ed06aea2840e664f", "html_url": "https://github.com/rust-lang/rust/commit/0e2d3d41bb42abe1c40585d2ed06aea2840e664f"}], "stats": {"total": 28, "additions": 27, "deletions": 1}, "files": [{"sha": "c3e5304fb2b3544b855e7441d7ab32d88e0b7b09", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/54b3f6aa21818318c0cf9c6d7fc2e17d50bfe4d4/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b3f6aa21818318c0cf9c6d7fc2e17d50bfe4d4/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=54b3f6aa21818318c0cf9c6d7fc2e17d50bfe4d4", "patch": "@@ -383,9 +383,11 @@ fn test_reverse() {\n \n #[test]\n fn test_sort() {\n+    let mut rng = thread_rng();\n+\n     for len in (2..25).chain(500..510) {\n         for _ in 0..100 {\n-            let mut v: Vec<_> = thread_rng().gen_iter::<i32>().take(len).collect();\n+            let mut v: Vec<_> = rng.gen_iter::<i32>().take(len).collect();\n             let mut v1 = v.clone();\n \n             v.sort();\n@@ -399,6 +401,18 @@ fn test_sort() {\n         }\n     }\n \n+    // Sort using a completely random comparison function.\n+    // This will reorder the elements *somehow*, but won't panic.\n+    let mut v = [0; 500];\n+    for i in 0..v.len() {\n+        v[i] = i as i32;\n+    }\n+    v.sort_by(|_, _| *rng.choose(&[Less, Equal, Greater]).unwrap());\n+    v.sort();\n+    for i in 0..v.len() {\n+        assert_eq!(v[i], i as i32);\n+    }\n+\n     // Should not panic.\n     [0i32; 0].sort();\n     [(); 10].sort();"}, {"sha": "ec38345030fa5897423ff55d2f4f882dcff4c1ee", "filename": "src/libcoretest/slice.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/54b3f6aa21818318c0cf9c6d7fc2e17d50bfe4d4/src%2Flibcoretest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54b3f6aa21818318c0cf9c6d7fc2e17d50bfe4d4/src%2Flibcoretest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fslice.rs?ref=54b3f6aa21818318c0cf9c6d7fc2e17d50bfe4d4", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use core::cmp::Ordering::{Equal, Greater, Less};\n use core::slice::heapsort;\n use core::result::Result::{Ok, Err};\n use rand::{Rng, XorShiftRng};\n@@ -268,6 +269,17 @@ fn sort_unstable() {\n         }\n     }\n \n+    // Sort using a completely random comparison function.\n+    // This will reorder the elements *somehow*, but won't panic.\n+    for i in 0..v.len() {\n+        v[i] = i as i32;\n+    }\n+    v.sort_unstable_by(|_, _| *rng.choose(&[Less, Equal, Greater]).unwrap());\n+    v.sort_unstable();\n+    for i in 0..v.len() {\n+        assert_eq!(v[i], i as i32);\n+    }\n+\n     // Should not panic.\n     [0i32; 0].sort_unstable();\n     [(); 10].sort_unstable();"}]}