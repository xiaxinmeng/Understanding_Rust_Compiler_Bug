{"sha": "e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "node_id": "C_kwDOAAsO6NoAKGU2N2YzOWY4YmNiMTJkYzRjOTg1YWJlOTIyZDc4YzBkYWFkN2U1Y2Q", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-01T03:29:57Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-08T05:25:50Z"}, "message": "Introduce `DotDotPos`.\n\nThis shrinks `hir::Pat` from 88 to 72 bytes.", "tree": {"sha": "e1a8eafded47150b8e5d0387cec4a0603651a5d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1a8eafded47150b8e5d0387cec4a0603651a5d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "html_url": "https://github.com/rust-lang/rust/commit/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4314615ff87d6b07290efddd1d1132a50bff9b0d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4314615ff87d6b07290efddd1d1132a50bff9b0d", "html_url": "https://github.com/rust-lang/rust/commit/4314615ff87d6b07290efddd1d1132a50bff9b0d"}], "stats": {"total": 132, "additions": 85, "deletions": 47}, "files": [{"sha": "f9f273acb7e6fa2f7dcf4fb725c162bf556f6cf4", "filename": "compiler/rustc_ast_lowering/src/expr.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fexpr.rs?ref=e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "patch": "@@ -1128,8 +1128,11 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                         &mut ImplTraitContext::Disallowed(ImplTraitPosition::Path),\n                     );\n                     // Destructure like a tuple struct.\n-                    let tuple_struct_pat =\n-                        hir::PatKind::TupleStruct(qpath, pats, rest.map(|r| r.0));\n+                    let tuple_struct_pat = hir::PatKind::TupleStruct(\n+                        qpath,\n+                        pats,\n+                        hir::DotDotPos::new(rest.map(|r| r.0)),\n+                    );\n                     return self.pat_without_dbm(lhs.span, tuple_struct_pat);\n                 }\n             }\n@@ -1184,13 +1187,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             ExprKind::Tup(elements) => {\n                 let (pats, rest) =\n                     self.destructure_sequence(elements, \"tuple\", eq_sign_span, assignments);\n-                let tuple_pat = hir::PatKind::Tuple(pats, rest.map(|r| r.0));\n+                let tuple_pat = hir::PatKind::Tuple(pats, hir::DotDotPos::new(rest.map(|r| r.0)));\n                 return self.pat_without_dbm(lhs.span, tuple_pat);\n             }\n             ExprKind::Paren(e) => {\n                 // We special-case `(..)` for consistency with patterns.\n                 if let ExprKind::Range(None, None, RangeLimits::HalfOpen) = e.kind {\n-                    let tuple_pat = hir::PatKind::Tuple(&[], Some(0));\n+                    let tuple_pat = hir::PatKind::Tuple(&[], hir::DotDotPos::new(Some(0)));\n                     return self.pat_without_dbm(lhs.span, tuple_pat);\n                 } else {\n                     return self.destructure_assign_mut(e, eq_sign_span, assignments);"}, {"sha": "1ea76fdbfcbbbab5996de26b9a163f8229d37792", "filename": "compiler/rustc_ast_lowering/src/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpat.rs?ref=e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "patch": "@@ -116,7 +116,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         &mut self,\n         pats: &[P<Pat>],\n         ctx: &str,\n-    ) -> (&'hir [hir::Pat<'hir>], Option<usize>) {\n+    ) -> (&'hir [hir::Pat<'hir>], hir::DotDotPos) {\n         let mut elems = Vec::with_capacity(pats.len());\n         let mut rest = None;\n \n@@ -160,7 +160,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n             }\n         }\n \n-        (self.arena.alloc_from_iter(elems), rest.map(|(ddpos, _)| ddpos))\n+        (self.arena.alloc_from_iter(elems), hir::DotDotPos::new(rest.map(|(ddpos, _)| ddpos)))\n     }\n \n     /// Lower a slice pattern of form `[pat_0, ..., pat_n]` into"}, {"sha": "cc5aed6cb5482ac83e1a1e21726f792ef4929a4d", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 34, "deletions": 5, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "patch": "@@ -1059,6 +1059,35 @@ impl fmt::Display for RangeEnd {\n     }\n }\n \n+// Equivalent to `Option<usize>`. That type takes up 16 bytes on 64-bit, but\n+// this type only takes up 4 bytes, at the cost of being restricted to a\n+// maximum value of `u32::MAX - 1`. In practice, this is more than enough.\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, HashStable_Generic)]\n+pub struct DotDotPos(u32);\n+\n+impl DotDotPos {\n+    // Panics if n >= u32::MAX.\n+    pub fn new(n: Option<usize>) -> Self {\n+        match n {\n+            Some(n) => {\n+                assert!(n < u32::MAX as usize);\n+                Self(n as u32)\n+            }\n+            None => Self(u32::MAX),\n+        }\n+    }\n+\n+    pub fn as_opt_usize(&self) -> Option<usize> {\n+        if self.0 == u32::MAX { None } else { Some(self.0 as usize) }\n+    }\n+}\n+\n+impl fmt::Debug for DotDotPos {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        self.as_opt_usize().fmt(f)\n+    }\n+}\n+\n #[derive(Debug, HashStable_Generic)]\n pub enum PatKind<'hir> {\n     /// Represents a wildcard pattern (i.e., `_`).\n@@ -1075,9 +1104,9 @@ pub enum PatKind<'hir> {\n     Struct(QPath<'hir>, &'hir [PatField<'hir>], bool),\n \n     /// A tuple struct/variant pattern `Variant(x, y, .., z)`.\n-    /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position.\n+    /// If the `..` pattern fragment is present, then `DotDotPos` denotes its position.\n     /// `0 <= position <= subpats.len()`\n-    TupleStruct(QPath<'hir>, &'hir [Pat<'hir>], Option<usize>),\n+    TupleStruct(QPath<'hir>, &'hir [Pat<'hir>], DotDotPos),\n \n     /// An or-pattern `A | B | C`.\n     /// Invariant: `pats.len() >= 2`.\n@@ -1089,7 +1118,7 @@ pub enum PatKind<'hir> {\n     /// A tuple pattern (e.g., `(a, b)`).\n     /// If the `..` pattern fragment is present, then `Option<usize>` denotes its position.\n     /// `0 <= position <= subpats.len()`\n-    Tuple(&'hir [Pat<'hir>], Option<usize>),\n+    Tuple(&'hir [Pat<'hir>], DotDotPos),\n \n     /// A `box` pattern.\n     Box(&'hir Pat<'hir>),\n@@ -3486,8 +3515,8 @@ mod size_asserts {\n     static_assert_size!(ItemKind<'_>, 48);\n     static_assert_size!(Local<'_>, 64);\n     static_assert_size!(Param<'_>, 32);\n-    static_assert_size!(Pat<'_>, 88);\n-    static_assert_size!(PatKind<'_>, 64);\n+    static_assert_size!(Pat<'_>, 72);\n+    static_assert_size!(PatKind<'_>, 48);\n     static_assert_size!(Path<'_>, 48);\n     static_assert_size!(PathSegment<'_>, 56);\n     static_assert_size!(QPath<'_>, 24);"}, {"sha": "0c1819bb0c745ef45190480c5cb3460b5bd757b2", "filename": "compiler/rustc_hir/src/pat_util.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/compiler%2Frustc_hir%2Fsrc%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/compiler%2Frustc_hir%2Fsrc%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fpat_util.rs?ref=e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "patch": "@@ -35,7 +35,7 @@ pub trait EnumerateAndAdjustIterator {\n     fn enumerate_and_adjust(\n         self,\n         expected_len: usize,\n-        gap_pos: Option<usize>,\n+        gap_pos: hir::DotDotPos,\n     ) -> EnumerateAndAdjust<Self>\n     where\n         Self: Sized;\n@@ -45,15 +45,15 @@ impl<T: ExactSizeIterator> EnumerateAndAdjustIterator for T {\n     fn enumerate_and_adjust(\n         self,\n         expected_len: usize,\n-        gap_pos: Option<usize>,\n+        gap_pos: hir::DotDotPos,\n     ) -> EnumerateAndAdjust<Self>\n     where\n         Self: Sized,\n     {\n         let actual_len = self.len();\n         EnumerateAndAdjust {\n             enumerate: self.enumerate(),\n-            gap_pos: gap_pos.unwrap_or(expected_len),\n+            gap_pos: gap_pos.as_opt_usize().unwrap_or(expected_len),\n             gap_len: expected_len - actual_len,\n         }\n     }"}, {"sha": "35a58296e370e4aa0daf15caa39690d9dc7cc46c", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "patch": "@@ -1761,7 +1761,8 @@ impl<'a> State<'a> {\n             PatKind::TupleStruct(ref qpath, elts, ddpos) => {\n                 self.print_qpath(qpath, true);\n                 self.popen();\n-                if let Some(ddpos) = ddpos {\n+                if let Some(ddpos) = ddpos.as_opt_usize() {\n+                    let ddpos = ddpos as usize;\n                     self.commasep(Inconsistent, &elts[..ddpos], |s, p| s.print_pat(p));\n                     if ddpos != 0 {\n                         self.word_space(\",\");\n@@ -1804,7 +1805,7 @@ impl<'a> State<'a> {\n             }\n             PatKind::Tuple(elts, ddpos) => {\n                 self.popen();\n-                if let Some(ddpos) = ddpos {\n+                if let Some(ddpos) = ddpos.as_opt_usize() {\n                     self.commasep(Inconsistent, &elts[..ddpos], |s, p| s.print_pat(p));\n                     if ddpos != 0 {\n                         self.word_space(\",\");"}, {"sha": "9803cecd445916ac91719b177d8725473633879f", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "patch": "@@ -333,7 +333,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n         &mut self,\n         pats: &'tcx [hir::Pat<'tcx>],\n         expected_len: usize,\n-        gap_pos: Option<usize>,\n+        gap_pos: hir::DotDotPos,\n     ) -> Vec<FieldPat<'tcx>> {\n         pats.iter()\n             .enumerate_and_adjust(expected_len, gap_pos)"}, {"sha": "a7ce0f312af8009e46d5a211eaa1df30e20ffbb3", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "patch": "@@ -226,19 +226,16 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n         lhs: &hir::Pat<'_>,\n         res: Res,\n         pats: &[hir::Pat<'_>],\n-        dotdot: Option<usize>,\n+        dotdot: hir::DotDotPos,\n     ) {\n         let variant = match self.typeck_results().node_type(lhs.hir_id).kind() {\n             ty::Adt(adt, _) => adt.variant_of_res(res),\n             _ => span_bug!(lhs.span, \"non-ADT in tuple struct pattern\"),\n         };\n-        let first_n = pats.iter().enumerate().take(dotdot.unwrap_or(pats.len()));\n+        let dotdot = dotdot.as_opt_usize().unwrap_or(pats.len());\n+        let first_n = pats.iter().enumerate().take(dotdot);\n         let missing = variant.fields.len() - pats.len();\n-        let last_n = pats\n-            .iter()\n-            .enumerate()\n-            .skip(dotdot.unwrap_or(pats.len()))\n-            .map(|(idx, pat)| (idx + missing, pat));\n+        let last_n = pats.iter().enumerate().skip(dotdot).map(|(idx, pat)| (idx + missing, pat));\n         for (idx, pat) in first_n.chain(last_n) {\n             if let PatKind::Wild = pat.kind {\n                 continue;"}, {"sha": "52948cbb42891ba866569951ccca5929d54de04d", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "patch": "@@ -981,7 +981,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         pat: &'tcx Pat<'tcx>,\n         qpath: &'tcx hir::QPath<'tcx>,\n         subpats: &'tcx [Pat<'tcx>],\n-        ddpos: Option<usize>,\n+        ddpos: hir::DotDotPos,\n         expected: Ty<'tcx>,\n         def_bm: BindingMode,\n         ti: TopInfo<'tcx>,\n@@ -1066,7 +1066,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         // Type-check subpatterns.\n         if subpats.len() == variant.fields.len()\n-            || subpats.len() < variant.fields.len() && ddpos.is_some()\n+            || subpats.len() < variant.fields.len() && ddpos.as_opt_usize().is_some()\n         {\n             let ty::Adt(_, substs) = pat_ty.kind() else {\n                 bug!(\"unexpected pattern type {:?}\", pat_ty);\n@@ -1254,14 +1254,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         span: Span,\n         elements: &'tcx [Pat<'tcx>],\n-        ddpos: Option<usize>,\n+        ddpos: hir::DotDotPos,\n         expected: Ty<'tcx>,\n         def_bm: BindingMode,\n         ti: TopInfo<'tcx>,\n     ) -> Ty<'tcx> {\n         let tcx = self.tcx;\n         let mut expected_len = elements.len();\n-        if ddpos.is_some() {\n+        if ddpos.as_opt_usize().is_some() {\n             // Require known type only when `..` is present.\n             if let ty::Tuple(tys) = self.structurally_resolved_type(span, expected).kind() {\n                 expected_len = tys.len();"}, {"sha": "8d977606530819efa8130b87708010ad839d81f3", "filename": "src/test/ui/stats/hir-stats.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstats%2Fhir-stats.stderr?ref=e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "patch": "@@ -140,18 +140,18 @@ hir-stats - Expr                      32 ( 0.3%)             1\n hir-stats FnDecl                   120 ( 1.2%)             3            40\n hir-stats Attribute                128 ( 1.3%)             4            32\n hir-stats GenericArgs              144 ( 1.5%)             3            48\n-hir-stats Variant                  160 ( 1.6%)             2            80\n+hir-stats Variant                  160 ( 1.7%)             2            80\n hir-stats WherePredicate           168 ( 1.7%)             3            56\n hir-stats - BoundPredicate           168 ( 1.7%)             3\n hir-stats GenericBound             192 ( 2.0%)             4            48\n hir-stats - Trait                    192 ( 2.0%)             4\n hir-stats Block                    288 ( 3.0%)             6            48\n+hir-stats Pat                      360 ( 3.7%)             5            72\n+hir-stats - Wild                      72 ( 0.7%)             1\n+hir-stats - Struct                    72 ( 0.7%)             1\n+hir-stats - Binding                  216 ( 2.2%)             3\n hir-stats GenericParam             400 ( 4.1%)             5            80\n-hir-stats Pat                      440 ( 4.5%)             5            88\n-hir-stats - Wild                      88 ( 0.9%)             1\n-hir-stats - Struct                    88 ( 0.9%)             1\n-hir-stats - Binding                  264 ( 2.7%)             3\n-hir-stats Generics                 560 ( 5.7%)            10            56\n+hir-stats Generics                 560 ( 5.8%)            10            56\n hir-stats Ty                       720 ( 7.4%)            15            48\n hir-stats - Ptr                       48 ( 0.5%)             1\n hir-stats - Rptr                      48 ( 0.5%)             1\n@@ -162,17 +162,17 @@ hir-stats - Struct                    64 ( 0.7%)             1\n hir-stats - Match                     64 ( 0.7%)             1\n hir-stats - InlineAsm                 64 ( 0.7%)             1\n hir-stats - Lit                      128 ( 1.3%)             2\n-hir-stats - Block                    384 ( 3.9%)             6\n-hir-stats Item                     960 ( 9.8%)            12            80\n+hir-stats - Block                    384 ( 4.0%)             6\n+hir-stats Item                     960 ( 9.9%)            12            80\n hir-stats - Trait                     80 ( 0.8%)             1\n hir-stats - Enum                      80 ( 0.8%)             1\n hir-stats - ExternCrate               80 ( 0.8%)             1\n hir-stats - ForeignMod                80 ( 0.8%)             1\n hir-stats - Impl                      80 ( 0.8%)             1\n-hir-stats - Fn                       160 ( 1.6%)             2\n+hir-stats - Fn                       160 ( 1.7%)             2\n hir-stats - Use                      400 ( 4.1%)             5\n-hir-stats Path                   1_536 (15.7%)            32            48\n-hir-stats PathSegment            2_240 (23.0%)            40            56\n+hir-stats Path                   1_536 (15.9%)            32            48\n+hir-stats PathSegment            2_240 (23.1%)            40            56\n hir-stats ----------------------------------------------------------------\n-hir-stats Total                  9_760\n+hir-stats Total                  9_680\n hir-stats"}, {"sha": "bce49165e5b18060f96430be8356f5fb979d14ac", "filename": "src/tools/clippy/clippy_lints/src/equatable_if_let.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fequatable_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fequatable_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fequatable_if_let.rs?ref=e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "patch": "@@ -51,7 +51,9 @@ fn unary_pattern(pat: &Pat<'_>) -> bool {\n             false\n         },\n         PatKind::Struct(_, a, etc) => !etc && a.iter().all(|x| unary_pattern(x.pat)),\n-        PatKind::Tuple(a, etc) | PatKind::TupleStruct(_, a, etc) => !etc.is_some() && array_rec(a),\n+        PatKind::Tuple(a, etc) | PatKind::TupleStruct(_, a, etc) => {\n+            !etc.as_opt_usize().is_some() && array_rec(a)\n+        }\n         PatKind::Ref(x, _) | PatKind::Box(x) => unary_pattern(x),\n         PatKind::Path(_) | PatKind::Lit(_) => true,\n     }"}, {"sha": "93874b103b461d92bb06f73842e441b5e26d41b3", "filename": "src/tools/clippy/clippy_lints/src/matches/match_same_arms.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fmatch_same_arms.rs?ref=e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "patch": "@@ -248,7 +248,7 @@ impl<'a> NormalizedPat<'a> {\n                 } else {\n                     (None, adt.non_enum_variant())\n                 };\n-                let (front, back) = match wild_idx {\n+                let (front, back) = match wild_idx.as_opt_usize() {\n                     Some(i) => pats.split_at(i),\n                     None => (pats, [].as_slice()),\n                 };\n@@ -268,7 +268,7 @@ impl<'a> NormalizedPat<'a> {\n                     ty::Tuple(subs) => subs.len(),\n                     _ => return Self::Wild,\n                 };\n-                let (front, back) = match wild_idx {\n+                let (front, back) = match wild_idx.as_opt_usize() {\n                     Some(i) => pats.split_at(i),\n                     None => (pats, [].as_slice()),\n                 };"}, {"sha": "1bf1c4d1078952cab5deb3f2c756cfb78d1842b4", "filename": "src/tools/clippy/clippy_lints/src/matches/single_match.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmatches%2Fsingle_match.rs?ref=e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "patch": "@@ -200,6 +200,8 @@ fn form_exhaustive_matches<'a>(cx: &LateContext<'a>, ty: Ty<'a>, left: &Pat<'_>,\n             // We don't actually know the position and the presence of the `..` (dotdot) operator\n             // in the arms, so we need to evaluate the correct offsets here in order to iterate in\n             // both arms at the same time.\n+            let left_pos = left_pos.as_opt_usize();\n+            let right_pos = right_pos.as_opt_usize();\n             let len = max(\n                 left_in.len() + {\n                     if left_pos.is_some() { 1 } else { 0 }"}, {"sha": "569870ab2b7f41ae3d4b4b2fd53083ba3b71d9ed", "filename": "src/tools/clippy/clippy_lints/src/question_mark.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fquestion_mark.rs?ref=e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "patch": "@@ -122,7 +122,8 @@ fn check_if_let_some_or_err_and_early_return<'tcx>(cx: &LateContext<'tcx>, expr:\n     if_chain! {\n         if let Some(higher::IfLet { let_pat, let_expr, if_then, if_else }) = higher::IfLet::hir(cx, expr);\n         if !is_else_clause(cx.tcx, expr);\n-        if let PatKind::TupleStruct(ref path1, [field], None) = let_pat.kind;\n+        if let PatKind::TupleStruct(ref path1, [field], ddpos) = let_pat.kind;\n+        if ddpos.as_opt_usize().is_none();\n         if let PatKind::Binding(BindingAnnotation(by_ref, _), bind_id, ident, None) = field.kind;\n         let caller_ty = cx.typeck_results().expr_ty(let_expr);\n         let if_block = IfBlockType::IfLet(path1, caller_ty, ident.name, let_expr, if_then, if_else);"}, {"sha": "ce9ebad8c89a85e98687ef486fc410dca262993f", "filename": "src/tools/clippy/clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "patch": "@@ -19,10 +19,12 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, local: &'tcx Local<'_>) {\n         && cx.typeck_results().pat_ty(local.pat).is_unit()\n     {\n         if (local.ty.map_or(false, |ty| !matches!(ty.kind, TyKind::Infer))\n-            || matches!(local.pat.kind, PatKind::Tuple([], None)))\n+            || matches!(local.pat.kind, PatKind::Tuple([], ddpos) if ddpos.as_opt_usize().is_none()))\n             && expr_needs_inferred_result(cx, init)\n         {\n-            if !matches!(local.pat.kind, PatKind::Wild | PatKind::Tuple([], None)) {\n+            if !matches!(local.pat.kind, PatKind::Wild)\n+               && !matches!(local.pat.kind, PatKind::Tuple([], ddpos) if ddpos.as_opt_usize().is_none())\n+            {\n                 span_lint_and_then(\n                     cx,\n                     LET_UNIT_VALUE,"}, {"sha": "3cf043f22df5dc60e92265bb06133cc341a3b9d9", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67f39f8bcb12dc4c985abe922d78c0daad7e5cd/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=e67f39f8bcb12dc4c985abe922d78c0daad7e5cd", "patch": "@@ -1552,7 +1552,8 @@ pub fn iter_input_pats<'tcx>(decl: &FnDecl<'_>, body: &'tcx Body<'_>) -> impl It\n pub fn is_try<'tcx>(cx: &LateContext<'_>, expr: &'tcx Expr<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n     fn is_ok(cx: &LateContext<'_>, arm: &Arm<'_>) -> bool {\n         if_chain! {\n-            if let PatKind::TupleStruct(ref path, pat, None) = arm.pat.kind;\n+            if let PatKind::TupleStruct(ref path, pat, ddpos) = arm.pat.kind;\n+            if ddpos.as_opt_usize().is_none();\n             if is_lang_ctor(cx, path, ResultOk);\n             if let PatKind::Binding(_, hir_id, _, None) = pat[0].kind;\n             if path_to_local_id(arm.body, hir_id);"}]}